Swift::Void __swiftcall FormTextFieldAnalytics.recordEvent()()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void v20[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FormAnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C83D520;
  *(unsigned char *)(inited + 32) = 1;
  if (one-time initialization token for manager != -1) {
    swift_once();
  }
  *(void *)(inited + 40) = specialized FormAnalytics.documentType(from:)(*(unsigned char *)(v0 + 16));
  *(unsigned char *)(inited + 48) = 8;
  *(void *)(inited + 56) = specialized FormAnalytics.textFieldManuallyCreatedValue(from:)(*(unsigned char *)(v0 + 17));
  *(unsigned char *)(inited + 64) = 13;
  v2 = FormAnalyticsKeys.rawValue.getter(*(unsigned char *)(v0 + 18));
  v3 = MEMORY[0x21054D080](v2);
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v3;
  *(unsigned char *)(inited + 80) = 18;
  type metadata accessor for NSNumber();
  *(NSNumber *)(inited + 88) = NSNumber.init(BOOLeanLiteral:)(*(unsigned char *)(v0 + 19));
  *(unsigned char *)(inited + 96) = 19;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = MEMORY[0x21054D080](v4);
  swift_bridgeObjectRelease();
  *(void *)(inited + 104) = v5;
  *(unsigned char *)(inited + 112) = 20;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = MEMORY[0x21054D080](v6);
  swift_bridgeObjectRelease();
  *(void *)(inited + 120) = v7;
  *(unsigned char *)(inited + 128) = 21;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = MEMORY[0x21054D080](v8);
  swift_bridgeObjectRelease();
  *(void *)(inited + 136) = v9;
  *(unsigned char *)(inited + 144) = 22;
  v10 = *(unsigned __int8 *)(v0 + 64);
  if (v10 == 2) {
    v11 = 24;
  }
  else {
    v11 = 25;
  }
  if (v10 == 3) {
    v12 = 23;
  }
  else {
    v12 = v11;
  }
  v13 = FormAnalyticsKeys.rawValue.getter(v12);
  v14 = MEMORY[0x21054D080](v13);
  swift_bridgeObjectRelease();
  *(void *)(inited + 152) = v14;
  *(unsigned char *)(inited + 160) = 26;
  *(void *)(inited + 168) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v0 + 40));
  *(unsigned char *)(inited + 176) = 27;
  *(NSNumber *)(inited + 184) = NSNumber.init(BOOLeanLiteral:)(*(unsigned char *)(v0 + 48));
  *(unsigned char *)(inited + 192) = 28;
  *(NSNumber *)(inited + 200) = NSNumber.init(BOOLeanLiteral:)(*(unsigned char *)(v0 + 49));
  *(unsigned char *)(inited + 208) = 29;
  *(NSNumber *)(inited + 216) = NSNumber.init(BOOLeanLiteral:)(*(unsigned char *)(v0 + 50));
  *(unsigned char *)(inited + 224) = 30;
  *(NSNumber *)(inited + 232) = NSNumber.init(BOOLeanLiteral:)(*(unsigned char *)(v0 + 51));
  *(unsigned char *)(inited + 240) = 31;
  *(void *)(inited + 248) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v0 + 56));
  v15 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  v17 = (void *)MEMORY[0x21054D080](0xD000000000000036, 0x800000020C84E3F0);
  v18 = swift_allocObject();
  *(void *)(v18 + 16) = partial apply for implicit closure #1 in FormTextFieldAnalytics.recordEvent();
  *(void *)(v18 + 24) = v16;
  v20[4] = closure #1 in FormAnalytics.sendEventLazy(key:payload:)partial apply;
  v20[5] = v18;
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 1107296256;
  v20[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v20[3] = &block_descriptor_151;
  v19 = _Block_copy(v20);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v19);
  swift_release();
}

uint64_t FormTextFieldAnalytics.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FormTextFieldAnalytics()
{
  return self;
}

uint64_t FormTextFieldAnalytics.init()()
{
  *(_DWORD *)(v0 + 16) = 1066052;
  v1 = (void *)*MEMORY[0x263F83A58];
  *(void *)(v0 + 24) = *MEMORY[0x263F83A58];
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 56) = 0;
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 48) = 0;
  id v2 = v1;
  return v0;
}

uint64_t FormPageAnalytics.__deallocating_deinit()
{
  outlined destroy of weak AnyContainerCanvasElementView?(v0 + 120);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FormPageAnalytics()
{
  return self;
}

uint64_t FormPageAnalytics.init()()
{
  *(_DWORD *)(v0 + 16) = 1140850756;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  swift_unknownObjectWeakInit();
  return v0;
}

uint64_t Dictionary<>.pageAnalytics()(uint64_t a1)
{
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: FormPageAnalytics));
  uint64_t v2 = MEMORY[0x270FA5388](v47);
  v46 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v45 = (uint64_t)&v38 - v5;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  v44 = (char *)&v38 - v7;
  MEMORY[0x270FA5388](v6);
  v43 = (char *)&v38 - v8;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v51 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = specialized Dictionary.startIndex.getter(a1);
    uint64_t v12 = result;
    uint64_t v13 = 0;
    uint64_t v14 = a1 + 64;
    char v15 = *(unsigned char *)(a1 + 32);
    uint64_t v39 = a1 + 80;
    uint64_t v40 = v9;
    uint64_t v50 = a1;
    uint64_t v41 = v11;
    uint64_t v42 = a1 + 64;
    while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << v15)
    {
      unint64_t v17 = (unint64_t)v12 >> 6;
      if ((*(void *)(v14 + 8 * ((unint64_t)v12 >> 6)) & (1 << v12)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a1 + 36) != v11) {
        goto LABEL_23;
      }
      uint64_t v48 = v13;
      uint64_t v49 = 1 << v12;
      uint64_t v18 = v47;
      uint64_t v19 = *(int *)(v47 + 48);
      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t v21 = type metadata accessor for CRKeyPath();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = v22;
      v24 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
      uint64_t v25 = (uint64_t)v43;
      v24(v43, v20 + *(void *)(v22 + 72) * v12, v21);
      uint64_t v26 = *(void *)(*(void *)(v50 + 56) + 8 * v12);
      *(void *)(v25 + v19) = v26;
      v27 = v44;
      v24(v44, v25, v21);
      *(void *)&v27[*(int *)(v18 + 48)] = v26;
      uint64_t v28 = (uint64_t)v27;
      uint64_t v29 = v45;
      outlined init with take of (key: CRKeyPath, value: FormPageAnalytics)(v28, v45);
      swift_retain_n();
      outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for (key: CRKeyPath, value: FormPageAnalytics));
      uint64_t v30 = *(int *)(v18 + 48);
      v31 = v46;
      v24(v46, v29, v21);
      *(void *)&v31[v30] = *(void *)(v29 + v30);
      v32 = *(void (**)(char *, uint64_t))(v23 + 8);
      swift_retain();
      v32(v31, v21);
      a1 = v50;
      outlined destroy of StocksKitCurrencyCache.Provider?(v29, &demangling cache variable for type metadata for (key: CRKeyPath, value: FormPageAnalytics));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      char v15 = *(unsigned char *)(a1 + 32);
      unint64_t v16 = 1 << v15;
      if (v12 >= 1 << v15) {
        goto LABEL_24;
      }
      uint64_t v14 = v42;
      uint64_t v33 = *(void *)(v42 + 8 * v17);
      if ((v33 & v49) == 0) {
        goto LABEL_25;
      }
      LODWORD(v11) = v41;
      if (*(_DWORD *)(a1 + 36) != v41) {
        goto LABEL_26;
      }
      unint64_t v34 = v33 & (-2 << (v12 & 0x3F));
      if (v34)
      {
        unint64_t v16 = __clz(__rbit64(v34)) | v12 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v35 = v17 + 1;
        unint64_t v36 = (v16 + 63) >> 6;
        if (v17 + 1 < v36)
        {
          unint64_t v37 = *(void *)(v42 + 8 * v35);
          if (v37)
          {
LABEL_18:
            unint64_t v16 = __clz(__rbit64(v37)) + (v35 << 6);
          }
          else
          {
            while (v36 - 2 != v17)
            {
              unint64_t v37 = *(void *)(v39 + 8 * v17++);
              if (v37)
              {
                unint64_t v35 = v17 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v13 = v48 + 1;
      uint64_t v12 = v16;
      if (v48 + 1 == v40) {
        return v51;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

unint64_t one-time initialization function for manager()
{
  type metadata accessor for FormAnalytics();
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 791357252;
  *(_WORD *)(v0 + 20) = 0;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 24) = result;
  static FormAnalytics.manager = v0;
  return result;
}

unint64_t FormAnalytics.merge(_:for:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x210550400](a1 + 120);
  uint64_t v11 = (void *)MEMORY[0x263F8EED0];
  if (v10)
  {
    uint64_t v12 = v10;
    uint64_t v48 = v9;
    FormFillingView.calculateCountTextFieldsUsed(with:)();
    FormFillingView.calculateCountTextFieldsWithAutofillUsedExplicitly(with:)();
    unint64_t result = AnyCanvas.formFieldElements.getter();
    unint64_t v14 = result;
    uint64_t v55 = MEMORY[0x263F8EE78];
    uint64_t v50 = v2;
    uint64_t v51 = v6;
    uint64_t v49 = v7;
    if (result >> 62)
    {
      unint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v15 = result;
    }
    else
    {
      uint64_t v15 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v52 = a2;
    uint64_t v53 = v12;
    if (v15)
    {
      if (v15 < 1)
      {
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      for (uint64_t i = 0; i != v15; ++i)
      {
        if ((v14 & 0xC000000000000001) != 0) {
          unint64_t v17 = (void *)MEMORY[0x21054E050](i, v14);
        }
        else {
          unint64_t v17 = *(id *)(v14 + 8 * i + 32);
        }
        uint64_t v18 = v17;
        uint64_t v19 = (*(uint64_t (**)(void))((*v11 & *v17) + 0x2D0))();
        if (v19
          && (uint64_t v20 = (void *)v19,
              uint64_t v21 = *(void *)(v19 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics),
              swift_retain(),
              v20,
              LODWORD(v20) = *(unsigned __int8 *)(v21 + 64),
              swift_release(),
              v20 == 3))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v22 = v55;
      a2 = v52;
      if (v55 < 0) {
        goto LABEL_34;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = MEMORY[0x263F8EE78];
      if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
        goto LABEL_34;
      }
    }
    if ((v22 & 0x4000000000000000) == 0)
    {
      uint64_t v23 = *(void *)(v22 + 16);
      goto LABEL_20;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
LABEL_20:
    swift_release();
    uint64_t v24 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
    *(void *)(*(void *)(v53 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics) + 96) = v23;
    unint64_t result = AnyCanvas.formFieldElements.getter();
    unint64_t v25 = result;
    uint64_t v55 = MEMORY[0x263F8EE78];
    if (result >> 62)
    {
      unint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v26 = result;
      uint64_t v47 = v24;
      if (result) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v26 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v47 = v24;
      if (v26)
      {
LABEL_22:
        if (v26 < 1)
        {
LABEL_62:
          __break(1u);
          return result;
        }
        for (uint64_t j = 0; j != v26; ++j)
        {
          if ((v25 & 0xC000000000000001) != 0) {
            uint64_t v28 = (void *)MEMORY[0x21054E050](j, v25);
          }
          else {
            uint64_t v28 = *(id *)(v25 + 8 * j + 32);
          }
          uint64_t v29 = v28;
          uint64_t v30 = (*(uint64_t (**)(void))((*v11 & *v28) + 0x2D0))();
          if (v30
            && (v31 = (void *)v30,
                uint64_t v32 = *(void *)(v30 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics),
                swift_retain(),
                v31,
                LODWORD(v31) = *(unsigned __int8 *)(v32 + 64),
                swift_release(),
                v31 == 1))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v33 = v55;
        a2 = v52;
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x263F8EE78];
LABEL_37:
    uint64_t v3 = v50;
    uint64_t v6 = v51;
    uint64_t v9 = v48;
    uint64_t v7 = v49;
    if (v33 < 0 || (v33 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
    }
    else
    {
      uint64_t v34 = *(void *)(v33 + 16);
    }
    swift_release();
    *(void *)(*(void *)(v53 + v47) + 104) = v34;
    FormFillingView.calculateCountTextFieldsWithNoTextEntry(with:)();
    unint64_t result = swift_unknownObjectRelease();
    uint64_t v35 = *(void *)(a1 + 88);
    uint64_t v36 = *(void *)(a1 + 96);
    BOOL v37 = __OFADD__(v35, v36);
    uint64_t v38 = v35 + v36;
    if (!v37)
    {
      *(void *)(a1 + 80) = v38;
      goto LABEL_42;
    }
    __break(1u);
    goto LABEL_61;
  }
LABEL_42:
  if (FormAnalyticsKeys.rawValue.getter(*(unsigned char *)(a1 + 16)) == 0x746553746F6ELL && v39 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0) {
      *(unsigned char *)(v3 + 16) = *(unsigned char *)(a1 + 16);
    }
  }
  if (*(unsigned char *)(a1 + 17) == 1) {
    *(unsigned char *)(v3 + 20) = 1;
  }
  if (*(unsigned char *)(a1 + 18) == 1) {
    *(unsigned char *)(v3 + 21) = 1;
  }
  if (FormAnalyticsKeys.rawValue.getter(*(unsigned char *)(a1 + 19)) == 0xD000000000000020 && v42 == 0x800000020C84E810)
  {
    uint64_t v43 = swift_bridgeObjectRelease();
  }
  else
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v43 = swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      *(unsigned char *)(v3 + 19) = *(unsigned char *)(a1 + 19);
    }
  }
  (*(void (**)(uint64_t))((*v11 & *a2) + 0x300))(v43);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 24) = v54;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_endAccess();
}

uint64_t closure #1 in FormAnalytics.sendEventLazy(key:payload:)(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit17FormAnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit17fgh4OSo8i36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5j100OIegnrzr_TR03_s8a5Kit13cd35C13sendEventLazy3key7payloadyAA0cD4e10O_SDyAHSo8f31CGyXAtFSDySSAJGSgycfU_Q24_AJtAH_X5XEfU_Tf3nnnpf_nTf1cn_n(v1);
  swift_bridgeObjectRelease();
  if (v2[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
    uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE80];
  }
  uint64_t v6 = v3;
  uint64_t v4 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v6);
  swift_bridgeObjectRelease();
  return v6;
}

Swift::Void __swiftcall FormAnalytics.recordSessionEvent()()
{
  uint64_t v4 = v0;
  uint64_t v5 = v0 + 24;
  swift_beginAccess();
  if (*(void *)(*(void *)(v0 + 24) + 16))
  {
    uint64_t v6 = swift_bridgeObjectRetain();
    unint64_t v7 = Dictionary<>.pageAnalytics()(v6);
    uint64_t inited = v7;
    if (v7 >> 62) {
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
    {
      if (v8 < 1) {
        goto LABEL_29;
      }
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      while (1)
      {
        uint64_t v9 = (inited & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v2, inited) : swift_retain();
        uint64_t v10 = *(void *)(v9 + 40);
        swift_release();
        BOOL v11 = __OFADD__(v3, v10);
        v3 += v10;
        if (v11) {
          break;
        }
        if (v8 == ++v2) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
    }
    uint64_t v3 = 0;
LABEL_16:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v13 = swift_bridgeObjectRetain();
      unint64_t v14 = Dictionary<>.pageAnalytics()(v13);
      uint64_t inited = v14;
      if (v14 >> 62) {
        goto LABEL_30;
      }
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15)
      {
        while (v15 >= 1)
        {
          unint64_t v2 = 0;
          uint64_t v12 = 0;
          while (1)
          {
            uint64_t v16 = (inited & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v2, inited) : swift_retain();
            uint64_t v17 = *(void *)(v16 + 48);
            swift_release();
            BOOL v11 = __OFADD__(v12, v17);
            v12 += v17;
            if (v11) {
              break;
            }
            if (v15 == ++v2) {
              goto LABEL_32;
            }
          }
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          swift_bridgeObjectRetain();
          uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
          if (!v15) {
            goto LABEL_31;
          }
        }
        goto LABEL_263;
      }
LABEL_31:
      uint64_t v12 = 0;
LABEL_32:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v12 = 0;
  }
  if (__OFADD__(v3, v12)) {
    goto LABEL_53;
  }
  uint64_t v130 = v3 + v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FormAnalyticsKeys, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C83D530;
  *(unsigned char *)(inited + 32) = 37;
  *(void *)(inited + 40) = specialized FormAnalytics.documentType(from:)(*(unsigned char *)(v0 + 16));
  *(unsigned char *)(inited + 48) = 38;
  int v18 = *(unsigned __int8 *)(v0 + 17);
  if (v18 == 41) {
    uint64_t v19 = 2;
  }
  else {
    uint64_t v19 = v18 == 40;
  }
  *(void *)(inited + 56) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v19);
  *(unsigned char *)(inited + 64) = 42;
  int v20 = *(unsigned __int8 *)(v4 + 18);
  if (v20 == 45) {
    uint64_t v21 = 2;
  }
  else {
    uint64_t v21 = v20 == 44;
  }
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v21);
  *(unsigned char *)(inited + 80) = 46;
  *(void *)(inited + 88) = specialized FormAnalytics.formFillingModeEntryModality(from:)(*(unsigned char *)(v4 + 19));
  *(unsigned char *)(inited + 96) = 52;
  type metadata accessor for NSNumber();
  *(NSNumber *)(inited + 104) = NSNumber.init(BOOLeanLiteral:)(*(unsigned char *)(v4 + 20));
  *(unsigned char *)(inited + 112) = 53;
  *(NSNumber *)(inited + 120) = NSNumber.init(BOOLeanLiteral:)(*(unsigned char *)(v4 + 21));
  *(unsigned char *)(inited + 128) = 54;
  if (*(void *)(*(void *)(v4 + 24) + 16))
  {
    uint64_t v22 = swift_bridgeObjectRetain();
    unint64_t v23 = Dictionary<>.pageAnalytics()(v22);
    unint64_t v2 = v23;
    if (v23 >> 62) {
      goto LABEL_54;
    }
    uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v24)
    {
      while (v24 >= 1)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        while (1)
        {
          uint64_t v27 = (v2 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v25, v2) : swift_retain();
          uint64_t v28 = *(void *)(v27 + 80);
          swift_release();
          BOOL v11 = __OFADD__(v26, v28);
          v26 += v28;
          if (v11) {
            break;
          }
          if (v24 == ++v25) {
            goto LABEL_56;
          }
        }
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        swift_bridgeObjectRetain();
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
        if (!v24) {
          goto LABEL_55;
        }
      }
      __break(1u);
      goto LABEL_251;
    }
LABEL_55:
    uint64_t v26 = 0;
LABEL_56:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = 0;
  }
  *(NSNumber *)(inited + 136) = NSNumber.init(BOOLeanLiteral:)(v26 > 0);
  *(unsigned char *)(inited + 144) = 55;
  if (!*(void *)(*(void *)v5 + 16))
  {
    uint64_t v34 = 0;
    goto LABEL_73;
  }
  uint64_t v29 = swift_bridgeObjectRetain();
  unint64_t v30 = Dictionary<>.pageAnalytics()(v29);
  unint64_t v31 = v30;
  if (v30 >> 62) {
    goto LABEL_70;
  }
  uint64_t v32 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v32)
  {
LABEL_71:
    uint64_t v34 = 0;
LABEL_72:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_73:
    *(void *)(inited + 152) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v34);
    *(unsigned char *)(inited + 160) = 62;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v37 = swift_bridgeObjectRetain();
      unint64_t v38 = Dictionary<>.pageAnalytics()(v37);
      unint64_t v39 = v38;
      if (v38 >> 62) {
        goto LABEL_86;
      }
      uint64_t v40 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v40)
      {
        while (v40 >= 1)
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          while (1)
          {
            uint64_t v43 = (v39 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v41, v39) : swift_retain();
            uint64_t v44 = *(void *)(v43 + 72);
            swift_release();
            BOOL v11 = __OFADD__(v42, v44);
            v42 += v44;
            if (v11) {
              break;
            }
            if (v40 == ++v41) {
              goto LABEL_88;
            }
          }
          __break(1u);
LABEL_86:
          swift_bridgeObjectRetain();
          uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
          if (!v40) {
            goto LABEL_87;
          }
        }
        goto LABEL_252;
      }
LABEL_87:
      uint64_t v42 = 0;
LABEL_88:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v42 = 0;
    }
    *(void *)(inited + 168) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v42);
    *(unsigned char *)(inited + 176) = 57;
    *(void *)(inited + 184) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v130);
    *(unsigned char *)(inited + 192) = 58;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v45 = swift_bridgeObjectRetain();
      unint64_t v46 = Dictionary<>.pageAnalytics()(v45);
      unint64_t v47 = v46;
      if (v46 >> 62) {
        goto LABEL_102;
      }
      uint64_t v48 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v48)
      {
        while (v48 >= 1)
        {
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          while (1)
          {
            uint64_t v51 = (v47 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v49, v47) : swift_retain();
            uint64_t v52 = *(void *)(v51 + 40);
            swift_release();
            BOOL v11 = __OFADD__(v50, v52);
            v50 += v52;
            if (v11) {
              break;
            }
            if (v48 == ++v49) {
              goto LABEL_104;
            }
          }
          __break(1u);
LABEL_102:
          swift_bridgeObjectRetain();
          uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
          if (!v48) {
            goto LABEL_103;
          }
        }
        goto LABEL_253;
      }
LABEL_103:
      uint64_t v50 = 0;
LABEL_104:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v50 = 0;
    }
    *(void *)(inited + 200) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v50);
    *(unsigned char *)(inited + 208) = 59;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v53 = swift_bridgeObjectRetain();
      unint64_t v54 = Dictionary<>.pageAnalytics()(v53);
      unint64_t v55 = v54;
      if (v54 >> 62) {
        goto LABEL_118;
      }
      uint64_t v56 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v56)
      {
        while (v56 >= 1)
        {
          uint64_t v57 = 0;
          uint64_t v58 = 0;
          while (1)
          {
            uint64_t v59 = (v55 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v57, v55) : swift_retain();
            uint64_t v60 = *(void *)(v59 + 48);
            swift_release();
            BOOL v11 = __OFADD__(v58, v60);
            v58 += v60;
            if (v11) {
              break;
            }
            if (v56 == ++v57) {
              goto LABEL_120;
            }
          }
          __break(1u);
LABEL_118:
          swift_bridgeObjectRetain();
          uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
          if (!v56) {
            goto LABEL_119;
          }
        }
        goto LABEL_254;
      }
LABEL_119:
      uint64_t v58 = 0;
LABEL_120:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v58 = 0;
    }
    *(void *)(inited + 216) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v58);
    *(unsigned char *)(inited + 224) = 26;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v61 = swift_bridgeObjectRetain();
      unint64_t v62 = Dictionary<>.pageAnalytics()(v61);
      unint64_t v63 = v62;
      if (v62 >> 62) {
        goto LABEL_134;
      }
      uint64_t v64 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v64)
      {
        while (v64 >= 1)
        {
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          while (1)
          {
            uint64_t v67 = (v63 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v65, v63) : swift_retain();
            uint64_t v68 = *(void *)(v67 + 56);
            swift_release();
            BOOL v11 = __OFADD__(v66, v68);
            v66 += v68;
            if (v11) {
              break;
            }
            if (v64 == ++v65) {
              goto LABEL_136;
            }
          }
          __break(1u);
LABEL_134:
          swift_bridgeObjectRetain();
          uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
          if (!v64) {
            goto LABEL_135;
          }
        }
        goto LABEL_255;
      }
LABEL_135:
      uint64_t v66 = 0;
LABEL_136:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v66 = 0;
    }
    *(void *)(inited + 232) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v66);
    *(unsigned char *)(inited + 240) = 61;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v69 = swift_bridgeObjectRetain();
      unint64_t v70 = Dictionary<>.pageAnalytics()(v69);
      unint64_t v71 = v70;
      if (v70 >> 62) {
        goto LABEL_150;
      }
      uint64_t v72 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v72)
      {
        while (v72 >= 1)
        {
          uint64_t v73 = 0;
          uint64_t v74 = 0;
          while (1)
          {
            uint64_t v75 = (v71 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v73, v71) : swift_retain();
            uint64_t v76 = *(void *)(v75 + 64);
            swift_release();
            BOOL v11 = __OFADD__(v74, v76);
            v74 += v76;
            if (v11) {
              break;
            }
            if (v72 == ++v73) {
              goto LABEL_152;
            }
          }
          __break(1u);
LABEL_150:
          swift_bridgeObjectRetain();
          uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
          if (!v72) {
            goto LABEL_151;
          }
        }
        goto LABEL_256;
      }
LABEL_151:
      uint64_t v74 = 0;
LABEL_152:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v74 = 0;
    }
    *(void *)(inited + 248) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v74);
    *(unsigned char *)(inited + 256) = 56;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v77 = swift_bridgeObjectRetain();
      unint64_t v78 = Dictionary<>.pageAnalytics()(v77);
      unint64_t v79 = v78;
      if (v78 >> 62) {
        goto LABEL_166;
      }
      uint64_t v80 = *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v80)
      {
        while (v80 >= 1)
        {
          uint64_t v81 = 0;
          uint64_t v82 = 0;
          while (1)
          {
            uint64_t v83 = (v79 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v81, v79) : swift_retain();
            uint64_t v84 = *(void *)(v83 + 32);
            swift_release();
            BOOL v11 = __OFADD__(v82, v84);
            v82 += v84;
            if (v11) {
              break;
            }
            if (v80 == ++v81) {
              goto LABEL_168;
            }
          }
          __break(1u);
LABEL_166:
          swift_bridgeObjectRetain();
          uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
          if (!v80) {
            goto LABEL_167;
          }
        }
        goto LABEL_257;
      }
LABEL_167:
      uint64_t v82 = 0;
LABEL_168:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v82 = 0;
    }
    *(void *)(inited + 264) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v82);
    *(unsigned char *)(inited + 272) = 63;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v85 = swift_bridgeObjectRetain();
      unint64_t v86 = Dictionary<>.pageAnalytics()(v85);
      unint64_t v87 = v86;
      if (v86 >> 62) {
        goto LABEL_182;
      }
      uint64_t v88 = *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v88)
      {
        while (v88 >= 1)
        {
          uint64_t v89 = 0;
          uint64_t v90 = 0;
          while (1)
          {
            uint64_t v91 = (v87 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v89, v87) : swift_retain();
            uint64_t v92 = *(void *)(v91 + 80);
            swift_release();
            BOOL v11 = __OFADD__(v90, v92);
            v90 += v92;
            if (v11) {
              break;
            }
            if (v88 == ++v89) {
              goto LABEL_184;
            }
          }
          __break(1u);
LABEL_182:
          swift_bridgeObjectRetain();
          uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
          if (!v88) {
            goto LABEL_183;
          }
        }
        goto LABEL_258;
      }
LABEL_183:
      uint64_t v90 = 0;
LABEL_184:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v90 = 0;
    }
    *(void *)(inited + 280) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v90);
    *(unsigned char *)(inited + 288) = 64;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v93 = swift_bridgeObjectRetain();
      unint64_t v94 = Dictionary<>.pageAnalytics()(v93);
      unint64_t v95 = v94;
      if (v94 >> 62) {
        goto LABEL_198;
      }
      uint64_t v96 = *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v96)
      {
        while (v96 >= 1)
        {
          uint64_t v97 = 0;
          uint64_t v98 = 0;
          while (1)
          {
            uint64_t v99 = (v95 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v97, v95) : swift_retain();
            uint64_t v100 = *(void *)(v99 + 88);
            swift_release();
            BOOL v11 = __OFADD__(v98, v100);
            v98 += v100;
            if (v11) {
              break;
            }
            if (v96 == ++v97) {
              goto LABEL_200;
            }
          }
          __break(1u);
LABEL_198:
          swift_bridgeObjectRetain();
          uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
          if (!v96) {
            goto LABEL_199;
          }
        }
        goto LABEL_259;
      }
LABEL_199:
      uint64_t v98 = 0;
LABEL_200:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v98 = 0;
    }
    *(void *)(inited + 296) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v98);
    *(unsigned char *)(inited + 304) = 65;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v101 = swift_bridgeObjectRetain();
      unint64_t v102 = Dictionary<>.pageAnalytics()(v101);
      unint64_t v103 = v102;
      if (v102 >> 62) {
        goto LABEL_214;
      }
      uint64_t v104 = *(void *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v104)
      {
        while (v104 >= 1)
        {
          uint64_t v105 = 0;
          uint64_t v106 = 0;
          while (1)
          {
            uint64_t v107 = (v103 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v105, v103) : swift_retain();
            uint64_t v108 = *(void *)(v107 + 96);
            swift_release();
            BOOL v11 = __OFADD__(v106, v108);
            v106 += v108;
            if (v11) {
              break;
            }
            if (v104 == ++v105) {
              goto LABEL_216;
            }
          }
          __break(1u);
LABEL_214:
          swift_bridgeObjectRetain();
          uint64_t v104 = _CocoaArrayWrapper.endIndex.getter();
          if (!v104) {
            goto LABEL_215;
          }
        }
        goto LABEL_260;
      }
LABEL_215:
      uint64_t v106 = 0;
LABEL_216:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v106 = 0;
    }
    *(void *)(inited + 312) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v106);
    *(unsigned char *)(inited + 320) = 66;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v109 = swift_bridgeObjectRetain();
      unint64_t v110 = Dictionary<>.pageAnalytics()(v109);
      unint64_t v111 = v110;
      if (v110 >> 62) {
        goto LABEL_230;
      }
      uint64_t v112 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v112)
      {
        while (v112 >= 1)
        {
          uint64_t v113 = 0;
          uint64_t v114 = 0;
          while (1)
          {
            uint64_t v115 = (v111 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v113, v111) : swift_retain();
            uint64_t v116 = *(void *)(v115 + 104);
            swift_release();
            BOOL v11 = __OFADD__(v114, v116);
            v114 += v116;
            if (v11) {
              break;
            }
            if (v112 == ++v113) {
              goto LABEL_232;
            }
          }
          __break(1u);
LABEL_230:
          swift_bridgeObjectRetain();
          uint64_t v112 = _CocoaArrayWrapper.endIndex.getter();
          if (!v112) {
            goto LABEL_231;
          }
        }
        goto LABEL_261;
      }
LABEL_231:
      uint64_t v114 = 0;
LABEL_232:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v114 = 0;
    }
    *(void *)(inited + 328) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v114);
    *(unsigned char *)(inited + 336) = 67;
    if (*(void *)(*(void *)v5 + 16))
    {
      uint64_t v117 = swift_bridgeObjectRetain();
      unint64_t v118 = Dictionary<>.pageAnalytics()(v117);
      unint64_t v119 = v118;
      if (v118 >> 62) {
        goto LABEL_246;
      }
      uint64_t v120 = *(void *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v120)
      {
        while (v120 >= 1)
        {
          uint64_t v121 = 0;
          uint64_t v122 = 0;
          while (1)
          {
            uint64_t v123 = (v119 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v121, v119) : swift_retain();
            uint64_t v124 = *(void *)(v123 + 112);
            swift_release();
            BOOL v11 = __OFADD__(v122, v124);
            v122 += v124;
            if (v11) {
              break;
            }
            if (v120 == ++v121) {
              goto LABEL_248;
            }
          }
          __break(1u);
LABEL_246:
          swift_bridgeObjectRetain();
          uint64_t v120 = _CocoaArrayWrapper.endIndex.getter();
          if (!v120) {
            goto LABEL_247;
          }
        }
        goto LABEL_262;
      }
LABEL_247:
      uint64_t v122 = 0;
LABEL_248:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v122 = 0;
    }
    *(void *)(inited + 344) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v122);
    unint64_t v125 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    uint64_t v126 = swift_allocObject();
    *(void *)(v126 + 16) = v125;
    v127 = (void *)MEMORY[0x21054D080](0xD000000000000031, 0x800000020C84E6C0);
    uint64_t v128 = swift_allocObject();
    *(void *)(v128 + 16) = partial apply for implicit closure #1 in FormTextFieldAnalytics.recordEvent();
    *(void *)(v128 + 24) = v126;
    aBlock[4] = closure #1 in FormAnalytics.sendEventLazy(key:payload:)partial apply;
    aBlock[5] = v128;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = &block_descriptor_161;
    v129 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v129);
    swift_release();

    return;
  }
  while (v32 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    while (1)
    {
      uint64_t v35 = (v31 & 0xC000000000000001) != 0 ? MEMORY[0x21054E050](v33, v31) : swift_retain();
      uint64_t v36 = *(void *)(v35 + 24);
      swift_release();
      BOOL v11 = __OFADD__(v34, v36);
      v34 += v36;
      if (v11) {
        break;
      }
      if (v32 == ++v33) {
        goto LABEL_72;
      }
    }
    __break(1u);
LABEL_70:
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    if (!v32) {
      goto LABEL_71;
    }
  }
LABEL_251:
  __break(1u);
LABEL_252:
  __break(1u);
LABEL_253:
  __break(1u);
LABEL_254:
  __break(1u);
LABEL_255:
  __break(1u);
LABEL_256:
  __break(1u);
LABEL_257:
  __break(1u);
LABEL_258:
  __break(1u);
LABEL_259:
  __break(1u);
LABEL_260:
  __break(1u);
LABEL_261:
  __break(1u);
LABEL_262:
  __break(1u);
LABEL_263:
  __break(1u);
}

uint64_t FormAnalytics.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FormAnalytics()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for FormTextBoxEntryType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C4D4194);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormTextBoxEntryType()
{
  return &type metadata for FormTextBoxEntryType;
}

uint64_t getEnumTagSinglePayload for FormAnalyticsKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xBC) {
    goto LABEL_17;
  }
  if (a2 + 68 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 68) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 68;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 68;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 68;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x45;
  int v8 = v6 - 69;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FormAnalyticsKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 68 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 68) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xBC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xBB)
  {
    unsigned int v6 = ((a2 - 188) >> 8) + 1;
    *unint64_t result = a2 + 68;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C4D4328);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 68;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormAnalyticsKeys()
{
  return &type metadata for FormAnalyticsKeys;
}

unint64_t lazy protocol witness table accessor for type FormAnalyticsKeys and conformance FormAnalyticsKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FormAnalyticsKeys and conformance FormAnalyticsKeys;
  if (!lazy protocol witness table cache variable for type FormAnalyticsKeys and conformance FormAnalyticsKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormAnalyticsKeys and conformance FormAnalyticsKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FormTextBoxEntryType and conformance FormTextBoxEntryType()
{
  unint64_t result = lazy protocol witness table cache variable for type FormTextBoxEntryType and conformance FormTextBoxEntryType;
  if (!lazy protocol witness table cache variable for type FormTextBoxEntryType and conformance FormTextBoxEntryType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormTextBoxEntryType and conformance FormTextBoxEntryType);
  }
  return result;
}

id specialized FormAnalytics.documentType(from:)(char a1)
{
  if ((a1 - 2) < 6u) {
    uint64_t v1 = (a1 - 2) + 1;
  }
  else {
    uint64_t v1 = 0;
  }
  id v2 = objc_allocWithZone(NSNumber);
  return objc_msgSend(v2, sel_initWithInteger_, v1);
}

id specialized FormAnalytics.textFieldManuallyCreatedValue(from:)(char a1)
{
  if ((a1 - 10) < 3u) {
    uint64_t v1 = (a1 - 10) + 1;
  }
  else {
    uint64_t v1 = 0;
  }
  id v2 = objc_allocWithZone(NSNumber);
  return objc_msgSend(v2, sel_initWithInteger_, v1);
}

id specialized FormAnalytics.formFillingModeEntryModality(from:)(char a1)
{
  if ((a1 - 48) > 3u) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = qword_20C83D830[(char)(a1 - 48)];
  }
  id v2 = objc_allocWithZone(NSNumber);
  return objc_msgSend(v2, sel_initWithInteger_, v1);
}

void specialized FormAnalytics.addFielde2eEvent(canvas:)(char *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = (char **)&v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  BOOL v11 = &v20[-v10];
  if (!a1) {
    return;
  }
  uint64_t v12 = &a1[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  swift_beginAccess();
  outlined init with copy of Date?((uint64_t)v12, (uint64_t)v4);
  if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for Date?);
    return;
  }
  (*(void (**)(unsigned char *, char **, uint64_t))(v6 + 32))(v11, v4, v5);
  uint64_t v13 = a1;
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v15 = v14 * 1000.0;
  if ((~COERCE__INT64(v14 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v15 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unsigned int v4 = (char **)&v13[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_latencyOfFormFields];
  swift_beginAccess();
  uint64_t v12 = *v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unsigned int v4 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_15:
    uint64_t v12 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    *unsigned int v4 = v12;
  }
  unint64_t v18 = *((void *)v12 + 2);
  unint64_t v17 = *((void *)v12 + 3);
  if (v18 >= v17 >> 1)
  {
    uint64_t v12 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v12);
    *unsigned int v4 = v12;
  }
  *((void *)v12 + 2) = v18 + 1;
  *(void *)&v12[8 * v18 + 32] = (uint64_t)v15;
  swift_endAccess();

  uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  v19(v8, v5);
  v19(v11, v5);
}

void specialized FormAnalytics.recordLatencyEvent(timestamps:endToEnd:)(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return;
  }
  int64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = v2 - 1;
  if (v2 != 1)
  {
    if ((unint64_t)v2 >= 5)
    {
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v6 = vdupq_n_s64(v3);
      uint64_t v7 = (int64x2_t *)(a1 + 56);
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v9 = v6;
      do
      {
        int64x2_t v6 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v6, v7[-1]), (int8x16_t)v6, (int8x16_t)v7[-1]);
        int64x2_t v9 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v9, *v7), (int8x16_t)v9, *(int8x16_t *)v7);
        v7 += 2;
        v8 -= 4;
      }
      while (v8);
      int8x16_t v10 = vbslq_s8((int8x16_t)vcgtq_s64(v6, v9), (int8x16_t)v6, (int8x16_t)v9);
      uint64_t v11 = vextq_s8(v10, v10, 8uLL).u64[0];
      int64_t v3 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v10.i64[0], v11), *(int8x8_t *)v10.i8, (int8x8_t)v11);
      if (v4 == (v4 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v5 = 1;
    }
    unint64_t v12 = v2 - v5;
    uint64_t v13 = (int64_t *)(a1 + 8 * v5 + 32);
    do
    {
      int64_t v15 = *v13++;
      int64_t v14 = v15;
      if (v3 <= v15) {
        int64_t v3 = v14;
      }
      --v12;
    }
    while (v12);
  }
LABEL_12:
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  do
  {
    uint64_t v18 = *(void *)(a1 + 32 + 8 * v16);
    BOOL v19 = __OFADD__(v17, v18);
    v17 += v18;
    if (v19)
    {
      __break(1u);
      return;
    }
    ++v16;
  }
  while (v2 != v16);
  if (a2) {
    unint64_t v20 = 6632037;
  }
  else {
    unint64_t v20 = 0xD000000000000010;
  }
  if (a2) {
    unint64_t v21 = 0xE300000000000000;
  }
  else {
    unint64_t v21 = 0x800000020C8583A0;
  }
  uint64_t v22 = v17 / v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FormAnalyticsKeys, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C837A90;
  *(unsigned char *)(inited + 32) = 35;
  uint64_t v24 = MEMORY[0x21054D080](v20, v21);
  swift_bridgeObjectRelease();
  *(void *)(inited + 40) = v24;
  *(unsigned char *)(inited + 48) = 34;
  *(void *)(inited + 56) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v3);
  *(unsigned char *)(inited + 64) = 33;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v22);
  unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v25;
  uint64_t v27 = (void *)MEMORY[0x21054D080](0xD00000000000002CLL, 0x800000020C84E670);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for implicit closure #3 in FormAnalytics.recordLatencyEvent(timestamps:endToEnd:);
  *(void *)(v28 + 24) = v26;
  v30[4] = partial apply for closure #1 in FormAnalytics.sendEventLazy(key:payload:);
  v30[5] = v28;
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 1107296256;
  v30[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v30[3] = &block_descriptor_36;
  uint64_t v29 = _Block_copy(v30);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v29);
  swift_release();
}

uint64_t specialized FormAnalyticsKeys.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x45) {
    return 69;
  }
  else {
    return v0;
  }
}

uint64_t sub_20C4D4B40()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for implicit closure #3 in FormAnalytics.recordLatencyEvent(timestamps:endToEnd:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_20C4D4B80()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in FormAnalytics.sendEventLazy(key:payload:)()
{
  return closure #1 in FormAnalytics.sendEventLazy(key:payload:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_36()
{
  return swift_release();
}

uint64_t outlined init with take of (key: CRKeyPath, value: FormPageAnalytics)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: FormPageAnalytics));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall ShapeListViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  v80.receiver = v0;
  v80.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v80, sel_viewDidLoad);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v3 = objc_msgSend(v0, sel_view);
  if (!v3) {
    goto LABEL_33;
  }
  uint64_t v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v2);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20C8344C0;
  id v6 = objc_msgSend(v2, sel_topAnchor);
  id v7 = objc_msgSend(v1, sel_view);
  if (!v7)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  unint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  id v10 = objc_msgSend(v9, sel_topAnchor);
  double v11 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_contentViewMargin];
  id v12 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v10, v11);

  *(void *)(v5 + 32) = v12;
  id v13 = objc_msgSend(v2, sel_bottomAnchor);
  id v14 = objc_msgSend(v1, sel_view);
  if (!v14)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  int64_t v15 = v14;
  id v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

  id v17 = objc_msgSend(v16, sel_bottomAnchor);
  id v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v17, -v11);

  *(void *)(v5 + 40) = v18;
  id v19 = objc_msgSend(v2, sel_leadingAnchor);
  id v20 = objc_msgSend(v1, sel_view);
  if (!v20)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v21 = v20;
  id v22 = objc_msgSend(v20, sel_safeAreaLayoutGuide);

  id v23 = objc_msgSend(v22, sel_leadingAnchor);
  id v24 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v23, v11);

  *(void *)(v5 + 48) = v24;
  id v25 = objc_msgSend(v2, sel_trailingAnchor);
  id v26 = objc_msgSend(v1, sel_view);
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = v1;
    id v79 = self;
    id v29 = objc_msgSend(v27, sel_safeAreaLayoutGuide);

    id v30 = objc_msgSend(v29, sel_trailingAnchor);
    id v31 = objc_msgSend(v25, sel_constraintEqualToAnchor_constant_, v30, -v11);

    *(void *)(v5 + 56) = v31;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v79, sel_activateConstraints_, isa);

    unint64_t v33 = *(void *)&v28[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_stackView];
    objc_msgSend((id)v33, sel_setAxis_, 1);
    objc_msgSend((id)v33, sel_setDistribution_, 0);
    uint64_t v34 = &selRef_magicPaperViewControllerImageGenerationEvent_;
    objc_msgSend((id)v33, sel_setAlignment_, 3);
    uint64_t v35 = &selRef_isImageAnalysisEnabled;
    objc_msgSend((id)v33, sel_setSpacing_, *(double *)&v28[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_verticalInterItemSpacing]);
    objc_msgSend((id)v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v2, sel_addSubview_, v33);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_20C83B680;
    unint64_t v78 = v28;
    uint64_t v37 = v2;
    id v38 = objc_msgSend((id)v33, sel_centerXAnchor);
    id v39 = objc_msgSend(v2, sel_centerXAnchor);
    id v40 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v39);

    *(void *)(v36 + 32) = v40;
    id v41 = objc_msgSend((id)v33, sel_centerYAnchor);
    id v42 = objc_msgSend(v37, sel_centerYAnchor);
    id v43 = objc_msgSend(v41, sel_constraintEqualToAnchor_, v42);

    *(void *)(v36 + 40) = v43;
    id v44 = objc_msgSend((id)v33, sel_topAnchor);
    id v45 = objc_msgSend(v37, sel_topAnchor);
    id v46 = objc_msgSend(v44, sel_constraintGreaterThanOrEqualToAnchor_, v45);

    *(void *)(v36 + 48) = v46;
    id v47 = objc_msgSend((id)v33, sel_leadingAnchor);
    id v48 = objc_msgSend(v37, sel_leadingAnchor);
    id v49 = objc_msgSend(v47, sel_constraintGreaterThanOrEqualToAnchor_, v48);

    *(void *)(v36 + 56) = v49;
    id v50 = objc_msgSend((id)v33, sel_bottomAnchor);
    id v51 = objc_msgSend(v37, sel_bottomAnchor);
    id v52 = objc_msgSend(v50, sel_constraintLessThanOrEqualToAnchor_, v51);

    *(void *)(v36 + 64) = v52;
    id v53 = objc_msgSend((id)v33, sel_trailingAnchor);
    uint64_t v77 = v37;
    id v54 = objc_msgSend(v37, sel_trailingAnchor);
    id v55 = objc_msgSend(v53, sel_constraintLessThanOrEqualToAnchor_, v54);

    *(void *)(v36 + 72) = v55;
    specialized Array._endMutation()();
    Class v56 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v79, sel_activateConstraints_, v56);

    unint64_t v57 = *(void *)&v78[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalStackViews];
    if (v57 >> 62) {
      goto LABEL_28;
    }
    uint64_t v58 = *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
LABEL_8:
    if (v58)
    {
      if (v58 < 1)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      uint64_t v59 = 0;
      double v60 = *(double *)&v78[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalInterItemSpacing];
      do
      {
        if ((v57 & 0xC000000000000001) != 0) {
          id v61 = (id)MEMORY[0x21054E050](v59, v57);
        }
        else {
          id v61 = *(id *)(v57 + 8 * v59 + 32);
        }
        unint64_t v62 = v61;
        ++v59;
        objc_msgSend(v61, v35[237], v60);
        objc_msgSend(v62, sel_setAxis_, 0);
        objc_msgSend(v62, sel_setDistribution_, 0);
        objc_msgSend(v62, v34[432], 0);
        objc_msgSend((id)v33, sel_addArrangedSubview_, v62);
      }
      while (v58 != v59);
    }
    swift_bridgeObjectRelease();
    unint64_t v63 = ShapeListViewController.configuredListItemViews()();
    unint64_t v33 = v63;
    if (v63 >> 62)
    {
      uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
      if (v64)
      {
LABEL_17:
        if (v64 >= 1)
        {
          uint64_t v35 = 0;
          double v65 = *(double *)&v78[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_itemSize];
          double v66 = *(double *)&v78[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_itemSize + 8];
          while (1)
          {
            if ((v33 & 0xC000000000000001) != 0) {
              id v74 = (id)MEMORY[0x21054E050](v35, v33);
            }
            else {
              id v74 = *(id *)(v33 + 8 * (void)v35 + 32);
            }
            uint64_t v75 = v74;
            unint64_t v76 = (unint64_t)v35 / 3;
            if ((v57 & 0xC000000000000001) != 0)
            {
              id v67 = (id)MEMORY[0x21054E050](v76, v57);
            }
            else
            {
              if (v76 >= *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_28:
                swift_bridgeObjectRetain();
                uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
                goto LABEL_8;
              }
              id v67 = *(id *)(v57 + 32 + 8 * v76);
            }
            uint64_t v68 = v67;
            uint64_t v35 = (char **)((char *)v35 + 1);
            objc_msgSend(v67, sel_addArrangedSubview_, v75);

            uint64_t v69 = swift_allocObject();
            *(_OWORD *)(v69 + 16) = xmmword_20C8344D0;
            id v70 = objc_msgSend(v75, sel_widthAnchor);
            id v71 = objc_msgSend(v70, sel_constraintEqualToConstant_, v65);

            *(void *)(v69 + 32) = v71;
            id v72 = objc_msgSend(v75, sel_heightAnchor);
            uint64_t v34 = (char **)objc_msgSend(v72, sel_constraintEqualToConstant_, v66);

            *(void *)(v69 + 40) = v34;
            specialized Array._endMutation()();
            Class v73 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            objc_msgSend(v79, sel_activateConstraints_, v73);

            if ((char **)v64 == v35) {
              goto LABEL_30;
            }
          }
        }
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v64 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v64) {
        goto LABEL_17;
      }
    }
LABEL_30:
    swift_bridgeObjectRelease();
    objc_msgSend(v78, sel_setPreferredContentSize_, *(double *)&v78[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_preferredPopoverSize], *(double *)&v78[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_preferredPopoverSize + 8]);

    return;
  }
LABEL_37:
  __break(1u);
}

uint64_t ShapeListViewController.configuredListItemViews()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_20C83D850;
  uint64_t v33 = ObjectType;
  v32[0] = v1;
  id v4 = v1;
  specialized static ShapeListItemView.newAddRectangleListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddRectangle_withEvent_);
  uint64_t v6 = v5;
  outlined destroy of Any?((uint64_t)v32);
  *(void *)(v3 + 32) = v6;
  uint64_t v33 = ObjectType;
  v32[0] = v4;
  id v7 = v4;
  specialized static ShapeListItemView.newAddRoundedRectListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddRoundedRect_withEvent_);
  uint64_t v9 = v8;
  outlined destroy of Any?((uint64_t)v32);
  *(void *)(v3 + 40) = v9;
  uint64_t v33 = ObjectType;
  v32[0] = v7;
  id v10 = v7;
  specialized static ShapeListItemView.newAddOvalListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddOval_withEvent_);
  uint64_t v12 = v11;
  outlined destroy of Any?((uint64_t)v32);
  *(void *)(v3 + 48) = v12;
  uint64_t v33 = ObjectType;
  v32[0] = v10;
  id v13 = v10;
  specialized static ShapeListItemView.newAddTriangleListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddTriangle_withEvent_);
  uint64_t v15 = v14;
  outlined destroy of Any?((uint64_t)v32);
  *(void *)(v3 + 56) = v15;
  uint64_t v33 = ObjectType;
  v32[0] = v13;
  id v16 = v13;
  specialized static ShapeListItemView.newAddPolygonListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddPolygon_withEvent_);
  uint64_t v18 = v17;
  outlined destroy of Any?((uint64_t)v32);
  *(void *)(v3 + 64) = v18;
  uint64_t v33 = ObjectType;
  v32[0] = v16;
  id v19 = v16;
  specialized static ShapeListItemView.newAddArrowShapeListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddArrowShape_withEvent_);
  uint64_t v21 = v20;
  outlined destroy of Any?((uint64_t)v32);
  *(void *)(v3 + 72) = v21;
  uint64_t v33 = ObjectType;
  v32[0] = v19;
  id v22 = v19;
  specialized static ShapeListItemView.newAddStarListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddStar_withEvent_);
  uint64_t v24 = v23;
  outlined destroy of Any?((uint64_t)v32);
  *(void *)(v3 + 80) = v24;
  uint64_t v33 = ObjectType;
  v32[0] = v22;
  id v25 = v22;
  specialized static ShapeListItemView.newAddChatListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddChatBubble_withEvent_);
  uint64_t v27 = v26;
  outlined destroy of Any?((uint64_t)v32);
  *(void *)(v3 + 88) = v27;
  uint64_t v33 = ObjectType;
  v32[0] = v25;
  id v28 = v25;
  specialized static ShapeListItemView.newAddArrowListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddArrow_withEvent_);
  uint64_t v30 = v29;
  outlined destroy of Any?((uint64_t)v32);
  *(void *)(v3 + 96) = v30;
  v32[0] = v3;
  specialized Array._endMutation()();
  return v32[0];
}

id ShapeListViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit23ShapeListViewController_stackView;
  id v9 = objc_allocWithZone(MEMORY[0x263F82BF8]);
  id v10 = v3;
  *(void *)&v3[v8] = objc_msgSend(v9, sel_init);
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_stackViewCols] = 3;
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalStackViews;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_20C837410;
  *(void *)(v12 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)(v12 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)(v12 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  uint64_t v17 = v12;
  specialized Array._endMutation()();
  *(void *)&v10[v11] = v12;
  *(int64x2_t *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_preferredPopoverSize] = vdupq_n_s64(0x406DC00000000000uLL);
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_contentViewMargin] = 0x4030000000000000;
  *(int64x2_t *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_itemSize] = vdupq_n_s64(0x404F000000000000uLL);
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalInterItemSpacing] = 0x4024000000000000;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_verticalInterItemSpacing] = 0x4024000000000000;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  if (a2)
  {
    id v13 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v13 = 0;
  }
  v16.receiver = v10;
  v16.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v16, sel_initWithNibName_bundle_, v13, a3);

  return v14;
}

id ShapeListViewController.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit23ShapeListViewController_stackView;
  id v5 = objc_allocWithZone(MEMORY[0x263F82BF8]);
  uint64_t v6 = v1;
  *(void *)&v1[v4] = objc_msgSend(v5, sel_init);
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_stackViewCols] = 3;
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalStackViews;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_20C837410;
  *(void *)(v8 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)(v8 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)(v8 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  uint64_t v12 = v8;
  specialized Array._endMutation()();
  *(void *)&v6[v7] = v8;
  *(int64x2_t *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_preferredPopoverSize] = vdupq_n_s64(0x406DC00000000000uLL);
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_contentViewMargin] = 0x4030000000000000;
  *(int64x2_t *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_itemSize] = vdupq_n_s64(0x404F000000000000uLL);
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalInterItemSpacing] = 0x4024000000000000;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_verticalInterItemSpacing] = 0x4024000000000000;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  v11.receiver = v6;
  v11.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v11, sel_initWithCoder_, a1);

  return v9;
}

uint64_t type metadata accessor for ShapeListViewController()
{
  return self;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = 0uLL;
  if (*(void *)(a2 + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 56) + 40 * result;
      id v9 = *(id *)v7;
      uint64_t v8 = *(void *)(v7 + 8);
      long long v12 = *(_OWORD *)(v7 + 16);
      uint64_t v10 = *(void *)(v7 + 32);
      id v11 = *(id *)v7;
      swift_retain();
      unint64_t result = swift_bridgeObjectRetain();
      long long v4 = v12;
    }
    else
    {
      id v9 = 0;
      uint64_t v8 = 0;
      uint64_t v10 = 0;
      long long v4 = 0uLL;
    }
  }
  else
  {
    id v9 = 0;
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v8;
  *(_OWORD *)(a3 + 16) = v4;
  *(void *)(a3 + 32) = v10;
  return result;
}

void *specialized Dictionary.subscript.getter(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
      if (v7)
      {
        id v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

void specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v76 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v75 = (char *)&v62 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v77 = (char *)&v62 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression)?);
  MEMORY[0x270FA5388](v10 - 8);
  long long v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15.n128_f64[0] = MEMORY[0x270FA5388](v13);
  objc_super v16 = (char *)&v62 - v14;
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v72 = 0;
  uint64_t v66 = a1;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v63 = a1 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v64 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v65 = v74 + 16;
  id v70 = (void (**)(uint64_t, uint64_t))(v74 + 8);
  id v71 = (void (**)(char *, char *, uint64_t))(v74 + 32);
  int64_t v62 = v64 - 1;
  uint64_t v68 = v12;
  uint64_t v69 = a2;
  id v67 = (char *)&v62 - v14;
  if ((v19 & v17) == 0) {
    goto LABEL_11;
  }
LABEL_9:
  unint64_t v22 = __clz(__rbit64(v20));
  uint64_t v23 = (v20 - 1) & v20;
  unint64_t v24 = v22 | (v72 << 6);
  uint64_t v25 = v66;
LABEL_10:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v74 + 16))(v12, *(void *)(v25 + 48) + *(void *)(v74 + 72) * v24, v4, v15);
  uint64_t v26 = *(void *)(v25 + 56) + 40 * v24;
  id v28 = *(void **)v26;
  uint64_t v27 = *(void *)(v26 + 8);
  uint64_t v29 = *(void *)(v26 + 16);
  uint64_t v30 = *(void *)(v26 + 24);
  uint64_t v31 = *(void *)(v26 + 32);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
  uint64_t v33 = &v12[*(int *)(v32 + 48)];
  *(void *)uint64_t v33 = v28;
  *((void *)v33 + 1) = v27;
  *((void *)v33 + 2) = v29;
  *((void *)v33 + 3) = v30;
  *((void *)v33 + 4) = v31;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v12, 0, 1, v32);
  id v34 = v28;
  swift_retain();
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression)?);
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    BOOL v40 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v16, 1, v39) == 1;
    if (v40) {
      return;
    }
    BOOL v73 = v40;
    unint64_t v79 = v23;
    id v41 = &v16[*(int *)(v39 + 48)];
    uint64_t v42 = (uint64_t)v77;
    (*v71)(v77, v16, v4);
    id v43 = *(void **)v41;
    double v44 = *((double *)v41 + 2);
    uint64_t v78 = *((void *)v41 + 3);
    uint64_t v81 = *((void *)v41 + 4);
    id v82 = v43;
    unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
    char v47 = v46;
    id v48 = *v70;
    (*v70)(v42, v4);
    if ((v47 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_47;
    }
    uint64_t v49 = *(void *)(a2 + 56) + 40 * v45;
    double v50 = *(double *)(v49 + 16);
    uint64_t v52 = *(void *)(v49 + 24);
    uint64_t v51 = *(void *)(v49 + 32);
    id v80 = *(id *)v49;
    swift_retain();
    swift_bridgeObjectRetain();
    id v53 = v75;
    CalculateExpression.id.getter();
    id v54 = v76;
    CalculateExpression.id.getter();
    char v55 = static UUID.== infix(_:_:)();
    v48((uint64_t)v54, v4);
    v48((uint64_t)v53, v4);
    if ((v55 & 1) == 0) {
      goto LABEL_45;
    }
    uint64_t v56 = CalculateExpression.expression.getter();
    uint64_t v58 = v57;
    if (v56 == CalculateExpression.expression.getter() && v58 == v59)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v60 & 1) == 0) {
        goto LABEL_45;
      }
    }
    if (v50 != v44 || (uint64_t v61 = CalculateExpression.format.getter(), v61 != CalculateExpression.format.getter()))
    {
LABEL_45:
      swift_release();

      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_47:

      return;
    }
    if (v52 == v78 && v51 == v81)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release();

      long long v12 = v68;
      a2 = v69;
      objc_super v16 = v67;
      unint64_t v20 = v79;
      if (v79) {
        goto LABEL_9;
      }
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();

      long long v12 = v68;
      a2 = v69;
      objc_super v16 = v67;
      unint64_t v20 = v79;
      if ((v21 & 1) == 0) {
        return;
      }
      if (v79) {
        goto LABEL_9;
      }
    }
LABEL_11:
    int64_t v35 = v72 + 1;
    if (__OFADD__(v72, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v35 < v64)
    {
      unint64_t v36 = *(void *)(v63 + 8 * v35);
      if (v36) {
        goto LABEL_14;
      }
      int64_t v37 = v72 + 2;
      ++v72;
      if (v35 + 1 < v64)
      {
        unint64_t v36 = *(void *)(v63 + 8 * v37);
        if (v36) {
          goto LABEL_18;
        }
        int64_t v72 = v35 + 1;
        if (v35 + 2 < v64)
        {
          unint64_t v36 = *(void *)(v63 + 8 * (v35 + 2));
          if (v36)
          {
            v35 += 2;
LABEL_14:
            uint64_t v25 = v66;
LABEL_15:
            uint64_t v23 = (v36 - 1) & v36;
            unint64_t v24 = __clz(__rbit64(v36)) + (v35 << 6);
            int64_t v72 = v35;
            goto LABEL_10;
          }
          int64_t v37 = v35 + 3;
          int64_t v72 = v35 + 2;
          if (v35 + 3 < v64) {
            break;
          }
        }
      }
    }
LABEL_30:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v12, 1, 1, v38);
    uint64_t v23 = 0;
  }
  unint64_t v36 = *(void *)(v63 + 8 * v37);
  if (v36)
  {
LABEL_18:
    int64_t v35 = v37;
    goto LABEL_14;
  }
  uint64_t v25 = v66;
  while (1)
  {
    int64_t v35 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v35 >= v64)
    {
      int64_t v72 = v62;
      goto LABEL_30;
    }
    unint64_t v36 = *(void *)(v63 + 8 * v35);
    ++v37;
    if (v36) {
      goto LABEL_15;
    }
  }
LABEL_50:
  __break(1u);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnyCRValue();
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  char v55 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v47 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue)?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  long long v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v10);
  __n128 v15 = (int64_t *)((char *)&v47 - v14);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  id v53 = v8;
  uint64_t v54 = a2;
  uint64_t v50 = a1;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v17 = a1 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = 1 << *(unsigned char *)(v17 - 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v16;
  int64_t v56 = 0;
  uint64_t v57 = v58 + 16;
  uint64_t v51 = (void (**)(char *, uint64_t))(v58 + 8);
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v58 + 32);
  uint64_t v48 = v17;
  int64_t v49 = (unint64_t)(v19 + 63) >> 6;
  int64_t v47 = v49 - 1;
  unint64_t v22 = &demangling cache variable for type metadata for (key: Int, value: AnyCRValue);
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v56 << 6);
      uint64_t v26 = v53;
      uint64_t v25 = v54;
LABEL_8:
      uint64_t v27 = *(void *)(v50 + 56);
      *(void *)long long v12 = *(void *)(*(void *)(v50 + 48) + 8 * v24);
      uint64_t v28 = v58;
      uint64_t v29 = v27 + *(void *)(v58 + 72) * v24;
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(v22);
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(&v12[*(int *)(v30 + 48)], v29, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v12, 0, 1, v30);
      goto LABEL_30;
    }
    int64_t v31 = v56 + 1;
    uint64_t v26 = v53;
    uint64_t v25 = v54;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v31 < v49)
    {
      unint64_t v32 = *(void *)(v48 + 8 * v31);
      if (v32) {
        goto LABEL_12;
      }
      int64_t v33 = v56 + 2;
      ++v56;
      if (v31 + 1 < v49)
      {
        unint64_t v32 = *(void *)(v48 + 8 * v33);
        if (v32) {
          goto LABEL_15;
        }
        int64_t v56 = v31 + 1;
        if (v31 + 2 < v49)
        {
          unint64_t v32 = *(void *)(v48 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          int64_t v56 = v31 + 2;
          if (v31 + 3 < v49)
          {
            unint64_t v32 = *(void *)(v48 + 8 * (v31 + 3));
            if (v32)
            {
              v31 += 3;
              goto LABEL_12;
            }
            int64_t v33 = v31 + 4;
            int64_t v56 = v31 + 3;
            if (v31 + 4 < v49) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v12, 1, 1, v34);
    unint64_t v21 = 0;
LABEL_30:
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v12, (uint64_t)v15, &demangling cache variable for type metadata for (key: Int, value: AnyCRValue)?);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(v22);
    int v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v15, 1, v35);
    BOOL v37 = v36 == 1;
    if (v36 == 1) {
      return v37;
    }
    uint64_t v38 = (char *)v15 + *(int *)(v35 + 48);
    uint64_t v39 = *v15;
    (*v52)(v26, v38, v4);
    unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
    if ((v41 & 1) == 0)
    {
      (*v51)(v26, v4);
      return 0;
    }
    uint64_t v42 = v58;
    id v43 = v22;
    double v44 = v55;
    (*(void (**)(char *, unint64_t, uint64_t))(v58 + 16))(v55, *(void *)(v25 + 56) + *(void *)(v58 + 72) * v40, v4);
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type AnyCRValue and conformance AnyCRValue, MEMORY[0x263F32C08]);
    char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v46 = *(void (**)(char *, uint64_t))(v42 + 8);
    v46(v44, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v46)(v26, v4);
    unint64_t v22 = v43;
    if ((v45 & 1) == 0) {
      return v37;
    }
  }
  unint64_t v32 = *(void *)(v48 + 8 * v33);
  if (v32)
  {
LABEL_15:
    int64_t v31 = v33;
LABEL_12:
    unint64_t v21 = (v32 - 1) & v32;
    unint64_t v24 = __clz(__rbit64(v32)) + (v31 << 6);
    int64_t v56 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v31 >= v49)
    {
      int64_t v56 = v47;
      goto LABEL_29;
    }
    unint64_t v32 = *(void *)(v48 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t CanvasCalculateDocument.proxyDocumentRepresentation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GraphableExpression();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for CalculateExpression.Base();
  uint64_t v12 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  unint64_t v76 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for UUID();
  uint64_t v63 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v82 = (uint64_t)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  unint64_t v79 = (char *)v59 - v17;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 8);
  uint64_t v74 = v2;
  uint64_t v75 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = v18(a1, a2, v16);
  if (!v20)
  {
    type metadata accessor for CanvasCalculateDocumentProxy();
    uint64_t v55 = swift_allocObject();
    *(unsigned char *)(v55 + 16) = 0;
    uint64_t v56 = MEMORY[0x263F8EE78];
    *(void *)(v55 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v57 = specialized Dictionary.init(dictionaryLiteral:)(v56);
    *(void *)(v55 + 40) = 0;
    *(void *)(v55 + 48) = 0;
    *(void *)(v55 + 32) = v57;
    *(void *)(v55 + 56) = specialized Dictionary.init(dictionaryLiteral:)(v56);
    *(void *)(v55 + 64) = 0;
    return v55;
  }
  uint64_t v21 = v20;
  type metadata accessor for CanvasCalculateDocumentProxy();
  uint64_t v22 = swift_allocObject();
  *(unsigned char *)(v22 + 16) = 0;
  uint64_t v23 = v21;
  uint64_t v24 = MEMORY[0x263F8EE78];
  *(void *)(v22 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(v24);
  *(void *)(v22 + 40) = 0;
  *(void *)(v22 + 48) = 0;
  *(void *)(v22 + 32) = v25;
  *(void *)(v22 + 56) = specialized Dictionary.init(dictionaryLiteral:)(v24);
  uint64_t v26 = (uint64_t *)(v22 + 56);
  uint64_t v80 = v22;
  *(void *)(v22 + 64) = 0;
  v59[1] = v23;
  unint64_t v27 = dispatch thunk of CalculateDocument.expressions.getter();
  unint64_t v28 = v27;
  if (v27 >> 62) {
    goto LABEL_32;
  }
  uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v29)
  {
LABEL_33:
    swift_release();
    swift_bridgeObjectRelease();
    return v80;
  }
  while (v29 >= 1)
  {
    uint64_t v61 = v11;
    uint64_t v11 = 0;
    uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 64);
    uint64_t v66 = v19 + 64;
    unint64_t v73 = v28 & 0xC000000000000001;
    unsigned int v72 = *MEMORY[0x263F2FBD0];
    id v71 = (void (**)(char *, void, uint64_t))(v12 + 104);
    uint64_t v62 = v63 + 16;
    uint64_t v78 = (void (**)(uint64_t, uint64_t))(v63 + 8);
    int64_t v64 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    double v30 = 0.0;
    uint64_t v69 = v8;
    uint64_t v70 = isUniquelyReferenced_nonNull_native;
    unint64_t v68 = v28;
    uint64_t v67 = v29;
    uint64_t v60 = v19;
    while (1)
    {
      if (v73)
      {
        uint64_t v9 = MEMORY[0x21054E050](v11, v28);
      }
      else
      {
        uint64_t v9 = *(void *)(v28 + 8 * v11 + 32);
        swift_retain();
      }
      CalculateExpression.expression.getter();
      CalculateExpression.options.getter();
      unint64_t v28 = (unint64_t)v79;
      CalculateExpression.id.getter();
      (*v71)(v76, v72, v77);
      type metadata accessor for CalculateExpression();
      swift_allocObject();
      uint64_t v12 = CalculateExpression.init(_:options:base:id:)();
      uint64_t v8 = v82;
      CalculateExpression.id.getter();
      swift_beginAccess();
      swift_retain();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v83 = *v26;
      uint64_t v31 = v83;
      *uint64_t v26 = 0x8000000000000000;
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      uint64_t v34 = *(void *)(v31 + 16);
      BOOL v35 = (v32 & 1) == 0;
      uint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35)) {
        break;
      }
      uint64_t v8 = v32;
      if (*(void *)(v31 + 24) >= v36)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t isUniquelyReferenced_nonNull_native = v83;
          if (v32) {
            goto LABEL_18;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t isUniquelyReferenced_nonNull_native = v83;
          if (v8) {
            goto LABEL_18;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
        unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v82);
        if ((v8 & 1) != (v38 & 1)) {
          goto LABEL_36;
        }
        unint64_t v33 = v37;
        uint64_t isUniquelyReferenced_nonNull_native = v83;
        if (v8)
        {
LABEL_18:
          uint64_t v39 = *(void *)(isUniquelyReferenced_nonNull_native + 56) + 40 * v33;
          unint64_t v40 = *(void **)v39;
          swift_bridgeObjectRelease();
          swift_release();

          *(void *)uint64_t v39 = 0;
          *(void *)(v39 + 8) = v12;
          *(double *)(v39 + 16) = v30;
          *(void *)(v39 + 24) = 0;
          *(void *)(v39 + 32) = 0xE000000000000000;
          goto LABEL_22;
        }
      }
      *(void *)(isUniquelyReferenced_nonNull_native + 8 * (v33 >> 6) + 64) |= 1 << v33;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v63 + 16))(*(void *)(isUniquelyReferenced_nonNull_native + 48) + *(void *)(v63 + 72) * v33, v82, v81);
      uint64_t v41 = *(void *)(isUniquelyReferenced_nonNull_native + 56) + 40 * v33;
      *(void *)uint64_t v41 = 0;
      *(void *)(v41 + 8) = v12;
      *(double *)(v41 + 16) = v30;
      *(void *)(v41 + 24) = 0;
      *(void *)(v41 + 32) = 0xE000000000000000;
      uint64_t v42 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
      BOOL v43 = __OFADD__(v42, 1);
      uint64_t v44 = v42 + 1;
      if (v43) {
        goto LABEL_31;
      }
      *(void *)(isUniquelyReferenced_nonNull_native + 16) = v44;
LABEL_22:
      uint64_t v45 = v80;
      *(void *)(v80 + 56) = isUniquelyReferenced_nonNull_native;
      swift_bridgeObjectRelease();
      char v46 = *v78;
      (*v78)(v82, v81);
      swift_endAccess();
      *(unsigned char *)(v45 + 16) = 1;
      uint64_t v47 = v70;
      v65(v12, v75, v19);
      if ((*v64)(v47, 1, v69) == 1)
      {
        swift_release();
        swift_release();
        outlined destroy of StocksKitCurrencyCache.Provider?(v47, (uint64_t *)&demangling cache variable for type metadata for GraphableExpression?);
      }
      else
      {
        uint64_t v48 = v61;
        outlined init with take of GraphableExpression(v47, v61, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        unint64_t v49 = (unint64_t)v84;
        unint64_t v50 = (unint64_t)v85;
        swift_bridgeObjectRelease();
        uint64_t v51 = HIBYTE(v50) & 0xF;
        if ((v50 & 0x2000000000000000) == 0) {
          uint64_t v51 = v49 & 0xFFFFFFFFFFFFLL;
        }
        if (v51)
        {
          CRRegister.wrappedValue.getter();
          uint64_t v52 = v84;
          id v53 = v85;
          uint64_t v54 = (uint64_t)v79;
          CalculateExpression.id.getter();
          CanvasCalculateDocumentProxy.setGraphableIdentifier(_:for:)(v52, v53, v54);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v46(v54, v81);
          _s8PaperKit19GraphableExpressionVWOhTm_0(v48, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
        }
        else
        {
          _s8PaperKit19GraphableExpressionVWOhTm_0(v48, (uint64_t (*)(void))type metadata accessor for GraphableExpression);
          swift_release();
          swift_release();
        }
        uint64_t v19 = v60;
      }
      ++v11;
      double v30 = v30 + 1.0;
      unint64_t v28 = v68;
      if (v67 == v11) {
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v29) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_36:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t CanvasCalculateDocumentProxy.expression(for:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v33 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v32 = (char *)&v31 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v31 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v31 - v13;
  CanvasCalculateDocumentProxy.updateDocumentIfNecessary()();
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  long long v15 = v39;
  swift_beginAccess();
  uint64_t v16 = *(void *)(v0 + 32);
  if (*(void *)(v16 + 16)
    && (uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, *((uint64_t *)&v15 + 1)), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(v16 + 56);
    uint64_t v20 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v14, v19 + *(void *)(v34 + 72) * v17, v2);
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = 1;
    uint64_t v20 = v34;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v14, v21, 1, v2);
  swift_bridgeObjectRelease();
  swift_endAccess();
  outlined init with copy of UUID?((uint64_t)v14, (uint64_t)v11);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v23 = v22(v11, 1, v2);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  if (v23 == 1)
  {
    CRRegister.wrappedValue.getter();
    uint64_t v24 = (uint64_t)v32;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v24, (uint64_t)v14, &demangling cache variable for type metadata for UUID?);
  }
  outlined init with copy of UUID?((uint64_t)v14, (uint64_t)v6);
  if (v22(v6, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    uint64_t v25 = (uint64_t)v6;
LABEL_12:
    outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for UUID?);
    return 0;
  }
  uint64_t v26 = v34;
  uint64_t v27 = (uint64_t)v33;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v33, v6, v2);
  swift_beginAccess();
  specialized Dictionary.subscript.getter(v27, *(void *)(v1 + 56), (uint64_t)v36);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v36, (uint64_t)v35, &demangling cache variable for type metadata for SortableCalculateExpression?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v36, (uint64_t)v37, &demangling cache variable for type metadata for SortableCalculateExpression?);
  if (!*((void *)&v37[0] + 1))
  {
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v2);
    uint64_t v25 = (uint64_t)v14;
    goto LABEL_12;
  }
  long long v39 = v37[0];
  *(_OWORD *)unint64_t v40 = v37[1];
  *(void *)&v40[16] = v38;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)&v39, (uint64_t)&v41, &demangling cache variable for type metadata for NSNumber?);
  long long v42 = *(_OWORD *)&v40[8];
  uint64_t v28 = v35[1];
  uint64_t v29 = (void *)v35[0];
  swift_endAccess();
  outlined retain of SortableCalculateExpression?(v36, (void (*)(void, void, void, void, void))outlined copy of SortableCalculateExpression?);
  swift_retain();
  outlined release of NSNumber?(&v41);
  swift_release();
  outlined release of String((uint64_t)&v42);
  outlined consume of SortableCalculateExpression?(v29, v28);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v2);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
  return v28;
}

uint64_t CanvasCalculateDocumentProxy.expression(withId:)(uint64_t a1)
{
  CanvasCalculateDocumentProxy.updateDocumentIfNecessary()();
  swift_beginAccess();
  specialized Dictionary.subscript.getter(a1, *(void *)(v1 + 56), (uint64_t)v7);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v7, (uint64_t)v6, &demangling cache variable for type metadata for SortableCalculateExpression?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v7, (uint64_t)v8, &demangling cache variable for type metadata for SortableCalculateExpression?);
  if (v9)
  {
    uint64_t v4 = (void *)v6[0];
    uint64_t v3 = v6[1];
    swift_endAccess();
    swift_retain();
    outlined consume of SortableCalculateExpression?(v4, v3);
  }
  else
  {
    swift_endAccess();
    return 0;
  }
  return v3;
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

unint64_t SortableCalculateExpression.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 1684632949;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x65646E4974726F73;
      break;
    case 3:
      unint64_t result = 0x74616D726F66;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t SortableCalculateExpression.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 1684632949;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x65646E4974726F73;
      break;
    case 3:
      unint64_t result = 0x74616D726F66;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SortableCalculateExpression.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SortableCalculateExpression.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SortableCalculateExpression.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SortableCalculateExpression.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SortableCalculateExpression.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized SortableCalculateExpression.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SortableCalculateExpression.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = SortableCalculateExpression.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SortableCalculateExpression.CodingKeys()
{
  return SortableCalculateExpression.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SortableCalculateExpression.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized SortableCalculateExpression.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SortableCalculateExpression.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SortableCalculateExpression.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SortableCalculateExpression.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CalculateMathItem.expressionString.getter in conformance SortableCalculateExpression()
{
  return CalculateExpression.expression.getter();
}

double protocol witness for CalculateMathItem.sortIndex.getter in conformance SortableCalculateExpression()
{
  return *(double *)(v0 + 16);
}

uint64_t protocol witness for CalculateMathItem.uuid.getter in conformance SortableCalculateExpression()
{
  return CalculateExpression.id.getter();
}

id protocol witness for CalculateMathItem.strokeGroupIdentifier.getter in conformance SortableCalculateExpression()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SortableCalculateExpression(uint64_t a1, uint64_t a2)
{
  return specialized static SortableCalculateExpression.== infix(_:_:)(*(double *)(a1 + 16), *(double *)(a2 + 16), *(void *)(a1 + 8), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 8), *(void *)(a2 + 24), *(void *)(a2 + 32));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SortableCalculateExpression(void *a1)
{
  return specialized SortableCalculateExpression.encode(to:)(a1, *(double *)(v1 + 16), *(void *)(v1 + 8), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

double protocol witness for Decodable.init(from:) in conformance SortableCalculateExpression@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized SortableCalculateExpression.init(from:)(a1, v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CanvasCalculateDocumentProxy.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance CanvasCalculateDocumentProxy.CodingKeys, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CanvasCalculateDocumentProxy.CodingKeys(void *a1@<X8>)
{
  *a1 = 0x6973736572707865;
  a1[1] = 0xEB00000000736E6FLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  return 0x6973736572707865;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CanvasCalculateDocumentProxy.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance CanvasCalculateDocumentProxy.CodingKeys, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CanvasCalculateDocumentProxy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CanvasCalculateDocumentProxy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

id CanvasCalculateDocumentProxy.numberFormatter.getter()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    id v2 = *(id *)(v0 + 40);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A30]), sel_init);
    objc_msgSend(v3, sel_setUsesGroupingSeparator_, 1);
    objc_msgSend(v3, sel_setMaximumIntegerDigits_, 16);
    objc_msgSend(v3, sel_setNumberStyle_, 1);
    objc_msgSend(v3, sel_setRoundingMode_, 6);
    unint64_t v4 = *(void **)(v0 + 40);
    *(void *)(v0 + 40) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

unint64_t CanvasCalculateDocumentProxy.documentOptions.getter()
{
  if (*(void *)(v0 + 48))
  {
    unint64_t v1 = *(void *)(v0 + 48);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C8352C0;
    id v3 = (void *)*MEMORY[0x263F2FCE8];
    *(void *)(inited + 32) = *MEMORY[0x263F2FCE8];
    id v4 = v3;
    id v5 = CanvasCalculateDocumentProxy.numberFormatter.getter();
    uint64_t v6 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNumberFormatter);
    *(void *)(inited + 40) = v5;
    uint64_t v7 = (void *)*MEMORY[0x263F2FCF8];
    *(void *)(inited + 64) = v6;
    *(void *)(inited + 72) = v7;
    id v8 = objc_allocWithZone(NSNumber);
    id v9 = v7;
    id v10 = objc_msgSend(v8, sel_initWithUnsignedInteger_, 0);
    uint64_t v11 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(void *)(inited + 80) = v10;
    uint64_t v12 = (void *)*MEMORY[0x263F2FCB0];
    *(void *)(inited + 104) = v11;
    *(void *)(inited + 112) = v12;
    id v13 = objc_allocWithZone(NSNumber);
    id v14 = v12;
    *(void *)(inited + 120) = objc_msgSend(v13, sel_initWithBool_, 1);
    long long v15 = (void *)*MEMORY[0x263F2FCC8];
    *(void *)(inited + 144) = v11;
    *(void *)(inited + 152) = v15;
    id v16 = objc_allocWithZone(NSNumber);
    id v17 = v15;
    id v18 = objc_msgSend(v16, sel_initWithBool_, 1);
    *(void *)(inited + 184) = v11;
    *(void *)(inited + 160) = v18;
    unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    *(void *)(v0 + 48) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void CanvasCalculateDocumentProxy.updateDocumentIfNecessary()()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v151 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v153 = (uint64_t)&v130 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  v144 = (char *)&v130 - v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  v145 = (char *)&v130 - v9;
  uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
  MEMORY[0x270FA5388](v142);
  v141 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v140 = (void (**)(uint64_t, uint64_t))((char *)&v130 - v12);
  MEMORY[0x270FA5388](v13);
  v139 = (char *)&v130 - v14;
  MEMORY[0x270FA5388](v15);
  v138 = (char *)&v130 - v16;
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    *(unsigned char *)(v0 + 16) = 0;
    swift_beginAccess();
    uint64_t v130 = (void *)v0;
    uint64_t v17 = *(void *)(v0 + 56);
    int64_t v18 = *(void *)(v17 + 16);
    uint64_t v19 = (void *)MEMORY[0x263F8EE78];
    uint64_t v152 = v1;
    v131 = v7;
    if (!v18) {
      goto LABEL_29;
    }
    v156 = (void *)MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    uint64_t v20 = specialized Dictionary.startIndex.getter(v17);
    if ((v20 & 0x8000000000000000) == 0)
    {
      unint64_t v22 = v20;
      if (v20 < 1 << *(unsigned char *)(v17 + 32))
      {
        int v23 = 0;
        uint64_t v24 = v17 + 64;
        uint64_t v136 = v151 + 16;
        uint64_t v135 = v151 + 8;
        unint64_t v132 = v21;
        int64_t v143 = v17 + 80;
        uint64_t v137 = v17;
        int64_t v133 = v18;
        uint64_t v134 = v17 + 64;
        while (1)
        {
          unint64_t v25 = v22 >> 6;
          if ((*(void *)(v24 + 8 * (v22 >> 6)) & (1 << v22)) == 0) {
            goto LABEL_94;
          }
          if (*(_DWORD *)(v17 + 36) != v21) {
            goto LABEL_95;
          }
          uint64_t v148 = 1 << v22;
          v147 = v21;
          v146 = v23;
          uint64_t v26 = v142;
          uint64_t v27 = (uint64_t)v138;
          uint64_t v28 = &v138[*(int *)(v142 + 48)];
          uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v151 + 16);
          v29(v138, *(void *)(v17 + 48) + *(void *)(v151 + 72) * v22, v1);
          v149 = (void (*)(char *, void (**)(uint64_t, uint64_t), uint64_t))v29;
          uint64_t v30 = *(void *)(v17 + 56);
          int64_t v150 = v22;
          uint64_t v31 = v30 + 40 * v22;
          unint64_t v33 = *(void **)v31;
          uint64_t v32 = *(void *)(v31 + 8);
          uint64_t v34 = *(void *)(v31 + 16);
          uint64_t v35 = *(void *)(v31 + 24);
          uint64_t v36 = *(void *)(v31 + 32);
          *(void *)uint64_t v28 = *(void *)v31;
          *((void *)v28 + 1) = v32;
          *((void *)v28 + 2) = v34;
          *((void *)v28 + 3) = v35;
          *((void *)v28 + 4) = v36;
          uint64_t v37 = (uint64_t)v139;
          v29(v139, v27, v152);
          uint64_t v38 = v26;
          long long v39 = (void *)(v37 + *(int *)(v26 + 48));
          *long long v39 = v33;
          v39[1] = v32;
          v39[2] = v34;
          v39[3] = v35;
          v39[4] = v36;
          unint64_t v40 = v140;
          outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v37, (uint64_t)v140, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
          id v41 = v33;
          uint64_t v42 = v152;
          id v43 = v41;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          id v44 = v43;
          outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
          uint64_t v45 = *(int *)(v38 + 48);
          char v46 = v141;
          uint64_t v47 = &v141[v45];
          uint64_t v48 = (char *)v40 + v45;
          v149(v141, v40, v42);
          unint64_t v50 = *(void **)v48;
          uint64_t v49 = *((void *)v48 + 1);
          uint64_t v51 = *((void *)v48 + 2);
          uint64_t v53 = *((void *)v48 + 3);
          uint64_t v52 = *((void *)v48 + 4);
          *(void *)uint64_t v47 = v50;
          *((void *)v47 + 1) = v49;
          *((void *)v47 + 2) = v51;
          *((void *)v47 + 3) = v53;
          *((void *)v47 + 4) = v52;
          uint64_t v54 = *(void (**)(char *, uint64_t))(v151 + 8);
          id v55 = v50;
          swift_retain();
          swift_bridgeObjectRetain();
          v54(v46, v42);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v40, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
          uint64_t v19 = v156;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1);
            uint64_t v19 = v156;
          }
          unint64_t v57 = v19[2];
          unint64_t v56 = v19[3];
          if (v57 >= v56 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
            uint64_t v19 = v156;
          }
          v19[2] = v57 + 1;
          uint64_t v58 = &v19[5 * v57];
          v58[4] = v50;
          v58[5] = v49;
          v58[6] = v51;
          v58[7] = v53;
          v58[8] = v52;
          uint64_t v17 = v137;
          uint64_t v59 = 1 << *(unsigned char *)(v137 + 32);
          if (v150 >= v59) {
            goto LABEL_96;
          }
          uint64_t v24 = v134;
          uint64_t v60 = *(void *)(v134 + 8 * v25);
          if ((v60 & v148) == 0) {
            goto LABEL_97;
          }
          if (*(_DWORD *)(v137 + 36) != v147) {
            goto LABEL_98;
          }
          unint64_t v61 = v60 & (-2 << (v150 & 0x3F));
          if (v61)
          {
            unint64_t v22 = __clz(__rbit64(v61)) | v150 & 0xFFFFFFFFFFFFFFC0;
            uint64_t v1 = v152;
            uint64_t v62 = (void *)v133;
            goto LABEL_24;
          }
          unint64_t v63 = v25 + 1;
          unint64_t v64 = (unint64_t)(v59 + 63) >> 6;
          uint64_t v1 = v152;
          uint64_t v62 = (void *)v133;
          if (v25 + 1 < v64)
          {
            unint64_t v65 = *(void *)(v134 + 8 * v63);
            if (v65)
            {
LABEL_22:
              unint64_t v22 = __clz(__rbit64(v65)) + (v63 << 6);
              goto LABEL_24;
            }
            while (v64 - 2 != v25)
            {
              unint64_t v65 = *(void *)(v143 + 8 * v25++);
              if (v65)
              {
                unint64_t v63 = v25 + 1;
                goto LABEL_22;
              }
            }
          }
          unint64_t v22 = 1 << *(unsigned char *)(v137 + 32);
LABEL_24:
          int v23 = (uint64_t *)((char *)v146 + 1);
          if ((uint64_t *)((char *)v146 + 1) == v62)
          {
            swift_bridgeObjectRelease();
LABEL_29:
            v157 = v19;
            specialized MutableCollection<>.sort(by:)(&v157);
            uint64_t v66 = v130;
            uint64_t v67 = v130 + 3;
            swift_beginAccess();
            uint64_t v68 = MEMORY[0x263F8EE80];
            v66[3] = MEMORY[0x263F8EE80];
            swift_bridgeObjectRelease();
            swift_beginAccess();
            v66[4] = v68;
            swift_bridgeObjectRelease();
            uint64_t v69 = v66[7];
            uint64_t v70 = *(void *)(v69 + 64);
            v139 = (char *)(v69 + 64);
            uint64_t v71 = 1 << *(unsigned char *)(v69 + 32);
            unsigned int v72 = v66 + 4;
            uint64_t v73 = -1;
            if (v71 < 64) {
              uint64_t v73 = ~(-1 << v71);
            }
            unint64_t v74 = v73 & v70;
            int64_t v143 = (unint64_t)(v71 + 63) >> 6;
            v147 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56);
            uint64_t v142 = v151 + 48;
            v141 = (char *)(v151 + 32);
            uint64_t v136 = v151 + 40;
            uint64_t v137 = v151 + 16;
            v140 = (void (**)(uint64_t, uint64_t))(v151 + 8);
            uint64_t v148 = v69;
            swift_bridgeObjectRetain();
            int64_t v75 = 0;
            uint64_t v76 = (uint64_t)v145;
            v146 = v66 + 4;
            v138 = (char *)(v66 + 3);
            do
            {
LABEL_34:
              if (v74)
              {
                unint64_t v78 = __clz(__rbit64(v74));
                v74 &= v74 - 1;
                unint64_t v79 = v78 | (v75 << 6);
              }
              else
              {
                int64_t v80 = v75 + 1;
                if (__OFADD__(v75, 1)) {
                  goto LABEL_99;
                }
                if (v80 >= v143)
                {
LABEL_85:
                  swift_release();
                  CanvasCalculateDocumentProxy.internalDocument.getter();
                  uint64_t v128 = v157[2];
                  if (v128)
                  {
                    uint64_t v155 = MEMORY[0x263F8EE78];
                    swift_bridgeObjectRetain();
                    specialized ContiguousArray.reserveCapacity(_:)();
                    uint64_t v129 = 40;
                    do
                    {
                      swift_retain();
                      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized ContiguousArray._endMutation()();
                      v129 += 40;
                      --v128;
                    }
                    while (v128);
                    swift_bridgeObjectRelease_n();
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                  dispatch thunk of CalculateDocument.expressions.setter();
                  swift_release();
                  return;
                }
                unint64_t v81 = *(void *)&v139[8 * v80];
                ++v75;
                if (!v81)
                {
                  int64_t v75 = v80 + 1;
                  if (v80 + 1 >= v143) {
                    goto LABEL_85;
                  }
                  unint64_t v81 = *(void *)&v139[8 * v75];
                  if (!v81)
                  {
                    int64_t v75 = v80 + 2;
                    if (v80 + 2 >= v143) {
                      goto LABEL_85;
                    }
                    unint64_t v81 = *(void *)&v139[8 * v75];
                    if (!v81)
                    {
                      int64_t v75 = v80 + 3;
                      if (v80 + 3 >= v143) {
                        goto LABEL_85;
                      }
                      unint64_t v81 = *(void *)&v139[8 * v75];
                      if (!v81)
                      {
                        int64_t v82 = v80 + 4;
                        if (v82 >= v143) {
                          goto LABEL_85;
                        }
                        unint64_t v81 = *(void *)&v139[8 * v82];
                        if (!v81)
                        {
                          while (1)
                          {
                            int64_t v75 = v82 + 1;
                            if (__OFADD__(v82, 1)) {
                              goto LABEL_103;
                            }
                            if (v75 >= v143) {
                              goto LABEL_85;
                            }
                            unint64_t v81 = *(void *)&v139[8 * v75];
                            ++v82;
                            if (v81) {
                              goto LABEL_51;
                            }
                          }
                        }
                        int64_t v75 = v82;
                      }
                    }
                  }
                }
LABEL_51:
                unint64_t v74 = (v81 - 1) & v81;
                unint64_t v79 = __clz(__rbit64(v81)) + (v75 << 6);
              }
              uint64_t v83 = *(void *)(v148 + 56);
              uint64_t v84 = v83 + 40 * v79;
              uint64_t v85 = *(void *)(v84 + 24);
              unint64_t v86 = *(void *)(v84 + 32);
              uint64_t v87 = HIBYTE(v86) & 0xF;
              if ((v86 & 0x2000000000000000) == 0) {
                uint64_t v87 = v85 & 0xFFFFFFFFFFFFLL;
              }
            }
            while (!v87);
            int64_t v150 = v75;
            v149 = (void (*)(char *, void (**)(uint64_t, uint64_t), uint64_t))*(id *)(v83 + 40 * v79);
            swift_retain();
            swift_bridgeObjectRetain_n();
            CalculateExpression.id.getter();
            uint64_t v88 = *v147;
            (*v147)(v76, 0, 1, v1);
            swift_beginAccess();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v142)(v76, 1, v1) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(v76, &demangling cache variable for type metadata for UUID?);
              swift_bridgeObjectRetain();
              unint64_t v89 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v86);
              char v91 = v90;
              swift_bridgeObjectRelease();
              if (v91)
              {
                int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v93 = *v72;
                v154 = (void *)*v72;
                *unsigned int v72 = 0x8000000000000000;
                if (!isUniquelyReferenced_nonNull_native)
                {
                  specialized _NativeDictionary.copy()();
                  uint64_t v93 = (uint64_t)v154;
                }
                swift_bridgeObjectRelease();
                uint64_t v94 = (uint64_t)v131;
                (*(void (**)(char *, unint64_t, uint64_t))(v151 + 32))(v131, *(void *)(v93 + 56) + *(void *)(v151 + 72) * v89, v1);
                specialized _NativeDictionary._delete(at:)(v89, v93);
                *unsigned int v72 = v93;
                swift_bridgeObjectRelease();
                uint64_t v95 = 0;
              }
              else
              {
                uint64_t v95 = 1;
                uint64_t v94 = (uint64_t)v131;
              }
              uint64_t v67 = v138;
              v88(v94, v95, 1, v1);
              swift_bridgeObjectRelease();
              outlined destroy of StocksKitCurrencyCache.Provider?(v94, &demangling cache variable for type metadata for UUID?);
LABEL_72:
              swift_endAccess();
              uint64_t v113 = v153;
              CalculateExpression.id.getter();
              swift_beginAccess();
              int v114 = swift_isUniquelyReferenced_nonNull_native();
              v154 = (void *)*v67;
              uint64_t v115 = v154;
              *uint64_t v67 = 0x8000000000000000;
              unint64_t v117 = specialized __RawDictionaryStorage.find<A>(_:)(v113);
              uint64_t v118 = v115[2];
              BOOL v119 = (v116 & 1) == 0;
              uint64_t v120 = v118 + v119;
              if (__OFADD__(v118, v119))
              {
                __break(1u);
                break;
              }
              char v121 = v116;
              if (v115[3] >= v120)
              {
                if (v114)
                {
                  uint64_t v124 = v154;
                  if ((v116 & 1) == 0) {
                    goto LABEL_79;
                  }
                }
                else
                {
                  specialized _NativeDictionary.copy()();
                  uint64_t v124 = v154;
                  if ((v121 & 1) == 0) {
                    goto LABEL_79;
                  }
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v120, v114);
                unint64_t v122 = specialized __RawDictionaryStorage.find<A>(_:)(v153);
                if ((v121 & 1) != (v123 & 1)) {
                  goto LABEL_104;
                }
                unint64_t v117 = v122;
                uint64_t v124 = v154;
                if ((v121 & 1) == 0)
                {
LABEL_79:
                  v124[(v117 >> 6) + 8] |= 1 << v117;
                  (*(void (**)(unint64_t, uint64_t, uint64_t))(v151 + 16))(v124[6] + *(void *)(v151 + 72) * v117, v153, v1);
                  unint64_t v125 = (uint64_t *)(v124[7] + 16 * v117);
                  *unint64_t v125 = v85;
                  v125[1] = v86;
                  uint64_t v126 = v124[2];
                  BOOL v111 = __OFADD__(v126, 1);
                  uint64_t v127 = v126 + 1;
                  if (v111) {
                    goto LABEL_101;
                  }
                  v124[2] = v127;
                  goto LABEL_33;
                }
              }
              uint64_t v77 = (uint64_t *)(v124[7] + 16 * v117);
              swift_bridgeObjectRelease();
              *uint64_t v77 = v85;
              v77[1] = v86;
LABEL_33:
              *uint64_t v67 = v124;
              swift_bridgeObjectRelease();
              (*v140)(v153, v1);
              swift_endAccess();
              swift_bridgeObjectRelease();
              swift_release();

              uint64_t v76 = (uint64_t)v145;
              unsigned int v72 = v146;
              int64_t v75 = v150;
              goto LABEL_34;
            }
            uint64_t v96 = v1;
            uint64_t v97 = *(void (**)(unint64_t, char *, uint64_t))v141;
            (*(void (**)(char *, uint64_t, uint64_t))v141)(v144, v76, v96);
            int v98 = swift_isUniquelyReferenced_nonNull_native();
            v154 = (void *)*v72;
            uint64_t v99 = v154;
            *unsigned int v72 = 0x8000000000000000;
            unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v86);
            uint64_t v102 = v99[2];
            BOOL v103 = (v100 & 1) == 0;
            uint64_t v104 = v102 + v103;
            if (__OFADD__(v102, v103)) {
              goto LABEL_100;
            }
            char v105 = v100;
            if (v99[3] >= v104)
            {
              if (v98)
              {
                uint64_t v108 = v154;
                if ((v100 & 1) == 0) {
                  goto LABEL_64;
                }
              }
              else
              {
                specialized _NativeDictionary.copy()();
                uint64_t v108 = v154;
                if ((v105 & 1) == 0) {
                  goto LABEL_64;
                }
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v104, v98);
              uint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v86);
              if ((v105 & 1) != (v107 & 1)) {
                goto LABEL_105;
              }
              unint64_t v101 = v106;
              uint64_t v108 = v154;
              if ((v105 & 1) == 0)
              {
LABEL_64:
                v108[(v101 >> 6) + 8] |= 1 << v101;
                uint64_t v109 = (uint64_t *)(v108[6] + 16 * v101);
                *uint64_t v109 = v85;
                v109[1] = v86;
                v97(v108[7] + *(void *)(v151 + 72) * v101, v144, v152);
                uint64_t v110 = v108[2];
                BOOL v111 = __OFADD__(v110, 1);
                uint64_t v112 = v110 + 1;
                if (v111) {
                  goto LABEL_102;
                }
                v108[2] = v112;
                swift_bridgeObjectRetain();
                uint64_t v1 = v152;
                goto LABEL_71;
              }
            }
            uint64_t v1 = v152;
            (*(void (**)(unint64_t, char *, uint64_t))(v151 + 40))(v108[7] + *(void *)(v151 + 72) * v101, v144, v152);
LABEL_71:
            uint64_t *v146 = (uint64_t)v154;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_72;
          }
          if ((v22 & 0x8000000000000000) == 0)
          {
            uint64_t v21 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v132;
            if ((uint64_t)v22 < v59) {
              continue;
            }
          }
          break;
        }
      }
    }
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_105:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
}

uint64_t CanvasCalculateDocumentProxy.internalDocument.getter()
{
  if (*(void *)(v0 + 64))
  {
    uint64_t v1 = *(void *)(v0 + 64);
  }
  else
  {
    uint64_t v2 = v0;
    CanvasCalculateDocumentProxy.documentOptions.getter();
    type metadata accessor for CalculateDocument();
    swift_allocObject();
    uint64_t v1 = CalculateDocument.init(expressions:options:)();
    *(void *)(v2 + 64) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t CanvasCalculateDocumentProxy.copy()()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v83 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v68 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression)?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v68 - v11;
  uint64_t v13 = swift_allocObject();
  *(unsigned char *)(v13 + 16) = 0;
  uint64_t v14 = MEMORY[0x263F8EE78];
  *(void *)(v13 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(v14);
  *(void *)(v13 + 40) = 0;
  *(void *)(v13 + 48) = 0;
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 56) = specialized Dictionary.init(dictionaryLiteral:)(v14);
  unint64_t v81 = (void *)(v13 + 56);
  uint64_t v70 = v13;
  *(void *)(v13 + 64) = 0;
  swift_beginAccess();
  uint64_t v16 = *(void *)(v0 + 56);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v71 = v16 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v82 = (void (**)(uint64_t, char *, uint64_t))(v2 + 16);
  uint64_t v77 = (void (**)(char *, char *, uint64_t))(v2 + 32);
  uint64_t v79 = v2;
  unint64_t v74 = (void (**)(uint64_t, uint64_t))(v2 + 8);
  int64_t v72 = (unint64_t)(v18 + 63) >> 6;
  int64_t v69 = v72 - 1;
  uint64_t v73 = v16;
  swift_bridgeObjectRetain();
  int64_t v78 = 0;
  int64_t v75 = v12;
  uint64_t v76 = v9;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      uint64_t v25 = (v20 - 1) & v20;
      unint64_t v26 = v24 | (v78 << 6);
LABEL_8:
      uint64_t v27 = v73;
      (*(void (**)(char *, unint64_t, uint64_t))(v79 + 16))(v9, *(void *)(v73 + 48) + *(void *)(v79 + 72) * v26, v1);
      uint64_t v28 = *(void *)(v27 + 56) + 40 * v26;
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
      uint64_t v30 = &v9[*(int *)(v29 + 48)];
      uint64_t v32 = *(void **)v28;
      uint64_t v31 = *(void *)(v28 + 8);
      uint64_t v33 = *(void *)(v28 + 16);
      uint64_t v34 = *(void *)(v28 + 24);
      uint64_t v35 = *(void *)(v28 + 32);
      *(void *)uint64_t v30 = *(void *)v28;
      *((void *)v30 + 1) = v31;
      *((void *)v30 + 2) = v33;
      *((void *)v30 + 3) = v34;
      *((void *)v30 + 4) = v35;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v9, 0, 1, v29);
      id v36 = v32;
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_27;
    }
    int64_t v37 = v78 + 1;
    if (__OFADD__(v78, 1)) {
      goto LABEL_42;
    }
    if (v37 < v72)
    {
      unint64_t v38 = *(void *)(v71 + 8 * v37);
      if (v38) {
        goto LABEL_12;
      }
      int64_t v39 = v78 + 2;
      ++v78;
      if (v37 + 1 < v72)
      {
        unint64_t v38 = *(void *)(v71 + 8 * v39);
        if (v38) {
          goto LABEL_15;
        }
        int64_t v78 = v37 + 1;
        if (v37 + 2 < v72)
        {
          unint64_t v38 = *(void *)(v71 + 8 * (v37 + 2));
          if (v38)
          {
            v37 += 2;
            goto LABEL_12;
          }
          int64_t v39 = v37 + 3;
          int64_t v78 = v37 + 2;
          if (v37 + 3 < v72) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v9, 1, 1, v40);
    uint64_t v25 = 0;
LABEL_27:
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v9, (uint64_t)v12, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression)?);
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v12, 1, v41) == 1)
    {
      swift_release();
      uint64_t result = v70;
      *(unsigned char *)(v70 + 16) = 1;
      return result;
    }
    unint64_t v80 = v25;
    uint64_t v42 = &v12[*(int *)(v41 + 48)];
    id v44 = *(void **)v42;
    uint64_t v43 = *((void *)v42 + 1);
    uint64_t v45 = *((void *)v42 + 2);
    (*v77)(v6, v12, v1);
    uint64_t v46 = (uint64_t)v83;
    uint64_t v47 = *v82;
    uint64_t v48 = v6;
    uint64_t v49 = v6;
    uint64_t v50 = v1;
    (*v82)((uint64_t)v83, v49, v1);
    uint64_t v51 = v81;
    swift_beginAccess();
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = (void *)*v51;
    uint64_t v53 = v84;
    *uint64_t v51 = 0x8000000000000000;
    unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
    uint64_t v56 = v53[2];
    BOOL v57 = (v54 & 1) == 0;
    uint64_t v58 = v56 + v57;
    if (__OFADD__(v56, v57))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    char v59 = v54;
    if (v53[3] >= v58)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v62 = v84;
        if (v54) {
          goto LABEL_4;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v62 = v84;
        if (v59) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v58, isUniquelyReferenced_nonNull_native);
      unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v83);
      if ((v59 & 1) != (v61 & 1)) {
        goto LABEL_44;
      }
      unint64_t v55 = v60;
      uint64_t v62 = v84;
      if (v59)
      {
LABEL_4:
        uint64_t v21 = v62[7] + 40 * v55;
        unint64_t v22 = *(void **)v21;
        swift_bridgeObjectRelease();
        swift_release();

        *(void *)uint64_t v21 = 0;
        *(void *)(v21 + 8) = v43;
        *(void *)(v21 + 16) = v45;
        *(void *)(v21 + 24) = 0;
        *(void *)(v21 + 32) = 0xE000000000000000;
        goto LABEL_5;
      }
    }
    v62[(v55 >> 6) + 8] |= 1 << v55;
    v47(v62[6] + *(void *)(v79 + 72) * v55, v83, v50);
    unint64_t v63 = (void *)(v62[7] + 40 * v55);
    *unint64_t v63 = 0;
    v63[1] = v43;
    v63[2] = v45;
    v63[3] = 0;
    v63[4] = 0xE000000000000000;
    uint64_t v64 = v62[2];
    BOOL v65 = __OFADD__(v64, 1);
    uint64_t v66 = v64 + 1;
    if (v65) {
      goto LABEL_41;
    }
    v62[2] = v66;
LABEL_5:
    *unint64_t v81 = v62;
    swift_bridgeObjectRelease();
    int v23 = *v74;
    uint64_t v1 = v50;
    (*v74)((uint64_t)v83, v50);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_release();

    uint64_t v6 = v48;
    v23((uint64_t)v48, v1);
    uint64_t v12 = v75;
    uint64_t v9 = v76;
    unint64_t v20 = v80;
  }
  unint64_t v38 = *(void *)(v71 + 8 * v39);
  if (v38)
  {
LABEL_15:
    int64_t v37 = v39;
LABEL_12:
    uint64_t v25 = (v38 - 1) & v38;
    unint64_t v26 = __clz(__rbit64(v38)) + (v37 << 6);
    int64_t v78 = v37;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v37 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v37 >= v72)
    {
      int64_t v78 = v69;
      goto LABEL_26;
    }
    unint64_t v38 = *(void *)(v71 + 8 * v37);
    ++v39;
    if (v38) {
      goto LABEL_12;
    }
  }
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t CanvasCalculateDocumentProxy.calculateDocumentProvider.getter()
{
  uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t v28 = MEMORY[0x263F8EE88];
  CanvasCalculateDocumentProxy.updateDocumentIfNecessary()();
  CanvasCalculateDocumentProxy.internalDocument.getter();
  uint64_t v0 = dispatch thunk of CalculateDocument.declaredSymbols.getter();
  unint64_t v1 = v0;
  int64_t v2 = 0;
  uint64_t v3 = v0 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(v0 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v0 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v7) {
      goto LABEL_21;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_21;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_21;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    uint64_t v10 = (Swift::Int *)(*(void *)(v1 + 48) + 16 * v9);
    Swift::Int v11 = *v10;
    Swift::Int v12 = v10[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v27, v11, v12);
    swift_bridgeObjectRelease();
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v7)
  {
LABEL_21:
    swift_release();
    unint64_t result = dispatch thunk of CalculateDocument.expressions.getter();
    unint64_t v1 = result;
    if (result >> 62) {
      goto LABEL_34;
    }
    uint64_t v17 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v17) {
      goto LABEL_23;
    }
LABEL_35:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x263F8EE78];
LABEL_36:
    unint64_t v26 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CalculateDocumentProvider()), sel_init);
    *(void *)&v26[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables] = v28;
    swift_bridgeObjectRelease();
    *(void *)&v26[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions] = v25;
    swift_bridgeObjectRelease();
    return (unint64_t)v26;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v15);
  if (v14)
  {
    int64_t v2 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v2 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_21;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v2);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_33:
  __break(1u);
LABEL_34:
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v17 = result;
  if (!result) {
    goto LABEL_35;
  }
LABEL_23:
  if (v17 >= 1)
  {
    uint64_t v18 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x21054E050](v18, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v19 = CalculateExpression.expression.getter();
      uint64_t v21 = v20;
      unint64_t v22 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MathExpression()), sel_init);
      int v23 = (uint64_t *)&v22[OBJC_IVAR____TtC8PaperKit14MathExpression_expression];
      *int v23 = v19;
      v23[1] = v21;
      swift_bridgeObjectRelease();
      unint64_t v24 = v22;
      MEMORY[0x21054D330]();
      if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v18;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      swift_release();
    }
    while (v17 != v18);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v25 = v29;
    goto LABEL_36;
  }
  __break(1u);
  return result;
}

void CanvasCalculateDocumentProxy.setGraphableIdentifier(_:for:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::Int v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v3 + 56);
  if (*(void *)(v12 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a3), (v14 & 1) != 0))
  {
    int64_t v15 = (void **)(*(void *)(v12 + 56) + 40 * v13);
    uint64_t v16 = v15[1];
    unint64_t v26 = *v15;
    Swift::Int v27 = v16;
    uint64_t v17 = v15[2];
    uint64_t v18 = v15[3];
    uint64_t v19 = v15[4];
    swift_endAccess();
    BOOL v20 = v18 == a1 && v19 == a2;
    if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
      uint64_t v21 = v26;
      v29[0] = v26;
      v29[1] = v27;
      v29[2] = v17;
      v29[3] = a1;
      v29[4] = a2;
      swift_beginAccess();
      id v22 = v21;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      id v23 = v22;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = *(void *)(v4 + 56);
      *(void *)(v4 + 56) = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v29, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
      *(void *)(v4 + 56) = v28;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_endAccess();
      *(unsigned char *)(v4 + 16) = 1;
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    swift_endAccess();
  }
}

uint64_t CanvasCalculateDocumentProxy.insert(_:sortIndex:)(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CalculateExpression.id.getter();
  v14[0] = 0;
  v14[1] = a1;
  *(double *)&v14[2] = a2;
  v14[3] = 0;
  v14[4] = 0xE000000000000000;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 56) = v13;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t result = swift_endAccess();
  *(unsigned char *)(v3 + 16) = 1;
  return result;
}

void *CanvasCalculateDocumentProxy.move(_:sortIndex:)(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v19 - v11 + 16;
  CalculateExpression.id.getter();
  swift_beginAccess();
  specialized Dictionary.subscript.getter((uint64_t)v12, *(void *)(v3 + 56), (uint64_t)v19);
  swift_endAccess();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v12, v6);
  CalculateExpression.id.getter();
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v19, (uint64_t)&v20, &demangling cache variable for type metadata for SortableCalculateExpression?);
  if (*((void *)&v20 + 1))
  {
    v23[0] = v20;
    v23[1] = v21;
    unint64_t v14 = v22;
    unint64_t v24 = v22;
    uint64_t v15 = *((void *)&v21 + 1);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v23, (uint64_t)&v25, &demangling cache variable for type metadata for NSNumber?);
    outlined retain of SortableCalculateExpression?(v19, (void (*)(void, void, void, void, void))outlined copy of SortableCalculateExpression?);
    swift_bridgeObjectRetain();
    outlined release of NSNumber?(&v25);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v14 = 0xE000000000000000;
  }
  v26[0] = 0;
  v26[1] = a1;
  *(double *)&v26[2] = a2;
  v26[3] = v15;
  v26[4] = v14;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v26, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 56) = v18;
  swift_bridgeObjectRelease();
  v13(v9, v6);
  swift_endAccess();
  uint64_t result = outlined retain of SortableCalculateExpression?(v19, (void (*)(void, void, void, void, void))outlined consume of SortableCalculateExpression?);
  *(unsigned char *)(v3 + 16) = 1;
  return result;
}

uint64_t CanvasCalculateDocumentProxy.graphableExpression(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  CanvasCalculateDocumentProxy.updateDocumentIfNecessary()();
  CalculateExpression.id.getter();
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 24) + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v7 & 1) != 0))
  {
    swift_endAccess();
    uint64_t v8 = *(void (**)(char *, uint64_t))(v4 + 8);
    swift_bridgeObjectRetain();
    v8(v6, v3);
    CalculateExpression.expression.getter();
    v12[1] = 0;
    GraphableExpression.init(expression:identifier:graphableVariable:color:)(0xE000000000000000, a1);
    uint64_t v9 = type metadata accessor for GraphableExpression();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 0, 1, v9);
  }
  else
  {
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v11 = type metadata accessor for GraphableExpression();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

uint64_t CanvasCalculateDocumentProxy.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CanvasCalculateDocumentProxy()
{
  return self;
}

uint64_t destroy for SortableCalculateExpression(id *a1)
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SortableCalculateExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  id v5 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SortableCalculateExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SortableCalculateExpression(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SortableCalculateExpression(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SortableCalculateExpression(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SortableCalculateExpression()
{
  return &type metadata for SortableCalculateExpression;
}

uint64_t protocol witness for CanvasCalculateDocument.document.getter in conformance CanvasCalculateDocumentProxy()
{
  CanvasCalculateDocumentProxy.updateDocumentIfNecessary()();
  return CanvasCalculateDocumentProxy.internalDocument.getter();
}

uint64_t protocol witness for CanvasCalculateDocument.insert(_:atIndex:) in conformance CanvasCalculateDocumentProxy(uint64_t a1, double *a2)
{
  return CanvasCalculateDocumentProxy.insert(_:sortIndex:)(a1, *a2);
}

void *protocol witness for CanvasCalculateDocument.move(_:toIndex:) in conformance CanvasCalculateDocumentProxy(uint64_t a1, double *a2)
{
  return CanvasCalculateDocumentProxy.move(_:sortIndex:)(a1, *a2);
}

void *protocol witness for CanvasCalculateDocument.remove(_:) in conformance CanvasCalculateDocumentProxy()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  CalculateExpression.id.getter();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v4, v7);
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  swift_endAccess();
  uint64_t result = outlined retain of SortableCalculateExpression?(v7, (void (*)(void, void, void, void, void))outlined consume of SortableCalculateExpression?);
  *(unsigned char *)(v0 + 16) = 1;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CanvasCalculateDocumentProxy@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized CanvasCalculateDocumentProxy.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t CanvasCalculateDocumentProxy.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CanvasCalculateDocumentProxy.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_beginAccess();
  uint64_t v9 = *(void *)(v2 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : SortableCalculateExpression]);
  lazy protocol witness table accessor for type [UUID : SortableCalculateExpression] and conformance <> [A : B]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CanvasCalculateDocumentProxy(void *a1)
{
  return CanvasCalculateDocumentProxy.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CanvasCalculateDocumentProxy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 56);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static Dictionary<>.== infix(_:_:)(v4, v5);
  char v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SortableCalculateExpression>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(pageIndex: Int, queryResult: SearchQueryResult)>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, SearchQueryResult)>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocumentFindResult>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  unint64_t v14 = 48 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 168);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[168 * v8]) {
      memmove(v12, v13, 168 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[168 * v8] || v12 >= &v13[168 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(CGPoint, CGPoint)>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchQueryResult>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Color>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakObserver>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v13 >= v14 + 16 * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CalculateExpression.TokenType>, MEMORY[0x263F2FC58]);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CalculateMathItem>, &demangling cache variable for type metadata for CalculateMathItem);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyCanvas, CGFloat)>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyCanvas, CGFloat));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>, MEMORY[0x263F330F8]);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(CRKeyPath, AnyCanvasElementView)>, &demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x263F07508]);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>, (uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStroke>, MEMORY[0x263F14AA8]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UITextContentType>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for UITextContentType(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]?>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<FindResult>, &demangling cache variable for type metadata for FindResult);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_0(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, NSObject));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<PDFAnnotationElement>>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>, MEMORY[0x263F14A70]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Set<ResizeHandleType>>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<ResizeHandleType>);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LinkItem>);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinkItem);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size_0(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[40 * v9]) {
      memmove(v13, v14, 40 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v9] || v13 >= &v14[40 * v9])
  {
    memcpy(v13, v14, 40 * v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size_0(v11);
    unint64_t v13 = v12 - 32;
    if (v12 < 32) {
      unint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    memcpy(v14, v15, 32 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v13 = (void *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size_0(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  unint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  size_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = _swift_stdlib_malloc_size_0(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  long long v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  long long v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  id v23 = *(void *)(v19 + 72) * v11;
  unint64_t v24 = &v21[v23];
  id v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size_0(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  long long v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v10 = v19;
    }
    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11 + *(void *)(*(void *)(v12 - 8) + 72) * v6, v12);
    uint64_t v13 = (uint64_t *)(*(void *)(v10 + 56) + 40 * v6);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = v13[2];
    uint64_t v17 = v13[3];
    uint64_t v18 = v13[4];
    specialized _NativeDictionary._delete(at:)(v6, v10);
    *uint64_t v3 = v10;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  *a2 = v14;
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v17;
  a2[4] = v18;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v14;
    }
    uint64_t v12 = *(void *)(v11 + 48);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * v6, v13);
    outlined init with take of WeakCalculateExpression(*(void *)(v11 + 56) + 8 * v6, a2);
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t vars8;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = *v3;
    long long v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      unint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CRKeyPath();
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v20 = v12;
    uint64_t v13 = *(void *)(v12 + 72) * v6;
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10 + v13, v11);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, *(void *)(v9 + 56) + v13, v11);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v11;
  }
  else
  {
    uint64_t v18 = type metadata accessor for CRKeyPath();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v18;
    }

    uint64_t v12 = (uint64_t *)(*(void *)(v11 + 56) + 40 * v6);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = v12[2];
    uint64_t v16 = v12[3];
    uint64_t v17 = v12[4];
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v16;
  *(void *)(a2 + 32) = v17;
  *(unsigned char *)(a2 + 40) = (v8 & 1) == 0;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t vars8;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = *v3;
    long long v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>, MEMORY[0x263F07508], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, CheckedContinuation<CGImageRef?, Never>>);
      unint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
    unint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UUID, PKDrawing>);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UUID, NSNumber>);
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(MEMORY[0x263F330F8], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>);
    char v7 = v12;
  }
  char v8 = *(void *)(v7 + 48);
  unint64_t v9 = type metadata accessor for CRKeyPath();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7, MEMORY[0x263F330F8], (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8], MEMORY[0x263F33108]);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, ()>);
    char v7 = v10;
  }

  char v8 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(MEMORY[0x263F33060], &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, PaperKitPDFDocument>);
    char v7 = v12;
  }
  char v8 = *(void *)(v7 + 48);
  unint64_t v9 = type metadata accessor for CRAsset();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7, MEMORY[0x263F33060], (unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060], MEMORY[0x263F33070]);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v7 = *v1;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(MEMORY[0x263F330F8], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>);
    char v7 = v12;
  }
  char v8 = *(void *)(v7 + 48);
  unint64_t v9 = type metadata accessor for CRKeyPath();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    char v7 = v10;
  }

  char v8 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(MEMORY[0x263F07508], a2);
    uint64_t v9 = v14;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9, MEMORY[0x263F07508], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508], MEMORY[0x263F07518]);
  *uint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }

    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(Swift::UInt *a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for PDFPageID();
  _s8PaperKit19GraphableExpressionVWOhTm_0(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    a1 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v9 = *v2;
      Swift::Int v17 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        Swift::Int v9 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  id v6 = (id)a1;
  uint64_t v7 = __CocoaDictionary.lookup(_:)();

  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease();
  uint64_t v8 = __CocoaSet.count.getter();
  Swift::Int v9 = specialized _NativeDictionary.init(_:capacity:)(v5, v8);
  swift_retain();
  a1 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
  char v11 = v10;
  swift_release();
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  uint64_t v15 = *(void *)(*(void *)(v9 + 56) + 8 * a1);
  specialized _NativeDictionary._delete(at:)(a1, v9);
  *uint64_t v2 = v9;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  outlined consume of Data._Representation(*(void *)(*(void *)(v9 + 48) + 16 * v6), *(void *)(*(void *)(v9 + 48) + 16 * v6 + 8));
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 24 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, String>);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v8;
  uint64_t v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  id v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  uint64_t v46 = v6;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      uint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v32;
      uint64_t v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *unint64_t v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  unint64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (**v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  void *v44;
  void (**v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;

  uint64_t v3 = v2;
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  id v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  uint64_t v13 = v12 & v11;
  int64_t v42 = v2;
  uint64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  unint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  Swift::Int v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    unint64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    int64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      Swift::Int v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        unint64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            Swift::Int v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        Swift::Int v17 = v25;
      }
    }
LABEL_21:
    uint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    int64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    unint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      int64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *unint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  int64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  void *v46;
  void (**v47)(char *, unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  int v50;
  void (**v51)(char *, unint64_t, uint64_t);
  uint64_t v52;
  int64_t v53;
  char *v54;
  uint64_t v55;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SortableCalculateExpression>);
  uint64_t v50 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  char v54 = v8;
  id v44 = v2;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v46 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v45 = (unint64_t)(v12 + 63) >> 6;
  int v47 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v51 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v48 = v6;
  uint64_t v49 = v9;
  unint64_t v55 = v5;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v45) {
      break;
    }
    unint64_t v24 = v46;
    unint64_t v25 = v46[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v25 = v46[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v46[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v45) {
              goto LABEL_34;
            }
            unint64_t v25 = v46[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    uint64_t v53 = v18;
    if (v50)
    {
      (*v51)(v54, v28, v55);
      uint64_t v29 = *(void *)(v9 + 56) + 40 * v22;
      uint64_t v31 = *(void **)v29;
      uint64_t v30 = *(void *)(v29 + 8);
      uint64_t v32 = *(void *)(v29 + 16);
      uint64_t v33 = *(void *)(v29 + 32);
      uint64_t v52 = *(void *)(v29 + 24);
    }
    else
    {
      (*v47)(v54, v28, v55);
      unint64_t v34 = *(void *)(v9 + 56) + 40 * v22;
      uint64_t v31 = *(void **)v34;
      uint64_t v30 = *(void *)(v34 + 8);
      uint64_t v32 = *(void *)(v34 + 16);
      uint64_t v33 = *(void *)(v34 + 32);
      uint64_t v52 = *(void *)(v34 + 24);
      unint64_t v35 = v31;
      swift_retain();
      swift_bridgeObjectRetain();
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    char v36 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v37 = result & ~v36;
    BOOL v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v16 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v37) & ~*(void *)(v16 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v41 = v38 == v40;
        if (v38 == v40) {
          BOOL v38 = 0;
        }
        v39 |= v41;
        int64_t v42 = *(void *)(v16 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v19 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v51)(*(void *)(v11 + 48) + v27 * v19, v54, v55);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 40 * v19);
    *unint64_t v20 = v31;
    v20[1] = v30;
    v20[2] = v32;
    int64_t v18 = v53;
    v20[3] = v52;
    v20[4] = v33;
    ++*(void *)(v11 + 16);
    uint64_t v6 = v48;
    uint64_t v9 = v49;
  }
  swift_release();
  uint64_t v3 = v44;
  unint64_t v24 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v9 + 32);
  if (v43 >= 64) {
    bzero(v24, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v43;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  void (**v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  void (**v45)(char *, unint64_t, uint64_t);
  char v46[8];

  uint64_t v3 = v2;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, WeakCalculateExpression>);
  id v44 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    unint64_t v37 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v39 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    uint64_t v14 = v13 & v12;
    BOOL v38 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    unint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    Swift::Int v17 = 0;
    uint64_t v41 = v8;
    int64_t v42 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        unint64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v38) {
          goto LABEL_34;
        }
        unint64_t v22 = v39[v21];
        ++v17;
        if (!v22)
        {
          Swift::Int v17 = v21 + 1;
          if (v21 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v22 = v39[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v44)
              {
                char v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                Swift::Int v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v22 = v39[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            Swift::Int v17 = v23;
          }
        }
LABEL_21:
        uint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      unint64_t v24 = v5;
      unint64_t v25 = *(void *)(v5 + 72);
      int64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v42;
      unint64_t v28 = v43;
      if (v44)
      {
        (*v45)(v42, v26, v43);
        outlined init with take of WeakCalculateExpression(*(void *)(v8 + 56) + 8 * v20, (uint64_t)v46);
      }
      else
      {
        (*v40)(v42, v26, v43);
        outlined init with copy of WeakCalculateExpression();
      }
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      uint64_t v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        int64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          unint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        int64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v45)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = outlined init with take of WeakCalculateExpression((uint64_t)v46, *(void *)(v10 + 56) + 8 * v18);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v41;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UUID, PKDrawing>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UUID, NSNumber>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  long long v47[2];

  uint64_t v3 = v2;
  id v44 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CalculateMathItem>);
  uint64_t v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v40 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  uint64_t v14 = v13 & v12;
  BOOL v38 = v2;
  uint64_t v39 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  unint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  Swift::Int v17 = 0;
  int64_t v42 = v8;
  uint64_t v43 = v7;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    unint64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    unint64_t v22 = v40;
    int64_t v23 = v40[v21];
    ++v17;
    if (!v23)
    {
      Swift::Int v17 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      int64_t v23 = v40[v17];
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            Swift::Int v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v39) {
              goto LABEL_34;
            }
            int64_t v23 = v40[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        Swift::Int v17 = v24;
      }
    }
LABEL_21:
    uint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    unint64_t v25 = v5;
    int64_t v26 = *(void *)(v5 + 72);
    uint64_t v27 = *(void *)(v8 + 48) + v26 * v20;
    unint64_t v28 = v43;
    uint64_t v29 = v44;
    if (v45)
    {
      (*v46)(v43, v27, v44);
      outlined init with take of FindResult((long long *)(*(void *)(v8 + 56) + 40 * v20), (uint64_t)v47);
    }
    else
    {
      (*v41)(v43, v27, v44);
      outlined init with copy of FindResult(*(void *)(v8 + 56) + 40 * v20, (uint64_t)v47);
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v31 = result & ~v30;
    uint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        unint64_t v35 = v32 == v34;
        if (v32 == v34) {
          uint64_t v32 = 0;
        }
        v33 |= v35;
        char v36 = *(void *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      int64_t v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*v46)((char *)(*(void *)(v10 + 48) + v26 * v18), (unint64_t)v28, v29);
    uint64_t result = outlined init with take of FindResult(v47, *(void *)(v10 + 56) + 40 * v18);
    ++*(void *)(v10 + 16);
    uint64_t v5 = v25;
    uint64_t v8 = v42;
  }
  swift_release();
  uint64_t v3 = v38;
  unint64_t v22 = v40;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v37;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>);
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  Swift::Int v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  int64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    unint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    int64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      int64_t v26 = v42[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            int64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    unint64_t v28 = *(void *)(v45 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  BOOL v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CalculateGraphExpression>);
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  Swift::Int v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  int64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    unint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    int64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      int64_t v26 = v42[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            int64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    unint64_t v28 = *(void *)(v45 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  BOOL v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  void *v46;
  void (**v47)(char *, unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  unint64_t v53;
  int64_t v54;
  char *v55;

  uint64_t v3 = v2;
  uint64_t v50 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(void *)(v50 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v50);
  unint64_t v55 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v51 = (char *)&v44 - v8;
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, CRKeyPath>);
  uint64_t v52 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v46 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  id v44 = v3;
  uint64_t v45 = (unint64_t)(v12 + 63) >> 6;
  int v47 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  uint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  Swift::Int v17 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v19 = 0;
  uint64_t v48 = v5;
  uint64_t v49 = v9;
  while (1)
  {
    if (v15)
    {
      int64_t v23 = __clz(__rbit64(v15));
      unint64_t v24 = (v15 - 1) & v15;
      unint64_t v25 = v23 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v45) {
      break;
    }
    uint64_t v27 = v46;
    unint64_t v28 = v46[v26];
    ++v19;
    if (!v28)
    {
      unint64_t v19 = v26 + 1;
      if (v26 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v28 = v46[v19];
      if (!v28)
      {
        uint64_t v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            unint64_t v19 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v45) {
              goto LABEL_34;
            }
            unint64_t v28 = v46[v19];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v19 = v29;
      }
    }
LABEL_21:
    unint64_t v24 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v5 + 72);
    uint64_t v31 = v30 * v25;
    uint64_t v32 = *(void *)(v9 + 48) + v30 * v25;
    uint64_t v53 = v24;
    char v54 = v19;
    if (v52)
    {
      uint64_t v33 = *v16;
      unint64_t v35 = v50;
      unint64_t v34 = v51;
      (*v16)(v51, v32, v50);
    }
    else
    {
      uint64_t v33 = *v47;
      unint64_t v35 = v50;
      unint64_t v34 = v51;
      (*v47)(v51, v32, v50);
    }
    v33(v55, *(void *)(v9 + 56) + v31, v35);
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    char v36 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v37 = result & ~v36;
    BOOL v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v17 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v37) & ~*(void *)(v17 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v41 = v38 == v40;
        if (v38 == v40) {
          BOOL v38 = 0;
        }
        v39 |= v41;
        int64_t v42 = *(void *)(v17 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v20 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    unint64_t v21 = v30 * v20;
    unint64_t v22 = *v16;
    (*v16)((char *)(*(void *)(v11 + 48) + v30 * v20), (unint64_t)v34, v35);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v22)(*(void *)(v11 + 56) + v21, v55, v35);
    ++*(void *)(v11 + 16);
    uint64_t v5 = v48;
    uint64_t v9 = v49;
    unint64_t v15 = v53;
    unint64_t v19 = v54;
  }
  swift_release();
  uint64_t v3 = v44;
  uint64_t v27 = v46;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v9 + 32);
  if (v43 >= 64) {
    bzero(v27, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v27 = -1 << v43;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, FormPageAnalytics>);
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  Swift::Int v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  int64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    unint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    int64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      int64_t v26 = v42[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            int64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    unint64_t v28 = *(void *)(v45 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  BOOL v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  void *v46;
  void (**v47)(char *, unint64_t, uint64_t);
  uint64_t i;
  int v49;
  void (**v50)(char *, unint64_t, uint64_t);
  uint64_t v51;

  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform>);
  uint64_t v49 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v46 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  id v44 = v2;
  uint64_t v45 = (unint64_t)(v12 + 63) >> 6;
  int v47 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v50 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v51 = v5;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v45) {
      break;
    }
    unint64_t v24 = v46;
    unint64_t v25 = v46[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v25 = v46[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v46[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v45) {
              goto LABEL_34;
            }
            unint64_t v25 = v46[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v49) {
      (*v50)(v8, v28, v51);
    }
    else {
      (*v47)(v8, v28, v51);
    }
    uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 48 * v22);
    uint64_t v31 = v29[4];
    uint64_t v30 = v29[5];
    uint64_t v33 = v29[2];
    uint64_t v32 = v29[3];
    unint64_t v35 = *v29;
    unint64_t v34 = v29[1];
    lazy protocol witness table accessor for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    char v36 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v37 = result & ~v36;
    BOOL v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v16 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v37) & ~*(void *)(v16 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v41 = v38 == v40;
        if (v38 == v40) {
          BOOL v38 = 0;
        }
        v39 |= v41;
        int64_t v42 = *(void *)(v16 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v19 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v50)(*(void *)(v11 + 48) + v27 * v19, v8, v51);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 48 * v19);
    *unint64_t v20 = v35;
    v20[1] = v34;
    v20[2] = v33;
    v20[3] = v32;
    v20[4] = v31;
    v20[5] = v30;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v44;
  unint64_t v24 = v46;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v9 + 32);
  if (v43 >= 64) {
    bzero(v24, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v43;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for PDFPageID();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (Swift::UInt *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFPageID, Int>);
  int64_t v42 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v39 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  uint64_t v14 = v13 & v12;
  unint64_t v37 = v2;
  BOOL v38 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  Swift::Int v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    unint64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v38) {
      break;
    }
    unint64_t v22 = v39;
    int64_t v23 = v39[v21];
    ++v17;
    if (!v23)
    {
      Swift::Int v17 = v21 + 1;
      if (v21 + 1 >= v38) {
        goto LABEL_34;
      }
      int64_t v23 = v39[v17];
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v38)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v37;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v23 = v39[v24];
        if (!v23)
        {
          while (1)
          {
            Swift::Int v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v38) {
              goto LABEL_34;
            }
            int64_t v23 = v39[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        Swift::Int v17 = v24;
      }
    }
LABEL_21:
    uint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    unint64_t v25 = *(void *)(v40 + 72);
    int64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v42) {
      outlined init with take of GraphableExpression(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    }
    else {
      outlined init with copy of PDFPageID(v26, (uint64_t)v7);
    }
    uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*v7);
    type metadata accessor for CRAsset();
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0;
        }
        v31 |= v33;
        unint64_t v34 = *(void *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      int64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = outlined init with take of GraphableExpression((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    *(void *)(*(void *)(v10 + 56) + 8 * v18) = v27;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  unint64_t v22 = v39;
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>, &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Ref<PDFAnnotationElement>>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRAsset();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRAsset, PaperKitPDFDocument>);
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  Swift::Int v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  int64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    unint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    int64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      int64_t v26 = v42[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            int64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    unint64_t v28 = *(void *)(v45 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  BOOL v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  void (**v40)(char *, unint64_t, uint64_t);
  uint64_t i;
  int v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t v44;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>);
  int64_t v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    unint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    BOOL v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    id v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        unint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        int64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          int64_t v23 = v39[v18];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                char v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            int64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                int64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      unint64_t v25 = *(void *)(v6 + 72);
      int64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      unint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      uint64_t v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          unint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, SharedTagged_9<TaggedCanvasElement>>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  void (**v40)(char *, unint64_t, uint64_t);
  uint64_t i;
  int v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t v44;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRAsset();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRAsset, Int>);
  int64_t v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    unint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    BOOL v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    id v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        unint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        int64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          int64_t v23 = v39[v18];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                char v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            int64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                int64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      unint64_t v25 = *(void *)(v6 + 72);
      int64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      unint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      uint64_t v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          unint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CRKeyPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, PDFAnnotation>);
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  Swift::Int v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  int64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    unint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    int64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      int64_t v26 = v42[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            int64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    unint64_t v28 = *(void *)(v45 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  BOOL v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (**v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  void *v44;
  uint64_t v45;
  void (**v46)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t (**v51)(unint64_t, char *, uint64_t);
  char *v52;
  uint64_t v53;

  uint64_t v3 = v2;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  uint64_t v5 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, CheckedContinuation<CGImageRef?, Never>>);
  uint64_t v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  unint64_t v15 = *(void *)(v11 + 64);
  id v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  Swift::Int v17 = v16 & v15;
  int64_t v42 = v2;
  uint64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  int64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  unint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  unint64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      int64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    unint64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    int64_t v26 = v44;
    uint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      unint64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      uint64_t v27 = v44[v21];
      if (!v27)
      {
        unint64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            unint64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            uint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v21 = v28;
      }
    }
LABEL_21:
    Swift::Int v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    uint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    char v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v37 = 0;
      BOOL v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v39 = v36 == v38;
        if (v36 == v38) {
          char v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  int64_t v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _OWORD *v19;
  long long v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  long long *v31;
  long long v32;
  long long *v33;
  long long v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  void *v47;
  void (**v48)(char *, unint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  void (**v53)(char *, unint64_t, uint64_t);
  long long v54;
  long long v55;

  uint64_t v3 = v2;
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CanvasCollaborationStateView.CollaborationCursor>);
  uint64_t v52 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v45 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    int v47 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    uint64_t v14 = v13 & v12;
    uint64_t v46 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v53 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    unint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    Swift::Int v17 = 0;
    uint64_t v49 = v8;
    uint64_t v50 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v21 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v22 = v21 | (v17 << 6);
      }
      else
      {
        int64_t v23 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v46) {
          goto LABEL_34;
        }
        unint64_t v24 = v47[v23];
        ++v17;
        if (!v24)
        {
          Swift::Int v17 = v23 + 1;
          if (v23 + 1 >= v46) {
            goto LABEL_34;
          }
          unint64_t v24 = v47[v17];
          if (!v24)
          {
            unint64_t v25 = v23 + 2;
            if (v25 >= v46)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v45;
              if (v52)
              {
                uint64_t v43 = 1 << *(unsigned char *)(v8 + 32);
                if (v43 >= 64) {
                  bzero(v47, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v47 = -1 << v43;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v47[v25];
            if (!v24)
            {
              while (1)
              {
                Swift::Int v17 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v46) {
                  goto LABEL_34;
                }
                unint64_t v24 = v47[v17];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            Swift::Int v17 = v25;
          }
        }
LABEL_21:
        uint64_t v14 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v17 << 6);
      }
      int64_t v26 = v5;
      uint64_t v27 = *(void *)(v5 + 72);
      unint64_t v28 = *(void *)(v8 + 48) + v27 * v22;
      uint64_t v29 = v50;
      uint64_t v30 = v51;
      if (v52)
      {
        (*v53)(v50, v28, v51);
        uint64_t v31 = (long long *)(*(void *)(v8 + 56) + 32 * v22);
        uint64_t v32 = v31[1];
        char v54 = *v31;
        unint64_t v55 = v32;
      }
      else
      {
        (*v48)(v50, v28, v51);
        uint64_t v33 = (long long *)(*(void *)(v8 + 56) + 32 * v22);
        unint64_t v34 = v33[1];
        char v54 = *v33;
        unint64_t v55 = v34;
        swift_bridgeObjectRetain();
        unint64_t v35 = *((id *)&v54 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      char v36 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v37 = result & ~v36;
      BOOL v38 = v37 >> 6;
      if (((-1 << v37) & ~*(void *)(v15 + 8 * (v37 >> 6))) != 0)
      {
        int64_t v18 = __clz(__rbit64((-1 << v37) & ~*(void *)(v15 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v39 = 0;
        uint64_t v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v41 = v38 == v40;
          if (v38 == v40) {
            BOOL v38 = 0;
          }
          v39 |= v41;
          int64_t v42 = *(void *)(v15 + 8 * v38);
        }
        while (v42 == -1);
        int64_t v18 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v53)(*(void *)(v10 + 48) + v27 * v18, v29, v30);
      unint64_t v19 = (_OWORD *)(*(void *)(v10 + 56) + 32 * v18);
      unint64_t v20 = v55;
      *unint64_t v19 = v54;
      v19[1] = v20;
      ++*(void *)(v10 + 16);
      uint64_t v5 = v26;
      uint64_t v8 = v49;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<DrawingIdentifier, CalculateDocumentController>);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  char v36 = v2;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v6 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((v6 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v31, sel_hash));
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v8 + 48) + v19) = v31;
    *(void *)(*(void *)(v8 + 56) + v19) = v32;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  int64_t v23 = (void *)(v5 + 64);
  if ((v6 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
  uint64_t v35 = a2;
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  id v33 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    unint64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    uint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      uint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        unint64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            uint64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            uint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v20;
      }
    }
LABEL_21:
    uint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    unint64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    int64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      outlined init with take of Any(v22, v36);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v22, (uint64_t)v36);
      int64_t v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    unint64_t v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    char v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      int64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      int64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)outlined init with take of Any(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  int64_t v42 = a2;
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    int64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      uint64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      int64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        char v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            uint64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            int64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v26;
      }
    }
LABEL_30:
    uint64_t v10 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    id v34 = *v32;
    id v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    char v36 = *v35;
    int64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = 0;
      BOOL v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, ()>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    id v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    id v33 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        unint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        uint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          uint64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          uint64_t v19 = v34[v13];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                uint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v13 = v20;
          }
        }
LABEL_21:
        uint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      int64_t v23 = *v21;
      int64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      int64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      char v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        int64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        int64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _OWORD v35[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v33 = v2;
  id v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v34 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v34 + 8 * v14);
      if (!v20)
      {
        unint64_t v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v34 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v34 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    uint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    int64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * v17);
    int64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if (a2)
    {
      outlined init with take of Any(v23, v35);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v35);
      unint64_t v24 = v22;
    }
    Hasher.init(_seed:)();
    type metadata accessor for CFStringRef(0);
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    char v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      uint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v7 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v33;
  uint64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v19 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  long long v36;
  long long v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (CGRect, CGFloat)>);
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v35 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    uint64_t v31 = *(void *)(v5 + 56) + 40 * v21;
    char v36 = *(_OWORD *)(v31 + 16);
    int64_t v37 = *(_OWORD *)v31;
    uint64_t v32 = *(void *)(v31 + 32);
    if ((a2 & 1) == 0) {
      id v33 = v30;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    uint64_t v19 = *(void *)(v7 + 56) + 40 * v18;
    *(_OWORD *)uint64_t v19 = v37;
    *(_OWORD *)(v19 + 16) = v36;
    *(void *)(v19 + 32) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  long long v36;
  long long v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, StickerDropPreviewInfo>);
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v35 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    uint64_t v31 = *(void *)(v5 + 56) + 40 * v21;
    char v36 = *(_OWORD *)(v31 + 16);
    int64_t v37 = *(_OWORD *)v31;
    uint64_t v32 = *(void *)(v31 + 32);
    if ((a2 & 1) == 0) {
      id v33 = v30;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    uint64_t v19 = *(void *)(v7 + 56) + 40 * v18;
    *(_OWORD *)uint64_t v19 = v37;
    *(_OWORD *)(v19 + 16) = v36;
    *(void *)(v19 + 32) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (_:)>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSObject, Swift.AnyObject>);
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  char v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_unknownObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UIColor, UIImage>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v38 = a2;
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  char v36 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v25 = 0;
      char v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        BOOL v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  void *v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFDocumentWriteOption, Swift.AnyObject>);
  int64_t v37 = a2;
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    id v34 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        int64_t v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          uint64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          int64_t v23 = v36[v13];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v34;
              if (v37)
              {
                id v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v36 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                int64_t v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void **)(*(void *)(v5 + 48) + v29);
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + v29);
      if ((v37 & 1) == 0)
      {
        uint64_t v32 = v30;
        swift_unknownObjectRetain();
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      int64_t v14 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = v14 & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v25 = 0;
        char v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          BOOL v28 = *(void *)(v11 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v7 + 48) + v19) = v30;
      *(void *)(*(void *)(v7 + 56) + v19) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  long long v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  long long v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  char v37;
  long long v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, AsyncCache<Data, CGImageRef>.CacheState>);
  int64_t v37 = a2;
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        int64_t v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          uint64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          int64_t v23 = v36[v13];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v37)
              {
                id v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                int64_t v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v30 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v31 = *(void *)v30;
      uint64_t v32 = *(void **)(v30 + 8);
      id v33 = *(unsigned char *)(v30 + 16);
      uint64_t v38 = v29;
      if ((v37 & 1) == 0)
      {
        outlined copy of Data._Representation(v29, *((unint64_t *)&v29 + 1));
        outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v31, v32, v33);
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v18 = v38;
      }
      else
      {
        int64_t v25 = 0;
        char v26 = (unint64_t)(63 - v14) >> 6;
        unint64_t v18 = v38;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          BOOL v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v17) = v18;
      uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(void *)uint64_t v19 = v31;
      *(void *)(v19 + 8) = v32;
      *(unsigned char *)(v19 + 16) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  long long v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  long long v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  long long v41;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, String>);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v38 = v2;
  uint64_t v39 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      int64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v23 = v22 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v39) {
      break;
    }
    int64_t v25 = (void *)(v5 + 64);
    char v26 = *(void *)(v40 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v39) {
        goto LABEL_33;
      }
      char v26 = *(void *)(v40 + 8 * v14);
      if (!v26)
      {
        unint64_t v27 = v24 + 2;
        if (v27 >= v39)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v38;
          if ((v6 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        char v26 = *(void *)(v40 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v39) {
              goto LABEL_33;
            }
            char v26 = *(void *)(v40 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v27;
      }
    }
LABEL_30:
    unint64_t v11 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_31:
    uint64_t v32 = 16 * v23;
    id v33 = *(_OWORD *)(*(void *)(v5 + 48) + v32);
    id v34 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    uint64_t v35 = *v34;
    char v36 = v34[1];
    uint64_t v41 = v33;
    if ((v6 & 1) == 0)
    {
      outlined copy of Data._Representation(v33, *((unint64_t *)&v33 + 1));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v19 = v41;
    }
    else
    {
      BOOL v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v15) >> 6;
      uint64_t v19 = v41;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          unint64_t v17 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v20 = 16 * v18;
    *(_OWORD *)(*(void *)(v8 + 48) + v20) = v19;
    unint64_t v21 = (void *)(*(void *)(v8 + 56) + v20);
    *unint64_t v21 = v35;
    v21[1] = v36;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  int64_t v25 = (void *)(v5 + 64);
  if ((v6 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  long long v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PaperKitPDFPage, PageOverlayView>);
  char v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    id v33 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v15 << 6);
      }
      else
      {
        int64_t v22 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v12) {
          goto LABEL_33;
        }
        int64_t v23 = v9[v22];
        ++v15;
        if (!v23)
        {
          uint64_t v15 = v22 + 1;
          if (v22 + 1 >= v12) {
            goto LABEL_33;
          }
          int64_t v23 = v9[v15];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v33;
                goto LABEL_40;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v32;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v23 = v9[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v15 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v15 >= v12) {
                  goto LABEL_33;
                }
                int64_t v23 = v9[v15];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v15 = v24;
          }
        }
LABEL_30:
        unint64_t v11 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
      id v34 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
      {
        uint64_t v30 = v29;
        uint64_t v31 = (id)v34;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      unint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v25 = 0;
        char v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v27 = v18 == v26;
          if (v18 == v26) {
            unint64_t v18 = 0;
          }
          v25 |= v27;
          BOOL v28 = *(void *)(v13 + 8 * v18);
        }
        while (v28 == -1);
        uint64_t v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(void *)(*(void *)(v7 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v19) = v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PDFAnnotation, AnyCanvasElementView>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  id v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  int64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  uint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    unint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      id v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      id v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  unint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v33 = v3;
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = (void *)(v6 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v6 + 64);
    int64_t v13 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v14 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v22 = v21 | (v16 << 6);
      }
      else
      {
        int64_t v23 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v23 >= v13) {
          goto LABEL_33;
        }
        unint64_t v24 = v10[v23];
        ++v16;
        if (!v24)
        {
          int64_t v16 = v23 + 1;
          if (v23 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v24 = v10[v16];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v4 = v33;
                goto LABEL_40;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v6 + 32);
              if (v32 >= 64) {
                bzero((void *)(v6 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v10 = -1 << v32;
              }
              uint64_t v4 = v33;
              *(void *)(v6 + 16) = 0;
              break;
            }
            unint64_t v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v16 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v16 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v24 = v10[v16];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v16 = v25;
          }
        }
LABEL_30:
        unint64_t v12 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v16 << 6);
      }
      uint64_t v30 = *(void **)(*(void *)(v6 + 48) + 8 * v22);
      long long v34 = *(_OWORD *)(*(void *)(v6 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
      {
        id v31 = v30;
        swift_retain();
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      uint64_t v17 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v18 = result & ~v17;
      unint64_t v19 = v18 >> 6;
      if (((-1 << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v28 = v19 == v27;
          if (v19 == v27) {
            unint64_t v19 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v19);
        }
        while (v29 == -1);
        unint64_t v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }
      *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(void *)(*(void *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20) = v34;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v37 = v3;
  BOOL v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v11 = v10 & *(void *)(v6 + 64);
  unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  int64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  uint64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    int64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      uint64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      int64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        char v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            uint64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            int64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v15 = v26;
      }
    }
LABEL_30:
    uint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    id v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      long long v34 = v32;
      unint64_t v35 = v33;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    int64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = 0;
      BOOL v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    unint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v37;
  unint64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v36 = 1 << *(unsigned char *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v36;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v8 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  unint64_t v55 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CRKeyPath();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  int64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  int v53 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v47 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v48 = v8 + 16;
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v51 = v8;
  uint64_t v52 = v11;
  unint64_t v21 = (void (**)(char *, unint64_t, uint64_t))(v11 + 32);
  char v54 = (uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v22 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v46) {
      break;
    }
    uint64_t v29 = v47;
    unint64_t v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v30 = v47[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v46) {
              goto LABEL_34;
            }
            unint64_t v30 = v47[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v52 + 72);
    unint64_t v33 = *(void *)(v14 + 48) + v32 * v27;
    if (v53)
    {
      (*v21)(v13, v33, v10);
      uint64_t v34 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 32))(v55, v34 + v35 * v27, v56);
    }
    else
    {
      (*v49)(v13, v33, v10);
      uint64_t v36 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v55, v36 + v35 * v27, v56);
    }
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v37 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*v21)((char *)(*(void *)(v16 + 48) + v32 * v25), (unint64_t)v13, v10);
    uint64_t result = (*v54)(*(void *)(v16 + 56) + v35 * v25, v55, v56);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v6 = v45;
  uint64_t v29 = v47;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v14 + 32);
  if (v44 >= 64) {
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v29 = -1 << v44;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v16;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        int64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for UUID() - 8) + 72);
        int64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        uint64_t v11 = v10;
        String.hash(into:)();
        uint64_t v12 = Hasher._finalize()();

        uint64_t result = swift_bridgeObjectRelease();
        int64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          int64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            Swift::Int v9 = v19[1];
            *unint64_t v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        unint64_t v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *int64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          int64_t v16 = (_OWORD *)(v15 + 32 * v3);
          int64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            Swift::Int v9 = v17[1];
            *int64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    unint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  long long *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)();
        outlined copy of Data._Representation(v11, v12);
        Data.hash(into:)();
        int64_t v13 = Hasher._finalize()();
        uint64_t result = outlined consume of Data._Representation(v11, v12);
        uint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          int64_t v16 = (_OWORD *)(v15 + 16 * v3);
          int64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *int64_t v16 = *v17;
          }
          unint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = v18 + 24 * v3;
          unint64_t v20 = (long long *)(v18 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v19 >= (unint64_t)v20 + 24 || (v21 = v3 == v6, int64_t v3 = v6, !v21))
          {
            Swift::Int v9 = *v20;
            *(void *)(v19 + 16) = *((void *)v20 + 2);
            *(_OWORD *)uint64_t v19 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    BOOL v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  unint64_t v26 = __OFSUB__(v25, 1);
  unint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        unint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        outlined copy of Data._Representation(v10, v11);
        Data.hash(into:)();
        uint64_t v12 = Hasher._finalize()();
        uint64_t result = outlined consume of Data._Representation(v10, v11);
        int64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          int64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *unint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      int64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v36 = (v12 + 1) & v11;
      uint64_t v37 = v13;
      uint64_t v14 = *(void *)(v5 + 72);
      uint64_t v38 = v5 + 16;
      uint64_t v35 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = v11;
      do
      {
        uint64_t v16 = v8;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v10;
        uint64_t v19 = v15;
        v37(v7, *(void *)(a2 + 48) + v14 * v10, v4);
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v35)(v7, v4);
        uint64_t v15 = v19;
        unint64_t v21 = v20 & v19;
        if (a1 >= (uint64_t)v36)
        {
          if (v21 >= v36 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v8 = v16;
            if (v17 * a1 < v18
              || (uint64_t v14 = v17, *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v14 = v17;
              uint64_t v15 = v19;
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v24 = *(void *)(a2 + 56);
            unint64_t v25 = v24 + 40 * a1;
            unint64_t v26 = (long long *)(v24 + 40 * v10);
            if (a1 != v10 || (a1 = v10, v25 >= (unint64_t)v26 + 40))
            {
              long long v27 = *v26;
              long long v28 = v26[1];
              *(void *)(v25 + 32) = *((void *)v26 + 4);
              *(_OWORD *)unint64_t v25 = v27;
              *(_OWORD *)(v25 + 16) = v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v36 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v8 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v15;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  void (**v31)(char *, uint64_t);
  void (*v32)(char *, unint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      BOOL v33 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      int64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      uint64_t v31 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v32 = v14;
      uint64_t v16 = v15;
      do
      {
        uint64_t v17 = v8;
        int64_t v18 = v16;
        uint64_t v19 = v16 * v10;
        v32(v7, *(void *)(a2 + 48) + v16 * v10, v4);
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v31)(v7, v4);
        unint64_t v21 = v20 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v21 >= v33 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v16 = v18;
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v8 = v17;
            if (a1 < (uint64_t)v10 || *(void *)(a2 + 56) + 8 * a1 >= *(void *)(a2 + 56) + 8 * v10 + 8)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
            }
            else
            {
              uint64_t v24 = a1 == v10;
              a1 = v10;
              if (!v24)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v33 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v8 = v17;
        uint64_t v16 = v18;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    unint64_t v25 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v26 = *v25;
    long long v27 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v25 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    long long v27 = *v25;
    unint64_t v26 = (-1 << a1) - 1;
  }
  *unint64_t v25 = v27 & v26;
  long long v28 = *(void *)(a2 + 16);
  uint64_t v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  specialized _NativeDictionary._delete(at:)(a1, a2, MEMORY[0x263F07508], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508], MEMORY[0x263F07518]);
}

{
  specialized _NativeDictionary._delete(at:)(a1, a2, MEMORY[0x263F330F8], (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8], MEMORY[0x263F33108]);
}

{
  uint64_t v4;
  uint64_t v5;
  Swift::UInt *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  uint64_t v30 = type metadata accessor for PDFPageID();
  uint64_t v4 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v6 = (Swift::UInt *)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = a2 + 64;
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    unint64_t v10 = ~v8;
    uint64_t v11 = _HashTable.previousHole(before:)();
    if ((*(void *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      uint64_t v29 = (v11 + 1) & v10;
      uint64_t v12 = *(void *)(v4 + 72);
      int64_t v13 = v10;
      do
      {
        uint64_t v14 = v12;
        uint64_t v15 = v12 * v9;
        uint64_t v16 = v13;
        outlined init with copy of PDFPageID(*(void *)(a2 + 48) + v12 * v9, (uint64_t)v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*v6);
        type metadata accessor for CRAsset();
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x263F33060]);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v17 = Hasher._finalize()();
        _s8PaperKit19GraphableExpressionVWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PDFPageID);
        int64_t v13 = v16;
        int64_t v18 = v17 & v16;
        if (a1 >= (uint64_t)v29)
        {
          if (v18 < v29)
          {
            uint64_t v12 = v14;
          }
          else
          {
            uint64_t v12 = v14;
            if (a1 >= v18) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v12 = v14;
          if (v18 >= v29 || a1 >= v18)
          {
LABEL_12:
            if (v12 * a1 < v15
              || *(void *)(a2 + 48) + v12 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v15 + v12))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_17:
              int64_t v13 = v16;
            }
            else if (v12 * a1 != v15)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_17;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * a1);
            unint64_t v21 = (void *)(v19 + 8 * v9);
            if (a1 != v9 || (a1 = v9, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              a1 = v9;
            }
          }
        }
        uint64_t v9 = (v9 + 1) & v13;
      }
      while (((*(void *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *uint64_t v22 = v24 & v23;
  unint64_t v25 = *(void *)(a2 + 16);
  unint64_t v26 = __OFSUB__(v25, 1);
  long long v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;

  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    unint64_t v10 = ~v8;
    BOOL v33 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      uint64_t v30 = (v11 + 1) & v10;
      uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      int64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        int64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v21 = *(void *)(a2 + 56);
            uint64_t v22 = (void *)(v21 + 8 * a1);
            uint64_t v23 = (void *)(v21 + 8 * v9);
            uint64_t v12 = v33;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 1))
            {
              *uint64_t v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v25 = *v24;
    unint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v26 = *v24;
    unint64_t v25 = (-1 << a1) - 1;
  }
  *uint64_t v24 = v26 & v25;
  long long v27 = *(void *)(a2 + 16);
  long long v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (**v38)(char *, uint64_t);
  void (*v39)(char *, unint64_t, uint64_t);
  unint64_t v40;
  uint64_t v41;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      char v40 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      int64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      unint64_t v41 = v13;
      uint64_t v38 = (void (**)(char *, uint64_t))(v13 - 8);
      unint64_t v39 = v14;
      uint64_t v37 = v11;
      do
      {
        uint64_t v16 = v8;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v10;
        v39(v7, *(void *)(a2 + 48) + v15 * v10, v4);
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v38)(v7, v4);
        uint64_t v20 = v19 & v11;
        if (a1 >= (uint64_t)v40)
        {
          if (v20 >= v40 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>)
                                        - 8)
                            + 72);
            unint64_t v25 = v24 * a1;
            unint64_t v26 = v23 + v24 * a1;
            long long v27 = v24 * v10;
            long long v28 = v23 + v24 * v10 + v24;
            uint64_t v29 = v25 < v27 || v26 >= v28;
            uint64_t v8 = v16;
            if (v29)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              uint64_t v11 = v37;
            }
            else
            {
              a1 = v10;
              uint64_t v11 = v37;
              if (v25 != v27)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v40 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v8 = v16;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *uint64_t v30 = v32 & v31;
  BOOL v33 = *(void *)(a2 + 16);
  uint64_t v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  long long v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    unint64_t v10 = ~v8;
    uint64_t v34 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      uint64_t v31 = (v11 + 1) & v10;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      BOOL v33 = v5 + 16;
      int64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v9;
        v32(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        int64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v21 = *(void *)(a2 + 56);
            uint64_t v22 = (_OWORD *)(v21 + 32 * a1);
            uint64_t v23 = (_OWORD *)(v21 + 32 * v9);
            uint64_t v12 = v34;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 2))
            {
              uint64_t v24 = v23[1];
              *uint64_t v22 = *v23;
              v22[1] = v24;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    unint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v26 = *v25;
    long long v27 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    long long v27 = *v25;
    unint64_t v26 = (-1 << a1) - 1;
  }
  *unint64_t v25 = v27 & v26;
  long long v28 = *(void *)(a2 + 16);
  uint64_t v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v44 = a4;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v12 = a2 + 64;
  uint64_t v13 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(void *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    uint64_t v15 = ~v13;
    uint64_t v16 = _HashTable.previousHole(before:)();
    if ((*(void *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      uint64_t v17 = (v16 + 1) & v15;
      BOOL v42 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v43 = v9 + 16;
      uint64_t v47 = *(void *)(v9 + 72);
      unint64_t v41 = (void (**)(char *, uint64_t))(v9 + 8);
      do
      {
        uint64_t v18 = v12;
        int64_t v19 = v47 * v14;
        v42(v11, *(void *)(a2 + 48) + v47 * v14, v8);
        unint64_t v20 = v17;
        uint64_t v21 = v15;
        _s10Foundation4UUIDVACSHAAWlTm_0(v44, v45);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v41)(v11, v8);
        uint64_t v23 = v22 & v21;
        uint64_t v15 = v21;
        uint64_t v17 = v20;
        if (a1 >= (uint64_t)v20)
        {
          if (v23 >= v20 && a1 >= v23)
          {
LABEL_17:
            uint64_t v26 = *(void *)(a2 + 48);
            unint64_t v27 = v26 + v47 * a1;
            unint64_t v28 = v26 + v19 + v47;
            if (v47 * a1 < v19 || v27 >= v28)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v12 = v18;
            }
            else
            {
              BOOL v30 = v47 * a1 == v19;
              uint64_t v12 = v18;
              if (!v30) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            uint64_t v31 = *(void *)(a2 + 56);
            uint64_t v32 = (void *)(v31 + 8 * a1);
            BOOL v33 = (void *)(v31 + 8 * v14);
            if (a1 != v14 || (a1 = v14, v32 >= v33 + 1))
            {
              *uint64_t v32 = *v33;
              a1 = v14;
            }
            goto LABEL_5;
          }
        }
        else if (v23 >= v20 || a1 >= v23)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v18;
LABEL_5:
        unint64_t v14 = (v14 + 1) & v15;
      }
      while (((*(void *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    uint64_t v34 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v35 = *v34;
    uint64_t v36 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v34 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v36 = *v34;
    uint64_t v35 = (-1 << a1) - 1;
  }
  *uint64_t v34 = v36 & v35;
  uint64_t v37 = *(void *)(a2 + 16);
  BOOL v38 = __OFSUB__(v37, 1);
  uint64_t v39 = v37 - 1;
  if (v38)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v39;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v33 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      BOOL v30 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v32 = v13;
      uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v30(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v19 < v31 || a1 < (uint64_t)v19) {
            goto LABEL_6;
          }
        }
        else if (v19 < v31 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        int64_t v22 = v15 * a1;
        if (v15 * a1 < v17 || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v17 + v15))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v22 != v17)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v23 = *(void *)(a2 + 56);
        unint64_t result = v23 + v22;
        if (v22 < v17 || result >= v23 + v17 + v15)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v22 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v12 = v33;
      }
      while (((*(void *)(v33 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *uint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v12 = *(void *)(a2 + 40);
        id v13 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v14 = NSObject._rawHashValue(seed:)(v12);

        Swift::Int v15 = v14 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v3 >= v15)
          {
LABEL_16:
            uint64_t v18 = *(void *)(a2 + 48);
            unint64_t v19 = (void *)(v18 + 8 * v3);
            unint64_t v20 = (void *)(v18 + 8 * v6);
            if (v3 != v6 || v19 >= v20 + 1) {
              *unint64_t v19 = *v20;
            }
            uint64_t v21 = *(void *)(a2 + 56);
            unint64_t v22 = v21 + 40 * v3;
            uint64_t v23 = (long long *)(v21 + 40 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v22 >= (unint64_t)v23 + 40))
            {
              long long v10 = *v23;
              long long v11 = v23[1];
              *(void *)(v22 + 32) = *((void *)v23 + 4);
              *(_OWORD *)unint64_t v22 = v10;
              *(_OWORD *)(v22 + 16) = v11;
              int64_t v3 = v6;
            }
          }
        }
        else if (v15 >= v9 || v3 >= v15)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *uint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        long long v10 = *(void *)(a2 + 40);
        long long v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        id v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            int64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *int64_t v17 = *v18;
            }
            unint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (void *)(v19 + 8 * v3);
            uint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *unint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *unint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        long long v10 = *(void *)(a2 + 40);
        long long v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        id v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            int64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *int64_t v17 = *v18;
            }
            unint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (_OWORD *)(v19 + 16 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *unint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *unint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  id v13 = (void *)(a5[7] + 16 * a1);
  *id v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  unint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  Swift::Int v12 = a5[2];
  id v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  long long v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  uint64_t v4 = *(void *)(a3 + 32);
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v5 = a4[7] + 40 * result;
  BOOL v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a3;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = v4;
  uint64_t v7 = a4[2];
  uint64_t v8 = __OFADD__(v7, 1);
  unint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a4[2] = v9;
  }
  return result;
}

{
  uint64_t v4;
  long long v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v4 = a4[7] + 40 * result;
  uint64_t v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  *(void *)(v4 + 32) = *(void *)(a3 + 32);
  BOOL v6 = a4[2];
  uint64_t v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v11 = a4[7] + 40 * a1;
  *(void *)(v11 + 32) = *(void *)(a3 + 32);
  long long v12 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a3;
  *(_OWORD *)(v11 + 16) = v12;
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = outlined init with take of WeakCalculateExpression(a3, a4[7] + 8 * a1);
  uint64_t v11 = a4[2];
  long long v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x263F07508]);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x263F330F8]);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CRKeyPath();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  long long v12 = *(void *)(v10 + 72) * a1;
  v11(v8 + v12, a2, v9);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a4[7] + v12, a3, v9);
  BOOL v14 = a4[2];
  uint64_t v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for PDFPageID();
  uint64_t result = outlined init with take of GraphableExpression(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for PDFPageID);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  long long v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x263F33060]);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x263F330F8]);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x263F33060]);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a4[6];
  uint64_t v10 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a4[6];
  uint64_t v10 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  BOOL v7 = (void *)(a7[6] + 16 * result);
  *BOOL v7 = a2;
  v7[1] = a3;
  uint64_t v8 = a7[7] + 24 * result;
  *(void *)uint64_t v8 = a4;
  *(void *)(v8 + 8) = a5;
  *(unsigned char *)(v8 + 16) = a6 & 1;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v14 = a7[6];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14 + *(void *)(*(void *)(v15 - 8) + 72) * a1, a2, v15);
  int64_t v17 = (void *)(a7[7] + 32 * a1);
  *int64_t v17 = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  uint64_t v18 = a7[2];
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    a7[2] = v20;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, String>);
  uint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v30 = v40;
    uint64_t v29 = v32;
LABEL_25:
    *uint64_t v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v39 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  uint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      uint64_t v18 = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v18 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v17 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v18 + 48) + v19, v13);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 16 * v17;
    unint64_t v22 = (uint64_t *)(v20 + 16 * v17);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v15 + 48) + v19, v14, v13);
    uint64_t v25 = (void *)(*(void *)(v15 + 56) + v21);
    *uint64_t v25 = v23;
    v25[1] = v24;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    int64_t v28 = v36;
    unint64_t v27 = v30;
LABEL_25:
    void *v27 = v28;
    return result;
  }
  BOOL v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    BOOL v7 = v36;
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  uint64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  int64_t v34 = v1 + 16;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      uint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      uint64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      uint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    uint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    unint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    unint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    unint64_t v22 = v36;
    uint64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *uint64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    unint64_t v27 = v30;
    int64_t v28 = v36;
    goto LABEL_25;
  }
  uint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    uint64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26[8];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, WeakCalculateExpression>);
  uint64_t v6 = *v0;
  BOOL v7 = static _DictionaryStorage.copy(original:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    Swift::Int *v1 = v8;
    return result;
  }
  unint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v23 = v6 + 64;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      uint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      uint64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    uint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    outlined init with copy of WeakCalculateExpression();
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    uint64_t result = (void *)outlined init with take of WeakCalculateExpression((uint64_t)v26, *(void *)(v8 + 56) + 8 * v16);
  }
  uint64_t v20 = v18 + 2;
  if (v20 >= v24)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    uint64_t v11 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  long long v27[2];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CalculateMathItem>);
  uint64_t v6 = *v0;
  BOOL v7 = static _DictionaryStorage.copy(original:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    Swift::Int *v1 = v8;
    return result;
  }
  uint64_t v23 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v25 = (unint64_t)(v12 + 63) >> 6;
  int64_t v26 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      uint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    unint64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      uint64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    uint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 40 * v16;
    outlined init with copy of FindResult(*(void *)(v6 + 56) + v18, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    uint64_t result = (void *)outlined init with take of FindResult(v27, *(void *)(v8 + 56) + v18);
  }
  uint64_t v21 = v19 + 2;
  if (v21 >= v25)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F07508], &demangling cache variable for type metadata for _DictionaryStorage<UUID, CalculateGraphExpression>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    Swift::Int *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    unint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  int64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  unint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(unint64_t, char *, uint64_t);
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v3 = *(void **)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v35 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  int64_t v34 = (char *)&v30 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, CRKeyPath>);
  BOOL v7 = *v0;
  unint64_t v8 = static _DictionaryStorage.copy(original:)();
  int64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    Swift::Int *v1 = v9;
    return result;
  }
  uint64_t v30 = v1;
  uint64_t result = (void *)(v8 + 64);
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  unint64_t v12 = 0;
  uint64_t v13 = *(void *)(v7 + 16);
  uint64_t v36 = v7;
  uint64_t v37 = v9;
  *(void *)(v9 + 16) = v13;
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v31 = v7 + 64;
  uint64_t v32 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v33 = v3 + 2;
  unint64_t v17 = v34;
  while (1)
  {
    if (v16)
    {
      uint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v12 << 6);
      goto LABEL_9;
    }
    unint64_t v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v32) {
      goto LABEL_23;
    }
    int64_t v28 = *(void *)(v31 + 8 * v27);
    ++v12;
    if (!v28)
    {
      unint64_t v12 = v27 + 1;
      if (v27 + 1 >= v32) {
        goto LABEL_23;
      }
      int64_t v28 = *(void *)(v31 + 8 * v12);
      if (!v28) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v28 - 1) & v28;
    unint64_t v19 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_9:
    uint64_t v20 = v36;
    uint64_t v21 = v3[9] * v19;
    unint64_t v22 = (void (*)(char *, unint64_t, uint64_t))v3[2];
    v22(v17, *(void *)(v36 + 48) + v21, v2);
    uint64_t v23 = *(void *)(v20 + 56) + v21;
    uint64_t v24 = v35;
    v22(v35, v23, v2);
    uint64_t v25 = v37;
    int64_t v26 = (void (*)(unint64_t, char *, uint64_t))v3[4];
    v26(*(void *)(v37 + 48) + v21, v17, v2);
    uint64_t result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v25 + 56) + v21, v24, v2);
  }
  uint64_t v29 = v27 + 2;
  if (v29 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v30;
    int64_t v9 = v37;
    goto LABEL_25;
  }
  int64_t v28 = *(void *)(v31 + 8 * v29);
  if (v28)
  {
    unint64_t v12 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v12 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_23;
    }
    int64_t v28 = *(void *)(v31 + 8 * v12);
    ++v29;
    if (v28) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F330F8], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, FormPageAnalytics>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, ()>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  long long *v19;
  unint64_t v20;
  uint64_t (*v21)(unint64_t, char *, uint64_t);
  long long v22;
  _OWORD *v23;
  long long v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  long long v32;
  long long v33;
  long long v34;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform>);
  uint64_t v6 = *v0;
  BOOL v7 = static _DictionaryStorage.copy(original:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    Swift::Int *v1 = v8;
    return result;
  }
  int64_t v28 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v29 = v6 + 64;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v30 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v31 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      uint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v30) {
      goto LABEL_23;
    }
    int64_t v26 = *(void *)(v29 + 8 * v25);
    ++v11;
    if (!v26)
    {
      uint64_t v11 = v25 + 1;
      if (v25 + 1 >= v30) {
        goto LABEL_23;
      }
      int64_t v26 = *(void *)(v29 + 8 * v11);
      if (!v26) {
        break;
      }
    }
LABEL_22:
    uint64_t v14 = (v26 - 1) & v26;
    unint64_t v16 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 48 * v16;
    unint64_t v19 = (long long *)(*(void *)(v6 + 56) + v18);
    uint64_t v20 = *(void *)(v8 + 48) + v17;
    uint64_t v21 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
    unint64_t v22 = *v19;
    uint64_t v33 = v19[1];
    int64_t v34 = v22;
    uint64_t v32 = v19[2];
    uint64_t result = (void *)v21(v20, v5, v2);
    uint64_t v23 = (_OWORD *)(*(void *)(v8 + 56) + v18);
    uint64_t v24 = v33;
    *uint64_t v23 = v34;
    v23[1] = v24;
    _OWORD v23[2] = v32;
  }
  unint64_t v27 = v25 + 2;
  if (v27 >= v30)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v28;
    goto LABEL_25;
  }
  int64_t v26 = *(void *)(v29 + 8 * v27);
  if (v26)
  {
    uint64_t v11 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v11 >= v30) {
      goto LABEL_23;
    }
    int64_t v26 = *(void *)(v29 + 8 * v11);
    ++v27;
    if (v26) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    Swift::Int *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PDFPageID();
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFPageID, Int>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  BOOL v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    Swift::Int *v1 = v7;
    return result;
  }
  uint64_t v24 = v1;
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = v5 + 64;
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  uint64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    uint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = *(void *)(v25 + 72) * v17;
    outlined init with copy of PDFPageID(*(void *)(v5 + 48) + v18, (uint64_t)v4);
    unint64_t v19 = 8 * v17;
    uint64_t v20 = *(void *)(*(void *)(v5 + 56) + v19);
    uint64_t result = (void *)outlined init with take of GraphableExpression((uint64_t)v4, *(void *)(v7 + 48) + v18, (uint64_t (*)(void))type metadata accessor for PDFPageID);
    *(void *)(*(void *)(v7 + 56) + v19) = v20;
  }
  uint64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>, MEMORY[0x263F330F8], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Ref<PDFAnnotationElement>>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (_:)>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSObject, Swift.AnyObject>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    Swift::Int *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    unint64_t v19 = v17;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  unint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F330F8], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x263F330F8], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, SharedTagged_9<TaggedCanvasElement>>);
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F33060], &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, Int>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFDocumentWriteOption, Swift.AnyObject>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    Swift::Int *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    unint64_t v19 = v17;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  unint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  long long v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, AsyncCache<Data, CGImageRef>.CacheState>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    Swift::Int *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    uint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = 24 * v15;
    uint64_t v18 = *(void *)(v2 + 56) + v17;
    unint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void **)(v18 + 8);
    uint64_t v21 = *(unsigned char *)(v18 + 16);
    unint64_t v22 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v22;
    uint64_t v23 = *(void *)(v4 + 56) + v17;
    *(void *)uint64_t v23 = v19;
    *(void *)(v23 + 8) = v20;
    *(unsigned char *)(v23 + 16) = v21;
    outlined copy of Data._Representation(v22, *((unint64_t *)&v22 + 1));
    uint64_t result = outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v19, v20, v21);
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    Swift::Int *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  BOOL v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    uint64_t v20 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v20;
    uint64_t v21 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v21 = v18;
    v21[1] = v19;
    outlined copy of Data._Representation(v20, *((unint64_t *)&v20 + 1));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>, MEMORY[0x263F07508], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, CheckedContinuation<CGImageRef?, Never>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  long long *v19;
  unint64_t v20;
  void (*v21)(unint64_t, char *, uint64_t);
  long long v22;
  _OWORD *v23;
  long long v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  long long v33;
  long long v34;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CanvasCollaborationStateView.CollaborationCursor>);
  uint64_t v6 = *v0;
  BOOL v7 = static _DictionaryStorage.copy(original:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    Swift::Int *v1 = v8;
    return result;
  }
  uint64_t v29 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v30 = v6 + 64;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v31 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v32 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      uint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v26 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v31) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v26);
    ++v11;
    if (!v27)
    {
      uint64_t v11 = v26 + 1;
      if (v26 + 1 >= v31) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v30 + 8 * v11);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    uint64_t v14 = (v27 - 1) & v27;
    unint64_t v16 = __clz(__rbit64(v27)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 32 * v16;
    unint64_t v19 = (long long *)(*(void *)(v6 + 56) + v18);
    uint64_t v20 = *(void *)(v8 + 48) + v17;
    uint64_t v21 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    unint64_t v22 = v19[1];
    uint64_t v33 = *v19;
    int64_t v34 = v22;
    v21(v20, v5, v2);
    uint64_t v23 = (_OWORD *)(*(void *)(v8 + 56) + v18);
    uint64_t v24 = v34;
    *uint64_t v23 = v33;
    v23[1] = v24;
    swift_bridgeObjectRetain();
    uint64_t v25 = *((id *)&v33 + 1);
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v31)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v29;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v30 + 8 * v28);
  if (v27)
  {
    uint64_t v11 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v11);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<DrawingIdentifier, CalculateDocumentController>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F07508], &demangling cache variable for type metadata for _DictionaryStorage<UUID, PKDrawing>);
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F07508], &demangling cache variable for type metadata for _DictionaryStorage<UUID, NSNumber>);
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F330F8], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    id v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    id v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (CGRect, CGFloat)>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    id v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(void *)(v19 + 32);
    unint64_t v21 = *(_OWORD *)v19;
    int64_t v22 = *(_OWORD *)(v19 + 16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v23 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)uint64_t v23 = v21;
    *(_OWORD *)(v23 + 16) = v22;
    *(void *)(v23 + 32) = v20;
    id result = v17;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, StickerDropPreviewInfo>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    id v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(void *)(v19 + 32);
    unint64_t v21 = *(_OWORD *)v19;
    int64_t v22 = *(_OWORD *)(v19 + 16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v23 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)uint64_t v23 = v21;
    *(_OWORD *)(v23 + 16) = v22;
    *(void *)(v23 + 32) = v20;
    id result = v17;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F33060], &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, PaperKitPDFDocument>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIColor, UIImage>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    int64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F330F8], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, PDFAnnotation>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  long long v23;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PaperKitPDFPage, PageOverlayView>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v23 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v23;
    id v19 = v17;
    id result = (id)v23;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PDFAnnotation, AnyCanvasElementView>);
}

char *specialized _NativeDictionary.copy()()
{
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v40 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SortableCalculateExpression>);
  uint64_t v35 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v44 = v3;
  if (!v4)
  {
    id result = (char *)swift_release();
    uint64_t v34 = v44;
    uint64_t v33 = v35;
LABEL_25:
    *uint64_t v33 = v34;
    return result;
  }
  uint64_t v5 = v3;
  id result = (char *)(v3 + 64);
  unint64_t v7 = (char *)(v2 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  uint64_t v36 = v2 + 64;
  if (v5 != v2 || result >= &v7[8 * v8])
  {
    id result = (char *)memmove(result, v7, 8 * v8);
    uint64_t v5 = v44;
  }
  int64_t v9 = 0;
  *(void *)(v5 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v42 = v2;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = v44;
  uint64_t v39 = v43 + 16;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v43 + 32;
  uint64_t v14 = v43;
  unint64_t v15 = v40;
  uint64_t v16 = v41;
  while (1)
  {
    if (v12)
    {
      uint64_t v45 = (v12 - 1) & v12;
      int64_t v46 = v9;
      unint64_t v17 = __clz(__rbit64(v12)) | (v9 << 6);
      uint64_t v18 = v42;
      goto LABEL_9;
    }
    int64_t v29 = v9 + 1;
    uint64_t v18 = v42;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v29);
    int64_t v31 = v9 + 1;
    if (!v30)
    {
      int64_t v31 = v9 + 2;
      if (v9 + 2 >= v37) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v31);
      if (!v30) {
        break;
      }
    }
LABEL_22:
    uint64_t v45 = (v30 - 1) & v30;
    int64_t v46 = v31;
    unint64_t v17 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v14 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v18 + 48) + v19, v16);
    uint64_t v20 = 40 * v17;
    uint64_t v21 = *(void *)(v18 + 56) + 40 * v17;
    int64_t v22 = *(void **)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 16);
    uint64_t v25 = *(void *)(v21 + 24);
    uint64_t v26 = *(void *)(v21 + 32);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v13 + 48) + v19, v15, v16);
    unint64_t v27 = (void *)(*(void *)(v13 + 56) + v20);
    void *v27 = v22;
    v27[1] = v23;
    v27[2] = v24;
    v27[3] = v25;
    v27[4] = v26;
    id v28 = v22;
    swift_retain();
    id result = (char *)swift_bridgeObjectRetain();
    unint64_t v12 = v45;
    int64_t v9 = v46;
  }
  uint64_t v32 = v9 + 3;
  if (v9 + 3 >= v37)
  {
LABEL_23:
    id result = (char *)swift_release();
    uint64_t v33 = v35;
    uint64_t v34 = v44;
    goto LABEL_25;
  }
  unint64_t v30 = *(void *)(v36 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v9 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v31 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v26 - v6;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  unint64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v27 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v28 = v8 + 64;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  uint64_t v31 = v5 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(void *)(*(void *)(v8 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v20, v7, v4);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v26 - v6;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  unint64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v27 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v31 = v5 + 16;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(void *)(*(void *)(v8 + 56) + v21);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v20, v7, v4);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v14) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v7 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v22 + 1;
      if (v22 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v7 + 8 * v10);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v16 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t v19 = 16 * v16;
    long long v20 = *(_OWORD *)(*(void *)(v3 + 56) + v19);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(void *)(v5 + 56) + v19) = v20;
    id v21 = v18;
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v14) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v7 + 8 * v24);
  if (v23)
  {
    int64_t v10 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v7 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v26 - v6;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  unint64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v27 = v10;
    return result;
  }
  id result = (id)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v31 = v5 + 16;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 8 * v19;
    int64_t v22 = *(void **)(*(void *)(v8 + 56) + v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v20, v7, v4);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
    id result = v22;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    unint64_t v19 = *(void **)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id v20 = v18;
    id result = v19;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1, uint64_t (*a2)(void, double), uint64_t *a3)
{
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v51 = *(void *)(v48 - 8);
  double v6 = MEMORY[0x270FA5388](v48);
  uint64_t v47 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = a2(0, v6);
  uint64_t v50 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (char *)&v38 - v8;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v38 = v3;
  uint64_t v9 = *v3;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t v52 = v10;
  if (!v11)
  {
    id result = (void *)swift_release();
    uint64_t v37 = v52;
    uint64_t v36 = v38;
LABEL_25:
    *uint64_t v36 = v37;
    return result;
  }
  uint64_t v12 = v10;
  id result = (void *)(v10 + 64);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v9 || (unint64_t)result >= v9 + 64 + 8 * v14)
  {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v14);
    uint64_t v12 = v52;
  }
  int64_t v15 = 0;
  *(void *)(v12 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  uint64_t v49 = v9;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  uint64_t v39 = v9 + 64;
  int64_t v40 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v19 = v51;
  uint64_t v20 = v50;
  uint64_t v43 = v51 + 16;
  uint64_t v44 = v50 + 16;
  uint64_t v41 = v51 + 32;
  uint64_t v42 = v50 + 32;
  int64_t v21 = v45;
  uint64_t v22 = v46;
  uint64_t v23 = v48;
  uint64_t v24 = v52;
  while (1)
  {
    if (v18)
    {
      unint64_t v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      int64_t v53 = v15;
      unint64_t v26 = v25 | (v15 << 6);
      uint64_t v27 = v49;
      goto LABEL_9;
    }
    int64_t v32 = v15 + 1;
    uint64_t v27 = v49;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v32 >= v40) {
      goto LABEL_23;
    }
    unint64_t v33 = *(void *)(v39 + 8 * v32);
    int64_t v34 = v15 + 1;
    if (!v33)
    {
      int64_t v34 = v32 + 1;
      if (v32 + 1 >= v40) {
        goto LABEL_23;
      }
      unint64_t v33 = *(void *)(v39 + 8 * v34);
      if (!v33) {
        break;
      }
    }
LABEL_22:
    unint64_t v18 = (v33 - 1) & v33;
    int64_t v53 = v34;
    unint64_t v26 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_9:
    unint64_t v28 = *(void *)(v20 + 72) * v26;
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v21, *(void *)(v27 + 48) + v28, v22);
    unint64_t v29 = *(void *)(v19 + 72) * v26;
    unint64_t v30 = *(void *)(v27 + 56) + v29;
    uint64_t v31 = v47;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v47, v30, v23);
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(*(void *)(v24 + 48) + v28, v21, v22);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(void *)(v24 + 56) + v29, v31, v23);
    int64_t v15 = v53;
  }
  int64_t v35 = v32 + 2;
  if (v35 >= v40)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v36 = v38;
    uint64_t v37 = v52;
    goto LABEL_25;
  }
  unint64_t v33 = *(void *)(v39 + 8 * v35);
  if (v33)
  {
    int64_t v34 = v35;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v34 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v34 >= v40) {
      goto LABEL_23;
    }
    unint64_t v33 = *(void *)(v39 + 8 * v34);
    ++v35;
    if (v33) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v96 = *a1;
      uint64_t v97 = *a1 + 40;
      uint64_t v98 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v100 = *(double *)(v96 + 40 * i + 16);
        uint64_t v101 = v98;
        uint64_t v102 = v97;
        do
        {
          if (v100 >= *(double *)(v102 - 24)) {
            break;
          }
          if (!v96) {
            goto LABEL_141;
          }
          uint64_t v103 = *(void *)v102;
          uint64_t v104 = *(void *)(v102 + 8);
          uint64_t v105 = *(void *)(v102 + 24);
          Swift::Int result = *(void *)(v102 + 32);
          long long v106 = *(_OWORD *)(v102 - 24);
          *(_OWORD *)uint64_t v102 = *(_OWORD *)(v102 - 40);
          *(_OWORD *)(v102 + 16) = v106;
          *(void *)(v102 + 32) = *(void *)(v102 - 8);
          *(void *)(v102 - 32) = v104;
          *(double *)(v102 - 24) = v100;
          *(void *)(v102 - 16) = v105;
          *(void *)(v102 - 8) = result;
          *(void *)(v102 - 40) = v103;
          v102 -= 40;
        }
        while (!__CFADD__(v101++, 1));
        v97 += 40;
        --v98;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v6 = result;
  uint64_t v124 = v1;
  unint64_t v117 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    __dst = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      uint64_t v108 = v12;
      uint64_t v119 = v9;
      if (v13 >= 2)
      {
        uint64_t v109 = *v117;
        do
        {
          unint64_t v110 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v109) {
            goto LABEL_145;
          }
          BOOL v111 = v108;
          uint64_t v112 = *(void *)&v108[16 * v110 + 32];
          uint64_t v113 = *(void *)&v108[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v109 + 40 * v112), (double *)(v109 + 40 * *(void *)&v108[16 * v13 + 16]), v109 + 40 * v113, __dst);
          if (v124) {
            break;
          }
          if (v113 < v112) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            BOOL v111 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v111);
          }
          if (v110 >= *((void *)v111 + 2)) {
            goto LABEL_134;
          }
          int v114 = &v111[16 * v110 + 32];
          *(void *)int v114 = v112;
          *((void *)v114 + 1) = v113;
          unint64_t v115 = *((void *)v111 + 2);
          if (v13 > v115) {
            goto LABEL_135;
          }
          memmove(&v111[16 * v13 + 16], &v111[16 * v13 + 32], 16 * (v115 - v13));
          uint64_t v108 = v111;
          *((void *)v111 + 2) = v115 - 1;
          unint64_t v13 = v115 - 1;
        }
        while (v115 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v119 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v119 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v119 = v8;
    __dst = (double *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v118 = *a1 + 96;
  uint64_t v116 = *a1 + 32;
  uint64_t v12 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v120 = v6;
  Swift::Int v121 = v3;
  uint64_t v122 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v11 + 40 * v10 + 16);
      double v16 = *(double *)(v11 + 40 * v14 + 16);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (double *)(v118 + 40 * v14);
        double v18 = v15;
        while (1)
        {
          double v19 = v18;
          double v18 = *v17;
          if (v15 < v16 == *v17 >= v19) {
            break;
          }
          ++v10;
          v17 += 5;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v20 = 40 * v10;
          uint64_t v21 = 40 * v14;
          Swift::Int v22 = v10;
          Swift::Int v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_144;
              }
              uint64_t v24 = v11 + v21;
              uint64_t v25 = v11 + v20;
              uint64_t v26 = *(void *)(v11 + v21);
              uint64_t v27 = *(void *)(v11 + v21 + 8);
              uint64_t v28 = *(void *)(v11 + v21 + 16);
              uint64_t v29 = *(void *)(v11 + v21 + 24);
              uint64_t v30 = *(void *)(v11 + v21 + 32);
              uint64_t v31 = *(void *)(v11 + v20 - 8);
              long long v32 = *(_OWORD *)(v11 + v20 - 24);
              *(_OWORD *)uint64_t v24 = *(_OWORD *)(v11 + v20 - 40);
              *(_OWORD *)(v24 + 16) = v32;
              *(void *)(v24 + 32) = v31;
              *(void *)(v25 - 40) = v26;
              *(void *)(v25 - 32) = v27;
              *(void *)(v25 - 24) = v28;
              *(void *)(v25 - 16) = v29;
              *(void *)(v25 - 8) = v30;
            }
            ++v23;
            v20 -= 40;
            v21 += 40;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v33 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v33 >= v3) {
      Swift::Int v33 = v3;
    }
    if (v33 < v14) {
      break;
    }
    if (v10 != v33)
    {
      int64_t v34 = (double *)(v116 + 40 * v10);
      do
      {
        double v35 = *(double *)(v11 + 40 * v10 + 16);
        Swift::Int v36 = v14;
        uint64_t v37 = v34;
        do
        {
          if (v35 >= *(v37 - 7)) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          uint64_t v38 = v37 - 4;
          uint64_t v39 = v37 - 9;
          uint64_t v40 = *((void *)v37 - 5);
          *(v37 - 5) = *v37;
          v37 -= 5;
          uint64_t v41 = *((void *)v37 + 1);
          uint64_t v42 = *((void *)v37 + 2);
          uint64_t v43 = *((void *)v37 + 4);
          long long v44 = *((_OWORD *)v39 + 1);
          *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
          *((_OWORD *)v38 + 1) = v44;
          *((void *)v38 + 4) = v40;
          *((void *)v37 - 4) = v41;
          *((void *)v37 - 3) = v42;
          *(v37 - 2) = v35;
          *((void *)v37 - 1) = v43;
          ++v36;
        }
        while (v10 != v36);
        ++v10;
        v34 += 5;
      }
      while (v10 != v33);
      Swift::Int v10 = v33;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v46 = *((void *)v12 + 2);
    unint64_t v45 = *((void *)v12 + 3);
    unint64_t v13 = v46 + 1;
    uint64_t v11 = v122;
    if (v46 >= v45 >> 1)
    {
      uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v12);
      uint64_t v11 = v122;
      uint64_t v12 = v95;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v47 = v12 + 32;
    uint64_t v48 = &v12[16 * v46 + 32];
    *(void *)uint64_t v48 = v14;
    *((void *)v48 + 1) = v10;
    if (v46)
    {
      while (1)
      {
        unint64_t v49 = v13 - 1;
        if (v13 >= 4)
        {
          char v54 = &v47[16 * v13];
          uint64_t v55 = *((void *)v54 - 8);
          uint64_t v56 = *((void *)v54 - 7);
          BOOL v60 = __OFSUB__(v56, v55);
          uint64_t v57 = v56 - v55;
          if (v60) {
            goto LABEL_120;
          }
          uint64_t v59 = *((void *)v54 - 6);
          uint64_t v58 = *((void *)v54 - 5);
          BOOL v60 = __OFSUB__(v58, v59);
          uint64_t v52 = v58 - v59;
          char v53 = v60;
          if (v60) {
            goto LABEL_121;
          }
          unint64_t v61 = v13 - 2;
          uint64_t v62 = &v47[16 * v13 - 32];
          uint64_t v64 = *(void *)v62;
          uint64_t v63 = *((void *)v62 + 1);
          BOOL v60 = __OFSUB__(v63, v64);
          uint64_t v65 = v63 - v64;
          if (v60) {
            goto LABEL_123;
          }
          BOOL v60 = __OFADD__(v52, v65);
          uint64_t v66 = v52 + v65;
          if (v60) {
            goto LABEL_126;
          }
          if (v66 >= v57)
          {
            uint64_t v84 = &v47[16 * v49];
            uint64_t v86 = *(void *)v84;
            uint64_t v85 = *((void *)v84 + 1);
            BOOL v60 = __OFSUB__(v85, v86);
            uint64_t v87 = v85 - v86;
            if (v60) {
              goto LABEL_130;
            }
            BOOL v77 = v52 < v87;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v78 = *((void *)v12 + 4);
            uint64_t v79 = *((void *)v12 + 5);
            BOOL v60 = __OFSUB__(v79, v78);
            uint64_t v71 = v79 - v78;
            char v72 = v60;
            goto LABEL_77;
          }
          uint64_t v51 = *((void *)v12 + 4);
          uint64_t v50 = *((void *)v12 + 5);
          BOOL v60 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          char v53 = v60;
        }
        if (v53) {
          goto LABEL_122;
        }
        unint64_t v61 = v13 - 2;
        uint64_t v67 = &v47[16 * v13 - 32];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v70 = __OFSUB__(v68, v69);
        uint64_t v71 = v68 - v69;
        char v72 = v70;
        if (v70) {
          goto LABEL_125;
        }
        uint64_t v73 = &v47[16 * v49];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v60 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v60) {
          goto LABEL_128;
        }
        if (__OFADD__(v71, v76)) {
          goto LABEL_129;
        }
        if (v71 + v76 >= v52)
        {
          BOOL v77 = v52 < v76;
LABEL_83:
          if (v77) {
            unint64_t v49 = v61;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v72) {
          goto LABEL_124;
        }
        unint64_t v80 = &v47[16 * v49];
        uint64_t v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        BOOL v60 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v60) {
          goto LABEL_127;
        }
        if (v83 < v71) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v88 = v49 - 1;
        if (v49 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        unint64_t v89 = v12;
        char v90 = &v47[16 * v88];
        uint64_t v91 = *(void *)v90;
        uint64_t v92 = &v47[16 * v49];
        uint64_t v93 = *((void *)v92 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 40 * *(void *)v90), (double *)(v11 + 40 * *(void *)v92), v11 + 40 * v93, __dst);
        if (v124) {
          goto LABEL_93;
        }
        if (v93 < v91) {
          goto LABEL_117;
        }
        if (v49 > *((void *)v89 + 2)) {
          goto LABEL_118;
        }
        *(void *)char v90 = v91;
        *(void *)&v47[16 * v88 + 8] = v93;
        unint64_t v94 = *((void *)v89 + 2);
        if (v49 >= v94) {
          goto LABEL_119;
        }
        uint64_t v12 = v89;
        unint64_t v13 = v94 - 1;
        memmove(&v47[16 * v49], v92 + 16, 16 * (v94 - 1 - v49));
        *((void *)v89 + 2) = v94 - 1;
        uint64_t v11 = v122;
        if (v94 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v120;
    Swift::Int v3 = v121;
    if (v10 >= v121)
    {
      uint64_t v9 = v119;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v19;
  Swift::Int v20;
  void *v21;
  Swift::Int v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  void *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  Swift::Int v107;
  char *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      uint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      unint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          uint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          double v100 = &v97[16 * v96 + 32];
          *(void *)double v100 = v98;
          *((void *)v100 + 1) = v99;
          uint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          unint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          uint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    Swift::Int v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  Swift::Int v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  long long v106 = v3;
  while (1)
  {
    unint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    Swift::Int v14 = (uint64_t *)(v10 + 16 * v9);
    double v15 = *v14;
    double v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      double v19 = 0;
    }
    else
    {
      double v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      Swift::Int v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }
    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        uint64_t v27 = v20;
        uint64_t v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      uint64_t v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    uint64_t v41 = *((void *)v11 + 2);
    uint64_t v40 = *((void *)v11 + 3);
    uint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      char v107 = v9;
      while (1)
      {
        long long v44 = v12 - 1;
        if (v12 >= 4)
        {
          unint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          uint64_t v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          char v54 = *((void *)v49 - 6);
          char v53 = *((void *)v49 - 5);
          uint64_t v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          uint64_t v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          uint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          uint64_t v55 = __OFSUB__(v58, v59);
          BOOL v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          uint64_t v55 = __OFADD__(v47, v60);
          unint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            unint64_t v80 = *((void *)v79 + 1);
            uint64_t v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            char v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            uint64_t v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            uint64_t v67 = v55;
            goto LABEL_99;
          }
          unint64_t v46 = *((void *)v11 + 4);
          unint64_t v45 = *((void *)v11 + 5);
          uint64_t v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          uint64_t v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        uint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        uint64_t v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        uint64_t v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        BOOL v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        uint64_t v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          char v72 = v47 < v71;
LABEL_105:
          if (v72) {
            long long v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        BOOL v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        uint64_t v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        uint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        unint64_t v88 = v42;
        unint64_t v89 = v44;
        char v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        uint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        uint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        Swift::Int v10 = v92;
        uint64_t v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    long long v32 = v3;
  }
  else {
    long long v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      Swift::Int v33 = (void *)(v10 + 16 * v9);
      do
      {
        int64_t v34 = (uint64_t *)(v10 + 16 * v9);
        double v35 = *v34;
        Swift::Int v36 = v34[1];
        uint64_t v37 = v13;
        uint64_t v38 = v33;
        do
        {
          uint64_t v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          double v35 = *v38;
          Swift::Int v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      uint64_t v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = ((char *)a2 - (char *)__src) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v29 = __src;
  uint64_t v28 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[5 * v11] <= __dst) {
        memmove(__dst, a2, 40 * v11);
      }
      double v18 = &v4[5 * v11];
      uint64_t v27 = (char *)v18;
      uint64_t v29 = v6;
      if (v7 < v6 && v10 >= 40)
      {
        unint64_t v19 = a3 - 40;
        do
        {
          uint64_t v20 = (double *)(v19 + 40);
          if (*(v18 - 3) >= *(v6 - 3))
          {
            uint64_t v27 = (char *)(v18 - 5);
            if (v20 < v18 || v19 >= (unint64_t)v18 || v20 != v18)
            {
              long long v24 = *(_OWORD *)(v18 - 5);
              long long v25 = *(_OWORD *)(v18 - 3);
              *(double *)(v19 + 32) = *(v18 - 1);
              *(_OWORD *)unint64_t v19 = v24;
              *(_OWORD *)(v19 + 16) = v25;
            }
            uint64_t v21 = v6;
            v18 -= 5;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v21 = v6 - 5;
            if (v20 != v6 || v19 >= (unint64_t)v6)
            {
              long long v22 = *(_OWORD *)v21;
              long long v23 = *(_OWORD *)(v6 - 3);
              *(double *)(v19 + 32) = *(v6 - 1);
              *(_OWORD *)unint64_t v19 = v22;
              *(_OWORD *)(v19 + 16) = v23;
            }
            uint64_t v29 = v6 - 5;
            if (v21 <= v7) {
              break;
            }
          }
          v19 -= 40;
          Swift::Int v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v29, (const void **)&v28, &v27);
      return 1;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[5 * v9] <= __dst) {
      memmove(__dst, __src, 40 * v9);
    }
    uint64_t v12 = &v4[5 * v9];
    uint64_t v27 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      unint64_t v13 = v4;
      while (1)
      {
        if (v6[2] >= v13[2])
        {
          uint64_t v4 = v13 + 5;
          double v15 = v13;
          Swift::Int v14 = v6;
          if (v7 == v13)
          {
            v13 += 5;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v13 += 5;
          }
        }
        else
        {
          Swift::Int v14 = v6 + 5;
          double v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }
        long long v16 = *(_OWORD *)v15;
        long long v17 = *((_OWORD *)v15 + 1);
        v7[4] = v15[4];
        *(_OWORD *)uint64_t v7 = v16;
        *((_OWORD *)v7 + 1) = v17;
LABEL_18:
        v7 += 5;
        if (v13 < v12)
        {
          Swift::Int v6 = v14;
          if ((unint64_t)v14 < a3) {
            continue;
          }
        }
        uint64_t v28 = v4;
        uint64_t v29 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  Swift::Int v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      unint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int16>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 31;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      unint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32]) {
          memmove(v13, a4 + 32, 2 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size_0(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      unint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
    {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  char v5 = v4 + 15;
  if (v4 >= 0) {
    char v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    int64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;
  uint64_t vars8;

  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -48)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = 48 * (v4 / 48);
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  char v5 = v4 + 7;
  if (v4 >= 0) {
    char v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    int64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x263F07508]);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *outlined copy of SortableCalculateExpression?(void *result, uint64_t a2)
{
  if (a2)
  {
    id v2 = result;
    swift_retain();
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

id *outlined release of NSNumber?(id *a1)
{
  return a1;
}

uint64_t outlined release of String(uint64_t a1)
{
  return a1;
}

void *outlined retain of SortableCalculateExpression?(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized static SortableCalculateExpression.== infix(_:_:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  double v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  double v18 = (char *)&v33 - v17;
  CalculateExpression.id.getter();
  CalculateExpression.id.getter();
  char v19 = static UUID.== infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v15, v12);
  v20(v18, v12);
  if ((v19 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v24 = v33;
  uint64_t v23 = v34;
  uint64_t v25 = CalculateExpression.expression.getter();
  uint64_t v27 = v26;
  if (v25 == CalculateExpression.expression.getter() && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
    if (a1 != a2) {
      goto LABEL_12;
    }
  }
  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v30 = 0;
    if ((v29 & 1) == 0 || a1 != a2) {
      return v30 & 1;
    }
  }
  uint64_t v31 = CalculateExpression.format.getter();
  if (v31 != CalculateExpression.format.getter())
  {
LABEL_12:
    char v30 = 0;
    return v30 & 1;
  }
  if (v21 == v24 && v22 == v23) {
    char v30 = 1;
  }
  else {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v30 & 1;
}

uint64_t specialized SortableCalculateExpression.encode(to:)(void *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[0] = a4;
  v18[1] = a5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SortableCalculateExpression.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  CalculateExpression.id.getter();
  char v27 = 0;
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v21 = v10;
  uint64_t v14 = v20;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  }
  else
  {
    uint64_t v20 = v11;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v7);
    CalculateExpression.expression.getter();
    char v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    double v25 = a2;
    char v24 = 2;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    CalculateExpression.format.getter();
    char v23 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v16 = v20;
    char v22 = 4;
    uint64_t v17 = v21;
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, v17);
  }
}

unint64_t lazy protocol witness table accessor for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys);
  }
  return result;
}

unint64_t specialized SortableCalculateExpression.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SortableCalculateExpression.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t specialized SortableCalculateExpression.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = type metadata accessor for CalculateExpression.Base();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  MEMORY[0x270FA5388](v3);
  char v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SortableCalculateExpression.CodingKeys>);
  uint64_t v49 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1[3];
  uint64_t v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys();
  uint64_t v16 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  }
  unint64_t v45 = v8;
  uint64_t v52 = v5;
  uint64_t v18 = v49;
  uint64_t v17 = v50;
  LOBYTE(v54) = 0;
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  LOBYTE(v54) = 1;
  uint64_t v42 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v43 = v19;
  long long v44 = v11;
  LOBYTE(v54) = 3;
  uint64_t v20 = v17;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  char v53 = 2;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v41 = v21;
  uint64_t v23 = v54;
  LOBYTE(v54) = 4;
  if (KeyedDecodingContainer.contains(_:)())
  {
    LOBYTE(v54) = 4;
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t v38 = v25;
    uint64_t v39 = v24;
  }
  else
  {
    uint64_t v39 = 0;
    unint64_t v38 = 0xE000000000000000;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  char v27 = (void *)*MEMORY[0x263F2FCD0];
  uint64_t v40 = (NSNumber *)inited;
  *(void *)(inited + 32) = v27;
  uint64_t result = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Swift::Int v28 = v41;
  if ((v41 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v29 = result;
    id v30 = v27;
    v31.super.super.Class isa = NSNumber.init(integerLiteral:)(v28).super.super.isa;
    long long v32 = v40;
    v40[8].super.super.Class isa = (Class)v29;
    v32[5].super.super.Class isa = v31.super.super.isa;
    unint64_t v41 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v32);
    uint64_t v33 = v44;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v45, v44, v6);
    (*(void (**)(char *, void, uint64_t))(v46 + 104))(v52, *MEMORY[0x263F2FBD0], v47);
    type metadata accessor for CalculateExpression();
    swift_allocObject();
    uint64_t v34 = CalculateExpression.init(_:options:base:id:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, v6);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v12);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    double v35 = v48;
    *uint64_t v48 = 0;
    v35[1] = v34;
    v35[2] = v23;
    unint64_t v36 = v38;
    v35[3] = v39;
    v35[4] = v36;
  }
  return result;
}

uint64_t specialized CanvasCalculateDocumentProxy.__allocating_init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CanvasCalculateDocumentProxy.CodingKeys>);
  v12[0] = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CanvasCalculateDocumentProxy();
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(void *)(v6 + 40) = 0;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 56) = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(void *)(v6 + 64) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    uint64_t v9 = v12[0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : SortableCalculateExpression]);
    lazy protocol witness table accessor for type [UUID : SortableCalculateExpression] and conformance <> [A : B]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v3);
    uint64_t v10 = v12[5];
    swift_beginAccess();
    *(void *)(v6 + 56) = v10;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v6 + 16) = 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

unint64_t lazy protocol witness table accessor for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SortableCalculateExpression and conformance SortableCalculateExpression()
{
  unint64_t result = lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>);
  }
  return result;
}

uint64_t _s8PaperKit19GraphableExpressionVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of GraphableExpression(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CanvasCalculateDocumentProxy.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x20C4F08E0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasCalculateDocumentProxy.CodingKeys()
{
  return &type metadata for CanvasCalculateDocumentProxy.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SortableCalculateExpression.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C4F09E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SortableCalculateExpression.CodingKeys()
{
  return &unk_26C158AB8;
}

void Capsule<>.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v23 - v10;
  uint64_t v12 = CGImageSource(from:)(a1);
  if (v2)
  {
    _s8PaperKit9DataOrURLOWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for DataOrURL);
    return;
  }
  uint64_t v13 = v12;
  if (!CGImageSourceHasNormalOrientation(_:)(v12)) {
    goto LABEL_7;
  }
  CGImageMetadataRef v14 = CGImageSourceCopyMetadataAtIndex(v13, 0, 0);
  if (!v14) {
    goto LABEL_7;
  }
  uint64_t v24 = v14;
  uint64_t v15 = Data.init(with:path:in:)(0x70705F656C707061, 0xE90000000000006BLL, 0x6C65646F6DLL, (void *)0xE500000000000000, v24);
  if (v16 >> 60 == 15)
  {

LABEL_7:
    id v17 = objc_msgSend(self, sel_mainScreen);
    objc_msgSend(v17, sel_nativeBounds);
    double v19 = v18;
    double v21 = v20;

    if (one-time initialization token for imageMarkupOldMaxArea != -1) {
      swift_once();
    }
    double v22 = *(double *)&static UIConstants.imageMarkupOldMaxArea;
    if (*(double *)&static UIConstants.imageMarkupOldMaxArea <= v19 * v21) {
      double v22 = v19 * v21;
    }
    Capsule<>.init(burnedIn:maxArea:)(v13, (uint64_t)v8, v22);
    _s8PaperKit9DataOrURLOWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for DataOrURL);
    goto LABEL_12;
  }
  v23[1] = v15;
  type metadata accessor for Image();
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  Capsule<>.init(serializedData:allowedAppFormats:)();
  _s8PaperKit9DataOrURLOWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for DataOrURL);

  unint64_t v8 = v11;
LABEL_12:
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
}

uint64_t Capsule<>.init(from:with:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[7] = swift_task_alloc();
  v5[8] = swift_task_alloc();
  type metadata accessor for DataOrURL();
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](Capsule<>.init(from:with:priority:), 0, 0);
}

uint64_t Capsule<>.init(from:with:priority:)()
{
  unint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  if (v1 >> 60 == 15)
  {
    uint64_t v3 = v0[8];
    _s8PaperKit9DataOrURLOWOcTm_0(v0[3], v0[10], (uint64_t (*)(void))type metadata accessor for DataOrURL);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v2, v3, &demangling cache variable for type metadata for TaskPriority?);
    unsigned int v4 = (void *)swift_task_alloc();
    v0[15] = (uint64_t)v4;
    *unsigned int v4 = v0;
    v4[1] = Capsule<>.init(from:with:priority:);
    uint64_t v5 = v0[14];
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[8];
    return Capsule<>.init(_:priority:)(v5, v6, v7);
  }
  else
  {
    uint64_t v9 = v0[7];
    uint64_t v10 = v0[4];
    _s8PaperKit9DataOrURLOWOcTm_0(v0[3], v0[9], (uint64_t (*)(void))type metadata accessor for DataOrURL);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v2, v9, &demangling cache variable for type metadata for TaskPriority?);
    outlined copy of Data._Representation(v10, v1);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[17] = (uint64_t)v11;
    *uint64_t v11 = v0;
    v11[1] = Capsule<>.init(from:with:priority:);
    uint64_t v12 = v0[13];
    uint64_t v13 = v0[9];
    uint64_t v14 = v0[7];
    uint64_t v15 = v0[4];
    uint64_t v16 = v0[5];
    return Capsule<>.init(baseImage:with:priority:)(v12, v13, v15, v16, v14);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Capsule<>.init(from:with:priority:);
  }
  else {
    uint64_t v2 = Capsule<>.init(from:with:priority:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Capsule<>.init(from:with:priority:);
  }
  else {
    uint64_t v2 = Capsule<>.init(from:with:priority:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  outlined consume of Data?(v0[4], v0[5]);
  unint64_t v1 = v0[13];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[2];
  unsigned int v4 = v0[3];
  outlined destroy of StocksKitCurrencyCache.Provider?(v0[6], &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v4, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  unint64_t v1 = v0[14];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[2];
  unsigned int v4 = v0[3];
  outlined destroy of StocksKitCurrencyCache.Provider?(v0[6], &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v4, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  outlined consume of Data?(v0[4], v0[5]);
  unint64_t v1 = v0[3];
  outlined destroy of StocksKitCurrencyCache.Provider?(v0[6], &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  unint64_t v1 = v0[3];
  outlined destroy of StocksKitCurrencyCache.Provider?(v0[6], &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

CGImageSourceRef CGImageSource(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void *)((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s8PaperKit9DataOrURLOWOcTm_0(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
    URL._bridgeToObjectiveC()(v9);
    CFURLRef v11 = v10;
    CGImageSourceRef v12 = CGImageSourceCreateWithURL(v10, 0);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (!v12) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v13 = *v8;
    unint64_t v14 = v8[1];
    CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
    CGImageSourceRef v12 = CGImageSourceCreateWithData(isa, 0);
    outlined consume of Data._Representation(v13, v14);

    if (!v12)
    {
LABEL_5:
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;
      id v19 = objc_allocWithZone(MEMORY[0x263F087E8]);
      double v20 = (void *)MEMORY[0x21054D080](v16, v18);
      swift_bridgeObjectRelease();
      objc_msgSend(v19, sel_initWithDomain_code_userInfo_, v20, 256, 0);

      swift_willThrow();
    }
  }
  return v12;
}

BOOL CGImageSourceHasNormalOrientation(_:)(CGImageSource *a1)
{
  CFDictionaryRef v1 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  if (!v1) {
    return 1;
  }
  CFDictionaryRef v2 = v1;
  type metadata accessor for NSObject();
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject, (void (*)(uint64_t))type metadata accessor for NSObject);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = (void *)*MEMORY[0x263F0F4C8];
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v5 = v4;
    uint64_t v6 = __CocoaDictionary.lookup(_:)();

    swift_bridgeObjectRelease();
    if (!v6) {
      return 1;
    }
    goto LABEL_8;
  }
  if (!*(void *)(v3 + 16))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 1;
  }
  id v7 = v4;
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
  if ((v8 & 1) == 0)
  {

    goto LABEL_11;
  }
  swift_unknownObjectRetain();

  swift_bridgeObjectRelease();
LABEL_8:
  if (swift_dynamicCast()) {
    return v10 < 2;
  }
  return 1;
}

uint64_t Data.init(with:path:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 0x5F636E653ALL;
  v10._object = (void *)0xE500000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = a3;
  v11._object = a4;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 58;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = a3;
  v13._object = a4;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  unint64_t v14 = a5;
  uint64_t v15 = Data.init(at:in:)(a1, a2, v14);
  if (v16 >> 60 == 15)
  {
    return Data.init(at:in:)(a1, a2, v14);
  }
  else
  {
    uint64_t v18 = v15;
    unint64_t v19 = v16;
    self;
    double v20 = +[PPKPayloadEncryption sharedInstance]();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v22 = -[PPKPayloadEncryption decryptData:](v20, isa);

    uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    outlined consume of Data?(v18, v19);
    swift_bridgeObjectRelease();

    return v23;
  }
}

void Capsule<>.init(burnedIn:maxArea:)(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  v28[1] = a2;
  uint64_t v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  Swift::String v12 = (char *)v28 - v11;
  id v29 = a1;
  uint64_t v13 = specialized static Capsule<>.imageData(from:downsampled:with:)((CGImageSource *)a1, 1, a3);
  if (v14 >> 60 == 15)
  {
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;
    id v20 = objc_allocWithZone(MEMORY[0x263F087E8]);
    double v21 = (void *)MEMORY[0x21054D080](v17, v19);
    swift_bridgeObjectRelease();
    objc_msgSend(v20, sel_initWithDomain_code_userInfo_, v21, 256, 0);

    swift_willThrow();
  }
  else
  {
    uint64_t v22 = v13;
    unint64_t v23 = v14;
    specialized static ImageLayout.canvasSize(from:)(v15, v16);
    double v25 = v24;
    double v27 = v26;
    outlined copy of Data._Representation(v22, v23);
    Image.init(from:size:)(v22, v23, (uint64_t)v12, v25, v27);
    v28[0] = v3;
    _s8PaperKit9DataOrURLOWOcTm_0((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Image);
    static CRKeyPath.unique.getter();
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    Capsule<>.init(_:id:)();

    outlined consume of Data?(v22, v23);
    _s8PaperKit9DataOrURLOWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Image);
  }
}

uint64_t Capsule<>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = type metadata accessor for DataOrURL();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](Capsule<>.init(from:), 0, 0);
}

uint64_t Capsule<>.init(from:)()
{
  uint64_t v1 = v0[12];
  CFDictionaryRef v2 = (uint64_t *)v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[3];
  unint64_t v5 = v0[4];
  *CFDictionaryRef v2 = v6;
  v2[1] = v5;
  swift_storeEnumTagMultiPayload();
  outlined copy of Data._Representation(v6, v5);
  static TaskPriority.userInitiated.getter();
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 0, 1, v7);
  _s8PaperKit9DataOrURLOWOcTm_0((uint64_t)v2, v1, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v3, v4, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[14] = v8;
  *uint64_t v8 = v0;
  v8[1] = Capsule<>.init(from:);
  uint64_t v9 = v0[12];
  uint64_t v10 = v0[9];
  uint64_t v11 = v0[7];
  return Capsule<>.init(_:priority:)(v11, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    CFDictionaryRef v2 = Capsule<>.init(from:);
  }
  else {
    CFDictionaryRef v2 = Capsule<>.init(from:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v9)(void);
  unint64_t v11;
  uint64_t v12;

  uint64_t v1 = v0[13];
  CFDictionaryRef v2 = v0[7];
  uint64_t v3 = v0[8];
  unint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v11 = v0[4];
  uint64_t v7 = v0[2];
  outlined destroy of StocksKitCurrencyCache.Provider?(v0[10], &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v8(v3, v2, v5);
  v8(v7, v3, v5);
  outlined consume of Data._Representation(v6, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[13];
  uint64_t v3 = v0[3];
  CFDictionaryRef v2 = v0[4];
  outlined destroy of StocksKitCurrencyCache.Provider?(v0[10], &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  outlined consume of Data._Representation(v3, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t Capsule<>.init(baseImage:with:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  uint64_t v6 = *(void *)(type metadata accessor for DataOrURL() - 8);
  v5[11] = v6;
  v5[12] = *(void *)(v6 + 64);
  v5[13] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v5[14] = v7;
  *uint64_t v7 = v5;
  v7[1] = Capsule<>.init(baseImage:with:priority:);
  return MEMORY[0x270FA2498](specialized static Capsule<>.maxSafeImageAreaAsync(), 0, 0);
}

uint64_t Capsule<>.init(baseImage:with:priority:)(double a1)
{
  *(double *)(*(void *)v1 + 120) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](Capsule<>.init(baseImage:with:priority:), 0, 0);
}

uint64_t Capsule<>.init(baseImage:with:priority:)()
{
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  _s8PaperKit9DataOrURLOWOcTm_0(v0[7], v2, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + v3;
  unint64_t v8 = (v6 + v3) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  outlined init with take of DataOrURL(v2, v9 + v6);
  *(unsigned char *)(v9 + v7) = 1;
  *(void *)(v8 + v9 + 8) = v1;
  uint64_t v10 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ10Foundation4DataV_So6CGSizeVtSg_Tgm5(v4, (uint64_t)&closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:)partial apply, v9);
  v0[16] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[17] = (uint64_t)v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CGSize)?);
  *uint64_t v11 = v0;
  v11[1] = Capsule<>.init(baseImage:with:priority:);
  return MEMORY[0x270FA1FD0](v0 + 2, v10, v12);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](Capsule<>.init(baseImage:with:priority:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  v0[18] = v1;
  v0[19] = v2;
  uint64_t v3 = v0[5];
  v0[20] = v0[4];
  v0[21] = v3;
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  if (v2 >> 60 == 15)
  {
    unint64_t v6 = type metadata accessor for CRCodingError();
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, MEMORY[0x263F32D80]);
    swift_allocError();
    strcpy(v7, "Malformed data");
    v7[15] = -18;
    (*(void (**)(char *, void, uint64_t))(*(void *)(v6 - 8) + 104))(v7, *MEMORY[0x263F32D70], v6);
    swift_willThrow();
    outlined consume of Data._Representation(v4, v5);
    unint64_t v8 = v0[7];
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[10], &demangling cache variable for type metadata for TaskPriority?);
    _s8PaperKit9DataOrURLOWOhTm_0(v8, (uint64_t (*)(void))type metadata accessor for DataOrURL);
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    type metadata accessor for MainActor();
    outlined copy of Data?(v1, v2);
    outlined copy of Data._Representation(v4, v5);
    v0[22] = static MainActor.shared.getter();
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](Capsule<>.init(baseImage:with:priority:), v12, v11);
  }
}

{
  double *v0;
  double v1;
  double v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = *((void *)v0 + 18);
  uint64_t v4 = *((void *)v0 + 19);
  unint64_t v6 = *((void *)v0 + 8);
  uint64_t v5 = *((void *)v0 + 9);
  unint64_t v7 = *((void *)v0 + 6);
  swift_release();
  Capsule<>.init(downsampledBaseImageData:imageSize:with:)(v3, v4, v6, v5, v7, v2, v1);
  v0[23] = 0.0;
  return MEMORY[0x270FA2498](Capsule<>.init(baseImage:with:priority:), 0, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  outlined consume of Data._Representation(v0[8], v0[9]);
  outlined consume of Data?(v2, v1);
  outlined destroy of StocksKitCurrencyCache.Provider?(v3, &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v4, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  outlined consume of Data._Representation(v0[8], v0[9]);
  outlined consume of Data?(v2, v1);
  uint64_t v3 = v0[7];
  outlined destroy of StocksKitCurrencyCache.Provider?(v0[10], &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v3, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t Capsule<>.init(_:priority:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v3[18] = swift_task_alloc();
  return MEMORY[0x270FA2498](Capsule<>.init(_:priority:), 0, 0);
}

uint64_t Capsule<>.init(_:priority:)()
{
  uint64_t v1 = CGImageSource(from:)(*(void *)(v0 + 64));
  *(void *)(v0 + 152) = v1;
  uint64_t v2 = v1;
  if (!CGImageSourceHasNormalOrientation(_:)(v1)
    || (CGImageMetadataRef v3 = CGImageSourceCopyMetadataAtIndex(v2, 0, 0), (*(void *)(v0 + 160) = v3) == 0))
  {
LABEL_8:
    uint64_t v13 = *(void **)(v0 + 152);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 72), *(void *)(v0 + 120), &demangling cache variable for type metadata for TaskPriority?);
    id v14 = v13;
    double v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v15;
    *double v15 = v0;
    v15[1] = Capsule<>.init(_:priority:);
    uint64_t v16 = *(void *)(v0 + 152);
    uint64_t v17 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 96);
    return Capsule<>.init(burnedIn:priority:)(v18, v16, v17);
  }
  uint64_t v4 = v3;
  uint64_t v5 = Data.init(with:path:in:)(0x6B615F656C707061, 0xE800000000000000, 0x616D695F65736162, (void *)0xEA00000000006567, v4);
  *(void *)(v0 + 168) = v5;
  *(void *)(v0 + 176) = v6;
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    uint64_t v9 = Data.init(with:path:in:)(0x6B615F656C707061, 0xE800000000000000, 0x6C65646F6DLL, (void *)0xE500000000000000, v4);
    *(void *)(v0 + 184) = v9;
    *(void *)(v0 + 192) = v10;
    if (v10 >> 60 != 15)
    {
      uint64_t v30 = v9;
      unint64_t v31 = v10;
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 72), *(void *)(v0 + 136), &demangling cache variable for type metadata for TaskPriority?);
      outlined copy of Data?(v7, v8);
      outlined copy of Data?(v30, v31);
      long long v32 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v32;
      *long long v32 = v0;
      v32[1] = Capsule<>.init(_:priority:);
      uint64_t v34 = *(void *)(v0 + 136);
      uint64_t v33 = *(void *)(v0 + 144);
      return Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:)(v33, v7, v8, v30, v31, v34);
    }
    outlined consume of Data?(v7, v8);
  }
  uint64_t v11 = Data.init(with:path:in:)(0x70705F656C707061, 0xE90000000000006BLL, 0x6C65646F6DLL, (void *)0xE500000000000000, *(id *)(v0 + 160));
  *(void *)(v0 + 216) = v11;
  *(void *)(v0 + 224) = v12;
  if (v12 >> 60 == 15)
  {

    goto LABEL_8;
  }
  uint64_t v20 = v11;
  unint64_t v21 = v12;
  uint64_t v22 = *(void *)(v0 + 128);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 72), v22, &demangling cache variable for type metadata for TaskPriority?);
  outlined copy of Data._Representation(v20, v21);
  unint64_t v23 = (void *)swift_allocObject();
  void v23[2] = 0;
  v23[3] = 0;
  v23[4] = v20;
  v23[5] = v21;
  outlined copy of Data._Representation(v20, v21);
  uint64_t v24 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ9Coherence7CapsuleVy8PaperKit5ImageVG_Tgm5(v22, (uint64_t)&async function pointer to partial apply for closure #1 in Capsule<>.init(serializedData:priority:), (uint64_t)v23);
  *(void *)(v0 + 232) = v24;
  double v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *double v25 = v0;
  v25[1] = Capsule<>.init(_:priority:);
  uint64_t v27 = *(void *)(v0 + 104);
  uint64_t v28 = *(void *)(v0 + 80);
  uint64_t v29 = MEMORY[0x263F8E4E0];
  return MEMORY[0x270FA1FA8](v27, v24, v28, v26, v29);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Capsule<>.init(_:priority:);
  }
  else {
    uint64_t v2 = Capsule<>.init(_:priority:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  CGImageMetadataRef v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88);
  outlined consume of Data?(*(void *)(v0 + 168), *(void *)(v0 + 176));
  outlined consume of Data?(v1, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 144), &demangling cache variable for type metadata for Capsule<Image>?);
    unint64_t v6 = Data.init(with:path:in:)(0x70705F656C707061, 0xE90000000000006BLL, 0x6C65646F6DLL, (void *)0xE500000000000000, *(id *)(v0 + 160));
    *(void *)(v0 + 216) = v6;
    *(void *)(v0 + 224) = v7;
    if (v7 >> 60 == 15)
    {

      unint64_t v8 = *(void **)(v0 + 152);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 72), *(void *)(v0 + 120), &demangling cache variable for type metadata for TaskPriority?);
      uint64_t v9 = v8;
      unint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 256) = v10;
      *unint64_t v10 = v0;
      v10[1] = Capsule<>.init(_:priority:);
      uint64_t v11 = *(void *)(v0 + 152);
      unint64_t v12 = *(void *)(v0 + 120);
      uint64_t v13 = *(void *)(v0 + 96);
      return Capsule<>.init(burnedIn:priority:)(v13, v11, v12);
    }
    else
    {
      unint64_t v23 = v6;
      uint64_t v24 = v7;
      double v25 = *(void *)(v0 + 128);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 72), v25, &demangling cache variable for type metadata for TaskPriority?);
      outlined copy of Data._Representation(v23, v24);
      uint64_t v26 = (void *)swift_allocObject();
      v26[2] = 0;
      v26[3] = 0;
      v26[4] = v23;
      v26[5] = v24;
      outlined copy of Data._Representation(v23, v24);
      uint64_t v27 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ9Coherence7CapsuleVy8PaperKit5ImageVG_Tgm5(v25, (uint64_t)&async function pointer to partial apply for closure #1 in Capsule<>.init(serializedData:priority:), (uint64_t)v26);
      *(void *)(v0 + 232) = v27;
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v28;
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      *uint64_t v28 = v0;
      v28[1] = Capsule<>.init(_:priority:);
      uint64_t v30 = *(void *)(v0 + 104);
      unint64_t v31 = *(void *)(v0 + 80);
      long long v32 = MEMORY[0x263F8E4E0];
      return MEMORY[0x270FA1FA8](v30, v27, v31, v29, v32);
    }
  }
  else
  {
    double v15 = *(void **)(v0 + 152);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v20 = *(void *)(v0 + 64);
    uint64_t v19 = *(void *)(v0 + 72);
    unint64_t v21 = *(void *)(v0 + 56);

    outlined destroy of StocksKitCurrencyCache.Provider?(v19, &demangling cache variable for type metadata for TaskPriority?);
    _s8PaperKit9DataOrURLOWOhTm_0(v20, (uint64_t (*)(void))type metadata accessor for DataOrURL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v21, v16, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = Capsule<>.init(_:priority:);
  }
  else {
    uint64_t v2 = Capsule<>.init(_:priority:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(void);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = v0[27];
  uint64_t v2 = v0[28];
  CGImageMetadataRef v3 = (void *)v0[20];
  uint64_t v4 = v0[16];
  unint64_t v6 = v0[13];
  uint64_t v5 = v0[14];
  uint64_t v7 = v0[10];
  unint64_t v8 = v0[11];
  uint64_t v9 = v0[9];
  uint64_t v13 = (void *)v0[19];
  id v14 = v0[8];
  double v15 = v0[7];
  outlined consume of Data?(v1, v2);
  outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaskPriority?);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v10(v5, v6, v7);
  outlined consume of Data?(v1, v2);

  outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v14, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  v10(v15, v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  unint64_t v23 = v0;
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[28];
  CGImageMetadataRef v3 = (void *)v0[20];
  uint64_t v4 = v0[16];
  outlined consume of Data?(v1, v2);
  outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaskPriority?);

  outlined consume of Data?(v1, v2);
  uint64_t v5 = (void *)v0[31];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  unint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  uint64_t v7 = v5;
  unint64_t v8 = v5;
  uint64_t v9 = Logger.logObject.getter();
  unint64_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    unint64_t v12 = swift_slowAlloc();
    uint64_t v22 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20C2D7000, v9, v10, "Unable to read or decrypt archived model data: %s.\nFalling back to a burned-in image.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v12, -1, -1);
    MEMORY[0x210550270](v11, -1, -1);
  }
  else
  {
  }
  double v15 = (void *)v0[19];
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v0[9], v0[15], &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v16 = v15;
  uint64_t v17 = (void *)swift_task_alloc();
  v0[32] = v17;
  *uint64_t v17 = v0;
  v17[1] = Capsule<>.init(_:priority:);
  uint64_t v18 = v0[19];
  uint64_t v19 = v0[15];
  uint64_t v20 = v0[12];
  return Capsule<>.init(burnedIn:priority:)(v20, v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Capsule<>.init(_:priority:);
  }
  else {
    uint64_t v2 = Capsule<>.init(_:priority:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  CGImageMetadataRef v3 = *(void *)(v0 + 80);
  unint64_t v6 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);

  outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v5, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  unint64_t v23 = v0;
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  CGImageMetadataRef v3 = *(void *)(v0 + 176);

  outlined consume of Data?(v4, v3);
  outlined consume of Data?(v1, v2);
  uint64_t v5 = *(void **)(v0 + 208);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  unint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  uint64_t v7 = v5;
  unint64_t v8 = v5;
  uint64_t v9 = Logger.logObject.getter();
  unint64_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    unint64_t v12 = swift_slowAlloc();
    uint64_t v22 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20C2D7000, v9, v10, "Unable to read or decrypt archived model data: %s.\nFalling back to a burned-in image.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v12, -1, -1);
    MEMORY[0x210550270](v11, -1, -1);
  }
  else
  {
  }
  double v15 = *(void **)(v0 + 152);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(*(void *)(v0 + 72), *(void *)(v0 + 120), &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v16 = v15;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v17;
  *uint64_t v17 = v0;
  v17[1] = Capsule<>.init(_:priority:);
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v19 = *(void *)(v0 + 120);
  uint64_t v20 = *(void *)(v0 + 96);
  return Capsule<>.init(burnedIn:priority:)(v20, v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);

  outlined destroy of StocksKitCurrencyCache.Provider?(v2, &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  CGImageMetadataRef v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(double *)(v6 + 32) = a2;
  *(unsigned char *)(v6 + 40) = a6;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a5;
  return MEMORY[0x270FA2498](closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:), 0, 0);
}

{
  uint64_t v6;

  *(double *)(v6 + 32) = a2;
  *(unsigned char *)(v6 + 40) = a6;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a5;
  return MEMORY[0x270FA2498](closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:), 0, 0);
}

uint64_t closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:)()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t *v1 = specialized static Capsule<>.imageData(from:downsampled:with:)(*(void *)(v0 + 24), *(unsigned char *)(v0 + 40), *(double *)(v0 + 32));
  v1[1] = v2;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t *v1 = specialized static Capsule<>.imageData(from:downsampled:with:)(*(CGImageSource **)(v0 + 24), *(unsigned char *)(v0 + 40), *(double *)(v0 + 32));
  v1[1] = v2;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t Image.init(from:size:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v10 - 8);
  unint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  double v15 = (long long *)((char *)&v19 - v14);
  Image.init()(a3);
  long long v19 = 0uLL;
  *(double *)&long long v20 = a4;
  *((double *)&v20 + 1) = a5;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  CRRegister.wrappedValue.getter();
  CRRegister.wrappedValue.setter();
  outlined copy of Data._Representation(a1, a2);
  CRDataAsset.init(_:)(a1, a2, (uint64_t *)&v19);
  long long v16 = v20;
  *double v15 = v19;
  v15[1] = v16;
  uint64_t v17 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 0, 1, v17);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v15, (uint64_t)v12, &demangling cache variable for type metadata for CRAssetOrData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for CRAssetOrData?);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t Capsule<>.init(downsampledBaseImageData:imageSize:with:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  unint64_t v42 = a4;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v38 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v41 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v16 = type metadata accessor for Image();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  unint64_t v21 = (char *)&v38 - v20;
  specialized static ImageLayout.canvasSize(from:)(a6, a7);
  double v23 = v22;
  double v25 = v24;
  outlined copy of Data._Representation(a1, a2);
  uint64_t v44 = a1;
  unint64_t v45 = a2;
  Image.init(from:size:)(a1, a2, (uint64_t)v21, v23, v25);
  _s8PaperKit9DataOrURLOWOcTm_0((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Image);
  static CRKeyPath.unique.getter();
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  Capsule<>.init(_:id:)();
  double v26 = v23 / a6;
  if (v23 / a6 > 1.0) {
    double v26 = 1.0;
  }
  uint64_t v27 = a3;
  uint64_t v46 = a3;
  uint64_t v28 = v43;
  unint64_t v29 = v42;
  unint64_t v47 = v42;
  double v48 = v26;
  uint64_t v39 = v13;
  uint64_t v40 = a5;
  Capsule.callAsFunction<A>(_:)();
  if (v49)
  {
    outlined consume of Data._Representation(v27, v29);
    outlined consume of Data._Representation(v44, v45);
  }
  else
  {
    uint64_t v30 = v44;
    uint64_t v31 = v27;
    unint64_t v32 = v29;
    outlined copy of Data._Representation(v27, v29);
    Capsule<>.init(serializedData:allowedAppFormats:)();
    if (v28)
    {
      outlined consume of Data._Representation(v27, v29);
      outlined consume of Data._Representation(v30, v45);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v39);
    }
    else
    {
      uint64_t v33 = v38;
      uint64_t v34 = v39;
      uint64_t v35 = v40;
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v39);
      uint64_t v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v35, v41, v34);
      MEMORY[0x270FA5388](v36);
      *(&v38 - 2) = (uint64_t)v21;
      Capsule.mutate<A>(_:)();
      outlined consume of Data._Representation(v31, v32);
      outlined consume of Data._Representation(v30, v45);
    }
  }
  return _s8PaperKit9DataOrURLOWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Image);
}

uint64_t closure #1 in Capsule<>.init(downsampledBaseImageData:imageSize:with:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v0 - 8);
  swift_getKeyPath();
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t Capsule<>.init(burnedIn:priority:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  type metadata accessor for CRKeyPath();
  v3[9] = swift_task_alloc();
  v3[10] = type metadata accessor for Image();
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v3[13] = v4;
  *uint64_t v4 = v3;
  v4[1] = Capsule<>.init(burnedIn:priority:);
  return MEMORY[0x270FA2498](specialized static Capsule<>.maxSafeImageAreaAsync(), 0, 0);
}

uint64_t Capsule<>.init(burnedIn:priority:)(double a1)
{
  *(double *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](Capsule<>.init(burnedIn:priority:), 0, 0);
}

uint64_t Capsule<>.init(burnedIn:priority:)()
{
  uint64_t v1 = v0[14];
  uint64_t v3 = (void *)v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 40) = 1;
  *(void *)(v4 + 48) = v1;
  id v5 = v3;
  uint64_t v6 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ10Foundation4DataV_So6CGSizeVtSg_Tgm5(v2, (uint64_t)&async function pointer to partial apply for closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:), v4);
  v0[15] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[16] = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CGSize)?);
  *uint64_t v7 = v0;
  v7[1] = Capsule<>.init(burnedIn:priority:);
  return MEMORY[0x270FA1FD0](v0 + 2, v6, v8);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](Capsule<>.init(burnedIn:priority:), 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  if (v1 >> 60 == 15)
  {
    uint64_t v4 = *(void *)(v0 + 64);
    id v5 = *(void **)(v0 + 56);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    uint64_t v9 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v10 = (void *)MEMORY[0x21054D080](v6, v8);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_initWithDomain_code_userInfo_, v10, 256, 0);

    swift_willThrow();
    outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    unint64_t v12 = *(void *)(v0 + 16);
    uint64_t v19 = *(void *)(v0 + 64);
    uint64_t v18 = *(void **)(v0 + 56);
    specialized static ImageLayout.canvasSize(from:)(*(double *)(v0 + 32), *(double *)(v0 + 40));
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    outlined copy of Data._Representation(v12, v1);
    Image.init(from:size:)(v12, v1, v2, v14, v16);
    _s8PaperKit9DataOrURLOWOcTm_0(v2, v3, (uint64_t (*)(void))type metadata accessor for Image);
    static CRKeyPath.unique.getter();
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    Capsule<>.init(_:id:)();

    outlined consume of Data?(v12, v1);
    outlined destroy of StocksKitCurrencyCache.Provider?(v19, &demangling cache variable for type metadata for TaskPriority?);
    _s8PaperKit9DataOrURLOWOhTm_0(v2, (uint64_t (*)(void))type metadata accessor for Image);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a3;
  v6[13] = a4;
  v6[10] = a1;
  v6[11] = a2;
  type metadata accessor for CRKeyPath();
  v6[16] = swift_task_alloc();
  v6[17] = type metadata accessor for Image();
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DataOrURL();
  v6[20] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[21] = v8;
  v6[22] = *(void *)(v8 + 64);
  v6[23] = swift_task_alloc();
  unsigned char v6[24] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v6[25] = v9;
  v6[26] = *(void *)(v9 - 8);
  v6[27] = swift_task_alloc();
  return MEMORY[0x270FA2498](Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:), 0, 0);
}

uint64_t Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:)()
{
  uint64_t v1 = (uint64_t *)v0[24];
  uint64_t v2 = v0[11];
  unint64_t v3 = v0[12];
  uint64_t *v1 = v2;
  v1[1] = v3;
  swift_storeEnumTagMultiPayload();
  outlined copy of Data._Representation(v2, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[28] = v4;
  *uint64_t v4 = v0;
  v4[1] = Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:);
  return MEMORY[0x270FA2498](specialized static Capsule<>.maxSafeImageAreaAsync(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  uint64_t v1 = v0[29];
  uint64_t v2 = v0[23];
  uint64_t v4 = v0[21];
  unint64_t v3 = v0[22];
  id v5 = v0[15];
  _s8PaperKit9DataOrURLOWOcTm_0(v0[24], v2, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  uint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v6 + v3;
  uint64_t v8 = (v6 + v3) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  outlined init with take of DataOrURL(v2, v9 + v6);
  *(unsigned char *)(v9 + v7) = 1;
  *(void *)(v8 + v9 + 8) = v1;
  uint64_t v10 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ10Foundation4DataV_So6CGSizeVtSg_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:), v9);
  v0[30] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[31] = v11;
  unint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CGSize)?);
  *uint64_t v11 = v0;
  v11[1] = Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:);
  return MEMORY[0x270FA1FD0](v0 + 2, v10, v12);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t (*v16)(void);
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = *(void *)(v0 + 192);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  *(void *)(v0 + 256) = v2;
  *(void *)(v0 + 264) = v3;
  uint64_t v4 = *(double *)(v0 + 32);
  id v5 = *(double *)(v0 + 40);
  *(double *)(v0 + 272) = v4;
  *(double *)(v0 + 280) = v5;
  _s8PaperKit9DataOrURLOWOhTm_0(v1, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  if (v3 >> 60 == 15)
  {
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v6 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 88);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
    uint64_t v14 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v15 = (void *)MEMORY[0x21054D080](v11, v13);
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_initWithDomain_code_userInfo_, v15, 256, 0);

    swift_willThrow();
    outlined consume of Data._Representation(v8, v7);
    outlined consume of Data._Representation(v10, v9);
    outlined destroy of StocksKitCurrencyCache.Provider?(v6, &demangling cache variable for type metadata for TaskPriority?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    uint64_t v18 = v5;
    uint64_t v19 = *(void *)(v0 + 144);
    uint64_t v20 = *(void *)(v0 + 152);
    specialized static ImageLayout.canvasSize(from:)(v4, v18);
    double v22 = v21;
    double v24 = v23;
    outlined copy of Data._Representation(v2, v3);
    Image.init(from:size:)(v2, v3, v20, v22, v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    *(CGFloat *)(v0 + 288) = CGRectGetWidth(*(CGRect *)(v0 + 48));
    _s8PaperKit9DataOrURLOWOcTm_0(v20, v19, (uint64_t (*)(void))type metadata accessor for Image);
    static CRKeyPath.unique.getter();
    _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    Capsule<>.init(_:id:)();
    type metadata accessor for MainActor();
    *(void *)(v0 + 296) = static MainActor.shared.getter();
    double v26 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:), v26, v25);
  }
}

{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(double *)(v0 + 288);
  uint64_t v2 = *(double *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 104);
  unint64_t v3 = *(void *)(v0 + 112);
  swift_release();
  if (v1 / v2 <= 1.0) {
    id v5 = v1 / v2;
  }
  else {
    id v5 = 1.0;
  }
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  *(double *)(v6 + 32) = v5;
  Capsule.callAsFunction<A>(_:)();
  swift_task_dealloc();
  *(unsigned char *)(v0 + 305) = *(unsigned char *)(v0 + 304);
  return MEMORY[0x270FA2498](Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:), 0, 0);
}

{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 305);
  unint64_t v3 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 152);
  id v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 88);
  outlined consume of Data._Representation(*(void *)(v0 + 104), *(void *)(v0 + 112));
  outlined consume of Data._Representation(v7, v6);
  outlined consume of Data?(v3, v2);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for TaskPriority?);
  _s8PaperKit9DataOrURLOWOhTm_0(v4, (uint64_t (*)(void))type metadata accessor for Image);
  uint64_t v8 = *(void *)(v0 + 208);
  if (v1 == 1)
  {
    (*(void (**)(void, void, void))(v8 + 32))(*(void *)(v0 + 80), *(void *)(v0 + 216), *(void *)(v0 + 200));
    uint64_t v9 = 0;
  }
  else
  {
    (*(void (**)(void, void))(v8 + 8))(*(void *)(v0 + 216), *(void *)(v0 + 200));
    uint64_t v9 = 1;
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 56))(*(void *)(v0 + 80), v9, 1, *(void *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:)(double a1)
{
  *(double *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:), 0, 0);
}

uint64_t closure #1 in Capsule<>.init(serializedData:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v5[2] = a1;
  return MEMORY[0x270FA2498](closure #1 in Capsule<>.init(serializedData:priority:), 0, 0);
}

uint64_t closure #1 in Capsule<>.init(serializedData:priority:)()
{
  outlined copy of Data._Representation(v0[3], v0[4]);
  type metadata accessor for Image();
  _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  Capsule<>.init(serializedData:allowedAppFormats:)();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_20C4F6034()
{
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in Capsule<>.init(serializedData:priority:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[3] = v5;
  v6[4] = v4;
  v6[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  _OWORD v6[2] = a1;
  return MEMORY[0x270FA2498](closure #1 in Capsule<>.init(serializedData:priority:), 0, 0);
}

uint64_t Data.init(at:in:)(uint64_t a1, uint64_t a2, const CGImageMetadata *a3)
{
  uint64_t v4 = (__CFString *)MEMORY[0x21054D080]();
  swift_bridgeObjectRelease();
  uint64_t v5 = CGImageMetadataCopyTagWithPath(a3, 0, v4);

  if (!v5) {
    goto LABEL_11;
  }
  CFTypeRef v6 = CGImageMetadataTagCopyValue(v5);
  if (!v6) {
    goto LABEL_10;
  }
  CFTypeID v7 = CFGetTypeID(v6);
  if (v7 != CFStringGetTypeID())
  {

    swift_unknownObjectRelease();
LABEL_11:

    return 0;
  }
  swift_unknownObjectRetain();
  if ((swift_dynamicCast() & 1) == 0)
  {

    swift_unknownObjectRelease();
    return 0;
  }
  id v8 = objc_allocWithZone(MEMORY[0x263EFF8F8]);
  uint64_t v9 = (void *)MEMORY[0x21054D080]();
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v8, sel_initWithBase64EncodedString_options_, v9, 0);

  if (!v10)
  {
    swift_unknownObjectRelease();
LABEL_10:

    goto LABEL_11;
  }
  static Data._conditionallyBridgeFromObjectiveC(_:result:)();

  swift_unknownObjectRelease();
  return 0;
}

uint64_t specialized static Capsule<>.isJPEGConversionRequired(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  CFTypeID v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v27 - v9;
  static UTType.heic.getter();
  uint64_t v11 = UTType.identifier.getter();
  uint64_t v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, v4);
  if (v11 == a1 && v13 == a2) {
    goto LABEL_13;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v16)
  {
LABEL_14:
    char v26 = 1;
    return v26 & 1;
  }
  static UTType.heif.getter();
  uint64_t v17 = UTType.identifier.getter();
  uint64_t v19 = v18;
  v14(v7, v4);
  if (v17 == a1 && v19 == a2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v21) {
    goto LABEL_14;
  }
  CFArrayRef v22 = CGImageDestinationCopyTypeIdentifiers();
  uint64_t v28 = 0;
  uint64_t result = static Array._forceBridgeFromObjectiveC(_:result:)();
  double v24 = v28;
  if (v28)
  {

    char v25 = specialized Sequence<>.contains(_:)(a1, a2, v24);
    swift_bridgeObjectRelease();
    char v26 = v25 ^ 1;
    return v26 & 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Capsule<>.imageData(from:downsampled:with:)(CGImageSource *a1, char a2, double a3)
{
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(a1, 0, 0);
  if (!ImageAtIndex) {
    return 0;
  }
  uint64_t v11 = ImageAtIndex;
  CFStringRef v12 = (id)CGImageSourceGetType(a1);
  static UTType.jpeg.getter();
  uint64_t v13 = UTType.identifier.getter();
  uint64_t v15 = v14;
  uint64_t v16 = v6;
  uint64_t v17 = (__CFString *)v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v16);
  uint64_t v18 = (__CFString *)MEMORY[0x21054D080](v13, v15);
  swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
    CFArrayRef v22 = v17;
    char v23 = specialized static Capsule<>.isJPEGConversionRequired(for:)(v19, v21);
    swift_bridgeObjectRelease();
    if (v23) {
      double v24 = v22;
    }
    else {
      double v24 = v18;
    }
    if ((v23 & 1) == 0) {
      uint64_t v18 = v22;
    }
  }
  int64_t Width = CGImageGetWidth(v11);
  int64_t Height = CGImageGetHeight(v11);
  CFDictionaryRef v27 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  if (!v27
    || (CFDictionaryRef v28 = v27,
        v127[0] = 0,
        unint64_t v29 = type metadata accessor for NSObject(),
        uint64_t v30 = _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject, (void (*)(uint64_t))type metadata accessor for NSObject), static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(), v28, (v31 = v127[0]) == 0))
  {

    return 0;
  }
  uint64_t v122 = v30;
  unint64_t v125 = v29;
  double v32 = (double)Width;
  double v33 = (double)Height;
  uint64_t v128 = v127[0];
  uint64_t v34 = (void *)*MEMORY[0x263F0F4C8];
  uint64_t v35 = (void **)MEMORY[0x263F0F600];
  uint64_t v36 = (void **)MEMORY[0x263EFFB38];
  unint64_t v37 = v127[0] & 0xC000000000000001;
  char v123 = v17;
  if ((v127[0] & 0xC000000000000001) == 0)
  {
    if (*(void *)(v127[0] + 16))
    {
      id v46 = v34;
      swift_bridgeObjectRetain();
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v46);
      if (v48)
      {
        Swift::Int v121 = a1;
        uint64_t v38 = v18;
        uint64_t v39 = v36;
        uint64_t v43 = *(void *)(*(void *)(v31 + 56) + 8 * v47);
        swift_unknownObjectRetain();

        goto LABEL_20;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v50 = (void *)MEMORY[0x21054D080](0x704172656B614D7BLL, 0xEC0000007D656C70);
    if (!*(void *)(v31 + 16)) {
      goto LABEL_43;
    }
    goto LABEL_40;
  }
  Swift::Int v121 = a1;
  uint64_t v38 = v18;
  uint64_t v39 = (void **)MEMORY[0x263EFFB38];
  char v40 = a2;
  uint64_t v41 = v127[0] & 0xFFFFFFFFFFFFFF8;
  id v42 = v34;
  swift_bridgeObjectRetain();
  uint64_t v43 = __CocoaDictionary.lookup(_:)();

  if (v43)
  {
    a2 = v40;
LABEL_20:
    v127[0] = v43;
    if ((swift_dynamicCast() & 1) != 0 && v126 >= 2)
    {
      if (v126 <= 4) {
        double v49 = v33;
      }
      else {
        double v49 = v32;
      }
      if (v126 > 4) {
        double v32 = v33;
      }
      double v33 = v49;
    }
    uint64_t v36 = v39;
    uint64_t v50 = (void *)MEMORY[0x21054D080](0x704172656B614D7BLL, 0xEC0000007D656C70);
    uint64_t v18 = v38;
    if (v37)
    {
      char v40 = a2;
      uint64_t v41 = v31 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_31;
    }
    a1 = v121;
    uint64_t v35 = (void **)MEMORY[0x263F0F600];
    if (!*(void *)(v31 + 16))
    {
LABEL_43:

      swift_bridgeObjectRelease();
      uint64_t v55 = 0;
LABEL_44:
      uint64_t v52 = *v35;
      char v53 = *v36;
      uint64_t v124 = (void *)v55;
      if (v53)
      {
        if (!v37)
        {
          id v56 = v52;
          id v57 = v53;
LABEL_53:
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v127[0] = v31;
          uint64_t v128 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v57, v56, isUniquelyReferenced_nonNull_native);
          uint64_t v128 = v127[0];

          swift_bridgeObjectRelease();
          goto LABEL_56;
        }
        Swift::Int v120 = v18;
        char v40 = a2;
        uint64_t v41 = v31 & 0xFFFFFFFFFFFFFF8;
LABEL_47:
        if (v31 >= 0) {
          Swift::Int v31 = v41;
        }
        id v56 = v52;
        id v57 = v53;
        uint64_t result = __CocoaSet.count.getter();
        if (__OFADD__(result, 1))
        {
          __break(1u);
          goto LABEL_119;
        }
        Swift::Int v31 = specialized _NativeDictionary.init(_:capacity:)(v31, result + 1);
        a2 = v40;
        uint64_t v18 = v120;
        goto LABEL_53;
      }
      goto LABEL_55;
    }
LABEL_40:
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v50);
    if (v54)
    {
      swift_unknownObjectRetain();

      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  uint64_t v50 = (void *)MEMORY[0x21054D080](0x704172656B614D7BLL, 0xEC0000007D656C70);
  uint64_t v36 = v39;
  uint64_t v18 = v38;
LABEL_31:
  uint64_t v51 = __CocoaDictionary.lookup(_:)();

  swift_bridgeObjectRelease();
  if (v51)
  {
    a2 = v40;
    a1 = v121;
LABEL_42:
    type metadata accessor for CFDictionaryRef(0);
    uint64_t v55 = swift_dynamicCastUnknownClassUnconditional();
    uint64_t v35 = (void **)MEMORY[0x263F0F600];
    goto LABEL_44;
  }
  uint64_t v52 = (void *)*MEMORY[0x263F0F600];
  char v53 = *v36;
  if (v53)
  {
    Swift::Int v120 = v18;
    uint64_t v124 = 0;
    a1 = v121;
    goto LABEL_47;
  }
  uint64_t v124 = 0;
  a2 = v40;
  a1 = v121;
LABEL_55:
  id v59 = v52;
  specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v59);

  swift_unknownObjectRelease();
LABEL_56:
  BOOL v60 = (void *)*MEMORY[0x263F0F5A8];
  unint64_t v61 = (void *)*MEMORY[0x263EFFB40];
  if (*MEMORY[0x263EFFB40])
  {
    uint64_t v62 = v128;
    if ((v128 & 0xC000000000000001) == 0)
    {
      id v68 = v60;
      id v69 = v61;
      goto LABEL_65;
    }
    if (v128 >= 0) {
      uint64_t v62 = v128 & 0xFFFFFFFFFFFFFF8;
    }
    id v63 = v60;
    id v64 = v61;
    uint64_t result = __CocoaSet.count.getter();
    if (!__OFADD__(result, 1))
    {
      uint64_t v62 = specialized _NativeDictionary.init(_:capacity:)(v62, result + 1);
LABEL_65:
      char v70 = swift_isUniquelyReferenced_nonNull_native();
      v127[0] = v62;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v61, v60, v70);
      Swift::Int v71 = v127[0];

      swift_bridgeObjectRelease();
      char v72 = (void *)*MEMORY[0x263F0F5F8];
      if ((v71 & 0xC000000000000001) == 0)
      {
        id v75 = v72;
        id v76 = v61;
        goto LABEL_71;
      }
      if (v71 >= 0) {
        v71 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      id v73 = v72;
      id v74 = v61;
      uint64_t result = __CocoaSet.count.getter();
      if (!__OFADD__(result, 1))
      {
        Swift::Int v71 = specialized _NativeDictionary.init(_:capacity:)(v71, result + 1);
        uint64_t v128 = v71;
LABEL_71:
        char v77 = swift_isUniquelyReferenced_nonNull_native();
        v127[0] = v71;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v61, v72, v77);
        Swift::Int v78 = v127[0];

        swift_bridgeObjectRelease();
        uint64_t v79 = (void *)*MEMORY[0x263F0F650];
        if ((v78 & 0xC000000000000001) == 0)
        {
          id v82 = v79;
          id v83 = v61;
LABEL_77:
          char v84 = swift_isUniquelyReferenced_nonNull_native();
          v127[0] = v78;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v61, v79, v84);
          uint64_t v128 = v127[0];

          swift_bridgeObjectRelease();
          if ((a2 & 1) == 0) {
            goto LABEL_94;
          }
          goto LABEL_78;
        }
        if (v78 >= 0) {
          v78 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        id v80 = v79;
        id v81 = v61;
        uint64_t result = __CocoaSet.count.getter();
        if (!__OFADD__(result, 1))
        {
          Swift::Int v78 = specialized _NativeDictionary.init(_:capacity:)(v78, result + 1);
          goto LABEL_77;
        }
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  id v65 = v60;
  specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v65);

  swift_unknownObjectRelease();
  id v66 = (id)*MEMORY[0x263F0F5F8];
  specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v66);

  swift_unknownObjectRelease();
  id v67 = (id)*MEMORY[0x263F0F650];
  specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v67);

  swift_unknownObjectRelease();
  if (a2)
  {
LABEL_78:
    if (v33 * v32 <= a3) {
      goto LABEL_94;
    }
    double v85 = sqrt(a3 / (v32 / v33));
    double v86 = round(a3 / v85);
    double v87 = round(v85);
    if (v86 > 1.0) {
      double v88 = v86;
    }
    else {
      double v88 = 1.0;
    }
    if (v87 > 1.0) {
      double v89 = v87;
    }
    else {
      double v89 = 1.0;
    }
    char v90 = (void *)*MEMORY[0x263F0EFE0];
    if (v88 > v89) {
      double v91 = v88;
    }
    else {
      double v91 = v89;
    }
    id v92 = objc_allocWithZone(NSNumber);
    id v93 = v90;
    id v94 = objc_msgSend(v92, sel_initWithDouble_, v91);
    uint64_t v95 = v128;
    if ((v128 & 0xC000000000000001) == 0) {
      goto LABEL_93;
    }
    if (v128 >= 0) {
      uint64_t v95 = v128 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (!__OFADD__(result, 1))
    {
      uint64_t v95 = specialized _NativeDictionary.init(_:capacity:)(v95, result + 1);
LABEL_93:
      char v96 = swift_isUniquelyReferenced_nonNull_native();
      v127[0] = v95;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v94, v93, v96);
      uint64_t v128 = v127[0];

      swift_bridgeObjectRelease();
      goto LABEL_94;
    }
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
LABEL_94:
  v127[3] = &type metadata for MobileQuickLookFeatureFlags;
  v127[4] = lazy protocol witness table accessor for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags();
  LOBYTE(v127[0]) = 1;
  char v97 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
  if ((v97 & 1) == 0)
  {
    uint64_t v102 = (void *)MEMORY[0x21054D080](0x704172656B614D7BLL, 0xEC0000007D656C70);
    specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v102);

    swift_unknownObjectRelease();
    uint64_t v103 = v124;
    goto LABEL_113;
  }
  uint64_t v98 = (void *)*MEMORY[0x263F0F018];
  if (!v61)
  {
    id v104 = v98;
    specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v104);

    swift_unknownObjectRelease();
    uint64_t v103 = v124;
    if (!v124)
    {
LABEL_113:
      int v114 = (__CFData *)objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF990]), sel_init);
      CGImageDestinationRef v115 = CGImageDestinationCreateWithData(v114, v18, 1uLL, 0);
      if (v115)
      {
        uint64_t v116 = v115;
        CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        CGImageDestinationAddImageFromSource(v116, a1, 0, isa);

        if (CGImageDestinationFinalize(v116))
        {
          uint64_t v118 = v114;
          uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

          return v44;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      return 0;
    }
    goto LABEL_106;
  }
  uint64_t v99 = v128;
  if ((v128 & 0xC000000000000001) != 0)
  {
    if (v128 >= 0) {
      uint64_t v99 = v128 & 0xFFFFFFFFFFFFFF8;
    }
    id v100 = v98;
    id v101 = v61;
    uint64_t result = __CocoaSet.count.getter();
    if (!__OFADD__(result, 1))
    {
      uint64_t v99 = specialized _NativeDictionary.init(_:capacity:)(v99, result + 1);
      goto LABEL_105;
    }
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  id v105 = v98;
  id v106 = v61;
LABEL_105:
  char v107 = swift_isUniquelyReferenced_nonNull_native();
  v127[0] = v99;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v61, v98, v107);
  uint64_t v128 = v127[0];

  swift_bridgeObjectRelease();
  uint64_t v103 = v124;
  if (!v124) {
    goto LABEL_113;
  }
LABEL_106:
  id v108 = v103;
  uint64_t v109 = (void *)MEMORY[0x21054D080](0x704172656B614D7BLL, 0xEC0000007D656C70);
  uint64_t v110 = v128;
  if ((v128 & 0xC000000000000001) == 0)
  {
    id v112 = v108;
    goto LABEL_112;
  }
  if (v128 >= 0) {
    uint64_t v110 = v128 & 0xFFFFFFFFFFFFFF8;
  }
  id v111 = v108;
  uint64_t result = __CocoaSet.count.getter();
  if (!__OFADD__(result, 1))
  {
    uint64_t v110 = specialized _NativeDictionary.init(_:capacity:)(v110, result + 1);
LABEL_112:
    char v113 = swift_isUniquelyReferenced_nonNull_native();
    v127[0] = v110;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v108, v109, v113);
    uint64_t v128 = v127[0];

    swift_bridgeObjectRelease();
    goto LABEL_113;
  }
LABEL_124:
  __break(1u);
  return result;
}

uint64_t specialized static Capsule<>.maxSafeImageAreaAsync()()
{
  return MEMORY[0x270FA2498](specialized static Capsule<>.maxSafeImageAreaAsync(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0[6] = self;
  v0[7] = type metadata accessor for MainActor();
  v0[8] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](specialized static Capsule<>.maxSafeImageAreaAsync(), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(v0 + 48);
  swift_release();
  *(void *)(v0 + 72) = objc_msgSend(v1, sel_mainScreen);
  return MEMORY[0x270FA2498](specialized static Capsule<>.maxSafeImageAreaAsync(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 80) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](specialized static Capsule<>.maxSafeImageAreaAsync(), v2, v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = (void *)v0[9];
  swift_release();
  objc_msgSend(v1, sel_nativeBounds);
  v0[2] = v2;
  v0[3] = v3;
  v0[4] = v4;
  v0[5] = v5;

  return MEMORY[0x270FA2498](specialized static Capsule<>.maxSafeImageAreaAsync(), 0, 0);
}

uint64_t specialized static Capsule<>.maxSafeImageAreaAsync()(__n128 a1)
{
  if (one-time initialization token for imageMarkupOldMaxArea != -1) {
    swift_once();
  }
  a1.n128_f64[0] = *(double *)(v1 + 32) * *(double *)(v1 + 40);
  if (*(double *)&static UIConstants.imageMarkupOldMaxArea > a1.n128_f64[0]) {
    a1.n128_f64[0] = *(double *)&static UIConstants.imageMarkupOldMaxArea;
  }
  uint64_t v2 = *(uint64_t (**)(__n128))(v1 + 8);
  return v2(a1);
}

uint64_t partial apply for closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DataOrURL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + v1;
  uint64_t v8 = v1 + v5;
  char v9 = *(unsigned char *)(v1 + v6);
  uint64_t v10 = *(void *)(v7 + 8);
  uint64_t v11 = swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *(void *)uint64_t v11 = v2;
  *(void *)(v11 + 32) = v10;
  *(unsigned char *)(v11 + 40) = v9;
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v8;
  *(void *)(v11 + 8) = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return MEMORY[0x270FA2498](closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v4 = *(void *)(v1 + 32);
  unint64_t v5 = *(unsigned char *)(v1 + 40);
  unint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + 32) = v6;
  *(unsigned char *)(v7 + 40) = v5;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = v4;
  *(void *)(v7 + 8) = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return MEMORY[0x270FA2498](closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:), 0, 0);
}

uint64_t _s8PaperKit9DataOrURLOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s8PaperKit9DataOrURLOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized static Capsule<>.imageData(from:downsampled:with:)(uint64_t a1, char a2, double a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DataOrURL();
  MEMORY[0x270FA5388](v10);
  CFStringRef v12 = (uint64_t *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s8PaperKit9DataOrURLOWOcTm_0(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for DataOrURL);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v19 = *v12;
    unint64_t v20 = v12[1];
    CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
    CGImageSourceRef v16 = CGImageSourceCreateWithData(isa, 0);
    outlined consume of Data._Representation(v19, v20);

    if (v16) {
      goto LABEL_3;
    }
    return 0;
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v9, v12, v6);
  URL._bridgeToObjectiveC()(v13);
  CFURLRef v15 = v14;
  CGImageSourceRef v16 = CGImageSourceCreateWithURL(v14, 0);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!v16) {
    return 0;
  }
LABEL_3:
  uint64_t v17 = v16;
  uint64_t v18 = specialized static Capsule<>.imageData(from:downsampled:with:)(v17, a2 & 1, a3);

  return v18;
}

uint64_t sub_20C4F77BC()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t objectdestroy_9Tm_0()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataOrURL() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    outlined consume of Data._Representation(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  }
  return MEMORY[0x270FA0238](v0, ((v3 + v4) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:)partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DataOrURL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + v1;
  uint64_t v8 = v1 + v5;
  char v9 = *(unsigned char *)(v1 + v6);
  uint64_t v10 = *(void *)(v7 + 8);
  uint64_t v11 = swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *(void *)uint64_t v11 = v2;
  *(void *)(v11 + 32) = v10;
  *(unsigned char *)(v11 + 40) = v9;
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v8;
  *(void *)(v11 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return MEMORY[0x270FA2498](closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:), 0, 0);
}

uint64_t _s8PaperKit5ImageVAC9Coherence4CRDTAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in Capsule<>.init(downsampledBaseImageData:imageSize:with:)()
{
  return closure #1 in Capsule<>.init(downsampledBaseImageData:imageSize:with:)();
}

uint64_t closure #1 in Capsule<>.importAnnotations(from:scale:)partial apply@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return partial apply for closure #1 in Capsule<>.importAnnotations(from:scale:)(a1, a2);
}

void *PaperLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  v26[1] = a4;
  v26[2] = a5;
  v26[3] = a1;
  uint64_t v9 = type metadata accessor for CRKeyPath();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  CFStringRef v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Paper>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  CGImageSourceRef v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  double v18 = MEMORY[0x270FA5388](v17 - 8);
  unint64_t v20 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v6, v9, v18);
  type metadata accessor for Paper();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(lazy protocol witness table cache variable for type Ref<Paper> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<Paper>);
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  id v21 = objc_allocWithZone((Class)type metadata accessor for PaperView());
  id v22 = a3;
  id v23 = a2;
  double v24 = specialized PaperView.init(canvasElement:canvas:parentCanvasElement:)((uint64_t)v20, a2, a3);

  return v24;
}

uint64_t closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, void *a7, void (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v84 = a9;
  double v85 = a8;
  id v74 = a7;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v14 - 8);
  id v83 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v79 = *(void *)(v16 - 8);
  uint64_t v80 = v16;
  MEMORY[0x270FA5388](v16);
  char v77 = (char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for DispatchQoS();
  uint64_t v76 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  id v75 = (char *)v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for URL();
  unint64_t v20 = *(void **)(v19 - 8);
  uint64_t v21 = v20[8];
  MEMORY[0x270FA5388](v19);
  id v73 = (char *)v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  id v82 = (char *)v69 - v23;
  MEMORY[0x270FA5388](v24);
  char v70 = (char *)v69 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v26 - 8);
  CFDictionaryRef v28 = (char *)v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  Swift::Int v71 = (char *)v69 - v30;
  MEMORY[0x270FA5388](v31);
  char v72 = (char *)v69 - v32;
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)v69 - v34;
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)v69 - v37;
  if (a1)
  {
    uint64_t aBlock = a1;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
    int v39 = swift_dynamicCast();
    char v40 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v20[7];
    uint64_t v41 = v39 ^ 1u;
    id v42 = v38;
  }
  else
  {
    char v40 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v20[7];
    id v42 = (char *)v69 - v37;
    uint64_t v41 = 1;
  }
  uint64_t v43 = v40;
  v40(v42, v41, 1, v19);
  outlined init with copy of URL?((uint64_t)v38, (uint64_t)v35);
  id v81 = v20;
  uint64_t v44 = (uint64_t (*)(char *, uint64_t, uint64_t))v20[6];
  int v45 = v44(v35, 1, v19);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for URL?);
  if (v45 == 1)
  {
    if (a1)
    {
      uint64_t v86 = a1;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
      if (swift_dynamicCast())
      {
        uint64_t v46 = aBlock;
        unint64_t v47 = v88;
        uint64_t v48 = (uint64_t)v71;
        v69[1] = v81 + 7;
        v69[0] = v43;
        v43(v71, 1, 1, v19);
        uint64_t v49 = (uint64_t)v72;
        URL.init(dataRepresentation:relativeTo:isAbsolute:)();
        outlined consume of Data._Representation(v46, v47);
        outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for URL?);
        if (v44((char *)v49, 1, v19) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v49, &demangling cache variable for type metadata for URL?);
        }
        else
        {
          uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v81[4];
          uint64_t v51 = v70;
          v50(v70, v49, v19);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v38, &demangling cache variable for type metadata for URL?);
          v50(v38, (uint64_t)v51, v19);
          ((void (*)(char *, void, uint64_t, uint64_t))v69[0])(v38, 0, 1, v19);
        }
      }
    }
  }
  outlined init with copy of URL?((uint64_t)v38, (uint64_t)v28);
  if (v44(v28, 1, v19) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    char v53 = v81;
    uint64_t v52 = v82;
    char v54 = (void (*)(char *, char *, uint64_t))v81[4];
    v54(v82, v28, v19);
    type metadata accessor for OS_dispatch_queue();
    char v72 = (char *)static OS_dispatch_queue.main.getter();
    uint64_t v55 = v73;
    ((void (*)(char *, char *, uint64_t))v53[2])(v73, v52, v19);
    unint64_t v56 = (*((unsigned __int8 *)v53 + 80) + 24) & ~(unint64_t)*((unsigned __int8 *)v53 + 80);
    uint64_t v57 = swift_allocObject();
    uint64_t v58 = v74;
    *(void *)(v57 + 16) = v74;
    v54((char *)(v57 + v56), v55, v19);
    id v59 = (double *)(v57 + ((v21 + v56 + 7) & 0xFFFFFFFFFFFFFFF8));
    *id v59 = a2;
    v59[1] = a3;
    void v59[2] = a4;
    v59[3] = a5;
    double v91 = partial apply for closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
    uint64_t v92 = v57;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v88 = 1107296256;
    double v89 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    char v90 = &block_descriptor_7_0;
    BOOL v60 = _Block_copy(&aBlock);
    id v61 = v58;
    swift_release();
    uint64_t v62 = v75;
    static DispatchQoS.unspecified.getter();
    uint64_t aBlock = MEMORY[0x263F8EE78];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    id v63 = v77;
    uint64_t v64 = v80;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    id v65 = v72;
    MEMORY[0x21054DA10](0, v62, v63, v60);
    _Block_release(v60);

    (*(void (**)(char *, uint64_t))(v79 + 8))(v63, v64);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v62, v78);
    ((void (*)(char *, uint64_t))v53[1])(v82, v19);
  }
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v67 = (uint64_t)v83;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v83, 1, 1, v66);
  v85(v67);
  outlined destroy of StocksKitCurrencyCache.Provider?(v67, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v38, &demangling cache variable for type metadata for URL?);
}

uint64_t closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  CFStringRef v12 = (void *)MEMORY[0x263F8EED0];
  uint64_t v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x2F8))();
  uint64_t v15 = v14;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void, void, void, uint64_t, uint64_t, uint64_t))(v15 + 112))(a2, 0, 0, 0, 1, ObjectType, v15);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  char v23 = v22;

  (*(void (**)(uint64_t, uint64_t, uint64_t, void, double, double, double, double))((*v12 & *a1) + 0x418))(v17, v19, v21, v23 & 1, a3, a4, a5, a6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)(uint64_t a1, uint64_t a2, void (*a3)(char *), void (*a4)(char *))
{
  uint64_t v41 = a3;
  id v42 = a4;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v38 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x270FA5388](v19);
  char v22 = (char *)&v35 - v21;
  if (a1)
  {
    aBlock[0] = a1;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
    int v23 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, v23 ^ 1u, 1, v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
    {
      uint64_t v36 = v5;
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
      v24(v22, v14, v15);
      type metadata accessor for OS_dispatch_queue();
      uint64_t v35 = static OS_dispatch_queue.main.getter();
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v22, v15);
      unint64_t v25 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      uint64_t v26 = swift_allocObject();
      v24((char *)(v26 + v25), v18, v15);
      uint64_t v27 = (void (**)(char *))(v26 + ((v17 + v25 + 7) & 0xFFFFFFFFFFFFFFF8));
      CFDictionaryRef v28 = v42;
      void *v27 = v41;
      v27[1] = v28;
      aBlock[4] = partial apply for closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_37;
      uint64_t v29 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock[0] = MEMORY[0x263F8EE78];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      uint64_t v30 = v38;
      uint64_t v31 = v36;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v32 = (void *)v35;
      MEMORY[0x21054DA10](0, v8, v30, v29);
      _Block_release(v29);

      (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v31);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v39);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v22, v15);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v16 + 56))(v14, 1, 1, v15, v20);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v11, 1, 1, v34);
  v41(v11);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v22 = a3;
  int v23 = a2;
  v20[1] = a1;
  uint64_t FileVersionPolicy = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  uint64_t v3 = *(void *)(FileVersionPolicy - 8);
  MEMORY[0x270FA5388](FileVersionPolicy);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRContext();
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  uint64_t v9 = (void *)MEMORY[0x21054C990](0, v24);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  v20[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  uint64_t v10 = type metadata accessor for CRCodableVersion();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_20C835740;
  unint64_t v15 = v14 + v13;
  uint64_t v16 = *(void (**)(unint64_t, void, uint64_t))(v11 + 104);
  v16(v15, *MEMORY[0x263F32EB0], v10);
  v16(v15 + v12, *MEMORY[0x263F32EB8], v10);
  if (one-time initialization token for allReadableFileFormatVersions != -1) {
    swift_once();
  }
  uint64_t v17 = FileVersionPolicy;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F32FB0], FileVersionPolicy);
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 0, 1, v18);
  v23(v8);

  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
}

uint64_t sub_20C4F91DC()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + v2;
  uint64_t v4 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = *(void (**)(char *))v4;
  uint64_t v6 = *(void *)(v4 + 8);
  return closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)(v3, v5, v6);
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_37()
{
  return swift_release();
}

uint64_t getEnumTagSinglePayload for PaperLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C4F9340);
}

uint64_t sub_20C4F9340(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PaperLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C4F93C0);
}

uint64_t sub_20C4F93C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PaperLayout()
{
  uint64_t result = type metadata singleton initialization cache for PaperLayout;
  if (!type metadata singleton initialization cache for PaperLayout) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t associated type witness table accessor for LayoutItemProvider.Model : CRDT in PaperLayout()
{
  return _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in PaperLayout()
{
  return &protocol witness table for Paper;
}

uint64_t protocol witness for static Layout.canHandle(itemProvider:) in conformance PaperLayout(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x21054D080](0x6C7070612E6D6F63, 0xEF72657061702E65);
  unsigned __int8 v3 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v2);

  if (v3) {
    return 1;
  }
  uint64_t v5 = (void *)MEMORY[0x21054D080](0xD000000000000017, 0x800000020C84EE40);
  id v4 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v5);

  return (uint64_t)v4;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C4F9638()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = v0 + v2;
  uint64_t v5 = (double *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  double v6 = *v5;
  double v7 = v5[1];
  double v8 = v5[2];
  double v9 = v5[3];
  return closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)(v3, v4, v6, v7, v8, v9);
}

id ReflowCursor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReflowCursor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ReflowCursor()
{
  return self;
}

uint64_t closure #1 in miniButton(systemName:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v28 = a1;
  uint64_t v35 = a5;
  uint64_t v6 = type metadata accessor for LiftHoverEffect();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  uint64_t v34 = v7;
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PlainButtonStyle();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v31 = v18;
  uint64_t v32 = v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v28;
  *(void *)(v22 + 24) = a2;
  uint64_t v36 = v29;
  uint64_t v37 = v30;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v23 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>>);
  uint64_t v24 = lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, MEMORY[0x263F18FD0]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  static CustomHoverEffect<>.lift.getter();
  uint64_t v38 = v14;
  uint64_t v39 = v10;
  uint64_t v40 = v23;
  uint64_t v41 = v24;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, MEMORY[0x263F18DF8]);
  uint64_t v25 = v31;
  uint64_t v26 = v33;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v21, v25);
}

uint64_t sub_20C4F9EC4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t closure #2 in closure #1 in miniButton(systemName:_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v5 = Image.init(systemName:)();
  if (one-time initialization token for buttonFontSize != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  uint64_t v7 = static Font.system(size:weight:design:)();
  outlined destroy of Font.Design?((uint64_t)v4);
  uint64_t result = swift_getKeyPath();
  *a1 = v5;
  a1[1] = result;
  a1[2] = v7;
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in miniButton(systemName:_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in closure #1 in miniButton(systemName:_:)(a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MiniButton.body.getter@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v21[1] = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v21 - v16;
  a1(v15);
  if (one-time initialization token for buttonSize != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  v21[2] = a3;
  v21[3] = MEMORY[0x263F18860];
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13, v10, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v17, v10, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

uint64_t protocol witness for View.body.getter in conformance MiniButton<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MiniButton.body.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t outlined destroy of Font.Design?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for MiniButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for MiniButton()
{
  return swift_release();
}

void *assignWithCopy for MiniButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for MiniButton(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for MiniButton()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in MiniButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_20C4FA528()
{
  return swift_getWitnessTable();
}

uint64_t Image.image.getter()
{
  return Image.image.getter(MEMORY[0x263F32C30]);
}

uint64_t type metadata accessor for Image()
{
  uint64_t result = type metadata singleton initialization cache for Image;
  if (!type metadata singleton initialization cache for Image) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t key path getter for Image.image : Image()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for Image.image : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for CRAssetOrData?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for CRAssetOrData?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRAssetOrData?);
}

uint64_t Image.image.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for CRAssetOrData?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAssetOrData?);
}

uint64_t Image.description.getter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Image.description.setter()
{
  return CRRegister.wrappedValue.setter();
}

void Image.pdfContentsBounds.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.getter();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
LABEL_4:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    return;
  }
  TaggedValue_2.tagged2.getter();
  double v5 = v19;
  double v6 = v20;
  double v7 = v21;
  double v8 = v22;
  double v9 = v23;
  double v10 = v24;
  double v12 = v25;
  double v11 = v26;
  char v13 = v27;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  if (v13) {
    goto LABEL_4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double v14 = v22;
  double v15 = v9 * v21;
  double v16 = v10 * v22;
  double v17 = v12 * v21;
  double v19 = v5 * v21;
  double v20 = v6 * v22;
  double v21 = v7 * v21;
  double v22 = v8 * v22;
  double v23 = v15;
  double v24 = v16;
  double v25 = v17;
  double v26 = v11 * v14;
  Quad.perspectiveCorrectedSize.getter();
}

double Image.rotation.getter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Image.$rotation.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t Image.$rotation.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

double Image.bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Image.bounds.setter()
{
  return CRRegister.wrappedValue.setter();
}

double Image.frame.getter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Image.$frame.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t Image.$frame.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t Image.contentsBounds.getter()
{
  return Image.contentsBounds.getter(MEMORY[0x263F32C30]);
}

uint64_t Image.$contentsBounds.getter()
{
  return Image.contentsBounds.getter(MEMORY[0x263F32C38]);
}

uint64_t Image.contentsBounds.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for Image();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  return a1(v2);
}

uint64_t Image.$contentsBounds.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t Image.filter.getter()
{
  return Image.filter.getter(MEMORY[0x263F32C30]);
}

uint64_t Image.$filter.getter()
{
  return Image.filter.getter(MEMORY[0x263F32C38]);
}

uint64_t Image.filter.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for Image();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  return a1(v2);
}

uint64_t Image.$filter.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t Image.$image.getter()
{
  return Image.image.getter(MEMORY[0x263F32C38]);
}

uint64_t Image.image.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for Image();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  return a1(v2);
}

uint64_t Image.$image.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

double key path getter for Image.frame : Image@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for Image.frame : Image()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Image.frame.setter()
{
  return CRRegister.wrappedValue.setter();
}

void specialized PaperPage.axisAlignedRotationInDegrees.setter(uint64_t a1)
{
  double v1 = round((double)a1 / 90.0) * 3.14159265 * 0.5;
  if (v1 >= 0.0) {
    double v2 = v1;
  }
  else {
    double v2 = v1 + 6.28318531;
  }
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double v3 = fmod(v4 - v2, 6.28318531);
  if (v3 > 3.14159265) {
    double v3 = v3 + -6.28318531;
  }
  if (v3 < -3.14159265) {
    double v3 = v3 + 6.28318531;
  }
  if (fabs(v3) > 0.01) {
    CRRegister.wrappedValue.setter();
  }
}

{
  specialized PaperPage.axisAlignedRotationInDegrees.setter(a1, (void (*)(void))type metadata accessor for Paper);
}

void specialized PaperPage.axisAlignedRotationInDegrees.setter(uint64_t a1, void (*a2)(void))
{
  double v2 = round((double)a1 / 90.0) * 3.14159265 * 0.5;
  if (v2 >= 0.0) {
    double v3 = v2;
  }
  else {
    double v3 = v2 + 6.28318531;
  }
  a2(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double v4 = fmod(v5 - v3, 6.28318531);
  if (v4 > 3.14159265) {
    double v4 = v4 + -6.28318531;
  }
  if (v4 < -3.14159265) {
    double v4 = v4 + 6.28318531;
  }
  if (fabs(v4) > 0.01) {
    CRRegister.wrappedValue.setter();
  }
}

uint64_t Image.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v32);
  uint64_t v31 = (uint64_t)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v30 = (char *)&v27 - v4;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v29);
  uint64_t v28 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v8 = (char *)&v27 - v7;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v27);
  double v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v27 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v14);
  double v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  double v19 = (char *)&v27 - v18;
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v33 = 0u;
  long long v34 = 0u;
  CRRegister.init(wrappedValue:)();
  uint64_t v20 = type metadata accessor for Image();
  long long v33 = 0u;
  long long v34 = 0u;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v33 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v19, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v13, 1, 1, v22);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  uint64_t v23 = type metadata accessor for CRAssetOrData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v8, 1, 1, v23);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v8, v28, &demangling cache variable for type metadata for CRAssetOrData?);
  lazy protocol witness table accessor for type CRAssetOrData? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CRAssetOrData?);
  long long v33 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?);
  CRRegister.init(wrappedValue:)();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v25 = (uint64_t)v30;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v30, 1, 1, v24);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v25, v31, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  long long v33 = xmmword_20C8352B0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type String? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?, &demangling cache variable for type metadata for Data?);
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t result = CROrderedSet.init()();
  *(void *)(a1 + *(int *)(v20 + 56)) = MEMORY[0x263F8EE80];
  return result;
}

uint64_t one-time initialization function for defaultFilterQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v0);
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v5 - 8);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F138], v1);
  v7[1] = MEMORY[0x263F8EE78];
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  defaultFilterQueue = result;
  return result;
}

uint64_t (*Image.bounds.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Image.$bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Image.$bounds : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Image.$bounds.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Image.$bounds.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t (*Image.frame.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Image.$frame : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t (*Image.$frame.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double key path getter for Image.rotation : Image@<D0>(double *a1@<X8>)
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Image.rotation : Image()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t Image.rotation.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Image.rotation.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Image.$rotation : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t (*Image.$rotation.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path setter for Image.contentsBounds : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
}

uint64_t Image.contentsBounds.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
}

uint64_t (*Image.contentsBounds.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Image.$contentsBounds : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t (*Image.$contentsBounds.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path setter for Image.filter : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
}

uint64_t Image.filter.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
}

uint64_t (*Image.filter.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Image.$filter : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t (*Image.$filter.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Image.image.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Image.$image : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t (*Image.$image.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Image.description.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Image.$description.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Image.$description : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Image.$description.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Image.$description.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Image.drawing.getter()
{
  return Image.drawing.getter(MEMORY[0x263F32C30]);
}

uint64_t key path setter for Image.drawing : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v9 - v6, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t Image.drawing.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t (*Image.drawing.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Image.$drawing.getter()
{
  return Image.drawing.getter(MEMORY[0x263F32C38]);
}

uint64_t Image.drawing.getter(uint64_t (*a1)(uint64_t))
{
  type metadata accessor for Image();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return a1(v2);
}

uint64_t key path setter for Image.$drawing : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Image.$drawing.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Image.$drawing.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 44);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Image.imageGenerationRecipe.getter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for Image.imageGenerationRecipe : Image@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Image.imageGenerationRecipe : Image(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  type metadata accessor for Image();
  outlined copy of Data?(v2, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Image.imageGenerationRecipe.setter()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Image.imageGenerationRecipe.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Image.$imageGenerationRecipe.getter()
{
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Image.$imageGenerationRecipe : Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t Image.$imageGenerationRecipe.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Image.$imageGenerationRecipe.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 48);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Image.subelements.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Image() + 52);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Image.subelements.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Image() + 52);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

double (*Image.subelements.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t Image.additionalFields.getter()
{
  type metadata accessor for Image();
  return swift_bridgeObjectRetain();
}

uint64_t Image.additionalFields.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Image() + 56);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

double (*Image.additionalFields.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

double static Image.fields.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  *(_OWORD *)uint64_t v31 = *(_OWORD *)&qword_26ACB3FD8;
  *(_OWORD *)&v31[16] = *(_OWORD *)&qword_26ACB3FE8;
  long long v32 = xmmword_26ACB3FF8;
  long long v28 = xmmword_26ACB3F98;
  *(_OWORD *)uint64_t v29 = *(_OWORD *)&qword_26ACB3FA8;
  *(_OWORD *)&v29[16] = xmmword_26ACB3FB8;
  long long v30 = *(_OWORD *)&qword_26ACB3FC8;
  *(_OWORD *)&v25[16] = xmmword_26ACB3F58;
  long long v26 = *(_OWORD *)&qword_26ACB3F68;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)&qword_26ACB3F78;
  *(_OWORD *)&v27[16] = *(_OWORD *)&qword_26ACB3F88;
  *(_OWORD *)uint64_t v23 = static Image.fields;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_26ACB3F28;
  long long v24 = xmmword_26ACB3F38;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&qword_26ACB3F48;
  uint64_t v2 = static Image.fields;
  uint64_t v3 = unk_26ACB3F30;
  uint64_t v4 = qword_26ACB3F48;
  uint64_t v5 = *((void *)&xmmword_26ACB3F58 + 1);
  uint64_t v6 = qword_26ACB3F78;
  uint64_t v7 = unk_26ACB3F90;
  uint64_t v8 = qword_26ACB3FA8;
  uint64_t v9 = *((void *)&xmmword_26ACB3FB8 + 1);
  uint64_t v10 = qword_26ACB3FD8;
  uint64_t v22 = unk_26ACB3FF0;
  long long v12 = *(_OWORD *)&v23[8];
  long long v13 = xmmword_26ACB3F38;
  long long v14 = *(_OWORD *)&v25[8];
  long long v15 = *(_OWORD *)&qword_26ACB3F68;
  long long v16 = *(_OWORD *)&v27[8];
  long long v17 = xmmword_26ACB3F98;
  long long v18 = *(_OWORD *)&v29[8];
  long long v19 = *(_OWORD *)&qword_26ACB3FC8;
  long long v20 = *(_OWORD *)&v31[8];
  long long v21 = xmmword_26ACB3FF8;
  outlined retain of ((String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGFloat>>), (String, WritableKeyPath<Image, CRRegister<CRAssetOrData?>>), (String, WritableKeyPath<Image, CRRegister<String?>>), (String, WritableKeyPath<Image, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<Image, CRRegister<Data?>>), (String, WritableKeyPath<Image, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>>))((uint64_t)v23);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(void *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(void *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(void *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(void *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 200) = v20;
  *(void *)(a1 + 216) = v22;
  double result = *(double *)&v21;
  *(_OWORD *)(a1 + 224) = v21;
  return result;
}

uint64_t Image.init(url:imageWidth:assetManager:)@<X0>(uint64_t a1@<X0>, double a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double v28 = a2;
  uint64_t v29 = a4;
  int v31 = a3;
  uint64_t v30 = a5;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x270FA5388](v10 - 8);
  long long v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  long long v15 = (char *)&v28 - v14;
  uint64_t v16 = type metadata accessor for Image();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  long long v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v18);
  long long v21 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v22 = (uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v31)
  {
    Image.init(url:targetPageSize:assetManager:)((uint64_t)v9, 0.0, 0.0, 1, v29, (uint64_t)v15);
    (*v21)(a1, v6);
    int v26 = (*v22)(v15, 1, v16);
    long long v12 = v15;
    uint64_t v24 = v30;
    if (v26) {
      goto LABEL_3;
    }
LABEL_5:
    outlined init with take of Image((uint64_t)v12, (uint64_t)v20);
    outlined init with take of Image((uint64_t)v20, v24);
    uint64_t v25 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v24, v25, 1, v16);
  }
  Image.init(url:targetPageSize:assetManager:)((uint64_t)v9, v28, v28, 0, v29, (uint64_t)v12);
  (*v21)(a1, v6);
  int v23 = (*v22)(v12, 1, v16);
  uint64_t v24 = v30;
  if (!v23) {
    goto LABEL_5;
  }
LABEL_3:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for Image?);
  uint64_t v25 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v24, v25, 1, v16);
}

uint64_t Image.init(url:targetPageSize:assetManager:)@<X0>(uint64_t a1@<X0>, double a2@<X1>, double a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v102 = a5;
  int v98 = a4;
  double v97 = a3;
  double v96 = a2;
  uint64_t v111 = a1;
  uint64_t v109 = a6;
  uint64_t v110 = type metadata accessor for URL();
  uint64_t v103 = *(void *)(v110 - 8);
  MEMORY[0x270FA5388](v110);
  uint64_t v99 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v108);
  unint64_t v107 = (unint64_t)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v106 = (char *)&v94 - v9;
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v105);
  uint64_t v112 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v94 - v12;
  id v104 = (void (*)(char *, uint64_t, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v104);
  long long v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  double v18 = (char *)&v94 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v19);
  long long v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v94 - v23;
  uint64_t v25 = (int *)type metadata accessor for Image();
  uint64_t v101 = *((void *)v25 - 1);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  long long v114 = 0u;
  long long v115 = 0u;
  CRRegister.init(wrappedValue:)();
  double v28 = &v27[v25[5]];
  long long v114 = 0u;
  long long v115 = 0u;
  id v100 = v28;
  CRRegister.init(wrappedValue:)();
  *(void *)&long long v114 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v24, 1, 1, v29);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v24, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v18, 1, 1, v30);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v18, (uint64_t)v15, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  int v31 = &v27[v25[9]];
  uint64_t v32 = type metadata accessor for CRAssetOrData();
  id v104 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);
  v104(v13, 1, 1, v32);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v13, v112, &demangling cache variable for type metadata for CRAssetOrData?);
  lazy protocol witness table accessor for type CRAssetOrData? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  uint64_t v105 = (uint64_t)v13;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for CRAssetOrData?);
  long long v114 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?);
  CRRegister.init(wrappedValue:)();
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  uint64_t v34 = (uint64_t)v106;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v106, 1, 1, v33);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v34, v107, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v34, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  long long v114 = xmmword_20C8352B0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type String? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?, &demangling cache variable for type metadata for Data?);
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v35 = v111;
  CROrderedSet.init()();
  uint64_t v108 = (uint64_t)v25;
  uint64_t v36 = (NSURL *)v25[14];
  *(Class *)((char *)&v36->super.isa + (void)v27) = (Class)MEMORY[0x263F8EE80];
  URL._bridgeToObjectiveC()(v36);
  CFURLRef v38 = v37;
  uint64_t v39 = CGImageSourceCreateWithURL(v37, 0);

  if (!v39)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v35, v110);
    _s8PaperKit13CRAssetOrDataOWOhTm_0((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for Image);
    uint64_t v47 = 1;
    uint64_t v48 = v109;
    uint64_t v49 = v101;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v48, v47, 1, v108);
  }
  CFDictionaryRef v40 = CGImageSourceCopyPropertiesAtIndex(v39, 0, 0);
  uint64_t v95 = v27;
  id v94 = v31;
  if (v40)
  {
    CFDictionaryRef v41 = v40;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    uint64_t v42 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = (void *)*MEMORY[0x263F0F4F8];
    if ((v42 & 0xC000000000000001) != 0)
    {
      unint64_t v107 = v42 & 0xC000000000000001;
      id v44 = v43;
      swift_bridgeObjectRetain();
      uint64_t v45 = __CocoaDictionary.lookup(_:)();

      swift_bridgeObjectRelease();
      if (v45 && (*(void *)&long long v114 = v45, (swift_dynamicCast() & 1) != 0)) {
        uint64_t v46 = v113;
      }
      else {
        uint64_t v46 = 768;
      }
      uint64_t v51 = v110;
      uint64_t v49 = v101;
      char v53 = (void *)*MEMORY[0x263F0F4F0];
      swift_bridgeObjectRetain();
      id v54 = v53;
      uint64_t v55 = __CocoaDictionary.lookup(_:)();
      if (!v55)
      {

        swift_bridgeObjectRelease();
        uint64_t v57 = (void *)*MEMORY[0x263F0F4C8];
        uint64_t v50 = 768;
        uint64_t v35 = v111;
        goto LABEL_21;
      }
      uint64_t v56 = v55;
LABEL_12:
      swift_bridgeObjectRelease();

      *(void *)&long long v114 = v56;
      if (!swift_dynamicCast())
      {
        id v64 = (id)*MEMORY[0x263F0F4C8];
        uint64_t v50 = 768;
        uint64_t v35 = v111;
        if (!v107) {
          goto LABEL_34;
        }
LABEL_23:
        uint64_t v65 = v35;
        uint64_t v66 = __CocoaDictionary.lookup(_:)();
        if (v66)
        {
          uint64_t v67 = v66;
LABEL_37:
          swift_bridgeObjectRelease();
          id v73 = v99;

          *(void *)&long long v114 = v67;
          if (swift_dynamicCast())
          {
            if (v113 <= 4) {
              uint64_t v74 = v46;
            }
            else {
              uint64_t v74 = v50;
            }
            if (v113 > 4) {
              uint64_t v50 = v46;
            }
            uint64_t v46 = v74;
          }
          uint64_t v35 = v65;
          uint64_t v51 = v110;
          uint64_t v52 = v103;
          goto LABEL_48;
        }

        swift_bridgeObjectRelease();
        uint64_t v51 = v110;
        goto LABEL_46;
      }
      uint64_t v50 = v113;
      uint64_t v57 = (void *)*MEMORY[0x263F0F4C8];
      uint64_t v35 = v111;
      if (!v107) {
        goto LABEL_33;
      }
LABEL_21:
      id v64 = v57;
      goto LABEL_23;
    }
    if (*(void *)(v42 + 16))
    {
      id v58 = v43;
      swift_bridgeObjectRetain();
      unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v58);
      unint64_t v107 = 0;
      if (v60)
      {
        uint64_t v61 = v35;
        uint64_t v62 = *(void *)(*(void *)(v42 + 56) + 8 * v59);
        swift_unknownObjectRetain();

        swift_bridgeObjectRelease();
        *(void *)&long long v114 = v62;
        uint64_t v35 = v61;
        int v63 = swift_dynamicCast();
        uint64_t v51 = v110;
        uint64_t v49 = v101;
        if (v63)
        {
          uint64_t v46 = v113;
          if (!*(void *)(v42 + 16)) {
            goto LABEL_32;
          }
LABEL_28:
          id v68 = (void *)*MEMORY[0x263F0F4F0];
          swift_bridgeObjectRetain();
          id v54 = v68;
          unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v54);
          if (v70)
          {
            uint64_t v56 = *(void *)(*(void *)(v42 + 56) + 8 * v69);
            swift_unknownObjectRetain();
            goto LABEL_12;
          }

          swift_bridgeObjectRelease();
          uint64_t v57 = (void *)*MEMORY[0x263F0F4C8];
          uint64_t v50 = 768;
          uint64_t v35 = v111;
LABEL_33:
          id v64 = v57;
LABEL_34:
          if (*(void *)(v42 + 16))
          {
            unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v64);
            if (v72)
            {
              uint64_t v65 = v35;
              uint64_t v67 = *(void *)(*(void *)(v42 + 56) + 8 * v71);
              swift_unknownObjectRetain();
              goto LABEL_37;
            }
          }

          swift_bridgeObjectRelease();
LABEL_46:
          uint64_t v52 = v103;
          goto LABEL_47;
        }
        uint64_t v46 = 768;
        if (*(void *)(v42 + 16)) {
          goto LABEL_28;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        uint64_t v46 = 768;
        uint64_t v51 = v110;
        uint64_t v49 = v101;
        if (*(void *)(v42 + 16)) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v46 = 768;
      uint64_t v51 = v110;
      uint64_t v49 = v101;
    }
LABEL_32:
    uint64_t v57 = (void *)*MEMORY[0x263F0F4C8];
    uint64_t v50 = 768;
    goto LABEL_33;
  }
  uint64_t v46 = 768;
  uint64_t v50 = 768;
  uint64_t v51 = v110;
  uint64_t v52 = v103;
  uint64_t v49 = v101;
LABEL_47:
  id v73 = v99;
LABEL_48:
  if (v98)
  {
    double v85 = (double)v46;
    double v89 = (double)v50;
  }
  else
  {
    double v75 = v97 / (double)v50;
    double v76 = v96 / (double)v46;
    double v77 = v75 * 0.25;
    double v78 = v75 * 1.4;
    if (v78 >= v76) {
      double v78 = v96 / (double)v46;
    }
    if (v76 >= v77) {
      double v79 = v78;
    }
    else {
      double v79 = v77;
    }
    double v80 = v79 * (double)v46;
    double v81 = v79 * (double)v50;
    double v82 = floor(v80);
    double v83 = v80 - v82;
    double v84 = ceil(v80);
    if (v83 < 0.49) {
      double v85 = v82;
    }
    else {
      double v85 = v84;
    }
    double v86 = floor(v81);
    double v87 = v81 - v86;
    double v88 = ceil(v81);
    if (v87 < 0.49) {
      double v89 = v86;
    }
    else {
      double v89 = v88;
    }
  }
  uint64_t v90 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v73, v35, v51);
  swift_retain();
  uint64_t v91 = v105;
  CRAsset.init(url:coordinated:assetManager:)();
  swift_storeEnumTagMultiPayload();
  v104((char *)v91, 0, 1, v32);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v91, v112, &demangling cache variable for type metadata for CRAssetOrData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?(v91, &demangling cache variable for type metadata for CRAssetOrData?);
  long long v114 = 0uLL;
  *(double *)&long long v115 = v85;
  *((double *)&v115 + 1) = v89;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  long long v114 = 0uLL;
  *(double *)&long long v115 = v85;
  *((double *)&v115 + 1) = v89;
  uint64_t v92 = (uint64_t)v95;
  CRRegister.wrappedValue.setter();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v35, v51);
  uint64_t v48 = v109;
  outlined init with take of Image(v92, v109);
  uint64_t v47 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v48, v47, 1, v108);
}

id Image.init(docCamInfo:inScan:targetPageSize:assetManager:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v104 = a6;
  LODWORD(v93) = a5;
  uint64_t v89 = a4;
  uint64_t v88 = a3;
  uint64_t v102 = a7;
  *(void *)&long long v92 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v92);
  uint64_t v91 = (uint64_t)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v90 = (char *)&v88 - v11;
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v97);
  uint64_t v96 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v95 = (uint64_t)&v88 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v103 = (uint64_t)&v88 - v19;
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v88 - v25;
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v88 - v28;
  uint64_t v30 = type metadata accessor for Image();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v94 = (uint64_t)&v88 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v34 = MEMORY[0x270FA5388](v33);
  uint64_t v98 = (uint64_t)&v88 - v35;
  id v105 = a1;
  id result = objc_msgSend(a1, sel_fullImageUUID, v34);
  if (result)
  {
    CFURLRef v37 = result;
    id v101 = a2;
    id v38 = objc_msgSend(a2, sel_getImageURL_, result);

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    uint64_t v99 = v29;
    v39(v26, v29, v20);
    v39(v23, v26, v20);
    uint64_t v40 = v104;
    swift_retain();
    Image.init(url:targetPageSize:assetManager:)((uint64_t)v23, 0.0, 0.0, 1, v40, (uint64_t)v17);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v41 = v21 + 8;
    uint64_t v42 = v43;
    uint64_t v100 = v20;
    v43(v26, v20);
    id v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    uint64_t v45 = v30;
    if (v44(v17, 1, v30))
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Image?);
      uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
      uint64_t v47 = v103;
      v46(v103, 1, 1, v45);
    }
    else
    {
      uint64_t v48 = (uint64_t)v17;
      uint64_t v49 = v94;
      outlined init with take of Image(v48, v94);
      uint64_t v50 = v49;
      uint64_t v47 = v103;
      outlined init with take of Image(v50, v103);
      uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
      v46(v47, 0, 1, v45);
    }
    if (v44((char *)v47, 1, v45))
    {

      swift_release();
      v42(v99, v100);
      outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for Image?);
      uint64_t v51 = 1;
      uint64_t v52 = v102;
      return (id)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v46)(v52, v51, 1, v45);
    }
    uint64_t v103 = v41;
    uint64_t v53 = v98;
    outlined init with take of Image(v47, v98);
    id v54 = v105;
    __int16 v55 = (unsigned __int16)objc_msgSend(v105, sel_currentFilter);
    uint64_t v56 = v95;
    TaggedValue_1<>.init(docCameraFilter:)(v55, v95);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v56, v96, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?();
    CRRegister.init(wrappedValue:)();
    outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    id result = objc_msgSend(v54, sel_imageQuad);
    if (result)
    {
      uint64_t v57 = result;
      objc_msgSend(result, sel_topLeft);
      double v59 = v58;
      double v61 = v60;
      objc_msgSend(v57, sel_topRight);
      double v63 = v62;
      double v65 = v64;
      objc_msgSend(v57, sel_bottomLeft);
      double v67 = v66;
      double v69 = v68;
      objc_msgSend(v57, sel_bottomRight);
      double v71 = v70;
      double v73 = v72;

      double v106 = v59;
      double v107 = v61;
      v108.f64[0] = v63;
      v108.f64[1] = v65;
      double v109 = v67;
      double v110 = v69;
      double v111 = v71;
      double v112 = v73;
      type metadata accessor for CGRect(0);
      uint64_t v74 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
      lazy protocol witness table accessor for type Quad and conformance Quad();
      uint64_t v75 = (uint64_t)v90;
      uint64_t v97 = v74;
      TaggedValue_2.init(_:)();
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 0, 1, v76);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v75, v91, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v75, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      if (v93)
      {
      }
      else
      {
        uint64_t v95 = v88;
        uint64_t v94 = v89;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        uint64_t v96 = v31;
        CRRegister.wrappedValue.getter();
        double v77 = v108.f64[1];
        double v78 = v67 * v108.f64[0];
        double v79 = v69 * v108.f64[1];
        double v80 = v71 * v108.f64[0];
        double v106 = v59 * v108.f64[0];
        double v107 = v61 * v108.f64[1];
        v108.f64[0] = v63 * v108.f64[0];
        v108.f64[1] = v65 * v108.f64[1];
        double v109 = v78;
        double v110 = v79;
        double v111 = v80;
        double v112 = v73 * v77;
        *(double *)&long long v81 = Quad.perspectiveCorrectedSize.getter();
        long long v93 = v81;
        long long v92 = v82;
        CRRegister.wrappedValue.getter();
        double v83 = *(double *)&v94 / *(double *)&v92 * 1.4;
        if (v83 >= *(double *)&v95 / *(double *)&v93) {
          double v83 = *(double *)&v95 / *(double *)&v93;
        }
        if (*(double *)&v95 / *(double *)&v93 < *(double *)&v94 / *(double *)&v92 * 0.25) {
          double v83 = *(double *)&v94 / *(double *)&v92 * 0.25;
        }
        *(void *)&v84.f64[0] = v93;
        *(void *)&v84.f64[1] = v92;
        float64x2_t v85 = vmulq_n_f64(v84, v83);
        float64x2_t v86 = v84;
        float64x2_t v87 = vrndmq_f64(v85);
        double v106 = 0.0;
        double v107 = 0.0;
        float64x2_t v108 = vdivq_f64(vmulq_f64(v108, (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v85, v87), (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL)), (int8x16_t)vrndpq_f64(v85), (int8x16_t)v87)), v86);
        CRRegister.init(wrappedValue:)();
      }
      swift_release();
      uint64_t v52 = v102;
      v42(v99, v100);
      outlined init with take of Image(v53, v52);
      uint64_t v51 = 0;
      return (id)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v46)(v52, v51, 1, v45);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Image()
{
  return CRStruct_10_Final.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Image()
{
  return CRStruct_10_Final.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Image(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F179A0](a1, v2);
}

double protocol witness for static CRStruct_Base_10.fields.getter in conformance Image@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for fields != -1) {
    swift_once();
  }
  *(_OWORD *)uint64_t v31 = *(_OWORD *)&qword_26ACB3FD8;
  *(_OWORD *)&v31[16] = *(_OWORD *)&qword_26ACB3FE8;
  long long v32 = xmmword_26ACB3FF8;
  long long v28 = xmmword_26ACB3F98;
  *(_OWORD *)uint64_t v29 = *(_OWORD *)&qword_26ACB3FA8;
  *(_OWORD *)&v29[16] = xmmword_26ACB3FB8;
  long long v30 = *(_OWORD *)&qword_26ACB3FC8;
  *(_OWORD *)&v25[16] = xmmword_26ACB3F58;
  long long v26 = *(_OWORD *)&qword_26ACB3F68;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)&qword_26ACB3F78;
  *(_OWORD *)&v27[16] = *(_OWORD *)&qword_26ACB3F88;
  *(_OWORD *)uint64_t v23 = static Image.fields;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_26ACB3F28;
  long long v24 = xmmword_26ACB3F38;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&qword_26ACB3F48;
  uint64_t v2 = static Image.fields;
  uint64_t v3 = unk_26ACB3F30;
  uint64_t v4 = qword_26ACB3F48;
  uint64_t v5 = *((void *)&xmmword_26ACB3F58 + 1);
  uint64_t v6 = qword_26ACB3F78;
  uint64_t v7 = unk_26ACB3F90;
  uint64_t v8 = qword_26ACB3FA8;
  uint64_t v9 = *((void *)&xmmword_26ACB3FB8 + 1);
  uint64_t v10 = qword_26ACB3FD8;
  uint64_t v22 = unk_26ACB3FF0;
  long long v12 = *(_OWORD *)&v23[8];
  long long v13 = xmmword_26ACB3F38;
  long long v14 = *(_OWORD *)&v25[8];
  long long v15 = *(_OWORD *)&qword_26ACB3F68;
  long long v16 = *(_OWORD *)&v27[8];
  long long v17 = xmmword_26ACB3F98;
  long long v18 = *(_OWORD *)&v29[8];
  long long v19 = *(_OWORD *)&qword_26ACB3FC8;
  long long v20 = *(_OWORD *)&v31[8];
  long long v21 = xmmword_26ACB3FF8;
  outlined retain of ((String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGFloat>>), (String, WritableKeyPath<Image, CRRegister<CRAssetOrData?>>), (String, WritableKeyPath<Image, CRRegister<String?>>), (String, WritableKeyPath<Image, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<Image, CRRegister<Data?>>), (String, WritableKeyPath<Image, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>>))((uint64_t)v23);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(void *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(void *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(void *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(void *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 200) = v20;
  *(void *)(a1 + 216) = v22;
  double result = *(double *)&v21;
  *(_OWORD *)(a1 + 224) = v21;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance Image(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F17A10](a1, v2);
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance Image()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 56);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance Image())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRDT.context.getter in conformance Image(uint64_t a1)
{
  uint64_t v2 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F17CC8](a1, v2);
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F179B0](a1, a2, v4);
}

uint64_t protocol witness for CRDT.apply(_:) in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F179D8](a1, a2, v4);
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F17A08](a1, a2, v4);
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F179E0](a1, a2, a3, v6);
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F17A00](a1, a2, v4);
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F179E8](a1, a2, v4);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F179C8](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F179C0](a1, a2, v4);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F179A8](a1, a2, a3, v6);
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F17990](a1, a2, v4);
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance Image()
{
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return CRStruct_10_Final.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F17998](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  return MEMORY[0x270F179F0](a1, a2, v4);
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance Image()
{
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance Image()
{
  return CRDT.init(serializedData:)();
}

uint64_t Image.shared(_:)(uint64_t a1)
{
  return Image.shared(_:)(a1, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, MEMORY[0x263F32E58]);
}

{
  return Image.shared(_:)(a1, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, MEMORY[0x263F32E28]);
}

uint64_t Image.name.getter()
{
  return 0;
}

uint64_t Image.name.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*Image.name.modify(void *a1))()
{
  *a1 = 0;
  a1[1] = 0;
  return destroy for ImageFileSync.ImageFileSyncError;
}

uint64_t Image.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CRAssetOrData();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CRAssetOrData?);
    uint64_t v9 = type metadata accessor for CRAsset();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  else
  {
    outlined init with copy of CRAssetOrData((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s8PaperKit13CRAssetOrDataOWOhTm_0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      uint64_t v11 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
    }
    else
    {
      uint64_t v12 = type metadata accessor for CRAsset();
      uint64_t v13 = *(void *)(v12 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v5, v12);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
    }
    return _s8PaperKit13CRAssetOrDataOWOhTm_0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  }
}

uint64_t Image.renderedImage(in:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v8 = (char *)&async function pointer to specialized Image.renderedImage(in:)
     + async function pointer to specialized Image.renderedImage(in:);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v8)(v5, v1, v3, v4);
}

unint64_t lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance TaggedValue_1<A>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CRAssetOrData? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type CRAssetOrData? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CRAssetOrData? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRAssetOrData?);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(&lazy protocol witness table cache variable for type CRAssetOrData and conformance CRAssetOrData, (void (*)(uint64_t))type metadata accessor for CRAssetOrData);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRAssetOrData? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined retain of ((String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGFloat>>), (String, WritableKeyPath<Image, CRRegister<CRAssetOrData?>>), (String, WritableKeyPath<Image, CRRegister<String?>>), (String, WritableKeyPath<Image, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<Image, CRRegister<Data?>>), (String, WritableKeyPath<Image, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>>))(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Image();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

CGImageRef closure #1 in static Image.filterAndCrop(_:filter:crop:queue:)@<X0>(CGImage *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CGImageRef *a4@<X8>)
{
  CGImageRef result = specialized static Image._filterAndCrop(_:filter:crop:)(a1, a2, a3);
  *a4 = result;
  return result;
}

Swift::Int __swiftcall Image.quadImageMaxDimension(in:context:quad:)(__C::CGRect in, CGContextRef context, PaperKit::Quad *quad)
{
  CGFloat x = quad->topRight.x;
  CGFloat y = quad->topLeft.y;
  CGFloat v16 = quad->topLeft.x;
  CGFloat v4 = quad->topRight.y;
  CGFloat v5 = quad->bottomLeft.x;
  CGFloat v7 = quad->bottomLeft.y;
  CGFloat v6 = quad->bottomRight.x;
  CGFloat v8 = quad->bottomRight.y;
  CGRect v17 = CGContextConvertRectToDeviceSpace(context, (CGRect)in);
  double width = v17.size.width;
  double height = v17.size.height;
  v17.size.double width = 0.0;
  v17.size.double height = 0.0;
  v21.size.double width = 0.0;
  v21.size.double height = 0.0;
  v17.origin.CGFloat x = v5;
  v17.origin.CGFloat y = v7;
  v21.origin.CGFloat x = v6;
  v21.origin.CGFloat y = v8;
  CGRect v18 = CGRectUnion(v17, v21);
  v22.size.double width = 0.0;
  v22.size.double height = 0.0;
  v22.origin.CGFloat x = x;
  v22.origin.CGFloat y = v4;
  CGRect v19 = CGRectUnion(v18, v22);
  v23.size.double width = 0.0;
  v23.size.double height = 0.0;
  v23.origin.CGFloat y = y;
  v23.origin.CGFloat x = v16;
  CGRect v20 = CGRectUnion(v19, v23);
  double v11 = v20.size.width;
  double v12 = v20.size.height;
  Swift::Int result = CGRectIsEmpty(v20);
  if ((result & 1) == 0)
  {
    double width = width / v11;
    double height = height / v12;
  }
  if (width > height) {
    double v14 = width;
  }
  else {
    double v14 = height;
  }
  if ((~*(void *)&v14 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v14 < 9.22337204e18) {
    return (uint64_t)v14;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t Image.renderImage(in:isTopLevel:)(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 81) = a2;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  *(void *)(v3 + 200) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CRAssetOrData();
  *(void *)(v3 + 208) = v4;
  *(void *)(v3 + 216) = *(void *)(v4 - 8);
  *(void *)(v3 + 224) = swift_task_alloc();
  *(void *)(v3 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  *(void *)(v3 + 240) = swift_task_alloc();
  *(void *)(v3 + 248) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset?);
  *(void *)(v3 + 256) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CRAsset();
  *(void *)(v3 + 264) = v5;
  *(void *)(v3 + 272) = *(void *)(v5 - 8);
  *(void *)(v3 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(void *)(v3 + 288) = swift_task_alloc();
  *(void *)(v3 + 296) = swift_task_alloc();
  return MEMORY[0x270FA2498](Image.renderImage(in:isTopLevel:), 0, 0);
}

uint64_t Image.renderImage(in:isTopLevel:)()
{
  uint64_t v80 = v0;
  if (*(unsigned char *)(v0 + 81) == 1)
  {
    Image.pdfContentsBounds.getter();
    double v2 = v1;
    double v4 = v3;
    double v6 = v5;
    double v8 = v7;
    uint64_t v9 = 0;
  }
  else
  {
    type metadata accessor for Image();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    double v2 = *(double *)(v0 + 136);
    double v4 = *(double *)(v0 + 144);
    double v6 = *(double *)(v0 + 152);
    double v8 = *(double *)(v0 + 160);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    uint64_t v9 = *(void *)(v0 + 168);
  }
  *(double *)(v0 + 328) = v6;
  *(double *)(v0 + 336) = v8;
  *(double *)(v0 + 312) = v2;
  *(double *)(v0 + 320) = v4;
  *(void *)(v0 + 304) = v9;
  specialized CanvasElement.maxDimensionInPixels(_:in:)(*(CGContext **)(v0 + 184), v2, v4, v6, v8);
  Swift::Int v11 = v10;
  int Type = CGContextGetType();
  if (Type != 1 && Type != 6)
  {
    uint64_t v13 = *(void *)(v0 + 296);
    type metadata accessor for Image();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.getter();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    uint64_t v15 = *(void *)(v14 - 8);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
    uint64_t v17 = *(void *)(v0 + 296);
    if (v16 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 296), (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    }
    else
    {
      TaggedValue_2.tagged2.getter();
      CGFloat v18 = *(double *)(v0 + 16);
      CGFloat v19 = *(double *)(v0 + 24);
      CGFloat v20 = *(double *)(v0 + 32);
      CGFloat v21 = *(double *)(v0 + 40);
      CGFloat v77 = *(double *)(v0 + 56);
      CGFloat v78 = *(double *)(v0 + 48);
      CGFloat v75 = *(double *)(v0 + 72);
      CGFloat v76 = *(double *)(v0 + 64);
      char v22 = *(unsigned char *)(v0 + 80);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
      if ((v22 & 1) == 0)
      {
        CGRect v23 = *(CGContext **)(v0 + 184);
        quad.topLeft.CGFloat x = v18;
        quad.topLeft.CGFloat y = v19;
        quad.topRight.CGFloat x = v20;
        quad.topRight.CGFloat y = v21;
        quad.bottomLeft.CGFloat x = v78;
        quad.bottomLeft.CGFloat y = v77;
        quad.bottomRight.CGFloat x = v76;
        quad.bottomRight.CGFloat y = v75;
        v82.origin.CGFloat x = v2;
        v82.origin.CGFloat y = v4;
        v82.size.double width = v6;
        v82.size.double height = v8;
        Swift::Int v11 = Image.quadImageMaxDimension(in:context:quad:)(v82, v23, &quad);
      }
    }
  }
  uint64_t v24 = *(void *)(v0 + 248);
  uint64_t v25 = *(void *)(v0 + 208);
  uint64_t v26 = *(void *)(v0 + 216);
  *(void *)(v0 + 344) = type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v27(v24, 1, v25) == 1)
  {
    uint64_t v28 = *(void *)(v0 + 264);
    uint64_t v29 = *(void *)(v0 + 272);
    uint64_t v30 = *(void *)(v0 + 256);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 248), &demangling cache variable for type metadata for CRAssetOrData?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v30, 1, 1, v28);
    goto LABEL_16;
  }
  outlined init with copy of CRAssetOrData(*(void *)(v0 + 248), *(void *)(v0 + 232), (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s8PaperKit13CRAssetOrDataOWOhTm_0(*(void *)(v0 + 232), (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    uint64_t v31 = 1;
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 272) + 32))(*(void *)(v0 + 256), *(void *)(v0 + 232), *(void *)(v0 + 264));
    uint64_t v31 = 0;
  }
  uint64_t v32 = *(void *)(v0 + 264);
  uint64_t v33 = *(void *)(v0 + 272);
  uint64_t v35 = *(void *)(v0 + 248);
  uint64_t v34 = *(void *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v34, v31, 1, v32);
  _s8PaperKit13CRAssetOrDataOWOhTm_0(v35, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v32) == 1)
  {
LABEL_16:
    uint64_t v36 = *(void *)(v0 + 240);
    uint64_t v37 = *(void *)(v0 + 208);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(void *)(v0 + 256), &demangling cache variable for type metadata for CRAsset?);
    CRRegister.wrappedValue.getter();
    unsigned int v38 = v27(v36, 1, v37);
    uint64_t v39 = *(void *)(v0 + 240);
    if (v38 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for CRAssetOrData?);
      goto LABEL_40;
    }
    outlined init with copy of CRAssetOrData(v39, *(void *)(v0 + 224), (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v41 = *(void *)(v0 + 240);
    uint64_t v42 = *(uint64_t **)(v0 + 224);
    if (EnumCaseMultiPayload != 1)
    {
      _s8PaperKit13CRAssetOrDataOWOhTm_0((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      _s8PaperKit13CRAssetOrDataOWOhTm_0(v41, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
      goto LABEL_40;
    }
    uint64_t v43 = *v42;
    unint64_t v44 = v42[1];
    uint64_t v45 = v42[2];
    unint64_t v46 = v42[3];
    _s8PaperKit13CRAssetOrDataOWOhTm_0(*(void *)(v0 + 240), (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C832C20;
    uint64_t v48 = (void *)*MEMORY[0x263F0F600];
    *(void *)(inited + 32) = *MEMORY[0x263F0F600];
    *(unsigned char *)(inited + 40) = 0;
    id v49 = v48;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CFDataRef v51 = Data._bridgeToObjectiveC()().super.isa;
    CGImageSourceRef v52 = CGImageSourceCreateWithData(v51, isa);

    CGImageRef v53 = specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(v52, v43, v44, v11, 0);
    outlined consume of Data._Representation(v43, v44);
    outlined consume of Data._Representation(v45, v46);
    if (!v53)
    {
LABEL_40:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v74 = *(uint64_t (**)(void))(v0 + 8);
      return v74();
    }
    id v54 = v53;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
    CRRegister.wrappedValue.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.getter();
    if (one-time initialization token for defaultFilterQueue != -1) {
      swift_once();
    }
    uint64_t v55 = *(void *)(v0 + 288);
    uint64_t v56 = *(void *)(v0 + 200);
    uint64_t v57 = (void *)defaultFilterQueue;
    double v58 = (void *)swift_task_alloc();
    v58[2] = v54;
    v58[3] = v56;
    v58[4] = v55;
    type metadata accessor for CGImageRef(0);
    id v59 = v57;
    OS_dispatch_queue.sync<A>(execute:)();

    swift_task_dealloc();
    double v60 = *(void **)(v0 + 176);
    outlined destroy of StocksKitCurrencyCache.Provider?(v55, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    double v61 = v60;
    int v62 = CGContextGetType();
    if (v62 == 6 || (CGImageRef v63 = v61, v62 == 1))
    {
      uint64_t v64 = CGImageRef.jpegData(compressionQuality:)(0.9);
      CGImageRef v63 = v61;
      if (v65 >> 60 != 15)
      {
        uint64_t v66 = v64;
        unint64_t v67 = v65;
        CFDataRef v68 = Data._bridgeToObjectiveC()().super.isa;
        double v69 = CGDataProviderCreateWithCFData(v68);

        if (v69)
        {
          CGImageRef v63 = CGImageCreateWithJPEGDataProvider(v69, 0, 0, kCGRenderingIntentDefault);
          outlined consume of Data?(v66, v67);

          if (!v63) {
            goto LABEL_34;
          }
        }
        else
        {
          outlined consume of Data?(v66, v67);
          CGImageRef v63 = v61;
        }
      }
    }

    double v61 = v63;
LABEL_34:
    if (*(unsigned char *)(v0 + 81))
    {
      uint64_t v72 = 0;
      char v73 = 1;
    }
    else
    {
      if (one-time initialization token for imageCornerRadius == -1)
      {
        char v73 = 0;
      }
      else
      {
        swift_once();
        char v73 = *(unsigned char *)(v0 + 81);
      }
      uint64_t v72 = static UIConstants.imageCornerRadius;
    }
    specialized CanvasElement.renderImage(_:frame:rotation:cornerRadius:in:)(v61, v72, v73, *(CGContext **)(v0 + 184), *(CGFloat *)(v0 + 312), *(CGFloat *)(v0 + 320), *(CGFloat *)(v0 + 328), *(CGFloat *)(v0 + 336), *(double *)(v0 + 304));

    goto LABEL_40;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 272) + 32))(*(void *)(v0 + 280), *(void *)(v0 + 256), *(void *)(v0 + 264));
  double v70 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v70;
  *double v70 = v0;
  v70[1] = Image.renderImage(in:isTopLevel:);
  return CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(v11, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  CGImage *v9;
  int Type;
  CGImageRef v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  CFDataRef isa;
  CGDataProvider *v17;
  uint64_t v18;
  char v19;
  uint64_t (*v20)(void);
  uint64_t v22;

  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
  double v1 = *(void **)(v0 + 360);
  if (v1)
  {
    double v2 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
    CRRegister.wrappedValue.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.getter();
    if (one-time initialization token for defaultFilterQueue != -1) {
      swift_once();
    }
    double v3 = *(void *)(v0 + 288);
    double v4 = *(void *)(v0 + 200);
    double v5 = (void *)defaultFilterQueue;
    double v6 = (void *)swift_task_alloc();
    _OWORD v6[2] = v2;
    v6[3] = v4;
    v6[4] = v3;
    type metadata accessor for CGImageRef(0);
    double v7 = v5;
    OS_dispatch_queue.sync<A>(execute:)();

    swift_task_dealloc();
    double v8 = *(void **)(v0 + 176);
    outlined destroy of StocksKitCurrencyCache.Provider?(v3, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    uint64_t v9 = v8;
    int Type = CGContextGetType();
    if (Type == 6 || (Swift::Int v11 = v9, Type == 1))
    {
      double v12 = CGImageRef.jpegData(compressionQuality:)(0.9);
      Swift::Int v11 = v9;
      if (v13 >> 60 != 15)
      {
        uint64_t v14 = v12;
        uint64_t v15 = v13;
        CFDictionaryRef isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v17 = CGDataProviderCreateWithCFData(isa);

        if (v17)
        {
          Swift::Int v11 = CGImageCreateWithJPEGDataProvider(v17, 0, 0, kCGRenderingIntentDefault);
          outlined consume of Data?(v14, v15);

          if (!v11)
          {
            if (*(unsigned char *)(v0 + 81))
            {
LABEL_10:
              CGFloat v18 = 0;
              CGFloat v19 = 1;
LABEL_16:
              specialized CanvasElement.renderImage(_:frame:rotation:cornerRadius:in:)(v9, v18, v19, *(CGContext **)(v0 + 184), *(CGFloat *)(v0 + 312), *(CGFloat *)(v0 + 320), *(CGFloat *)(v0 + 328), *(CGFloat *)(v0 + 336), *(double *)(v0 + 304));

              goto LABEL_17;
            }
LABEL_13:
            if (one-time initialization token for imageCornerRadius == -1)
            {
              CGFloat v19 = 0;
            }
            else
            {
              swift_once();
              CGFloat v19 = *(unsigned char *)(v0 + 81);
            }
            CGFloat v18 = static UIConstants.imageCornerRadius;
            goto LABEL_16;
          }
        }
        else
        {
          outlined consume of Data?(v14, v15);
          Swift::Int v11 = v9;
        }
      }
    }

    uint64_t v9 = v11;
    if (*(unsigned char *)(v0 + 81)) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_17:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  CGFloat v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t Image.renderImage(in:isTopLevel:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](Image.renderImage(in:isTopLevel:), 0, 0);
}

void specialized CanvasElement.maxDimensionInPixels(_:in:)(CGContext *a1, double a2, double a3, double a4, double a5)
{
  CGRect v12 = CGContextConvertRectToDeviceSpace(a1, *(CGRect *)&a2);
  CGFloat x = v12.origin.x;
  CGFloat y = v12.origin.y;
  CGFloat width = v12.size.width;
  CGFloat height = v12.size.height;
  int Type = CGContextGetType();
  if (Type != 6 && Type != 1)
  {
    v13.origin.CGFloat x = x;
    v13.origin.CGFloat y = y;
    v13.size.CGFloat width = width;
    v13.size.CGFloat height = height;
    double v10 = CGRectGetWidth(v13);
    v14.origin.CGFloat x = x;
    v14.origin.CGFloat y = y;
    v14.size.CGFloat width = width;
    v14.size.CGFloat height = height;
    double v11 = CGRectGetHeight(v14);
    if (v10 > v11) {
      double v11 = v10;
    }
    if ((~*(void *)&v11 & 0x7FF0000000000000) != 0)
    {
      if (v11 > -9.22337204e18)
      {
        if (v11 < 9.22337204e18) {
          return;
        }
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

void specialized CanvasElement.renderImage(_:frame:rotation:cornerRadius:in:)(CGImage *a1, uint64_t a2, char a3, CGContext *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  *(double *)&long long v60 = a9;
  uint64_t v17 = type metadata accessor for CGPathFillRule();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  CGFloat v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGContextSaveGState(a4);
  int64_t Width = CGImageGetWidth(a1);
  double Height = (double)(uint64_t)CGImageGetHeight(a1);
  v64.origin.CGFloat x = a5;
  v64.origin.CGFloat y = a6;
  v64.size.CGFloat width = a7;
  v64.size.CGFloat height = a8;
  double v23 = CGRectGetWidth(v64);
  v65.origin.CGFloat x = 0.0;
  v65.origin.CGFloat y = 0.0;
  v65.size.CGFloat width = (double)Width;
  CGFloat v59 = (double)Width;
  v65.size.CGFloat height = Height;
  double v24 = v23 / CGRectGetWidth(v65);
  v66.origin.CGFloat x = a5;
  v66.origin.CGFloat y = a6;
  v66.size.CGFloat width = a7;
  v66.size.CGFloat height = a8;
  double v25 = CGRectGetHeight(v66);
  v67.origin.CGFloat x = 0.0;
  v67.origin.CGFloat y = 0.0;
  v67.size.CGFloat width = (double)Width;
  v67.size.CGFloat height = Height;
  double v26 = v25 / CGRectGetHeight(v67);
  if (v26 >= v24) {
    double v27 = v24;
  }
  else {
    double v27 = v26;
  }
  v68.origin.CGFloat x = a5;
  v68.origin.CGFloat y = a6;
  v68.size.CGFloat width = a7;
  v68.size.CGFloat height = a8;
  double MidX = CGRectGetMidX(v68);
  v54.origin.CGFloat x = a5;
  v69.origin.CGFloat x = a5;
  v54.origin.CGFloat y = a6;
  v69.origin.CGFloat y = a6;
  v54.size.CGFloat width = a7;
  v69.size.CGFloat width = a7;
  v54.size.CGFloat height = a8;
  v69.size.CGFloat height = a8;
  CGFloat MidY = CGRectGetMidY(v69);
  CGFloat v30 = v27 * v59;
  CGFloat v31 = v27 * Height;
  CGFloat v32 = MidX - v30 * 0.5;
  CGFloat v33 = MidY - v31 * 0.5;
  CGFloat v57 = v31;
  CGFloat v59 = v32 - v30 * 0.0;
  CGFloat v58 = v33 - v31 * 0.0;
  v70.origin.CGFloat x = v32;
  v70.origin.CGFloat y = v33;
  v70.size.CGFloat width = v30;
  v70.size.CGFloat height = v31;
  double v34 = CGRectGetMidX(v70);
  v71.origin.CGFloat x = v32;
  v71.origin.CGFloat y = v33;
  v71.size.CGFloat width = v30;
  v71.size.CGFloat height = v31;
  double v35 = CGRectGetMidY(v71);
  CGAffineTransformMakeRotation(&t1, *(CGFloat *)&v60);
  long long v60 = *(_OWORD *)&t1.a;
  long long v56 = *(_OWORD *)&t1.c;
  tCGFloat y = t1.ty;
  tCGFloat x = t1.tx;
  CGAffineTransformMakeTranslation(&t1, -v34, -v35);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v42 = t1.tx;
  CGFloat v41 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v60;
  *(_OWORD *)&t2.CGFloat c = v56;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v61, &t1, &t2);
  long long v60 = *(_OWORD *)&v61.a;
  long long v56 = *(_OWORD *)&v61.c;
  CGFloat v43 = v61.tx;
  tCGFloat x = v61.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = v42;
  t1.tCGFloat y = v41;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v60;
  *(_OWORD *)&t1.CGFloat c = v56;
  t1.tCGFloat x = v43;
  t1.tCGFloat y = tx;
  CGAffineTransformConcat(&v61, &t1, &t2);
  t1.CGFloat a = v30;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = v57;
  t1.tCGFloat x = v59;
  t1.tCGFloat y = v58;
  CGAffineTransform t2 = v61;
  CGAffineTransformConcat(&v61, &t1, &t2);
  CGAffineTransform t1 = v61;
  CGContextConcatCTM(a4, &t1);
  v72.origin.CGFloat x = 0.0;
  v72.origin.CGFloat y = 0.0;
  v72.size.CGFloat width = 1.0;
  v72.size.CGFloat height = 1.0;
  double MinY = CGRectGetMinY(v72);
  v73.origin.CGFloat x = 0.0;
  v73.origin.CGFloat y = 0.0;
  v73.size.CGFloat width = 1.0;
  v73.size.CGFloat height = 1.0;
  CGFloat MaxY = CGRectGetMaxY(v73);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  t2.CGFloat b = 0.0;
  t2.CGFloat c = 0.0;
  t2.CGFloat a = 1.0;
  *(_OWORD *)&t2.CGFloat d = xmmword_20C8340F0;
  t2.tCGFloat y = MinY + MaxY;
  CGAffineTransformConcat(&v61, &t1, &t2);
  CGAffineTransform t1 = v61;
  CGContextConcatCTM(a4, &t1);
  if ((a3 & 1) == 0)
  {
    CGFloat x = v54.origin.x;
    CGFloat y = v54.origin.y;
    CGFloat v48 = v54.size.width;
    CGFloat v49 = v54.size.height;
    CGFloat v50 = *(double *)&a2 / CGRectGetWidth(v54);
    v74.origin.CGFloat x = x;
    v74.origin.CGFloat y = y;
    v74.size.CGFloat width = v48;
    v74.size.CGFloat height = v49;
    CGFloat v51 = *(double *)&a2 / CGRectGetHeight(v74);
    v75.origin.CGFloat x = 0.0;
    v75.origin.CGFloat y = 0.0;
    v75.size.CGFloat width = 1.0;
    v75.size.CGFloat height = 1.0;
    CGImageSourceRef v52 = CGPathCreateWithRoundedRect(v75, v50, v51, 0);
    CGContextAddPath(a4, v52);

    (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, *MEMORY[0x263F00040], v17);
    CGContextRef.clip(using:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  v76.origin.CGFloat x = 0.0;
  v76.origin.CGFloat y = 0.0;
  v76.size.CGFloat width = 1.0;
  v76.size.CGFloat height = 1.0;
  CGContextRef.draw(_:in:byTiling:)(a1, v76, 0);
  CGContextRestoreGState(a4);
}

uint64_t Image.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 312) = a5;
  *(void *)(v7 + 320) = a6;
  *(void *)(v7 + 296) = a1;
  *(void *)(v7 + 304) = a3;
  *(unsigned char *)(v7 + 91) = *(unsigned char *)a4;
  *(unsigned char *)(v7 + 92) = *(unsigned char *)(a4 + 1);
  *(unsigned char *)(v7 + 93) = *(unsigned char *)(a4 + 2);
  uint64_t v8 = *(void *)(a4 + 8);
  *(void *)(v7 + 328) = v6;
  *(void *)(v7 + 336) = v8;
  *(unsigned char *)(v7 + 94) = *(unsigned char *)(a4 + 16);
  long long v9 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(v7 + 344) = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v7 + 360) = v9;
  *(unsigned char *)(v7 + 95) = *(unsigned char *)(a4 + 56);
  *(void *)(v7 + 376) = *(void *)(a4 + 64);
  *(unsigned char *)(v7 + 400) = *(unsigned char *)(a4 + 72);
  *(unsigned char *)(v7 + 401) = *(unsigned char *)(a4 + 73);
  *(unsigned char *)(v7 + 402) = *(unsigned char *)(a4 + 74);
  return MEMORY[0x270FA2498](Image.render<A>(in:id:capsule:options:), 0, 0);
}

uint64_t Image.render<A>(in:id:capsule:options:)()
{
  uint64_t v27 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 94);
  CGContextSaveGState(*(CGContextRef *)(v0 + 296));
  if (v1 == 1)
  {
    double v2 = *(CGContext **)(v0 + 296);
    type metadata accessor for Image();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    CGFloat v3 = *(double *)(v0 + 288);
    Image.pdfContentsBounds.getter();
    double v5 = v4;
    double v7 = v6;
    CGFloat v24 = v9;
    CGFloat v25 = v8;
    CGAffineTransformMakeRotation(&v26, v3);
    CGFloat a = v26.a;
    CGFloat b = v26.b;
    CGFloat c = v26.c;
    CGFloat d = v26.d;
    *(CGFloat *)(v0 + 96) = v26.a;
    tCGFloat x = v26.tx;
    tCGFloat y = v26.ty;
    *(CGFloat *)(v0 + 104) = b;
    *(CGFloat *)(v0 + 112) = c;
    *(CGFloat *)(v0 + 120) = d;
    *(CGFloat *)(v0 + 128) = tx;
    *(CGFloat *)(v0 + 136) = ty;
    v29.origin.CGFloat x = v5;
    v29.origin.CGFloat y = v7;
    v29.size.CGFloat height = v24;
    v29.size.CGFloat width = v25;
    CGRect v30 = CGRectApplyAffineTransform(v29, (CGAffineTransform *)(v0 + 96));
    CGAffineTransformMakeTranslation(&v26, v5 - v30.origin.x, v7 - v30.origin.y);
    long long v16 = *(_OWORD *)&v26.c;
    long long v17 = *(_OWORD *)&v26.tx;
    *(_OWORD *)(v0 + 192) = *(_OWORD *)&v26.a;
    *(CGFloat *)(v0 + 144) = a;
    *(CGFloat *)(v0 + 152) = b;
    *(CGFloat *)(v0 + 160) = c;
    *(CGFloat *)(v0 + 168) = d;
    *(CGFloat *)(v0 + 176) = tx;
    *(CGFloat *)(v0 + 184) = ty;
    *(_OWORD *)(v0 + 208) = v16;
    *(_OWORD *)(v0 + 224) = v17;
    CGAffineTransformConcat(&v26, (CGAffineTransform *)(v0 + 144), (CGAffineTransform *)(v0 + 192));
    long long v18 = *(_OWORD *)&v26.c;
    long long v19 = *(_OWORD *)&v26.tx;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)&v26.a;
    *(_OWORD *)(v0 + 256) = v18;
    *(_OWORD *)(v0 + 272) = v19;
    CGContextConcatCTM(v2, (CGAffineTransform *)(v0 + 240));
  }
  CGFloat v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v20;
  *CGFloat v20 = v0;
  v20[1] = Image.render<A>(in:id:capsule:options:);
  char v21 = *(unsigned char *)(v0 + 94);
  uint64_t v22 = *(void *)(v0 + 296);
  return Image.renderImage(in:isTopLevel:)(v22, v21);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](Image.render<A>(in:id:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  long long v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;

  long long v19 = *(unsigned char *)(v0 + 401);
  CGFloat v20 = *(unsigned char *)(v0 + 402);
  long long v18 = *(unsigned char *)(v0 + 400);
  int v1 = *(void *)(v0 + 368);
  long long v17 = *(void *)(v0 + 376);
  double v2 = *(unsigned char *)(v0 + 95);
  CGFloat v3 = *(void *)(v0 + 360);
  long long v16 = *(_OWORD *)(v0 + 344);
  double v4 = *(unsigned char *)(v0 + 94);
  double v5 = *(void *)(v0 + 336);
  double v6 = *(unsigned char *)(v0 + 93);
  double v7 = *(unsigned char *)(v0 + 92);
  double v8 = *(unsigned char *)(v0 + 91);
  CGContextRestoreGState(*(CGContextRef *)(v0 + 296));
  *(unsigned char *)(v0 + 16) = v8;
  *(unsigned char *)(v0 + 17) = v7;
  *(unsigned char *)(v0 + 18) = v6;
  *(void *)(v0 + 24) = v5;
  *(unsigned char *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 40) = v16;
  *(void *)(v0 + 56) = v3;
  *(void *)(v0 + 64) = v1;
  *(unsigned char *)(v0 + 72) = v2;
  *(void *)(v0 + 80) = v17;
  *(unsigned char *)(v0 + 88) = v18;
  *(unsigned char *)(v0 + 89) = v19;
  *(unsigned char *)(v0 + 90) = v20;
  double v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v9;
  double v10 = type metadata accessor for Image();
  *double v9 = v0;
  v9[1] = Image.render<A>(in:id:capsule:options:);
  double v11 = *(void *)(v0 + 320);
  CGRect v12 = *(void *)(v0 + 304);
  CGRect v13 = *(void *)(v0 + 312);
  CGRect v14 = *(void *)(v0 + 296);
  return ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(v14, v12, (_OWORD *)(v0 + 16), v10, v13, (uint64_t)&protocol witness table for Image, v11);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  CGFloat v3 = *v0;
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void Image.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v147 = a8;
  uint64_t v149 = a7;
  uint64_t v148 = a5;
  uint64_t v142 = a4;
  v145 = (char *)a2;
  uint64_t v143 = type metadata accessor for CRAssetOrData();
  uint64_t v146 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  unsigned int v126 = (uint64_t *)((char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v12 - 8);
  v144 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
  uint64_t v117 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v120 = (uint64_t)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v122 = (char *)&v111 - v17;
  uint64_t v18 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v18 - 8);
  long long v114 = (char *)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>);
  uint64_t v121 = *(void *)(v131 - 8);
  MEMORY[0x270FA5388](v131);
  uint64_t v130 = (char *)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v119 = *(void *)(v129 - 8);
  MEMORY[0x270FA5388](v129);
  uint64_t v128 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  uint64_t v115 = *(void *)(v22 - 8);
  uint64_t v23 = *(void *)(v115 + 64);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v116 = (uint64_t)&v111 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v127 = (uint64_t)&v111 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v111 - v27;
  uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v150 = *(void *)(v151 - 8);
  MEMORY[0x270FA5388](v151);
  uint64_t v113 = (char *)&v111 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  unint64_t v132 = (char *)&v111 - v31;
  uint64_t v32 = type metadata accessor for Date();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  double v35 = (char *)&v111 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v125 = *a1;
  CGFloat v141 = *(double *)a6;
  CGFloat v140 = *(double *)(a6 + 8);
  CGFloat v139 = *(double *)(a6 + 16);
  CGFloat v138 = *(double *)(a6 + 24);
  CGFloat v137 = *(double *)(a6 + 32);
  CGFloat v136 = *(double *)(a6 + 40);
  uint64_t v135 = *(void *)(a6 + 48);
  uint64_t v134 = *(void *)(a6 + 56);
  uint64_t v133 = *(void *)(a6 + 64);
  int v36 = *(unsigned __int8 *)(a6 + 74);
  int v37 = *(unsigned __int16 *)(a6 + 72);
  type metadata accessor for CanvasElementPDFAnnotation();
  unsigned int v38 = a3;
  uint64_t v39 = swift_dynamicCastClass();
  if (!v39) {
    return;
  }
  uint64_t v40 = (char *)v39;
  int v124 = v37 | (v36 << 16);
  *(unsigned char *)(v39 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 2;
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;
  id v44 = v38;
  uint64_t v45 = v41;
  uint64_t v46 = v152;
  uint64_t v47 = (void *)MEMORY[0x21054D080](v45, v43);
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_setType_, v47);

  specialized CanvasElement.coordinateSpace.getter(&v159);
  CGAffineTransform v153 = v159;
  v160.origin.CGFloat x = 0.0;
  v160.origin.double y = 0.0;
  v160.size.CGFloat width = 1.0;
  v160.size.CGFloat height = 1.0;
  CGRect v161 = CGRectApplyAffineTransform(v160, &v153);
  CGFloat x = v161.origin.x;
  double y = v161.origin.y;
  CGFloat width = v161.size.width;
  CGFloat height = v161.size.height;
  id v52 = objc_msgSend(v40, sel_page);
  if (v52)
  {
    uint64_t v53 = v52;
    objc_msgSend(v52, sel_boundsForBox_, 0);
    double v55 = v54;
    double v57 = v56;

    v162.origin.CGFloat x = x;
    v162.origin.double y = y;
    v162.size.CGFloat width = width;
    v162.size.CGFloat height = height;
    CGFloat MinX = CGRectGetMinX(v162);
    v163.origin.CGFloat x = x;
    v163.origin.double y = y;
    v163.size.CGFloat width = width;
    v163.size.CGFloat height = height;
    double v59 = v57 + v55 + v55 - CGRectGetMaxY(v163);
    v164.origin.CGFloat x = x;
    v164.origin.double y = y;
    v164.size.CGFloat width = width;
    v164.size.CGFloat height = height;
    CGFloat v60 = CGRectGetWidth(v164);
    v165.origin.CGFloat x = x;
    v165.origin.double y = y;
    v165.size.CGFloat width = width;
    v165.size.CGFloat height = height;
    CGFloat height = CGRectGetHeight(v165);
    CGFloat width = v60;
    CGFloat x = MinX;
    double y = v59;
  }
  id v61 = v44;
  v166.origin.CGFloat x = x;
  v166.origin.double y = y;
  v166.size.CGFloat width = width;
  v166.size.CGFloat height = height;
  CGRect v167 = CGRectIntegral(v166);
  objc_msgSend(v40, sel_setBounds_, v167.origin.x, v167.origin.y, v167.size.width, v167.size.height);

  id v62 = v61;
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
  objc_msgSend(v40, sel_setModificationDate_, isa);

  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v145, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  uint64_t v64 = v150;
  uint64_t v65 = v151;
  int v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v150 + 48))(v28, 1, v151);
  id v123 = v62;
  if (v66 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    uint64_t v67 = (uint64_t)v144;
    uint64_t v68 = v143;
    uint64_t v69 = v147;
    uint64_t v70 = v149;
    uint64_t v71 = v148;
  }
  else
  {
    CGRect v72 = v132;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v132, v28, v65);
    unint64_t v73 = v125;
    uint64_t v74 = v125;
    uint64_t v70 = v149;
    uint64_t v71 = v148;
    if (v125 >> 62)
    {
      if (v125 >> 62 != 1)
      {
        (*(void (**)(char *, uint64_t))(v64 + 8))(v72, v65);
        uint64_t v46 = v152;
        uint64_t v67 = (uint64_t)v144;
        uint64_t v68 = v143;
        uint64_t v69 = v147;
        goto LABEL_11;
      }
      uint64_t v74 = v125 & 0x3FFFFFFFFFFFFFFFLL;
    }
    uint64_t v112 = v74;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v113, v72, v65);
    outlined copy of PaperDocument.PDFDocumentUse(v73);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    CGRect v75 = v128;
    CRRegister.init(_:)();
    uint64_t v76 = static CRKeyPath.unique.getter();
    uint64_t v77 = v64;
    v145 = (char *)&v111;
    MEMORY[0x270FA5388](v76);
    uint64_t v78 = v65;
    uint64_t v79 = v147;
    *(&v111 - 6) = v70;
    *(&v111 - 5) = v79;
    *(&v111 - 4) = (uint64_t)v72;
    *(&v111 - 3) = v71;
    *(&v111 - 2) = (uint64_t)v75;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
    uint64_t v80 = v130;
    Capsule<>.init(id:initClosure:)();
    uint64_t v81 = v121;
    uint64_t v82 = (uint64_t)v122;
    uint64_t v83 = v131;
    (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v122, v80, v131);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v82, 0, 1, v83);
    float64x2_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
    v145 = v40;
    uint64_t v85 = v127;
    v84(v127, 1, 1, v78);
    uint64_t v86 = v120;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v82, v120, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
    uint64_t v87 = v116;
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v85, v116, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    unint64_t v88 = (*(unsigned __int8 *)(v117 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
    unint64_t v89 = (v118 + v88 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v90 = (*(unsigned __int8 *)(v115 + 80) + v89 + 8) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
    uint64_t v91 = v90 + v23;
    uint64_t v92 = swift_allocObject();
    unint64_t v93 = (v91 & 0xFFFFFFFFFFFFFFF8) + v92;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v86, v92 + v88, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
    *(void *)(v92 + v89) = v112;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v87, v92 + v90, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    *(unsigned char *)(v92 + v91) = 1;
    *(void *)(v93 + 8) = 0;
    *(void *)(v93 + 16) = 0;
    uint64_t v71 = v148;
    uint64_t v94 = (void (**)(void *))&v145[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    uint64_t v95 = *(void *)&v145[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    *uint64_t v94 = partial apply for specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:);
    v94[1] = (void (*)(void *))v92;
    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v95);
    uint64_t v40 = v145;
    outlined destroy of StocksKitCurrencyCache.Provider?(v127, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    uint64_t v96 = v82;
    uint64_t v69 = v147;
    uint64_t v70 = v149;
    outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v130, v131);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v128, v129);
    (*(void (**)(char *, uint64_t))(v150 + 8))(v132, v151);
    uint64_t v46 = v152;
    uint64_t v67 = (uint64_t)v144;
    uint64_t v68 = v143;
  }
LABEL_11:
  uint64_t v97 = v142;
  v153.CGFloat a = v141;
  v153.CGFloat b = v140;
  v153.CGFloat c = v139;
  v153.CGFloat d = v138;
  v153.tCGFloat x = v137;
  v153.tdouble y = v136;
  uint64_t v154 = v135;
  uint64_t v155 = v134;
  uint64_t v156 = v133;
  __int16 v157 = v124;
  char v158 = BYTE2(v124);
  uint64_t v98 = type metadata accessor for Image();
  CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(v97, v46, v71, (uint64_t)&v153, v70, v98, v69, (uint64_t)&protocol witness table for Image);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v67, 1, v68) == 1)
  {

    outlined destroy of StocksKitCurrencyCache.Provider?(v67, &demangling cache variable for type metadata for CRAssetOrData?);
    return;
  }
  uint64_t v99 = v126;
  outlined init with copy of CRAssetOrData(v67, (uint64_t)v126, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v100 = v99;
    uint64_t v101 = *v99;
    unint64_t v103 = v100[1];
    uint64_t v102 = v100[2];
    unint64_t v104 = v100[3];
    _s8PaperKit13CRAssetOrDataOWOhTm_0(v67, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    outlined copy of Data._Representation(v102, v104);
    outlined consume of Data._Representation(v101, v103);
    outlined consume of Data._Representation(v102, v104);
    id v105 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F24BE0]), sel_init);
    if (!v105)
    {

      outlined consume of Data._Representation(v102, v104);
      return;
    }
    double v106 = v105;
    id v107 = objc_allocWithZone(MEMORY[0x263F827E8]);
    outlined copy of Data._Representation(v102, v104);
    Class v108 = Data._bridgeToObjectiveC()().super.isa;
    id v109 = objc_msgSend(v107, sel_initWithData_, v108);
    outlined consume of Data._Representation(v102, v104);

    objc_msgSend(v106, sel_setImage_, v109);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    objc_msgSend(v106, sel_setRectangle_, v153.a, v153.b, v153.c, v153.d);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    objc_msgSend(v106, sel_setRotationAngle_, v153.a);
    double v110 = *(void **)&v40[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation];
    *(void *)&v40[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = v106;

    outlined consume of Data._Representation(v102, v104);
  }
  else
  {
    _s8PaperKit13CRAssetOrDataOWOhTm_0((uint64_t)v99, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
    _s8PaperKit13CRAssetOrDataOWOhTm_0(v67, (uint64_t (*)(void))type metadata accessor for CRAssetOrData);
  }
}

uint64_t closure #1 in Image.update<A>(use:ref:pdfAnnotation:in:capsule:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v24[1] = a4;
  _OWORD v24[2] = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a3;
  v24[3] = a2;
  v24[4] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v25 = (uint64_t)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)v24 - v9;
  v24[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v11 = *(void *)(v24[0] - 8);
  MEMORY[0x270FA5388](v24[0]);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  MEMORY[0x21054BDF0](v19);
  type metadata accessor for Image();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<Image> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<Image>);
  Capsule.encapsulate<A>(_:)();
  Capsule.Ref.import<A>(_:)();
  (*(void (**)(char *, void))(v11 + 8))(v13, v24[0]);
  uint64_t v20 = type metadata accessor for CRAssetOrData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v10, 1, 1, v20);
  uint64_t v21 = (void (*)(unsigned char *, void))Capsule.Ref.subscript.modify();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, v25, &demangling cache variable for type metadata for CRAssetOrData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAssetOrData?);
  v21(v28, 0);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v26, v27, v22);
}

uint64_t Image.image(from:)()
{
  uint64_t v11 = 0;
  uint64_t NumberOfEntries = CGDisplayListGetNumberOfEntries();
  NumberOfEntriesOfint Type = CGDisplayListGetNumberOfEntriesOfType();
  uint64_t v2 = 0;
  if (NumberOfEntries != 1)
  {
    double v4 = 0;
    goto LABEL_6;
  }
  uint64_t v3 = NumberOfEntriesOfType;
  double v4 = 0;
  if (v3 != 1)
  {
LABEL_6:
    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v4);
    return v2;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &v11;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for closure #1 in Image.image(from:);
  *(void *)(v6 + 24) = v5;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ();
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ();
  aBlock[3] = &block_descriptor_38;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGDisplayListEnumerateEntriesWithOptions();
  _Block_release(v7);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    double v4 = partial apply for closure #1 in Image.image(from:);
    uint64_t v2 = v11;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void closure #1 in Image.image(from:)(uint64_t a1, uint64_t a2, void **a3)
{
  Image = (void *)CGDisplayListEntryImageGetImage();
  uint64_t v5 = Image;
  if (Image) {
    id v6 = Image;
  }
  uint64_t v7 = *a3;
  *a3 = v5;
}

void Image.takeImage(from:assetManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (_OWORD *)((char *)&v18 - v7);
  uint64_t v9 = (void *)Image.image(from:)();
  if (v9)
  {
    id v19 = v9;
    uint64_t v10 = CGImageRef.imageData(compressionQuality:asPng:)(0, 1.0);
    if (v11 >> 60 == 15)
    {
      id v12 = v19;
    }
    else
    {
      uint64_t v13 = v10;
      unint64_t v14 = v11;
      if (a2)
      {
        swift_retain_n();
        outlined copy of Data?(v13, v14);
        CRAsset.init(data:assetManager:)();
        uint64_t v15 = type metadata accessor for CRAssetOrData();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v8, 0, 1, v15);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v8, (uint64_t)v5, &demangling cache variable for type metadata for CRAssetOrData?);
        type metadata accessor for Image();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
        CRRegister.wrappedValue.setter();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CRAssetOrData?);

        outlined consume of Data?(v13, v14);
        swift_release();
      }
      else
      {
        outlined copy of Data._Representation(v10, v11);
        CRDataAsset.init(_:)(v13, v14, (uint64_t *)v20);
        long long v16 = v20[1];
        *uint64_t v8 = v20[0];
        v8[1] = v16;
        uint64_t v17 = type metadata accessor for CRAssetOrData();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v8, 0, 1, v17);
        outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v8, (uint64_t)v5, &demangling cache variable for type metadata for CRAssetOrData?);
        type metadata accessor for Image();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
        CRRegister.wrappedValue.setter();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for CRAssetOrData?);

        outlined consume of Data?(v13, v14);
      }
    }
  }
}

void Image.finishDecode(from:assetManager:)(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_cacheAppearances);
  id v4 = a1;
  id v5 = objc_msgSend(v4, sel_cachedAppearance_, 0);
  if (v5)
  {
    id v12 = v5;
    Image.takeImage(from:assetManager:)((uint64_t)v12, a2);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    id v12 = v4;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      id v11 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v12;

      _os_log_impl(&dword_20C2D7000, v7, v8, "Error decoding image from PDF Annotation: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x210550270](v10, -1, -1);
      MEMORY[0x210550270](v9, -1, -1);

      return;
    }
  }
}

uint64_t protocol witness for ContainerCanvasElement.drawing.getter in conformance Image()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for ContainerCanvasElement.drawing.setter in conformance Image(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t (*protocol witness for ContainerCanvasElement.drawing.modify in conformance Image(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for ContainerCanvasElement.subelements.getter in conformance Image@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for ContainerCanvasElement.subelements.setter in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 52);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for CanvasElement.rotation.modify in conformance Image(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance Image(a1, a2, a3, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, MEMORY[0x263F32E58]);
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *id v12 = v6;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return Image.render<A>(in:id:capsule:options:)(a1, v13, a3, a4, a5, a6);
}

uint64_t protocol witness for PaperRenderable.renderedImage(in:) in conformance Image(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  os_log_type_t v8 = (char *)&async function pointer to specialized Image.renderedImage(in:)
     + async function pointer to specialized Image.renderedImage(in:);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v8)(v5, v1, v3, v4);
}

uint64_t Image.pdfPageID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PDFPageID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t Image.shared(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for CRKeyPath();
  double v9 = MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = 1;
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, double))(v12 + 16))(v11, a1, v9);
  uint64_t v14 = a2(v13);
  return a4(&v17, v11, a3, v14);
}

uint64_t closure #1 in Image.renderPage(pdfPage:box:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  return MEMORY[0x270FA2498](closure #1 in Image.renderPage(pdfPage:box:context:), 0, 0);
}

uint64_t closure #1 in Image.renderPage(pdfPage:box:context:)()
{
  uint64_t v15 = v0;
  uint64_t v2 = *(CGContext **)(v0 + 160);
  uint64_t v1 = *(void **)(v0 + 168);
  CGContextSaveGState(v2);
  objc_msgSend(v1, sel_boundsForBox_, 0);
  CGFloat x = v17.origin.x;
  CGFloat y = v17.origin.y;
  CGFloat width = v17.size.width;
  CGFloat height = v17.size.height;
  double MinY = CGRectGetMinY(v17);
  v18.origin.CGFloat x = x;
  v18.origin.CGFloat y = y;
  v18.size.CGFloat width = width;
  v18.size.CGFloat height = height;
  CGFloat MaxY = CGRectGetMaxY(v18);
  *(void *)(v0 + 16) = 0x3FF0000000000000;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 40) = 0x3FF0000000000000;
  *(void *)(v0 + 64) = 0x3FF0000000000000;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(_OWORD *)(v0 + 88) = xmmword_20C8340F0;
  *(double *)(v0 + 104) = MinY + MaxY;
  CGAffineTransformConcat(&v14, (CGAffineTransform *)(v0 + 16), (CGAffineTransform *)(v0 + 64));
  long long v9 = *(_OWORD *)&v14.c;
  long long v10 = *(_OWORD *)&v14.tx;
  *(_OWORD *)(v0 + 112) = *(_OWORD *)&v14.a;
  *(_OWORD *)(v0 + 128) = v9;
  *(_OWORD *)(v0 + 144) = v10;
  CGContextConcatCTM(v2, (CGAffineTransform *)(v0 + 112));
  id v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v11;
  *id v11 = v0;
  v11[1] = closure #1 in Image.renderPage(pdfPage:box:context:);
  uint64_t v12 = *(void *)(v0 + 160);
  return Image.renderImage(in:isTopLevel:)(v12, 1);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in Image.renderPage(pdfPage:box:context:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  CGContextRestoreGState(*(CGContextRef *)(v0 + 160));
  OS_dispatch_semaphore.signal()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void Image.update<A>(pdfPage:id:use:in:options:)(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4, long long *a5, uint64_t a6, unint64_t a7)
{
  unint64_t v85 = a7;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v74);
  uint64_t v71 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  uint64_t v72 = *(void *)(v73 - 8);
  MEMORY[0x270FA5388](v73);
  uint64_t v70 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x270FA5388](v69);
  uint64_t v67 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  uint64_t v68 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  int v66 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v65);
  id v62 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  id v61 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Image();
  uint64_t v80 = *(void *)(v20 - 8);
  uint64_t v21 = *(void *)(v80 + 64);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v81 = (uint64_t)&v59 - v24;
  unint64_t v25 = *a3;
  type metadata accessor for PaperKitPDFPage(0);
  uint64_t v26 = swift_dynamicCastClass();
  if (v26)
  {
    uint64_t v59 = v16;
    uint64_t v60 = a2;
    __int16 v27 = *((_WORD *)a5 + 36);
    uint64_t v82 = a4;
    uint64_t v83 = a6;
    char v28 = *((unsigned char *)a5 + 74);
    uint64_t v29 = *((void *)a5 + 8);
    long long v78 = a5[3];
    long long v77 = a5[2];
    long long v76 = a5[1];
    long long v75 = *a5;
    uint64_t v30 = (char *)v26;
    id v79 = a1;
    uint64_t v31 = v84;
    specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v30, 1);
    unint64_t v93 = v25;
    long long v86 = v75;
    long long v87 = v76;
    long long v88 = v77;
    long long v89 = v78;
    uint64_t v90 = v29;
    char v92 = v28;
    __int16 v91 = v27;
    uint64_t v32 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)(v30, &v93, v82, (uint64_t)&v86, v20, v83, v32, (uint64_t)&protocol witness table for Image, (uint64_t)&protocol witness table for Image, v85);
    unint64_t v33 = v25 >> 62;
    if ((v25 >> 62) >= 2 && v25 == 0x8000000000000000)
    {
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      id v34 = v79;
    }
    else
    {
      *(void *)&long long v76 = v32;
      *(void *)&long long v78 = v20;
      outlined copy of PaperDocument.PDFDocumentUse(v25);
      *(void *)&long long v77 = v25;
      outlined consume of PaperDocument.PDFDocumentUse(v25);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      uint64_t v35 = v81;
      outlined init with copy of CRAssetOrData(v31, v81, (uint64_t (*)(void))type metadata accessor for Image);
      uint64_t v36 = swift_allocObject();
      swift_unknownObjectWeakInit();
      outlined init with copy of CRAssetOrData(v35, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Image);
      unint64_t v37 = (*(unsigned __int8 *)(v80 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
      uint64_t v38 = swift_allocObject();
      outlined init with take of Image((uint64_t)v22, v38 + v37);
      *(void *)(v38 + ((v21 + v37 + 7) & 0xFFFFFFFFFFFFFFF8)) = v36;
      uint64_t v39 = (void (**)(uint64_t, void *))&v30[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
      uint64_t v40 = *(void *)&v30[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
      *uint64_t v39 = partial apply for closure #1 in Image.update<A>(pdfPage:id:use:in:options:);
      v39[1] = (void (*)(uint64_t, void *))v38;
      swift_retain();
      uint64_t v41 = v35;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v40);
      _s8PaperKit13CRAssetOrDataOWOhTm_0(v35, (uint64_t (*)(void))type metadata accessor for Image);
      swift_release();
      if (v33)
      {
      }
      else
      {
        outlined init with copy of CRAssetOrData(v31, v35, (uint64_t (*)(void))type metadata accessor for Image);
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v62, 1, 1, v42);
        lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
        unint64_t v43 = v77;
        id v44 = (id)v77;
        uint64_t v45 = v61;
        CRRegister.init(_:)();
        uint64_t v46 = v78;
        (*(void (**)(uint64_t, char *, uint64_t))(v63 + 40))(v41 + *(int *)(v78 + 28), v45, v64);
        uint64_t v47 = type metadata accessor for CRAssetOrData();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v67, 1, 1, v47);
        lazy protocol witness table accessor for type CRAssetOrData? and conformance <A> A?();
        CGFloat v48 = v66;
        CRRegister.init(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v68 + 40))(v41 + *(int *)(v46 + 36), v48, v59);
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v71, 1, 1, v49);
        lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?();
        CGFloat v50 = v70;
        CRRegister.init(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v72 + 40))(v41 + *(int *)(v46 + 32), v50, v73);
        Image.pdfContentsBounds.getter();
        *(void *)&long long v86 = v51;
        *((void *)&v86 + 1) = v52;
        *(void *)&long long v87 = v53;
        *((void *)&v87 + 1) = v54;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.setter();
        Image.pdfContentsBounds.getter();
        *(void *)&long long v86 = v55;
        *((void *)&v86 + 1) = v56;
        *(void *)&long long v87 = v57;
        *((void *)&v87 + 1) = v58;
        CRRegister.wrappedValue.setter();
        PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)((uint64_t)v44, v41, v60, v82, v46, v83, v76, (uint64_t)&protocol witness table for Image, (uint64_t)&protocol witness table for Image, v85);
        outlined consume of PaperDocument.PDFDocumentUse(v43);

        _s8PaperKit13CRAssetOrDataOWOhTm_0(v41, (uint64_t (*)(void))type metadata accessor for Image);
      }
    }
  }
}

void closure #1 in Image.update<A>(pdfPage:id:use:in:options:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Image();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v13 = (void *)MEMORY[0x210550400](a4 + 16);
  if (v13)
  {
    id v14 = v13;
    dispatch_semaphore_t v15 = dispatch_semaphore_create(0);
    uint64_t v16 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 1, 1, v16);
    outlined init with copy of CRAssetOrData(a3, (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for Image);
    unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v18 = (void *)swift_allocObject();
    void v18[2] = 0;
    v18[3] = 0;
    v18[4] = a2;
    v18[5] = v14;
    outlined init with take of Image((uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v18 + v17);
    *(void *)((char *)v18 + ((v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = v15;
    id v19 = v14;
    id v20 = a2;
    uint64_t v21 = v15;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in Image.renderPage(pdfPage:box:context:), (uint64_t)v18);
    swift_release();
    OS_dispatch_semaphore.wait()();
  }
}

BOOL Image.finishDecode(from:pageID:assetManager:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = a3;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v49 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v49 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  dispatch_semaphore_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  double v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, sel_boundsForBox_, 1, v20);
  CGFloat v24 = v23;
  CGFloat v26 = v25;
  CGFloat v28 = v27;
  double v30 = v29;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  v61.origin.CGFloat x = v31;
  v61.origin.CGFloat y = v32;
  v61.size.CGFloat width = v33;
  v61.size.CGFloat height = v34;
  v60.origin.CGFloat x = v24;
  v60.origin.CGFloat y = v26;
  v60.size.CGFloat width = v28;
  v60.size.CGFloat height = v30;
  BOOL result = CGRectEqualToRect(v60, v61);
  if (result)
  {
    CGFloat v50 = v15;
    uint64_t v51 = v13;
    uint64_t v52 = v11;
    uint64_t v53 = v5;
    uint64_t v54 = a1;
    uint64_t v55 = v8;
    uint64_t v36 = v58;
    CRRegister.wrappedValue.getter();
    if (CGRect.almostEqual(_:threshold:)(v59.origin.x, v59.origin.y, v59.size.width, v59.size.height, 1.0, v24, v26, v28, v30))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v22, 1, 1, v37);
      uint64_t v49 = type metadata accessor for Image();
      CRRegister.projectedValue.getter();
      specialized CRRegister<>.setIfDifferent(_:)((uint64_t)v22);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      uint64_t v38 = v51;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v50, v18, v12);
      CRRegister.projectedValue.setter();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v12);
      uint64_t v39 = v52;
      CRRegister.projectedValue.getter();
      CRRegister.value.getter();
      v62.origin.CGFloat x = v24;
      v62.origin.CGFloat y = v26;
      v62.size.CGFloat width = v28;
      v62.size.CGFloat height = v30;
      if (!CGRectEqualToRect(v59, v62))
      {
        v59.origin.CGFloat x = v24;
        v59.origin.CGFloat y = v26;
        v59.size.CGFloat width = v28;
        v59.size.CGFloat height = v30;
        CRRegister.value.setter();
      }
      uint64_t v40 = v56;
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
      v41(v55, v39, v36);
      CRRegister.projectedValue.setter();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v40 + 8);
      v42(v39, v36);
      unint64_t v43 = v53;
      CRRegister.projectedValue.getter();
      CRRegister.value.getter();
      v63.origin.CGFloat x = v24;
      v63.origin.CGFloat y = v26;
      v63.size.CGFloat width = v28;
      v63.size.CGFloat height = v30;
      BOOL v44 = CGRectEqualToRect(v59, v63);
      uint64_t v45 = v54;
      if (!v44)
      {
        v59.origin.CGFloat x = v24;
        v59.origin.CGFloat y = v26;
        v59.size.CGFloat width = v28;
        v59.size.CGFloat height = v30;
        CRRegister.value.setter();
      }
      v41(v55, v43, v36);
      CRRegister.projectedValue.setter();
      v42(v43, v36);
      specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)objc_msgSend(v45, sel_rotation), (void (*)(void))type metadata accessor for Image);
      id v46 = objc_msgSend(objc_allocWithZone(NSDictionary), sel_init);
      uint64_t v47 = (void *)CGDisplayListCreateWithRect();
      CGFloat v48 = (void *)CGDisplayListContextCreate();
      objc_msgSend(v45, sel_drawWithBox_inContext_withOptions_, 0, v48, 0);

      Image.takeImage(from:assetManager:)((uint64_t)v47, v57);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double protocol witness for CanvasElement.rotation.getter in conformance Image()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for CanvasElement.rotation.setter in conformance Image()
{
  return CRRegister.wrappedValue.setter();
}

uint64_t protocol witness for PaperPage.pdfPageID.getter in conformance Image@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PDFPageID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for PaperPage.shared(_:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance Image(a1, a2, a3, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, MEMORY[0x263F32E28]);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v10 = type metadata accessor for CRKeyPath();
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = 1;
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, double))(v14 + 16))(v13, a1, v11);
  uint64_t v16 = a4(v15);
  return a6(&v19, v13, a5, v16);
}

void specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
}

{
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, a2, a3, a4, a5, a6, a7, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>, (uint64_t)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x263F32C58], (void (*)(uint64_t, uint64_t, uint64_t))lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie);
}

{
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, a2, a3, a4, a5, a6, a7, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>, (uint64_t)&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, (uint64_t)&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, MEMORY[0x263F32C58], (void (*)(uint64_t, uint64_t, uint64_t))lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie);
}

void specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v94 = a4;
  uint64_t v95 = a7;
  uint64_t v91 = a6;
  uint64_t v92 = a3;
  int v93 = a5;
  uint64_t v88 = type metadata accessor for SHA256Digest();
  uint64_t v86 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  unint64_t v85 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SHA256();
  uint64_t v89 = *(void *)(v17 - 8);
  uint64_t v90 = v17;
  MEMORY[0x270FA5388](v17);
  long long v87 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for CRKeyPath();
  uint64_t v83 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  uint64_t v81 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v82 = (char *)&v79 - v24;
  uint64_t v25 = type metadata accessor for CRCodableVersion();
  uint64_t v96 = *(void *)(v25 - 8);
  uint64_t v97 = v25;
  MEMORY[0x270FA5388](v25);
  double v27 = (char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(a8);
  MEMORY[0x270FA5388](v28 - 8);
  double v30 = (char *)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(a9);
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  CGFloat v34 = (char *)&v79 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v100, "/AAPL:AKExtras");
  HIBYTE(v100[0]) = -18;
  uint64_t v35 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v98 = a1;
  id v36 = objc_msgSend(a1, sel___swift_objectForKeyedSubscript_, v35);
  swift_unknownObjectRelease();
  if (v36)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v100, 0, sizeof(v100));
  }
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v100, (uint64_t)v101, &demangling cache variable for type metadata for Any?);
  if (v101[3])
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    if (swift_dynamicCast())
    {
      id v37 = v99;
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v101, &demangling cache variable for type metadata for Any?);
  }
  id v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9A0]), sel_init);
  strcpy((char *)v101, "/AAPL:AKExtras");
  HIBYTE(v101[1]) = -18;
  id v37 = v38;
  objc_msgSend(v98, sel___swift_setObject_forKeyedSubscript_, v37, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());

  swift_unknownObjectRelease();
LABEL_9:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a2, (uint64_t)v30, a8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, a8);
  }
  else
  {
    id v80 = v37;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v34, v30, v31);
    (*(void (**)(char *, void, uint64_t))(v96 + 104))(v27, *MEMORY[0x263F32EB8], v97);
    if (one-time initialization token for allReadableFileFormatVersions != -1) {
      swift_once();
    }
    a13(a10, a11, a12);
    uint64_t v39 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
    unint64_t v41 = v40;
    (*(void (**)(char *, uint64_t))(v96 + 8))(v27, v97);
    Swift::String v42 = Data.base64EncodedString(options:)(0);
    outlined consume of Data._Representation(v39, v41);
    unint64_t v43 = (void *)MEMORY[0x21054D080](v42._countAndFlagsBits, v42._object);
    swift_bridgeObjectRelease();
    BOOL v44 = (void *)MEMORY[0x21054D080](1263554607, 0xE400000000000000);
    id v37 = v80;
    objc_msgSend(v80, sel_setObject_forKey_, v43, v44);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v94, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v21, 1, v45) != 1)
  {
    uint64_t v47 = v81;
    MEMORY[0x21054BDF0](v45);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v21, v45);
    uint64_t v48 = v83;
    uint64_t v49 = v82;
    CGFloat v50 = v47;
    uint64_t v51 = v84;
    uint64_t v52 = (*(uint64_t (**)(char *, char *, uint64_t))(v83 + 32))(v82, v50, v84);
    uint64_t v53 = MEMORY[0x21054CA80](v52);
    unint64_t v55 = v54;
    Swift::String v56 = Data.base64EncodedString(options:)(0);
    outlined consume of Data._Representation(v53, v55);
    uint64_t v57 = (void *)MEMORY[0x21054D080](v56._countAndFlagsBits, v56._object);
    swift_bridgeObjectRelease();
    uint64_t v58 = (void *)MEMORY[0x21054D080](0x44494B50502FLL, 0xE600000000000000);
    objc_msgSend(v37, sel_setObject_forKey_, v57, v58);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v51);
    if ((v93 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  if (v93)
  {
LABEL_18:
    CGRect v59 = v37;
    uint64_t v60 = (uint64_t)v87;
    SHA256.init()();
    v101[0] = MEMORY[0x263F8EE88];
    NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)(v60, 4u, 0, (uint64_t)v101);
    swift_bridgeObjectRelease();
    CGRect v61 = v85;
    SHA256.finalize()();
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x263F045C0]);
    uint64_t v62 = v88;
    uint64_t v63 = Digest.makeIterator()();
    uint64_t v65 = v64;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v61, v62);
    uint64_t v66 = specialized _copySequenceToContiguousArray<A>(_:)(v63, v65);
    swift_bridgeObjectRelease();
    uint64_t v67 = specialized Data.init<A>(_:)(v66);
    unint64_t v69 = v68;
    swift_release();
    uint64_t v70 = specialized Data.init(paperKitHash:version:)(v67, v69, 4);
    unint64_t v72 = v71;
    uint64_t v73 = v60;
    id v37 = v59;
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v73, v90);
    Swift::String v74 = Data.base64EncodedString(options:)(0);
    outlined consume of Data._Representation(v70, v72);
    long long v75 = (void *)MEMORY[0x21054D080](v74._countAndFlagsBits, v74._object);
    swift_bridgeObjectRelease();
    long long v76 = (void *)MEMORY[0x21054D080](0x687361484B50502FLL, 0xE800000000000000);
    objc_msgSend(v59, sel_setObject_forKey_, v75, v76);
  }
LABEL_19:
  if (v95)
  {
    long long v77 = (void *)MEMORY[0x21054D080](v91);
    long long v78 = (void *)MEMORY[0x21054D080](0x657079544B50502FLL, 0xE800000000000000);
    objc_msgSend(v37, sel_setObject_forKey_, v77, v78);
  }
  else
  {
    long long v78 = v37;
  }
}

uint64_t specialized Image.renderedImage(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  v4[5] = swift_task_alloc();
  uint64_t v6 = *(void *)(a3 - 8);
  v4[6] = v6;
  v4[7] = swift_task_alloc();
  (*(void (**)(void))(v6 + 16))();
  return MEMORY[0x270FA2498](specialized Image.renderedImage(in:), 0, 0);
}

CGImageRef partial apply for closure #1 in static Image.filterAndCrop(_:filter:crop:queue:)@<X0>(CGImageRef *a1@<X8>)
{
  CGImageRef result = specialized static Image._filterAndCrop(_:filter:crop:)(*(CGImage **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in Image.update<A>(use:ref:pdfAnnotation:in:capsule:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Image.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(a1, v2[5], v2[6], v2[2], v2[3], a2);
}

uint64_t sub_20C507B90()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6 + 8) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = v0 + v3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>);
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }

  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v0 + v7, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0 + v7, v12);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v7 + v8) & 0xFFFFFFFFFFFFFFF8) + 24, v2 | v6 | 7);
}

uint64_t outlined init with copy of CRAssetOrData(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_20C507F9C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_20C507FD4()
{
  uint64_t v1 = (int *)(type metadata accessor for Image() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  uint64_t v9 = v6 + v1[8];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v6 + v1[9];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v6 + v1[10];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = v6 + v1[11];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = v6 + v1[12];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = v6 + v1[13];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = v6 + v1[14];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  uint64_t v23 = v6 + v1[15];
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, v5, v4);
}

void partial apply for closure #1 in Image.update<A>(pdfPage:id:use:in:options:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Image() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in Image.update<A>(pdfPage:id:use:in:options:)(a1, a2, v2 + v6, v7);
}

uint64_t _s8PaperKit13CRAssetOrDataOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t base witness table accessor for CRStruct_Base_10 in Image()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
}

uint64_t base witness table accessor for CRStruct_Base in Image()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_10 : CRDT in Image()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_4 : CRDT in Image()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<CRAssetOrData?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_6 : CRDT in Image()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_7 : CRDT in Image()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<Data?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Data?>);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_8 : CRDT in Image()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_9 : CRDT in Image()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRRegister<TaggedValue_2<CGRect, Quad>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
}

uint64_t base witness table accessor for CRDT in Image()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
}

uint64_t base witness table accessor for CRMergeable in Image()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
}

uint64_t base witness table accessor for CRType in Image()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in Image()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRStructMergeableDelta_10<Image> and conformance CRStructMergeableDelta_10<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_10<Image>);
}

uint64_t base witness table accessor for CRCodable in Image()
{
  return _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_4(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
}

uint64_t sub_20C508790()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C5087D4()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C508830()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C508884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_24Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C5088A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_24Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_24Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for Image();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  return a4(v5);
}

uint64_t sub_20C508914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_28Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C508930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_28Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_28Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for Image();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  return a4(v5);
}

uint64_t sub_20C5089A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_32Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C5089C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_32Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_32Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for Image();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  return a4(v5);
}

uint64_t sub_20C508A3C()
{
  return CRRegister.projectedValue.getter();
}

uint64_t sub_20C508A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_40Tm(a1, a2, a3, MEMORY[0x263F32C30]);
}

uint64_t sub_20C508AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_40Tm(a1, a2, a3, MEMORY[0x263F32C38]);
}

uint64_t keypath_get_40Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for Image();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return a4(v5);
}

uint64_t sub_20C508B28()
{
  return CRRegister.projectedValue.getter();
}

void sub_20C508B7C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Image(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v41 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v41 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = a3[9];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    uint64_t v25 = a3[10];
    uint64_t v26 = (char *)a1 + v25;
    double v27 = (char *)a2 + v25;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
    uint64_t v29 = a3[11];
    double v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
    uint64_t v33 = a3[12];
    CGFloat v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
    uint64_t v37 = a3[13];
    id v38 = (char *)a1 + v37;
    uint64_t v39 = (char *)a2 + v37;
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
    *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Image(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = a1 + a2[9];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = a1 + a2[10];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = a1 + a2[11];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = a1 + a2[12];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = a1 + a2[13];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Image(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
  uint64_t v32 = a3[12];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
  uint64_t v36 = a3[13];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Image(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 24))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  uint64_t v32 = a3[12];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 24))(v33, v34, v35);
  uint64_t v36 = a3[13];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 24))(v37, v38, v39);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Image(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
  uint64_t v32 = a3[12];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
  uint64_t v36 = a3[13];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32))(v37, v38, v39);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithTake for Image(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 40))(v21, v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  uint64_t v32 = a3[12];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 40))(v33, v34, v35);
  uint64_t v36 = a3[13];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 40))(v37, v38, v39);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C509DF8);
}

uint64_t sub_20C509DF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_20:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_19:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_20;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_19;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_19;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_19;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v12 = *(void *)(v17 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_19;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a2)
  {
    uint64_t v8 = v18;
    uint64_t v12 = *(void *)(v18 - 8);
    uint64_t v13 = a3[11];
    goto LABEL_19;
  }
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a2)
  {
    uint64_t v8 = v19;
    uint64_t v12 = *(void *)(v19 - 8);
    uint64_t v13 = a3[12];
    goto LABEL_19;
  }
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  if (*(_DWORD *)(*(void *)(v20 - 8) + 84) == a2)
  {
    uint64_t v8 = v20;
    uint64_t v12 = *(void *)(v20 - 8);
    uint64_t v13 = a3[13];
    goto LABEL_19;
  }
  unint64_t v22 = *(void *)(a1 + a3[14]);
  if (v22 >= 0xFFFFFFFF) {
    LODWORD(v22) = -1;
  }
  return (v22 + 1);
}

uint64_t storeEnumTagSinglePayload for Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C50A158);
}

uint64_t sub_20C50A158(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[6];
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[7];
      }
      else
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[8];
        }
        else
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
          if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a3)
          {
            uint64_t v10 = v18;
            uint64_t v14 = *(void *)(v18 - 8);
            uint64_t v15 = a4[9];
          }
          else
          {
            uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
            if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a3)
            {
              uint64_t v10 = v19;
              uint64_t v14 = *(void *)(v19 - 8);
              uint64_t v15 = a4[10];
            }
            else
            {
              uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
              if (*(_DWORD *)(*(void *)(v20 - 8) + 84) == a3)
              {
                uint64_t v10 = v20;
                uint64_t v14 = *(void *)(v20 - 8);
                uint64_t v15 = a4[11];
              }
              else
              {
                uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
                if (*(_DWORD *)(*(void *)(v21 - 8) + 84) == a3)
                {
                  uint64_t v10 = v21;
                  uint64_t v14 = *(void *)(v21 - 8);
                  uint64_t v15 = a4[12];
                }
                else
                {
                  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
                  if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
                  {
                    *(void *)(a1 + a4[14]) = (a2 - 1);
                    return result;
                  }
                  uint64_t v10 = result;
                  uint64_t v14 = *(void *)(result - 8);
                  uint64_t v15 = a4[13];
                }
              }
            }
          }
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for Image()
{
  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      _s9Coherence10CRRegisterVyAA13TaggedValue_2VySo6CGRectV8PaperKit4QuadVAgA7CRValueAHyHCg_GSgGMaTm_0(319, &lazy cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?, (void (*)(void))lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?);
      if (v2 <= 0x3F)
      {
        _s9Coherence10CRRegisterVyAA13TaggedValue_2VySo6CGRectV8PaperKit4QuadVAgA7CRValueAHyHCg_GSgGMaTm_0(319, &lazy cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?, (void (*)(void))lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?);
        if (v3 <= 0x3F)
        {
          _s9Coherence10CRRegisterVyAA13TaggedValue_2VySo6CGRectV8PaperKit4QuadVAgA7CRValueAHyHCg_GSgGMaTm_0(319, &lazy cache variable for type metadata for CRRegister<CRAssetOrData?>, &demangling cache variable for type metadata for CRAssetOrData?, (void (*)(void))lazy protocol witness table accessor for type CRAssetOrData? and conformance <A> A?);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRRegister<String?>(319, &lazy cache variable for type metadata for CRRegister<String?>, &demangling cache variable for type metadata for String?, &lazy protocol witness table cache variable for type String? and conformance <A> A?);
            if (v5 <= 0x3F)
            {
              _s9Coherence10CRRegisterVyAA13TaggedValue_2VySo6CGRectV8PaperKit4QuadVAgA7CRValueAHyHCg_GSgGMaTm_0(319, &lazy cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, &demangling cache variable for type metadata for Ref<PKDrawingStruct>?, (void (*)(void))lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?);
              if (v6 <= 0x3F)
              {
                type metadata accessor for CRRegister<String?>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Data?>, &demangling cache variable for type metadata for Data?, (unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>();
                  if (v8 <= 0x3F) {
                    swift_initStructMetadata();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void _s9Coherence10CRRegisterVyAA13TaggedValue_2VySo6CGRectV8PaperKit4QuadVAgA7CRValueAHyHCg_GSgGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    a4();
    unint64_t v6 = type metadata accessor for CRRegister();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_20C50A854()
{
  unint64_t v1 = (int *)(type metadata accessor for Image() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  uint64_t v6 = v0 + v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  uint64_t v9 = v6 + v1[8];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v6 + v1[9];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v6 + v1[10];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = v6 + v1[11];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = v6 + v1[12];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = v6 + v1[13];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = v6 + v1[14];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  uint64_t v23 = v6 + v1[15];
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v5 + 8, v4);
}

uint64_t partial apply for closure #1 in Image.renderPage(pdfPage:box:context:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for Image() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(void *)(v6 + 176) = v4;
  *(void *)(v6 + 184) = v5;
  *(_OWORD *)(v6 + 160) = v7;
  return MEMORY[0x270FA2498](closure #1 in Image.renderPage(pdfPage:box:context:), 0, 0);
}

uint64_t sub_20C50ACE0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in Image.image(from:)(uint64_t a1, uint64_t a2)
{
  closure #1 in Image.image(from:)(a1, a2, *(void ***)(v2 + 16));
}

uint64_t sub_20C50ACF8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ()(uint64_t a1, uint64_t a2)
{
  return thunk for @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ()(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_38()
{
  return swift_release();
}

CGImageRef specialized static Image._filterAndCrop(_:filter:crop:)(CGImage *a1, uint64_t a2, uint64_t a3)
{
  CGImageRef v72 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x270FA5388](v5 - 8);
  long long v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v67 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v67 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  uint64_t v69 = *(void *)(v17 - 8);
  unint64_t v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  unsigned int v18 = v71(a2, 1, v17);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a3, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  if (v18 != 1
    || (uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>),
        (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v16, 1, v19) != 1))
  {
    uint64_t v70 = a2;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a3, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v24(v13, 1, v22) == 1)
    {
      uint64_t v25 = v72;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
LABEL_10:
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a3, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      if (v24(v10, 1, v22) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      }
      else
      {
        uint64_t v35 = v7;
        TaggedValue_2.tagged1.getter();
        double v36 = v73;
        double v37 = v74;
        double v38 = v75;
        double v39 = v76;
        char v40 = LOBYTE(v77);
        uint64_t v41 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v10, v22);
        if ((v40 & 1) == 0)
        {
          uint64_t v51 = (void *)MEMORY[0x21054F590](v41);
          CGImageRef v72 = v72;
          int64_t Width = CGImageGetWidth(v72);
          int64_t Height = CGImageGetHeight(v72);
          v83.origin.CGFloat x = v36 * (double)Width;
          v83.origin.CGFloat y = v37 * (double)Height;
          v83.size.CGFloat width = v38 * (double)Width;
          v83.size.CGFloat height = v39 * (double)Height;
          CGImageRef v54 = CGImageCreateWithImageInRect(v72, v83);

          if (v54)
          {

            CGImageRef v72 = v54;
          }
          long long v7 = v35;
          unint64_t v55 = (unsigned int (*)(char *, uint64_t, uint64_t))v71;
          uint64_t v42 = v70;
LABEL_26:
          outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v42, (uint64_t)v7, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
          if (v55(v7, 1, v17) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
            return v72;
          }
          TaggedValue_1.tagged1.getter();
          unsigned __int8 v56 = LOBYTE(v73);
          uint64_t v57 = v7;
          char v58 = LOBYTE(v74);
          uint64_t v59 = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v57, v17);
          if (v58) {
            return v72;
          }
          uint64_t v60 = (void *)MEMORY[0x21054F590](v59);
          id v61 = objc_allocWithZone(MEMORY[0x263F827E8]);
          CGImageRef v62 = (CGImageRef)objc_msgSend(v61, sel_initWithCGImage_, v72);
          id v63 = objc_msgSend(self, sel_filteredImage_imageFilterType_, v62, v56 + 1);
          if (v63)
          {
            uint64_t v64 = v63;
            CGImageRef v65 = (CGImageRef)objc_msgSend(v63, sel_CGImage);

            uint64_t v66 = v72;
            CGImageRef v62 = v72;
            if (!v65) {
              goto LABEL_34;
            }
          }
          else
          {
            CGImageRef v65 = v72;
          }

          uint64_t v66 = v65;
LABEL_34:
          CGImageRef v72 = v66;
          return v72;
        }
        long long v7 = v35;
      }
      uint64_t v42 = v70;
LABEL_25:
      unint64_t v55 = (unsigned int (*)(char *, uint64_t, uint64_t))v71;
      goto LABEL_26;
    }
    unint64_t v68 = v7;
    uint64_t v67 = v72;
    TaggedValue_2.tagged2.getter();
    double v26 = v73;
    double v27 = v74;
    double v28 = v75;
    double v29 = v76;
    double v30 = v77;
    double v31 = v78;
    double v32 = v79;
    double v33 = v80;
    char v34 = v81;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v22);
    if (v34)
    {
      long long v7 = v68;
      goto LABEL_10;
    }
    CGImageRef result = (CGImageRef)objc_msgSend(objc_allocWithZone(MEMORY[0x263F3AA20]), sel_initWithBottomLeft_bottomRight_topLeft_topRight_, v30, v31, v32, v33, v26, v27, v28, v29);
    if (!result)
    {
      __break(1u);
      return result;
    }
    CGImageRef v43 = result;
    BOOL v44 = (void *)MEMORY[0x21054F590]();
    id v45 = objc_allocWithZone(MEMORY[0x263F827E8]);
    uint64_t v46 = v67;
    uint64_t v47 = (CGImage *)objc_msgSend(v45, sel_initWithCGImage_, v67);
    id v48 = objc_msgSend(self, sel_perspectiveCorrectedImageFromImage_normalizedImageQuad_, v47, v43);
    long long v7 = v68;
    uint64_t v42 = v70;
    if (v48)
    {
      uint64_t v49 = v48;
      CGFloat v50 = (CGImage *)objc_msgSend(v48, sel_CGImage);

      uint64_t v47 = v46;
      if (!v50) {
        goto LABEL_24;
      }
    }
    else
    {
      CGFloat v50 = v46;
    }

    uint64_t v46 = v50;
LABEL_24:

    CGImageRef v72 = v46;
    goto LABEL_25;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  CGImageRef v20 = v72;
  return v20;
}

unint64_t lazy protocol witness table accessor for type NSObject and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSObject and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSObject and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject);
  }
  return result;
}

uint64_t type metadata completion function for AsyncCache()
{
  return swift_initClassMetadata2();
}

uint64_t AsyncCache.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v56 - v4;
  uint64_t v6 = type metadata accessor for CheckedContinuation();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v56 - v8;
  uint64_t v10 = *(void *)(v1 + 80);
  uint64_t v11 = type metadata accessor for AsyncCache.CacheState();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v69 = (char *)&v56 - v13;
  uint64_t v73 = v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v72 = type metadata accessor for Optional();
  uint64_t v81 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  double v77 = (char *)&v56 - v19;
  swift_beginAccess();
  char v58 = v0;
  uint64_t v20 = v0[14];
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v59 = v20 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(v20 + 32);
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  else {
    uint64_t v23 = -1;
  }
  unint64_t v24 = v23 & v21;
  unint64_t v25 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v74 = v10 - 8;
  uint64_t v65 = v12 + 16;
  uint64_t v66 = v12;
  uint64_t v70 = (void (**)(char *, char *, uint64_t))(v81 + 32);
  uint64_t v71 = TupleTypeMetadata2 - 8;
  unint64_t v68 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v80 = v7 + 16;
  uint64_t v81 = v2;
  uint64_t v26 = v2 - 8;
  uint64_t v27 = TupleTypeMetadata2;
  uint64_t v78 = v7 + 8;
  uint64_t v79 = v26;
  double v28 = (void (**)(uint64_t *, uint64_t))(v12 + 8);
  unint64_t v29 = v24;
  id v63 = v28;
  int64_t v64 = v25;
  unint64_t v57 = v25 - 1;
  uint64_t v67 = v20;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v31 = 0;
  uint64_t v62 = v10;
  uint64_t v61 = TupleTypeMetadata2;
  uint64_t v60 = v17;
  while (1)
  {
    if (v29)
    {
      uint64_t v75 = (v29 - 1) & v29;
      unint64_t v76 = v31;
      unint64_t v32 = __clz(__rbit64(v29)) | (v31 << 6);
      uint64_t v33 = v73;
LABEL_9:
      uint64_t v34 = v67;
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v17, *(void *)(v67 + 48) + *(void *)(*(void *)(v10 - 8) + 72) * v32, v10);
      (*(void (**)(char *, unint64_t, uint64_t))(v66 + 16))(&v17[*(int *)(v27 + 48)], *(void *)(v34 + 56) + *(void *)(v66 + 72) * v32, v33);
      uint64_t v35 = 0;
      goto LABEL_17;
    }
    int64_t v36 = v31 + 1;
    uint64_t v33 = v73;
    if (__OFADD__(v31, 1)) {
      goto LABEL_56;
    }
    if (v36 >= v64)
    {
      unint64_t v76 = v31;
LABEL_15:
      uint64_t v75 = 0;
LABEL_16:
      uint64_t v35 = 1;
      goto LABEL_17;
    }
    unint64_t v37 = *(void *)(v59 + 8 * v36);
    if (v37) {
      goto LABEL_13;
    }
    unint64_t v53 = v31 + 2;
    if ((uint64_t)(v31 + 2) >= v64)
    {
      uint64_t v75 = 0;
      unint64_t v76 = v31 + 1;
      goto LABEL_16;
    }
    unint64_t v37 = *(void *)(v59 + 8 * v53);
    if (v37)
    {
      int64_t v36 = v31 + 2;
LABEL_13:
      uint64_t v75 = (v37 - 1) & v37;
      unint64_t v76 = v36;
      unint64_t v32 = __clz(__rbit64(v37)) + (v36 << 6);
      goto LABEL_9;
    }
    int64_t v54 = v31 + 3;
    if (v54 >= v64)
    {
      unint64_t v76 = v53;
      goto LABEL_15;
    }
    unint64_t v37 = *(void *)(v59 + 8 * v54);
    if (v37)
    {
      int64_t v36 = v54;
      goto LABEL_13;
    }
    while (1)
    {
      int64_t v36 = v54 + 1;
      if (__OFADD__(v54, 1)) {
        goto LABEL_57;
      }
      if (v36 >= v64) {
        break;
      }
      unint64_t v37 = *(void *)(v59 + 8 * v36);
      ++v54;
      if (v37) {
        goto LABEL_13;
      }
    }
    uint64_t v75 = 0;
    uint64_t v35 = 1;
    unint64_t v76 = v57;
LABEL_17:
    uint64_t v38 = *(void *)(v27 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v17, v35, 1, v27);
    double v39 = v77;
    (*v70)(v77, v17, v72);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v39, 1, v27) == 1)
    {
      swift_release();
      unint64_t v55 = v58;
      swift_bridgeObjectRelease();
      swift_defaultActor_destroy();
      return (uint64_t)v55;
    }
    char v40 = (uint64_t *)v69;
    (*v68)(v69, &v39[*(int *)(v27 + 48)], v33);
    if (swift_getEnumCaseMultiPayload() != 1) {
      break;
    }
    (*v63)(v40, v33);
LABEL_6:
    unint64_t v29 = v75;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v77, v10);
    unint64_t v31 = v76;
  }
  uint64_t v41 = *v40;
  type metadata accessor for UUID();
  uint64_t result = lazy protocol witness table accessor for type UUID and conformance UUID();
  int64_t v42 = 0;
  uint64_t v43 = v41 + 64;
  uint64_t v44 = 1 << *(unsigned char *)(v41 + 32);
  if (v44 < 64) {
    uint64_t v45 = ~(-1 << v44);
  }
  else {
    uint64_t v45 = -1;
  }
  unint64_t v46 = v45 & *(void *)(v41 + 64);
  int64_t v47 = (unint64_t)(v44 + 63) >> 6;
  while (2)
  {
    if (v46)
    {
      unint64_t v48 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      unint64_t v49 = v48 | (v42 << 6);
LABEL_24:
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, *(void *)(v41 + 56) + *(void *)(v7 + 72) * v49, v6);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v5, 1, 1);
      CheckedContinuation.resume(returning:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      continue;
    }
    break;
  }
  int64_t v50 = v42 + 1;
  if (__OFADD__(v42, 1))
  {
    __break(1u);
    goto LABEL_55;
  }
  if (v50 >= v47) {
    goto LABEL_39;
  }
  unint64_t v51 = *(void *)(v43 + 8 * v50);
  ++v42;
  if (v51) {
    goto LABEL_38;
  }
  int64_t v42 = v50 + 1;
  if (v50 + 1 >= v47) {
    goto LABEL_39;
  }
  unint64_t v51 = *(void *)(v43 + 8 * v42);
  if (v51) {
    goto LABEL_38;
  }
  int64_t v42 = v50 + 2;
  if (v50 + 2 >= v47) {
    goto LABEL_39;
  }
  unint64_t v51 = *(void *)(v43 + 8 * v42);
  if (v51) {
    goto LABEL_38;
  }
  int64_t v52 = v50 + 3;
  if (v52 >= v47)
  {
LABEL_39:
    swift_release();
    uint64_t v10 = v62;
    uint64_t v27 = v61;
    uint64_t v17 = v60;
    goto LABEL_6;
  }
  unint64_t v51 = *(void *)(v43 + 8 * v52);
  int64_t v42 = v52;
  if (v51)
  {
LABEL_38:
    unint64_t v46 = (v51 - 1) & v51;
    unint64_t v49 = __clz(__rbit64(v51)) + (v42 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v42 = v52 + 1;
    if (__OFADD__(v52, 1)) {
      break;
    }
    if (v42 >= v47) {
      goto LABEL_39;
    }
    unint64_t v51 = *(void *)(v43 + 8 * v42);
    ++v52;
    if (v51) {
      goto LABEL_38;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t AsyncCache.__deallocating_deinit()
{
  AsyncCache.deinit();
  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for AsyncCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AsyncCache.CacheState()
{
  v2[4] = MEMORY[0x263F8CF50] + 64;
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AsyncCache.CacheState(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = v5;
  if (((v6 + 8) & (unint64_t)~v6) + *(void *)(v4 + 64) <= 8) {
    unint64_t v7 = 8;
  }
  else {
    unint64_t v7 = ((v5 + 8) & ~(unint64_t)v5) + *(void *)(v4 + 64);
  }
  int v8 = v5 & 0x100000;
  if (v6 > 7 || v8 != 0 || v7 + 1 > 0x18)
  {
    uint64_t v11 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    unsigned int v12 = a2[v7];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_22;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_22;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_22;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_22:
          int v16 = (v15 | (v13 << (8 * v7))) + 2;
          unsigned int v12 = v15 + 2;
          if (v7 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    *a1 = *(void *)a2;
    if (v12 == 1)
    {
      (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v6 + 8) & ~v6, (unint64_t)&a2[v6 + 8] & ~v6);
      *((unsigned char *)v3 + v7) = 1;
    }
    else
    {
      *((unsigned char *)a1 + v7) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v3;
}

uint64_t destroy for AsyncCache.CacheState(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = ((v3 + 8) & ~v3) + *(void *)(v2 + 64);
  if (v4 <= 8) {
    unint64_t v4 = 8;
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    return (*(uint64_t (**)(unint64_t))(v2 + 8))((unint64_t)&a1[v3 + 8] & ~v3);
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for AsyncCache.CacheState(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  if (((v5 + 8) & (unint64_t)~v5) + *(void *)(v4 + 64) <= 8) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = ((v5 + 8) & ~v5) + *(void *)(v4 + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  *a1 = *(void *)a2;
  if (v7 == 1)
  {
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, (unint64_t)&a2[v5 + 8] & ~v5);
    char v12 = 1;
  }
  else
  {
    swift_bridgeObjectRetain();
    char v12 = 0;
  }
  *((unsigned char *)a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithCopy for AsyncCache.CacheState(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    if (((v7 + 8) & (unint64_t)~v7) + *(void *)(v6 + 64) <= 8) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = ((v7 + 8) & ~v7) + *(void *)(v6 + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_14;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_14:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v14 = ~v7;
    if (v9 == 1) {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&a1[v7 + 8] & v14, v5);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v15 = a2[v8];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_28;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_28:
          int v19 = (v18 | (v16 << (8 * v8))) + 2;
          unsigned int v15 = v18 + 2;
          if (v8 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    *(void *)a1 = *(void *)a2;
    if (v15 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((unint64_t)&a1[v7 + 8] & v14, (unint64_t)&a2[v7 + 8] & v14, v5);
      a1[v8] = 1;
    }
    else
    {
      a1[v8] = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

void *initializeWithTake for AsyncCache.CacheState(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  if (((v5 + 8) & (unint64_t)~v5) + *(void *)(v4 + 64) <= 8) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = ((v5 + 8) & ~v5) + *(void *)(v4 + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  *a1 = *(void *)a2;
  if (v7 == 1)
  {
    (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + v5 + 8) & ~v5, (unint64_t)&a2[v5 + 8] & ~v5);
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
  }
  *((unsigned char *)a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithTake for AsyncCache.CacheState(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    if (((v7 + 8) & (unint64_t)~v7) + *(void *)(v6 + 64) <= 8) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = ((v7 + 8) & ~v7) + *(void *)(v6 + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_14;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_14:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v14 = ~v7;
    if (v9 == 1) {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&a1[v7 + 8] & v14, v5);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v15 = a2[v8];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_28;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_28:
          int v19 = (v18 | (v16 << (8 * v8))) + 2;
          unsigned int v15 = v18 + 2;
          if (v8 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    *(void *)a1 = *(void *)a2;
    if (v15 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((unint64_t)&a1[v7 + 8] & v14, (unint64_t)&a2[v7 + 8] & v14, v5);
      char v20 = 1;
    }
    else
    {
      char v20 = 0;
    }
    a1[v8] = v20;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncCache.CacheState(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = 8;
  if (((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) > 8)
    unint64_t v3 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void storeEnumTagSinglePayload for AsyncCache.CacheState(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 24) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x20C50CB34);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for AsyncCache.CacheState(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = 8;
  if (((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64) > 8)
    unint64_t v2 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void destructiveInjectEnumTag for AsyncCache.CacheState(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (a2 > 1)
  {
    if (v4 <= 8) {
      size_t v5 = 8;
    }
    else {
      size_t v5 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80))
    }
         + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
    unsigned int v6 = a2 - 2;
    if (v5 < 4)
    {
      unsigned int v7 = v6 >> (8 * v5);
      int v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if (v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if (v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    if (v4 <= 8) {
      unint64_t v4 = 8;
    }
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for AsyncCache.CacheState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AsyncCache.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance AsyncCache<A, B>()
{
  return AsyncCache.unownedExecutor.getter();
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

void specialized AppearanceStreamViewSupport.setupAppearanceStreamIfNeeded()()
{
  unint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  size_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRKeyPath();
  uint64_t v53 = *(void *)(v6 - 8);
  double v7 = MEMORY[0x270FA5388](v6);
  int v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = direct field offset for ShapeView.appearanceStreamView;
  if (!*(void *)&v0[direct field offset for ShapeView.appearanceStreamView])
  {
    int v11 = (void *)MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas], v7);
    if (v11)
    {
      int v12 = v11;
      int v13 = (void *)MEMORY[0x263F8EED0];
      uint64_t v14 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x728))();

      id v52 = v14;
      if (v14)
      {
        unsigned int v15 = &v1[*(void *)((*v13 & *(void *)v1) + 0x380)];
        swift_beginAccess();
        unsigned int v16 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 16);
        uint64_t v48 = v3 + 16;
        unint64_t v49 = v15;
        int64_t v47 = v16;
        v16(v5, v15, v2);
        uint64_t v50 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
        Capsule<>.rootID.getter();
        unint64_t v46 = *(void (**)(char *, uint64_t))(v3 + 8);
        uint64_t v51 = v3 + 8;
        v46(v5, v2);
        id v17 = v52;
        id v18 = objc_msgSend(v52, sel_annotations);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
        uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v45 = v10;
        unint64_t v20 = v19;

        MEMORY[0x270FA5388](v21);
        *(&v45 - 2) = (uint64_t)v9;
        id v22 = specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:), (uint64_t)(&v45 - 4), v20);

        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v6);
        if (v22)
        {
          uint64_t v23 = v1;
          type metadata accessor for CanvasElementPDFAnnotation();
          unint64_t v24 = (void *)swift_dynamicCastClass();
          if (v24)
          {
            unint64_t v25 = v24;
            if (objc_msgSend(v24, sel_hasAppearanceStream))
            {
              uint64_t v26 = unk_26C14CD90;
              if ((unk_26C14CD90 & ~qword_26C14CD88) == 0) {
                uint64_t v26 = 0;
              }
              uint64_t v27 = qword_26C14CD98;
              if ((qword_26C14CD98 & ~(v26 | qword_26C14CD88)) == 0) {
                uint64_t v27 = 0;
              }
              uint64_t v28 = v27 | v26 | qword_26C14CD88;
              uint64_t v29 = v47(v5, v49, v2);
              MEMORY[0x270FA5388](v29);
              uint64_t v30 = type metadata accessor for Shape();
              uint64_t v31 = v50;
              *(&v45 - 4) = v30;
              *(&v45 - 3) = v31;
              *(&v45 - 2) = (uint64_t)&protocol witness table for Shape;
              swift_getKeyPath();
              Capsule<>.subscript.getter();
              swift_release();
              v46(v5, v2);
              if ((v28 & ~v55) == 0)
              {
                unint64_t v32 = (objc_class *)type metadata accessor for CanvasElementPDFAnnotationAppearanceStreamView();
                id v33 = objc_allocWithZone(v32);
                swift_unknownObjectWeakInit();
                id v34 = v22;
                objc_msgSend(v25, sel_bounds);
                CGRect v57 = CGRectIntegral(v56);
                v54.receiver = v33;
                v54.super_class = v32;
                id v35 = objc_msgSendSuper2(&v54, sel_initWithFrame_, v57.origin.x, v57.origin.y, v57.size.width, v57.size.height);
                swift_unknownObjectWeakAssign();
                id v36 = v35;
                id v37 = objc_msgSend(v36, sel_layer);
                objc_msgSend(v37, sel_setGeometryFlipped_, 1);

                uint64_t v38 = self;
                id v39 = v36;
                id v40 = objc_msgSend(v38, sel_clearColor);
                objc_msgSend(v39, sel_setBackgroundColor_, v40);

                objc_msgSend(v23, sel_addSubview_, v39);
                uint64_t v41 = v45;
                int64_t v42 = *(void **)&v23[v45];
                *(void *)&v23[v45] = v39;
                id v22 = v39;

                id v43 = ShapeView.groupLayer.getter();
                objc_msgSend(v43, sel_setHidden_, *(void *)&v23[v41] != 0);

                uint64_t v44 = *(void **)&v23[direct field offset for ShapeView._textBoxView];
                if (v44) {
                  objc_msgSend(v44, sel_setHidden_, *(void *)&v23[v41] != 0);
                }
              }
            }
          }
        }
      }
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  objc_super v43;
  CGRect v44;
  CGRect v45;

  unint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  size_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CRKeyPath();
  double v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v42 = direct field offset for UnknownCanvasElementView.appearanceStreamView;
  if (!*(void *)((char *)v0 + direct field offset for UnknownCanvasElementView.appearanceStreamView))
  {
    int v11 = (void *)MEMORY[0x210550400]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v8);
    if (v11)
    {
      int v12 = v11;
      int v13 = (void *)MEMORY[0x263F8EED0];
      uint64_t v14 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v11) + 0x728))();

      if (v14)
      {
        unsigned int v15 = (char *)v1 + *(void *)((*v13 & *v1) + 0x380);
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v15, v2);
        _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
        Capsule<>.rootID.getter();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        unsigned int v16 = objc_msgSend(v14, sel_annotations);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
        id v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        MEMORY[0x270FA5388](v18);
        *(&v41 - 2) = (uint64_t)v10;
        uint64_t v19 = specialized Sequence.first(where:)((uint64_t (*)(id *))closure #1 in PaperKitPDFPage.annotationFor(id:)partial apply, (uint64_t)(&v41 - 4), v17);

        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        if (v19)
        {
          type metadata accessor for CanvasElementPDFAnnotation();
          unint64_t v20 = (void *)swift_dynamicCastClass();
          if (v20)
          {
            uint64_t v21 = v20;
            if (objc_msgSend(v20, sel_hasAppearanceStream))
            {
              id v22 = unk_26C14CEB8;
              if ((unk_26C14CEB8 & ~qword_26C14CEB0) == 0) {
                id v22 = 0;
              }
              uint64_t v23 = qword_26C14CEC0;
              if ((qword_26C14CEC0 & ~(v22 | qword_26C14CEB0)) == 0) {
                uint64_t v23 = 0;
              }
              unint64_t v24 = v23 | v22 | qword_26C14CEB0;
              unint64_t v25 = unk_26C14CEF0;
              if ((unk_26C14CEF0 & ~qword_26C14CEE8) == 0) {
                unint64_t v25 = 0;
              }
              uint64_t v26 = v25 | qword_26C14CEE8;
              uint64_t v28 = qword_26C14CEF8;
              uint64_t v27 = unk_26C14CF00;
              if ((qword_26C14CEF8 & ~v26) == 0) {
                uint64_t v28 = 0;
              }
              uint64_t v29 = v28 | v26;
              if ((unk_26C14CF00 & ~v29) == 0) {
                uint64_t v27 = 0;
              }
              if ((v24 & ~(v27 | v29)) == 0)
              {
                uint64_t v30 = (objc_class *)type metadata accessor for CanvasElementPDFAnnotationAppearanceStreamView();
                uint64_t v31 = objc_allocWithZone(v30);
                swift_unknownObjectWeakInit();
                unint64_t v32 = v19;
                objc_msgSend(v21, sel_bounds);
                uint64_t v45 = CGRectIntegral(v44);
                v43.receiver = v31;
                v43.super_class = v30;
                id v33 = objc_msgSendSuper2(&v43, sel_initWithFrame_, v45.origin.x, v45.origin.y, v45.size.width, v45.size.height);
                swift_unknownObjectWeakAssign();
                id v34 = v33;
                id v35 = objc_msgSend(v34, sel_layer);
                objc_msgSend(v35, sel_setGeometryFlipped_, 1);

                id v36 = self;
                id v37 = v34;
                uint64_t v38 = objc_msgSend(v36, sel_clearColor);
                objc_msgSend(v37, sel_setBackgroundColor_, v38);

                objc_msgSend(v1, sel_addSubview_, v37);
                id v39 = v42;
                id v40 = *(void **)((char *)v1 + v42);
                *(void *)((char *)v1 + v42) = v37;
                uint64_t v19 = v37;

                objc_msgSend(*(id *)((char *)v1 + direct field offset for UnknownCanvasElementView.thumbnailView), sel_setHidden_, *(void *)((char *)v1 + v39) != 0);
                objc_msgSend(*(id *)((char *)v1 + direct field offset for UnknownCanvasElementView.blurEffectView), sel_setHidden_, *(void *)((char *)v1 + v39) != 0);
              }
            }
          }
        }
      }
    }
  }
}

void specialized AppearanceStreamViewSupport.updateAppearanceStreamView()()
{
  uint64_t v1 = direct field offset for UnknownCanvasElementView.appearanceStreamView;
  uint64_t v2 = *(void *)&v0[direct field offset for UnknownCanvasElementView.appearanceStreamView];
  if (v2)
  {
    uint64_t v3 = unk_26C14CD50;
    if ((unk_26C14CD50 & ~qword_26C14CD48) == 0) {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 | qword_26C14CD48;
    uint64_t v6 = qword_26C14CD58;
    int v5 = qword_26C14CD60;
    if ((qword_26C14CD58 & ~v4) == 0) {
      uint64_t v6 = 0;
    }
    uint64_t v7 = v6 | v4;
    if ((qword_26C14CD60 & ~v7) == 0) {
      int v5 = 0;
    }
    id v22 = *(id *)&v0[direct field offset for UnknownCanvasElementView.appearanceStreamView];
    if (((v5 | v7) & 0x20) != 0)
    {
      int v9 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit46CanvasElementPDFAnnotationAppearanceStreamView_annotation);
      id v10 = v22;
      int v11 = v10;
      if (v9)
      {
        objc_msgSend(v9, sel_bounds);
        CGFloat v13 = v12;
        CGFloat v15 = v14;
        CGFloat v17 = v16;
        CGFloat v19 = v18;

        v24.origin.CGFloat x = v13;
        v24.origin.CGFloat y = v15;
        v24.size.double width = v17;
        v24.size.double height = v19;
        CGRect v25 = CGRectIntegral(v24);
      }
      else
      {
        objc_msgSend(v10, sel_frame);
      }
      double width = v25.size.width;
      double height = v25.size.height;
      objc_msgSend(v0, sel_bounds, v25.origin.x, v25.origin.y);
      objc_msgSend(v11, sel_setFrame_, 0.0, CGRectGetMaxY(v26) - height, width, height);
    }
    else
    {
      objc_msgSend(v22, sel_removeFromSuperview);
      uint64_t v8 = *(void **)&v0[v1];
      *(void *)&v0[v1] = 0;

      objc_msgSend(*(id *)&v0[direct field offset for UnknownCanvasElementView.thumbnailView], sel_setHidden_, *(void *)&v0[v1] != 0);
      objc_msgSend(*(id *)&v0[direct field offset for UnknownCanvasElementView.blurEffectView], sel_setHidden_, *(void *)&v0[v1] != 0);
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double width;
  double height;
  char *v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ShapeSecondaryProperties();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v36 - v9;
  int v11 = direct field offset for ShapeView.appearanceStreamView;
  double v12 = *(void **)((char *)v1 + direct field offset for ShapeView.appearanceStreamView);
  if (v12)
  {
    id v39 = v8;
    id v40 = v2;
    uint64_t v41 = v4;
    CGFloat v13 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    id v37 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v38 = v13;
    id v36 = v6 + 16;
    double v14 = v37(v10, v13, v5);
    MEMORY[0x270FA5388](v14);
    *(&v36 - 4) = type metadata accessor for Shape();
    *(&v36 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    *(&v36 - 2) = (uint64_t)&protocol witness table for Shape;
    swift_getKeyPath();
    CGFloat v15 = v12;
    Capsule<>.subscript.getter();
    swift_release();
    double v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v10, v5);
    if ((v42 & 0x20) != 0)
    {
      unint64_t v20 = (void *)MEMORY[0x210550400](&v15[OBJC_IVAR____TtC8PaperKit46CanvasElementPDFAnnotationAppearanceStreamView_annotation]);
      if (v20)
      {
        uint64_t v21 = v20;
        objc_msgSend(v20, sel_bounds);
        uint64_t v23 = v22;
        CGRect v25 = v24;
        uint64_t v27 = v26;
        uint64_t v29 = v28;

        v46.origin.CGFloat x = v23;
        v46.origin.CGFloat y = v25;
        v46.size.double width = v27;
        v46.size.double height = v29;
        int64_t v47 = CGRectIntegral(v46);
      }
      else
      {
        objc_msgSend(v15, sel_frame);
      }
      double width = v47.size.width;
      double height = v47.size.height;
      unint64_t v32 = v39;
      ((void (*)(char *, char *, uint64_t, __n128, __n128))v37)(v39, v38, v5, (__n128)v47.origin, *(__n128 *)&v47.origin.y);
      swift_getKeyPath();
      id v33 = (uint64_t)v41;
      Capsule<>.subscript.getter();
      swift_release();
      v16(v32, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
      CRRegister.wrappedValue.getter();
      if (v45)
      {
        id v34 = v43;
        id v35 = v44;
        swift_bridgeObjectRelease();
      }
      else
      {
        id v35 = 0.0;
        id v34 = 0.0;
      }
      outlined destroy of Shape(v33, (uint64_t (*)(void))type metadata accessor for ShapeSecondaryProperties);
      objc_msgSend(v1, sel_bounds);
      objc_msgSend(v15, sel_setFrame_, v34, CGRectGetMaxY(v48) - height - v35, width, height);
    }
    else
    {
      objc_msgSend(v15, sel_removeFromSuperview);
      CGFloat v17 = *(void **)((char *)v1 + v11);
      *(void *)((char *)v1 + v11) = 0;

      double v18 = ShapeView.groupLayer.getter();
      objc_msgSend(v18, sel_setHidden_, *(void *)((char *)v1 + v11) != 0);

      CGFloat v19 = *(void **)((char *)v1 + direct field offset for ShapeView._textBoxView);
      if (v19) {
        objc_msgSend(v19, sel_setHidden_, *(void *)((char *)v1 + v11) != 0);
      }
    }
  }
}

id specialized CanvasElementView.modelCoordinateSpace.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  int v9 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x88))(v10);
  if (v11)
  {
    double v12 = (void *)v11;
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v9, v4);
    v19[0] = 4;
    CGFloat v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v8 & *v12) + 0x550);
    uint64_t v14 = type metadata accessor for Image();
    uint64_t v15 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    v13(v7, v19, v14, v15);
    v19[0] = 4;
    (*(void (**)(unsigned char *))((*v8 & *v12) + 0x530))(v19);

    uint64_t v11 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x288))(v11);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (*v13)(unsigned char *, unsigned char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[16];
  uint64_t v18;
  unsigned char v19[24];

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  int v9 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x88))(v10);
  if (v11)
  {
    double v12 = (void *)v11;
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v9, v4);
    v19[0] = 4;
    CGFloat v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v8 & *v12) + 0x550);
    uint64_t v14 = type metadata accessor for TextBox();
    uint64_t v15 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
    v13(v7, v19, v14, v15);
    v19[0] = 4;
    (*(void (**)(unsigned char *))((*v8 & *v12) + 0x530))(v19);

    uint64_t v11 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x288))(v11);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (*v13)(unsigned char *, unsigned char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[16];
  uint64_t v18;
  unsigned char v19[24];

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  int v9 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x88))(v10);
  if (v11)
  {
    double v12 = (void *)v11;
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v9, v4);
    v19[0] = 4;
    CGFloat v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v8 & *v12) + 0x550);
    uint64_t v14 = type metadata accessor for GraphElement();
    uint64_t v15 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
    v13(v7, v19, v14, v15);
    v19[0] = 4;
    (*(void (**)(unsigned char *))((*v8 & *v12) + 0x530))(v19);

    uint64_t v11 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x288))(v11);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (*v13)(unsigned char *, unsigned char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[16];
  uint64_t v18;
  unsigned char v19[24];

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  int v9 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x88))(v10);
  if (v11)
  {
    double v12 = (void *)v11;
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v9, v4);
    v19[0] = 4;
    CGFloat v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v8 & *v12) + 0x550);
    uint64_t v14 = type metadata accessor for Link();
    uint64_t v15 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
    v13(v7, v19, v14, v15);
    v19[0] = 4;
    (*(void (**)(unsigned char *))((*v8 & *v12) + 0x530))(v19);

    uint64_t v11 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x288))(v11);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (*v13)(unsigned char *, unsigned char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[16];
  uint64_t v18;
  unsigned char v19[24];

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  int v9 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x88))(v10);
  if (v11)
  {
    double v12 = (void *)v11;
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v9, v4);
    v19[0] = 4;
    CGFloat v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v8 & *v12) + 0x550);
    uint64_t v14 = type metadata accessor for Signature();
    uint64_t v15 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
    v13(v7, v19, v14, v15);
    v19[0] = 4;
    (*(void (**)(unsigned char *))((*v8 & *v12) + 0x530))(v19);

    uint64_t v11 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x288))(v11);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (*v13)(unsigned char *, unsigned char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[16];
  uint64_t v18;
  unsigned char v19[24];

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  int v9 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x88))(v10);
  if (v11)
  {
    double v12 = (void *)v11;
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v9, v4);
    v19[0] = 4;
    CGFloat v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v8 & *v12) + 0x550);
    uint64_t v14 = type metadata accessor for Paper();
    uint64_t v15 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    v13(v7, v19, v14, v15);
    v19[0] = 4;
    (*(void (**)(unsigned char *))((*v8 & *v12) + 0x530))(v19);

    uint64_t v11 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x288))(v11);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (*v13)(unsigned char *, unsigned char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[16];
  uint64_t v18;
  unsigned char v19[24];

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  int v9 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x88))(v10);
  if (v11)
  {
    double v12 = (void *)v11;
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v9, v4);
    v19[0] = 4;
    CGFloat v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v8 & *v12) + 0x550);
    uint64_t v14 = type metadata accessor for PaperDocumentPage();
    uint64_t v15 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
    v13(v7, v19, v14, v15);
    v19[0] = 4;
    (*(void (**)(unsigned char *))((*v8 & *v12) + 0x530))(v19);

    uint64_t v11 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x288))(v11);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (*v13)(unsigned char *, unsigned char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[16];
  uint64_t v18;
  unsigned char v19[24];

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  int v9 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x88))(v10);
  if (v11)
  {
    double v12 = (void *)v11;
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v9, v4);
    v19[0] = 4;
    CGFloat v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v8 & *v12) + 0x550);
    uint64_t v14 = type metadata accessor for UnknownCanvasElement();
    uint64_t v15 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
    v13(v7, v19, v14, v15);
    v19[0] = 4;
    (*(void (**)(unsigned char *))((*v8 & *v12) + 0x530))(v19);

    uint64_t v11 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x288))(v11);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (*v13)(unsigned char *, unsigned char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[16];
  uint64_t v18;
  unsigned char v19[24];

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v8 = (void *)MEMORY[0x263F8EED0];
  int v9 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  uint64_t v10 = swift_endAccess();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x88))(v10);
  if (v11)
  {
    double v12 = (void *)v11;
    (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v9, v4);
    v19[0] = 4;
    CGFloat v13 = *(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))((*v8 & *v12) + 0x550);
    uint64_t v14 = type metadata accessor for Shape();
    uint64_t v15 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    v13(v7, v19, v14, v15);
    v19[0] = 4;
    (*(void (**)(unsigned char *))((*v8 & *v12) + 0x530))(v19);

    uint64_t v11 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x288))(v11);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

void specialized CanvasElementView.setupAccessibility()()
{
  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_super v54 = v0;
  uint64_t v55 = swift_allocObject();
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v62._countAndFlagsBits = 0xD000000000000037;
  v62._object = (void *)0x800000020C858850;
  v2._object = (void *)0x800000020C858830;
  v2._countAndFlagsBits = 0xD000000000000010;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v62);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v6 + 24) = v1;
  id v7 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v8 = (void *)MEMORY[0x21054D080](v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_418;
  int v9 = _Block_copy(&aBlock);
  id v53 = objc_msgSend(v7, sel_initWithName_actionHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  v10._countAndFlagsBits = 0xD000000000000017;
  v63._countAndFlagsBits = 0xD00000000000003ELL;
  v63._object = (void *)0x800000020C8588E0;
  v10._object = (void *)0x800000020C8588C0;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v63);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v14 + 24) = v1;
  id v15 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  double v16 = (void *)MEMORY[0x21054D080](v13._countAndFlagsBits, v13._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v14;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_425;
  CGFloat v17 = _Block_copy(&aBlock);
  id v52 = objc_msgSend(v15, sel_initWithName_actionHandler_, v16, v17);

  _Block_release(v17);
  swift_release();
  v64._object = (void *)0x800000020C858920;
  v18._countAndFlagsBits = 0x705520656C616353;
  v18._object = (void *)0xE800000000000000;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v64);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v22 + 24) = v55;
  id v23 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  CGRect v24 = (void *)MEMORY[0x21054D080](v21._countAndFlagsBits, v21._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_432;
  CGRect v25 = _Block_copy(&aBlock);
  id v51 = objc_msgSend(v23, sel_initWithName_actionHandler_, v24, v25);

  _Block_release(v25);
  swift_release();
  v65._countAndFlagsBits = 0xD000000000000031;
  v65._object = (void *)0x800000020C858950;
  v26._countAndFlagsBits = 0x6F4420656C616353;
  v26._object = (void *)0xEA00000000006E77;
  v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v27.value._object = (void *)0xEB00000000656C62;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v65);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v30 + 24) = v55;
  id v31 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  unint64_t v32 = (void *)MEMORY[0x21054D080](v29._countAndFlagsBits, v29._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_439;
  id v33 = _Block_copy(&aBlock);
  id v34 = objc_msgSend(v31, sel_initWithName_actionHandler_, v32, v33);

  _Block_release(v33);
  swift_release();
  v66._object = (void *)0x800000020C8589B0;
  v35._object = (void *)0x800000020C858990;
  v35._countAndFlagsBits = 0xD000000000000010;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v66);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v40 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v41 = (void *)MEMORY[0x21054D080](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v39;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_443;
  int64_t v42 = _Block_copy(&aBlock);
  id v43 = objc_msgSend(v40, sel_initWithName_actionHandler_, v41, v42);

  _Block_release(v42);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_20C83E2F0;
  *(void *)(v44 + 32) = v43;
  *(void *)(v44 + 40) = v53;
  *(void *)(v44 + 48) = v52;
  *(void *)(v44 + 56) = v51;
  *(void *)(v44 + 64) = v34;
  uint64_t aBlock = v44;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  id v45 = v43;
  id v46 = v53;
  id v47 = v52;
  id v48 = v51;
  id v49 = v34;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v54, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();
}

{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  Class isa;
  id v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, void *);
  void *v59;
  void *v60;
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;

  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_super v54 = v0;
  uint64_t v55 = swift_allocObject();
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v62._countAndFlagsBits = 0xD000000000000037;
  v62._object = (void *)0x800000020C858850;
  v2._object = (void *)0x800000020C858830;
  v2._countAndFlagsBits = 0xD000000000000010;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v62);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v6 + 24) = v1;
  id v7 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v8 = (void *)MEMORY[0x21054D080](v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for closure #3 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_39;
  int v9 = _Block_copy(&aBlock);
  id v53 = objc_msgSend(v7, sel_initWithName_actionHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  v10._countAndFlagsBits = 0xD000000000000017;
  v63._countAndFlagsBits = 0xD00000000000003ELL;
  v63._object = (void *)0x800000020C8588E0;
  v10._object = (void *)0x800000020C8588C0;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v63);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v14 + 24) = v1;
  id v15 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  double v16 = (void *)MEMORY[0x21054D080](v13._countAndFlagsBits, v13._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for closure #4 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v14;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_111_0;
  CGFloat v17 = _Block_copy(&aBlock);
  id v52 = objc_msgSend(v15, sel_initWithName_actionHandler_, v16, v17);

  _Block_release(v17);
  swift_release();
  v64._object = (void *)0x800000020C858920;
  v18._countAndFlagsBits = 0x705520656C616353;
  v18._object = (void *)0xE800000000000000;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v64);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v22 + 24) = v55;
  id v23 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  CGRect v24 = (void *)MEMORY[0x21054D080](v21._countAndFlagsBits, v21._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for closure #5 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_117;
  CGRect v25 = _Block_copy(&aBlock);
  id v51 = objc_msgSend(v23, sel_initWithName_actionHandler_, v24, v25);

  _Block_release(v25);
  swift_release();
  v65._countAndFlagsBits = 0xD000000000000031;
  v65._object = (void *)0x800000020C858950;
  v26._countAndFlagsBits = 0x6F4420656C616353;
  v26._object = (void *)0xEA00000000006E77;
  v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v27.value._object = (void *)0xEB00000000656C62;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v65);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v30 + 24) = v55;
  id v31 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  unint64_t v32 = (void *)MEMORY[0x21054D080](v29._countAndFlagsBits, v29._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for closure #6 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_123;
  id v33 = _Block_copy(&aBlock);
  id v34 = objc_msgSend(v31, sel_initWithName_actionHandler_, v32, v33);

  _Block_release(v33);
  swift_release();
  v66._object = (void *)0x800000020C8589B0;
  v35._object = (void *)0x800000020C858990;
  v35._countAndFlagsBits = 0xD000000000000010;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v66);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v40 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v41 = (void *)MEMORY[0x21054D080](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v39;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_127;
  int64_t v42 = _Block_copy(&aBlock);
  id v43 = objc_msgSend(v40, sel_initWithName_actionHandler_, v41, v42);

  _Block_release(v42);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_20C83E2F0;
  *(void *)(v44 + 32) = v43;
  *(void *)(v44 + 40) = v53;
  *(void *)(v44 + 48) = v52;
  *(void *)(v44 + 56) = v51;
  *(void *)(v44 + 64) = v34;
  uint64_t aBlock = v44;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  id v45 = v43;
  id v46 = v53;
  id v47 = v52;
  id v48 = v51;
  id v49 = v34;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v54, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();
}

{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  Class isa;
  id v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, void *);
  void *v59;
  BOOL (*v60)(uint64_t);
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;

  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_super v54 = v0;
  uint64_t v55 = swift_allocObject();
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v62._countAndFlagsBits = 0xD000000000000037;
  v62._object = (void *)0x800000020C858850;
  v2._object = (void *)0x800000020C858830;
  v2._countAndFlagsBits = 0xD000000000000010;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v62);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v6 + 24) = v1;
  id v7 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v8 = (void *)MEMORY[0x21054D080](v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_346;
  int v9 = _Block_copy(&aBlock);
  id v53 = objc_msgSend(v7, sel_initWithName_actionHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  v10._countAndFlagsBits = 0xD000000000000017;
  v63._countAndFlagsBits = 0xD00000000000003ELL;
  v63._object = (void *)0x800000020C8588E0;
  v10._object = (void *)0x800000020C8588C0;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v63);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v14 + 24) = v1;
  id v15 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  double v16 = (void *)MEMORY[0x21054D080](v13._countAndFlagsBits, v13._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v14;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_353;
  CGFloat v17 = _Block_copy(&aBlock);
  id v52 = objc_msgSend(v15, sel_initWithName_actionHandler_, v16, v17);

  _Block_release(v17);
  swift_release();
  v64._object = (void *)0x800000020C858920;
  v18._countAndFlagsBits = 0x705520656C616353;
  v18._object = (void *)0xE800000000000000;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v64);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v22 + 24) = v55;
  id v23 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  CGRect v24 = (void *)MEMORY[0x21054D080](v21._countAndFlagsBits, v21._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_360;
  CGRect v25 = _Block_copy(&aBlock);
  id v51 = objc_msgSend(v23, sel_initWithName_actionHandler_, v24, v25);

  _Block_release(v25);
  swift_release();
  v65._countAndFlagsBits = 0xD000000000000031;
  v65._object = (void *)0x800000020C858950;
  v26._countAndFlagsBits = 0x6F4420656C616353;
  v26._object = (void *)0xEA00000000006E77;
  v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v27.value._object = (void *)0xEB00000000656C62;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v65);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v30 + 24) = v55;
  id v31 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  unint64_t v32 = (void *)MEMORY[0x21054D080](v29._countAndFlagsBits, v29._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_367;
  id v33 = _Block_copy(&aBlock);
  id v34 = objc_msgSend(v31, sel_initWithName_actionHandler_, v32, v33);

  _Block_release(v33);
  swift_release();
  v66._object = (void *)0x800000020C8589B0;
  v35._object = (void *)0x800000020C858990;
  v35._countAndFlagsBits = 0xD000000000000010;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v66);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v40 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v41 = (void *)MEMORY[0x21054D080](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v39;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_371;
  int64_t v42 = _Block_copy(&aBlock);
  id v43 = objc_msgSend(v40, sel_initWithName_actionHandler_, v41, v42);

  _Block_release(v42);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_20C83E2F0;
  *(void *)(v44 + 32) = v43;
  *(void *)(v44 + 40) = v53;
  *(void *)(v44 + 48) = v52;
  *(void *)(v44 + 56) = v51;
  *(void *)(v44 + 64) = v34;
  uint64_t aBlock = v44;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  id v45 = v43;
  id v46 = v53;
  id v47 = v52;
  id v48 = v51;
  id v49 = v34;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v54, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();
}

{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  Class isa;
  id v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, void *);
  void *v59;
  BOOL (*v60)(uint64_t);
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;

  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_super v54 = v0;
  uint64_t v55 = swift_allocObject();
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v62._countAndFlagsBits = 0xD000000000000037;
  v62._object = (void *)0x800000020C858850;
  v2._object = (void *)0x800000020C858830;
  v2._countAndFlagsBits = 0xD000000000000010;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v62);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v6 + 24) = v1;
  id v7 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v8 = (void *)MEMORY[0x21054D080](v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_382;
  int v9 = _Block_copy(&aBlock);
  id v53 = objc_msgSend(v7, sel_initWithName_actionHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  v10._countAndFlagsBits = 0xD000000000000017;
  v63._countAndFlagsBits = 0xD00000000000003ELL;
  v63._object = (void *)0x800000020C8588E0;
  v10._object = (void *)0x800000020C8588C0;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v63);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v14 + 24) = v1;
  id v15 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  double v16 = (void *)MEMORY[0x21054D080](v13._countAndFlagsBits, v13._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v14;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_389_0;
  CGFloat v17 = _Block_copy(&aBlock);
  id v52 = objc_msgSend(v15, sel_initWithName_actionHandler_, v16, v17);

  _Block_release(v17);
  swift_release();
  v64._object = (void *)0x800000020C858920;
  v18._countAndFlagsBits = 0x705520656C616353;
  v18._object = (void *)0xE800000000000000;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v64);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v22 + 24) = v55;
  id v23 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  CGRect v24 = (void *)MEMORY[0x21054D080](v21._countAndFlagsBits, v21._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_396;
  CGRect v25 = _Block_copy(&aBlock);
  id v51 = objc_msgSend(v23, sel_initWithName_actionHandler_, v24, v25);

  _Block_release(v25);
  swift_release();
  v65._countAndFlagsBits = 0xD000000000000031;
  v65._object = (void *)0x800000020C858950;
  v26._countAndFlagsBits = 0x6F4420656C616353;
  v26._object = (void *)0xEA00000000006E77;
  v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v27.value._object = (void *)0xEB00000000656C62;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v65);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v30 + 24) = v55;
  id v31 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  unint64_t v32 = (void *)MEMORY[0x21054D080](v29._countAndFlagsBits, v29._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_403;
  id v33 = _Block_copy(&aBlock);
  id v34 = objc_msgSend(v31, sel_initWithName_actionHandler_, v32, v33);

  _Block_release(v33);
  swift_release();
  v66._object = (void *)0x800000020C8589B0;
  v35._object = (void *)0x800000020C858990;
  v35._countAndFlagsBits = 0xD000000000000010;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v66);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v40 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v41 = (void *)MEMORY[0x21054D080](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v39;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_407;
  int64_t v42 = _Block_copy(&aBlock);
  id v43 = objc_msgSend(v40, sel_initWithName_actionHandler_, v41, v42);

  _Block_release(v42);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_20C83E2F0;
  *(void *)(v44 + 32) = v43;
  *(void *)(v44 + 40) = v53;
  *(void *)(v44 + 48) = v52;
  *(void *)(v44 + 56) = v51;
  *(void *)(v44 + 64) = v34;
  uint64_t aBlock = v44;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  id v45 = v43;
  id v46 = v53;
  id v47 = v52;
  id v48 = v51;
  id v49 = v34;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v54, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();
}

{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  Class isa;
  id v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, void *);
  void *v59;
  BOOL (*v60)(uint64_t);
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;

  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_super v54 = v0;
  uint64_t v55 = swift_allocObject();
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v62._countAndFlagsBits = 0xD000000000000037;
  v62._object = (void *)0x800000020C858850;
  v2._object = (void *)0x800000020C858830;
  v2._countAndFlagsBits = 0xD000000000000010;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v62);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v6 + 24) = v1;
  id v7 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v8 = (void *)MEMORY[0x21054D080](v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_310;
  int v9 = _Block_copy(&aBlock);
  id v53 = objc_msgSend(v7, sel_initWithName_actionHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  v10._countAndFlagsBits = 0xD000000000000017;
  v63._countAndFlagsBits = 0xD00000000000003ELL;
  v63._object = (void *)0x800000020C8588E0;
  v10._object = (void *)0x800000020C8588C0;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v63);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v14 + 24) = v1;
  id v15 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  double v16 = (void *)MEMORY[0x21054D080](v13._countAndFlagsBits, v13._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v14;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_317;
  CGFloat v17 = _Block_copy(&aBlock);
  id v52 = objc_msgSend(v15, sel_initWithName_actionHandler_, v16, v17);

  _Block_release(v17);
  swift_release();
  v64._object = (void *)0x800000020C858920;
  v18._countAndFlagsBits = 0x705520656C616353;
  v18._object = (void *)0xE800000000000000;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v64);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v22 + 24) = v55;
  id v23 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  CGRect v24 = (void *)MEMORY[0x21054D080](v21._countAndFlagsBits, v21._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_324;
  CGRect v25 = _Block_copy(&aBlock);
  id v51 = objc_msgSend(v23, sel_initWithName_actionHandler_, v24, v25);

  _Block_release(v25);
  swift_release();
  v65._countAndFlagsBits = 0xD000000000000031;
  v65._object = (void *)0x800000020C858950;
  v26._countAndFlagsBits = 0x6F4420656C616353;
  v26._object = (void *)0xEA00000000006E77;
  v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v27.value._object = (void *)0xEB00000000656C62;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v65);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v30 + 24) = v55;
  id v31 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  unint64_t v32 = (void *)MEMORY[0x21054D080](v29._countAndFlagsBits, v29._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_331;
  id v33 = _Block_copy(&aBlock);
  id v34 = objc_msgSend(v31, sel_initWithName_actionHandler_, v32, v33);

  _Block_release(v33);
  swift_release();
  v66._object = (void *)0x800000020C8589B0;
  v35._object = (void *)0x800000020C858990;
  v35._countAndFlagsBits = 0xD000000000000010;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v66);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v40 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v41 = (void *)MEMORY[0x21054D080](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v39;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_335;
  int64_t v42 = _Block_copy(&aBlock);
  id v43 = objc_msgSend(v40, sel_initWithName_actionHandler_, v41, v42);

  _Block_release(v42);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_20C83E2F0;
  *(void *)(v44 + 32) = v43;
  *(void *)(v44 + 40) = v53;
  *(void *)(v44 + 48) = v52;
  *(void *)(v44 + 56) = v51;
  *(void *)(v44 + 64) = v34;
  uint64_t aBlock = v44;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  id v45 = v43;
  id v46 = v53;
  id v47 = v52;
  id v48 = v51;
  id v49 = v34;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v54, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();
}

{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  Class isa;
  id v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, void *);
  void *v59;
  BOOL (*v60)(uint64_t);
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;

  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_super v54 = v0;
  uint64_t v55 = swift_allocObject();
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v62._countAndFlagsBits = 0xD000000000000037;
  v62._object = (void *)0x800000020C858850;
  v2._object = (void *)0x800000020C858830;
  v2._countAndFlagsBits = 0xD000000000000010;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v62);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v6 + 24) = v1;
  id v7 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v8 = (void *)MEMORY[0x21054D080](v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_274;
  int v9 = _Block_copy(&aBlock);
  id v53 = objc_msgSend(v7, sel_initWithName_actionHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  v10._countAndFlagsBits = 0xD000000000000017;
  v63._countAndFlagsBits = 0xD00000000000003ELL;
  v63._object = (void *)0x800000020C8588E0;
  v10._object = (void *)0x800000020C8588C0;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v63);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v14 + 24) = v1;
  id v15 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  double v16 = (void *)MEMORY[0x21054D080](v13._countAndFlagsBits, v13._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v14;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_281_0;
  CGFloat v17 = _Block_copy(&aBlock);
  id v52 = objc_msgSend(v15, sel_initWithName_actionHandler_, v16, v17);

  _Block_release(v17);
  swift_release();
  v64._object = (void *)0x800000020C858920;
  v18._countAndFlagsBits = 0x705520656C616353;
  v18._object = (void *)0xE800000000000000;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v64);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v22 + 24) = v55;
  id v23 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  CGRect v24 = (void *)MEMORY[0x21054D080](v21._countAndFlagsBits, v21._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_288;
  CGRect v25 = _Block_copy(&aBlock);
  id v51 = objc_msgSend(v23, sel_initWithName_actionHandler_, v24, v25);

  _Block_release(v25);
  swift_release();
  v65._countAndFlagsBits = 0xD000000000000031;
  v65._object = (void *)0x800000020C858950;
  v26._countAndFlagsBits = 0x6F4420656C616353;
  v26._object = (void *)0xEA00000000006E77;
  v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v27.value._object = (void *)0xEB00000000656C62;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v65);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v30 + 24) = v55;
  id v31 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  unint64_t v32 = (void *)MEMORY[0x21054D080](v29._countAndFlagsBits, v29._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_295;
  id v33 = _Block_copy(&aBlock);
  id v34 = objc_msgSend(v31, sel_initWithName_actionHandler_, v32, v33);

  _Block_release(v33);
  swift_release();
  v66._object = (void *)0x800000020C8589B0;
  v35._object = (void *)0x800000020C858990;
  v35._countAndFlagsBits = 0xD000000000000010;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v66);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v40 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v41 = (void *)MEMORY[0x21054D080](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v39;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_299;
  int64_t v42 = _Block_copy(&aBlock);
  id v43 = objc_msgSend(v40, sel_initWithName_actionHandler_, v41, v42);

  _Block_release(v42);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_20C83E2F0;
  *(void *)(v44 + 32) = v43;
  *(void *)(v44 + 40) = v53;
  *(void *)(v44 + 48) = v52;
  *(void *)(v44 + 56) = v51;
  *(void *)(v44 + 64) = v34;
  uint64_t aBlock = v44;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  id v45 = v43;
  id v46 = v53;
  id v47 = v52;
  id v48 = v51;
  id v49 = v34;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v54, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();
}

{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  Class isa;
  id v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, void *);
  void *v59;
  BOOL (*v60)(uint64_t);
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;

  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_super v54 = v0;
  uint64_t v55 = swift_allocObject();
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v62._countAndFlagsBits = 0xD000000000000037;
  v62._object = (void *)0x800000020C858850;
  v2._object = (void *)0x800000020C858830;
  v2._countAndFlagsBits = 0xD000000000000010;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v62);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v6 + 24) = v1;
  id v7 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v8 = (void *)MEMORY[0x21054D080](v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_454;
  int v9 = _Block_copy(&aBlock);
  id v53 = objc_msgSend(v7, sel_initWithName_actionHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  v10._countAndFlagsBits = 0xD000000000000017;
  v63._countAndFlagsBits = 0xD00000000000003ELL;
  v63._object = (void *)0x800000020C8588E0;
  v10._object = (void *)0x800000020C8588C0;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v63);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v14 + 24) = v1;
  id v15 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  double v16 = (void *)MEMORY[0x21054D080](v13._countAndFlagsBits, v13._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v14;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_461;
  CGFloat v17 = _Block_copy(&aBlock);
  id v52 = objc_msgSend(v15, sel_initWithName_actionHandler_, v16, v17);

  _Block_release(v17);
  swift_release();
  v64._object = (void *)0x800000020C858920;
  v18._countAndFlagsBits = 0x705520656C616353;
  v18._object = (void *)0xE800000000000000;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v64);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v22 + 24) = v55;
  id v23 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  CGRect v24 = (void *)MEMORY[0x21054D080](v21._countAndFlagsBits, v21._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_468;
  CGRect v25 = _Block_copy(&aBlock);
  id v51 = objc_msgSend(v23, sel_initWithName_actionHandler_, v24, v25);

  _Block_release(v25);
  swift_release();
  v65._countAndFlagsBits = 0xD000000000000031;
  v65._object = (void *)0x800000020C858950;
  v26._countAndFlagsBits = 0x6F4420656C616353;
  v26._object = (void *)0xEA00000000006E77;
  v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v27.value._object = (void *)0xEB00000000656C62;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v65);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v30 + 24) = v55;
  id v31 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  unint64_t v32 = (void *)MEMORY[0x21054D080](v29._countAndFlagsBits, v29._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_475;
  id v33 = _Block_copy(&aBlock);
  id v34 = objc_msgSend(v31, sel_initWithName_actionHandler_, v32, v33);

  _Block_release(v33);
  swift_release();
  v66._object = (void *)0x800000020C8589B0;
  v35._object = (void *)0x800000020C858990;
  v35._countAndFlagsBits = 0xD000000000000010;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v66);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v40 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v41 = (void *)MEMORY[0x21054D080](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v39;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_479;
  int64_t v42 = _Block_copy(&aBlock);
  id v43 = objc_msgSend(v40, sel_initWithName_actionHandler_, v41, v42);

  _Block_release(v42);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_20C83E2F0;
  *(void *)(v44 + 32) = v43;
  *(void *)(v44 + 40) = v53;
  *(void *)(v44 + 48) = v52;
  *(void *)(v44 + 56) = v51;
  *(void *)(v44 + 64) = v34;
  uint64_t aBlock = v44;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  id v45 = v43;
  id v46 = v53;
  id v47 = v52;
  id v48 = v51;
  id v49 = v34;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v54, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();
}

{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  Class isa;
  id v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, void *);
  void *v59;
  BOOL (*v60)(uint64_t);
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;

  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_super v54 = v0;
  uint64_t v55 = swift_allocObject();
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v62._countAndFlagsBits = 0xD000000000000037;
  v62._object = (void *)0x800000020C858850;
  v2._object = (void *)0x800000020C858830;
  v2._countAndFlagsBits = 0xD000000000000010;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v62);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v6 + 24) = v1;
  id v7 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v8 = (void *)MEMORY[0x21054D080](v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_238;
  int v9 = _Block_copy(&aBlock);
  id v53 = objc_msgSend(v7, sel_initWithName_actionHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  v10._countAndFlagsBits = 0xD000000000000017;
  v63._countAndFlagsBits = 0xD00000000000003ELL;
  v63._object = (void *)0x800000020C8588E0;
  v10._object = (void *)0x800000020C8588C0;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v63);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v14 + 24) = v1;
  id v15 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  double v16 = (void *)MEMORY[0x21054D080](v13._countAndFlagsBits, v13._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v14;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_245;
  CGFloat v17 = _Block_copy(&aBlock);
  id v52 = objc_msgSend(v15, sel_initWithName_actionHandler_, v16, v17);

  _Block_release(v17);
  swift_release();
  v64._object = (void *)0x800000020C858920;
  v18._countAndFlagsBits = 0x705520656C616353;
  v18._object = (void *)0xE800000000000000;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v64);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v22 + 24) = v55;
  id v23 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  CGRect v24 = (void *)MEMORY[0x21054D080](v21._countAndFlagsBits, v21._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_252_0;
  CGRect v25 = _Block_copy(&aBlock);
  id v51 = objc_msgSend(v23, sel_initWithName_actionHandler_, v24, v25);

  _Block_release(v25);
  swift_release();
  v65._countAndFlagsBits = 0xD000000000000031;
  v65._object = (void *)0x800000020C858950;
  v26._countAndFlagsBits = 0x6F4420656C616353;
  v26._object = (void *)0xEA00000000006E77;
  v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v27.value._object = (void *)0xEB00000000656C62;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v65);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v30 + 24) = v55;
  id v31 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  unint64_t v32 = (void *)MEMORY[0x21054D080](v29._countAndFlagsBits, v29._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_259;
  id v33 = _Block_copy(&aBlock);
  id v34 = objc_msgSend(v31, sel_initWithName_actionHandler_, v32, v33);

  _Block_release(v33);
  swift_release();
  v66._object = (void *)0x800000020C8589B0;
  v35._object = (void *)0x800000020C858990;
  v35._countAndFlagsBits = 0xD000000000000010;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v66);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v40 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v41 = (void *)MEMORY[0x21054D080](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v39;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_263;
  int64_t v42 = _Block_copy(&aBlock);
  id v43 = objc_msgSend(v40, sel_initWithName_actionHandler_, v41, v42);

  _Block_release(v42);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_20C83E2F0;
  *(void *)(v44 + 32) = v43;
  *(void *)(v44 + 40) = v53;
  *(void *)(v44 + 48) = v52;
  *(void *)(v44 + 56) = v51;
  *(void *)(v44 + 64) = v34;
  uint64_t aBlock = v44;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  id v45 = v43;
  id v46 = v53;
  id v47 = v52;
  id v48 = v51;
  id v49 = v34;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v54, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();
}

{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  Class isa;
  id v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, void *);
  void *v59;
  BOOL (*v60)(uint64_t);
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;

  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_super v54 = v0;
  uint64_t v55 = swift_allocObject();
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v62._countAndFlagsBits = 0xD000000000000037;
  v62._object = (void *)0x800000020C858850;
  v2._object = (void *)0x800000020C858830;
  v2._countAndFlagsBits = 0xD000000000000010;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v62);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v6 + 24) = v1;
  id v7 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v8 = (void *)MEMORY[0x21054D080](v5._countAndFlagsBits, v5._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_202;
  int v9 = _Block_copy(&aBlock);
  id v53 = objc_msgSend(v7, sel_initWithName_actionHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  v10._countAndFlagsBits = 0xD000000000000017;
  v63._countAndFlagsBits = 0xD00000000000003ELL;
  v63._object = (void *)0x800000020C8588E0;
  v10._object = (void *)0x800000020C8588C0;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v63);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(void *)(v14 + 24) = v1;
  id v15 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  double v16 = (void *)MEMORY[0x21054D080](v13._countAndFlagsBits, v13._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v14;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_209;
  CGFloat v17 = _Block_copy(&aBlock);
  id v52 = objc_msgSend(v15, sel_initWithName_actionHandler_, v16, v17);

  _Block_release(v17);
  swift_release();
  v64._object = (void *)0x800000020C858920;
  v18._countAndFlagsBits = 0x705520656C616353;
  v18._object = (void *)0xE800000000000000;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v64);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v22 + 24) = v55;
  id v23 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  CGRect v24 = (void *)MEMORY[0x21054D080](v21._countAndFlagsBits, v21._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_216;
  CGRect v25 = _Block_copy(&aBlock);
  id v51 = objc_msgSend(v23, sel_initWithName_actionHandler_, v24, v25);

  _Block_release(v25);
  swift_release();
  v65._countAndFlagsBits = 0xD000000000000031;
  v65._object = (void *)0x800000020C858950;
  v26._countAndFlagsBits = 0x6F4420656C616353;
  v26._object = (void *)0xEA00000000006E77;
  v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v27.value._object = (void *)0xEB00000000656C62;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v65);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(void *)(v30 + 24) = v55;
  id v31 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  unint64_t v32 = (void *)MEMORY[0x21054D080](v29._countAndFlagsBits, v29._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  uint64_t v61 = v30;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_223;
  id v33 = _Block_copy(&aBlock);
  id v34 = objc_msgSend(v31, sel_initWithName_actionHandler_, v32, v33);

  _Block_release(v33);
  swift_release();
  v66._object = (void *)0x800000020C8589B0;
  v35._object = (void *)0x800000020C858990;
  v35._countAndFlagsBits = 0xD000000000000010;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0xD00000000000002FLL;
  Swift::String v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v66);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v40 = objc_allocWithZone(MEMORY[0x263F823A0]);
  swift_retain();
  uint64_t v41 = (void *)MEMORY[0x21054D080](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  uint64_t v60 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  uint64_t v61 = v39;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v57 = 1107296256;
  char v58 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  uint64_t v59 = &block_descriptor_227;
  int64_t v42 = _Block_copy(&aBlock);
  id v43 = objc_msgSend(v40, sel_initWithName_actionHandler_, v41, v42);

  _Block_release(v42);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_20C83E2F0;
  *(void *)(v44 + 32) = v43;
  *(void *)(v44 + 40) = v53;
  *(void *)(v44 + 48) = v52;
  *(void *)(v44 + 56) = v51;
  *(void *)(v44 + 64) = v34;
  uint64_t aBlock = v44;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  id v45 = v43;
  id v46 = v53;
  id v47 = v52;
  id v48 = v51;
  id v49 = v34;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v54, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();
}

uint64_t specialized CanvasElementView.accessibilityDescriptionForAttribute(_:)(char a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v7._countAndFlagsBits = 0xD000000000000012;
      v44._countAndFlagsBits = 0xD00000000000003CLL;
      v46._object = (void *)0x800000020C858A70;
      v7._object = (void *)0x800000020C858A50;
      v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v8.value._object = (void *)0xEB00000000656C62;
      v9._countAndFlagsBits = 0;
      v9._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v44);
      Swift::String v10 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
      MEMORY[0x270FA5388](v11);
      *(&v37 - 4) = type metadata accessor for Image();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
      v46._object = &protocol witness table for Image;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v12 = v38;
      CGSize v13 = v39;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_20C835740;
      v47.origin = v12;
      v47.size = v13;
      CGFloat Width = CGRectGetWidth(v47);
      uint64_t v16 = MEMORY[0x263F8EF38];
      *(void *)(v14 + 56) = MEMORY[0x263F8EF38];
      unint64_t v17 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v14 + 64) = v17;
      *(CGFloat *)(v14 + 32) = Width;
      v48.origin = v12;
      v48.size = v13;
      CGFloat Height = CGRectGetHeight(v48);
      *(void *)(v14 + 96) = v16;
      *(void *)(v14 + 104) = v17;
      *(CGFloat *)(v14 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v46._countAndFlagsBits = 0xD000000000000040;
      v46._object = (void *)0x800000020C858A00;
      v26._object = (void *)0x800000020C8589E0;
      v26._countAndFlagsBits = 0xD000000000000016;
      v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v27.value._object = (void *)0xEB00000000656C62;
      v28._countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v46);
      Swift::String v29 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v29, v3);
      MEMORY[0x270FA5388](v30);
      *(&v37 - 4) = type metadata accessor for Image();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
      v46._object = &protocol witness table for Image;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v31 = v38;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_20C835740;
      uint64_t v33 = MEMORY[0x263F8EF38];
      *(void *)(v32 + 56) = MEMORY[0x263F8EF38];
      unint64_t v34 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v32 + 64) = v34;
      *(CGFloat *)(v32 + 32) = v31.x;
      *(void *)(v32 + 96) = v33;
      *(void *)(v32 + 104) = v34;
      *(CGFloat *)(v32 + 72) = v31.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v45._countAndFlagsBits = 0xD000000000000040;
    v46._object = (void *)0x800000020C858AD0;
    v19._object = (void *)0x800000020C858AB0;
    v19._countAndFlagsBits = 0xD000000000000016;
    v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v20.value._object = (void *)0xEB00000000656C62;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v45);
    uint64_t v22 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v22, v3);
    MEMORY[0x270FA5388](v23);
    *(&v37 - 4) = type metadata accessor for Image();
    *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
    v46._object = &protocol witness table for Image;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    CGPoint v41 = v38;
    CGSize v42 = v39;
    long long v43 = v40;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
    double v24 = *(double *)&v40 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_20C832C20;
    *(void *)(v25 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v25 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v25 + 32) = v24;
  }
  uint64_t v35 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

{
  void *v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  CGFloat Width;
  uint64_t v12;
  unint64_t v13;
  CGFloat Height;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  double v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  Swift::String v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  void v37[6];
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  CGRect v41;
  CGRect v42;

  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v2._countAndFlagsBits = 0xD000000000000012;
      v38._countAndFlagsBits = 0xD00000000000003CLL;
      v38._object = (void *)0x800000020C858A70;
      v2._object = (void *)0x800000020C858A50;
      v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v3.value._object = (void *)0xEB00000000656C62;
      v4._countAndFlagsBits = 0;
      v4._object = (void *)0xE000000000000000;
      uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v38);
      (*(void (**)(void *__return_ptr, uint64_t, void *))((*MEMORY[0x263F8EED0] & *v1) + 0x1A8))(v37, v5._countAndFlagsBits, v5._object);
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v32, 0.0);
      uint64_t v6 = v32;
      Swift::String v7 = v33;
      Swift::String_optional v8 = v34;
      Swift::String v9 = v35;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      Swift::String v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_20C835740;
      v41.origin.CGFloat x = v6;
      v41.origin.CGFloat y = v7;
      v41.size.double width = v8;
      v41.size.double height = v9;
      CGFloat Width = CGRectGetWidth(v41);
      CGPoint v12 = MEMORY[0x263F8EF38];
      *(void *)(v10 + 56) = MEMORY[0x263F8EF38];
      CGSize v13 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v10 + 64) = v13;
      *(CGFloat *)(v10 + 32) = Width;
      v42.origin.CGFloat x = v6;
      v42.origin.CGFloat y = v7;
      v42.size.double width = v8;
      v42.size.double height = v9;
      CGFloat Height = CGRectGetHeight(v42);
      *(void *)(v10 + 96) = v12;
      *(void *)(v10 + 104) = v13;
      *(CGFloat *)(v10 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v40._countAndFlagsBits = 0xD000000000000040;
      v40._object = (void *)0x800000020C858A00;
      v21._object = (void *)0x800000020C8589E0;
      v21._countAndFlagsBits = 0xD000000000000016;
      v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v22.value._object = (void *)0xEB00000000656C62;
      v23._countAndFlagsBits = 0;
      v23._object = (void *)0xE000000000000000;
      double v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v40);
      (*(void (**)(void *__return_ptr, uint64_t, void *))((*MEMORY[0x263F8EED0] & *v1) + 0x1A8))(v37, v24._countAndFlagsBits, v24._object);
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v32, 0.0);
      uint64_t v25 = v32;
      Swift::String v26 = v33;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      Swift::String_optional v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_20C835740;
      Swift::String v28 = MEMORY[0x263F8EF38];
      *(void *)(v27 + 56) = MEMORY[0x263F8EF38];
      Swift::String v29 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v27 + 64) = v29;
      *(double *)(v27 + 32) = v25;
      *(void *)(v27 + 96) = v28;
      *(void *)(v27 + 104) = v29;
      *(double *)(v27 + 72) = v26;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v39._countAndFlagsBits = 0xD000000000000040;
    v39._object = (void *)0x800000020C858AD0;
    v15._object = (void *)0x800000020C858AB0;
    v15._countAndFlagsBits = 0xD000000000000016;
    v16.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v16.value._object = (void *)0xEB00000000656C62;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    Swift::String v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, paperKitBundle, v17, v39);
    (*(void (**)(void *__return_ptr, uint64_t, void *))((*MEMORY[0x263F8EED0] & *v1) + 0x1A8))(v37, v18._countAndFlagsBits, v18._object);
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v32, 0.0);
    Swift::String v19 = v36 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    Swift::String_optional v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_20C832C20;
    *(void *)(v20 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v20 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v20 + 32) = v19;
  }
  uint64_t v30 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  char *v10;
  uint64_t v11;
  CGPoint v12;
  CGSize v13;
  uint64_t v14;
  CGFloat Width;
  uint64_t v16;
  unint64_t v17;
  CGFloat Height;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  char *v29;
  uint64_t v30;
  CGPoint v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  CGPoint v38;
  CGSize v39;
  long long v40;
  CGPoint v41;
  CGSize v42;
  long long v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  CGRect v47;
  CGRect v48;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v7._countAndFlagsBits = 0xD000000000000012;
      v44._countAndFlagsBits = 0xD00000000000003CLL;
      v46._object = (void *)0x800000020C858A70;
      v7._object = (void *)0x800000020C858A50;
      v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v8.value._object = (void *)0xEB00000000656C62;
      v9._countAndFlagsBits = 0;
      v9._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v44);
      Swift::String v10 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
      MEMORY[0x270FA5388](v11);
      *(&v37 - 4) = type metadata accessor for TextBox();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
      v46._object = &protocol witness table for TextBox;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v12 = v38;
      CGSize v13 = v39;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_20C835740;
      v47.origin = v12;
      v47.size = v13;
      CGFloat Width = CGRectGetWidth(v47);
      uint64_t v16 = MEMORY[0x263F8EF38];
      *(void *)(v14 + 56) = MEMORY[0x263F8EF38];
      unint64_t v17 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v14 + 64) = v17;
      *(CGFloat *)(v14 + 32) = Width;
      v48.origin = v12;
      v48.size = v13;
      CGFloat Height = CGRectGetHeight(v48);
      *(void *)(v14 + 96) = v16;
      *(void *)(v14 + 104) = v17;
      *(CGFloat *)(v14 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v46._countAndFlagsBits = 0xD000000000000040;
      v46._object = (void *)0x800000020C858A00;
      v26._object = (void *)0x800000020C8589E0;
      v26._countAndFlagsBits = 0xD000000000000016;
      v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v27.value._object = (void *)0xEB00000000656C62;
      v28._countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v46);
      Swift::String v29 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v29, v3);
      MEMORY[0x270FA5388](v30);
      *(&v37 - 4) = type metadata accessor for TextBox();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
      v46._object = &protocol witness table for TextBox;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v31 = v38;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_20C835740;
      uint64_t v33 = MEMORY[0x263F8EF38];
      *(void *)(v32 + 56) = MEMORY[0x263F8EF38];
      unint64_t v34 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v32 + 64) = v34;
      *(CGFloat *)(v32 + 32) = v31.x;
      *(void *)(v32 + 96) = v33;
      *(void *)(v32 + 104) = v34;
      *(CGFloat *)(v32 + 72) = v31.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v45._countAndFlagsBits = 0xD000000000000040;
    v46._object = (void *)0x800000020C858AD0;
    v19._object = (void *)0x800000020C858AB0;
    v19._countAndFlagsBits = 0xD000000000000016;
    v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v20.value._object = (void *)0xEB00000000656C62;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v45);
    uint64_t v22 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v22, v3);
    MEMORY[0x270FA5388](v23);
    *(&v37 - 4) = type metadata accessor for TextBox();
    *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
    v46._object = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    CGPoint v41 = v38;
    CGSize v42 = v39;
    long long v43 = v40;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
    double v24 = *(double *)&v40 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_20C832C20;
    *(void *)(v25 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v25 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v25 + 32) = v24;
  }
  uint64_t v35 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  char *v10;
  uint64_t v11;
  CGPoint v12;
  CGSize v13;
  uint64_t v14;
  CGFloat Width;
  uint64_t v16;
  unint64_t v17;
  CGFloat Height;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  char *v29;
  uint64_t v30;
  CGPoint v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  CGPoint v38;
  CGSize v39;
  long long v40;
  CGPoint v41;
  CGSize v42;
  long long v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  CGRect v47;
  CGRect v48;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v7._countAndFlagsBits = 0xD000000000000012;
      v44._countAndFlagsBits = 0xD00000000000003CLL;
      v46._object = (void *)0x800000020C858A70;
      v7._object = (void *)0x800000020C858A50;
      v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v8.value._object = (void *)0xEB00000000656C62;
      v9._countAndFlagsBits = 0;
      v9._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v44);
      Swift::String v10 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
      MEMORY[0x270FA5388](v11);
      *(&v37 - 4) = type metadata accessor for GraphElement();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
      v46._object = &protocol witness table for GraphElement;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v12 = v38;
      CGSize v13 = v39;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_20C835740;
      v47.origin = v12;
      v47.size = v13;
      CGFloat Width = CGRectGetWidth(v47);
      uint64_t v16 = MEMORY[0x263F8EF38];
      *(void *)(v14 + 56) = MEMORY[0x263F8EF38];
      unint64_t v17 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v14 + 64) = v17;
      *(CGFloat *)(v14 + 32) = Width;
      v48.origin = v12;
      v48.size = v13;
      CGFloat Height = CGRectGetHeight(v48);
      *(void *)(v14 + 96) = v16;
      *(void *)(v14 + 104) = v17;
      *(CGFloat *)(v14 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v46._countAndFlagsBits = 0xD000000000000040;
      v46._object = (void *)0x800000020C858A00;
      v26._object = (void *)0x800000020C8589E0;
      v26._countAndFlagsBits = 0xD000000000000016;
      v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v27.value._object = (void *)0xEB00000000656C62;
      v28._countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v46);
      Swift::String v29 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v29, v3);
      MEMORY[0x270FA5388](v30);
      *(&v37 - 4) = type metadata accessor for GraphElement();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
      v46._object = &protocol witness table for GraphElement;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v31 = v38;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_20C835740;
      uint64_t v33 = MEMORY[0x263F8EF38];
      *(void *)(v32 + 56) = MEMORY[0x263F8EF38];
      unint64_t v34 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v32 + 64) = v34;
      *(CGFloat *)(v32 + 32) = v31.x;
      *(void *)(v32 + 96) = v33;
      *(void *)(v32 + 104) = v34;
      *(CGFloat *)(v32 + 72) = v31.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v45._countAndFlagsBits = 0xD000000000000040;
    v46._object = (void *)0x800000020C858AD0;
    v19._object = (void *)0x800000020C858AB0;
    v19._countAndFlagsBits = 0xD000000000000016;
    v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v20.value._object = (void *)0xEB00000000656C62;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v45);
    uint64_t v22 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v22, v3);
    MEMORY[0x270FA5388](v23);
    *(&v37 - 4) = type metadata accessor for GraphElement();
    *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
    v46._object = &protocol witness table for GraphElement;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    CGPoint v41 = v38;
    CGSize v42 = v39;
    long long v43 = v40;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
    double v24 = *(double *)&v40 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_20C832C20;
    *(void *)(v25 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v25 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v25 + 32) = v24;
  }
  uint64_t v35 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  char *v10;
  uint64_t v11;
  CGPoint v12;
  CGSize v13;
  uint64_t v14;
  CGFloat Width;
  uint64_t v16;
  unint64_t v17;
  CGFloat Height;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  char *v29;
  uint64_t v30;
  CGPoint v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  CGPoint v38;
  CGSize v39;
  long long v40;
  CGPoint v41;
  CGSize v42;
  long long v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  CGRect v47;
  CGRect v48;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v7._countAndFlagsBits = 0xD000000000000012;
      v44._countAndFlagsBits = 0xD00000000000003CLL;
      v46._object = (void *)0x800000020C858A70;
      v7._object = (void *)0x800000020C858A50;
      v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v8.value._object = (void *)0xEB00000000656C62;
      v9._countAndFlagsBits = 0;
      v9._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v44);
      Swift::String v10 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
      MEMORY[0x270FA5388](v11);
      *(&v37 - 4) = type metadata accessor for Link();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
      v46._object = &protocol witness table for Link;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v12 = v38;
      CGSize v13 = v39;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_20C835740;
      v47.origin = v12;
      v47.size = v13;
      CGFloat Width = CGRectGetWidth(v47);
      uint64_t v16 = MEMORY[0x263F8EF38];
      *(void *)(v14 + 56) = MEMORY[0x263F8EF38];
      unint64_t v17 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v14 + 64) = v17;
      *(CGFloat *)(v14 + 32) = Width;
      v48.origin = v12;
      v48.size = v13;
      CGFloat Height = CGRectGetHeight(v48);
      *(void *)(v14 + 96) = v16;
      *(void *)(v14 + 104) = v17;
      *(CGFloat *)(v14 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v46._countAndFlagsBits = 0xD000000000000040;
      v46._object = (void *)0x800000020C858A00;
      v26._object = (void *)0x800000020C8589E0;
      v26._countAndFlagsBits = 0xD000000000000016;
      v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v27.value._object = (void *)0xEB00000000656C62;
      v28._countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v46);
      Swift::String v29 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v29, v3);
      MEMORY[0x270FA5388](v30);
      *(&v37 - 4) = type metadata accessor for Link();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
      v46._object = &protocol witness table for Link;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v31 = v38;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_20C835740;
      uint64_t v33 = MEMORY[0x263F8EF38];
      *(void *)(v32 + 56) = MEMORY[0x263F8EF38];
      unint64_t v34 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v32 + 64) = v34;
      *(CGFloat *)(v32 + 32) = v31.x;
      *(void *)(v32 + 96) = v33;
      *(void *)(v32 + 104) = v34;
      *(CGFloat *)(v32 + 72) = v31.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v45._countAndFlagsBits = 0xD000000000000040;
    v46._object = (void *)0x800000020C858AD0;
    v19._object = (void *)0x800000020C858AB0;
    v19._countAndFlagsBits = 0xD000000000000016;
    v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v20.value._object = (void *)0xEB00000000656C62;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v45);
    uint64_t v22 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v22, v3);
    MEMORY[0x270FA5388](v23);
    *(&v37 - 4) = type metadata accessor for Link();
    *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
    v46._object = &protocol witness table for Link;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    CGPoint v41 = v38;
    CGSize v42 = v39;
    long long v43 = v40;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
    double v24 = *(double *)&v40 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_20C832C20;
    *(void *)(v25 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v25 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v25 + 32) = v24;
  }
  uint64_t v35 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  char *v10;
  uint64_t v11;
  CGPoint v12;
  CGSize v13;
  uint64_t v14;
  CGFloat Width;
  uint64_t v16;
  unint64_t v17;
  CGFloat Height;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  char *v29;
  uint64_t v30;
  CGPoint v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  CGPoint v38;
  CGSize v39;
  long long v40;
  CGPoint v41;
  CGSize v42;
  long long v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  CGRect v47;
  CGRect v48;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v7._countAndFlagsBits = 0xD000000000000012;
      v44._countAndFlagsBits = 0xD00000000000003CLL;
      v46._object = (void *)0x800000020C858A70;
      v7._object = (void *)0x800000020C858A50;
      v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v8.value._object = (void *)0xEB00000000656C62;
      v9._countAndFlagsBits = 0;
      v9._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v44);
      Swift::String v10 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
      MEMORY[0x270FA5388](v11);
      *(&v37 - 4) = type metadata accessor for Signature();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
      v46._object = &protocol witness table for Signature;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v12 = v38;
      CGSize v13 = v39;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_20C835740;
      v47.origin = v12;
      v47.size = v13;
      CGFloat Width = CGRectGetWidth(v47);
      uint64_t v16 = MEMORY[0x263F8EF38];
      *(void *)(v14 + 56) = MEMORY[0x263F8EF38];
      unint64_t v17 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v14 + 64) = v17;
      *(CGFloat *)(v14 + 32) = Width;
      v48.origin = v12;
      v48.size = v13;
      CGFloat Height = CGRectGetHeight(v48);
      *(void *)(v14 + 96) = v16;
      *(void *)(v14 + 104) = v17;
      *(CGFloat *)(v14 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v46._countAndFlagsBits = 0xD000000000000040;
      v46._object = (void *)0x800000020C858A00;
      v26._object = (void *)0x800000020C8589E0;
      v26._countAndFlagsBits = 0xD000000000000016;
      v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v27.value._object = (void *)0xEB00000000656C62;
      v28._countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v46);
      Swift::String v29 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v29, v3);
      MEMORY[0x270FA5388](v30);
      *(&v37 - 4) = type metadata accessor for Signature();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
      v46._object = &protocol witness table for Signature;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v31 = v38;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_20C835740;
      uint64_t v33 = MEMORY[0x263F8EF38];
      *(void *)(v32 + 56) = MEMORY[0x263F8EF38];
      unint64_t v34 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v32 + 64) = v34;
      *(CGFloat *)(v32 + 32) = v31.x;
      *(void *)(v32 + 96) = v33;
      *(void *)(v32 + 104) = v34;
      *(CGFloat *)(v32 + 72) = v31.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v45._countAndFlagsBits = 0xD000000000000040;
    v46._object = (void *)0x800000020C858AD0;
    v19._object = (void *)0x800000020C858AB0;
    v19._countAndFlagsBits = 0xD000000000000016;
    v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v20.value._object = (void *)0xEB00000000656C62;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v45);
    uint64_t v22 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v22, v3);
    MEMORY[0x270FA5388](v23);
    *(&v37 - 4) = type metadata accessor for Signature();
    *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
    v46._object = &protocol witness table for Signature;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    CGPoint v41 = v38;
    CGSize v42 = v39;
    long long v43 = v40;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
    double v24 = *(double *)&v40 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_20C832C20;
    *(void *)(v25 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v25 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v25 + 32) = v24;
  }
  uint64_t v35 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  char *v10;
  uint64_t v11;
  CGPoint v12;
  CGSize v13;
  uint64_t v14;
  CGFloat Width;
  uint64_t v16;
  unint64_t v17;
  CGFloat Height;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  char *v29;
  uint64_t v30;
  CGPoint v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  CGPoint v38;
  CGSize v39;
  long long v40;
  CGPoint v41;
  CGSize v42;
  long long v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  CGRect v47;
  CGRect v48;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v7._countAndFlagsBits = 0xD000000000000012;
      v44._countAndFlagsBits = 0xD00000000000003CLL;
      v46._object = (void *)0x800000020C858A70;
      v7._object = (void *)0x800000020C858A50;
      v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v8.value._object = (void *)0xEB00000000656C62;
      v9._countAndFlagsBits = 0;
      v9._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v44);
      Swift::String v10 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
      MEMORY[0x270FA5388](v11);
      *(&v37 - 4) = type metadata accessor for Paper();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      v46._object = &protocol witness table for Paper;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v12 = v38;
      CGSize v13 = v39;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_20C835740;
      v47.origin = v12;
      v47.size = v13;
      CGFloat Width = CGRectGetWidth(v47);
      uint64_t v16 = MEMORY[0x263F8EF38];
      *(void *)(v14 + 56) = MEMORY[0x263F8EF38];
      unint64_t v17 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v14 + 64) = v17;
      *(CGFloat *)(v14 + 32) = Width;
      v48.origin = v12;
      v48.size = v13;
      CGFloat Height = CGRectGetHeight(v48);
      *(void *)(v14 + 96) = v16;
      *(void *)(v14 + 104) = v17;
      *(CGFloat *)(v14 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v46._countAndFlagsBits = 0xD000000000000040;
      v46._object = (void *)0x800000020C858A00;
      v26._object = (void *)0x800000020C8589E0;
      v26._countAndFlagsBits = 0xD000000000000016;
      v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v27.value._object = (void *)0xEB00000000656C62;
      v28._countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v46);
      Swift::String v29 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v29, v3);
      MEMORY[0x270FA5388](v30);
      *(&v37 - 4) = type metadata accessor for Paper();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
      v46._object = &protocol witness table for Paper;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v31 = v38;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_20C835740;
      uint64_t v33 = MEMORY[0x263F8EF38];
      *(void *)(v32 + 56) = MEMORY[0x263F8EF38];
      unint64_t v34 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v32 + 64) = v34;
      *(CGFloat *)(v32 + 32) = v31.x;
      *(void *)(v32 + 96) = v33;
      *(void *)(v32 + 104) = v34;
      *(CGFloat *)(v32 + 72) = v31.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v45._countAndFlagsBits = 0xD000000000000040;
    v46._object = (void *)0x800000020C858AD0;
    v19._object = (void *)0x800000020C858AB0;
    v19._countAndFlagsBits = 0xD000000000000016;
    v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v20.value._object = (void *)0xEB00000000656C62;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v45);
    uint64_t v22 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v22, v3);
    MEMORY[0x270FA5388](v23);
    *(&v37 - 4) = type metadata accessor for Paper();
    *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
    v46._object = &protocol witness table for Paper;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    CGPoint v41 = v38;
    CGSize v42 = v39;
    long long v43 = v40;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
    double v24 = *(double *)&v40 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_20C832C20;
    *(void *)(v25 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v25 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v25 + 32) = v24;
  }
  uint64_t v35 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  char *v10;
  uint64_t v11;
  CGPoint v12;
  CGSize v13;
  uint64_t v14;
  CGFloat Width;
  uint64_t v16;
  unint64_t v17;
  CGFloat Height;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  char *v29;
  uint64_t v30;
  CGPoint v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  CGPoint v38;
  CGSize v39;
  long long v40;
  CGPoint v41;
  CGSize v42;
  long long v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  CGRect v47;
  CGRect v48;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v7._countAndFlagsBits = 0xD000000000000012;
      v44._countAndFlagsBits = 0xD00000000000003CLL;
      v46._object = (void *)0x800000020C858A70;
      v7._object = (void *)0x800000020C858A50;
      v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v8.value._object = (void *)0xEB00000000656C62;
      v9._countAndFlagsBits = 0;
      v9._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v44);
      Swift::String v10 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
      MEMORY[0x270FA5388](v11);
      *(&v37 - 4) = type metadata accessor for PaperDocumentPage();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
      v46._object = &protocol witness table for PaperDocumentPage;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v12 = v38;
      CGSize v13 = v39;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_20C835740;
      v47.origin = v12;
      v47.size = v13;
      CGFloat Width = CGRectGetWidth(v47);
      uint64_t v16 = MEMORY[0x263F8EF38];
      *(void *)(v14 + 56) = MEMORY[0x263F8EF38];
      unint64_t v17 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v14 + 64) = v17;
      *(CGFloat *)(v14 + 32) = Width;
      v48.origin = v12;
      v48.size = v13;
      CGFloat Height = CGRectGetHeight(v48);
      *(void *)(v14 + 96) = v16;
      *(void *)(v14 + 104) = v17;
      *(CGFloat *)(v14 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v46._countAndFlagsBits = 0xD000000000000040;
      v46._object = (void *)0x800000020C858A00;
      v26._object = (void *)0x800000020C8589E0;
      v26._countAndFlagsBits = 0xD000000000000016;
      v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v27.value._object = (void *)0xEB00000000656C62;
      v28._countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v46);
      Swift::String v29 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v29, v3);
      MEMORY[0x270FA5388](v30);
      *(&v37 - 4) = type metadata accessor for PaperDocumentPage();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
      v46._object = &protocol witness table for PaperDocumentPage;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v31 = v38;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_20C835740;
      uint64_t v33 = MEMORY[0x263F8EF38];
      *(void *)(v32 + 56) = MEMORY[0x263F8EF38];
      unint64_t v34 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v32 + 64) = v34;
      *(CGFloat *)(v32 + 32) = v31.x;
      *(void *)(v32 + 96) = v33;
      *(void *)(v32 + 104) = v34;
      *(CGFloat *)(v32 + 72) = v31.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v45._countAndFlagsBits = 0xD000000000000040;
    v46._object = (void *)0x800000020C858AD0;
    v19._object = (void *)0x800000020C858AB0;
    v19._countAndFlagsBits = 0xD000000000000016;
    v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v20.value._object = (void *)0xEB00000000656C62;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v45);
    uint64_t v22 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v22, v3);
    MEMORY[0x270FA5388](v23);
    *(&v37 - 4) = type metadata accessor for PaperDocumentPage();
    *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
    v46._object = &protocol witness table for PaperDocumentPage;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    CGPoint v41 = v38;
    CGSize v42 = v39;
    long long v43 = v40;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
    double v24 = *(double *)&v40 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_20C832C20;
    *(void *)(v25 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v25 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v25 + 32) = v24;
  }
  uint64_t v35 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  char *v10;
  uint64_t v11;
  CGPoint v12;
  CGSize v13;
  uint64_t v14;
  CGFloat Width;
  uint64_t v16;
  unint64_t v17;
  CGFloat Height;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  char *v29;
  uint64_t v30;
  CGPoint v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  CGPoint v38;
  CGSize v39;
  long long v40;
  CGPoint v41;
  CGSize v42;
  long long v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  CGRect v47;
  CGRect v48;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v7._countAndFlagsBits = 0xD000000000000012;
      v44._countAndFlagsBits = 0xD00000000000003CLL;
      v46._object = (void *)0x800000020C858A70;
      v7._object = (void *)0x800000020C858A50;
      v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v8.value._object = (void *)0xEB00000000656C62;
      v9._countAndFlagsBits = 0;
      v9._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v44);
      Swift::String v10 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
      MEMORY[0x270FA5388](v11);
      *(&v37 - 4) = type metadata accessor for UnknownCanvasElement();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
      v46._object = &protocol witness table for UnknownCanvasElement;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v12 = v38;
      CGSize v13 = v39;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_20C835740;
      v47.origin = v12;
      v47.size = v13;
      CGFloat Width = CGRectGetWidth(v47);
      uint64_t v16 = MEMORY[0x263F8EF38];
      *(void *)(v14 + 56) = MEMORY[0x263F8EF38];
      unint64_t v17 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v14 + 64) = v17;
      *(CGFloat *)(v14 + 32) = Width;
      v48.origin = v12;
      v48.size = v13;
      CGFloat Height = CGRectGetHeight(v48);
      *(void *)(v14 + 96) = v16;
      *(void *)(v14 + 104) = v17;
      *(CGFloat *)(v14 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1) {
        swift_once();
      }
      v46._countAndFlagsBits = 0xD000000000000040;
      v46._object = (void *)0x800000020C858A00;
      v26._object = (void *)0x800000020C8589E0;
      v26._countAndFlagsBits = 0xD000000000000016;
      v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v27.value._object = (void *)0xEB00000000656C62;
      v28._countAndFlagsBits = 0;
      v28._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v46);
      Swift::String v29 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
      swift_beginAccess();
      uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v29, v3);
      MEMORY[0x270FA5388](v30);
      *(&v37 - 4) = type metadata accessor for UnknownCanvasElement();
      *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
      v46._object = &protocol witness table for UnknownCanvasElement;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      CGPoint v41 = v38;
      CGSize v42 = v39;
      long long v43 = v40;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
      CGPoint v31 = v38;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_20C835740;
      uint64_t v33 = MEMORY[0x263F8EF38];
      *(void *)(v32 + 56) = MEMORY[0x263F8EF38];
      unint64_t v34 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(void *)(v32 + 64) = v34;
      *(CGFloat *)(v32 + 32) = v31.x;
      *(void *)(v32 + 96) = v33;
      *(void *)(v32 + 104) = v34;
      *(CGFloat *)(v32 + 72) = v31.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v45._countAndFlagsBits = 0xD000000000000040;
    v46._object = (void *)0x800000020C858AD0;
    v19._object = (void *)0x800000020C858AB0;
    v19._countAndFlagsBits = 0xD000000000000016;
    v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v20.value._object = (void *)0xEB00000000656C62;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v45);
    uint64_t v22 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v22, v3);
    MEMORY[0x270FA5388](v23);
    *(&v37 - 4) = type metadata accessor for UnknownCanvasElement();
    *(&v37 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
    v46._object = &protocol witness table for UnknownCanvasElement;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    CGPoint v41 = v38;
    CGSize v42 = v39;
    long long v43 = v40;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v38, 0.0);
    double v24 = *(double *)&v40 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_20C832C20;
    *(void *)(v25 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v25 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v25 + 32) = v24;
  }
  uint64_t v35 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t specialized CanvasElementView.accessibilityDescription()()
{
  void (*v5)(void *__return_ptr);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String_optional v17;
  Swift::String v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v29;
  uint64_t v30;
  void v31[5];
  void v32[6];
  void v33[7];
  Swift::String v34;
  Swift::String v35;

  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v34._object = (void *)0x800000020C858A00;
  v1._object = (void *)0x800000020C8589E0;
  v1._countAndFlagsBits = 0xD000000000000016;
  v2.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v2.value._object = (void *)0xEB00000000656C62;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v34._countAndFlagsBits = 0xD000000000000040;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, paperKitBundle, v3, v34);
  uint64_t v5 = *(void (**)(void *__return_ptr))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8);
  ((void (*)(void *__return_ptr, uint64_t, void *))v5)(v32, v4._countAndFlagsBits, v4._object);
  CGAffineTransform.decompose(initialRotation:)((uint64_t)v33, 0.0);
  uint64_t v6 = v33[0];
  Swift::String v7 = v33[1];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  Swift::String_optional v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_20C835740;
  Swift::String v9 = MEMORY[0x263F8EF38];
  *(void *)(v8 + 56) = MEMORY[0x263F8EF38];
  Swift::String v10 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(void *)(v8 + 64) = v10;
  *(void *)(v8 + 32) = v6;
  *(void *)(v8 + 96) = v9;
  *(void *)(v8 + 104) = v10;
  *(void *)(v8 + 72) = v7;
  uint64_t v11 = static String.localizedStringWithFormat(_:_:)();
  Swift::String v29 = v12;
  uint64_t v30 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  CGSize v13 = specialized CanvasElementView.accessibilityDescriptionForAttribute(_:)(1);
  id v15 = v14;
  v35._object = (void *)0x800000020C858AD0;
  v16._object = (void *)0x800000020C858AB0;
  v16._countAndFlagsBits = 0xD000000000000016;
  v17.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v17.value._object = (void *)0xEB00000000656C62;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v35._countAndFlagsBits = 0xD000000000000040;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, paperKitBundle, v18, v35);
  v5(v33);
  CGAffineTransform.decompose(initialRotation:)((uint64_t)v31, 0.0);
  Swift::String v19 = *(double *)&v31[4] * 180.0 / 3.14159265;
  Swift::String_optional v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_20C832C20;
  *(void *)(v20 + 56) = MEMORY[0x263F8EF38];
  *(void *)(v20 + 64) = v10;
  *(double *)(v20 + 32) = v19;
  Swift::String v21 = static String.localizedStringWithFormat(_:_:)();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31[0] = v30;
  v31[1] = v29;
  v24._countAndFlagsBits = 8236;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v13;
  v25._object = v15;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = v21;
  v27._object = v23;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  return v31[0];
}

id ShapeView.shapeLayer.getter()
{
  return ShapeView.shapeLayer.getter(&direct field offset for ShapeView.$__lazy_storage_$_shapeLayer);
}

id ShapeView.endLineEndLayer.getter()
{
  return ShapeView.shapeLayer.getter(&direct field offset for ShapeView.$__lazy_storage_$_endLineEndLayer);
}

id ShapeView.startLineEndLayer.getter()
{
  return ShapeView.shapeLayer.getter(&direct field offset for ShapeView.$__lazy_storage_$_startLineEndLayer);
}

id ShapeView.shapeLayer.getter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  Swift::String v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }
  else
  {
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F15880]), sel_init);
    uint64_t v6 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    id v4 = v5;

    Swift::String v3 = 0;
  }
  id v7 = v3;
  return v4;
}

id ShapeView.groupLayer.getter()
{
  uint64_t v1 = direct field offset for ShapeView.$__lazy_storage_$_groupLayer;
  uint64_t v2 = *(void **)(v0 + direct field offset for ShapeView.$__lazy_storage_$_groupLayer);
  if (v2)
  {
    id v3 = *(id *)(v0 + direct field offset for ShapeView.$__lazy_storage_$_groupLayer);
  }
  else
  {
    id v4 = closure #1 in ShapeView.groupLayer.getter();
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in ShapeView.groupLayer.getter()
{
  id v0 = ShapeView.startLineEndLayer.getter();
  uint64_t v1 = *MEMORY[0x263F15AC0];
  objc_msgSend(v0, sel_setFillRule_, *MEMORY[0x263F15AC0]);

  id v2 = ShapeView.endLineEndLayer.getter();
  objc_msgSend(v2, sel_setFillRule_, v1);

  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
  id v4 = ShapeView.shapeLayer.getter();
  objc_msgSend(v3, sel_addSublayer_, v4);

  id v5 = ShapeView.startLineEndLayer.getter();
  objc_msgSend(v3, sel_addSublayer_, v5);

  id v6 = ShapeView.endLineEndLayer.getter();
  objc_msgSend(v3, sel_addSublayer_, v6);

  return v3;
}

void *ShapeView.controlPoints.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  id v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String_optional v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v9 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v9, v5);
  swift_getKeyPath();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  Swift::String v10 = TaggedValue_9<>.controlPoints.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v10;
}

double ShapeView.subscript.getter(unsigned __int8 *a1, CGFloat *a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String_optional v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unsigned __int8 v13 = *a1;
  uint64_t v14 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v10 + 16))(v12, v14, v9);
  swift_getKeyPath();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  unsigned __int8 v19 = v13;
  specialized TaggedValue_9<>.subscript.getter(&v19, a2);
  double v16 = v15;
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  return v16;
}

uint64_t ShapeView.subscript.setter(unsigned __int8 *a1, CGFloat *a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6)
{
  uint64_t v7 = v6;
  double v24 = a2;
  uint64_t v25 = a3;
  int v23 = a4 & 1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  Swift::String v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unsigned __int8 v19 = *a1;
  Swift::String_optional v20 = (char *)v7 + *(void *)((*MEMORY[0x263F8EED0] & *v7) + 0x380);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v12 + 16))(v14, v20, v11);
  swift_getKeyPath();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
  v27[0] = v19;
  TaggedValue_9<>.subscript.setter(v27, v24, v25, v23, a5, a6);
  Swift::String v26 = v18;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  specialized CanvasElementView.commit()();
  objc_msgSend(v7, sel_setNeedsLayout);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t closure #1 in ShapeView.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #1 in ShapeView.shapeOpacity.setter()
{
  return closure #1 in ShapeView.shapeOpacity.setter();
}

{
  swift_getKeyPath();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #1 in ShapeView.shapeStrokeWidth.setter()
{
  return closure #1 in ShapeView.shapeOpacity.setter();
}

uint64_t closure #1 in ShapeView.lineEnds.setter()
{
  return Capsule.Ref<>.subscript.setter();
}

void @objc ShapeView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized ShapeView.init(coder:)();
}

uint64_t ShapeView.modifiableProperties.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  swift_getKeyPath();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v6 = 13;
  if ((v9 & 0x80) == 0) {
    uint64_t v6 = 15;
  }
  uint64_t v7 = 5;
  if ((v9 & 0x80) == 0) {
    uint64_t v7 = 7;
  }
  if ((v9 & 0x10) != 0) {
    uint64_t v6 = v7;
  }
  if ((v9 & 4) != 0) {
    return 0;
  }
  else {
    return v6;
  }
}

double ShapeView.modelCoordinateSpace.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, v3);
  v11[0] = type metadata accessor for Shape();
  v11[1] = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  v11[2] = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  double result = *(double *)&v12;
  long long v9 = v13;
  long long v10 = v14;
  *a1 = v12;
  a1[1] = v9;
  a1[2] = v10;
  return result;
}

void ShapeView.modelCoordinateSpace.setter(uint64_t a1)
{
  specialized CanvasElementView.modelCoordinateSpace.setter(a1);
  ShapeView.updateShapeLayer()();
}

void (*ShapeView.modelCoordinateSpace.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0xE8uLL);
  *a1 = v3;
  v3[27] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  v3[28] = v6;
  uint64_t v7 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(void *, char *, uint64_t))(v5 + 16))(v6, v7, v4);
  type metadata accessor for Shape();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v6, v4);
  *((_OWORD *)v3 + 6) = *((_OWORD *)v3 + 9);
  v3 += 12;
  long long v8 = *((_OWORD *)v3 + 5);
  *((_OWORD *)v3 + 1) = *((_OWORD *)v3 + 4);
  *((_OWORD *)v3 + 2) = v8;
  return ShapeView.modelCoordinateSpace.modify;
}

void ShapeView.modelCoordinateSpace.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(_OWORD **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 224);
  if (a2) {
    uint64_t v4 = *(_OWORD **)a1;
  }
  else {
    uint64_t v4 = (_OWORD *)(*(void *)a1 + 48);
  }
  long long v5 = v2[7];
  *uint64_t v4 = v2[6];
  v4[1] = v5;
  v4[2] = v2[8];
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)v4);
  ShapeView.updateShapeLayer()();
  free(v3);
  free(v2);
}

CGPathRef ShapeView.modelHitTestPath.getter()
{
  uint64_t v1 = v0;
  uint64_t v128 = *MEMORY[0x263EF8340];
  uint64_t v107 = type metadata accessor for CGPathFillRule();
  uint64_t v110 = *(void *)(v107 - 8);
  MEMORY[0x270FA5388](v107);
  uint64_t v100 = (char *)&v96 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  id v105 = (char *)&v96 - v4;
  MEMORY[0x270FA5388](v5);
  double v106 = (char *)&v96 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v99 = (char *)&v96 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v103 = *(void *)(v9 - 8);
  uint64_t v104 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v102 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = (const CGPath *)type metadata accessor for Shape();
  MEMORY[0x270FA5388](v101);
  long long v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unsigned __int8 v19 = (char *)&v96 - v18;
  Swift::String_optional v20 = (void *)MEMORY[0x263F8EED0];
  Swift::String v21 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v112 = v14;
  uint64_t v113 = v13;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  long long v114 = v19;
  id v109 = v22;
  v22(v19, v21, v13);
  int v23 = (char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement;
  uint64_t v24 = MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    AnyCanvasElementView.paperBoundsTransform()(&v116);

    double a = v116.a;
    double b = v116.b;
  }
  else
  {
    double b = 0.0;
    double a = 1.0;
  }
  Swift::String v28 = (void *)MEMORY[0x210550400](v23);
  if (v28)
  {
    Swift::String v29 = v28;
    uint64_t v30 = (void *)(*(uint64_t (**)(void))((*v20 & *v28) + 0x88))();

    if (v30)
    {
      CGPoint v31 = (void *)(*(uint64_t (**)(void))((*v20 & *v30) + 0x308))();

      if (v31)
      {
        objc_msgSend(v31, sel_zoomScale);
      }
    }
  }
  swift_getKeyPath();
  uint64_t v32 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  uint64_t v33 = v113;
  uint64_t v108 = v32;
  Capsule<>.subscript.getter();
  swift_release();
  double v34 = transform.a;
  v109(v16, v21, v33);
  char v35 = specialized Capsule<>.isTextBox.getter();
  uint64_t v36 = v112 + 8;
  uint64_t v111 = *(void (**)(char *, uint64_t))(v112 + 8);
  v111(v16, v33);
  if (v35)
  {
    uint64_t v37 = *(void **)((char *)v1 + direct field offset for ShapeView._textBoxView);
    if (v37)
    {
      id v38 = v37;
      specialized TextBoxView.selectionCoordinateSpace.getter((long long *)&transform);
      v129.origin.CGFloat x = 0.0;
      v129.origin.CGFloat y = 0.0;
      v129.size.double width = 1.0;
      v129.size.double height = 1.0;
      CGSize v39 = CGPathCreateWithRect(v129, &transform);

      v111(v114, v113);
      return v39;
    }
  }
  double v40 = sqrt(b * b + a * a);
  double v41 = round(v40 * v34);
  uint64_t v42 = v113;
  uint64_t v43 = v108;
  Capsule<>.root.getter();
  uint64_t v44 = ((uint64_t (*)(char *, char *, uint64_t))v109)(v16, v21, v42);
  MEMORY[0x270FA5388](v44);
  *(&v96 - 4) = (uint64_t)v101;
  *(&v96 - 3) = v43;
  *(&v96 - 2) = (uint64_t)&protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String v45 = v111;
  v111(v16, v42);
  CGAffineTransform v123 = transform;
  Shape.pathAndLineEnds(in:scale:)(&v123, (uint64_t)&transform, v40);
  CGFloat v46 = transform.a;
  CGFloat v47 = transform.b;
  CGFloat c = transform.c;
  tCGFloat y = transform.ty;
  tCGFloat x = transform.tx;
  CGFloat d = transform.d;
  double v50 = v125;
  double v51 = v126;
  double v52 = v127;
  outlined destroy of Shape((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v53 = one-time initialization token for defaultMiterLimit;
  objc_super v54 = (const CGPath *)*(id *)&v46;
  if (v53 != -1) {
    swift_once();
  }
  uint64_t v117 = 0x3FF0000000000000;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v120 = 0x3FF0000000000000;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  uint64_t v55 = (void (*)(char *, char *, uint64_t))CGPathRef.copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:)();
  swift_getKeyPath();
  uint64_t v101 = v54;
  CGRect v56 = v102;
  uint64_t v57 = v114;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v58 = v104;
  TaggedValue_9.tagged3.getter();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v56, v58);
  uint64_t v59 = (unsigned int *)MEMORY[0x263F00038];
  id v109 = v55;
  if (LOBYTE(v125))
  {
    uint64_t v60 = v110;
    uint64_t v61 = *(void (**)(char *, void, uint64_t))(v110 + 104);
    Swift::String v62 = v99;
    uint64_t v63 = v107;
    v61(v99, *MEMORY[0x263F00040], v107);
    Swift::String v64 = v106;
    v61(v106, *v59, v63);
    _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, MEMORY[0x263F00050]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    BOOL v65 = *(void *)&transform.a == v115;
    Swift::String v66 = *(void (**)(char *, uint64_t))(v60 + 8);
    v66(v64, v63);
    uint64_t v67 = v101;
    CGPathRef result = CGPathCreateCopyByUnioningPath(v101, (CGPathRef)v109, v65);
    if (!result)
    {
      __break(1u);
      goto LABEL_33;
    }
    CGPathRef v69 = result;

    v66(v62, v63);
    uint64_t v70 = v114;
    uint64_t v71 = v105;
    Swift::String v45 = v111;
  }
  else
  {
    uint64_t v72 = v101;

    CGPathRef v69 = v55;
    uint64_t v71 = v105;
    uint64_t v70 = v57;
  }
  swift_getKeyPath();
  CGSize v39 = v69;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v112 = v36;
  if (LOBYTE(transform.b))
  {
    char a_low = 1;
  }
  else
  {
    char a_low = LOBYTE(transform.a);
    if (!LOBYTE(transform.a)) {
      goto LABEL_23;
    }
  }
  LOBYTE(v115) = a_low;
  uint64_t v74 = LineEnd.path(from:to:strokeWidth:)(v47, c, ty, v50, v41);
  if (v74)
  {
    uint64_t v75 = (const CGPath *)v74;
    unint64_t v76 = *(void (**)(char *, void, uint64_t))(v110 + 104);
    double v77 = v71;
    uint64_t v78 = v107;
    v76(v77, *MEMORY[0x263F00040], v107);
    uint64_t v79 = v106;
    v76(v106, *MEMORY[0x263F00038], v78);
    _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, MEMORY[0x263F00050]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    BOOL v80 = *(void *)&transform.a == v115;
    uint64_t v81 = *(void (**)(char *, uint64_t))(v110 + 8);
    v81(v79, v78);
    CGPathRef result = CGPathCreateCopyByUnioningPath(v39, v75, v80);
    if (result)
    {
      uint64_t v82 = result;

      v81(v105, v78);
      CGSize v39 = v82;
      uint64_t v70 = v114;
      Swift::String v45 = v111;
      goto LABEL_24;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_23:

LABEL_24:
  swift_getKeyPath();
  CGRect v83 = v70;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v84 = v109;
  if (LOBYTE(transform.b))
  {
    char v85 = 1;
    uint64_t v86 = v110;
    long long v87 = v100;
  }
  else
  {
    char v85 = LOBYTE(transform.a);
    uint64_t v86 = v110;
    long long v87 = v100;
    if (!LOBYTE(transform.a))
    {
LABEL_30:

      v45(v83, v113);
      return v39;
    }
  }
  LOBYTE(v115) = v85;
  uint64_t v88 = LineEnd.path(from:to:strokeWidth:)(d, tx, v51, v52, v41);
  if (!v88) {
    goto LABEL_30;
  }
  uint64_t v89 = (const CGPath *)v88;
  uint64_t v90 = *(void (**)(char *, void, uint64_t))(v86 + 104);
  uint64_t v91 = v107;
  v90(v87, *MEMORY[0x263F00040], v107);
  uint64_t v92 = v106;
  v90(v106, *MEMORY[0x263F00038], v91);
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, MEMORY[0x263F00050]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  BOOL v93 = *(void *)&transform.a == v115;
  uint64_t v94 = *(void (**)(char *, uint64_t))(v86 + 8);
  v94(v92, v91);
  CGPathRef result = CGPathCreateCopyByUnioningPath(v39, v89, v93);
  if (result)
  {
    uint64_t v95 = result;

    v94(v87, v91);
    CGSize v39 = v95;
    v111(v114, v113);
    return v39;
  }
LABEL_34:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ShapeView.updateShapeLayer()()
{
  uint64_t v1 = v0;
  uint64_t v205 = type metadata accessor for ShapeSecondaryProperties();
  MEMORY[0x270FA5388](v205);
  uint64_t v3 = (char *)&v194 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&uint64_t v4 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>));
  v214 = *(void (***)(void, void))(v4 - 8);
  double v215 = *(double *)&v4;
  MEMORY[0x270FA5388](v4);
  v213 = (char *)&v194 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v194 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  v212 = (char *)&v194 - v10;
  v218 = (void (*)(char *, uint64_t))type metadata accessor for Shape();
  MEMORY[0x270FA5388](v218);
  v220 = (char *)&v194 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v224 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v194 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v194 - v16;
  MEMORY[0x270FA5388](v18);
  v201 = (char *)&v194 - v19;
  MEMORY[0x270FA5388](v20);
  v198 = (char *)&v194 - v21;
  MEMORY[0x270FA5388](v22);
  v197 = (char *)&v194 - v23;
  MEMORY[0x270FA5388](v24);
  v200 = (char *)&v194 - v25;
  MEMORY[0x270FA5388](v26);
  v211 = (char *)&v194 - v27;
  MEMORY[0x270FA5388](v28);
  v210 = (char *)&v194 - v29;
  MEMORY[0x270FA5388](v30);
  v217 = (char *)&v194 - v31;
  uint64_t v32 = self;
  objc_msgSend(v32, sel_begin);
  objc_msgSend(v32, sel_setDisableActions_, 1);
  id v33 = ShapeView.groupLayer.getter();
  objc_msgSend(v33, sel_setAllowsGroupOpacity_, 1);

  uint64_t v34 = MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  v202 = v32;
  v203 = v17;
  v206 = v3;
  v207 = v8;
  v204 = v14;
  if (v34)
  {
    char v35 = (void *)v34;
    AnyCanvasElementView.paperBoundsTransform()(&v232);

    double a = v232.a;
    double b = v232.b;
    CGFloat c = v232.c;
    double d = v232.d;
    tCGFloat x = v232.tx;
    tCGFloat y = v232.ty;
  }
  else
  {
    double d = 1.0;
    tCGFloat y = 0.0;
    tCGFloat x = 0.0;
    CGFloat c = 0.0;
    double b = 0.0;
    double a = 1.0;
  }
  uint64_t v42 = v1;
  v221 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  uint64_t v43 = v221;
  swift_beginAccess();
  uint64_t v44 = v224;
  uint64_t v45 = v224 + 16;
  v223 = *(uint64_t (**)(char *, char *, uint64_t))(v224 + 16);
  CGFloat v46 = v217;
  uint64_t v47 = v223(v217, v43, v12);
  MEMORY[0x270FA5388](v47);
  *((void *)&v194 - 4) = v218;
  uint64_t v48 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  *((void *)&v194 - 3) = v48;
  *((void *)&v194 - 2) = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v218 = *(void (**)(char *, uint64_t))(v44 + 8);
  v218(v46, v12);
  t2.double a = a;
  t2.double b = b;
  t2.CGFloat c = c;
  t2.double d = d;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v231, &v227, &t2);
  long long v208 = *(_OWORD *)&v231.c;
  long long v209 = *(_OWORD *)&v231.a;
  CGFloat v49 = v231.tx;
  CGFloat v50 = v231.ty;
  id v222 = v42;
  objc_msgSend(v42, sel_frame);
  CGAffineTransformMakeTranslation(&v227, -v51, -v52);
  long long v53 = *(_OWORD *)&v227.a;
  long long v54 = *(_OWORD *)&v227.c;
  long long v55 = *(_OWORD *)&v227.tx;
  *(_OWORD *)&v227.double a = v209;
  *(_OWORD *)&v227.CGFloat c = v208;
  v227.tCGFloat x = v49;
  v227.tCGFloat y = v50;
  *(_OWORD *)&t2.double a = v53;
  *(_OWORD *)&t2.CGFloat c = v54;
  *(_OWORD *)&t2.tCGFloat x = v55;
  CGAffineTransformConcat(&v231, &v227, &t2);
  CGAffineTransform t2 = v231;
  CGRect v56 = v221;
  uint64_t v57 = (void (*)(char *, char *, uint64_t))v223;
  v223(v46, v221, v12);
  uint64_t v58 = v220;
  Capsule<>.root.getter();
  uint64_t v59 = v46;
  uint64_t v60 = v218;
  v218(v59, v12);
  double v61 = sqrt(b * b + a * a);
  Shape.pathAndLineEnds(in:scale:)(&t2, (uint64_t)&v227, v61);
  *(CGFloat *)&long long v208 = v227.a;
  CGFloat v63 = v227.b;
  CGFloat v62 = v227.c;
  CGFloat v64 = v227.d;
  CGFloat v65 = v227.tx;
  CGFloat v66 = v227.ty;
  double v194 = v228;
  double v67 = v229;
  double v68 = v230;
  uint64_t v69 = (uint64_t)v58;
  uint64_t v70 = v44 + 8;
  uint64_t v71 = v45;
  outlined destroy of Shape(v69, (uint64_t (*)(void))type metadata accessor for Shape);
  uint64_t v72 = v210;
  v57(v210, v56, v12);
  swift_getKeyPath();
  v220 = (char *)v48;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v216 = v12;
  uint64_t v224 = v70;
  v60(v72, v12);
  CGFloat v73 = v227.a;
  uint64_t v219 = v71;
  double v195 = v66;
  CGFloat v196 = v62;
  if (*(void *)&v227.a)
  {
    id v74 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&v227.a);
    id v75 = objc_msgSend(v222, sel_traitCollection);
    objc_msgSend(v75, sel_userInterfaceStyle);

    unint64_t v76 = (void *)static PKInkingTool.convertColor(_:from:to:)();
    id v77 = ShapeView.shapeLayer.getter();
    id v78 = objc_msgSend(v76, sel_CGColor);
    objc_msgSend(v77, sel_setFillColor_, v78);
  }
  else
  {
    id v78 = ShapeView.shapeLayer.getter();
    objc_msgSend(v78, sel_setFillColor_, 0);
  }

  uint64_t v79 = v216;
  BOOL v80 = v217;
  uint64_t v81 = v221;
  uint64_t v82 = (void (*)(char *, char *, uint64_t))v223;
  v223(v217, v221, v216);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v218(v80, v79);
  double v83 = v61 * v227.a;
  id v84 = ShapeView.shapeLayer.getter();
  objc_msgSend(v84, sel_setLineWidth_, v83);

  id v85 = ShapeView.startLineEndLayer.getter();
  objc_msgSend(v85, sel_setLineWidth_, v83);

  id v86 = ShapeView.endLineEndLayer.getter();
  objc_msgSend(v86, sel_setLineWidth_, v83);

  v82(v80, v81, v79);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  long long v87 = v218;
  v218(v80, v79);
  double v88 = v227.a;
  v210 = (char *)ShapeView.startLineEndLayer.getter();
  v82(v80, v221, v79);
  uint64_t v89 = v82;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v87(v80, v79);
  v231.double a = v227.a;
  LOBYTE(v231.b) = LOBYTE(v227.b);
  uint64_t v225 = 0;
  char v226 = 0;
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  char v90 = static CRExtensible.== infix(_:_:)();
  id v91 = v210;
  objc_msgSend(v210, sel_setHidden_, v90 & 1);

  id v92 = ShapeView.endLineEndLayer.getter();
  v89(v80, v221, v79);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v87(v80, v79);
  v231.double a = v227.a;
  LOBYTE(v231.b) = LOBYTE(v227.b);
  uint64_t v225 = 0;
  char v226 = 0;
  objc_msgSend(v92, sel_setHidden_, static CRExtensible.== infix(_:_:)() & 1);

  BOOL v93 = v221;
  id v94 = ShapeView.shapeLayer.getter();
  uint64_t v95 = v211;
  v223(v211, v93, v79);
  swift_getKeyPath();
  uint64_t v96 = (uint64_t)v212;
  Capsule<>.subscript.getter();
  swift_release();
  v87(v95, v79);
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  uint64_t v98 = *(void *)(v97 - 8);
  uint64_t v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  int v100 = v99(v96, 1, v97);
  v210 = (char *)(v98 + 48);
  v211 = (char *)v97;
  uint64_t v199 = v98;
  *(void *)&long long v209 = v99;
  if (v100 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    id v101 = (id)*MEMORY[0x263F15E68];
  }
  else
  {
    id v101 = TaggedValue_2<>.caLineCap.getter();
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v96, v97);
  }
  double v102 = v215;
  objc_msgSend(v94, sel_setLineCap_, v101);

  uint64_t v104 = v216;
  uint64_t v103 = v217;
  v223(v217, v93, v216);
  swift_getKeyPath();
  id v105 = v213;
  Capsule<>.subscript.getter();
  swift_release();
  double v106 = v218;
  uint64_t v107 = v93;
  v218(v103, v104);
  TaggedValue_9.tagged3.getter();
  ((void (**)(char *, void))v214)[1](v105, *(void *)&v102);
  uint64_t v108 = (void (*)(char *, char *, uint64_t))v223;
  if (LOBYTE(v228))
  {
LABEL_17:
    uint64_t v131 = v201;
    unint64_t v132 = v107;
    v108(v201, v107, v104);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v106(v131, v104);
    CGFloat v133 = v227.a;
    uint64_t v111 = v106;
    if (*(void *)&v227.a)
    {
      id v134 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&v227.a);
      id v135 = objc_msgSend(v222, sel_traitCollection);
      objc_msgSend(v135, sel_userInterfaceStyle);

      CGFloat v136 = (void *)static PKInkingTool.convertColor(_:from:to:)();
      id v137 = ShapeView.shapeLayer.getter();
      id v138 = objc_msgSend(v136, sel_CGColor);
      objc_msgSend(v137, sel_setStrokeColor_, v138);
    }
    else
    {
      id v138 = ShapeView.shapeLayer.getter();
      objc_msgSend(v138, sel_setStrokeColor_, 0);
    }
    uint64_t v122 = v216;
    uint64_t v123 = (uint64_t)v207;
    goto LABEL_28;
  }
  id v109 = v200;
  v223(v200, v93, v104);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v106(v109, v104);
  CGFloat v110 = v227.a;
  uint64_t v111 = v106;
  if (!*(void *)&v227.a)
  {
    uint64_t v108 = (void (*)(char *, char *, uint64_t))v223;
    uint64_t v104 = v216;
    uint64_t v107 = v221;
    goto LABEL_17;
  }
  id v112 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&v227.a);
  id v113 = objc_msgSend(v222, sel_traitCollection);
  objc_msgSend(v113, sel_userInterfaceStyle);

  long long v114 = (void *)static PKInkingTool.convertColor(_:from:to:)();
  uint64_t v115 = (CGColor *)objc_msgSend(v114, sel_CGColor);
  CopyWithAlphdouble a = CGColorCreateCopyWithAlpha(v115, 1.0);

  id v117 = ShapeView.shapeLayer.getter();
  objc_msgSend(v117, sel_setStrokeColor_, CopyWithAlpha);

  id v118 = ShapeView.startLineEndLayer.getter();
  objc_msgSend(v118, sel_setFillColor_, CopyWithAlpha);

  id v119 = ShapeView.endLineEndLayer.getter();
  objc_msgSend(v119, sel_setFillColor_, CopyWithAlpha);

  id v120 = *(id *)&v110;
  uint64_t v121 = CGColorRef.components.getter();
  if (!v121) {
    goto LABEL_69;
  }
  uint64_t v122 = v216;
  uint64_t v123 = (uint64_t)v207;
  KeyPath = v221;
  if (*(void *)(v121 + 16) < 4uLL) {
    goto LABEL_66;
  }
  v214 = (void (**)(void, void))CopyWithAlpha;
  double v215 = v61;
  double v125 = v88;
  double v126 = *(double *)(v121 + 56);

  swift_bridgeObjectRelease();
  id v127 = ShapeView.startLineEndLayer.getter();
  uint64_t v128 = v197;
  v223(v197, KeyPath, v122);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v111(v128, v122);
  if (LOBYTE(v227.b))
  {
    CGRect v129 = v114;
    char a_low = 1;
LABEL_22:
    LOBYTE(v231.a) = a_low;
    CGFloat v139 = (void *)LineEnd.path(from:to:strokeWidth:)(v63, v196, v195, v194, v83);
    goto LABEL_23;
  }
  CGRect v129 = v114;
  char a_low = LOBYTE(v227.a);
  if (LOBYTE(v227.a)) {
    goto LABEL_22;
  }
  CGFloat v139 = 0;
LABEL_23:
  objc_msgSend(v127, sel_setPath_, v139);

  id v140 = ShapeView.endLineEndLayer.getter();
  CGFloat v141 = v198;
  v223(v198, v221, v122);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v111(v141, v122);
  if (LOBYTE(v227.b))
  {
    char v142 = 1;
  }
  else
  {
    char v142 = LOBYTE(v227.a);
    if (!LOBYTE(v227.a))
    {
      id v138 = 0;
      goto LABEL_27;
    }
  }
  LOBYTE(v231.a) = v142;
  id v138 = (id)LineEnd.path(from:to:strokeWidth:)(v64, v65, v67, v68, v83);
LABEL_27:
  double v88 = v125 * v126;
  objc_msgSend(v140, sel_setPath_, v138);

  unint64_t v132 = v221;
  double v61 = v215;
LABEL_28:

  uint64_t v143 = v203;
  v223(v203, v132, v122);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v111(v143, v122);
  v144 = v211;
  if (((unsigned int (*)(uint64_t, uint64_t, char *))v209)(v123, 1, v211) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v123, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    v145 = v217;
  }
  else
  {
    TaggedValue_2.tagged1.getter();
    double v146 = v227.a;
    CGFloat v147 = v227.b;
    (*(void (**)(uint64_t, char *))(v199 + 8))(v123, v144);
    v145 = v217;
    if (v147 != 0.0)
    {
      if (*(void *)(*(void *)&v147 + 16))
      {
        id v148 = ShapeView.shapeLayer.getter();
        objc_msgSend(v148, sel_setLineDashPhase_, v83 * v146);

        id v149 = ShapeView.shapeLayer.getter();
        uint64_t v150 = *(void *)(*(void *)&v147 + 16);
        if (v150)
        {
          *(void *)&v227.double a = MEMORY[0x263F8EE78];
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v151 = 0;
          do
          {
            uint64_t v152 = v151 + 1;
            CGFloat._bridgeToObjectiveC()();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            uint64_t v151 = v152;
          }
          while (v150 != v152);
          swift_bridgeObjectRelease();
          v145 = v217;
          uint64_t v111 = v218;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v149, sel_setLineDashPattern_, isa);

        uint64_t v122 = v216;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v154 = v204;
  v223(v204, v132, v122);
  KeyPath = (char *)swift_getKeyPath();
  uint64_t v155 = (uint64_t)v206;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v156 = v111;
  uint64_t v157 = v122;
  char v158 = v156;
  v156(v154, v122);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.getter();
  outlined destroy of Shape(v155, (uint64_t (*)(void))type metadata accessor for ShapeSecondaryProperties);
  CGFloat v159 = v227.d;
  if (!*(void *)&v227.d)
  {
    id v163 = v222;
    goto LABEL_47;
  }
  double v160 = v227.b;
  double v161 = v227.c;
  double v162 = v227.a;
  id v163 = v222;
  id v164 = ShapeView.groupLayer.getter();
  objc_msgSend(v164, sel_setShadowOffset_, v162, v160);

  id v165 = ShapeView.groupLayer.getter();
  id v166 = objc_msgSend(v163, sel_window);
  if (v166)
  {
    CGRect v167 = v166;
    KeyPath = (char *)objc_msgSend(v166, sel_screen);

    objc_msgSend(KeyPath, sel_scale);
    double v169 = v168;
  }
  else
  {
    double v169 = 1.0;
  }
  objc_msgSend(v165, sel_setShadowRadius_, v61 * v161 / v169);

  id v170 = ShapeView.groupLayer.getter();
  id v171 = *(id *)&v159;
  uint64_t v172 = CGColorRef.components.getter();
  if (v172)
  {
    if (*(void *)(v172 + 16) >= 4uLL)
    {
      double v173 = *(double *)(v172 + 56);

      swift_bridgeObjectRelease();
      *(float *)&double v174 = v173;
      objc_msgSend(v170, sel_setShadowOpacity_, v174);

LABEL_47:
      id v175 = ShapeView.groupLayer.getter();
      id v176 = objc_msgSend(v175, sel_superlayer);

      id v177 = objc_msgSend(v163, sel_layer);
      v178 = v177;
      if (v176)
      {
        if (v177)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
          id v179 = v176;
          char v180 = static NSObject.== infix(_:_:)();

          if (v180) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
        v178 = v176;
      }
      else if (!v177)
      {
        goto LABEL_56;
      }

LABEL_55:
      id v181 = objc_msgSend(v222, sel_layer);
      id v182 = ShapeView.groupLayer.getter();
      objc_msgSend(v181, sel_addSublayer_, v182);

LABEL_56:
      v183 = (void (*)(char *, char *, uint64_t))v223;
      v223(v145, v132, v157);
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v158(v145, v157);
      CGFloat v184 = v227.a;

      if (v184 != 0.0) {
        goto LABEL_59;
      }
      v183(v145, v132, v157);
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v158(v145, v157);
      CGFloat v185 = v227.a;

      if (v185 != 0.0
        || (v183(v145, v132, v157),
            uint64_t v186 = specialized Capsule<>.isTextBox.getter(),
            v158(v145, v157),
            (v186 & 1) != 0))
      {
LABEL_59:
        id v187 = ShapeView.groupLayer.getter();
        *(float *)&double v188 = v88;
        objc_msgSend(v187, sel_setOpacity_, v188);
LABEL_60:
        v189 = v202;
        v190 = (void *)v208;

        id v191 = ShapeView.shapeLayer.getter();
        objc_msgSend(v191, sel_setPath_, v190);

        objc_msgSend(v189, sel_commit);
        return;
      }
      KeyPath = (char *)ShapeView.shapeLayer.getter();
      if (one-time initialization token for resizeInvisibleShapeBorderColor == -1)
      {
LABEL_62:
        objc_msgSend(KeyPath, sel_setStrokeColor_, static UIConstants.resizeInvisibleShapeBorderColor);

        id v192 = ShapeView.shapeLayer.getter();
        objc_msgSend(v192, sel_setLineWidth_, 1.0);

        id v187 = ShapeView.groupLayer.getter();
        LODWORD(v193) = 1.0;
        objc_msgSend(v187, sel_setOpacity_, v193);
        goto LABEL_60;
      }
LABEL_67:
      swift_once();
      goto LABEL_62;
    }
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  __break(1u);
LABEL_69:
  __break(1u);
}

uint64_t key path getter for Shape.strokeStyle : Shape()
{
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for Shape.strokeStyle : Shape(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v12 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v12 - v9;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v12 - v9, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  type metadata accessor for Shape();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
}

void @objc ShapeView.layoutSubviews()(void *a1)
{
  v3.receiver = a1;
  v3.super_class = (Class)type metadata accessor for ShapeView();
  uint64_t v1 = (char *)v3.receiver;
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  ShapeView.updateShapeLayer()();
  uint64_t v2 = *(void **)&v1[direct field offset for ShapeView._textBoxView];
  if (v2) {
    objc_msgSend(v2, sel_layoutSubviews, v3.receiver, v3.super_class);
  }
  specialized AppearanceStreamViewSupport.updateAppearanceStreamView()();
}

void @objc ShapeView.setNeedsDisplay()(char *a1)
{
  uint64_t v2 = *(void **)&a1[direct field offset for ShapeView._textBoxView];
  objc_super v3 = a1;
  if (v2) {
    objc_msgSend(v2, sel_setNeedsDisplay);
  }
  v4.receiver = a1;
  v4.super_class = (Class)type metadata accessor for ShapeView();
  objc_msgSendSuper2(&v4, sel_setNeedsDisplay);
}

void __swiftcall ShapeView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  uint64_t v6 = type metadata accessor for CGPathFillRule();
  uint64_t v57 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  CGRect v56 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v54 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v52);
  uint64_t v55 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v48 - v20;
  id v22 = ShapeView.shapeLayer.getter();
  id v23 = objc_msgSend(v22, sel_path);

  id v59 = v23;
  if (v23)
  {
    uint64_t v51 = v6;
    uint64_t v24 = *(void **)((char *)v3 + direct field offset for ShapeView._textBoxView);
    if (v24)
    {
      id v25 = v24;
      objc_msgSend(v3, sel_convertPoint_toView_, v25, x, y);
      id v26 = objc_msgSend(v25, sel_hitTest_withEvent_, isa);

      if (v26)
      {

        return;
      }
    }
    uint64_t v27 = (objc_class *)((char *)v3 + *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x380));
    swift_beginAccess();
    uint64_t v28 = v3;
    uint64_t v29 = *(void (**)(char *, Class, uint64_t))(v16 + 16);
    Class isa = v27;
    CGFloat v50 = v29;
    v29(v21, v27, v15);
    char v30 = specialized Capsule<>.isTextBox.getter();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v16 + 8);
    v31(v21, v15);
    if (v30)
    {
      objc_msgSend(v28, sel_bounds);
      v67.double x = x;
      v67.double y = y;
      if (CGRectContainsPoint(v68, v67))
      {

        id v32 = v28;
        return;
      }
    }
    id v49 = v28;
    v50(v18, isa, v15);
    uint64_t v48 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    Capsule<>.root.getter();
    v31(v18, v15);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    CRRegister.wrappedValue.getter();
    uint64_t v33 = v54;
    TaggedValue_9.tagged3.getter();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v10, v33);
    int v34 = v66;
    uint64_t v35 = v55;
    outlined init with copy of Shape((uint64_t)v14, v55);
    if (v34 == 1)
    {
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      uint64_t v36 = v60;
      outlined destroy of Shape(v35, (uint64_t (*)(void))type metadata accessor for Shape);
      outlined destroy of Shape((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Shape);
      if (!v36)
      {
        v50(v21, isa, v15);
        swift_getKeyPath();
        Capsule<>.subscript.getter();
        swift_release();
        v31(v21, v15);
        id v38 = v56;
        uint64_t v37 = v57;
        uint64_t v39 = v51;
        (*(void (**)(char *, void, uint64_t))(v57 + 104))(v56, *MEMORY[0x263F00040], v51);
        uint64_t v60 = 0x3FF0000000000000;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v63 = 0x3FF0000000000000;
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        id v40 = v59;
        char v41 = CGPathRef.contains(_:using:transform:)();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);

LABEL_16:
        if (v41) {
          id v47 = v49;
        }
        return;
      }
    }
    else
    {
      outlined destroy of Shape(v35, (uint64_t (*)(void))type metadata accessor for Shape);
      outlined destroy of Shape((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Shape);
    }
    if (one-time initialization token for defaultMiterLimit != -1) {
      swift_once();
    }
    uint64_t v60 = 0x3FF0000000000000;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0x3FF0000000000000;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    id v42 = v59;
    uint64_t v43 = (void *)CGPathRef.copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:)();
    uint64_t v45 = v56;
    uint64_t v44 = v57;
    uint64_t v46 = v51;
    (*(void (**)(char *, void, uint64_t))(v57 + 104))(v56, *MEMORY[0x263F00040], v51);
    char v41 = CGPathRef.contains(_:using:transform:)();

    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    goto LABEL_16;
  }
}

id @objc ShapeView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.Class isa = (Class)a5;
  ShapeView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  uint64_t v13 = v12;

  return v13;
}

Swift::Bool __swiftcall ShapeView.intersects(_:canvasBounds:)(__C::CGRect _, __C::CGRect canvasBounds)
{
  CGFloat height = _.size.height;
  CGFloat width = _.size.width;
  CGFloat y = _.origin.y;
  CGFloat x = _.origin.x;
  uint64_t v7 = type metadata accessor for CGPathFillRule();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&ty - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&ty - v13;
  uint64_t v15 = &v2[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement];
  UIEvent_optional v16 = (void *)MEMORY[0x210550400](&v2[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement], v12);
  if (!v16)
  {
    char v30 = (void *)MEMORY[0x210550400](v15);
    if (v30)
    {

      ShapeView.selectionCoordinateSpace.getter(&v44.a);
      CGFloat a = v44.a;
      CGFloat b = v44.b;
      CGFloat c = v44.c;
      CGFloat d = v44.d;
      CGAffineTransform v43 = v44;
      tCGFloat x = v44.tx;
      tCGFloat y = v44.ty;
      v48.origin.CGFloat x = 0.0;
      v48.origin.CGFloat y = 0.0;
      v48.size.CGFloat width = 1.0;
      v48.size.CGFloat height = 1.0;
      CGRect v49 = CGRectApplyAffineTransform(v48, &v43);
      v52.origin.CGFloat x = x;
      v52.origin.CGFloat y = y;
      v52.size.CGFloat width = width;
      v52.size.CGFloat height = height;
      if (!CGRectIntersectsRect(v49, v52)) {
        return 0;
      }
      v43.CGFloat a = a;
      v43.CGFloat b = b;
      v43.CGFloat c = c;
      v43.CGFloat d = d;
      v43.tCGFloat x = tx;
      v43.tCGFloat y = ty;
      CGAffineTransformInvert(&v42, &v43);
      CGAffineTransform v43 = v42;
      v50.origin.CGFloat x = x;
      v50.origin.CGFloat y = y;
      v50.size.CGFloat width = width;
      v50.size.CGFloat height = height;
      CGRect v51 = CGRectApplyAffineTransform(v50, &v43);
      CGFloat v35 = 0.0;
      CGFloat v36 = 0.0;
      double v37 = 1.0;
      double v38 = 1.0;
    }
    else
    {
      objc_msgSend(v2, sel_bounds);
      CGFloat v35 = x;
      CGFloat v36 = y;
      double v37 = width;
      double v38 = height;
    }
    return CGRectIntersectsRect(v51, *(CGRect *)&v35);
  }

  objc_msgSend(v2, sel_frame);
  CGAffineTransformMakeTranslation(&v44, -v17, -v18);
  v45.origin.CGFloat x = x;
  v45.origin.CGFloat y = y;
  v45.size.CGFloat width = width;
  v45.size.CGFloat height = height;
  CGRect v46 = CGRectApplyAffineTransform(v45, &v44);
  CGFloat v19 = v46.origin.x;
  CGFloat v20 = v46.origin.y;
  CGFloat v21 = v46.size.width;
  CGFloat v22 = v46.size.height;
  id v23 = ShapeView.shapeLayer.getter();
  uint64_t v24 = (const CGPath *)objc_msgSend(v23, sel_path);

  if (!v24) {
    return 0;
  }
  v47.origin.CGFloat x = v19;
  v47.origin.CGFloat y = v20;
  v47.size.CGFloat width = v21;
  v47.size.CGFloat height = v22;
  id v25 = CGPathCreateWithRect(v47, 0);
  id v26 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  v26(v14, *MEMORY[0x263F00040], v7);
  v26(v10, *MEMORY[0x263F00038], v7);
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, MEMORY[0x263F00050]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  BOOL v27 = *(void *)&v44.a == *(void *)&v43.a;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
  v28(v10, v7);
  Swift::Bool v29 = CGPathIntersectsPath(v24, v25, v27);

  v28(v14, v7);
  return v29;
}

Swift::Void __swiftcall ShapeView.updateUI()()
{
  uint64_t v1 = MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    ShapeView.updateShapeLayer()();
    uint64_t v5 = v2;
    ShapeView.setupTextBoxIfNeeded(canvas:)(v2);

    objc_super v3 = *(void **)(v0 + direct field offset for ShapeView._textBoxView);
    if (v3)
    {
      id v4 = v3;
      specialized TextBoxView.updateUI()();
    }
    specialized AppearanceStreamViewSupport.updateAppearanceStreamView()();
    specialized CanvasElementView.updateUI()();
  }
}

void ShapeView.isSelected.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x210550400](&v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
  if (v2)
  {
    objc_super v3 = (void *)v2;
    ShapeView.updateShapeLayer()();
    id v4 = v3;
    ShapeView.setupTextBoxIfNeeded(canvas:)(v3);

    uint64_t v5 = *(void **)&v0[direct field offset for ShapeView._textBoxView];
    if (v5)
    {
      id v6 = v5;
      specialized TextBoxView.updateUI()();
    }
    specialized AppearanceStreamViewSupport.updateAppearanceStreamView()();
    specialized CanvasElementView.updateUI()();
  }
  uint64_t v7 = *(void **)&v1[direct field offset for ShapeView._textBoxView];
  if (v7)
  {
    id v8 = v7;
    specialized TextBoxView.updateSelected()();
  }
  if (v1[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected] == 1
    && v1[direct field offset for ShapeView.showsSignaturePopover] == 1)
  {
    objc_msgSend(v1, sel_becomeFirstResponder);
  }
}

void ShapeView.isSelected.setter(char a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  specialized CanvasElementView.isSelected.didset();
  ShapeView.isSelected.didset();
}

uint64_t ShapeView.uneditedModelCoordinateSpace.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v31 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  double v12 = (char *)&v28 - v11;
  uint64_t v13 = (char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x380);
  swift_beginAccess();
  Swift::Bool v29 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v29(v12, v13, v7);
  char v14 = specialized Capsule<>.isTextBox.getter();
  char v30 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t result = v30(v12, v7);
  if ((v14 & 1) != 0
    && (uint64_t v16 = *(void *)((char *)v2 + direct field offset for ShapeView._textBoxView)) != 0
    && (double v17 = (uint64_t *)(v16 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace),
        (v17[6] & 1) == 0))
  {
    uint64_t v27 = v17[4];
    uint64_t v26 = v17[5];
    uint64_t v25 = v17[2];
    uint64_t v24 = v17[3];
    uint64_t v23 = *v17;
    uint64_t v22 = v17[1];
  }
  else
  {
    uint64_t v18 = (uint64_t)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x388);
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v18, (uint64_t)v6, &demangling cache variable for type metadata for Capsule<Shape>?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      CGFloat v19 = v31;
      v29(v31, v13, v7);
      uint64_t v20 = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for Capsule<Shape>?);
    }
    else
    {
      CGFloat v19 = v31;
      uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v31, v6, v7);
    }
    CGFloat v21 = v30;
    MEMORY[0x270FA5388](v20);
    *(&v28 - 4) = type metadata accessor for Shape();
    *(&v28 - 3) = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    *(&v28 - 2) = (uint64_t)&protocol witness table for Shape;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t result = v21(v19, v7);
    uint64_t v23 = v32;
    uint64_t v22 = v33;
    uint64_t v25 = v34;
    uint64_t v24 = v35;
    uint64_t v27 = v36;
    uint64_t v26 = v37;
  }
  *a1 = v23;
  a1[1] = v22;
  a1[2] = v25;
  a1[3] = v24;
  a1[4] = v27;
  a1[5] = v26;
  return result;
}

void ShapeView.selectionCoordinateSpace.getter(CGFloat *a1@<X8>)
{
  uint64_t v2 = v1;
  CGFloat v66 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>));
  CGFloat v65 = *(double *)(*(void *)&v66 - 8);
  MEMORY[0x270FA5388](*(void *)&v66);
  *(void *)&long long v64 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v62 - v10;
  double v12 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v13(v11, v12, v5);
  char v14 = specialized Capsule<>.isTextBox.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  *(void *)&CGFloat v68 = v6 + 8;
  CGFloat v67 = *(double *)&v15;
  v15(v11, v5);
  if ((v14 & 1) != 0 && (uint64_t v16 = *(void **)((char *)v2 + direct field offset for ShapeView._textBoxView)) != 0)
  {
    id v17 = v16;
    specialized TextBoxView.selectionCoordinateSpace.getter((long long *)&transform);
    CGFloat a = transform.a;
    CGFloat b = transform.b;
    CGFloat c = transform.c;
    CGFloat d = transform.d;
    tCGFloat x = transform.tx;
    tCGFloat y = transform.ty;
  }
  else
  {
    uint64_t v63 = a1;
    uint64_t v24 = (uint64_t (*)(char *, char *, uint64_t))v13;
    v13(v8, v12, v5);
    swift_getKeyPath();
    uint64_t v25 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    uint64_t v26 = v64;
    *(void *)&long long v62 = v25;
    Capsule<>.subscript.getter();
    swift_release();
    CGFloat v27 = v67;
    (*(void (**)(char *, uint64_t))&v67)(v8, v5);
    CGFloat v28 = v66;
    TaggedValue_9.tagged3.getter();
    (*(void (**)(uint64_t, CGFloat))(*(void *)&v65 + 8))(v26, COERCE_CGFLOAT(*(void *)&v28));
    if (v73)
    {
      uint64_t v29 = v24(v11, v12, v5);
      MEMORY[0x270FA5388](v29);
      uint64_t v30 = type metadata accessor for Shape();
      uint64_t v31 = v62;
      *((void *)&v62 - 4) = v30;
      *((void *)&v62 - 3) = v31;
      *((void *)&v62 - 2) = &protocol witness table for Shape;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))&v27)(v11, v5);
      CGFloat a = transform.a;
      CGFloat b = transform.b;
      CGFloat c = transform.c;
      CGFloat d = transform.d;
      tCGFloat x = transform.tx;
      tCGFloat y = transform.ty;
    }
    else
    {
      double v33 = transform.tx;
      double v32 = transform.ty;
      double v35 = transform.c;
      double v34 = transform.d;
      double v37 = transform.a;
      double v36 = transform.b;
      uint64_t v38 = v24(v11, v12, v5);
      MEMORY[0x270FA5388](v38);
      uint64_t v39 = type metadata accessor for Shape();
      uint64_t v40 = v62;
      *((void *)&v62 - 4) = v39;
      *((void *)&v62 - 3) = v40;
      *((void *)&v62 - 2) = &protocol witness table for Shape;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))&v27)(v11, v5);
      CGAffineTransform transform = t1;
      double v41 = v34 - v36 * 0.25 - v32 * 0.25;
      *(double *)&unint64_t v42 = v35 - v37 * 0.25 - v33 * 0.25 + v35 - v37 * 0.25 - v33 * 0.25;
      *(double *)&unint64_t v43 = v41 + v41;
      Mutable = CGPathCreateMutable();
      CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v36, *(unint64_t *)&v37), &transform);
      CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v32, *(unint64_t *)&v33), (CGPoint)__PAIR128__(v43, v42), &transform);
      PathBoundingBoCGFloat x = CGPathGetPathBoundingBox(Mutable);
      CGFloat x = PathBoundingBox.origin.x;
      CGFloat y = PathBoundingBox.origin.y;
      CGFloat height = PathBoundingBox.size.height;
      CGFloat v66 = PathBoundingBox.size.height;
      CGFloat v68 = PathBoundingBox.origin.x - PathBoundingBox.size.width * 0.0;
      CGFloat v67 = PathBoundingBox.origin.y - PathBoundingBox.size.height * 0.0;
      CGFloat width = PathBoundingBox.size.width;
      CGFloat v65 = PathBoundingBox.size.width;
      double MidX = CGRectGetMidX(PathBoundingBox);
      v75.origin.CGFloat x = x;
      v75.origin.CGFloat y = y;
      v75.size.CGFloat width = width;
      v75.size.CGFloat height = height;
      double MidY = CGRectGetMidY(v75);
      CGAffineTransformMakeRotation(&t1, 0.0);
      long long v64 = *(_OWORD *)&t1.a;
      long long v62 = *(_OWORD *)&t1.c;
      CGFloat v51 = -MidY;
      CGFloat v52 = t1.tx;
      CGFloat v53 = t1.ty;
      CGAffineTransformMakeTranslation(&t1, -MidX, v51);
      CGFloat v54 = t1.a;
      CGFloat v55 = t1.b;
      CGFloat v56 = t1.c;
      CGFloat v57 = t1.d;
      CGFloat v58 = t1.tx;
      CGFloat v59 = t1.ty;
      *(_OWORD *)&t2.CGFloat a = v64;
      *(_OWORD *)&t2.CGFloat c = v62;
      t2.tCGFloat x = v52;
      t2.tCGFloat y = v53;
      CGAffineTransformConcat(&v69, &t1, &t2);
      long long v64 = *(_OWORD *)&v69.a;
      long long v62 = *(_OWORD *)&v69.c;
      CGFloat v60 = v69.tx;
      CGFloat v61 = v69.ty;
      t1.CGFloat a = v54;
      t1.CGFloat b = v55;
      t1.CGFloat c = v56;
      t1.CGFloat d = v57;
      t1.tCGFloat x = v58;
      t1.tCGFloat y = v59;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.CGFloat a = v64;
      *(_OWORD *)&t1.CGFloat c = v62;
      t1.tCGFloat x = v60;
      t1.tCGFloat y = v61;
      CGAffineTransformConcat(&v69, &t1, &t2);
      t1.CGFloat a = v65;
      t1.CGFloat c = 0.0;
      t1.CGFloat b = 0.0;
      t1.CGFloat d = v66;
      t1.tCGFloat x = v68;
      t1.tCGFloat y = v67;
      CGAffineTransform t2 = v69;
      CGAffineTransformConcat(&v69, &t1, &t2);
      CGFloat a = v69.a;
      CGFloat b = v69.b;
      CGFloat c = v69.c;
      CGFloat d = v69.d;
      tCGFloat x = v69.tx;
      tCGFloat y = v69.ty;
    }
    a1 = v63;
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
}

uint64_t ShapeView.wantsRectangularSelection.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v6 + 16))(v8, v9, v5);
  swift_getKeyPath();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  TaggedValue_9.tagged3.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  return v11[48];
}

void *ShapeView.canvasElementImage.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v1 - 8);
  long long v62 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v4 = *(void **)(v3 - 8);
  uint64_t v63 = v4[8];
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v57 - v8;
  uint64_t v10 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  CGFloat v61 = v4;
  uint64_t v11 = (void (*)(char *, char *, uint64_t))v4[2];
  long long v64 = v4 + 2;
  v11(v9, v10, v3);
  swift_getKeyPath();
  uint64_t v59 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  CGFloat v60 = v9;
  Capsule<>.subscript.getter();
  swift_release();
  double v12 = (void (*)(char *, uint64_t))v4[1];
  v12(v9, v3);
  CGFloat v13 = v69;
  v11(v6, v10, v3);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v12(v6, v3);
  CGFloat x = v68.origin.x;
  CGFloat y = v68.origin.y;
  CGFloat width = v68.size.width;
  CGFloat height = v68.size.height;
  double MidX = CGRectGetMidX(v68);
  v70.origin.CGFloat x = x;
  v70.origin.CGFloat y = y;
  v70.size.CGFloat width = width;
  v70.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v70);
  CGAffineTransformMakeRotation(&t1, v13);
  long long v58 = *(_OWORD *)&t1.a;
  long long v57 = *(_OWORD *)&t1.c;
  CGFloat v20 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v20);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v27 = t1.tx;
  CGFloat v28 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v58;
  *(_OWORD *)&t2.CGFloat c = v57;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v65, &t1, &t2);
  long long v58 = *(_OWORD *)&v65.a;
  long long v57 = *(_OWORD *)&v65.c;
  CGFloat v29 = v65.tx;
  CGFloat v30 = v65.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = v27;
  t1.tCGFloat y = v28;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v58;
  *(_OWORD *)&t1.CGFloat c = v57;
  t1.tCGFloat x = v29;
  t1.tCGFloat y = v30;
  CGAffineTransformConcat(&v65, &t1, &t2);
  long long v58 = *(_OWORD *)&v65.a;
  long long v57 = *(_OWORD *)&v65.c;
  CGFloat v31 = v65.tx;
  CGFloat v32 = v65.ty;
  double v33 = v60;
  double v34 = v10;
  v11(v60, v10, v3);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v12(v33, v3);
  v71.origin.CGFloat x = t2.a;
  v71.origin.CGFloat y = t2.b;
  v71.size.CGFloat width = t2.c;
  v71.size.CGFloat height = t2.d;
  *(_OWORD *)&t1.CGFloat a = v58;
  *(_OWORD *)&t1.CGFloat c = v57;
  t1.tCGFloat x = v31;
  t1.tCGFloat y = v32;
  CGRect v72 = CGRectApplyAffineTransform(v71, &t1);
  CGFloat v35 = v72.origin.x;
  CGFloat v36 = v72.origin.y;
  CGFloat v37 = v72.size.width;
  CGFloat v38 = v72.size.height;
  id v39 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v39, sel_scale);
  uint64_t v41 = v40;

  type metadata accessor for ImageRenderer();
  unint64_t v42 = (CGFloat *)swift_allocObject();
  v42[2] = v37;
  v42[3] = v38;
  *((void *)v42 + 4) = v41;
  uint64_t v43 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v42);
  uint64_t v59 = (uint64_t)dispatch_semaphore_create(0);
  type metadata accessor for SendableImage #1 in ShapeView.canvasElementImage.getter();
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = 0;
  uint64_t v45 = (uint64_t)v62;
  static TaskPriority.userInitiated.getter();
  uint64_t v46 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 0, 1, v46);
  v11(v33, v34, v3);
  CGRect v47 = v61;
  unint64_t v48 = (*((unsigned __int8 *)v61 + 80) + 48) & ~(unint64_t)*((unsigned __int8 *)v61 + 80);
  unint64_t v49 = (v63 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  CGRect v50 = (char *)swift_allocObject();
  *((void *)v50 + 2) = 0;
  *((void *)v50 + 3) = 0;
  *((void *)v50 + 4) = v44;
  *((void *)v50 + 5) = v43;
  ((void (*)(char *, char *, uint64_t))v47[4])(&v50[v48], v33, v3);
  CGFloat v51 = (CGFloat *)&v50[v49];
  *CGFloat v51 = v35;
  v51[1] = v36;
  v51[2] = v37;
  v51[3] = v38;
  CGFloat v52 = (void *)v59;
  *(void *)&v50[(v49 + 39) & 0xFFFFFFFFFFFFFFF8] = v59;
  swift_retain();
  swift_retain();
  id v53 = v52;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v45, (uint64_t)&async function pointer to partial apply for closure #1 in ShapeView.canvasElementImage.getter, (uint64_t)v50);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for TaskPriority?);
  OS_dispatch_semaphore.wait()();

  swift_release();
  CGFloat v54 = *(void **)(v44 + 16);
  id v55 = v54;
  swift_release();
  return v54;
}

uint64_t closure #1 in ShapeView.canvasElementImage.getter(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 + 112) = a11;
  *(double *)(v11 + 96) = a3;
  *(double *)(v11 + 104) = a4;
  *(double *)(v11 + 80) = a1;
  *(double *)(v11 + 88) = a2;
  *(void *)(v11 + 64) = a9;
  *(void *)(v11 + 72) = a10;
  *(void *)(v11 + 56) = a8;
  type metadata accessor for Shape();
  *(void *)(v11 + 120) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in ShapeView.canvasElementImage.getter, 0, 0);
}

uint64_t closure #1 in ShapeView.canvasElementImage.getter()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  long long v7 = *(_OWORD *)(v0 + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 16) = v7;
  *(void *)(v0 + 32) = v2;
  *(void *)(v0 + 40) = v1;
  *(unsigned char *)(v0 + 48) = 0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                     + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in ShapeView.canvasElementImage.getter;
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 72);
  return v8(v4, v5, v0 + 16, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[7];
  uint64_t v2 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v0[17];

  OS_dispatch_semaphore.signal()();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t closure #1 in ShapeView.canvasElementImage.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  outlined destroy of Shape(v2, (uint64_t (*)(void))type metadata accessor for Shape);
  return MEMORY[0x270FA2498](closure #1 in ShapeView.canvasElementImage.getter, 0, 0);
}

Swift::OpaquePointer_optional __swiftcall ShapeView.pasteboardRepresentation()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v34 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  double v33 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for UTType();
  uint64_t v35 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  char v11 = specialized Capsule<>.isTextBox.getter();
  CGFloat v32 = *(void (**)(char *, uint64_t))(v6 + 8);
  v32(v8, v5);
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C832C20;
    static UTType.plainText.getter();
    uint64_t v13 = UTType.identifier.getter();
    uint64_t v31 = v1;
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v36);
    *(void *)(inited + 32) = v13;
    *(void *)(inited + 40) = v15;
    v10(v8, v9, v5);
    swift_getKeyPath();
    _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    uint64_t v16 = v33;
    Capsule<>.subscript.getter();
    swift_release();
    v32(v8, v5);
    uint64_t v17 = v31;
    uint64_t v18 = (void *)CRAttributedString.attributedString.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v17);
    id v19 = objc_msgSend(v18, sel_string);

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    *(void *)(inited + 72) = MEMORY[0x263F8D310];
    *(void *)(inited + 48) = v20;
    *(void *)(inited + 56) = v22;
LABEL_5:
    uint64_t v25 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
    goto LABEL_6;
  }
  uint64_t v23 = v35;
  uint64_t v24 = v36;
  uint64_t v25 = ShapeView.canvasElementImage.getter();
  if (v25)
  {
    CGFloat v27 = v25;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C832C20;
    static UTType.png.getter();
    uint64_t v28 = UTType.identifier.getter();
    uint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v24);
    *(void *)(inited + 32) = v28;
    *(void *)(inited + 40) = v30;
    *(void *)(inited + 72) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    *(void *)(inited + 48) = v27;
    goto LABEL_5;
  }
LABEL_6:
  result.value._rawValue = v25;
  result.is_nil = v26;
  return result;
}

uint64_t key path getter for Shape.text : Shape@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for Shape() + 52);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, v3, v4);
}

uint64_t key path setter for Shape.text : Shape(uint64_t a1)
{
  uint64_t v2 = Shape.text.modify(v7);
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(v4, a1, v5);
  return ((uint64_t (*)(void *, void))v2)(v7, 0);
}

id @objc ShapeView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  id v9 = specialized ShapeView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)();

  return v9;
}

id ShapeView.dragInteractionPreviewForLifting(item:session:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_getKeyPath();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  CGFloat v7 = v42;
  objc_msgSend(v1, sel_bounds);
  CGFloat x = v43.origin.x;
  CGFloat y = v43.origin.y;
  CGFloat width = v43.size.width;
  CGFloat height = v43.size.height;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = x;
  v44.origin.CGFloat y = y;
  v44.size.CGFloat width = width;
  v44.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v44);
  CGAffineTransformMakeRotation(&t1, v7);
  long long v38 = *(_OWORD *)&t1.a;
  long long v37 = *(_OWORD *)&t1.c;
  CGFloat v14 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v14);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v21 = t1.tx;
  CGFloat v22 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v38;
  *(_OWORD *)&t2.CGFloat c = v37;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v39, &t1, &t2);
  long long v38 = *(_OWORD *)&v39.a;
  long long v37 = *(_OWORD *)&v39.c;
  CGFloat v23 = v39.tx;
  CGFloat v24 = v39.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = v21;
  t1.tCGFloat y = v22;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v38;
  *(_OWORD *)&t1.CGFloat c = v37;
  t1.tCGFloat x = v23;
  t1.tCGFloat y = v24;
  CGAffineTransformConcat(&v39, &t1, &t2);
  long long v38 = *(_OWORD *)&v39.a;
  long long v37 = *(_OWORD *)&v39.c;
  CGFloat v25 = v39.tx;
  CGFloat v26 = v39.ty;
  objc_msgSend(v1, sel_bounds);
  *(_OWORD *)&t1.CGFloat a = v38;
  *(_OWORD *)&t1.CGFloat c = v37;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGRect v46 = CGRectApplyAffineTransform(v45, &t1);
  double v27 = v46.origin.x;
  double v28 = v46.origin.y;
  double v29 = v46.size.width;
  double v30 = v46.size.height;
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82AD0]), sel_init);
  if (one-time initialization token for shapePreviewCornerRadius != -1) {
    swift_once();
  }
  id v32 = objc_msgSend(self, sel_bezierPathWithRoundedRect_cornerRadius_, v27, v28, v29, v30, *(double *)&static UIConstants.shapePreviewCornerRadius);
  objc_msgSend(v31, sel_setVisiblePath_, v32);

  id v33 = objc_allocWithZone(MEMORY[0x263F82CB8]);
  uint64_t v34 = v1;
  id v35 = objc_msgSend(v33, sel_initWithView_parameters_, v34, v31);

  return v35;
}

Swift::String_optional __swiftcall ShapeView.accessibilityDescription()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  CGFloat v7 = (char *)&v53 - v6;
  uint64_t v8 = specialized CanvasElementView.accessibilityDescription()();
  if (v9)
  {
    long long v58 = v4;
    CGFloat v60 = v9;
    double v61 = *(double *)&v8;
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v67._uint64_t countAndFlagsBits = 0xD00000000000004CLL;
    v67._object = (void *)0x800000020C858B20;
    v10._uint64_t countAndFlagsBits = 0x3A7974696361704FLL;
    v10._object = (void *)0xEE002566302E2520;
    v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v11.value._object = (void *)0xEB00000000656C62;
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v67);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v14 = swift_allocObject();
    long long v64 = xmmword_20C832C20;
    *(_OWORD *)(v14 + 16) = xmmword_20C832C20;
    id v55 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
    uint64_t v15 = v55;
    swift_beginAccess();
    CGFloat v54 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    uint64_t v63 = v2 + 16;
    v54(v7, v15, v1);
    swift_getKeyPath();
    uint64_t v62 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    Capsule<>.subscript.getter();
    swift_release();
    id v53 = *(void (**)(char *, uint64_t))(v2 + 8);
    v53(v7, v1);
    double v16 = v65 * 100.0;
    *(void *)(v14 + 56) = MEMORY[0x263F8EF38];
    uint64_t v56 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(void *)(v14 + 64) = v56;
    *(double *)(v14 + 32) = v16;
    v57._uint64_t countAndFlagsBits = static String.localizedStringWithFormat(_:_:)();
    v57._object = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 0xD000000000000012;
    v68._object = (void *)0x800000020C858B90;
    v18._object = (void *)0x800000020C858B70;
    v19.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v19.value._object = (void *)0xEB00000000656C62;
    v20._uint64_t countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    v68._uint64_t countAndFlagsBits = 0xD000000000000044;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v68);
    uint64_t v59 = v13;
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = v64;
    CGFloat v23 = v54;
    CGFloat v22 = v55;
    v54(v7, v55, v1);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    CGFloat v24 = v53;
    v53(v7, v1);
    double v25 = v65;
    uint64_t v26 = v56;
    *(void *)(v21 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v21 + 64) = v26;
    *(double *)(v21 + 32) = v25;
    uint64_t v56 = static String.localizedStringWithFormat(_:_:)();
    double v28 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 0xD000000000000010;
    v69._object = (void *)0x800000020C858C00;
    v29._object = (void *)0x800000020C858BE0;
    v30.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v30.value._object = (void *)0xEB00000000656C62;
    v31._uint64_t countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    v69._uint64_t countAndFlagsBits = 0xD000000000000044;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, paperKitBundle, v31, v69);
    id v32 = v58;
    v23(v58, v22, v1);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v24(v32, v1);
    double v33 = v65;
    if (v65 == 0.0)
    {
      v70._uint64_t countAndFlagsBits = 0xD000000000000020;
      v70._object = (void *)0x800000020C858C50;
      v39._uint64_t countAndFlagsBits = 0x726F6C6F63206F4ELL;
      v39._object = (void *)0xE800000000000000;
      v40.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
      v40.value._object = (void *)0xEB00000000656C62;
      v41._uint64_t countAndFlagsBits = 0;
      v41._object = (void *)0xE000000000000000;
      Swift::String v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, v40, paperKitBundle, v41, v70);
      uint64_t countAndFlagsBits = v42._countAndFlagsBits;
      object = v42._object;
    }
    else
    {
      id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, *(void *)&v65);

      id v35 = objc_msgSend(v34, sel_accessibilityName);
      uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      object = v37;
    }
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = v64;
    *(void *)(v43 + 56) = MEMORY[0x263F8D310];
    *(void *)(v43 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v43 + 32) = countAndFlagsBits;
    *(void *)(v43 + 40) = object;
    uint64_t v44 = static String.localizedStringWithFormat(_:_:)();
    CGRect v46 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    double v65 = v61;
    CGFloat v66 = v60;
    v47._uint64_t countAndFlagsBits = 8236;
    v47._object = (void *)0xE200000000000000;
    String.append(_:)(v47);
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v48._uint64_t countAndFlagsBits = 8236;
    v48._object = (void *)0xE200000000000000;
    String.append(_:)(v48);
    v49._uint64_t countAndFlagsBits = v56;
    v49._object = v28;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._uint64_t countAndFlagsBits = 8236;
    v50._object = (void *)0xE200000000000000;
    String.append(_:)(v50);
    v51._uint64_t countAndFlagsBits = v44;
    v51._object = v46;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)&v65;
    id v9 = v66;
  }
  result.value._object = v9;
  result.value._uint64_t countAndFlagsBits = v8;
  return result;
}

void *ShapeView.textBoxView.getter()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for ShapeView._textBoxView);
  id v2 = v1;
  return v1;
}

id ShapeView.isElementFirstResponder.getter()
{
  uint64_t v1 = *(void *)&v0[direct field offset for ShapeView._textBoxView];
  if (v1 && (uint64_t v0 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView)) == 0) {
    return 0;
  }
  else {
    return objc_msgSend(v0, sel_isFirstResponder);
  }
}

uint64_t ShapeView.resizeHandles.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v18 - v7;
  id v9 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  Swift::String_optional v19 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v19(v8, v9, v2);
  swift_getKeyPath();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v8, v2);
  if ((v20 & 4) != 0 || (v20 & 0x80) != 0) {
    uint64_t v11 = MEMORY[0x263F8EE88];
  }
  else {
    uint64_t v11 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of ShapeView.resizeHandles.getter);
  }
  Swift::String v12 = *(char **)((char *)v1 + direct field offset for ShapeView._textBoxView);
  if (v12)
  {
    uint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (v13)
    {
      uint64_t v14 = v12;
      if (objc_msgSend(v13, sel_isFirstResponder))
      {

        swift_bridgeObjectRelease();
        return MEMORY[0x263F8EE88];
      }
    }
    else
    {
      uint64_t v15 = v12;
    }
    v19(v5, v9, v2);
    char v16 = specialized Capsule<>.isTextBox.getter();
    v10(v5, v2);
    if (v16)
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #2 of ShapeView.resizeHandles.getter);
    }
  }
  return v11;
}

Swift::Void __swiftcall ShapeView.updateFrame()()
{
  specialized CanvasElementView.updateFrame()();
  uint64_t v1 = *(void **)(v0 + direct field offset for ShapeView._textBoxView);
  if (v1)
  {
    objc_msgSend(v1, sel_setNeedsLayout);
  }
}

id ShapeView.didZoom(in:)()
{
  id result = *(id *)(v0 + direct field offset for ShapeView._textBoxView);
  if (result) {
    return objc_msgSend(result, sel_setNeedsLayout);
  }
  return result;
}

Swift::Void __swiftcall ShapeView.beginLiveEdit()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = *(void **)((char *)v0 + direct field offset for ShapeView._textBoxView);
  if (v8)
  {
    id v9 = v8;
    specialized TextBoxView.beginLiveEdit()();
  }
  Swift::String v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = (uint64_t)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x388);
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v11, (uint64_t)v7, &demangling cache variable for type metadata for Capsule<Shape>?);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v13 = *(void *)(v12 - 8);
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Capsule<Shape>?);
  if (v14 == 1)
  {
    uint64_t v15 = (char *)v1 + *(void *)((*v10 & *v1) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v4, v15, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v4, 0, 1, v12);
    swift_beginAccess();
    outlined assign with copy of Capsule<Shape>?((uint64_t)v4, v11);
    swift_endAccess();
    uint64_t v16 = MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v16)
    {
      uint64_t v17 = (void *)v16;
      specialized LiveEditable.didChangeLiveEditing()();
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for Capsule<Shape>?);
    CGPathRef v18 = ShapeView.modelHitTestPath.getter();
    uint64_t v19 = *(void *)((*v10 & *v1) + 0x3A8);
    uint64_t v20 = *(void **)((char *)v1 + v19);
    *(void *)((char *)v1 + v19) = v18;
  }
}

Swift::Void __swiftcall ShapeView.endLiveEdit(undoable:discard:)(Swift::Bool undoable, Swift::Bool discard)
{
  uint64_t v5 = *(char **)(v2 + direct field offset for ShapeView._textBoxView);
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x210550400](&v5[direct field offset for TextBoxView.canvasElementView]);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x1E0);
      id v9 = v5;
      LOBYTE(v8) = v8();

      if (v8)
      {
        Swift::String v10 = &v9[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace];
        *((_OWORD *)v10 + 1) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *(_OWORD *)Swift::String v10 = 0u;
        v10[48] = 1;
      }
    }
  }
  specialized CanvasElementView.endLiveEdit(undoable:discard:)(undoable, discard);
}

void ShapeView.__ivar_destroyer()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for ShapeView.appearanceStreamView);
}

id ShapeView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShapeView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc ShapeView.__ivar_destroyer(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + direct field offset for ShapeView.appearanceStreamView);
}

uint64_t type metadata accessor for ShapeView()
{
  uint64_t result = type metadata singleton initialization cache for ShapeView;
  if (!type metadata singleton initialization cache for ShapeView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ShapeView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ShapeView()
{
  return type metadata accessor for ShapeView();
}

uint64_t type metadata accessor for SendableImage #1 in ShapeView.canvasElementImage.getter()
{
  return self;
}

uint64_t specialized Capsule<>.isTextBox.getter()
{
  uint64_t v19 = type metadata accessor for CRKeyPath();
  uint64_t v0 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  objc_super v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v17 - v4;
  uint64_t v20 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v20);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  Swift::String v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v23[0]) = 5;
  uint64_t v11 = v19;
  (*(void (**)(char *, char *, uint64_t))(v0 + 16))(v2, v5, v19);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v5, v11);
  outlined destroy of Shape((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Shape);
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  uint64_t v12 = v18;
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v21, (uint64_t)v23);
    uint64_t v13 = v24;
    uint64_t v14 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 80))(v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for ShapeTextBox?);
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter()
{
  return Capsule.Ref<>.subscript.setter();
}

{
  type metadata accessor for TextBox();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

{
  type metadata accessor for GraphElement();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

{
  type metadata accessor for Link();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

{
  type metadata accessor for Signature();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

{
  type metadata accessor for Paper();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

{
  type metadata accessor for PaperDocumentPage();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

{
  type metadata accessor for UnknownCanvasElement();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

{
  type metadata accessor for Shape();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

BOOL specialized closure #1 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  objc_super v2 = (void *)MEMORY[0x210550400](v1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x88))();
  BOOL v6 = v5 != 0;
  if (v5)
  {
    uint64_t v7 = (void *)v5;
    v8.n128_f64[0] = MEMORY[0x270FA5388](v5);
    (*(void (**)(void, void, uint64_t (*)(), __n128))((*v4 & *v9) + 0x478))(0, 0, partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), v8);
    UIAccessibilityNotifications v10 = *MEMORY[0x263F83188];
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v25._uint64_t countAndFlagsBits = 0xD000000000000040;
    v25._object = (void *)0x800000020C858AD0;
    v11._object = (void *)0x800000020C858AB0;
    v11._uint64_t countAndFlagsBits = 0xD000000000000016;
    v12.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v12.value._object = (void *)0xEB00000000656C62;
    v13._uint64_t countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v25);
    (*(void (**)(void *__return_ptr, uint64_t, void *))((*v4 & *v3) + 0x1A8))(v24, v14._countAndFlagsBits, v14._object);
    CGAffineTransform.decompose(initialRotation:)((uint64_t)v22, 0.0);
    double v15 = v23 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_20C832C20;
    *(void *)(v16 + 56) = MEMORY[0x263F8EF38];
    *(void *)(v16 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v16 + 32) = v15;
    uint64_t v17 = static String.localizedStringWithFormat(_:_:)();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = (void *)MEMORY[0x21054D080](v17, v19);
    swift_bridgeObjectRelease();
    UIAccessibilityPostNotification(v10, v20);

    uint64_t v3 = v7;
  }

  return v6;
}

BOOL specialized closure #1 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  BOOL v6 = (void *)MEMORY[0x210550400](v5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  __n128 v8 = (void *)MEMORY[0x263F8EED0];
  uint64_t v9 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x88))();
  BOOL v10 = v9 != 0;
  if (v9)
  {
    Swift::String v11 = (void *)v9;
    uint64_t v16 = (void *)MEMORY[0x270FA5388](v9);
    (*(void (**)(void, void, uint64_t))((*v8 & *v16) + 0x478))(0, 0, a2);
    UIAccessibilityNotifications v12 = *MEMORY[0x263F83188];
    uint64_t v13 = a3(0);
    Swift::String v14 = (void *)MEMORY[0x21054D080](v13);
    swift_bridgeObjectRelease();
    UIAccessibilityPostNotification(v12, v14);

    uint64_t v7 = v11;
  }

  return v10;
}

uint64_t specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(void *a1, void *a2, double a3)
{
  uint64_t v44 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v42 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v41 = type metadata accessor for Image();
  uint64_t v48 = v41;
  uint64_t v43 = type metadata accessor for Image;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  uint64_t v49 = v11;
  Swift::String v50 = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String_optional v40 = *(void (**)(char *, uint64_t))(v6 + 8);
  v40(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v54.origin.CGFloat x = t1.a;
  v54.origin.CGFloat y = t1.b;
  v54.size.CGFloat width = t1.c;
  v54.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v54);
  v55.origin.CGFloat x = a;
  v55.origin.CGFloat y = b;
  v55.size.CGFloat width = c;
  v55.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v55);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  long long v39 = *(_OWORD *)&t1.a;
  long long v38 = *(_OWORD *)&t1.c;
  CGFloat v18 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v18);
  CGFloat v21 = t1.a;
  CGFloat v22 = t1.b;
  CGFloat v23 = t1.c;
  CGFloat v24 = t1.d;
  CGFloat v25 = t1.tx;
  CGFloat v26 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v27 = v51.tx;
  CGFloat v28 = v51.ty;
  t1.CGFloat a = v21;
  t1.CGFloat b = v22;
  t1.CGFloat c = v23;
  t1.CGFloat d = v24;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v39;
  *(_OWORD *)&t1.CGFloat c = v38;
  t1.tCGFloat x = v27;
  t1.tCGFloat y = v28;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v29 = v51.tx;
  CGFloat v30 = v51.ty;
  v10(v8, v9, v5);
  uint64_t v31 = v41;
  uint64_t v45 = v41;
  uint64_t v46 = v11;
  Swift::String v47 = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  id v32 = (uint64_t (*)(char *, uint64_t))v40;
  v40(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = v29;
  t2.tCGFloat y = v30;
  CGAffineTransformConcat(&v51, &t1, &t2);
  CGAffineTransform t1 = v51;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  double v33 = v44;
  id v34 = (void *)MEMORY[0x263F8EED0];
  id v35 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v44) + 0x550);
  uint64_t v36 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))v43);
  v35(v8, &t2, v31, v36);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v34 & *v33) + 0x530))(&t2);
  return v32(v8, v5);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  char *v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v18;
  CGFloat tx;
  CGFloat ty;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  void (*v31)(unsigned char *, void);
  _OWORD *v32;
  _OWORD *v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  void *v38;
  void (*v39)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v40;
  long long v42;
  long long v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, char *, uint64_t);
  uint64_t (*v46)();
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _UNKNOWN **v50;
  unsigned char v51[32];
  CGAffineTransform v52;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v55;
  CGRect v56;

  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v45(v9, v11, v6);
  Swift::String v47 = type metadata accessor for Shape();
  uint64_t v48 = v47;
  uint64_t v46 = type metadata accessor for Shape;
  uint64_t v49 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Swift::String v50 = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v7 + 8);
  v44(v9, v6);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v55.origin.CGFloat x = t1.a;
  v55.origin.CGFloat y = t1.b;
  v55.size.CGFloat width = t1.c;
  v55.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v55);
  v56.origin.CGFloat x = a;
  v56.origin.CGFloat y = b;
  v56.size.CGFloat width = c;
  v56.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v56);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  uint64_t v43 = *(_OWORD *)&t1.a;
  Swift::String v42 = *(_OWORD *)&t1.c;
  CGFloat v18 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v18);
  CGFloat v21 = t1.a;
  CGFloat v22 = t1.b;
  CGFloat v23 = t1.c;
  CGFloat v24 = t1.d;
  CGFloat v25 = t1.tx;
  CGFloat v26 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v43;
  *(_OWORD *)&t2.CGFloat c = v42;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v52, &t1, &t2);
  uint64_t v43 = *(_OWORD *)&v52.a;
  Swift::String v42 = *(_OWORD *)&v52.c;
  CGFloat v27 = v52.tx;
  CGFloat v28 = v52.ty;
  t1.CGFloat a = v21;
  t1.CGFloat b = v22;
  t1.CGFloat c = v23;
  t1.CGFloat d = v24;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v43;
  *(_OWORD *)&t1.CGFloat c = v42;
  t1.tCGFloat x = v27;
  t1.tCGFloat y = v28;
  CGAffineTransformConcat(&v52, &t1, &t2);
  uint64_t v43 = *(_OWORD *)&v52.a;
  Swift::String v42 = *(_OWORD *)&v52.c;
  CGFloat v29 = v52.tx;
  CGFloat v30 = v52.ty;
  uint64_t v31 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*v10 & *a1) + 0x1B8))(v51);
  double v33 = v32;
  id v34 = v32[1];
  id v35 = v32[2];
  *(_OWORD *)&t1.CGFloat a = *v32;
  *(_OWORD *)&t1.CGFloat c = v34;
  *(_OWORD *)&t1.tCGFloat x = v35;
  *(_OWORD *)&t2.CGFloat a = v43;
  *(_OWORD *)&t2.CGFloat c = v42;
  t2.tCGFloat x = v29;
  t2.tCGFloat y = v30;
  CGAffineTransformConcat(&v52, &t1, &t2);
  uint64_t v36 = *(_OWORD *)&v52.c;
  long long v37 = *(_OWORD *)&v52.tx;
  *double v33 = *(_OWORD *)&v52.a;
  v33[1] = v36;
  v33[2] = v37;
  v31(v51, 0);
  v45(v9, v11, v6);
  LOBYTE(t1.a) = 3;
  long long v38 = v10;
  long long v39 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*v10 & *a2) + 0x550);
  Swift::String_optional v40 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))v46);
  v39(v9, &t1, v47, v40);
  LOBYTE(t1.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v38 & *a2) + 0x530))(&t1);
  return ((uint64_t (*)(char *, uint64_t))v44)(v9, v6);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v18;
  CGFloat tx;
  CGFloat ty;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  void *v33;
  void *v34;
  void (*v35)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v36;
  long long v38;
  long long v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t (*v43)();
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;
  _UNKNOWN **v50;
  CGAffineTransform v51;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v54;
  CGRect v55;

  uint64_t v44 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v42 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v41 = type metadata accessor for TextBox();
  uint64_t v48 = v41;
  uint64_t v43 = type metadata accessor for TextBox;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  uint64_t v49 = v11;
  Swift::String v50 = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String_optional v40 = *(void (**)(char *, uint64_t))(v6 + 8);
  v40(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v54.origin.CGFloat x = t1.a;
  v54.origin.CGFloat y = t1.b;
  v54.size.CGFloat width = t1.c;
  v54.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v54);
  v55.origin.CGFloat x = a;
  v55.origin.CGFloat y = b;
  v55.size.CGFloat width = c;
  v55.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v55);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  long long v39 = *(_OWORD *)&t1.a;
  long long v38 = *(_OWORD *)&t1.c;
  CGFloat v18 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v18);
  CGFloat v21 = t1.a;
  CGFloat v22 = t1.b;
  CGFloat v23 = t1.c;
  CGFloat v24 = t1.d;
  CGFloat v25 = t1.tx;
  CGFloat v26 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v27 = v51.tx;
  CGFloat v28 = v51.ty;
  t1.CGFloat a = v21;
  t1.CGFloat b = v22;
  t1.CGFloat c = v23;
  t1.CGFloat d = v24;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v39;
  *(_OWORD *)&t1.CGFloat c = v38;
  t1.tCGFloat x = v27;
  t1.tCGFloat y = v28;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v29 = v51.tx;
  CGFloat v30 = v51.ty;
  v10(v8, v9, v5);
  uint64_t v31 = v41;
  uint64_t v45 = v41;
  uint64_t v46 = v11;
  Swift::String v47 = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  id v32 = (uint64_t (*)(char *, uint64_t))v40;
  v40(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = v29;
  t2.tCGFloat y = v30;
  CGAffineTransformConcat(&v51, &t1, &t2);
  CGAffineTransform t1 = v51;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  double v33 = v44;
  id v34 = (void *)MEMORY[0x263F8EED0];
  id v35 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v44) + 0x550);
  uint64_t v36 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))v43);
  v35(v8, &t2, v31, v36);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v34 & *v33) + 0x530))(&t2);
  return v32(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v18;
  CGFloat tx;
  CGFloat ty;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  void *v33;
  void *v34;
  void (*v35)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v36;
  long long v38;
  long long v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t (*v43)();
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;
  _UNKNOWN **v50;
  CGAffineTransform v51;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v54;
  CGRect v55;

  uint64_t v44 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v42 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v41 = type metadata accessor for GraphElement();
  uint64_t v48 = v41;
  uint64_t v43 = type metadata accessor for GraphElement;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  uint64_t v49 = v11;
  Swift::String v50 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String_optional v40 = *(void (**)(char *, uint64_t))(v6 + 8);
  v40(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v54.origin.CGFloat x = t1.a;
  v54.origin.CGFloat y = t1.b;
  v54.size.CGFloat width = t1.c;
  v54.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v54);
  v55.origin.CGFloat x = a;
  v55.origin.CGFloat y = b;
  v55.size.CGFloat width = c;
  v55.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v55);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  long long v39 = *(_OWORD *)&t1.a;
  long long v38 = *(_OWORD *)&t1.c;
  CGFloat v18 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v18);
  CGFloat v21 = t1.a;
  CGFloat v22 = t1.b;
  CGFloat v23 = t1.c;
  CGFloat v24 = t1.d;
  CGFloat v25 = t1.tx;
  CGFloat v26 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v27 = v51.tx;
  CGFloat v28 = v51.ty;
  t1.CGFloat a = v21;
  t1.CGFloat b = v22;
  t1.CGFloat c = v23;
  t1.CGFloat d = v24;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v39;
  *(_OWORD *)&t1.CGFloat c = v38;
  t1.tCGFloat x = v27;
  t1.tCGFloat y = v28;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v29 = v51.tx;
  CGFloat v30 = v51.ty;
  v10(v8, v9, v5);
  uint64_t v31 = v41;
  uint64_t v45 = v41;
  uint64_t v46 = v11;
  Swift::String v47 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  id v32 = (uint64_t (*)(char *, uint64_t))v40;
  v40(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = v29;
  t2.tCGFloat y = v30;
  CGAffineTransformConcat(&v51, &t1, &t2);
  CGAffineTransform t1 = v51;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  double v33 = v44;
  id v34 = (void *)MEMORY[0x263F8EED0];
  id v35 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v44) + 0x550);
  uint64_t v36 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))v43);
  v35(v8, &t2, v31, v36);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v34 & *v33) + 0x530))(&t2);
  return v32(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v18;
  CGFloat tx;
  CGFloat ty;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  void *v33;
  void *v34;
  void (*v35)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v36;
  long long v38;
  long long v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t (*v43)();
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;
  _UNKNOWN **v50;
  CGAffineTransform v51;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v54;
  CGRect v55;

  uint64_t v44 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v42 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v41 = type metadata accessor for Link();
  uint64_t v48 = v41;
  uint64_t v43 = type metadata accessor for Link;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  uint64_t v49 = v11;
  Swift::String v50 = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String_optional v40 = *(void (**)(char *, uint64_t))(v6 + 8);
  v40(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v54.origin.CGFloat x = t1.a;
  v54.origin.CGFloat y = t1.b;
  v54.size.CGFloat width = t1.c;
  v54.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v54);
  v55.origin.CGFloat x = a;
  v55.origin.CGFloat y = b;
  v55.size.CGFloat width = c;
  v55.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v55);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  long long v39 = *(_OWORD *)&t1.a;
  long long v38 = *(_OWORD *)&t1.c;
  CGFloat v18 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v18);
  CGFloat v21 = t1.a;
  CGFloat v22 = t1.b;
  CGFloat v23 = t1.c;
  CGFloat v24 = t1.d;
  CGFloat v25 = t1.tx;
  CGFloat v26 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v27 = v51.tx;
  CGFloat v28 = v51.ty;
  t1.CGFloat a = v21;
  t1.CGFloat b = v22;
  t1.CGFloat c = v23;
  t1.CGFloat d = v24;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v39;
  *(_OWORD *)&t1.CGFloat c = v38;
  t1.tCGFloat x = v27;
  t1.tCGFloat y = v28;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v29 = v51.tx;
  CGFloat v30 = v51.ty;
  v10(v8, v9, v5);
  uint64_t v31 = v41;
  uint64_t v45 = v41;
  uint64_t v46 = v11;
  Swift::String v47 = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  id v32 = (uint64_t (*)(char *, uint64_t))v40;
  v40(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = v29;
  t2.tCGFloat y = v30;
  CGAffineTransformConcat(&v51, &t1, &t2);
  CGAffineTransform t1 = v51;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  double v33 = v44;
  id v34 = (void *)MEMORY[0x263F8EED0];
  id v35 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v44) + 0x550);
  uint64_t v36 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))v43);
  v35(v8, &t2, v31, v36);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v34 & *v33) + 0x530))(&t2);
  return v32(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v18;
  CGFloat tx;
  CGFloat ty;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  void *v33;
  void *v34;
  void (*v35)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v36;
  long long v38;
  long long v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t (*v43)();
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;
  _UNKNOWN **v50;
  CGAffineTransform v51;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v54;
  CGRect v55;

  uint64_t v44 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v42 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v41 = type metadata accessor for Signature();
  uint64_t v48 = v41;
  uint64_t v43 = type metadata accessor for Signature;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  uint64_t v49 = v11;
  Swift::String v50 = &protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String_optional v40 = *(void (**)(char *, uint64_t))(v6 + 8);
  v40(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v54.origin.CGFloat x = t1.a;
  v54.origin.CGFloat y = t1.b;
  v54.size.CGFloat width = t1.c;
  v54.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v54);
  v55.origin.CGFloat x = a;
  v55.origin.CGFloat y = b;
  v55.size.CGFloat width = c;
  v55.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v55);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  long long v39 = *(_OWORD *)&t1.a;
  long long v38 = *(_OWORD *)&t1.c;
  CGFloat v18 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v18);
  CGFloat v21 = t1.a;
  CGFloat v22 = t1.b;
  CGFloat v23 = t1.c;
  CGFloat v24 = t1.d;
  CGFloat v25 = t1.tx;
  CGFloat v26 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v27 = v51.tx;
  CGFloat v28 = v51.ty;
  t1.CGFloat a = v21;
  t1.CGFloat b = v22;
  t1.CGFloat c = v23;
  t1.CGFloat d = v24;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v39;
  *(_OWORD *)&t1.CGFloat c = v38;
  t1.tCGFloat x = v27;
  t1.tCGFloat y = v28;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v29 = v51.tx;
  CGFloat v30 = v51.ty;
  v10(v8, v9, v5);
  uint64_t v31 = v41;
  uint64_t v45 = v41;
  uint64_t v46 = v11;
  Swift::String v47 = &protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  id v32 = (uint64_t (*)(char *, uint64_t))v40;
  v40(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = v29;
  t2.tCGFloat y = v30;
  CGAffineTransformConcat(&v51, &t1, &t2);
  CGAffineTransform t1 = v51;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  double v33 = v44;
  id v34 = (void *)MEMORY[0x263F8EED0];
  id v35 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v44) + 0x550);
  uint64_t v36 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))v43);
  v35(v8, &t2, v31, v36);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v34 & *v33) + 0x530))(&t2);
  return v32(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v18;
  CGFloat tx;
  CGFloat ty;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  void *v33;
  void *v34;
  void (*v35)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v36;
  long long v38;
  long long v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t (*v43)();
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;
  _UNKNOWN **v50;
  CGAffineTransform v51;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v54;
  CGRect v55;

  uint64_t v44 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v42 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v41 = type metadata accessor for Paper();
  uint64_t v48 = v41;
  uint64_t v43 = type metadata accessor for Paper;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v49 = v11;
  Swift::String v50 = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String_optional v40 = *(void (**)(char *, uint64_t))(v6 + 8);
  v40(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v54.origin.CGFloat x = t1.a;
  v54.origin.CGFloat y = t1.b;
  v54.size.CGFloat width = t1.c;
  v54.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v54);
  v55.origin.CGFloat x = a;
  v55.origin.CGFloat y = b;
  v55.size.CGFloat width = c;
  v55.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v55);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  long long v39 = *(_OWORD *)&t1.a;
  long long v38 = *(_OWORD *)&t1.c;
  CGFloat v18 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v18);
  CGFloat v21 = t1.a;
  CGFloat v22 = t1.b;
  CGFloat v23 = t1.c;
  CGFloat v24 = t1.d;
  CGFloat v25 = t1.tx;
  CGFloat v26 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v27 = v51.tx;
  CGFloat v28 = v51.ty;
  t1.CGFloat a = v21;
  t1.CGFloat b = v22;
  t1.CGFloat c = v23;
  t1.CGFloat d = v24;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v39;
  *(_OWORD *)&t1.CGFloat c = v38;
  t1.tCGFloat x = v27;
  t1.tCGFloat y = v28;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v29 = v51.tx;
  CGFloat v30 = v51.ty;
  v10(v8, v9, v5);
  uint64_t v31 = v41;
  uint64_t v45 = v41;
  uint64_t v46 = v11;
  Swift::String v47 = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  id v32 = (uint64_t (*)(char *, uint64_t))v40;
  v40(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = v29;
  t2.tCGFloat y = v30;
  CGAffineTransformConcat(&v51, &t1, &t2);
  CGAffineTransform t1 = v51;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  double v33 = v44;
  id v34 = (void *)MEMORY[0x263F8EED0];
  id v35 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v44) + 0x550);
  uint64_t v36 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))v43);
  v35(v8, &t2, v31, v36);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v34 & *v33) + 0x530))(&t2);
  return v32(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v18;
  CGFloat tx;
  CGFloat ty;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  void *v33;
  void *v34;
  void (*v35)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v36;
  long long v38;
  long long v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t (*v43)();
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;
  _UNKNOWN **v50;
  CGAffineTransform v51;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v54;
  CGRect v55;

  uint64_t v44 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v42 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v41 = type metadata accessor for PaperDocumentPage();
  uint64_t v48 = v41;
  uint64_t v43 = type metadata accessor for PaperDocumentPage;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  uint64_t v49 = v11;
  Swift::String v50 = &protocol witness table for PaperDocumentPage;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String_optional v40 = *(void (**)(char *, uint64_t))(v6 + 8);
  v40(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v54.origin.CGFloat x = t1.a;
  v54.origin.CGFloat y = t1.b;
  v54.size.CGFloat width = t1.c;
  v54.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v54);
  v55.origin.CGFloat x = a;
  v55.origin.CGFloat y = b;
  v55.size.CGFloat width = c;
  v55.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v55);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  long long v39 = *(_OWORD *)&t1.a;
  long long v38 = *(_OWORD *)&t1.c;
  CGFloat v18 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v18);
  CGFloat v21 = t1.a;
  CGFloat v22 = t1.b;
  CGFloat v23 = t1.c;
  CGFloat v24 = t1.d;
  CGFloat v25 = t1.tx;
  CGFloat v26 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v27 = v51.tx;
  CGFloat v28 = v51.ty;
  t1.CGFloat a = v21;
  t1.CGFloat b = v22;
  t1.CGFloat c = v23;
  t1.CGFloat d = v24;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v39;
  *(_OWORD *)&t1.CGFloat c = v38;
  t1.tCGFloat x = v27;
  t1.tCGFloat y = v28;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v29 = v51.tx;
  CGFloat v30 = v51.ty;
  v10(v8, v9, v5);
  uint64_t v31 = v41;
  uint64_t v45 = v41;
  uint64_t v46 = v11;
  Swift::String v47 = &protocol witness table for PaperDocumentPage;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  id v32 = (uint64_t (*)(char *, uint64_t))v40;
  v40(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = v29;
  t2.tCGFloat y = v30;
  CGAffineTransformConcat(&v51, &t1, &t2);
  CGAffineTransform t1 = v51;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  double v33 = v44;
  id v34 = (void *)MEMORY[0x263F8EED0];
  id v35 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v44) + 0x550);
  uint64_t v36 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))v43);
  v35(v8, &t2, v31, v36);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v34 & *v33) + 0x530))(&t2);
  return v32(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v18;
  CGFloat tx;
  CGFloat ty;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  void *v33;
  void *v34;
  void (*v35)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v36;
  long long v38;
  long long v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t (*v43)();
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;
  _UNKNOWN **v50;
  CGAffineTransform v51;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v54;
  CGRect v55;

  uint64_t v44 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v42 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v41 = type metadata accessor for UnknownCanvasElement();
  uint64_t v48 = v41;
  uint64_t v43 = type metadata accessor for UnknownCanvasElement;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  uint64_t v49 = v11;
  Swift::String v50 = &protocol witness table for UnknownCanvasElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  Swift::String_optional v40 = *(void (**)(char *, uint64_t))(v6 + 8);
  v40(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v54.origin.CGFloat x = t1.a;
  v54.origin.CGFloat y = t1.b;
  v54.size.CGFloat width = t1.c;
  v54.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v54);
  v55.origin.CGFloat x = a;
  v55.origin.CGFloat y = b;
  v55.size.CGFloat width = c;
  v55.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v55);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  long long v39 = *(_OWORD *)&t1.a;
  long long v38 = *(_OWORD *)&t1.c;
  CGFloat v18 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v18);
  CGFloat v21 = t1.a;
  CGFloat v22 = t1.b;
  CGFloat v23 = t1.c;
  CGFloat v24 = t1.d;
  CGFloat v25 = t1.tx;
  CGFloat v26 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v27 = v51.tx;
  CGFloat v28 = v51.ty;
  t1.CGFloat a = v21;
  t1.CGFloat b = v22;
  t1.CGFloat c = v23;
  t1.CGFloat d = v24;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v39;
  *(_OWORD *)&t1.CGFloat c = v38;
  t1.tCGFloat x = v27;
  t1.tCGFloat y = v28;
  CGAffineTransformConcat(&v51, &t1, &t2);
  long long v39 = *(_OWORD *)&v51.a;
  long long v38 = *(_OWORD *)&v51.c;
  CGFloat v29 = v51.tx;
  CGFloat v30 = v51.ty;
  v10(v8, v9, v5);
  uint64_t v31 = v41;
  uint64_t v45 = v41;
  uint64_t v46 = v11;
  Swift::String v47 = &protocol witness table for UnknownCanvasElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  id v32 = (uint64_t (*)(char *, uint64_t))v40;
  v40(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v38;
  t2.tCGFloat x = v29;
  t2.tCGFloat y = v30;
  CGAffineTransformConcat(&v51, &t1, &t2);
  CGAffineTransform t1 = v51;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  double v33 = v44;
  id v34 = (void *)MEMORY[0x263F8EED0];
  id v35 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v44) + 0x550);
  uint64_t v36 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))v43);
  v35(v8, &t2, v31, v36);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v34 & *v33) + 0x530))(&t2);
  return v32(v8, v5);
}

BOOL specialized closure #2 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = (void *)MEMORY[0x210550400](v5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  __n128 v8 = (void *)MEMORY[0x263F8EED0];
  uint64_t v9 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x88))();
  BOOL v10 = v9 != 0;
  if (v9)
  {
    uint64_t v11 = (void *)v9;
    uint64_t v16 = (void *)MEMORY[0x270FA5388](v9);
    (*(void (**)(void, void, uint64_t))((*v8 & *v16) + 0x478))(0, 0, a2);
    UIAccessibilityNotifications v12 = *MEMORY[0x263F83188];
    uint64_t v13 = a3(1);
    Swift::String v14 = (void *)MEMORY[0x21054D080](v13);
    swift_bridgeObjectRelease();
    UIAccessibilityPostNotification(v12, v14);

    uint64_t v7 = v11;
  }

  return v10;
}

uint64_t specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(void *a1, void *a2, CGFloat a3)
{
  double v33 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v30 = type metadata accessor for Image();
  uint64_t v37 = v30;
  id v32 = type metadata accessor for Image;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))type metadata accessor for Image);
  uint64_t v38 = v11;
  long long v39 = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v43.origin.CGFloat x = t1.a;
  v43.origin.CGFloat y = t1.b;
  v43.size.CGFloat width = t1.c;
  v43.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = a;
  v44.origin.CGFloat y = b;
  v44.size.CGFloat width = c;
  v44.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v44);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  long long v28 = *(_OWORD *)&t2.a;
  long long v27 = *(_OWORD *)&t2.c;
  tCGFloat x = t2.tx;
  tCGFloat y = t2.ty;
  v10(v8, v9, v5);
  uint64_t v20 = v30;
  uint64_t v34 = v30;
  uint64_t v35 = v11;
  uint64_t v36 = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v21 = (uint64_t (*)(char *, uint64_t))v29;
  v29(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v28;
  *(_OWORD *)&t2.CGFloat c = v27;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v40, &t1, &t2);
  CGAffineTransform t1 = v40;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  CGFloat v22 = v33;
  CGFloat v23 = (void *)MEMORY[0x263F8EED0];
  CGFloat v24 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v33) + 0x550);
  uint64_t v25 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Image and conformance Image, (void (*)(uint64_t))v32);
  v24(v8, &t2, v20, v25);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v23 & *v22) + 0x530))(&t2);
  return v21(v8, v5);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  char *v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  void (*v20)(unsigned char *, void);
  _OWORD *v21;
  _OWORD *v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  void (*v27)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v28;
  long long v30;
  long long v31;
  void (*v32)(char *, uint64_t);
  void (*v33)(char *, char *, uint64_t);
  uint64_t (*v34)();
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _UNKNOWN **v38;
  CGAffineTransform v39;
  unsigned char v40[32];
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v43;
  CGRect v44;

  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  double v33 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v33(v9, v11, v6);
  uint64_t v35 = type metadata accessor for Shape();
  uint64_t v36 = v35;
  uint64_t v34 = type metadata accessor for Shape;
  uint64_t v37 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  uint64_t v38 = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  id v32 = *(void (**)(char *, uint64_t))(v7 + 8);
  v32(v9, v6);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v43.origin.CGFloat x = t1.a;
  v43.origin.CGFloat y = t1.b;
  v43.size.CGFloat width = t1.c;
  v43.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = a;
  v44.origin.CGFloat y = b;
  v44.size.CGFloat width = c;
  v44.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v44);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  uint64_t v31 = *(_OWORD *)&t2.a;
  uint64_t v30 = *(_OWORD *)&t2.c;
  tCGFloat x = t2.tx;
  tCGFloat y = t2.ty;
  uint64_t v20 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*v10 & *a1) + 0x1B8))(v40);
  CGFloat v22 = v21;
  CGFloat v23 = v21[1];
  CGFloat v24 = v21[2];
  *(_OWORD *)&t1.CGFloat a = *v21;
  *(_OWORD *)&t1.CGFloat c = v23;
  *(_OWORD *)&t1.tCGFloat x = v24;
  *(_OWORD *)&t2.CGFloat a = v31;
  *(_OWORD *)&t2.CGFloat c = v30;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v39, &t1, &t2);
  uint64_t v25 = *(_OWORD *)&v39.c;
  CGFloat v26 = *(_OWORD *)&v39.tx;
  *CGFloat v22 = *(_OWORD *)&v39.a;
  v22[1] = v25;
  void v22[2] = v26;
  v20(v40, 0);
  v33(v9, v11, v6);
  LOBYTE(t1.a) = 3;
  long long v27 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*v10 & *a2) + 0x550);
  long long v28 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))v34);
  v27(v9, &t1, v35, v28);
  LOBYTE(t1.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v10 & *a2) + 0x530))(&t1);
  return ((uint64_t (*)(char *, uint64_t))v32)(v9, v6);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  void *v22;
  void *v23;
  void (*v24)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v25;
  long long v27;
  long long v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t (*v32)();
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  _UNKNOWN **v39;
  CGAffineTransform v40;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v43;
  CGRect v44;

  double v33 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v30 = type metadata accessor for TextBox();
  uint64_t v37 = v30;
  id v32 = type metadata accessor for TextBox;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  uint64_t v38 = v11;
  long long v39 = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v43.origin.CGFloat x = t1.a;
  v43.origin.CGFloat y = t1.b;
  v43.size.CGFloat width = t1.c;
  v43.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = a;
  v44.origin.CGFloat y = b;
  v44.size.CGFloat width = c;
  v44.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v44);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  long long v28 = *(_OWORD *)&t2.a;
  long long v27 = *(_OWORD *)&t2.c;
  tCGFloat x = t2.tx;
  tCGFloat y = t2.ty;
  v10(v8, v9, v5);
  uint64_t v20 = v30;
  uint64_t v34 = v30;
  uint64_t v35 = v11;
  uint64_t v36 = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v21 = (uint64_t (*)(char *, uint64_t))v29;
  v29(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v28;
  *(_OWORD *)&t2.CGFloat c = v27;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v40, &t1, &t2);
  CGAffineTransform t1 = v40;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  CGFloat v22 = v33;
  CGFloat v23 = (void *)MEMORY[0x263F8EED0];
  CGFloat v24 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v33) + 0x550);
  uint64_t v25 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))v32);
  v24(v8, &t2, v20, v25);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v23 & *v22) + 0x530))(&t2);
  return v21(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  void *v22;
  void *v23;
  void (*v24)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v25;
  long long v27;
  long long v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t (*v32)();
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  _UNKNOWN **v39;
  CGAffineTransform v40;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v43;
  CGRect v44;

  double v33 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v30 = type metadata accessor for GraphElement();
  uint64_t v37 = v30;
  id v32 = type metadata accessor for GraphElement;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))type metadata accessor for GraphElement);
  uint64_t v38 = v11;
  long long v39 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v43.origin.CGFloat x = t1.a;
  v43.origin.CGFloat y = t1.b;
  v43.size.CGFloat width = t1.c;
  v43.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = a;
  v44.origin.CGFloat y = b;
  v44.size.CGFloat width = c;
  v44.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v44);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  long long v28 = *(_OWORD *)&t2.a;
  long long v27 = *(_OWORD *)&t2.c;
  tCGFloat x = t2.tx;
  tCGFloat y = t2.ty;
  v10(v8, v9, v5);
  uint64_t v20 = v30;
  uint64_t v34 = v30;
  uint64_t v35 = v11;
  uint64_t v36 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v21 = (uint64_t (*)(char *, uint64_t))v29;
  v29(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v28;
  *(_OWORD *)&t2.CGFloat c = v27;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v40, &t1, &t2);
  CGAffineTransform t1 = v40;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  CGFloat v22 = v33;
  CGFloat v23 = (void *)MEMORY[0x263F8EED0];
  CGFloat v24 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v33) + 0x550);
  uint64_t v25 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (void (*)(uint64_t))v32);
  v24(v8, &t2, v20, v25);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v23 & *v22) + 0x530))(&t2);
  return v21(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  void *v22;
  void *v23;
  void (*v24)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v25;
  long long v27;
  long long v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t (*v32)();
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  _UNKNOWN **v39;
  CGAffineTransform v40;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v43;
  CGRect v44;

  double v33 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v30 = type metadata accessor for Link();
  uint64_t v37 = v30;
  id v32 = type metadata accessor for Link;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))type metadata accessor for Link);
  uint64_t v38 = v11;
  long long v39 = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v43.origin.CGFloat x = t1.a;
  v43.origin.CGFloat y = t1.b;
  v43.size.CGFloat width = t1.c;
  v43.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = a;
  v44.origin.CGFloat y = b;
  v44.size.CGFloat width = c;
  v44.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v44);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  long long v28 = *(_OWORD *)&t2.a;
  long long v27 = *(_OWORD *)&t2.c;
  tCGFloat x = t2.tx;
  tCGFloat y = t2.ty;
  v10(v8, v9, v5);
  uint64_t v20 = v30;
  uint64_t v34 = v30;
  uint64_t v35 = v11;
  uint64_t v36 = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v21 = (uint64_t (*)(char *, uint64_t))v29;
  v29(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v28;
  *(_OWORD *)&t2.CGFloat c = v27;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v40, &t1, &t2);
  CGAffineTransform t1 = v40;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  CGFloat v22 = v33;
  CGFloat v23 = (void *)MEMORY[0x263F8EED0];
  CGFloat v24 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v33) + 0x550);
  uint64_t v25 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Link and conformance Link, (void (*)(uint64_t))v32);
  v24(v8, &t2, v20, v25);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v23 & *v22) + 0x530))(&t2);
  return v21(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  void *v22;
  void *v23;
  void (*v24)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v25;
  long long v27;
  long long v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t (*v32)();
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  _UNKNOWN **v39;
  CGAffineTransform v40;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v43;
  CGRect v44;

  double v33 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v30 = type metadata accessor for Signature();
  uint64_t v37 = v30;
  id v32 = type metadata accessor for Signature;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))type metadata accessor for Signature);
  uint64_t v38 = v11;
  long long v39 = &protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v43.origin.CGFloat x = t1.a;
  v43.origin.CGFloat y = t1.b;
  v43.size.CGFloat width = t1.c;
  v43.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = a;
  v44.origin.CGFloat y = b;
  v44.size.CGFloat width = c;
  v44.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v44);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  long long v28 = *(_OWORD *)&t2.a;
  long long v27 = *(_OWORD *)&t2.c;
  tCGFloat x = t2.tx;
  tCGFloat y = t2.ty;
  v10(v8, v9, v5);
  uint64_t v20 = v30;
  uint64_t v34 = v30;
  uint64_t v35 = v11;
  uint64_t v36 = &protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v21 = (uint64_t (*)(char *, uint64_t))v29;
  v29(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v28;
  *(_OWORD *)&t2.CGFloat c = v27;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v40, &t1, &t2);
  CGAffineTransform t1 = v40;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  CGFloat v22 = v33;
  CGFloat v23 = (void *)MEMORY[0x263F8EED0];
  CGFloat v24 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v33) + 0x550);
  uint64_t v25 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Signature and conformance Signature, (void (*)(uint64_t))v32);
  v24(v8, &t2, v20, v25);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v23 & *v22) + 0x530))(&t2);
  return v21(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  void *v22;
  void *v23;
  void (*v24)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v25;
  long long v27;
  long long v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t (*v32)();
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  _UNKNOWN **v39;
  CGAffineTransform v40;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v43;
  CGRect v44;

  double v33 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v30 = type metadata accessor for Paper();
  uint64_t v37 = v30;
  id v32 = type metadata accessor for Paper;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))type metadata accessor for Paper);
  uint64_t v38 = v11;
  long long v39 = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v43.origin.CGFloat x = t1.a;
  v43.origin.CGFloat y = t1.b;
  v43.size.CGFloat width = t1.c;
  v43.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = a;
  v44.origin.CGFloat y = b;
  v44.size.CGFloat width = c;
  v44.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v44);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  long long v28 = *(_OWORD *)&t2.a;
  long long v27 = *(_OWORD *)&t2.c;
  tCGFloat x = t2.tx;
  tCGFloat y = t2.ty;
  v10(v8, v9, v5);
  uint64_t v20 = v30;
  uint64_t v34 = v30;
  uint64_t v35 = v11;
  uint64_t v36 = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v21 = (uint64_t (*)(char *, uint64_t))v29;
  v29(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v28;
  *(_OWORD *)&t2.CGFloat c = v27;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v40, &t1, &t2);
  CGAffineTransform t1 = v40;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  CGFloat v22 = v33;
  CGFloat v23 = (void *)MEMORY[0x263F8EED0];
  CGFloat v24 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v33) + 0x550);
  uint64_t v25 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type Paper and conformance Paper, (void (*)(uint64_t))v32);
  v24(v8, &t2, v20, v25);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v23 & *v22) + 0x530))(&t2);
  return v21(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  void *v22;
  void *v23;
  void (*v24)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v25;
  long long v27;
  long long v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t (*v32)();
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  _UNKNOWN **v39;
  CGAffineTransform v40;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v43;
  CGRect v44;

  double v33 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v30 = type metadata accessor for PaperDocumentPage();
  uint64_t v37 = v30;
  id v32 = type metadata accessor for PaperDocumentPage;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))type metadata accessor for PaperDocumentPage);
  uint64_t v38 = v11;
  long long v39 = &protocol witness table for PaperDocumentPage;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v43.origin.CGFloat x = t1.a;
  v43.origin.CGFloat y = t1.b;
  v43.size.CGFloat width = t1.c;
  v43.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = a;
  v44.origin.CGFloat y = b;
  v44.size.CGFloat width = c;
  v44.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v44);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  long long v28 = *(_OWORD *)&t2.a;
  long long v27 = *(_OWORD *)&t2.c;
  tCGFloat x = t2.tx;
  tCGFloat y = t2.ty;
  v10(v8, v9, v5);
  uint64_t v20 = v30;
  uint64_t v34 = v30;
  uint64_t v35 = v11;
  uint64_t v36 = &protocol witness table for PaperDocumentPage;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v21 = (uint64_t (*)(char *, uint64_t))v29;
  v29(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v28;
  *(_OWORD *)&t2.CGFloat c = v27;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v40, &t1, &t2);
  CGAffineTransform t1 = v40;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  CGFloat v22 = v33;
  CGFloat v23 = (void *)MEMORY[0x263F8EED0];
  CGFloat v24 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v33) + 0x550);
  uint64_t v25 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (void (*)(uint64_t))v32);
  v24(v8, &t2, v20, v25);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v23 & *v22) + 0x530))(&t2);
  return v21(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  void *v22;
  void *v23;
  void (*v24)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v25;
  long long v27;
  long long v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t (*v32)();
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  uint64_t v38;
  _UNKNOWN **v39;
  CGAffineTransform v40;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v43;
  CGRect v44;

  double v33 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  uint64_t v9 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x380);
  swift_beginAccess();
  BOOL v10 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v30 = type metadata accessor for UnknownCanvasElement();
  uint64_t v37 = v30;
  id v32 = type metadata accessor for UnknownCanvasElement;
  uint64_t v11 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))type metadata accessor for UnknownCanvasElement);
  uint64_t v38 = v11;
  long long v39 = &protocol witness table for UnknownCanvasElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, v5);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  v43.origin.CGFloat x = t1.a;
  v43.origin.CGFloat y = t1.b;
  v43.size.CGFloat width = t1.c;
  v43.size.CGFloat height = t1.d;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = a;
  v44.origin.CGFloat y = b;
  v44.size.CGFloat width = c;
  v44.size.CGFloat height = d;
  double MidY = CGRectGetMidY(v44);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.tCGFloat x = 0.0;
  t1.tCGFloat y = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  long long v28 = *(_OWORD *)&t2.a;
  long long v27 = *(_OWORD *)&t2.c;
  tCGFloat x = t2.tx;
  tCGFloat y = t2.ty;
  v10(v8, v9, v5);
  uint64_t v20 = v30;
  uint64_t v34 = v30;
  uint64_t v35 = v11;
  uint64_t v36 = &protocol witness table for UnknownCanvasElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  CGFloat v21 = (uint64_t (*)(char *, uint64_t))v29;
  v29(v8, v5);
  *(_OWORD *)&t2.CGFloat a = v28;
  *(_OWORD *)&t2.CGFloat c = v27;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v40, &t1, &t2);
  CGAffineTransform t1 = v40;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v10(v8, v9, v5);
  LOBYTE(t2.a) = 3;
  CGFloat v22 = v33;
  CGFloat v23 = (void *)MEMORY[0x263F8EED0];
  CGFloat v24 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v33) + 0x550);
  uint64_t v25 = _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (void (*)(uint64_t))v32);
  v24(v8, &t2, v20, v25);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v23 & *v22) + 0x530))(&t2);
  return v21(v8, v5);
}

BOOL specialized closure #7 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x210550400](v2);
  uint64_t v4 = v3;
  if (v3)
  {
    UIAccessibilityNotifications v5 = *MEMORY[0x263F83188];
    uint64_t v6 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x4A0))();
    if (v7)
    {
      __n128 v8 = (void *)MEMORY[0x21054D080](v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      __n128 v8 = 0;
    }
    UIAccessibilityPostNotification(v5, v8);
    swift_unknownObjectRelease();
  }
  return v4 != 0;
}

BOOL specialized closure #7 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  UIAccessibilityNotifications v5 = (void *)MEMORY[0x210550400](v4);
  if (v5)
  {
    UIAccessibilityNotifications v6 = *MEMORY[0x263F83188];
    uint64_t v7 = a3(2);
    uint64_t v9 = v8;
    uint64_t v10 = a3(1);
    UIAccessibilityNotifications v12 = v11;
    uint64_t v13 = a3(0);
    double v15 = v14;
    v16._uint64_t countAndFlagsBits = 8236;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = v10;
    v17._object = v12;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 8236;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = v13;
    v19._object = v15;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t v20 = (void *)MEMORY[0x21054D080](v7, v9);
    swift_bridgeObjectRelease();
    UIAccessibilityPostNotification(v6, v20);
  }
  return v5 != 0;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

void *specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for Capsule<Signature>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, &demangling cache variable for type metadata for Capsule<Image>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, &demangling cache variable for type metadata for Capsule<Link>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocumentPage>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

void *specialized ShapeView.init(frame:canvasElement:canvas:parentCanvasElement:)(char *a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v44 = *(void *)(v15 - 8);
  uint64_t v45 = v15;
  MEMORY[0x270FA5388](v15);
  CGRect v43 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x270FA5388](v17);
  CGFloat v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v7 + direct field offset for ShapeView.$__lazy_storage_$_shapeLayer) = 0;
  *(void *)(v7 + direct field offset for ShapeView.$__lazy_storage_$_endLineEndLayer) = 0;
  *(void *)(v7 + direct field offset for ShapeView.$__lazy_storage_$_startLineEndLayer) = 0;
  *(void *)(v7 + direct field offset for ShapeView.$__lazy_storage_$_groupLayer) = 0;
  *(unsigned char *)(v7 + direct field offset for ShapeView.showsSignaturePopover) = 0;
  *(unsigned char *)(v7 + direct field offset for ShapeView.analytics_inputSource) = 68;
  *(unsigned char *)(v7 + direct field offset for ShapeView.analytics_documentType) = 68;
  *(void *)(v7 + direct field offset for ShapeView._textBoxView) = 0;
  *(void *)(v7 + direct field offset for ShapeView.appearanceStreamView) = 0;
  CGFloat v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16);
  v22(v21, (uint64_t)a1, v17, v19);
  CGFloat v23 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v21, a2, a3, &demangling cache variable for type metadata for Capsule<Shape>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
  specialized AppearanceStreamViewSupport.setupAppearanceStreamIfNeeded()();
  CGFloat v24 = (char *)v23 + *(void *)((*MEMORY[0x263F8EED0] & *v23) + 0x380);
  swift_beginAccess();
  ((void (*)(char *, char *, uint64_t))v22)(v21, v24, v17);
  uint64_t v25 = v23;
  LOBYTE(v23) = specialized Capsule<>.isTextBox.getter();
  CGFloat v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  v26(v21, v17);

  if ((v23 & 1) == 0)
  {
    objc_msgSend(v25, sel_setIsAccessibilityElement_, 1);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v46._object = (void *)0x800000020C8587D0;
    v27._uint64_t countAndFlagsBits = 0x4025206570616853;
    v27._object = (void *)0xE800000000000000;
    v28.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v28.value._object = (void *)0xEB00000000656C62;
    v29._uint64_t countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    v46._uint64_t countAndFlagsBits = 0xD00000000000005FLL;
    Swift::String v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, paperKitBundle, v29, v46);
    v42[0] = v30._object;
    v42[1] = v30._countAndFlagsBits;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_20C832C20;
    swift_getKeyPath();
    _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    id v32 = v25;
    double v33 = v43;
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v34 = TaggedValue_9<>.localizedName.getter();
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v45);
    *(void *)(v31 + 56) = MEMORY[0x263F8D310];
    *(void *)(v31 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 32) = v34;
    *(void *)(v31 + 40) = v36;
    uint64_t v37 = static String.localizedStringWithFormat(_:_:)();
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CGAffineTransform v40 = (void *)MEMORY[0x21054D080](v37, v39);
    swift_bridgeObjectRelease();
    objc_msgSend(v32, sel_setAccessibilityLabel_, v40);
  }
  v26(a1, v17);
  return v25;
}

void *specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t (*a5)(void), double a6, double a7, double a8, double a9)
{
  uint64_t v18 = (void *)MEMORY[0x263F8EED0];
  double v19 = &v9[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v9) + 0x388)];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
  *(void *)&v9[*(void *)((*v18 & *(void *)v9) + 0x390)] = 0;
  *(void *)&v9[*(void *)((*v18 & *(void *)v9) + 0x398)] = 0;
  *(void *)&v9[*(void *)((*v18 & *(void *)v9) + 0x3A0)] = 0;
  *(void *)&v9[*(void *)((*v18 & *(void *)v9) + 0x3A8)] = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(&v9[*(void *)((*v18 & *(void *)v9) + 0x380)], a1, v20);
  id v22 = a3;
  id v23 = a2;
  CGFloat v24 = AnyCanvasElementView.init(frame:canvas:parentCanvasElement:)(a2, a3, a6, a7, a8, a9);
  uint64_t v25 = a5();
  (*(void (**)(uint64_t))((*v18 & *v24) + 0x488))(v25);

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, v20);
  return v24;
}

void *specialized ShapeView.init(frame:canvasElement:canvas:parentCanvasElement:showsSignaturePopover:analytics_inputSource:analytics_documentType:)(char *a1, void *a2, char a3, char a4, char a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v45 = v11;
  MEMORY[0x270FA5388](v11);
  CGRect v43 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v5 + direct field offset for ShapeView.$__lazy_storage_$_shapeLayer) = 0;
  *(void *)(v5 + direct field offset for ShapeView.$__lazy_storage_$_endLineEndLayer) = 0;
  *(void *)(v5 + direct field offset for ShapeView.$__lazy_storage_$_startLineEndLayer) = 0;
  *(void *)(v5 + direct field offset for ShapeView.$__lazy_storage_$_groupLayer) = 0;
  uint64_t v18 = direct field offset for ShapeView.showsSignaturePopover;
  *(unsigned char *)(v5 + direct field offset for ShapeView.showsSignaturePopover) = 0;
  uint64_t v19 = direct field offset for ShapeView.analytics_inputSource;
  *(unsigned char *)(v5 + direct field offset for ShapeView.analytics_inputSource) = 68;
  uint64_t v20 = direct field offset for ShapeView.analytics_documentType;
  *(unsigned char *)(v5 + direct field offset for ShapeView.analytics_documentType) = 68;
  *(void *)(v5 + direct field offset for ShapeView._textBoxView) = 0;
  *(void *)(v5 + direct field offset for ShapeView.appearanceStreamView) = 0;
  *(unsigned char *)(v5 + v18) = a3;
  *(unsigned char *)(v5 + v19) = a4;
  *(unsigned char *)(v5 + v20) = a5;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16);
  v21(v17, (uint64_t)a1, v13, v15);
  id v22 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v17, a2, 0, &demangling cache variable for type metadata for Capsule<Shape>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), 0.0, 0.0, 0.0, 0.0);
  specialized AppearanceStreamViewSupport.setupAppearanceStreamIfNeeded()();
  id v23 = (char *)v22 + *(void *)((*MEMORY[0x263F8EED0] & *v22) + 0x380);
  swift_beginAccess();
  ((void (*)(char *, char *, uint64_t))v21)(v17, v23, v13);
  CGFloat v24 = v22;
  LOBYTE(v22) = specialized Capsule<>.isTextBox.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  v25(v17, v13);

  if ((v22 & 1) == 0)
  {
    CGFloat v26 = a1;
    objc_msgSend(v24, sel_setIsAccessibilityElement_, 1);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v46._object = (void *)0x800000020C8587D0;
    v27._uint64_t countAndFlagsBits = 0x4025206570616853;
    v27._object = (void *)0xE800000000000000;
    v28.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v28.value._object = (void *)0xEB00000000656C62;
    v29._uint64_t countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    v46._uint64_t countAndFlagsBits = 0xD00000000000005FLL;
    Swift::String v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, paperKitBundle, v29, v46);
    v42[0] = v30._object;
    v42[1] = v30._countAndFlagsBits;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_20C832C20;
    swift_getKeyPath();
    _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    id v32 = v24;
    double v33 = v43;
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v34 = TaggedValue_9<>.localizedName.getter();
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v45);
    *(void *)(v31 + 56) = MEMORY[0x263F8D310];
    *(void *)(v31 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v31 + 32) = v34;
    *(void *)(v31 + 40) = v36;
    a1 = v26;
    uint64_t v37 = static String.localizedStringWithFormat(_:_:)();
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CGAffineTransform v40 = (void *)MEMORY[0x21054D080](v37, v39);
    swift_bridgeObjectRelease();
    objc_msgSend(v32, sel_setAccessibilityLabel_, v40);
  }
  v25(a1, v13);
  return v24;
}

uint64_t sub_20C528238()
{
  return 24;
}

__n128 sub_20C528244(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20C528258()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

BOOL partial apply for specialized closure #1 in CanvasElementView.setupAccessibility()()
{
  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0);
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(void))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(void))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(void))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(void))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(void))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(void))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(void))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(void))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

BOOL partial apply for specialized closure #2 in CanvasElementView.setupAccessibility()()
{
  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

uint64_t sub_20C5282E0()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #3 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  return closure #3 in CanvasElementView.setupAccessibility()(a1, *(uint64_t (**)(double))(v1 + 16));
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_39()
{
  return swift_release();
}

uint64_t partial apply for closure #4 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  return closure #4 in CanvasElementView.setupAccessibility()(a1, *(uint64_t (**)(double))(v1 + 16));
}

uint64_t partial apply for closure #5 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  return closure #5 in CanvasElementView.setupAccessibility()(a1, *(uint64_t (**)(double))(v1 + 16));
}

uint64_t partial apply for closure #6 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  return closure #6 in CanvasElementView.setupAccessibility()(a1, *(uint64_t (**)(double))(v1 + 16));
}

BOOL partial apply for specialized closure #7 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1);
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

uint64_t partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()()
{
  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 16), *(void **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 16), *(void **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 16), *(void **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 16), *(void **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 16), *(void **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 16), *(void **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 16), *(void **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 16), *(void **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 16), *(void **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

uint64_t sub_20C5283C4()
{
  return 24;
}

__n128 sub_20C5283D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()()
{
  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 24), *(void **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 24), *(void **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 24), *(void **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 24), *(void **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 24), *(void **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 24), *(void **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 24), *(void **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 24), *(void **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(void **)(v0 + 24), *(void **)(v0 + 32), *(double *)(v0 + 16));
}

uint64_t outlined assign with copy of Capsule<Shape>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_20C528478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for Shape() + 52);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, v3, v4);
}

uint64_t sub_20C528504()
{
  return 24;
}

__n128 sub_20C528510(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t outlined destroy of Shape(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter()
{
  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter();
}

{
  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter();
}

{
  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter();
}

{
  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter();
}

{
  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter();
}

{
  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter();
}

{
  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter();
}

{
  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter();
}

{
  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter();
}

uint64_t partial apply for closure #1 in ShapeView.subscript.setter(uint64_t a1)
{
  return closure #1 in ShapeView.subscript.setter(a1, *(void *)(v1 + 16));
}

uint64_t sub_20C5285D4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in ShapeView.canvasElementImage.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = (uint64_t)v1 + v5;
  double v12 = *(double *)((char *)v1 + v6);
  double v13 = *(double *)((char *)v1 + v6 + 8);
  double v14 = *(double *)((char *)v1 + v6 + 16);
  double v15 = *(double *)((char *)v1 + v6 + 24);
  uint64_t v16 = *(void *)((char *)v1 + ((v6 + 39) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v17;
  *uint64_t v17 = v2;
  v17[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ShapeView.canvasElementImage.getter(v12, v13, v14, v15, a1, v7, v8, v9, v10, v11, v16);
}

unint64_t lazy protocol witness table accessor for type LineEnd and conformance LineEnd()
{
  unint64_t result = lazy protocol witness table cache variable for type LineEnd and conformance LineEnd;
  if (!lazy protocol witness table cache variable for type LineEnd and conformance LineEnd)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineEnd and conformance LineEnd);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LineEnd and conformance LineEnd;
  if (!lazy protocol witness table cache variable for type LineEnd and conformance LineEnd)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineEnd and conformance LineEnd);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LineEnd and conformance LineEnd;
  if (!lazy protocol witness table cache variable for type LineEnd and conformance LineEnd)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineEnd and conformance LineEnd);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LineEnd and conformance LineEnd;
  if (!lazy protocol witness table cache variable for type LineEnd and conformance LineEnd)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineEnd and conformance LineEnd);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LineEnd and conformance LineEnd;
  if (!lazy protocol witness table cache variable for type LineEnd and conformance LineEnd)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineEnd and conformance LineEnd);
  }
  return result;
}

void specialized ShapeView.init(coder:)()
{
  *(void *)&v0[direct field offset for ShapeView.$__lazy_storage_$_shapeLayer] = 0;
  *(void *)&v0[direct field offset for ShapeView.$__lazy_storage_$_endLineEndLayer] = 0;
  *(void *)&v0[direct field offset for ShapeView.$__lazy_storage_$_startLineEndLayer] = 0;
  *(void *)&v0[direct field offset for ShapeView.$__lazy_storage_$_groupLayer] = 0;
  v0[direct field offset for ShapeView.showsSignaturePopover] = 0;
  v0[direct field offset for ShapeView.analytics_inputSource] = 68;
  v0[direct field offset for ShapeView.analytics_documentType] = 68;
  *(void *)&v0[direct field offset for ShapeView._textBoxView] = 0;
  *(void *)&v0[direct field offset for ShapeView.appearanceStreamView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id specialized ShapeView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_getKeyPath();
  _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  CGFloat v7 = v42;
  objc_msgSend(v1, sel_bounds);
  CGFloat x = v43.origin.x;
  CGFloat y = v43.origin.y;
  CGFloat width = v43.size.width;
  CGFloat height = v43.size.height;
  double MidX = CGRectGetMidX(v43);
  v44.origin.CGFloat x = x;
  v44.origin.CGFloat y = y;
  v44.size.CGFloat width = width;
  v44.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v44);
  CGAffineTransformMakeRotation(&t1, v7);
  long long v38 = *(_OWORD *)&t1.a;
  long long v37 = *(_OWORD *)&t1.c;
  CGFloat v14 = -MidY;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v14);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v21 = t1.tx;
  CGFloat v22 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v38;
  *(_OWORD *)&t2.CGFloat c = v37;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v39, &t1, &t2);
  long long v38 = *(_OWORD *)&v39.a;
  long long v37 = *(_OWORD *)&v39.c;
  CGFloat v23 = v39.tx;
  CGFloat v24 = v39.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = v21;
  t1.tCGFloat y = v22;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v38;
  *(_OWORD *)&t1.CGFloat c = v37;
  t1.tCGFloat x = v23;
  t1.tCGFloat y = v24;
  CGAffineTransformConcat(&v39, &t1, &t2);
  long long v38 = *(_OWORD *)&v39.a;
  long long v37 = *(_OWORD *)&v39.c;
  CGFloat v25 = v39.tx;
  CGFloat v26 = v39.ty;
  objc_msgSend(v1, sel_bounds);
  *(_OWORD *)&t1.CGFloat a = v38;
  *(_OWORD *)&t1.CGFloat c = v37;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  CGRect v46 = CGRectApplyAffineTransform(v45, &t1);
  double v27 = v46.origin.x;
  double v28 = v46.origin.y;
  double v29 = v46.size.width;
  double v30 = v46.size.height;
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82AD0]), sel_init);
  if (one-time initialization token for shapePreviewCornerRadius != -1) {
    swift_once();
  }
  id v32 = objc_msgSend(self, sel_bezierPathWithRoundedRect_cornerRadius_, v27, v28, v29, v30, *(double *)&static UIConstants.shapePreviewCornerRadius);
  objc_msgSend(v31, sel_setVisiblePath_, v32);

  id v33 = objc_allocWithZone(MEMORY[0x263F82CC8]);
  uint64_t v34 = v1;
  id v35 = objc_msgSend(v33, sel_initWithView_parameters_, v34, v31);

  return v35;
}

uint64_t _s8PaperKit5ShapeVAC9Coherence4CRDTAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in PaperKitPDFPage.annotationFor(id:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:)(a1) & 1;
}

void *initializeBufferWithCopyOfBuffer for MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
    *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
    long long v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v8;
    long long v9 = *((_OWORD *)a2 + 5);
    uint64_t v10 = *(int *)(a3 + 68);
    uint64_t v11 = (void *)(a1 + v10);
    double v12 = (char *)a2 + v10;
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v9;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void *)(v13 - 8);
    double v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *((unsigned char *)v4 + *(int *)(a3 + 72)) = *((unsigned char *)a2 + *(int *)(a3 + 72));
    swift_unknownObjectWeakCopyInit();
  }
  return v4;
}

uint64_t destroy for MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 68);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  uint64_t v9 = *(int *)(a3 + 68);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 72)) = *(unsigned char *)(a2 + *(int *)(a3 + 72));
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v6 = *(int *)(a3 + 68);
  long long v7 = (void *)(a1 + v6);
  long long v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(unsigned char *)(a1 + *(int *)(a3 + 72)) = *(unsigned char *)(a2 + *(int *)(a3 + 72));
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  uint64_t v8 = *(int *)(a3 + 68);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 72)) = *(unsigned char *)(a2 + *(int *)(a3 + 72));
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  uint64_t v9 = *(int *)(a3 + 68);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(unsigned char *)(a1 + *(int *)(a3 + 72)) = *(unsigned char *)(a2 + *(int *)(a3 + 72));
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_20C52A184);
}

uint64_t sub_20C52A184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 68);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_20C52A258);
}

uint64_t sub_20C52A258(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 16) = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 68);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent()
{
  uint64_t result = type metadata singleton initialization cache for MagicPaperUsageHandwritingSynthesisEvent;
  if (!type metadata singleton initialization cache for MagicPaperUsageHandwritingSynthesisEvent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for MagicPaperUsageHandwritingSynthesisEvent()
{
  type metadata accessor for Date?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0x79636E6574616CLL;
      break;
    case 3:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 7:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
    case 11:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 1868852853;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6C69636E65507369;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0x79636E6574616CLL;
      break;
    case 3:
      unint64_t result = 0x6874616D5F6D756ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x6F7274735F6D756ELL;
      break;
    case 7:
      unint64_t result = 0x747865745F6D756ELL;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
    case 11:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 1868852853;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 2;
  }
  else {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase()
{
  if (*v0) {
    Swift::UInt v1 = 2;
  }
  else {
    Swift::UInt v1 = 1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 2;
  }
  else {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 2) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == 1) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1;
  if (*v1) {
    uint64_t v2 = 2;
  }
  *a1 = v2;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys()
{
  MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys()
{
  return MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Void __swiftcall MagicPaperUsageHandwritingSynthesisEvent.finalize()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent();
  if ((*(unsigned char *)(v1 + *(int *)(v12 + 72)) & 1) == 0)
  {
    uint64_t v13 = v12;
    uint64_t v26 = *(int *)(v12 + 72);
    uint64_t v27 = v6;
    uint64_t v14 = (void *)MEMORY[0x210550400](v1 + *(int *)(v12 + 76));
    id v15 = objc_msgSend(self, sel_activePencil);
    unsigned __int8 v16 = objc_msgSend(v15, sel_isConnected);

    *(unsigned char *)uint64_t v1 = v16;
    uint64_t v28 = static Locale.preferredLanguages.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 8) = v17;
    *(void *)(v1 + 16) = v19;
    if (v14)
    {
      uint64_t v20 = v14;
      specialized MagicPaperUsageAnalyticsEvent.countGroups(in:)(v20);
    }
    outlined init with copy of Date?(v1 + *(int *)(v13 + 68), (uint64_t)v4);
    uint64_t v21 = v27;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of Date?((uint64_t)v4);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v11, v4, v5);
      Date.init()();
      Date.timeIntervalSince(_:)();
      double v23 = v22;
      CGFloat v24 = *(void (**)(char *, uint64_t))(v21 + 8);
      v24(v8, v5);
      v24(v11, v5);
      *(float *)&double v23 = v23 * 1000.0;
      *(_DWORD *)(v1 + 28) = LODWORD(v23);
    }
    *(unsigned char *)(v1 + v26) = 1;
  }
}

uint64_t MagicPaperUsageHandwritingSynthesisEvent.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MagicPaperUsageHandwritingSynthesisEvent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v10[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[8] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[7] = *(unsigned char *)(v3 + 24);
    v10[6] = 8;
    lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[5] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[4] = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[3] = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[2] = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t protocol witness for static AnalyticsEvent.eventName.getter in conformance MagicPaperUsageHandwritingSynthesisEvent()
{
  return 0xD00000000000002ELL;
}

uint64_t protocol witness for AnalyticsEvent.isFinalized.getter in conformance MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 72));
}

uint64_t protocol witness for AnalyticsEvent.undoEvent() in conformance MagicPaperUsageHandwritingSynthesisEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(v2 + 25) == 1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    uint64_t v6 = a2;
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t result = outlined init with copy of MagicPaperUsageHandwritingSynthesisEvent(v2, a2);
    *(unsigned char *)(a2 + *(int *)(a1 + 72)) = 0;
    *(unsigned char *)(a2 + 25) = 1;
    uint64_t v9 = *(void *)(v2 + 32);
    BOOL v10 = __OFSUB__(0, v9);
    uint64_t v11 = -v9;
    if (v10)
    {
      __break(1u);
      return result;
    }
    *(void *)(a2 + 32) = v11;
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    uint64_t v6 = a2;
    uint64_t v7 = 0;
  }
  return v5(v6, v7, 1, a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MagicPaperUsageHandwritingSynthesisEvent(void *a1)
{
  return MagicPaperUsageHandwritingSynthesisEvent.encode(to:)(a1);
}

uint64_t instantiation function for generic protocol witness table for MagicPaperUsageHandwritingSynthesisEvent(uint64_t a1)
{
  uint64_t result = _s8PaperKit05MagicA30UsageHandwritingSynthesisEventVAcA09AnalyticsG0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s8PaperKit05MagicA30UsageHandwritingSynthesisEventVAcA09AnalyticsG0AAWlTm_0(&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent and conformance MagicPaperUsageHandwritingSynthesisEvent);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _s8PaperKit05MagicA30UsageHandwritingSynthesisEventVAcA09AnalyticsG0AAWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.CodingKeys and conformance MagicPaperUsageHandwritingSynthesisEvent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase()
{
  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase;
  if (!lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase and conformance MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MagicPaperUsageHandwritingSynthesisEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MagicPaperUsageHandwritingSynthesisEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C52B56CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent.CodingKeys()
{
  return &type metadata for MagicPaperUsageHandwritingSynthesisEvent.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C52B670);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase()
{
  return &type metadata for MagicPaperUsageHandwritingSynthesisEvent.SynthesisUsecase;
}

unint64_t specialized MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MagicPaperUsageHandwritingSynthesisEvent.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xD) {
    return 13;
  }
  else {
    return v3;
  }
}

Swift::Void __swiftcall InlineDrawingTextAttachmentView.didMoveToWindow()()
{
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for InlineDrawingTextAttachmentView();
  objc_msgSendSuper2(&v7, sel_didMoveToWindow);
  id v1 = objc_msgSend(v0, sel_window);

  uint64_t v2 = OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropInteraction;
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropInteraction];
  if (v1)
  {
    if (!v3)
    {
      id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F826F8]), sel_initWithDelegate_, v0);
      uint64_t v5 = *(void **)&v0[v2];
      *(void *)&v0[v2] = v4;

      if (*(void *)&v0[v2]) {
        objc_msgSend(v0, sel_addInteraction_);
      }
      else {
        __break(1u);
      }
    }
  }
  else if (v3)
  {
    objc_msgSend(v0, sel_removeInteraction_);
    unsigned int v6 = *(void **)&v0[v2];
    *(void *)&v0[v2] = 0;
  }
}

uint64_t InlineDrawingTextAttachmentView.acceptedDropLayouts.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView____lazy_storage___acceptedDropLayouts;
  if (*(void *)(v0 + OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView____lazy_storage___acceptedDropLayouts))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView____lazy_storage___acceptedDropLayouts);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Layout.Type>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_20C8352C0;
    *(void *)(v2 + 32) = type metadata accessor for PaperLayout();
    *(void *)(v2 + 40) = &protocol witness table for PaperLayout;
    *(void *)(v2 + 48) = type metadata accessor for ImageLayout();
    *(void *)(v2 + 56) = &protocol witness table for ImageLayout;
    *(void *)(v2 + 64) = type metadata accessor for LinkLayout();
    *(void *)(v2 + 72) = &protocol witness table for LinkLayout;
    *(void *)(v2 + 80) = type metadata accessor for TextBoxLayout();
    *(void *)(v2 + 88) = &protocol witness table for TextBoxLayout;
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

id InlineDrawingTextAttachmentView.init(frame:drawing:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  unsigned int v6 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropInteraction] = 0;
  v6[OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropSessionType] = 3;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView____lazy_storage___acceptedDropLayouts] = 0;
  outlined init with copy of PKDrawing?(a1, (uint64_t)v14);
  uint64_t v15 = type metadata accessor for PKDrawing();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    PKDrawing._bridgeToObjectiveC()(v17);
    uint64_t v18 = v19;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  }
  uint64_t v20 = (objc_class *)type metadata accessor for InlineDrawingTextAttachmentView();
  v23.receiver = v6;
  v23.super_class = v20;
  id v21 = objc_msgSendSuper2(&v23, sel_initWithFrame_drawing_, v18, a2, a3, a4, a5);

  outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for PKDrawing?);
  return v21;
}

id InlineDrawingTextAttachmentView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InlineDrawingTextAttachmentView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for InlineDrawingTextAttachmentView()
{
  return self;
}

void specialized InlineDrawingTextAttachmentView.selectionInteractionDidPaste(_:at:in:)(double a1, double a2)
{
  id v5 = objc_msgSend(self, sel_generalPasteboard);
  unsigned int v6 = (objc_class *)objc_msgSend(v5, sel_itemProviders);

  Class isa = v6;
  if (!v6)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (v7 >> 62) {
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v8)
  {
    id v9 = objc_msgSend(v2, sel_superview);
    if (v9)
    {
      BOOL v10 = v9;
      uint64_t v11 = 0;
      do
      {
        if (v11)
        {

          goto LABEL_14;
        }
        self;
        uint64_t v11 = (void *)swift_dynamicCastObjCClass();
        if (v11) {
          id v13 = v10;
        }
        id v12 = objc_msgSend(v10, sel_superview);

        BOOL v10 = v12;
      }
      while (v12);
      if (!v11) {
        goto LABEL_15;
      }
LABEL_14:
      objc_msgSend(v11, sel__upgradeDrawingAtCharacterIndex_itemProviders_insertionLocationInDrawing_, objc_msgSend(v2, sel__characterIndex), isa, a1, a2);
    }
  }
LABEL_15:
}

uint64_t specialized InlineDrawingTextAttachmentView.dropInteraction(_:canHandle:)(void *a1)
{
  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_20C832C20;
  *(void *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v3 + 40) = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(v3) = objc_msgSend(a1, sel_hasItemsConformingToTypeIdentifiers_, isa);

  if (v3) {
    return 0;
  }
  uint64_t result = (uint64_t)objc_msgSend(v1, sel_superview);
  if (!result) {
    return result;
  }
  unint64_t v7 = (void *)result;
  uint64_t v8 = 0;
  do
  {
    if (v8)
    {

      goto LABEL_10;
    }
    self;
    uint64_t v8 = (void *)swift_dynamicCastObjCClass();
    if (v8) {
      id v10 = v7;
    }
    id v9 = objc_msgSend(v7, sel_superview);

    unint64_t v7 = v9;
  }
  while (v9);
  if (!v8) {
    return 0;
  }
LABEL_10:
  if (!objc_msgSend(v8, sel__canSelectDrawing))
  {
LABEL_26:

    return 0;
  }
  id v11 = objc_msgSend(a1, sel_localDragSession);
  if (!v11)
  {
    long long v18 = 0u;
    long long v19 = 0u;
LABEL_20:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v18, &demangling cache variable for type metadata for Any?);
    goto LABEL_21;
  }
  id v12 = objc_msgSend(v11, sel_localContext);
  swift_unknownObjectRelease();
  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  outlined init with take of Any?((uint64_t)v17, (uint64_t)&v18);
  if (!*((void *)&v19 + 1)) {
    goto LABEL_20;
  }
  if (swift_dynamicCast())
  {
    id v13 = *(void **)&v17[0];

    if (v13 == v1) {
      goto LABEL_26;
    }
  }
LABEL_21:
  uint64_t v14 = InlineDrawingTextAttachmentView.acceptedDropLayouts.getter();
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v16 = v14 + 40;
  while (((*(uint64_t (**)(void *))(*(void *)v16 + 24))(a1) & 1) == 0)
  {
    v16 += 16;
    if (!--v15) {
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();

  return 1;
}

id specialized InlineDrawingTextAttachmentView.dropInteraction(_:sessionDidUpdate:)(void *a1)
{
  objc_msgSend(v1, sel_bounds);
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  objc_msgSend(a1, sel_locationInView_, v1);
  v25.CGFloat x = v11;
  v25.CGFloat y = v12;
  v26.origin.CGFloat x = v4;
  v26.origin.CGFloat y = v6;
  v26.size.CGFloat width = v8;
  v26.size.CGFloat height = v10;
  if (CGRectContainsPoint(v26, v25))
  {
    uint64_t v13 = OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropSessionType;
    *((unsigned char *)v1 + OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropSessionType) = 0;
    id v14 = objc_msgSend(a1, sel_localDragSession);
    if (v14)
    {
      id v15 = objc_msgSend(v14, sel_localContext);
      swift_unknownObjectRelease();
      if (v15)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v21, 0, sizeof(v21));
      }
      outlined init with take of Any?((uint64_t)v21, (uint64_t)&v22);
      if (*((void *)&v23 + 1))
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        if (swift_dynamicCast())
        {
          long long v18 = *(void **)&v21[0];
          unsigned int v19 = objc_msgSend(v1, sel_isDescendantOfView_, *(void *)&v21[0]);

          if (v19) {
            *((unsigned char *)v1 + v13) = 2;
          }
        }
        goto LABEL_15;
      }
    }
    else
    {
      long long v22 = 0u;
      long long v23 = 0u;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v22, &demangling cache variable for type metadata for Any?);
LABEL_15:
    if (*((unsigned char *)v1 + v13)) {
      uint64_t v20 = 3;
    }
    else {
      uint64_t v20 = 2;
    }
    return objc_msgSend(objc_allocWithZone(MEMORY[0x263F82700]), sel_initWithDropOperation_, v20);
  }
  id v16 = objc_allocWithZone(MEMORY[0x263F82700]);
  return objc_msgSend(v16, sel_initWithDropOperation_, 0);
}

void specialized InlineDrawingTextAttachmentView.dropInteraction(_:performDrop:)(void *a1)
{
  id v3 = objc_msgSend(v1, sel_superview);
  if (v3)
  {
    CGFloat v4 = v3;
    double v5 = 0;
    do
    {
      if (v5)
      {

        goto LABEL_9;
      }
      self;
      double v5 = (void *)swift_dynamicCastObjCClass();
      if (v5) {
        id v7 = v4;
      }
      id v6 = objc_msgSend(v4, sel_superview);

      CGFloat v4 = v6;
    }
    while (v6);
    if (!v5) {
      return;
    }
LABEL_9:
    objc_msgSend(a1, sel_locationInView_, v1);
    CGFloat v9 = v8;
    CGFloat v11 = v10;
    objc_msgSend(v1, sel_drawingTransform);
    CGAffineTransformInvert(&v26, &aBlock);
    CGAffineTransform aBlock = v26;
    v28.CGFloat x = v9;
    v28.CGFloat y = v11;
    CGPoint v12 = CGPointApplyAffineTransform(v28, &aBlock);
    id v13 = objc_msgSend(a1, sel_items);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v15 = v1;
    specialized Sequence.compactMap<A>(_:)(v14);
    swift_bridgeObjectRelease();

    id v16 = objc_msgSend(v15, sel__characterIndex);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel__upgradeDrawingAtCharacterIndex_itemProviders_insertionLocationInDrawing_, v16, isa, v12.x, v12.y);

    type metadata accessor for Analytics();
    uint64_t inited = swift_initStaticObject();
    uint64_t v19 = OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropSessionType;
    int v20 = v15[OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropSessionType];
    if (v20 == 3)
    {
      __break(1u);
    }
    else
    {
      uint64_t v21 = inited;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v21;
      *(unsigned char *)(v22 + 24) = v20;
      long long v23 = (void *)MEMORY[0x21054D080](0xD00000000000001ELL, 0x800000020C84E1B0);
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = partial apply for implicit closure #1 in Analytics.recordDragAndDropEvent(type:);
      *(void *)(v24 + 24) = v22;
      *(void *)&aBlock.tCGFloat x = partial apply for closure #1 in Analytics.sendEventLazy(key:payload:);
      *(void *)&aBlock.tCGFloat y = v24;
      *(void *)&aBlock.CGFloat a = MEMORY[0x263EF8330];
      *(void *)&aBlock.CGFloat b = 1107296256;
      *(void *)&aBlock.CGFloat c = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
      *(void *)&aBlock.CGFloat d = &block_descriptor_40;
      CGPoint v25 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v25);

      swift_release();
      v15[v19] = 3;
    }
  }
}

uint64_t sub_20C52CC90()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 25, 7);
}

unint64_t partial apply for implicit closure #1 in Analytics.recordDragAndDropEvent(type:)()
{
  return implicit closure #1 in Analytics.recordDragAndDropEvent(type:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_20C52CCD4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_40()
{
  return swift_release();
}

uint64_t destroy for CanvasMembers()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CanvasMembers(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CanvasMembers(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CanvasMembers(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasMembers(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasMembers(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasMembers()
{
  return &type metadata for CanvasMembers;
}

void PKStroke.collectVisibleLeafStrokes(in:leafStrokes:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v5 = type metadata accessor for PKStroke();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  CGFloat v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  CGPoint v12 = (char *)v32 - v11;
  MEMORY[0x270FA5388](v10);
  id v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13((char *)v32 - v14, v2, v5);
  type metadata accessor for PKStrokeCoherenceSubstrokes(0);
  if (swift_dynamicCast())
  {
    uint64_t v34 = v13;
    uint64_t v15 = a1;
    uint64_t v16 = v6;
    id v17 = v36;
    uint64_t v18 = v15;
    id v19 = objc_msgSend(v36, sel__substrokesInDrawing_);
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      v32[1] = v20;
      id v33 = v17;
      uint64_t v22 = v16;
      unint64_t v23 = v20 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      uint64_t v35 = *(void *)(v16 + 72);
      uint64_t v24 = a2;
      CGPoint v25 = (void (**)(char *, uint64_t))(v22 + 8);
      CGAffineTransform v26 = (void (*)(char *, unint64_t, uint64_t))v34;
      do
      {
        v26(v12, v23, v5);
        PKStroke.collectVisibleLeafStrokes(in:leafStrokes:)(v18, v24);
        (*v25)(v12, v5);
        v23 += v35;
        --v21;
      }
      while (v21);
    }
    else
    {
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
    unsigned __int8 v28 = [(objc_class *)isa _isHidden];

    if ((v28 & 1) == 0)
    {
      v13(v9, v2, v5);
      unint64_t v29 = *a2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1, v29);
      }
      unint64_t v31 = *(void *)(v29 + 16);
      unint64_t v30 = *(void *)(v29 + 24);
      if (v31 >= v30 >> 1) {
        unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, v29);
      }
      *(void *)(v29 + 16) = v31 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v29+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v31, v9, v5);
      *a2 = v29;
    }
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CanvasSelectionType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0) {
    return (*(void *)a1 == *(void *)a2) & ~result;
  }
  return result;
}

uint64_t CanvasMembers.insert(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(double))((*MEMORY[0x263F8EED0] & *a1) + 0xE8))(v12);
  SharedTagged_9.tag.getter();
  uint64_t v16 = v18;
  char v17 = v19;
  MEMORY[0x21054BDF0](v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  specialized Set._Variant.insert(_:)((uint64_t)v14, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, v7);
}

uint64_t CanvasMembers.remove(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  double v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(double))((*MEMORY[0x263F8EED0] & *a1) + 0xE8))(v12);
  SharedTagged_9.tag.getter();
  v16[2] = v18;
  char v17 = v19;
  MEMORY[0x21054BDF0](v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  specialized Set._Variant.remove(_:)((uint64_t)v10, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
}

uint64_t CanvasMembers.singleImageSelected()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16) == 1 && !*(void *)(a2 + 16))
  {
    specialized Collection.first.getter(a1, (uint64_t)v8);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a3, 1, 1, v14);
    }
    else
    {
      WeakTagged_9.tagged2.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v8, v12);
    }
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Image>);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    return v10(a3, 1, 1, v9);
  }
}

uint64_t closure #1 in CanvasMembers.strokeArray(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v29 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  MEMORY[0x270FA5388](v4);
  CGPoint v25 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v22 - v14;
  unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v24 = a1;
  v23(v13, a1, v9);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  WeakRef.init<A>(_:)();
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct();
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  LODWORD(v15) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v8, 1, v16);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  if (v15 == 1)
  {
    uint64_t v17 = type metadata accessor for PKStroke();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v28, 1, 1, v17);
  }
  else
  {
    v23(v13, v24, v9);
    uint64_t v19 = (uint64_t)v25;
    Ref.init<A>(_:)();
    uint64_t v20 = v28;
    specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)(v19, v29, v28);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v19, v27);
    uint64_t v21 = type metadata accessor for PKStroke();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
  }
}

uint64_t specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v97 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v89 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRKeyPath();
  uint64_t v86 = *(void *)(v7 - 8);
  uint64_t v87 = v7;
  MEMORY[0x270FA5388](v7);
  id v85 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v90 = *(void *)(v9 - 8);
  uint64_t v91 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v79 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  int v100 = (char *)&v76 - v13;
  MEMORY[0x270FA5388](v12);
  BOOL v93 = (char *)&v76 - v14;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v82 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v81 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v16 - 8);
  id v84 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v95 = *(void *)(v18 - 8);
  uint64_t v96 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  id v92 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  BOOL v80 = (char *)&v76 - v22;
  MEMORY[0x270FA5388](v21);
  id v94 = (char *)&v76 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v98 = *(void *)(v24 - 8);
  uint64_t v99 = (char *)v24;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  unint64_t v30 = (char *)&v76 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v101 = *(void *)(v31 - 8);
  uint64_t v102 = v31;
  uint64_t v32 = MEMORY[0x270FA5388](v31);
  id v78 = (char *)&v76 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  id v36 = (char *)&v76 - v35;
  MEMORY[0x270FA5388](v34);
  long long v38 = (char *)&v76 - v37;
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct();
  Ref.subscript.getter();
  CGAffineTransform v39 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v88 = a1;
  v39(v30, a1, v27);
  (*(void (**)(char *, uint64_t, char *))(v98 + 16))(v26, a2, v99);
  uint64_t v40 = specialized PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)((uint64_t)v30, (uint64_t)v26);
  if (v40)
  {
    uint64_t v41 = (void *)v40;
    static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

    return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v38, v102);
  }
  uint64_t v98 = v27;
  CGRect v43 = v80;
  id v77 = v36;
  uint64_t v44 = v95;
  CGRect v45 = v81;
  uint64_t v99 = v38;
  CRRegister.value.getter();
  uint64_t v46 = (uint64_t)v84;
  uint64_t v47 = v83;
  SharedTagged_2.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v45, v47);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  uint64_t v49 = *(void *)(v48 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v46, 1, v48) == 1) {
    goto LABEL_8;
  }
  Swift::String v50 = v43;
  Ref.subscript.getter();
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v46, v48);
  uint64_t v51 = v44;
  CGFloat v52 = v94;
  uint64_t v46 = v96;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v94, v50, v96);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  id v53 = v85;
  Reference.identity.getter();
  CGRect v54 = v89;
  CRKeyPath.uuid.getter();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v53, v87);
  uint64_t v56 = v90;
  uint64_t v55 = v91;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v54, 1, v91) == 1)
  {
    __break(1u);
LABEL_8:
    outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  Swift::String v57 = v93;
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v93, v54, v55);
  uint64_t v98 = *(void *)(v56 + 16);
  ((void (*)(char *, char *, uint64_t))v98)(v100, v57, v55);
  long long v58 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v59 = v92;
  v58(v92, v52, v46);
  CGFloat v60 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
  double v61 = v77;
  v60(v77, v99, v102);
  uint64_t v62 = (char *)objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherenceSubstrokes(0));
  uint64_t v63 = v46;
  long long v64 = v62;
  v58(&v62[OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes], v59, v63);
  double v65 = v79;
  CGFloat v66 = (void (*)(char *, char *, uint64_t))v98;
  ((void (*)(char *, char *, uint64_t))v98)(v79, v100, v55);
  Swift::String v67 = v78;
  Swift::String v68 = v61;
  uint64_t v69 = v102;
  v60(v78, v68, v102);
  v66(&v64[OBJC_IVAR___PKStrokeCoherenceBase_identity], v65, v55);
  v60(&v64[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], v67, v69);
  Swift::String v70 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
  v103.receiver = v64;
  v103.super_class = v70;
  id v71 = objc_msgSendSuper2(&v103, sel_init);
  CGRect v72 = *(void (**)(char *, uint64_t))(v101 + 8);
  v72(v67, v69);
  char v73 = *(void (**)(char *, uint64_t))(v56 + 8);
  v73(v65, v55);
  v72(v77, v69);
  uint64_t v74 = v96;
  CGRect v75 = *(void (**)(char *, uint64_t))(v95 + 8);
  v75(v92, v96);
  v73(v100, v55);
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  v73(v93, v55);
  v75(v94, v74);
  return ((uint64_t (*)(char *, uint64_t))v72)(v99, v69);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CanvasMembers(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 24);
  if ((specialized static Set.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) != 0
    && (specialized static Set.== infix(_:_:)(v2, v5) & 1) != 0)
  {
    if (v4)
    {
      if (v7) {
        return 1;
      }
    }
    else
    {
      if (v3 == v6) {
        char v9 = v7;
      }
      else {
        char v9 = 1;
      }
      if ((v9 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

unint64_t specialized CanvasMembers.leafStrokes(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStroke();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = a1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v24 = v11;
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in CanvasMembers.strokeArray(in:), (uint64_t)v23, a2);
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16), 0, MEMORY[0x263F8EE78]);
  uint64_t v25 = v14;
  uint64_t v15 = *(void *)(v13 + 16);
  if (v15)
  {
    uint64_t v18 = *(void (**)(unsigned char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v17 = v5 + 16;
    uint64_t v16 = v18;
    unint64_t v19 = v13 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
    uint64_t v20 = *(void *)(v17 + 56);
    do
    {
      v16(v7, v19, v4);
      PKStroke.collectVisibleLeafStrokes(in:leafStrokes:)(a1, (unint64_t *)&v25);
      (*(void (**)(unsigned char *, uint64_t))(v17 - 8))(v7, v4);
      v19 += v20;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    return v25;
  }
  else
  {
    uint64_t v21 = v14;
    swift_bridgeObjectRelease();
  }
  return v21;
}

uint64_t specialized CanvasMembers.init(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_20C832C20;
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0xE8))();
  SharedTagged_9.tag.getter();
  uint64_t v10 = v12;
  char v11 = v13;
  MEMORY[0x21054BDF0](v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (*(void *)(v7 + 16)) {
    uint64_t v8 = specialized Set.init(_nonEmptyArrayLiteral:)(v7);
  }
  else {
    uint64_t v8 = MEMORY[0x263F8EE88];
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct()
{
  unint64_t result = lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct;
  if (!lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct)
  {
    type metadata accessor for PKDrawingStruct();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct;
  if (!lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct)
  {
    type metadata accessor for PKDrawingStruct();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct);
  }
  return result;
}

uint64_t partial apply for closure #1 in CanvasMembers.strokeArray(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in CanvasMembers.strokeArray(in:)(a1, *(void *)(v2 + 16), a2);
}

ValueMetadata *type metadata accessor for CanvasSelectionType()
{
  return &type metadata for CanvasSelectionType;
}

uint64_t Capsule<>.isTextBox.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Capsule<>.sharedCanvasElement.getter(a1, a3, (uint64_t)v8);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v13, (uint64_t)v15);
    uint64_t v9 = v16;
    uint64_t v10 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 80))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    outlined destroy of ShapeTextBox?((uint64_t)v13);
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t Capsule<>.isFormField.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Capsule<>.sharedCanvasElement.getter(a1, a3, (uint64_t)v8);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v13, (uint64_t)v15);
    uint64_t v9 = v16;
    uint64_t v10 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 72))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    outlined destroy of ShapeTextBox?((uint64_t)v13);
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t outlined destroy of ShapeTextBox?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Capsule<>.isFixedWidth.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Capsule<>.sharedCanvasElement.getter(a1, a3, (uint64_t)v8);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v13, (uint64_t)v15);
    uint64_t v9 = v16;
    uint64_t v10 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 64))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    outlined destroy of ShapeTextBox?((uint64_t)v13);
    char v11 = 0;
  }
  return v11 & 1;
}

__C::CGRect __swiftcall CGRect.position(in:anchor:)(__C::CGRect in, PaperKit::LayoutAnchor anchor)
{
  CGFloat y = in.origin.y;
  double v7 = 0.0;
  CGFloat v8 = v4;
  CGFloat v9 = v3;
  CGFloat v10 = v2;
  CGFloat height = in.size.height;
  CGFloat width = in.size.width;
  CGFloat x = in.origin.x;
  double v14 = 0.0;
  switch(*(unsigned char *)anchor)
  {
    case 1:
      break;
    case 2:
      CGFloat v21 = y;
      CGFloat v22 = v5;
      double MidX = CGRectGetMidX((CGRect)in);
      v59.origin.CGFloat x = v10;
      v59.origin.CGFloat y = v9;
      v59.size.CGFloat width = v8;
      v59.size.CGFloat height = v22;
      CGFloat v24 = CGRectGetWidth(v59);
      double v5 = v22;
      double v25 = MidX + v24 * -0.5;
      goto LABEL_8;
    case 3:
      CGFloat v26 = y;
      CGFloat v27 = v5;
      double MaxX = CGRectGetMaxX((CGRect)in);
      v60.origin.CGFloat x = v10;
      v60.origin.CGFloat y = v9;
      v60.size.CGFloat width = v8;
      v60.size.CGFloat height = v27;
      CGFloat v29 = CGRectGetWidth(v60);
      double v5 = v27;
      double v25 = MaxX - v29;
LABEL_8:
      double v7 = 0.0;
      if (v25 > 0.0) {
        double v14 = v25;
      }
      else {
        double v14 = 0.0;
      }
      break;
    case 4:
      CGFloat v30 = y;
      rectCGFloat a = v5;
      double v31 = CGRectGetMaxX((CGRect)in);
      v61.origin.CGFloat x = v10;
      v61.origin.CGFloat y = v9;
      v61.size.CGFloat width = v8;
      v61.size.CGFloat height = recta;
      double v32 = v31 - CGRectGetWidth(v61);
      if (v32 > 0.0) {
        double v14 = v32;
      }
      else {
        double v14 = 0.0;
      }
      v62.origin.CGFloat x = x;
      v62.origin.CGFloat y = y;
      v62.size.CGFloat width = width;
      v62.size.CGFloat height = height;
      double MidY = CGRectGetMidY(v62);
      v63.origin.CGFloat x = v10;
      v63.origin.CGFloat y = v9;
      v63.size.CGFloat width = v8;
      v63.size.CGFloat height = recta;
      CGFloat v34 = CGRectGetHeight(v63);
      double v5 = recta;
      double v35 = MidY + v34 * -0.5;
      goto LABEL_22;
    case 5:
      CGFloat v36 = y;
      rectCGFloat b = v5;
      double v37 = CGRectGetMaxX((CGRect)in);
      v64.origin.CGFloat x = v10;
      v64.origin.CGFloat y = v9;
      v64.size.CGFloat width = v8;
      v64.size.CGFloat height = rectb;
      double v38 = v37 - CGRectGetWidth(v64);
      goto LABEL_17;
    case 6:
      CGFloat v39 = y;
      rectCGFloat b = v5;
      double v40 = CGRectGetMidX((CGRect)in);
      v65.origin.CGFloat x = v10;
      v65.origin.CGFloat y = v9;
      v65.size.CGFloat width = v8;
      v65.size.CGFloat height = rectb;
      double v38 = v40 + CGRectGetWidth(v65) * -0.5;
LABEL_17:
      if (v38 > 0.0) {
        double v14 = v38;
      }
      else {
        double v14 = 0.0;
      }
      v66.origin.CGFloat x = x;
      v66.origin.CGFloat y = y;
      v66.size.CGFloat width = width;
      v66.size.CGFloat height = height;
      double MaxY = CGRectGetMaxY(v66);
      v67.origin.CGFloat x = v10;
      v67.origin.CGFloat y = v9;
      v67.size.CGFloat width = v8;
      v67.size.CGFloat height = rectb;
      double v20 = CGRectGetHeight(v67);
      double v5 = rectb;
      goto LABEL_21;
    case 7:
      CGFloat v41 = y;
      CGFloat v42 = v5;
      double v43 = CGRectGetMaxY((CGRect)in);
      v68.origin.CGFloat x = v10;
      v68.origin.CGFloat y = v9;
      v68.size.CGFloat width = v8;
      v68.size.CGFloat height = v42;
      CGFloat v44 = CGRectGetHeight(v68);
      double v5 = v42;
      double v45 = v43 - v44;
      goto LABEL_27;
    case 8:
      CGFloat v46 = y;
      CGFloat v47 = v5;
      double v48 = CGRectGetMidY((CGRect)in);
      v69.origin.CGFloat x = v10;
      v69.origin.CGFloat y = v9;
      v69.size.CGFloat width = v8;
      v69.size.CGFloat height = v47;
      CGFloat v49 = CGRectGetHeight(v69);
      double v5 = v47;
      double v45 = v48 + v49 * -0.5;
LABEL_27:
      if (v45 > 0.0) {
        double v7 = v45;
      }
      else {
        double v7 = 0.0;
      }
      break;
    default:
      CGFloat v15 = y;
      CGFloat rect = v5;
      double v16 = CGRectGetMidX((CGRect)in);
      v56.origin.CGFloat x = v10;
      v56.origin.CGFloat y = v9;
      v56.size.CGFloat width = v8;
      v56.size.CGFloat height = rect;
      double v17 = v16 - CGRectGetWidth(v56) * 0.5;
      if (v17 > 0.0) {
        double v14 = v17;
      }
      else {
        double v14 = 0.0;
      }
      v57.origin.CGFloat x = x;
      v57.origin.CGFloat y = y;
      v57.size.CGFloat width = width;
      v57.size.CGFloat height = height;
      double MaxY = CGRectGetMidY(v57);
      v58.origin.CGFloat x = v10;
      v58.origin.CGFloat y = v9;
      v58.size.CGFloat width = v8;
      v58.size.CGFloat height = rect;
      CGFloat v19 = CGRectGetHeight(v58);
      double v5 = rect;
      double v20 = v19 * 0.5;
LABEL_21:
      double v35 = MaxY - v20;
LABEL_22:
      double v7 = 0.0;
      if (v35 > 0.0) {
        double v7 = v35;
      }
      break;
  }
  double v50 = v14;
  double v51 = v8;
  double v52 = v5;
  result.size.CGFloat height = v52;
  result.size.CGFloat width = v51;
  result.origin.CGFloat y = v7;
  result.origin.CGFloat x = v50;
  return result;
}

BOOL CGRect.isFinite.getter(double a1, double a2, double a3, double a4)
{
  BOOL v4 = (~*(void *)&a3 & 0x7FF0000000000000) != 0 && (~*(void *)&a4 & 0x7FF0000000000000) != 0;
  BOOL v5 = (~*(void *)&a2 & 0x7FF0000000000000) != 0 && v4;
  return (~*(void *)&a1 & 0x7FF0000000000000) != 0 && v5;
}

double CGAffineTransform.decompose(initialRotation:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double v5 = *v2;
  double v6 = v2[1];
  double v7 = v2[2];
  double v8 = v2[3];
  CGFloat v9 = v2[4];
  CGFloat v10 = v2[5];
  CGFloat v45 = v10;
  CGFloat v46 = v9;
  double v11 = sqrt(v5 * v5 + v6 * v6);
  double v12 = sqrt(v7 * v7 + v8 * v8);
  CGFloat v13 = v7;
  CGFloat v43 = v8;
  CGFloat v44 = v7;
  double v14 = *v2 * v8 - v6 * v7;
  CGFloat v15 = v8;
  double v16 = -v12;
  double v17 = -v11;
  if (*v2 >= v8) {
    double v17 = v11;
  }
  else {
    double v16 = v12;
  }
  BOOL v18 = v14 < 0.0;
  if (v14 < 0.0) {
    double v19 = v16;
  }
  else {
    double v19 = v12;
  }
  if (v18) {
    double v20 = v17;
  }
  else {
    double v20 = v11;
  }
  double v48 = v20;
  double v49 = v19;
  CGFloat v21 = v2[1];
  CGFloat v41 = *v2;
  CGFloat v42 = v21;
  CGFloat v22 = *v2;
  double v23 = atan2(v6 / v20, v5 / v20);
  t1.CGFloat a = v22;
  t1.CGFloat b = v21;
  if ((~*(void *)&v23 & 0x7FF0000000000000) == 0) {
    double v23 = a2;
  }
  double v47 = v23;
  CGFloat v24 = -v23;
  t1.CGFloat c = v13;
  t1.CGFloat d = v15;
  t1.tCGFloat x = v9;
  t1.tCGFloat y = v10;
  v53.CGFloat x = 0.5;
  v53.CGFloat y = 0.5;
  CGPoint v25 = CGPointApplyAffineTransform(v53, &t1);
  CGAffineTransformMakeRotation(&t1, v24);
  long long v37 = *(_OWORD *)&t1.c;
  long long v39 = *(_OWORD *)&t1.a;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -v25.x, -v25.y);
  CGFloat a = t1.a;
  CGFloat b = t1.b;
  CGFloat c = t1.c;
  CGFloat d = t1.d;
  CGFloat v33 = t1.tx;
  CGFloat v32 = t1.ty;
  *(_OWORD *)&t2.CGFloat a = v39;
  *(_OWORD *)&t2.CGFloat c = v37;
  t2.tCGFloat x = tx;
  t2.tCGFloat y = ty;
  CGAffineTransformConcat(&v50, &t1, &t2);
  long long v38 = *(_OWORD *)&v50.c;
  long long v40 = *(_OWORD *)&v50.a;
  CGFloat v34 = v50.tx;
  CGFloat v35 = v50.ty;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.tCGFloat x = v33;
  t1.tCGFloat y = v32;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CGFloat a = v40;
  *(_OWORD *)&t1.CGFloat c = v38;
  t1.tCGFloat x = v34;
  t1.tCGFloat y = v35;
  CGAffineTransformConcat(&v50, &t1, &t2);
  t1.CGFloat a = v41;
  t1.CGFloat b = v42;
  t1.CGFloat c = v44;
  t1.CGFloat d = v43;
  t1.tCGFloat x = v46;
  t1.tCGFloat y = v45;
  CGAffineTransform t2 = v50;
  CGAffineTransformConcat(&v50, &t1, &t2);
  *(_OWORD *)a1 = *(_OWORD *)&v50.tx;
  *(double *)(a1 + 16) = v48;
  *(double *)(a1 + 24) = v49;
  double result = v47;
  *(double *)(a1 + 32) = v47;
  return result;
}

BOOL CGRect.almostEqual(_:threshold:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  v28.origin.CGFloat x = a6;
  v28.origin.CGFloat y = a7;
  v28.size.CGFloat width = a8;
  v28.size.CGFloat height = a9;
  int IsNull = CGRectIsNull(v28);
  v29.origin.CGFloat x = a1;
  v29.origin.CGFloat y = a2;
  v29.size.CGFloat width = a3;
  v29.size.CGFloat height = a4;
  int v25 = CGRectIsNull(v29);
  if (IsNull && (v25 & 1) != 0) {
    return 1;
  }
  if (IsNull == v25 && vabdd_f64(a6, a1) < a5 && vabdd_f64(a7, a2) < a5 && vabdd_f64(a8, a3) < a5) {
    return vabdd_f64(a9, a4) < a5;
  }
  return 0;
}

void __swiftcall Quad.init(topLeft:topRight:bottomLeft:bottomRight:)(PaperKit::Quad *__return_ptr retstr, CGPoint topLeft, CGPoint topRight, CGPoint bottomLeft, CGPoint bottomRight)
{
  retstr->topLeft.CGFloat x = topLeft.x;
  retstr->topLeft.CGFloat y = topLeft.y;
  retstr->topRight.CGFloat x = topRight.x;
  retstr->topRight.CGFloat y = topRight.y;
  retstr->bottomLeft.CGFloat x = bottomLeft.x;
  retstr->bottomLeft.CGFloat y = bottomLeft.y;
  retstr->bottomRight.CGFloat x = bottomRight.x;
  retstr->bottomRight.CGFloat y = bottomRight.y;
}

double static Quad.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double CGRect.rounded(scale:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v5 = a2;
  if (a1 != 0.0)
  {
    v10.origin.CGFloat x = a2;
    v10.origin.CGFloat y = a3;
    v10.size.CGFloat width = a4;
    v10.size.CGFloat height = a5;
    if (!CGRectIsNull(v10))
    {
      double v7 = floor(a1 * v5);
      double v8 = ceil(a1 * v5);
      if (a1 * v5 - v7 < 0.49) {
        double v8 = v7;
      }
      return v8 / a1;
    }
  }
  return v5;
}

BOOL CGAffineTransform.almostEqual(_:scaleThreshold:translationThreshold:)(double *a1, double a2, double a3)
{
  return vabdd_f64(*v3, *a1) < a2
      && vabdd_f64(v3[1], a1[1]) < a2
      && vabdd_f64(v3[2], a1[2]) < a2
      && vabdd_f64(v3[3], a1[3]) < a2
      && vabdd_f64(v3[4], a1[4]) < a3
      && vabdd_f64(v3[5], a1[5]) < a3;
}

double Quad.perspectiveCorrectedSize.getter()
{
  v1.f64[0] = *(float64_t *)(v0 + 32);
  v2.f64[0] = *(float64_t *)(v0 + 40);
  v3.f64[0] = *(float64_t *)(v0 + 16);
  v3.f64[1] = v1.f64[0];
  float64x2_t v4 = vsubq_f64((float64x2_t)vdupq_lane_s64(*(void *)v0, 0), v3);
  v3.f64[0] = *(float64_t *)(v0 + 24);
  v3.f64[1] = v2.f64[0];
  float64x2_t v5 = vsubq_f64((float64x2_t)vdupq_lane_s64(*(void *)(v0 + 8), 0), v3);
  float64x2_t v6 = vsqrtq_f64(vaddq_f64(vmulq_f64(v4, v4), vmulq_f64(v5, v5)));
  v1.f64[1] = *(float64_t *)(v0 + 16);
  float64x2_t v7 = vsubq_f64((float64x2_t)vdupq_lane_s64(*(void *)(v0 + 48), 0), v1);
  v2.f64[1] = v3.f64[0];
  float64x2_t v8 = vsubq_f64((float64x2_t)vdupq_lane_s64(*(void *)(v0 + 56), 0), v2);
  float64x2_t v9 = vsqrtq_f64(vaddq_f64(vmulq_f64(v7, v7), vmulq_f64(v8, v8)));
  int8x16_t v10 = (int8x16_t)vdivq_f64(v6, v9);
  float64x2_t v11 = (float64x2_t)vextq_s8(v10, v10, 8uLL);
  __asm { FMOV            V3.2D, #1.0 }
  float64x2_t v17 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v11, _Q3), (int8x16_t)v11, (int8x16_t)vdivq_f64(_Q3, v11));
  double v18 = v17.f64[1];
  if (v17.f64[0] > v17.f64[1]) {
    double v18 = v17.f64[0];
  }
  if (v18 > 2.0) {
    float64x2_t v17 = vmulq_n_f64(v17, 2.0 / v18);
  }
  *(void *)&double result = *(_OWORD *)&vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v9, v6), (int8x16_t)v9, (int8x16_t)v6), v17);
  return result;
}

BOOL static LayoutAnchor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void LayoutAnchor.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int LayoutAnchor.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

CGPoint __swiftcall CGPoint.closestPointOnLineSegment(from:to:)(CGPoint from, CGPoint to)
{
  double v4 = to.x - from.x;
  double v5 = to.y - from.y;
  double v6 = (v4 * (v2 - from.x) + v5 * (v3 - from.y)) / (v4 * v4 + v5 * v5);
  double v7 = 1.0;
  if (v6 <= 1.0) {
    double v7 = v6;
  }
  BOOL v8 = v6 < 0.0;
  double v9 = 0.0;
  if (!v8) {
    double v9 = v7;
  }
  double v10 = v4 * v9 + from.x;
  double v11 = v5 * v9 + from.y;
  result.CGFloat y = v11;
  result.CGFloat x = v10;
  return result;
}

__C::CGRect __swiftcall CGRect.withSafeArea(insets:in:)(UIEdgeInsets insets, __C::CGRect in)
{
  CGFloat height = in.size.height;
  CGFloat width = in.size.width;
  CGFloat y = in.origin.y;
  CGFloat x = in.origin.x;
  double right = insets.right;
  double top = insets.top;
  double bottom = insets.bottom;
  double left = insets.left;
  double MinX = CGRectGetMinX((CGRect)in);
  v64.origin.CGFloat x = x;
  v64.origin.CGFloat y = y;
  v64.size.CGFloat width = width;
  v64.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v64);
  v65.origin.CGFloat x = x;
  v65.origin.CGFloat y = y;
  v65.size.CGFloat width = width;
  v65.size.CGFloat height = height;
  double v8 = CGRectGetWidth(v65) - (left + right);
  if (v8 > 0.0) {
    double v9 = v8;
  }
  else {
    double v9 = 0.0;
  }
  CGFloat v48 = height;
  CGFloat v49 = x;
  v66.origin.CGFloat x = x;
  CGFloat v47 = width;
  v66.origin.CGFloat y = y;
  v66.size.CGFloat width = width;
  v66.size.CGFloat height = height;
  double v10 = CGRectGetHeight(v66) - (top + bottom);
  if (v10 > 0.0) {
    double v11 = v10;
  }
  else {
    double v11 = 0.0;
  }
  double v12 = MinX + left;
  double v13 = MinY + bottom;
  v67.origin.CGFloat x = v60;
  v67.origin.CGFloat y = v61;
  v67.size.CGFloat width = v62;
  v67.size.CGFloat height = v63;
  double v55 = CGRectGetWidth(v67);
  v68.origin.CGFloat x = v12;
  v68.origin.CGFloat y = MinY + bottom;
  v68.size.CGFloat width = v9;
  v68.size.CGFloat height = v11;
  double v53 = CGRectGetWidth(v68);
  v69.origin.CGFloat x = v60;
  v69.origin.CGFloat y = v61;
  v69.size.CGFloat width = v62;
  v69.size.CGFloat height = v63;
  double v14 = CGRectGetHeight(v69);
  v70.origin.CGFloat x = v12;
  v70.origin.CGFloat y = MinY + bottom;
  double v58 = v11;
  double v59 = v9;
  v70.size.CGFloat width = v9;
  v70.size.CGFloat height = v11;
  double v15 = CGRectGetHeight(v70);
  if (v55 >= v53)
  {
    double v39 = v48;
    v79.origin.CGFloat x = x;
    double v40 = v47;
    v79.origin.CGFloat y = y;
    v79.size.CGFloat width = v47;
    v79.size.CGFloat height = v48;
    double MidX = CGRectGetMidX(v79);
    v80.origin.CGFloat x = v49;
    v80.origin.CGFloat y = y;
    v80.size.CGFloat width = v47;
    v80.size.CGFloat height = v48;
    CGRectGetMidY(v80);
    BOOL v42 = v14 < v15;
    CGFloat v36 = v61;
    CGFloat v35 = v62;
    CGFloat v37 = v60;
    double v16 = v63;
    CGFloat v38 = v63;
    if (v42) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  CGFloat v51 = v13;
  BOOL v42 = v14 < v15;
  double v16 = v63;
  double v17 = v62;
  if (!v42)
  {
    v81.origin.CGFloat x = v60;
    v81.origin.CGFloat y = v61;
    v81.size.CGFloat width = v62;
    v81.size.CGFloat height = v63;
    double MidX = CGRectGetMidX(v81);
    v82.origin.CGFloat x = v60;
    v82.origin.CGFloat y = v61;
    v82.size.CGFloat width = v62;
    v82.size.CGFloat height = v63;
    CGRectGetMidY(v82);
    double v39 = v48;
    double v40 = v47;
LABEL_23:
    CGFloat v37 = v49;
    CGFloat v36 = y;
    CGFloat v35 = v40;
    CGFloat v38 = v39;
LABEL_24:
    v83.origin.CGFloat x = v37;
    v83.origin.CGFloat y = v36;
    v83.size.CGFloat width = v35;
    v83.size.CGFloat height = v38;
    CGRectGetMidX(v83);
    v84.origin.CGFloat x = v37;
    v84.origin.CGFloat y = v36;
    v84.size.CGFloat width = v35;
    v84.size.CGFloat height = v38;
    double MidY = CGRectGetMidY(v84);
    double v17 = v62;
    BOOL v42 = v59 < v62 || v58 < v16;
    if (v42)
    {
      double v43 = v59 / v62;
      if (v58 / v16 < v59 / v62) {
        double v43 = v58 / v16;
      }
      double v17 = v43 * v62;
      double v16 = v43 * v16;
    }
    double v25 = MidX - v17 * 0.5;
    double v34 = MidY - v16 * 0.5;
    goto LABEL_33;
  }
  v71.origin.CGFloat x = v60;
  v71.origin.CGFloat y = v61;
  v71.size.CGFloat width = v62;
  v71.size.CGFloat height = v63;
  double v18 = CGRectGetMinX(v71);
  v72.origin.CGFloat x = v12;
  v72.origin.CGFloat y = v51;
  v72.size.CGFloat width = v59;
  v72.size.CGFloat height = v11;
  CGFloat v19 = CGRectGetMinX(v72);
  if (v18 > v19) {
    CGFloat v19 = v18;
  }
  CGFloat v20 = v61;
  double v21 = v62;
  CGFloat v22 = v63;
  double MaxX = CGRectGetMaxX(*(CGRect *)&v19);
  v73.origin.CGFloat x = v12;
  v73.origin.CGFloat y = v51;
  v73.size.CGFloat width = v59;
  v73.size.CGFloat height = v11;
  double v24 = CGRectGetMaxX(v73);
  if (v24 < MaxX) {
    double MaxX = v24;
  }
  v74.origin.CGFloat x = v60;
  v74.origin.CGFloat y = v61;
  v74.size.CGFloat width = v62;
  v74.size.CGFloat height = v63;
  double v25 = MaxX - CGRectGetWidth(v74);
  v75.origin.CGFloat x = v25;
  v75.origin.CGFloat y = v61;
  v75.size.CGFloat width = v62;
  v75.size.CGFloat height = v63;
  double v26 = CGRectGetMinY(v75);
  v76.origin.CGFloat x = v12;
  v76.origin.CGFloat y = v51;
  v76.size.CGFloat width = v59;
  v76.size.CGFloat height = v58;
  double v27 = CGRectGetMinY(v76);
  if (v26 > v27) {
    double v28 = v26;
  }
  else {
    double v28 = v27;
  }
  double v29 = v25;
  double v30 = v62;
  CGFloat v31 = v63;
  double MaxY = CGRectGetMaxY(*(CGRect *)(&v28 - 1));
  v77.origin.CGFloat x = v12;
  v77.origin.CGFloat y = v51;
  v77.size.CGFloat width = v59;
  v77.size.CGFloat height = v58;
  double v33 = CGRectGetMaxY(v77);
  if (v33 < MaxY) {
    double MaxY = v33;
  }
  v78.origin.CGFloat x = v60;
  v78.origin.CGFloat y = v61;
  v78.size.CGFloat width = v62;
  v78.size.CGFloat height = v63;
  double v34 = MaxY - CGRectGetHeight(v78);
LABEL_33:
  double v44 = v25;
  double v45 = v17;
  double v46 = v16;
  result.size.CGFloat height = v46;
  result.size.CGFloat width = v45;
  result.origin.CGFloat y = v34;
  result.origin.CGFloat x = v44;
  return result;
}

__C::CGRect __swiftcall CGRect.closestRect(in:)(__C::CGRect in)
{
  CGFloat height = in.size.height;
  CGFloat width = in.size.width;
  CGFloat y = in.origin.y;
  double x = in.origin.x;
  CGFloat v34 = v4;
  CGFloat rect = v1;
  v38.origin.double x = v1;
  CGFloat v9 = v2;
  v38.origin.CGFloat y = v2;
  CGFloat v10 = v3;
  v38.size.CGFloat width = v3;
  v38.size.CGFloat height = v4;
  double v11 = CGRectGetWidth(v38);
  CGFloat rect_8 = x;
  CGFloat rect_16 = y;
  v39.origin.double x = x;
  CGFloat v33 = y;
  v39.origin.CGFloat y = y;
  CGFloat v12 = width;
  v39.size.CGFloat width = width;
  CGFloat v13 = height;
  v39.size.CGFloat height = height;
  if (CGRectGetWidth(v39) >= v11)
  {
    CGFloat v15 = v9;
    v42.origin.CGFloat y = v9;
    v42.size.CGFloat width = v10;
    CGFloat v17 = v34;
    v42.origin.double x = rect;
    v42.size.CGFloat height = v34;
    double MinX = CGRectGetMinX(v42);
    v43.origin.double x = x;
    v43.origin.CGFloat y = rect_16;
    CGFloat v16 = v12;
    CGFloat v18 = v10;
    v43.size.CGFloat width = v16;
    v43.size.CGFloat height = v13;
    if (MinX >= CGRectGetMinX(v43))
    {
      double x = rect;
      v44.origin.double x = rect;
      v44.origin.CGFloat y = v15;
      v44.size.CGFloat width = v10;
      v44.size.CGFloat height = v34;
      double MaxX = CGRectGetMaxX(v44);
      v45.origin.double x = rect_8;
      v45.origin.CGFloat y = rect_16;
      v45.size.CGFloat width = v16;
      v45.size.CGFloat height = v13;
      if (CGRectGetMaxX(v45) < MaxX)
      {
        v46.origin.double x = rect_8;
        v46.origin.CGFloat y = rect_16;
        v46.size.CGFloat width = v16;
        v46.size.CGFloat height = v13;
        double v21 = CGRectGetMaxX(v46);
        v47.origin.double x = rect;
        v47.origin.CGFloat y = v15;
        v47.size.CGFloat width = v10;
        v47.size.CGFloat height = v34;
        double x = v21 - CGRectGetWidth(v47);
      }
    }
  }
  else
  {
    v40.origin.double x = x;
    v40.origin.CGFloat y = y;
    v40.size.CGFloat width = v12;
    v40.size.CGFloat height = height;
    double MidX = CGRectGetMidX(v40);
    CGFloat v15 = v9;
    v41.origin.CGFloat y = v9;
    CGFloat v16 = v12;
    v41.size.CGFloat width = v10;
    CGFloat v17 = v34;
    v41.origin.double x = rect;
    CGFloat v18 = v10;
    v41.size.CGFloat height = v34;
    double x = MidX + CGRectGetWidth(v41) * -0.5;
  }
  v48.origin.double x = x;
  v48.origin.CGFloat y = v15;
  v48.size.CGFloat width = v18;
  v48.size.CGFloat height = v17;
  double v22 = CGRectGetHeight(v48);
  v49.origin.double x = rect_8;
  v49.origin.CGFloat y = rect_16;
  v49.size.CGFloat width = v16;
  v49.size.CGFloat height = v13;
  if (CGRectGetHeight(v49) >= v22)
  {
    v52.origin.double x = x;
    v52.origin.CGFloat y = v15;
    v52.size.CGFloat width = v18;
    v52.size.CGFloat height = v17;
    double MinY = CGRectGetMinY(v52);
    v53.origin.double x = rect_8;
    v53.origin.CGFloat y = rect_16;
    v53.size.CGFloat width = v16;
    v53.size.CGFloat height = v13;
    CGFloat v26 = CGRectGetMinY(v53);
    double v24 = v33;
    if (MinY >= v26)
    {
      v54.origin.double x = x;
      v54.origin.CGFloat y = v15;
      v54.size.CGFloat width = v18;
      v54.size.CGFloat height = v17;
      double MaxY = CGRectGetMaxY(v54);
      v55.origin.double x = rect_8;
      v55.origin.CGFloat y = rect_16;
      v55.size.CGFloat width = v16;
      v55.size.CGFloat height = v13;
      CGFloat v28 = CGRectGetMaxY(v55);
      double v24 = v15;
      if (v28 < MaxY)
      {
        v56.origin.double x = rect_8;
        v56.origin.CGFloat y = rect_16;
        v56.size.CGFloat width = v16;
        v56.size.CGFloat height = v13;
        double v29 = CGRectGetMaxY(v56);
        v57.origin.double x = x;
        v57.origin.CGFloat y = v15;
        v57.size.CGFloat width = v18;
        v57.size.CGFloat height = v17;
        double v24 = v29 - CGRectGetHeight(v57);
      }
    }
  }
  else
  {
    v50.origin.double x = rect_8;
    v50.origin.CGFloat y = rect_16;
    v50.size.CGFloat width = v16;
    v50.size.CGFloat height = v13;
    double MidY = CGRectGetMidY(v50);
    v51.origin.double x = x;
    v51.origin.CGFloat y = v15;
    v51.size.CGFloat width = v18;
    v51.size.CGFloat height = v17;
    double v24 = MidY + CGRectGetHeight(v51) * -0.5;
  }
  double v30 = x;
  double v31 = v18;
  double v32 = v17;
  result.size.CGFloat height = v32;
  result.size.CGFloat width = v31;
  result.origin.CGFloat y = v24;
  result.origin.double x = v30;
  return result;
}

double Quad.topLeft.getter()
{
  return *(double *)v0;
}

void Quad.topLeft.setter(double a1, double a2)
{
  *CGFloat v2 = a1;
  v2[1] = a2;
}

uint64_t (*Quad.topLeft.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

double Quad.topRight.getter()
{
  return *(double *)(v0 + 16);
}

void Quad.topRight.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*Quad.topRight.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

double Quad.bottomLeft.getter()
{
  return *(double *)(v0 + 32);
}

void Quad.bottomLeft.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*Quad.bottomLeft.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

double Quad.bottomRight.getter()
{
  return *(double *)(v0 + 48);
}

void Quad.bottomRight.setter(double a1, double a2)
{
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*Quad.bottomRight.modify())(void, void)
{
  return UnknownCanvasElementView.flags.modify;
}

unint64_t lazy protocol witness table accessor for type LayoutAnchor and conformance LayoutAnchor()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutAnchor and conformance LayoutAnchor;
  if (!lazy protocol witness table cache variable for type LayoutAnchor and conformance LayoutAnchor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutAnchor and conformance LayoutAnchor);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Quad()
{
  Hasher.init(_seed:)();
  uint64_t v0 = Quad.rawValue.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Quad()
{
  uint64_t v0 = Quad.rawValue.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  return outlined consume of Data._Representation(v0, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Quad()
{
  Hasher.init(_seed:)();
  uint64_t v0 = Quad.rawValue.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Quad()
{
  uint64_t v0 = Quad.rawValue.getter();
  unint64_t v2 = v1;
  uint64_t v3 = Quad.rawValue.getter();
  unint64_t v5 = v4;
  char v6 = specialized static Data.== infix(_:_:)(v0, v2, v3, v4);
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v6 & 1;
}

unsigned char *storeEnumTagSinglePayload for LayoutAnchor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C5306E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutAnchor()
{
  return &type metadata for LayoutAnchor;
}

uint64_t getEnumTagSinglePayload for Quad(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Quad(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Quad()
{
  return &type metadata for Quad;
}

CGAffineTransform *specialized CGAffineTransform.init(transformMovingPoints:to:)@<X0>(_OWORD *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, double a8@<D6>, double a9@<D7>)
{
  double v14 = a2 - a4;
  double v15 = a3 - a5;
  double v16 = sqrt(v14 * v14 + v15 * v15);
  if (v16 < 0.0001 || (double v17 = a6 - a8, v18 = a7 - a9, v19 = sqrt(v17 * v17 + v18 * v18), v19 < 0.0001))
  {
    unint64_t result = CGAffineTransformMakeTranslation(&t1, a6 - a2, a7 - a3);
    long long v44 = *(_OWORD *)&t1.a;
    long long v45 = *(_OWORD *)&t1.c;
    long long v46 = *(_OWORD *)&t1.tx;
  }
  else
  {
    CGFloat v20 = v19 / v16;
    double v21 = atan2(v15, v14);
    long double v22 = atan2(v18, v17);
    CGAffineTransformMakeTranslation(&t1, -a2, -a3);
    long long v47 = *(_OWORD *)&t1.c;
    long long v51 = *(_OWORD *)&t1.a;
    tdouble x = t1.tx;
    tCGFloat y = t1.ty;
    CGAffineTransformMakeRotation(&t1, -v21);
    long long v25 = *(_OWORD *)&t1.a;
    long long v26 = *(_OWORD *)&t1.c;
    long long v27 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v51;
    *(_OWORD *)&t1.CGFloat c = v47;
    t1.tdouble x = tx;
    t1.tCGFloat y = ty;
    *(_OWORD *)&t2.CGFloat a = v25;
    *(_OWORD *)&t2.CGFloat c = v26;
    *(_OWORD *)&t2.tdouble x = v27;
    CGAffineTransformConcat(&v55, &t1, &t2);
    long long v48 = *(_OWORD *)&v55.c;
    long long v52 = *(_OWORD *)&v55.a;
    CGFloat v28 = v55.tx;
    CGFloat v29 = v55.ty;
    CGAffineTransformMakeScale(&t1, v20, v20);
    long long v30 = *(_OWORD *)&t1.a;
    long long v31 = *(_OWORD *)&t1.c;
    long long v32 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v52;
    *(_OWORD *)&t1.CGFloat c = v48;
    t1.tdouble x = v28;
    t1.tCGFloat y = v29;
    *(_OWORD *)&t2.CGFloat a = v30;
    *(_OWORD *)&t2.CGFloat c = v31;
    *(_OWORD *)&t2.tdouble x = v32;
    CGAffineTransformConcat(&v55, &t1, &t2);
    long long v49 = *(_OWORD *)&v55.c;
    long long v53 = *(_OWORD *)&v55.a;
    CGFloat v33 = v55.tx;
    CGFloat v34 = v55.ty;
    CGAffineTransformMakeRotation(&t1, v22);
    long long v35 = *(_OWORD *)&t1.a;
    long long v36 = *(_OWORD *)&t1.c;
    long long v37 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v53;
    *(_OWORD *)&t1.CGFloat c = v49;
    t1.tdouble x = v33;
    t1.tCGFloat y = v34;
    *(_OWORD *)&t2.CGFloat a = v35;
    *(_OWORD *)&t2.CGFloat c = v36;
    *(_OWORD *)&t2.tdouble x = v37;
    CGAffineTransformConcat(&v55, &t1, &t2);
    long long v50 = *(_OWORD *)&v55.c;
    long long v54 = *(_OWORD *)&v55.a;
    CGFloat v38 = v55.tx;
    CGFloat v39 = v55.ty;
    CGAffineTransformMakeTranslation(&t1, a6, a7);
    long long v40 = *(_OWORD *)&t1.a;
    long long v41 = *(_OWORD *)&t1.c;
    long long v42 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v54;
    *(_OWORD *)&t1.CGFloat c = v50;
    t1.tdouble x = v38;
    t1.tCGFloat y = v39;
    *(_OWORD *)&t2.CGFloat a = v40;
    *(_OWORD *)&t2.CGFloat c = v41;
    *(_OWORD *)&t2.tdouble x = v42;
    unint64_t result = CGAffineTransformConcat(&v55, &t1, &t2);
    long long v44 = *(_OWORD *)&v55.a;
    long long v45 = *(_OWORD *)&v55.c;
    long long v46 = *(_OWORD *)&v55.tx;
  }
  *a1 = v44;
  a1[1] = v45;
  a1[2] = v46;
  return result;
}

uint64_t CanvasElementViewControllerDelegate.canvasElementViewControllerOverrideDefaultToolPicker(_:)()
{
  return 0;
}

uint64_t CanvasElementViewControllerDelegate.canvasElementViewControllerActiveToolPicker(_:)()
{
  return 0;
}

uint64_t dispatch thunk of CanvasElementViewControllerDelegate.canvasElementViewControllerCanvasViewDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CanvasElementViewControllerDelegate.canvasElementViewControllerOverrideDefaultToolPicker(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CanvasElementViewControllerDelegate.canvasElementViewControllerActiveToolPicker(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t type metadata accessor for TypesetViewController()
{
  uint64_t result = type metadata singleton initialization cache for TypesetViewController;
  if (!type metadata singleton initialization cache for TypesetViewController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for TypesetViewController()
{
  return swift_initClassMetadata2();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v2 - 8);
  long long v37 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v4 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  CGFloat v38 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  double v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  long long v27 = (char *)&v26 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  long long v35 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v14 = *(void *)(a1 + 16);
  uint64_t v39 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
  uint64_t v28 = a1;
  uint64_t v26 = v12;
  if (v14)
  {
    double v16 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v15 = v12 + 16;
    double v17 = (char *)(a1 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64)));
    uint64_t v18 = *(void *)(v15 + 56);
    CGFloat v33 = (void (**)(char *, void, uint64_t, uint64_t))(v15 + 40);
    CGFloat v34 = v16;
    long long v32 = (uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 32);
    uint64_t v29 = v4 + 32;
    uint64_t v30 = v18;
    swift_bridgeObjectRetain();
    uint64_t v31 = v4;
    while (1)
    {
      double v19 = v34;
      v34(v8, v17, v11);
      (*v33)(v8, 0, 1, v11);
      uint64_t result = (*v32)(v8, 1, v11);
      if (result == 1) {
        break;
      }
      v19(v35, v8, v11);
      CRKeyPath.init(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>();
      WeakRef.init(id:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v11);
      uint64_t v21 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
        uint64_t v21 = v39;
      }
      unint64_t v23 = *(void *)(v21 + 16);
      unint64_t v22 = *(void *)(v21 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v21 = v39;
      }
      *(void *)(v21 + 16) = v23 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v21+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v23, v38, v36);
      v17 += v30;
      if (!--v14) {
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_11:
    uint64_t v24 = (uint64_t)v27;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v27, 1, 1, v11);
    swift_bridgeObjectRelease();
    uint64_t v25 = v39;
    outlined destroy of UUID?(v24);
    return v25;
  }
  return result;
}

uint64_t @objc TypesetViewController._canShowWhileLocked()()
{
  return 1;
}

id @objc TypesetViewController.init(coder:)(void *a1, uint64_t a2, uint64_t a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for TypesetViewController();
  return objc_msgSendSuper2(&v5, sel_initWithCoder_, a3);
}

id TypesetViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TypesetViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t vtable thunk for UIHostingController.__allocating_init(rootView:) dispatching to TypesetViewController.__allocating_init(rootView:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for TypesetViewController());
  return UIHostingController.init(rootView:)();
}

uint64_t vtable thunk for UIHostingController.__allocating_init(coder:rootView:) dispatching to TypesetViewController.__allocating_init(coder:rootView:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for TypesetViewController());
  return UIHostingController.init(coder:rootView:)();
}

uint64_t ObjC metadata update function for TypesetViewController()
{
  return type metadata accessor for TypesetViewController();
}

char *MathRecognitionViewControllerDelegate.init(canvas:view:recognitionController:)(void *a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController] = 0;
  uint64_t v9 = v4;
  id v10 = objc_msgSend(a3, sel_mathRecognitionController);
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_controller] = v10;

  v19.receiver = v9;
  v19.super_class = ObjectType;
  uint64_t v11 = (char *)objc_msgSendSuper2(&v19, sel_init);
  swift_unknownObjectWeakAssign();
  uint64_t v12 = *(void **)&v11[OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_controller];
  id v13 = objc_allocWithZone(MEMORY[0x263F14B88]);
  int64_t v14 = v11;
  id v15 = v12;
  id v16 = objc_msgSend(v13, sel_initWithController_view_delegate_, v15, a2, v14);

  double v17 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController];
  *(void *)&v14[OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController] = v16;

  return v14;
}

uint64_t MathRecognitionViewControllerDelegate.mathViewControllerDrawing(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  if (v3
    && (uint64_t v4 = v3,
        objc_super v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x2F8))(),
        uint64_t v7 = v6,
        v4,
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7),
        v5,
        v9))
  {
    id v10 = objc_msgSend(v9, sel_drawing);

    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = type metadata accessor for PKDrawing();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v16 = type metadata accessor for PKDrawing();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v13 = v16;
    uint64_t v14 = a1;
    uint64_t v15 = 1;
  }
  return v12(v14, v15, 1, v13);
}

uint64_t type metadata accessor for MathRecognitionViewControllerDelegate()
{
  return self;
}

void specialized MathRecognitionViewControllerDelegate.mathViewControllerDrawingTransform(_:)(long long *a1@<X8>)
{
  uint64_t v3 = (void *)MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  long long v4 = xmmword_20C8356C0;
  long long v5 = xmmword_20C835600;
  long long v6 = 0uLL;
  if (v3)
  {
    uint64_t v7 = v3;
    double v8 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v3) + 0x2F8))();
    uint64_t v10 = v9;

    uint64_t ObjectType = swift_getObjectType();
    uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);

    long long v6 = 0uLL;
    long long v5 = xmmword_20C835600;
    long long v4 = xmmword_20C8356C0;
    if (v12)
    {
      objc_msgSend(v12, sel_drawingTransform, 0.0, 1.0, 0.0);
      long long v14 = v16;
      long long v15 = v17;
      long long v13 = v18;

      long long v6 = v13;
      long long v5 = v14;
      long long v4 = v15;
    }
  }
  *a1 = v5;
  a1[1] = v4;
  a1[2] = v6;
}

double specialized MathRecognitionViewControllerDelegate.mathViewControllerLatestEnd(ofStrokeTimestamp:)()
{
  uint64_t v1 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  double v2 = 0.0;
  if (v1)
  {
    uint64_t v3 = v1;
    long long v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x2F8))();
    uint64_t v6 = v5;

    uint64_t ObjectType = swift_getObjectType();
    double v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6);

    if (v8)
    {
      double v2 = *(double *)&v8[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_latestEndOfStrokeTimestamp];
    }
  }
  return v2;
}

void specialized MathRecognitionViewControllerDelegate.mathViewControllerUpdateFrame(forContainer:)()
{
  uint64_t v1 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  if (v1)
  {
    double v2 = v1;
    uint64_t v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x2F8))();
    uint64_t v5 = v4;

    uint64_t ObjectType = swift_getObjectType();
    id v7 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);

    objc_msgSend(v7, sel_updateFrameForTextContainer);
  }
}

void *specialized MathRecognitionViewControllerDelegate.mathViewController(_:expressionIdentifiersForCompatibleGraphNearLocation:expressionUUID:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = type metadata accessor for PKDrawing();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v12 = MEMORY[0x270FA5388](v11);
  long long v14 = &v44[-v13];
  long long v15 = (void *)MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v12);
  if (!v15) {
    return 0;
  }
  long long v16 = v15;
  long long v17 = (void *)MEMORY[0x263F8EED0];
  long long v18 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v15) + 0x2F8))();
  uint64_t v20 = v19;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(ObjectType, v20);

  if (!v22)
  {

    return v22;
  }
  id v23 = objc_msgSend(v22, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v14, v10, v7);
  PKDrawing._bridgeToObjectiveC()(v24);
  uint64_t v26 = v25;
  id v27 = objc_msgSend(v25, sel_uuid);

  long long v45 = &unk_26C1C1038;
  uint64_t v28 = swift_dynamicCastObjCProtocolConditional();
  if (!v28) {
    goto LABEL_19;
  }
  uint64_t v29 = v28;
  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t v30 = swift_dynamicCastMetatype() ? (void *)v29 : 0;
  if (!v30) {
    goto LABEL_19;
  }
  uint64_t v31 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v31 != -1) {
    swift_once();
  }
  swift_beginAccess();
  long long v32 = static CalculateDocumentController.controllers;
  if (!*((void *)static CalculateDocumentController.controllers + 2))
  {
LABEL_17:
    swift_endAccess();
    swift_unknownObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v14, v7);
    swift_unknownObjectRelease();

    return 0;
  }
  swift_unknownObjectRetain();
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
  if ((v34 & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_17;
  }
  long long v35 = *(void **)(v32[7] + 8 * v33);
  swift_endAccess();
  uint64_t v36 = v35;
  swift_unknownObjectRelease_n();
  long long v37 = &v36[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  if (!MEMORY[0x210550400](&v36[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document])
    || (uint64_t v38 = *((void *)v37 + 1),
        uint64_t v39 = swift_getObjectType(),
        uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(a1, v39, v38),
        swift_unknownObjectRelease(),
        !v40))
  {

LABEL_19:
    swift_unknownObjectRelease();

    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v14, v7);
    return 0;
  }
  long long v41 = *(uint64_t (**)(uint64_t, double, double))((*v17 & *v16) + 0x760);
  uint64_t v42 = swift_retain();
  unint64_t v22 = (void *)v41(v42, a2, a3);
  swift_release_n();

  swift_unknownObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v14, v7);
  return v22;
}

void specialized MathRecognitionViewControllerDelegate.mathViewController(_:addGraphForExpression:variable:range:identifier:expressionLocation:addToExisting:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v14 = v13;
  if (a4) {
    uint64_t v27 = a3;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v41 = v27;
  uint64_t v28 = one-time initialization token for mathLogger;
  if (a4) {
    unint64_t v29 = a4;
  }
  else {
    unint64_t v29 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)mathLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v40 = a6;
    uint64_t v33 = swift_slowAlloc();
    char v39 = a7;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v43 = v34;
    *(_DWORD *)uint64_t v33 = 136380931;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 12) = 2081;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v29, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_20C2D7000, v31, v32, "MathRecognitionViewControllerDelegate addGraph: %{private}s, variable: %{private}s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    uint64_t v35 = v34;
    a7 = v39;
    MEMORY[0x210550270](v35, -1, -1);
    uint64_t v36 = v33;
    a6 = v40;
    MEMORY[0x210550270](v36, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  long long v37 = (void *)MEMORY[0x210550400](v14 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  if (v37)
  {
    uint64_t v38 = v37;
    (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void, double, double, double, double, double, double))((*MEMORY[0x263F8EED0] & *v37) + 0x758))(a1, a2, a3, a4, a5, a6, a7 & 1, a8, a9, a10, a11, a12, a13);
  }
}

void specialized MathRecognitionViewControllerDelegate.mathViewController(_:didUpdateExpressions:newExpressions:removedExpressions:mathItems:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for mathLogger != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)mathLogger);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_20C2D7000, v11, v12, "MathRecognitionViewControllerDelegate didUpdateExpressions", v13, 2u);
    MEMORY[0x210550270](v13, -1, -1);
  }

  uint64_t v14 = MEMORY[0x210550400](v5 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  if (v14)
  {
    id v15 = (id)v14;
    AnyCanvas.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(a1, a2, a3, a4);
  }
}

void specialized MathRecognitionViewControllerDelegate.mathViewController(_:replace:with:)()
{
  uint64_t v1 = type metadata accessor for PKDrawing();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v30 - v7;
  uint64_t v9 = v0 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas;
  uint64_t v10 = (void *)MEMORY[0x210550400](v0 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v6);
  if (v10)
  {
    uint64_t v11 = v10;
    os_log_type_t v12 = (void *)MEMORY[0x263F8EED0];
    v30[0] = (id)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v10) + 0x320))();

    if (v30[0])
    {
      uint64_t v13 = (void *)MEMORY[0x210550400](v9);
      if (v13
        && (uint64_t v14 = v13,
            id v15 = (void *)(*(uint64_t (**)(void))((*v12 & *v13) + 0x2F8))(),
            uint64_t v17 = v16,
            v14,
            uint64_t ObjectType = swift_getObjectType(),
            uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(ObjectType, v17),
            v15,
            v19))
      {
        id v20 = objc_msgSend(v19, sel_drawing);

        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v4, v1);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
        swift_dynamicCast();
        id v21 = v31;
        objc_msgSend(v31, sel_copy);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        if (swift_dynamicCast())
        {
          id v22 = v30[1];
          type metadata accessor for PKStroke();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          Class v24 = Array._bridgeToObjectiveC()().super.isa;
          id v25 = objc_msgSend(v22, sel_undoableAddNewStrokes_replacingOldStrokes_, isa, v24);

          if (v25)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t v26 = swift_allocObject();
            *(_OWORD *)(v26 + 16) = xmmword_20C835790;
            *(void *)(v26 + 32) = v25;
            id v31 = (id)v26;
            specialized Array._endMutation()();
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKUndoCommand);
            id v27 = v25;
            Class v28 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            objc_msgSend(v30[0], sel_registerUndoCommands_andChangeToDrawing_, v28, v22);
          }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
        id v29 = v30[0];
      }
    }
  }
}

uint64_t specialized MathRecognitionViewControllerDelegate.mathViewController(_:createTypesetViewControllerForExpression:latex:fontSize:)(double a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for CalculateExpression.Base();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, a4 & 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  uint64_t v13 = (void *)*MEMORY[0x263F2FCD0];
  *(void *)(inited + 32) = *MEMORY[0x263F2FCD0];
  *(void *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(void *)(inited + 40) = v11;
  swift_bridgeObjectRetain();
  id v14 = v13;
  id v15 = v11;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F2FBD0], v7);
  UUID.init()();
  type metadata accessor for CalculateExpression();
  swift_allocObject();
  CalculateExpression.init(_:options:base:id:)();
  uint64_t v16 = MEMORY[0x2105490F0](a1);
  id v17 = objc_allocWithZone((Class)type metadata accessor for TypesetViewController());
  uint64_t v20 = v16;
  uint64_t v18 = UIHostingController.init(rootView:)();
  swift_release();

  return v18;
}

uint64_t specialized MathRecognitionViewControllerDelegate.mathViewController(_:createTypesetImageForExpression:latex:fontSize:)(double a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = type metadata accessor for CalculateExpression.Base();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInteger_, a4 & 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20C832C20;
  uint64_t v13 = (void *)*MEMORY[0x263F2FCD0];
  *(void *)(inited + 32) = *MEMORY[0x263F2FCD0];
  *(void *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(void *)(inited + 40) = v11;
  swift_bridgeObjectRetain();
  id v14 = v13;
  id v15 = v11;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F2FBD0], v7);
  UUID.init()();
  type metadata accessor for CalculateExpression();
  swift_allocObject();
  CalculateExpression.init(_:options:base:id:)();
  void v22[2] = MEMORY[0x2105490F0](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageRenderer<Image>);
  swift_allocObject();
  swift_retain();
  ImageRenderer.init(content:)();
  uint64_t v16 = (void *)MEMORY[0x210550400](v22[1] + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  if (v16)
  {
    id v17 = v16;
    id v18 = objc_msgSend(v16, sel_window);

    if (v18)
    {
      id v19 = objc_msgSend(v18, sel_screen);

      objc_msgSend(v19, sel_scale);
    }
  }
  ImageRenderer.scale.setter();
  uint64_t v20 = ImageRenderer.uiImage.getter();

  swift_release();
  swift_release();
  swift_release();
  return v20;
}

uint64_t specialized MathRecognitionViewControllerDelegate.mathViewController(_:createTypesetImageForItemUUID:showResult:fontSize:)(uint64_t a1, char a2, double a3)
{
  uint64_t v7 = type metadata accessor for PKDrawing();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  id v14 = (char *)v48 - v13;
  id v15 = (void *)MEMORY[0x210550400](v3 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v12);
  if (!v15) {
    return 0;
  }
  uint64_t v16 = v15;
  id v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v15) + 0x2F8))();
  uint64_t v19 = v18;
  uint64_t ObjectType = swift_getObjectType();
  id v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(ObjectType, v19);

  if (!v21) {
    goto LABEL_18;
  }
  id v22 = objc_msgSend(v21, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v10, v7);
  PKDrawing._bridgeToObjectiveC()(v23);
  id v25 = v24;
  id v26 = objc_msgSend(v24, sel_uuid);

  v48[5] = &unk_26C1C1038;
  uint64_t v27 = swift_dynamicCastObjCProtocolConditional();
  if (!v27) {
    goto LABEL_20;
  }
  uint64_t v28 = v27;
  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v29 = swift_dynamicCastMetatype() ? (void *)v28 : 0;
  if (!v29) {
    goto LABEL_20;
  }
  uint64_t v30 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v30 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v31 = static CalculateDocumentController.controllers;
  if (!*((void *)static CalculateDocumentController.controllers + 2))
  {
LABEL_17:
    swift_endAccess();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    swift_unknownObjectRelease();
LABEL_18:

    return 0;
  }
  swift_unknownObjectRetain();
  unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
  if ((v33 & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_17;
  }
  uint64_t v34 = *(void **)(v31[7] + 8 * v32);
  swift_endAccess();
  uint64_t v35 = v34;
  swift_unknownObjectRelease_n();
  uint64_t v36 = &v35[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  if (!MEMORY[0x210550400](&v35[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document])
    || (uint64_t v37 = *((void *)v36 + 1),
        uint64_t v38 = swift_getObjectType(),
        uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(a1, v38, v37),
        swift_unknownObjectRelease(),
        !v39))
  {

LABEL_20:
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    return 0;
  }
  if (a2) {
    char v40 = 1;
  }
  else {
    char v40 = CalculateExpression.isGraphable.getter();
  }
  uint64_t v43 = MEMORY[0x2105490F0](v39, 0, 0, v40 & 1, a3);
  v48[2] = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageRenderer<Image>);
  swift_allocObject();
  swift_retain();
  ImageRenderer.init(content:)();
  id v44 = objc_msgSend(v16, sel_window);
  if (v44)
  {
    long long v45 = v44;
    id v46 = objc_msgSend(v44, sel_screen);
    v48[1] = v43;
    id v47 = v46;

    objc_msgSend(v47, sel_scale);
  }
  ImageRenderer.scale.setter();
  uint64_t v41 = ImageRenderer.uiImage.getter();
  swift_release();

  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  return v41;
}

void specialized MathRecognitionViewControllerDelegate.mathViewController(_:select:)(uint64_t a1)
{
  uint64_t v34 = type metadata accessor for PKStroke();
  uint64_t v3 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v33 - 8);
  v7.n128_f64[0] = MEMORY[0x270FA5388](v33);
  uint64_t v28 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v27 = v1;
    uint64_t v35 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    double v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v31 = *(void *)(v11 + 56);
    unint64_t v32 = v12;
    uint64_t v29 = v6 + 32;
    uint64_t v30 = (void (**)(char *, uint64_t))(v11 - 8);
    id v14 = v28;
    do
    {
      uint64_t v15 = v34;
      uint64_t v16 = v11;
      v32(v5, v13, v34);
      Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
      id v18 = [(objc_class *)isa _strokeUUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      (*v30)(v5, v15);
      uint64_t v10 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
        id v14 = v28;
        uint64_t v10 = v35;
      }
      unint64_t v20 = *(void *)(v10 + 16);
      unint64_t v19 = *(void *)(v10 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        id v14 = v28;
        uint64_t v10 = v35;
      }
      *(void *)(v10 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v20, v14, v33);
      uint64_t v35 = v10;
      v13 += v31;
      --v9;
      uint64_t v11 = v16;
    }
    while (v9);
    uint64_t v1 = v27;
  }
  uint64_t v21 = MEMORY[0x210550400](v1 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v7);
  if (v21)
  {
    id v22 = (void *)v21;
    uint64_t v23 = specialized Set.init<A>(_:)(MEMORY[0x263F8EE78]);
    uint64_t v24 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(v10);
    uint64_t v25 = specialized Set.init<A>(_:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    AnyCanvas.selection.setter(v23, v25, 6, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void specialized MathRecognitionViewControllerDelegate.mathViewController(_:updatedResult:strokes:expressionUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v5 - 8);
  __n128 v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PKDrawing();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v16 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v13);
  if (v16)
  {
    id v17 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v16) + 0x2F8);
    id v45 = v16;
    id v18 = (void *)v17();
    uint64_t v20 = v19;
    uint64_t ObjectType = swift_getObjectType();
    id v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(ObjectType, v20);

    if (v22)
    {
      id v23 = objc_msgSend(v22, sel_drawing);

      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v11, v8);
      PKDrawing._bridgeToObjectiveC()(v24);
      uint64_t v26 = v25;
      id v27 = objc_msgSend(v25, sel_uuid);

      id v47 = &unk_26C1C1038;
      uint64_t v28 = swift_dynamicCastObjCProtocolConditional();
      if (!v28
        || ((uint64_t v29 = (void *)v28,
             swift_getObjectType(),
             type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (uint64_t v30 = v29): (uint64_t v30 = 0), !v30))
      {
        swift_unknownObjectRelease();

LABEL_16:
        (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
        return;
      }
      uint64_t v31 = one-time initialization token for controllers;
      swift_unknownObjectRetain();
      if (v31 != -1) {
        swift_once();
      }
      swift_beginAccess();
      unint64_t v32 = static CalculateDocumentController.controllers;
      if (*((void *)static CalculateDocumentController.controllers + 2))
      {
        swift_unknownObjectRetain();
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        if (v34)
        {
          uint64_t v35 = *(void **)(v32[7] + 8 * v33);
          swift_endAccess();
          id v36 = v35;
          swift_unknownObjectRelease_n();
          if (*(void *)(a1 + 16))
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
            uint64_t v46 = a1;
            swift_bridgeObjectRetain_n();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStroke]);
            uint64_t v37 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
            {
              uint64_t v39 = 0;
            }
            else
            {
              PKDrawing._bridgeToObjectiveC()(v38);
              uint64_t v39 = v42;
              (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
            }
            id v41 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PKDrawingCoherence(0)), sel_initWithStrokes_fromDrawing_, v37, v39);
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();

            if (v41) {
              id v43 = v41;
            }
          }
          else
          {
            id v41 = 0;
          }
          CalculateDocumentController.mathResultDrawing(_:forItem:)(v41, a2);

          swift_unknownObjectRelease();
          goto LABEL_16;
        }
        swift_unknownObjectRelease();
      }
      swift_endAccess();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
      swift_unknownObjectRelease();
    }
    else
    {
      id v40 = v45;
    }
  }
}

void *specialized MathRecognitionViewControllerDelegate.mathViewController(_:resultFor:itemUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PKDrawing();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v35[-v11];
  double v13 = (void *)MEMORY[0x210550400](v2 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v10);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v13;
  uint64_t v15 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x2F8))();
  uint64_t v17 = v16;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(ObjectType, v17);

  if (!v19)
  {

    return v19;
  }
  id v20 = objc_msgSend(v19, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v12, v8, v5);
  PKDrawing._bridgeToObjectiveC()(v21);
  id v23 = v22;
  id v24 = objc_msgSend(v22, sel_uuid);

  id v36 = &unk_26C1C1038;
  uint64_t v25 = swift_dynamicCastObjCProtocolConditional();
  if (!v25
    || ((uint64_t v26 = (void *)v25,
         swift_getObjectType(),
         type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (id v27 = v26): (id v27 = 0), !v27))
  {
    swift_unknownObjectRelease();

    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v12, v5);
    return 0;
  }
  uint64_t v28 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v28 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v29 = static CalculateDocumentController.controllers;
  if (!*((void *)static CalculateDocumentController.controllers + 2))
  {
LABEL_16:
    swift_endAccess();
    swift_unknownObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v12, v5);
    swift_unknownObjectRelease();

    return 0;
  }
  swift_unknownObjectRetain();
  unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
  if ((v31 & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_16;
  }
  unint64_t v32 = *(void **)(v29[7] + 8 * v30);
  swift_endAccess();
  id v33 = v32;
  swift_unknownObjectRelease_n();
  uint64_t v19 = (void *)CalculateDocumentController.resultForExpressionWithUUID(_:locale:)(a2, a1);

  swift_unknownObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v12, v5);
  return v19;
}

unint64_t lazy protocol witness table accessor for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>;
  if (!lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>);
  }
  return result;
}

uint64_t CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v27 = a4;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v11 = type metadata accessor for Capsule();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void *)(a6 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v13);
  id v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v27, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a1, v8 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v28, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v29, v11);
  unint64_t v19 = (*(unsigned __int8 *)(v16 + 80) + 161) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v20 = (v17 + *(unsigned __int8 *)(v12 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = v31;
  *((void *)v21 + 3) = a6;
  uint64_t v22 = v33;
  *((void *)v21 + 4) = v32;
  *((void *)v21 + 5) = v22;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v34, (uint64_t)(v21 + 48), (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a1, (uint64_t)(v21 + 128), (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v21[v19], v18, a6);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v21[v20], v15, v11);
  id v23 = (void (**)(void *))(v30 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render);
  uint64_t v24 = *(void *)(v30 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render);
  *id v23 = partial apply for closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:);
  v23[1] = (void (*)(void *))v21;
  outlined retain of PaperRenderableOptions?((uint64_t)v34);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v24);
}

void closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  id v45 = a1;
  uint64_t v41 = a6;
  uint64_t v42 = a9;
  uint64_t v11 = type metadata accessor for Capsule();
  uint64_t v35 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v34 - v15;
  id v36 = (char *)&v34 - v15;
  uint64_t v17 = *(void *)(a7 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x270FA5388](v14);
  unint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v40 = v22;
  dispatch_semaphore_t v39 = dispatch_semaphore_create(0);
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v37, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v38, v11);
  unint64_t v24 = (*(unsigned __int8 *)(v17 + 80) + 177) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v25 = (v18 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (*(unsigned __int8 *)(v12 + 80) + v25 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v27 = (char *)swift_allocObject();
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 3) = 0;
  *((void *)v27 + 4) = v41;
  *((void *)v27 + 5) = a7;
  uint64_t v28 = v42;
  *((void *)v27 + 6) = a8;
  *((void *)v27 + 7) = v28;
  uint64_t v29 = v43;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v43, (uint64_t)(v27 + 64), (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v44, (uint64_t)(v27 + 144), (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v27[v24], v19, a7);
  uint64_t v30 = v45;
  *(void *)&v27[v25] = v45;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v27[v26], v36, v35);
  dispatch_semaphore_t v31 = v39;
  *(void *)&v27[(v13 + v26 + 7) & 0xFFFFFFFFFFFFFFF8] = v39;
  outlined retain of PaperRenderableOptions?(v29);
  id v32 = v30;
  uint64_t v33 = v31;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v40, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:), (uint64_t)v27);
  swift_release();
  OS_dispatch_semaphore.wait()();
}

uint64_t closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 448) = v18;
  *(_OWORD *)(v8 + 416) = v16;
  *(_OWORD *)(v8 + 432) = v17;
  *(void *)(v8 + 400) = a7;
  *(void *)(v8 + 408) = a8;
  *(void *)(v8 + 384) = a5;
  *(void *)(v8 + 392) = a6;
  *(void *)(v8 + 376) = a4;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a5, v8 + 336, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  long long v10 = *(_OWORD *)(v8 + 352);
  *(_OWORD *)(v8 + 456) = *(_OWORD *)(v8 + 336);
  *(_OWORD *)(v8 + 472) = v10;
  *(unsigned char *)(v8 + 91) = *(unsigned char *)(v8 + 368);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a4, v8 + 96, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
  *(_OWORD *)(v8 + 488) = *(_OWORD *)(v8 + 96);
  uint64_t v11 = *(void *)(v8 + 160);
  *(void *)(v8 + 504) = *(void *)(v8 + 112);
  *(void *)(v8 + 512) = v11;
  __int16 v12 = *(_WORD *)(v8 + 168);
  *(unsigned char *)(v8 + 94) = *(unsigned char *)(v8 + 170);
  *(_WORD *)(v8 + 92) = v12;
  uint64_t v13 = type metadata accessor for CRKeyPath();
  *(void *)(v8 + 520) = v13;
  *(void *)(v8 + 528) = *(void *)(v13 - 8);
  *(void *)(v8 + 536) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:), 0, 0);
}

uint64_t closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)()
{
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(*(void *)(v0 + 376), v0 + 16, (uint64_t *)&demangling cache variable for type metadata for PaperRenderableOptions?);
  if (*(void *)(v0 + 24) == 1)
  {
    LOBYTE(v1) = 0;
    LOBYTE(v2) = 0;
    uint64_t v3 = 0;
    LOBYTE(v4) = 0;
    uint64_t v5 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v7) = 0;
    char v8 = 0;
    char v32 = 0;
    char v30 = 0;
    char v9 = 1;
  }
  else
  {
    int v10 = *(unsigned __int8 *)(v0 + 94);
    unint64_t v11 = *(void *)(v0 + 488);
    uint64_t v3 = *(void **)(v0 + 496);
    char v9 = v11 & 1;
    uint64_t v1 = (v11 >> 8) & 1;
    uint64_t v2 = (v11 >> 16) & 1;
    int v4 = *(_DWORD *)(v0 + 504) & 1;
    __int16 v6 = *(_WORD *)(v0 + 92) & 1;
    unsigned int v7 = ((*(unsigned __int16 *)(v0 + 92) | (v10 << 16)) >> 8) & 1;
    char v8 = v10 & 1;
    uint64_t v5 = *(void **)(v0 + 512);
    char v32 = v2;
    char v30 = v1;
  }
  *(unsigned char *)(v0 + 176) = v9;
  *(unsigned char *)(v0 + 177) = v1;
  *(unsigned char *)(v0 + 178) = v2;
  *(void *)(v0 + 184) = v3;
  *(void *)(v0 + 552) = v3;
  *(void *)(v0 + 544) = v5;
  char v29 = *(unsigned char *)(v0 + 91);
  uint64_t v26 = *(void *)(v0 + 472);
  uint64_t v27 = *(void *)(v0 + 480);
  long long v25 = *(_OWORD *)(v0 + 456);
  uint64_t v28 = *(void *)(v0 + 448);
  uint64_t v13 = *(void *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 384);
  *(unsigned char *)(v0 + 192) = v4;
  *(void *)(v0 + 240) = v5;
  *(unsigned char *)(v0 + 248) = v6;
  *(unsigned char *)(v0 + 249) = v7;
  *(unsigned char *)(v0 + 250) = v8;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v12, v0 + 200, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  outlined retain of PaperRenderableOptions?(v13);
  static CRKeyPath.unique.getter();
  *(unsigned char *)(v0 + 256) = v9;
  *(unsigned char *)(v0 + 257) = v30;
  *(unsigned char *)(v0 + 258) = v32;
  *(void *)(v0 + 264) = v3;
  *(unsigned char *)(v0 + 272) = v4;
  *(_OWORD *)(v0 + 280) = v25;
  *(void *)(v0 + 296) = v26;
  *(void *)(v0 + 304) = v27;
  *(unsigned char *)(v0 + 312) = v29;
  *(void *)(v0 + 320) = v5;
  *(unsigned char *)(v0 + 328) = v6;
  *(unsigned char *)(v0 + 329) = v7;
  *(unsigned char *)(v0 + 330) = v8;
  uint64_t v14 = *(void *)(v28 + 8);
  dispatch_semaphore_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 16) + **(int **)(v14 + 16));
  id v15 = v3;
  id v16 = v5;
  long long v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v17;
  *long long v17 = v0;
  v17[1] = closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:);
  uint64_t v18 = *(void *)(v0 + 536);
  uint64_t v20 = *(void *)(v0 + 432);
  uint64_t v19 = *(void *)(v0 + 440);
  uint64_t v21 = *(void *)(v0 + 424);
  uint64_t v22 = *(void *)(v0 + 408);
  uint64_t v23 = *(void *)(v0 + 400);
  return v31(v23, v18, v22, v0 + 256, v21, v19, v20, v14);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void **)(*(void *)v0 + 552);
  uint64_t v2 = *(void **)(*(void *)v0 + 544);
  uint64_t v3 = *(void *)(*(void *)v0 + 536);
  int v4 = *(void *)(*(void *)v0 + 528);
  uint64_t v5 = *(void *)(*(void *)v0 + 520);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return MEMORY[0x270FA2498](closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OS_dispatch_semaphore.signal()();
  uint64_t v1 = *(void **)(v0 + 240);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id CanvasElementPDFAnnotation.init(bounds:forType:withProperties:)(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v13 = &v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *uint64_t v13 = 0;
  v13[1] = 0;
  uint64_t v14 = &v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)uint64_t v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  v14[32] = 1;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  id v15 = &v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *id v15 = 0;
  v15[1] = 0;
  id v16 = &v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  uint64_t v17 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  if (a2)
  {
    v18.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18.super.Class isa = 0;
  }
  v21.receiver = v6;
  v21.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  id v19 = objc_msgSendSuper2(&v21, sel_initWithBounds_forType_withProperties_, a1, v18.super.isa, a3, a4, a5, a6);

  return v19;
}

id CanvasElementPDFAnnotation.init()()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  void *v1 = 0;
  v1[1] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v2[32] = 1;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  uint64_t v3 = &v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *uint64_t v3 = 0;
  v3[1] = 0;
  int v4 = &v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  uint64_t v5 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  *(void *)&v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  uint64_t v6 = *MEMORY[0x263F14818];
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  return objc_msgSendSuper2(&v8, sel_initWithBounds_forType_withProperties_, v6, 0, 0.0, 0.0, 0.0, 0.0);
}

id CanvasElementPDFAnnotation.init(coder:)(void *a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *uint64_t v3 = 0;
  v3[1] = 0;
  int v4 = &v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)int v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  uint64_t v5 = &v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = &v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  uint64_t v7 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  *(void *)&v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  id v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

id CanvasElementPDFAnnotation.init(commonWithBounds:)(double a1, double a2, double a3, double a4)
{
  char v9 = &v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *char v9 = 0;
  v9[1] = 0;
  objc_super v10 = &v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)objc_super v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v10[32] = 1;
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  unint64_t v11 = &v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *unint64_t v11 = 0;
  v11[1] = 0;
  uint64_t v12 = &v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  uint64_t v13 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  *(void *)&v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  id result = objc_msgSendSuper2(&v15, sel_initCommonWithBounds_, a1, a2, a3, a4);
  if (!result) {
    __break(1u);
  }
  return result;
}

id CanvasElementPDFAnnotation.init(annotationDictionary:for:)(uint64_t a1, void *a2)
{
  uint64_t v5 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = &v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  id v8 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *id v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  uint64_t v10 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  if (!a1)
  {

    goto LABEL_6;
  }
  if (!a2)
  {
LABEL_6:
    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(*v5);

    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(*v8);
    outlined destroy of CRKeyPath?(v9);

    type metadata accessor for CanvasElementPDFAnnotation();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v15.receiver = v2;
  v15.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  id v12 = a2;
  id v13 = objc_msgSendSuper2(&v15, sel_initWithAnnotationDictionary_forPage_, a1, v12);

  if (v13) {
  return v13;
  }
}

id CanvasElementPDFAnnotation.init(cgpdfAnnotation:for:)(void *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = &v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  uint64_t v7 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  id v8 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *id v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  uint64_t v10 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  uint64_t v11 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor;
  *(void *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  if (!a1)
  {
    a1 = a2;
    goto LABEL_6;
  }
  if (!a2)
  {
LABEL_6:

    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(*v5);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(*v8);
    outlined destroy of CRKeyPath?(v9);

    type metadata accessor for CanvasElementPDFAnnotation();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v16.receiver = v2;
  v16.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  id v12 = a1;
  id v13 = a2;
  id v14 = objc_msgSendSuper2(&v16, sel_initWithCGPDFAnnotation_forPage_, v12, v13);

  if (v14) {
  return v14;
  }
}

void CanvasElementPDFAnnotation.copy(with:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = (objc_class *)type metadata accessor for CanvasElementPDFAnnotation();
  v30.receiver = v2;
  v30.super_class = v8;
  objc_msgSendSuper2(&v30, sel_copyWithZone_, a1);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any(a2, (uint64_t)v29);
  if (swift_dynamicCast())
  {
    uint64_t v9 = v28;
    uint64_t v10 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
    uint64_t v11 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render + 8];
    id v12 = (uint64_t *)&v28[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
    uint64_t v13 = *(void *)&v28[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
    *id v12 = v10;
    v12[1] = v11;
    outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v10);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v13);
    char v14 = v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds + 32];
    objc_super v15 = &v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
    long long v16 = *(_OWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds + 16];
    *(_OWORD *)objc_super v15 = *(_OWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
    *((_OWORD *)v15 + 1) = v16;
    v15[32] = v14;
    uint64_t v17 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation;
    NSDictionary v18 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation];
    if (v18)
    {
      objc_msgSend(v18, sel_copyWithZone_, a1);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for AKAnnotation();
      if (swift_dynamicCast()) {
        id v19 = v28;
      }
      else {
        id v19 = 0;
      }
      uint64_t v17 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation;
    }
    else
    {
      id v19 = 0;
    }
    uint64_t v20 = *(void **)&v9[v17];
    *(void *)&v9[v17] = v19;

    uint64_t v21 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    uint64_t v22 = *(void *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation + 8];
    uint64_t v23 = (uint64_t *)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    uint64_t v24 = *(void *)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    *uint64_t v23 = v21;
    v23[1] = v22;
    outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?(v21);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v24);
    uint64_t v25 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
    swift_beginAccess();
    outlined init with copy of CRKeyPath?(v25, (uint64_t)v7);
    uint64_t v26 = (uint64_t)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
    swift_beginAccess();
    outlined assign with take of CRKeyPath?((uint64_t)v7, v26);
    swift_endAccess();
    v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation];
  }
}

uint64_t type metadata accessor for CanvasElementPDFAnnotation()
{
  uint64_t result = type metadata singleton initialization cache for CanvasElementPDFAnnotation;
  if (!type metadata singleton initialization cache for CanvasElementPDFAnnotation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t type metadata accessor for AKAnnotation()
{
  unint64_t result = lazy cache variable for type metadata for AKAnnotation;
  if (!lazy cache variable for type metadata for AKAnnotation)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AKAnnotation);
  }
  return result;
}

id CanvasElementPDFAnnotation.draw(with:in:)(uint64_t a1, CGContext *a2)
{
  int v4 = *(void (**)(CGContext *))&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  if (v4)
  {
    swift_retain();
    CGContextSaveGState(a2);
    id v5 = objc_msgSend(v2, sel_page);
    if (v5)
    {
      uint64_t v6 = v5;
      objc_msgSend(v5, sel_boundsForBox_, 0);
      CGFloat v8 = v7;
      CGFloat v10 = v9;
      CGFloat v12 = v11;
      CGFloat v14 = v13;

      v22.origin.double x = v8;
      v22.origin.CGFloat y = v10;
      v22.size.CGFloat width = v12;
      v22.size.CGFloat height = v14;
      double MinY = CGRectGetMinY(v22);
      v23.origin.double x = v8;
      v23.origin.CGFloat y = v10;
      v23.size.CGFloat width = v12;
      v23.size.CGFloat height = v14;
      t1.CGFloat a = 1.0;
      t1.CGFloat b = 0.0;
      t1.CGFloat c = 0.0;
      t1.CGFloat d = 1.0;
      t1.tdouble x = 0.0;
      t1.tCGFloat y = 0.0;
      t2.CGFloat b = 0.0;
      t2.CGFloat c = 0.0;
      t2.CGFloat a = 1.0;
      *(_OWORD *)&t2.CGFloat d = xmmword_20C8340F0;
      t2.tCGFloat y = MinY + CGRectGetMaxY(v23);
      CGAffineTransformConcat(&v18, &t1, &t2);
      CGAffineTransform t1 = v18;
      CGContextConcatCTM(a2, &t1);
    }
    v4(a2);
    CGContextRestoreGState(a2);
    return (id)outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v4);
  }
  else
  {
    v21.receiver = v2;
    v21.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
    return objc_msgSendSuper2(&v21, sel_drawWithBox_inContext_, a1, a2);
  }
}

Swift::Void __swiftcall CanvasElementPDFAnnotation._addAKAnnotation(to:)(CFMutableDictionaryRef_optional to)
{
  value[1] = *(CGPDFDictionaryRef *)MEMORY[0x263EF8340];
  if (v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation])
  {
    if (v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] != 1
      || (uint64_t v3 = (CGPDFDictionary *)objc_msgSend(v1, sel_sourceDictionary)) != 0
      && (value[0] = 0, *(_OWORD *)keCGFloat y = xmmword_20C83EC00, CGPDFDictionaryGetDictionary(v3, key, value), value[0])
      && (*(void *)keCGFloat y = 0,
          CGPDFDictionaryGetString(value[0], "AAPL:AKAnnotationObject", (CGPDFStringRef *)key),
          *(void *)key))
    {
      v6.receiver = v1;
      v6.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
      objc_msgSendSuper2(&v6, sel__addAKAnnotationToDictionary_, to.value);
    }
  }
  if (to.value)
  {
    int v4 = *(void (**)(__CFDictionary *))&v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    if (v4)
    {
      id v5 = to.value;
      outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)>>.0>, _FrameLayout>?((uint64_t)v4);
      v4(v5);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?((uint64_t)v4);
    }
  }
}

id CanvasElementPDFAnnotation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for CanvasElementPDFAnnotation()
{
  return type metadata accessor for CanvasElementPDFAnnotation();
}

void type metadata completion function for CanvasElementPDFAnnotation()
{
  type metadata accessor for CRKeyPath?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for CanvasElementPDFAnnotation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CanvasElementPDFAnnotation);
}

void type metadata accessor for CRKeyPath?()
{
  if (!lazy cache variable for type metadata for CRKeyPath?)
  {
    type metadata accessor for CRKeyPath();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRKeyPath?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CanvasElementPDFAnnotation.AKWritingBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C536D3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasElementPDFAnnotation.AKWritingBehavior()
{
  return &type metadata for CanvasElementPDFAnnotation.AKWritingBehavior;
}

unint64_t lazy protocol witness table accessor for type CanvasElementPDFAnnotation.AKWritingBehavior and conformance CanvasElementPDFAnnotation.AKWritingBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasElementPDFAnnotation.AKWritingBehavior and conformance CanvasElementPDFAnnotation.AKWritingBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementPDFAnnotation.AKWritingBehavior and conformance CanvasElementPDFAnnotation.AKWritingBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementPDFAnnotation.AKWritingBehavior and conformance CanvasElementPDFAnnotation.AKWritingBehavior);
  }
  return result;
}

uint64_t outlined destroy of CRKeyPath?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id specialized CanvasElementPDFAnnotation.init(bounds:forType:containerBounds:mediaBox:render:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, double Height)
{
  id v19 = (uint64_t *)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *id v19 = 0;
  v19[1] = 0;
  uint64_t v20 = (uint64_t)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(unsigned char *)(v20 + 32) = 1;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  objc_super v21 = &v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *objc_super v21 = 0;
  v21[1] = 0;
  CGRect v22 = &v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  uint64_t v23 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  *(void *)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a3, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  if (v37 == 1)
  {
    uint64_t v24 = v9;
  }
  else
  {
    double v25 = v35;
    double v26 = v36;
    uint64_t v27 = v9;
    v38.origin.double x = a6;
    v38.origin.CGFloat y = a7;
    v38.size.CGFloat width = a8;
    v38.size.CGFloat height = Height;
    double MinX = CGRectGetMinX(v38);
    v39.origin.double x = a6;
    v39.origin.CGFloat y = a7;
    v39.size.CGFloat width = a8;
    v39.size.CGFloat height = Height;
    CGFloat v29 = v26 + v25 + v25 - CGRectGetMaxY(v39);
    v40.origin.double x = a6;
    v40.origin.CGFloat y = a7;
    v40.size.CGFloat width = a8;
    v40.size.CGFloat height = Height;
    double Width = CGRectGetWidth(v40);
    v41.origin.double x = a6;
    v41.origin.CGFloat y = a7;
    v41.size.CGFloat width = a8;
    v41.size.CGFloat height = Height;
    CGFloat Height = CGRectGetHeight(v41);
    a8 = Width;
    a6 = MinX;
    a7 = v29;
  }
  uint64_t v31 = *v19;
  *id v19 = a4;
  v19[1] = a5;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ())?(v31);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a2, v20, (uint64_t *)&demangling cache variable for type metadata for CGRect?);

  v33.receiver = v9;
  v33.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  return objc_msgSendSuper2(&v33, sel_initWithBounds_forType_withProperties_, a1, 0, a6, a7, a8, Height);
}

uint64_t sub_20C537074()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Capsule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  double v9 = *(void **)(v0 + 56);
  if (v9 != (void *)1)
  {
  }
  uint64_t v10 = (v3 + 161) & ~v3;
  uint64_t v11 = (v10 + v4 + v7) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v10, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v11, v5);
  return MEMORY[0x270FA0238](v0, v11 + v8, v3 | v7 | 7);
}

void partial apply for closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(void *a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v7 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 161) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v8 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v9 = *(void *)(type metadata accessor for Capsule() - 8);
  closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(a1, (uint64_t)(v1 + 6), (uint64_t)(v1 + 16), (uint64_t)v1 + v7, (uint64_t)v1 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v3, v4, v5, v6);
}

uint64_t outlined retain of PaperRenderableOptions?(uint64_t a1)
{
  return a1;
}

void outlined copy of PaperRenderableOptions?(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a2 != (void *)1)
  {
    id v10 = a9;
    id v11 = a2;
  }
}

uint64_t sub_20C537378()
{
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v14 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  uint64_t v8 = *(void **)(v0 + 72);
  if (v8 != (void *)1)
  {
  }
  uint64_t v9 = (v2 + 177) & ~v2;
  unint64_t v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (v10 + v6 + 8) & ~v6;
  unint64_t v12 = (v7 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v9, v14);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v11, v4);
  return MEMORY[0x270FA0238](v0, v12 + 8, v2 | v6 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(uint64_t a1)
{
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v1[5] - 8) + 80) + 177) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[5] - 8) + 80);
  unint64_t v4 = (*(void *)(*(void *)(v1[5] - 8) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(type metadata accessor for Capsule() - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = *(void *)((char *)v1 + v4);
  uint64_t v12 = (uint64_t)v1 + v6;
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *unint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(a1, v7, v8, (uint64_t)(v1 + 8), (uint64_t)(v1 + 18), (uint64_t)v1 + v3, v9, v12);
}

void RoundedRect.init(radius:)(double *a1@<X8>, double a2@<D0>)
{
  if (a2 > 0.5) {
    a2 = 0.5;
  }
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  *a1 = a2;
}

PaperKit::RegularPolygon __swiftcall RegularPolygon.init(sides:)(PaperKit::RegularPolygon sides)
{
  unint64_t v2 = 3;
  if (sides.sides > 3) {
    unint64_t v2 = sides.sides;
  }
  if (v2 >= 0xC) {
    unint64_t v2 = 12;
  }
  unint64_t *v1 = v2;
  return sides;
}

uint64_t Star.init(points:)@<X0>(uint64_t result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2 = result;
  if (one-time initialization token for defaultInnerRadius != -1) {
    unint64_t result = swift_once();
  }
  unint64_t v4 = 3;
  if (v2 > 3) {
    unint64_t v4 = v2;
  }
  uint64_t v5 = static Star.defaultInnerRadius;
  if (v4 >= 0xA) {
    unint64_t v4 = 10;
  }
  *a2 = v4;
  a2[1] = v5;
  return result;
}

void CalloutBubble.init(tailPosition:halfTailAngle:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

PaperKit::ArrowShape __swiftcall ArrowShape.init(cornerControl:)(PaperKit::ArrowShape cornerControl)
{
  CGFloat *v1 = cornerControl.cornerControl.x;
  v1[1] = cornerControl.cornerControl.y;
  return cornerControl;
}

void __swiftcall Line.init(start:control:end:)(PaperKit::Line *__return_ptr retstr, CGPoint start, CGPoint control, CGPoint end)
{
  retstr->start.double x = start.x;
  retstr->start.CGFloat y = start.y;
  retstr->control.double x = control.x;
  retstr->control.CGFloat y = control.y;
  retstr->end.double x = end.x;
  retstr->end.CGFloat y = end.y;
}

uint64_t ControlPointType.isControlHandle.getter()
{
  return (*v0 < 0xAuLL) & (0x3FAu >> *v0);
}

unint64_t ControlPointType.accessibilityIdentifier.getter()
{
  unint64_t result = 0xD000000000000015;
  switch(*v0)
  {
    case 1:
    case 7:
    case 8:
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 5:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

void *TaggedValue_9<>.controlPoints.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  unint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  TaggedValue_9.taggedEnum.getter();
  int v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  if (v4 == *MEMORY[0x263F32DD0]) {
    return &outlined read-only object #0 of TaggedValue_9<>.controlPoints.getter;
  }
  if (v4 == *MEMORY[0x263F32DE0]) {
    return &outlined read-only object #1 of TaggedValue_9<>.controlPoints.getter;
  }
  if (v4 == *MEMORY[0x263F32DE8]) {
    return &outlined read-only object #2 of TaggedValue_9<>.controlPoints.getter;
  }
  if (v4 == *MEMORY[0x263F32DF0]) {
    return &outlined read-only object #3 of TaggedValue_9<>.controlPoints.getter;
  }
  if (v4 == *MEMORY[0x263F32DF8]) {
    return &outlined read-only object #4 of TaggedValue_9<>.controlPoints.getter;
  }
  if (v4 == *MEMORY[0x263F32E00]) {
    return &outlined read-only object #5 of TaggedValue_9<>.controlPoints.getter;
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (void *)MEMORY[0x263F8EE78];
}

uint64_t TaggedValue_9<>.subscript.setter(unsigned __int8 *a1, CGFloat *a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6)
{
  uint64_t v62 = a3;
  CGFloat v12 = *a2;
  CGFloat v11 = a2[1];
  CGFloat v14 = a2[2];
  CGFloat v13 = a2[3];
  CGFloat v16 = a2[4];
  CGFloat v15 = a2[5];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v61 - v22;
  int v24 = *a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  TaggedValue_9.taggedEnum.getter();
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v23, v17);
  if (v25 == *MEMORY[0x263F32DD0])
  {
    char v26 = v24;
    uint64_t v27 = v25;
    (*(void (**)(char *, uint64_t))(v18 + 96))(v23, v17);
    long long v28 = *((_OWORD *)v23 + 1);
    *(_OWORD *)&v64.CGFloat a = *(_OWORD *)v23;
    *(_OWORD *)&v64.CGFloat c = v28;
    *(_OWORD *)&v64.tdouble x = *((_OWORD *)v23 + 2);
    LOBYTE(v63.a) = v26;
    Line.subscript.setter((unsigned __int8 *)&v63, a2, v62, a4 & 1, a5, a6);
    long long v29 = *(_OWORD *)&v64.c;
    *(_OWORD *)uint64_t v20 = *(_OWORD *)&v64.a;
    *((_OWORD *)v20 + 1) = v29;
    *((_OWORD *)v20 + 2) = *(_OWORD *)&v64.tx;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v20, v27, v17);
    return TaggedValue_9.taggedEnum.setter();
  }
  uint64_t v30 = v17;
  if (v25 == *MEMORY[0x263F32DE0])
  {
    uint64_t v31 = v25;
    char v32 = v24;
    uint64_t v33 = v30;
    (*(void (**)(char *))(v18 + 96))(v23);
    CGFloat v34 = *((double *)v23 + 2);
    *(_OWORD *)&v64.CGFloat a = *(_OWORD *)v23;
    v64.CGFloat c = v34;
    LOBYTE(v63.a) = v32;
    specialized CalloutBubble.subscript.setter((unsigned __int8 *)&v63, a2, a5, a6);
    CGFloat c = v64.c;
    *(_OWORD *)uint64_t v20 = *(_OWORD *)&v64.a;
    *((CGFloat *)v20 + 2) = c;
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v20, v31, v33);
    return TaggedValue_9.taggedEnum.setter();
  }
  if (v25 == *MEMORY[0x263F32DE8])
  {
    uint64_t v37 = v25;
    int v38 = v24;
    uint64_t v39 = v30;
    (*(void (**)(char *))(v18 + 96))(v23);
    if (v38 == 5)
    {
      v64.CGFloat a = v12;
      v64.CGFloat b = v11;
      v64.CGFloat c = v14;
      v64.CGFloat d = v13;
      v64.tdouble x = v16;
      v64.tCGFloat y = v15;
      CGAffineTransformInvert(&v63, &v64);
      CGAffineTransform v64 = v63;
      v65.double x = a5;
      v65.CGFloat y = a6;
      *(void *)&double v40 = *(_OWORD *)&CGPointApplyAffineTransform(v65, &v64);
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v64, 0.0);
      CGPoint v41 = *(CGPoint *)&v64.a;
      CGFloat v42 = v64.c;
      CGFloat d = v64.d;
      v68.origin = *(CGPoint *)&v64.a;
      v68.size.CGFloat width = v64.c;
      v68.size.CGFloat height = v64.d;
      double Width = CGRectGetWidth(v68);
      v69.origin = v41;
      v69.size.CGFloat width = v42;
      v69.size.CGFloat height = d;
      double v45 = CGRectGetWidth(v69);
      v70.origin = v41;
      v70.size.CGFloat width = v42;
      v70.size.CGFloat height = d;
      double Height = CGRectGetHeight(v70);
      if (Height >= v45) {
        double Height = v45;
      }
      double v47 = v40 * Width / Height;
      if (v47 < 0.0) {
        double v47 = 0.0;
      }
      if (v47 > 0.5) {
        double v47 = 0.5;
      }
    }
    else
    {
      double v47 = *(double *)v23;
    }
    *(double *)uint64_t v20 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v20, v37, v39);
    return TaggedValue_9.taggedEnum.setter();
  }
  if (v25 == *MEMORY[0x263F32DF0])
  {
    uint64_t v48 = v25;
    int v49 = v24;
    uint64_t v50 = v30;
    (*(void (**)(char *))(v18 + 96))(v23);
    double v51 = *(double *)v23;
    v64.CGFloat a = v12;
    v64.CGFloat b = v11;
    v64.CGFloat c = v14;
    v64.CGFloat d = v13;
    v64.tdouble x = v16;
    v64.tCGFloat y = v15;
    CGAffineTransformInvert(&v63, &v64);
    CGAffineTransform v64 = v63;
    v66.double x = a5;
    v66.CGFloat y = a6;
    CGPoint v52 = CGPointApplyAffineTransform(v66, &v64);
    if (v49 == 6)
    {
      specialized static RegularPolygon.numberOfSidesFromPosition(_:minSides:maxSides:)(3, 12, v52.x, v52.y);
      double v51 = v53;
    }
    *(double *)uint64_t v20 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v20, v48, v50);
    return TaggedValue_9.taggedEnum.setter();
  }
  if (v25 == *MEMORY[0x263F32DF8])
  {
    uint64_t v31 = v25;
    char v54 = v24;
    uint64_t v33 = v30;
    (*(void (**)(char *))(v18 + 96))(v23);
    CGFloat v55 = *((double *)v23 + 1);
    v64.CGFloat a = *(CGFloat *)v23;
    v64.CGFloat b = v55;
    LOBYTE(v63.a) = v54;
    specialized Star.subscript.setter((unsigned __int8 *)&v63, a2, a5, a6);
    CGFloat b = v64.b;
    *(CGFloat *)uint64_t v20 = v64.a;
    *((CGFloat *)v20 + 1) = b;
    goto LABEL_5;
  }
  if (v25 == *MEMORY[0x263F32E00])
  {
    uint64_t v31 = v25;
    int v57 = v24;
    uint64_t v33 = v30;
    (*(void (**)(char *))(v18 + 96))(v23);
    if (v57 == 9)
    {
      v64.CGFloat a = v12;
      v64.CGFloat b = v11;
      v64.CGFloat c = v14;
      v64.CGFloat d = v13;
      v64.tdouble x = v16;
      v64.tCGFloat y = v15;
      CGAffineTransformInvert(&v63, &v64);
      CGAffineTransform v64 = v63;
      v67.double x = a5;
      v67.CGFloat y = a6;
      CGPoint v58 = CGPointApplyAffineTransform(v67, &v64);
      double v59 = fmin(v58.x, 1.0);
      if (v59 < 0.0) {
        double v59 = 0.0;
      }
      double v60 = fmin(v58.y, 0.5);
      if (v60 < 0.0) {
        double v60 = 0.0;
      }
    }
    else
    {
      double v59 = *(double *)v23;
      double v60 = *((double *)v23 + 1);
    }
    *(double *)uint64_t v20 = v59;
    *((double *)v20 + 1) = v60;
    goto LABEL_5;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, v17);
}

uint64_t TaggedValue_9<>.localizedName.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  unint64_t v3 = (id *)((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  TaggedValue_9.taggedEnum.getter();
  int v4 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v3, v0);
  if (v4 == *MEMORY[0x263F32DC0])
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    Class isa = paperKitBundle.super.isa;
    unint64_t v6 = 0xD00000000000002ALL;
    unint64_t v18 = 0x800000020C859320;
    unint64_t v7 = 0x6C676E6174636552;
    unint64_t v8 = 0xE900000000000065;
LABEL_38:
    uint64_t v9 = 0x617A696C61636F4CLL;
    unint64_t v10 = 0xEB00000000656C62;
    uint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
    return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v7, *(Swift::String_optional *)&v9, (NSBundle)isa, *(Swift::String *)&v11, *(Swift::String *)&v6)._countAndFlagsBits;
  }
  if (v4 == *MEMORY[0x263F32DC8])
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    Class isa = paperKitBundle.super.isa;
    unint64_t v6 = 0xD000000000000029;
    unint64_t v18 = 0x800000020C8592F0;
    unint64_t v7 = 0x657370696C6C45;
    unint64_t v8 = 0xE700000000000000;
    goto LABEL_38;
  }
  if (v4 == *MEMORY[0x263F32DD0])
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    Class isa = paperKitBundle.super.isa;
    unint64_t v18 = 0x800000020C8592C0;
    unint64_t v7 = 1701734732;
LABEL_13:
    unint64_t v8 = 0xE400000000000000;
    uint64_t v9 = 0x617A696C61636F4CLL;
    unint64_t v10 = 0xEB00000000656C62;
    uint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
    unint64_t v6 = 0xD000000000000025;
    return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v7, *(Swift::String_optional *)&v9, (NSBundle)isa, *(Swift::String *)&v11, *(Swift::String *)&v6)._countAndFlagsBits;
  }
  if (v4 == *MEMORY[0x263F32DD8])
  {
    (*(void (**)(id *, uint64_t))(v1 + 96))(v3, v0);

    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    Class isa = paperKitBundle.super.isa;
    unint64_t v6 = 0xD00000000000002CLL;
    unint64_t v18 = 0x800000020C859290;
    unint64_t v7 = 0x50207265697A6542;
    unint64_t v8 = 0xEB00000000687461;
    goto LABEL_38;
  }
  if (v4 == *MEMORY[0x263F32DE0])
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    Class isa = paperKitBundle.super.isa;
    unint64_t v6 = 0xD00000000000002ELL;
    unint64_t v18 = 0x800000020C859260;
    unint64_t v7 = 0x4220686365657053;
    unint64_t v8 = 0xED0000656C626275;
    goto LABEL_38;
  }
  if (v4 == *MEMORY[0x263F32DE8])
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    Class isa = paperKitBundle.super.isa;
    unint64_t v7 = 0xD000000000000011;
    unint64_t v6 = 0xD000000000000032;
    unint64_t v18 = 0x800000020C859220;
    unint64_t v8 = 0x800000020C853F30;
    goto LABEL_38;
  }
  if (v4 == *MEMORY[0x263F32DF0])
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    Class isa = paperKitBundle.super.isa;
    unint64_t v6 = 0xD000000000000030;
    unint64_t v18 = 0x800000020C8591E0;
    unint64_t v7 = 0x2072616C75676552;
    unint64_t v8 = 0xEF6E6F67796C6F50;
    goto LABEL_38;
  }
  if (v4 == *MEMORY[0x263F32DF8])
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    Class isa = paperKitBundle.super.isa;
    unint64_t v18 = 0x800000020C8591B0;
    unint64_t v7 = 1918989395;
    goto LABEL_13;
  }
  if (v4 == *MEMORY[0x263F32E00])
  {
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    Class isa = paperKitBundle.super.isa;
    unint64_t v6 = 0xD000000000000027;
    unint64_t v18 = 0x800000020C859180;
    unint64_t v7 = 0x776F727241;
    unint64_t v8 = 0xE500000000000000;
    goto LABEL_38;
  }
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v20._uint64_t countAndFlagsBits = 0xD000000000000029;
  v20._object = (void *)0x800000020C859150;
  v15._uint64_t countAndFlagsBits = 0x6E776F6E6B6E55;
  v15._object = (void *)0xE700000000000000;
  v16.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v16.value._object = (void *)0xEB00000000656C62;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, paperKitBundle, v17, v20)._countAndFlagsBits;
  (*(void (**)(id *, uint64_t))(v1 + 8))(v3, v0);
  return countAndFlagsBits;
}

PaperKit::ControlPointType_optional __swiftcall ControlPointType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 10;
  if ((unint64_t)rawValue < 0xA) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (PaperKit::ControlPointType_optional)rawValue;
}

uint64_t ControlPointType.rawValue.getter()
{
  return *v0;
}

PaperKit::ControlPointType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ControlPointType(Swift::Int *a1)
{
  return ControlPointType.init(rawValue:)(*a1);
}

uint64_t static Rectangle.CodingKeys.allCases.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t Rectangle.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t Rectangle.CodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Rectangle.CodingKeys()
{
  return 0;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Rectangle.CodingKeys(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Rectangle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Rectangle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t static Rectangle.== infix(_:_:)()
{
  return 1;
}

uint64_t Rectangle.encode(to:)(void *a1)
{
  return Rectangle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Rectangle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
}

uint64_t Rectangle.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Rectangle(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Rectangle(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Rectangle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Rectangle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Rectangle()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Rectangle()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Rectangle(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t RoundedRect.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void *static RoundedRect.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static RoundedRect.CodingKeys.allCases.getter;
}

uint64_t RoundedRect.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RoundedRect.CodingKeys.rawValue.getter()
{
  return 0;
}

uint64_t RoundedRect.CodingKeys.stringValue.getter()
{
  return 0x737569646172;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RoundedRect.CodingKeys()
{
  return 0x737569646172;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RoundedRect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance RoundedRect.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance RoundedRect.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance RoundedRect.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RoundedRect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RoundedRect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RoundedRect.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

BOOL static RoundedRect.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t RoundedRect.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RoundedRect.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int RoundedRect.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t RoundedRect.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RoundedRect.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RoundedRect@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return RoundedRect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RoundedRect(void *a1)
{
  return RoundedRect.encode(to:)(a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance RoundedRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance RoundedRect(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance RoundedRect()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance RoundedRect()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance RoundedRect(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t Ellipse.CodingKeys.init(stringValue:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void Ellipse.CodingKeys.init(intValue:)(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t static Ellipse.CodingKeys.allCases.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t Ellipse.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t Ellipse.CodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Ellipse.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Ellipse.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Ellipse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Ellipse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t static Ellipse.== infix(_:_:)()
{
  return 1;
}

uint64_t Ellipse.encode(to:)(void *a1)
{
  return Rectangle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Ellipse.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
}

uint64_t Rectangle.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Ellipse.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t Ellipse.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Ellipse()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Ellipse()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Ellipse(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Rectangle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Ellipse.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Rectangle(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Ellipse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse and conformance Ellipse, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse and conformance Ellipse);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a5();
  uint64_t v11 = a6();
  return MEMORY[0x270F17D90](a1, a2, a3, v10, v11);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Ellipse()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Ellipse()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Ellipse(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  return MEMORY[0x270F17688](a1, v2);
}

PaperKit::Line::CodingKeys_optional __swiftcall Line.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (PaperKit::Line::CodingKeys_optional)rawValue;
}

PaperKit::Line::CodingKeys_optional __swiftcall Line.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x7472617473 && stringValue._object == (void *)0xE500000000000000;
  if (v3
    || (object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x6C6F72746E6F63 && object == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 6581861 && object == (void *)0xE300000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 2;
    }
    else {
      char v7 = 3;
    }
  }
  *char v2 = v7;
  return result;
}

PaperKit::Line::CodingKeys_optional __swiftcall Line.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char v2 = 3;
  if ((unint64_t)intValue < 3) {
    char v2 = intValue;
  }
  char *v1 = v2;
  return (PaperKit::Line::CodingKeys_optional)intValue;
}

void *static Line.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static Line.CodingKeys.allCases.getter;
}

uint64_t Line.CodingKeys.intValue.getter()
{
  return *v0;
}

uint64_t Line.CodingKeys.stringValue.getter()
{
  uint64_t v1 = 0x6C6F72746E6F63;
  if (*v0 != 1) {
    uint64_t v1 = 6581861;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7472617473;
  }
}

PaperKit::Line::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Line.CodingKeys(Swift::Int *a1)
{
  return Line.CodingKeys.init(rawValue:)(*a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Line.CodingKeys()
{
  uint64_t v1 = 0x6C6F72746E6F63;
  if (*v0 != 1) {
    uint64_t v1 = 6581861;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7472617473;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance Line.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Line.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Line.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Line.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Line.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Line.subscript.setter(unsigned __int8 *a1, CGFloat *a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6)
{
  CGFloat v12 = *a2;
  CGFloat v11 = a2[1];
  CGFloat v14 = a2[2];
  CGFloat v13 = a2[3];
  CGFloat v16 = a2[4];
  CGFloat v15 = a2[5];
  int v17 = *a1;
  v84.CGFloat a = *a2;
  v84.CGFloat b = v11;
  v84.CGFloat c = v14;
  v84.CGFloat d = v13;
  v84.tdouble x = v16;
  v84.tdouble y = v15;
  CGAffineTransformInvert(&t1, &v84);
  CGAffineTransform v84 = t1;
  v85.double x = a5;
  v85.double y = a6;
  CGPoint v18 = CGPointApplyAffineTransform(v85, &v84);
  double x = v18.x;
  double y = v18.y;
  if (v17 == 2)
  {
LABEL_4:
    if (v17)
    {
      double v22 = v6->x;
      double v21 = v6->y;
    }
    else
    {
      double v21 = v18.y;
      double v22 = v18.x;
      double x = v6[2].x;
      double y = v6[2].y;
    }
    v77.double x = x;
    v77.double y = y;
    v80.double x = v22;
    v80.double y = v21;
    if ((a4 & 1) == 0
      && fabs(v6[1].x + (v6->x + v6[2].x) * -0.5) < 0.001
      && fabs(v6[1].y + (v6->y + v6[2].y) * -0.5) < 0.001)
    {
      v88.double x = x - v22;
      v88.double y = y - v21;
      v84.CGFloat a = v12;
      v84.CGFloat b = v11;
      v84.CGFloat c = v14;
      v84.CGFloat d = v13;
      v84.tdouble x = v16;
      v84.tdouble y = v15;
      double v65 = y - v21;
      double v66 = x - v22;
      CGPoint v27 = CGPointApplyAffineTransform(v88, &v84);
      CGFloat v67 = v12;
      CGFloat v68 = v11;
      v84.CGFloat a = v12;
      v84.CGFloat b = v11;
      v84.CGFloat c = v14;
      v84.CGFloat d = v13;
      CGFloat v71 = v16;
      v84.tdouble x = v16;
      v84.tdouble y = v15;
      CGFloat v74 = v15;
      double sinval = 0.0;
      v89.double x = 0.0;
      v89.double y = 0.0;
      CGPoint v29 = CGPointApplyAffineTransform(v89, &v84);
      double v30 = v27.x - v29.x;
      double v31 = v27.y - v29.y;
      double v32 = atan2(v27.y - v29.y, v27.x - v29.x);
      if (one-time initialization token for resizeLineSnapToAngleStep != -1) {
        swift_once();
      }
      CGFloat v69 = v14;
      double v70 = v13;
      double v33 = *(double *)&static UIConstants.resizeLineSnapToAngleStep
          * rint(v32 / *(double *)&static UIConstants.resizeLineSnapToAngleStep);
      double cosval = 1.0;
      if (v33 != 0.0)
      {
        __double2 v35 = __sincos_stret(v33);
        double cosval = v35.__cosval;
        double sinval = v35.__sinval;
      }
      double v36 = sqrt(v30 * v30 + v31 * v31);
      double v37 = v36 * cosval;
      double v38 = v36 * sinval;
      double v39 = sqrt((v30 - v36 * cosval) * (v30 - v36 * cosval) + (v31 - v38) * (v31 - v38));
      CGFloat v15 = v74;
      if (one-time initialization token for resizeLineSnapToAngleThreshold != -1)
      {
        double v61 = v36 * cosval;
        double v62 = v36 * sinval;
        swift_once();
        double v38 = v62;
        double v37 = v61;
      }
      CGFloat v16 = v71;
      CGFloat v12 = v67;
      CGFloat v11 = v68;
      if (v39 >= *(double *)&static UIConstants.resizeLineSnapToAngleThreshold / *(double *)&a3)
      {
        CGFloat v14 = v69;
      }
      else
      {
        v84.CGFloat a = v67;
        v84.CGFloat b = v68;
        v84.CGFloat c = v69;
        v84.CGFloat d = v13;
        v84.tdouble x = v71;
        v84.tdouble y = v74;
        CGFloat v63 = v38;
        CGFloat v64 = v37;
        CGAffineTransformInvert(&t1, &v84);
        CGFloat a = t1.a;
        CGFloat b = t1.b;
        CGFloat c = t1.c;
        CGFloat d = t1.d;
        tdouble x = t1.tx;
        tdouble y = t1.ty;
        CGAffineTransform v84 = t1;
        v90.double y = v63;
        v90.double x = v64;
        CGPoint v46 = CGPointApplyAffineTransform(v90, &v84);
        v84.CGFloat a = a;
        v84.CGFloat b = b;
        v84.CGFloat c = c;
        v84.CGFloat d = d;
        v84.tdouble x = tx;
        v84.tdouble y = ty;
        v91.double x = 0.0;
        v91.double y = 0.0;
        CGPoint v47 = CGPointApplyAffineTransform(v91, &v84);
        double v48 = sqrt((v46.x - v47.x) * (v46.x - v47.x) + (v46.y - v47.y) * (v46.y - v47.y));
        double v49 = sqrt(v66 * v66 + v65 * v65);
        double v50 = v49 * ((v46.x - v47.x) / v48);
        double v51 = v49 * ((v46.y - v47.y) / v48);
        if (v17)
        {
          v77.double x = v80.x + v50;
          v77.double y = v80.y + v51;
        }
        else
        {
          v80.double x = x - v50;
          v80.double y = y - v51;
        }
        CGFloat v15 = v74;
        CGFloat v13 = v70;
        CGFloat v16 = v71;
        CGFloat v11 = v68;
        CGFloat v14 = v69;
        CGFloat v12 = v67;
      }
    }
    CGPoint v92 = *v6;
    v84.CGFloat a = v12;
    v84.CGFloat b = v11;
    v84.CGFloat c = v14;
    v84.CGFloat d = v13;
    v84.tdouble x = v16;
    v84.tdouble y = v15;
    CGPoint v52 = CGPointApplyAffineTransform(v92, &v84);
    CGPoint v93 = v6[2];
    v84.CGFloat a = v12;
    v84.CGFloat b = v11;
    v84.CGFloat c = v14;
    v84.CGFloat d = v13;
    v84.tdouble x = v16;
    v84.tdouble y = v15;
    CGPoint v53 = CGPointApplyAffineTransform(v93, &v84);
    v84.CGFloat a = v12;
    v84.CGFloat b = v11;
    v84.CGFloat c = v14;
    v84.CGFloat d = v13;
    v84.tdouble x = v16;
    v84.tdouble y = v15;
    CGPoint v54 = CGPointApplyAffineTransform(v80, &v84);
    v84.CGFloat a = v12;
    v84.CGFloat b = v11;
    v84.CGFloat c = v14;
    v84.CGFloat d = v13;
    v84.tdouble x = v16;
    v84.tdouble y = v15;
    CGPoint v55 = CGPointApplyAffineTransform(v77, &v84);
    specialized CGAffineTransform.init(transformMovingPoints:to:)(&v84, v52.x, v52.y, v53.x, v53.y, v54.x, v54.y, v55.x, v55.y);
    t1.CGFloat a = v12;
    t1.CGFloat b = v11;
    t1.CGFloat c = v14;
    t1.CGFloat d = v13;
    t1.tdouble x = v16;
    t1.tdouble y = v15;
    CGAffineTransform t2 = v84;
    CGAffineTransformConcat(&v81, &t1, &t2);
    long long v75 = *(_OWORD *)&v81.a;
    long long v72 = *(_OWORD *)&v81.c;
    CGFloat v56 = v81.tx;
    CGFloat v57 = v81.ty;
    t1.CGFloat a = v12;
    t1.CGFloat b = v11;
    t1.CGFloat c = v14;
    t1.CGFloat d = v13;
    t1.tdouble x = v16;
    t1.tdouble y = v15;
    CGAffineTransformInvert(&t2, &t1);
    *(_OWORD *)&t1.CGFloat a = v75;
    *(_OWORD *)&t1.CGFloat c = v72;
    t1.tdouble x = v56;
    t1.tdouble y = v57;
    CGAffineTransformConcat(&v81, &t1, &t2);
    long long v58 = *(_OWORD *)&v81.a;
    long long v59 = *(_OWORD *)&v81.c;
    long long v60 = *(_OWORD *)&v81.tx;
    *uint64_t v6 = v80;
    CGPoint v94 = v6[1];
    *(_OWORD *)&t1.CGFloat a = v58;
    *(_OWORD *)&t1.CGFloat c = v59;
    *(_OWORD *)&t1.tdouble x = v60;
    v6[1] = CGPointApplyAffineTransform(v94, &t1);
    _OWORD v6[2] = v77;
    return;
  }
  if (v17 != 1)
  {
    if (v17) {
      return;
    }
    goto LABEL_4;
  }
  if (a4) {
    goto LABEL_24;
  }
  double v78 = v6->y;
  double v79 = v6->x;
  double v76 = v6[2].x;
  double v73 = v6[2].y;
  CGPoint v23 = CGPoint.closestPointOnLineSegment(from:to:)(*v6, v6[2]);
  v86.double x = v18.x - v23.x;
  v84.CGFloat a = v12;
  v84.CGFloat b = v11;
  v86.double y = v18.y - v23.y;
  v84.CGFloat c = v14;
  v84.CGFloat d = v13;
  v84.tdouble x = v16;
  v84.tdouble y = v15;
  CGPoint v24 = CGPointApplyAffineTransform(v86, &v84);
  v84.CGFloat a = v12;
  v84.CGFloat b = v11;
  v84.CGFloat c = v14;
  v84.CGFloat d = v13;
  v84.tdouble x = v16;
  v84.tdouble y = v15;
  v87.double x = 0.0;
  v87.double y = 0.0;
  CGPoint v25 = CGPointApplyAffineTransform(v87, &v84);
  double v26 = sqrt((v24.x - v25.x) * (v24.x - v25.x) + (v24.y - v25.y) * (v24.y - v25.y));
  if (one-time initialization token for resizeLineSnapToStraightThreshold != -1) {
    swift_once();
  }
  if (v26 >= *(double *)&static UIConstants.resizeLineSnapToStraightThreshold / *(double *)&a3)
  {
LABEL_24:
    v6[1] = v18;
  }
  else
  {
    v6[1].double x = (v79 + v76) * 0.5;
    v6[1].double y = (v78 + v73) * 0.5;
  }
}

void Line.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  Swift::UInt64 v3 = v0[3];
  Swift::UInt64 v4 = v0[4];
  Swift::UInt64 v5 = v0[5];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *v0;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v1;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v2;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v3;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v5;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
}

uint64_t Line.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Line.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::UInt64 v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v9 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = v1[5];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = v8;
  uint64_t v18 = v9;
  char v16 = 0;
  type metadata accessor for CGPoint(0);
  _sSo7CGPointVABSE12CoreGraphicsWlTm_1(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v17 = v10;
    uint64_t v18 = v11;
    char v16 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v12;
    uint64_t v18 = v13;
    char v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Line.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  Swift::UInt64 v5 = v0[4];
  Swift::UInt64 v6 = v0[5];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v1;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v2;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v3;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v5;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v6;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  return Hasher._finalize()();
}

uint64_t Line.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Line.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::UInt64 v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for CGPoint(0);
    char v14 = 0;
    _sSo7CGPointVABSE12CoreGraphicsWlTm_1(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v9 = v13;
    char v14 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v11 = v13;
    char v14 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    long long v12 = v13;
    *a2 = v9;
    a2[1] = v11;
    a2[2] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for Hashable.hash(into:) in conformance Line()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  Swift::UInt64 v3 = v0[3];
  Swift::UInt64 v4 = v0[4];
  Swift::UInt64 v5 = v0[5];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *v0;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v1;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v2;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v3;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v5;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Line()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  Swift::UInt64 v5 = v0[4];
  Swift::UInt64 v6 = v0[5];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v1;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v2;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v3;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v5;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v6;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Line@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Line.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Line(void *a1)
{
  return Line.encode(to:)(a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Line(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type Line and conformance Line();
  unint64_t v7 = lazy protocol witness table accessor for type Line and conformance Line();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Line()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Line()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Line(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Line and conformance Line();
  return MEMORY[0x270F17688](a1, v2);
}

PaperKit::CalloutBubble::CodingKeys_optional __swiftcall CalloutBubble.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  char *v1 = v2;
  return (PaperKit::CalloutBubble::CodingKeys_optional)rawValue;
}

PaperKit::CalloutBubble::CodingKeys_optional __swiftcall CalloutBubble.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x69736F506C696174 && stringValue._object == (void *)0xEC0000006E6F6974;
  if (v3
    || (object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x6C696154666C6168 && object == (void *)0xED0000656C676E41)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 1;
    }
    else {
      char v7 = 2;
    }
  }
  *char v2 = v7;
  return result;
}

PaperKit::CalloutBubble::CodingKeys_optional __swiftcall CalloutBubble.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  if (intValue)
  {
    if (intValue == 1) {
      unsigned char *v1 = 1;
    }
    else {
      unsigned char *v1 = 2;
    }
  }
  else
  {
    unsigned char *v1 = 0;
  }
  return (PaperKit::CalloutBubble::CodingKeys_optional)intValue;
}

void *static CalloutBubble.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static CalloutBubble.CodingKeys.allCases.getter;
}

uint64_t CalloutBubble.CodingKeys.intValue.getter()
{
  return *v0;
}

uint64_t CalloutBubble.CodingKeys.rawValue.getter()
{
  return *v0;
}

uint64_t CalloutBubble.CodingKeys.stringValue.getter()
{
  if (*v0) {
    return 0x6C696154666C6168;
  }
  else {
    return 0x69736F506C696174;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CalloutBubble.CodingKeys()
{
  if (*v0) {
    return 0x6C696154666C6168;
  }
  else {
    return 0x69736F506C696174;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance CalloutBubble.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CalloutBubble.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance CalloutBubble.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CalloutBubble.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CalloutBubble.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

CGPathRef __swiftcall CalloutBubble.path(in:)(CGAffineTransform *in)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  double v3 = *v1;
  double v4 = v1[1];
  double v5 = *v1 + -0.5;
  double v6 = v4 + -0.5;
  if (v5 * v5 + v6 * v6 >= 0.25)
  {
    double v12 = v1[2];
    double v13 = atan2(v6, v5) - v12;
    Mutable = CGPathCreateMutable();
    double v14 = 0.5;
    CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v4, *(unint64_t *)&v3), in);
    double v15 = 1.0;
    if (v13 != 0.0)
    {
      __double2 v16 = __sincos_stret(v13);
      double v15 = v16.__cosval * 0.5 + 0.5;
      double v14 = v16.__sinval * 0.5 + 0.5;
    }
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v14, *(unint64_t *)&v15), in);
    CGPathCloseSubpath(Mutable);
  }
  else
  {
    long long v7 = *(_OWORD *)&in->c;
    *(_OWORD *)&v18.CGFloat a = *(_OWORD *)&in->a;
    *(_OWORD *)&v18.CGFloat c = v7;
    *(_OWORD *)&v18.tdouble x = *(_OWORD *)&in->tx;
    uint64_t v8 = 0;
    *(void *)&long long v7 = 0;
    double v9 = 1.0;
    double v10 = 1.0;
    return CGPathCreateWithEllipseInRect(*(CGRect *)((char *)&v7 - 8), &v18);
  }
  return Mutable;
}

void CalloutBubble.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *v0;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

BOOL static CalloutBubble.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t CalloutBubble.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CalloutBubble.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v9 = v1[1];
  uint64_t v10 = v1[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[0] = v8;
  v12[1] = v9;
  char v13 = 0;
  type metadata accessor for CGPoint(0);
  _sSo7CGPointVABSE12CoreGraphicsWlTm_1(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v12[0] = v10;
    char v13 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int CalloutBubble.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v3;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t CalloutBubble.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CalloutBubble.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for CGPoint(0);
    char v14 = 0;
    _sSo7CGPointVABSE12CoreGraphicsWlTm_1(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v13[0];
    uint64_t v10 = v13[1];
    char v14 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v11 = v13[0];
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for Hashable.hash(into:) in conformance CalloutBubble()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *v0;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CalloutBubble()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v3;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CalloutBubble(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t protocol witness for Decodable.init(from:) in conformance CalloutBubble@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return CalloutBubble.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CalloutBubble(void *a1)
{
  return CalloutBubble.encode(to:)(a1);
}

double protocol witness for CRType.copy(renamingReferences:) in conformance CalloutBubble@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CalloutBubble(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  unint64_t v7 = lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CalloutBubble()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CalloutBubble()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CalloutBubble(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t RegularPolygon.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7365646973 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void *static RegularPolygon.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static RegularPolygon.CodingKeys.allCases.getter;
}

uint64_t RegularPolygon.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RegularPolygon.CodingKeys.rawValue.getter()
{
  return 0;
}

uint64_t RegularPolygon.CodingKeys.stringValue.getter()
{
  return 0x7365646973;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RegularPolygon.CodingKeys()
{
  return 0x7365646973;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RegularPolygon.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7365646973 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance RegularPolygon.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance RegularPolygon.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance RegularPolygon.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RegularPolygon.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RegularPolygon.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

CGPathRef __swiftcall RegularPolygon.path(in:)(CGAffineTransform *in)
{
  long long v16 = *(_OWORD *)&in->c;
  long long v17 = *(_OWORD *)&in->a;
  tdouble x = in->tx;
  tdouble y = in->ty;
  uint64_t v4 = *v1;
  Mutable = CGPathCreateMutable();
  CGAffineTransformMakeTranslation(&t1, 0.5, 0.5);
  *(_OWORD *)&t2.CGFloat a = v17;
  *(_OWORD *)&t2.CGFloat c = v16;
  t2.tdouble x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v18, &t1, &t2);
  CGAffineTransform t1 = v18;
  CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(-0.5, 0x3C81A62633145C07), &t1);
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = 0;
    while (1)
    {
      double v8 = (double)v7 * 6.28318531 / (double)v4 + -1.57079633;
      if (v8 == 0.0)
      {
        double sinval = 0.0;
        double cosval = 1.0;
      }
      else
      {
        __double2 v11 = __sincos_stret(v8);
        double cosval = v11.__cosval;
        double sinval = v11.__sinval;
      }
      CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(sinval * 0.5, cosval * 0.5), &t1);
      if (v4 == v7) {
        break;
      }
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
        break;
      }
    }
    CGPathCloseSubpath(Mutable);
    id v13 = objc_msgSend(self, sel_bezierPathWithCGPath_, Mutable);
    id v14 = objc_msgSend(v13, sel_bezierPathByReversingPath);

    double v15 = (const CGPath *)objc_msgSend(v14, sel_CGPath);
    return v15;
  }
  return result;
}

void RegularPolygon.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static RegularPolygon.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t RegularPolygon.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RegularPolygon.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int RegularPolygon.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t RegularPolygon.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RegularPolygon.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RegularPolygon@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return RegularPolygon.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RegularPolygon(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RegularPolygon.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance RegularPolygon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance RoundedRect(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon, (uint64_t (*)(void))lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance RoundedRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a5();
  uint64_t v11 = a6();
  return MEMORY[0x270F17D90](a1, a2, a3, v10, v11);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance RegularPolygon()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance RegularPolygon()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance RegularPolygon(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  return MEMORY[0x270F17688](a1, v2);
}

void one-time initialization function for defaultInnerRadius()
{
  static Star.defaultInnerRadius = 0x3FD8722191A02D60;
}

unint64_t lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

PaperKit::Star::CodingKeys_optional __swiftcall Star.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  unint64_t v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x73746E696F70 && stringValue._object == (void *)0xE600000000000000;
  if (v3
    || (object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x64615272656E6E69 && object == (void *)0xEB00000000737569)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 1;
    }
    else {
      char v7 = 2;
    }
  }
  *unint64_t v2 = v7;
  return result;
}

void *static Star.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static Star.CodingKeys.allCases.getter;
}

uint64_t Star.CodingKeys.stringValue.getter()
{
  if (*v0) {
    return 0x64615272656E6E69;
  }
  else {
    return 0x73746E696F70;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Star.CodingKeys()
{
  if (*v0) {
    return 0x64615272656E6E69;
  }
  else {
    return 0x73746E696F70;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance Star.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Star.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Star.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Star.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Star.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

CGPathRef __swiftcall Star.path(in:)(CGAffineTransform *in)
{
  long long v21 = *(_OWORD *)&in->c;
  CGPoint to = *(CGPoint *)&in->a;
  tdouble x = in->tx;
  tdouble y = in->ty;
  uint64_t v4 = *(void *)v1;
  double v5 = *(double *)(v1 + 8);
  Mutable = CGPathCreateMutable();
  CGAffineTransformMakeTranslation(&t1, 0.5, 0.5);
  *(CGPoint *)&t2.CGFloat a = to;
  *(_OWORD *)&t2.CGFloat c = v21;
  t2.tdouble x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v23, &t1, &t2);
  CGAffineTransform t1 = v23;
  CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(-0.5, 0x3C81A62633145C07), &t1);
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v4)
    {
      uint64_t v8 = 0;
      double v9 = 6.28318531 / (double)v4;
      double v10 = v9 * 0.5;
      do
      {
        double v11 = v9 * (double)v8 + -1.57079633;
        double v12 = 0.0;
        double v13 = 1.0;
        double cosval = 1.0;
        double sinval = 0.0;
        if (v11 != 0.0)
        {
          __double2 v16 = __sincos_stret(v9 * (double)v8 + -1.57079633);
          double cosval = v16.__cosval;
          double sinval = v16.__sinval;
        }
        CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(sinval * 0.5, cosval * 0.5), &t1);
        if (v10 + v11 != 0.0)
        {
          __double2 v17 = __sincos_stret(v10 + v11);
          double v12 = v17.__sinval;
          double v13 = v17.__cosval;
        }
        ++v8;
        CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(v5 * 0.5 * v12, v5 * 0.5 * v13), &t1);
      }
      while (v4 != v8);
    }
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(-0.5, 0x3C81A62633145C07), &t1);
    CGPathCloseSubpath(Mutable);
    id v18 = objc_msgSend(self, sel_bezierPathWithCGPath_, Mutable);
    id v19 = objc_msgSend(v18, sel_bezierPathByReversingPath);

    Swift::String v20 = (const CGPath *)objc_msgSend(v19, sel_CGPath);
    return v20;
  }
  return result;
}

void Star.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

BOOL static Star.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

uint64_t Star.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Star.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(void *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = v8;
    v10[15] = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Star.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t Star.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Star.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v14 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v13 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v10 = v12[1];
    *a2 = v9;
    a2[1] = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for Hashable.hash(into:) in conformance Star()
{
  Swift::UInt64 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Star()
{
  Swift::UInt v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Star(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Star@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Star.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Star(void *a1)
{
  return Star.encode(to:)(a1);
}

double protocol witness for CRType.copy(renamingReferences:) in conformance Star@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Star(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Star(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type Star and conformance Star, (uint64_t (*)(void))lazy protocol witness table accessor for type Star and conformance Star);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Star()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Star()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Star(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Star and conformance Star();
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t ArrowShape.CodingKeys.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t ArrowShape.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6F4372656E726F63 && a2 == 0xED00006C6F72746ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t ArrowShape.CodingKeys.init(intValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

void *static ArrowShape.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static ArrowShape.CodingKeys.allCases.getter;
}

uint64_t ArrowShape.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ArrowShape.CodingKeys.rawValue.getter()
{
  return 0;
}

uint64_t ArrowShape.CodingKeys.stringValue.getter()
{
  return 0x6F4372656E726F63;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArrowShape.CodingKeys()
{
  return 0x6F4372656E726F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArrowShape.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6F4372656E726F63 && a2 == 0xED00006C6F72746ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ArrowShape.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ArrowShape.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance ArrowShape.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys, (uint64_t (*)(void))lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v7 = a3();
  uint64_t v8 = a4();
  return MEMORY[0x270F180C8](a1, a2, v7, v8);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArrowShape.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArrowShape.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ArrowShape.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

BOOL static ArrowShape.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t ArrowShape.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ArrowShape.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[0] = v7;
  v10[1] = v8;
  type metadata accessor for CGPoint(0);
  _sSo7CGPointVABSE12CoreGraphicsWlTm_1(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int ArrowShape.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t ArrowShape.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ArrowShape.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for CGPoint(0);
    _sSo7CGPointVABSE12CoreGraphicsWlTm_1(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for Hashable.hash(into:) in conformance ArrowShape()
{
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ArrowShape()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ArrowShape(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArrowShape@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return ArrowShape.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArrowShape(void *a1)
{
  return ArrowShape.encode(to:)(a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance ArrowShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Star(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape, (uint64_t (*)(void))lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Star(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a5();
  uint64_t v11 = a6();
  return MEMORY[0x270F17D90](a1, a2, a3, v10, v11);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance ArrowShape()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance ArrowShape()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance ArrowShape(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  return MEMORY[0x270F17688](a1, v2);
}

CGPathRef TaggedValue_9<>.path(in:)(CGAffineTransform *a1)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  CGFloat a = a1->a;
  CGFloat b = a1->b;
  CGFloat c = a1->c;
  CGFloat d = a1->d;
  tdouble x = a1->tx;
  tdouble y = a1->ty;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  TaggedValue_9.taggedEnum.getter();
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == *MEMORY[0x263F32DC0])
  {
    long long v13 = *(_OWORD *)&a1->c;
    *(_OWORD *)&transform.CGFloat a = *(_OWORD *)&a1->a;
    *(_OWORD *)&transform.CGFloat c = v13;
    *(_OWORD *)&transform.tdouble x = *(_OWORD *)&a1->tx;
    uint64_t v14 = 0;
    *(void *)&long long v13 = 0;
    double v15 = 1.0;
    double v16 = 1.0;
    CGPathRef v17 = CGPathCreateWithRect(*(CGRect *)((char *)&v13 - 8), &transform);
    id v18 = objc_msgSend(self, sel_bezierPathWithCGPath_, v17);
    id v19 = objc_msgSend(v18, sel_bezierPathByReversingPath);

    id v20 = objc_msgSend(v19, sel_CGPath);
LABEL_5:
    id v26 = v20;

    return (CGPathRef)v26;
  }
  if (v12 == *MEMORY[0x263F32DC8])
  {
    long long v21 = *(_OWORD *)&a1->c;
    *(_OWORD *)&transform.CGFloat a = *(_OWORD *)&a1->a;
    *(_OWORD *)&transform.CGFloat c = v21;
    *(_OWORD *)&transform.tdouble x = *(_OWORD *)&a1->tx;
    uint64_t v22 = 0;
    *(void *)&long long v21 = 0;
    double v23 = 1.0;
    double v24 = 1.0;
    CGPathRef v17 = CGPathCreateWithEllipseInRect(*(CGRect *)((char *)&v21 - 8), &transform);
    id v25 = objc_msgSend(self, sel_bezierPathWithCGPath_, v17);
    id v19 = objc_msgSend(v25, sel_bezierPathByReversingPath);

    id v20 = objc_msgSend(v19, sel_CGPath);
    goto LABEL_5;
  }
  if (v12 == *MEMORY[0x263F32DD0])
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
    double v28 = *(double *)v11;
    double v29 = *((double *)v11 + 1);
    double v30 = *((double *)v11 + 4);
    double v31 = *((double *)v11 + 5);
    double v32 = *((double *)v11 + 2) - *(double *)v11 * 0.25 - v30 * 0.25;
    double v33 = *((double *)v11 + 3) - v29 * 0.25 - v31 * 0.25;
    *(double *)&unint64_t v34 = v32 + v32;
    *(double *)&unint64_t v35 = v33 + v33;
    CGMutablePathRef Mutable = CGPathCreateMutable();
    CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v29, *(unint64_t *)&v28), a1);
    CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v31, *(unint64_t *)&v30), (CGPoint)__PAIR128__(v35, v34), a1);
    return Mutable;
  }
  if (v12 != *MEMORY[0x263F32DD8])
  {
    if (v12 == *MEMORY[0x263F32DE0])
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
      CGFloat v39 = *((double *)v11 + 2);
      *(_OWORD *)&transform.CGFloat a = *(_OWORD *)v11;
      transform.CGFloat c = v39;
      return CalloutBubble.path(in:)(a1);
    }
    if (v12 == *MEMORY[0x263F32DE8])
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
      double v58 = *(double *)v11;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&transform, 0.0);
      CGFloat v40 = transform.a;
      v64.origin.double y = transform.b;
      CGFloat v56 = transform.b;
      v64.size.CGFloat width = transform.c;
      double v41 = transform.d;
      CGFloat v59 = transform.c;
      v64.origin.double x = transform.a;
      v64.size.CGFloat height = transform.d;
      CGFloat Width = CGRectGetWidth(v64);
      v65.origin.double x = v40;
      v65.origin.double y = v56;
      CGFloat v42 = v59;
      v65.size.CGFloat width = v59;
      v65.size.CGFloat height = v41;
      double Height = CGRectGetHeight(v65);
      if (Height >= Width) {
        double Height = Width;
      }
      uint64_t v44 = ppk_bezierPathWithContinuousCornerRoundedRect(0.0, 0.0, v42, v41, v58 * Height);
      CGAffineTransformMakeScale(&transform, 1.0 / v42, 1.0 / v41);
      t2.CGFloat a = a;
      t2.CGFloat b = b;
      t2.CGFloat c = c;
      t2.CGFloat d = d;
      t2.tdouble x = tx;
      t2.tdouble y = ty;
      CGAffineTransformConcat(&v60, &transform, &t2);
      CGAffineTransform transform = v60;
      CGMutablePathRef Mutable = (CGMutablePathRef)MEMORY[0x21054F0D0](v44, &transform);
      if (!Mutable)
      {
        v66.origin.double x = 0.0;
        v66.origin.double y = 0.0;
        v66.size.CGFloat width = v59;
        v66.size.CGFloat height = v41;
        CGMutablePathRef Mutable = CGPathCreateWithRect(v66, &transform);
      }

      return Mutable;
    }
    if (v12 == *MEMORY[0x263F32DF0])
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
      transform.CGFloat a = *(CGFloat *)v11;
      return RegularPolygon.path(in:)(a1);
    }
    if (v12 == *MEMORY[0x263F32DF8])
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
      CGFloat v45 = *((double *)v11 + 1);
      transform.CGFloat a = *(CGFloat *)v11;
      transform.CGFloat b = v45;
      return Star.path(in:)(a1);
    }
    if (v12 != *MEMORY[0x263F32E00])
    {
      long long v49 = *(_OWORD *)&a1->c;
      *(_OWORD *)&transform.CGFloat a = *(_OWORD *)&a1->a;
      *(_OWORD *)&transform.CGFloat c = v49;
      *(_OWORD *)&transform.tdouble x = *(_OWORD *)&a1->tx;
      uint64_t v50 = 0;
      *(void *)&long long v49 = 0;
      double v51 = 1.0;
      double v52 = 1.0;
      CGPathRef v53 = CGPathCreateWithRect(*(CGRect *)((char *)&v49 - 8), &transform);
      id v54 = objc_msgSend(self, sel_bezierPathWithCGPath_, v53);
      id v55 = objc_msgSend(v54, sel_bezierPathByReversingPath);

      id v26 = objc_msgSend(v55, sel_CGPath);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return (CGPathRef)v26;
    }
    (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
    CGFloat v46 = *(CGFloat *)v11;
    double v47 = *((double *)v11 + 1);
    long long v48 = *(_OWORD *)&a1->c;
    *(_OWORD *)&t2.CGFloat a = *(_OWORD *)&a1->a;
    *(_OWORD *)&t2.CGFloat c = v48;
    *(_OWORD *)&t2.tdouble x = *(_OWORD *)&a1->tx;
    double v37 = CGPathCreateMutable();
    transform.CGFloat a = 1.0;
    transform.CGFloat b = 0.0;
    transform.CGFloat c = 0.0;
    transform.CGFloat d = 1.0;
    transform.tdouble x = 0.0;
    transform.tdouble y = 0.0;
    CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(1.0 - v47, *(unint64_t *)&v46), &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(1.0, *(unint64_t *)&v46), &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(0.5, 1.0), &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)*(unint64_t *)&v46, &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v47, *(unint64_t *)&v46), &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v47, 0), &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(1.0 - v47, 0), &transform);
    CGPathCloseSubpath(v37);
    CGMutablePathRef Mutable = (CGMutablePathRef)MEMORY[0x21054F0D0](v37, &t2);
    if (Mutable) {
      goto LABEL_12;
    }
    v67.origin.double x = 0.0;
    v67.origin.double y = 0.0;
    v67.size.CGFloat width = 1.0;
    v67.size.CGFloat height = 1.0;
    CGPathRef result = CGPathCreateWithRect(v67, &t2);
LABEL_11:
    CGMutablePathRef Mutable = result;
LABEL_12:

    return Mutable;
  }
  (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
  double v37 = *(CGPath **)v11;
  long long v38 = *(_OWORD *)&a1->c;
  *(_OWORD *)&transform.CGFloat a = *(_OWORD *)&a1->a;
  *(_OWORD *)&transform.CGFloat c = v38;
  *(_OWORD *)&transform.tdouble x = *(_OWORD *)&a1->tx;
  CGPathRef result = (CGPathRef)MEMORY[0x21054F0D0](v37, &transform);
  if (result) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

BOOL specialized static Line.== infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) == 0)return 0; {
  if (a1[2].f64[1] == a2[2].f64[1])
  }
    return a1[2].f64[0] == a2[2].f64[0];
  return 0;
}

unint64_t lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ControlPointType and conformance ControlPointType()
{
  unint64_t result = lazy protocol witness table cache variable for type ControlPointType and conformance ControlPointType;
  if (!lazy protocol witness table cache variable for type ControlPointType and conformance ControlPointType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlPointType and conformance ControlPointType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Rectangle.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [Rectangle.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Rectangle.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in RoundedRect.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [RoundedRect.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [RoundedRect.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Ellipse.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [Ellipse.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Ellipse.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Line.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [Line.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Line.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CalloutBubble.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [CalloutBubble.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [CalloutBubble.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in RegularPolygon.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [RegularPolygon.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [RegularPolygon.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Star.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [Star.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Star.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ArrowShape.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [ArrowShape.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [ArrowShape.CodingKeys]);
}

uint64_t lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ControlPointType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C53FCACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ControlPointType()
{
  return &type metadata for ControlPointType;
}

ValueMetadata *type metadata accessor for Rectangle()
{
  return &type metadata for Rectangle;
}

ValueMetadata *type metadata accessor for Rectangle.CodingKeys()
{
  return &type metadata for Rectangle.CodingKeys;
}

ValueMetadata *type metadata accessor for RoundedRect()
{
  return &type metadata for RoundedRect;
}

ValueMetadata *type metadata accessor for RoundedRect.CodingKeys()
{
  return &type metadata for RoundedRect.CodingKeys;
}

ValueMetadata *type metadata accessor for Ellipse()
{
  return &type metadata for Ellipse;
}

ValueMetadata *type metadata accessor for Ellipse.CodingKeys()
{
  return &type metadata for Ellipse.CodingKeys;
}

ValueMetadata *type metadata accessor for Line()
{
  return &type metadata for Line;
}

unsigned char *storeEnumTagSinglePayload for Line.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C53FE28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Line.CodingKeys()
{
  return &type metadata for Line.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CalloutBubble(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CalloutBubble(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CalloutBubble()
{
  return &type metadata for CalloutBubble;
}

ValueMetadata *type metadata accessor for CalloutBubble.CodingKeys()
{
  return &type metadata for CalloutBubble.CodingKeys;
}

ValueMetadata *type metadata accessor for RegularPolygon()
{
  return &type metadata for RegularPolygon;
}

ValueMetadata *type metadata accessor for RegularPolygon.CodingKeys()
{
  return &type metadata for RegularPolygon.CodingKeys;
}

ValueMetadata *type metadata accessor for Star()
{
  return &type metadata for Star;
}

unsigned char *storeEnumTagSinglePayload for CalloutBubble.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C53FFCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Star.CodingKeys()
{
  return &type metadata for Star.CodingKeys;
}

ValueMetadata *type metadata accessor for ArrowShape()
{
  return &type metadata for ArrowShape;
}

unsigned char *storeEnumTagSinglePayload for RoundedRect.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x20C5400B0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArrowShape.CodingKeys()
{
  return &type metadata for ArrowShape.CodingKeys;
}

double specialized CalloutBubble.subscript.getter(unsigned __int8 *a1, CGFloat *a2)
{
  CGFloat v4 = *a2;
  CGFloat v3 = a2[1];
  CGFloat v6 = a2[2];
  CGFloat v5 = a2[3];
  CGFloat v8 = a2[4];
  CGFloat v7 = a2[5];
  int v9 = *a1;
  double v10 = *v2;
  double v11 = v2[1];
  if (v9 == 4)
  {
    double v13 = v2[2];
    double v14 = atan2(v11 + -0.5, v10 + -0.5) - v13;
    if (v14 == 0.0)
    {
      double v11 = 0.5;
      double v10 = 1.0;
    }
    else
    {
      __double2 v15 = __sincos_stret(v14);
      double v10 = v15.__cosval * 0.5 + 0.5;
      double v11 = v15.__sinval * 0.5 + 0.5;
    }
  }
  else
  {
    double v12 = 0.0;
    if (v9 != 3) {
      return v12;
    }
  }
  v17.CGFloat a = v4;
  v17.CGFloat b = v3;
  v17.CGFloat c = v6;
  v17.CGFloat d = v5;
  v17.tdouble x = v8;
  v17.tdouble y = v7;
  *(void *)&double v12 = *(_OWORD *)&CGPointApplyAffineTransform(*(CGPoint *)&v10, &v17);
  return v12;
}

void specialized static RegularPolygon.numberOfSidesToPosition(_:minSides:maxSides:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (__OFSUB__(a3, a2))
  {
    __break(1u);
    goto LABEL_7;
  }
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (__OFSUB__(a1, a2))
  {
LABEL_8:
    __break(1u);
    return;
  }
  double v6 = (double)(a1 - a2) * 6.28318531 / (double)v5 + -1.57079633;
  if (v6 != 0.0) {
    __sincos_stret(v6);
  }
}

void specialized Star.subscript.getter(unsigned __int8 *a1, CGFloat *a2)
{
  CGFloat v4 = *a2;
  CGFloat v3 = a2[1];
  CGFloat v6 = a2[2];
  CGFloat v5 = a2[3];
  CGFloat v8 = a2[4];
  CGFloat v7 = a2[5];
  int v9 = *a1;
  uint64_t v10 = *(void *)v2;
  if (v9 == 8)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
      __break(1u);
      return;
    }
    double v13 = *(double *)(v2 + 8);
    double v14 = 6.28318531 / (double)(2 * v10) + -1.57079633;
    if (v14 == 0.0)
    {
      double sinval = 0.0;
      double cosval = 1.0;
    }
    else
    {
      __double2 v17 = __sincos_stret(v14);
      double cosval = v17.__cosval;
      double sinval = v17.__sinval;
    }
    double v18 = v13 * sinval * 0.5;
    double v11 = v13 * cosval * 0.5 + 0.5;
    v19.CGFloat a = v4;
    v19.CGFloat b = v3;
    v19.CGFloat c = v6;
    v19.CGFloat d = v5;
    double v12 = v18 + 0.5;
  }
  else
  {
    if (v9 != 7) {
      return;
    }
    specialized static RegularPolygon.numberOfSidesToPosition(_:minSides:maxSides:)(v10, 3, 10);
    v19.CGFloat a = v4;
    v19.CGFloat b = v3;
    v19.CGFloat c = v6;
    v19.CGFloat d = v5;
  }
  v19.tdouble x = v8;
  v19.tdouble y = v7;
  CGPointApplyAffineTransform(*(CGPoint *)&v11, &v19);
}

void specialized TaggedValue_9<>.subscript.getter(unsigned __int8 *a1, CGFloat *a2)
{
  CGFloat v5 = *a2;
  CGFloat v4 = a2[1];
  CGFloat v7 = a2[2];
  CGFloat v6 = a2[3];
  CGFloat v9 = a2[4];
  CGFloat v8 = a2[5];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  double v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = *a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  TaggedValue_9.taggedEnum.getter();
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v15 == *MEMORY[0x263F32DD0])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    if (v14 == 2)
    {
      double v16 = *((double *)v13 + 4);
      uint64_t v17 = *((void *)v13 + 5);
      goto LABEL_17;
    }
    if (v14 == 1)
    {
      double v16 = *((double *)v13 + 2);
      uint64_t v17 = *((void *)v13 + 3);
      goto LABEL_17;
    }
    if (v14) {
      return;
    }
LABEL_5:
    double v16 = *(double *)v13;
    uint64_t v17 = *((void *)v13 + 1);
LABEL_17:
    v39.CGFloat a = v5;
    v39.CGFloat b = v4;
    v39.CGFloat c = v7;
    v39.CGFloat d = v6;
    v39.tdouble x = v9;
    v39.tdouble y = v8;
LABEL_18:
    CGPointApplyAffineTransform(*(CGPoint *)&v16, &v39);
    return;
  }
  if (v15 == *MEMORY[0x263F32DE0])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    CGFloat v18 = *((double *)v13 + 2);
    *(_OWORD *)&v39.CGFloat a = *(_OWORD *)v13;
    v39.CGFloat c = v18;
    unsigned __int8 v38 = v14;
    specialized CalloutBubble.subscript.getter(&v38, a2);
    return;
  }
  if (v15 == *MEMORY[0x263F32DE8])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    if (v14 != 5) {
      return;
    }
    CGFloat v34 = v9;
    CGFloat v35 = v8;
    double v36 = *(double *)v13;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v39, 0.0);
    CGFloat a = v39.a;
    CGFloat b = v39.b;
    CGFloat c = v39.c;
    CGFloat d = v39.d;
    v40.origin.double x = v39.a;
    v40.origin.double y = v39.b;
    v40.size.CGFloat width = v39.c;
    v40.size.CGFloat height = v39.d;
    double Width = CGRectGetWidth(v40);
    CGFloat v32 = b;
    CGFloat v33 = a;
    v41.origin.double x = a;
    v41.origin.double y = b;
    CGFloat v30 = d;
    CGFloat v31 = c;
    v41.size.CGFloat width = c;
    v41.size.CGFloat height = d;
    if (Width >= CGRectGetHeight(v41))
    {
      CGFloat v25 = v32;
      CGFloat v24 = v33;
      v42.origin.double x = v33;
      v42.origin.double y = v32;
      CGFloat v27 = v30;
      CGFloat v26 = v31;
      v42.size.CGFloat width = v31;
      v42.size.CGFloat height = v30;
      double Width = v36 * CGRectGetHeight(v42);
      v43.origin.double x = v24;
      v43.origin.double y = v25;
      v43.size.CGFloat width = v26;
      v43.size.CGFloat height = v27;
      CGFloat v28 = CGRectGetWidth(v43);
      v39.CGFloat a = v5;
      v39.CGFloat b = v4;
      v39.CGFloat c = v7;
      v39.CGFloat d = v6;
      v39.tdouble x = v34;
      v39.tdouble y = v35;
      double v16 = Width / v28;
      uint64_t v17 = 0;
    }
    else
    {
      v39.CGFloat a = v5;
      v39.CGFloat b = v4;
      v39.CGFloat c = v7;
      v39.CGFloat d = v6;
      v39.tdouble x = v34;
      v39.tdouble y = v35;
      uint64_t v17 = 0;
      double v16 = v36;
    }
    goto LABEL_18;
  }
  if (v15 == *MEMORY[0x263F32DF0])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    if (v14 != 6) {
      return;
    }
    specialized static RegularPolygon.numberOfSidesToPosition(_:minSides:maxSides:)(*(void *)v13, 3, 12);
    goto LABEL_17;
  }
  if (v15 == *MEMORY[0x263F32DF8])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    CGFloat v23 = *((double *)v13 + 1);
    v39.CGFloat a = *(CGFloat *)v13;
    v39.CGFloat b = v23;
    unsigned __int8 v38 = v14;
    specialized Star.subscript.getter(&v38, a2);
    return;
  }
  if (v15 != *MEMORY[0x263F32E00])
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return;
  }
  (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
  if (v14 == 9) {
    goto LABEL_5;
  }
}

void specialized CalloutBubble.subscript.setter(unsigned __int8 *a1, _OWORD *a2, CGFloat a3, CGFloat a4)
{
  int v7 = *a1;
  long long v8 = a2[1];
  *(_OWORD *)&v15.CGFloat a = *a2;
  *(_OWORD *)&v15.CGFloat c = v8;
  *(_OWORD *)&v15.tdouble x = a2[2];
  CGAffineTransformInvert(&v14, &v15);
  CGAffineTransform v15 = v14;
  v16.double x = a3;
  v16.double y = a4;
  CGPoint v9 = CGPointApplyAffineTransform(v16, &v15);
  if (v7 == 4)
  {
    double v10 = atan2(v4[1] + -0.5, *v4 + -0.5);
    long double v11 = atan2(v9.y + -0.5, v9.x + -0.5);
    double v12 = fmod(v11 - v10, 6.28318531);
    if (v12 > 3.14159265) {
      double v12 = v12 + -6.28318531;
    }
    if (v12 < -3.14159265) {
      double v12 = v12 + 6.28318531;
    }
    double v13 = fabs(v12);
    if (v13 <= 0.025) {
      double v13 = 0.025;
    }
    if (v13 > 0.4) {
      double v13 = 0.4;
    }
    v4[2] = v13;
  }
  else if (v7 == 3)
  {
    *(CGPoint *)CGFloat v4 = v9;
  }
}

void specialized static RegularPolygon.numberOfSidesFromPosition(_:minSides:maxSides:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  double v7 = (atan2(a4 + -0.5, a3 + -0.5) + 1.57079633) / 6.28318531;
  if (v7 < 0.0) {
    double v7 = v7 + 1.0;
  }
  double v8 = round(v7 * (double)v5);
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0) {
    goto LABEL_12;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (__OFADD__(a1, (uint64_t)v8)) {
LABEL_15:
  }
    __break(1u);
}

void specialized Star.subscript.setter(unsigned __int8 *a1, _OWORD *a2, CGFloat a3, CGFloat a4)
{
  int v7 = *a1;
  long long v8 = a2[1];
  *(_OWORD *)&v16.CGFloat a = *a2;
  *(_OWORD *)&v16.CGFloat c = v8;
  *(_OWORD *)&v16.tdouble x = a2[2];
  CGAffineTransformInvert(&v15, &v16);
  CGAffineTransform v16 = v15;
  v17.double x = a3;
  v17.double y = a4;
  CGPoint v9 = CGPointApplyAffineTransform(v17, &v16);
  if (v7 == 8)
  {
    if (*(void *)v4 + 0x4000000000000000 < 0)
    {
      __break(1u);
    }
    else
    {
      double sinval = 0.0;
      double cosval = 1.0;
      if (6.28318531 / (double)(2 * *(void *)v4) + -1.57079633 != 0.0)
      {
        __double2 v13 = __sincos_stret(6.28318531 / (double)(2 * *(void *)v4) + -1.57079633);
        double cosval = v13.__cosval;
        double sinval = v13.__sinval;
      }
      CGFloat v14 = (v9.x + -0.5) * cosval + (v9.y + -0.5) * sinval;
      *(double *)(v4 + 8) = fmax(fmin(v14 + v14, 1.0), 0.1);
    }
  }
  else if (v7 == 7)
  {
    specialized static RegularPolygon.numberOfSidesFromPosition(_:minSides:maxSides:)(3, 10, v9.x, v9.y);
    *(void *)uint64_t v4 = v10;
  }
}

id TaggedValue_2<>.caLineCap.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  TaggedValue_2.tagged1.getter();
  if (v5)
  {
    uint64_t v0 = (id *)MEMORY[0x263F15E78];
    Swift::UInt64 v1 = (id *)MEMORY[0x263F15E70];
    if (v6 != 1) {
      Swift::UInt64 v1 = (id *)MEMORY[0x263F15E68];
    }
    if (v6 != 2) {
      uint64_t v0 = v1;
    }
    id v2 = *v0;
    swift_bridgeObjectRelease();
    return v2;
  }
  else
  {
    uint64_t v4 = (void *)*MEMORY[0x263F15E68];
    return v4;
  }
}

void PlainStrokeStyle.init()(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v1;
  *(_DWORD *)(a1 + 16) = 2;
}

uint64_t PlainStrokeStyle.init(_:phase:lineCap:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)a3 = a4;
  *(void *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 16) = a2;
  return result;
}

PaperKit::PlainStrokeStyle::CodingKeys_optional __swiftcall PlainStrokeStyle.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (PaperKit::PlainStrokeStyle::CodingKeys_optional)rawValue;
}

PaperKit::PlainStrokeStyle::CodingKeys_optional __swiftcall PlainStrokeStyle.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v2 = v1;
  BOOL v3 = stringValue._countAndFlagsBits == 0x6573616870 && stringValue._object == (void *)0xE500000000000000;
  if (v3
    || (object = stringValue._object,
        uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else if (countAndFlagsBits == 0x6E726574746170 && object == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }
  else if (countAndFlagsBits == 0x706143656E696CLL && object == (void *)0xE700000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if (v8) {
      char v7 = 2;
    }
    else {
      char v7 = 3;
    }
  }
  *char v2 = v7;
  return result;
}

PaperKit::PlainStrokeStyle::CodingKeys_optional __swiftcall PlainStrokeStyle.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char v2 = 3;
  if ((unint64_t)intValue < 3) {
    char v2 = intValue;
  }
  char *v1 = v2;
  return (PaperKit::PlainStrokeStyle::CodingKeys_optional)intValue;
}

void *static PlainStrokeStyle.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static PlainStrokeStyle.CodingKeys.allCases.getter;
}

uint64_t PlainStrokeStyle.CodingKeys.intValue.getter()
{
  return *v0;
}

uint64_t PlainStrokeStyle.CodingKeys.stringValue.getter()
{
  uint64_t v1 = 0x6E726574746170;
  if (*v0 != 1) {
    uint64_t v1 = 0x706143656E696CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6573616870;
  }
}

PaperKit::PlainStrokeStyle::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PlainStrokeStyle.CodingKeys(Swift::Int *a1)
{
  return PlainStrokeStyle.CodingKeys.init(rawValue:)(*a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlainStrokeStyle.CodingKeys()
{
  uint64_t v1 = 0x6E726574746170;
  if (*v0 != 1) {
    uint64_t v1 = 0x706143656E696CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6573616870;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance PlainStrokeStyle.CodingKeys(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PlainStrokeStyle.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance PlainStrokeStyle.CodingKeys(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  unint64_t v5 = lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  return MEMORY[0x270F180C8](a1, a2, v4, v5);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlainStrokeStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlainStrokeStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PlainStrokeStyle.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v1 + 16);
  if ((*(void *)v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  specialized Array<A>.hash(into:)(a1, v3);
  Hasher._combine(_:)(v4);
}

uint64_t static PlainStrokeStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 16);
  int v3 = *(_DWORD *)(a1 + 16);
  return specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a2 + 8)) & (v3 == v2);
}

uint64_t PlainStrokeStyle.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlainStrokeStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v12 = v1[1];
  int v9 = *((_DWORD *)v1 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = v8;
  char v13 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v14 = v12;
    char v13 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LODWORD(v14) = v9;
    char v13 = 2;
    type metadata accessor for CGLineCap(0);
    lazy protocol witness table accessor for type CGLineCap and conformance CGLineCap(&lazy protocol witness table cache variable for type CGLineCap and conformance CGLineCap);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int PlainStrokeStyle.hashValue.getter()
{
  Swift::UInt64 v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  specialized Array<A>.hash(into:)((uint64_t)v6, v1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t PlainStrokeStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlainStrokeStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    HIBYTE(v13) = 0;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
    HIBYTE(v13) = 1;
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v11 = v14;
    type metadata accessor for CGLineCap(0);
    HIBYTE(v13) = 2;
    lazy protocol witness table accessor for type CGLineCap and conformance CGLineCap(&lazy protocol witness table cache variable for type CGLineCap and conformance CGLineCap);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    int v12 = v14;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v11;
    *(_DWORD *)(a2 + 16) = v12;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlainStrokeStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PlainStrokeStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlainStrokeStyle(void *a1)
{
  return PlainStrokeStyle.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance PlainStrokeStyle()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 16);
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)v0;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  Swift::UInt v4 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt64 *)(v1 + 32);
    do
    {
      Swift::UInt64 v7 = *v5++;
      Swift::UInt64 v6 = v7;
      if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v8 = v6;
      }
      else {
        Swift::UInt64 v8 = 0;
      }
      Hasher._combine(_:)(v8);
      --v4;
    }
    while (v4);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PlainStrokeStyle()
{
  Swift::UInt64 v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  specialized Array<A>.hash(into:)((uint64_t)v6, v1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PlainStrokeStyle(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 16);
  int v3 = *(_DWORD *)(a1 + 16);
  return specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a2 + 8)) & (v3 == v2);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PlainStrokeStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PlainStrokeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
  unint64_t v7 = lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PlainStrokeStyle()
{
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PlainStrokeStyle()
{
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PlainStrokeStyle(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
  return MEMORY[0x270F17688](a1, v2);
}

uint64_t CGLineCap.init(from:)(uint64_t a1)
{
  dispatch thunk of CRDecoder.valueContainer()();
  if (v1)
  {
    swift_release();
    return a1;
  }
  a1 = dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
  swift_release();
  uint64_t result = swift_release();
  if (a1 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_8;
  }
  if (a1 <= 0x7FFFFFFF) {
    return a1;
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t CGLineCap.encode(to:)()
{
  return Int.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CGLineCap()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CGLineCap()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGLineCap@<X0>(_DWORD *a1@<X8>)
{
  dispatch thunk of CRDecoder.valueContainer()();
  if (v1) {
    return swift_release();
  }
  uint64_t v3 = dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
  swift_release();
  uint64_t result = swift_release();
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v3 <= 0x7FFFFFFF)
  {
    *a1 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGLineCap()
{
  return Int.encode(to:)();
}

PaperKit::BrushStyle_optional __swiftcall BrushStyle.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 5;
  if ((unint64_t)rawValue < 5) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (PaperKit::BrushStyle_optional)rawValue;
}

uint64_t BrushStyle.rawValue.getter()
{
  return *v0;
}

PaperKit::BrushStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance BrushStyle(Swift::Int *a1)
{
  return BrushStyle.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance BrushStyle()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BrushStyle()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance BrushStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  unint64_t v7 = lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  return MEMORY[0x270F17D90](a1, a2, a3, v6, v7);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance BrushStyle()
{
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance BrushStyle()
{
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance BrushStyle(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  unint64_t v3 = lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  uint64_t v4 = MEMORY[0x263F33180];
  return MEMORY[0x270F17D98](a1, v2, v3, v4);
}

unint64_t lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CGFloat]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [PlainStrokeStyle.CodingKeys] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PlainStrokeStyle.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PlainStrokeStyle.CodingKeys] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PlainStrokeStyle.CodingKeys]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PlainStrokeStyle.CodingKeys] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle;
  if (!lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle;
  if (!lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle;
  if (!lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle;
  if (!lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle;
  if (!lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlainStrokeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlainStrokeStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PlainStrokeStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlainStrokeStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlainStrokeStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlainStrokeStyle()
{
  return &type metadata for PlainStrokeStyle;
}

unsigned char *storeEnumTagSinglePayload for PlainStrokeStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C5427CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlainStrokeStyle.CodingKeys()
{
  return &type metadata for PlainStrokeStyle.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BrushStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20C5428D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BrushStyle()
{
  return &type metadata for BrushStyle;
}

uint64_t lazy protocol witness table accessor for type CGLineCap and conformance CGLineCap(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CGLineCap(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg507_sSo17_f15ConcreteC8Papere55E6stroke7drawingAbC0A9CoherenceC_AC09PKDrawingG0Ctcfc06D13D00A0VALXEfU_0lE00sQ0CTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg507_sSo17_f15ConcreteC8Papere55E6stroke7drawingAbC0A9CoherenceC_AC09PKDrawingG0Ctcfc06D13D00A0VALXEfU_0lE00sQ0CTf1cn_nTf4ng_n(a1, a2);

  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5013_s8PaperKit27f76CoherenceSubstrokesC14concreteStroke2inSo01_C8ConcreteCAA09PKDrawingD0C_tF06D13B00C0VALXEfU_0iE00sK0CTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5013_s8PaperKit27f76CoherenceSubstrokesC14concreteStroke2inSo01_C8ConcreteCAA09PKDrawingD0C_tF06D13B00C0VALXEfU_0iE00sK0CTf1cn_nTf4ng_n(a1, (uint64_t)a2);

  return v3;
}

uint64_t static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)@<X0>(void (*a1)(void, void, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v102 = (char *)a4;
  uint64_t v103 = a2;
  double v106 = a1;
  uint64_t v100 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8);
  CGPoint v92 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CRKeyPath();
  uint64_t v90 = *(void *)(v9 - 8);
  uint64_t v91 = v9;
  MEMORY[0x270FA5388](v9);
  CGPoint v89 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v93 = *(void *)(v11 - 8);
  uint64_t v94 = v11;
  MEMORY[0x270FA5388](v11);
  CGRect v82 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v104 = (char *)&v79 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v96 = (char *)&v79 - v16;
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v86 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  CGPoint v85 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v18 - 8);
  CGPoint v88 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v97 = *(void *)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  uint64_t v95 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  CGAffineTransform v84 = (char *)&v79 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v98 = (char *)&v79 - v24;
  uint64_t v25 = *(void *)(a4 + 16);
  uint64_t v101 = type metadata accessor for Capsule();
  uint64_t v26 = *(void *)(v101 - 8);
  MEMORY[0x270FA5388](v101);
  CGFloat v28 = (char *)&v79 - v27;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  CGFloat v32 = (char *)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v105 = *(void *)(v107 - 8);
  MEMORY[0x270FA5388](v107);
  CGAffineTransform v81 = (char *)&v79 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  double v36 = (char *)&v79 - v35;
  MEMORY[0x270FA5388](v37);
  CGAffineTransform v39 = (char *)&v79 - v38;
  uint64_t v40 = v103;
  uint64_t v83 = v25;
  CGRect v41 = v106;
  Ref.subscript.getter();
  type metadata accessor for PKStrokeCoherence(0);
  (*(void (**)(char *, void, uint64_t))(v30 + 16))(v32, v41, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v40, v101);
  uint64_t v42 = PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)((uint64_t)v32, (uint64_t)v28, a3, (uint64_t)v102);
  if (v42)
  {
    CGRect v43 = (void *)v42;
    static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

    return (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v39, v107);
  }
  uint64_t v101 = v29;
  CGFloat v45 = v84;
  CGPoint v80 = v36;
  uint64_t v46 = v97;
  double v47 = v85;
  uint64_t v102 = v39;
  CRRegister.value.getter();
  uint64_t v48 = (uint64_t)v88;
  uint64_t v49 = v87;
  SharedTagged_2.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v47, v49);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  uint64_t v51 = *(void *)(v50 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50) == 1) {
    goto LABEL_8;
  }
  Ref.subscript.getter();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v48, v50);
  uint64_t v52 = v46;
  CGPathRef v53 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  id v55 = v98;
  uint64_t v54 = v99;
  v53(v98, v45, v99);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  CGFloat v56 = v89;
  Reference.identity.getter();
  CGFloat v57 = v92;
  CRKeyPath.uuid.getter();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v56, v91);
  uint64_t v59 = v93;
  uint64_t v58 = v94;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v57, 1, v94) == 1)
  {
    __break(1u);
LABEL_8:
    outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  CGAffineTransform v60 = v96;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v96, v57, v58);
  double v106 = *(void (**)(void, void, void))(v59 + 16);
  v106(v104, v60, v58);
  double v61 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  double v62 = v95;
  v61(v95, v55, v54);
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
  CGRect v64 = v80;
  v63(v80, v102, v107);
  CGRect v65 = (char *)objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherenceSubstrokes(0));
  uint64_t v66 = v54;
  CGRect v67 = v65;
  v61(&v65[OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes], v62, v66);
  CGFloat v68 = v82;
  CGFloat v69 = (void (*)(char *, char *, uint64_t))v106;
  v106(v82, v104, v58);
  double v70 = v81;
  CGFloat v71 = v64;
  uint64_t v72 = v107;
  v63(v81, v71, v107);
  v69(&v67[OBJC_IVAR___PKStrokeCoherenceBase_identity], v68, v58);
  v63(&v67[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], v70, v72);
  double v73 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
  v108.receiver = v67;
  v108.super_class = v73;
  id v74 = objc_msgSendSuper2(&v108, sel_init);
  long long v75 = *(void (**)(char *, uint64_t))(v105 + 8);
  v75(v70, v72);
  double v76 = *(void (**)(char *, uint64_t))(v59 + 8);
  v76(v68, v58);
  v75(v80, v72);
  CGPoint v77 = *(void (**)(char *, uint64_t))(v97 + 8);
  uint64_t v78 = v99;
  v77(v95, v99);
  v76(v104, v58);
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  v76(v96, v58);
  v77(v98, v78);
  return ((uint64_t (*)(char *, uint64_t))v75)(v102, v72);
}

uint64_t type metadata accessor for PKStrokeCoherence(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeCoherence);
}

uint64_t PKStrokeProviderSliceIdentifierCoherence.isEqual(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unsigned int v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v32, &demangling cache variable for type metadata for Any?);
  if (!v33)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v32, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  uint64_t v13 = type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v14 = v31;
  if (v31 != v1)
  {
    CGFloat v28 = (objc_class *)v13;
    uint64_t v29 = v4;
    uint64_t v15 = v1;
    type metadata accessor for FinalizedTimestamp();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type FinalizedTimestamp and conformance FinalizedTimestamp, MEMORY[0x263F32F08]);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t v26 = v1;
      id v27 = v14;
      uint64_t v16 = (uint64_t)v14 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID;
      uint64_t v17 = (uint64_t)&v12[*(int *)(v10 + 48)];
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v15 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, (uint64_t)v12, &demangling cache variable for type metadata for UUID?);
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v16, v17, &demangling cache variable for type metadata for UUID?);
      uint64_t v18 = v29;
      uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
      if (v19((uint64_t)v12, 1, v3) == 1)
      {
        if (v19(v17, 1, v3) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for UUID?);
          id v20 = v27;
LABEL_15:
          v30.receiver = v26;
          v30.super_class = v28;
          id v21 = objc_msgSendSuper2(&v30, sel_isEqual_, v20);

          return (uint64_t)v21;
        }
        goto LABEL_13;
      }
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v12, (uint64_t)v9, &demangling cache variable for type metadata for UUID?);
      if (v19(v17, 1, v3) == 1)
      {
        (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v3);
LABEL_13:
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for (UUID?, UUID?));

        return 0;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v6, v17, v3);
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *(void (**)(char *, uint64_t))(v18 + 8);
      v23(v6, v3);
      v23(v9, v3);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for UUID?);
      id v20 = v27;
      if (v22) {
        goto LABEL_15;
      }
    }
    else
    {
    }
    return 0;
  }

  return 1;
}

Swift::Int PKStrokeProviderSliceIdentifierCoherence.hash.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init()();
  type metadata accessor for FinalizedTimestamp();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type FinalizedTimestamp and conformance FinalizedTimestamp, MEMORY[0x263F32F08]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v8 = (objc_class *)type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
  v12.receiver = v0;
  v12.super_class = v8;
  id v9 = objc_msgSendSuper2(&v12, sel_hash);
  Hasher._combine(_:)((Swift::UInt)v9);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v0 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, (uint64_t)v3, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  long long v20 = v15;
  long long v21 = v16;
  uint64_t v22 = v17;
  long long v18 = v13;
  long long v19 = v14;
  return Hasher.finalize()();
}

uint64_t PKStrokeProviderSliceIdentifierCoherence.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v28 = 0;
  unint64_t v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  v12._uint64_t countAndFlagsBits = 60;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  id v27 = v0;
  _print_unlocked<A, B>(_:_:)();
  v13._uint64_t countAndFlagsBits = 1029990688;
  v13._object = (void *)0xE400000000000000;
  String.append(_:)(v13);
  id v14 = objc_msgSend(v0, sel_strokeUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  long long v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v11, v5);
  v17._uint64_t countAndFlagsBits = 4027424;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  objc_msgSend(v1, sel_tStart);
  v18._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 15917;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  objc_msgSend(v1, sel_tEnd);
  v20._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0x6F66736E61727420;
  v21._object = (void *)0xEB000000003D6D72;
  String.append(_:)(v21);
  type metadata accessor for FinalizedTimestamp();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type FinalizedTimestamp and conformance FinalizedTimestamp, MEMORY[0x263F32F08]);
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 0x6B6F727473202C3ELL;
  v23._object = (void *)0xEE003D6174614465;
  String.append(_:)(v23);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v1 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, (uint64_t)v4, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    UUID.init()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v16(v8, v5);
  return v28;
}

Swift::Void __swiftcall PKStrokeProviderSliceIdentifierCoherence.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  Swift::String v13 = (char *)&v21 - v12;
  id v14 = (objc_class *)type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
  v23.receiver = v1;
  v23.super_class = v14;
  objc_msgSendSuper2(&v23, sel_encodeWithCoder_, with.super.isa);
  FinalizedTimestamp.replica.getter();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Swift::String v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v13, v7);
  long long v16 = (void *)MEMORY[0x21054D080](1885688436, 0xE400000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v16];

  uint64_t v17 = FinalizedTimestamp.counter.getter();
  Swift::String v18 = (void *)MEMORY[0x21054D080](1953383284, 0xE400000000000000);
  [(objc_class *)with.super.isa encodeInteger:v17 forKey:v18];

  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v2 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, (uint64_t)v6, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    Class v19 = UUID._bridgeToObjectiveC()().super.isa;
    Swift::String v20 = (void *)MEMORY[0x21054D080](1952531571, 0xE400000000000000);
    [(objc_class *)with.super.isa encodeObject:v19 forKey:v20];

    v22(v10, v7);
  }
}

uint64_t PKStrokeProviderSliceIdentifierCoherence.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v33 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v32 - v6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = type metadata accessor for FinalizedTimestamp();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  Swift::String v15 = (char *)&v32 - v14;
  id v16 = v1;
  uint64_t v17 = (void *)MEMORY[0x21054D080](1885688436, 0xE400000000000000);
  unsigned int v18 = objc_msgSend(a1, sel_containsValueForKey_, v17);

  if (v18)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUUID);
    uint64_t result = NSCoder.decodeObject<A>(of:forKey:)();
    if (!result)
    {
      __break(1u);
      return result;
    }
    Swift::String v20 = (void *)result;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = (void *)MEMORY[0x21054D080](1953383284, 0xE400000000000000);
    objc_msgSend(a1, sel_decodeIntegerForKey_, v21);

    FinalizedTimestamp.init(replica:counter:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))((uint64_t)v16 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_transformTimestamp, v15, v9);
  }
  else
  {
    UUID.init()();
    FinalizedTimestamp.init(replica:counter:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))((uint64_t)v16 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_transformTimestamp, v12, v9);
  }
  uint64_t v22 = v35;
  objc_super v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
  v23(v7, 1, 1, v35);
  Swift::String v24 = (void *)MEMORY[0x21054D080](1952531571, 0xE400000000000000);
  unsigned int v25 = objc_msgSend(a1, sel_containsValueForKey_, v24);

  if (v25)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUUID);
    uint64_t v26 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v26)
    {
      id v27 = (void *)v26;
      uint64_t v28 = (uint64_t)v33;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
      v23((char *)v28, 0, 1, v22);
      outlined init with take of UUID?(v28, (uint64_t)v7);
    }
  }
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>((uint64_t)v7, (uint64_t)v16 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, &demangling cache variable for type metadata for UUID?);

  unint64_t v29 = (objc_class *)type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
  v36.receiver = v16;
  v36.super_class = v29;
  id v30 = objc_msgSendSuper2(&v36, sel_initWithCoder_, a1);

  id v31 = v30;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
  if (v31) {

  }
  return (uint64_t)v31;
}

id PKStrokeProviderSliceIdentifierCoherence.__deallocating_deinit()
{
  return PKStrokeProviderSliceIdentifierCoherence.__deallocating_deinit(type metadata accessor for PKStrokeProviderSliceIdentifierCoherence);
}

id _PKStrokeConcrete.init(stroke:drawing:)(void *a1, void *a2)
{
  uint64_t v54 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  CGFloat v57 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  CGFloat v56 = (char *)v48 - v6;
  *(void *)&long long v52 = type metadata accessor for PKInk();
  uint64_t v7 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v9 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PKStrokePath();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v53 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v18 = objc_msgSend(a1, sel_path);
  static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  id v19 = objc_msgSend(a1, sel__strokeUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class v20 = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v55 = v10;
  uint64_t v22 = v10;
  objc_super v23 = v21;
  v48[1] = v11 + 8;
  v21(v13, v22);
  id v50 = objc_msgSend(a1, sel__flags);
  id v24 = [a1 ink];
  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

  Class v25 = PKInk._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, void))(v7 + 8))(v9, v52);
  objc_msgSend(a1, sel_transform);
  long long v52 = v58;
  long long v49 = v59;
  uint64_t v26 = v60;
  uint64_t v27 = v61;
  uint64_t v28 = v54;
  id v29 = objc_msgSend(a1, sel__substrokesInDrawing_, v54);
  type metadata accessor for PKStroke();
  uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v31 = v28;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg507_sSo17_f15ConcreteC8Papere55E6stroke7drawingAbC0A9CoherenceC_AC09PKDrawingG0Ctcfc06D13D00A0VALXEfU_0lE00sQ0CTf1cn_n(v30, v31);
  swift_bridgeObjectRelease();
  Class v32 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  long long v58 = v52;
  long long v59 = v49;
  uint64_t v60 = v26;
  uint64_t v61 = v27;
  Class v33 = isa;
  id v34 = objc_msgSend(v53, sel_initWithData_id_flags_ink_transform_substrokes_, isa, v20, v50, v25, &v58, v32);

  id v35 = v34;
  id v36 = objc_msgSend(a1, sel__clipPlane);
  objc_msgSend(v35, sel__setClipPlane_, v36);

  id v37 = v35;
  id v38 = objc_msgSend(a1, sel__strokeMask);
  objc_msgSend(v37, sel__setStrokeMask_, v38);

  id v39 = v37;
  Class v40 = (Class)objc_msgSend(a1, sel__groupID);
  if (v40)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v42 = v55;
    CGRect v41 = v56;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v56, v13, v55);
    CGRect v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v43(v41, 0, 1, v42);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v41, 1, v42) == 1)
    {
      Class v40 = 0;
    }
    else
    {
      Class v40 = UUID._bridgeToObjectiveC()().super.isa;
      v23(v41, v42);
    }
  }
  else
  {
    CGRect v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v42 = v55;
    v43(v56, 1, 1, v55);
  }
  uint64_t v44 = v57;
  objc_msgSend(v39, sel__setGroupID_, v40);

  id v45 = v39;
  Class v46 = (Class)objc_msgSend(a1, sel__renderGroupID);
  if (v46)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v44, v13, v42);
    v43(v44, 0, 1, v42);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v44, 1, v42) == 1)
    {
      Class v46 = 0;
    }
    else
    {
      Class v46 = UUID._bridgeToObjectiveC()().super.isa;
      v23(v44, v42);
    }
  }
  else
  {
    v43(v44, 1, 1, v42);
  }
  objc_msgSend(v45, sel__setRenderGroupID_, v46);

  objc_msgSend(v45, sel__setShapeType_, objc_msgSend(a1, sel__shapeType));
  return v45;
}

void PKStrokeCoherenceBase.shared.getter()
{
}

uint64_t PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v104 = a3;
  uint64_t v106 = a1;
  uint64_t v107 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  CGPoint v92 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRKeyPath();
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  MEMORY[0x270FA5388](v7);
  CGPoint v89 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v98 = (uint64_t)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v85);
  uint64_t v86 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v87 = *(void *)(v12 - 8);
  uint64_t v88 = v12;
  MEMORY[0x270FA5388](v12);
  CGAffineTransform v84 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v97 = (uint64_t)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v96 = (uint64_t)&v77 - v20;
  MEMORY[0x270FA5388](v21);
  objc_super v23 = (char *)&v77 - v22;
  uint64_t v24 = *(void *)(a4 + 16);
  uint64_t v25 = type metadata accessor for Capsule();
  uint64_t v105 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  CGAffineTransform v81 = (char *)&v77 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v80 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v83 = (char *)&v77 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  id v31 = (char *)&v77 - v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v99 = (char *)v32;
  uint64_t v100 = v33;
  MEMORY[0x270FA5388](v32);
  id v35 = (char *)&v77 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v36 - 8);
  id v38 = (char *)&v77 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v82);
  uint64_t v93 = (uint64_t)&v77 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v79 = (char *)&v77 - v41;
  MEMORY[0x270FA5388](v42);
  uint64_t v103 = (uint64_t)&v77 - v43;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v94 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v78 = (char *)&v77 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v46);
  uint64_t v48 = (char *)&v77 - v47;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v101 = v24;
  uint64_t v102 = v49;
  Ref.subscript.getter();
  uint64_t v95 = v44;
  CRRegister.value.getter();
  id v50 = v99;
  SharedTagged_2.tagged1.getter();
  uint64_t v51 = v38;
  (*(void (**)(char *, char *))(v100 + 8))(v35, v50);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v53 = *(void *)(v52 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v38, 1, v52) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v38, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v107, v25);
    (*(void (**)(uint64_t))(*(void *)(v102 - 8) + 8))(v106);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v48, v95);
    return 0;
  }
  uint64_t v99 = v48;
  uint64_t v55 = (uint64_t)v79;
  uint64_t v56 = v107;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v51, v52);
  _s8PaperKit14PKStrokeStructVWObTm_0(v55, v103, type metadata accessor for PKStrokeStruct);
  CGFloat v57 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v81, v56, v25);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  long long v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
  long long v59 = (void (**)(char *, uint64_t))(v80 + 8);
  for (uint64_t i = (void (**)(char *, char *, uint64_t))(v80 + 32); ; (*i)(v31, v16, v27))
  {
    swift_getWitnessTable();
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v23, type metadata accessor for PKStrokeInheritedProperties);
    if ((*v58)(v16, 1, v27) == 1) {
      break;
    }
    (*v59)(v31, v27);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  uint64_t v61 = *(char **)(v105 + 8);
  uint64_t v80 = v25;
  v105 += 8;
  CGAffineTransform v81 = v61;
  ((void (*)(char *, uint64_t))v61)(v57, v25);
  outlined init with copy of PKStrokeStruct(v103, v93, type metadata accessor for PKStrokeStruct);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v62 = (uint64_t)v86;
  CRRegister.wrappedValue.getter();
  uint64_t v64 = v87;
  uint64_t v63 = v88;
  CGRect v65 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v84, v62 + *(int *)(v85 + 32), v88);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v62, type metadata accessor for PKStrokeProperties);
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v63);
  Ref.subscript.getter();
  uint64_t v66 = v83;
  CRRegister.wrappedValue.getter();
  Ref.subscript.getter();
  CGRect v67 = *v59;
  (*v59)(v66, v27);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  CGFloat v68 = v89;
  Reference.identity.getter();
  CGFloat v69 = v92;
  CRKeyPath.uuid.getter();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v68, v91);
  uint64_t v70 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48))(v69, 1, v70);
  if (result != 1)
  {
    uint64_t v72 = v94;
    uint64_t v73 = v95;
    id v74 = v78;
    long long v75 = v99;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v78, v99, v95);
    id v76 = objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherence(0));
    id v54 = PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)(v93, v98, v96, v97, v69, v74);
    ((void (*)(uint64_t, uint64_t))v81)(v107, v80);
    (*(void (**)(uint64_t))(*(void *)(v102 - 8) + 8))(v106);
    v67(v31, v27);
    _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v103, type metadata accessor for PKStrokeStruct);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v75, v73);
    return (uint64_t)v54;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PKStrokeCoherenceSubstrokes(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeCoherenceSubstrokes);
}

uint64_t type metadata accessor for PKStrokeCoherenceBase(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeCoherenceBase);
}

void PKStrokeCoherenceBase.init()()
{
}

void PKStrokeCoherenceBase.init(ink:strokePath:transform:mask:)()
{
}

void PKStrokeCoherenceBase.newShared(in:flatten:)()
{
}

uint64_t PKStrokeCoherenceBase._newStroke(withSubstrokes:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v72 = a2;
  uint64_t v5 = type metadata accessor for PKStroke();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v87 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v67 - v9;
  CGPoint v89 = (void (*)(char *, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v11 = *((void *)v89 - 1);
  MEMORY[0x270FA5388](v89);
  uint64_t v88 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v80 = *(void *)(v13 - 8);
  uint64_t v81 = v13;
  MEMORY[0x270FA5388](v13);
  CGFloat v71 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v83 = (char *)&v67 - v16;
  uint64_t v17 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  MEMORY[0x270FA5388](v20 - 8);
  CGFloat v69 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v78 = *(void *)(v22 - 8);
  uint64_t v79 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v70 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  id v74 = (char *)&v67 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v77 = (char *)&v67 - v27;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v75 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v73 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v82 = (char *)&v67 - v30;
  int64_t v31 = *(void *)(a1 + 16);
  uint64_t v32 = MEMORY[0x263F8EE78];
  if (v31)
  {
    CGRect v67 = v19;
    uint64_t v68 = v3;
    uint64_t v92 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
    id v35 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v34 = v6 + 16;
    uint64_t v33 = v35;
    uint64_t v36 = a1 + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v37 = *(void *)(v34 + 56);
    id v38 = (void (**)(char *, uint64_t))(v34 - 8);
    uint64_t v84 = v11 + 32;
    uint64_t v85 = v37;
    uint64_t v86 = v34;
    do
    {
      v33(v10, v36, v5);
      v33(v87, (uint64_t)v10, v5);
      type metadata accessor for PKStrokeCoherenceBase(0);
      uint64_t v39 = swift_dynamicCast();
      uint64_t v40 = v91;
      (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v91) + 0x60))(v39);

      (*v38)(v10, v5);
      uint64_t v32 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1);
        uint64_t v32 = v92;
      }
      unint64_t v42 = *(void *)(v32 + 16);
      unint64_t v41 = *(void *)(v32 + 24);
      if (v42 >= v41 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
        uint64_t v32 = v92;
      }
      *(void *)(v32 + 16) = v42 + 1;
      (*(void (**)(unint64_t, char *, void *))(v11 + 32))(v32+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v42, v88, v89);
      v36 += v85;
      --v31;
    }
    while (v31);
    uint64_t v3 = v68;
  }
  uint64_t v92 = v32;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
  CRSequence.init<A>(_:)();
  uint64_t v43 = v3 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  uint64_t v44 = v77;
  CGPoint v89 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
  uint64_t v45 = v79;
  v89(v77, v43, v79);
  LOBYTE(v91) = 1;
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke();
  SharedTagged_2.init(_:id:)();
  CRRegister.value.setter();
  uint64_t v46 = v3 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  uint64_t v88 = *(char **)(v80 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v88)(v83, v46, v81);
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  uint64_t v48 = v73;
  uint64_t v49 = v76;
  v47(v73, v82, v76);
  id v50 = v74;
  uint64_t v51 = v44;
  uint64_t v52 = (void (*)(char *, char *, uint64_t))v89;
  v89(v74, (uint64_t)v51, v45);
  uint64_t v53 = (char *)objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherenceSubstrokes(0));
  v47(&v53[OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes], v48, v49);
  id v54 = v71;
  uint64_t v55 = v81;
  uint64_t v56 = v88;
  ((void (*)(char *, char *, uint64_t))v88)(v71, v83, v81);
  CGFloat v57 = v70;
  long long v58 = v50;
  uint64_t v59 = v79;
  v52(v70, v58, v79);
  ((void (*)(char *, char *, uint64_t))v56)(&v53[OBJC_IVAR___PKStrokeCoherenceBase_identity], v54, v55);
  v52(&v53[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], v57, v59);
  uint64_t v60 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
  v90.receiver = v53;
  v90.super_class = v60;
  id v61 = objc_msgSendSuper2(&v90, sel_init);
  uint64_t v62 = *(void (**)(char *, uint64_t))(v78 + 8);
  v62(v57, v59);
  uint64_t v63 = *(void (**)(char *, uint64_t))(v80 + 8);
  v63(v54, v55);
  v62(v74, v59);
  uint64_t v64 = *(void (**)(char *, uint64_t))(v75 + 8);
  uint64_t v65 = v76;
  v64(v73, v76);
  v63(v83, v55);
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  v62(v77, v59);
  return ((uint64_t (*)(char *, uint64_t))v64)(v82, v65);
}

void PKStrokeCoherenceBase.concreteStroke(in:)()
{
}

id PKStrokeCoherenceBase.__allocating_init(ink:strokePath:transform:mask:randomSeed:)(uint64_t a1, uint64_t a2, long long *a3, void *a4, uint64_t a5)
{
  long long v19 = a3[1];
  long long v20 = *a3;
  uint64_t v10 = *((void *)a3 + 4);
  uint64_t v11 = *((void *)a3 + 5);
  id v12 = objc_allocWithZone(v5);
  Class isa = PKInk._bridgeToObjectiveC()().super.isa;
  Class v14 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v21[0] = v20;
  v21[1] = v19;
  uint64_t v22 = v10;
  uint64_t v23 = v11;
  id v15 = objc_msgSend(v12, sel_initWithInk_strokePath_transform_mask_randomSeed_, isa, v14, v21, a4, a5);

  uint64_t v16 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  uint64_t v17 = type metadata accessor for PKInk();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
  return v15;
}

void PKStrokeCoherenceBase.init(ink:strokePath:transform:mask:randomSeed:)()
{
}

id PKStrokeCoherenceBase.__allocating_init(data:id:flags:ink:transform:substrokes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  long long v21 = a5[1];
  long long v22 = *a5;
  uint64_t v9 = *((void *)a5 + 4);
  uint64_t v10 = *((void *)a5 + 5);
  id v11 = objc_allocWithZone(v5);
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  Class v13 = UUID._bridgeToObjectiveC()().super.isa;
  Class v14 = PKInk._bridgeToObjectiveC()().super.isa;
  type metadata accessor for PKStroke();
  Class v15 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v24[0] = v22;
  v24[1] = v21;
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  id v16 = objc_msgSend(v11, sel_initWithData_id_flags_ink_transform_substrokes_, isa, v13, a3, v14, v24, v15);

  uint64_t v17 = type metadata accessor for PKInk();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a4, v17);
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a2, v18);
  uint64_t v19 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
  return v16;
}

void PKStrokeCoherenceBase.init(data:id:flags:ink:transform:substrokes:)()
{
}

id PKStrokeCoherenceBase.__deallocating_deinit()
{
  return PKStrokeProviderSliceIdentifierCoherence.__deallocating_deinit(type metadata accessor for PKStrokeCoherenceBase);
}

id PKStrokeProviderSliceIdentifierCoherence.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t PKStrokeCoherenceSubstrokes.newShared(in:flatten:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v54 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  uint64_t v53 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v49 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v45 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v51 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v48 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  id v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v13 - 8);
  Class v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v39 = *(void *)(v16 - 8);
  uint64_t v17 = v39;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v36 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  long long v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  uint64_t v34 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  id v35 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v35(v19, v22, v16);
  uint64_t v23 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  uint64_t v41 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v42 = v10 + 16;
  uint64_t v43 = v24;
  uint64_t v40 = v12;
  v24(v12, v23, v55);
  swift_retain();
  CRKeyPath.init(_:)();
  uint64_t v25 = type metadata accessor for CRKeyPath();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v32 = *(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56);
  uint64_t v33 = v26 + 56;
  v32(v15, 0, 1, v25);
  uint64_t v37 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  Ref.init<A>(_:_:identity:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v2 + OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes, v47);
  v35(v19, v34, v16);
  swift_retain();
  uint64_t v27 = v49;
  CRRegister.value.getter();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v16);
  uint64_t v28 = v52;
  MEMORY[0x21054BD30](v52);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v28);
  v32(v15, 0, 1, v25);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CRSequence<A>, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v29 = v48;
  Ref.init<A>(_:_:identity:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v29, v51);
  v43(v40, v41, v55);
  return Ref.init(id:)();
}

uint64_t one-time initialization function for substrokesInkType()
{
  uint64_t v0 = type metadata accessor for PKInkingTool.InkType();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PKInk();
  __swift_allocate_value_buffer(v4, static PKStrokeCoherenceSubstrokes.substrokesInkType);
  __swift_project_value_buffer(v4, (uint64_t)static PKStrokeCoherenceSubstrokes.substrokesInkType);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F14A48], v0);
  id v5 = objc_msgSend(self, sel_blackColor);
  return PKInk.init(_:color:)();
}

uint64_t PKStrokeCoherenceSubstrokes._substrokes(in:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PKDrawing();
  double v8 = MEMORY[0x270FA5388](v7);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7, v8);
  type metadata accessor for PKDrawingCoherence(0);
  if (!swift_dynamicCast()) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v11 = (void *)v15[3];
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes, v3);
  id v12 = v11;
  uint64_t v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9Coherence10CRSequenceVyAF3RefVyAF10CRRegisterVyAF14SharedTagged_2Vy8PaperKit0I6StrokeVGGGG_06PencilK08PKStrokeVs5NeverOTg503_s8j5Kit27nd32SubstrokesC11_substrokes2inSay06m29B00C0VGAF9PKDrawingV_tFAH0D03f6VyAL10g6VyAL14hi9_2VyAA0M6L9VGGGXEfU_AO0yD0CTf1cn_nTf4ng_n((uint64_t)v6, (uint64_t)v12);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v13;
}

Swift::String __swiftcall PKStrokeCoherenceSubstrokes.description(atDepth:)(Swift::Int atDepth)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  double v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x21054D230](8224, 0xE200000000000000, atDepth, v6);
  unint64_t v11 = v10;
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  v21[1] = v2;
  _print_unlocked<A, B>(_:_:)();
  v12._uint64_t countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v13 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v13, v4);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v15 = v22;
  uint64_t v16 = (void *)v23;
  uint64_t v22 = v9;
  unint64_t v23 = v11;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = v22;
  uint64_t v19 = (void *)v23;
  result._object = v19;
  result._uint64_t countAndFlagsBits = v18;
  return result;
}

id PKStrokeCoherenceSubstrokes.concreteStroke(in:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PKInk();
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  MEMORY[0x270FA5388](v6);
  double v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PKStroke();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  Swift::String v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PKStrokePath();
  uint64_t v40 = *(void *)(v13 - 8);
  uint64_t v41 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v34 - v18;
  id v20 = objc_msgSend(v2, sel__substrokesInDrawing_, a1, v17);
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5013_s8PaperKit27f76CoherenceSubstrokesC14concreteStroke2inSo01_C8ConcreteCAA09PKDrawingD0C_tF06D13B00C0VALXEfU_0iE00sK0CTf1cn_n(v21, a1);
  swift_bridgeObjectRelease();
  if (*(void *)(v22 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, v22 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
    PKStroke.path.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v19, v15, v41);
  }
  else
  {
    PKStrokePath.init()();
  }
  id v23 = objc_msgSend(v2, sel__strokeUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v24 = objc_msgSend(v2, sel__flags);
  id v25 = [v2 ink];
  uint64_t v26 = v37;
  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

  id v27 = objc_allocWithZone(MEMORY[0x263F14C58]);
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  Class v29 = UUID._bridgeToObjectiveC()().super.isa;
  Class v30 = PKInk._bridgeToObjectiveC()().super.isa;
  Class v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v42[0] = 0x3FF0000000000000;
  v42[1] = 0;
  void v42[2] = 0;
  v42[3] = 0x3FF0000000000000;
  v42[4] = 0;
  v42[5] = 0;
  id v32 = objc_msgSend(v27, sel_initWithData_id_flags_ink_transform_substrokes_, isa, v29, v24, v30, v42, v31);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v39);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v41);
  return v32;
}

void PKStrokeCoherenceSubstrokes.init()()
{
}

uint64_t PKStrokeCoherenceSubstrokes.__ivar_destroyer()
{
  uint64_t v1 = v0 + OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(v1, v2);
}

id PKStrokeCoherenceSubstrokes.__deallocating_deinit()
{
  return PKStrokeProviderSliceIdentifierCoherence.__deallocating_deinit(type metadata accessor for PKStrokeCoherenceSubstrokes);
}

uint64_t PKStrokeCoherence._path.getter@<X0>(uint64_t a1@<X8>)
{
  return PKStrokeCoherence._path.getter(&OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct, a1);
}

uint64_t PKStrokeCoherence._path.setter(uint64_t a1)
{
  return PKStrokeCoherence._path.setter(a1, &OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct);
}

uint64_t (*PKStrokeCoherence._path.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t key path setter for PKStrokeCoherence._path : PKStrokeCoherence(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), void *a7, uint64_t (*a8)(void))
{
  uint64_t v13 = a5(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v18 - v14;
  outlined init with copy of PKStrokeStruct(a1, (uint64_t)&v18 - v14, a6);
  uint64_t v16 = *a2 + *a7;
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct((uint64_t)v15, v16, a8);
  return swift_endAccess();
}

uint64_t PKStrokeCoherence.resolvedProperties.getter@<X0>(uint64_t a1@<X8>)
{
  return PKStrokeCoherence._path.getter(&OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties, a1);
}

uint64_t PKStrokeCoherence._path.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of PKStrokeStruct(v6, a3, a2);
}

uint64_t PKStrokeCoherence.resolvedProperties.setter(uint64_t a1)
{
  return PKStrokeCoherence._path.setter(a1, &OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t PKStrokeCoherence._path.setter(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct(a1, v6, a3);
  return swift_endAccess();
}

uint64_t (*PKStrokeCoherence.resolvedProperties.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t PKStrokeCoherence.inheritedProperties.getter@<X0>(uint64_t a1@<X8>)
{
  return PKStrokeCoherence._path.getter(&OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties, a1);
}

uint64_t PKStrokeCoherence.inheritedProperties.setter(uint64_t a1)
{
  return PKStrokeCoherence._path.setter(a1, &OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t (*PKStrokeCoherence.inheritedProperties.modify())()
{
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t PKStrokeCoherenceSubstrokes.shared.getter()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  return Ref.init(id:)();
}

uint64_t PKStrokeCoherence.newShared(in:flatten:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v95 = a2;
  uint64_t v89 = a1;
  uint64_t v115 = a3;
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v110 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  id v109 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v113 = *(void *)(v114 - 8);
  MEMORY[0x270FA5388](v114);
  id v112 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v119 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  uint64_t v104 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v106 = (char *)&v82 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v85 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v103);
  uint64_t v101 = (uint64_t)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v84 = (uint64_t)&v82 - v13;
  uint64_t v121 = type metadata accessor for PKStrokeProperties(0) - 8;
  MEMORY[0x270FA5388](v121);
  id v117 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v124);
  uint64_t v83 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v123 = (uint64_t)&v82 - v17;
  uint64_t v90 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v90);
  uint64_t v122 = (uint64_t (*)(uint64_t))((char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v116 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  uint64_t v86 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v88 = (char *)&v82 - v21;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  id v25 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  id v32 = (char *)&v82 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v118 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v34 = (char *)&v82 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v3 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  uint64_t v98 = v30;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  uint64_t v94 = v35;
  uint64_t v93 = v30 + 16;
  uint64_t v92 = v36;
  v36(v32, v35, v29);
  uint64_t v37 = v3;
  uint64_t v38 = v3 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v100 = v38;
  uint64_t v108 = v22;
  uint64_t v107 = v23 + 16;
  uint64_t v99 = v39;
  v39(v25, v38, v22);
  swift_retain();
  uint64_t v102 = v25;
  CRKeyPath.init(_:)();
  uint64_t v40 = type metadata accessor for CRKeyPath();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(char **)(v41 + 56);
  uint64_t v43 = v41 + 56;
  ((void (*)(char *, void, uint64_t, uint64_t))v42)(v28, 0, 1, v40);
  uint64_t v44 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v96 = v32;
  uint64_t v105 = v29;
  uint64_t v97 = v44;
  Ref.init<A>(_:_:identity:)();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v34, v120);
  uint64_t v45 = v3 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v45, (uint64_t)v122, type metadata accessor for PKStrokePathStruct);
  uint64_t v118 = v37;
  uint64_t v46 = v37 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  uint64_t v120 = v46;
  uint64_t v47 = v123;
  outlined init with copy of PKStrokeStruct(v46, v123, type metadata accessor for PKStrokeStruct);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v48 = (uint64_t)v117;
  CRRegister.wrappedValue.getter();
  uint64_t v49 = v116;
  uint64_t v50 = v86;
  uint64_t v51 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v86, v48 + *(int *)(v121 + 40), v87);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v48, type metadata accessor for PKStrokeProperties);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v47, type metadata accessor for PKStrokeStruct);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<PKStrokePathStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  Reference.identity.getter();
  uint64_t v52 = *(void (**)(char *, uint64_t))(v49 + 8);
  v52(v50, v51);
  uint64_t v121 = v40;
  id v117 = v42;
  uint64_t v116 = v43;
  ((void (*)(char *, void, uint64_t, uint64_t))v42)(v28, 0, 1, v40);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
  uint64_t v53 = v88;
  uint64_t v54 = v28;
  Ref.init<A>(_:_:identity:)();
  uint64_t v55 = v51;
  uint64_t v56 = v91;
  v52(v53, v55);
  if ((v95 & 1) == 0) {
    goto LABEL_3;
  }
  uint64_t v57 = v118 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
  swift_beginAccess();
  uint64_t v58 = v84;
  outlined init with copy of PKStrokeStruct(v57, v84, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  uint64_t v59 = (uint64_t)v85;
  CRRegister.wrappedValue.getter();
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v58, type metadata accessor for PKStrokeInheritedProperties);
  LODWORD(v57) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v59, 1, v56);
  outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  if (v57 != 1)
  {
    uint64_t v71 = v123;
    outlined init with copy of PKStrokeStruct(v120, v123, type metadata accessor for PKStrokeStruct);
    uint64_t v72 = v118 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
    swift_beginAccess();
    outlined init with copy of PKStrokeStruct(v72, v101, type metadata accessor for PKStrokeInheritedProperties);
    swift_retain();
    static CRKeyPath.unique.getter();
    uint64_t v73 = v121;
    ((void (*)(char *, void, uint64_t, uint64_t))v117)(v28, 0, 1, v121);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
    id v74 = v106;
    Ref.init<A>(_:_:identity:)();
    uint64_t v75 = v119;
    (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v104, v74, v56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v56);
    outlined init with copy of PKStrokeStruct(v71, v83, type metadata accessor for PKStrokeStruct);
    uint64_t v76 = v96;
    uint64_t v77 = v105;
    v92(v96, v94, v105);
    swift_retain();
    uint64_t v78 = v109;
    CRRegister.value.getter();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v76, v77);
    uint64_t v79 = v111;
    MEMORY[0x21054BD30](v111);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v78, v79);
    ((void (*)(char *, void, uint64_t, uint64_t))v117)(v28, 0, 1, v73);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
    uint64_t v80 = v112;
    Ref.init<A>(_:_:identity:)();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v80, v114);
    _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v71, type metadata accessor for PKStrokeStruct);
  }
  else
  {
LABEL_3:
    uint64_t v60 = v118 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
    swift_beginAccess();
    outlined init with copy of PKStrokeStruct(v60, v101, type metadata accessor for PKStrokeInheritedProperties);
    uint64_t v122 = type metadata accessor for PKStrokeStruct;
    uint64_t v61 = v123;
    outlined init with copy of PKStrokeStruct(v120, v123, type metadata accessor for PKStrokeStruct);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    uint64_t v62 = v104;
    CRRegister.wrappedValue.getter();
    _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v61, type metadata accessor for PKStrokeStruct);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
    Reference.identity.getter();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v119 + 8);
    v63(v62, v56);
    uint64_t v64 = (void (*)(char *, void, uint64_t, uint64_t))v117;
    ((void (*)(char *, void, uint64_t, uint64_t))v117)(v54, 0, 1, v121);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
    uint64_t v65 = v106;
    Ref.init<A>(_:_:identity:)();
    v63(v65, v56);
    outlined init with copy of PKStrokeStruct(v120, v61, v122);
    uint64_t v66 = v96;
    uint64_t v67 = v105;
    v92(v96, v94, v105);
    swift_retain();
    uint64_t v68 = v109;
    CRRegister.value.getter();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v66, v67);
    uint64_t v69 = v111;
    MEMORY[0x21054BD30](v111);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v68, v69);
    v64(v54, 0, 1, v121);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
    uint64_t v70 = v112;
    Ref.init<A>(_:_:identity:)();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v70, v114);
  }
  v99(v102, v100, v108);
  return Ref.init(id:)();
}

void one-time initialization function for defaultInk()
{
  uint64_t v0 = (void *)*MEMORY[0x263F14CA8];
  uint64_t v1 = self;
  id v2 = v0;
  id v3 = objc_msgSend(v1, sel_blackColor);
  id v4 = objc_msgSend(self, sel_inkWithIdentifier_color_weight_, v2, v3, 0.0);

  static PKStrokeCoherence.defaultInk = (uint64_t)v4;
}

id PKStrokeCoherence.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id PKStrokeCoherence.init()()
{
  uint64_t v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v54 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  MEMORY[0x270FA5388](v55);
  uint64_t v53 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v58 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v57 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v56 = (char *)&v51 - v6;
  uint64_t v7 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v52 = (char **)((char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v66 = *(void *)(v9 - 8);
  uint64_t v67 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v65 = (char *)&v51 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v63 = *(void *)(v14 - 8);
  uint64_t v64 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v60 = (char *)&v51 - v18;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v61 = *(void *)(v19 - 8);
  uint64_t v62 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v51 - v23;
  uint64_t v25 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v51 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v0;
  PKStrokePath.init()();
  _s8PaperKit14PKStrokeStructVWObTm_0((uint64_t)v30, (uint64_t)&v31[OBJC_IVAR___PKStrokeCoherence__path], type metadata accessor for PKStrokePathStruct);
  if (one-time initialization token for defaultInk != -1) {
    swift_once();
  }
  id v32 = (void *)static PKStrokeCoherence.defaultInk;
  long long v70 = 0x3FF0000000000000uLL;
  uint64_t v71 = 0;
  uint64_t v72 = 0x3FF0000000000000;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  id v33 = (id)static PKStrokeCoherence.defaultInk;
  PKStrokeInheritedProperties.init(ink:transform:)(v32, &v70, (uint64_t)v27);
  uint64_t v34 = (uint64_t)&v31[OBJC_IVAR___PKStrokeCoherence_resolvedProperties];
  _s8PaperKit14PKStrokeStructVWObTm_0((uint64_t)v27, (uint64_t)&v31[OBJC_IVAR___PKStrokeCoherence_resolvedProperties], type metadata accessor for PKStrokeInheritedProperties);
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v34, (uint64_t)&v31[OBJC_IVAR___PKStrokeCoherence_inheritedProperties], type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v51 = v24;
  UUID.init()();
  UUID.init()();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
  uint64_t v35 = v60;
  Ref.init(id:)();
  UUID.init()();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v36 = v65;
  Ref.init(id:)();
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v11, v36, v67);
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v16, v35, v64);
  uint64_t v37 = (void (*)(void, void, void))v52;
  PKStrokeStruct.init(inheritedProperties:path:flags:mask:)((uint64_t)v11, (uint64_t)v16, 0, 0, (uint64_t)v52);
  _s8PaperKit14PKStrokeStructVWObTm_0((uint64_t)v37, (uint64_t)&v31[OBJC_IVAR___PKStrokeCoherence_model], type metadata accessor for PKStrokeStruct);

  char v69 = 0;
  uint64_t v52 = *(char ***)(v61 + 16);
  uint64_t v38 = v62;
  ((void (*)(char *, char *, uint64_t))v52)(v21, v24, v62);
  CRKeyPath.init(_:)();
  lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke();
  SharedTagged_2.init(_:id:)();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_2<TaggedStroke> and conformance SharedTagged_2<A>, &demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v39 = v56;
  CRRegister.init(_:)();
  UUID.init()();
  uint64_t v40 = v58;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  uint64_t v42 = v57;
  uint64_t v43 = v59;
  v41(v57, v39, v59);
  ((void (*)(char *, char *, uint64_t))v52)(&v31[OBJC_IVAR___PKStrokeCoherenceBase_identity], v21, v38);
  v41(&v31[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], v42, v43);
  uint64_t v44 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
  v68.receiver = v31;
  v68.super_class = v44;
  id v45 = objc_msgSendSuper2(&v68, sel_init);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v40 + 8);
  v46(v42, v43);
  uint64_t v47 = *(void (**)(char *, uint64_t))(v61 + 8);
  uint64_t v48 = v21;
  uint64_t v49 = v62;
  v47(v48, v62);
  v46(v39, v43);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v67);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v64);
  v47(v51, v49);
  return v45;
}

uint64_t PKStrokeCoherence.init(data:id:flags:ink:transform:substrokes:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  objc_super v68 = a5;
  uint64_t v83 = a4;
  uint64_t v69 = a3;
  uint64_t v84 = a2;
  uint64_t v85 = a1;
  uint64_t v8 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v72 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  MEMORY[0x270FA5388](v73);
  uint64_t v71 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v74 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v75 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v82 = (char *)&v59 - v13;
  uint64_t v14 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v67 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v80 = *(void *)(v19 - 8);
  uint64_t v81 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v66 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v59 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v78 = *(void *)(v24 - 8);
  uint64_t v79 = v24;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v59 - v28;
  uint64_t v70 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v31 = (char *)&v59 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v59 - v33;
  uint64_t v35 = *(void *)(a6 + 16);
  uint64_t v36 = v6;
  uint64_t result = swift_bridgeObjectRelease();
  if (v35)
  {
    __break(1u);
  }
  else
  {
    uint64_t v61 = v34;
    UUID.init()();
    UUID.init()();
    type metadata accessor for PKStrokePathStruct(0);
    uint64_t v38 = v31;
    uint64_t v39 = v36;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
    uint64_t v62 = v29;
    Ref.init(id:)();
    UUID.init()();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
    uint64_t v63 = v23;
    Ref.init(id:)();
    uint64_t v40 = &v36[OBJC_IVAR___PKStrokeCoherence__path];
    uint64_t v64 = type metadata accessor for PKStrokePath();
    uint64_t v65 = *(void *)(v64 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v40, v85, v64);
    v41.super.Class isa = PKInk._bridgeToObjectiveC()().super.isa;
    PKStrokeInheritedProperties.init(ink:transform:)(v41.super.isa, v68, (uint64_t)v18);
    uint64_t v42 = (uint64_t)&v39[OBJC_IVAR___PKStrokeCoherence_resolvedProperties];
    _s8PaperKit14PKStrokeStructVWObTm_0((uint64_t)v18, (uint64_t)&v39[OBJC_IVAR___PKStrokeCoherence_resolvedProperties], type metadata accessor for PKStrokeInheritedProperties);
    swift_beginAccess();
    outlined init with copy of PKStrokeStruct(v42, (uint64_t)&v39[OBJC_IVAR___PKStrokeCoherence_inheritedProperties], type metadata accessor for PKStrokeInheritedProperties);
    uint64_t v43 = (uint64_t)v66;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v66, v23, v81);
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v26, v29, v79);
    uint64_t v44 = v67;
    PKStrokeStruct.init(inheritedProperties:path:flags:mask:)(v43, (uint64_t)v26, v69, 0, v67);
    uint64_t v60 = v39;
    _s8PaperKit14PKStrokeStructVWObTm_0(v44, (uint64_t)&v39[OBJC_IVAR___PKStrokeCoherence_model], type metadata accessor for PKStrokeStruct);

    char v87 = 0;
    id v45 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    uint64_t v46 = v34;
    uint64_t v47 = v70;
    v45(v38, v46, v70);
    CRKeyPath.init(_:)();
    lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke();
    SharedTagged_2.init(_:id:)();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_2<TaggedStroke> and conformance SharedTagged_2<A>, &demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
    uint64_t v48 = v82;
    CRRegister.init(_:)();
    v45(v38, v84, v47);
    uint64_t v50 = v74;
    uint64_t v49 = v75;
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    uint64_t v52 = v76;
    v51(v75, v48, v76);
    uint64_t v53 = v60;
    v45(&v60[OBJC_IVAR___PKStrokeCoherenceBase_identity], v38, v47);
    v51(&v53[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], v49, v52);
    uint64_t v54 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
    v86.receiver = v53;
    v86.super_class = v54;
    id v55 = objc_msgSendSuper2(&v86, sel_init);
    uint64_t v56 = *(void (**)(char *, uint64_t))(v50 + 8);
    v56(v49, v52);
    uint64_t v57 = *(void (**)(char *, uint64_t))(v77 + 8);
    v57(v38, v47);
    uint64_t v58 = type metadata accessor for PKInk();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v83, v58);
    v57(v84, v47);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v85, v64);
    v56(v82, v52);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v63, v81);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v62, v79);
    v57(v61, v47);
    return (uint64_t)v55;
  }
  return result;
}

id PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, char *a6)
{
  uint64_t v7 = v6;
  uint64_t v43 = a6;
  uint64_t v44 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v36 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v42 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = a1;
  outlined init with copy of PKStrokeStruct(a1, (uint64_t)v7 + OBJC_IVAR___PKStrokeCoherence_model, type metadata accessor for PKStrokeStruct);
  uint64_t v39 = a2;
  outlined init with copy of PKStrokeStruct(a2, (uint64_t)v7 + OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct);
  uint64_t v38 = a3;
  outlined init with copy of PKStrokeStruct(a3, (uint64_t)v7 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v37 = a4;
  outlined init with copy of PKStrokeStruct(a4, (uint64_t)v7 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties);
  swift_beginAccess();
  type metadata accessor for PKStrokeInheritedProperties(0);
  uint64_t v17 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  uint64_t v18 = v46;
  swift_endAccess();

  PKInk v41 = v16;
  if (!v18)
  {
    uint64_t v34 = v12;
    if (one-time initialization token for defaultInk != -1) {
      swift_once();
    }
    uint64_t v19 = (void *)static PKStrokeCoherence.defaultInk;
    swift_beginAccess();
    uint64_t v46 = v19;
    id v20 = v19;
    CRRegister.wrappedValue.setter();
    swift_endAccess();
    uint64_t v12 = v34;
    uint64_t v16 = v41;
  }

  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v22 = v35;
  uint64_t v23 = v36;
  v21(v16, (uint64_t)v44, v35);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v24(v42, (uint64_t)v43, v12);
  uint64_t v25 = v16;
  uint64_t v26 = v22;
  v21(&v17[OBJC_IVAR___PKStrokeCoherenceBase_identity], (uint64_t)v25, v22);
  uint64_t v27 = v42;
  v24(&v17[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], (uint64_t)v42, v12);
  uint64_t v28 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
  v45.receiver = v17;
  v45.super_class = v28;
  id v29 = objc_msgSendSuper2(&v45, sel_init);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v23 + 8);
  v30(v27, v12);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v14 + 8);
  v31(v41, v26);
  v30(v43, v12);
  v31(v44, v26);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v37, type metadata accessor for PKStrokeInheritedProperties);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v38, type metadata accessor for PKStrokeInheritedProperties);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v39, type metadata accessor for PKStrokePathStruct);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v40, type metadata accessor for PKStrokeStruct);
  return v29;
}

id PKStrokeCoherenceBase.__allocating_init(ink:strokePath:transform:mask:)(uint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  long long v17 = a3[1];
  long long v18 = *a3;
  uint64_t v8 = *((void *)a3 + 4);
  uint64_t v9 = *((void *)a3 + 5);
  id v10 = objc_allocWithZone(v4);
  Class isa = PKInk._bridgeToObjectiveC()().super.isa;
  Class v12 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v19[0] = v18;
  v19[1] = v17;
  uint64_t v20 = v8;
  uint64_t v21 = v9;
  id v13 = objc_msgSend(v10, sel_initWithInk_strokePath_transform_mask_, isa, v12, v19, a4);

  uint64_t v14 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a2, v14);
  uint64_t v15 = type metadata accessor for PKInk();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
  return v13;
}

void *PKStrokeCoherence.init(ink:strokePath:transform:mask:)(uint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  uint64_t v39 = a3;
  id v40 = a4;
  uint64_t v6 = type metadata accessor for PKStroke();
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v38 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PKInk();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  Class v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PKStrokePath();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void (**)(char *, uint64_t, double))(v17 + 16);
  uint64_t v43 = a2;
  uint64_t v41 = v22;
  v21(v20, a2, v18);
  UUID.init()();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v44 = a1;
  uint64_t v42 = v9;
  v23(v12, a1, v9);
  id v24 = objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherence(0));
  uint64_t v25 = (void *)PKStrokeCoherence.init(data:id:flags:ink:transform:substrokes:)((uint64_t)v20, v15, 0, (uint64_t)v12, v39, MEMORY[0x263F8EE78]);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  if (v40)
  {
    id v26 = v40;
    id v27 = v25;
    static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();
    id v28 = objc_allocWithZone(MEMORY[0x263F14BB8]);
    Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
    id v30 = objc_msgSend(v28, sel_initWithBezierPath_stroke_, v26, isa);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v38);
    type metadata accessor for PKStrokeMaskStruct();
    uint64_t v31 = swift_allocObject();
    if (v30)
    {
      type metadata accessor for PKStrokeMaskWrapper();
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = v30;
      *(void *)(v31 + 16) = v32;
    }
    else
    {
      swift_deallocPartialClassInstance();
      uint64_t v31 = 0;
    }
    swift_beginAccess();
    type metadata accessor for PKStrokeStruct(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    uint64_t v33 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
    *(void *)(v34 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 36)) = v31;
    v33(v45, 0);
    swift_endAccess();

    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v43, v41);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v44, v42);
  return v25;
}

void PKStrokeCoherence.parentStrokeForInsertion(in:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PKInk();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PKStrokePath();
  double v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(v1, sel_path, v9);
  static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init()();
  id v13 = [v1 ink];
  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

  long long v17 = 0x3FF0000000000000uLL;
  uint64_t v18 = 0;
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v14 = (objc_class *)type metadata accessor for PKStrokeCoherence(0);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  id v15 = objc_allocWithZone(v14);
  uint64_t v16 = (void *)PKStrokeCoherence.init(data:id:flags:ink:transform:substrokes:)((uint64_t)v11, v7, 0, (uint64_t)v4, &v17, MEMORY[0x263F8EE78]);
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();
}

id PKStrokeCoherence.mutableCopy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v2 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v32 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v7 - 8);
  double v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v30 - v11;
  uint64_t v13 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v13 - 8);
  id v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v1 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v19, (uint64_t)v18, type metadata accessor for PKStrokeStruct);
  uint64_t v20 = v1 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v20, (uint64_t)v15, type metadata accessor for PKStrokePathStruct);
  uint64_t v21 = v1 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v21, (uint64_t)v12, type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v22 = v1 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v22, (uint64_t)v9, type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v23 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v23, v31);
  uint64_t v24 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  uint64_t v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v32, v24, v33);
  id v26 = (objc_class *)type metadata accessor for PKStrokeCoherence(0);
  id v27 = objc_allocWithZone(v26);
  id result = PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)((uint64_t)v18, (uint64_t)v15, (uint64_t)v12, (uint64_t)v9, v6, v25);
  id v29 = v34;
  v34[3] = v26;
  *id v29 = result;
  return result;
}

void PKStrokeCoherence.copyForMutation()(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v2 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v30 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v7 - 8);
  double v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v28 - v11;
  uint64_t v13 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v13 - 8);
  id v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v1 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v19, (uint64_t)v18, type metadata accessor for PKStrokeStruct);
  uint64_t v20 = v1 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v20, (uint64_t)v15, type metadata accessor for PKStrokePathStruct);
  uint64_t v21 = v1 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v21, (uint64_t)v12, type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v22 = v1 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v22, (uint64_t)v9, type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v23 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v23, v29);
  uint64_t v24 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  uint64_t v25 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v30, v24, v31);
  id v26 = objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherence(0));
  id v27 = PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)((uint64_t)v18, (uint64_t)v15, (uint64_t)v12, (uint64_t)v9, v6, v25);
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();
}

void PKStrokeCoherence.copyForSubstroke()(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v51 = a1;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v46 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  objc_super v45 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v50 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v48 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v44 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v44);
  uint64_t v41 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v40 = (uint64_t)&v39 - v13;
  uint64_t v15 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v39 - v22;
  uint64_t v24 = v2 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v24, (uint64_t)v23, type metadata accessor for PKStrokeStruct);
  uint64_t v25 = v2 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v25, (uint64_t)v17, type metadata accessor for PKStrokePathStruct);
  uint64_t v26 = v2 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v26, (uint64_t)v14, type metadata accessor for PKStrokeInheritedProperties);
  outlined init with copy of PKStrokeStruct(v24, (uint64_t)v20, type metadata accessor for PKStrokeStruct);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v20, type metadata accessor for PKStrokeStruct);
  uint64_t v27 = v41;
  PKStrokeInheritedProperties.init(inherited:)((uint64_t)v10, v41);
  uint64_t v28 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  uint64_t v29 = v42;
  uint64_t v30 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v5, v28, v43);
  uint64_t v31 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  uint64_t v32 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v31, v47);
  id v33 = objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherence(0));
  id v34 = PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)((uint64_t)v23, (uint64_t)v17, v40, v27, v5, v32);
  UUID.init()();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
  Ref.init(id:)();
  swift_beginAccess();
  uint64_t v36 = v49;
  uint64_t v35 = v50;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v48, v10, v50);
  CRRegister.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v35);
  swift_endAccess();
  UUID.init()();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v30);
  objc_msgSend(v34, sel__setStrokeUUID_, isa);

  id v38 = v34;
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();
}

Class @objc PKStrokeCoherence.copyForMutation()(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = type metadata accessor for PKStroke();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = a1;
  a3();

  Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return isa;
}

id PKStrokeCoherence.sliceIdentifier(forTStart:tEnd:)(double a1, double a2)
{
  uint64_t v5 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v49 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FinalizedTimestamp();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  MEMORY[0x270FA5388](v10);
  objc_super v45 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v48 = (char *)&v44 - v13;
  uint64_t v14 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v46 = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v23;
  uint64_t v24 = v2;
  uint64_t v25 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  uint64_t v44 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v25, v20);
  uint64_t v26 = v24 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  uint64_t v27 = v24;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v26, (uint64_t)v19, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.timestamp.getter();
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v19, type metadata accessor for PKStrokeInheritedProperties);
  outlined init with copy of PKStrokeStruct(v26, (uint64_t)v16, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  uint64_t v28 = v45;
  CRRegister.timestamp.getter();
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v16, type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v29 = v27 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v29, (uint64_t)v7, type metadata accessor for PKStrokePathStruct);
  Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  id v31 = [(objc_class *)isa _strokeDataUUID];

  uint64_t v32 = (uint64_t)v49;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v33 = type metadata accessor for PKStrokePath();
  (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(v7, v33);
  uint64_t v34 = v46;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v32, 0, 1, v46);
  uint64_t v35 = (objc_class *)type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
  id v36 = objc_allocWithZone(v35);
  uint64_t v37 = v50;
  uint64_t v38 = v51;
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 16))((uint64_t)v36 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_transformTimestamp, v28, v51);
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v32, (uint64_t)v36 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, &demangling cache variable for type metadata for UUID?);
  uint64_t v39 = v47;
  Class v40 = UUID._bridgeToObjectiveC()().super.isa;
  v52.receiver = v36;
  v52.super_class = v35;
  id v41 = objc_msgSendSuper2(&v52, sel_initWithUUID_tStart_tEnd_, v40, a1, a2);

  outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for UUID?);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
  v42(v28, v38);
  v42(v48, v38);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v34);
  return v41;
}

uint64_t PKStrokeCoherence.ink.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v37 = type metadata accessor for PKInk();
  uint64_t v4 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t)v2 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v10, (uint64_t)v9, type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v11 = (uint64_t)v2 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct((uint64_t)v9, v11, type metadata accessor for PKStrokeInheritedProperties);
  swift_endAccess();
  uint64_t v36 = a1;
  Class isa = PKInk._bridgeToObjectiveC()().super.isa;
  swift_beginAccess();
  v38[0] = isa;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.setter();
  swift_endAccess();
  outlined init with copy of PKStrokeStruct(v11, (uint64_t)v9, type metadata accessor for PKStrokeInheritedProperties);
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct((uint64_t)v9, v10, type metadata accessor for PKStrokeInheritedProperties);
  swift_endAccess();
  id v13 = [v2 ink];
  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

  Class v14 = PKInk._bridgeToObjectiveC()().super.isa;
  id v15 = [(objc_class *)v14 behavior];

  uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v35 = v4 + 8;
  v16(v6, v37);
  objc_msgSend(v15, sel_inkTransform);
  CGFloat a = v39.a;
  CGFloat b = v39.b;
  CGFloat c = v39.c;
  CGFloat d = v39.d;
  tdouble x = v39.tx;
  tdouble y = v39.ty;

  swift_beginAccess();
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v23 = (void (*)(Class *, void))CRRegister.wrappedValue.modify();
  uint64_t v25 = v24;
  v39.CGFloat a = a;
  v39.CGFloat b = b;
  v39.CGFloat c = c;
  v39.CGFloat d = d;
  v39.tdouble x = tx;
  v39.tdouble y = ty;
  IsIdentitdouble y = CGAffineTransformIsIdentity(&v39);
  CGFloat v27 = 0.0;
  CGFloat v28 = 0.0;
  CGFloat v29 = 0.0;
  CGFloat v30 = 0.0;
  CGFloat v31 = 0.0;
  CGFloat v32 = 0.0;
  if (!IsIdentity)
  {
    CGFloat v27 = a;
    CGFloat v28 = b;
    CGFloat v29 = c;
    CGFloat v30 = d;
    CGFloat v31 = tx;
    CGFloat v32 = ty;
  }
  uint64_t v33 = v25 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 44);
  *(CGFloat *)uint64_t v33 = v27;
  *(CGFloat *)(v33 + 8) = v28;
  *(CGFloat *)(v33 + 16) = v29;
  *(CGFloat *)(v33 + 24) = v30;
  *(CGFloat *)(v33 + 32) = v31;
  *(CGFloat *)(v33 + 40) = v32;
  *(unsigned char *)(v33 + 48) = IsIdentity;
  v23(v38, 0);
  swift_endAccess();
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v36, v37);
}

void @objc PKStrokeCoherence.ink.setter(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(void), void (*a5)(void *), void (*a6)(char *))
{
  uint64_t v10 = a4(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v15 - v11;
  id v13 = a3;
  id v14 = a1;
  a5(a3);

  a6(v12);
}

uint64_t PKStrokeCoherence.path.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for PKStrokePath();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v3, a1, v4);
  swift_endAccess();
  uint64_t v6 = v1 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  uint64_t v7 = *(int *)(type metadata accessor for PKStrokeStruct(0) + 24);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v8 = *(void *)(v6 + v7);
    long long v9 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    *(_OWORD *)(v8 + 16) = *MEMORY[0x263F001A0];
    *(_OWORD *)(v8 + 32) = v9;
  }
  else
  {
    type metadata accessor for PKStrokeStructCache();
    uint64_t v10 = swift_allocObject();
    long long v11 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    *(_OWORD *)(v10 + 16) = *MEMORY[0x263F001A0];
    *(_OWORD *)(v10 + 32) = v11;
    *(void *)(v10 + 48) = 0;
    *(void *)(v10 + 56) = 0x3FF0000000000000;
    *(void *)(v10 + 64) = 0;
    *(void *)(v10 + 72) = 0;
    *(void *)(v10 + 80) = 0x3FF0000000000000;
    *(void *)(v10 + 88) = 0;
    *(void *)(v10 + 96) = 0;
    *(void *)(v10 + 104) = 0;
    *(void *)(v6 + v7) = v10;
    swift_release();
  }
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

id PKStrokeCoherence._strokeMask.getter()
{
  uint64_t v1 = type metadata accessor for PKStrokeProperties(0);
  uint64_t v2 = v1 - 8;
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v8, (uint64_t)v7, type metadata accessor for PKStrokeStruct);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.getter();
  uint64_t v9 = *(void *)&v4[*(int *)(v2 + 44)];
  swift_retain();
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v4, type metadata accessor for PKStrokeProperties);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v7, type metadata accessor for PKStrokeStruct);
  if (!v9) {
    return 0;
  }
  id v10 = *(id *)(*(void *)(v9 + 16) + 16);
  swift_release();
  return v10;
}

Class @objc PKStrokeCoherenceSubstrokes._strokeUUID.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v7.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7.super.isa;
}

uint64_t PKStrokeCoherence._strokeUUID.setter(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  MEMORY[0x270FA5388](v4);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v5 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  NSUUID v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, a1, v8, v10);
  uint64_t v13 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v13, v12, v8);
  swift_endAccess();
  char v19 = 0;
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke();
  SharedTagged_2.init(_:id:)();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_2<TaggedStroke> and conformance SharedTagged_2<A>, &demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  CRRegister.init(_:)();
  uint64_t v14 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v14, v7, v18);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v17, v8);
}

void PKStrokeCoherence.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FinalizedTimestamp();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v53 = (char *)&v46 - v7;
  uint64_t v52 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v52);
  uint64_t v51 = (uint64_t)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v50 = (uint64_t)&v46 - v10;
  uint64_t v11 = type metadata accessor for PKInk();
  uint64_t v54 = *(void (***)(char *, uint64_t))(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v46 - v19;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)&v59, &demangling cache variable for type metadata for Any?);
  if (!*((void *)&v60 + 1))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v59, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for PKStrokeCoherence(0);
  if (swift_dynamicCast())
  {
    uint64_t v49 = v11;
    uint64_t v21 = (char *)v56;
    if ((char *)v56 == v55)
    {

      return;
    }
    uint64_t v47 = v5;
    uint64_t v48 = v3;
    uint64_t v46 = v2;
    uint64_t v22 = &v55[OBJC_IVAR___PKStrokeCoherenceBase_identity];
    swift_beginAccess();
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v23(v20, v22, v14);
    uint64_t v24 = &v21[OBJC_IVAR___PKStrokeCoherenceBase_identity];
    swift_beginAccess();
    v23(v17, v24, v14);
    LOBYTE(v24) = static UUID.== infix(_:_:)();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
    v25(v17, v14);
    v25(v20, v14);
    if ((v24 & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v26 = v55;
    id v27 = [v55 ink];
    id v28 = [v21 ink];
    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = PKInk._bridgeToObjectiveC()().super.isa;
    v54[1](v13, v49);
    unsigned __int8 v30 = objc_msgSend(v27, sel_isEqualUnweightedInk_, isa);

    if ((v30 & 1) == 0
      || (objc_msgSend(v26, sel_transform),
          long long v56 = v59,
          long long v57 = v60,
          long long v58 = v61,
          objc_msgSend(v21, sel_transform),
          (static CGAffineTransform.== infix(_:_:)() & 1) == 0))
    {
LABEL_12:

      return;
    }
    id v31 = objc_msgSend(v26, sel_path);
    id v32 = objc_msgSend(v31, sel__strokeDataUUID);

    if (v32)
    {
      uint64_t v54 = (void (**)(char *, uint64_t))v21;
      id v33 = objc_msgSend(v21, sel_path);
      id v34 = objc_msgSend(v33, sel__strokeDataUUID);

      uint64_t v35 = v48;
      uint64_t v36 = v47;
      if (v34)
      {
        unsigned __int8 v37 = objc_msgSend(v32, sel_isEqual_, v34);

        if (v37)
        {
          uint64_t v38 = &v55[OBJC_IVAR___PKStrokeCoherence_model];
          swift_beginAccess();
          uint64_t v39 = v50;
          outlined init with copy of PKStrokeStruct((uint64_t)v38, v50, type metadata accessor for PKStrokeStruct);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
          Class v40 = v53;
          CRRegister.timestamp.getter();
          _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v39, type metadata accessor for PKStrokeStruct);
          id v41 = v54;
          uint64_t v42 = (char *)v54 + OBJC_IVAR___PKStrokeCoherence_model;
          swift_beginAccess();
          uint64_t v43 = v51;
          outlined init with copy of PKStrokeStruct((uint64_t)v42, v51, type metadata accessor for PKStrokeStruct);
          CRRegister.timestamp.getter();
          _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v43, type metadata accessor for PKStrokeStruct);
          static FinalizedTimestamp.== infix(_:_:)();

          uint64_t v44 = *(void (**)(char *, uint64_t))(v35 + 8);
          uint64_t v45 = v46;
          v44(v36, v46);
          v44(v40, v45);
        }
        else
        {
        }
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t @objc PKStrokeProviderSliceIdentifierCoherence.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  return v8 & 1;
}

id PKStrokeCoherence._clipPlane.getter()
{
  uint64_t v1 = type metadata accessor for PKStrokeProperties(0);
  uint64_t v2 = v1 - 8;
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v8, (uint64_t)v7, type metadata accessor for PKStrokeStruct);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.getter();
  uint64_t v9 = &v4[*(int *)(v2 + 48)];
  double v10 = *(double *)v9;
  double v11 = *((double *)v9 + 1);
  double v12 = *((double *)v9 + 2);
  double v13 = *((double *)v9 + 3);
  LOBYTE(v2) = v9[32];
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v4, type metadata accessor for PKStrokeProperties);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v7, type metadata accessor for PKStrokeStruct);
  id result = 0;
  if ((v2 & 1) == 0) {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x263F14C50]), sel_initWithOrigin_normal_, v10, v11, v12, v13);
  }
  return result;
}

void PKStrokeCoherence._clipPlane.setter(void *a1)
{
  if (a1)
  {
    objc_msgSend(a1, sel_origin);
    uint64_t v3 = v2;
    uint64_t v5 = v4;
    objc_msgSend(a1, sel_normal);
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    swift_beginAccess();
    type metadata accessor for PKStrokeStruct(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    double v10 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
    uint64_t v12 = v11 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 40);
    *(void *)uint64_t v12 = v3;
    *(void *)(v12 + 8) = v5;
    *(void *)(v12 + 16) = v7;
    *(void *)(v12 + 24) = v9;
    *(unsigned char *)(v12 + 32) = 0;
    v10(v16, 0);
    swift_endAccess();
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for PKStrokeStruct(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    double v13 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
    uint64_t v15 = v14 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 40);
    *(_OWORD *)uint64_t v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(unsigned char *)(v15 + 32) = 1;
    v13(v16, 0);
    swift_endAccess();
  }
}

uint64_t PKStrokeCoherence._transform.setter(long long *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v2 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v7, (uint64_t)v6, type metadata accessor for PKStrokeInheritedProperties);
  uint64_t v8 = v2 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct((uint64_t)v6, v8, type metadata accessor for PKStrokeInheritedProperties);
  long long v9 = a1[2];
  long long v10 = *a1;
  v18[1] = a1[1];
  void v18[2] = v9;
  v18[0] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  CRRegister.wrappedValue.setter();
  swift_endAccess();
  outlined init with copy of PKStrokeStruct(v8, (uint64_t)v6, type metadata accessor for PKStrokeInheritedProperties);
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct((uint64_t)v6, v7, type metadata accessor for PKStrokeInheritedProperties);
  swift_endAccess();
  uint64_t v11 = v2 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  uint64_t v12 = *(int *)(type metadata accessor for PKStrokeStruct(0) + 24);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v13 = *(void *)(v11 + v12);
    long long v14 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    *(_OWORD *)(v13 + 16) = *MEMORY[0x263F001A0];
    *(_OWORD *)(v13 + 32) = v14;
  }
  else
  {
    type metadata accessor for PKStrokeStructCache();
    uint64_t v15 = swift_allocObject();
    long long v16 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    *(_OWORD *)(v15 + 16) = *MEMORY[0x263F001A0];
    *(_OWORD *)(v15 + 32) = v16;
    *(void *)(v15 + 48) = 0;
    *(void *)(v15 + 56) = 0x3FF0000000000000;
    *(void *)(v15 + 64) = 0;
    *(void *)(v15 + 72) = 0;
    *(void *)(v15 + 80) = 0x3FF0000000000000;
    *(void *)(v15 + 88) = 0;
    *(void *)(v15 + 96) = 0;
    *(void *)(v15 + 104) = 0;
    *(void *)(v11 + v12) = v15;
    swift_release();
  }
  return swift_endAccess();
}

uint64_t PKStrokeCoherence._bounds.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  double v40 = a4;
  double v39 = a3;
  uint64_t v8 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v8);
  long long v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v14 - 8);
  long long v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v5 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v20, (uint64_t)v19, type metadata accessor for PKStrokeStruct);
  uint64_t v21 = v5 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v21, (uint64_t)v16, type metadata accessor for PKStrokePathStruct);
  v22.super.Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  uint64_t v23 = type metadata accessor for PKStrokePath();
  (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v16, v23);
  uint64_t v24 = v5 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v24, (uint64_t)v13, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  CRRegister.wrappedValue.getter();
  uint64_t v25 = v41;
  uint64_t v26 = v42;
  uint64_t v27 = v43;
  uint64_t v28 = v44;
  uint64_t v29 = v45;
  uint64_t v30 = v46;
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v13, type metadata accessor for PKStrokeInheritedProperties);
  outlined init with copy of PKStrokeStruct(v24, (uint64_t)v10, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  id v31 = v41;
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v10, type metadata accessor for PKStrokeInheritedProperties);
  if (one-time initialization token for unfairLock != -1) {
    swift_once();
  }
  swift_beginAccess();
  os_unfair_lock_lock(&static PKStrokeStruct.unfairLock);
  swift_endAccess();
  uint64_t v32 = *(void *)&v19[*(int *)(v17 + 24)];
  *(double *)(v32 + 16) = a1;
  *(double *)(v32 + 24) = a2;
  double v33 = v40;
  *(double *)(v32 + 32) = v39;
  *(double *)(v32 + 40) = v33;
  id v34 = *(void **)(v32 + 48);
  uint64_t v35 = *(void **)(v32 + 104);
  *(PKStrokePath *)(v32 + 48) = v22;
  *(void *)(v32 + 56) = v25;
  *(void *)(v32 + 64) = v26;
  *(void *)(v32 + 72) = v27;
  *(void *)(v32 + 80) = v28;
  *(void *)(v32 + 88) = v29;
  *(void *)(v32 + 96) = v30;
  *(void *)(v32 + 104) = v31;
  uint64_t v36 = v22.super.isa;
  id v37 = v31;

  swift_beginAccess();
  os_unfair_lock_unlock(&static PKStrokeStruct.unfairLock);
  swift_endAccess();

  return _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v19, type metadata accessor for PKStrokeStruct);
}

double PKStrokeCoherence.renderBounds.getter()
{
  uint64_t v1 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = &v17[-v5];
  uint64_t v7 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = (uint64_t)v0 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v10, (uint64_t)v9, type metadata accessor for PKStrokeStruct);
  uint64_t v11 = (objc_class *)objc_msgSend(v0, sel_path);
  uint64_t v12 = (uint64_t)v0 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeStruct(v12, (uint64_t)v6, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  uint64_t v13 = v18;
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v6, type metadata accessor for PKStrokeInheritedProperties);
  outlined init with copy of PKStrokeStruct(v12, (uint64_t)v3, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  CRRegister.wrappedValue.getter();
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v3, type metadata accessor for PKStrokeInheritedProperties);
  v20.value.super.Class isa = (Class)&v18;
  v19.value.super.Class isa = v11;
  v19.is_nil = (char)v13;
  *(void *)&double v15 = (unint64_t)PKStrokeStruct.bounds(path:ink:transform:)(v19, v20, v14);

  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0((uint64_t)v9, type metadata accessor for PKStrokeStruct);
  return v15;
}

uint64_t PKStrokeCoherence.compare(to:)()
{
  id v1 = objc_msgSend(v0, sel_path);
  objc_msgSend(v1, sel__timestamp);
  double v3 = v2;

  Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
  [(objc_class *)isa timestamp];
  double v6 = v5;

  if (v3 < v6) {
    return -1;
  }
  id v8 = objc_msgSend(v0, sel_path);
  objc_msgSend(v8, sel__timestamp);
  double v10 = v9;

  Class v11 = PKStroke._bridgeToObjectiveC()().super.isa;
  [(objc_class *)v11 timestamp];
  double v13 = v12;

  return v13 < v10;
}

id PKStrokeCoherence.concreteStroke(in:)(void *a1)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _PKStrokeConcrete);
  return _PKStrokeConcrete.init(stroke:drawing:)(v1, a1);
}

uint64_t PKStrokeCoherence.__ivar_destroyer()
{
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v0 + OBJC_IVAR___PKStrokeCoherence_model, type metadata accessor for PKStrokeStruct);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v0 + OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct);
  _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v0 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties);
  return _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(v0 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties);
}

id PKStrokeCoherence.__deallocating_deinit()
{
  return PKStrokeProviderSliceIdentifierCoherence.__deallocating_deinit(type metadata accessor for PKStrokeCoherence);
}

unint64_t lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke()
{
  unint64_t result = lazy protocol witness table cache variable for type TaggedStroke and conformance TaggedStroke;
  if (!lazy protocol witness table cache variable for type TaggedStroke and conformance TaggedStroke)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedStroke and conformance TaggedStroke);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg507_sSo17_f15ConcreteC8Papere55E6stroke7drawingAbC0A9CoherenceC_AC09PKDrawingG0Ctcfc06D13D00A0VALXEfU_0lE00sQ0CTf1cn_nTf4ng_n(uint64_t a1, void *a2)
{
  id v28 = a2;
  uint64_t v4 = type metadata accessor for PKStroke();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v27 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  double v9 = (char *)&v22 - v8;
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v22 = v2;
    uint64_t v30 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    unint64_t v25 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v12 = a1 + v25;
    uint64_t v13 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _PKStrokeConcrete);
    double v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v14 = v5 + 16;
    uint64_t v23 = v15;
    uint64_t v24 = v13;
    uint64_t v16 = *(void *)(v14 + 56);
    uint64_t v17 = (void (**)(unint64_t, char *, uint64_t))(v14 + 16);
    uint64_t v26 = v14;
    do
    {
      v23(v27, v12, v4);
      type metadata accessor for PKStrokeCoherence(0);
      swift_dynamicCast();
      uint64_t v18 = (void *)_PKStrokeConcrete.init(stroke:drawing:)(v29, v28);
      static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v11 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v30;
      }
      unint64_t v20 = *(void *)(v11 + 16);
      unint64_t v19 = *(void *)(v11 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v11 = v30;
      }
      *(void *)(v11 + 16) = v20 + 1;
      (*v17)(v11 + v25 + v20 * v16, v9, v4);
      uint64_t v30 = v11;
      v12 += v16;
      --v10;
    }
    while (v10);
  }
  return v11;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5013_s8PaperKit27f76CoherenceSubstrokesC14concreteStroke2inSo01_C8ConcreteCAA09PKDrawingD0C_tF06D13B00C0VALXEfU_0iE00sK0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for PKStroke();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v26 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  double v9 = (char *)v22 - v8;
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    v22[1] = v2;
    uint64_t v29 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    unint64_t v23 = (*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64);
    uint64_t v24 = v13;
    uint64_t v14 = a1 + v23;
    uint64_t v15 = *(void *)(v12 + 56);
    uint64_t v16 = (void (**)(unint64_t, char *, uint64_t))(v12 + 16);
    uint64_t v25 = v12;
    do
    {
      v24(v26, v14, v4);
      type metadata accessor for PKStrokeCoherenceBase(0);
      swift_dynamicCast();
      uint64_t v17 = v28;
      uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v28) + 0xA8))(v27);

      static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v29;
      }
      unint64_t v20 = *(void *)(v11 + 16);
      unint64_t v19 = *(void *)(v11 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v11 = v29;
      }
      *(void *)(v11 + 16) = v20 + 1;
      (*v16)(v11 + v23 + v20 * v15, v9, v4);
      uint64_t v29 = v11;
      v14 += v15;
      --v10;
    }
    while (v10);
  }
  return v11;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9Coherence10CRSequenceVyAF3RefVyAF10CRRegisterVyAF14SharedTagged_2Vy8PaperKit0I6StrokeVGGGG_06PencilK08PKStrokeVs5NeverOTg503_s8j5Kit27nd32SubstrokesC11_substrokes2inSay06m29B00C0VGAF9PKDrawingV_tFAH0D03f6VyAL10g6VyAL14hi9_2VyAA0M6L9VGGGXEfU_AO0yD0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = a2;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v47 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  long long v58 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for PKStroke();
  uint64_t v60 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  uint64_t v64 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v51 = (char *)&v45 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v7 - 8);
  double v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v45 - v11;
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v49 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v50 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v46 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CRSequence<A>, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v19 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v65 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 & ~(v19 >> 63), 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  uint64_t v62 = v18;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v19 < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
  if (v19)
  {
    uint64_t v54 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v48 + OBJC_IVAR___PKDrawingCoherence_model);
    swift_beginAccess();
    long long v56 = (uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
    uint64_t v21 = (void (**)(char *, unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v47 + 16);
    uint64_t v22 = (void (**)(uint64_t, uint64_t))(v47 + 8);
    unint64_t v23 = (void (**)(char *, uint64_t))(v49 + 8);
    uint64_t v53 = (void (*)(uint64_t, uint64_t, uint64_t))(v60 + 32);
    uint64_t v55 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CRSequence<A>.Iterator, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v24 = v61;
      uint64_t result = (*v56)(v9, 1, v61);
      if (result == 1) {
        goto LABEL_22;
      }
      uint64_t v26 = (uint64_t)v58;
      uint64_t v25 = v59;
      (*v21)(v58, v54, v59);
      specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)((uint64_t)v9, v26, v64);
      (*v22)(v26, v25);
      (*v23)(v9, v24);
      uint64_t v27 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
        uint64_t v27 = v65;
      }
      unint64_t v29 = *(void *)(v27 + 16);
      unint64_t v28 = *(void *)(v27 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        uint64_t v27 = v65;
      }
      *(void *)(v27 + 16) = v29 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v60 + 32))(v27+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v29, v64, v57);
      uint64_t v65 = v27;
      if (!--v19) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v27 = v65;
LABEL_12:
  uint64_t v64 = v48 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v30 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CRSequence<A>.Iterator, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v31 = (uint64_t)v52;
  long long v56 = (uint64_t (**)(char *, uint64_t, uint64_t))v30;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v32 = v49;
  uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  uint64_t v55 = v49 + 48;
  if (v54(v31, 1, v61) != 1)
  {
    id v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
    uint64_t v33 = v32 + 32;
    uint64_t v53 = v34;
    uint64_t v49 = v47 + 16;
    uint64_t v35 = (void (**)(uint64_t, uint64_t))(v47 + 8);
    uint64_t v36 = (void (**)(uint64_t, uint64_t))(v33 - 24);
    uint64_t v48 = v60 + 32;
    uint64_t v37 = (uint64_t)v50;
    uint64_t v38 = (uint64_t)v51;
    uint64_t v39 = v61;
    do
    {
      uint64_t v40 = v33;
      v53(v37, v31, v39);
      uint64_t v42 = (uint64_t)v58;
      uint64_t v41 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))v49)(v58, v64, v59);
      specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)(v37, v42, v38);
      (*v35)(v42, v41);
      (*v36)(v37, v39);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
        uint64_t v27 = v65;
      }
      unint64_t v44 = *(void *)(v27 + 16);
      unint64_t v43 = *(void *)(v27 + 24);
      if (v44 >= v43 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
        uint64_t v27 = v65;
      }
      *(void *)(v27 + 16) = v44 + 1;
      uint64_t v38 = (uint64_t)v51;
      (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v27+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v44, v51, v57);
      uint64_t v65 = v27;
      uint64_t v31 = (uint64_t)v52;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v39 = v61;
      uint64_t v33 = v40;
    }
    while (v54(v31, 1, v61) != 1);
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v62, v63);
  outlined destroy of StocksKitCurrencyCache.Provider?(v31, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  return v27;
}

uint64_t outlined init with copy of PKStrokeStruct(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of PKStrokePathStruct(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t _s8PaperKit14PKStrokeStructVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for PKStrokeProviderSliceIdentifierCoherence);
}

uint64_t outlined assign with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t specialized PKStrokeCoherence._strokeMask.setter(void *a1)
{
  type metadata accessor for PKStrokeMaskStruct();
  uint64_t v3 = swift_allocObject();
  if (a1)
  {
    type metadata accessor for PKStrokeMaskWrapper();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a1;
    *(void *)(v3 + 16) = v4;
  }
  else
  {
    swift_deallocPartialClassInstance();
    uint64_t v3 = 0;
  }
  uint64_t v5 = v1 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for PKStrokeStruct(0);
  id v7 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v8 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
  *(void *)(v9 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 36)) = v3;
  v8(v16, 0);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  uint64_t v10 = *(int *)(v6 + 24);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v11 = *(void *)(v5 + v10);
    long long v12 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    *(_OWORD *)(v11 + 16) = *MEMORY[0x263F001A0];
    *(_OWORD *)(v11 + 32) = v12;
  }
  else
  {
    type metadata accessor for PKStrokeStructCache();
    uint64_t v13 = swift_allocObject();
    long long v14 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
    *(_OWORD *)(v13 + 16) = *MEMORY[0x263F001A0];
    *(_OWORD *)(v13 + 32) = v14;
    *(void *)(v13 + 48) = 0;
    *(void *)(v13 + 56) = 0x3FF0000000000000;
    *(void *)(v13 + 64) = 0;
    *(void *)(v13 + 72) = 0;
    *(void *)(v13 + 80) = 0x3FF0000000000000;
    *(void *)(v13 + 88) = 0;
    *(void *)(v13 + 96) = 0;
    *(void *)(v13 + 104) = 0;
    *(void *)(v5 + v10) = v13;
    swift_release();
  }
  return swift_endAccess();
}

uint64_t sub_20C5522FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm_2(a1, &OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct, a2);
}

uint64_t sub_20C55231C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeCoherence._path : PKStrokeCoherence(a1, a2, a3, a4, type metadata accessor for PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, &OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct);
}

uint64_t sub_20C552378@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm_2(a1, &OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties, a2);
}

uint64_t keypath_getTm_2@<X0>(void *a1@<X0>, void *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1 + *a2;
  swift_beginAccess();
  return outlined init with copy of PKStrokeStruct(v6, a4, a3);
}

uint64_t sub_20C5523FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeCoherence._path : PKStrokeCoherence(a1, a2, a3, a4, type metadata accessor for PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, &OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t sub_20C552458@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm_2(a1, &OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties, a2);
}

uint64_t sub_20C552478(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeCoherence._path : PKStrokeCoherence(a1, a2, a3, a4, type metadata accessor for PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, &OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t ObjC metadata update function for PKStrokeProviderSliceIdentifierCoherence()
{
  return type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
}

uint64_t type metadata completion function for PKStrokeProviderSliceIdentifierCoherence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PKStrokeProviderSliceIdentifierCoherence(a1, a2, a3, MEMORY[0x263F32F08], (uint64_t (*)(uint64_t))type metadata accessor for UUID?);
}

uint64_t ObjC metadata update function for PKStrokeCoherenceBase()
{
  return type metadata accessor for PKStrokeCoherenceBase(0);
}

uint64_t type metadata completion function for PKStrokeCoherenceBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PKStrokeProviderSliceIdentifierCoherence(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x263F07508]);
}

uint64_t type metadata completion function for PKStrokeProviderSliceIdentifierCoherence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319);
  if (v7 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v8 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t method lookup function for PKStrokeCoherenceBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PKStrokeCoherenceBase);
}

void type metadata accessor for CRRegister<SharedTagged_2<TaggedStroke>>()
{
  if (!lazy cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_2<TaggedStroke> and conformance SharedTagged_2<A>, &demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
    unint64_t v0 = type metadata accessor for CRRegister();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    }
  }
}

uint64_t ObjC metadata update function for PKStrokeCoherenceSubstrokes()
{
  return type metadata accessor for PKStrokeCoherenceSubstrokes(0);
}

void type metadata completion function for PKStrokeCoherenceSubstrokes()
{
  type metadata accessor for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PKStrokeCoherenceSubstrokes(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PKStrokeCoherenceSubstrokes);
}

void type metadata accessor for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>()
{
  if (!lazy cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    unint64_t v0 = type metadata accessor for CRSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    }
  }
}

uint64_t ObjC metadata update function for PKStrokeCoherence()
{
  return type metadata accessor for PKStrokeCoherence(0);
}

uint64_t type metadata completion function for PKStrokeCoherence()
{
  uint64_t result = type metadata accessor for PKStrokeStruct(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PKStrokePath();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for PKStrokeInheritedProperties(319);
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t method lookup function for PKStrokeCoherence(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PKStrokeCoherence);
}

uint64_t dispatch thunk of PKStrokeCoherence._path.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of PKStrokeCoherence._path.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of PKStrokeCoherence._path.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of PKStrokeCoherence.resolvedProperties.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of PKStrokeCoherence.resolvedProperties.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of PKStrokeCoherence.resolvedProperties.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of PKStrokeCoherence.inheritedProperties.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of PKStrokeCoherence.inheritedProperties.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of PKStrokeCoherence.inheritedProperties.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t _s8PaperKit27PKStrokeInheritedPropertiesVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall CanvasGenerationTool.keyboardWillShowNotification(_:)(NSNotification a1)
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  id v4 = v1;
  uint64_t v5 = a1.super.isa;
  uint64_t v6 = (char *)v4;
  unint64_t v7 = v5;
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(void *)&v62.CGFloat a = v11;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v12 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x800000020C859870, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2080;
    *(void *)&long long v65 = [(objc_class *)v7 name];
    type metadata accessor for NSNotificationName(0);
    uint64_t v14 = String.init<A>(describing:)();
    *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v8, v9, "%s - %s: (notification = %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v11, -1, -1);
    MEMORY[0x210550270](v10, -1, -1);
  }
  else
  {
  }
  double x = *(double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
  double y = *(double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 8];
  double width = *(double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 16];
  double height = *(double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 24];
  objc_msgSend(v6, sel_bounds, *(void *)&v62.a);
  double v21 = v20;
  if (CGRect.isFinite.getter(x, y, width, height))
  {
    double v22 = *(double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth];
    if (v22 > 0.0 && v21 > 0.0)
    {
      CGAffineTransformMakeScale(&v62, v21 / v22, v21 / v22);
      v67.origin.double x = x;
      v67.origin.double y = y;
      v67.size.double width = width;
      v67.size.double height = height;
      CGRect v68 = CGRectApplyAffineTransform(v67, &v62);
      double x = v68.origin.x;
      double y = v68.origin.y;
      double width = v68.size.width;
      double height = v68.size.height;
    }
  }
  v69.origin.double x = x;
  v69.origin.double y = y;
  v69.size.double width = width;
  v69.size.double height = height;
  if (!CGRectEqualToRect(v69, *MEMORY[0x263F001A0]))
  {
    uint64_t v31 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
    if (!v31)
    {
      unint64_t v23 = v6;
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        *(void *)&v62.CGFloat a = v27;
        *(_DWORD *)uint64_t v26 = 136315138;
        uint64_t v38 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v30 = "%s returning (magicGenerativeVC is nil)";
        goto LABEL_20;
      }
      goto LABEL_21;
    }
    unint64_t v23 = v31;
    id v32 = [(objc_class *)v7 userInfo];
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v35;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v34 + 16)
        && (unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v62), (v37 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v34 + 56) + 32 * v36, (uint64_t)&v65);
      }
      else
      {
        long long v65 = 0u;
        long long v66 = 0u;
      }
      outlined destroy of AnyHashable((uint64_t)&v62);
      if (*((void *)&v66 + 1))
      {
        if ((swift_dynamicCast() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
        double v40 = *(double *)&v63;
        uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v64 = v41;
        AnyHashable.init<A>(_:)();
        if (*(void *)(v34 + 16)
          && (unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v62), (v43 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v34 + 56) + 32 * v42, (uint64_t)&v65);
        }
        else
        {
          long long v65 = 0u;
          long long v66 = 0u;
        }
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)&v62);
        if (*((void *)&v66 + 1))
        {
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_47;
          }
          uint64_t v44 = v63;
          id v45 = [(objc_class *)v7 userInfo];
          if (v45)
          {
            uint64_t v46 = v45;
            uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v64 = v48;
            AnyHashable.init<A>(_:)();
            if (*(void *)(v47 + 16)
              && (unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v62), (v50 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(v47 + 56) + 32 * v49, (uint64_t)&v65);
            }
            else
            {
              long long v65 = 0u;
              long long v66 = 0u;
            }
            swift_bridgeObjectRelease();
            outlined destroy of AnyHashable((uint64_t)&v62);
            if (*((void *)&v66 + 1))
            {
              type metadata accessor for CGRect(0);
              if (swift_dynamicCast())
              {
                CGPoint v51 = *(CGPoint *)&v62.a;
                CGSize v52 = *(CGSize *)&v62.c;
                if ((unint64_t)(v44 - 1) >= 3) {
                  uint64_t v53 = 4;
                }
                else {
                  uint64_t v53 = ((v44 - 1) << 16) + 65540;
                }
                objc_msgSend(v23, sel_magicViewFullFrame);
                CGRectGetHeight(v70);
                v71.origin = v51;
                v71.size = v52;
                double v54 = CGRectGetHeight(v71);
                CanvasGenerationTool.updateScrollViewLayout(_:animationDuration:animationCurveOptions:)(v53, v54, v40);
                if (v54 <= 100.0) {
                  CanvasGenerationTool.hideBlurEffect(animationDuration:)(0.0);
                }
                else {
                  CanvasGenerationTool.showBlurEffect(animationDuration:)(v40);
                }
                goto LABEL_50;
              }
              goto LABEL_47;
            }
          }
          else
          {
            long long v65 = 0u;
            long long v66 = 0u;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      outlined destroy of Any?((uint64_t)&v65);
    }
LABEL_47:
    uint64_t v55 = v6;
    long long v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      long long v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      *(void *)&v62.CGFloat a = v59;
      *(_DWORD *)long long v58 = 136315138;
      uint64_t v60 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v56, v57, "%s returning (userInfo does not contain valid information)", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x210550270](v59, -1, -1);
      MEMORY[0x210550270](v58, -1, -1);
    }
    else
    {
    }
    goto LABEL_50;
  }
  unint64_t v23 = v6;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(void *)&v62.CGFloat a = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v28 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)&long long v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    uint64_t v30 = "%s returning (generationFrame is nil)";
LABEL_20:
    _os_log_impl(&dword_20C2D7000, v24, v25, v30, v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x210550270](v27, -1, -1);
    MEMORY[0x210550270](v26, -1, -1);

    return;
  }
LABEL_21:

LABEL_50:
}

Swift::Void __swiftcall CanvasGenerationTool.keyboardWillHideNotification(_:)(NSNotification a1)
{
  if (one-time initialization token for generativeLogger != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  id v4 = v1;
  uint64_t v5 = a1.super.isa;
  uint64_t v6 = (char *)v4;
  unint64_t v7 = v5;
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(void *)&v47.CGFloat a = v11;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v12 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(void *)&long long v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)&v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    *(void *)&long long v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x800000020C859840, (uint64_t *)&v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2080;
    *(void *)&long long v50 = [(objc_class *)v7 name];
    type metadata accessor for NSNotificationName(0);
    uint64_t v14 = String.init<A>(describing:)();
    *(void *)&long long v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)&v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20C2D7000, v8, v9, "%s - %s: (notification = %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x210550270](v11, -1, -1);
    MEMORY[0x210550270](v10, -1, -1);
  }
  else
  {
  }
  double x = *(double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame];
  double y = *(double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 8];
  double width = *(double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 16];
  double height = *(double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrame + 24];
  objc_msgSend(v6, sel_bounds);
  double v21 = v20;
  if (CGRect.isFinite.getter(x, y, width, height))
  {
    double v22 = *(double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_initialGenerationFrameViewWidth];
    if (v22 > 0.0 && v21 > 0.0)
    {
      CGAffineTransformMakeScale(&v47, v21 / v22, v21 / v22);
      v52.origin.double x = x;
      v52.origin.double y = y;
      v52.size.double width = width;
      v52.size.double height = height;
      CGRect v53 = CGRectApplyAffineTransform(v52, &v47);
      double x = v53.origin.x;
      double y = v53.origin.y;
      double width = v53.size.width;
      double height = v53.size.height;
    }
  }
  v54.origin.double x = x;
  v54.origin.double y = y;
  v54.size.double width = width;
  v54.size.double height = height;
  if (CGRectEqualToRect(v54, *MEMORY[0x263F001A0]))
  {
    unint64_t v23 = v6;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(void *)&v47.CGFloat a = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v28 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)&long long v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v30 = "%s returning (generationFrame is nil)";
LABEL_20:
      _os_log_impl(&dword_20C2D7000, v24, v25, v30, v26, 0xCu);
LABEL_39:
      swift_arrayDestroy();
      MEMORY[0x210550270](v27, -1, -1);
      MEMORY[0x210550270](v26, -1, -1);

      return;
    }
    goto LABEL_40;
  }
  if (!*(void *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC])
  {
    unint64_t v23 = v6;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(void *)&v47.CGFloat a = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v37 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)&long long v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v30 = "%s returning (magicGenerativeVC is nil)";
      goto LABEL_20;
    }
    goto LABEL_40;
  }
  id v31 = [(objc_class *)v7 userInfo];
  if (!v31)
  {
LABEL_37:
    unint64_t v23 = v6;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v44))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(void *)&v47.CGFloat a = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v45 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(void *)&long long v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20C2D7000, v24, v44, "%s returning (userInfo does not contain valid information)", v26, 0xCu);
      goto LABEL_39;
    }
LABEL_40:

    return;
  }
  id v32 = v31;
  uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v34;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v33 + 16) && (unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v47), (v36 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v33 + 56) + 32 * v35, (uint64_t)&v50);
  }
  else
  {
    long long v50 = 0u;
    long long v51 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v47);
  if (!*((void *)&v51 + 1))
  {
    swift_bridgeObjectRelease();
LABEL_36:
    outlined destroy of Any?((uint64_t)&v50);
    goto LABEL_37;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  double v39 = *(double *)&v48;
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v40;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v33 + 16) && (unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v47), (v42 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v33 + 56) + 32 * v41, (uint64_t)&v50);
  }
  else
  {
    long long v50 = 0u;
    long long v51 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&v47);
  if (!*((void *)&v51 + 1)) {
    goto LABEL_36;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_37;
  }
  if ((unint64_t)(v48 - 1) >= 3) {
    uint64_t v43 = 4;
  }
  else {
    uint64_t v43 = ((v48 - 1) << 16) + 65540;
  }
  CanvasGenerationTool.updateScrollViewLayout(_:animationDuration:animationCurveOptions:)(v43, 0.0, v39);
  CanvasGenerationTool.hideBlurEffect(animationDuration:)(v39);
}

uint64_t specialized CRRegister<>.requiredContentVersion<A>(in:)(uint64_t a1)
{
  uint64_t v133 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v98 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v128 = (char *)&v94 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v109 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  unint64_t v132 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v131 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v107 = *(void *)(v108 - 8);
  MEMORY[0x270FA5388](v108);
  uint64_t v106 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v105 = *(void *)(v130 - 8);
  MEMORY[0x270FA5388](v130);
  CGRect v129 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v119 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  uint64_t v123 = *(void *)(v10 - 8);
  uint64_t v124 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v116 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v104 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v100);
  uint64_t v101 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v102 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  uint64_t v99 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v113 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v114);
  uint64_t v115 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  id v134 = (char *)&v94 - v20;
  uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  double v125 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v110 - 8);
  MEMORY[0x270FA5388](v110);
  uint64_t v111 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v112 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  id v135 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v94 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  char v36 = (char *)&v94 - v35;
  uint64_t v37 = v1;
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  uint64_t v121 = *(void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v122 = v27;
  uint64_t v117 = v25 + 8;
  uint64_t v118 = v24;
  v121(v27, v24);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v30, 1, v38) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  }
  else
  {
    uint64_t v94 = v31;
    uint64_t v127 = v1;
    uint64_t v40 = type metadata accessor for PKDrawingStruct();
    uint64_t v41 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    uint64_t v42 = v133;
    uint64_t v97 = v40;
    uint64_t v96 = v41;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v38);
    uint64_t v43 = (uint64_t)v36;
    outlined init with take of PKStrokeStruct((uint64_t)v33, (uint64_t)v36);
    os_log_type_t v44 = v111;
    uint64_t v45 = v110;
    (*((void (**)(char *, uint64_t, uint64_t))v125 + 2))(v111, v42, v110);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    uint64_t v95 = v43;
    CRRegister.wrappedValue.getter();
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct> and conformance Capsule<A>, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
    unint64_t v46 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48);
    CGAffineTransform v47 = (void (**)(char *, uint64_t))(v112 + 8);
    uint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v112 + 32);
    uint64_t v49 = v45;
    long long v50 = v44;
    uint64_t v51 = (uint64_t)v113;
    uint64_t v52 = (uint64_t)v134;
    while (1)
    {
      CGRect v53 = v50;
      uint64_t v54 = v49;
      Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      CRRegister.wrappedValue.getter();
      outlined destroy of PKDrawingStruct(v52, type metadata accessor for PKStrokeInheritedProperties);
      if ((*v46)(v51, 1, v22) == 1) {
        break;
      }
      uint64_t v55 = v135;
      (*v47)(v135, v22);
      (*v48)(v55, v51, v22);
      uint64_t v49 = v54;
      long long v50 = v53;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v51, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    (*((void (**)(char *, uint64_t))v125 + 1))(v53, v54);
    uint64_t v56 = (uint64_t)v115;
    os_log_type_t v57 = v135;
    Ref.subscript.getter();
    (*v47)(v57, v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    CRRegister.wrappedValue.getter();
    long long v58 = v136;
    outlined destroy of PKDrawingStruct(v56, type metadata accessor for PKStrokeInheritedProperties);
    if (v58)
    {
      uint64_t v59 = self;
      uint64_t v60 = v95;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
      uint64_t v61 = (uint64_t)v101;
      CRRegister.wrappedValue.getter();
      uint64_t v62 = v102;
      uint64_t v63 = v99;
      uint64_t v64 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v99, v61 + *(int *)(v100 + 32), v103);
      outlined destroy of PKDrawingStruct(v61, type metadata accessor for PKStrokeProperties);
      long long v65 = v104;
      Ref.subscript.getter();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
      Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
      uint64_t v67 = type metadata accessor for PKStrokePath();
      (*(void (**)(char *, uint64_t))(*(void *)(v67 - 8) + 8))(v65, v67);
      uint64_t v68 = (uint64_t)objc_msgSend(v59, sel__requiredContentVersionForStrokePath_ink_, isa, v58);

      outlined destroy of PKDrawingStruct(v60, type metadata accessor for PKStrokeStruct);
      return v68;
    }
    outlined destroy of PKDrawingStruct(v95, type metadata accessor for PKStrokeStruct);
    uint64_t v37 = v127;
  }
  uint64_t v70 = (uint64_t)v119;
  uint64_t v69 = v120;
  uint64_t v72 = v131;
  CGRect v71 = v132;
  uint64_t v74 = v122;
  uint64_t v73 = v123;
  uint64_t v75 = v118;
  CRRegister.value.getter();
  SharedTagged_2.tagged2.getter();
  v121(v74, v75);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v70, 1, v124) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v70, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    return 1;
  }
  else
  {
    uint64_t v76 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v116, v70, v124);
    uint64_t v77 = type metadata accessor for PKDrawingStruct();
    uint64_t v78 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    uint64_t v79 = v106;
    Ref.subscript.getter();
    uint64_t v80 = v108;
    CRSequence.makeIterator()();
    (*(void (**)(char *, uint64_t))(v107 + 8))(v79, v80);
    CRSequence.Iterator.next()();
    uint64_t v81 = v109;
    uint64_t v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 48);
    uint64_t v68 = 1;
    if (v82(v72, 1, v69) != 1)
    {
      id v134 = (char *)v78;
      id v135 = (char *)v77;
      uint64_t v127 = v76;
      uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
      uint64_t v83 = v81 + 32;
      double v125 = v82;
      double v126 = v84;
      uint64_t v85 = (void (**)(char *, uint64_t))(v98 + 8);
      objc_super v86 = (void (**)(char *, uint64_t))(v83 - 24);
      uint64_t v68 = 1;
      uint64_t v87 = v133;
      do
      {
        uint64_t v89 = v83;
        v126(v71, v72, v69);
        uint64_t v90 = v69;
        uint64_t v91 = v128;
        Ref.subscript.getter();
        uint64_t v92 = specialized CRRegister<>.requiredContentVersion<A>(in:)(v87);
        (*v85)(v91, v127);
        if (v68 >= v92)
        {
          (*v86)(v71, v90);
          uint64_t v69 = v90;
        }
        else
        {
          (*v86)(v71, v90);
          uint64_t v68 = v92;
          uint64_t v69 = v90;
          if (v92 == 3) {
            break;
          }
        }
        uint64_t v72 = v131;
        CRSequence.Iterator.next()();
        unsigned int v88 = v125(v72, 1, v69);
        uint64_t v83 = v89;
        CGRect v71 = v132;
      }
      while (v88 != 1);
    }
    (*(void (**)(char *, uint64_t))(v105 + 8))(v129, v130);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v116, v124);
  }
  return v68;
}

id specialized PKStrokeStruct.init<A>(stroke:in:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v96 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v93 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v92 = (uint64_t)&v73 - v8;
  uint64_t v87 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v87);
  uint64_t v84 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v88 = *(void *)(v10 - 8);
  uint64_t v89 = v10;
  MEMORY[0x270FA5388](v10);
  objc_super v86 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v90 = *(void *)(v12 - 8);
  uint64_t v91 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v83 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for PKStrokePath();
  uint64_t v78 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v77 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v82);
  uint64_t v80 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v99 = *(void *)(v16 - 8);
  uint64_t v100 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v97 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v79 = (char *)&v73 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v98 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  uint64_t v27 = (char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v73 - v29;
  uint64_t v31 = type metadata accessor for PKStrokeStruct(0);
  uint64_t v32 = *(int *)(v31 + 24);
  type metadata accessor for PKStrokeStructCache();
  uint64_t v33 = swift_allocObject();
  long long v34 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  *(_OWORD *)(v33 + 16) = *MEMORY[0x263F001A0];
  *(_OWORD *)(v33 + 32) = v34;
  *(void *)(v33 + 48) = 0;
  *(void *)(v33 + 56) = 0x3FF0000000000000;
  *(void *)(v33 + 64) = 0;
  *(void *)(v33 + 72) = 0;
  *(void *)(v33 + 80) = 0x3FF0000000000000;
  *(void *)(v33 + 88) = 0;
  *(void *)(v33 + 96) = 0;
  *(void *)(v33 + 104) = 0;
  *(void *)(a3 + v32) = v33;
  uint64_t v85 = v31;
  uint64_t v35 = *(int *)(v31 + 28);
  uint64_t v95 = a3;
  *(void *)(a3 + v35) = MEMORY[0x263F8EE80];
  char v36 = a1;
  id result = [a1 ink];
  if (result)
  {
    uint64_t v38 = result;
    objc_msgSend(a1, sel_transform);
    PKStrokeInheritedProperties.init(ink:transform:)(v38, &v101, (uint64_t)v25);
    static CRKeyPath.unique.getter();
    uint64_t v39 = type metadata accessor for CRKeyPath();
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v74 = *(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56);
    uint64_t v41 = v36;
    uint64_t v75 = v40 + 56;
    v74(v22, 0, 1, v39);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeInheritedProperties);
    swift_retain();
    Ref.init<A>(_:_:identity:)();
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v27, v30, v94);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
    CRRegister.init(_:)();
    swift_retain();
    id v42 = objc_msgSend(v36, sel_path);
    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

    id v43 = objc_msgSend(v36, sel_path);
    os_log_type_t v44 = v77;
    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
    id v46 = [(objc_class *)isa _strokeDataUUID];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v44, v81);
    CRKeyPath.init(_:)();
    v74(v22, 0, 1, v39);
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
    CGAffineTransform v47 = v79;
    Ref.init<A>(_:_:identity:)();
    id v48 = objc_msgSend(v41, sel__flags);
    id v49 = objc_msgSend(v41, sel__groupID);
    uint64_t v50 = v95;
    uint64_t v51 = v47;
    if (v49)
    {
      uint64_t v52 = v49;
      uint64_t v53 = v92;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56);
      v54(v53, 0, 1, v91);
    }
    else
    {
      uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56);
      v54(v92, 1, 1, v91);
    }
    uint64_t v55 = v93;
    id v56 = objc_msgSend(v41, sel__renderGroupID);
    uint64_t v76 = v30;
    if (v56)
    {
      os_log_type_t v57 = v56;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v58 = 0;
    }
    else
    {
      uint64_t v58 = 1;
    }
    v54(v55, v58, 1, v91);
    id v59 = objc_msgSend(v41, sel__shapeType);
    (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v97, v51, v100);
    id v60 = objc_msgSend(v41, sel__strokeMask);
    type metadata accessor for PKStrokeMaskStruct();
    uint64_t v61 = swift_allocObject();
    uint64_t v62 = v50;
    uint64_t v63 = v51;
    if (v60)
    {
      type metadata accessor for PKStrokeMaskWrapper();
      uint64_t v64 = swift_allocObject();
      *(void *)(v64 + 16) = v60;
      *(void *)(v61 + 16) = v64;
    }
    else
    {
      swift_deallocPartialClassInstance();
      uint64_t v61 = 0;
    }
    unint64_t v65 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    long long v66 = v84;
    *(void *)uint64_t v84 = v48;
    uint64_t v67 = (int *)v87;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v92, (uint64_t)&v66[*(int *)(v87 + 20)], &demangling cache variable for type metadata for UUID?);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v93, (uint64_t)&v66[v67[6]], &demangling cache variable for type metadata for UUID?);
    *(void *)&v66[v67[7]] = v59;
    uint64_t v69 = v99;
    uint64_t v68 = v100;
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(&v66[v67[8]], v97, v100);
    *(void *)&v66[v67[9]] = v61;
    uint64_t v70 = &v66[v67[10]];
    *(_OWORD *)uint64_t v70 = 0u;
    *((_OWORD *)v70 + 1) = 0u;
    v70[32] = 1;
    CGRect v71 = &v66[v67[11]];
    *((_OWORD *)v71 + 1) = 0u;
    *((_OWORD *)v71 + 2) = 0u;
    *(_OWORD *)CGRect v71 = 0u;
    v71[48] = 1;
    *(void *)&v66[v67[12]] = v65;
    _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (void (*)(uint64_t))type metadata accessor for PKStrokeProperties);
    uint64_t v72 = v86;
    CRRegister.init(_:)();

    swift_release();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v63, v68);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v76, v94);
    return (id)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v88 + 32))(v62 + *(int *)(v85 + 20), v72, v89);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id PKDrawingCoherence.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id PKDrawingCoherence.__allocating_init(model:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = &v3[OBJC_IVAR___PKDrawingCoherence_model];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  v9.receiver = v3;
  v9.super_class = v1;
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

uint64_t PKDrawingCoherence.__allocating_init(concreteDrawing:)(void *a1)
{
  uint64_t v2 = specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(a1);

  return v2;
}

uint64_t specialized PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v101 = a1;
  uint64_t v102 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v88 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CRKeyPath();
  uint64_t v86 = *(void *)(v4 - 8);
  uint64_t v87 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v85 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v94 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v81);
  uint64_t v82 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v83 = *(void *)(v9 - 8);
  uint64_t v84 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v80 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PKStrokeInheritedProperties(0);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v93 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v92 = (uint64_t)&v73 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v73 - v19;
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v100 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v76 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v77 = *(char **)(v22 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v79 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v103 = (char *)&v73 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v95 = v26;
  uint64_t v96 = v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v32 = (char *)&v73 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for PKStrokeStruct(0);
  uint64_t v33 = MEMORY[0x270FA5388](v78);
  uint64_t v89 = (uint64_t)&v73 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v75 = (char *)&v73 - v36;
  MEMORY[0x270FA5388](v35);
  uint64_t v99 = (uint64_t)&v73 - v37;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v90 = *(void *)(v38 - 8);
  uint64_t v39 = MEMORY[0x270FA5388](v38);
  uint64_t v74 = (char *)&v73 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  id v42 = (char *)&v73 - v41;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v44 = type metadata accessor for PKDrawingStruct();
  uint64_t v45 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  uint64_t v97 = (void (*)(char *, uint64_t))v44;
  Ref.subscript.getter();
  uint64_t v91 = v38;
  CRRegister.value.getter();
  uint64_t v46 = v95;
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v29, v46);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v32, 1, v47) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v32, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v102, v98);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v101, v43);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v42, v91);
    return 0;
  }
  uint64_t v96 = v43;
  uint64_t v73 = v42;
  uint64_t v50 = (uint64_t)v75;
  uint64_t v95 = v45;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v47);
  outlined init with take of PKStrokeStruct(v50, v99);
  uint64_t v51 = v76;
  uint64_t v52 = v98;
  (*(void (**)(void))(v100 + 16))();
  uint64_t v75 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct> and conformance Capsule<A>, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v53 = (unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
  uint64_t v54 = (void (**)(char *, uint64_t))(v77 + 8);
  for (uint64_t i = (void (**)(char *, char *, uint64_t))(v77 + 32); ; (*i)(v56, v13, v22))
  {
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKDrawingStruct((uint64_t)v20, type metadata accessor for PKStrokeInheritedProperties);
    if ((*v53)(v13, 1, v22) == 1) {
      break;
    }
    id v56 = v103;
    (*v54)(v103, v22);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  uint64_t v77 = *(char **)(v100 + 8);
  v100 += 8;
  ((void (*)(char *, uint64_t))v77)(v51, v52);
  outlined init with copy of PKStrokeStruct(v99, v89);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  uint64_t v57 = (uint64_t)v82;
  CRRegister.wrappedValue.getter();
  uint64_t v59 = v83;
  uint64_t v58 = v84;
  id v60 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v80, v57 + *(int *)(v81 + 32), v84);
  outlined destroy of PKDrawingStruct(v57, type metadata accessor for PKStrokeProperties);
  uint64_t v61 = v102;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v58);
  Ref.subscript.getter();
  uint64_t v62 = v79;
  CRRegister.wrappedValue.getter();
  Ref.subscript.getter();
  uint64_t v97 = *v54;
  v97(v62, v22);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v63 = v85;
  uint64_t v64 = v96;
  Reference.identity.getter();
  unint64_t v65 = v88;
  CRKeyPath.uuid.getter();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v63, v87);
  uint64_t v66 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 48))(v65, 1, v66);
  if (result != 1)
  {
    uint64_t v69 = v90;
    uint64_t v68 = v91;
    uint64_t v70 = v74;
    CGRect v71 = v73;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v74, v73, v91);
    id v72 = objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherence(0));
    id v49 = PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)(v89, v94, v92, v93, v65, v70);
    ((void (*)(uint64_t, uint64_t))v77)(v61, v98);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(v101, v64);
    v97(v103, v22);
    outlined destroy of PKDrawingStruct(v99, type metadata accessor for PKStrokeStruct);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v71, v68);
    return (uint64_t)v49;
  }
  __break(1u);
  return result;
}

id PKDrawingCoherenceVersion.init(coder:)(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = v1;
  id v8 = objc_msgSend(a1, sel_decodeDataObject);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    UUID.init(_:)(v10, v12);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))((uint64_t)v7 + OBJC_IVAR___PKDrawingCoherenceVersion_versionUUID, v6, v3);

    uint64_t v13 = (objc_class *)type metadata accessor for PKDrawingCoherenceVersion(0);
    v17.receiver = v7;
    v17.super_class = v13;
    id v14 = objc_msgSendSuper2(&v17, sel_init);
  }
  else
  {

    type metadata accessor for PKDrawingCoherenceVersion(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v14;
}

uint64_t PKDrawingCoherenceVersion.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v5, &demangling cache variable for type metadata for Any?);
  if (!v6)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
    goto LABEL_6;
  }
  type metadata accessor for PKDrawingCoherenceVersion(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    char v2 = 0;
    return v2 & 1;
  }
  if (v4 == v1)
  {

    char v2 = 1;
  }
  else
  {
    char v2 = static UUID.== infix(_:_:)();
  }
  return v2 & 1;
}

id PKDrawingCoherenceVersion.__deallocating_deinit()
{
  return PKDrawingCoherenceVersion.__deallocating_deinit(type metadata accessor for PKDrawingCoherenceVersion);
}

void PKCoherenceUndoCommand.apply(to:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for PKDrawing();
  double v7 = MEMORY[0x270FA5388](v6);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v9 + 16))(&v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v6, v7);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  uint64_t v10 = v15;
  uint64_t v11 = v1 + OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo;
  uint64_t v12 = type metadata accessor for CapsuleUndoAction();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(v5, v11, v12);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(v5, 0, 1, v12);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  Capsule.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for CapsuleUndoAction?);
  swift_endAccess();
}

id PKCoherenceUndoCommand.apply(toDrawingReturnInverted:)(uint64_t a1)
{
  uint64_t v48 = type metadata accessor for CapsuleUndoAction();
  uint64_t v2 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v54 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v55 = (char *)v47 - v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v6 - 8);
  id v49 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v47 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v53 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v47 - v15;
  uint64_t v17 = type metadata accessor for PKDrawing();
  double v18 = MEMORY[0x270FA5388](v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17, v18);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  uint64_t v21 = v58;
  uint64_t v22 = &v58[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v23(v16, v22, v11);
  uint64_t v24 = v2;
  uint64_t v25 = v2 + 16;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v27 = v48;
  v47[0] = v26;
  v47[1] = v25;
  v26(v10, (char *)v56 + OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo, v48);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v10, 0, 1, v27);
  swift_beginAccess();
  Capsule.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CapsuleUndoAction?);
  swift_endAccess();
  id v51 = v21;
  objc_msgSend(v21, sel_invalidateVisibleStrokes);
  uint64_t v28 = v53;
  v23(v53, v22, v11);
  uint64_t v29 = (uint64_t)v49;
  uint64_t v52 = v16;
  Capsule.actionUndoingDifference(from:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v50 = v11;
  uint64_t v53 = (char *)(v12 + 8);
  v30(v28, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v29, 1, v27) == 1)
  {
    v30(v52, v50);

    outlined destroy of StocksKitCurrencyCache.Provider?(v29, &demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    uint64_t v32 = v24;
    uint64_t v33 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v55, v29, v27);
    uint64_t v34 = (void (*)(char *, char *, uint64_t))v47[0];
    ((void (*)(char *, char *, uint64_t))v47[0])(v54, v33, v27);
    uint64_t v35 = v56;
    id v49 = (char *)objc_msgSend(v56, sel_drawingUUID);
    id v36 = objc_msgSend(v35, sel_actionName);
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;

    id v40 = objc_msgSend(v35, sel_changesVisibleStrokes);
    uint64_t v41 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    id v42 = (char *)objc_allocWithZone(v41);
    id v56 = v30;
    uint64_t v43 = v54;
    v34(&v42[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v54, v27);
    uint64_t v44 = (void *)MEMORY[0x21054D080](v37, v39);
    swift_bridgeObjectRelease();
    v57.receiver = v42;
    v57.super_class = v41;
    id v31 = objc_msgSendSuper2(&v57, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v49, v44, v40);
    swift_unknownObjectRelease();

    uint64_t v45 = *(void (**)(char *, uint64_t))(v32 + 8);
    v45(v43, v27);

    v45(v55, v27);
    v56(v52, v50);
  }
  return v31;
}

id PKCoherenceUndoCommand.__deallocating_deinit()
{
  return PKDrawingCoherenceVersion.__deallocating_deinit(type metadata accessor for PKCoherenceUndoCommand);
}

id PKDrawingCoherenceVersion.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc PKDrawingCoherenceVersion.__ivar_destroyer(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  uint64_t v4 = a1 + *a3;
  uint64_t v5 = a4(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t key path getter for PKDrawingCoherence.model : PKDrawingCoherence@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t key path setter for PKDrawingCoherence.model : PKDrawingCoherence(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  uint64_t v9 = *a2 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v9, v8, v4);
  return swift_endAccess();
}

uint64_t PKDrawingCoherence.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PKDrawingCoherence.model.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*PKDrawingCoherence.model.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

id PKDrawingCoherence.__allocating_init(data:)(uint64_t a1, unint64_t a2)
{
  id v4 = specialized PKDrawingCoherence.__allocating_init(data:)();
  outlined consume of Data._Representation(a1, a2);
  return v4;
}

id PKDrawingCoherence.init(data:)(uint64_t a1, unint64_t a2)
{
  id v4 = specialized PKDrawingCoherence.init(data:)();
  outlined consume of Data._Representation(a1, a2);
  return v4;
}

void closure #1 in PKDrawingCoherence.init(strokes:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v41 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v39 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v40 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a2, (uint64_t)&v46);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStroke]);
  char v14 = swift_dynamicCast();
  uint64_t v43 = a1;
  if ((v14 & 1) == 0)
  {
    outlined init with copy of Any(a2, (uint64_t)&v46);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSOrderedSet);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_19;
    }
    uint64_t v36 = a3;
    uint64_t v37 = v9;
    uint64_t v38 = v3;
    id v35 = *(id *)&v45[0];
    NSOrderedSet.makeIterator()();
    NSFastEnumerationIterator.next()();
    uint64_t v25 = v42;
    if (v48)
    {
      uint64_t v26 = (void (**)(char *, uint64_t))(v40 + 8);
      do
      {
        outlined init with take of Any(&v46, v45);
        swift_getKeyPath();
        outlined init with copy of Any((uint64_t)v45, (uint64_t)v44);
        type metadata accessor for PKStrokeCoherence(0);
        swift_dynamicCast();
        uint64_t v27 = v49;
        PKStrokeCoherence.newShared(in:flatten:)(a1, 1, (uint64_t)v13);

        _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
        uint64_t v28 = (void (*)(unsigned char *, void))Capsule.Ref<>.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
        CROrderedSet.append(_:)();
        (*v26)(v13, v25);
        v28(v44, 0);
        a1 = v43;
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
        NSFastEnumerationIterator.next()();
      }
      while (v48);
    }
    (*(void (**)(char *, unint64_t))(v39 + 8))(v11, v41);

    goto LABEL_16;
  }
  uint64_t v15 = *(void *)&v45[0];
  if (*(void *)&v45[0] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((*(void *)&v45[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16)
    {
LABEL_4:
      if (v16 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v36 = a3;
      uint64_t v37 = v9;
      uint64_t v38 = v3;
      uint64_t v17 = 0;
      unint64_t v41 = v15 & 0xC000000000000001;
      double v18 = (void (**)(char *, uint64_t))(v40 + 8);
      uint64_t v19 = v15;
      do
      {
        uint64_t v24 = v16;
        if (v41) {
          id v20 = (id)MEMORY[0x21054E050](v17, v15);
        }
        else {
          id v20 = *(id *)(v15 + 8 * v17 + 32);
        }
        uint64_t v21 = v20;
        uint64_t v22 = v43;
        ++v17;
        swift_getKeyPath();
        type metadata accessor for PKStrokeCoherence(0);
        swift_dynamicCastClassUnconditional();
        PKStrokeCoherence.newShared(in:flatten:)(v22, 1, (uint64_t)v13);
        _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
        uint64_t v23 = (void (*)(long long *, void))Capsule.Ref<>.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
        CROrderedSet.append(_:)();
        (*v18)(v13, v42);
        v23(&v46, 0);
        swift_release();

        uint64_t v16 = v24;
        uint64_t v15 = v19;
      }
      while (v24 != v17);
      swift_bridgeObjectRelease();
LABEL_16:
      a3 = v36;
      uint64_t v9 = v37;
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
LABEL_19:
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a3, (uint64_t)v9, &demangling cache variable for type metadata for PKDrawing?);
  uint64_t v29 = type metadata accessor for PKDrawing();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v9, 1, v29) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for PKDrawing?);
  }
  else
  {
    type metadata accessor for PKDrawingCoherence(0);
    if (swift_dynamicCast())
    {
      uint64_t v30 = (void *)v46;
      swift_getKeyPath();
      objc_msgSend(v30, sel__canvasBounds);
      *(void *)&long long v46 = v31;
      *((void *)&v46 + 1) = v32;
      uint64_t v47 = v33;
      uint64_t v48 = v34;
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
      Capsule.Ref<>.subscript.setter();
    }
  }
}

id PKDrawingCoherence.init(model:)(uint64_t a1)
{
  uint64_t v3 = &v1[OBJC_IVAR___PKDrawingCoherence_model];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for PKDrawingCoherence(0);
  id v6 = objc_msgSendSuper2(&v8, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v6;
}

uint64_t PKDrawingCoherence.init(drawing:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PKDrawing();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  uint64_t v22 = a1;
  v11((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7, v9);
  uint64_t v12 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  id v13 = v1;
  uint64_t v21 = v7;
  if (swift_dynamicCast())
  {
    char v14 = v24;

    uint64_t v15 = &v14[OBJC_IVAR___PKDrawingCoherence_model];
    swift_beginAccess();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v16(v6, v15, v3);
    uint64_t v17 = (char *)objc_allocWithZone(v12);
    v16(&v17[OBJC_IVAR___PKDrawingCoherence_model], v6, v3);
    v23.receiver = v17;
    v23.super_class = v12;
    id v18 = objc_msgSendSuper2(&v23, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v21);
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return (uint64_t)v18;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in PKDrawingCoherence.init(concreteDrawing:)(uint64_t a1, void *a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  unint64_t v78 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v64 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for CRKeyPath();
  uint64_t v74 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v69 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  MEMORY[0x270FA5388](v68);
  uint64_t v67 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v9 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v66 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v76 = (char *)v47 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v13 - 8);
  unint64_t v65 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v16 = *(char **)(v15 - 8);
  uint64_t v72 = v15;
  uint64_t v73 = v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v75 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PKStroke();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v62 = (char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v61);
  uint64_t v60 = (uint64_t)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  CGRect v71 = (char *)v47 - v24;
  id v25 = objc_msgSend(a2, sel_strokes, v23);
  uint64_t v26 = v18;
  uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    uint64_t v48 = a2;
    uint64_t v49 = v2;
    uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    uint64_t v29 = v19 + 16;
    uint64_t v58 = v30;
    unint64_t v31 = (*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64);
    v47[1] = v27;
    unint64_t v32 = v27 + v31;
    uint64_t v56 = v5;
    objc_super v57 = (char **)(v74 + 56);
    uint64_t v55 = (void (**)(char *, char *, uint64_t))(v9 + 16);
    uint64_t v59 = v29;
    uint64_t v54 = *(void *)(v29 + 56);
    uint64_t v53 = (void (**)(char *, uint64_t))(v78 + 8);
    uint64_t v52 = (void (**)(char *, uint64_t))(v9 + 8);
    id v51 = (void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v50 = v26;
    uint64_t v33 = (uint64_t)v71;
    uint64_t v34 = v65;
    do
    {
      unint64_t v78 = v32;
      uint64_t v74 = v28;
      v58(v62, v32, v50);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _PKStrokeConcrete);
      swift_dynamicCast();
      id v35 = (void *)v77[0];
      swift_retain();
      specialized PKStrokeStruct.init<A>(stroke:in:)(v35, a1, v33);
      outlined init with copy of PKStrokeStruct(v33, v60);
      uint64_t v73 = *v57;
      uint64_t v36 = v70;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v73)(v34, 1, 1, v70);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, (void (*)(uint64_t))type metadata accessor for PKStrokeStruct);
      swift_retain();
      Ref.init<A>(_:_:identity:)();
      LOBYTE(v77[0]) = 0;
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Ref<PKStrokeStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
      Reference.identity.getter();
      lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke();
      SharedTagged_2.init(_:id:)();
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type SharedTagged_2<TaggedStroke> and conformance SharedTagged_2<A>, &demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
      CRRegister.init(_:)();
      swift_getKeyPath();
      uint64_t v37 = v63;
      (*v55)(v66, v76, v63);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v73)(v34, 1, 1, v36);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      swift_retain();
      uint64_t v38 = v64;
      Ref.init<A>(_:_:identity:)();
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
      uint64_t v39 = (void (*)(void *, void))Capsule.Ref<>.subscript.modify();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      CROrderedSet.append(_:)();
      uint64_t v40 = v72;
      (*v53)(v38, v56);
      v39(v77, 0);
      uint64_t v33 = (uint64_t)v71;
      unint64_t v41 = v76;
      swift_release();
      (*v52)(v41, v37);
      (*v51)(v75, v40);
      outlined destroy of PKDrawingStruct(v33, type metadata accessor for PKStrokeStruct);
      unint64_t v32 = v78 + v54;
      uint64_t v28 = v74 - 1;
    }
    while (v74 != 1);
    swift_bridgeObjectRelease();
    a2 = v48;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_getKeyPath();
  objc_msgSend(a2, sel__canvasBounds);
  v77[0] = v42;
  v77[1] = v43;
  v77[2] = v44;
  v77[3] = v45;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  return Capsule.Ref<>.subscript.setter();
}

id PKDrawingCoherence.__allocating_init(context:data:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  v14[1] = *(id *)MEMORY[0x263EF8340];
  id v8 = objc_allocWithZone(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v14[0] = 0;
  id v10 = objc_msgSend(v8, sel_initWithData_loadNonInkingStrokes_error_, isa, 0, v14);

  if (v10)
  {
    id v11 = v14[0];
  }
  else
  {
    id v12 = v14[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  outlined consume of Data._Representation(a2, a3);

  return v10;
}

uint64_t PKDrawingCoherence.__allocating_init(context:concreteDrawing:)(void *a1, void *a2)
{
  uint64_t v4 = specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(a2);

  return v4;
}

uint64_t static PKDrawingCoherence.fileType.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t PKDrawingCoherence.dataRepresentation()()
{
  uint64_t v1 = type metadata accessor for CRCodableVersion();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = v0 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  type metadata accessor for CRContext();
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  id v10 = (void *)MEMORY[0x21054C990](0, v14);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F32EB8], v1);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  uint64_t v11 = Capsule<>.serializedData(_:version:allowedAppFormats:)();

  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

void __swiftcall PKDrawingCoherence.concreteDrawing()(PKDrawing *__return_ptr retstr)
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for PKStroke();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14AE8]), sel_init);
  id v8 = objc_msgSend(v2, sel__rootStrokes);
  uint64_t v9 = v3;
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v11 = v2;
  unint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_So01_F8ConcreteCs5NeverOTg5062_s8PaperKit18PKDrawingCoherenceC15concreteDrawingSo0C0CyFSo17_fg3C06D11B00G0VXEfU_0jE00lM0CTf1cn_nTf4ng_n(v10, (uint64_t)v11);
  swift_bridgeObjectRelease();

  if (!(v12 >> 62))
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_10;
  }
LABEL_3:
  if (v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (void (**)(unsigned char *, uint64_t))(v4 + 8);
    do
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v16 = (id)MEMORY[0x21054E050](v14, v12);
      }
      else {
        id v16 = *(id *)(v12 + 8 * v14 + 32);
      }
      uint64_t v17 = v16;
      ++v14;
      id v18 = objc_msgSend(v7, sel__addStroke_, v16);
      static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

      (*v15)(v6, v9);
    }
    while (v13 != v14);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t specialized PKDrawingStruct.requiredContentVersion<A>(in:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v28 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v9 - 8);
  id v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v25[0] = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.makeIterator()();
  uint64_t v31 = v12;
  uint64_t v15 = v14;
  CROrderedSet.Iterator.next()();
  uint64_t v16 = v6;
  uint64_t v18 = v6 + 48;
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v19 = 1;
  uint64_t v29 = v17;
  if (v17(v11, 1, v5) != 1)
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v26 = v2;
    uint64_t v27 = v20;
    uint64_t v21 = (void (**)(char *, uint64_t))(v28 + 8);
    uint64_t v28 = v16 + 32;
    v25[1] = v18;
    uint64_t v22 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v19 = 1;
    do
    {
      v27(v8, v11, v5);
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
      Ref.subscript.getter();
      uint64_t v23 = specialized CRRegister<>.requiredContentVersion<A>(in:)(a1);
      (*v21)(v4, v26);
      (*v22)(v8, v5);
      if (v19 <= v23) {
        uint64_t v19 = v23;
      }
      CROrderedSet.Iterator.next()();
    }
    while (v29(v11, 1, v5) != 1);
  }
  (*(void (**)(char *, uint64_t))(v25[0] + 8))(v15, v31);
  return v19;
}

uint64_t closure #1 in PKDrawingCoherence._rootStrokes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)(a1, (uint64_t)v9, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double PKDrawingCoherence.bounds.getter()
{
  uint64_t v1 = v0;
  uint64_t v17 = type metadata accessor for CRKeyPath();
  uint64_t v2 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  id v11 = (char *)&v16 - v10;
  uint64_t v12 = v1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13(v11, v12, v5);
  v13(v8, v12, v5);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule<>.rootID.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  uint64_t v18 = v1;
  type metadata accessor for CGRect(0);
  Capsule.getCachedValue<A>(forKey:recompute:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v17);
  v14(v11, v5);
  return v19;
}

uint64_t closure #1 in PKDrawingCoherence.bounds.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PKDrawingStruct();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = a1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v17(v15, v16, v9);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule<>.root.getter();
  id v35 = *(void (**)(char *, uint64_t))(v10 + 8);
  v35(v15, v9);
  v17(v12, v16, v9);
  double v19 = v36;
  uint64_t v18 = v37;
  uint64_t v20 = v38;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v36, &v8[*(int *)(v6 + 28)], v38);
  double v21 = *MEMORY[0x263F001A0];
  double v22 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v23 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v24 = *(double *)(MEMORY[0x263F001A0] + 24);
  unint64_t v41 = v12;
  double v25 = specialized Sequence.reduce<A>(_:_:)((void (*)(void *__return_ptr, double *, char *))partial apply for specialized closure #1 in PKDrawingStruct.bounds<A>(in:), (uint64_t)v40, v21, v22, v23, v24);
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v20);
  v35(v12, v9);
  uint64_t result = outlined destroy of PKDrawingStruct((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PKDrawingStruct);
  uint64_t v33 = v39;
  *(double *)uint64_t v39 = v25;
  v33[1] = v27;
  v33[2] = v29;
  v33[3] = v31;
  return result;
}

uint64_t closure #1 in PKDrawingCoherence._canvasBounds.setter()
{
  return Capsule.Ref<>.subscript.setter();
}

uint64_t PKDrawingCoherence.addNewStroke(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRKeyPath();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v39 - v11;
  uint64_t v44 = a1;
  uint64_t v13 = &v1[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  Capsule.mutate<A>(_:)();
  swift_endAccess();
  id v14 = objc_msgSend(v1, sel__cachedVisibleStrokes);
  if (v14)
  {
    uint64_t v15 = v14;
    Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v15, sel_addObject_, isa);
  }
  uint64_t v41 = a1;
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v17(v12, v13, v6);
  uint64_t v40 = v17;
  v17(v9, v13, v6);
  v39[1] = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule<>.rootID.getter();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v9, v6);
  type metadata accessor for CGRect(0);
  v39[0] = v19;
  Capsule.getCachedValue<A>(forKey:)();
  uint64_t v42 = *(void *)(v42 + 8);
  ((void (*)(char *, uint64_t))v42)(v5, v43);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v12, v6);
  if ((v49 & 1) == 0)
  {
    CGFloat v22 = v47;
    CGFloat v21 = v48;
    CGFloat v24 = v45;
    CGFloat v23 = v46;
    Class v25 = PKStroke._bridgeToObjectiveC()().super.isa;
    [(objc_class *)v25 _bounds];
    CGFloat v27 = v26;
    CGFloat v29 = v28;
    CGFloat v31 = v30;
    CGFloat v33 = v32;

    v50.origin.CGFloat x = v24;
    v50.origin.CGFloat y = v23;
    v50.size.CGFloat width = v22;
    v50.size.CGFloat height = v21;
    v52.origin.CGFloat x = v27;
    v52.origin.CGFloat y = v29;
    v52.size.CGFloat width = v31;
    v52.size.CGFloat height = v33;
    CGRect v51 = CGRectUnion(v50, v52);
    CGFloat x = v51.origin.x;
    CGFloat y = v51.origin.y;
    CGFloat width = v51.size.width;
    CGFloat height = v51.size.height;
    uint64_t v38 = v40;
    v40(v12, v13, v6);
    double v45 = x;
    double v46 = y;
    double v47 = width;
    double v48 = height;
    v38(v9, v13, v6);
    Capsule<>.rootID.getter();
    v18(v9, v6);
    Capsule.setCachedValue<A>(_:forKey:)();
    ((void (*)(char *, uint64_t))v42)(v5, v43);
    return ((uint64_t (*)(char *, uint64_t))v18)(v12, v6);
  }
  return result;
}

uint64_t closure #1 in PKDrawingCoherence.addNewStroke(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PKStroke();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  type metadata accessor for PKStrokeCoherenceBase(0);
  swift_dynamicCast();
  uint64_t v12 = (void *)v15[0];
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *(void *)v15[0]) + 0xA0))(a1, 1);

  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  uint64_t v13 = (void (*)(void *, void))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v13(v15, 0);
  return swift_release();
}

uint64_t @objc PKCoherenceUndoCommand.apply(to:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(void), void (*a5)(void *), void (*a6)(char *))
{
  uint64_t v10 = a4(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v17 - v12;
  id v14 = a3;
  id v15 = a1;
  a5(a3);

  a6(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

id PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v43 = a6;
  uint64_t v44 = a5;
  int v42 = a4;
  int v45 = a3;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CapsuleUndoAction();
  uint64_t v49 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  double v48 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  double v47 = (char *)&v39 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v39 - v19;
  double v46 = v6;
  CGFloat v21 = (char *)v6 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  CGFloat v22 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v23 = v22(v20, v21, v14);
  v44(v23);
  if (v45) {
    objc_msgSend(v46, sel_set_cachedVisibleStrokes_, 0);
  }
  v22(v17, v21, v14);
  Capsule.actionUndoingDifference(from:)();
  CGFloat v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v17, v14);
  uint64_t v25 = v49;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v9, 1, v10) == 1)
  {
    v24(v20, v14);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v47, v9, v10);
    CGFloat v27 = *(void (**)(void))(v25 + 16);
    uint64_t v39 = v10;
    double v28 = v48;
    v27();
    id v29 = objc_msgSend(v46, sel_uuid);
    double v46 = v24;
    id v30 = v29;
    CGFloat v31 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    double v32 = (char *)objc_allocWithZone(v31);
    CGFloat v33 = v28;
    uint64_t v34 = v39;
    ((void (*)(char *, char *, uint64_t))v27)(&v32[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v33, v39);
    uint64_t v35 = v41;
    swift_bridgeObjectRetain();
    uint64_t v36 = (void *)MEMORY[0x21054D080](v40, v35);
    swift_bridgeObjectRelease();
    v50.receiver = v32;
    v50.super_class = v31;
    id v26 = objc_msgSendSuper2(&v50, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v30, v36, v42 & 1);
    swift_unknownObjectRelease();

    uint64_t v37 = *(void (**)(char *, uint64_t))(v25 + 8);
    v37(v48, v34);
    v37(v47, v34);
    v46(v20, v14);
  }
  return v26;
}

uint64_t closure #1 in PKDrawingCoherence.addNewStrokes(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_retain();
  unint64_t v7 = specialized Sequence.compactMap<A>(_:)(a2, a1);
  swift_release();
  swift_getKeyPath();
  v11[5] = v7;
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  if (a4)
  {
    uint64_t v9 = (void (*)(void *, void))Capsule.Ref<>.subscript.modify();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    CROrderedSet.append<A>(contentsOf:)();
    v9(v11, 0);
  }
  else
  {
    uint64_t v8 = (void (*)(void *, void))Capsule.Ref<>.subscript.modify();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    CROrderedSet.insert<A>(contentsOf:at:)();
    v8(v11, 0);
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

void __swiftcall PKDrawingCoherence.undoableAddNewStrokes(_:)(PKUndoCommand_optional *__return_ptr retstr, Swift::OpaquePointer a2)
{
  uint64_t v104 = type metadata accessor for CRKeyPath();
  uint64_t v106 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  uint64_t v103 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v105 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  uint64_t v100 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v101 = (char *)&v94 - v7;
  uint64_t v115 = (void (*)(char *, char *, uint64_t))type metadata accessor for PKInk();
  uint64_t v8 = *((void *)v115 - 1);
  MEMORY[0x270FA5388](v115);
  uint64_t v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PKStroke();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v116 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v114 = (char *)&v94 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v111 = (char *)&v94 - v17;
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v122._object = (void *)0x800000020C8598D0;
  v18._uint64_t countAndFlagsBits = 0x6F72745320646441;
  v18._object = (void *)0xEB0000000073656BLL;
  v19.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v122._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  Swift::String v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v122);
  CGFloat v22 = v2;
  swift_bridgeObjectRetain();
  id v99 = specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(v21._countAndFlagsBits, (uint64_t)v21._object, 0, 1, v22, (uint64_t)v22, (uint64_t)a2._rawValue);
  swift_bridgeObjectRelease();
  uint64_t v98 = v22;

  swift_bridgeObjectRelease();
  uint64_t v23 = MEMORY[0x263F8EE78];
  uint64_t v117 = MEMORY[0x263F8EE78];
  uint64_t v24 = *((void *)a2._rawValue + 2);
  uint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v110 = v11;
  uint64_t v97 = v12;
  if (v24)
  {
    uint64_t v27 = v12 + 16;
    id v26 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    unint64_t v28 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v96 = v25;
    unint64_t v108 = v28;
    unint64_t v29 = v25 + v28;
    id v30 = (void (**)(char *, void (*)(char *, char *, uint64_t)))(v8 + 8);
    uint64_t v31 = *(void *)(v12 + 72);
    uint64_t v112 = (void (**)(char *, char *, uint64_t))(v12 + 32);
    uint64_t v113 = v30;
    *(void *)&CGFloat v107 = v12 + 8;
    double v32 = v111;
    uint64_t v109 = v10;
    v26(v111, v25 + v28, v11);
    while (1)
    {
      PKStroke.ink.getter();
      Class isa = PKInk._bridgeToObjectiveC()().super.isa;
      id v34 = [(objc_class *)isa behavior];

      (*v113)(v10, v115);
      LOBYTE(isa) = objc_msgSend(v34, sel_isEraser);

      if (isa)
      {
        (**(void (***)(char *, uint64_t))&v107)(v32, v11);
      }
      else
      {
        uint64_t v35 = v26;
        uint64_t v36 = v27;
        uint64_t v37 = *v112;
        (*v112)(v114, v32, v11);
        uint64_t v38 = v117;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1);
          uint64_t v38 = v117;
        }
        unint64_t v40 = *(void *)(v38 + 16);
        unint64_t v39 = *(void *)(v38 + 24);
        if (v40 >= v39 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          uint64_t v38 = v117;
        }
        *(void *)(v38 + 16) = v40 + 1;
        unint64_t v41 = v38 + v108 + v40 * v31;
        uint64_t v11 = v110;
        v37((char *)v41, v114, v110);
        uint64_t v117 = v38;
        uint64_t v27 = v36;
        id v26 = v35;
        uint64_t v10 = v109;
        double v32 = v111;
      }
      v29 += v31;
      if (!--v24) {
        break;
      }
      v26(v32, v29, v11);
    }
    uint64_t v23 = v117;
  }
  swift_bridgeObjectRelease();
  int v42 = v98;
  id v43 = objc_msgSend(v98, sel__cachedVisibleStrokes);
  uint64_t v44 = v105;
  if (v43)
  {
    int v45 = v43;
    specialized _arrayForceCast<A, B>(_:)(v23);
    Class v46 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v45, sel_addObjectsFromArray_, v46);
  }
  double v47 = (char *)v42 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  double v48 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  uint64_t v49 = v101;
  uint64_t v50 = v102;
  v48(v101, v47, v102);
  CGRect v51 = v100;
  uint64_t v115 = v48;
  v48(v100, v47, v50);
  uint64_t v52 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  uint64_t v53 = v103;
  uint64_t v113 = (void (**)(char *, void (*)(char *, char *, uint64_t)))v52;
  Capsule<>.rootID.getter();
  uint64_t v55 = *(void (**)(char *, uint64_t))(v44 + 8);
  uint64_t v54 = v44 + 8;
  v55(v51, v50);
  type metadata accessor for CGRect(0);
  uint64_t v112 = v56;
  Capsule.getCachedValue<A>(forKey:)();
  uint64_t v58 = v106 + 8;
  objc_super v57 = *(void (**)(char *, uint64_t))(v106 + 8);
  v57(v53, v104);
  uint64_t v114 = (char *)v55;
  v55(v49, v50);
  if ((v121 & 1) == 0)
  {
    uint64_t v111 = (char *)v57;
    CGFloat v59 = v119;
    CGFloat v60 = v120;
    uint64_t v61 = v117;
    CGFloat v62 = v118;
    CGFloat x = *MEMORY[0x263F001A0];
    CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
    CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
    CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
    uint64_t v67 = *(void *)(v23 + 16);
    if (v67)
    {
      uint64_t v95 = v117;
      uint64_t v96 = *(void *)&v118;
      uint64_t v98 = *(void (**)(char *, uint64_t))&v119;
      CGFloat v107 = v120;
      unint64_t v108 = (unint64_t)v47;
      uint64_t v105 = v54;
      uint64_t v106 = v58;
      uint64_t v68 = *(void (**)(char *, unint64_t, uint64_t))(v97 + 16);
      unint64_t v69 = v23 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
      uint64_t v70 = *(void *)(v97 + 72);
      CGRect v71 = (void (**)(char *, uint64_t))(v97 + 8);
      uint64_t v109 = (char *)v23;
      swift_retain();
      uint64_t v72 = v110;
      uint64_t v73 = v116;
      do
      {
        v68(v73, v69, v72);
        Class v74 = PKStroke._bridgeToObjectiveC()().super.isa;
        [(objc_class *)v74 _bounds];
        CGFloat v76 = v75;
        CGFloat v78 = v77;
        CGFloat v80 = v79;
        CGFloat v82 = v81;

        uint64_t v73 = v116;
        v123.origin.CGFloat x = x;
        v123.origin.CGFloat y = y;
        v123.size.CGFloat width = width;
        v123.size.CGFloat height = height;
        v126.origin.CGFloat x = v76;
        v126.origin.CGFloat y = v78;
        v126.size.CGFloat width = v80;
        v126.size.CGFloat height = v82;
        CGRect v124 = CGRectUnion(v123, v126);
        CGFloat x = v124.origin.x;
        CGFloat y = v124.origin.y;
        CGFloat width = v124.size.width;
        CGFloat height = v124.size.height;
        (*v71)(v73, v72);
        v69 += v70;
        --v67;
      }
      while (v67);
      uint64_t v23 = (uint64_t)v109;
      swift_release();
      double v47 = (char *)v108;
      CGFloat v60 = v107;
      CGFloat v59 = *(double *)&v98;
      CGFloat v62 = *(double *)&v96;
      uint64_t v61 = v95;
    }
    v127.origin.CGFloat x = x;
    v127.origin.CGFloat y = y;
    v127.size.CGFloat width = width;
    v127.size.CGFloat height = height;
    CGRect v125 = CGRectUnion(*(CGRect *)&v61, v127);
    CGFloat v83 = v125.origin.x;
    CGFloat v84 = v125.origin.y;
    CGFloat v85 = v125.size.width;
    CGFloat v86 = v125.size.height;
    uint64_t v87 = v101;
    uint64_t v88 = v102;
    uint64_t v89 = v115;
    v115(v101, v47, v102);
    uint64_t v117 = *(void *)&v83;
    CGFloat v118 = v84;
    CGFloat v119 = v85;
    CGFloat v120 = v86;
    uint64_t v90 = v100;
    v89(v100, v47, v88);
    uint64_t v91 = v103;
    Capsule<>.rootID.getter();
    uint64_t v92 = v114;
    ((void (*)(char *, uint64_t))v114)(v90, v88);
    Capsule.setCachedValue<A>(_:forKey:)();
    ((void (*)(char *, uint64_t))v111)(v91, v104);
    ((void (*)(char *, uint64_t))v92)(v87, v88);
  }
  uint64_t v93 = *(void *)(v23 + 16);
  swift_release();
  if (!v93) {
}
  }

uint64_t PKDrawingCoherence.indexOf(_:)(uint64_t a1)
{
  uint64_t v112 = a1;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v91 = *(void (***)(char *, uint64_t))(v83 - 8);
  MEMORY[0x270FA5388](v83);
  CGFloat v82 = (char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v90 = *(void (***)(char *, uint64_t))(v100 - 8);
  MEMORY[0x270FA5388](v100);
  id v99 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v117 = (uint64_t)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v89 = *(void (***)(char *, uint64_t))(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v97 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  double v77 = *(void (***)(char *, uint64_t))(v111 - 8);
  MEMORY[0x270FA5388](v111);
  double v81 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for CRKeyPath();
  uint64_t v88 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v105 - 8);
  MEMORY[0x270FA5388](v105);
  uint64_t v104 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v76 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  uint64_t v109 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v103 = (char *)&v75 - v14;
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, Ref<CRRegister<SharedTagged_2<TaggedStroke>>>));
  MEMORY[0x270FA5388](v102);
  uint64_t v101 = (uint64_t *)((char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  CGFloat v107 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  Swift::String v21 = (char *)&v75 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v96 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v106 = (char *)&v75 - v26;
  MEMORY[0x270FA5388](v27);
  unint64_t v29 = (char *)&v75 - v28;
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Range<Int>, CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  MEMORY[0x270FA5388](v93);
  uint64_t v92 = (void (**)(char *, uint64_t))((char *)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Range<Int>, CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>.Iterator);
  MEMORY[0x270FA5388](v94);
  unint64_t v108 = (uint64_t *)((char *)&v75 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v84 = v1;
  uint64_t v32 = v1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v33 = v23 + 16;
  uint64_t v115 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v116 = v32;
  v115(v29, v32, v22);
  swift_getKeyPath();
  uint64_t v95 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule<>.subscript.getter();
  swift_release();
  id v34 = *(void (**)(char *, uint64_t))(v23 + 8);
  CGFloat v80 = v29;
  uint64_t v113 = v23 + 8;
  uint64_t v114 = v34;
  v34(v29, v22);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v35 = v21;
  uint64_t v36 = v16;
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  uint64_t v38 = v118;
  uint64_t v39 = v119;
  if (v118 < v119)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  uint64_t v40 = v36;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v35, v36);
  unint64_t v41 = v106;
  uint64_t v110 = v33;
  v115(v106, v116, v22);
  swift_getKeyPath();
  int v42 = v107;
  Capsule<>.subscript.getter();
  swift_release();
  uint64_t v95 = v22;
  v114(v41, v22);
  id v43 = (char *)v92 + *(int *)(v93 + 52);
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v44(v43, v42, v40);
  uint64_t v45 = (uint64_t)v108;
  *unint64_t v108 = v39;
  *(void *)(v45 + 8) = v38;
  *(void *)(v45 + 16) = v39;
  v44(v35, v43, v40);
  uint64_t v46 = v94;
  double v47 = (char *)(v45 + *(int *)(v94 + 52));
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v106 = v47;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  CGFloat v107 = (char *)*(int *)(v46 + 56);
  v107[v45] = 0;
  uint64_t v48 = v85;
  uint64_t v49 = v109;
  if (v39 != v38)
  {
    uint64_t v86 = 0;
    uint64_t v94 = v76 + 48;
    uint64_t v93 = v76 + 32;
    uint64_t v92 = (void (**)(char *, uint64_t))(v88 + 1);
    ++v90;
    ++v89;
    uint64_t v88 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 6);
    double v79 = (void (**)(char *, uint64_t, uint64_t))(v77 + 4);
    CGFloat v78 = v91 + 1;
    ++v77;
    uint64_t v91 = (void (**)(char *, uint64_t))(v76 + 8);
    uint64_t v50 = v39;
    uint64_t v87 = v11;
    while (v38 >= v50)
    {
      if (v39 < v50) {
        goto LABEL_23;
      }
      if (v39 >= v38) {
        goto LABEL_24;
      }
      *(void *)(v45 + 16) = v39 + 1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
      dispatch thunk of IteratorProtocol.next()();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v94)(v11, 1, v48) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
        goto LABEL_3;
      }
      CGRect v51 = *(void (**)(char *, char *, uint64_t))v93;
      uint64_t v52 = v103;
      (*(void (**)(char *, char *, uint64_t))v93)(v103, v11, v48);
      uint64_t v53 = *(int *)(v102 + 48);
      uint64_t v54 = v101;
      uint64_t v55 = (char *)v101 + v53;
      *uint64_t v101 = v39;
      v51((char *)v54 + v53, v52, v48);
      v51(v49, v55, v48);
      uint64_t v56 = v104;
      Ref.id.getter();
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
      uint64_t v57 = v105;
      LOBYTE(v55) = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v92)(v56, v57);
      if (v55)
      {
        (*v91)(v49, v48);
        goto LABEL_4;
      }
      uint64_t v85 = v39;
      uint64_t v58 = v96;
      uint64_t v59 = v95;
      v115(v96, v116, v95);
      type metadata accessor for PKDrawingStruct();
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
      CGFloat v60 = v97;
      Ref.subscript.getter();
      v114(v58, v59);
      uint64_t v61 = v117;
      CGFloat v62 = v99;
      uint64_t v63 = v98;
      CRRegister.value.getter();
      uint64_t v64 = v100;
      SharedTagged_2.tagged2.getter();
      (*v90)(v62, v64);
      uint64_t v65 = v63;
      uint64_t v66 = v111;
      (*v89)(v60, v65);
      if ((*v88)(v61, 1, v66) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v117, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
        uint64_t v49 = v109;
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v91)(v109, v48);
        uint64_t v45 = (uint64_t)v108;
      }
      else
      {
        uint64_t v67 = v81;
        uint64_t v68 = v111;
        (*v79)(v81, v117, v111);
        unint64_t v69 = v80;
        v115(v80, v116, v59);
        uint64_t v70 = v82;
        uint64_t v71 = Ref.subscript.getter();
        MEMORY[0x270FA5388](v71);
        uint64_t v72 = v84;
        *(&v75 - 2) = v112;
        *(&v75 - 1) = v72;
        uint64_t v73 = v86;
        BOOL v74 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:), (uint64_t)(&v75 - 4));
        (*v78)(v70, v83);
        v114(v69, v59);
        (*v77)(v67, v68);
        uint64_t v49 = v109;
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v91)(v109, v48);
        uint64_t v45 = (uint64_t)v108;
        if (v74)
        {
          uint64_t v39 = v85;
          goto LABEL_4;
        }
        uint64_t v86 = v73;
      }
      uint64_t v11 = v87;
      if (v107[v45])
      {
        uint64_t v39 = 0;
        goto LABEL_4;
      }
      uint64_t v38 = *(void *)(v45 + 8);
      uint64_t v39 = *(void *)(v45 + 16);
      uint64_t v50 = *(void *)v45;
      if (v39 == v38) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_3:
  uint64_t v39 = 0;
  v107[v45] = 1;
LABEL_4:
  outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for Zip2Sequence<Range<Int>, CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>.Iterator);
  return v39;
}

BOOL containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v50 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v59 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v63 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v49 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v45 - v16;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  uint64_t v61 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v48 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CRKeyPath();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.id.getter();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  uint64_t v51 = a2;
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  if (v23)
  {
    return 1;
  }
  else
  {
    uint64_t v25 = v62 + OBJC_IVAR___PKDrawingCoherence_model;
    swift_beginAccess();
    uint64_t v26 = v63;
    uint64_t v27 = v60;
    uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
    v46(v17, v25, v60);
    uint64_t v28 = type metadata accessor for PKDrawingStruct();
    uint64_t v29 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
    _OWORD v45[2] = v28;
    v45[1] = v29;
    Ref.subscript.getter();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v30 = v26 + 8;
    double v47 = v31;
    v31(v17, v27);
    uint64_t v32 = v55;
    CRRegister.value.getter();
    uint64_t v33 = (uint64_t)v59;
    uint64_t v34 = v57;
    SharedTagged_2.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v8, v34);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v32);
    uint64_t v35 = v58;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v33, 1, v58) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      return 0;
    }
    else
    {
      uint64_t v36 = v61;
      uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 32);
      uint64_t v63 = v30;
      uint64_t v38 = v27;
      uint64_t v39 = v48;
      v37(v48, v33, v35);
      uint64_t v40 = v49;
      v46(v49, v25, v38);
      unint64_t v41 = v50;
      uint64_t v42 = Ref.subscript.getter();
      MEMORY[0x270FA5388](v42);
      uint64_t v43 = v62;
      v45[-2] = v51;
      v45[-1] = v43;
      BOOL v24 = specialized Sequence.contains(where:)((uint64_t (*)(char *))closure #1 in containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)partial apply, (uint64_t)&v45[-4]);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v53);
      v47(v40, v38);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    }
  }
  return v24;
}

void __swiftcall PKDrawingCoherence.undoableAddNewStrokes(_:replacingOldStrokes:)(PKUndoCommand_optional *__return_ptr retstr, Swift::OpaquePointer _, Swift::OpaquePointer replacingOldStrokes)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for CRKeyPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PKStroke();
  uint64_t v13 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((void *)replacingOldStrokes._rawValue + 2))
  {
    uint64_t v30 = v14;
    rawValue = _._rawValue;
    (*(void (**)(char *, char *, uint64_t, double))(v13 + 16))(v17, (char *)replacingOldStrokes._rawValue+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v14, v15);
    Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
    id v19 = [(objc_class *)isa _strokeUUID];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    CRKeyPath.init(_:)();
    uint64_t v20 = PKDrawingCoherence.indexOf(_:)((uint64_t)v11);
    char v22 = v21 & 1;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v32._object = (void *)0x800000020C8598D0;
    v23._uint64_t countAndFlagsBits = 0x6F72745320646441;
    v23._object = (void *)0xEB0000000073656BLL;
    v24.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v24.value._object = (void *)0xEB00000000656C62;
    v25._uint64_t countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    v32._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, paperKitBundle, v25, v32);
    uint64_t v27 = v4;
    uint64_t v28 = (uint64_t)rawValue;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(v26._countAndFlagsBits, (uint64_t)v26._object, 1, 1, v27, v27, v28, v20, v22, (uint64_t)replacingOldStrokes._rawValue);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v30);
  }
  else
  {
    Class v29 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, sel_undoableAddNewStrokes_, v29);
  }
}

uint64_t closure #1 in PKDrawingCoherence.transformStrokes(_:with:concat:)(uint64_t a1, uint64_t a2, CGFloat *a3, int a4)
{
  int v31 = a4;
  Swift::String v32 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v41 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v40 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for PKStroke();
  uint64_t v11 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v14 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v17 = *(void *)(a2 + 16);
  uint64_t v18 = MEMORY[0x263F8EE78];
  if (v17)
  {
    uint64_t v29 = a1;
    uint64_t v30 = v4;
    uint64_t v42 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v19 = v11 + 16;
    uint64_t v21 = a2 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64));
    uint64_t v35 = *(void *)(v19 + 56);
    uint64_t v36 = v20;
    uint64_t v37 = v19;
    uint64_t v33 = (void (**)(char *, uint64_t))(v19 - 8);
    uint64_t v34 = v14 + 32;
    do
    {
      uint64_t v22 = v39;
      v36(v13, v21, v39);
      Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
      id v24 = [(objc_class *)isa _strokeUUID];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      CRKeyPath.init(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      WeakRef.init(id:)();
      (*v33)(v13, v22);
      uint64_t v18 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v18 = v42;
      }
      unint64_t v26 = *(void *)(v18 + 16);
      unint64_t v25 = *(void *)(v18 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        uint64_t v18 = v42;
      }
      *(void *)(v18 + 16) = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v26, v16, v38);
      v21 += v35;
      --v17;
    }
    while (v17);
    a1 = v29;
  }
  specialized static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(v18, v32, v31 & 1, a1);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PKDrawingCoherence.deleteStrokes(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v95 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v114 = (char *)v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v93 = (char *)v90 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v90 - v8;
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v92 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v102 = (char *)v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v99 = (char *)v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v91 = (char *)v90 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v97 = (char *)v90 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v113 = (uint64_t)v90 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for CRKeyPath();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v112 = (char *)v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v111 = (char *)v90 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v98 = (char *)v90 - v29;
  uint64_t v30 = type metadata accessor for PKStroke();
  uint64_t v31 = a2;
  uint64_t v32 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v110 = (char *)v90 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v117 = (void *)((char *)v90 - v36);
  uint64_t v37 = *(void *)(v35 + 16);
  uint64_t v101 = v9;
  uint64_t v115 = v11;
  uint64_t v94 = v12;
  uint64_t v119 = v23;
  uint64_t v116 = v24;
  if (v37)
  {
    uint64_t v39 = *(char **)(v32 + 16);
    uint64_t v38 = v32 + 16;
    uint64_t v40 = v35 + ((*(unsigned __int8 *)(v38 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 64));
    CGFloat v107 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
    unint64_t v108 = v39;
    uint64_t v106 = *(void *)(v38 + 56);
    uint64_t v96 = (void (**)(uint64_t, uint64_t))(v12 + 8);
    uint64_t v104 = (unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    uint64_t v105 = (void (**)(char *, char *, uint64_t))(v38 - 8);
    uint64_t v103 = (void (**)(char *, char *, uint64_t))(v24 + 32);
    v90[1] = v35;
    swift_bridgeObjectRetain();
    unint64_t v41 = MEMORY[0x263F8EE78];
    uint64_t v109 = (void (*)(char *, unint64_t, uint64_t))v38;
    do
    {
      uint64_t v42 = v117;
      uint64_t v43 = v108;
      ((void (*)(void *, uint64_t, uint64_t))v108)(v117, v40, v30);
      ((void (*)(char *, void *, uint64_t))v43)(v110, v42, v30);
      type metadata accessor for PKStrokeCoherenceBase(0);
      if (swift_dynamicCast())
      {
        uint64_t v44 = v118;
        uint64_t v45 = v113;
        (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v118) + 0x60))();
        uint64_t v46 = v22;
        uint64_t v47 = v115;
        Ref.id.getter();

        uint64_t v48 = v47;
        uint64_t v22 = v46;
        (*v96)(v45, v48);
        uint64_t v49 = 0;
      }
      else
      {
        uint64_t v49 = 1;
      }
      uint64_t v50 = v119;
      (*v107)(v22, v49, 1, v119);
      ((void (*)(void *, uint64_t))*v105)(v117, v30);
      if ((*v104)(v22, 1, v50) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      }
      else
      {
        uint64_t v51 = *v103;
        uint64_t v52 = v98;
        uint64_t v53 = v119;
        (*v103)(v98, v22, v119);
        v51(v111, v52, v53);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1, v41);
        }
        unint64_t v55 = *(void *)(v41 + 16);
        unint64_t v54 = *(void *)(v41 + 24);
        unint64_t v56 = v41;
        uint64_t v57 = v116;
        if (v55 >= v54 >> 1)
        {
          uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1, v41);
          uint64_t v57 = v116;
          unint64_t v56 = v58;
        }
        *(void *)(v56 + 16) = v55 + 1;
        unint64_t v41 = v56;
        v51((char *)(v56+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(void *)(v57 + 72) * v55), v111, v119);
      }
      v40 += v106;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
    uint64_t v9 = v101;
    unint64_t v59 = v41;
  }
  else
  {
    unint64_t v59 = MEMORY[0x263F8EE78];
  }
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  uint64_t v60 = v95;
  uint64_t v103 = (void (**)(char *, char *, uint64_t))Capsule.Ref<>.root.modify();
  uint64_t v62 = v61;
  uint64_t v63 = (void (**)(void, void, void, void))swift_allocObject();
  uint64_t v64 = MEMORY[0x263F8EE88];
  CGFloat v107 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v63;
  v63[2] = (void (*)(void, void, void, void))MEMORY[0x263F8EE88];
  uint64_t v117 = v63 + 2;
  uint64_t v65 = *(void *)(v59 + 16);
  uint64_t v66 = v94;
  uint64_t v104 = (unsigned int (**)(char *, uint64_t, uint64_t))v59;
  if (v65)
  {
    uint64_t v67 = *(int *)(type metadata accessor for PKDrawingStruct() + 20);
    uint64_t v98 = v62;
    unint64_t v108 = &v62[v67];
    unint64_t v69 = *(void (**)(char *, unint64_t, uint64_t))(v116 + 16);
    uint64_t v68 = v116 + 16;
    unint64_t v70 = v59 + ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80));
    uint64_t v71 = *(void *)(v116 + 72);
    uint64_t v111 = (char *)(v66 + 48);
    uint64_t v109 = v69;
    uint64_t v110 = (char *)(v66 + 8);
    uint64_t v105 = (void (**)(char *, char *, uint64_t))(v66 + 16);
    swift_bridgeObjectRetain();
    uint64_t v72 = v91;
    uint64_t v116 = v68;
    uint64_t v106 = v71;
    do
    {
      v109(v112, v70, v119);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      Ref.init(id:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      uint64_t v76 = (uint64_t)v114;
      CROrderedSet.remove(_:)();
      uint64_t v77 = v115;
      int v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v111)(v76, 1, v115);
      outlined destroy of StocksKitCurrencyCache.Provider?(v76, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      if (v78 == 1)
      {
        uint64_t v73 = v99;
        (*v105)(v99, v72, v77);
        uint64_t v74 = v113;
        specialized Set._Variant.insert(_:)(v113, v73);
        uint64_t v75 = *(void (**)(char *, uint64_t))v110;
        uint64_t v71 = v106;
        (*(void (**)(uint64_t, uint64_t))v110)(v74, v77);
        v75(v72, v77);
      }
      else
      {
        (*(void (**)(char *, uint64_t))v110)(v72, v77);
      }
      v70 += v71;
      --v65;
    }
    while (v65);
    swift_bridgeObjectRelease();
    uint64_t v64 = *v117;
    uint64_t v60 = v95;
    uint64_t v9 = v101;
    uint64_t v66 = v94;
    uint64_t v62 = v98;
  }
  uint64_t v79 = (uint64_t)v93;
  if (*(void *)(v64 + 16))
  {
    CGFloat v80 = &v62[*(int *)(type metadata accessor for PKDrawingStruct() + 20)];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    uint64_t v119 = (uint64_t)v80;
    CROrderedSet.makeIterator()();
    double v81 = (unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
    CGFloat v82 = v9;
    uint64_t v83 = (void (**)(void))(v66 + 32);
    uint64_t v84 = (void (**)(uint64_t, uint64_t))(v66 + 8);
    uint64_t v85 = v115;
    do
    {
      CROrderedSet.Iterator.next()();
      if ((*v81)(v82, 1, v85) == 1) {
        break;
      }
      uint64_t v88 = (uint64_t)v97;
      (*v83)();
      if (specialized removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(v88, (uint64_t)v107, v60))
      {
        CROrderedSet.remove(_:)();
        outlined destroy of StocksKitCurrencyCache.Provider?(v79, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      }
      uint64_t v86 = v117;
      swift_beginAccess();
      uint64_t v87 = *(void *)(*v86 + 16);
      (*v84)(v88, v85);
      CGFloat v82 = v101;
    }
    while (v87);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v102, v100);
  }
  swift_bridgeObjectRelease();
  swift_release();
  return ((uint64_t (*)(void **, void))v103)(&v118, 0);
}

void closure #1 in PKDrawingCoherence.setStrokes(_:paths:masks:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v99 = a4;
  uint64_t v101 = a3;
  uint64_t v94 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v92 = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v91);
  uint64_t v90 = (char *)v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  char v121 = *(void (***)(char *, uint64_t))(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v88 = (char *)v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v117 = (uint64_t)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for UUID();
  uint64_t v105 = *(void ***)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  uint64_t v102 = (char *)v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v100 = (char *)v81 - v14;
  uint64_t v103 = type metadata accessor for PKStrokePath();
  uint64_t v15 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  uint64_t v87 = (char *)v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  unint64_t v108 = *(void (***)(char *, uint64_t))(v115 - 8);
  MEMORY[0x270FA5388](v115);
  uint64_t v114 = (char *)v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v18 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  uint64_t v112 = (char *)v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v23 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  uint64_t v119 = (char *)v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for PKStroke();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  CGRect v124 = (char *)v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)v81 - v30;
  uint64_t v32 = *(void *)(a2 + 16);
  if (v32)
  {
    v81[2] = v4;
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    uint64_t v33 = v26 + 16;
    CGRect v123 = v34;
    uint64_t v35 = (char *)(v29 + ((*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64)));
    uint64_t v110 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
    uint64_t v109 = (void (**)(char *, char *, uint64_t))(v18 + 16);
    uint64_t v122 = *(void *)(v33 + 56);
    ++v108;
    CGFloat v107 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v106 = (unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    uint64_t v98 = (void (**)(char *, char *, uint64_t))(v23 + 32);
    uint64_t v97 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v93 = (void (**)(char *, char *, uint64_t))(v15 + 16);
    ++v105;
    uint64_t v96 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    uint64_t v86 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
    uint64_t v85 = (void (**)(uint64_t, char *, uint64_t))(v121 + 5);
    uint64_t v82 = v15;
    uint64_t v84 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v95 = (void (**)(char *, uint64_t))(v23 + 8);
    char v121 = (void (**)(char *, uint64_t))(v33 - 8);
    v81[1] = v29;
    swift_bridgeObjectRetain();
    uint64_t v116 = v25;
    uint64_t v118 = v33;
    CGFloat v120 = v31;
    while (1)
    {
      uint64_t v36 = v123;
      v123(v31, v35, v25);
      v36(v124, v31, v25);
      type metadata accessor for PKStrokeCoherence(0);
      if (swift_dynamicCast())
      {
        uint64_t v37 = v126;
        uint64_t v38 = &v126[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode];
        swift_beginAccess();
        uint64_t v39 = v22;
        uint64_t v40 = v112;
        uint64_t v41 = v113;
        (*v109)(v112, v38, v113);

        uint64_t v42 = v114;
        CRRegister.value.getter();
        uint64_t v43 = v115;
        SharedTagged_2.tagged1.getter();
        (*v108)(v42, v43);
        uint64_t v44 = v40;
        uint64_t v22 = v39;
        uint64_t v45 = v127;
        uint64_t v25 = v116;
        uint64_t v46 = v41;
        uint64_t v31 = v120;
        (*v107)(v44, v46);
        if ((*v106)(v39, 1, v45) != 1)
        {
          (*v98)(v119, v39, v127);
          Class isa = PKStroke._bridgeToObjectiveC()().super.isa;
          id v48 = [(objc_class *)isa _strokeUUID];

          uint64_t v49 = (uint64_t)v100;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v50 = v101;
          if (*(void *)(v101 + 16) && (unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v49), (v52 & 1) != 0))
          {
            unint64_t v53 = *(void *)(v50 + 56) + *(void *)(v82 + 72) * v51;
            uint64_t v54 = v103;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v82 + 16))(v117, v53, v103);
            uint64_t v55 = 0;
          }
          else
          {
            uint64_t v55 = 1;
            uint64_t v54 = v103;
          }
          uint64_t v56 = v117;
          (*v97)(v117, v55, 1, v54);
          uint64_t v57 = (void (*)(char *, uint64_t))*v105;
          ((void (*)(uint64_t, uint64_t))*v105)(v49, v111);
          int v58 = (*v96)(v56, 1, v54);
          uint64_t v104 = v57;
          if (v58 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v117, &demangling cache variable for type metadata for PKStrokePath?);
          }
          else
          {
            unint64_t v59 = v87;
            (*v86)(v87, v117, v54);
            (*v93)(v90, v59, v54);
            uint64_t v60 = type metadata accessor for CRKeyPath();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v92, 1, 1, v60);
            _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
            swift_retain();
            uint64_t v61 = v88;
            Ref.init<A>(_:_:identity:)();
            uint64_t v62 = (void (*)(char **, void))Ref.subscript.modify();
            type metadata accessor for PKStrokeStruct(0);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
            uint64_t v63 = (void (*)(char *, void))CRRegister.wrappedValue.modify();
            uint64_t v65 = v64;
            uint64_t v66 = type metadata accessor for PKStrokeProperties(0);
            (*v85)(v65 + *(int *)(v66 + 32), v61, v89);
            v63(v125, 0);
            v62(&v126, 0);
            (*v84)(v59, v103);
          }
          uint64_t v67 = v99;
          uint64_t v31 = v120;
          Class v68 = PKStroke._bridgeToObjectiveC()().super.isa;
          id v69 = [(objc_class *)v68 _strokeUUID];

          uint64_t v70 = (uint64_t)v102;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(void *)(v67 + 16) && (unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v70), (v72 & 1) != 0))
          {
            id v73 = *(id *)(*(void *)(v67 + 56) + 8 * v71);
            v104(v102, v111);
            type metadata accessor for PKStrokeMaskStruct();
            uint64_t v74 = swift_allocObject();
            type metadata accessor for PKStrokeMaskWrapper();
            uint64_t v75 = swift_allocObject();
            *(void *)(v75 + 16) = v73;
            *(void *)(v74 + 16) = v75;
            uint64_t v104 = (void (*)(char *, uint64_t))v73;
            uint64_t v76 = v127;
            uint64_t v77 = v119;
            uint64_t v83 = (void (*)(char **, void))Ref.subscript.modify();
            type metadata accessor for PKStrokeStruct(0);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
            int v78 = (void (*)(char *, void))CRRegister.wrappedValue.modify();
            *(void *)(v79 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 36)) = v74;
            uint64_t v31 = v120;
            swift_release();
            v78(v125, 0);
            v83(&v126, 0);

            CGFloat v80 = v77;
            uint64_t v25 = v116;
            (*v95)(v80, v76);
          }
          else
          {
            v104((char *)v70, v111);
            (*v95)(v119, v127);
          }
          (*v121)(v31, v25);
          goto LABEL_5;
        }
      }
      else
      {
        (*v110)(v22, 1, 1, v127);
      }
      (*v121)(v31, v25);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
LABEL_5:
      v35 += v122;
      if (!--v32)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
}

uint64_t PKDrawingCoherence.transformStrokes(_:paths:masks:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for paperKitBundle != -1) {
    swift_once();
  }
  v16._object = (void *)0x800000020C859950;
  v7._uint64_t countAndFlagsBits = 0x5320796669646F4DLL;
  v7._object = (void *)0xEE0073656B6F7274;
  v8.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v8.value._object = (void *)0xEB00000000656C62;
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v16._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v16);
  uint64_t v11 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v12 = specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(v10._countAndFlagsBits, (uint64_t)v10._object, 1, 1, v11, v11, a1, a2, a3);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_20C835790;
  *(void *)(v13 + 32) = v12;
  uint64_t v15 = v13;
  specialized Array._endMutation()();
  return v15;
}

uint64_t closure #1 in PKDrawingCoherence.setStrokes(_:inks:)(objc_class *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v122 = a1;
  uint64_t v5 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v108 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v98 = (uint64_t)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v97 = (char *)&v91 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v96 = (char *)&v91 - v12;
  MEMORY[0x270FA5388](v13);
  CGFloat v107 = (char *)&v91 - v14;
  uint64_t v106 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v106);
  uint64_t v95 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  double v146 = (char *)&v91 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v105 = (char *)&v91 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v109 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v94 = (char *)&v91 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v103 = (char *)&v91 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v104 = (char *)&v91 - v28;
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v29 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  CGFloat v120 = (char *)&v91 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v31 = *(void *)(v119 - 8);
  MEMORY[0x270FA5388](v119);
  uint64_t v118 = (char *)&v91 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v33 - 8);
  id v140 = (char *)&v91 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v35 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  uint64_t v117 = (char *)&v91 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for PKInk();
  uint64_t v138 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  char v142 = (char *)&v91 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for PKStroke();
  uint64_t v93 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  id v137 = (char *)&v91 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  v144 = (char *)&v91 - v41;
  uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PKStroke, PKInk));
  MEMORY[0x270FA5388](v136);
  id v135 = (char *)&v91 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = *(void *)(a2 + 16);
  uint64_t v100 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v134 = v43;
  if (!v43)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v132 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 16);
  uint64_t v131 = v100 + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80));
  uint64_t v130 = *(void *)(v93 + 72);
  uint64_t v133 = v93 + 16;
  uint64_t v128 = (void (**)(char *, char *, uint64_t))(v93 + 32);
  uint64_t v127 = v138 + 16;
  uint64_t v126 = v138 + 32;
  uint64_t v116 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
  uint64_t v115 = (void (**)(char *, char *, uint64_t))(v31 + 16);
  uint64_t v114 = (void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v113 = (void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v112 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  uint64_t v102 = (void (**)(char *, uint64_t, uint64_t))(v35 + 32);
  CGFloat v147 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  v145 = (void (**)(char *, uint64_t, uint64_t))(v21 + 32);
  uint64_t v92 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  unint64_t v44 = 0;
  uint64_t v101 = (void (**)(char *, uint64_t))(v35 + 8);
  CGRect v125 = (void (**)(char *, uint64_t))(v138 + 8);
  uint64_t v129 = a3;
  uint64_t v124 = v38;
  uint64_t v150 = (void (**)(char *, uint64_t))(v21 + 8);
  for (uint64_t result = v132(v144, v131, v38); ; uint64_t result = v132(v144, v131 + v130 * v44, v38))
  {
    unint64_t v47 = *(void *)(a3 + 16);
    if (v44 == v47)
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v144, v38);
      goto LABEL_18;
    }
    if (v44 >= v47) {
      break;
    }
    uint64_t v48 = v138;
    uint64_t v49 = a3 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
    uint64_t v50 = *(void *)(v138 + 72);
    unint64_t v141 = v44;
    uint64_t v51 = v49 + v50 * v44;
    char v52 = v135;
    unint64_t v53 = &v135[*(int *)(v136 + 48)];
    uint64_t v54 = *v128;
    (*v128)(v135, v144, v38);
    uint64_t v55 = v51;
    uint64_t v56 = v143;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v53, v55, v143);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v142, v53, v56);
    v54(v137, v52, v38);
    type metadata accessor for PKStrokeCoherence(0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v46 = (uint64_t)v140;
      (*v116)(v140, 1, 1, v139);
LABEL_4:
      (*v125)(v142, v143);
      outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
      a3 = v129;
      goto LABEL_5;
    }
    uint64_t v57 = v149;
    int v58 = &v149[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode];
    swift_beginAccess();
    unint64_t v59 = v118;
    uint64_t v60 = v119;
    (*v115)(v118, v58, v119);

    uint64_t v61 = v120;
    CRRegister.value.getter();
    uint64_t v62 = v121;
    SharedTagged_2.tagged1.getter();
    (*v114)(v61, v62);
    uint64_t v63 = v59;
    uint64_t v38 = v124;
    uint64_t v64 = v139;
    uint64_t v46 = (uint64_t)v140;
    (*v113)(v63, v60);
    int v65 = (*v112)(v46, 1, v64);
    uint64_t v66 = v150;
    if (v65 == 1) {
      goto LABEL_4;
    }
    (*v102)(v117, v46, v64);
    uint64_t v67 = v122;
    uint64_t v111 = (void (*)(char **, void))Ref.subscript.modify();
    id v69 = v68;
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    unint64_t v71 = v104;
    uint64_t v110 = v69;
    CRRegister.wrappedValue.getter();
    char v72 = v105;
    Ref.subscript.getter();
    CGRect v123 = *v66;
    v123(v71, v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    uint64_t v73 = (uint64_t)v107;
    CRRegister.wrappedValue.getter();
    uint64_t v74 = (uint64_t)v72;
    uint64_t v75 = v70;
    outlined destroy of PKDrawingStruct(v74, type metadata accessor for PKStrokeInheritedProperties);
    uint64_t v76 = *v147;
    LODWORD(v69) = (*v147)(v73, 1, v20);
    outlined destroy of StocksKitCurrencyCache.Provider?(v73, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    if (v69 != 1)
    {
      uint64_t v77 = v123;
      CRRegister.wrappedValue.getter();
      Class v148 = v67;
      swift_retain_n();
      int v78 = v94;
      uint64_t v99 = v75;
      CRRegister.wrappedValue.getter();
      lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct>.Ref and conformance Capsule<A>.Ref, &demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref);
      for (uint64_t i = (uint64_t)v96; ; (*v145)(v78, i, v20))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref);
        uint64_t v80 = (uint64_t)v146;
        Ref.subscript.getter();
        CRRegister.wrappedValue.getter();
        outlined destroy of PKDrawingStruct(v80, type metadata accessor for PKStrokeInheritedProperties);
        if (v76(i, 1, v20) == 1) {
          break;
        }
        v77(v78, v20);
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(i, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
      swift_release();
      Ref.subscript.getter();
      v77(v78, v20);
      double v81 = v103;
      Ref.subscript.setter();
      v77(v81, v20);
      uint64_t v82 = v109;
      CRRegister.wrappedValue.getter();
      uint64_t v83 = (uint64_t)v97;
      (*v92)(v97, 1, 1, v20);
      uint64_t v110 = (void (*)(Class *, void))Ref.subscript.modify();
      outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v83, v98, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?(v83, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
      v110(&v148, 0);
      v77(v82, v20);
    }
    v111(&v149, 0);
    uint64_t v84 = (uint64_t)v108;
    uint64_t v85 = v139;
    uint64_t v86 = v117;
    Ref.subscript.getter();
    uint64_t v87 = v109;
    CRRegister.wrappedValue.getter();
    outlined destroy of PKDrawingStruct(v84, type metadata accessor for PKStrokeStruct);
    uint64_t v88 = v142;
    Class isa = PKInk._bridgeToObjectiveC()().super.isa;
    uint64_t v90 = (void (*)(char **, void))Ref.subscript.modify();
    Class v148 = isa;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    CRRegister.wrappedValue.setter();
    v90(&v149, 0);
    v123(v87, v20);
    (*v101)(v86, v85);
    (*v125)(v88, v143);
    a3 = v129;
    uint64_t v38 = v124;
LABEL_5:
    unint64_t v44 = v141 + 1;
    if (v141 + 1 == v134) {
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

void closure #1 in PKDrawingCoherence.setStrokes(_:groupID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = a3;
  uint64_t v51 = a1;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v5 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v49 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v7 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  unint64_t v47 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for PKStroke();
  uint64_t v9 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  MEMORY[0x270FA5388](v14);
  unint64_t v44 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17)
  {
    v34[2] = v3;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v18 = v9 + 16;
    uint64_t v42 = v19;
    uint64_t v20 = a2 + ((*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64));
    uint64_t v41 = (void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v40 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v39 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    uint64_t v37 = (void (**)(char *, char *, uint64_t))(v15 + 32);
    v34[0] = v15;
    uint64_t v36 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v35 = *(void *)(v18 + 56);
    v34[1] = a2;
    swift_bridgeObjectRetain();
    uint64_t v43 = v18;
    while (1)
    {
      uint64_t v21 = v14;
      v42(v45, v20, v46);
      type metadata accessor for PKStrokeCoherence(0);
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      uint64_t v22 = v53;
      uint64_t v23 = &v53[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode];
      swift_beginAccess();
      uint64_t v24 = v47;
      uint64_t v25 = v48;
      (*v41)(v47, v23, v48);

      uint64_t v26 = v49;
      CRRegister.value.getter();
      uint64_t v27 = v50;
      SharedTagged_2.tagged1.getter();
      (*v40)(v26, v27);
      (*v39)(v24, v25);
      uint64_t v14 = v21;
      if ((*v38)(v13, 1, v21) == 1) {
        goto LABEL_9;
      }
      uint64_t v28 = v44;
      (*v37)(v44, v13, v21);
      uint64_t v29 = (void (*)(char **, void))Ref.subscript.modify();
      type metadata accessor for PKStrokeStruct(0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
      uint64_t v30 = (void (*)(char *, void))CRRegister.wrappedValue.modify();
      uint64_t v32 = v31;
      uint64_t v33 = type metadata accessor for PKStrokeProperties(0);
      outlined assign with copy of UUID?(v54, v32 + *(int *)(v33 + 20));
      v30(v52, 0);
      v29(&v53, 0);
      (*v36)(v28, v21);
      v20 += v35;
      if (!--v17)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34[0] + 56))(v13, 1, 1, v14);
LABEL_9:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void closure #1 in PKDrawingCoherence.undoableSetStrokes(_:groupID:actionName:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PKStroke();
  v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a3, (uint64_t)v7, &demangling cache variable for type metadata for UUID?);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
  }
  objc_msgSend(a1, sel_setStrokes_groupID_, v8.super.isa, isa);
}

uint64_t closure #1 in PKDrawingCoherence.mergeStrokes(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  NSArray v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a2 >> 62))
  {
    uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v9 >= 1)
  {
    v15[1] = v2;
    uint64_t v11 = 0;
    uint64_t v12 = (void (**)(char *, uint64_t))(v6 + 8);
    do
    {
      if ((a2 & 0xC000000000000001) != 0) {
        uint64_t v13 = (void *)MEMORY[0x21054E050](v11, a2);
      }
      else {
        uint64_t v13 = *(id *)(a2 + 8 * v11 + 32);
      }
      uint64_t v14 = v13;
      ++v11;
      (*(void (**)(uint64_t, void))((*MEMORY[0x263F8EED0] & *v13) + 0xA0))(a1, 0);

      (*v12)(v8, v5);
    }
    while (v9 != v11);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id PKDrawingCoherence.update(fromSlicedIntersectingIndexes:resultNewRoots:resultUpdatedStrokes:count:)(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v48 = a4;
  id v49 = a3;
  unint64_t v47 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CapsuleUndoAction();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v50 = v10;
  uint64_t v51 = v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v46 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  char v52 = (char *)&v43 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = &v4[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v23(v21, v22, v15);
  uint64_t v53 = v48;
  uint64_t v54 = a2;
  uint64_t v55 = v47;
  id v56 = v49;
  swift_beginAccess();
  Capsule.mutate<A>(_:)();
  swift_endAccess();
  id v49 = v5;
  objc_msgSend(v5, sel_invalidateVisibleStrokes);
  v23(v18, v22, v15);
  uint64_t v24 = v50;
  Capsule.actionUndoingDifference(from:)();
  uint64_t v26 = v16 + 8;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v16 + 8);
  v25(v18, v15);
  uint64_t v27 = v51;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v9, 1, v24) == 1)
  {
    v25(v21, v15);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    uint64_t v45 = v25;
    unint64_t v47 = v21;
    uint64_t v48 = v26;
    uint64_t v29 = v52;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v52, v9, v24);
    if (one-time initialization token for paperKitBundle != -1) {
      swift_once();
    }
    v30._object = (void *)0xEB00000000657361;
    v58._object = (void *)0x800000020C859C50;
    v30._uint64_t countAndFlagsBits = 0x7245206C65786950;
    v31.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
    v31.value._object = (void *)0xEB00000000656C62;
    v32._uint64_t countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    v58._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    Swift::String v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, paperKitBundle, v32, v58);
    uint64_t countAndFlagsBits = v33._countAndFlagsBits;
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    uint64_t v35 = v46;
    v34(v46, v29, v24);
    uint64_t v36 = v24;
    id v37 = objc_msgSend(v49, sel_uuid);
    uint64_t v38 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    uint64_t v39 = (char *)objc_allocWithZone(v38);
    v34(&v39[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v35, v36);
    uint64_t v40 = (void *)MEMORY[0x21054D080](countAndFlagsBits, v33._object);
    swift_bridgeObjectRelease();
    v57.receiver = v39;
    v57.super_class = v38;
    id v28 = objc_msgSendSuper2(&v57, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v37, v40, 1);
    swift_unknownObjectRelease();

    uint64_t v41 = *(void (**)(char *, uint64_t))(v27 + 8);
    v41(v35, v36);
    v41(v52, v36);
    v45(v47, v15);
  }
  return v28;
}

void closure #1 in PKDrawingCoherence.update(fromSlicedIntersectingIndexes:resultNewRoots:resultUpdatedStrokes:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a3;
  uint64_t v31 = a5;
  uint64_t v27 = a4;
  uint64_t v29 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v6 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11 < 0)
  {
LABEL_16:
    __break(1u);
    return;
  }
  if (v11)
  {
    uint64_t v14 = (void (**)(char *, uint64_t))(v10 + 8);
    id v28 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v15 = v11;
    uint64_t v35 = v11;
    while (v15 <= v11)
    {
      --v15;
      uint64_t v16 = *(void **)(v30 + 8 * v15);
      if (v16)
      {
        type metadata accessor for PKStrokeCoherenceBase(0);
        uint64_t v17 = (void *)swift_dynamicCastClassUnconditional();
        uint64_t v18 = *(void (**)(uint64_t, void))((*MEMORY[0x263F8EED0] & *v17) + 0xA0);
        uint64_t v33 = (*MEMORY[0x263F8EED0] & *v17) + 160;
        uint64_t v34 = v18;
        id v32 = v16;
        v34(a1, 0);

        (*v14)(v13, v9);
      }
      else
      {
        uint64_t KeyPath = swift_getKeyPath();
        uint64_t v20 = *(void (**)(uint64_t, void))(v27 + 8 * v15);
        uint64_t v33 = KeyPath;
        uint64_t v34 = v20;
        _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
        uint64_t v21 = (void (*)(long long *, void))Capsule.Ref<>.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
        CROrderedSet.remove(at:)((Swift::Int)v34);
        v21(&v37, 0);
        swift_release();
      }
      uint64_t v22 = *(void **)(v31 + 8 * v15);
      uint64_t v11 = v35;
      if (v22)
      {
        uint64_t v34 = (void (*)(uint64_t, void))v15;
        id v23 = v22;
        NSArray.makeIterator()();
        NSFastEnumerationIterator.next()();
        uint64_t v24 = (void *)MEMORY[0x263F8EED0];
        while (v38)
        {
          outlined init with take of Any(&v37, &v36);
          type metadata accessor for PKStrokeCoherenceBase(0);
          swift_dynamicCast();
          uint64_t v25 = v39;
          (*(void (**)(uint64_t, void))((*v24 & *v39) + 0xA0))(a1, 0);

          (*v14)(v13, v9);
          NSFastEnumerationIterator.next()();
        }
        (*v28)(v8, v29);

        uint64_t v15 = (uint64_t)v34;
        uint64_t v11 = v35;
      }
      if (!v15) {
        return;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
}

id PKDrawingCoherence.applyTransform(_:transformInk:)(uint64_t a1, char a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = v2 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  uint64_t v11 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  uint64_t v12 = (char *)objc_allocWithZone(v11);
  v10(&v12[OBJC_IVAR___PKDrawingCoherence_model], (uint64_t)v8, v5);
  v17.receiver = v12;
  v17.super_class = v11;
  id v13 = objc_msgSendSuper2(&v17, sel_init);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15[16] = a2;
  uint64_t v16 = a1;
  swift_beginAccess();
  Capsule.mutate<A>(_:)();
  swift_endAccess();
  objc_msgSend(v13, sel_invalidateVisibleStrokes);
  return v13;
}

uint64_t closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(uint64_t a1, int a2, CGFloat *a3)
{
  int v31 = a2;
  CGFloat v4 = *a3;
  CGFloat v5 = a3[1];
  CGFloat v6 = a3[2];
  CGFloat v7 = a3[3];
  CGFloat v8 = a3[4];
  CGFloat v9 = a3[5];
  uint64_t v35 = a3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v34 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = &v30[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v37 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = &v30[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v33 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = &v30[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getKeyPath();
  uint64_t v32 = _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  uint64_t v41 = a1;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  CROrderedSet.makeIterator()();
  (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v18, v16);
  uint64_t v37 = v19;
  long long v36 = v21;
  CROrderedSet.Iterator.next()();
  uint64_t v22 = v34;
  id v23 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48);
  if (v23(v15, 1, v10) != 1)
  {
    uint64_t v34 = *(void *)(v22 + 32);
    uint64_t v24 = (void (**)(unsigned char *, uint64_t))(v22 + 8);
    int v25 = v31 & 1;
    do
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v34)(v12, v15, v10);
      transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)((uint64_t)v12, v41, v25, v35);
      (*v24)(v12, v10);
      CROrderedSet.Iterator.next()();
    }
    while (v23(v15, 1, v10) != 1);
  }
  (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v36, v37);
  uint64_t v26 = (uint64_t (*)(unsigned char *, void))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  uint64_t v27 = (void (*)(unsigned char *, void))CRRegister.wrappedValue.modify();
  CGRect v42 = *v28;
  v38.CGFloat a = v4;
  v38.CGFloat b = v5;
  v38.CGFloat c = v6;
  v38.CGFloat d = v7;
  v38.tCGFloat x = v8;
  v38.tCGFloat y = v9;
  *id v28 = CGRectApplyAffineTransform(v42, &v38);
  v27(v39, 0);
  return v26(v40, 0);
}

uint64_t transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(uint64_t a1, uint64_t a2, int a3, CGFloat *a4)
{
  int v162 = a3;
  double v166 = *(double *)&a2;
  uint64_t v165 = a1;
  CGFloat v4 = *a4;
  CGFloat v5 = a4[1];
  CGFloat v6 = a4[2];
  CGFloat v7 = a4[3];
  CGFloat v8 = a4[4];
  CGFloat v9 = a4[5];
  *(void *)&long long v170 = a4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x270FA5388](v10 - 8);
  id v135 = (char *)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v131 = (char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x270FA5388](v146);
  uint64_t v133 = (char *)&v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  CGRect v167 = (uint64_t (**)(char *, uint64_t))((char *)&v127 - v16);
  uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  uint64_t v138 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  uint64_t v129 = (char *)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v130 = (char *)&v127 - v19;
  uint64_t v134 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x270FA5388](v134);
  v144 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  uint64_t v147 = *(void *)(v148 - 8);
  MEMORY[0x270FA5388](v148);
  v145 = (char *)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x270FA5388](v143);
  uint64_t v128 = (char *)&v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x270FA5388](v140);
  uint64_t v137 = (uint64_t)&v127 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v136 = (char *)&v127 - v25;
  uint64_t v142 = type metadata accessor for PKStrokePath();
  uint64_t v141 = *(void *)(v142 - 8);
  MEMORY[0x270FA5388](v142);
  unint64_t v132 = (char *)&v127 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v139 = (char *)&v127 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x270FA5388](v29 - 8);
  char v158 = (char *)&v127 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  uint64_t v159 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160);
  id v149 = (char *)&v127 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v161 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  *(void *)&long long v169 = (char *)&v127 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v34 - 8);
  id v171 = (char *)&v127 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v155 = *(void *)(v156 - 8);
  MEMORY[0x270FA5388](v156);
  uint64_t v154 = (char *)&v127 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  uint64_t v157 = *(void *)(v173 - 8);
  MEMORY[0x270FA5388](v173);
  Class isa = (Class)((char *)&v127 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v39 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v41 = (char *)&v127 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v42 - 8);
  unint64_t v44 = (char *)&v127 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v46 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v152 = (char *)&v127 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v48);
  uint64_t v50 = (char *)&v127 - v49;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  char v52 = *(uint64_t (***)(char *, uint64_t))(v51 - 8);
  MEMORY[0x270FA5388](v51);
  id v163 = (char *)&v127 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = v32;
  Ref.subscript.getter();
  CRRegister.value.getter();
  SharedTagged_2.tagged2.getter();
  uint64_t v54 = v51;
  uint64_t v55 = v52;
  id v56 = *(void (**)(char *, uint64_t))(v39 + 8);
  objc_super v57 = v41;
  Swift::String v58 = v41;
  uint64_t v59 = v38;
  uint64_t v153 = v39 + 8;
  uint64_t v151 = v56;
  v56(v58, v38);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v46 + 8);
  uint64_t v61 = v45;
  uint64_t v150 = v46 + 8;
  v60(v50, v45);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55[6])(v44, 1, v54) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v44, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    uint64_t v62 = v60;
    uint64_t v63 = v152;
    CGFloat v64 = v166;
    Ref.subscript.getter();
    CRRegister.value.getter();
    uint64_t v65 = (uint64_t)v158;
    SharedTagged_2.tagged1.getter();
    v151(v57, v59);
    v62(v63, v61);
    uint64_t v66 = v159;
    uint64_t v67 = v160;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v65, 1, v160) == 1)
    {
      return outlined destroy of StocksKitCurrencyCache.Provider?(v65, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    }
    else
    {
      double v81 = v149;
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v149, v65, v67);
      uint64_t v82 = (uint64_t)v136;
      if (v162)
      {
        uint64_t v83 = (void (*)(CGAffineTransform *, void))Ref.subscript.modify();
        specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(*(uint64_t *)&v64);
        v83(&t1, 0);
        Ref.subscript.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
        uint64_t v84 = v129;
        CRRegister.wrappedValue.getter();
        outlined destroy of PKDrawingStruct(v82, type metadata accessor for PKStrokeStruct);
        uint64_t v85 = v168;
        uint64_t v86 = (void (*)(char *, void))Ref.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
        uint64_t v87 = (void (*)(char *, void))CRRegister.wrappedValue.modify();
        uint64_t v89 = v88;
        long long v90 = v88[1];
        long long v91 = v88[2];
        *(_OWORD *)&t1.CGFloat a = *v88;
        *(_OWORD *)&t1.CGFloat c = v90;
        *(_OWORD *)&t1.tCGFloat x = v91;
        t2.CGFloat a = v4;
        t2.CGFloat b = v5;
        t2.CGFloat c = v6;
        t2.CGFloat d = v7;
        t2.tCGFloat x = v8;
        t2.tCGFloat y = v9;
        CGAffineTransformConcat(&v174, &t1, &t2);
        long long v92 = *(_OWORD *)&v174.c;
        long long v93 = *(_OWORD *)&v174.tx;
        *uint64_t v89 = *(_OWORD *)&v174.a;
        v89[1] = v92;
        v89[2] = v93;
        v87(v176, 0);
        v86(v177, 0);
        (*(void (**)(char *, uint64_t))(v138 + 8))(v84, v85);
        return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v81, v67);
      }
      else
      {
        Ref.subscript.getter();
        uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
        uint64_t v95 = (uint64_t)v128;
        uint64_t v173 = v94;
        CRRegister.wrappedValue.getter();
        outlined destroy of PKDrawingStruct(v82, type metadata accessor for PKStrokeStruct);
        uint64_t v96 = v147;
        uint64_t v97 = v145;
        uint64_t v98 = v148;
        (*(void (**)(char *, uint64_t, uint64_t))(v147 + 16))(v145, v95 + *(int *)(v143 + 32), v148);
        outlined destroy of PKDrawingStruct(v95, type metadata accessor for PKStrokeProperties);
        uint64_t v99 = v144;
        Ref.subscript.getter();
        (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
        (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v139, v99, v142);
        Class isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
        uint64_t v100 = (_OWORD *)swift_allocObject();
        uint64_t v101 = v170;
        long long v102 = *(_OWORD *)(v170 + 16);
        v100[1] = *(_OWORD *)v170;
        _OWORD v100[2] = v102;
        v100[3] = *(_OWORD *)(v101 + 32);
        *(void *)&t1.tCGFloat x = partial apply for closure #1 in transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:);
        *(void *)&t1.tCGFloat y = v100;
        *(void *)&t1.CGFloat a = MEMORY[0x263EF8330];
        *(void *)&t1.CGFloat b = 1107296256;
        *(void *)&t1.CGFloat c = thunk for @escaping @callee_guaranteed (@unowned CGPoint) -> (@unowned CGPoint);
        *(void *)&t1.CGFloat d = &block_descriptor_41;
        id v171 = (char *)_Block_copy(&t1);
        swift_release();
        Ref.subscript.getter();
        t1.CGFloat a = v64;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
        uint64_t v103 = v130;
        CRRegister.wrappedValue.getter();
        lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct>.Ref and conformance Capsule<A>.Ref, &demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref);
        uint64_t v104 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v138 + 48);
        uint64_t v105 = (void (**)(char *, uint64_t))(v138 + 8);
        uint64_t v106 = (void (**)(char *, uint64_t, uint64_t))(v138 + 32);
        uint64_t v107 = (uint64_t)v131;
        uint64_t v108 = (uint64_t)v167;
        while (1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref);
          Ref.subscript.getter();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
          CRRegister.wrappedValue.getter();
          uint64_t v109 = v168;
          outlined destroy of PKDrawingStruct(v108, type metadata accessor for PKStrokeInheritedProperties);
          if ((*v104)(v107, 1, v109) == 1) {
            break;
          }
          (*v105)(v103, v109);
          (*v106)(v103, v107, v109);
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v107, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
        outlined destroy of PKDrawingStruct(v137, type metadata accessor for PKStrokeStruct);
        swift_release();
        uint64_t v110 = (uint64_t)v133;
        Ref.subscript.getter();
        (*v105)(v103, v109);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
        CRRegister.wrappedValue.getter();
        long long v170 = *(_OWORD *)&t1.a;
        long long v169 = *(_OWORD *)&t1.c;
        tCGFloat x = t1.tx;
        tCGFloat y = t1.ty;
        outlined destroy of PKDrawingStruct(v110, type metadata accessor for PKStrokeInheritedProperties);
        *(_OWORD *)&t1.CGFloat a = v170;
        *(_OWORD *)&t1.CGFloat c = v169;
        t1.tCGFloat x = tx;
        t1.tCGFloat y = ty;
        Class v113 = isa;
        uint64_t v114 = v171;
        id v115 = [(objc_class *)isa copyTransformed:v171 inCoordinateSpace:&t1];
        _Block_release(v114);

        uint64_t v116 = v132;
        static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v117 = v141;
        uint64_t v118 = v142;
        (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v144, v116, v142);
        uint64_t v119 = type metadata accessor for CRKeyPath();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v119 - 8) + 56))(v135, 1, 1, v119);
        _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, (void (*)(uint64_t))type metadata accessor for PKStrokePathStruct);
        swift_retain();
        CGFloat v120 = v145;
        Ref.init<A>(_:_:identity:)();
        uint64_t v121 = v160;
        uint64_t v122 = v149;
        CGRect v123 = (void (*)(CGAffineTransform *, void))Ref.subscript.modify();
        uint64_t v124 = (void (*)(CGAffineTransform *, void))CRRegister.wrappedValue.modify();
        (*(void (**)(uint64_t, char *, uint64_t))(v147 + 40))(v125 + *(int *)(v143 + 32), v120, v148);
        v124(&t2, 0);
        v123(&t1, 0);
        uint64_t v126 = *(void (**)(char *, uint64_t))(v117 + 8);
        v126(v116, v118);
        v126(v139, v118);
        return (*(uint64_t (**)(char *, uint64_t))(v159 + 8))(v122, v121);
      }
    }
  }
  else
  {
    CGRect v167 = v55;
    ((void (*)(char *, char *, uint64_t))v55[4])(v163, v44, v54);
    id v69 = v154;
    double v70 = v166;
    uint64_t v168 = v54;
    Ref.subscript.getter();
    uint64_t v71 = v156;
    CRSequence.makeIterator()();
    (*(void (**)(char *, uint64_t))(v155 + 8))(v69, v71);
    char v72 = v171;
    CRSequence.Iterator.next()();
    uint64_t v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v161 + 48);
    uint64_t v74 = v164;
    int v75 = v73(v72, 1, v164);
    char v76 = v162;
    if (v75 != 1)
    {
      uint64_t v77 = *(void (**)(void, char *, uint64_t))(v161 + 32);
      int v78 = (void (**)(uint64_t, uint64_t))(v161 + 8);
      uint64_t v79 = v171;
      do
      {
        uint64_t v80 = v169;
        v77(v169, v79, v74);
        transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(v80, *(void *)&v70, v76 & 1, v170);
        (*v78)(v80, v74);
        CRSequence.Iterator.next()();
      }
      while (v73(v79, 1, v74) != 1);
    }
    (*(void (**)(Class, uint64_t))(v157 + 8))(isa, v173);
    return v167[1](v163, v168);
  }
}

double closure #1 in transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(_OWORD *a1, double a2, double a3)
{
  long long v3 = a1[1];
  *(_OWORD *)&v5.CGFloat a = *a1;
  *(_OWORD *)&v5.CGFloat c = v3;
  *(_OWORD *)&v5.tCGFloat x = a1[2];
  *(void *)&double result = *(_OWORD *)&CGPointApplyAffineTransform(*(CGPoint *)&a2, &v5);
  return result;
}

double thunk for @escaping @callee_guaranteed (@unowned CGPoint) -> (@unowned CGPoint)(uint64_t a1, double a2, double a3)
{
  CGAffineTransform v5 = *(double (**)(uint64_t, double, double))(a1 + 32);
  uint64_t v6 = swift_retain();
  double v7 = v5(v6, a2, a3);
  swift_release();
  return v7;
}

uint64_t PKDrawingCoherence.merge(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for PKDrawing();
  double v9 = MEMORY[0x270FA5388](v8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v11 + 16))(&v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v8, v9);
  type metadata accessor for PKDrawingCoherence(0);
  if (swift_dynamicCast())
  {
    uint64_t v12 = v17;
    if (v17 == v2)
    {
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v13 = &v17[OBJC_IVAR___PKDrawingCoherence_model];
      swift_beginAccess();
      (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v13, v4);
      swift_beginAccess();
      type metadata accessor for PKDrawingStruct();
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
      LOBYTE(v13) = Capsule.merge<A>(_:)();
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
      swift_endAccess();
      if (v13)
      {
        objc_msgSend(v2, sel_invalidateVisibleStrokes);
        uint64_t v14 = 2;
      }
      else
      {
        uint64_t v14 = 1;
      }
      uint64_t v2 = v12;
    }

    return v14;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t PKDrawingCoherence.undoableMerge(with:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v45 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CapsuleUndoAction();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  double v9 = (char *)&v41 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t v17 = type metadata accessor for PKDrawing();
  double v18 = MEMORY[0x270FA5388](v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17, v18);
  type metadata accessor for PKDrawingCoherence(0);
  if (swift_dynamicCast())
  {
    uint64_t v21 = v49;
    if (v49 == v47)
    {
    }
    else
    {
      uint64_t v42 = v9;
      uint64_t v43 = v5;
      uint64_t v44 = v4;
      uint64_t v22 = &v47[OBJC_IVAR___PKDrawingCoherence_model];
      swift_beginAccess();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
      v23(v16, v22, v10);
      uint64_t v24 = &v21[OBJC_IVAR___PKDrawingCoherence_model];
      swift_beginAccess();
      v23(v13, v24, v10);
      swift_beginAccess();
      type metadata accessor for PKDrawingStruct();
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
      LOBYTE(v24) = Capsule.merge<A>(_:)();
      uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
      v25(v13, v10);
      swift_endAccess();
      if (v24)
      {
        uint64_t v26 = v47;
        objc_msgSend(v47, sel_invalidateVisibleStrokes);
        v23(v13, v22, v10);
        uint64_t v27 = (uint64_t)v45;
        Capsule.actionUndoingDifference(from:)();
        v25(v13, v10);
        uint64_t v29 = v43;
        uint64_t v28 = v44;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v27, 1, v44) != 1)
        {
          uint64_t v32 = v42;
          (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v42, v27, v28);
          uint64_t v33 = v28;
          uint64_t v34 = v26;
          uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
          v35(v46, v32, v33);
          uint64_t v47 = (char *)objc_msgSend(v34, sel_uuid);
          uint64_t v36 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
          uint64_t v37 = (char *)objc_allocWithZone(v36);
          v35(&v37[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v46, v44);
          uint64_t v38 = (void *)MEMORY[0x21054D080](0, 0xE000000000000000);
          v48.receiver = v37;
          v48.super_class = v36;
          id v30 = objc_msgSendSuper2(&v48, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v47, v38, 1);
          swift_unknownObjectRelease();

          uint64_t v39 = *(void (**)(char *, uint64_t))(v29 + 8);
          uint64_t v40 = v44;
          v39(v46, v44);

          v39(v42, v40);
          v25(v16, v10);
          return (uint64_t)v30;
        }
        v25(v16, v10);

        outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for CapsuleUndoAction?);
      }
      else
      {
        v25(v16, v10);
      }
    }
    return 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id @objc PKCoherenceUndoCommand.apply(toDrawingReturnInverted:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(char *))
{
  uint64_t v7 = type metadata accessor for PKDrawing();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = a3;
  id v12 = a1;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = (void *)a4(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v13;
}

uint64_t PKDrawingCoherence.merge<A>(_:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  char v2 = Capsule.merge<A>(_:)();
  swift_endAccess();
  if (v2) {
    objc_msgSend(v1, sel_invalidateVisibleStrokes);
  }
  return v2 & 1;
}

Swift::Int PKDrawingCoherence.hash.getter()
{
  uint64_t v18 = type metadata accessor for CRVersion();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v17 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for CRKeyPath();
  uint64_t v16 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init()();
  uint64_t v9 = v0 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v10(v8, v9, v5);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule<>.rootID.getter();
  id v11 = *(void (**)(char *, uint64_t))(v6 + 8);
  v11(v8, v5);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x263F330F8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v2);
  v10(v8, v9, v5);
  id v12 = v17;
  Capsule.version.getter();
  v11(v8, v5);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5(&lazy protocol witness table cache variable for type CRVersion and conformance CRVersion, MEMORY[0x263F33128]);
  uint64_t v13 = v12;
  uint64_t v14 = v18;
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v14);
  long long v27 = v22;
  long long v28 = v23;
  uint64_t v29 = v24;
  long long v25 = v20;
  long long v26 = v21;
  return Hasher.finalize()();
}

uint64_t PKDrawingCoherence.isEqual(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CRVersion();
  uint64_t v43 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v42 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)&v34 - v6;
  uint64_t v7 = type metadata accessor for CRKeyPath();
  uint64_t v44 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v34 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v34 - v18;
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(a1, (uint64_t)v46, &demangling cache variable for type metadata for Any?);
  if (!v47)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v46, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  type metadata accessor for PKDrawingCoherence(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    char v30 = 0;
    return v30 & 1;
  }
  uint64_t v40 = v45;
  if (v45 == v1)
  {

    char v30 = 1;
    return v30 & 1;
  }
  uint64_t v37 = v3;
  long long v20 = &v1[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v35 = v20;
  v39(v19, v20, v13);
  uint64_t v38 = (void (*)(char *, uint64_t))_sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule<>.rootID.getter();
  long long v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v19, v13);
  long long v22 = &v40[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  uint64_t v34 = v22;
  uint64_t v36 = v14 + 16;
  v39(v16, v22, v13);
  Capsule<>.rootID.getter();
  uint64_t v38 = v21;
  v21(v16, v13);
  char v23 = static CRKeyPath.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v44 + 8);
  v24(v9, v7);
  v24(v12, v7);
  if ((v23 & 1) == 0)
  {

    goto LABEL_9;
  }
  long long v25 = v39;
  v39(v19, v35, v13);
  long long v26 = v41;
  Capsule.version.getter();
  long long v27 = v19;
  long long v28 = v38;
  v38(v27, v13);
  v25(v16, v34, v13);
  uint64_t v29 = v42;
  Capsule.version.getter();
  v28(v16, v13);
  char v30 = static CRVersion.== infix(_:_:)();

  uint64_t v31 = *(void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v32 = v37;
  v31(v29, v37);
  v31(v26, v32);
  return v30 & 1;
}

uint64_t @objc PKDrawingCoherenceVersion.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  return v8 & 1;
}

uint64_t PKDrawingCoherence._stroke(forIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v49 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v45 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v48 = *(void *)(v20 - 8);
  double v21 = MEMORY[0x270FA5388](v20);
  char v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, a1, v15, v21);
  CRKeyPath.init(_:)();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v44 = lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  WeakRef.init(id:)();
  uint64_t v25 = v50 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v43 = v25;
  v42(v14, v25, v9);
  type metadata accessor for PKDrawingStruct();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  uint64_t v26 = (uint64_t)v49;
  uint64_t v50 = v20;
  WeakRef.subscript.getter();
  long long v27 = v14;
  uint64_t v28 = v9;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v27, v9);
  LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v26, 1, v24);
  outlined destroy of StocksKitCurrencyCache.Provider?(v26, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  if (v9 == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v23, v50);
    uint64_t v29 = type metadata accessor for PKStroke();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v51, 1, 1, v29);
  }
  else
  {
    uint64_t v31 = v48;
    uint64_t v32 = v51;
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
    uint64_t v33 = v50;
    Reference.identity.getter();
    uint64_t v34 = (uint64_t)v46;
    Ref.init(id:)();
    uint64_t v35 = (uint64_t)v45;
    v42(v45, v43, v28);
    uint64_t v36 = specialized PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)(v34, v35);
    if (v36)
    {
      uint64_t v37 = (void *)v36;
      uint64_t v38 = (uint64_t)v47;
      static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, uint64_t))(v31 + 8))(v23, v33);
      uint64_t v39 = type metadata accessor for PKStroke();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v23, v33);
      uint64_t v40 = type metadata accessor for PKStroke();
      uint64_t v38 = (uint64_t)v47;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v47, 1, 1, v40);
    }
    return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v38, v32, &demangling cache variable for type metadata for PKStroke?);
  }
}

id PKDrawingCoherence.__allocating_init(from:)(uint64_t a1)
{
  v13[5] = *(id *)MEMORY[0x263EF8340];
  outlined init with copy of FindResult(a1, (uint64_t)v13);
  uint64_t v5 = Data.init(from:)();
  if (!v2)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    id v9 = objc_allocWithZone(v1);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v13[0] = 0;
    id v3 = objc_msgSend(v9, sel_initWithData_error_, isa, v13);

    if (v3)
    {
      id v11 = v13[0];
      __swift_destroy_boxed_opaque_existential_1(a1);
      outlined consume of Data._Representation(v7, v8);
      return v3;
    }
    id v3 = v13[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v7, v8);
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v3;
}

uint64_t PKDrawingCoherence.encode(to:)()
{
  id v1 = objc_msgSend(v0, sel_dataRepresentation);
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  Data.encode(to:)();
  return outlined consume of Data._Representation(v2, v4);
}

id PKDrawingCoherence.__deallocating_deinit()
{
  return PKDrawingCoherenceVersion.__deallocating_deinit(type metadata accessor for PKDrawingCoherence);
}

id protocol witness for Decodable.init(from:) in conformance PKDrawingCoherence@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = PKDrawingCoherence.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PKDrawingCoherence()
{
  id v1 = objc_msgSend(*v0, sel_dataRepresentation);
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  Data.encode(to:)();
  return outlined consume of Data._Representation(v2, v4);
}

uint64_t specialized removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = a3;
  uint64_t v49 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  uint64_t v44 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v41 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v43 = (char *)&v39 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  uint64_t v45 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  uint64_t v47 = *(void *)(v18 - 8);
  uint64_t v48 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v42 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v40 = a2;
  if (!*(void *)(*(void *)(a2 + 16) + 16)) {
    return 0;
  }
  uint64_t v39 = v4;
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(v49, (uint64_t)v22);
  swift_endAccess();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  uint64_t v24 = 1;
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  if (v25 == 1)
  {
    uint64_t v26 = v46;
    Ref.subscript.getter();
    CRRegister.value.getter();
    SharedTagged_2.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v28 = v47;
    uint64_t v27 = v48;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v13, 1, v48) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    }
    else
    {
      uint64_t v29 = v42;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v42, v13, v27);
      char v30 = v43;
      Ref.subscript.getter();
      uint64_t v31 = v39;
      uint64_t v32 = CRSequence.count.getter();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v44 + 8);
      v33(v30, v31);
      if (v32)
      {
        uint64_t v34 = Ref.subscript.getter();
        MEMORY[0x270FA5388](v34);
        uint64_t v35 = v41;
        *(&v39 - 2) = v40;
        *(&v39 - 1) = v26;
        CRSequence.filter(_:)();
        v33(v30, v31);
        if (!CRSequence.count.getter())
        {
          v33(v35, v31);
          (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v48);
          return 1;
        }
        uint64_t v36 = v48;
        Ref.subscript.getter();
        char v37 = CRSequence.hasDelta(from:)();
        v33(v30, v31);
        if (v37)
        {
          (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v30, v35, v31);
          swift_retain();
          Ref.subscript.setter();
        }
        v33(v35, v31);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v36);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
      }
    }
    return 0;
  }
  return v24;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_So01_F8ConcreteCs5NeverOTg5062_s8PaperKit18PKDrawingCoherenceC15concreteDrawingSo0C0CyFSo17_fg3C06D11B00G0VXEfU_0jE00lM0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PKStroke();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v14 = v2;
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v16 = v6 + 16;
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v12 = *(void *)(v6 + 72);
    do
    {
      v15(v8, v11, v5);
      type metadata accessor for PKStrokeCoherenceBase(0);
      swift_dynamicCast();
      uint64_t v13 = v17;
      (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v17) + 0xA8))(a2);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v11 += v12;
      --v9;
    }
    while (v9);
    return v18;
  }
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2;
  uint64_t v45 = type metadata accessor for PKStroke();
  uint64_t v4 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v44 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for PKInk();
  uint64_t v6 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  MEMORY[0x270FA5388](v49);
  uint64_t v48 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v43 = (uint64_t)v38 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v42 = (char *)v38 - v14;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15) {
    return MEMORY[0x263F8EE78];
  }
  v38[1] = v2;
  uint64_t v16 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v51 = *(void *)(v4 + 72);
  uint64_t v17 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v50 = *MEMORY[0x263F14C90];
  uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v41 = v13;
  uint64_t v47 = (void (**)(char *, uint64_t, uint64_t))(v13 + 32);
  v38[0] = a1;
  swift_bridgeObjectRetain();
  unint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v39 = v17;
  do
  {
    PKStroke.ink.getter();
    Class isa = PKInk._bridgeToObjectiveC()().super.isa;
    id v20 = [(objc_class *)isa identifier];

    if (!v20)
    {
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v20 = (id)MEMORY[0x21054D080](v21);
      swift_bridgeObjectRelease();
    }
    (*v17)(v8, v52);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
    if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        (*v40)(v44, v16, v45);
        type metadata accessor for PKStrokeCoherence(0);
        swift_dynamicCast();
        uint64_t v28 = v53;
        uint64_t v29 = v43;
        PKStrokeCoherence.newShared(in:flatten:)(v46, 0, v43);

        char v30 = *v47;
        uint64_t v31 = v42;
        uint64_t v32 = v49;
        (*v47)(v42, v29, v49);
        v30(v48, (uint64_t)v31, v32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, v18);
        }
        unint64_t v34 = *(void *)(v18 + 16);
        unint64_t v33 = *(void *)(v18 + 24);
        uint64_t v35 = v41;
        uint64_t v17 = v39;
        if (v34 >= v33 >> 1)
        {
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v18);
          uint64_t v35 = v41;
          unint64_t v18 = v36;
        }
        *(void *)(v18 + 16) = v34 + 1;
        v30((char *)(v18+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v34), (uint64_t)v48, v49);
      }
    }
    v16 += v51;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(id a1)
{
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v42 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CRKeyPath();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v41 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v12 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v36 - v16;
  self;
  uint64_t v18 = swift_dynamicCastObjCClass();
  if (!v18)
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x263F087E8]), sel_init);
    swift_willThrow();
    return (uint64_t)a1;
  }
  uint64_t v19 = (void *)v18;
  char v37 = v14;
  uint64_t v38 = v1;
  uint64_t v39 = v12;
  long long v20 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
  long long v45 = *MEMORY[0x263F001A0];
  long long v46 = v20;
  type metadata accessor for CGRect(0);
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
  id v36 = a1;
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifie((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  CROrderedSet.init()();
  *(void *)&v11[*(int *)(v9 + 24)] = MEMORY[0x263F8EE80];
  id v21 = objc_msgSend(v19, sel_nsuuid);
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = v42;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = v43;
    uint64_t v25 = v23;
    uint64_t v26 = v47;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v6, v25, v47);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v6, 0, 1, v26);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v6, 1, v26);
    uint64_t v28 = v39;
    if (result != 1)
    {
      CRKeyPath.init(_:)();
      _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
      uint64_t v29 = Capsule<>.init(_:id:)();
      MEMORY[0x270FA5388](v29);
      *(&v36 - 2) = v19;
      uint64_t v30 = v40;
      Capsule.mutate<A>(_:)();
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
      uint64_t v32 = v37;
      v31(v37, v17, v30);
      unint64_t v33 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      unint64_t v34 = (char *)objc_allocWithZone(v33);
      v31(&v34[OBJC_IVAR___PKDrawingCoherence_model], v32, v30);
      v44.receiver = v34;
      v44.super_class = v33;
      a1 = objc_msgSendSuper2(&v44, sel_init);
      uint64_t v35 = *(void (**)(char *, uint64_t))(v28 + 8);
      v35(v32, v30);

      v35(v17, v30);
      return (uint64_t)a1;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v6, 1, 1, v47);
  }
  __break(1u);
  return result;
}

id specialized PKDrawingCoherence.__allocating_init(data:)()
{
  v7[1] = *(id *)MEMORY[0x263EF8340];
  id v1 = objc_allocWithZone(v0);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v7[0] = 0;
  id v3 = objc_msgSend(v1, sel_initWithData_error_, isa, v7);

  if (v3)
  {
    id v4 = v7[0];
  }
  else
  {
    id v5 = v7[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v3;
}

id specialized PKDrawingCoherence.init(data:)()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initWithData_loadNonInkingStrokes_error_, isa, 0, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t type metadata accessor for PKDrawingCoherenceVersion(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKDrawingCoherenceVersion);
}

uint64_t partial apply for closure #1 in PKDrawingCoherence._rootStrokes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in PKDrawingCoherence._rootStrokes.getter(a1, *(void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.bounds.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in PKDrawingCoherence.bounds.getter(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in PKDrawingCoherence._canvasBounds.setter()
{
  return closure #1 in PKDrawingCoherence._canvasBounds.setter();
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.addNewStroke(_:)(uint64_t a1)
{
  return closure #1 in PKDrawingCoherence.addNewStroke(_:)(a1, *(void *)(v1 + 16));
}

id specialized @nonobjc PKDrawingConcrete.init(data:)()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initWithData_error_, isa, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t specialized PKDrawingCoherence.init(data:loadNonInkingStrokes:)(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v24 - v11;
  id v13 = v2;
  outlined copy of Data._Representation(a1, a2);
  type metadata accessor for PKDrawingStruct();
  _sSo6CGRectVAB9Coherence7CRValue8PaperKitWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (void (*)(uint64_t))type metadata accessor for PKDrawingStruct);
  Capsule<>.init(serializedData:allowedAppFormats:)();
  if (v3)
  {
    swift_getObjectType();

    id v14 = objc_allocWithZone(MEMORY[0x263F14AE8]);
    outlined copy of Data._Representation(a1, a2);
    id v15 = specialized @nonobjc PKDrawingConcrete.init(data:)();
    outlined consume of Data._Representation(a1, a2);
    uint64_t v22 = specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(v15);

    outlined consume of Data._Representation(a1, a2);
  }
  else
  {

    uint64_t v26 = 0;
    v24[0] = *(void *)(v7 + 16);
    ((void (*)(char *, char *, uint64_t))v24[0])(v9, v12, v6);
    uint64_t v16 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
    uint64_t v17 = (char *)objc_allocWithZone(v16);
    v24[1] = v13;
    uint64_t v18 = v6;
    uint64_t v19 = v7;
    id v20 = v17;
    ((void (*)(char *, char *, uint64_t))v24[0])(&v17[OBJC_IVAR___PKDrawingCoherence_model], v9, v18);
    v25.receiver = v20;
    v25.super_class = v16;
    uint64_t v22 = (uint64_t)objc_msgSendSuper2(&v25, sel_init);
    id v21 = *(void (**)(char *, uint64_t))(v19 + 8);
    v21(v9, v18);
    outlined consume of Data._Representation(a1, a2);
    v21(v12, v18);
    swift_getObjectType();
  }
  swift_deallocPartialClassInstance();
  return v22;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(char *, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v43 = a6;
  int v42 = a4;
  LODWORD(v44) = a3;
  uint64_t v41 = a2;
  uint64_t v40 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CapsuleUndoAction();
  uint64_t v47 = *(void *)(v12 - 8);
  uint64_t v48 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v39 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  long long v46 = (char *)&v39 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v39 - v21;
  long long v45 = a5;
  uint64_t v23 = (char *)a5 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v24(v22, v23, v16);
  uint64_t v49 = a7;
  uint64_t v50 = 0;
  char v51 = 1;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  if (v44) {
    objc_msgSend(v45, sel_set_cachedVisibleStrokes_, 0);
  }
  v24(v19, v23, v16);
  Capsule.actionUndoingDifference(from:)();
  objc_super v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v19, v16);
  uint64_t v27 = v47;
  uint64_t v26 = v48;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v11, 1, v48) == 1)
  {
    v25(v22, v16);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v46, v11, v26);
    uint64_t v29 = *(void (**)(void))(v27 + 16);
    objc_super v44 = v22;
    uint64_t v30 = v39;
    v29();
    id v31 = objc_msgSend(v45, sel_uuid);
    uint64_t v32 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    long long v45 = v25;
    unint64_t v33 = v32;
    unint64_t v34 = (char *)objc_allocWithZone(v32);
    ((void (*)(char *, char *, uint64_t))v29)(&v34[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v30, v26);
    uint64_t v35 = v41;
    swift_bridgeObjectRetain();
    id v36 = (void *)MEMORY[0x21054D080](v40, v35);
    swift_bridgeObjectRelease();
    v52.receiver = v34;
    v52.super_class = v33;
    id v28 = objc_msgSendSuper2(&v52, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v31, v36, v42 & 1);
    swift_unknownObjectRelease();

    char v37 = *(void (**)(char *, uint64_t))(v27 + 8);
    v37(v30, v26);
    v37(v46, v26);
    v45(v44, v16);
  }
  return v28;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(char *, uint64_t), void *a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v49 = a8;
  uint64_t v48 = a7;
  uint64_t v50 = a6;
  int v47 = a4;
  int v52 = a3;
  uint64_t v46 = a2;
  uint64_t v45 = a1;
  uint64_t v51 = a10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CapsuleUndoAction();
  uint64_t v55 = *(void *)(v14 - 8);
  uint64_t v56 = v14;
  MEMORY[0x270FA5388](v14);
  objc_super v44 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v54 = (char *)&v44 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v44 - v23;
  uint64_t v53 = a5;
  objc_super v25 = (char *)a5 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  objc_super v57 = v24;
  v26(v24, v25, v18);
  uint64_t v58 = v48;
  uint64_t v59 = v49;
  char v60 = a9 & 1;
  uint64_t v27 = v50;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  type metadata accessor for PKStroke();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, sel_deleteStrokes_, isa);

  if (v52) {
    objc_msgSend(v53, sel_set_cachedVisibleStrokes_, 0);
  }
  v26(v21, v25, v18);
  uint64_t v29 = v57;
  Capsule.actionUndoingDifference(from:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v19 + 8);
  v30(v21, v18);
  uint64_t v31 = v55;
  uint64_t v32 = v56;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v13, 1, v56) == 1)
  {
    v30(v29, v18);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v54, v13, v32);
    unint64_t v34 = *(void (**)(void))(v31 + 16);
    uint64_t v35 = v44;
    v34();
    id v36 = objc_msgSend(v53, sel_uuid);
    uint64_t v53 = v30;
    id v37 = v36;
    uint64_t v38 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    uint64_t v39 = (char *)objc_allocWithZone(v38);
    ((void (*)(char *, char *, uint64_t))v34)(&v39[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v35, v32);
    uint64_t v40 = v46;
    swift_bridgeObjectRetain();
    uint64_t v41 = (void *)MEMORY[0x21054D080](v45, v40);
    swift_bridgeObjectRelease();
    v61.receiver = v39;
    v61.super_class = v38;
    id v33 = objc_msgSendSuper2(&v61, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v37, v41, v47 & 1);
    swift_unknownObjectRelease();

    int v42 = *(void (**)(char *, uint64_t))(v31 + 8);
    v42(v35, v32);
    v42(v54, v32);
    v53(v57, v18);
  }
  return v33;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(char *, uint64_t), void *a6)
{
  id v42 = a6;
  int v41 = a4;
  LODWORD(v43) = a3;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CapsuleUndoAction();
  uint64_t v46 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v38 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v45 = (char *)&v38 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v38 - v19;
  objc_super v44 = a5;
  uint64_t v21 = (char *)a5 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v22(v20, v21, v14);
  type metadata accessor for PKStroke();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v42, sel_deleteStrokes_, isa);

  if (v43) {
    objc_msgSend(v44, sel_set_cachedVisibleStrokes_, 0);
  }
  v22(v17, v21, v14);
  Capsule.actionUndoingDifference(from:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v17, v14);
  uint64_t v25 = v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v9, 1, v10) == 1)
  {
    v24(v20, v14);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v45, v9, v10);
    uint64_t v27 = *(void (**)(void))(v25 + 16);
    uint64_t v43 = v20;
    uint64_t v28 = v10;
    uint64_t v29 = v38;
    v27();
    id v30 = objc_msgSend(v44, sel_uuid);
    uint64_t v31 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    uint64_t v32 = (char *)objc_allocWithZone(v31);
    objc_super v44 = v24;
    id v33 = v32;
    ((void (*)(char *, char *, uint64_t))v27)(&v32[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v29, v28);
    uint64_t v34 = v40;
    swift_bridgeObjectRetain();
    uint64_t v35 = (void *)MEMORY[0x21054D080](v39, v34);
    swift_bridgeObjectRelease();
    v47.receiver = v33;
    v47.super_class = v31;
    id v26 = objc_msgSendSuper2(&v47, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v30, v35, v41 & 1);
    swift_unknownObjectRelease();

    id v36 = *(void (**)(char *, uint64_t))(v25 + 8);
    v36(v29, v28);
    v36(v45, v28);
    v44(v43, v14);
  }
  return v26;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(char *, uint64_t), void *a6, uint64_t a7, long long *a8, unsigned __int8 a9)
{
  id v50 = a6;
  int v46 = a4;
  LODWORD(v51) = a3;
  uint64_t v45 = a2;
  uint64_t v44 = a1;
  int v49 = a9;
  long long v48 = *a8;
  long long v47 = a8[1];
  uint64_t v10 = *((void *)a8 + 4);
  uint64_t v11 = *((void *)a8 + 5);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CapsuleUndoAction();
  uint64_t v54 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v43 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v53 = (char *)&v43 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v43 - v24;
  int v52 = a5;
  id v26 = (char *)a5 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v27(v25, v26, v19);
  type metadata accessor for PKStroke();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v56[0] = v48;
  v56[1] = v47;
  uint64_t v57 = v10;
  uint64_t v58 = v11;
  objc_msgSend(v50, sel_transformStrokes_withTransform_concat_, isa, v56, v49 & 1);

  if (v51) {
    objc_msgSend(v52, sel_set_cachedVisibleStrokes_, 0);
  }
  v27(v22, v26, v19);
  Capsule.actionUndoingDifference(from:)();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v20 + 8);
  v29(v22, v19);
  uint64_t v30 = v54;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v14, 1, v15) == 1)
  {
    v29(v25, v19);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v53, v14, v15);
    uint64_t v32 = *(void (**)(void))(v30 + 16);
    uint64_t v51 = v25;
    uint64_t v33 = v15;
    uint64_t v34 = v43;
    v32();
    id v35 = objc_msgSend(v52, sel_uuid);
    id v36 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    id v37 = (char *)objc_allocWithZone(v36);
    int v52 = v29;
    id v38 = v37;
    ((void (*)(char *, char *, uint64_t))v32)(&v37[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v34, v33);
    uint64_t v39 = v45;
    swift_bridgeObjectRetain();
    uint64_t v40 = (void *)MEMORY[0x21054D080](v44, v39);
    swift_bridgeObjectRelease();
    v55.receiver = v38;
    v55.super_class = v36;
    id v31 = objc_msgSendSuper2(&v55, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v35, v40, v46 & 1);
    swift_unknownObjectRelease();

    int v41 = *(void (**)(char *, uint64_t))(v30 + 8);
    v41(v34, v33);
    v41(v53, v33);
    v52(v51, v19);
  }
  return v31;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(char *, uint64_t), void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v48 = a8;
  uint64_t v47 = a7;
  int v49 = a6;
  int v46 = a4;
  int v50 = a3;
  uint64_t v45 = a2;
  uint64_t v44 = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CapsuleUndoAction();
  uint64_t v53 = *(void *)(v13 - 8);
  uint64_t v54 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v43 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  int v52 = (char *)&v42 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v42 - v22;
  uint64_t v51 = a5;
  uint64_t v24 = (char *)a5 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  objc_super v55 = v23;
  v25(v23, v24, v17);
  uint64_t v56 = v47;
  uint64_t v57 = v48;
  uint64_t v58 = a9;
  id v26 = v49;
  swift_beginAccess();
  Capsule.mutate<A>(_:)();
  swift_endAccess();
  objc_msgSend(v26, sel_invalidateVisibleStrokes);
  if (v50) {
    objc_msgSend(v51, sel_set_cachedVisibleStrokes_, 0);
  }
  v25(v20, v24, v17);
  uint64_t v27 = v55;
  Capsule.actionUndoingDifference(from:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v20, v17);
  uint64_t v29 = v53;
  uint64_t v30 = v54;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v12, 1, v54) == 1)
  {
    v28(v27, v17);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v52, v12, v30);
    uint64_t v32 = *(void (**)(void))(v29 + 16);
    uint64_t v33 = v43;
    v32();
    id v34 = objc_msgSend(v51, sel_uuid);
    uint64_t v51 = v28;
    id v35 = v34;
    id v36 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    id v37 = (char *)objc_allocWithZone(v36);
    ((void (*)(char *, char *, uint64_t))v32)(&v37[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v33, v30);
    uint64_t v38 = v45;
    swift_bridgeObjectRetain();
    uint64_t v39 = (void *)MEMORY[0x21054D080](v44, v38);
    swift_bridgeObjectRelease();
    v59.receiver = v37;
    v59.super_class = v36;
    id v31 = objc_msgSendSuper2(&v59, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v35, v39, v46 & 1);
    swift_unknownObjectRelease();

    uint64_t v40 = *(void (**)(char *, uint64_t))(v29 + 8);
    v40(v33, v30);
    v40(v52, v30);
    v51(v55, v17);
  }
  return v31;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, char *a5, void *a6)
{
  id v43 = a6;
  int v42 = a4;
  LODWORD(v44) = a3;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CapsuleUndoAction();
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v48 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v39 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int v46 = (char *)&v38 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v38 - v19;
  id v45 = a5;
  uint64_t v21 = &a5[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v22(v20, v21, v14);
  type metadata accessor for PKStroke();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  type metadata accessor for PKInk();
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v43, sel_setStrokes_inks_, isa, v24);

  if (v44) {
    objc_msgSend(v45, sel_set_cachedVisibleStrokes_, 0);
  }
  v22(v17, v21, v14);
  Capsule.actionUndoingDifference(from:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v17, v14);
  uint64_t v27 = v47;
  uint64_t v26 = v48;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v9, 1, v48) == 1)
  {
    v25(v20, v14);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v46, v9, v26);
    id v43 = v20;
    uint64_t v44 = (void (*)(id, uint64_t))v25;
    uint64_t v29 = *(void (**)(void))(v27 + 16);
    uint64_t v30 = v39;
    v29();
    id v31 = objc_msgSend(v45, sel_uuid);
    uint64_t v32 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    uint64_t v33 = (char *)objc_allocWithZone(v32);
    ((void (*)(char *, char *, uint64_t))v29)(&v33[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v30, v26);
    uint64_t v34 = v41;
    swift_bridgeObjectRetain();
    id v35 = (void *)MEMORY[0x21054D080](v40, v34);
    swift_bridgeObjectRelease();
    v49.receiver = v33;
    v49.super_class = v32;
    id v28 = objc_msgSendSuper2(&v49, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v31, v35, v42 & 1);
    swift_unknownObjectRelease();

    id v36 = *(void (**)(char *, uint64_t))(v27 + 8);
    v36(v30, v26);
    v36(v46, v26);
    v44(v43, v14);
  }
  return v28;
}

uint64_t specialized PKDrawingCoherence.updateStroke(_:indexHint:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PKStroke();
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v3);
  type metadata accessor for PKStrokeCoherenceBase(0);
  if (swift_dynamicCast())
  {
    uint64_t v6 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C835790;
    *(void *)(inited + 32) = v6;
    uint64_t v12 = (void *)inited;
    uint64_t v8 = specialized Array._endMutation()();
    MEMORY[0x270FA5388](v8);
    swift_beginAccess();
    id v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
    Capsule.mutate<A>(_:)();
    swift_endAccess();

    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.transformStrokes(_:with:concat:)(uint64_t a1)
{
  return closure #1 in PKDrawingCoherence.transformStrokes(_:with:concat:)(a1, *(void *)(v1 + 16), *(CGFloat **)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.deleteStrokes(_:)(uint64_t a1)
{
  return closure #1 in PKDrawingCoherence.deleteStrokes(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.setStrokes(_:inks:)(objc_class *a1)
{
  return closure #1 in PKDrawingCoherence.setStrokes(_:inks:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in PKDrawingCoherence.setStrokes(_:groupID:)(uint64_t a1)
{
  closure #1 in PKDrawingCoherence.setStrokes(_:groupID:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in PKDrawingCoherence.undoableSetStrokes(_:groupID:actionName:)()
{
  closure #1 in PKDrawingCoherence.undoableSetStrokes(_:groupID:actionName:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t type metadata accessor for PKCoherenceUndoCommand(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKCoherenceUndoCommand);
}

uint64_t ObjC metadata update function for PKDrawingCoherenceVersion()
{
  return type metadata accessor for PKDrawingCoherenceVersion(0);
}

uint64_t type metadata completion function for PKDrawingCoherenceVersion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PKDrawingCoherenceVersion(a1, a2, a3, MEMORY[0x263F07508]);
}

uint64_t ObjC metadata update function for PKCoherenceUndoCommand()
{
  return type metadata accessor for PKCoherenceUndoCommand(0);
}

uint64_t type metadata completion function for PKCoherenceUndoCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PKDrawingCoherenceVersion(a1, a2, a3, MEMORY[0x263F32EC8]);
}

uint64_t method lookup function for PKDrawingCoherence(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PKDrawingCoherence);
}

uint64_t dispatch thunk of PKDrawingCoherence.model.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of PKDrawingCoherence.model.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of PKDrawingCoherence.model.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of PKDrawingCoherence.__allocating_init(model:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PKDrawingCoherence.concreteDrawing()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of PKDrawingCoherence.merge<A>(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PKDrawingCoherence.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of PKDrawingCoherence.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

void partial apply for closure #1 in PKDrawingCoherence.update(fromSlicedIntersectingIndexes:resultNewRoots:resultUpdatedStrokes:count:)(uint64_t a1)
{
  closure #1 in PKDrawingCoherence.update(fromSlicedIntersectingIndexes:resultNewRoots:resultUpdatedStrokes:count:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

void partial apply for closure #1 in PKDrawingCoherence.init(strokes:from:)(uint64_t a1)
{
  closure #1 in PKDrawingCoherence.init(strokes:from:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined destroy of PKDrawingStruct(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(uint64_t a1)
{
  return closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(a1, *(unsigned __int8 *)(v1 + 16), *(CGFloat **)(v1 + 24));
}

uint64_t sub_20C56B880()
{
  return MEMORY[0x270FA0238](v0, 64, 7);
}

double partial apply for closure #1 in transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(double a1, double a2)
{
  return closure #1 in transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)((_OWORD *)(v2 + 16), a1, a2);
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_41()
{
  return swift_release();
}

void partial apply for closure #1 in PKDrawingCoherence.setStrokes(_:paths:masks:)(uint64_t a1)
{
  closure #1 in PKDrawingCoherence.setStrokes(_:paths:masks:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_20C56B8D0()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

BOOL partial apply for specialized closure #1 in removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(uint64_t a1)
{
  return (specialized removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1) == 0;
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.mergeStrokes(_:)(uint64_t a1)
{
  return closure #1 in PKDrawingCoherence.mergeStrokes(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.addNewStrokes(_:at:)(uint64_t a1)
{
  return closure #1 in PKDrawingCoherence.addNewStrokes(_:at:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

BOOL partial apply for closure #1 in containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)(uint64_t a1)
{
  return containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.init(concreteDrawing:)(uint64_t a1)
{
  return closure #1 in PKDrawingCoherence.init(concreteDrawing:)(a1, *(void **)(v1 + 16));
}

uint64_t closure #1 in PKDrawingCoherence._canvasBounds.setterpartial apply()
{
  return partial apply for closure #1 in PKDrawingCoherence._canvasBounds.setter();
}

uint64_t closure #1 in PKDrawingCoherence.addNewStrokes(_:at:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PKDrawingCoherence.addNewStrokes(_:at:)(a1);
}

void closure #1 in PKDrawingCoherence.setStrokes(_:groupID:)partial apply(uint64_t a1)
{
}

uint64_t closure #1 in PKDrawingCoherence.setStrokes(_:inks:)partial apply(objc_class *a1)
{
  return partial apply for closure #1 in PKDrawingCoherence.setStrokes(_:inks:)(a1);
}

uint64_t closure #1 in containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)partial apply()
{
  return partial apply for closure #1 in containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)() & 1;
}

uint64_t closure #1 in PKDrawingCoherence.transformStrokes(_:with:concat:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PKDrawingCoherence.transformStrokes(_:with:concat:)(a1);
}

uint64_t closure #1 in PKDrawingCoherence.deleteStrokes(_:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PKDrawingCoherence.deleteStrokes(_:)(a1);
}

uint64_t closure #1 in PKDrawingCoherence._rootStrokes.getterpartial apply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in PKDrawingCoherence._rootStrokes.getter(a1, a2);
}

Swift::Void __swiftcall TextAlignmentViewController.viewDidLoad()()
{
  uint64_t v1 = v0;
  v34.receiver = v0;
  v34.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v34, sel_viewDidLoad);
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_textAlignmentControl];
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v2);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20C8344C0;
  id v6 = objc_msgSend(v2, sel_topAnchor);
  id v7 = objc_msgSend(v1, sel_view);
  if (!v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  id v10 = objc_msgSend(v9, sel_topAnchor);
  double v11 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_contentViewMargin];
  id v12 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v10, v11);

  *(void *)(v5 + 32) = v12;
  id v13 = objc_msgSend(v2, sel_leadingAnchor);
  id v14 = objc_msgSend(v1, sel_view);
  if (!v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v15 = v14;
  id v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

  id v17 = objc_msgSend(v16, sel_leadingAnchor);
  id v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v17, v11);

  *(void *)(v5 + 40) = v18;
  id v19 = objc_msgSend(v2, sel_bottomAnchor);
  id v20 = objc_msgSend(v1, sel_view);
  if (!v20)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v21 = v20;
  id v22 = objc_msgSend(v20, sel_safeAreaLayoutGuide);

  id v23 = objc_msgSend(v22, sel_bottomAnchor);
  double v24 = -v11;
  id v25 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v23, v24);

  *(void *)(v5 + 48) = v25;
  id v26 = objc_msgSend(v2, sel_trailingAnchor);
  id v27 = objc_msgSend(v1, sel_view);
  if (v27)
  {
    id v28 = v27;
    uint64_t v29 = self;
    id v30 = objc_msgSend(v28, sel_safeAreaLayoutGuide);

    id v31 = objc_msgSend(v30, sel_trailingAnchor);
    id v32 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v31, v24);

    *(void *)(v5 + 56) = v32;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_activateConstraints_, isa);

    objc_msgSend(v1, sel_setPreferredContentSize_, *(double *)&v1[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_preferredPopoverSize], *(double *)&v1[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_preferredPopoverSize + 8]);
    return;
  }
LABEL_11:
  __break(1u);
}

id TextAlignmentViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_textAlignmentControl;
  id v9 = objc_allocWithZone((Class)type metadata accessor for TextAlignmentControl());
  id v10 = v3;
  TextAlignmentControl.init(axis:useCapsuleStyle:)(0, 0);
  *(void *)&v3[v8] = v11;
  *(void *)&v10[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_contentViewMargin] = 0x4028000000000000;
  *(_OWORD *)&v10[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_preferredPopoverSize] = xmmword_20C837350;

  if (a2)
  {
    id v12 = (void *)MEMORY[0x21054D080](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v12 = 0;
  }
  v15.receiver = v10;
  v15.super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v15, sel_initWithNibName_bundle_, v12, a3);

  return v13;
}

id TextAlignmentViewController.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_textAlignmentControl;
  id v5 = objc_allocWithZone((Class)type metadata accessor for TextAlignmentControl());
  id v6 = v1;
  TextAlignmentControl.init(axis:useCapsuleStyle:)(0, 0);
  *(void *)&v1[v4] = v7;
  *(void *)&v6[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_contentViewMargin] = 0x4028000000000000;
  *(_OWORD *)&v6[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_preferredPopoverSize] = xmmword_20C837350;

  v10.receiver = v6;
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

uint64_t type metadata accessor for TextAlignmentViewController()
{
  return self;
}

uint64_t initializeWithCopy for ReflowTextLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  long long v4 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ReflowTextLine(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  a1[20] = a2[20];
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for ReflowTextLine(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReflowTextLine(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReflowTextLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReflowTextLine()
{
  return &type metadata for ReflowTextLine;
}

BOOL ReflowTextLine.add(_:textScalePercentage:spacingAdjustment:maxWidth:previousLine:adjustment:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, CGFloat a6)
{
  unint64_t v10 = v6;
  *(void *)&long long v77 = a4;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a3, (uint64_t)&v81, (uint64_t *)&demangling cache variable for type metadata for ReflowSpacingAdjustment?);
  if (a6 >= 1.0 || a2 != 100 || (unint64_t v16 = *(void *)(v6 + 8)) == 0)
  {
LABEL_19:
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a3, (uint64_t)&v88, (uint64_t *)&demangling cache variable for type metadata for ReflowSpacingAdjustment?);
    uint64_t v17 = v88;
    if (!v88) {
      goto LABEL_34;
    }
    uint64_t v79 = a2;
    char v23 = v89;
    long long v27 = v90;
    long long v28 = v91;
    uint64_t v19 = v92;
    char v24 = v93;
    LOBYTE(v25) = v94;
    int v26 = v95;
LABEL_21:
    unint64_t v97 = v17;
    LOBYTE(v98) = v23;
    long long v99 = v27;
    long long v100 = v28;
    uint64_t v101 = v19;
    char v102 = v24;
    char v103 = v25;
    char v104 = v26;
    unint64_t v43 = *(void *)v10;
    outlined retain of ReflowSpacingAdjustment?(a3);
    swift_bridgeObjectRetain();
    char v44 = specialized Sequence<>.contains(_:)(v17, v43);
    swift_bridgeObjectRelease();
    if ((v44 & 1) != 0 || (_OWORD *)v17 == a1)
    {
      if (v24)
      {
        if (v26)
        {
LABEL_25:
          BOOL v45 = ReflowTextLine.addWithSpacingAdjustment(_:textScalePercentage:spacingAdjustment:maxWidth:previousLine:adjustment:)((uint64_t)a1, (void *)v79, (uint64_t)&v97, v77, a5, a6);
          outlined release of ReflowSpacingAdjustment?(a3);
          return v45;
        }
      }
      else
      {
        uint64_t v46 = *(void *)(v10 + 160);
        if (v46 < v19 && ((_OWORD *)v17 != a1 || (v23 & 1) == 0))
        {
          outlined release of ReflowSpacingAdjustment?(a3);
          return 0;
        }
        if (v19 == v46) {
          char v47 = v26;
        }
        else {
          char v47 = 0;
        }
        if (v47) {
          goto LABEL_25;
        }
      }
    }
    outlined release of ReflowSpacingAdjustment?(a3);
    a2 = v79;
LABEL_34:
    uint64_t v20 = *(void *)(v10 + 8);
    unint64_t v52 = 1;
    if (v20)
    {
      uint64_t v48 = *(void *)v10;
      swift_bridgeObjectRetain();
      uint64_t v49 = Array<A>.nonOverlappingElements.getter(v48);
      char v50 = specialized static Array<A>.== infix(_:_:)(v49, v20);
      swift_bridgeObjectRelease();
      uint64_t v51 = swift_bridgeObjectRelease();
      if ((v50 & 1) != 0 && a2 == 100 && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(v51) & 1) == 0) {
        unint64_t v52 = 0;
      }
    }
    a6 = *(double *)(v10 + 48);
    double v7 = *(double *)(v10 + 56);
    double v8 = *(double *)(v10 + 64);
    double v9 = *(double *)(v10 + 40);
    double v53 = sqrt((v7 - v9) * (v7 - v9) + (v8 - a6) * (v8 - a6));
    double v54 = (v7 - v9) / v53;
    double v55 = sqrt((v9 + v54 * ((a5 - v9) / v54) - v9) * (v9 + v54 * ((a5 - v9) / v54) - v9)+ (a6 + (v8 - a6) / v53 * ((a5 - v9) / v54) - a6) * (a6 + (v8 - a6) / v53 * ((a5 - v9) / v54) - a6))- *(double *)(v10 + 32);
    if (v55 < 0.0) {
      double v56 = 0.0;
    }
    else {
      double v56 = v55;
    }
    unint64_t v80 = *(void *)v10;
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v57 = swift_bridgeObjectRetain();
    MEMORY[0x21054D330](v57);
    if (*(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_73:
    }
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    uint64_t v58 = Array<A>.nonOverlappingElements.getter(v80);
    swift_bridgeObjectRelease();
    if (v20)
    {
      uint64_t v59 = swift_bridgeObjectRetain();
      char v60 = specialized static Array<A>.== infix(_:_:)(v59, v58);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      CGFloat v61 = 0.0;
      if (v60)
      {
        double v56 = v56 + 4.0;
        CGFloat v61 = *(double *)(v10 + 24);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      CGFloat v61 = 0.0;
    }
    unint64_t v80 = *(void *)v10;
    swift_retain_n();
    uint64_t v62 = swift_bridgeObjectRetain();
    MEMORY[0x21054D330](v62);
    if (*(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    uint64_t v20 = *(void *)(v10 + 160);
    unint64_t v37 = (unint64_t)specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v80, a2, v20, v52, 1, 1, 0, 0.0, v56, v9, a6, v7, v8, *(double *)(v10 + 16), v61);
    unint64_t v64 = v63;
    swift_bridgeObjectRelease();
    if (v64 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v65 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v65)
    {
      uint64_t v66 = swift_retain();
      MEMORY[0x21054D330](v66);
      if (*(void *)((*(void *)v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v10 & 0xFFFFFFFFFFFFFF8)
                                                                                   + 0x18) >> 1)
        goto LABEL_76;
      goto LABEL_55;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v17 = v81;
  char v18 = v82;
  long long v75 = v84;
  long long v76 = v83;
  uint64_t v19 = v85;
  uint64_t v20 = v87;
  int v21 = v86;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(a3, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for ReflowSpacingAdjustment?);
  if (v96[0] && *(void *)(v96[0] + 120) == *(void *)(v10 + 160))
  {
    uint64_t v79 = 100;
    unsigned int v22 = v21 | (v20 << 16);
    char v23 = v18 & 1;
    char v24 = v21 & 1;
    int v25 = (v22 >> 8) & 1;
    int v26 = HIWORD(v22) & 1;
    long long v28 = v75;
    long long v27 = v76;
    goto LABEL_21;
  }
  unint64_t v29 = *(void *)v10;
  if (*(void *)v10 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v31 = v73 + 1;
    if (!__OFADD__(v73, 1)) {
      goto LABEL_9;
    }
LABEL_79:
    __break(1u);
LABEL_80:
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v36 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v29);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v31 = v30 + 1;
  if (__OFADD__(v30, 1)) {
    goto LABEL_79;
  }
LABEL_9:
  *(void *)&long long v78 = specialized Collection.prefix(_:)(v31, v16);
  *(void *)&long long v76 = v32;
  unint64_t v74 = v34;
  *(void *)&long long v75 = v33;
  swift_bridgeObjectRelease();
  unint64_t v16 = *(void *)v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_20C835790;
  *(void *)(v35 + 32) = a1;
  unint64_t v97 = v35;
  specialized Array._endMutation()();
  unint64_t v29 = v97;
  if ((v97 & 0x8000000000000000) != 0 || (v97 & 0x4000000000000000) != 0) {
    goto LABEL_80;
  }
  uint64_t v36 = v97 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  swift_retain();
LABEL_12:
  unint64_t v37 = *(void *)(v36 + 16);
  unint64_t v97 = MEMORY[0x263F8EE78];
  uint64_t v98 = MEMORY[0x263F8EE78] + 32;
  long long v99 = xmmword_20C834980;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v38 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!__OFADD__(v37 & 0x7FFFFFFFFFFFFFFFLL, v38))
  {
    specialized ArraySlice.reserveCapacity(_:)((v37 & 0x7FFFFFFFFFFFFFFFLL) + v38);
    uint64_t v39 = swift_bridgeObjectRetain();
    specialized ArraySlice.append<A>(contentsOf:)(v39);
    specialized ArraySlice.append<A>(contentsOf:)(v36, v36 + 32, 0, (2 * v37) | 1);
    swift_bridgeObjectRelease();
    swift_release();
    char v40 = specialized static ArraySlice<A>.== infix(_:_:)(v76, v75, v74, v98, v99, *((unint64_t *)&v99 + 1));
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v40)
    {
      uint64_t v41 = swift_retain();
      MEMORY[0x21054D330](v41);
      if (*(void *)((*(void *)v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v10 & 0xFFFFFFFFFFFFFF8)
                                                                                   + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      long long v42 = a1[2];
      a1[3] = a1[1];
      a1[4] = v42;
      return 1;
    }
    goto LABEL_19;
  }
  __break(1u);
  do
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
    if (!v67) {
      goto LABEL_66;
    }
LABEL_58:
    unint64_t v68 = 0;
    double v56 = (double)v20;
    unint64_t v52 = v10 & 0xC000000000000001;
    uint64_t v20 = v10 & 0xFFFFFFFFFFFFFF8;
    id v69 = (long long *)(v37 + 80);
    uint64_t v70 = v36 - 1;
    while (1)
    {
      if (v52)
      {
        uint64_t v71 = MEMORY[0x21054E050](v68, v10);
        goto LABEL_63;
      }
      if (v68 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      uint64_t v71 = swift_retain();
LABEL_63:
      *(_OWORD *)(v71 + 48) = v77;
      *(_OWORD *)(v71 + 64) = v78;
      *(double *)(v71 + 80) = v56;
      swift_release();
      if (v70 == v68) {
        goto LABEL_66;
      }
      if (v68 + 1 >= *(void *)(v37 + 16))
      {
        __break(1u);
        goto LABEL_73;
      }
      long long v77 = *(v69 - 1);
      long long v78 = *v69;
      ++v68;
      v69 += 2;
      if (v67 == v68) {
        goto LABEL_66;
      }
    }
    __break(1u);
LABEL_76:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_55:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v36 = *(void *)(v37 + 16);
    if (!v36)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    unint64_t v10 = *(void *)v10;
    long long v77 = *(_OWORD *)(v37 + 32);
    long long v78 = *(_OWORD *)(v37 + 48);
  }
  while (v10 >> 62);
  uint64_t v67 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v67) {
    goto LABEL_58;
  }
LABEL_66:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return 1;
}

__C::CGRect __swiftcall ReflowTextLine.caretRect(at:)(CGPoint at)
{
  double v2 = v1[5];
  double v3 = v1[6];
  double v4 = v1[8];
  double v5 = v1[7] - v2;
  CGFloat v6 = ((at.x - v2) * v5 + (at.y - v3) * (v4 - v3)) / (v5 * v5 + (v4 - v3) * (v4 - v3));
  double v7 = v5 * v6;
  double v8 = (v4 - v3) * v6;
  double v9 = v2 + v7;
  double v10 = v3 + v8;
  double v11 = (v3 + v4) * 0.5 - (v1[10] + v1[12]) * 0.5;
  double v12 = v10 - v11;
  double v13 = 0.0;
  result.size.CGFloat height = v11;
  result.size.CGFloat width = v13;
  result.origin.CGFloat y = v12;
  result.origin.CGFloat x = v9;
  return result;
}

id ReflowTextLine.textSize.getter()
{
  unint64_t v1 = *v0;
  unint64_t v18 = v1;
  unint64_t v17 = MEMORY[0x263F8EE78];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    outlined release of [ReflowElement]((uint64_t)&v18);
    unint64_t v11 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v2) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
LABEL_24:
    swift_once();
    return objc_msgSend(objc_allocWithZone(MEMORY[0x263F35CC8]), sel_initWithXHeight_ascenderHeight_descenderHeight_activeLines_, 6, *(double *)&static UIConstants.handwritingReflowDefaultTextSize, *(double *)&static UIConstants.handwritingReflowDefaultTextSize, *(double *)&static UIConstants.handwritingReflowDefaultTextSize);
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      MEMORY[0x21054E050](i, v1);
    }
    else {
      swift_retain();
    }
    type metadata accessor for ReflowWord();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = v4;
      CGFloat v6 = self;
      double v7 = *(void **)(v5 + 336);
      double v8 = *(void **)(v5 + 280);
      id v9 = v7;
      objc_msgSend(v8, sel__canvasBounds);
      id v10 = objc_msgSend(v6, sel_scaledSize_scale_, v9, CGRectGetHeight(v19));
      swift_release();

      MEMORY[0x21054D330]();
      if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  outlined release of [ReflowElement]((uint64_t)&v18);
  unint64_t v11 = v17;
LABEL_17:
  outlined release of [ReflowElement]((uint64_t)&v18);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_19;
    }
  }
  else if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_19:
    double v12 = self;
    type metadata accessor for CHTextSize();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v12, sel_averageTextSize_, isa);

    return v14;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for handwritingReflowDefaultTextSize != -1) {
    goto LABEL_24;
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x263F35CC8]), sel_initWithXHeight_ascenderHeight_descenderHeight_activeLines_, 6, *(double *)&static UIConstants.handwritingReflowDefaultTextSize, *(double *)&static UIConstants.handwritingReflowDefaultTextSize, *(double *)&static UIConstants.handwritingReflowDefaultTextSize);
}

uint64_t specialized Sequence.dropLast(_:)(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  if (a1)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    uint64_t v21 = MEMORY[0x263F8EE78];
    if (!(a2 >> 62))
    {
      uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v4)
      {
LABEL_5:
        if ((v2 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = MEMORY[0x21054E050](0, v2);
          unint64_t v6 = 0;
          uint64_t v7 = 1;
          while (1)
          {
            unint64_t v9 = *(void *)(v20 + 16);
            if ((uint64_t)v9 < v3)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {
              if (v6 >= v9) {
                goto LABEL_36;
              }
              swift_retain();
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
              }
              if (v6 >= *(void *)(v20 + 16)) {
                goto LABEL_37;
              }
              swift_release();
              *(void *)(v20 + 8 * v6 + 32) = v5;
              specialized ContiguousArray._endMutation()();
              if ((uint64_t)++v6 >= v3)
              {
                if (v4 == v7) {
                  goto LABEL_42;
                }
                unint64_t v6 = 0;
                goto LABEL_9;
              }
            }
            if (v4 == v7) {
              goto LABEL_42;
            }
LABEL_9:
            uint64_t v5 = MEMORY[0x21054E050](v7, v2);
            if (__OFADD__(v7++, 1))
            {
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
              goto LABEL_39;
            }
          }
        }
        uint64_t v11 = v2 & 0xFFFFFFFFFFFFFF8;
        if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_35;
        }
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        uint64_t v14 = v4 - 1;
        unint64_t v19 = v2;
        while (1)
        {
          uint64_t v15 = *(void *)(v2 + 8 * v12 + 32);
          unint64_t v16 = *(void *)(v20 + 16);
          if ((uint64_t)v16 < v3) {
            break;
          }
          if (v13 >= v16) {
            goto LABEL_38;
          }
          unint64_t v2 = v14;
          swift_retain();
          swift_retain();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
          }
          if (v13 >= *(void *)(v20 + 16))
          {
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          swift_release();
          *(void *)(v20 + 8 * v13 + 32) = v15;
          specialized ContiguousArray._endMutation()();
          ++v13;
          unint64_t v2 = v19;
          if ((uint64_t)v13 < v3) {
            goto LABEL_24;
          }
          if (v14 == v12) {
            goto LABEL_42;
          }
          unint64_t v13 = 0;
LABEL_25:
          if ((unint64_t)++v12 >= *(void *)(v11 + 16)) {
            goto LABEL_35;
          }
        }
        swift_retain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_24:
        if (v14 == v12) {
          goto LABEL_42;
        }
        goto LABEL_25;
      }
      goto LABEL_42;
    }
LABEL_41:
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_5;
    }
LABEL_42:
    swift_bridgeObjectRelease();
    uint64_t v10 = v21;
    swift_release();
    return v10;
  }
  if ((a2 & 0x8000000000000000) != 0 || (a2 & 0x4000000000000000) != 0)
  {
    unint64_t v18 = specialized _copyCollectionToContiguousArray<A>(_:)(a2);
    swift_bridgeObjectRelease();
    return (uint64_t)v18;
  }
  return a2 & 0xFFFFFFFFFFFFFF8;
}

uint64_t Array<A>.nonOverlappingElements.getter(uint64_t a1)
{
  unint64_t v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62) {
    goto LABEL_48;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    return MEMORY[0x263F8EE78];
  }
  while (1)
  {
    unint64_t v7 = v6 - 1;
    if (__OFSUB__(v6, 1))
    {
      __break(1u);
LABEL_52:
      uint64_t v8 = MEMORY[0x21054E050](v6 - 1, a1);
      uint64_t v6 = v8;
      goto LABEL_8;
    }
    unint64_t v3 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_52;
    }
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v7 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_54;
    }
    uint64_t v6 = *(void *)(a1 + 8 * v7 + 32);
    uint64_t v8 = swift_retain();
LABEL_8:
    uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 144))(v8);
    swift_release();
    if ((v1 & 1) == 0) {
      break;
    }
    if (v7)
    {
      uint64_t v1 = MEMORY[0x263F8EE78];
      while (1)
      {
        BOOL v9 = __OFSUB__(v7--, 1);
        if (v9) {
          break;
        }
        if (v3)
        {
          uint64_t v6 = MEMORY[0x21054E050](v7, a1);
        }
        else
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_46;
          }
          if (v7 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_47;
          }
          uint64_t v6 = *(void *)(a1 + 32 + 8 * v7);
          swift_retain();
        }
        uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v6 + 144))();
        swift_release();
        if ((v2 & 1) == 0) {
          goto LABEL_20;
        }
        if (!v7) {
          return v1;
        }
      }
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v6) {
        continue;
      }
    }
    return MEMORY[0x263F8EE78];
  }
LABEL_20:
  BOOL v9 = __OFADD__(v7++, 1);
  if (v9)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (!v5)
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_29;
  }
  if (a1 < 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  if (_CocoaArrayWrapper.endIndex.getter() < 0) {
    goto LABEL_58;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_29:
  if (v6 < (uint64_t)v7)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v3)
  {
    type metadata accessor for ReflowElement();
    Swift::Int v10 = 0;
    do
    {
      Swift::Int v11 = v10 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v10);
      Swift::Int v10 = v11;
    }
    while (v7 != v11);
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v2 = v12;
    uint64_t v1 = v13;
    unint64_t v7 = v14;
    swift_bridgeObjectRelease_n();
    if (v7) {
      goto LABEL_38;
    }
LABEL_37:
    uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v6, v2, v1, v7);
    goto LABEL_44;
  }
  uint64_t v1 = 0;
  uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  unint64_t v7 = (2 * v7) | 1;
  if ((v7 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_38:
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_unknownObjectRelease();
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  uint64_t v16 = *(void *)(v15 + 16);
  swift_release();
  if (__OFSUB__(v7 >> 1, v1)) {
    goto LABEL_59;
  }
  if (v16 != (v7 >> 1) - v1)
  {
LABEL_60:
    swift_unknownObjectRelease();
    goto LABEL_37;
  }
  uint64_t v1 = swift_dynamicCastClass();
  swift_unknownObjectRelease();
  if (v1) {
    return v1;
  }
  uint64_t v1 = MEMORY[0x263F8EE78];
LABEL_44:
  swift_unknownObjectRelease();
  return v1;
}

BOOL ReflowTextLine.addWithSpacingAdjustment(_:textScalePercentage:spacingAdjustment:maxWidth:previousLine:adjustment:)(uint64_t a1, void *a2, uint64_t IsNativeType, uint64_t a4, double a5, CGFloat a6)
{
  unint64_t v16 = (unint64_t)v6;
  *(void *)&long long v222 = *v6;
  swift_retain_n();
  uint64_t v22 = swift_bridgeObjectRetain();
  MEMORY[0x21054D330](v22);
  if (*(void *)((v222 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v222 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v23 = v222;
  uint64_t v216 = a1;
  swift_release();
  int64_t v24 = (unint64_t)v222 >> 62;
  if (!((unint64_t)v222 >> 62))
  {
    uint64_t v25 = *(void *)((v222 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v25) {
      goto LABEL_5;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  if (!v25) {
    goto LABEL_19;
  }
LABEL_5:
  if ((v222 & 0xC000000000000001) != 0)
  {
    uint64_t v88 = MEMORY[0x21054E050](0, v222);
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)IsNativeType;
    swift_unknownObjectRelease();
    if (v88 != v7) {
      goto LABEL_20;
    }
    goto LABEL_8;
  }
  if (!*(void *)((v222 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_94;
  }
  uint64_t v26 = *(void *)(v222 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)IsNativeType;
  swift_release();
  if (v26 == v7)
  {
LABEL_8:
    if ((*(unsigned char *)(IsNativeType + 8) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      double v27 = *(double *)(IsNativeType + 32);
      double v28 = a5 - *(double *)(v16 + 32);
      if (v28 <= v27) {
        goto LABEL_351;
      }
      double v29 = *(double *)(v16 + 16);
      if (v29 > v27) {
        double v27 = *(double *)(v16 + 16);
      }
      if (v27 > v28) {
        goto LABEL_407;
      }
      uint64_t v30 = v216;
      if (v29 < v27)
      {
        return specialized ReflowTextLine.addLayoutAndApply(_:textScalePercentage:span:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:)(v27, v28, 0.0, 0.0, v216, a2);
      }
      long long v223 = 0u;
      memset(v224, 0, sizeof(v224));
      long long v222 = 0u;
LABEL_41:
      char v44 = ReflowTextLine.add(_:textScalePercentage:spacingAdjustment:maxWidth:previousLine:adjustment:)(v30, a2, &v222, a4, a5, a6);
      return v44 & 1;
    }
  }
LABEL_20:
  uint64_t v7 = *(void *)(v16 + 8);
  if (!v7) {
    goto LABEL_96;
  }
  uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)v7 >> 62))
  {
    uint64_t v32 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v32) {
      goto LABEL_23;
    }
LABEL_95:
    swift_bridgeObjectRelease();
    goto LABEL_96;
  }
LABEL_94:
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  if (!v32) {
    goto LABEL_95;
  }
LABEL_23:
  unint64_t v33 = v32 - 1;
  if (__OFSUB__(v32, 1)) {
    goto LABEL_370;
  }
  if ((v7 & 0xC000000000000001) != 0) {
    goto LABEL_371;
  }
  if ((v33 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_374;
  }
  if (v33 >= *(void *)(v8 + 16))
  {
LABEL_374:
    __break(1u);
    goto LABEL_375;
  }
  uint64_t v8 = *(void *)(v7 + 8 * v33 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)IsNativeType;
  swift_release();
  if (v8 != v34) {
    goto LABEL_96;
  }
LABEL_28:
  if (*(unsigned char *)(IsNativeType + 8) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void *)v16;
    swift_bridgeObjectRetain();
    outlined retain of ReflowSpacingAdjustment?(IsNativeType);
    uint64_t v25 = specialized Collection<>.firstIndex(of:)(v8, v23);
    char v36 = v35;
    outlined release of ReflowSpacingAdjustment?(IsNativeType);
    uint64_t v37 = swift_bridgeObjectRelease();
    if (v36)
    {
      long long v223 = 0u;
      memset(v224, 0, sizeof(v224));
      long long v222 = 0u;
      uint64_t v30 = v216;
      goto LABEL_41;
    }
    double v15 = *(double *)(IsNativeType + 32);
    a6 = *(double *)(IsNativeType + 16);
    if (a6 <= v15)
    {
      uint64_t v23 = v216;
      if (((*(uint64_t (**)(uint64_t))(*(void *)v216 + 144))(v37) & 1) == 0) {
        goto LABEL_351;
      }
    }
    if ((*(void *)v16 & 0xC000000000000001) != 0) {
      goto LABEL_411;
    }
    if (v25 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v25 < *(void *)((*(void *)v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      for (uint64_t i = (double *)swift_retain(); ; uint64_t i = (double *)MEMORY[0x21054E050](v25))
      {
        double v11 = i[2];
        double v12 = i[3];
        double v13 = i[4];
        double v14 = i[5];
        swift_release();
        v226.origin.CGFloat x = v11;
        v226.origin.CGFloat y = v12;
        v226.size.CGFloat width = v13;
        v226.size.CGFloat height = v14;
        if (CGRectGetMaxX(v226) > v15) {
          break;
        }
        if (v25 < 0) {
          goto LABEL_421;
        }
        uint64_t v23 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_423;
        }
        unint64_t v45 = *(void *)v16;
        specialized Array._checkIndex(_:)(0, *(void *)v16);
        specialized Array._checkIndex(_:)(v25 + 1, v45);
        uint64_t v23 = specialized _ArrayBuffer.subscript.getter(0, v25 + 1, v45);
        uint64_t v7 = specialized Array.init<A>(_:)(v23, v46, v47, v48);
        swift_unknownObjectRelease();
        double v49 = a5 - *(double *)(v16 + 32);
        if (v49 < 0.0) {
          goto LABEL_424;
        }
        uint64_t v9 = *(void *)(v16 + 160);
        double v10 = *(double *)(v16 + 40);
        double v11 = *(double *)(v16 + 48);
        double v12 = *(double *)(v16 + 56);
        double v13 = *(double *)(v16 + 64);
        uint64_t v23 = (uint64_t)specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v7, (uint64_t)a2, v9, 1, 0, 0, 0, 0.0, v49, v10, v11, v12, v13, *(double *)(v16 + 16), *(CGFloat *)(v16 + 24));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = *(void *)v16;
        uint64_t v50 = specialized Array._getCount()(v23);
        if (!v50) {
          goto LABEL_55;
        }
        uint64_t v51 = v50;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v23);
        long long v218 = *(_OWORD *)(v23 + 32);
        long long v220 = *(_OWORD *)(v23 + 48);
        swift_bridgeObjectRetain();
        unint64_t v52 = swift_bridgeObjectRetain();
        uint64_t v53 = specialized Array._getCount()(v52);
        if (v53)
        {
          uint64_t v54 = v53;
          CGFloat v214 = *(double *)&v9;
          double v215 = *(double *)&v16;
          double v55 = (double)v9;
          IsNativeint Type = specialized Array._hoistableIsNativeTypeChecked()(v7);
          unint64_t v56 = 0;
          int64_t v24 = v7 + 32;
          unint64_t v16 = v23 + 64;
          a4 = v51 - 1;
          do
          {
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v56, IsNativeType & 1, v7);
            if (IsNativeType) {
              uint64_t v57 = swift_retain();
            }
            else {
              uint64_t v57 = MEMORY[0x21054E050](v56, v7);
            }
            *(_OWORD *)(v57 + 48) = v218;
            *(_OWORD *)(v57 + 64) = v220;
            *(double *)(v57 + 80) = v55;
            swift_release();
            if (a4 == v56) {
              break;
            }
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v56 + 1, 1, v23);
            if (__OFADD__(v56 + 1, 1)) {
              goto LABEL_404;
            }
            uint64_t v58 = (long long *)(v16 + 32 * v56);
            long long v218 = *v58;
            long long v220 = v58[1];
            ++v56;
          }
          while (v54 != v56);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v9 = *(void *)&v214;
          unint64_t v16 = *(void *)&v215;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
LABEL_56:
        if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1) {
LABEL_414:
        }
          swift_once();
        double v59 = v15 + *(double *)&static UIConstants.handwritingReflowMinimumSpaceWidth;
        if (v15 + *(double *)&static UIConstants.handwritingReflowMinimumSpaceWidth >= a6) {
          double v59 = a6;
        }
        if (v59 < 0.0) {
          double v14 = 0.0;
        }
        else {
          double v14 = v59;
        }
        if (v14 > a6)
        {
          __break(1u);
LABEL_416:
          __break(1u);
LABEL_417:
          __break(1u);
          goto LABEL_418;
        }
        uint64_t v23 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_416;
        }
        unint64_t v60 = *(void *)v16;
        uint64_t v61 = specialized Array._getCount()(*(void *)v16);
        int64_t v24 = v216;
        if (v61 < v23) {
          goto LABEL_417;
        }
        uint64_t v62 = v61;
        specialized Array._checkIndex(_:)(v25 + 1, v60);
        specialized Array._checkIndex(_:)(v62, v60);
        Swift::Int v63 = specialized _ArrayBuffer.subscript.getter(v25 + 1, v62, v60);
        uint64_t v65 = v64;
        uint64_t v67 = v66;
        uint64_t v69 = v68;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t inited = swift_initStackObject();
        uint64_t v71 = specialized static Array._adoptStorage(_:count:)(inited, 1);
        *char v72 = v216;
        specialized _finalizeUninitializedArray<A>(_:)();
        uint64_t v73 = v71;
        *(void *)&long long v222 = v63;
        *((void *)&v222 + 1) = v65;
        *(void *)&long long v223 = v67;
        *((void *)&v223 + 1) = v69;
        swift_retain();
        uint64_t v23 = (uint64_t)&v222;
        uint64_t v74 = specialized ArraySlice.append<A>(contentsOf:)(v73);
        uint64_t v7 = *((void *)&v222 + 1);
        uint64_t v75 = v222;
        IsNativeint Type = *((void *)&v223 + 1);
        int64_t v24 = v223;
        uint64_t v25 = *((void *)&v223 + 1) >> 1;
        if ((void)v223 == *((void *)&v223 + 1) >> 1)
        {
          int64_t v76 = v223;
LABEL_75:
          BOOL v78 = v25 < v76;
          uint64_t v25 = v76;
          if (!v78)
          {
LABEL_76:
            if (v25 >= v24)
            {
              uint64_t v7 = specialized Array.init<A>(_:)(v75, v7, v25, IsNativeType);
              swift_unknownObjectRelease();
              unint64_t v79 = swift_bridgeObjectRetain();
              uint64_t v80 = specialized Array._getCount()(v79);
              swift_bridgeObjectRelease();
              if (!v80) {
                goto LABEL_362;
              }
              IsNativeint Type = (uint64_t)specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v7, (uint64_t)a2, v9, 1, 1, 1, 0, v14, a6, v10, v11, v12, v13, 0.0, 0.0);
              uint64_t v82 = specialized Array._getCount()(v81);
              swift_bridgeObjectRelease();
              if (!v82)
              {
                uint64_t v83 = swift_retain();
                MEMORY[0x21054D330](v83);
                specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((*(void *)v16 & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x10));
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                uint64_t v84 = specialized Array._getCount()(IsNativeType);
                if (v84)
                {
                  uint64_t v85 = v84;
                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, IsNativeType);
                  long long v218 = *(_OWORD *)(IsNativeType + 32);
                  long long v220 = *(_OWORD *)(IsNativeType + 48);
                  double v10 = (double)v9;
                  int64_t v24 = specialized Array._hoistableIsNativeTypeChecked()(v7);
                  a4 = v7 + 32;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  uint64_t v23 = 0;
                  uint64_t v25 = IsNativeType + 64;
                  do
                  {
                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v23, v24 & 1, v7);
                    if (v24) {
                      uint64_t v86 = swift_retain();
                    }
                    else {
                      uint64_t v86 = MEMORY[0x21054E050](v23, v7);
                    }
                    *(_OWORD *)(v86 + 48) = v218;
                    *(_OWORD *)(v86 + 64) = v220;
                    *(double *)(v86 + 80) = v10;
                    swift_release();
                    if (v85 - 1 == v23) {
                      break;
                    }
                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v23 + 1, 1, IsNativeType);
                    if (__OFADD__(v23 + 1, 1)) {
                      goto LABEL_408;
                    }
                    unsigned __int8 v87 = (long long *)(v25 + 32 * v23);
                    long long v218 = *v87;
                    long long v220 = v87[1];
                    ++v23;
                  }
                  while (v80 != v23);
                  goto LABEL_360;
                }
                swift_bridgeObjectRelease();
                goto LABEL_362;
              }
              goto LABEL_242;
            }
LABEL_419:
            __break(1u);
LABEL_420:
            __break(1u);
LABEL_421:
            __break(1u);
LABEL_422:
            __break(1u);
LABEL_423:
            __break(1u);
LABEL_424:
            __break(1u);
LABEL_425:
            __break(1u);
LABEL_426:
            __break(1u);
LABEL_427:
            __break(1u);
LABEL_428:
            __break(1u);
            goto LABEL_429;
          }
LABEL_418:
          __break(1u);
          goto LABEL_419;
        }
        if ((uint64_t)v223 >= *((void *)&v223 + 1) >> 1) {
          goto LABEL_425;
        }
        uint64_t v23 = *(void *)(*((void *)&v222 + 1) + 8 * v223);
        int64_t v76 = v223;
        if (((*(uint64_t (**)(uint64_t))(*(void *)v23 + 144))(v74) & 1) == 0) {
          goto LABEL_75;
        }
        int64_t v76 = v24 + 1;
        if (v24 + 1 == v25) {
          goto LABEL_76;
        }
        while (v76 < v25)
        {
          uint64_t v23 = *(void *)(v7 + 8 * v76);
          if (((*(uint64_t (**)(void))(*(void *)v23 + 144))() & 1) == 0) {
            goto LABEL_75;
          }
          int64_t v77 = v76 + 1;
          if (__OFADD__(v76, 1)) {
            goto LABEL_410;
          }
          ++v76;
          if (v77 == v25) {
            goto LABEL_76;
          }
        }
LABEL_409:
        __break(1u);
LABEL_410:
        __break(1u);
LABEL_411:
        ;
      }
      if (v25 < 0) {
        goto LABEL_420;
      }
      uint64_t v23 = v25 + 1;
      if (__OFADD__(v25, 1)) {
        goto LABEL_422;
      }
      unint64_t v39 = *(void *)v16;
      specialized Array._checkIndex(_:)(0, *(void *)v16);
      specialized Array._checkIndex(_:)(v25 + 1, v39);
      uint64_t v23 = specialized _ArrayBuffer.subscript.getter(0, v25 + 1, v39);
      unint64_t v43 = specialized Array.init<A>(_:)(v23, v40, v41, v42);
      swift_unknownObjectRelease();
      uint64_t v9 = *(void *)(v16 + 160);
      double v10 = *(double *)(v16 + 40);
      double v11 = *(double *)(v16 + 48);
      double v12 = *(double *)(v16 + 56);
      double v13 = *(double *)(v16 + 64);
      specialized static ReflowTextLine.layoutTextAdjustingBackwards(_:textScalePercentage:spacingAdjustment:lineIndex:baseline:previousLine:)(v43, a2, IsNativeType, v9, a4, v10, v11, v12, v13);
LABEL_55:
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    __break(1u);
    goto LABEL_414;
  }
  while (1)
  {
LABEL_96:
    double v14 = *(double *)(IsNativeType + 32);
    double v10 = *(double *)(IsNativeType + 16);
    uint64_t v89 = *(void *)IsNativeType;
    outlined retain of ReflowSpacingAdjustment?(IsNativeType);
    uint64_t v90 = specialized Collection<>.firstIndex(of:)(v89, v23);
    uint64_t v7 = v91;
    outlined release of ReflowSpacingAdjustment?(IsNativeType);
    if (v14 >= v10)
    {
      if (v7) {
        goto LABEL_427;
      }
      uint64_t v94 = *(unsigned __int8 *)(IsNativeType + 8);
      IsNativeint Type = v90 + v94;
      if (__OFADD__(v90, v94)) {
        goto LABEL_288;
      }
      if (IsNativeType < 0) {
        goto LABEL_290;
      }
      if (v24)
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v7 < 0) {
          goto LABEL_380;
        }
        swift_bridgeObjectRetain();
        uint64_t v95 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v95 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v95 < IsNativeType) {
        goto LABEL_292;
      }
      uint64_t v9 = v23 & 0xC000000000000001;
      if ((v23 & 0xC000000000000001) != 0 && IsNativeType)
      {
        type metadata accessor for ReflowElement();
        Swift::Int v99 = 0;
        do
        {
          Swift::Int v100 = v99 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v99);
          Swift::Int v99 = v100;
        }
        while (IsNativeType != v100);
      }
      if (v24)
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.subscript.getter();
        uint64_t v101 = v106;
        a4 = v107;
        unint64_t v102 = v108;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v7 = v23 & 0xFFFFFFFFFFFFFF8;
        uint64_t v101 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
        unint64_t v102 = (2 * IsNativeType) | 1;
        swift_bridgeObjectRetain();
        a4 = 0;
      }
      uint64_t v8 = specialized Array.init<A>(_:)(v7, v101, a4, v102);
      swift_unknownObjectRelease();
      if (v24)
      {
        swift_bridgeObjectRetain();
        uint64_t v111 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (IsNativeType >= v111) {
          goto LABEL_130;
        }
      }
      else if (IsNativeType >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_130:
        swift_bridgeObjectRelease();
        IsNativeint Type = MEMORY[0x263F8EE78];
LABEL_168:
        int64_t v24 = (unint64_t)IsNativeType >> 62;
        if ((unint64_t)IsNativeType >> 62) {
          goto LABEL_293;
        }
        a4 = *(void *)((IsNativeType & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (a4) {
          goto LABEL_170;
        }
        uint64_t v25 = 0;
        goto LABEL_204;
      }
      if (v25 < IsNativeType) {
        goto LABEL_382;
      }
      if (v24)
      {
        swift_bridgeObjectRetain();
        uint64_t v112 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v112 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v112 < v25)
      {
        __break(1u);
LABEL_386:
        __break(1u);
LABEL_387:
        __break(1u);
LABEL_388:
        __break(1u);
        goto LABEL_389;
      }
      if (v9 && IsNativeType != v25)
      {
        if (IsNativeType >= v25) {
          goto LABEL_400;
        }
        type metadata accessor for ReflowElement();
        Swift::Int v115 = IsNativeType;
        do
        {
          Swift::Int v116 = v115 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v115);
          Swift::Int v115 = v116;
        }
        while (v25 != v116);
      }
      if (v24)
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.subscript.getter();
        uint64_t v117 = v123;
        IsNativeint Type = v124;
        unint64_t v118 = v125;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v7 = v23 & 0xFFFFFFFFFFFFFF8;
        uint64_t v117 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
        unint64_t v118 = (2 * v25) | 1;
      }
      IsNativeint Type = specialized Array.init<A>(_:)(v7, v117, IsNativeType, v118);
      swift_unknownObjectRelease();
      goto LABEL_168;
    }
    *(void *)&long long v220 = a4;
    if (v7) {
      goto LABEL_426;
    }
    uint64_t v92 = *(unsigned __int8 *)(IsNativeType + 8);
    a4 = v90 + v92;
    if (__OFADD__(v90, v92)) {
      goto LABEL_287;
    }
    if (a4 < 0) {
      goto LABEL_289;
    }
    if (v24)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7 < 0) {
        goto LABEL_379;
      }
      swift_bridgeObjectRetain();
      uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v93 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v93 < a4)
    {
      while (1)
      {
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        swift_bridgeObjectRetain();
        a4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (a4)
        {
LABEL_170:
          if ((IsNativeType & 0xC000000000000001) != 0)
          {
LABEL_375:
            swift_bridgeObjectRetain();
            uint64_t v126 = MEMORY[0x21054E050](0, IsNativeType);
            uint64_t v127 = swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v126 = *(void *)(IsNativeType + 32);
            uint64_t v127 = swift_retain();
          }
          char v128 = (*(uint64_t (**)(uint64_t))(*(void *)v126 + 144))(v127);
          swift_release();
          if (v128)
          {
            if (a4 == 1)
            {
              uint64_t v25 = 1;
              if (!v24) {
                goto LABEL_204;
              }
            }
            else
            {
              uint64_t v7 = specialized Array._hoistableIsNativeTypeChecked()(IsNativeType);
              uint64_t v9 = 5;
              while (1)
              {
                uint64_t v25 = v9 - 4;
                if (v7)
                {
                  uint64_t v23 = *(void *)(IsNativeType + 8 * v9);
                  uint64_t v135 = swift_retain();
                }
                else
                {
                  swift_bridgeObjectRetain();
                  uint64_t v23 = MEMORY[0x21054E050](v9 - 4, IsNativeType);
                  uint64_t v135 = swift_bridgeObjectRelease();
                }
                char v136 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 144))(v135);
                swift_release();
                if ((v136 & 1) == 0) {
                  break;
                }
                uint64_t v137 = v9 - 3;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_284;
                }
                ++v9;
                if (v137 == a4)
                {
                  uint64_t v25 = a4;
                  break;
                }
              }
              if (a4 < v25) {
                goto LABEL_405;
              }
              if (!v24)
              {
LABEL_204:
                if (*(void *)((IsNativeType & 0xFFFFFFFFFFFFFF8) + 0x10) < v25) {
                  goto LABEL_296;
                }
                goto LABEL_205;
              }
            }
          }
          else
          {
            if (a4 < 0) {
              goto LABEL_396;
            }
            uint64_t v25 = 0;
            if (!v24) {
              goto LABEL_204;
            }
          }
        }
        else
        {
          uint64_t v25 = 0;
        }
        swift_bridgeObjectRetain();
        uint64_t v175 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v175 < v25)
        {
LABEL_296:
          __break(1u);
          goto LABEL_297;
        }
LABEL_205:
        if (v25 < 0) {
          goto LABEL_301;
        }
        if (v24)
        {
          swift_bridgeObjectRetain();
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v23 = *(void *)((IsNativeType & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v23 < a4) {
          goto LABEL_303;
        }
        if (a4 < 0) {
          goto LABEL_305;
        }
        if ((IsNativeType & 0xC000000000000001) != 0 && v25 != a4)
        {
          if (v25 >= (unint64_t)a4) {
            goto LABEL_387;
          }
          type metadata accessor for ReflowElement();
          Swift::Int v138 = v25;
          do
          {
            Swift::Int v139 = v138 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v138);
            Swift::Int v138 = v139;
          }
          while (a4 != v139);
        }
        if (v24)
        {
          swift_bridgeObjectRetain();
          uint64_t v140 = _CocoaArrayWrapper.subscript.getter();
          uint64_t v141 = v143;
          uint64_t v25 = v144;
          unint64_t v142 = v145;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          uint64_t v140 = IsNativeType & 0xFFFFFFFFFFFFFF8;
          uint64_t v141 = (IsNativeType & 0xFFFFFFFFFFFFFF8) + 32;
          unint64_t v142 = (2 * a4) | 1;
        }
        IsNativeint Type = specialized Array.init<A>(_:)(v140, v141, v25, v142);
        swift_unknownObjectRelease();
        if (v14 < 0.0) {
          double v146 = 0.0;
        }
        else {
          double v146 = v14;
        }
        a4 = *(void *)(v16 + 160);
        a6 = *(double *)(v16 + 40);
        double v11 = *(double *)(v16 + 48);
        double v12 = *(double *)(v16 + 56);
        double v13 = *(double *)(v16 + 64);
        uint64_t v147 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v8, (uint64_t)a2, a4, 1, 0, 0, 0, 0.0, v146, a6, v11, v12, v13, *(double *)(v16 + 16), *(CGFloat *)(v16 + 24));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = *(void *)v16;
        uint64_t v148 = specialized Array._getCount()((uint64_t)v147);
        if (!v148)
        {
          swift_bridgeObjectRelease();
          goto LABEL_234;
        }
        uint64_t v149 = v148;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, (uint64_t)v147);
        long long v218 = *((_OWORD *)v147 + 2);
        long long v220 = *((_OWORD *)v147 + 3);
        swift_bridgeObjectRetain();
        unint64_t v150 = swift_bridgeObjectRetain();
        uint64_t v151 = specialized Array._getCount()(v150);
        if (!v151)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_234:
          unint64_t v154 = swift_bridgeObjectRetain();
          uint64_t v8 = specialized Array._getCount()(v154);
          swift_bridgeObjectRelease();
          int64_t v24 = v216;
          if (!v8)
          {
            swift_bridgeObjectRelease();
            uint64_t v158 = swift_retain();
            MEMORY[0x21054D330](v158);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((*(void *)v16 & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x10));
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            goto LABEL_363;
          }
          double v10 = a5 - *(double *)(v16 + 32);
          if (v10 < v14) {
            goto LABEL_350;
          }
          *(double *)&long long v220 = v11;
          uint64_t v7 = specialized Array._hoistableIsNativeTypeChecked()(IsNativeType);
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v7 & 1, IsNativeType);
          double v213 = a6;
          double v11 = v14;
          if (v7)
          {
            uint64_t v23 = *(void *)(IsNativeType + 32);
            swift_retain();
            goto LABEL_238;
          }
LABEL_398:
          swift_bridgeObjectRetain();
          uint64_t v23 = MEMORY[0x21054E050](0, IsNativeType);
          swift_bridgeObjectRelease();
LABEL_238:
          double v14 = *(double *)(v23 + 16);
          double v15 = *(double *)(v23 + 24);
          a5 = *(double *)(v23 + 32);
          a6 = *(double *)(v23 + 40);
          swift_release();
          v227.origin.CGFloat x = v14;
          v227.origin.CGFloat y = v15;
          v227.size.CGFloat width = a5;
          v227.size.CGFloat height = a6;
          double MinX = CGRectGetMinX(v227);
          if (MinX <= v11) {
            double MinX = v11;
          }
          if (MinX <= v10)
          {
            uint64_t v25 = (uint64_t)specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:isReversed:)(IsNativeType, (uint64_t)a2, a4, 1, 1, 0, 0, MinX, v10, v213, *(CGFloat *)&v220, v12, v13, 0.0, 0.0);
            uint64_t v157 = specialized Array._getCount()(v156);
            swift_bridgeObjectRelease();
            if (!v157)
            {
              uint64_t v170 = swift_retain();
              MEMORY[0x21054D330](v170);
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((*(void *)v16 & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x10));
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              uint64_t v171 = specialized Array._getCount()(v25);
              if (!v171) {
                goto LABEL_361;
              }
              uint64_t v172 = v171;
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v25);
              long long v218 = *(_OWORD *)(v25 + 32);
              long long v220 = *(_OWORD *)(v25 + 48);
              double v10 = (double)a4;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              int64_t v24 = 0;
              uint64_t v9 = v172 - 1;
              do
              {
                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24, v7 & 1, IsNativeType);
                if (v7) {
                  uint64_t v173 = swift_retain();
                }
                else {
                  uint64_t v173 = MEMORY[0x21054E050](v24, IsNativeType);
                }
                *(_OWORD *)(v173 + 48) = v218;
                *(_OWORD *)(v173 + 64) = v220;
                *(double *)(v173 + 80) = v10;
                swift_release();
                if (v9 == v24) {
                  break;
                }
                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24 + 1, 1, v25);
                if (__OFADD__(v24 + 1, 1)) {
                  goto LABEL_286;
                }
                CGAffineTransform v174 = (long long *)(v25 + 64 + 32 * v24);
                long long v218 = *v174;
                long long v220 = v174[1];
                ++v24;
              }
              while (v8 != v24);
LABEL_360:
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              goto LABEL_363;
            }
LABEL_242:
            swift_bridgeObjectRelease();
LABEL_350:
            swift_bridgeObjectRelease();
LABEL_351:
            char v44 = 0;
            return v44 & 1;
          }
          __break(1u);
LABEL_400:
          __break(1u);
LABEL_401:
          __break(1u);
LABEL_402:
          __break(1u);
LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
LABEL_405:
          __break(1u);
LABEL_406:
          __break(1u);
LABEL_407:
          __break(1u);
LABEL_408:
          __break(1u);
          goto LABEL_409;
        }
        uint64_t v8 = v151;
        CGFloat v214 = *(double *)&a4;
        double v215 = *(double *)&v16;
        double v10 = (double)a4;
        uint64_t v25 = specialized Array._hoistableIsNativeTypeChecked()(v7);
        uint64_t v9 = 0;
        int64_t v24 = v7 + 32;
        unint64_t v16 = (unint64_t)(v147 + 8);
        while (1)
        {
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v9, v25 & 1, v7);
          if (v25) {
            uint64_t v152 = swift_retain();
          }
          else {
            uint64_t v152 = MEMORY[0x21054E050](v9, v7);
          }
          *(_OWORD *)(v152 + 48) = v218;
          *(_OWORD *)(v152 + 64) = v220;
          *(double *)(v152 + 80) = v10;
          swift_release();
          if (v149 - 1 == v9)
          {
LABEL_231:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            unint64_t v16 = *(void *)&v215;
            goto LABEL_234;
          }
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v9 + 1, 1, (uint64_t)v147);
          if (__OFADD__(v9 + 1, 1)) {
            break;
          }
          uint64_t v153 = (long long *)(v16 + 32 * v9);
          long long v218 = *v153;
          long long v220 = v153[1];
          if (v8 == ++v9) {
            goto LABEL_231;
          }
        }
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
      }
    }
    *(void *)&long long v218 = v23 & 0xC000000000000001;
    if ((v23 & 0xC000000000000001) != 0 && a4)
    {
      type metadata accessor for ReflowElement();
      Swift::Int v96 = 0;
      do
      {
        Swift::Int v97 = v96 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v96);
        Swift::Int v96 = v97;
      }
      while (a4 != v97);
    }
    double v215 = *(double *)&v16;
    if (!v24)
    {
      uint64_t v7 = v23 & 0xFFFFFFFFFFFFFF8;
      uint64_t v98 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
      unint64_t v16 = (2 * a4) | 1;
      swift_bridgeObjectRetain();
      uint64_t v8 = 0;
LABEL_131:
      CGFloat v214 = *(double *)&v98;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      uint64_t v109 = swift_dynamicCastClass();
      if (!v109)
      {
        swift_unknownObjectRelease();
        uint64_t v109 = MEMORY[0x263F8EE78];
      }
      uint64_t v110 = *(void *)(v109 + 16);
      swift_release();
      if (!__OFSUB__(v16 >> 1, v8))
      {
        if (v110 == (v16 >> 1) - v8)
        {
          uint64_t v9 = swift_dynamicCastClass();
          if (!v9)
          {
            swift_unknownObjectRelease();
            uint64_t v9 = MEMORY[0x263F8EE78];
          }
          goto LABEL_137;
        }
        goto LABEL_384;
      }
      goto LABEL_381;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v98 = v103;
    uint64_t v8 = v104;
    unint64_t v16 = v105;
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_131;
    }
    while (1)
    {
      uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v98, v8, v16);
LABEL_137:
      swift_unknownObjectRelease();
      if (v24)
      {
        swift_bridgeObjectRetain();
        uint64_t v113 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (a4 >= v113)
        {
LABEL_139:
          swift_bridgeObjectRelease();
          uint64_t v25 = MEMORY[0x263F8EE78];
          goto LABEL_182;
        }
      }
      else if (a4 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_139;
      }
      if (v25 >= a4) {
        break;
      }
LABEL_383:
      __break(1u);
LABEL_384:
      swift_unknownObjectRelease();
      uint64_t v98 = *(void *)&v214;
    }
    if (v24)
    {
      swift_bridgeObjectRetain();
      uint64_t v114 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v114 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v114 < v25) {
      goto LABEL_386;
    }
    if (!(void)v218 || a4 == v25) {
      goto LABEL_164;
    }
    if (a4 >= v25) {
      goto LABEL_401;
    }
    type metadata accessor for ReflowElement();
    Swift::Int v119 = a4;
    do
    {
      Swift::Int v120 = v119 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v119);
      Swift::Int v119 = v120;
    }
    while (v25 != v120);
LABEL_164:
    if (v24)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v121 = v129;
      uint64_t v122 = v130;
      uint64_t v8 = v131;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v7 = v23 & 0xFFFFFFFFFFFFFF8;
      uint64_t v121 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
      uint64_t v8 = (2 * v25) | 1;
      uint64_t v122 = a4;
    }
    uint64_t v25 = specialized Array.init<A>(_:)(v7, v121, v122, v8);
    swift_unknownObjectRelease();
LABEL_182:
    *(void *)&long long v218 = v9;
    int64_t v24 = (unint64_t)v25 >> 62;
    if (!((unint64_t)v25 >> 62))
    {
      unint64_t v16 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v16)
      {
        uint64_t v7 = 0;
LABEL_255:
        if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) < v7) {
          goto LABEL_300;
        }
        goto LABEL_256;
      }
      goto LABEL_184;
    }
LABEL_297:
    swift_bridgeObjectRetain();
    unint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v16)
    {
      uint64_t v7 = 0;
      goto LABEL_299;
    }
LABEL_184:
    if ((v25 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v132 = MEMORY[0x21054E050](0, v25);
      uint64_t v133 = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v132 = *(void *)(v25 + 32);
      uint64_t v133 = swift_retain();
    }
    char v134 = (*(uint64_t (**)(uint64_t))(*(void *)v132 + 144))(v133);
    swift_release();
    if (v134)
    {
      if (v16 == 1)
      {
        uint64_t v7 = 1;
        if (!v24) {
          goto LABEL_255;
        }
      }
      else
      {
        uint64_t v8 = specialized Array._hoistableIsNativeTypeChecked()(v25);
        uint64_t v9 = 5;
        while (1)
        {
          uint64_t v7 = v9 - 4;
          if (v8)
          {
            uint64_t v23 = *(void *)(v25 + 8 * v9);
            uint64_t v159 = swift_retain();
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v23 = MEMORY[0x21054E050](v9 - 4, v25);
            uint64_t v159 = swift_bridgeObjectRelease();
          }
          char v160 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 144))(v159);
          swift_release();
          if ((v160 & 1) == 0) {
            break;
          }
          uint64_t v161 = v9 - 3;
          if (__OFADD__(v7, 1)) {
            goto LABEL_285;
          }
          ++v9;
          if (v161 == v16)
          {
            uint64_t v7 = v16;
            break;
          }
        }
        if ((uint64_t)v16 < v7) {
          goto LABEL_406;
        }
        if (!v24) {
          goto LABEL_255;
        }
      }
    }
    else
    {
      if ((v16 & 0x8000000000000000) != 0) {
        goto LABEL_397;
      }
      uint64_t v7 = 0;
      if (!v24) {
        goto LABEL_255;
      }
    }
LABEL_299:
    swift_bridgeObjectRetain();
    uint64_t v176 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v176 < v7)
    {
LABEL_300:
      __break(1u);
LABEL_301:
      __break(1u);
LABEL_302:
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
      goto LABEL_307;
    }
LABEL_256:
    if (v7 < 0) {
      goto LABEL_302;
    }
    if (v24)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v23 < (uint64_t)v16) {
      goto LABEL_304;
    }
    if ((v16 & 0x8000000000000000) != 0) {
      goto LABEL_306;
    }
    if ((v25 & 0xC000000000000001) != 0 && v7 != v16)
    {
      if (v7 >= v16) {
        goto LABEL_388;
      }
      type metadata accessor for ReflowElement();
      Swift::Int v162 = v7;
      do
      {
        Swift::Int v163 = v162 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v162);
        Swift::Int v162 = v163;
      }
      while (v16 != v163);
    }
    if (v24)
    {
      swift_bridgeObjectRetain();
      uint64_t v164 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v165 = v166;
      uint64_t v7 = v167;
      uint64_t v8 = v168;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v164 = v25 & 0xFFFFFFFFFFFFFF8;
      uint64_t v165 = (v25 & 0xFFFFFFFFFFFFFF8) + 32;
      uint64_t v8 = (2 * v16) | 1;
    }
    specialized Array.init<A>(_:)(v164, v165, v7, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v9 = *(void *)&v215;
    uint64_t v25 = *(void *)(*(void *)&v215 + 160);
    a6 = *(double *)(*(void *)&v215 + 40);
    double v11 = *(double *)(*(void *)&v215 + 48);
    double v12 = *(double *)(*(void *)&v215 + 56);
    double v13 = *(double *)(*(void *)&v215 + 64);
    specialized static ReflowTextLine.layoutTextAdjustingBackwards(_:textScalePercentage:spacingAdjustment:lineIndex:baseline:previousLine:)(v218, a2, IsNativeType, v25, v220, a6, v11, v12, v13);
    swift_release();
    if (!(**(void **)&v215 >> 62))
    {
      if (*(void *)((**(void **)&v215 & 0xFFFFFFFFFFFFFF8) + 0x10) < a4) {
        goto LABEL_272;
      }
      goto LABEL_308;
    }
LABEL_307:
    swift_bridgeObjectRetain();
    uint64_t v177 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v177 < a4)
    {
LABEL_272:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v169 = swift_allocObject();
      *(_OWORD *)(v169 + 16) = xmmword_20C835790;
      int64_t v24 = v216;
      *(void *)(v169 + 32) = v216;
      *(void *)&long long v222 = v169;
      specialized Array._endMutation()();
      uint64_t v8 = v222;
      swift_retain();
      goto LABEL_331;
    }
LABEL_308:
    uint64_t v23 = *(void *)v9;
    int64_t v24 = *(void *)v9 >> 62;
    if (!v24)
    {
      uint64_t v7 = *(void *)((*(void *)v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v7 < a4) {
        goto LABEL_393;
      }
      if ((v23 & 0xC000000000000001) == 0) {
        goto LABEL_315;
      }
LABEL_311:
      if (a4 != v7)
      {
        if (a4 >= v7) {
          goto LABEL_402;
        }
        type metadata accessor for ReflowElement();
        Swift::Int v178 = a4;
        do
        {
          Swift::Int v179 = v178 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v178);
          Swift::Int v178 = v179;
        }
        while (v7 != v179);
      }
      goto LABEL_315;
    }
LABEL_389:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 < a4) {
      goto LABEL_428;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 < a4)
    {
LABEL_429:
      __break(1u);
      goto LABEL_430;
    }
    swift_bridgeObjectRetain();
    uint64_t v212 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v212 < v7)
    {
      __break(1u);
LABEL_393:
      __break(1u);
      goto LABEL_394;
    }
LABEL_430:
    uint64_t v9 = *(void *)&v215;
    if ((v23 & 0xC000000000000001) != 0) {
      goto LABEL_311;
    }
LABEL_315:
    if (v24)
    {
      swift_bridgeObjectRetain();
      uint64_t v180 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v181 = v183;
      a4 = v184;
      uint64_t v182 = v185;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v180 = v23 & 0xFFFFFFFFFFFFFF8;
      uint64_t v181 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
      uint64_t v182 = (2 * v7) | 1;
      swift_bridgeObjectRetain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v186 = swift_initStackObject();
    uint64_t v187 = specialized static Array._adoptStorage(_:count:)(v186, 1);
    *double v188 = v216;
    specialized _finalizeUninitializedArray<A>(_:)();
    uint64_t v189 = v187;
    *(void *)&long long v222 = v180;
    *((void *)&v222 + 1) = v181;
    *(void *)&long long v223 = a4;
    *((void *)&v223 + 1) = v182;
    swift_retain();
    uint64_t v23 = (uint64_t)&v222;
    uint64_t v190 = specialized ArraySlice.append<A>(contentsOf:)(v189);
    uint64_t v8 = *((void *)&v222 + 1);
    uint64_t v7 = v222;
    IsNativeint Type = *((void *)&v223 + 1);
    int64_t v24 = v223;
    a4 = *((void *)&v223 + 1) >> 1;
    if ((void)v223 == *((void *)&v223 + 1) >> 1) {
      break;
    }
    if ((uint64_t)v223 >= *((void *)&v223 + 1) >> 1) {
      goto LABEL_403;
    }
    int64_t v191 = v223;
    if (((*(uint64_t (**)(uint64_t))(**(void **)(*((void *)&v222 + 1) + 8 * v223) + 144))(v190) & 1) == 0) {
      goto LABEL_328;
    }
    int64_t v191 = v24 + 1;
    if (v24 + 1 == a4) {
      goto LABEL_329;
    }
    while (1)
    {
      if (v191 >= a4)
      {
LABEL_366:
        __break(1u);
        goto LABEL_367;
      }
      uint64_t v23 = *(void *)(v8 + 8 * v191);
      unint64_t v33 = (*(uint64_t (**)(void))(*(void *)v23 + 144))();
      if ((v33 & 1) == 0) {
        goto LABEL_328;
      }
      int64_t v192 = v191 + 1;
      if (__OFADD__(v191, 1)) {
        break;
      }
      ++v191;
      if (v192 == a4) {
        goto LABEL_329;
      }
    }
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    uint64_t v8 = MEMORY[0x21054E050](v33, v7);
    swift_bridgeObjectRelease();
    uint64_t v211 = *(void *)IsNativeType;
    swift_unknownObjectRelease();
    if (v8 == v211) {
      goto LABEL_28;
    }
  }
  int64_t v191 = v223;
LABEL_328:
  BOOL v78 = a4 < v191;
  a4 = v191;
  if (v78)
  {
LABEL_394:
    __break(1u);
    goto LABEL_395;
  }
LABEL_329:
  if (a4 < v24)
  {
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
    goto LABEL_398;
  }
  uint64_t v8 = specialized Array.init<A>(_:)(v7, v8, a4, IsNativeType);
  swift_unknownObjectRelease();
LABEL_331:
  if (!((unint64_t)v8 >> 62))
  {
    IsNativeint Type = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!IsNativeType) {
      goto LABEL_362;
    }
    goto LABEL_333;
  }
LABEL_367:
  swift_bridgeObjectRetain();
  IsNativeint Type = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!IsNativeType) {
    goto LABEL_362;
  }
LABEL_333:
  double v215 = v12;
  *(double *)&long long v218 = v11;
  *(CGFloat *)&long long v220 = a6;
  double v193 = vabdd_f64(v10, v14);
  a4 = specialized Array._hoistableIsNativeTypeChecked()(v8);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, a4 & 1, v8);
  CGFloat v214 = v13;
  double v13 = v10;
  double v12 = v14;
  double v11 = a5;
  if (a4)
  {
    double v194 = *(double **)(v8 + 32);
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    double v194 = (double *)MEMORY[0x21054E050](0, v8);
    swift_bridgeObjectRelease();
  }
  CGFloat v195 = v194[2];
  CGFloat v196 = v194[3];
  CGFloat v198 = v194[4];
  CGFloat v197 = v194[5];
  swift_release();
  v228.origin.CGFloat x = v195;
  v228.origin.CGFloat y = v196;
  v228.size.CGFloat width = v198;
  v228.size.CGFloat height = v197;
  double v199 = v193 / (CGRectGetMinX(v228) - v13);
  double v200 = 1.0;
  if (v199 <= 1.0) {
    double v200 = v199;
  }
  if (v199 >= 0.0) {
    a6 = v200;
  }
  else {
    a6 = 0.0;
  }
  if (a4)
  {
    uint64_t v23 = *(void *)(v8 + 32);
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = MEMORY[0x21054E050](0, v8);
    swift_bridgeObjectRelease();
  }
  double v10 = *(double *)(v23 + 16);
  CGFloat v201 = *(double *)(v23 + 24);
  double v15 = *(double *)(v23 + 32);
  a5 = *(double *)(v23 + 40);
  swift_release();
  v229.origin.CGFloat x = v10;
  v229.origin.CGFloat y = v201;
  v229.size.CGFloat width = v15;
  v229.size.CGFloat height = a5;
  double v14 = CGRectGetMinX(v229);
  if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1) {
    swift_once();
  }
  double v202 = v14 + a6 * (v12 + *(double *)&static UIConstants.handwritingReflowMinimumSpaceWidth - v14);
  if (v202 < 0.0) {
    double v202 = 0.0;
  }
  double v203 = v11 - *(double *)(v9 + 32);
  if (v202 > v203)
  {
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
    goto LABEL_383;
  }
  uint64_t v7 = (uint64_t)specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v8, (uint64_t)a2, v25, 1, 1, 1, 0, v202, v203, *(double *)&v220, *(CGFloat *)&v218, v215, v214, 0.0, 0.0);
  uint64_t v205 = specialized Array._getCount()(v204);
  swift_bridgeObjectRelease();
  if (v205)
  {
    swift_bridgeObjectRelease();
    goto LABEL_350;
  }
  uint64_t v206 = swift_retain();
  MEMORY[0x21054D330](v206);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((*(void *)v9 & 0xFFFFFFFFFFFFFF8)
                                                                              + 0x10));
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v207 = specialized Array._getCount()(v7);
  if (v207)
  {
    uint64_t v208 = v207;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v7);
    long long v219 = *(_OWORD *)(v7 + 32);
    long long v221 = *(_OWORD *)(v7 + 48);
    double v10 = (double)v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v24 = 0;
    uint64_t v25 = v7 + 64;
    uint64_t v9 = v208 - 1;
    while (1)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24, a4 & 1, v8);
      uint64_t v209 = (a4 & 1) != 0 ? swift_retain() : MEMORY[0x21054E050](v24, v8);
      *(_OWORD *)(v209 + 48) = v219;
      *(_OWORD *)(v209 + 64) = v221;
      *(double *)(v209 + 80) = v10;
      swift_release();
      if (v9 == v24) {
        goto LABEL_360;
      }
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24 + 1, 1, v7);
      if (__OFADD__(v24 + 1, 1))
      {
        __break(1u);
        goto LABEL_366;
      }
      v210 = (long long *)(v25 + 32 * v24);
      long long v219 = *v210;
      long long v221 = v210[1];
      if (IsNativeType == ++v24) {
        goto LABEL_360;
      }
    }
  }
LABEL_361:
  swift_bridgeObjectRelease();
LABEL_362:
  swift_bridgeObjectRelease();
LABEL_363:
  char v44 = 1;
  return v44 & 1;
}

unint64_t type metadata accessor for CHTextSize()
{
  unint64_t result = lazy cache variable for type metadata for CHTextSize;
  if (!lazy cache variable for type metadata for CHTextSize)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CHTextSize);
  }
  return result;
}

void specialized static ArraySlice<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v66 = a5;
  uint64_t v58 = a1;
  uint64_t v59 = a4;
  uint64_t v9 = type metadata accessor for CalculateExpression.TokenType();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  double v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CalculateExpression.TokenType?, CalculateExpression.TokenType?));
  MEMORY[0x270FA5388](v60);
  unint64_t v56 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalculateExpression.TokenType?);
  MEMORY[0x270FA5388](v14 - 8);
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)&v46 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v46 - v19;
  double v23 = MEMORY[0x270FA5388](v21);
  uint64_t v57 = (char *)&v46 - v24;
  int64_t v61 = a3 >> 1;
  uint64_t v25 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  int64_t v26 = a6 >> 1;
  if (__OFSUB__(v26, v66)) {
    goto LABEL_34;
  }
  if (v25 != v26 - v66) {
    return;
  }
  if (!v25) {
    return;
  }
  uint64_t v55 = *(void *)(v10 + 72);
  if (v58 + v55 * a2 == v59 + v55 * v66) {
    return;
  }
  uint64_t v50 = v12;
  uint64_t v51 = v22;
  if (v61 != a2)
  {
    uint64_t v28 = (uint64_t)v57;
    if (v61 > a2)
    {
      uint64_t v29 = v10;
      (*(void (**)(char *, double))(v10 + 16))(v57, v23);
      uint64_t v64 = a2 + 1;
      double v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v10 + 56);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v27)(v28, 0, 1, v9);
      goto LABEL_10;
    }
LABEL_37:
    __break(1u);
    return;
  }
  double v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v10 + 56);
  uint64_t v28 = (uint64_t)v57;
  uint64_t v29 = v10;
  v27(v57, 1, 1, v9, v23);
  uint64_t v64 = a2;
LABEL_10:
  outlined init with copy of CalculateExpression.TokenType?(v28, (uint64_t)v20);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  uint64_t v65 = v29 + 48;
  unsigned int v31 = v30(v20, 1, v9);
  uint64_t v32 = (uint64_t)v56;
  if (v31 == 1)
  {
LABEL_11:
    outlined destroy of StocksKitCurrencyCache.Provider?(v28, &demangling cache variable for type metadata for CalculateExpression.TokenType?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for CalculateExpression.TokenType?);
    return;
  }
  uint64_t v47 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  unint64_t v48 = v17;
  double v49 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v52 = v26;
  Swift::Int v63 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v30;
  uint64_t v33 = v66;
  uint64_t v53 = v10 + 56;
  uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  while (1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for CalculateExpression.TokenType?);
    if (v33 == v26)
    {
      uint64_t v35 = 1;
      uint64_t v62 = v26;
    }
    else
    {
      if (v33 < v66 || v33 >= v26) {
        goto LABEL_35;
      }
      (*v54)(v17, v59 + v33 * v55, v9);
      uint64_t v35 = 0;
      uint64_t v62 = v33 + 1;
    }
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v27)(v17, v35, 1, v9);
    uint64_t v36 = v32 + *(int *)(v60 + 48);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>(v28, v32, &demangling cache variable for type metadata for CalculateExpression.TokenType?);
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>((uint64_t)v17, v36, &demangling cache variable for type metadata for CalculateExpression.TokenType?);
    uint64_t v37 = v63;
    if (v63(v32, 1, v9) != 1) {
      break;
    }
    if (v37(v36, 1, v9) != 1) {
      goto LABEL_31;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for CalculateExpression.TokenType?);
LABEL_26:
    uint64_t v44 = v61;
    if (v64 == v61)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v27)(v28, 1, 1, v9);
      uint64_t v64 = v44;
    }
    else
    {
      if (v64 < a2 || v64 >= v61) {
        goto LABEL_36;
      }
      uint64_t v45 = v64;
      (*v54)((char *)v28, v58 + v64 * v55, v9);
      uint64_t v64 = v45 + 1;
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v27)(v28, 0, 1, v9);
    }
    outlined init with copy of CalculateExpression.TokenType?(v28, (uint64_t)v20);
    unsigned int v34 = v63((uint64_t)v20, 1, v9);
    int64_t v26 = v52;
    uint64_t v33 = v62;
    if (v34 == 1) {
      goto LABEL_11;
    }
  }
  uint64_t v38 = v20;
  uint64_t v39 = v51;
  outlined init with copy of CalculateExpression.TokenType?(v32, v51);
  if (v37(v36, 1, v9) != 1)
  {
    uint64_t v40 = v50;
    (*v47)(v50, v36, v9);
    lazy protocol witness table accessor for type CalculateExpression.TokenType and conformance CalculateExpression.TokenType();
    char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v42 = *v49;
    unint64_t v43 = v40;
    uint64_t v32 = (uint64_t)v56;
    (*v49)(v43, v9);
    v42((char *)v39, v9);
    uint64_t v28 = (uint64_t)v57;
    outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for CalculateExpression.TokenType?);
    uint64_t v20 = v38;
    unint64_t v17 = v48;
    if ((v41 & 1) == 0) {
      return;
    }
    goto LABEL_26;
  }
  (*v49)((char *)v39, v9);
LABEL_31:
  outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for (CalculateExpression.TokenType?, CalculateExpression.TokenType?));
}

uint64_t specialized static ArraySlice<A>.== infix(_:_:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6 = a3 >> 1;
  uint64_t v7 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v9 = a6 >> 1;
  if (__OFSUB__(a6 >> 1, a5)) {
    goto LABEL_26;
  }
  if (v7 != (a6 >> 1) - a5) {
    return 0;
  }
  if (!v7) {
    return 1;
  }
  uint64_t v11 = result;
  double v12 = (uint64_t *)(result + 8 * a2);
  if (v12 == (uint64_t *)(a4 + 8 * a5) || v6 == a2) {
    return 1;
  }
  if (v6 > a2)
  {
    uint64_t v18 = a2 + 1;
    uint64_t v17 = *v12;
    unint64_t result = swift_retain();
    if (v17)
    {
      uint64_t v13 = a5;
      while (v9 != v13)
      {
        if (v13 < a5 || v13 >= v9) {
          goto LABEL_27;
        }
        uint64_t v14 = *(void *)(a4 + 8 * v13);
        unint64_t result = swift_release();
        BOOL v16 = v14 == v17;
        BOOL v15 = v14 == v17;
        BOOL v16 = !v16 || v6 == v18;
        if (!v16)
        {
          if (v18 >= v6) {
            goto LABEL_28;
          }
          uint64_t v17 = *(void *)(v11 + 8 * v18);
          unint64_t result = swift_retain();
          ++v13;
          ++v18;
          if (v17) {
            continue;
          }
        }
        return v15;
      }
      swift_release();
      return 0;
    }
    return 1;
  }
LABEL_29:
  __break(1u);
  return result;
}

void *specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:isReversed:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7, CGFloat a8, double a9, double a10, CGFloat a11, double a12, CGFloat a13, double a14, CGFloat a15)
{
  LODWORD(v17) = a5;
  unint64_t v27 = a1 >> 62;
  if (!(a1 >> 62))
  {
    uint64_t v28 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v28) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  if (!v28) {
    goto LABEL_11;
  }
LABEL_3:
  unint64_t v29 = v28 - 1;
  if (__OFSUB__(v28, 1))
  {
LABEL_141:
    __break(1u);
  }
  else if ((a1 & 0xC000000000000001) == 0)
  {
    if ((v29 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v29 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v30 = *(void *)(a1 + 8 * v29 + 32);
      swift_retain();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_145;
  }
  uint64_t v30 = MEMORY[0x21054E050](v29, a1);
LABEL_8:
  uint64_t v31 = swift_bridgeObjectRelease();
  int64_t IsNull = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 144))(v31);
  swift_release();
  if (IsNull)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized Sequence.dropLast(_:)(1, a1);
    goto LABEL_13;
  }
LABEL_12:
  swift_bridgeObjectRetain();
  uint64_t v16 = a1;
LABEL_13:
  if (!((unint64_t)v16 >> 62))
  {
    uint64_t v32 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v120 = v28;
    if (v32) {
      goto LABEL_15;
    }
LABEL_27:
    swift_bridgeObjectRelease_n();
    double v43 = 0.0;
    double v46 = a15 + 0.0;
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v120 = v28;
  if (!v32) {
    goto LABEL_27;
  }
LABEL_15:
  if (v32 < 1)
  {
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  uint64_t v132 = a2;
  char v33 = a4;
  double v134 = a8;
  double v34 = a10;
  double v35 = a12;
  double v36 = a13;
  LODWORD(a4) = v17;
  uint64_t v37 = 0;
  double v38 = 0.0;
  if ((v16 & 0xC000000000000001) != 0)
  {
    do
    {
      uint64_t v39 = MEMORY[0x21054E050](v37++, v16);
      double Width = CGRectGetWidth(*(CGRect *)(v39 + 16));
      swift_unknownObjectRelease();
      double v38 = v38 + Width;
    }
    while (v32 != v37);
  }
  else
  {
    do
    {
      uint64_t v41 = *(void *)(v16 + 8 * v37++ + 32);
      double v38 = v38 + CGRectGetWidth(*(CGRect *)(v41 + 16));
    }
    while (v32 != v37);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v42 = 0;
  double v43 = 0.0;
  do
  {
    if ((v16 & 0xC000000000000001) != 0)
    {
      uint64_t v44 = MEMORY[0x21054E050](v42, v16);
    }
    else
    {
      uint64_t v44 = *(void *)(v16 + 8 * v42 + 32);
      swift_retain();
    }
    ++v42;
    double v45 = (*(double (**)(void))(*(void *)v44 + 152))();
    swift_release();
    double v43 = v43 + v45;
  }
  while (v32 != v42);
  swift_bridgeObjectRelease_n();
  double v46 = v38 + a15;
  uint64_t v28 = v120;
  LODWORD(v17) = a4;
  a13 = v36;
  a12 = v35;
  a10 = v34;
  a8 = v134;
  LOBYTE(a4) = v33;
  a2 = v132;
LABEL_28:
  double v47 = (double)a2 / 100.0;
  double v128 = 0.0;
  if (a4)
  {
    double v48 = v47 * (v46 + a14);
    double v49 = a9 - a8;
    if (a9 - a8 < v48)
    {
      if (v48 - v49 <= a15)
      {
        a15 = a15 - (v48 - v49);
        if (v28) {
          goto LABEL_33;
        }
        return (void *)MEMORY[0x263F8EE78];
      }
      double v128 = fmin((v48 - a15 - v49) / (v48 - a15 - v47 * (v43 + a14)), 1.0);
      a15 = 0.0;
    }
  }
  if (!v28) {
    return (void *)MEMORY[0x263F8EE78];
  }
LABEL_33:
  double v124 = v47 * a11;
  double v125 = v47 * a10;
  double v50 = sqrt((a12 - a10) * (a12 - a10) + (a13 - a11) * (a13 - a11));
  double v122 = (a13 - a11) / v50;
  double v123 = (a12 - a10) / v50;
  double v133 = (double)a2 / 100.0;
  a10 = v47 * a15 * (1.0 - v128) + a8;
  unint64_t v129 = a1 & 0xC000000000000001;
  a4 = a1 & 0xFFFFFFFFFFFFFF8;
  if ((a1 & 0x8000000000000000) != 0) {
    uint64_t v51 = a1;
  }
  else {
    uint64_t v51 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v119 = v51;
  uint64_t v114 = a4 + 32;
  unsigned int v121 = v17 ^ 1;
  unint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  uint64_t v17 = (void *)MEMORY[0x263F8EE78];
  unint64_t v118 = v27;
  while (1)
  {
    if (v129)
    {
      unint64_t v29 = MEMORY[0x21054E050](v16, a1);
      unint64_t v52 = v29;
      if (__OFADD__(v16, 1)) {
        goto LABEL_137;
      }
    }
    else
    {
      if ((unint64_t)v16 >= *(void *)(a4 + 16)) {
        goto LABEL_139;
      }
      unint64_t v52 = *(void *)(a1 + 32 + 8 * v16);
      unint64_t v29 = swift_retain();
      if (__OFADD__(v16, 1))
      {
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
        goto LABEL_141;
      }
    }
    v136.origin.CGFloat x = v133 * *(double *)(v52 + 16);
    v136.origin.CGFloat y = v133 * *(double *)(v52 + 24);
    v136.size.CGFloat width = v133 * *(double *)(v52 + 32);
    double v53 = v133 * *(double *)(v52 + 40);
    v136.size.CGFloat height = v53;
    double v54 = (1.0 - v128) * CGRectGetWidth(v136);
    double v55 = v54 + v128 * (v133 * (*(double (**)(void))(*(void *)v52 + 152))());
    if (!v16)
    {
      double v56 = a9 - v55;
      if (a9 - v55 >= a14) {
        double v56 = a14;
      }
      if (v56 < 0.0) {
        double v56 = 0.0;
      }
      a10 = a10 + v56;
    }
    double v135 = v55;
    uint64_t v57 = *(void *)v52;
    double v130 = v53;
    if (*(void *)(v52 + 120) == a3)
    {
      (*(void (**)(void))(v57 + 240))();
      if ((a7 & 1) == 0) {
        goto LABEL_51;
      }
    }
    else
    {
      (*(void (**)(void))(v57 + 272))();
      if ((a7 & 1) == 0)
      {
LABEL_51:
        double v62 = v58;
        double v63 = v59;
        goto LABEL_54;
      }
    }
    double v62 = v60;
    double v63 = v61;
LABEL_54:
    a12 = a10;
    double v64 = v125 + v123 * a10;
    double v65 = v124 + v122 * a10;
    CGFloat v66 = *(double *)(v52 + 32);
    CGFloat v67 = *(double *)(v52 + 40);
    v137.origin.CGFloat x = 0.0;
    v137.origin.CGFloat y = 0.0;
    v137.size.CGFloat width = v66;
    v137.size.CGFloat height = v67;
    double MinX = CGRectGetMinX(v137);
    v138.origin.CGFloat x = 0.0;
    v138.origin.CGFloat y = 0.0;
    v138.size.CGFloat width = v66;
    v138.size.CGFloat height = v67;
    double v69 = MinX + v62 * CGRectGetWidth(v138);
    v139.origin.CGFloat x = 0.0;
    v139.origin.CGFloat y = 0.0;
    v139.size.CGFloat width = v66;
    v139.size.CGFloat height = v67;
    double MinY = CGRectGetMinY(v139);
    v140.origin.CGFloat x = 0.0;
    v140.origin.CGFloat y = 0.0;
    v140.size.CGFloat width = v66;
    v140.size.CGFloat height = v67;
    double v71 = v65 - v133 * (MinY + v63 * CGRectGetHeight(v140));
    double v72 = v64 - v133 * v69 + v64 - v133 * v69;
    double v73 = floor(v72);
    double v74 = v72 - v73;
    double v75 = ceil(v72);
    if (v74 < 0.49) {
      double v75 = v73;
    }
    double v76 = v71 + v71;
    double v77 = floor(v76);
    double v78 = v76 - v77;
    double v79 = ceil(v76);
    if (v78 < 0.49) {
      double v79 = v77;
    }
    double v80 = v75 * 0.5;
    double v81 = v79 * 0.5;
    a13 = *(double *)(v52 + 16);
    a15 = *(double *)(v52 + 24);
    a11 = *(double *)(v52 + 32);
    double v82 = *(double *)(v52 + 40);
    v141.origin.CGFloat x = v75 * 0.5;
    v141.origin.CGFloat y = v81;
    v141.size.CGFloat width = v135;
    a8 = v130;
    v141.size.CGFloat height = v130;
    int64_t IsNull = CGRectIsNull(v141);
    v142.origin.CGFloat x = a13;
    v142.origin.CGFloat y = a15;
    v142.size.CGFloat width = a11;
    v142.size.CGFloat height = v82;
    int v83 = CGRectIsNull(v142);
    if IsNull && (v83) {
      goto LABEL_60;
    }
    double v84 = vabdd_f64(v80, a13);
    BOOL v85 = IsNull == v83 && v84 < 2.0;
    double v86 = vabdd_f64(v81, a15);
    BOOL v87 = v85 && v86 < 2.0;
    double v88 = vabdd_f64(v135, a11);
    BOOL v89 = v87 && v88 < 2.0;
    double v90 = vabdd_f64(v130, v82);
    if (v89 && v90 < 2.0)
    {
LABEL_60:
      double v80 = *(double *)(v52 + 16);
      double v81 = *(double *)(v52 + 24);
      a8 = *(double *)(v52 + 40);
      double v135 = *(double *)(v52 + 32);
    }
    if (v16)
    {
      a10 = a12;
      if (v27)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = v119;
        unint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
        if ((v29 & 0x8000000000000000) != 0) {
          goto LABEL_140;
        }
        swift_bridgeObjectRetain();
        int64_t IsNull = _CocoaArrayWrapper.endIndex.getter();
        unint64_t v29 = swift_bridgeObjectRelease();
      }
      else
      {
        int64_t IsNull = *(void *)(a4 + 16);
        unint64_t v29 = swift_bridgeObjectRetain();
        uint64_t v28 = v119;
      }
      if (IsNull < v16) {
        goto LABEL_138;
      }
      uint64_t v131 = v17;
      if (v129)
      {
        int64_t IsNull = type metadata accessor for ReflowElement();
        Swift::Int v93 = 0;
        do
        {
          Swift::Int v94 = v93 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v93);
          Swift::Int v93 = v94;
        }
        while (v16 != v94);
      }
      if (v27)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.subscript.getter();
        int64_t v95 = v97;
        unint64_t v96 = v98;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        int64_t v95 = 0;
        unint64_t v96 = (2 * v16) | 1;
      }
      int64_t v99 = v96 >> 1;
      if (v96 >> 1 == v95)
      {
LABEL_93:
        swift_unknownObjectRelease();
        int v92 = 0;
        a2 = 0;
        a4 = a1 & 0xFFFFFFFFFFFFFF8;
        unint64_t v27 = v118;
        uint64_t v28 = v120;
        uint64_t v17 = v131;
      }
      else
      {
        while (1)
        {
          if (__OFSUB__(v99--, 1))
          {
            __break(1u);
LABEL_133:
            __break(1u);
            goto LABEL_134;
          }
          if (v99 < v95 || v99 >= (uint64_t)(v96 >> 1)) {
            goto LABEL_133;
          }
          int64_t IsNull = type metadata accessor for ReflowWord();
          if (swift_dynamicCastClass()) {
            break;
          }
          if (v99 == v95) {
            goto LABEL_93;
          }
        }
        swift_retain();
        swift_unknownObjectRelease();
        a2 = swift_dynamicCastClass();
        unint64_t v27 = v118;
        uint64_t v28 = v120;
        uint64_t v17 = v131;
        if (!a2) {
          swift_release();
        }
        int v92 = 0;
        a4 = a1 & 0xFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      a2 = 0;
      int v92 = a6;
      a10 = a12;
    }
    if (((v92 | v121) & 1) == 0
      && ((*(uint64_t (**)(void))(*(void *)v52 + 144))() & 1) == 0
      && (a9 + 0.1 < a10 + CGRectGetWidth(*(CGRect *)(v52 + 48)) || a2 && *(unsigned char *)(a2 + 136) == 1))
    {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v102 = v17[2];
    unint64_t v101 = v17[3];
    uint64_t v103 = v17;
    if (v102 >= v101 >> 1) {
      uint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v101 > 1), v102 + 1, 1, v17);
    }
    ++v16;
    v103[2] = v102 + 1;
    uint64_t v17 = v103;
    uint64_t v104 = (double *)&v103[4 * v102];
    v104[4] = v80;
    v104[5] = v81;
    v143.size.CGFloat width = v135;
    v104[6] = v135;
    v104[7] = a8;
    v143.origin.CGFloat x = v80;
    v143.origin.CGFloat y = v81;
    v143.size.CGFloat height = a8;
    a13 = CGRectGetWidth(v143);
    swift_release();
    unint64_t v29 = swift_release();
    a10 = a10 + a13;
    if (v16 == v28)
    {
      swift_bridgeObjectRelease();
      return v17;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28 < v16) {
    goto LABEL_146;
  }
  if (v27)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter() < v16) {
      goto LABEL_147;
    }
    swift_bridgeObjectRetain();
    int64_t IsNull = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t IsNull = *(void *)(a4 + 16);
    swift_bridgeObjectRetain();
    if (IsNull < v16) {
      goto LABEL_147;
    }
    int64_t IsNull = *(void *)(a4 + 16);
  }
  if (IsNull < v28)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  if (v129 && v16 != v28)
  {
    if (v16 >= (unint64_t)v28) {
      goto LABEL_149;
    }
    type metadata accessor for ReflowElement();
    Swift::Int v105 = v16;
    do
    {
      Swift::Int v106 = v105 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v105);
      Swift::Int v105 = v106;
    }
    while (v28 != v106);
  }
  if (v27)
  {
    swift_bridgeObjectRetain();
    a4 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v114 = v107;
    uint64_t v16 = v108;
    int64_t IsNull = v109;
    swift_bridgeObjectRelease_n();
    if ((IsNull & 1) == 0) {
      goto LABEL_125;
    }
  }
  else
  {
    int64_t IsNull = (2 * v28) | 1;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v110 = swift_dynamicCastClass();
  if (!v110)
  {
    swift_unknownObjectRelease();
    uint64_t v110 = MEMORY[0x263F8EE78];
  }
  uint64_t v111 = *(void *)(v110 + 16);
  swift_release();
  if (__OFSUB__((unint64_t)IsNull >> 1, v16))
  {
LABEL_150:
    __break(1u);
LABEL_151:
    swift_unknownObjectRelease();
LABEL_125:
    specialized _copyCollectionToContiguousArray<A>(_:)(a4, v114, v16, IsNull);
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_131;
  }
  if (v111 != ((unint64_t)IsNull >> 1) - v16) {
    goto LABEL_151;
  }
  uint64_t v112 = swift_dynamicCastClass();
  swift_release();
  swift_unknownObjectRelease();
  if (!v112)
  {
LABEL_134:
    swift_unknownObjectRelease();
    swift_release();
    return (void *)MEMORY[0x263F8EE78];
  }
LABEL_131:
  swift_release();
  return (void *)MEMORY[0x263F8EE78];
}

BOOL specialized ReflowTextLine.addLayoutAndApply(_:textScalePercentage:span:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:)(CGFloat a1, double a2, double a3, CGFloat a4, uint64_t a5, void *a6)
{
  uint64_t v7 = (uint64_t)v6;
  unint64_t v28 = *v6;
  swift_retain_n();
  uint64_t v13 = swift_bridgeObjectRetain();
  MEMORY[0x21054D330](v13);
  if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_21:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  int64_t v14 = *(void *)(v7 + 160);
  a6 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v28, (uint64_t)a6, v14, 1, 1, 1, 0, a1, a2, *(double *)(v7 + 40), *(CGFloat *)(v7 + 48), *(double *)(v7 + 56), *(CGFloat *)(v7 + 64), a3, a4);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v17)
  {
    uint64_t v18 = swift_retain();
    MEMORY[0x21054D330](v18);
    if (*(void *)((*(void *)v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v7 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
      goto LABEL_24;
    while (1)
    {
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v19 = a6[2];
      if (!v19) {
        break;
      }
      uint64_t v20 = *(void *)v7;
      long long v26 = *((_OWORD *)a6 + 2);
      long long v27 = *((_OWORD *)a6 + 3);
      if (*(void *)v7 >> 62)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
        if (!v7)
        {
LABEL_18:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return v17 == 0;
        }
      }
      else
      {
        uint64_t v7 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!v7) {
          goto LABEL_18;
        }
      }
      unint64_t v21 = 0;
      a4 = (double)v14;
      int64_t v14 = v20 & 0xC000000000000001;
      uint64_t v22 = (long long *)(a6 + 10);
      uint64_t v23 = v19 - 1;
      while (1)
      {
        if (v14)
        {
          uint64_t v24 = MEMORY[0x21054E050](v21, v20);
          goto LABEL_15;
        }
        if (v21 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          break;
        }
        uint64_t v24 = swift_retain();
LABEL_15:
        *(_OWORD *)(v24 + 48) = v26;
        *(_OWORD *)(v24 + 64) = v27;
        *(CGFloat *)(v24 + 80) = a4;
        swift_release();
        if (v23 == v21) {
          goto LABEL_18;
        }
        if (v21 + 1 >= a6[2])
        {
          __break(1u);
          goto LABEL_21;
        }
        long long v26 = *(v22 - 1);
        long long v27 = *v22;
        ++v21;
        v22 += 2;
        if (v7 == v21) {
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_24:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
  }
  swift_bridgeObjectRelease();
  return v17 == 0;
}

uint64_t specialized static ReflowTextLine.layoutBackwards(_:textScalePercentage:span:lineIndex:baseline:)(CGFloat a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v17 = swift_bridgeObjectRetain();
  unint64_t v18 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v17);
  swift_bridgeObjectRelease();
  if ((v18 & 0x8000000000000000) == 0 && (v18 & 0x4000000000000000) == 0)
  {
    uint64_t v19 = *(void *)(v18 + 16);
    uint64_t result = swift_retain();
    if (v19) {
      goto LABEL_4;
    }
LABEL_12:
    swift_release();
    __break(1u);
    goto LABEL_13;
  }
  swift_retain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_12;
  }
LABEL_4:
  double v30 = a6;
  CGFloat v31 = a1;
  if ((v18 & 0xC000000000000001) != 0)
  {
LABEL_13:
    unint64_t v21 = (double *)MEMORY[0x21054E050](0, v18);
    goto LABEL_7;
  }
  if (!*(void *)(v18 + 16))
  {
    __break(1u);
    return result;
  }
  unint64_t v21 = *(double **)(v18 + 32);
  swift_retain();
LABEL_7:
  swift_release();
  CGFloat v22 = v21[2];
  CGFloat v23 = v21[3];
  CGFloat v24 = v21[4];
  CGFloat v25 = v21[5];
  swift_release();
  v32.origin.CGFloat x = v22;
  v32.origin.CGFloat y = v23;
  v32.size.CGFloat width = v24;
  v32.size.CGFloat height = v25;
  double v26 = a2 - CGRectGetMaxX(v32);
  if (v26 < 0.0) {
    double v27 = 0.0;
  }
  else {
    double v27 = v26;
  }
  double v28 = sqrt((a5 - a3) * (a5 - a3) + (v30 - a4) * (v30 - a4));
  unint64_t v29 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v18, a8, a9, 1, 1, 0, 1, v31, a2, (a5 - a3) / v28 * a2 + a3, (v30 - a4) / v28 * a2 + a4, a3 - (a5 - a3) / v28, a4 - (v30 - a4) / v28, v27, 0.0);
  swift_release();
  return specialized Sequence.reversed()((uint64_t)v29);
}

uint64_t specialized static ReflowTextLine.layoutTextAdjustingBackwards(_:textScalePercentage:spacingAdjustment:lineIndex:baseline:previousLine:)(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, double MaxX)
{
  uint64_t v17 = a1;
  unint64_t v65 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_86;
  }
  uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v18) {
    goto LABEL_3;
  }
LABEL_67:
  while (2)
  {
    swift_bridgeObjectRelease();
LABEL_68:
    a3 = v65;
    if (v65 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v50)
      {
LABEL_105:
        if (!(v65 >> 62))
        {
          uint64_t v61 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_107:
          swift_bridgeObjectRelease();
          return v61;
        }
LABEL_110:
        swift_bridgeObjectRetain();
        uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_107;
      }
    }
    else if (!*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_105;
    }
    uint64_t v47 = *(void *)a5;
    uint64_t v66 = v47;
    if (!((unint64_t)v47 >> 62))
    {
      a4 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (a4) {
        goto LABEL_72;
      }
LABEL_91:
      outlined release of [ReflowElement]((uint64_t)&v66);
      double MaxX = 0.0;
LABEL_92:
      uint64_t v47 = *(void *)(a5 + 160);
      double v51 = *(double *)(a5 + 40);
      CGFloat v52 = *(double *)(a5 + 48);
      double v53 = *(double *)(a5 + 56);
      CGFloat v54 = *(double *)(a5 + 64);
      unint64_t v55 = swift_bridgeObjectRetain();
      a2 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:hardHeadIndent:softHeadIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v55, (uint64_t)a2, v47, 0, 0, 0, 0, MaxX, 1.79769313e308, v51, v52, v53, v54, 0.0, 0.0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a5 = a2[2];
      if (!a5)
      {
LABEL_104:
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }
      a3 = v65;
      long long v63 = *((_OWORD *)a2 + 2);
      long long v64 = *((_OWORD *)a2 + 3);
      if (!(v65 >> 62))
      {
        uint64_t v56 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if (v56) {
          goto LABEL_95;
        }
LABEL_103:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_104;
      }
LABEL_115:
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
      if (v56)
      {
LABEL_95:
        uint64_t v57 = 0;
        double v58 = (long long *)(a2 + 10);
        double v59 = (char *)(a5 - 1);
        while (1)
        {
          if ((a3 & 0xC000000000000001) != 0)
          {
            uint64_t v60 = MEMORY[0x21054E050](v57, a3);
          }
          else
          {
            if ((unint64_t)v57 >= *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_109;
            }
            uint64_t v60 = swift_retain();
          }
          *(_OWORD *)(v60 + 48) = v63;
          *(_OWORD *)(v60 + 64) = v64;
          *(double *)(v60 + 80) = (double)v47;
          swift_release();
          if (v59 == v57) {
            goto LABEL_103;
          }
          if ((unint64_t)(v57 + 1) >= a2[2]) {
            break;
          }
          long long v63 = *(v58 - 1);
          long long v64 = *v58;
          ++v57;
          v58 += 2;
          if ((char *)v56 == v57) {
            goto LABEL_103;
          }
        }
        __break(1u);
LABEL_109:
        __break(1u);
        goto LABEL_110;
      }
      goto LABEL_103;
    }
    swift_bridgeObjectRetain();
    a4 = _CocoaArrayWrapper.endIndex.getter();
    if (!a4) {
      goto LABEL_91;
    }
LABEL_72:
    unint64_t v48 = a4 - 1;
    if (__OFSUB__(a4, 1))
    {
      __break(1u);
    }
    else if ((v47 & 0xC000000000000001) == 0)
    {
      if ((v48 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v48 < *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v17 = *(void *)(v47 + 8 * v48 + 32);
        swift_retain();
        goto LABEL_77;
      }
      __break(1u);
      goto LABEL_115;
    }
    uint64_t v17 = MEMORY[0x21054E050](v48, v47);
LABEL_77:
    outlined release of [ReflowElement]((uint64_t)&v66);
    CGFloat v49 = *(double *)(v17 + 48);
    a8 = *(double *)(v17 + 56);
    a7 = *(double *)(v17 + 64);
    a6 = *(double *)(v17 + 72);
    swift_release();
    v67.origin.CGFloat x = v49;
    v67.origin.CGFloat y = a8;
    v67.size.CGFloat width = a7;
    v67.size.CGFloat height = a6;
    double MaxX = CGRectGetMaxX(v67);
    if (MaxX <= 1.79769313e308) {
      goto LABEL_92;
    }
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      continue;
    }
    break;
  }
LABEL_3:
  *(void *)&long long v63 = a5;
  if (*(double *)(a3 + 32) < 0.0) {
    double v19 = 0.0;
  }
  else {
    double v19 = *(double *)(a3 + 32);
  }
  while (1)
  {
    a3 = specialized static ReflowTextLine.layoutBackwards(_:textScalePercentage:span:lineIndex:baseline:)(0.0, v19, a6, a7, a8, MaxX, v17, (uint64_t)a2, a4);
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(a3 + 16);
    if (v20)
    {
      a5 = v63;
      uint64_t v35 = *(void *)(v63 + 160);
      uint64_t v36 = v35 + 1;
      if (__OFADD__(v35, 1))
      {
        __break(1u);
      }
      else
      {
        a8 = *(double *)(a3 + 32);
        long long v64 = *(_OWORD *)(a3 + 40);
        double MaxX = *(double *)(a3 + 56);
        if (!((unint64_t)v17 >> 62))
        {
          a4 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (!a4) {
            goto LABEL_66;
          }
LABEL_54:
          a7 = (double)v36;
          if ((v17 & 0xC000000000000001) != 0)
          {
            uint64_t v37 = 0;
            double v38 = (double *)(a3 + 88);
            uint64_t v39 = v20 - 1;
            long long v40 = v64;
            do
            {
              long long v64 = v40;
              uint64_t v41 = MEMORY[0x21054E050](v37, v17);
              *(CGFloat *)(v41 + 48) = a8;
              *(_OWORD *)(v41 + 56) = v64;
              *(double *)(v41 + 72) = MaxX;
              *(CGFloat *)(v41 + 80) = a7;
              swift_unknownObjectRelease();
              if (v39 == v37) {
                break;
              }
              if ((unint64_t)(v37 + 1) >= *(void *)(a3 + 16)) {
                goto LABEL_83;
              }
              double MaxX = *v38;
              long long v40 = *((_OWORD *)v38 - 1);
              a8 = *(v38 - 3);
              ++v37;
              v38 += 4;
            }
            while (a4 != v37);
LABEL_66:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            goto LABEL_67;
          }
          unint64_t v42 = 0;
          uint64_t v43 = a3 + 64;
          long long v44 = v64;
          while (v42 < *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t v45 = *(void *)(v17 + 32 + 8 * v42);
            *(CGFloat *)(v45 + 48) = a8;
            *(_OWORD *)(v45 + 56) = v44;
            *(double *)(v45 + 72) = MaxX;
            *(CGFloat *)(v45 + 80) = a7;
            if (v20 - 1 == v42) {
              goto LABEL_66;
            }
            if (v42 + 1 >= *(void *)(a3 + 16)) {
              goto LABEL_85;
            }
            double MaxX = *(double *)(v43 + 24);
            long long v44 = *(_OWORD *)(v43 + 8);
            double v46 = *(double *)v43;
            v43 += 32;
            a8 = v46;
            if (a4 == ++v42) {
              goto LABEL_66;
            }
          }
          goto LABEL_84;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a4 = _CocoaArrayWrapper.endIndex.getter();
      if (!a4) {
        goto LABEL_66;
      }
      goto LABEL_54;
    }
    swift_bridgeObjectRelease();
    unint64_t v21 = (unint64_t)v17 >> 62;
    if ((unint64_t)v17 >> 62)
    {
      if (v17 < 0) {
        a3 = v17;
      }
      else {
        a3 = v17 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v22) {
        goto LABEL_121;
      }
    }
    else
    {
      uint64_t v22 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v22) {
        goto LABEL_121;
      }
    }
    if ((v17 & 0xC000000000000001) != 0)
    {
      MEMORY[0x21054E050](0, v17);
    }
    else
    {
      if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_79;
      }
      swift_retain();
    }
    uint64_t v23 = swift_bridgeObjectRelease();
    MEMORY[0x21054D330](v23);
    a5 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((unint64_t)a5 >= *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if (v22 < 0) {
      break;
    }
    if (v21)
    {
      if (v17 < 0) {
        a3 = v17;
      }
      else {
        a3 = v17 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v24 < 1) {
        goto LABEL_80;
      }
      swift_bridgeObjectRetain();
      a3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      a3 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!a3) {
        goto LABEL_80;
      }
    }
    if (a3 < v22) {
      goto LABEL_81;
    }
    if ((v17 & 0xC000000000000001) != 0 && v22 != 1)
    {
      type metadata accessor for ReflowElement();
      Swift::Int v25 = 1;
      do
      {
        Swift::Int v26 = v25 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v25);
        Swift::Int v25 = v26;
      }
      while (v22 != v26);
    }
    if (v21)
    {
      swift_bridgeObjectRetain();
      a3 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v27 = v29;
      a5 = (uint64_t)v30;
      unint64_t v28 = v31;
      swift_bridgeObjectRelease_n();
      if ((v28 & 1) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
      a3 = v17 & 0xFFFFFFFFFFFFFF8;
      uint64_t v27 = (v17 & 0xFFFFFFFFFFFFFF8) + 32;
      unint64_t v28 = (2 * v22) | 1;
      a5 = 1;
      if ((v28 & 1) == 0) {
        goto LABEL_30;
      }
    }
    uint64_t v17 = type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v32 = swift_dynamicCastClass();
    if (!v32)
    {
      swift_unknownObjectRelease();
      uint64_t v32 = MEMORY[0x263F8EE78];
    }
    uint64_t v33 = *(void *)(v32 + 16);
    swift_release();
    if (__OFSUB__(v28 >> 1, a5)) {
      goto LABEL_82;
    }
    if (v33 == (v28 >> 1) - a5)
    {
      uint64_t v17 = swift_dynamicCastClass();
      if (!v17)
      {
        swift_unknownObjectRelease();
        uint64_t v17 = MEMORY[0x263F8EE78];
      }
      goto LABEL_44;
    }
    swift_unknownObjectRelease();
LABEL_30:
    uint64_t v17 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, v27, a5, v28);
LABEL_44:
    swift_unknownObjectRelease();
    if (v17 < 0 || (v17 & 0x4000000000000000) != 0)
    {
      swift_retain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (!v34)
      {
LABEL_60:
        swift_release();
        a5 = v63;
        goto LABEL_68;
      }
    }
    else if (!*(void *)(v17 + 16))
    {
      goto LABEL_60;
    }
  }
  __break(1u);
LABEL_121:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of CalculateExpression.TokenType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalculateExpression.TokenType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CalculateExpression.TokenType and conformance CalculateExpression.TokenType()
{
  unint64_t result = lazy protocol witness table cache variable for type CalculateExpression.TokenType and conformance CalculateExpression.TokenType;
  if (!lazy protocol witness table cache variable for type CalculateExpression.TokenType and conformance CalculateExpression.TokenType)
  {
    type metadata accessor for CalculateExpression.TokenType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateExpression.TokenType and conformance CalculateExpression.TokenType);
  }
  return result;
}

double TaggedValue_2<>.bounds.getter@<D0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  TaggedValue_2.tagged1.getter();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t TaggedValue_2<>.quad.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  return TaggedValue_2.tagged2.getter();
}

uint64_t specialized Capsule<>.isFormField.getter()
{
  uint64_t v19 = type metadata accessor for CRKeyPath();
  uint64_t v0 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  char v5 = (char *)&v17 - v4;
  uint64_t v20 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v20);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  lazy protocol witness table accessor for type TextBox and conformance TextBox((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v23[0]) = 5;
  uint64_t v11 = v19;
  (*(void (**)(char *, char *, uint64_t))(v0 + 16))(v2, v5, v19);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v5, v11);
  outlined destroy of TextBox((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Shape);
  lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  uint64_t v12 = v18;
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v21, (uint64_t)v23);
    uint64_t v13 = v24;
    uint64_t v14 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 72))(v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for ShapeTextBox?);
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21[2];
  uint64_t v22;
  void v23[3];
  uint64_t v24;
  uint64_t v25;

  uint64_t v19 = type metadata accessor for CRKeyPath();
  uint64_t v0 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  char v5 = (char *)&v17 - v4;
  uint64_t v20 = type metadata accessor for TextBox();
  MEMORY[0x270FA5388](v20);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v23[0]) = 3;
  uint64_t v11 = v19;
  (*(void (**)(char *, char *, uint64_t))(v0 + 16))(v2, v5, v19);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v5, v11);
  outlined destroy of TextBox((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TextBox);
  lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  uint64_t v12 = v18;
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v21, (uint64_t)v23);
    uint64_t v13 = v24;
    uint64_t v14 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 72))(v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for ShapeTextBox?);
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized Capsule<>.isFixedWidth.getter()
{
  uint64_t v19 = type metadata accessor for CRKeyPath();
  uint64_t v0 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  char v5 = (char *)&v17 - v4;
  uint64_t v20 = type metadata accessor for Shape();
  MEMORY[0x270FA5388](v20);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  uint64_t v8 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  lazy protocol witness table accessor for type TextBox and conformance TextBox((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v23[0]) = 5;
  uint64_t v11 = v19;
  (*(void (**)(char *, char *, uint64_t))(v0 + 16))(v2, v5, v19);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v5, v11);
  outlined destroy of TextBox((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Shape);
  lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
  uint64_t v12 = v18;
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v21, (uint64_t)v23);
    uint64_t v13 = v24;
    uint64_t v14 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 64))(v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for ShapeTextBox?);
    char v15 = 0;
  }
  return v15 & 1;
}

BOOL TextBoxCanvasElementView.isTextBox.getter()
{
  return *(void *)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView) != 0;
}

uint64_t TextBoxCanvasElementView.isFormField.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(char **)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v9
    && (uint64_t v10 = (void *)MEMORY[0x210550400](&v9[direct field offset for TextBoxView.canvasElementView], v6)) != 0)
  {
    uint64_t v11 = v10;
    uint64_t v12 = (char *)v10 + *(void *)((*MEMORY[0x263F8EED0] & *v10) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v12, v1);
    uint64_t v13 = v9;

    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v4, v1);
    char v14 = specialized Capsule<>.isFormField.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
  }
  else
  {
    char v14 = 0;
  }
  return v14 & 1;
}

BOOL TextBoxCanvasElementView.isFixedWidth.getter()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  BOOL v3 = specialized TextBoxView.isFixedWidth.getter();

  return v3;
}

void @objc TextBoxCanvasElementView.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  *(void *)&a1[direct field offset for TextBoxCanvasElementView._textBoxView] = 0;
  id v4 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *TextBoxCanvasElementView.textBoxView.getter()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  id v2 = v1;
  return v1;
}

id @objc TextBoxCanvasElementView.becomeFirstResponder()(uint64_t a1, uint64_t a2)
{
  return @objc TextBoxCanvasElementView.becomeFirstResponder()(a1, a2, (SEL *)&selRef_becomeFirstResponder);
}

id @objc TextBoxCanvasElementView.resignFirstResponder()(uint64_t a1, uint64_t a2)
{
  return @objc TextBoxCanvasElementView.becomeFirstResponder()(a1, a2, (SEL *)&selRef_resignFirstResponder);
}

id @objc TextBoxCanvasElementView.becomeFirstResponder()(uint64_t a1, uint64_t a2, SEL *a3)
{
  id result = *(id *)(a1 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (result) {
    return [result *a3];
  }
  return result;
}

id TextBoxCanvasElementView.isElementFirstResponder.getter()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (!v1) {
    return 0;
  }
  id result = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (result) {
    return objc_msgSend(result, sel_isFirstResponder);
  }
  return result;
}

void __swiftcall TextBoxCanvasElementView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  double y = _.y;
  double x = _.x;
  double v6 = *(void **)&v3[direct field offset for TextBoxCanvasElementView._textBoxView];
  if (!v6
    || (Class isa = with.value.super.isa,
        id v8 = v6,
        objc_msgSend(v3, sel_convertPoint_toView_, v8, x, y),
        id v9 = objc_msgSend(v8, sel_hitTest_withEvent_, isa),
        v8,
        !v9))
  {
    objc_msgSend(v3, sel_bounds);
    v11.double x = x;
    v11.double y = y;
    if (CGRectContainsPoint(v12, v11)) {
      uint64_t v10 = v3;
    }
  }
}

id @objc TextBoxCanvasElementView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.Class isa = (Class)a5;
  TextBoxCanvasElementView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  uint64_t v13 = v12;

  return v13;
}

id TextBoxCanvasElementView.didZoom(in:)()
{
  id result = *(id *)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (result) {
    return objc_msgSend(result, sel_setNeedsLayout);
  }
  return result;
}

Swift::Int TextBoxCanvasElementView.resizeHandles.getter()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v1)
  {
    id v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
    if (v2)
    {
      if (objc_msgSend(v2, sel_isFirstResponder)) {
        return MEMORY[0x263F8EE88];
      }
    }
  }
  return specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of TextBoxCanvasElementView.resizeHandles.getter);
}

uint64_t TextBoxCanvasElementView.modifiableProperties.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  id v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  v9[0] = type metadata accessor for TextBox();
  v9[1] = lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  void v9[2] = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v6 = 13;
  if ((v10 & 0x80) == 0) {
    uint64_t v6 = 15;
  }
  uint64_t v7 = 5;
  if ((v10 & 0x80) == 0) {
    uint64_t v7 = 7;
  }
  if ((v10 & 0x10) != 0) {
    uint64_t v6 = v7;
  }
  if ((v10 & 4) != 0) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t TextBoxCanvasElementView.isSelected.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TextBox();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  CGPoint v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((unsigned char *)v2 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  specialized CanvasElementView.isSelected.didset(v9);
  uint64_t v12 = direct field offset for TextBoxCanvasElementView._textBoxView;
  uint64_t v13 = *(void **)((char *)v2 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v13)
  {
    id v14 = v13;
    specialized TextBoxView.updateSelected()();

    char v15 = *(void **)((char *)v2 + v12);
    if (v15)
    {
      id v16 = v15;
      specialized TextBoxView.updateUI()();
    }
  }
  specialized CanvasElementView.updateGestures()();
  uint64_t v17 = *(void **)((char *)v2 + v12);
  if (v17) {
    objc_msgSend(v17, sel_setNeedsLayout);
  }
  uint64_t v18 = (void *)MEMORY[0x210550400]((char *)v2 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  uint64_t v19 = (void *)MEMORY[0x263F8EED0];
  if (v18)
  {
    uint64_t v20 = v18;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v18) + 0x680))();
  }
  unint64_t v21 = (char *)v2 + *(void *)((*v19 & *v2) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v21, v7);
  lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return outlined destroy of TextBox((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for TextBox);
}

void @objc TextBoxCanvasElementView.layoutSubviews()(char *a1, uint64_t a2)
{
}

void @objc TextBoxCanvasElementView.setNeedsDisplay()(char *a1, uint64_t a2)
{
}

void @objc TextBoxCanvasElementView.layoutSubviews()(char *a1, uint64_t a2, SEL *a3)
{
  uint64_t v5 = *(void **)&a1[direct field offset for TextBoxCanvasElementView._textBoxView];
  uint64_t v6 = a1;
  if (v5) {
    [v5 *a3];
  }
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for TextBoxCanvasElementView();
  objc_msgSendSuper2(&v7, *a3);
}

Swift::Void __swiftcall TextBoxCanvasElementView.updateUI()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TextBox();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = direct field offset for TextBoxCanvasElementView._textBoxView;
  uint64_t v10 = *(void **)((char *)v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v10)
  {
    id v11 = v10;
    specialized TextBoxView.updateUI()();
  }
  specialized CanvasElementView.updateGestures()();
  uint64_t v12 = *(void **)((char *)v1 + v9);
  if (v12) {
    objc_msgSend(v12, sel_setNeedsLayout);
  }
  uint64_t v13 = (void *)MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  id v14 = (void *)MEMORY[0x263F8EED0];
  if (v13)
  {
    char v15 = v13;
    (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v13) + 0x680))();
  }
  id v16 = (char *)v1 + *(void *)((*v14 & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v16, v5);
  lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined destroy of TextBox((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TextBox);
}

Swift::Void __swiftcall TextBoxCanvasElementView.beginLiveEdit()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = *(void **)((char *)v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v8)
  {
    id v9 = v8;
    specialized TextBoxView.beginLiveEdit()();
  }
  uint64_t v10 = (void *)MEMORY[0x263F8EED0];
  uint64_t v11 = (uint64_t)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x388);
  swift_beginAccess();
  outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v11, (uint64_t)v7, &demangling cache variable for type metadata for Capsule<TextBox>?);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v13 = *(void *)(v12 - 8);
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Capsule<TextBox>?);
  if (v14 == 1)
  {
    char v15 = (char *)v1 + *(void *)((*v10 & *v1) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v4, v15, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v4, 0, 1, v12);
    swift_beginAccess();
    outlined assign with copy of Capsule<TextBox>?((uint64_t)v4, v11);
    swift_endAccess();
    uint64_t v16 = MEMORY[0x210550400]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v16)
    {
      uint64_t v17 = (void *)v16;
      specialized LiveEditable.didChangeLiveEditing()();
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for Capsule<TextBox>?);
    CGPathRef v18 = TextBoxCanvasElementView.modelHitTestPath.getter();
    uint64_t v19 = *(void *)((*v10 & *v1) + 0x3A8);
    uint64_t v20 = *(void **)((char *)v1 + v19);
    *(void *)((char *)v1 + v19) = v18;
  }
}

Swift::Void __swiftcall TextBoxCanvasElementView.endLiveEdit(undoable:discard:)(Swift::Bool undoable, Swift::Bool discard)
{
  uint64_t v5 = *(char **)(v2 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x210550400](&v5[direct field offset for TextBoxView.canvasElementView]);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x1E0);
      id v9 = v5;
      LOBYTE(v8) = v8();

      if (v8)
      {
        uint64_t v10 = &v9[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace];
        *((_OWORD *)v10 + 1) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *(_OWORD *)uint64_t v10 = 0u;
        v10[48] = 1;
      }
    }
  }
  specialized CanvasElementView.endLiveEdit(undoable:discard:)(undoable, discard);
}

CGPathRef TextBoxCanvasElementView.modelHitTestPath.getter()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&transform - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)((char *)v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v5)
  {
    id v6 = v5;
    specialized TextBoxView.selectionCoordinateSpace.getter(COERCE_DOUBLE(&transform));
    v13.origin.double x = 0.0;
    v13.origin.double y = 0.0;
    v13.size.CGFloat width = 1.0;
    v13.size.CGFloat height = 1.0;
    CGPathRef v7 = CGPathCreateWithRect(v13, &transform);
  }
  else
  {
    uint64_t v8 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x380);
    swift_beginAccess();
    uint64_t v9 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 16))(v4, v8, v1);
    MEMORY[0x270FA5388](v9);
    *((void *)&transform - 4) = type metadata accessor for TextBox();
    *((void *)&transform - 3) = lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
    *((void *)&transform - 2) = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v14.origin.double x = 0.0;
    v14.origin.double y = 0.0;
    v14.size.CGFloat width = 1.0;
    v14.size.CGFloat height = 1.0;
    return CGPathCreateWithRect(v14, &transform);
  }
  return v7;
}

void TextBoxCanvasElementView.uneditedModelCoordinateSpace.getter(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)((char *)v1 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v10
    && (uint64_t v11 = (long long *)(v10 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace),
        (v11[3] & 1) == 0))
  {
    long long v17 = v11[1];
    long long v16 = v11[2];
    long long v18 = *v11;
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x263F8EED0];
    uint64_t v13 = (uint64_t)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x388);
    swift_beginAccess();
    outlined init with copy of HStack<TupleView<(ModifiedContent<Text, _PaddingLayout>, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<_ConditionalContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, ModifiedContent<<<opaque return type of View.dynamicTypeSize(_:)>>.0, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>>, _FrameLayout>, _PaddingLayout>, _ContentShapeModifier<Rectangle>>, AccessibilityAttachmentModifier>)>>(v13, (uint64_t)v5, &demangling cache variable for type metadata for Capsule<TextBox>?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      CGRect v14 = (char *)v1 + *(void *)((*v12 & *v1) + 0x380);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v14, v6);
      uint64_t v15 = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Capsule<TextBox>?);
    }
    else
    {
      uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    }
    MEMORY[0x270FA5388](v15);
    *(void *)&v19[-2] = type metadata accessor for TextBox();
    *((void *)&v19[-2] + 1) = lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
    *(void *)&v19[-1] = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    long long v18 = v19[0];
    long long v17 = v19[1];
    long long v16 = v19[2];
  }
  *a1 = v18;
  a1[1] = v17;
  a1[2] = v16;
}

void TextBoxCanvasElementView.selectionCoordinateSpace.getter(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)((char *)v1 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v7)
  {
    id v8 = v7;
    specialized TextBoxView.selectionCoordinateSpace.getter(COERCE_DOUBLE(&v17));
    long long v15 = v18;
    long long v16 = v17;
    long long v14 = v19;

    long long v10 = v14;
    long long v9 = v15;
    long long v11 = v16;
  }
  else
  {
    uint64_t v12 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
    swift_beginAccess();
    uint64_t v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v6, v12, v3);
    MEMORY[0x270FA5388](v13);
    *((void *)&v14 - 4) = type metadata accessor for TextBox();
    *((void *)&v14 - 3) = lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
    *((void *)&v14 - 2) = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    long long v11 = v17;
    long long v9 = v18;
    long long v10 = v19;
  }
  *a1 = v11;
  a1[1] = v9;
  a1[2] = v10;
}

id @objc TextBoxCanvasElementView.textBoxViewActiveTextBoxFrame(_:)(void *a1)
{
  return objc_msgSend(a1, sel_frame);
}

id @objc TextBoxCanvasElementView.textBoxViewUpdateViewFrame(_:viewFrame:)(void *a1)
{
  return objc_msgSend(a1, sel_setFrame_);
}

void @objc TextBoxCanvasElementView.textBoxViewUpdateModelFrame(_:modelFrame:)(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, void *a7)
{
  id v12 = a7;
  id v13 = a1;
  specialized CanvasElementView.modelFrame.setter(a2, a3, a4, a5);
}

Swift::OpaquePointer_optional __swiftcall TextBoxCanvasElementView.pasteboardRepresentation()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UTType();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  id v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static UTType.plainText.getter();
  uint64_t v14 = UTType.identifier.getter();
  uint64_t v29 = v15;
  uint64_t v30 = v14;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  long long v16 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v16, v6);
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  long long v17 = (void *)CRAttributedString.attributedString.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v18 = objc_msgSend(v17, sel_string);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  uint64_t v34 = MEMORY[0x263F8D310];
  *(void *)&long long v33 = v19;
  *((void *)&v33 + 1) = v21;
  outlined init with take of Any(&v33, v32);
  unint64_t v22 = v28;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v31 = (void *)v22;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v30, v29, isUniquelyReferenced_nonNull_native);
  uint64_t v24 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::Int v26 = v24;
  result.value._rawValue = v26;
  result.is_nil = v25;
  return result;
}

id @objc TextBoxCanvasElementView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(uint64_t a1)
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82CC8]), sel_initWithView_, a1);
  return v1;
}

void TextBoxCanvasElementView.__ivar_destroyer()
{
}

id TextBoxCanvasElementView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TextBoxCanvasElementView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc TextBoxCanvasElementView.__ivar_destroyer(uint64_t a1)
{
}

uint64_t type metadata accessor for TextBoxCanvasElementView()
{
  uint64_t result = type metadata singleton initialization cache for TextBoxCanvasElementView;
  if (!type metadata singleton initialization cache for TextBoxCanvasElementView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for TextBoxCanvasElementView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for TextBoxCanvasElementView()
{
  return type metadata accessor for TextBoxCanvasElementView();
}

double key path getter for CanvasElement.coordinateSpace : <A>A@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  CanvasElement.coordinateSpace.getter(*(void *)(a2 + a1 - 24), *(void *)(a2 + a1 - 8), v6);
  long long v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

void key path setter for CanvasElement.coordinateSpace : <A>A(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 24);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  long long v6 = a1[1];
  v7[0] = *a1;
  v7[1] = v6;
  id v7[2] = a1[2];
  CanvasElement.coordinateSpace.setter((uint64_t)v7, v4, v5);
}

uint64_t (*specialized TextBoxUndoSnapshot.snapshot.modify())()
{
  return CanvasElementRenderer.backgroundColor.modify;
}

{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

BOOL specialized TextBoxView.isFixedWidth.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - v7;
  long long v9 = (void *)MEMORY[0x210550400](v0 + direct field offset for TextBoxView.canvasElementView, v6);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v9;
  uint64_t v11 = (char *)v9 + *(void *)((*MEMORY[0x263F8EED0] & *v9) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v11, v1);

  uint64_t v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 32))(v8, v4, v1);
  MEMORY[0x270FA5388](v12);
  *(&v15 - 4) = type metadata accessor for TextBox();
  *(&v15 - 3) = lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
  *(&v15 - 2) = (uint64_t)&protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  BOOL v13 = (v15 & 1) == 0;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
  return v13;
}

void specialized TextBoxView.updateSelected()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x210550400](&v0[direct field offset for TextBoxView.canvasElementView]);
  if (v2)
  {
    id v6 = v2;
    if (((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x228))() & 1) == 0)
    {
      uint64_t v3 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView;
      uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
      if (v4)
      {
        objc_msgSend(v4, sel_removeFromSuperview);
        uint64_t v5 = *(void **)&v1[v3];
      }
      else
      {
        uint64_t v5 = 0;
      }
      *(void *)&v1[v3] = 0;

      v1[direct field offset for TextBoxView.hideText] = 0;
      objc_msgSend(v1, sel_setNeedsDisplay);
    }
  }
}

void specialized TextBoxView.updateUI()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CursorRange<CRAttributedString<TextAttributeScope>.Cursor>);
  uint64_t v3 = *(v2 - 1);
  MEMORY[0x270FA5388](v2);
  double v72 = (char *)v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  BOOL v13 = (char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (char *)MEMORY[0x210550400](&v1[direct field offset for TextBoxView.canvasElementView], v11);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v71 = v10;
    long long v16 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (!v16)
    {
      id v70 = *(id *)&v1[direct field offset for TextBoxView.textStorage];
      uint64_t v35 = &v14[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v14) + 0x380)];
      swift_beginAccess();
      uint64_t v69 = v5;
      uint64_t v36 = v71;
      uint64_t v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 16))(v13, v35, v9);
      double v72 = v15;
      uint64_t v38 = v6;
      MEMORY[0x270FA5388](v37);
      v63[-4] = (id)type metadata accessor for TextBox();
      v63[-3] = (id)lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
      v63[-2] = &protocol witness table for TextBox;
      swift_getKeyPath();
      id v39 = v70;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v9);
      CRTextStorage.merge(string:)(v8);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v69);
LABEL_20:
      uint64_t v15 = v72;
LABEL_21:
      objc_msgSend(v1, sel_setNeedsLayout);
      objc_msgSend(v1, sel_setNeedsDisplay);

      return;
    }
    id v68 = v2;
    uint64_t v69 = v3;
    id v70 = v16;
    id v17 = objc_msgSend(v1, sel_undoManager);
    if (v17 && (id v18 = v17, v19 = objc_msgSend(v17, sel_isUndoing), v18, (v19 & 1) != 0)
      || (id v20 = objc_msgSend(v1, sel_undoManager)) != 0
      && (uint64_t v21 = v20, v22 = objc_msgSend(v20, sel_isRedoing), v21, (v22 & 1) != 0))
    {
      id v68 = *(id *)&v1[direct field offset for TextBoxView.textStorage];
      uint64_t v23 = *(void *)((*MEMORY[0x263F8EED0] & *(void *)v15) + 0x380);
      double v72 = v15;
      uint64_t v24 = &v15[v23];
      swift_beginAccess();
      uint64_t v69 = v5;
      uint64_t v25 = v71;
      uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 16))(v13, v24, v9);
      uint64_t v27 = v6;
      MEMORY[0x270FA5388](v26);
      v63[-4] = (id)type metadata accessor for TextBox();
      v63[-3] = (id)lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
      v63[-2] = &protocol witness table for TextBox;
      swift_getKeyPath();
      id v28 = v68;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v9);
      uint64_t v29 = CRTextStorage.merge(string:)(v8);
      uint64_t v31 = v30;
      char v33 = v32;

      (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v69);
      if (v33)
      {
      }
      else
      {
        id v34 = v70;
        objc_msgSend(v70, sel_setSelectedRange_, v29, v31);
      }
      goto LABEL_20;
    }
    specialized TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(0, &demangling cache variable for type metadata for Capsule<TextBox>?, (uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>, (uint64_t)partial apply for specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:));
    uint64_t v67 = direct field offset for TextBoxView.textStorage;
    uint64_t v40 = *(void *)&v1[direct field offset for TextBoxView.textStorage]
        + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
    swift_beginAccess();
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v66 = v6 + 16;
    unint64_t v65 = v41;
    v41(v8, v40, v5);
    id v42 = v70;
    uint64_t v43 = (char *)objc_msgSend(v70, sel_selectedRange);
    long long v44 = (char *)objc_msgSend(v42, sel_selectedRange);
    BOOL v46 = __OFADD__(v44, v45);
    uint64_t v47 = &v44[v45];
    if (v46)
    {
      __break(1u);
    }
    else if ((uint64_t)v47 >= (uint64_t)v43)
    {
      CRAttributedString.cursor(range:)();
      unint64_t v48 = *(void (**)(char *, uint64_t))(v6 + 8);
      v63[1] = (id)(v6 + 8);
      long long v64 = v48;
      v48(v8, v5);
      v63[0] = *(id *)&v1[v67];
      CGFloat v49 = &v15[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v15) + 0x380)];
      swift_beginAccess();
      uint64_t v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 16))(v13, v49, v9);
      MEMORY[0x270FA5388](v50);
      v63[-4] = (id)type metadata accessor for TextBox();
      v63[-3] = (id)lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
      v63[-2] = &protocol witness table for TextBox;
      swift_getKeyPath();
      id v51 = v63[0];
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v13, v9);
      CRTextStorage.merge(string:)(v8);

      CGFloat v52 = v64;
      v64(v8, v5);
      uint64_t v53 = *(void *)&v1[v67] + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
      swift_beginAccess();
      v65(v8, v53, v5);
      uint64_t v54 = CRAttributedString.range(of:)();
      uint64_t v56 = v55;
      char v58 = v57;
      v52(v8, v5);
      uint64_t v59 = v69;
      if (v58) {
        goto LABEL_15;
      }
      if (!__OFSUB__(v56, v54))
      {
        objc_msgSend(v70, sel_setSelectedRange_, v54, v56 - v54);
LABEL_15:
        (*(void (**)(char *, id))(v59 + 8))(v72, v68);
        if (*(void *)&v1[direct field offset for TextBoxView.currentUndoAction])
        {
          swift_retain();
          uint64_t v60 = specialized TextBoxUndoSnapshot.snapshot.modify();
          uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v61, 1, v9);
          if (!v62)
          {
            MEMORY[0x270FA5388](v62);
            v63[-2] = v1;
            Capsule.callAsFunction<A>(_:)();
          }
          ((void (*)(char *, void))v60)(v73, 0);

          swift_release();
        }
        else
        {
        }
        goto LABEL_21;
      }
LABEL_26:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_26;
  }
}

{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  id v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  id v42;
  char *v43;
  char *v44;
  uint64_t v45;
  BOOL v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  id v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t (*v60)();
  uint64_t v61;
  uint64_t v62;
  id v63[2];
  void (*v64)(char *, uint64_t);
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  char *v72;
  char v73[32];

  uint64_t v1 = v0;
  uint64_t v2 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CursorRange<CRAttributedString<TextAttributeScope>.Cursor>);
  uint64_t v3 = *(v2 - 1);
  MEMORY[0x270FA5388](v2);
  double v72 = (char *)v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  BOOL v13 = (char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (char *)MEMORY[0x210550400](&v1[direct field offset for TextBoxView.canvasElementView], v11);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v71 = v10;
    long long v16 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (!v16)
    {
      id v70 = *(id *)&v1[direct field offset for TextBoxView.textStorage];
      uint64_t v35 = &v14[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v14) + 0x380)];
      swift_beginAccess();
      uint64_t v69 = v5;
      uint64_t v36 = v71;
      uint64_t v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 16))(v13, v35, v9);
      double v72 = v15;
      uint64_t v38 = v6;
      MEMORY[0x270FA5388](v37);
      v63[-4] = (id)type metadata accessor for Shape();
      v63[-3] = (id)lazy protocol witness table accessor for type TextBox and conformance TextBox((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
      v63[-2] = &protocol witness table for Shape;
      swift_getKeyPath();
      id v39 = v70;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v9);
      CRTextStorage.merge(string:)(v8);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v69);
LABEL_20:
      uint64_t v15 = v72;
LABEL_21:
      objc_msgSend(v1, sel_setNeedsLayout);
      objc_msgSend(v1, sel_setNeedsDisplay);

      return;
    }
    id v68 = v2;
    uint64_t v69 = v3;
    id v70 = v16;
    id v17 = objc_msgSend(v1, sel_undoManager);
    if (v17 && (id v18 = v17, v19 = objc_msgSend(v17, sel_isUndoing), v18, (v19 & 1) != 0)
      || (id v20 = objc_msgSend(v1, sel_undoManager)) != 0
      && (uint64_t v21 = v20, v22 = objc_msgSend(v20, sel_isRedoing), v21, (v22 & 1) != 0))
    {
      id v68 = *(id *)&v1[direct field offset for TextBoxView.textStorage];
      uint64_t v23 = *(void *)((*MEMORY[0x263F8EED0] & *(void *)v15) + 0x380);
      double v72 = v15;
      uint64_t v24 = &v15[v23];
      swift_beginAccess();
      uint64_t v69 = v5;
      uint64_t v25 = v71;
      uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 16))(v13, v24, v9);
      uint64_t v27 = v6;
      MEMORY[0x270FA5388](v26);
      v63[-4] = (id)type metadata accessor for Shape();
      v63[-3] = (id)lazy protocol witness table accessor for type TextBox and conformance TextBox((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
      v63[-2] = &protocol witness table for Shape;
      swift_getKeyPath();
      id v28 = v68;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v9);
      uint64_t v29 = CRTextStorage.merge(string:)(v8);
      uint64_t v31 = v30;
      char v33 = v32;

      (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v69);
      if (v33)
      {
      }
      else
      {
        id v34 = v70;
        objc_msgSend(v70, sel_setSelectedRange_, v29, v31);
      }
      goto LABEL_20;
    }
    specialized TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(0, &demangling cache variable for type metadata for Capsule<Shape>?, &demangling cache variable for type metadata for Capsule<Shape>, (uint64_t)partial apply for specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:));
    uint64_t v67 = direct field offset for TextBoxView.textStorage;
    uint64_t v40 = *(void *)&v1[direct field offset for TextBoxView.textStorage]
        + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
    swift_beginAccess();
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v66 = v6 + 16;
    unint64_t v65 = v41;
    v41(v8, v40, v5);
    id v42 = v70;
    uint64_t v43 = (char *)objc_msgSend(v70, sel_selectedRange);
    long long v44 = (char *)objc_msgSend(v42, sel_selectedRange);
    BOOL v46 = __OFADD__(v44, v45);
    uint64_t v47 = &v44[v45];
    if (v46)
    {
      __break(1u);
    }
    else if ((uint64_t)v47 >= (uint64_t)v43)
    {
      CRAttributedString.cursor(range:)();
      unint64_t v48 = *(void (**)(char *, uint64_t))(v6 + 8);
      v63[1] = (id)(v6 + 8);
      long long v64 = v48;
      v48(v8, v5);
      v63[0] = *(id *)&v1[v67];
      CGFloat v49 = &v15[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v15) + 0x380)];
      swift_beginAccess();
      uint64_t v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 16))(v13, v49, v9);
      MEMORY[0x270FA5388](v50);
      v63[-4] = (id)type metadata accessor for Shape();
      v63[-3] = (id)lazy protocol witness table accessor for type TextBox and conformance TextBox((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
      v63[-2] = &protocol witness table for Shape;
      swift_getKeyPath();
      id v51 = v63[0];
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v13, v9);
      CRTextStorage.merge(string:)(v8);

      CGFloat v52 = v64;
      v64(v8, v5);
      uint64_t v53 = *(void *)&v1[v67] + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
      swift_beginAccess();
      v65(v8, v53, v5);
      uint64_t v54 = CRAttributedString.range(of:)();
      uint64_t v56 = v55;
      char v58 = v57;
      v52(v8, v5);
      uint64_t v59 = v69;
      if (v58) {
        goto LABEL_15;
      }
      if (!__OFSUB__(v56, v54))
      {
        objc_msgSend(v70, sel_setSelectedRange_, v54, v56 - v54);
LABEL_15:
        (*(void (**)(char *, id))(v59 + 8))(v72, v68);
        if (*(void *)&v1[direct field offset for TextBoxView.currentUndoAction])
        {
          swift_retain();
          uint64_t v60 = specialized TextBoxUndoSnapshot.snapshot.modify();
          uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v61, 1, v9);
          if (!v62)
          {
            MEMORY[0x270FA5388](v62);
            v63[-2] = v1;
            Capsule.callAsFunction<A>(_:)();
          }
          ((void (*)(char *, void))v60)(v73, 0);

          swift_release();
        }
        else
        {
        }
        goto LABEL_21;
      }
LABEL_26:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_26;
  }
}

void specialized TextBoxView.beginLiveEdit()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v0 + direct field offset for TextBoxView.delegate;
  if (MEMORY[0x210550400](v7, v4))
  {
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = MEMORY[0x210550400](v1 + direct field offset for TextBoxView.canvasElementView);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      uint64_t ObjectType = swift_getObjectType();
      CGFloat v12 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v1, ObjectType, v8);
      CGFloat v14 = v13;
      CGFloat v16 = v15;
      CGFloat v18 = v17;
      uint64_t v19 = MEMORY[0x210550400]((char *)v10 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
      if (v19)
      {
        id v20 = (void *)v19;
        AnyCanvasElementView.paperBoundsTransform()(&v53);

        long long v22 = *(_OWORD *)&v53.a;
        long long v21 = *(_OWORD *)&v53.c;
        long long v23 = *(_OWORD *)&v53.tx;
      }
      else
      {
        long long v21 = xmmword_20C8356C0;
        long long v22 = xmmword_20C835600;
        long long v23 = 0uLL;
      }
      *(_OWORD *)&t1.CGFloat a = v22;
      *(_OWORD *)&t1.CGFloat c = v21;
      *(_OWORD *)&t1.tdouble x = v23;
      CGAffineTransformInvert(&t2, &t1);
      CGAffineTransform t1 = t2;
      v55.origin.double x = v12;
      v55.origin.double y = v14;
      v55.size.double width = v16;
      v55.size.double height = v18;
      CGRect v56 = CGRectApplyAffineTransform(v55, &t1);
      double x = v56.origin.x;
      double y = v56.origin.y;
      double width = v56.size.width;
      double height = v56.size.height;
      id v28 = (char *)v10 + *(void *)((*MEMORY[0x263F8EED0] & *v10) + 0x380);
      swift_beginAccess();
      uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v6, v28, v2);
      MEMORY[0x270FA5388](v29);
      *((void *)&v44 - 4) = type metadata accessor for TextBox();
      *((void *)&v44 - 3) = lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
      *((void *)&v44 - 2) = &protocol witness table for TextBox;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      CGFloat a = t1.a;
      *(double *)&long long v49 = x - width * 0.0;
      *(double *)&long long v48 = y - height * 0.0;
      v57.origin.double x = x;
      v57.origin.double y = y;
      v57.size.double width = width;
      CGFloat v46 = width;
      v57.size.double height = height;
      CGFloat v47 = height;
      double MidX = CGRectGetMidX(v57);
      v58.origin.double x = x;
      v58.origin.double y = y;
      v58.size.double width = width;
      v58.size.double height = height;
      double MidY = CGRectGetMidY(v58);
      CGAffineTransformMakeRotation(&t1, a);
      long long v45 = *(_OWORD *)&t1.a;
      long long v44 = *(_OWORD *)&t1.c;
      long long v33 = *(_OWORD *)&t1.tx;
      CGAffineTransformMakeTranslation(&t1, -MidX, -MidY);
      long long v34 = *(_OWORD *)&t1.a;
      CGFloat c = t1.c;
      CGFloat d = t1.d;
      long long v37 = *(_OWORD *)&t1.tx;
      *(_OWORD *)&t2.CGFloat a = v45;
      *(_OWORD *)&t2.CGFloat c = v44;
      *(_OWORD *)&t2.tdouble x = v33;
      CGAffineTransformConcat(&v50, &t1, &t2);
      long long v45 = *(_OWORD *)&v50.a;
      long long v44 = *(_OWORD *)&v50.c;
      tdouble x = v50.tx;
      tdouble y = v50.ty;
      *(_OWORD *)&t1.CGFloat a = v34;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      *(_OWORD *)&t1.tdouble x = v37;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.CGFloat a = v45;
      *(_OWORD *)&t1.CGFloat c = v44;
      t1.tdouble x = tx;
      t1.tdouble y = ty;
      CGAffineTransformConcat(&v50, &t1, &t2);
      t1.CGFloat a = v46;
      t1.CGFloat b = 0.0;
      t1.CGFloat c = 0.0;
      t1.CGFloat d = v47;
      *(void *)&t1.tdouble x = v49;
      *(void *)&t1.tdouble y = v48;
      CGAffineTransform t2 = v50;
      CGAffineTransformConcat(&v50, &t1, &t2);
      long long v49 = *(_OWORD *)&v50.a;
      long long v48 = *(_OWORD *)&v50.c;
      CGFloat v40 = v50.tx;
      CGFloat v41 = v50.ty;
      swift_unknownObjectRelease();

      uint64_t v42 = v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace;
      long long v43 = v48;
      *(_OWORD *)uint64_t v42 = v49;
      *(_OWORD *)(v42 + 16) = v43;
      *(CGFloat *)(v42 + 32) = v40;
      *(CGFloat *)(v42 + 40) = v41;
      *(unsigned char *)(v42 + 48) = 0;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t ObjectType;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  uint64_t v19;
  void *v20;
  long long v21;
  long long v22;
  long long v23;
  double x;
  double y;
  double width;
  double height;
  char *v28;
  uint64_t v29;
  CGFloat a;
  double MidX;
  double MidY;
  long long v33;
  long long v34;
  CGFloat c;
  CGFloat d;
  long long v37;
  CGFloat tx;
  CGFloat ty;
  CGFloat v40;
  CGFloat v41;
  uint64_t v42;
  long long v43;
  long long v44;
  long long v45;
  CGFloat v46;
  CGFloat v47;
  long long v48;
  long long v49;
  CGAffineTransform v50;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v53;
  uint64_t vars8;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v0 + direct field offset for TextBoxView.delegate;
  if (MEMORY[0x210550400](v7, v4))
  {
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = MEMORY[0x210550400](v1 + direct field offset for TextBoxView.canvasElementView);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      uint64_t ObjectType = swift_getObjectType();
      CGFloat v12 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v1, ObjectType, v8);
      CGFloat v14 = v13;
      CGFloat v16 = v15;
      CGFloat v18 = v17;
      uint64_t v19 = MEMORY[0x210550400]((char *)v10 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
      if (v19)
      {
        id v20 = (void *)v19;
        AnyCanvasElementView.paperBoundsTransform()(&v53);

        long long v22 = *(_OWORD *)&v53.a;
        long long v21 = *(_OWORD *)&v53.c;
        long long v23 = *(_OWORD *)&v53.tx;
      }
      else
      {
        long long v21 = xmmword_20C8356C0;
        long long v22 = xmmword_20C835600;
        long long v23 = 0uLL;
      }
      *(_OWORD *)&t1.CGFloat a = v22;
      *(_OWORD *)&t1.CGFloat c = v21;
      *(_OWORD *)&t1.tdouble x = v23;
      CGAffineTransformInvert(&t2, &t1);
      CGAffineTransform t1 = t2;
      v55.origin.double x = v12;
      v55.origin.double y = v14;
      v55.size.double width = v16;
      v55.size.double height = v18;
      CGRect v56 = CGRectApplyAffineTransform(v55, &t1);
      double x = v56.origin.x;
      double y = v56.origin.y;
      double width = v56.size.width;
      double height = v56.size.height;
      id v28 = (char *)v10 + *(void *)((*MEMORY[0x263F8EED0] & *v10) + 0x380);
      swift_beginAccess();
      uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v6, v28, v2);
      MEMORY[0x270FA5388](v29);
      *((void *)&v44 - 4) = type metadata accessor for Shape();
      *((void *)&v44 - 3) = lazy protocol witness table accessor for type TextBox and conformance TextBox((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
      *((void *)&v44 - 2) = &protocol witness table for Shape;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      CGFloat a = t1.a;
      *(double *)&long long v49 = x - width * 0.0;
      *(double *)&long long v48 = y - height * 0.0;
      v57.origin.double x = x;
      v57.origin.double y = y;
      v57.size.double width = width;
      CGFloat v46 = width;
      v57.size.double height = height;
      CGFloat v47 = height;
      double MidX = CGRectGetMidX(v57);
      v58.origin.double x = x;
      v58.origin.double y = y;
      v58.size.double width = width;
      v58.size.double height = height;
      double MidY = CGRectGetMidY(v58);
      CGAffineTransformMakeRotation(&t1, a);
      long long v45 = *(_OWORD *)&t1.a;
      long long v44 = *(_OWORD *)&t1.c;
      long long v33 = *(_OWORD *)&t1.tx;
      CGAffineTransformMakeTranslation(&t1, -MidX, -MidY);
      long long v34 = *(_OWORD *)&t1.a;
      CGFloat c = t1.c;
      CGFloat d = t1.d;
      long long v37 = *(_OWORD *)&t1.tx;
      *(_OWORD *)&t2.CGFloat a = v45;
      *(_OWORD *)&t2.CGFloat c = v44;
      *(_OWORD *)&t2.tdouble x = v33;
      CGAffineTransformConcat(&v50, &t1, &t2);
      long long v45 = *(_OWORD *)&v50.a;
      long long v44 = *(_OWORD *)&v50.c;
      tdouble x = v50.tx;
      tdouble y = v50.ty;
      *(_OWORD *)&t1.CGFloat a = v34;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      *(_OWORD *)&t1.tdouble x = v37;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.CGFloat a = v45;
      *(_OWORD *)&t1.CGFloat c = v44;
      t1.tdouble x = tx;
      t1.tdouble y = ty;
      CGAffineTransformConcat(&v50, &t1, &t2);
      t1.CGFloat a = v46;
      t1.CGFloat b = 0.0;
      t1.CGFloat c = 0.0;
      t1.CGFloat d = v47;
      *(void *)&t1.tdouble x = v49;
      *(void *)&t1.tdouble y = v48;
      CGAffineTransform t2 = v50;
      CGAffineTransformConcat(&v50, &t1, &t2);
      long long v49 = *(_OWORD *)&v50.a;
      long long v48 = *(_OWORD *)&v50.c;
      CGFloat v40 = v50.tx;
      CGFloat v41 = v50.ty;
      swift_unknownObjectRelease();

      uint64_t v42 = v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace;
      long long v43 = v48;
      *(_OWORD *)uint64_t v42 = v49;
      *(_OWORD *)(v42 + 16) = v43;
      *(CGFloat *)(v42 + 32) = v40;
      *(CGFloat *)(v42 + 40) = v41;
      *(unsigned char *)(v42 + 48) = 0;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void specialized TextBoxView.selectionCoordinateSpace.getter(double a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<TextBox>);
  *(void *)&long long v142 = *(void *)(v3 - 8);
  double v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = &v1[direct field offset for TextBoxView.canvasElementView];
  uint64_t v8 = MEMORY[0x210550400](&v1[direct field offset for TextBoxView.canvasElementView], v4);
  if (!v8)
  {
    long long v12 = xmmword_20C8356C0;
    long long v13 = xmmword_20C835600;
    long long v14 = 0uLL;
LABEL_56:
    **(_OWORD **)&a1 = v13;
    *(_OWORD *)(*(void *)&a1 + 16) = v12;
    *(_OWORD *)(*(void *)&a1 + 32) = v14;
    return;
  }
  uint64_t v9 = (void *)v8;
  uint64_t v10 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  double v134 = v1;
  if (v10)
  {
    id v11 = v10;
  }
  else
  {
    objc_msgSend(v1, sel_bounds);
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82D60]), sel_initWithFrame_textContainer_, *(void *)&v1[direct field offset for TextBoxView.textContainer], v15, v16, v17, v18);
    uint64_t v10 = 0;
  }
  CGFloat v136 = a1;
  uint64_t v19 = one-time initialization token for textBoxTextContainerInset;
  id v20 = v10;
  if (v19 != -1) {
    swift_once();
  }
  id v21 = objc_msgSend(v11, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_26ACC4578, unk_26ACC4580);
  long long v22 = (void *)MEMORY[0x263F8EED0];
  long long v23 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v9) + 0x138);
  uint64_t v24 = ((uint64_t (*)(id))v23)(v21);
  double v26 = v25;
  char v27 = (*(uint64_t (**)(uint64_t))((*v22 & *v9) + 0x110))(v24);
  id v135 = v11;
  uint64_t v131 = v7;
  if ((v27 & 1) == 0)
  {
    long long v37 = (void *)MEMORY[0x210550400](v7);
    if (v37 && (uint64_t v38 = v37, v39 = (void *)(*(uint64_t (**)(void))((*v22 & *v37) + 0x88))(), v38, v39))
    {
      CGFloat v40 = (void *)(*(uint64_t (**)(void))((*v22 & *v39) + 0x2F8))();
      CGFloat v41 = (*(double (**)(void))((*v22 & *v40) + 0x138))();
      CGFloat v43 = v42;
      CGFloat v45 = v44;
      CGFloat v47 = v46;

      v152.origin.double x = v41;
      v152.origin.double y = v43;
      v152.size.double width = v45;
      v152.size.double height = v47;
      double Width = CGRectGetWidth(v152);

      double v49 = Width + -48.0;
    }
    else
    {
      double v49 = 1.79769313e308;
    }
    objc_msgSend(v11, sel_sizeThatFits_, v49, 1.79769313e308);
    double v26 = v50;
    double Height = v51;
    goto LABEL_21;
  }
  id v28 = objc_msgSend(v11, sel_sizeThatFits_, v26, 1.79769313e308);
  double Height = v29;
  if (((*(uint64_t (**)(id))((*v22 & *v9) + 0x120))(v28) & 1) == 0) {
    goto LABEL_21;
  }
  v150.origin.double x = v23();
  if (Height < CGRectGetHeight(v150))
  {
LABEL_15:
    v151.origin.double x = ((double (*)(uint64_t))v23)(v31);
    double Height = CGRectGetHeight(v151);
    goto LABEL_21;
  }
  id v32 = objc_msgSend(v11, sel_text);
  if (v32)
  {
    long long v33 = v32;
    *(void *)&long long v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    uint64_t v31 = swift_bridgeObjectRelease();
    uint64_t v36 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000) == 0) {
      uint64_t v36 = v141 & 0xFFFFFFFFFFFFLL;
    }
    if (!v36) {
      goto LABEL_15;
    }
LABEL_21:
    CGFloat v52 = (char *)v9 + *(void *)((*v22 & *v9) + 0x380);
    swift_beginAccess();
    uint64_t v53 = v142;
    uint64_t v54 = *(uint64_t (**)(char *, char *, uint64_t))(v142 + 16);
    CGRect v55 = v52;
    *(void *)&long long v140 = v142 + 16;
    *(void *)&long long v141 = v54;
    uint64_t v56 = v54(v6, v52, v3);
    MEMORY[0x270FA5388](v56);
    *(void *)&long long v138 = type metadata accessor for TextBox();
    *(&v128 - 4) = (id)v138;
    CGRect v57 = (void *)lazy protocol witness table accessor for type TextBox and conformance TextBox(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (void (*)(uint64_t))type metadata accessor for TextBox);
    *(&v128 - 3) = v57;
    *(&v128 - 2) = &protocol witness table for TextBox;
    swift_getKeyPath();
    *(void *)&long long v139 = v57;
    Capsule<>.subscript.getter();
    swift_release();
    CGRect v58 = *(void (**)(char *, uint64_t))(v53 + 8);
    uint64_t v59 = v6;
    uint64_t v60 = v3;
    *(void *)&long long v142 = v53 + 8;
    CGRect v137 = v58;
    v58(v6, v3);
    double a = v147.a;
    double b = v147.b;
    CGFloat c = v147.c;
    CGFloat d = v147.d;
    if (vabdd_f64(v147.c, v26) < 0.1 && vabdd_f64(v147.d, Height) < 0.1)
    {
      double v26 = v147.c;
      double Height = v147.d;
      a1 = v136;
      unint64_t v65 = v52;
      uint64_t v66 = v6;
LABEL_34:
      double v77 = (uint64_t (*)(char *, char *, uint64_t))v141;
LABEL_55:
      CGFloat v136 = v26;
      *(double *)&long long v140 = Height;
      uint64_t v112 = v77(v66, v65, v60);
      MEMORY[0x270FA5388](v112);
      uint64_t v113 = (void *)v139;
      *(&v128 - 4) = (id)v138;
      *(&v128 - 3) = v113;
      *(&v128 - 2) = &protocol witness table for TextBox;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v137(v66, v60);
      CGFloat v114 = v146;
      *(double *)&long long v142 = a - v26 * 0.0;
      *(double *)&long long v141 = b - Height * 0.0;
      v160.origin.double x = a;
      v160.origin.double y = b;
      v160.size.double width = v26;
      v160.size.double height = Height;
      double MidX = CGRectGetMidX(v160);
      v161.origin.double x = a;
      v161.origin.double y = b;
      v161.size.double width = v26;
      v161.size.double height = Height;
      double MidY = CGRectGetMidY(v161);
      CGAffineTransformMakeRotation(&v145, v114);
      long long v138 = *(_OWORD *)&v145.c;
      long long v139 = *(_OWORD *)&v145.a;
      CGFloat v117 = -MidY;
      tdouble x = v145.tx;
      tdouble y = v145.ty;
      CGAffineTransformMakeTranslation(&v145, -MidX, v117);
      CGFloat v120 = v145.a;
      CGFloat v121 = v145.b;
      CGFloat v123 = v145.c;
      CGFloat v122 = v145.d;
      CGFloat v124 = v145.tx;
      CGFloat v125 = v145.ty;
      *(_OWORD *)&v144.double a = v139;
      *(_OWORD *)&v144.CGFloat c = v138;
      v144.tdouble x = tx;
      v144.tdouble y = ty;
      CGAffineTransformConcat(&v143, &v145, &v144);
      long long v138 = *(_OWORD *)&v143.c;
      long long v139 = *(_OWORD *)&v143.a;
      CGFloat v126 = v143.tx;
      CGFloat v127 = v143.ty;
      v145.double a = v120;
      v145.double b = v121;
      v145.CGFloat c = v123;
      v145.CGFloat d = v122;
      v145.tdouble x = v124;
      v145.tdouble y = v125;
      CGAffineTransformInvert(&v144, &v145);
      *(_OWORD *)&v145.double a = v139;
      *(_OWORD *)&v145.CGFloat c = v138;
      v145.tdouble x = v126;
      v145.tdouble y = v127;
      CGAffineTransformConcat(&v143, &v145, &v144);
      v145.double a = v136;
      v145.double b = 0.0;
      v145.CGFloat c = 0.0;
      *(void *)&v145.CGFloat d = v140;
      *(void *)&v145.tdouble x = v142;
      *(void *)&v145.tdouble y = v141;
      CGAffineTransform v144 = v143;
      CGAffineTransformConcat(&v143, &v145, &v144);
      long long v141 = *(_OWORD *)&v143.c;
      long long v142 = *(_OWORD *)&v143.a;
      long long v140 = *(_OWORD *)&v143.tx;

      long long v14 = v140;
      long long v12 = v141;
      long long v13 = v142;
      goto LABEL_56;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C835790;
    id v68 = v134;
    *(void *)(inited + 32) = v134;
    *(void *)&v147.double a = inited;
    specialized Array._endMutation()();
    unint64_t v69 = *(void *)&v147.a;
    id v70 = v68;
    Array<A>.displayAttributes.getter(v69, (uint64_t *)&v147);
    swift_bridgeObjectRelease();
    CGFloat v133 = v147.tx;
    double v134 = v55;
    CGFloat v129 = v147.ty;
    int v130 = v148;
    uint64_t v71 = v149;
    double v72 = v55;
    uint64_t v66 = v59;
    uint64_t v73 = ((uint64_t (*)(char *, char *, uint64_t))v141)(v59, v72, v3);
    MEMORY[0x270FA5388](v73);
    double v74 = (void *)v139;
    *(&v128 - 4) = (id)v138;
    *(&v128 - 3) = v74;
    *(&v128 - 2) = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    uint64_t v132 = v3;
    v137(v59, v3);
    if (!*(void *)&v147.a)
    {
      v153.origin.double x = a;
      v153.origin.double y = b;
      v153.size.double width = c;
      v153.size.double height = d;
      double v92 = CGRectGetWidth(v153);
      if (v26 >= v92) {
        double v26 = v92;
      }
      v154.origin.double x = a;
      v154.origin.double y = b;
      v154.size.double width = c;
      v154.size.double height = d;
      double v93 = CGRectGetHeight(v154);
      if (Height >= v93) {
        double Height = v93;
      }
      v155.origin.double x = a;
      v155.origin.double y = b;
      v155.size.double width = c;
      v155.size.double height = d;
      double v94 = CGRectGetMidX(v155);
      v156.origin.double x = a;
      v156.origin.double y = b;
      v156.size.double width = c;
      v156.size.double height = d;
      double v95 = CGRectGetMidY(v156);

      swift_bridgeObjectRelease();
      double a = v94 - v26 * 0.5;
      double b = v95 - Height * 0.5;
      a1 = v136;
      unint64_t v65 = v134;
      uint64_t v60 = v132;
      goto LABEL_34;
    }
    id v128 = v71;
    uint64_t v75 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling;
    if (v70[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling] == 1)
    {
      double v76 = (char *)MEMORY[0x210550400](v131);
      double v77 = (uint64_t (*)(char *, char *, uint64_t))v141;
      if (v76)
      {
        double v78 = v76;
        objc_msgSend(v76, sel_frame);
        CGFloat v80 = v79;
        CGFloat v82 = v81;
        CGFloat v84 = v83;
        CGFloat v86 = v85;
        uint64_t v87 = MEMORY[0x210550400](&v78[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement]);
        if (v87)
        {
          double v88 = (void *)v87;
          AnyCanvasElementView.paperBoundsTransform()(&v147);

          long long v90 = *(_OWORD *)&v147.a;
          long long v89 = *(_OWORD *)&v147.c;
          long long v91 = *(_OWORD *)&v147.tx;
        }
        else
        {
          long long v89 = xmmword_20C8356C0;
          long long v90 = xmmword_20C835600;
          long long v91 = 0uLL;
        }
        *(_OWORD *)&v145.double a = v90;
        *(_OWORD *)&v145.CGFloat c = v89;
        *(_OWORD *)&v145.tdouble x = v91;
        CGAffineTransformInvert(&v144, &v145);
        CGAffineTransform v145 = v144;
        v157.origin.double x = v80;
        v157.origin.double y = v82;
        v157.size.double width = v84;
        v157.size.double height = v86;
        CGRect v158 = CGRectApplyAffineTransform(v157, &v145);
        double a = v158.origin.x;
        double b = v158.origin.y;
        CGFloat c = v158.size.width;
        CGFloat d = v158.size.height;
      }
      else
      {
        double a = 0.0;
        double b = 0.0;
        CGFloat c = 0.0;
        CGFloat d = 0.0;
      }
      if (v70[v75] != 1)
      {
        BOOL v96 = 0;
        a1 = v136;
        CGFloat v97 = v133;
        id v98 = v128;
        goto LABEL_44;
      }
      id v99 = objc_msgSend(v70, sel_traitCollection);
      id v100 = objc_msgSend(v99, sel_layoutDirection);

      if (v70[v75] == 1)
      {
        id v101 = objc_msgSend(v70, sel_traitCollection);
        id v102 = objc_msgSend(v101, sel_layoutDirection);

        BOOL v96 = v102 == (id)1;
        a1 = v136;
        id v98 = v128;
        if (v100)
        {
          double v77 = (uint64_t (*)(char *, char *, uint64_t))v141;
          CGFloat v97 = v133;
          goto LABEL_44;
        }

        swift_bridgeObjectRelease();
        double v77 = (uint64_t (*)(char *, char *, uint64_t))v141;
      }
      else
      {
        a1 = v136;
        id v98 = v128;
        CGFloat v104 = v129;
        int v103 = v130;
        if (v100)
        {
          BOOL v96 = 0;
          CGFloat v97 = v133;
          goto LABEL_45;
        }

        swift_bridgeObjectRelease();
      }
      unint64_t v65 = v134;
LABEL_54:
      uint64_t v60 = v132;
      goto LABEL_55;
    }
    BOOL v96 = 0;
    a1 = v136;
    CGFloat v97 = v133;
    id v98 = v128;
    double v77 = (uint64_t (*)(char *, char *, uint64_t))v141;
LABEL_44:
    int v103 = v130;
    CGFloat v104 = v129;
LABEL_45:
    if (v104 == 0.0) {
      char v105 = v103;
    }
    else {
      char v105 = 1;
    }
    if (v105)
    {
      double v106 = a;
      double v107 = b;
      CGFloat v108 = c;
      CGFloat v109 = d;
      if ((v96 | (*(void *)&v104 == 2) & ~v103) == 1)
      {
        double v110 = CGRectGetWidth(*(CGRect *)&v106);

        swift_bridgeObjectRelease();
        double a = a - (v26 - v110);
      }
      else
      {
        CGFloat v111 = CGRectGetMidX(*(CGRect *)&v106) + v26 * -0.5;
        v159.origin.double x = a;
        v159.origin.double y = b;
        v159.size.double width = c;
        v159.size.double height = d;
        double b = CGRectGetMinY(v159);

        swift_bridgeObjectRelease();
        double a = v111;
      }
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    unint64_t v65 = v134;
    goto LABEL_54;
  }
  __break(1u);
}

void specialized TextBoxView.selectionCoordinateSpace.getter(long long *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = &v1[direct field offset for TextBoxView.canvasElementView];
  uint64_t v9 = MEMORY[0x210550400](&v1[direct field offset for TextBoxView.canvasElementView], v5);
  if (!v9)
  {
    long long v13 = xmmword_20C8356C0;
    long long v14 = xmmword_20C835600;
    long long v15 = 0uLL;
LABEL_61:
    *a1 = v14;
    a1[1] = v13;
    a1[2] = v15;
    return;
  }
  uint64_t v10 = (void *)v9;
  id v11 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  CGFloat v143 = *(double *)&v1;
  if (v11)
  {
    id v12 = v11;
  }
  else
  {
    objc_msgSend(v1, sel_bounds);
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82D60]), sel_initWithFrame_textContainer_, *(void *)&v1[direct field offset for TextBoxView.textContainer], v16, v17, v18, v19);
    id v11 = 0;
  }
  long long v142 = v8;
  *(void *)&long long v152 = v7;
  *(void *)&long long v153 = v3;
  CGAffineTransform v144 = a1;
  uint64_t v20 = one-time initialization token for textBoxTextContainerInset;
  id v21 = v11;
  if (v20 != -1) {
    swift_once();
  }
  id v22 = objc_msgSend(v12, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_26ACC4578, unk_26ACC4580);
  long long v23 = (void *)MEMORY[0x263F8EED0];
  uint64_t v24 = *(double (**)(id))((*MEMORY[0x263F8EED0] & *v10) + 0x138);
  *(void *)&long long v150 = (*MEMORY[0x263F8EED0] & *v10) + 312;
  double v151 = *(double *)&v24;
  v24(v22);
  double v26 = v25;
  uint64_t v27 = *(void *)((*v23 & *v10) + 0x380);
  CGAffineTransform v145 = v10;
  id v28 = (char *)v10 + v27;
  swift_beginAccess();
  uint64_t v30 = (double (*)(void))(v4 + 16);
  double v29 = *(uint64_t (**)(uint64_t, char *, void))(v4 + 16);
  uint64_t v31 = v152;
  uint64_t v32 = v153;
  v29(v152, v28, v153);
  char v33 = specialized Capsule<>.isFixedWidth.getter();
  unint64_t v34 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v34(v31, v32);
  *(void *)&long long v154 = v4 + 8;
  double v146 = v34;
  id v147 = v12;
  if ((v33 & 1) == 0)
  {
    CGFloat v41 = v29;
    CGFloat v40 = (double (*)(void))(v4 + 16);
    double v51 = (void *)MEMORY[0x210550400](v142);
    if (v51)
    {
      CGFloat v52 = v51;
      uint64_t v53 = (void *)MEMORY[0x263F8EED0];
      uint64_t v54 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v51) + 0x88))();

      id v39 = v146;
      uint64_t v44 = v152;
      if (v54)
      {
        CGRect v55 = (void *)(*(uint64_t (**)(void))((*v53 & *v54) + 0x2F8))();
        CGFloat v56 = (*(double (**)(void))((*v53 & *v55) + 0x138))();
        CGFloat v58 = v57;
        CGFloat v60 = v59;
        CGFloat v62 = v61;

        v164.origin.double x = v56;
        v164.origin.double y = v58;
        v164.size.double width = v60;
        v164.size.double height = v62;
        double Width = CGRectGetWidth(v164);

        double v64 = Width + -48.0;
      }
      else
      {
        double v64 = 1.79769313e308;
      }
    }
    else
    {
      double v64 = 1.79769313e308;
      id v39 = v146;
      uint64_t v44 = v152;
    }
    objc_msgSend(v147, sel_sizeThatFits_, v64, 1.79769313e308);
    double v26 = v65;
    double v36 = v66;
    goto LABEL_24;
  }
  objc_msgSend(v12, sel_sizeThatFits_, v26, 1.79769313e308);
  double v36 = v35;
  v29(v31, v28, v32);
  char v37 = specialized Capsule<>.isFormField.getter();
  uint64_t v38 = ((uint64_t (*)(uint64_t, uint64_t))v34)(v31, v32);
  id v39 = v34;
  CGFloat v40 = v30;
  CGFloat v41 = v29;
  if ((v37 & 1) == 0)
  {
    uint64_t v44 = v152;
    goto LABEL_24;
  }
  v162.origin.double x = (*(double (**)(uint64_t))&v151)(v38);
  CGFloat Height = CGRectGetHeight(v162);
  uint64_t v44 = v152;
  if (v36 < Height)
  {
LABEL_15:
    v163.origin.double x = (*(double (**)(uint64_t))&v151)(v42);
    double v36 = CGRectGetHeight(v163);
    goto LABEL_24;
  }
  id v45 = objc_msgSend(v12, sel_text);
  if (v45)
  {
    double v46 = v45;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;

    uint64_t v42 = swift_bridgeObjectRelease();
    uint64_t v50 = HIBYTE(v49) & 0xF;
    if ((v49 & 0x2000000000000000) == 0) {
      uint64_t v50 = v47 & 0xFFFFFFFFFFFFLL;
    }
    if (!v50) {
      goto LABEL_15;
    }
LABEL_24:
    double v151 = *(double *)&v40;
    *(void *)&long long v152 = v28;
    uint64_t v67 = v28;
    uint64_t v68 = v153;
    *(void *)&long long v150 = v41;
    uint64_t v69 = v41(v44, v67, v153);
    MEMORY[0x270FA5388](v69);
    *(void *)&long long v149 = type metadata accessor for Shape();
    *(&v137 - 4) = v149;
    uint64_t v70 = lazy protocol witness table accessor for type TextBox and conformance TextBox((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (void (*)(uint64_t))type metadata accessor for Shape);
    *(&v137 - 3) = v70;
    *(&v137 - 2) = (uint64_t)&protocol witness table for Shape;
    swift_getKeyPath();
    uint64_t v148 = v70;
    Capsule<>.subscript.getter();
    swift_release();
    v39(v44, v68);
    double a = v159.a;
    double b = v159.b;
    CGFloat c = v159.c;
    CGFloat d = v159.d;
    if (vabdd_f64(v159.c, v26) < 0.1 && vabdd_f64(v159.d, v36) < 0.1)
    {
      double v26 = v159.c;
      double v36 = v159.d;
LABEL_37:
      a1 = v144;
      id v102 = v145;
      id v103 = v147;
      uint64_t v104 = v152;
LABEL_60:
      double v151 = v26;
      *(double *)&long long v152 = v36;
      uint64_t v121 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v150)(v44, v104, v68);
      MEMORY[0x270FA5388](v121);
      uint64_t v122 = v148;
      *(&v137 - 4) = v149;
      *(&v137 - 3) = v122;
      *(&v137 - 2) = (uint64_t)&protocol witness table for Shape;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v146(v44, v68);
      CGFloat v123 = v158;
      *(double *)&long long v154 = a - v26 * 0.0;
      *(double *)&long long v153 = b - v36 * 0.0;
      v172.origin.double x = a;
      v172.origin.double y = b;
      v172.size.double width = v26;
      v172.size.double height = v36;
      double MidX = CGRectGetMidX(v172);
      v173.origin.double x = a;
      v173.origin.double y = b;
      v173.size.double width = v26;
      v173.size.double height = v36;
      double MidY = CGRectGetMidY(v173);
      CGAffineTransformMakeRotation(&v157, v123);
      long long v149 = *(_OWORD *)&v157.c;
      long long v150 = *(_OWORD *)&v157.a;
      CGFloat v126 = -MidY;
      tdouble x = v157.tx;
      tdouble y = v157.ty;
      CGAffineTransformMakeTranslation(&v157, -MidX, v126);
      CGFloat v129 = v157.a;
      CGFloat v130 = v157.b;
      CGFloat v132 = v157.c;
      CGFloat v131 = v157.d;
      CGFloat v133 = v157.tx;
      CGFloat v134 = v157.ty;
      *(_OWORD *)&v156.double a = v150;
      *(_OWORD *)&v156.CGFloat c = v149;
      v156.tdouble x = tx;
      v156.tdouble y = ty;
      CGAffineTransformConcat(&v155, &v157, &v156);
      long long v149 = *(_OWORD *)&v155.c;
      long long v150 = *(_OWORD *)&v155.a;
      CGFloat v135 = v155.tx;
      CGFloat v136 = v155.ty;
      v157.double a = v129;
      v157.double b = v130;
      v157.CGFloat c = v132;
      v157.CGFloat d = v131;
      v157.tdouble x = v133;
      v157.tdouble y = v134;
      CGAffineTransformInvert(&v156, &v157);
      *(_OWORD *)&v157.double a = v150;
      *(_OWORD *)&v157.CGFloat c = v149;
      v157.tdouble x = v135;
      v157.tdouble y = v136;
      CGAffineTransformConcat(&v155, &v157, &v156);
      v157.double a = v151;
      v157.double b = 0.0;
      v157.CGFloat c = 0.0;
      *(void *)&v157.CGFloat d = v152;
      *(void *)&v157.tdouble x = v154;
      *(void *)&v157.tdouble y = v153;
      CGAffineTransform v156 = v155;
      CGAffineTransformConcat(&v155, &v157, &v156);
      long long v153 = *(_OWORD *)&v155.c;
      long long v154 = *(_OWORD *)&v155.a;
      long long v152 = *(_OWORD *)&v155.tx;

      long long v15 = v152;
      long long v13 = v153;
      long long v14 = v154;
      goto LABEL_61;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20C835790;
    CGFloat v76 = v143;
    *(CGFloat *)(inited + 32) = v143;
    *(void *)&v159.double a = inited;
    specialized Array._endMutation()();
    unint64_t v77 = *(void *)&v159.a;
    double v78 = *(id *)&v76;
    Array<A>.displayAttributes.getter(v77, (uint64_t *)&v159);
    swift_bridgeObjectRelease();
    CGFloat v141 = v159.b;
    CGFloat v143 = v159.tx;
    CGFloat v139 = v159.ty;
    int v140 = v160;
    double v79 = v161;
    uint64_t v80 = ((uint64_t (*)(uint64_t, void, uint64_t))v150)(v44, v152, v68);
    MEMORY[0x270FA5388](v80);
    uint64_t v81 = v148;
    *(&v137 - 4) = v149;
    *(&v137 - 3) = v81;
    *(&v137 - 2) = (uint64_t)&protocol witness table for Shape;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v39(v44, v68);
    if (!*(void *)&v159.a)
    {
      v165.origin.double x = a;
      v165.origin.double y = b;
      v165.size.double width = c;
      v165.size.double height = d;
      double v98 = CGRectGetWidth(v165);
      if (v26 >= v98) {
        double v26 = v98;
      }
      v166.origin.double x = a;
      v166.origin.double y = b;
      v166.size.double width = c;
      v166.size.double height = d;
      double v99 = CGRectGetHeight(v166);
      if (v36 >= v99) {
        double v36 = v99;
      }
      v167.origin.double x = a;
      v167.origin.double y = b;
      v167.size.double width = c;
      v167.size.double height = d;
      double v100 = CGRectGetMidX(v167);
      v168.origin.double x = a;
      v168.origin.double y = b;
      v168.size.double width = c;
      v168.size.double height = d;
      double v101 = CGRectGetMidY(v168);

      swift_bridgeObjectRelease();
      double a = v100 - v26 * 0.5;
      double b = v101 - v36 * 0.5;
      goto LABEL_37;
    }
    id v138 = v79;
    uint64_t v82 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling;
    if (v78[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling] == 1)
    {
      double v83 = (char *)MEMORY[0x210550400](v142);
      if (v83)
      {
        CGFloat v84 = v83;
        objc_msgSend(v83, sel_frame);
        CGFloat v86 = v85;
        CGFloat v88 = v87;
        CGFloat v90 = v89;
        CGFloat v92 = v91;
        uint64_t v93 = MEMORY[0x210550400](&v84[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement]);
        if (v93)
        {
          double v94 = (void *)v93;
          AnyCanvasElementView.paperBoundsTransform()(&v159);

          long long v96 = *(_OWORD *)&v159.a;
          long long v95 = *(_OWORD *)&v159.c;
          long long v97 = *(_OWORD *)&v159.tx;
        }
        else
        {
          long long v95 = xmmword_20C8356C0;
          long long v96 = xmmword_20C835600;
          long long v97 = 0uLL;
        }
        *(_OWORD *)&v157.double a = v96;
        *(_OWORD *)&v157.CGFloat c = v95;
        *(_OWORD *)&v157.tdouble x = v97;
        CGAffineTransformInvert(&v156, &v157);
        CGAffineTransform v157 = v156;
        v169.origin.double x = v86;
        v169.origin.double y = v88;
        v169.size.double width = v90;
        v169.size.double height = v92;
        CGRect v170 = CGRectApplyAffineTransform(v169, &v157);
        double a = v170.origin.x;
        double b = v170.origin.y;
        CGFloat c = v170.size.width;
        CGFloat d = v170.size.height;
      }
      else
      {
        double a = 0.0;
        double b = 0.0;
        CGFloat c = 0.0;
        CGFloat d = 0.0;
      }
      CGFloat v106 = v143;
      if (v78[v82] != 1)
      {
        BOOL v105 = 0;
        a1 = v144;
        id v102 = v145;
        id v103 = v147;
        uint64_t v104 = v152;
        goto LABEL_48;
      }
      id v107 = objc_msgSend(v78, sel_traitCollection);
      id v108 = objc_msgSend(v107, sel_layoutDirection);

      if (v78[v82] != 1)
      {
        a1 = v144;
        id v102 = v145;
        id v103 = v147;
        uint64_t v104 = v152;
        id v111 = v138;
        CGFloat v112 = v139;
        int v113 = v140;
        if (!v108)
        {
LABEL_59:

          swift_bridgeObjectRelease();
          goto LABEL_60;
        }
        BOOL v105 = 0;
        CGFloat v106 = v143;
LABEL_49:
        if (v112 == 0.0) {
          char v114 = v113;
        }
        else {
          char v114 = 1;
        }
        if (v114)
        {
          double v115 = a;
          double v116 = b;
          CGFloat v117 = c;
          CGFloat v118 = d;
          if ((v105 | (*(void *)&v112 == 2) & ~v113) == 1)
          {
            double v119 = CGRectGetWidth(*(CGRect *)&v115);

            swift_bridgeObjectRelease();
            double a = a - (v26 - v119);
          }
          else
          {
            CGFloat v120 = CGRectGetMidX(*(CGRect *)&v115) + v26 * -0.5;
            v171.origin.double x = a;
            v171.origin.double y = b;
            v171.size.double width = c;
            v171.size.double height = d;
            double b = CGRectGetMinY(v171);

            swift_bridgeObjectRelease();
            double a = v120;
          }
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        goto LABEL_60;
      }
      id v109 = objc_msgSend(v78, sel_traitCollection);
      id v110 = objc_msgSend(v109, sel_layoutDirection);

      BOOL v105 = v110 == (id)1;
      a1 = v144;
      id v102 = v145;
      id v103 = v147;
      uint64_t v104 = v152;
      if (!v108) {
        goto LABEL_59;
      }
    }
    else
    {
      BOOL v105 = 0;
      a1 = v144;
      id v102 = v145;
      id v103 = v147;
      uint64_t v104 = v152;
    }
    CGFloat v106 = v143;
LABEL_48:
    id v111 = v138;
    CGFloat v112 = v139;
    int v113 = v140;
    goto LABEL_49;
  }
  __break(1u);
}