void sub_10016B368(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t vars8;

  v5 = a3;
  if (a2) {
    [*(id *)(a1 + 32) _saveEnabledSyncDataclasses:*(void *)(a1 + 40)];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_10016B3D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10016B60C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v6 = MBGetDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = +[NSNumber numberWithBool:a2];
    *(_DWORD *)buf = 138412546;
    v17 = v7;
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Finished enabling Keychain Sync: %@: %@", buf, 0x16u);

    v11 = +[NSNumber numberWithBool:a2];
    _MBLog();
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016B7A0;
  block[3] = &unk_100414C38;
  v8 = *(NSObject **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  char v15 = a2;
  id v13 = v5;
  id v14 = v9;
  id v10 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_10016B7A0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

uint64_t sub_10016BA94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v7 = v5;
    if ([v7 isCameraRollDomain] && *(unsigned char *)(a1 + 40) && !*(unsigned char *)(a1 + 41)) {
      goto LABEL_12;
    }
    if (![*(id *)(a1 + 32) _isSupportedBackupDomain:v7]) {
      goto LABEL_12;
    }
    if ([v7 isAppDomain])
    {
      v8 = [v7 bundleID];
      BOOL v9 = [v8 length] != 0;
    }
    else
    {
      BOOL v9 = 1;
    }
    if ([v7 isEnabled]) {
LABEL_12:
    }
      uint64_t v10 = 0;
    else {
      uint64_t v10 = v9 & ~[v7 isRestricted];
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t sub_10016BEC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
LABEL_8:
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  if (([*(id *)(a1 + 32) _isSupportedDataclassForDevice:v5] & 1) == 0)
  {
    BOOL v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "_disabledSyncDataclassesForAccount: Filtering out %{public}@ because device doesn't support it.", buf, 0xCu);
      _MBLog();
    }

    goto LABEL_8;
  }
  id v7 = [*(id *)(a1 + 40) isProvisionedForDataclass:v5];
  if ([v5 isEqualToString:ACAccountDataclassKeychainSync]) {
    id v8 = +[CDPKeychainSync isUserVisibleKeychainSyncEnabled];
  }
  else {
    id v8 = [*(id *)(a1 + 40) isEnabledForDataclass:v5];
  }
  id v11 = v8;
  v12 = MBGetDefaultLog();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = +[NSNumber numberWithBool:v11];
    id v14 = +[NSNumber numberWithBool:v7];
    *(_DWORD *)buf = 138543874;
    id v19 = v5;
    __int16 v20 = 2114;
    v21 = v13;
    __int16 v22 = 2114;
    v23 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "_disabledSyncDataclassesForAccount: Dataclass (%{public}@) isEnabled: %{public}@, isProvisioned: %{public}@", buf, 0x20u);

    char v15 = +[NSNumber numberWithBool:v11];
    v17 = +[NSNumber numberWithBool:v7];
    _MBLog();
  }
  uint64_t v10 = v7 & ~v11;
LABEL_13:

  return v10;
}

void sub_10016CC88(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_10016CCA0(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x10016CCACLL);
}

NSDictionary *sub_10016CCB4()
{
  v1[0] = kLockdownUniqueDeviceIDKey;
  v1[1] = kLockdownDeviceNameKey;
  v2[0] = @"UniqueDeviceID";
  v2[1] = @"UserAssignedDeviceName";
  v1[2] = kLockdownSerialNumberKey;
  v1[3] = kLockdownProductTypeKey;
  v2[2] = @"SerialNumber";
  v2[3] = @"ProductType";
  v1[4] = kLockdownBuildVersionKey;
  v1[5] = kLockdownProductVersionKey;
  v2[4] = @"BuildVersion";
  v2[5] = @"ProductVersion";
  return +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:6];
}

void sub_10016D360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v25 = objc_begin_catch(exception_object);
      v26 = MBGetDefaultLog();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)(v24 - 112) = 138412290;
        *(void *)(v23 + 4) = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Exception while fetching last backup date: %@", (uint8_t *)(v24 - 112), 0xCu);
        _MBLog();
      }
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x10016D2CCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016D47C(uint64_t a1, uint64_t a2)
{
}

void sub_10016D48C(uint64_t a1)
{
}

uint64_t sub_10016D498(uint64_t a1, void *a2)
{
  unsigned int v4 = [a2 committed];
  if (v4)
  {
    objc_msgSend(objc_msgSend(a2, "created"), "timeIntervalSinceReferenceDate");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = +[NSNumber numberWithUnsignedLongLong:(unint64_t)v5];
    id v6 = MBGetDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Backup date is %@", buf, 0xCu);
      _MBLog();
    }
  }
  return v4 ^ 1;
}

NSNumber *sub_10016D5B4(uint64_t a1, void *a2)
{
  result = (NSNumber *)objc_msgSend(objc_msgSend(a2, "backupForUDID:lastModified:", MBDeviceUDID_Legacy(), 0), "snapshots");
  if (result)
  {
    unsigned int v4 = result;
    result = (NSNumber *)[(NSNumber *)result count];
    if (result)
    {
      result = (NSNumber *)objc_msgSend(-[NSNumber lastObject](v4, "lastObject"), "committed");
      if (result)
      {
        result = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)((double)(unint64_t)objc_msgSend(-[NSNumber lastObject](v4, "lastObject"), "committed")+ -978307200.0));
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
      }
    }
  }
  return result;
}

void sub_10016DC3C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x10016DB30);
  }
  _Unwind_Resume(exception_object);
}

void sub_10016E914(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x10016E844);
  }
  _Unwind_Resume(exc_buf);
}

BOOL BackupClientConfigurationSettingReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
LABEL_21:
        id v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadString();
    uint64_t v13 = 16;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100172DBC(uint64_t a1, void *a2)
{
  v3 = a2;
  unsigned int v5 = +[NSURL fileURLWithPath:v3];
  id v22 = 0;
  id v21 = 0;
  unsigned __int8 v6 = [v5 getResourceValue:&v22 forKey:NSURLIsExcludedFromBackupKey error:&v21];
  id v7 = v22;
  char v8 = (__CFError *)v21;
  if (v6)
  {
    if ([v7 BOOLValue]) {
      goto LABEL_25;
    }
  }
  else
  {
    BOOL v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      NSURLResourceKey v24 = NSURLIsExcludedFromBackupKey;
      __int16 v25 = 2112;
      CFErrorRef v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "=restore-policy= Error fetching value for property %{public}@: %@", buf, 0x16u);
      NSURLResourceKey v17 = NSURLIsExcludedFromBackupKey;
      __int16 v18 = v8;
      _MBLog();
    }
  }
  if (!*(unsigned char *)(a1 + 40)
    || ([*(id *)(a1 + 32) _isEncrypted] & 1) != 0
    || ([*(id *)(a1 + 32) _isDeviceTransferEngine] & 1) != 0)
  {
    if (!objc_msgSend(*(id *)(a1 + 32), "_isCloudKitEngine", v17, v18)) {
      goto LABEL_30;
    }
    CFErrorRef error = 0;
    CFBooleanRef propertyValueTypeRefPtr = 0;
    int v10 = (NSString *)_kCFURLIsExcludedFromCloudBackupKey;
    if (CFURLCopyResourcePropertyForKey((CFURLRef)v5, _kCFURLIsExcludedFromCloudBackupKey, &propertyValueTypeRefPtr, &error))
    {
      CFBooleanRef v11 = propertyValueTypeRefPtr;
      if (propertyValueTypeRefPtr)
      {
        CFRelease(propertyValueTypeRefPtr);
        if (v11 == kCFBooleanTrue)
        {
          uint64_t v12 = MBGetDefaultLog();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            NSURLResourceKey v24 = v3;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "=restore-policy= Not restoring from iCloud (attribute set locally): %@", buf, 0xCu);
LABEL_23:
            _MBLog();
            goto LABEL_24;
          }
          goto LABEL_24;
        }
      }
LABEL_30:
      uint64_t v15 = 0;
      goto LABEL_31;
    }
    uint64_t v13 = MBGetDefaultLog();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_28:

      if (error) {
        CFRelease(error);
      }
      goto LABEL_30;
    }
LABEL_27:
    *(_DWORD *)buf = 138543618;
    NSURLResourceKey v24 = v10;
    __int16 v25 = 2112;
    CFErrorRef v26 = error;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "=restore-policy= Error fetching value for property %{public}@: %@", buf, 0x16u);
    _MBLog();
    goto LABEL_28;
  }
  CFErrorRef error = 0;
  CFBooleanRef propertyValueTypeRefPtr = 0;
  int v10 = (NSString *)_kCFURLIsExcludedFromUnencryptedBackupKey;
  if (!CFURLCopyResourcePropertyForKey((CFURLRef)v5, _kCFURLIsExcludedFromUnencryptedBackupKey, &propertyValueTypeRefPtr, &error))
  {
    uint64_t v13 = MBGetDefaultLog();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  CFBooleanRef v14 = propertyValueTypeRefPtr;
  if (!propertyValueTypeRefPtr) {
    goto LABEL_30;
  }
  CFRelease(propertyValueTypeRefPtr);
  if (v14 != kCFBooleanTrue) {
    goto LABEL_30;
  }
  uint64_t v12 = MBGetDefaultLog();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    NSURLResourceKey v24 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "=restore-policy= Not restoring from unencrypted iTunes backup (attribute set locally): %@", buf, 0xCu);
    goto LABEL_23;
  }
LABEL_24:

LABEL_25:
  uint64_t v15 = 1;
LABEL_31:

  return v15;
}

BOOL sub_1001731A4(uint64_t a1, void *a2, void *a3)
{
  memset(&v14, 0, sizeof(v14));
  char v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_msgSend(v4, "persona", (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0);
  char v8 = sub_100173280(v6, v7);

  BOOL v9 = [v8 stringByAppendingPathComponent:v5];

  id v10 = v9;
  int v11 = lstat((const char *)[v10 fileSystemRepresentation], &v14);
  BOOL v12 = (v11 | ~v14.st_mode & 0xA000) == 0;

  return v12;
}

id sub_100173280(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  if ([v4 shouldRestoreToSharedVolume]) {
    [v3 sharedIncompleteRestoreDirectory];
  }
  else {
  id v5 = [v3 userIncompleteRestoreDirectory];
  }

  id v6 = [v4 rootPath];

  id v7 = [v5 stringByAppendingPathComponent:v6];

  return v7;
}

id sub_100173FF4(uint64_t a1, void *a2)
{
  return _[a2 startingRestoreWithPolicy:*(void *)(a1 + 32) engine:*(void *)(a1 + 40)];
}

id sub_1001740DC(uint64_t a1, void *a2)
{
  return _[a2 preparingRestoreWithPolicy:*(void *)(a1 + 32) engine:*(void *)(a1 + 40)];
}

id sub_1001741C4(uint64_t a1, void *a2)
{
  return _[a2 endingRestoreWithPolicy:*(void *)(a1 + 32) engine:*(void *)(a1 + 40)];
}

id sub_1001742D8(void *a1, void *a2)
{
  return _[a2 endedRestoreWithPolicy:a1[4] engine:a1[5] error:a1[6]];
}

void sub_1001744F8(id a1)
{
  qword_100482598 = [[MBXPCServer alloc] initWithServiceName:@"com.apple.backupd"];
  _objc_release_x1();
}

id sub_1001749C4(uint64_t a1)
{
  v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    id v5 = "com.apple.mobile.keybagd.first_unlock";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received \"%s\" notification", buf, 0xCu);
    _MBLog();
  }

  return [*(id *)(a1 + 32) _unlocked];
}

id sub_100174A98(uint64_t a1)
{
  id result = (id)MKBDeviceUnlockedSinceBoot();
  if (result == 1)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 _unlocked];
  }
  return result;
}

void sub_100174AE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_connection)
  {
    id v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = MBStringWithXPCObject();
      *(_DWORD *)buf = 138412290;
      id v29 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received an unexpected XPC message: %@", buf, 0xCu);

      NSURLResourceKey v17 = MBStringWithXPCObject();
      _MBLog();
    }
    MBExit(1);
  }
  id v21 = 0;
  BOOL v6 = sub_100174E38(v3, @"backupd-connection-initiate", &v21);
  id v7 = v21;
  char v8 = v7;
  if (v6)
  {
    id v9 = [objc_alloc((Class)MBConnection) initWithXPCConnection:v3 delegate:*(void *)(a1 + 32) delegateQueue:*(void *)(a1 + 40)];
    id v10 = MBGetDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Accepted new connection %@", buf, 0xCu);
      _MBLog();
    }

    int v11 = *(void **)(a1 + 32);
    BOOL v12 = v11[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001750D0;
    block[3] = &unk_1004110B0;
    id v19 = v11;
    id v20 = v9;
    id v13 = v9;
    dispatch_sync(v12, block);
    [v13 resume];
    stat v14 = +[MBDaemon sharedDaemon];
    [v14 resetIdleTimer];
  }
  else
  {
    if (!v7)
    {
      buf[0] = 0;
      pid_t pid = xpc_connection_get_pid((xpc_connection_t)v3);
      if (proc_name(pid, buf, 0xFFu) <= 0) {
        __strlcpy_chk();
      }
      v16 = MBGetDefaultLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)id v22 = 136315650;
        uint64_t v23 = buf;
        __int16 v24 = 1024;
        pid_t v25 = pid;
        __int16 v26 = 2112;
        CFStringRef v27 = @"backupd-connection-initiate";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "The client connection from %s(%d) is missing the \"%@\" entitlement", v22, 0x1Cu);
        _MBLog();
      }
    }
    xpc_connection_cancel((xpc_connection_t)v3);
  }
}

BOOL sub_100174E38(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  BOOL v6 = a1;
  pid_t pid = xpc_connection_get_pid(v6);
  long long v21 = 0u;
  long long v22 = 0u;
  xpc_connection_get_audit_token();

  memset(&token, 0, sizeof(token));
  char v8 = SecTaskCreateWithAuditToken(0, &token);
  if (v8)
  {
    id v9 = v8;
    if (a3) {
      *a3 = 0;
    }
    CFErrorRef error = 0;
    CFBooleanRef v10 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v8, v5, &error);
    if (v10)
    {
      CFBooleanRef v11 = v10;
      CFTypeID v12 = CFGetTypeID(v10);
      BOOL v13 = v12 == CFBooleanGetTypeID() && CFBooleanGetValue(v11) != 0;
      CFRelease(v11);
    }
    else
    {
      CFErrorRef v15 = error;
      if (error)
      {
        if ([(__CFError *)error code] != (id)3
          || ([(__CFError *)v15 domain],
              v16 = objc_claimAutoreleasedReturnValue(),
              unsigned __int8 v17 = [v16 isEqualToString:NSPOSIXErrorDomain],
              v16,
              (v17 & 1) == 0))
        {
          __int16 v18 = MBGetDefaultLog();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            token.val[0] = 67109378;
            token.val[1] = pid;
            LOWORD(token.val[2]) = 2112;
            *(void *)((char *)&token.val[2] + 2) = v15;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "SecTaskCopyValueForEntitlement failed for pid:%d: %@", (uint8_t *)&token, 0x12u);
            _MBLog();
          }
        }
        if (a3) {
          *a3 = v15;
        }
      }
      BOOL v13 = 0;
    }
    CFRelease(v9);
  }
  else
  {
    stat v14 = MBGetDefaultLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      token.val[0] = 67109120;
      token.val[1] = pid;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "SecTaskCreateWithAuditToken failed for pid:%d", (uint8_t *)&token, 8u);
      _MBLog();
    }

    if (a3)
    {
      +[MBError errorWithCode:1 format:@"SecTaskCreateWithAuditToken failed"];
      BOOL v13 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      BOOL v13 = 0;
    }
  }

  return v13;
}

id sub_1001750D0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

void sub_10017E758(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = MBGetDefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "unboostBackgroundRestoreHandler called: %{public}@", buf, 0xCu);
    id v6 = v3;
    _MBLog();
  }

  if (v3)
  {
    id v5 = +[MBError sanitizedError:v3];
    [*(id *)(a1 + 32) setReplyError:v5];
  }
  objc_msgSend(*(id *)(a1 + 32), "sendReply", v6);
}

id sub_10017E8F4(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 32) _checkForBackupCtlPrivileged:*(void *)(a1 + 40) description:@"BGST schedule" error:a2])
  {
    id v4 = [*(id *)(a1 + 40) arguments];
    id v5 = +[MBActivityScheduler sharedInstance];
    id v6 = [v5 controlWithArguments:v4 error:a2];
  }
  else
  {
    id v6 = 0;
  }
  return v6;
}

id sub_10017EA38(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) _checkForBackupCtlPrivileged:*(void *)(a1 + 40) description:@"dry restore" error:a3])
  {
    id v6 = [*(id *)(a1 + 40) connection];
    id v7 = [*(id *)(a1 + 40) arguments];
    id v8 = [v7 firstObject];

    id v9 = [v8 objectForKeyedSubscript:@"kMBMessageDryRestoreAllowance"];
    CFBooleanRef v10 = [v8 objectForKeyedSubscript:@"kMBMessageDryRestoreSnapshotUUID"];
    [v9 doubleValue];
    CFBooleanRef v11 = +[MBDryRestoreCommand dryRestoreWithAllowance:snapshotUUID:account:connection:error:](_TtC7backupd19MBDryRestoreCommand, "dryRestoreWithAllowance:snapshotUUID:account:connection:error:", v10, v5, v6, a3);
  }
  else
  {
    CFBooleanRef v11 = 0;
  }

  return v11;
}

id sub_10017EBF4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) _checkForBackupCtlPrivileged:*(void *)(a1 + 40) description:@"restore domain" error:a3])
  {
    id v6 = [*(id *)(a1 + 40) connection];
    id v7 = [*(id *)(a1 + 40) arguments];
    id v8 = [v7 objectAtIndexedSubscript:0];
    id v9 = [v7 objectAtIndexedSubscript:1];
    CFBooleanRef v10 = [v7 objectAtIndexedSubscript:2];
    CFBooleanRef v11 = [v7 objectAtIndexedSubscript:3];
    CFTypeID v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[MBRestoreDomainCommand restoreWithDomain:v8 rootPath:v11 snapshotUUID:v10 deviceUUID:v9 account:v5 connection:v6 error:a3]);
  }
  else
  {
    CFTypeID v12 = &__kCFBooleanFalse;
  }

  return v12;
}

void sub_100181C64(uint64_t a1)
{
}

id sub_100181C6C(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_100181C98(uint64_t a1)
{
}

void sub_100181CA0(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v3 = +[MBDaemon sharedDaemon];
    [v3 releaseWorkAssertion:*(void *)(a1 + 48)];

    id v4 = self;
    dispatch_block_cancel(*(dispatch_block_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0;
  }
}

void sub_1001823B4(uint64_t a1)
{
  v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  uint64_t v5 = v2;
  id v3 = +[NSArray arrayWithObjects:&v5 count:1];

  id v4 = [objc_alloc((Class)MBMessage) initWithName:@"kMBMessageDidSetBackupEnabled" arguments:v3];
  [*(id *)(a1 + 32) _sendMessage:v4 connections:*(void *)(*(void *)(a1 + 32) + 16)];
}

void sub_100182570(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = v2;
  if (v2)
  {
    id v14 = v2;
    id v4 = +[NSArray arrayWithObjects:&v14 count:1];
  }
  else
  {
    id v4 = *(id *)(*(void *)(a1 + 40) + 16);
  }
  id v6 = v4;
  LODWORD(v5) = *(_DWORD *)(a1 + 72);
  id v7 = +[NSNumber numberWithFloat:v5];
  id v8 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(void *)(a1 + 56), v7);
  v13[1] = v8;
  id v9 = +[NSNumber numberWithLongLong:*(void *)(a1 + 64)];
  uint64_t v10 = *(void *)(a1 + 48);
  v13[2] = v9;
  v13[3] = v10;
  CFBooleanRef v11 = +[NSArray arrayWithObjects:v13 count:4];
  CFTypeID v12 = +[MBMessage messageWithName:@"kMBMessageDidUpdateProgress" arguments:v11];

  [*(id *)(a1 + 40) _sendMessage:v12 connections:v6];
}

void sub_100182780(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = v2;
  if (v2)
  {
    id v7 = v2;
    id v4 = +[NSArray arrayWithObjects:&v7 count:1];
  }
  else
  {
    id v4 = *(id *)(*(void *)(a1 + 40) + 16);
  }
  double v5 = v4;
  id v6 = +[MBMessage messageWithName:@"kMBMessageDidUpdateBackgroundRestoreProgress" arguments:0];
  [*(id *)(a1 + 40) _sendMessage:v6 connections:v5];
}

void sub_1001828CC(uint64_t a1)
{
  id v2 = [objc_alloc((Class)MBMessage) initWithName:@"kMBMessageDidFinishVerification" arguments:0];
  [*(id *)(a1 + 32) _sendMessage:v2 connections:*(void *)(*(void *)(a1 + 32) + 16)];
}

void sub_1001829E0(uint64_t a1)
{
  id v2 = objc_alloc((Class)MBMessage);
  v6[0] = *(void *)(a1 + 32);
  id v3 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 48)];
  v6[1] = v3;
  id v4 = +[NSArray arrayWithObjects:v6 count:2];
  id v5 = [v2 initWithName:@"kMBMessageDidScanBundle" arguments:v4];

  [*(id *)(a1 + 40) _sendMessage:v5 connections:*(void *)(*(void *)(a1 + 40) + 16)];
}

void sub_100182B88(uint64_t a1)
{
  id v2 = objc_alloc((Class)MBMessage);
  id v3 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(void *)(a1 + 56), *(void *)(a1 + 32), *(void *)(a1 + 40));
  void v6[2] = v3;
  id v4 = +[NSArray arrayWithObjects:v6 count:3];
  id v5 = [v2 initWithName:@"kMBMessageDidScanDomainForBundle" arguments:v4];

  [*(id *)(a1 + 48) _sendMessage:v5 connections:*(void *)(*(void *)(a1 + 48) + 16)];
}

void sub_100182D4C(uint64_t a1)
{
  id v2 = objc_alloc((Class)MBMessage);
  long long v5 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  id v3 = +[NSArray arrayWithObjects:&v5 count:3];
  id v4 = [v2 initWithName:@"kMBMessageDidScanFilesForBundle" arguments:v3];

  [*(id *)(a1 + 56) _sendMessage:v4 connections:*(void *)(*(void *)(a1 + 56) + 16)];
}

void sub_100182EAC(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = v2;
  if (v2)
  {
    id v7 = v2;
    id v4 = +[NSArray arrayWithObjects:&v7 count:1];
  }
  else
  {
    id v4 = *(id *)(*(void *)(a1 + 40) + 16);
  }
  long long v5 = v4;
  uint64_t v6 = +[MBMessage messageWithName:@"kMBMessageDidFinishRestore" arguments:0];
  [*(id *)(a1 + 40) _sendMessage:v6 connections:v5];
}

void sub_10018304C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = v2;
  if (v2)
  {
    id v9 = v2;
    id v4 = +[NSArray arrayWithObjects:&v9 count:1];
  }
  else
  {
    id v4 = *(id *)(*(void *)(a1 + 40) + 16);
  }
  long long v5 = v4;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v6 = +[NSArray arrayWithObjects:&v8 count:1];
  id v7 = +[MBMessage messageWithName:@"kMBMessageDidFinishFileRestore" arguments:v6];

  [*(id *)(a1 + 40) _sendMessage:v7 connections:v5];
}

void sub_1001831C8(uint64_t a1)
{
  id v2 = [objc_alloc((Class)MBMessage) initWithName:@"kMBMessageDidCancelRestore" arguments:0];
  [*(id *)(a1 + 32) _sendMessage:v2 connections:*(void *)(*(void *)(a1 + 32) + 16)];
}

void sub_1001832A8(uint64_t a1)
{
  id v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    CFStringRef v5 = @"kMBMessageDidFinishBackup";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending %{public}@", buf, 0xCu);
    _MBLog();
  }

  id v3 = +[MBMessage messageWithName:@"kMBMessageDidFinishBackup" arguments:0];
  [*(id *)(a1 + 32) _sendBarrierMessage:v3];
}

void sub_10018352C(uint64_t a1)
{
  id v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    CFStringRef v7 = @"kMBMessageDidFailBackup";
    __int16 v8 = 2114;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending %{public}@: %{public}@", buf, 0x16u);
    _MBLog();
  }

  id v4 = +[MBMessage messageWithName:@"kMBMessageDidFailBackup" arguments:0];
  CFStringRef v5 = +[MBError sanitizedError:*(void *)(a1 + 32)];
  [v4 setError:v5];

  [*(id *)(a1 + 40) _sendBarrierMessage:v4];
}

void sub_1001836D8(uint64_t a1)
{
  id v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    CFStringRef v8 = @"kMBMessageDidFinishScan";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending %{public}@", buf, 0xCu);
    _MBLog();
  }

  uint64_t v3 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 40)];
  uint64_t v6 = v3;
  id v4 = +[NSArray arrayWithObjects:&v6 count:1];
  CFStringRef v5 = +[MBMessage messageWithName:@"kMBMessageDidFinishScan" arguments:v4];

  [*(id *)(a1 + 32) _sendBarrierMessage:v5];
}

void sub_1001839A0(uint64_t a1)
{
  id v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    CFStringRef v7 = @"kMBMessageDidFailScan";
    __int16 v8 = 2114;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending %{public}@: %{public}@", buf, 0x16u);
    _MBLog();
  }

  id v4 = +[MBMessage messageWithName:@"kMBMessageDidFailScan" arguments:0];
  CFStringRef v5 = +[MBError sanitizedError:*(void *)(a1 + 32)];
  [v4 setError:v5];

  [*(id *)(a1 + 40) _sendBarrierMessage:v4];
}

void sub_100183B70(uint64_t a1)
{
  id v3 = +[MBMessage messageWithName:@"kMBMessageDidFailVerification" arguments:0];
  id v2 = +[MBError sanitizedError:*(void *)(a1 + 32)];
  [v3 setError:v2];

  [*(id *)(a1 + 40) _sendMessage:v3 connections:*(void *)(*(void *)(a1 + 40) + 16)];
}

void sub_100183CC8(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = v2;
  if (v2)
  {
    id v8 = v2;
    id v4 = +[NSArray arrayWithObjects:&v8 count:1];
  }
  else
  {
    id v4 = *(id *)(*(void *)(a1 + 40) + 16);
  }
  CFStringRef v5 = v4;
  uint64_t v6 = +[MBMessage messageWithName:@"kMBMessageDidFailRestore" arguments:0];
  CFStringRef v7 = +[MBError sanitizedError:*(void *)(a1 + 48)];
  [v6 setError:v7];

  [*(id *)(a1 + 40) _sendMessage:v6 connections:v5];
}

void sub_100183EB4(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = v2;
  if (v2)
  {
    id v10 = v2;
    id v4 = +[NSArray arrayWithObjects:&v10 count:1];
  }
  else
  {
    id v4 = *(id *)(*(void *)(a1 + 40) + 16);
  }
  CFStringRef v5 = v4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v6 = +[NSArray arrayWithObjects:&v9 count:1];
  CFStringRef v7 = +[MBMessage messageWithName:@"kMBMessageDidFailFileRestore" arguments:v6];

  id v8 = +[MBError sanitizedError:*(void *)(a1 + 56)];
  [v7 setError:v8];

  [*(id *)(a1 + 40) _sendMessage:v7 connections:v5];
}

void sub_100184100(uint64_t a1)
{
  id v3 = MBGetDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    CFStringRef v5 = [*(id *)(a1 + 40) name];
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    uint64_t v10 = v4;
    __int16 v11 = 2114;
    CFTypeID v12 = v5;
    __int16 v13 = 2114;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ received %{public}@ %{public}@", buf, 0x20u);

    id v8 = [*(id *)(a1 + 40) name];
    _MBLog();
  }
  [*(id *)(a1 + 40) setConnection:*(void *)(a1 + 32)];
  [*(id *)(a1 + 48) _handleRequest:*(void *)(a1 + 40)];
  CFStringRef v7 = +[MBDaemon sharedDaemon];
  [v7 releaseWorkAssertion:*(void *)(a1 + 56)];
}

void sub_1001843A8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) serviceManager];
  [v2 cancelRestoreEnginesWithReason:1 connection:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 32) serviceManager];
  [v3 cancelDeviceTransferWithConnection:*(void *)(a1 + 40)];

  uint64_t v4 = *(NSObject **)(a1 + 48);
  dispatch_group_leave(v4);
}

id sub_100184418(uint64_t a1)
{
  [*(id *)(a1 + 32) cancel];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(*(void *)(a1 + 40) + 16);
  return [v3 removeObject:v2];
}

intptr_t sub_1001847B4(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10018519C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v8 = a2;
  unint64_t v5 = a3;
  if (!(v8 | v5)) {
    __assert_rtn("-[MBXPCServer _startPreflight:]_block_invoke", "MBXPCServer.m", 2671, "preflightInfo || error");
  }
  uint64_t v6 = (void *)v5;
  [*(id *)(a1 + 32) setReply:v8];
  if (!v8)
  {
    CFStringRef v7 = +[MBError sanitizedError:v6];
    [*(id *)(a1 + 32) setReplyError:v7];
  }
  [*(id *)(a1 + 32) sendReply];
}

void sub_100185330(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = +[NSNumber numberWithBool:v5 == 0];
  [*(id *)(a1 + 32) setReply:v3];

  if (v5)
  {
    uint64_t v4 = +[MBError sanitizedError:v5];
    [*(id *)(a1 + 32) setReplyError:v4];
  }
  [*(id *)(a1 + 32) sendReply];
}

void sub_1001854A0(uint64_t a1, void *a2, void *a3)
{
  unint64_t v8 = a2;
  unint64_t v5 = a3;
  if (!(v8 | v5)) {
    __assert_rtn("-[MBXPCServer _startKeychainDataTransfer:]_block_invoke", "MBXPCServer.m", 2694, "keychainInfo || error");
  }
  uint64_t v6 = (void *)v5;
  [*(id *)(a1 + 32) setReply:v8];
  if (!v8)
  {
    CFStringRef v7 = +[MBError sanitizedError:v6];
    [*(id *)(a1 + 32) setReplyError:v7];
  }
  [*(id *)(a1 + 32) sendReply];
}

void sub_100185690(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = +[NSNumber numberWithBool:v5 == 0];
  [*(id *)(a1 + 32) setReply:v3];

  if (v5)
  {
    uint64_t v4 = +[MBError sanitizedError:v5];
    [*(id *)(a1 + 32) setReplyError:v4];
  }
  [*(id *)(a1 + 32) sendReply];
}

void sub_10018585C(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = +[NSNumber numberWithBool:v5 == 0];
  [*(id *)(a1 + 32) setReply:v3];

  if (v5)
  {
    uint64_t v4 = +[MBError sanitizedError:v5];
    [*(id *)(a1 + 32) setReplyError:v4];
  }
  [*(id *)(a1 + 32) sendReply];
}

id sub_100186670(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("-[MBXPCServer _respondSynchronouslyTo:description:withAccount:]_block_invoke", "MBXPCServer.m", 2855, "error");
  }
  uint64_t v4 = [MBServiceAccount alloc];
  id v5 = +[UMUserPersona currentPersona];
  uint64_t v6 = [(MBServiceAccount *)v4 initWithPersona:v5 error:a2];

  if (v6)
  {
    CFStringRef v7 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    unint64_t v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *a2;
      *(_DWORD *)buf = 138412546;
      uint64_t v13 = v9;
      __int16 v14 = 2114;
      uint64_t v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to %@ due to nil account: %{public}@", buf, 0x16u);
      _MBLog();
    }

    CFStringRef v7 = 0;
  }

  return v7;
}

int64_t sub_100186D34(id a1, id a2, id a3)
{
  id v4 = a3;
  id v5 = [a2 date];
  uint64_t v6 = [v4 date];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_100187434(uint64_t a1)
{
  [*(id *)(a1 + 32) _cleanupStaleStateWithAccount:*(void *)(*(void *)(a1 + 32) + 176)];
  uint64_t v2 = (const char *)[@"com.apple.mobile.data_eschaton" UTF8String];
  id v3 = *(int **)(a1 + 32);
  id v4 = dispatch_get_global_queue(25, 0);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1001875B8;
  handler[3] = &unk_100414E20;
  uint64_t v13 = v3;
  notify_register_dispatch(v2, v3 + 26, v4, handler);

  dispatch_source_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_vfs, 0, 0x204uLL, v4);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 120);
  *(void *)(v6 + 120) = v5;

  unint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = v8[15];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001875C0;
  v10[3] = &unk_100411128;
  __int16 v11 = v8;
  dispatch_source_set_event_handler(v9, v10);
}

id sub_1001875B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _obliterating];
}

id sub_1001875C0(uint64_t a1)
{
  uint64_t v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Low disk space; canceling background restore engines",
      v4,
      2u);
    _MBLog();
  }

  return [*(id *)(a1 + 32) _cancelAllBackgroundRestoreEngines];
}

uint64_t sub_100187734(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 88) = 0;
  return result;
}

void sub_100187CD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001887A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
}

void sub_1001887E8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained reachabilityMonitorDidDetectWifiStatusChange:a2];
}

void sub_100188838(uint64_t a1)
{
  uint64_t v2 = +[MBUserNotification notification];
  [v2 setIdentifier:@"WarnRestoreTimedOut"];
  [v2 setInterval:86400.0];
  id v3 = MBLocalizedStringFromTable();
  [v2 setTitle:v3];

  id v4 = MBLocalizedStringFromTable();
  [v2 setBody:v4];

  dispatch_source_t v5 = MBLocalizedStringFromTable();
  [v2 setButton:v5];

  uint64_t v6 = MBLocalizedStringFromTable();
  [v2 setAlternateButton:v6];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001889C0;
  v8[3] = &unk_100414E20;
  v8[4] = *(void *)(a1 + 32);
  [v2 setCompletionBlock:v8];
  id v7 = +[MBUserNotificationManager sharedManager];
  [v7 presentUserNotification:v2 account:*(void *)(a1 + 40)];
}

id *sub_1001889C0(id *result, int a2)
{
  if (a2 == 1) {
    return (id *)_[result[4] cancelRestore];
  }
  return result;
}

void sub_1001896C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1001891E4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100189798(uint64_t a1)
{
  uint64_t v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cleanup: Removing %@", buf, 0xCu);
    _MBLog();
  }

  id v4 = *(void **)(a1 + 32);
  id v12 = 0;
  unsigned int v5 = [v4 disposeWithError:&v12];
  id v6 = v12;
  id v7 = MBGetDefaultLog();
  unint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Cleanup: Finished removing %@", buf, 0xCu);
LABEL_8:
      _MBLog();
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    uint64_t v14 = v10;
    __int16 v15 = 2112;
    id v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Cleanup: Failed to remove %@ : %@", buf, 0x16u);
    goto LABEL_8;
  }

  __int16 v11 = +[MBDaemon sharedDaemon];
  [v11 releaseWorkAssertion:*(void *)(a1 + 40)];
}

void sub_10018A148(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(a1 + 32) + 8))
  {
    int v1 = MBGetDefaultLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Ignoring keybag is locking notification while busy", v5, 2u);
      _MBLog();
    }
  }
  else
  {
    uint64_t v3 = +[MBDaemon sharedDaemon];
    [v3 holdWorkAssertion:*(void *)(a1 + 40)];

    id v4 = dispatch_get_global_queue(21, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10018A26C;
    block[3] = &unk_100412A88;
    long long v7 = *(_OWORD *)(a1 + 32);
    dispatch_async(v4, block);
  }
}

void sub_10018A26C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) serviceEncryptionManager];
  [v2 keybagIsLocking];

  id v3 = +[MBDaemon sharedDaemon];
  [v3 releaseWorkAssertion:*(void *)(a1 + 40)];
}

void sub_10018A528(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) == 5 && !*(void *)(v2 + 72))
  {
    unsigned int v5 = *(void **)(a1 + 40);
    id v14 = 0;
    uint64_t v6 = [v5 loadRestoreKeyBagsByIDWithError:&v14];
    id v3 = v14;
    uint64_t v7 = *(void *)(a1 + 32);
    unint64_t v8 = *(void **)(v7 + 72);
    *(void *)(v7 + 72) = v6;

    if (*(void *)(*(void *)(a1 + 32) + 72)) {
      goto LABEL_4;
    }
    uint64_t v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = +[MBError descriptionForError:v3];
      *(_DWORD *)buf = 138412290;
      id v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error loading restore keybags when device unlocked: %@", buf, 0xCu);

      uint64_t v13 = +[MBError descriptionForError:v3];
      _MBLog();
    }
    __int16 v11 = [*(id *)(a1 + 32) account];
    id v12 = [v11 persona];
    [v12 setPreferencesValue:&__kCFBooleanTrue forKey:@"NotifyDaemonNextTimeKeyBagIsUnlocked"];
  }
  id v3 = 0;
LABEL_4:
  id v4 = self;
}

id sub_10018A6E8(uint64_t a1)
{
  [*(id *)(a1 + 32) keybagIsUnlocked];
  uint64_t v2 = +[MBDaemon sharedDaemon];
  [v2 releaseWorkAssertion:*(void *)(a1 + 48)];

  return self;
}

void sub_10018A920(uint64_t a1)
{
  uint64_t v10 = 0;
  __int16 v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10018ABF4;
  v9[3] = &unk_100414D00;
  v9[4] = &v10;
  MBPerformWithCache((uint64_t)v9);
  if (*((unsigned char *)v11 + 24))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    id v3 = MBDeviceUDID_Legacy();
    id v8 = 0;
    id v4 = [v2 backupForUDID:v3 lastModified:0 error:&v8];
    unsigned int v5 = v8;

    if (v4)
    {
      uint64_t v6 = MBGetDefaultLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Backup still exists with service. Leaving backup enabled.", buf, 2u);
        _MBLog();
      }
LABEL_12:

      goto LABEL_13;
    }
    if (!+[MBError isError:v5 withCode:4])
    {
      uint64_t v6 = MBGetDefaultLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int16 v15 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error getting backup from service: %@", buf, 0xCu);
        _MBLog();
      }
      goto LABEL_12;
    }
    if ([*(id *)(a1 + 40) _setBackupDisabledIfMissingFromAccount:*(void *)(a1 + 48) connection:*(void *)(a1 + 56)])MBPerformWithCache((uint64_t)&stru_100415030); {
  }
    }
  else
  {
    unsigned int v5 = MBGetDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Backup does not exist in cache. Leaving backup enabled.", buf, 2u);
      _MBLog();
    }
  }
LABEL_13:

  uint64_t v7 = +[MBDaemon sharedDaemon];
  [v7 releaseWorkAssertion:*(void *)(a1 + 64)];

  _Block_object_dispose(&v10, 8);
}

void sub_10018ABB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018ABF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  MBDeviceUDID_Legacy();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [v3 backupForUDID:v5 lastModified:0];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4 != 0;
}

void sub_10018AC80(id a1, MBServiceCache *a2)
{
  uint64_t v2 = a2;
  MBDeviceUDID_Legacy();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [(MBServiceCache *)v2 removeBackupForUDID:v3];
}

uint64_t sub_10018B140(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10018B150(uint64_t a1)
{
}

void sub_10018B158(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  if (v2)
  {
    [v2 makeObjectsPerformSelector:"cancel"];
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    dispatch_time_t v4 = dispatch_time(0, 60000000000);
    if (dispatch_group_wait(v3, v4)) {
      objc_exception_throw([objc_alloc((Class)MBException) initWithCode:1 format:@"Timed out while canceling engines"]);
    }
  }
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8);
  id obj = *(id *)(v7 + 40);
  unsigned int v8 = [v5 deleteBackupForUDID:v6 error:&obj];
  objc_storeStrong((id *)(v7 + 40), obj);
  if (v8)
  {
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    __int16 v11 = sub_10018B2C8;
    uint64_t v12 = &unk_100415058;
    id v13 = *(id *)(a1 + 48);
    MBPerformWithCache((uint64_t)&v9);
    if (*(unsigned char *)(a1 + 88)) {
      objc_msgSend(*(id *)(a1 + 32), "setBackupEnabled:account:connection:", 0, *(void *)(a1 + 56), *(void *)(a1 + 64), v9, v10, v11, v12);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
  }
}

id sub_10018B2C8(uint64_t a1, void *a2)
{
  return [a2 removeBackupForUDID:*(void *)(a1 + 32)];
}

void sub_10018B5F4(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 32);
  if (v2)
  {
    [v2 makeObjectsPerformSelector:"cancel"];
    id v3 = *(NSObject **)(a1[4] + 24);
    dispatch_time_t v4 = dispatch_time(0, 60000000000);
    if (dispatch_group_wait(v3, v4)) {
      objc_exception_throw([objc_alloc((Class)MBException) initWithCode:1 format:@"Timed out while canceling engine"]);
    }
  }
  uint64_t v5 = a1[9];
  uint64_t v6 = (void *)a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = *(void *)(a1[7] + 8);
  id v14 = *(id *)(v8 + 40);
  uint64_t v15 = 0;
  unsigned int v9 = [v6 deleteSnapshotForID:v5 backupUDID:v7 lastModified:&v15 error:&v14];
  objc_storeStrong((id *)(v8 + 40), v14);
  if (v9)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10018B764;
    v10[3] = &unk_1004150A8;
    uint64_t v12 = a1[9];
    id v11 = (id)a1[6];
    uint64_t v13 = v15;
    MBPerformWithCache((uint64_t)v10);
    *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = 0;
  }
}

void sub_10018B764(void *a1, void *a2)
{
  uint64_t v4 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v5 = a1[6];
  id v6 = a2;
  [v6 removeSnapshotForID:v3 backupUDID:v4 lastModified:v5];
  [v6 setLastModified:a1[6] forBackupUDID:a1[4]];
}

void sub_10018BC78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v1 + 8) == 5)
  {
    uint64_t v3 = [*(id *)(v1 + 56) objectForKey:*(void *)(a1 + 40)];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v4 = MBGetDefaultLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v7 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Canceling restore for %@", buf, 0xCu);
        _MBLog();
      }

      [v3 cancel];
    }
  }
}

id sub_10018BE70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2 == 5)
  {
    uint64_t v3 = [*(id *)(v1 + 56) objectForKey:*(void *)(a1 + 40)];
    [v3 cancel];
  }
  else
  {
    if (v2)
    {
      [*(id *)(v1 + 32) makeObjectsPerformSelector:"cancel"];
      return self;
    }
    uint64_t v3 = MBGetDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "MBS: Ignoring cancel request while idle", v5, 2u);
      _MBLog();
    }
  }

  return self;
}

void *sub_10018C040(void *result)
{
  uint64_t v1 = result[4];
  if (*(_DWORD *)(v1 + 8) == 5) {
    return [*(id *)(v1 + 32) makeObjectsPerformSelector:"cancel"];
  }
  return result;
}

BOOL sub_10018C830(id a1, id a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = objc_msgSend(a2, "backupUDID", a3);
  id v6 = MBDeviceUDID_Legacy();
  unsigned int v7 = [v5 isEqualToString:v6];

  if (v7) {
    *a4 = 1;
  }
  return v7;
}

void sub_10018CA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018CA50(void *a1, void *a2)
{
  id v19 = a2;
  uint64_t v3 = [v19 fileIDEnumeratorForSnapshotID:a1[6] backupUDID:a1[4]];
  uint64_t v4 = [v3 nextObject];
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    do
    {
      id v6 = [v19 fileForID:v5 snapshotID:a1[6] backupUDID:a1[4]];
      unsigned int v7 = *(void **)(*(void *)(a1[5] + 8) + 40);
      uint64_t v8 = [v6 domain];
      unsigned int v9 = [v8 name];
      uint64_t v10 = [v7 objectForKeyedSubscript:v9];

      if (!v10) {
        uint64_t v10 = objc_opt_new();
      }
      id v11 = [v6 domain];
      uint64_t v12 = [v11 name];
      v20[0] = v12;
      uint64_t v13 = [v6 relativePath];
      v20[1] = v13;
      id v14 = +[NSArray arrayWithObjects:v20 count:2];
      uint64_t v15 = [v14 componentsJoinedByString:@"/"];
      [v10 addObject:v15];

      id v16 = *(void **)(*(void *)(a1[5] + 8) + 40);
      unsigned __int8 v17 = [v6 domain];
      __int16 v18 = [v17 name];
      [v16 setObject:v10 forKeyedSubscript:v18];

      uint64_t v5 = [v3 nextObject];
    }
    while (v5);
  }
}

uint64_t sub_10018CDA0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 32) loadRestoreStateWithAccount:*(void *)(a1 + 40)];
  return _objc_release_x1();
}

void sub_10018D2FC(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(a1 + 32) + 8))
  {
    int v2 = MBGetDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)pid_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring restore request while busy", v25, 2u);
      _MBLog();
    }

    uint64_t v3 = +[MBError errorWithCode:14 format:@"Manager not in idle state"];
    uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
  }
  else
  {
    uint64_t v6 = os_transaction_create();
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 144);
    *(void *)(v7 + 144) = v6;

    *(_DWORD *)(*(void *)(a1 + 32) + 8) = 4;
    [*(id *)(a1 + 40) setServiceState:4];
    unsigned int v9 = [*(id *)(a1 + 40) restore];
    [v9 setState:1];

    uint64_t v10 = [*(id *)(a1 + 40) restore];
    [v10 setIsBackground:0];

    id v11 = [*(id *)(a1 + 40) restore];
    [v11 setProgress:0.0];

    uint64_t v12 = [*(id *)(a1 + 40) restore];
    [v12 setEstimatedTimeRemaining:-1];

    uint64_t v13 = [*(id *)(a1 + 40) restore];
    [v13 setError:0];

    id v14 = [MBServiceRestoreSession alloc];
    uint64_t v15 = [*(id *)(a1 + 48) persona];
    id v16 = [v15 personaIdentifier];
    unsigned __int8 v17 = [(MBServiceRestoreSession *)v14 initWithPersonaIdentifier:v16];
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(v18 + 136);
    *(void *)(v18 + 136) = v17;

    [*(id *)(*(void *)(a1 + 32) + 136) setBackupUDID:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(a1 + 32) + 136) setSnapshotID:*(void *)(a1 + 88)];
    id v20 = +[MBNotificationCenter sharedNotificationCenter];
    uint64_t v21 = kMBManagerRestoreStateChangedNotification;
    long long v22 = [*(id *)(a1 + 40) restore];
    objc_msgSend(v20, "postNotification:ifStateChanged:", v21, objc_msgSend(v22, "state"));

    uint64_t v23 = *(void **)(a1 + 32);
    uint64_t v24 = *(void *)(a1 + 64);
    [v23 _runRestoreWithSettingsContext:v24 delegateContext:0];
  }
}

void sub_10018D860(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018D87C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector()) {
    [v2 managerDidFinishRestore:*(void *)(a1 + 32)];
  }
}

void sub_10018DC1C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10018DC58(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void **)(a1[5] + 136);
  id v5 = a2;
  id v9 = [v4 backupUDID];
  uint64_t v6 = objc_msgSend(v5, "pathsToRestoreForDomain:absolutePath:pendingOnly:backupUDID:range:", @"BooksDomain", v3, 1, v9, a1[7], a1[8]);

  uint64_t v7 = *(void *)(a1[6] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_10018DD04(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) serviceDelegate];
  if (objc_opt_respondsToSelector()) {
    [v2 manager:*(void *)(a1 + 32) didFinishRestoreWithContext:*(void *)(a1 + 40)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 manager:*(void *)(a1 + 32) didFinishRestoreForPath:*(void *)(a1 + 48) withContext:*(void *)(a1 + 40)];
  }
}

void sub_10018DD90(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v26 = v5;
      __int16 v27 = 2112;
      id v28 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Batch restore failed for book at %@: %@", buf, 0x16u);
      _MBLog();
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10018DFF4;
    block[3] = &unk_100411608;
    int8x16_t v14 = *(int8x16_t *)(a1 + 32);
    id v6 = (id)v14.i64[0];
    int8x16_t v22 = vextq_s8(v14, v14, 8uLL);
    id v23 = *(id *)(a1 + 48);
    id v24 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56) + 10;
    uint64_t v10 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    id v20 = 0;
    unsigned __int8 v11 = objc_msgSend(v9, "_restoreBookWithPath:range:context:error:", v10, v8, 10, v7, &v20);
    id v12 = v20;
    if ((v11 & 1) == 0)
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10018E084;
      v16[3] = &unk_100411608;
      int8x16_t v15 = *(int8x16_t *)(a1 + 32);
      id v13 = (id)v15.i64[0];
      int8x16_t v17 = vextq_s8(v15, v15, 8uLL);
      id v18 = *(id *)(a1 + 48);
      id v19 = v12;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v16);
    }
  }
}

void sub_10018DFF4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) serviceDelegate];
  if (objc_opt_respondsToSelector()) {
    [v2 manager:*(void *)(a1 + 32) didFailRestoreForPath:*(void *)(a1 + 40) withContext:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 manager:*(void *)(a1 + 32) didFailRestoreWithContext:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
  }
}

void sub_10018E084(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) serviceDelegate];
  if (objc_opt_respondsToSelector()) {
    [v2 manager:*(void *)(a1 + 32) didFailRestoreForPath:*(void *)(a1 + 40) withContext:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 manager:*(void *)(a1 + 32) didFailRestoreWithContext:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
  }
}

void sub_10018E3A8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = [v2 account];
  uint64_t v5 = [v2 _settingsContextForBackgroundAppRestoreWithBundleID:v3 account:v4 errorCode:2 delegateContext:0];

  id v6 = [MBServiceRestoreEngine alloc];
  uint64_t v7 = [*(id *)(a1 + 32) debugContext];
  uint64_t v8 = [(MBServiceRestoreEngine *)v6 initWithSettingsContext:v5 debugContext:v7];

  id v9 = MBAllServicePlugins();
  uint64_t v10 = [(MBServiceEngine *)v8 settingsContext];
  [v10 setPlugins:v9];

  uint64_t v11 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v11 + 8) != 5)
  {
    id v24 = MBGetDefaultLog();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      pid_t v25 = [v5 restoreMode];
      *(_DWORD *)buf = 138412290;
      v43 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Ignoring background app restore cancel request while not in restore session: %@", buf, 0xCu);

      v32 = [v5 restoreMode];
      _MBLog();
    }
    uint64_t v26 = +[MBError errorWithCode:204 format:@"Manager not in restore session"];
    uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 8);
    id v23 = *(id *)(v27 + 40);
    *(void *)(v27 + 40) = v26;
    goto LABEL_22;
  }
  v33 = v8;
  v34 = v5;
  uint64_t v35 = a1;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id obj = *(id *)(v11 + 32);
  id v12 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (!v12)
  {
LABEL_13:

    id v23 = 0;
    goto LABEL_20;
  }
  id v13 = v12;
  uint64_t v14 = *(void *)v38;
LABEL_4:
  uint64_t v15 = 0;
  while (1)
  {
    if (*(void *)v38 != v14) {
      objc_enumerationMutation(obj);
    }
    id v16 = *(void **)(*((void *)&v37 + 1) + 8 * v15);
    int8x16_t v17 = [v16 settingsContext];
    id v18 = [v17 restoreMode];
    if (([v18 isBackgroundApp] & 1) == 0)
    {

      goto LABEL_11;
    }
    id v19 = [v16 settingsContext];
    id v20 = [v19 restoreMode];
    uint64_t v21 = [v20 bundleID];
    unsigned int v22 = [v21 isEqualToString:*(void *)(v35 + 40)];

    if (v22) {
      break;
    }
LABEL_11:
    if (v13 == (id)++v15)
    {
      id v13 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
      if (v13) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  [v16 cancel];
  if (([v16 waitWithTimeout:60.0] & 1) == 0) {
    objc_exception_throw([objc_alloc((Class)MBException) initWithCode:1 format:@"Timed out while canceling background app restore engine"]);
  }
  id v23 = v16;

  if (v23)
  {
    uint64_t v28 = v35;
    [*(id *)(*(void *)(v35 + 32) + 32) removeObject:v23];
    uint64_t v5 = v34;
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v5 = v34;
  uint64_t v28 = v35;
LABEL_21:
  uint64_t v8 = v33;
  uint64_t v29 = [(MBServiceRestoreEngine *)v33 run];
  uint64_t v30 = *(void *)(*(void *)(v28 + 48) + 8);
  v31 = *(void **)(v30 + 40);
  *(void *)(v30 + 40) = v29;

LABEL_22:
}

void sub_10018E8FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) != 5)
  {
    int8x16_t v17 = MBGetDefaultLog();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
LABEL_21:

      return;
    }
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v16 = @"cancel";
    }
    else {
      CFStringRef v16 = @"finish";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v24 = v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "MBS: Ignoring %@ restore request while not in background restore", buf, 0xCu);
LABEL_20:
    _MBLog();
    goto LABEL_21;
  }
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 49));
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 48));
  uint64_t v5 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(a1 + 48))
  {
    BOOL v6 = (v3 & 1) == 0;
    if ((v4 & 1) == 0) {
      BOOL v6 = 1;
    }
    if (*(_DWORD *)(v5 + 8) == 5 && v6)
    {
      int8x16_t v17 = MBGetDefaultLog();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      if (*(unsigned char *)(a1 + 48)) {
        CFStringRef v19 = @"cancel";
      }
      else {
        CFStringRef v19 = @"finish";
      }
      if (v4) {
        CFStringRef v20 = @"done";
      }
      else {
        CFStringRef v20 = @"ongoing";
      }
      *(_DWORD *)buf = 138412802;
      CFStringRef v24 = v19;
      __int16 v25 = 2112;
      CFStringRef v26 = v20;
      if (v3) {
        CFStringRef v21 = @"done";
      }
      else {
        CFStringRef v21 = @"ongoing";
      }
      __int16 v27 = 2112;
      CFStringRef v28 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "MBS: Ignoring %@ restore request while either app data restore or air traffic restore is incomplete. ATC: %@, IX: %@", buf, 0x20u);
      goto LABEL_20;
    }
  }
  if (([*(id *)(v5 + 136) isMBSSession] & 1) == 0) {
    __assert_rtn("-[MBServiceManager _finishRestore:]_block_invoke", "MBServiceManager.m", 1373, "_restoreSession.isMBSSession");
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 8) = 6;
  [*(id *)(a1 + 40) setServiceState:6];
  uint64_t v8 = [*(id *)(a1 + 40) restore];
  [v8 setState:3];

  id v9 = [*(id *)(a1 + 40) restore];
  [v9 setIsBackground:1];

  uint64_t v10 = objc_opt_class();
  uint64_t v11 = [*(id *)(a1 + 40) restore];
  [v10 saveRestoreStateInfo:v11];

  id v12 = +[MBNotificationCenter sharedNotificationCenter];
  uint64_t v13 = kMBManagerRestoreStateChangedNotification;
  uint64_t v14 = [*(id *)(a1 + 40) restore];
  objc_msgSend(v12, "postNotification:ifStateChanged:", v13, objc_msgSend(v14, "state"));

  [*(id *)(*(void *)(a1 + 32) + 136) setFinishing:1];
  [*(id *)(*(void *)(a1 + 32) + 136) setCancelled:*(unsigned __int8 *)(a1 + 48)];
  [*(id *)(*(void *)(a1 + 32) + 136) saveAtPath:@"/var/mobile/Library/Preferences/com.apple.MobileBackup.plist"];
  uint64_t v15 = [*(id *)(a1 + 32) lockManager];
  [v15 releaseLockAsync];

  if (*(unsigned char *)(a1 + 48))
  {
    id v22 = [*(id *)(a1 + 32) delegate];
    [v22 managerDidCancelRestore:*(void *)(a1 + 32)];
  }
}

void sub_10018EE4C(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 40) + 8) = 0;
  [*(id *)(a1 + 32) setServiceState:0];
  uint64_t v2 = [*(id *)(a1 + 32) restore];
  [v2 setState:4];

  unsigned __int8 v3 = [*(id *)(a1 + 32) restore];
  [v3 setIsBackground:1];

  unsigned __int8 v4 = objc_opt_class();
  uint64_t v5 = [*(id *)(a1 + 32) restore];
  [v4 saveRestoreStateInfo:v5];

  BOOL v6 = +[MBNotificationCenter sharedNotificationCenter];
  uint64_t v7 = kMBManagerRestoreStateChangedNotification;
  uint64_t v8 = [*(id *)(a1 + 32) restore];
  objc_msgSend(v6, "postNotification:ifStateChanged:", v7, objc_msgSend(v8, "state"));

  id v9 = [*(id *)(*(void *)(a1 + 40) + 136) startDate];

  if (v9)
  {
    uint64_t v10 = +[NSDate date];
    uint64_t v11 = [*(id *)(*(void *)(a1 + 40) + 136) startDate];
    [v10 timeIntervalSinceDate:v11];
    uint64_t v13 = v12;

    LODWORD(v11) = [*(id *)(*(void *)(a1 + 40) + 136) wasCancelled];
    uint64_t v14 = MBGetDefaultLog();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
    if (v11)
    {
      if (v15)
      {
        *(_DWORD *)buf = 134217984;
        id v31 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Restore cancelled after %g seconds", buf, 0xCu);
LABEL_7:
        __int16 v27 = v13;
        _MBLog();
      }
    }
    else if (v15)
    {
      *(_DWORD *)buf = 134217984;
      id v31 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Successful restore took %g seconds", buf, 0xCu);
      goto LABEL_7;
    }
  }
  CFStringRef v16 = +[MBLockdown connect];
  id v29 = 0;
  unsigned __int8 v17 = [v16 setObject:@"RestoredFromiCloudBackup" forDomain:@"com.apple.purplebuddy" andKey:@"SetupState" withError:&v29];
  id v18 = v29;
  if ((v17 & 1) == 0)
  {
    CFStringRef v19 = MBGetDefaultLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v31 = v18;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Error setting lockdown setup state key: %@", buf, 0xCu);
      id v28 = v18;
      _MBLog();
    }
  }
  objc_msgSend(v16, "disconnect", v28);
  uint64_t v20 = *(void *)(a1 + 40);
  CFStringRef v21 = *(void **)(v20 + 192);
  *(void *)(v20 + 192) = 0;

  [*(id *)(*(void *)(a1 + 40) + 80) setMonitoring:0];
  uint64_t v22 = *(void *)(a1 + 40);
  id v23 = *(void **)(v22 + 80);
  *(void *)(v22 + 80) = 0;

  CFStringRef v24 = *(CFRunLoopTimerRef **)(a1 + 40);
  if (v24[14])
  {
    CFRunLoopTimerInvalidate(v24[14]);
    Main = CFRunLoopGetMain();
    CFRunLoopRemoveTimer(Main, *(CFRunLoopTimerRef *)(*(void *)(a1 + 40) + 112), kCFRunLoopCommonModes);
    CFRelease(*(CFTypeRef *)(*(void *)(a1 + 40) + 112));
    *(void *)(*(void *)(a1 + 40) + 112) = 0;
    CFStringRef v24 = *(CFRunLoopTimerRef **)(a1 + 40);
  }
  [(CFRunLoopTimerRef *)v24 _clearRestoreSession];
  CFStringRef v26 = +[MBDaemon sharedDaemon];
  [v26 releaseWorkAssertion:*(void *)(a1 + 48)];

  [*(id *)(a1 + 40) _disableHyperLogging];
}

void sub_10018F380(id a1, int a2)
{
  if (!a2)
  {
    id v4 = +[LSApplicationWorkspace defaultWorkspace];
    unsigned __int8 v3 = +[NSURL URLWithString:@"prefs:root=General&path=USAGE"];
    [v4 openSensitiveURL:v3 withOptions:0];
  }
}

void sub_10018F4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018F514(uint64_t a1, void *a2)
{
  id v3 = a2;
  MBDeviceUDID_Legacy();
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = [v3 backupForUDID:v7 lastModified:0];

  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

BOOL sub_10018F610(id a1, id a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = objc_msgSend(a2, "backupUDID", a3, a4);
  uint64_t v5 = MBDeviceUDID_Legacy();
  unsigned __int8 v6 = [v4 isEqualToString:v5];

  return v6;
}

void sub_10018F8F8(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 136))
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v31 = 0x3032000000;
    v32 = sub_10018B140;
    v33 = sub_10018B150;
    id v34 = 0;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10018FC1C;
    v22[3] = &unk_100415238;
    p_long long buf = &buf;
    id v23 = *(id *)(a1 + 40);
    id v2 = *(id *)(a1 + 48);
    char v28 = *(unsigned char *)(a1 + 88);
    uint64_t v3 = *(void *)(a1 + 32);
    id v24 = v2;
    uint64_t v25 = v3;
    long long v27 = *(_OWORD *)(a1 + 72);
    MBPerformWithCache((uint64_t)v22);
    id v4 = objc_alloc((Class)NSMutableArray);
    id v5 = objc_msgSend(v4, "initWithCapacity:", objc_msgSend(*(id *)(*((void *)&buf + 1) + 40), "count"));
    uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v8 = *(id *)(*((void *)&buf + 1) + 40);
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v29 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v8);
          }
          id v12 = +[MBFileInfo fileInfoWithRestorable:*(void *)(*((void *)&v18 + 1) + 8 * (void)v11)];
          [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v12];

          uint64_t v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v8 countByEnumeratingWithState:&v18 objects:v29 count:16];
      }
      while (v9);
    }

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    uint64_t v13 = MBGetDefaultLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "No active restore session for request for restore files for %@", (uint8_t *)&buf, 0xCu);
      _MBLog();
    }

    uint64_t v15 = +[MBError errorWithCode:1 format:@"No active restore session for request"];
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
    unsigned __int8 v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
  }
}

void sub_10018FBEC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10018FC1C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v6 = *(void **)(*(void *)(a1 + 48) + 136);
  id v7 = a2;
  id v11 = [v6 backupUDID];
  uint64_t v8 = objc_msgSend(v7, "filesToRestoreForDomainName:relativePath:pendingOnly:backupUDID:range:", v3, v4, v5, v11, *(void *)(a1 + 64), *(void *)(a1 + 72));

  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_10018FDDC(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 136))
  {
    id v2 = objc_alloc((Class)MBDomainManager);
    uint64_t v3 = [*(id *)(a1 + 48) persona];
    uint64_t v4 = [v2 initWithPersona:v3];

    uint64_t v5 = *(void *)(a1 + 40);
    id v23 = 0;
    uint64_t v6 = [v4 domainForPath:v5 relativePath:&v23];
    id v7 = v23;
    if (!v6)
    {
      uint64_t v15 = MBGetDefaultLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Domain not found for request for whether file exists: %@", buf, 0xCu);
        _MBLog();
      }
      goto LABEL_14;
    }
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1001900E0;
    v18[3] = &unk_100415288;
    uint64_t v22 = *(void *)(a1 + 56);
    long long v19 = v6;
    id v8 = v7;
    uint64_t v9 = *(void *)(a1 + 32);
    id v20 = v8;
    uint64_t v21 = v9;
    MBPerformWithCache((uint64_t)v18);
    int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    id v11 = MBGetDefaultLog();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    if (v10)
    {
      if (v12)
      {
        uint64_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Restore file exists: %@", buf, 0xCu);
LABEL_12:
        _MBLog();
      }
    }
    else if (v12)
    {
      uint64_t v17 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v25 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Restore file does not exist: %@", buf, 0xCu);
      goto LABEL_12;
    }

    uint64_t v15 = v19;
LABEL_14:

    goto LABEL_15;
  }
  uint64_t v4 = MBGetDefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v25 = v14;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "No active restore session for request for whether file exists: %@", buf, 0xCu);
    _MBLog();
  }
LABEL_15:
}

void sub_1001900E0(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[4];
  id v4 = a2;
  id v7 = [v3 name];
  uint64_t v5 = a1[5];
  uint64_t v6 = [*(id *)(a1[6] + 136) backupUDID];
  LOBYTE(v5) = [v4 restoreFileExistsWithDomainName:v7 relativePath:v5 backupUDID:v6];

  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = v5;
}

void sub_1001902A0(void *a1)
{
  if (*(void *)(a1[4] + 136))
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1001904EC;
    v13[3] = &unk_1004152D8;
    id v2 = (void *)a1[5];
    uint64_t v16 = a1[6];
    uint64_t v3 = v2;
    uint64_t v4 = a1[4];
    uint64_t v14 = v3;
    uint64_t v15 = v4;
    uint64_t v17 = a1[7];
    MBPerformWithCache((uint64_t)v13);
    int v5 = *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24);
    uint64_t v6 = MBGetDefaultLog();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(*(void *)(a1[7] + 8) + 24);
        uint64_t v9 = a1[5];
        *(_DWORD *)long long buf = 134218242;
        uint64_t v19 = v8;
        __int16 v20 = 2112;
        uint64_t v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Restore data exists of size %{bytes}llu for app with bundle ID %@", buf, 0x16u);
LABEL_9:
        _MBLog();
      }
    }
    else if (v7)
    {
      uint64_t v12 = a1[5];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Restore data does not exist for app with bundle ID %@", buf, 0xCu);
      goto LABEL_9;
    }

    int v10 = v14;
    goto LABEL_11;
  }
  int v10 = MBGetDefaultLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = a1[5];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "No active restore session for request for whether app data exists for %@", buf, 0xCu);
    _MBLog();
  }
LABEL_11:
}

void sub_1001904EC(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v6 = +[MBDomain nameWithAppID:v3];
  int v5 = [*(id *)(a1[5] + 136) backupUDID];
  LOBYTE(v3) = [v4 restoreFilesExistForDomainName:v6 backupUDID:v5 size:*(void *)(a1[7] + 8) + 24];

  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v3;
}

void sub_1001907E4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id sub_100190824(uint64_t a1, void *a2)
{
  return _[a2 prioritizeRestoreFileWithFileID:*(void *)(a1 + 32)];
}

void sub_100190D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100190DB8(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = [*(id *)(a1 + 32) _domainInfoForName:*(void *)(a1 + 40) cache:a2 appManager:*(void *)(a1 + 48)];
  return _objc_release_x1();
}

void sub_100191204(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = MBDeviceUDID_Legacy();
  int v5 = [v3 domainNamesForBackupUDID:v4];

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v26;
    CFStringRef v10 = @"BooksDomain";
    id v23 = v6;
    id v24 = v3;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v26 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        uint64_t v13 = [*(id *)(a1 + 32) _domainInfoForName:v12 cache:v3 appManager:*(void *)(a1 + 40)];
        if ([v12 isEqualToString:v10])
        {
          if ([v6 containsObject:@"AppDomain-com.apple.iBooks"])
          {
            [v13 setRemoteSize:0];
            [v13 setLocalSize:0];
          }
          else if ((unint64_t)[v13 size] > 0x100000)
          {
            CFStringRef v14 = v10;
            id v15 = [v13 remoteSize];
            uint64_t v16 = v9;
            id v17 = [v13 localSize];
            id v18 = [v13 isEnabled];
            id v19 = [v13 isRestricted];
            id v20 = v15;
            CFStringRef v10 = v14;
            id v6 = v23;
            id v21 = v17;
            uint64_t v9 = v16;
            uint64_t v22 = +[MBDomainInfo domainInfoWithName:@"AppDomain-com.apple.iBooks" systemApp:0 remoteSize:v20 localSize:v21 enabled:v18 restricted:v19];
            [*(id *)(a1 + 48) addObject:v22];
            [v13 setRemoteSize:0];
            [v13 setLocalSize:0];

            id v3 = v24;
          }
        }
        [*(id *)(a1 + 48) addObject:v13];
      }
      id v8 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v8);
  }
}

int64_t sub_100191458(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = [v5 size];
  if (v6 >= [v4 size])
  {
    id v8 = [v5 size];
    int64_t v7 = v8 != [v4 size];
  }
  else
  {
    int64_t v7 = -1;
  }

  return v7;
}

void sub_10019181C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_100191864(void *a1, void *a2)
{
  id v12 = a2;
  uint64_t v3 = a1[4];
  id v4 = MBDeviceUDID_Legacy();
  [v12 removeDomainName:v3 backupUDID:v4 lastModified:a1[7]];

  [v12 updateFileChangesAfterRemovingDomainName:a1[4]];
  unsigned int v5 = [v12 isDomainNameEnabled:a1[4]];
  if (v5)
  {
    id v6 = +[NSSet setWithObject:a1[4]];
    [v12 addDisabledDomainNames:v6 restricted:0];
  }
  [v12 fileChangeCount:0 size:*(void *)(a1[5] + 8) + 24];
  int64_t v7 = MBDeviceUDID_Legacy();
  uint64_t v8 = [v12 backupForUDID:v7 lastModified:0];
  uint64_t v9 = *(void *)(a1[6] + 8);
  CFStringRef v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (v5)
  {
    uint64_t v11 = +[NSSet setWithObject:a1[4]];
    [v12 removeDisabledDomainNames:v11];
  }
}

void sub_100191C04(void *a1)
{
  if ([*(id *)(a1[4] + 32) count])
  {
    [*(id *)(a1[4] + 32) makeObjectsPerformSelector:"cancel"];
    id v2 = *(NSObject **)(a1[4] + 24);
    dispatch_time_t v3 = dispatch_time(0, 60000000000);
    if (dispatch_group_wait(v2, v3)) {
      objc_exception_throw([objc_alloc((Class)MBException) initWithCode:1 format:@"Timed out while canceling engine"]);
    }
  }
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = *(void *)(a1[8] + 8);
  id obj = *(id *)(v7 + 40);
  unsigned __int8 v8 = [v4 _removeDomainName:v5 service:v6 error:&obj];
  objc_storeStrong((id *)(v7 + 40), obj);
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = v8;
  if (*(unsigned char *)(*(void *)(a1[7] + 8) + 24)
    && [(id)a1[5] isEqualToString:@"AppDomain-com.apple.iBooks"])
  {
    uint64_t v9 = (void *)a1[4];
    uint64_t v10 = a1[6];
    uint64_t v11 = *(void *)(a1[8] + 8);
    id v17 = *(id *)(v11 + 40);
    unsigned __int8 v12 = [v9 _removeDomainName:@"BooksDomain" service:v10 error:&v17];
    objc_storeStrong((id *)(v11 + 40), v17);
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = v12;
  }
  if (!*(unsigned char *)(*(void *)(a1[7] + 8) + 24))
  {
    uint64_t v13 = MBGetDefaultLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = a1[5];
      id v15 = +[MBError descriptionForError:*(void *)(*(void *)(a1[8] + 8) + 40)];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v20 = v14;
      __int16 v21 = 2112;
      uint64_t v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Removing %@ failed: %@", buf, 0x16u);

      uint64_t v16 = +[MBError descriptionForError:*(void *)(*(void *)(a1[8] + 8) + 40)];
      _MBLog();
    }
  }
}

void sub_10019251C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x100192330);
  }
  _Unwind_Resume(exception_object);
}

void sub_100192B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x100192A84);
  }
  _Unwind_Resume(exception_object);
}

void sub_100192BB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  MBDeviceUDID_Legacy();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [v3 backupForUDID:v5 lastModified:0];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4 != 0;
}

void sub_100193C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v49 - 192), 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_100193C98(uint64_t a1, char a2, id obj)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), obj);
  id v5 = obj;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100193D08(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = [v5 lastObject];

  if (v6)
  {
    uint64_t v7 = [v5 lastObject];
    [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v8];
  }
}

void sub_100193D9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = MBGetDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = +[NSNumber numberWithBool:a2];
    *(_DWORD *)long long buf = 138412546;
    uint64_t v13 = v7;
    __int16 v14 = 2112;
    id v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Finished saving account: %@, %@", buf, 0x16u);

    uint64_t v11 = +[NSNumber numberWithBool:a2];
    _MBLog();
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v5;
  id v10 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100193FE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = MBGetDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = +[NSNumber numberWithBool:a2];
    *(_DWORD *)long long buf = 138412546;
    id v10 = v7;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Finished disabling Keychain Sync: %@: %@", buf, 0x16u);

    uint64_t v8 = +[NSNumber numberWithBool:a2];
    _MBLog();
  }
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2);
}

void sub_100194C34(uint64_t a1)
{
  id v2 = +[MBUserNotification notification];
  [v2 setIdentifier:@"DidFinishRestore"];
  id v3 = +[NSDate distantFuture];
  [v3 timeIntervalSinceReferenceDate];
  objc_msgSend(v2, "setInterval:");

  id v4 = MBLocalizedStringFromTable();
  [v2 setTitle:v4];

  id v5 = MBLocalizedStringFromTable();
  [v2 setBody:v5];

  uint64_t v6 = MBLocalizedStringFromTable();
  [v2 setButton:v6];

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100194E30;
  v14[3] = &unk_100411128;
  id v15 = *(id *)(a1 + 32);
  [v2 setDisplayedBlock:v14];
  uint64_t v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472;
  __int16 v11 = sub_100194E48;
  id v12 = &unk_100414E20;
  id v13 = *(id *)(a1 + 32);
  [v2 setCompletionBlock:&v9];
  uint64_t v7 = +[MBUserNotificationManager sharedManager];
  uint64_t v8 = [*(id *)(a1 + 40) account];
  [v7 presentUserNotification:v2 account:v8];
}

id sub_100194E30(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:kMBManagerRestoreCompleteAlertStateChangedNotification ifStateChanged:1];
}

id sub_100194E48(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:kMBManagerRestoreCompleteAlertStateChangedNotification ifStateChanged:0];
}

void sub_1001952D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) != 5)
  {
    uint64_t v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(*(void *)(a1 + 32) + 8);
      uint64_t v10 = [*(id *)(a1 + 40) restoreMode];
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)long long v40 = v9;
      *(_WORD *)&v40[4] = 2114;
      *(void *)&v40[6] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Ignoring background restore request while not in restore session (%d): %{public}@", buf, 0x12u);

      uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 32) + 8);
      [*(id *)(a1 + 40) restoreMode];
      v33 = uint64_t v31 = v11;
      _MBLog();
    }
    CFStringRef v6 = @"Manager not in restore session";
    uint64_t v7 = 204;
    goto LABEL_9;
  }
  id v3 = [*(id *)(v2 + 56) objectForKey:*(void *)(a1 + 48)];

  if (v3)
  {
    id v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412290;
      *(void *)long long v40 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ignoring multiple concurrent request made from client %@", buf, 0xCu);
      uint64_t v31 = *(void *)(a1 + 48);
      _MBLog();
    }

    CFStringRef v6 = @"Restore request exists for client";
    uint64_t v7 = 3;
LABEL_9:
    uint64_t v12 = +[MBError errorWithCode:format:](MBError, "errorWithCode:format:", v7, v6, v31, v33);
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    __int16 v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    return;
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v15 = *(id *)(*(void *)(a1 + 32) + 32);
  id v16 = [v15 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v35;
    while (2)
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(void *)v35 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        __int16 v21 = [*(id *)(a1 + 40) restoreMode];
        uint64_t v22 = [v20 settingsContext];
        id v23 = [v22 restoreMode];
        unsigned int v24 = [v21 isEqual:v23];

        if (v24)
        {
          long long v25 = MBGetDefaultLog();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            long long v26 = [*(id *)(a1 + 40) restoreMode];
            *(_DWORD *)long long buf = 138412290;
            *(void *)long long v40 = v26;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Ignoring duplicate background restore request: %@", buf, 0xCu);

            v32 = [*(id *)(a1 + 40) restoreMode];
            _MBLog();
          }
          long long v27 = [*(id *)(a1 + 40) restoreMode];
          uint64_t v28 = +[MBError errorWithCode:3, @"Manager already background restoring %@", v27 format];
          uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8);
          uint64_t v30 = *(void **)(v29 + 40);
          *(void *)(v29 + 40) = v28;

          *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
          return;
        }
      }
      id v17 = [v15 countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (v17) {
        continue;
      }
      break;
    }
  }

  [*(id *)(a1 + 32) _runRestoreWithSettingsContext:*(void *)(a1 + 40) delegateContext:*(void *)(a1 + 48)];
}

void sub_1001960D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_100196118(id a1)
{
}

void sub_100196148(uint64_t a1)
{
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.MobileBackup.RestoreEngineStateChange", 0);
  id v3 = objc_alloc_init(MBDurationEstimation);
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  int v22 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001962C8;
  v10[3] = &unk_1004154C0;
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void **)(a1 + 32);
  CFStringRef v6 = *(void **)(a1 + 48);
  void v10[4] = *(void *)(a1 + 40);
  uint64_t v16 = v4;
  char v20 = *(unsigned char *)(a1 + 96);
  id v11 = v6;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v19 = *(void *)(a1 + 88);
  id v12 = v7;
  uint64_t v17 = v8;
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  uint64_t v18 = v21;
  int v9 = v3;
  id v15 = v9;
  [v5 runWithQueue:v2 stateChange:v10];

  _Block_object_dispose(v21, 8);
}

void sub_1001962B0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1001962C8(uint64_t a1, unsigned int a2, void *a3, double a4)
{
  id v7 = a3;
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 16));
  uint64_t v8 = MBGetDefaultLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a2 > 4) {
      CFStringRef v9 = @"Unknown";
    }
    else {
      CFStringRef v9 = *(&off_1004155A0 + (int)a2);
    }
    *(_DWORD *)long long buf = 138412546;
    CFStringRef v82 = v9;
    __int16 v83 = 2048;
    double v84 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Engine callback with state %@ progress %0.3f", buf, 0x16u);
    if (a2 > 4) {
      CFStringRef v10 = @"Unknown";
    }
    else {
      CFStringRef v10 = *(&off_1004155A0 + (int)a2);
    }
    double v41 = a4;
    CFStringRef v40 = v10;
    _MBLog();
  }

  [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) resume];
  if (*(unsigned char *)(a1 + 112))
  {
    id v11 = *(NSObject **)(*(void *)(a1 + 32) + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100196AB8;
    block[3] = &unk_100412A88;
    id v79 = *(id *)(a1 + 40);
    double v80 = a4;
    dispatch_sync(v11, block);
  }
  id v12 = objc_msgSend(*(id *)(a1 + 48), "settingsContext", v40, *(void *)&v41);
  id v13 = [v12 internalDelegate];

  if (!v13)
  {
    id v13 = [*(id *)(a1 + 32) delegate];
  }
  switch(a2)
  {
    case 0u:
      id v15 = +[MBDaemon sharedDaemon];
      [v15 holdWorkAssertion:*(void *)(a1 + 104)];

      [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) hold];
      v72[0] = _NSConcreteStackBlock;
      v72[1] = 3221225472;
      v72[2] = sub_100196B10;
      v72[3] = &unk_100412AD8;
      id v16 = *(id *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 32);
      id v73 = v16;
      uint64_t v74 = v17;
      id v75 = *(id *)(a1 + 64);
      id v76 = v13;
      double v77 = a4;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v72);

      uint64_t v18 = v73;
      goto LABEL_31;
    case 1u:
      if (*(unsigned char *)(a1 + 112))
      {
        uint64_t v19 = *(NSObject **)(*(void *)(a1 + 32) + 16);
        v70[0] = _NSConcreteStackBlock;
        v70[1] = 3221225472;
        v70[2] = sub_100196BC0;
        v70[3] = &unk_100411128;
        id v71 = *(id *)(a1 + 40);
        dispatch_sync(v19, v70);
      }
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) != 1) {
        [*(id *)(a1 + 72) reset];
      }
      *(float *)&double v14 = a4;
      if ([*(id *)(a1 + 72) shouldUpdateWithProgress:v14])
      {
        v63[0] = _NSConcreteStackBlock;
        v63[1] = 3221225472;
        v63[2] = sub_100196C08;
        v63[3] = &unk_100415470;
        id v20 = *(id *)(a1 + 56);
        uint64_t v21 = *(void *)(a1 + 32);
        id v64 = v20;
        uint64_t v65 = v21;
        double v69 = a4;
        id v66 = *(id *)(a1 + 64);
        id v67 = v13;
        id v68 = *(id *)(a1 + 72);
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, v63);
      }
      if (!*(unsigned char *)(a1 + 112)) {
        goto LABEL_32;
      }
      id v22 = [*(id *)(a1 + 72) minutesRemaining];
      id v23 = *(NSObject **)(*(void *)(a1 + 32) + 16);
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472;
      v60[2] = sub_100196CEC;
      v60[3] = &unk_100412A88;
      id v61 = *(id *)(a1 + 40);
      id v62 = v22;
      dispatch_sync(v23, v60);
      uint64_t v18 = v61;
      goto LABEL_31;
    case 2u:
      if (!*(unsigned char *)(a1 + 112)) {
        goto LABEL_30;
      }
      unsigned int v24 = *(NSObject **)(*(void *)(a1 + 32) + 16);
      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472;
      v57[2] = sub_100196D3C;
      v57[3] = &unk_1004110B0;
      id v25 = *(id *)(a1 + 40);
      uint64_t v26 = *(void *)(a1 + 32);
      id v58 = v25;
      uint64_t v59 = v26;
      dispatch_sync(v24, v57);
      long long v27 = v58;
      goto LABEL_29;
    case 3u:
      if (!*(unsigned char *)(a1 + 112)) {
        goto LABEL_30;
      }
      uint64_t v28 = *(NSObject **)(*(void *)(a1 + 32) + 16);
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472;
      v55[2] = sub_100196FF0;
      v55[3] = &unk_100411128;
      id v56 = *(id *)(a1 + 40);
      dispatch_sync(v28, v55);
      long long v27 = v56;
      goto LABEL_29;
    case 4u:
      if (*(unsigned char *)(a1 + 112))
      {
        uint64_t v29 = *(NSObject **)(*(void *)(a1 + 32) + 16);
        v51[0] = _NSConcreteStackBlock;
        v51[1] = 3221225472;
        v51[2] = sub_100197038;
        v51[3] = &unk_100411358;
        id v52 = *(id *)(a1 + 40);
        id v30 = v7;
        uint64_t v31 = *(void *)(a1 + 32);
        id v53 = v30;
        uint64_t v54 = v31;
        dispatch_sync(v29, v51);

        long long v27 = v52;
LABEL_29:
      }
      else
      {
        [v7 code];
        if ((MBIsTransientErrorCode() & 1) == 0)
        {
          uint64_t v38 = *(void *)(a1 + 32);
          long long v39 = *(NSObject **)(v38 + 16);
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472;
          v50[2] = sub_1001970C8;
          v50[3] = &unk_100411128;
          v50[4] = v38;
          dispatch_async(v39, v50);
        }
      }
LABEL_30:
      v32 = +[MBDaemon sharedDaemon];
      [v32 releaseWorkAssertion:*(void *)(a1 + 104)];

      [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) drop];
      uint64_t v33 = *(void *)(a1 + 32);
      long long v34 = *(NSObject **)(v33 + 16);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      v42[2] = sub_100197124;
      v42[3] = &unk_100415498;
      v42[4] = v33;
      id v43 = *(id *)(a1 + 48);
      id v44 = *(id *)(a1 + 56);
      unsigned int v49 = a2;
      id v45 = *(id *)(a1 + 64);
      id v46 = v13;
      id v47 = *(id *)(a1 + 72);
      id v48 = v7;
      dispatch_async(v34, v42);

      uint64_t v18 = v43;
LABEL_31:

LABEL_32:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = a2;
      long long v35 = +[MBNotificationCenter sharedNotificationCenter];
      uint64_t v36 = kMBManagerRestoreStateChangedNotification;
      long long v37 = [*(id *)(a1 + 40) restore];
      objc_msgSend(v35, "postNotification:ifStateChanged:", v36, objc_msgSend(v37, "state"));

      return;
    default:
      goto LABEL_32;
  }
}

void sub_100196AB8(uint64_t a1)
{
  float v1 = *(double *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) restore];
  *(float *)&double v2 = v1;
  [v3 setProgress:v2];
}

uint64_t sub_100196B10(uint64_t a1)
{
  if (*(void *)(a1 + 32) && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    double v2 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    return (uint64_t)_[v2 _updateProgressForCoordinatorWithBundleID:v3 progress:v4 account:0.0];
  }
  else
  {
    uint64_t result = objc_opt_respondsToSelector();
    if (result)
    {
      uint64_t v5 = *(void **)(a1 + 56);
      double v6 = *(double *)(a1 + 64);
      *(float *)&double v6 = v6;
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      return (uint64_t)[v5 manager:v7 didUpdateProgress:-1 estimatedTimeRemaining:v8 context:v6];
    }
  }
  return result;
}

void sub_100196BC0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) restore];
  [v1 setState:2];
}

uint64_t sub_100196C08(uint64_t a1)
{
  if (*(void *)(a1 + 32) && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    double v2 = *(void **)(a1 + 40);
    double v4 = *(double *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 48);
    return (uint64_t)_[v2 _updateProgressForCoordinatorWithBundleID:v3 progress:v5 account:v4];
  }
  else
  {
    uint64_t result = objc_opt_respondsToSelector();
    if (result)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      float v7 = *(double *)(a1 + 72);
      uint64_t v8 = *(void **)(a1 + 56);
      id v9 = [*(id *)(a1 + 64) minutesRemaining];
      uint64_t v10 = *(void *)(a1 + 32);
      *(float *)&double v11 = v7;
      return (uint64_t)[v8 manager:v6 didUpdateProgress:v9 estimatedTimeRemaining:v10 context:v11];
    }
  }
  return result;
}

void sub_100196CEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) restore];
  [v2 setEstimatedTimeRemaining:v1];
}

void sub_100196D3C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) restore];
  [v2 setState:4];

  uint64_t v3 = [*(id *)(a1 + 32) restore];
  LODWORD(v4) = 1.0;
  [v3 setProgress:v4];

  uint64_t v5 = [*(id *)(a1 + 32) restore];
  [v5 setEstimatedTimeRemaining:0];

  uint64_t v6 = MBDeviceClass();
  unsigned __int8 v7 = [v6 isEqualToString:@"AppleTV"];

  if ((v7 & 1) == 0)
  {
    [*(id *)(a1 + 40) _enableBackgroundHyperLogging];
    uint64_t v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Saving restore information for background restore", buf, 2u);
      _MBLog();
    }

    [*(id *)(a1 + 40) _prepareForBackgroundRestore];
  }
  id v9 = MBGetDefaultLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Finished foreground restore, finalizing restore directory.", buf, 2u);
    _MBLog();
  }

  uint64_t v10 = [*(id *)(a1 + 40) account];
  double v11 = [v10 persona];

  id v17 = 0;
  unsigned __int8 v12 = [v11 finalizeRestoreDirectoriesWithError:&v17];
  id v13 = v17;
  if ((v12 & 1) == 0)
  {
    id v16 = MBGetDefaultLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to move restore sandboxes into place: %@", buf, 0xCu);
      _MBLog();
    }

    objc_exception_throw([objc_alloc((Class)MBException) initWithCode:1, @"Failed to move restore sandboxes into place: %@", v13 format]);
  }
  buf[0] = 0;
  unsigned int v14 = [v11 getBooleanValueForKey:@"RestoreShouldReboot" keyExists:buf];
  if (buf[0] && v14)
  {
    id v15 = +[MBDaemon sharedDaemon];
    [v15 reboot:0];
  }
}

void sub_100196FF0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) restore];
  [v1 setState:5];
}

id sub_100197038(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) restore];
  [v2 setState:6];

  uint64_t v3 = *(void *)(a1 + 40);
  double v4 = [*(id *)(a1 + 32) restore];
  [v4 setError:v3];

  *(_DWORD *)(*(void *)(a1 + 48) + 8) = 0;
  [*(id *)(a1 + 32) setServiceState:0];
  uint64_t v5 = *(void **)(a1 + 48);
  return [v5 _clearRestoreSession];
}

id sub_1001970C8(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 136);
  if (result)
  {
    id result = [result isFinishing];
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(void **)(a1 + 32);
      return _[v3 _alertUserOfIncompleteRestore];
    }
  }
  return result;
}

void sub_100197124(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 48)) {
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "removeObjectForKey:");
  }
  int v2 = *(_DWORD *)(a1 + 88);
  if (v2 == 4)
  {
    unsigned __int8 v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Engine failed %@", buf, 0xCu);
      _MBLog();
    }

    uint64_t v3 = (id *)v11;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100197438;
    v11[3] = &unk_100412B78;
    id v9 = *(id *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 32);
    v11[4] = v9;
    v11[5] = v10;
    v11[6] = *(id *)(a1 + 56);
    v11[7] = *(id *)(a1 + 64);
    uint64_t v6 = (id *)(a1 + 80);
  }
  else
  {
    if (v2 != 2) {
      return;
    }
    uint64_t v3 = (id *)v12;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10019734C;
    v12[3] = &unk_100412B78;
    id v4 = *(id *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 32);
    v12[4] = v4;
    v12[5] = v5;
    v12[6] = *(id *)(a1 + 56);
    v12[7] = *(id *)(a1 + 64);
    uint64_t v6 = (id *)(a1 + 72);
  }
  v3[8] = *v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
}

uint64_t sub_10019734C(uint64_t a1)
{
  if (*(void *)(a1 + 32) && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v2 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    return (uint64_t)_[v2 _stopTrackingCoordinatorWithBundleID:v3 success:1 account:v4];
  }
  else
  {
    if (objc_opt_respondsToSelector())
    {
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void **)(a1 + 56);
      id v7 = [*(id *)(a1 + 64) minutesRemaining];
      LODWORD(v8) = 1.0;
      [v6 manager:v5 didUpdateProgress:v7 estimatedTimeRemaining:*(void *)(a1 + 32) context:v8];
    }
    uint64_t result = objc_opt_respondsToSelector();
    if (result)
    {
      id v9 = *(void **)(a1 + 56);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      return (uint64_t)[v9 manager:v10 didFinishRestoreWithContext:v11];
    }
  }
  return result;
}

uint64_t sub_100197438(void *a1)
{
  if (a1[4] && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v3 = a1[4];
    int v2 = (void *)a1[5];
    uint64_t v4 = a1[6];
    return (uint64_t)_[v2 _stopTrackingCoordinatorWithBundleID:v3 success:0 account:v4];
  }
  else
  {
    uint64_t result = objc_opt_respondsToSelector();
    if (result)
    {
      uint64_t v6 = a1[4];
      uint64_t v5 = a1[5];
      id v7 = (void *)a1[7];
      uint64_t v8 = a1[8];
      return (uint64_t)[v7 manager:v5 didFailRestoreWithContext:v6 error:v8];
    }
  }
  return result;
}

void sub_100197758(uint64_t a1)
{
  id v1 = *(_DWORD **)(a1 + 32);
  if ((v1[2] - 4) <= 2)
  {
    id v2 = [v1 lockManager];
    [v2 releaseLockAsync];
  }
}

void sub_100197958(id a1, int a2)
{
  if (!a2)
  {
    id v4 = +[LSApplicationWorkspace defaultWorkspace];
    uint64_t v3 = +[NSURL URLWithString:@"prefs:root=WIFI"];
    [v4 openSensitiveURL:v3 withOptions:0];
  }
}

void sub_100197B1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40))
  {
    *(unsigned char *)(v2 + 88) = 0;
    id v7 = +[MBUserNotificationManager sharedManager];
    uint64_t v3 = [*(id *)(a1 + 32) account];
    [v7 cancelNotificationWithIdentifier:@"NeedsWifiAlert" account:v3];
  }
  else if (!*(unsigned char *)(v2 + 88))
  {
    *(unsigned char *)(v2 + 88) = 1;
    dispatch_time_t v4 = dispatch_time(0, 30000000000);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(NSObject **)(v5 + 96);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100197C40;
    block[3] = &unk_100411128;
    void block[4] = v5;
    dispatch_after(v4, v6, block);
  }
}

unsigned char *sub_100197C40(uint64_t a1)
{
  uint64_t v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 88)) {
      uint64_t v3 = "Y";
    }
    else {
      uint64_t v3 = "N";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Timer fired, armed state: %s", buf, 0xCu);
    _MBLog();
  }

  uint64_t result = *(unsigned char **)(a1 + 32);
  if (result[88])
  {
    uint64_t result = [result _notifyDisplayWifi];
    *(unsigned char *)(*(void *)(a1 + 32) + 88) = 0;
  }
  return result;
}

void sub_100197E6C(uint64_t a1, double a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100197EE8;
  v2[3] = &unk_100412A88;
  v2[4] = *(void *)(a1 + 32);
  *(double *)&v2[5] = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
}

void sub_100197EE8(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) serviceDelegate];
  if (objc_opt_respondsToSelector())
  {
    double v2 = *(double *)(a1 + 40);
    *(float *)&double v2 = v2;
    [v3 manager:*(void *)(a1 + 32) didUpdateProgress:-1 estimatedTimeRemaining:0 context:v2];
  }
}

void sub_100198154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100198178(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = *(void *)(a1[8] + 8);
  id obj = *(id *)(v8 + 40);
  unsigned __int8 v9 = [a2 extractItemFromDomainName:v5 relativePath:v6 toPath:v7 progress:a3 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = v9;
}

void sub_1001983D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001983F8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = *(void *)(a1[8] + 8);
  id obj = *(id *)(v8 + 40);
  unsigned __int8 v9 = [a2 addFileToDomainName:v5 relativePath:v6 fromPath:v7 progress:a3 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = v9;
}

void sub_100198630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100198654(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v5 + 40);
  unsigned __int8 v6 = [a2 deleteItemFromDomainName:v3 relativePath:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v6;
}

void sub_100199434(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10019A704(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10019A964(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10019AA78(id a1)
{
  qword_1004825D0 = objc_alloc_init(MBDaemon);
  _objc_release_x1();
}

id sub_10019B1CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleSignal:*(unsigned int *)(a1 + 40)];
}

void sub_10019B3A4(id a1)
{
  if (MBIsInternalInstall() && (id v1 = getenv("MBDaemonIdleTimerInterval")) != 0)
  {
    uint64_t v2 = strtol(v1, 0, 10);
    if ((unint64_t)(v2 - 1) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v3 = 30;
    }
    else {
      uint64_t v3 = v2;
    }
    uint64_t v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MBDaemonIdleTimerInterval=%ld", buf, 0xCu);
      _MBLog();
    }
  }
  else
  {
    uint64_t v3 = 30;
  }
  qword_1004825E0 = v3;
}

void sub_10019B4A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained && !WeakRetained[2] && [WeakRetained _shouldIdleExit])
  {
    uint64_t v3 = MBGetDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Idled. Stopping service.", v4, 2u);
      _MBLog();
    }

    [v2 shutdown];
  }
}

id sub_10019B63C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resetIdleTimer];
}

id sub_10019B7D4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  Name = class_getName(*(Class *)(a1 + 40));
  return _[v1 _holdWorkAssertionWithDescription:Name];
}

id sub_10019B898(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  Name = sel_getName(*(SEL *)(a1 + 40));
  return _[v1 _holdWorkAssertionWithDescription:Name];
}

id sub_10019BAD4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  Name = class_getName(*(Class *)(a1 + 40));
  return _[v1 _releaseWorkAssertionWithDescription:Name];
}

id sub_10019BB84(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  Name = sel_getName(*(SEL *)(a1 + 40));
  return _[v1 _releaseWorkAssertionWithDescription:Name];
}

void sub_10019BD0C(_Unwind_Exception *a1)
{
}

void sub_10019BD20(void *a1)
{
}

id sub_10019BD2C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) UTF8String];
  return _[v1 _holdWorkAssertionWithDescription:v2];
}

id sub_10019BD6C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) UTF8String];
  return _[v1 _releaseWorkAssertionWithDescription:v2];
}

id sub_10019E5C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelDisconnectTimer];
}

void sub_10019E5D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    [*(id *)(a1 + 32) _sendDoneMessageWithError:*(void *)(a1 + 40)];
  }
  uint64_t v3 = MBGetDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finishing the FT session", buf, 2u);
    _MBLog();
  }

  uint64_t v4 = [*(id *)(a1 + 32) fileTransferSession];
  [v4 finish];

  uint64_t v5 = MBGetDefaultLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Invalidating the FT session", v7, 2u);
    _MBLog();
  }

  uint64_t v6 = [*(id *)(a1 + 32) fileTransferSession];
  [v6 invalidate];
}

void sub_10019E700(uint64_t a1)
{
  [*(id *)(a1 + 32) _cleanUpBackupEngine];
  id v2 = [*(id *)(a1 + 32) completionHandler];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) completionHandler];
    v3[2](v3, *(void *)(a1 + 40));

    [*(id *)(a1 + 32) setCompletionHandler:0];
  }
  uint64_t v4 = [*(id *)(a1 + 32) delegate];
  [*(id *)(a1 + 32) setDelegate:0];
  if (!v4) {
    __assert_rtn("-[MBSourceDeviceTransferEngine _finishWithError:]_block_invoke", "MBSourceDeviceTransferEngine.m", 213, "delegate");
  }
  uint64_t v5 = [*(id *)(a1 + 32) connection];
  [v4 connection:v5 didFinishDeviceTransferWithError:*(void *)(a1 + 40)];

  if (*(void *)(a1 + 40))
  {
    uint64_t v6 = +[MBError loggableDescriptionForError:](MBError, "loggableDescriptionForError:");
    uint64_t v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = *(void *)(a1 + 64);
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138413058;
      uint64_t v16 = v8;
      __int16 v17 = 2048;
      uint64_t v18 = v9;
      __int16 v19 = 2114;
      id v20 = v6;
      __int16 v21 = 2112;
      uint64_t v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "========== %@ failed after %.3fs: %{public}@: %@", buf, 0x2Au);
      objc_opt_class();
      _MBLog();
    }
  }
  else
  {
    uint64_t v6 = MBGetDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = objc_opt_class();
      uint64_t v12 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v16 = v11;
      __int16 v17 = 2048;
      uint64_t v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "========== %@ finished in %.3fs", buf, 0x16u);
      objc_opt_class();
      _MBLog();
    }
  }

  [*(id *)(a1 + 48) drop];
  id v13 = self;
  uint64_t v14 = +[MBDaemon sharedDaemon];
  [v14 releaseWorkAssertion:*(void *)(a1 + 72)];
}

void sub_10019ED04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = MBGetDefaultLog();
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      id v11 = v9;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to send %@: %@", buf, 0x16u);
LABEL_6:
      _MBLog();
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received %@", buf, 0xCu);
    goto LABEL_6;
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10019F254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019F280(uint64_t a1)
{
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v4 = WeakRetained;
    [WeakRetained _cancelDisconnectTimer];
    id WeakRetained = v4;
    unsigned __int8 v2 = atomic_load(v4 + 107);
    if (v2)
    {
      uint64_t v3 = +[MBError errorWithCode:15 format:@"Timed out"];
      [v4 _finishWithError:v3];

      id WeakRetained = v4;
    }
  }
}

void sub_10019FE50(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_10019FE8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = MBGetDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "FT session completion handler called: %@", buf, 0xCu);
      _MBLog();
    }

    [WeakRetained _finishWithError:v3];
  }
}

void sub_10019FF7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = MBGetDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      id v7 = v3;
      __int16 v8 = 2048;
      uint64_t v9 = (int)[v3 linkType];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "FT session progress handler called with %@, linkType:%ld", buf, 0x16u);
      [v3 linkType];
      _MBLog();
    }

    [WeakRetained _handleFileTransferSessionProgress:v3];
  }
}

id sub_1001A0090(uint64_t a1)
{
  return _[*(id *)(a1 + 32) startListeningForFileTransfers];
}

void sub_1001A09A8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v10 = MBGetDefaultLog();
  id v11 = v10;
  if (v8)
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v25 = objc_opt_class();
    __int16 v26 = 2112;
    id v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to handle %@: %@", buf, 0x16u);
    objc_opt_class();
  }
  else
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v25 = (uint64_t)v7;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received %@", buf, 0xCu);
  }
  _MBLog();
LABEL_7:

  __int16 v12 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_enter(v12);

  [*(id *)(a1 + 32) setPeerInitRequest:v7];
  id v13 = [*(id *)(a1 + 32) progressModel];
  [v13 updateTotalProgressWithPhaseProgress:1 phase:0.0];

  uint64_t v14 = [*(id *)(a1 + 32) _handleError:v8];
  if (v14)
  {
    uint64_t v15 = 0;
  }
  else
  {
    id v23 = MBDeviceName();
    uint64_t v22 = MBDeviceClass();
    uint64_t v16 = MBDeviceUDID_Legacy();
    __int16 v17 = MBBuildVersion();
    uint64_t v18 = MBProductVersion();
    uint64_t v15 = [[MBPeerInitResponse alloc] initWithSourceDeviceUDID:v16 deviceName:v23 deviceClass:v22 buildVersion:v17 productVersion:v18];
    MBRequiredProductVersion((int)[*(id *)(a1 + 32) engineType]);
    v20 = id v19 = v7;
    [(MBPeerInitResponse *)v15 setSourceRequiredProductVersion:v20];

    id v7 = v19;
  }
  v9[2](v9, v15, v14);
  __int16 v21 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_leave(v21);
}

void sub_1001A0C7C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v10 = MBGetDefaultLog();
  id v11 = v10;
  if (v8)
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v21 = objc_opt_class();
    __int16 v22 = 2112;
    id v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to handle %@: %@", buf, 0x16u);
    objc_opt_class();
  }
  else
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v21 = (uint64_t)v7;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received %@", buf, 0xCu);
  }
  _MBLog();
LABEL_7:

  __int16 v12 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_enter(v12);

  id v13 = [*(id *)(a1 + 32) progressModel];
  [v13 updateTotalProgressWithPhaseProgress:2 phase:0.0];

  uint64_t v14 = [*(id *)(a1 + 32) _handleError:v8];
  if (v14)
  {
    v9[2](v9, 0, v14);
    uint64_t v15 = [*(id *)(a1 + 32) peerTaskGroup];
    dispatch_group_leave(v15);
  }
  else
  {
    uint64_t v16 = dispatch_get_global_queue(17, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001A0F08;
    block[3] = &unk_100412998;
    void block[4] = *(void *)(a1 + 32);
    id v18 = v7;
    id v19 = v9;
    dispatch_async(v16, block);
  }
}

void sub_1001A0F08(uint64_t a1)
{
  for (char i = 1; ; char i = 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_cancelBackupEngine", v38, v40, v41, v42);
    id v3 = [*(id *)(a1 + 32) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001A15E4;
    block[3] = &unk_100411128;
    void block[4] = *(void *)(a1 + 32);
    dispatch_sync(v3, block);

    if (([*(id *)(a1 + 32) isCanceled] & 1) == 0)
    {
      unint64_t v4 = MBFreeDiskSpaceForVolume();
      if (!(v4 >> 31))
      {
        unint64_t v5 = v4;
        id v6 = MBGetDefaultLog();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134218240;
          id v48 = (unsigned char *)v5;
          __int16 v49 = 2048;
          uint64_t v50 = 0x80000000;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disk space too low to preflight (%llu) - purging %llu bytes", buf, 0x16u);
          id v39 = (id)v5;
          uint64_t v40 = 0x80000000;
          _MBLog();
        }

        id v7 = [*(id *)(a1 + 32) cacheDeleteRequest];
        if (v7)
        {
          [*(id *)(a1 + 32) setCacheDeleteRequest:v7];
        }
        else
        {
          id v8 = [[MBCacheDeleteRequest alloc] initWithVolumePath:@"/private/var"];
          [*(id *)(a1 + 32) setCacheDeleteRequest:v8];
        }
        uint64_t v9 = [*(id *)(a1 + 32) cacheDeleteRequest];
        uint64_t v10 = [v9 purge:0x80000000];

        id v11 = MBGetDefaultLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          id v48 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CacheDelete purged %llu bytes", buf, 0xCu);
          id v39 = v10;
          _MBLog();
        }
      }
    }
    __int16 v12 = objc_msgSend(*(id *)(a1 + 32), "_backupEngineWithPreflightRequest:", *(void *)(a1 + 40), v39);
    [*(id *)(a1 + 32) setDriveBackupEngine:v12];
    if ([*(id *)(a1 + 32) isCanceled]) {
      [v12 cancel];
    }
    uint64_t v13 = [v12 preflight];
    if (v13) {
      break;
    }
    uint64_t v14 = [v12 uploadSize];
    if ((i & 1) == 0 || (uint64_t v15 = [*(id *)(a1 + 40) freeDiskSpace], v14 + 0x1C0000000 <= v15))
    {
      uint64_t v25 = (char *)[v12 uploadFileCount];
      id v26 = [v12 uploadSizeExcludingHardlinksAndClones];
      id v27 = [v12 preflightProperties];
      if (!v27) {
        __assert_rtn("-[MBSourceDeviceTransferEngine _setUpMessaging]_block_invoke", "MBSourceDeviceTransferEngine.m", 632, "preflightProperties");
      }
      uint64_t v28 = v27;
      uint64_t v29 = v25 + 7;
      id v44 = 0;
      id v30 = [v27 dataWithError:&v44];
      id v31 = v44;
      if (!v30)
      {
        v32 = MBGetDefaultLog();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          id v48 = v28;
          __int16 v49 = 2112;
          uint64_t v50 = (uint64_t)v31;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Failed to serialize preflight properties %@, %@", buf, 0x16u);
          _MBLog();
        }
      }
      uint64_t v33 = -[MBPeerPreflightResponse initWithUploadSize:uploadFileCount:uploadSizeExcludingHardlinksAndClones:freeDiskSpace:purgeableDiskSpace:]([MBPeerPreflightResponse alloc], "initWithUploadSize:uploadFileCount:uploadSizeExcludingHardlinksAndClones:freeDiskSpace:purgeableDiskSpace:", v14, v29, v26, MBFreeDiskSpaceForVolume(), [*(id *)(a1 + 32) _purgeableDiskSpace]);
      if (!v33) {
        __assert_rtn("-[MBSourceDeviceTransferEngine _setUpMessaging]_block_invoke", "MBSourceDeviceTransferEngine.m", 641, "response");
      }
      long long v34 = v33;
      [(MBPeerPreflightResponse *)v33 setPropertiesData:v30];

      long long v35 = 0;
      goto LABEL_37;
    }
    uint64_t v16 = v15;
    if ((unint64_t)(v14 + 0x1C0000000 - v15) <= 0x1C0000000) {
      uint64_t v17 = 0x1C0000000;
    }
    else {
      uint64_t v17 = v14 + 0x1C0000000 - v15;
    }
    id v18 = MBGetDefaultLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218752;
      id v48 = v14;
      __int16 v49 = 2048;
      uint64_t v50 = 0x1C0000000;
      __int16 v51 = 2048;
      id v52 = v16;
      __int16 v53 = 2048;
      uint64_t v54 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Disk space on the target device is too low (%llu, %llu, %llu) - purging %llu bytes", buf, 0x2Au);
      double v41 = v16;
      uint64_t v42 = v17;
      uint64_t v38 = v14;
      uint64_t v40 = 0x1C0000000;
      _MBLog();
    }

    [*(id *)(a1 + 32) _cancelBackupEngine];
    id v19 = [*(id *)(a1 + 32) queue];
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    v45[2] = sub_1001A15EC;
    v45[3] = &unk_100411128;
    v45[4] = *(void *)(a1 + 32);
    dispatch_sync(v19, v45);

    id v20 = [*(id *)(a1 + 32) cacheDeleteRequest];
    if (v20)
    {
      [*(id *)(a1 + 32) setCacheDeleteRequest:v20];
    }
    else
    {
      uint64_t v21 = [[MBCacheDeleteRequest alloc] initWithVolumePath:@"/private/var"];
      [*(id *)(a1 + 32) setCacheDeleteRequest:v21];
    }
    __int16 v22 = [*(id *)(a1 + 32) cacheDeleteRequest];
    id v23 = [v22 purge:v17];

    unsigned int v24 = MBGetDefaultLog();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      id v48 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CacheDelete purged %llu bytes", buf, 0xCu);
      uint64_t v38 = v23;
      _MBLog();
    }
  }
  uint64_t v36 = (void *)v13;
  long long v35 = [v12 endWithError:v13];

  if (!v35) {
    __assert_rtn("-[MBSourceDeviceTransferEngine _setUpMessaging]_block_invoke", "MBSourceDeviceTransferEngine.m", 601, "error");
  }
  [*(id *)(a1 + 32) setDriveBackupEngine:0];
  long long v34 = 0;
LABEL_37:

  [*(id *)(a1 + 32) setPeerPreflightResponse:v34];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  long long v37 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_leave(v37);
}

id sub_1001A15E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cleanUpBackupEngine];
}

id sub_1001A15EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cleanUpBackupEngine];
}

void sub_1001A15F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v10 = MBGetDefaultLog();
  id v11 = v10;
  if (v8)
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v19 = objc_opt_class();
    __int16 v20 = 2112;
    id v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to handle %@: %@", buf, 0x16u);
    objc_opt_class();
  }
  else
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v19 = (uint64_t)v7;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received %@", buf, 0xCu);
  }
  _MBLog();
LABEL_7:

  __int16 v12 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_enter(v12);

  uint64_t v13 = [*(id *)(a1 + 32) _handleError:v8];
  if (v13)
  {
    v9[2](v9, 0, v13);
    uint64_t v14 = [*(id *)(a1 + 32) peerTaskGroup];
    dispatch_group_leave(v14);
  }
  else
  {
    uint64_t v15 = dispatch_get_global_queue(17, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001A1850;
    block[3] = &unk_1004124D8;
    void block[4] = *(void *)(a1 + 32);
    uint64_t v17 = v9;
    dispatch_async(v15, block);
  }
}

void sub_1001A1850(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) peerInitRequest];
  arc4random_buf(__buf, 0x40uLL);
  id v3 = +[NSData dataWithBytes:__buf length:64];
  unint64_t v4 = [v3 base64EncodedStringWithOptions:0];
  unint64_t v5 = [v4 dataUsingEncoding:4];
  id v6 = MBTemporaryPath();
  id v7 = MBGetDefaultLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v38 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Exporting the keychain at %@", buf, 0xCu);
    _MBLog();
  }

  id v36 = 0;
  id v8 = +[MBKeyBag keybagWithPassword:v4 error:&v36];
  id v9 = v36;
  id v10 = v9;
  v32 = v8;
  if (!v8)
  {
    uint64_t v33 = 0;
    if (!v9) {
LABEL_20:
    }
      __assert_rtn("-[MBSourceDeviceTransferEngine _setUpMessaging]_block_invoke", "MBSourceDeviceTransferEngine.m", 693, "error");
LABEL_13:
    uint64_t v19 = 0;
    goto LABEL_14;
  }
  id v35 = v9;
  uint64_t v11 = [v8 dataWithError:&v35];
  id v12 = v35;

  if (!v11)
  {
    uint64_t v33 = 0;
    id v10 = v12;
    if (!v12) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  v34[1] = v12;
  uint64_t v33 = (void *)v11;
  BOOL v13 = WriteKeychainToDisk((uint64_t)v6);
  id v14 = v12;

  if (!v13)
  {
    id v10 = v14;
    if (!v14) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  uint64_t v29 = v5;
  uint64_t v15 = [*(id *)(a1 + 32) transferDrive];
  if (!v15) {
    __assert_rtn("-[MBSourceDeviceTransferEngine _setUpMessaging]_block_invoke", "MBSourceDeviceTransferEngine.m", 696, "self.transferDrive");
  }

  uint64_t v16 = [*(id *)(a1 + 32) transferDrive];
  v34[0] = v14;
  unsigned int v17 = [v16 uploadFileAtPath:v6 toPath:@"keychain-backup.plist" options:0 error:v34];
  id v10 = v34[0];

  if (v17)
  {
    unint64_t v5 = v29;
    id v18 = [[MBPeerKeychainTransferResponse alloc] initWithKeyBag:v11 password:v29 keychainFileName:@"keychain-backup.plist"];
    if (v10) {
      __assert_rtn("-[MBSourceDeviceTransferEngine _setUpMessaging]_block_invoke", "MBSourceDeviceTransferEngine.m", 699, "!error");
    }
    uint64_t v19 = v18;
  }
  else
  {
    if (!v10) {
      __assert_rtn("-[MBSourceDeviceTransferEngine _setUpMessaging]_block_invoke", "MBSourceDeviceTransferEngine.m", 702, "error");
    }
    uint64_t v19 = 0;
    unint64_t v5 = v29;
  }
LABEL_14:
  __int16 v20 = MBGetDefaultLog();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    [v2 targetDeviceName];
    id v21 = v30 = v5;
    __int16 v22 = [v2 targetDeviceUDID];
    *(_DWORD *)long long buf = 138412802;
    uint64_t v38 = v21;
    __int16 v39 = 2112;
    uint64_t v40 = v22;
    __int16 v41 = 2112;
    id v42 = v10;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Finished transferring the keychain data to device \"%@\" (%@): %@", buf, 0x20u);

    id v23 = [v2 targetDeviceName];
    uint64_t v28 = [v2 targetDeviceUDID];
    _MBLog();

    unint64_t v5 = v30;
  }

  unsigned int v24 = [*(id *)(a1 + 32) _handleError:v10];

  (*(void (**)(void, MBPeerKeychainTransferResponse *, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v19, v24);
  uint64_t v25 = MBGetDefaultLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v38 = v6;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Removing %@", buf, 0xCu);
    _MBLog();
  }

  id v26 = +[MBFileManager defaultManager];
  [v26 removeFileAtPath:v6];

  id v27 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_leave(v27);
}

void sub_1001A1D54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = MBGetDefaultLog();
  uint64_t v11 = v10;
  if (v8)
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v26 = objc_opt_class();
    __int16 v27 = 2112;
    id v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to handle %@: %@", buf, 0x16u);
    objc_opt_class();
  }
  else
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v26 = (uint64_t)v7;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received %@", buf, 0xCu);
  }
  _MBLog();
LABEL_7:

  id v12 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_enter(v12);

  BOOL v13 = [*(id *)(a1 + 32) _handleError:v8];
  if (v13)
  {
    v9[2](v9, 0, v13);
    id v14 = [*(id *)(a1 + 32) peerTaskGroup];
    dispatch_group_leave(v14);
  }
  else
  {
    [*(id *)(a1 + 32) _disableInfraWiFi];
    uint64_t v15 = +[NSDate date];
    uint64_t v16 = [*(id *)(a1 + 32) progressModel];
    [v16 setFileTransferStartDate:v15];

    unsigned int v17 = [*(id *)(a1 + 32) progressModel];
    [v17 updateTotalProgressWithPhaseProgress:3 phase:0.0];

    id v18 = [*(id *)(a1 + 32) queue];
    dispatch_assert_queue_V2(v18);

    uint64_t v19 = [*(id *)(a1 + 32) driveBackupEngine];
    if (!v19) {
      __assert_rtn("-[MBSourceDeviceTransferEngine _setUpMessaging]_block_invoke", "MBSourceDeviceTransferEngine.m", 741, "backupEngine");
    }
    __int16 v20 = (void *)v19;
    [*(id *)(a1 + 32) setDriveBackupEngine:0];
    id v21 = dispatch_get_global_queue(17, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001A207C;
    block[3] = &unk_100412998;
    void block[4] = *(void *)(a1 + 32);
    id v23 = v20;
    unsigned int v24 = v9;
    id v14 = v20;
    dispatch_async(v21, block);
  }
}

void sub_1001A207C(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) peerInitRequest];
  id v3 = [*(id *)(a1 + 32) peerPreflightResponse];
  double v4 = COERCE_DOUBLE([v3 uploadFileCount]);

  unint64_t v5 = [*(id *)(a1 + 32) peerPreflightResponse];
  unint64_t v6 = (unint64_t)[v5 uploadSize];

  id v7 = [*(id *)(a1 + 32) peerPreflightResponse];
  id v8 = [v7 uploadSizeExcludingHardlinksAndClones];

  +[NSDate timeIntervalSinceReferenceDate];
  double v10 = v9;
  uint64_t v11 = MBGetDefaultLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    double v12 = [v2 targetDeviceName];
    BOOL v13 = [v2 targetDeviceUDID];
    *(_DWORD *)long long buf = 134219010;
    unint64_t v42 = v6;
    __int16 v43 = 2048;
    id v44 = v8;
    __int16 v45 = 2048;
    double v46 = v4;
    __int16 v47 = 2112;
    double v48 = v12;
    __int16 v49 = 2112;
    uint64_t v50 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending %llu(%llu) bytes, %llu files to device \"%@\" (%@)", buf, 0x34u);

    id v14 = [v2 targetDeviceName];
    id v35 = [v2 targetDeviceUDID];
    _MBLog();
  }
  objc_initWeak(&location, *(id *)(a1 + 32));
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_1001A2608;
  v38[3] = &unk_100415728;
  objc_copyWeak(v39, &location);
  v39[1] = *(id *)&v4;
  v39[2] = (id)v6;
  uint64_t v15 = [*(id *)(a1 + 32) transferDrive];
  [v15 setSendProgressHandler:v38];

  uint64_t v16 = [*(id *)(a1 + 40) backupAfterPreflight];
  id v17 = [*(id *)(a1 + 40) cleanup];
  double v18 = [*(id *)(a1 + 40) endWithError:v16];

  uint64_t v19 = [*(id *)(a1 + 32) transferDrive];
  [v19 setSendProgressHandler:0];

  +[NSDate timeIntervalSinceReferenceDate];
  double v21 = v20;
  __int16 v22 = MBGetDefaultLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    id v23 = v22;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v24 = [v2 targetDeviceName];
      uint64_t v25 = [v2 targetDeviceUDID];
      *(_DWORD *)long long buf = 138412802;
      unint64_t v42 = (unint64_t)v24;
      __int16 v43 = 2112;
      id v44 = v25;
      __int16 v45 = 2112;
      double v46 = v18;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Finished sending data to device \"%@\" (%@): %@", buf, 0x20u);
    }
    uint64_t v26 = [v2 targetDeviceName];
    long long v34 = [v2 targetDeviceUDID];
    _MBLog();
  }
  __int16 v27 = MBGetDefaultLog();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218752;
    unint64_t v42 = v6;
    __int16 v43 = 2048;
    id v44 = v8;
    __int16 v45 = 2048;
    double v46 = v21 - v10;
    __int16 v47 = 2048;
    double v48 = (double)(v6 >> 20) / (v21 - v10);
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Total bytes transferred: %llu(%llu). Total time spent on transferring: %f. Average throughput: %.2f", buf, 0x2Au);
    _MBLog();
  }

  id v28 = [*(id *)(a1 + 32) _handleError:*(void *)&v18];

  if (v28)
  {
    id v31 = 0;
  }
  else
  {
    v32 = [*(id *)(a1 + 32) progressModel];
    [v32 updateTotalProgressWithPhaseProgress:3 phase:1.0];

    id v31 = objc_opt_new();
  }
  (*(void (**)(void, void *, void *, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v31, v28, v29, v30);
  uint64_t v33 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001A2688;
  block[3] = &unk_100411128;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v33, block);

  objc_destroyWeak(v39);
  objc_destroyWeak(&location);
}

void sub_1001A25C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001A2608(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    *(void *)(a2 + 16) = *(void *)(a1 + 40);
    *(void *)(a2 + 24) = *(void *)(a1 + 48);
    unint64_t v6 = [WeakRetained progressModel];
    long long v7 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v7;
    [v6 updateTotalProgressWithPhase:3 transferInfo:v8];
  }
}

void sub_1001A2688(uint64_t a1)
{
  [*(id *)(a1 + 32) _enableInfraWiFi];
  unsigned __int8 v2 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_leave(v2);
}

void sub_1001A26E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  double v9 = a4;
  double v10 = MBGetDefaultLog();
  uint64_t v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v19 = objc_opt_class();
      __int16 v20 = 2112;
      id v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to handle %@: %@", buf, 0x16u);
      uint64_t v16 = objc_opt_class();
      id v17 = v8;
      _MBLog();
    }

    double v12 = 0;
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v19 = (uint64_t)v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received %@", buf, 0xCu);
      uint64_t v16 = (uint64_t)v7;
      _MBLog();
    }

    double v12 = [v7 error];
  }
  BOOL v13 = objc_msgSend(*(id *)(a1 + 32), "peerTaskGroup", v16, v17);
  dispatch_group_enter(v13);

  atomic_store(1u, (unsigned __int8 *)(*(void *)(a1 + 32) + 108));
  [*(id *)(a1 + 32) _stopTrackingPeerConnectionStatus];
  [*(id *)(a1 + 32) _cancelDisconnectTimer];
  id v14 = objc_opt_new();
  v9[2](v9, v14, 0);

  [*(id *)(a1 + 32) _finishWithError:v12];
  [*(id *)(a1 + 32) cancel];
  uint64_t v15 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_leave(v15);
}

void sub_1001A290C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  double v9 = a4;
  double v10 = MBGetDefaultLog();
  uint64_t v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v18 = objc_opt_class();
      __int16 v19 = 2112;
      id v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to handle %@: %@", buf, 0x16u);
      objc_opt_class();
LABEL_6:
      _MBLog();
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v18 = (uint64_t)v7;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received %@", buf, 0xCu);
    goto LABEL_6;
  }

  double v12 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_enter(v12);

  BOOL v13 = objc_opt_new();
  v9[2](v9, v13, 0);

  double v14 = (double)(unint64_t)[v7 percentage] / 100.0;
  uint64_t v15 = [*(id *)(a1 + 32) progressModel];
  [v15 updateTotalProgressWithPhaseProgress:4 phase:v14];

  uint64_t v16 = [*(id *)(a1 + 32) peerTaskGroup];
  dispatch_group_leave(v16);
}

void sub_1001A2F04(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) delegate];
  unsigned __int8 v2 = [*(id *)(a1 + 32) connection];
  [v3 connection:v2 didUpdateDeviceTransferProgress:*(void *)(a1 + 40)];
}

BOOL MBSBackupAttributesReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((unsigned __int16)((v6 >> 3) - 1) >= 7u)
    {
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
    }
    else
    {
      double v12 = off_1004157A0[(__int16)((v6 >> 3) - 1)];
      String = (void *)PBReaderReadString();

      *(void *)(a1 + *v12) = String;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001A64C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    unsigned __int8 v2 = MBGetDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v4 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Watchdog %@ timed out", buf, 0xCu);
      _MBLog();
    }

    [WeakRetained _cancelTimer];
    [WeakRetained _invokeTimeoutBlock];
  }
}

id sub_1001A6668(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelTimer];
}

id sub_1001A66F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _scheduleTimer];
}

void sub_1001A67C0(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t MBSFileAttributesReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        LODWORD(v6) = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 100) |= 0x80u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_104;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_106;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_104:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_106:
        uint64_t v64 = 76;
        goto LABEL_143;
      case 2u:
        String = (void *)PBReaderReadString();

        id v18 = String;
        uint64_t v19 = 88;
        goto LABEL_27;
      case 3u:
        Data = (void *)PBReaderReadData();

        id v18 = Data;
        uint64_t v19 = 48;
LABEL_27:
        *(void *)(a1 + v19) = v18;
        goto LABEL_149;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 100) |= 4u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                uint64_t v23 = 0;
                goto LABEL_110;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0;
        }
LABEL_110:
        uint64_t v65 = 24;
        goto LABEL_148;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 100) |= 0x100u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_114;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_114:
        uint64_t v64 = 80;
        goto LABEL_143;
      case 6u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 100) |= 0x400u;
        while (2)
        {
          unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 == -1 || v32 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
            v14 |= (unint64_t)(v33 & 0x7F) << v30;
            if (v33 < 0)
            {
              v30 += 7;
              BOOL v9 = v31++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_118;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_118:
        uint64_t v64 = 96;
        goto LABEL_143;
      case 7u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 100) |= 0x40u;
        while (2)
        {
          unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 == -1 || v36 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 1;
            v14 |= (unint64_t)(v37 & 0x7F) << v34;
            if (v37 < 0)
            {
              v34 += 7;
              BOOL v9 = v35++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_122;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_122:
        uint64_t v64 = 72;
        goto LABEL_143;
      case 8u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 100) |= 8u;
        while (2)
        {
          unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 == -1 || v40 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 1;
            v23 |= (unint64_t)(v41 & 0x7F) << v38;
            if (v41 < 0)
            {
              v38 += 7;
              BOOL v9 = v39++ >= 9;
              if (v9)
              {
                uint64_t v23 = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0;
        }
LABEL_126:
        uint64_t v65 = 32;
        goto LABEL_148;
      case 9u:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 100) |= 0x10u;
        while (2)
        {
          unint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v44 == -1 || v44 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 1;
            v23 |= (unint64_t)(v45 & 0x7F) << v42;
            if (v45 < 0)
            {
              v42 += 7;
              BOOL v9 = v43++ >= 9;
              if (v9)
              {
                uint64_t v23 = 0;
                goto LABEL_130;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0;
        }
LABEL_130:
        uint64_t v65 = 40;
        goto LABEL_148;
      case 0xAu:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 100) |= 1u;
        while (2)
        {
          unint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v48 == -1 || v48 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 1;
            v23 |= (unint64_t)(v49 & 0x7F) << v46;
            if (v49 < 0)
            {
              v46 += 7;
              BOOL v9 = v47++ >= 9;
              if (v9)
              {
                uint64_t v23 = 0;
                goto LABEL_134;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0;
        }
LABEL_134:
        uint64_t v65 = 8;
        goto LABEL_148;
      case 0xCu:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 100) |= 0x200u;
        while (2)
        {
          unint64_t v53 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v53 == -1 || v53 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 1;
            v14 |= (unint64_t)(v54 & 0x7F) << v51;
            if (v54 < 0)
            {
              v51 += 7;
              BOOL v9 = v52++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_138;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_138:
        uint64_t v64 = 84;
        goto LABEL_143;
      case 0xDu:
        v55 = objc_alloc_init(MBSFileExtendedAttribute);
        [(id)a1 addExtendedAttribute:v55];

        if (PBReaderPlaceMark() && MBSFileExtendedAttributeReadFrom((uint64_t)v55, a2))
        {
          PBReaderRecallMark();
LABEL_149:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      case 0xEu:
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 100) |= 0x20u;
        while (2)
        {
          unint64_t v58 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v58 == -1 || v58 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 1;
            v14 |= (unint64_t)(v59 & 0x7F) << v56;
            if (v59 < 0)
            {
              v56 += 7;
              BOOL v9 = v57++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_142;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_142:
        uint64_t v64 = 56;
LABEL_143:
        *(_DWORD *)(a1 + v64) = v14;
        goto LABEL_149;
      case 0xFu:
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 100) |= 2u;
        while (2)
        {
          unint64_t v62 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v62 == -1 || v62 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v63 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v62);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62 + 1;
            v23 |= (unint64_t)(v63 & 0x7F) << v60;
            if (v63 < 0)
            {
              v60 += 7;
              BOOL v9 = v61++ >= 9;
              if (v9)
              {
                uint64_t v23 = 0;
                goto LABEL_147;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0;
        }
LABEL_147:
        uint64_t v65 = 16;
LABEL_148:
        *(void *)(a1 + v65) = v23;
        goto LABEL_149;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_149;
    }
  }
}

uint64_t sub_1001AB480(uint64_t a1)
{
  qword_100482600 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));
  return _objc_release_x1();
}

void sub_1001AB95C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = MBGetDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      double v15 = *(double *)&v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to fetch remote configuration: %{public}@", buf, 0xCu);
      _MBLog();
    }

    unint64_t v7 = objc_opt_new();
    [v7 setFlag:@"RetryStrategyShouldNotSleep"];
    char v8 = [[MBRetryStrategy alloc] initWithDebugContext:v7 networkAvailabilityProvider:0 engineMode:0 restoreType:0];
    if ([(MBRetryStrategy *)v8 shouldRetryAfterError:v5]) {
      double v9 = 3600.0;
    }
    else {
      double v9 = 43200.0;
    }
    int v10 = MBGetDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      double v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Re-fetching remote configuration in %.3fs", buf, 0xCu);
      _MBLog();
    }

    uint64_t v11 = [*(id *)(a1 + 32) persona];
    char v12 = +[NSDate now];
    unsigned int v13 = [v12 dateByAddingTimeInterval:v9];
    [v11 setPreferencesValue:v13 forKey:@"RemoteConfigurationExpiration"];
  }
  else
  {
    [*(id *)(a1 + 40) mergeRemoteConfigurationForAccount:*(void *)(a1 + 32) response:a2];
  }
  atomic_store(0, (unsigned __int8 *)(*(void *)(a1 + 40) + 8));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
}

id sub_1001AC19C(void *a1)
{
  uint64_t v1 = qword_100482610;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_100482610, &stru_100415800);
  }
  id v3 = [(id)qword_1004825F8 containsObject:v2];

  return v3;
}

void sub_1001AC94C(id a1)
{
  if (!qword_1004825F8)
  {
    qword_1004825F8 = +[NSSet setWithArray:&off_10043B4A8];
    _objc_release_x1();
  }
}

id sub_1001ACFF4()
{
  if (qword_100482630 != -1) {
    dispatch_once(&qword_100482630, &stru_100415908);
  }
  v0 = (void *)qword_100482628;
  return v0;
}

id sub_1001AD1C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setPreferencesValue:0 forKey:@"DisabledDomains"];
}

uint64_t sub_1001AD39C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001AD3AC(uint64_t a1)
{
}

uint64_t sub_1001AD3B4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 32) _allDisabledDomainNamesForPersona:*(void *)(a1 + 40)];
  return _objc_release_x1();
}

void sub_1001AD4D8(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() _allPersistedDisabledDomainNamesForPersona:*(void *)(a1 + 40)];
  id v3 = +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [v2 count]);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v20 count:16];
  if (!v5)
  {

    goto LABEL_20;
  }
  id v6 = v5;
  char v7 = 0;
  uint64_t v8 = *(void *)v15;
  do
  {
    for (char i = 0; i != v6; char i = (char *)i + 1)
    {
      if (*(void *)v15 != v8) {
        objc_enumerationMutation(v4);
      }
      uint64_t v10 = *(void *)(*((void *)&v14 + 1) + 8 * i);
      if ((objc_msgSend(*(id *)(a1 + 32), "_isContainerizedAppDomain:", v10, v13) & 1) == 0)
      {
        char v12 = MBGetDefaultLog();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v19 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@ is not a containerized app domain - not removing from the disabled domains list", buf, 0xCu);
          uint64_t v13 = v10;
          _MBLog();
        }

LABEL_14:
        objc_msgSend(v3, "addObject:", v10, v13);
        continue;
      }
      if ([*(id *)(a1 + 48) containsObject:v10]) {
        goto LABEL_14;
      }
      uint64_t v11 = MBGetDefaultLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Removing %@ from disabled domains list - related app is no longer installed on the device", buf, 0xCu);
        uint64_t v13 = v10;
        _MBLog();
      }

      char v7 = 1;
    }
    id v6 = [v4 countByEnumeratingWithState:&v14 objects:v20 count:16];
  }
  while (v6);

  if (v7)
  {
    [*(id *)(a1 + 32) _reconcileBooksAndHealthInDisabledDomainsList:v3];
    [(id)objc_opt_class() _persistDisabledDomainNames:v3 forPersona:*(void *)(a1 + 40)];
  }
LABEL_20:
}

void sub_1001AD998(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _allDisabledDomainNamesForPersona:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = v2;
  if (*(unsigned char *)(a1 + 56)) {
    [v2 removeObject:v3];
  }
  else {
    [v2 addObject:v3];
  }
  [(id)objc_opt_class() _persistDisabledDomainNames:v4 forPersona:*(void *)(a1 + 40)];
}

int64_t sub_1001ADCB0(id a1, NSString *a2, NSString *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = [(NSString *)v4 length];
  if (v6 == (id)[(NSString *)v5 length])
  {
    int64_t v7 = 0;
  }
  else
  {
    id v8 = [(NSString *)v4 length];
    if (v8 < (id)[(NSString *)v5 length]) {
      int64_t v7 = 1;
    }
    else {
      int64_t v7 = -1;
    }
  }

  return v7;
}

void sub_1001AE830(_Unwind_Exception *a1)
{
}

void sub_1001AE83C(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1001AE848);
}

id sub_1001AF0B4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 objectForKeyedSubscript:@"Container"];
  if (!v5) {
    __assert_rtn("_volumeMountPointForPlist", "MBAppManager.m", 849, "path");
  }
  id v6 = (void *)v5;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  int64_t v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v21;
    while (2)
    {
      for (char i = 0; i != v9; char i = (char *)i + 1)
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(v7);
        }
        char v12 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        if (MBPathHasVolumePrefix())
        {
          id v17 = v12;
          uint64_t v13 = v7;
          goto LABEL_14;
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v20 objects:v28 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

  uint64_t v13 = MBGetDefaultLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    long long v14 = [v7 sortedArrayUsingSelector:"compare:"];
    long long v15 = [v14 componentsJoinedByString:@", "];
    *(_DWORD *)long long buf = 138412546;
    char v25 = v15;
    __int16 v26 = 2112;
    unsigned int v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to find volume (%@) for %@", buf, 0x16u);

    long long v16 = [v7 sortedArrayUsingSelector:"compare:"];
    uint64_t v19 = [v16 componentsJoinedByString:@", "];
    _MBLog();
  }
  id v17 = 0;
LABEL_14:

  return v17;
}

BOOL sub_1001AFD50(id a1, id a2, NSDictionary *a3)
{
  id v3 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

BOOL sub_1001AFE1C(id a1, id a2, NSDictionary *a3)
{
  id v3 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_1001B17A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1001B1808(id a1)
{
  qword_100482618 = (uint64_t)dispatch_queue_create("-[MBAppManager createSafeHarbor:error:]", 0);
  _objc_release_x1();
}

void sub_1001B1848(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userIncompleteRestoreDirectory];
  id v3 = [*(id *)(*(void *)(a1 + 40) + 8) safeHarborDir];
  id v4 = [v2 stringByAppendingPathComponent:v3];
  uint64_t v5 = MBUniqueIntegerFilenameWithDirectory();

  id v6 = [*(id *)(*(void *)(a1 + 40) + 8) safeHarborDir];
  uint64_t v7 = [v6 stringByAppendingPathComponent:v5];
  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v10 = [*(id *)(a1 + 32) userIncompleteRestoreDirectory];
    uint64_t v11 = [v10 stringByAppendingPathComponent:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
    uint64_t v12 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  else
  {
    uint64_t v14 = *(void *)(*(void *)(a1 + 80) + 8);
    id v15 = *(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    uint64_t v10 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v15;
  }

  long long v16 = MBGetDefaultLog();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    id v17 = [*(id *)(a1 + 48) identifier];
    id v18 = [*(id *)(a1 + 48) containerTypeString];
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    *(_DWORD *)long long buf = 138412802;
    unsigned int v31 = v17;
    __int16 v32 = 2112;
    char v33 = v18;
    __int16 v34 = 2112;
    uint64_t v35 = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Creating safe harbor for container %@ with type %@ at %@", buf, 0x20u);

    long long v20 = [*(id *)(a1 + 48) identifier];
    unint64_t v28 = [*(id *)(a1 + 48) containerTypeString];
    _MBLog();
  }
  long long v21 = MBGetDefaultLog();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    long long v22 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    *(_DWORD *)long long buf = 138412290;
    unsigned int v31 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Creating directory %@", buf, 0xCu);
    _MBLog();
  }

  uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  unint64_t v24 = *(void **)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 64);
  uint64_t v26 = *(void *)(*(void *)(a1 + 96) + 8);
  id obj = *(id *)(v26 + 40);
  unsigned __int8 v27 = [v24 createDirectoryAtPath:v23 withIntermediateDirectories:1 attributes:v25 error:&obj];
  objc_storeStrong((id *)(v26 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = v27;
}

void sub_1001B23EC(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("MBDisabledDomains", v3);
  id v2 = (void *)qword_100482628;
  qword_100482628 = (uint64_t)v1;
}

void sub_1001B4228(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = MBGetDefaultLog();
  uint64_t v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = objc_opt_class();
      id v9 = [v4 recordID];
      uint64_t v10 = [v9 recordName];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v17 = v8;
      __int16 v18 = 2114;
      uint64_t v19 = v10;
      __int16 v20 = 2112;
      id v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to save %{public}@(%{public}@): %@", buf, 0x20u);

      objc_opt_class();
      uint64_t v11 = [v4 recordID];
      uint64_t v12 = [v11 recordName];
LABEL_6:
      _MBLog();
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = objc_opt_class();
    uint64_t v14 = [v4 recordID];
    id v15 = [v14 recordName];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v17 = v13;
    __int16 v18 = 2114;
    uint64_t v19 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Saved %{public}@(%{public}@)", buf, 0x16u);

    objc_opt_class();
    uint64_t v11 = [v4 recordID];
    uint64_t v12 = [v11 recordName];
    goto LABEL_6;
  }
}

id sub_1001B7E60(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 snapshotID];
  id v4 = [v2 isEqualToString:v3];

  return v4;
}

uint64_t MBSSnapshotReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        LODWORD(v6) = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 8u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_52;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_54;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_54:
        *(_DWORD *)(a1 + 40) = v14;
        goto LABEL_68;
      case 2u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v19 |= (unint64_t)(v21 & 0x7F) << v17;
            if (v21 < 0)
            {
              v17 += 7;
              BOOL v9 = v18++ >= 9;
              if (v9)
              {
                uint64_t v19 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v19 = 0;
        }
LABEL_58:
        uint64_t v32 = 24;
        goto LABEL_67;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v19 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                uint64_t v19 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v19 = 0;
        }
LABEL_62:
        uint64_t v32 = 16;
        goto LABEL_67;
      case 5u:
        unsigned __int8 v27 = objc_alloc_init(MBSSnapshotAttributes);

        *(void *)(a1 + 32) = v27;
        if PBReaderPlaceMark() && (MBSSnapshotAttributesReadFrom((uint64_t)v27, a2))
        {
          PBReaderRecallMark();
LABEL_68:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      case 6u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v19 |= (unint64_t)(v31 & 0x7F) << v28;
            if (v31 < 0)
            {
              v28 += 7;
              BOOL v9 = v29++ >= 9;
              if (v9)
              {
                uint64_t v19 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v19 = 0;
        }
LABEL_66:
        uint64_t v32 = 8;
LABEL_67:
        *(void *)(a1 + v32) = v19;
        goto LABEL_68;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_68;
    }
  }
}

void sub_1001B9D8C(id a1)
{
  dispatch_queue_t v1 = (void *)qword_100482638;
  qword_100482638 = (uint64_t)&__NSDictionary0__struct;
}

uint64_t MBExcludedAppTypeFromAppRecord(void *a1)
{
  id v1 = a1;
  id v2 = [v1 managementDomain];
  unsigned __int8 v3 = [v2 hasPrefix:@"swift-playgrounds"];

  if (v3)
  {
    uint64_t v4 = 2;
  }
  else
  {
    unsigned int v5 = [v1 appClipMetadata];
    uint64_t v4 = v5 != 0;
  }
  return v4;
}

id sub_1001BA9FC(void *a1, void *a2)
{
  id v3 = a1;
  v103 = a2;
  uint64_t v4 = +[NSMutableDictionary dictionary];
  uint64_t v5 = [v3 bundleIdentifier];
  if (!v5)
  {
    uint64_t v6 = MBGetDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v125 = (uint64_t)v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "app.bundleIdentifier is nil: %@", buf, 0xCu);
      id v73 = v3;
      _MBLog();
    }
  }
  [v4 setObject:v5 forKeyedSubscript:v73];
  unint64_t v7 = MBStringForContainerType(1);
  [v4 setObject:v7 forKeyedSubscript:@"ContainerContentClass"];

  char v8 = [v3 bundleVersion];

  if (v8)
  {
    BOOL v9 = [v3 bundleVersion];
    [v4 setObject:v9 forKeyedSubscript:kCFBundleVersionKey];
  }
  uint64_t v10 = objc_msgSend(v3, "mb_applicationType");
  v85 = (void *)v10;
  if (v10)
  {
    [v4 setObject:v10 forKeyedSubscript:@"ApplicationType"];
  }
  else
  {
    uint64_t v11 = MBGetDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v125 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "app.applicationType is nil for \"%@\"", buf, 0xCu);
      uint64_t v74 = v5;
      _MBLog();
    }
  }
  char v12 = objc_msgSend(v3, "mb_bundleURL", v74);
  double v84 = v12;
  if (v12)
  {
    unsigned int v13 = sub_1001BDB98(v12);
    [v4 setObject:v13 forKeyedSubscript:@"Path"];
  }
  else
  {
    unsigned int v13 = MBGetDefaultLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v125 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "app.bundleURL is nil for \"%@\"", buf, 0xCu);
      uint64_t v75 = v5;
      _MBLog();
    }
  }

  uint64_t v14 = [v3 dataContainerURL];
  __int16 v83 = v14;
  if (v14)
  {
    unint64_t v15 = sub_1001BDB98(v14);
    [v4 setObject:v15 forKeyedSubscript:@"Container"];
  }
  else
  {
    unint64_t v15 = MBGetDefaultLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v125 = v5;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "app.dataContainerURL is nil for \"%@\"", buf, 0xCu);
      uint64_t v75 = v5;
      _MBLog();
    }
  }

  char v16 = objc_msgSend(v3, "mb_entitlements");
  v86 = v16;
  v87 = v5;
  if (![v16 count])
  {
    char v17 = MBGetDefaultLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      if (v86) {
        unsigned int v18 = "empty";
      }
      else {
        unsigned int v18 = "nil";
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v125 = (uint64_t)v18;
      __int16 v126 = 2112;
      v127 = v87;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Found %s entitlements dictionary for %@", buf, 0x16u);
      uint64_t v75 = (uint64_t)v18;
      id v79 = v87;
      _MBLog();
    }

    char v16 = v86;
  }
  if (v16) {
    [v4 setObject:v16 forKeyedSubscript:@"Entitlements"];
  }
  uint64_t v19 = objc_msgSend(v3, "applicationExtensionRecords", v75, v79);
  id v20 = [v19 count];

  id v97 = v3;
  v91 = v4;
  if (v20)
  {
    v90 = +[NSMutableArray array];
    long long v113 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    char v21 = [v3 applicationExtensionRecords];
    id v22 = [v21 countByEnumeratingWithState:&v113 objects:v133 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v114;
      uint64_t v88 = *(void *)v114;
      v89 = v21;
      do
      {
        char v25 = 0;
        id v92 = v23;
        do
        {
          if (*(void *)v114 != v24) {
            objc_enumerationMutation(v21);
          }
          uint64_t v26 = *(void **)(*((void *)&v113 + 1) + 8 * (void)v25);
          unsigned __int8 v27 = objc_msgSend(v26, "dataContainerURL", v76, v80, v81, v82);
          char v28 = objc_msgSend(v26, "mb_bundleURL");
          v102 = objc_msgSend(v26, "mb_pluginIdentifier");
          v98 = v28;
          if (!v27)
          {
            unint64_t v48 = MBGetDefaultLog();
            if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_78;
            }
            *(_DWORD *)long long buf = 138412546;
            uint64_t v125 = (uint64_t)v102;
            __int16 v126 = 2112;
            v127 = 0;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Plugin %@ found without a data container (%@) - will not be backed up.", buf, 0x16u);
            id v76 = v102;
            double v80 = 0;
LABEL_70:
            _MBLog();
            goto LABEL_78;
          }
          if (!v28)
          {
            unint64_t v48 = MBGetDefaultLog();
            if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_78;
            }
            *(_DWORD *)long long buf = 138412546;
            uint64_t v125 = (uint64_t)v102;
            __int16 v126 = 2112;
            v127 = 0;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Plugin %@ found without a bundle URL (%@) - will not be backed up.", buf, 0x16u);
            id v76 = v102;
            double v80 = 0;
            goto LABEL_70;
          }
          if (!v102)
          {
            unint64_t v48 = MBGetDefaultLog();
            if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_78;
            }
            *(_DWORD *)long long buf = 138412546;
            uint64_t v125 = 0;
            __int16 v126 = 2112;
            v127 = 0;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Plugin %@ found without a pluginIdentifier (%@) - will not be backed up.", buf, 0x16u);
            id v76 = 0;
            double v80 = 0;
            goto LABEL_70;
          }
          uint64_t v29 = sub_1001BDB98(v28);
          uint64_t v30 = sub_1001BDB98(v27);
          v96 = v29;
          if (v29)
          {
            v95 = (void *)v30;
            if (v30)
            {
              char v31 = objc_msgSend(v26, "mb_entitlements");
              if (!v31)
              {
                uint64_t v32 = MBGetDefaultLog();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long buf = 138412290;
                  uint64_t v125 = (uint64_t)v102;
                  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Plugin %@ found without entitlements.", buf, 0xCu);
                  id v76 = v102;
                  _MBLog();
                }

                char v31 = &__NSDictionary0__struct;
              }
              v93 = v31;
              v94 = v25;
              v99 = +[NSMutableArray array];
              long long v109 = 0u;
              long long v110 = 0u;
              long long v111 = 0u;
              long long v112 = 0u;
              char v33 = [v26 groupContainerURLs];
              id v34 = [v33 countByEnumeratingWithState:&v109 objects:v132 count:16];
              if (v34)
              {
                id v35 = v34;
                uint64_t v36 = *(void *)v110;
                v100 = v33;
                do
                {
                  for (char i = 0; i != v35; char i = (char *)i + 1)
                  {
                    if (*(void *)v110 != v36) {
                      objc_enumerationMutation(v33);
                    }
                    char v38 = *(NSObject **)(*((void *)&v109 + 1) + 8 * i);
                    unsigned int v39 = objc_msgSend(v26, "groupContainerURLs", v76);
                    unint64_t v40 = [v39 objectForKeyedSubscript:v38];

                    if (v40)
                    {
                      char v41 = sub_1001BDB98(v40);
                      if (v41)
                      {
                        if (MBPathHasVolumePrefix())
                        {
                          v123[0] = v38;
                          v122[0] = kCFBundleIdentifierKey;
                          v122[1] = @"ContainerContentClass";
                          char v42 = MBStringForContainerType(3);
                          v122[2] = @"Container";
                          v123[1] = v42;
                          v123[2] = v41;
                          unsigned int v43 = +[NSDictionary dictionaryWithObjects:v123 forKeys:v122 count:3];

                          [v99 addObject:v43];
LABEL_60:

                          goto LABEL_61;
                        }
                        unsigned int v43 = MBGetDefaultLog();
                        if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
                          goto LABEL_60;
                        }
                        *(_DWORD *)long long buf = 138413058;
                        uint64_t v125 = (uint64_t)v102;
                        __int16 v126 = 2112;
                        v127 = v38;
                        __int16 v128 = 2112;
                        v129 = v41;
                        __int16 v130 = 2112;
                        v131 = v103;
                        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Plugin %@ groupContainer %@ at %@ does not reside on the user data volume %@ - will not be backed up", buf, 0x2Au);
                        v81 = v41;
                        CFStringRef v82 = v103;
                        char v33 = v100;
                        id v76 = v102;
                        double v80 = v38;
                      }
                      else
                      {
                        unsigned int v43 = MBGetDefaultLog();
                        if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
                          goto LABEL_60;
                        }
                        *(_DWORD *)long long buf = 138412546;
                        uint64_t v125 = (uint64_t)v102;
                        __int16 v126 = 2112;
                        v127 = v38;
                        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Plugin %@ groupContainer %@ found with a nil SanitizedFilesystemRepresentation for container - will not be backed up", buf, 0x16u);
                        id v76 = v102;
                        double v80 = v38;
                        char v33 = v100;
                      }
                      _MBLog();
                      goto LABEL_60;
                    }
                    char v41 = MBGetDefaultLog();
                    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)long long buf = 138412546;
                      uint64_t v125 = (uint64_t)v102;
                      __int16 v126 = 2112;
                      v127 = v38;
                      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Plugin %@ groupContainer %@ found without a container - will not be backed up", buf, 0x16u);
                      id v76 = v102;
                      double v80 = v38;
                      _MBLog();
                    }
LABEL_61:
                  }
                  id v35 = [v33 countByEnumeratingWithState:&v109 objects:v132 count:16];
                }
                while (v35);
              }

              v121[0] = v102;
              v120[0] = kCFBundleIdentifierKey;
              v120[1] = @"ContainerContentClass";
              unint64_t v44 = MBStringForContainerType(2);
              v121[1] = v44;
              char v45 = v95;
              v121[2] = v96;
              v120[2] = @"Path";
              v120[3] = @"Container";
              v121[3] = v95;
              char v46 = v93;
              v121[4] = v93;
              v120[4] = @"Entitlements";
              v120[5] = @"GroupContainers";
              v121[5] = v99;
              unsigned int v47 = +[NSDictionary dictionaryWithObjects:v121 forKeys:v120 count:6];

              unint64_t v48 = v96;
              [v90 addObject:v47];

              uint64_t v4 = v91;
              id v23 = v92;
              uint64_t v24 = v88;
              char v21 = v89;
              char v25 = v94;
            }
            else
            {
              char v46 = MBGetDefaultLog();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                uint64_t v125 = (uint64_t)v102;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Plugin %@ found with a nil SanitizedFilesystemRepresentation for dataContainerURL - will not be backed up.", buf, 0xCu);
                id v76 = v102;
                _MBLog();
              }
              char v45 = 0;
              unint64_t v48 = v96;
            }
          }
          else
          {
            char v45 = (void *)v30;
            char v46 = MBGetDefaultLog();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              uint64_t v125 = (uint64_t)v102;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Plugin %@ found with a nil SanitizedFilesystemRepresentation for bundleURL - will not be backed up.", buf, 0xCu);
              id v76 = v102;
              _MBLog();
            }
            unint64_t v48 = 0;
          }

LABEL_78:
          char v25 = (char *)v25 + 1;
        }
        while (v25 != v23);
        id v23 = [v21 countByEnumeratingWithState:&v113 objects:v133 count:16];
      }
      while (v23);
    }

    [v4 setObject:v90 forKeyedSubscript:@"Plugins"];
    id v3 = v97;
  }
  char v49 = objc_msgSend(v3, "groupContainerURLs", v76);
  id v50 = [v49 count];

  if (!v50) {
    goto LABEL_102;
  }
  char v51 = +[NSMutableArray array];
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  unsigned int v52 = [v3 groupContainerURLs];
  id v53 = [v52 countByEnumeratingWithState:&v105 objects:v119 count:16];
  if (!v53) {
    goto LABEL_101;
  }
  id v54 = v53;
  uint64_t v55 = *(void *)v106;
  do
  {
    char v56 = 0;
    id v101 = v54;
    do
    {
      if (*(void *)v106 != v55) {
        objc_enumerationMutation(v52);
      }
      unsigned int v57 = *(void **)(*((void *)&v105 + 1) + 8 * (void)v56);
      unint64_t v58 = objc_msgSend(v3, "groupContainerURLs", v77, v80, v81);
      char v59 = [v58 objectForKeyedSubscript:v57];

      if (v59)
      {
        char v60 = sub_1001BDB98(v59);
        if (v60)
        {
          if (MBPathHasVolumePrefix())
          {
            v118[0] = v57;
            v117[0] = kCFBundleIdentifierKey;
            v117[1] = @"ContainerContentClass";
            unsigned int v61 = MBStringForContainerType(3);
            v117[2] = @"Container";
            v118[1] = v61;
            v118[2] = v60;
            unint64_t v62 = +[NSDictionary dictionaryWithObjects:v118 forKeys:v117 count:3];

            [v51 addObject:v62];
LABEL_98:

            id v3 = v97;
            goto LABEL_99;
          }
          unint64_t v62 = MBGetDefaultLog();
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_98;
          }
          *(_DWORD *)long long buf = 138412802;
          uint64_t v125 = (uint64_t)v57;
          __int16 v126 = 2112;
          v127 = v60;
          __int16 v128 = 2112;
          v129 = v103;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "GroupContainer %@ at %@ does not reside on the user data volume %@ - will not be backed up", buf, 0x20u);
          double v80 = v60;
          v81 = v103;
          id v54 = v101;
          double v77 = v57;
        }
        else
        {
          unint64_t v62 = MBGetDefaultLog();
          if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_98;
          }
          *(_DWORD *)long long buf = 138412290;
          uint64_t v125 = (uint64_t)v57;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "GroupContainer %@ found with a nil SanitizedFilesystemRepresentation for container - will not be backed up", buf, 0xCu);
          double v77 = v57;
        }
        _MBLog();
        goto LABEL_98;
      }
      char v60 = MBGetDefaultLog();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v125 = (uint64_t)v57;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "GroupContainer %@ found without a container - will not be backed up", buf, 0xCu);
        double v77 = v57;
        _MBLog();
      }
LABEL_99:

      char v56 = (char *)v56 + 1;
    }
    while (v54 != v56);
    id v54 = [v52 countByEnumeratingWithState:&v105 objects:v119 count:16];
  }
  while (v54);
LABEL_101:

  uint64_t v4 = v91;
  [v91 setObject:v51 forKeyedSubscript:@"GroupContainers"];

LABEL_102:
  id v63 = objc_msgSend(v3, "isPlaceholder", v77);
  uint64_t v64 = +[NSNumber numberWithBool:v63];
  [v4 setObject:v64 forKeyedSubscript:@"IsPlaceholder"];

  uint64_t v65 = [v3 applicationState];
  id v66 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v65 isInstalled]);
  [v4 setObject:v66 forKeyedSubscript:@"IsInstalled"];

  if ((v63 & 1) == 0)
  {
    id v104 = 0;
    id v67 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v87 allowPlaceholder:1 error:&v104];
    id v68 = v104;
    if ([v67 hasParallelPlaceholder])
    {
      double v69 = MBGetDefaultLog();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
      {
        v70 = [v3 bundleIdentifier];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v125 = (uint64_t)v70;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "%@ has a parallel placeholder", buf, 0xCu);

        v78 = [v3 bundleIdentifier];
        _MBLog();
      }
      id v71 = &__kCFBooleanTrue;
    }
    else
    {
      id v71 = &__kCFBooleanFalse;
    }
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v71, @"IsUpdating", v78);
  }
  return v4;
}

void sub_1001BCB78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001BCC70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001BD0B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001BDB98(void *a1)
{
  id v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", [a1 fileSystemRepresentation]);
  if ([v1 hasPrefix:@"/private"])
  {
    uint64_t v2 = [v1 substringFromIndex:objc_msgSend(@"/private", "length")];

    id v1 = (void *)v2;
  }
  return v1;
}

void sub_1001BE85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BE884(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001BE894(uint64_t a1)
{
}

void sub_1001BE89C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  BOOL v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v6;
  id v13 = v6;

  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v7;
  id v12 = v7;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001BF3F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1001BF468(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (![*(id *)(a1 + 32) invalidated])
  {
    uint64_t v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *(_DWORD *)(a1 + 96);
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v52) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Uploading %@ to %@, i:%u", buf, 0x1Cu);
      id v29 = v6;
      uint64_t v30 = *(unsigned int *)(a1 + 96);
      id v28 = v5;
      _MBLog();
    }

    __uint64_t v10 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    unsigned int v52 = sub_1001BE884;
    id v53 = sub_1001BE894;
    id v54 = 0;
    if (*(void *)(a1 + 48))
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 128), 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v11 = *(void **)(a1 + 48);
      id v50 = 0;
      uint64_t v12 = [v11 fileHandleWithPath:v5 flags:256 mode:0 error:&v50];
      id v13 = v50;
      uint64_t v14 = *(void **)(*(void *)&buf[8] + 40);
      *(void *)(*(void *)&buf[8] + 40) = v12;

      uint64_t v15 = *(void **)(*(void *)&buf[8] + 40);
      if (!v15)
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 128));
        id v18 = *(id *)(a1 + 40);
        objc_sync_enter(v18);
        [*(id *)(a1 + 40) setObject:v13 forKeyedSubscript:v5];
        objc_sync_exit(v18);

        id v19 = 0;
LABEL_18:
        _Block_object_dispose(buf, 8);

        goto LABEL_19;
      }
      id v16 = [v15 path];
      if (IsDatalessFault((int)[*(id *)(*(void *)&buf[8] + 40) fd]))
      {
        if (qword_100482670 != -1) {
          dispatch_once(&qword_100482670, &stru_1004159C0);
        }
        id v17 = (id)qword_100482668;

        id v16 = v17;
      }
      if (objc_msgSend(*(id *)(*(void *)&buf[8] + 40), "isSQLiteFile", v28, v29, v30))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 1;
      }
      else
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 128));
        [*(id *)(*(void *)&buf[8] + 40) closeWithError:0];
        id v20 = *(void **)(*(void *)&buf[8] + 40);
        *(void *)(*(void *)&buf[8] + 40) = 0;
      }
    }
    else
    {
      id v16 = v5;
    }
    objc_msgSend(*(id *)(a1 + 56), "setPreUploadDuration:", (char *)objc_msgSend(*(id *)(a1 + 56), "preUploadDuration") + clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - v10);
    uint64_t v44 = 0;
    char v45 = &v44;
    uint64_t v46 = 0x3032000000;
    unsigned int v47 = sub_1001BE884;
    unint64_t v48 = sub_1001BE894;
    id v49 = objc_alloc_init((Class)RPFileTransferItem);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1001BFB78;
    v31[3] = &unk_100415A10;
    id v32 = *(id *)(a1 + 56);
    id v21 = *(id *)(a1 + 64);
    char v41 = &v44;
    uint64_t v22 = *(void *)(a1 + 32);
    id v33 = v21;
    uint64_t v34 = v22;
    id v19 = v16;
    id v35 = v19;
    id v23 = v6;
    id v36 = v23;
    int v43 = *(_DWORD *)(a1 + 96);
    id v37 = *(id *)(a1 + 40);
    id v38 = v5;
    char v42 = buf;
    id v39 = *(id *)(a1 + 72);
    id v40 = *(id *)(a1 + 48);
    uint64_t v24 = objc_retainBlock(v31);
    char v25 = [[MBDeviceTransferFileMetadata alloc] initWithFromPath:v19 toRelativePath:v23];
    id v26 = [objc_alloc((Class)NSURL) initFileURLWithPath:v19 isDirectory:0];
    [(id)v45[5] setItemURL:v26];

    unsigned __int8 v27 = [(MBDeviceTransferFileMetadata *)v25 dictionaryRepresentation];
    [(id)v45[5] setMetadata:v27];

    [(id)v45[5] setCompletionHandler:v24];
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 72));
    [*(id *)(a1 + 80) addObject:v45[5]];

    _Block_object_dispose(&v44, 8);
    goto LABEL_18;
  }
  id v7 = *(id *)(a1 + 40);
  objc_sync_enter(v7);
  [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(a1 + 32) + 136) forKeyedSubscript:v5];
  objc_sync_exit(v7);

LABEL_19:
}

void sub_1001BF9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  objc_sync_exit(v28);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001BFA2C(id a1)
{
  uint64_t v1 = MBTemporaryPath();
  uint64_t v2 = (void *)qword_100482668;
  qword_100482668 = v1;

  int v3 = open((const char *)[(id)qword_100482668 fileSystemRepresentation], 1793, 384);
  if (v3 < 0)
  {
    uint64_t v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = qword_100482668;
      int v6 = *__error();
      *(_DWORD *)long long buf = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to create empty file at %@: %{errno}d", buf, 0x12u);
      __error();
      _MBLog();
    }

    __assert_rtn("-[MBPeerTransferDrive _uploadBatch:options:completion:]_block_invoke", "MBPeerTransferDrive.m", 234, "0 <= fd");
  }
  close(v3);
}

void sub_1001BFB78(uint64_t a1, void *a2)
{
  id v47 = a2;
  __uint64_t v3 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  id v4 = [*(id *)(a1 + 32) uploadStartTime];
  uint64_t v5 = [*(id *)(a1 + 40) dispatchQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = *(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40);
  uint64_t v7 = *(void *)(*(void *)(a1 + 104) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0;

  if (!v6) {
    __assert_rtn("-[MBPeerTransferDrive _uploadBatch:options:completion:]_block_invoke_3", "MBPeerTransferDrive.m", 263, "uploadedItem");
  }
  unsigned int v45 = atomic_fetch_add_explicit(&dword_100482664, 0xFFFFFFFF, memory_order_relaxed) - 1;
  uint64_t v46 = v6;
  if (v47)
  {
    unsigned int v9 = [*(id *)(a1 + 48) invalidated];
    int v10 = v47;
    if (v9) {
      int v10 = *(void **)(*(void *)(a1 + 48) + 136);
    }
    id v11 = v10;
    uint64_t v12 = MBGetDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = *(void **)(a1 + 64);
      int v15 = *(_DWORD *)(a1 + 120);
      *(_DWORD *)long long buf = 138413314;
      uint64_t v61 = v13;
      __int16 v62 = 2112;
      id v63 = v14;
      __int16 v64 = 1024;
      int v65 = v15;
      __int16 v66 = 1024;
      *(_DWORD *)id v67 = v45;
      *(_WORD *)&v67[4] = 2112;
      *(void *)&v67[6] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to upload %@ to %@ (i:%u, o:%u): %@", buf, 0x2Cu);
      _MBLog();
    }

    id v16 = *(id *)(a1 + 72);
    objc_sync_enter(v16);
    [*(id *)(a1 + 72) setObject:v11 forKeyedSubscript:*(void *)(a1 + 80)];
    objc_sync_exit(v16);

    LODWORD(v16) = [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) isSQLiteFile];
    [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) closeWithError:0];
    uint64_t v17 = *(void *)(*(void *)(a1 + 112) + 8);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = 0;

    if (v16) {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 128));
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
  }
  else
  {
    id v19 = [v6 sha256HashData];
    id v20 = v19;
    if (!v19) {
      __assert_rtn("-[MBPeerTransferDrive _uploadBatch:options:completion:]_block_invoke", "MBPeerTransferDrive.m", 289, "hashData");
    }
    if ([v19 length] != (id)32) {
      __assert_rtn("-[MBPeerTransferDrive _uploadBatch:options:completion:]_block_invoke", "MBPeerTransferDrive.m", 290, "hashData.length == 32");
    }
    id v44 = v20;
    id v21 = (unsigned __int8 *)[v44 bytes];
    int v41 = *v21;
    int v42 = v21[1];
    int v22 = v21[2];
    int v43 = v21[3];
    int v39 = v21[29];
    int v40 = v21[28];
    int v37 = v21[31];
    int v38 = v21[30];
    id v23 = (char *)[v46 fileSize];
    uint64_t v24 = (char *)[*(id *)(a1 + 32) minUploadedFileSize];
    if (v24 >= v23) {
      char v25 = v23;
    }
    else {
      char v25 = v24;
    }
    [*(id *)(a1 + 32) setMinUploadedFileSize:v25];
    id v26 = (char *)[*(id *)(a1 + 32) maxUploadedFileSize];
    if (v26 <= v23) {
      unsigned __int8 v27 = v23;
    }
    else {
      unsigned __int8 v27 = v26;
    }
    [*(id *)(a1 + 32) setMaxUploadedFileSize:v27];
    objc_msgSend(*(id *)(a1 + 32), "setUploadedByteCount:", &v23[(void)objc_msgSend(*(id *)(a1 + 32), "uploadedByteCount")]);
    objc_msgSend(*(id *)(a1 + 32), "setUploadedFileCount:", (char *)objc_msgSend(*(id *)(a1 + 32), "uploadedFileCount") + 1);
    id v28 = MBGetDefaultLog();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      uint64_t v29 = *(void *)(a1 + 56);
      uint64_t v30 = [*(id *)(a1 + 64) lastPathComponent];
      *(_DWORD *)long long buf = 138414082;
      int v31 = *(_DWORD *)(a1 + 120);
      uint64_t v61 = v29;
      __int16 v62 = 2112;
      id v63 = v30;
      __int16 v64 = 1024;
      int v65 = v31;
      __int16 v66 = 2048;
      *(double *)id v67 = (double)(v3 - (unint64_t)v4) / 1000000000.0;
      *(_WORD *)&v67[8] = 2048;
      *(void *)&v67[10] = v23;
      __int16 v68 = 1024;
      unsigned int v69 = v45;
      __int16 v70 = 1024;
      int v71 = (v41 << 24) | (v42 << 16) | (v22 << 8) | v43;
      __int16 v72 = 1024;
      int v73 = (v40 << 24) | (v39 << 16) | (v38 << 8) | v37;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Uploaded %@ to %@, i:%u, t:%.3f, s:%lld, o:%u, h:%08x...%08x", buf, 0x42u);

      id v36 = [*(id *)(a1 + 64) lastPathComponent];
      _MBLog();
    }
    id v11 = [*(id *)(a1 + 48) metadataQueues];
    id v32 = objc_msgSend(v11, "objectAtIndexedSubscript:", *(unsigned int *)(a1 + 120) % (unint64_t)objc_msgSend(v11, "count"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001C01E0;
    block[3] = &unk_1004159E8;
    uint64_t v57 = *(void *)(a1 + 112);
    id v49 = *(id *)(a1 + 96);
    id v50 = *(id *)(a1 + 80);
    int v59 = *(_DWORD *)(a1 + 120);
    id v51 = *(id *)(a1 + 72);
    id v52 = v44;
    id v53 = *(id *)(a1 + 56);
    id v33 = *(id *)(a1 + 32);
    uint64_t v34 = *(void *)(a1 + 48);
    id v54 = v33;
    uint64_t v55 = v34;
    id v56 = *(id *)(a1 + 88);
    unint64_t v58 = v23;
    id v35 = v44;
    dispatch_async(v32, block);
  }
}

void sub_1001C01C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001C01E0(uint64_t a1)
{
  __uint64_t v2 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  unsigned int v3 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) isSQLiteFile];
  id v4 = *(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 96) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = 0;

  if (v4)
  {
    uint64_t v7 = 0;
    goto LABEL_3;
  }
  id v19 = *(void **)(a1 + 32);
  if (v19)
  {
    uint64_t v20 = *(void *)(a1 + 40);
    id v29 = 0;
    id v4 = [v19 fileHandleWithPath:v20 flags:256 mode:0 error:&v29];
    id v21 = v29;
    id v10 = v21;
    if (!v4)
    {
      int v22 = MBGetDefaultLog();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(a1 + 40);
        int v24 = *(_DWORD *)(a1 + 112);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v31 = v23;
        __int16 v32 = 1024;
        int v33 = v24;
        __int16 v34 = 2112;
        id v35 = v10;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to open the file at %@ (i:%u): %@", buf, 0x1Cu);
        _MBLog();
      }

      id v15 = *(id *)(a1 + 48);
      objc_sync_enter(v15);
      [*(id *)(a1 + 48) setObject:v10 forKeyedSubscript:*(void *)(a1 + 40)];
      objc_sync_exit(v15);
      goto LABEL_8;
    }
    uint64_t v7 = v21;
LABEL_3:
    uint64_t v8 = *(void *)(a1 + 56);
    id v28 = v7;
    unsigned __int8 v9 = [v4 recordMetadataWithSHA256Data:v8 error:&v28];
    id v10 = v28;

    if ((v9 & 1) == 0)
    {
      id v11 = MBGetDefaultLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(a1 + 64);
        int v13 = *(_DWORD *)(a1 + 112);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v31 = v12;
        __int16 v32 = 1024;
        int v33 = v13;
        __int16 v34 = 2112;
        id v35 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to record metadata for %@ (i:%u): %@", buf, 0x1Cu);
        uint64_t v26 = *(unsigned int *)(a1 + 112);
        id v27 = v10;
        uint64_t v25 = *(void *)(a1 + 64);
        _MBLog();
      }

      id v14 = *(id *)(a1 + 48);
      objc_sync_enter(v14);
      [*(id *)(a1 + 48) setObject:v10 forKeyedSubscript:*(void *)(a1 + 40)];
      objc_sync_exit(v14);
    }
    objc_msgSend(v4, "closeWithError:", 0, v25, v26, v27);
    id v15 = v4;
LABEL_8:

    goto LABEL_9;
  }
  id v10 = 0;
LABEL_9:
  __uint64_t v16 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  id v17 = *(id *)(a1 + 72);
  objc_sync_enter(v17);
  objc_msgSend(*(id *)(a1 + 72), "setPostUploadDuration:", (char *)objc_msgSend(*(id *)(a1 + 72), "postUploadDuration") + v16 - v2);
  objc_sync_exit(v17);

  if (v3) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 80) + 128));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
  id v18 = +[NSURL fileURLWithPath:*(void *)(a1 + 64) isDirectory:0];
  [*(id *)(a1 + 80) _updateProgressForSentItem:v18 size:*(void *)(a1 + 104)];
}

void sub_1001C0534(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001C0558(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setUploadStartTime:v3];
  uint64_t v5 = (void *)a1[4];
  id v6 = [v4 items];
  [v5 addObjectsFromArray:v6];

  uint64_t v7 = (void *)a1[5];
  id v8 = [v4 index];

  id v10 = +[NSNumber numberWithUnsignedInt:v8];
  unsigned __int8 v9 = [v10 stringValue];
  [v7 addObject:v9];
}

id sub_1001C0620(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001C0694;
  v3[3] = &unk_100415A88;
  uint64_t v1 = *(void **)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  return [v1 enumerateObjectsUsingBlock:v3];
}

void sub_1001C0694(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 completionHandler];
  v3[2](v3, *(void *)(*(void *)(a1 + 32) + 136));
}

void sub_1001C06FC(uint64_t a1)
{
  __uint64_t v3 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  id v4 = [*(id *)(a1 + 32) uploadStartTime];
  if (*(unsigned char *)(a1 + 72))
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 120));
    unsigned int v5 = atomic_fetch_add_explicit(&dword_100482660, 0xFFFFFFFF, memory_order_relaxed) - 1;
  }
  else
  {
    unsigned int v5 = dword_100482660;
  }
  int v6 = dword_100482664;
  uint64_t v7 = MBGetDefaultLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    double v8 = (double)(v3 - (unint64_t)v4) / 1000000000.0;
    unsigned int v9 = [*(id *)(a1 + 32) index];
    id v10 = [*(id *)(a1 + 32) uploadedFileCount];
    id v21 = v2;
    uint64_t v11 = *(void *)(a1 + 64);
    id v12 = [*(id *)(a1 + 32) minUploadedFileSize];
    id v13 = [*(id *)(a1 + 32) maxUploadedFileSize];
    id v14 = [*(id *)(a1 + 32) uploadedByteCount];
    double v15 = (double)(unint64_t)[*(id *)(a1 + 32) preUploadDuration] / 1000000000.0;
    id v16 = [*(id *)(a1 + 32) postUploadDuration];
    *(_DWORD *)long long buf = 67111680;
    *(_DWORD *)&uint8_t buf[4] = v9;
    *(_WORD *)uint64_t v23 = 2048;
    *(void *)&v23[2] = v10;
    *(_WORD *)&v23[10] = 2048;
    *(void *)&v23[12] = v11;
    *(_WORD *)&v23[20] = 2048;
    *(void *)&v23[22] = v12;
    __int16 v24 = 2048;
    id v25 = v13;
    __int16 v26 = 2048;
    id v27 = v14;
    __int16 v28 = 2048;
    double v29 = v15;
    __int16 v30 = 2048;
    double v31 = (double)(unint64_t)v16 / 1000000000.0;
    __int16 v32 = 2048;
    double v33 = v8;
    __int16 v34 = 1024;
    unsigned int v35 = v5;
    __int16 v36 = 1024;
    int v37 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Uploaded batch i:%u, c:%llu/%lu, s:[%llu,%llu,%llu], t:[%.3f,%.3f,%.3f], o:%u(%u)", buf, 0x64u);
    [*(id *)(a1 + 32) index];
    [*(id *)(a1 + 32) uploadedFileCount];
    [*(id *)(a1 + 32) minUploadedFileSize];
    [*(id *)(a1 + 32) maxUploadedFileSize];
    [*(id *)(a1 + 32) uploadedByteCount];
    [*(id *)(a1 + 32) preUploadDuration];
    [*(id *)(a1 + 32) postUploadDuration];
    __uint64_t v2 = v21;
    _MBLog();
  }

  *(void *)long long buf = [*(id *)(a1 + 32) uploadedByteCount];
  *(void *)uint64_t v23 = [*(id *)(a1 + 32) uploadedFileCount];
  *(void *)&v23[8] = [*(id *)(a1 + 32) minUploadedFileSize];
  *(void *)&v23[16] = [*(id *)(a1 + 32) maxUploadedFileSize];
  id v17 = [*(id *)(a1 + 48) count];
  uint64_t v18 = *(void *)(a1 + 56);
  if (v17)
  {
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v20 = +[MBError errorWithCode:2 format:@"Multiple errors"];
    (*(void (**)(uint64_t, uint8_t *, uint64_t, void *))(v18 + 16))(v18, buf, v19, v20);
  }
  else
  {
    (*(void (**)(void, uint8_t *, void, void))(v18 + 16))(*(void *)(a1 + 56), buf, 0, 0);
  }
}

id sub_1001C0BCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uploadBatch:*(void *)(a1 + 40) options:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1001C0CF4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001C0D90;
  v4[3] = &unk_100415B00;
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  [v1 _uploadBatch:v2 options:v3 completion:v4];
}

uint64_t sub_1001C0D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a4);
  }
  return result;
}

id sub_1001C1140(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:a2];
}

id sub_1001C143C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:a2];
}

void sub_1001C16F8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1001C172C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  int v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  double v8 = WeakRetained;
  if (!WeakRetained || ([WeakRetained invalidated] & 1) != 0)
  {
    uint64_t v9 = +[MBError errorWithCode:1 format:@"Invalidated"];
    if (v9)
    {
      id v10 = (id)v9;
      uint64_t v11 = 0;
      goto LABEL_20;
    }
    if (!v8) {
      __assert_rtn("-[MBPeerTransferDrive startListeningForFileTransfers]_block_invoke", "MBPeerTransferDrive.m", 584, "strongSelf");
    }
    uint64_t v11 = 0;
    goto LABEL_15;
  }
  uint64_t v12 = [v5 metadata];
  id v13 = (void *)v12;
  id v14 = &__NSDictionary0__struct;
  if (v12) {
    id v14 = (void *)v12;
  }
  id v15 = v14;

  id v28 = 0;
  uint64_t v11 = [[MBDeviceTransferFileMetadata alloc] initWithDictionary:v15 error:&v28];

  id v10 = v28;
  if (!v11)
  {
    id v16 = MBGetDefaultLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      id v30 = v5;
      __int16 v31 = 2112;
      id v32 = v10;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to decode file metadata for item %@: %@", buf, 0x16u);
      id v24 = v5;
      id v26 = v10;
      _MBLog();
    }
  }
  if (!v10)
  {
LABEL_15:
    id v17 = [(MBDeviceTransferFileMetadata *)v11 dictionaryRepresentation];
    uint64_t v18 = MBGetDefaultLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = [v5 itemURL];
      uint64_t v20 = [v19 path];
      *(_DWORD *)long long buf = 138412546;
      id v30 = v20;
      __int16 v31 = 2112;
      id v32 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Received %@, %@", buf, 0x16u);

      id v21 = [v5 itemURL];
      id v25 = [v21 path];
      _MBLog();
    }
    id v27 = 0;
    unsigned int v22 = [v8 _handleReceivedItem:v5 metadata:v11 error:&v27];
    id v23 = v27;
    id v10 = v23;
    if (v22)
    {

      id v10 = 0;
    }
  }
LABEL_20:
  v6[2](v6, v10);
}

void sub_1001C1A24(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v41 = a2;
  id v7 = a3;
  double v8 = a4;
  uint64_t v9 = MBGetDefaultLog();
  id v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v48 = objc_opt_class();
      __int16 v49 = 2112;
      id v50 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to handle %@: %@", buf, 0x16u);
      objc_opt_class();
      _MBLog();
    }

    v8[2](v8, 0, v7);
  }
  else
  {
    int v38 = v8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v48 = (uint64_t)v41;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received %@", buf, 0xCu);
      id v36 = v41;
      _MBLog();
    }

    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id obj = [v41 relativePaths];
    id v11 = [obj countByEnumeratingWithState:&v43 objects:v53 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v40 = *(void *)v44;
      while (2)
      {
        for (char i = 0; i != v12; char i = (char *)i + 1)
        {
          if (*(void *)v44 != v40) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void *)(*((void *)&v43 + 1) + 8 * i);
          id v15 = objc_msgSend(v41, "relativePaths", v36);
          id v16 = [v15 objectForKeyedSubscript:v14];

          id v17 = [*(id *)(a1 + 32) rootURL];
          uint64_t v18 = [v17 URLByAppendingPathComponent:v14];

          uint64_t v19 = [*(id *)(a1 + 32) rootURL];
          uint64_t v20 = [v19 URLByAppendingPathComponent:v16];

          uint64_t v21 = [v20 URLByDeletingLastPathComponent];
          if (v18) {
            BOOL v22 = v20 == 0;
          }
          else {
            BOOL v22 = 1;
          }
          if (v22 || v21 == 0) {
            __assert_rtn("-[MBPeerTransferDrive startListeningForFileTransfers]_block_invoke", "MBPeerTransferDrive.m", 610, "fromURL != nil && toURL != nil && toParentURL != nil");
          }
          id v24 = (void *)v21;
          id v25 = +[NSFileManager defaultManager];
          [v25 createDirectoryAtURL:v24 withIntermediateDirectories:1 attributes:0 error:0];

          id v26 = +[NSFileManager defaultManager];
          id v42 = 0;
          unsigned __int8 v27 = [v26 moveItemAtURL:v18 toURL:v20 error:&v42];
          id v28 = v42;

          if ((v27 & 1) == 0)
          {
            id v30 = MBGetDefaultLog();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              __int16 v31 = [v18 path];
              id v32 = [v20 path];
              *(_DWORD *)long long buf = 138412802;
              uint64_t v48 = (uint64_t)v31;
              __int16 v49 = 2112;
              id v50 = v32;
              __int16 v51 = 2112;
              id v52 = v28;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to move the item from %@ to %@: %@", buf, 0x20u);

              double v33 = [v18 path];
              int v37 = [v20 path];
              _MBLog();
            }
            __int16 v34 = [v20 path];
            unsigned int v35 = +[MBError errorForNSError:v28 path:v34 format:@"Failed to move file"];
            double v8 = v38;
            v38[2](v38, 0, v35);

            goto LABEL_26;
          }
        }
        id v12 = [obj countByEnumeratingWithState:&v43 objects:v53 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }

    double v29 = objc_opt_new();
    double v8 = v38;
    ((void (**)(id, void *, id))v38)[2](v38, v29, 0);

LABEL_26:
    id v7 = 0;
  }
}

void sub_1001C1F1C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  id v10 = MBGetDefaultLog();
  id v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v37 = objc_opt_class();
      __int16 v38 = 2112;
      id v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to handle %@: %@", buf, 0x16u);
      objc_opt_class();
      _MBLog();
    }

    v9[2](v9, 0, v8);
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v37 = (uint64_t)v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received %@", buf, 0xCu);
      id v27 = v7;
      _MBLog();
    }

    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v29 = v7;
    id v12 = [v7 relativePaths];
    id v13 = [v12 countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v32;
      while (2)
      {
        for (char i = 0; i != v14; char i = (char *)i + 1)
        {
          if (*(void *)v32 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void *)(*((void *)&v31 + 1) + 8 * i);
          uint64_t v18 = objc_msgSend(*(id *)(a1 + 32), "rootURL", v27);
          uint64_t v19 = [v18 URLByAppendingPathComponent:v17];

          if (!v19) {
            __assert_rtn("-[MBPeerTransferDrive startListeningForFileTransfers]_block_invoke", "MBPeerTransferDrive.m", 640, "removeURL != nil");
          }
          uint64_t v20 = +[NSFileManager defaultManager];
          id v30 = 0;
          unsigned __int8 v21 = [v20 removeItemAtURL:v19 error:&v30];
          id v22 = v30;

          if ((v21 & 1) == 0)
          {
            id v23 = MBGetDefaultLog();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              id v24 = [v19 path];
              *(_DWORD *)long long buf = 138412546;
              uint64_t v37 = (uint64_t)v24;
              __int16 v38 = 2112;
              id v39 = v22;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to remove the item at %@: %@", buf, 0x16u);

              id v28 = [v19 path];
              _MBLog();
            }
            id v25 = [v19 path];
            id v26 = +[MBError errorForNSError:v22 path:v25 format:@"Failed to remove file"];
            v9[2](v9, 0, v26);

            goto LABEL_20;
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v31 objects:v35 count:16];
        if (v14) {
          continue;
        }
        break;
      }
    }

    id v12 = objc_opt_new();
    ((void (**)(id, void *, id))v9)[2](v9, v12, 0);
LABEL_20:

    id v8 = 0;
    id v7 = v29;
  }
}

uint64_t MBSSnapshotAttributesReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        LODWORD(v6) = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString();

        id v13 = String;
        uint64_t v14 = 24;
        goto LABEL_31;
      case 2u:
        id v16 = (void *)PBReaderReadString();

        id v13 = v16;
        uint64_t v14 = 48;
        goto LABEL_31;
      case 3u:
        uint64_t v17 = (void *)PBReaderReadString();

        id v13 = v17;
        uint64_t v14 = 16;
        goto LABEL_31;
      case 4u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 56) |= 4u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v20 |= (unint64_t)(v22 & 0x7F) << v18;
            if (v22 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v20) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v20) = 0;
        }
LABEL_49:
        uint64_t v32 = 32;
        goto LABEL_58;
      case 5u:
        Data = (void *)PBReaderReadData();

        id v13 = Data;
        uint64_t v14 = 40;
LABEL_31:
        *(void *)(a1 + v14) = v13;
        continue;
      case 6u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (2)
        {
          unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v20 |= (unint64_t)(v27 & 0x7F) << v24;
            if (v27 < 0)
            {
              v24 += 7;
              BOOL v9 = v25++ >= 9;
              if (v9)
              {
                LODWORD(v20) = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v20) = 0;
        }
LABEL_53:
        uint64_t v32 = 8;
        goto LABEL_58;
      case 7u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 56) |= 2u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v30 == -1 || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v31 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
      v20 |= (unint64_t)(v31 & 0x7F) << v28;
      if ((v31 & 0x80) == 0) {
        goto LABEL_55;
      }
      v28 += 7;
      BOOL v9 = v29++ >= 9;
      if (v9)
      {
        LODWORD(v20) = 0;
        goto LABEL_57;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_55:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v20) = 0;
    }
LABEL_57:
    uint64_t v32 = 12;
LABEL_58:
    *(_DWORD *)(a1 + v32) = v20;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001C59D8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = MBGetDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "=iCloudDrive= BRCDatabaseRestoreManager failed: %@", buf, 0xCu);
      _MBLog();
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001C5F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C5F34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001C5F44(uint64_t a1)
{
}

void sub_1001C5F4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  int v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001C62BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C62F4(uint64_t a1, int a2, id obj)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
  id v5 = obj;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001C76A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001C76B8(id a1)
{
  qword_100482680 = (uint64_t)objc_alloc_init((Class)NSMutableDictionary);
}

uint64_t sub_1001C7EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "objectForKeyedSubscript:", a2), "objectAtIndexedSubscript:", 0), "integerValue");
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "objectForKeyedSubscript:", a2), "objectAtIndexedSubscript:", 1), "doubleValue");
  double v8 = v7;
  id v9 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "objectForKeyedSubscript:", a3), "objectAtIndexedSubscript:", 0), "integerValue");
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "objectForKeyedSubscript:", a3), "objectAtIndexedSubscript:", 1), "doubleValue");
  uint64_t v11 = -1;
  if ((uint64_t)v9 >= (uint64_t)v6) {
    uint64_t v11 = 1;
  }
  uint64_t v12 = -1;
  if (v10 >= v8) {
    uint64_t v12 = v10 != v8;
  }
  if (v9 == v6) {
    return v12;
  }
  else {
    return v11;
  }
}

id sub_1001C7FD4(void *a1)
{
  id v2 = objc_msgSend(a1, "rangeOfCharacterFromSet:", +[NSCharacterSet newlineCharacterSet](NSCharacterSet, "newlineCharacterSet"));
  if (v2 == (id)0x7FFFFFFFFFFFFFFFLL) {
    return a1;
  }
  id v4 = [a1 substringToIndex:v2];
  return [v4 stringByAppendingString:@"..."];
}

uint64_t sub_1001C85A8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == 1)
  {
    if (a4)
    {
      id v5 = MBGetSQLLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        id v8 = sub_1001C7FD4(+[NSString stringWithUTF8String:a4]);
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "SQL: %@", buf, 0xCu);
        sub_1001C7FD4(+[NSString stringWithUTF8String:a4]);
        _MBLog();
      }
    }
  }
  return 0;
}

int64_t sub_1001C9548(id a1, id a2, id a3)
{
  unsigned int v5 = [a2 snapshotID];
  if (v5 < [a3 snapshotID]) {
    return -1;
  }
  unsigned int v7 = [a2 snapshotID];
  return v7 != [a3 snapshotID];
}

int64_t sub_1001CA86C(id a1, id a2, id a3)
{
  unsigned int v5 = [a2 snapshotID];
  if (v5 < [a3 snapshotID]) {
    return -1;
  }
  unsigned int v7 = [a2 snapshotID];
  return v7 != [a3 snapshotID];
}

MBFileID *sub_1001CB2B0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) step])
  {
    uint64_t result = +[MBFileID fileIDWithString:](MBFileID, "fileIDWithString:", [*(id *)(a1 + 32) textColumn:0]);
    if (result) {
      return result;
    }
    [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 48) object:*(void *)(a1 + 40) file:@"MBServiceCache.m" lineNumber:1227 description:@"Failed to convert file ID"];
  }
  return 0;
}

void sub_1001CBE70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001CBEDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001CD284(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1001CCFFCLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1001CD83C(_Unwind_Exception *a1)
{
}

id MBFetchAppBundleIDsInSnapshot(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  double v10 = MBGetDefaultLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v138 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Fetching app bundleIDs for:%@", buf, 0xCu);
    id v86 = v7;
    _MBLog();
  }

  uint64_t v11 = +[MBCKManager sharedInstance];
  uint64_t v12 = objc_opt_new();
  id v13 = +[MBCellularAccess expensiveCellularAccess];
  [v12 setCellularAccess:v13];

  [v12 setFetchAssets:0];
  uint64_t v14 = [v11 databaseManager];
  +[MBCKOperationTracker operationTrackerWithAccount:v8 databaseManager:v14 policy:v12 error:a4];
  v16 = uint64_t v15 = a4;

  if (!v16)
  {
    id v29 = 0;
    goto LABEL_100;
  }
  v96 = v7;
  uint64_t v17 = [v9 processName];
  char v18 = [v12 operationGroupWithName:@"fetchBundleIDs" processName:v17];
  [v16 setCkOperationGroup:v18];

  v100 = v15;
  unsigned int v19 = [v11 openCacheWithAccount:v8 accessType:1 error:v15];
  if (!v19)
  {
    id v29 = 0;
    goto LABEL_99;
  }
  v103 = [[MBRetryStrategy alloc] initWithDebugContext:0 networkAvailabilityProvider:0 engineMode:0 restoreType:0];
  uint64_t v20 = 0;
  id v21 = 0;
  while (1)
  {
    if (!v20)
    {
      id v113 = v21;
      uint64_t v22 = +[MBCKAccount fetchAccountWithOperationTracker:v16 cache:v19 error:&v113];
      id v23 = v113;
      char v24 = v21;
      id v21 = v23;

      if (!v22)
      {
        long long v106 = 0;
        goto LABEL_11;
      }
      uint64_t v20 = (void *)v22;
    }
    unsigned int v25 = v21;
    id v112 = v21;
    long long v106 = v20;
    unsigned __int8 v26 = objc_msgSend(v20, "fetchDevicesWithOperationTracker:error:", v16, &v112, v86);
    id v27 = v112;

    if (v26) {
      break;
    }
    id v21 = v27;
LABEL_11:
    unsigned __int8 v28 = -[MBRetryStrategy shouldRetryAfterError:](v103, "shouldRetryAfterError:", v21, v86);
    uint64_t v20 = v106;
    if ((v28 & 1) == 0)
    {
      if (v100)
      {
        id v30 = v21;
        uint64_t v20 = v106;
        id v21 = v30;
        id v29 = 0;
        void *v100 = v30;
      }
      else
      {
        id v29 = 0;
      }
      goto LABEL_98;
    }
  }
  char v31 = [v96 backupUUID];
  uint64_t v32 = [v106 deviceForUUID:v31];

  v95 = (void *)v32;
  if (v32)
  {
    [(MBRetryStrategy *)v103 reset];

    long long v33 = 0;
    long long v34 = v95;
    while (1)
    {
      if ([v95 hasFetchedSnapshots])
      {
        id v93 = v33;
        goto LABEL_31;
      }
      id v111 = v33;
      unsigned __int8 v35 = [v95 fetchSnapshotsWithOperationTracker:v16 retry:1 error:&v111];
      id v36 = v111;

      if (v35) {
        break;
      }
      long long v33 = v36;
      if (![(MBRetryStrategy *)v103 shouldRetryAfterError:v36])
      {
        id v21 = v36;
        if (v100)
        {
          id v21 = v36;
          id v29 = 0;
          void *v100 = v21;
        }
        else
        {
          id v29 = 0;
        }
        goto LABEL_97;
      }
    }
    id v93 = v36;
LABEL_31:
    v91 = v12;
    id v92 = v19;
    v94 = v16;
    v89 = v11;
    id v90 = v9;
    id v97 = [v96 snapshotUUID];
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    __int16 v38 = [v95 snapshots];
    id v39 = (char *)[v38 countByEnumeratingWithState:&v107 objects:v129 count:16];
    if (v39)
    {
      uint64_t v40 = v39;
      id v41 = 0;
      uint64_t v42 = *(void *)v108;
      while (2)
      {
        long long v43 = 0;
        long long v44 = &v41[(void)v40];
        do
        {
          if (*(void *)v108 != v42) {
            objc_enumerationMutation(v38);
          }
          long long v45 = [*(id *)(*((void *)&v107 + 1) + 8 * (void)v43) snapshotID];
          unsigned __int8 v46 = [v45 isEqualToString:v97];

          if (v46)
          {
            long long v44 = &v43[(void)v41];
            goto LABEL_42;
          }
          ++v43;
        }
        while (v40 != v43);
        uint64_t v40 = (char *)[v38 countByEnumeratingWithState:&v107 objects:v129 count:16];
        id v41 = v44;
        if (v40) {
          continue;
        }
        break;
      }
    }
    else
    {
      long long v44 = 0;
    }
LABEL_42:

    id v47 = [v95 snapshots];
    uint64_t v48 = (char *)[v47 count];

    if (v44 >= v48)
    {
      uint64_t v12 = v91;
      unsigned int v19 = v92;
      id v16 = v94;
      if (v100)
      {
        id v63 = [v96 snapshotUUID];
        +[MBError errorWithCode:1, @"No snapshots found for:%@", v63 format];
        id v29 = 0;
        void *v100 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v11 = v89;
        id v9 = v90;
        id v21 = v93;
        goto LABEL_95;
      }
      id v29 = 0;
      uint64_t v11 = v89;
      id v9 = v90;
      id v21 = v93;
    }
    else
    {
      id v87 = v8;
      __int16 v49 = [v95 snapshots];
      id v50 = objc_msgSend(v49, "subarrayWithRange:", 0, v44 + 1);

      __int16 v51 = [v50 lastObject];
      id v52 = [v51 snapshotFormat];

      uint64_t v88 = v50;
      if (v52 == (id)3)
      {
        id v53 = v94;
        id v54 = MBGetLatestDomainRecordReferencesFromSnapshots(v50);
        uint64_t v55 = objc_opt_new();
        id v56 = [[MBCKBatchFetch alloc] initWithOperationTracker:v53];
        long long v133 = 0u;
        long long v134 = 0u;
        long long v135 = 0u;
        long long v136 = 0u;
        id obja = v54;
        id v57 = [obja countByEnumeratingWithState:&v133 objects:buf count:16];
        if (v57)
        {
          id v58 = v57;
          uint64_t v59 = *(void *)v134;
          do
          {
            for (char i = 0; i != v58; char i = (char *)i + 1)
            {
              if (*(void *)v134 != v59) {
                objc_enumerationMutation(obja);
              }
              uint64_t v61 = [*(id *)(*((void *)&v133 + 1) + 8 * i) baseRecordID];
              __int16 v62 = +[MBDomainRecord recordIDFromBaseRecordID:v61 pageIndex:0];

              v130[0] = _NSConcreteStackBlock;
              v130[1] = 3221225472;
              v130[2] = sub_1001D11F0;
              v130[3] = &unk_100415D48;
              id v131 = v55;
              id v132 = v53;
              [(MBCKBatchFetch *)v56 fetchRecordWithID:v62 completion:v130];
            }
            id v58 = [obja countByEnumeratingWithState:&v133 objects:buf count:16];
          }
          while (v58);
        }

        if ([(MBCKBatchFetch *)v56 finishWithError:v100]) {
          id v29 = v55;
        }
        else {
          id v29 = 0;
        }
        uint64_t v11 = v89;
        uint64_t v12 = v91;
        unsigned int v19 = v92;

        id v9 = v90;
        id v21 = v93;
        id v16 = v94;
        long long v34 = v95;
      }
      else
      {
        id v64 = v50;
        id obj = v94;
        int v65 = dispatch_group_create();
        __int16 v66 = objc_opt_new();
        long long v125 = 0u;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v128 = 0u;
        id v67 = v64;
        id v68 = [v67 countByEnumeratingWithState:&v125 objects:buf count:16];
        id v102 = v67;
        if (v68)
        {
          id v69 = v68;
          uint64_t v70 = *(void *)v126;
          do
          {
            for (j = 0; j != v69; j = (char *)j + 1)
            {
              if (*(void *)v126 != v70) {
                objc_enumerationMutation(v102);
              }
              __int16 v72 = *(void **)(*((void *)&v125 + 1) + 8 * (void)j);
              dispatch_group_enter(v65);
              v122[0] = _NSConcreteStackBlock;
              v122[1] = 3221225472;
              v122[2] = sub_1001D17E4;
              void v122[3] = &unk_100411380;
              id v123 = v66;
              v124 = v65;
              [v72 fetchManifestsWithOperationTracker:obj referenceFetchProgress:0 manifestProgress:0 snapshotCompletion:v122];
            }
            id v67 = v102;
            id v69 = [v102 countByEnumeratingWithState:&v125 objects:buf count:16];
          }
          while (v69);
        }

        dispatch_group_wait(v65, 0xFFFFFFFFFFFFFFFFLL);
        if ([v66 count])
        {
          if (v100)
          {
            +[MBError errorWithErrors:v66];
            id v29 = 0;
            void *v100 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            id v29 = 0;
          }
          id v8 = v87;
          uint64_t v11 = v89;
          id v9 = v90;
          uint64_t v12 = v91;
          id v21 = v93;
          id v16 = v94;
        }
        else
        {
          id v29 = (id)objc_opt_new();
          long long v118 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          long long v121 = 0u;
          id v98 = v67;
          id v101 = [v98 countByEnumeratingWithState:&v118 objects:&v133 count:16];
          if (v101)
          {
            uint64_t v99 = *(void *)v119;
            do
            {
              for (k = 0; k != v101; k = (char *)k + 1)
              {
                if (*(void *)v119 != v99) {
                  objc_enumerationMutation(v98);
                }
                uint64_t v74 = *(void **)(*((void *)&v118 + 1) + 8 * (void)k);
                long long v114 = 0u;
                long long v115 = 0u;
                long long v116 = 0u;
                long long v117 = 0u;
                uint64_t v75 = [v74 manifestsByDomainName];
                id v76 = [v75 countByEnumeratingWithState:&v114 objects:v130 count:16];
                if (v76)
                {
                  id v77 = v76;
                  uint64_t v78 = *(void *)v115;
                  do
                  {
                    for (m = 0; m != v77; m = (char *)m + 1)
                    {
                      if (*(void *)v115 != v78) {
                        objc_enumerationMutation(v75);
                      }
                      uint64_t v80 = *(void *)(*((void *)&v114 + 1) + 8 * (void)m);
                      if (+[MBDomain isAppName:v80])
                      {
                        v81 = +[MBDomain containerIDWithName:v80];
                        [v29 addObject:v81];
                      }
                    }
                    id v77 = [v75 countByEnumeratingWithState:&v114 objects:v130 count:16];
                  }
                  while (v77);
                }
              }
              id v101 = [v98 countByEnumeratingWithState:&v118 objects:&v133 count:16];
            }
            while (v101);
          }

          id v8 = v87;
          uint64_t v11 = v89;
          id v9 = v90;
          uint64_t v12 = v91;
          id v21 = v93;
          id v16 = v94;
          long long v34 = v95;
        }

        unsigned int v19 = v92;
      }
      if (v29)
      {
        CFStringRef v82 = MBGetDefaultLog();
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          id v83 = [v29 count];
          *(_DWORD *)long long buf = 134218242;
          id v138 = v83;
          __int16 v139 = 2112;
          v140 = v96;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Found %ld domain names for %@", buf, 0x16u);
          [v29 count];
          _MBLog();
        }

        id v84 = v29;
        id v21 = v93;
      }

      id v63 = v88;
LABEL_95:
    }
    goto LABEL_97;
  }
  if (v100)
  {
    uint64_t v37 = [v96 backupUUID];
    void *v100 = +[MBError errorWithCode:1, @"No device found for:%@", v37 format];
  }
  id v29 = 0;
  id v21 = v27;
  long long v34 = 0;
LABEL_97:

  uint64_t v20 = v106;
LABEL_98:

LABEL_99:
  id v7 = v96;
LABEL_100:

  return v29;
}

void sub_1001D11F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    double v10 = MBGetDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to fetch domain record: %@", (uint8_t *)&buf, 0xCu);
      _MBLog();
    }
  }
  else
  {
    double v10 = +[MBDomainRecord domainRecordFromCKRecord:v8];
    uint64_t v11 = [v10 domainName];
    if (+[MBDomain isAppName:v11])
    {
      uint64_t v12 = +[MBDomain containerIDWithName:v11];
      [*(id *)(a1 + 32) addObject:v12];
    }
    else if (+[MBDomain isPlaceholderName:v11])
    {
      id v13 = *(void **)(a1 + 32);
      uint64_t v14 = [*(id *)(a1 + 40) account];
      uint64_t v15 = [v14 persona];
      id v30 = 0;
      id v26 = v13;
      unsigned __int8 v28 = v10;
      id v27 = (id)v15;
      id v29 = +[MBTemporaryDirectory userTemporaryDirectoryForPersona:identifiedBy:](MBTemporaryDirectory, "userTemporaryDirectoryForPersona:identifiedBy:");
      id v16 = [v29 path];
      id v32 = 0;
      LOBYTE(v15) = [v28 decompressAssetIntoSnapshotDirectoryRoot:v16 commitID:&stru_100418BA8 error:&v32];
      id v17 = v32;
      if (v15)
      {
        char v18 = +[MBPlaceholderFileListDB openOrCreatePlaceholderFileListIn:v16 commitID:&stru_100418BA8 error:&v30];
        unsigned int v25 = v18;
        if (v18)
        {
          id v31 = v17;
          *(void *)&long long buf = _NSConcreteStackBlock;
          *((void *)&buf + 1) = 3221225472;
          id v36 = sub_1001D17C4;
          uint64_t v37 = &unk_100411E88;
          id v38 = v26;
          unsigned __int8 v19 = [v18 enumerateAppPlaceholderDomains:&v31 block:&buf];
          id v20 = v31;

          if ((v19 & 1) == 0)
          {
            id v21 = MBGetDefaultLog();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long v33 = 138412290;
              id v34 = v20;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed enumerating app placeholder domains: %@", v33, 0xCu);
              _MBLog();
            }

            id v30 = v20;
          }

          [v25 close:0];
        }
        else
        {
          id v23 = MBGetDefaultLog();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v17;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to open placeholderDB: %@", (uint8_t *)&buf, 0xCu);
            _MBLog();
          }

          id v20 = v17;
          unsigned __int8 v19 = 0;
          id v30 = v20;
        }
      }
      else
      {
        uint64_t v22 = MBGetDefaultLog();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v17;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to decompress placeholderDomain: %@", (uint8_t *)&buf, 0xCu);
          _MBLog();
        }

        id v20 = v17;
        unsigned __int8 v19 = 0;
        id v30 = v20;
      }

      [v29 dispose];
      if ((v19 & 1) == 0)
      {
        char v24 = MBGetDefaultLog();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Failed to add bundleIDs of app placholders: %@", (uint8_t *)&buf, 0xCu);
          _MBLog();
        }
      }
    }
  }
}

void sub_1001D1714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *exc_buf, uint64_t a12)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x1001D14E8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001D17C4(uint64_t a1)
{
  return 1;
}

void sub_1001D17E4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v3 = *(id *)(a1 + 32);
    objc_sync_enter(v3);
    [*(id *)(a1 + 32) addObject:v4];
    objc_sync_exit(v3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1001D185C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001D209C(uint64_t a1, double a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001D2114;
  v3[3] = &unk_100415D70;
  id v2 = *(NSObject **)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  *(double *)&void v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t sub_1001D2114(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void, double))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 1, 0, *(double *)(a1 + 40));
}

uint64_t sub_1001D2134(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))(0.0);
}

uint64_t sub_1001D2150(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(id *)(a1 + 32);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, id, __n128))(v1 + 16);
  v4.n128_u64[0] = 0;
  return v3(v1, 4, v2, v4);
}

uint64_t sub_1001D219C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(id *)(a1 + 32);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, id, __n128))(v1 + 16);
  v4.n128_u64[0] = 0;
  return v3(v1, 4, v2, v4);
}

uint64_t sub_1001D21E8(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))(0.0);
}

void sub_1001D60EC(_Unwind_Exception *a1)
{
}

void sub_1001D61DC(uint64_t a1, uint64_t a2)
{
}

void sub_1001D61EC(uint64_t a1)
{
}

id sub_1001D61F8(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "begin");
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 184);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = 1;
    do
    {
      unsigned int v5 = objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 176), "snapshotAtIndex:", v2), "snapshotID");
      id v6 = MBGetDefaultLog();
      uint64_t v7 = v5;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id v8 = *(void **)(*(void *)(a1 + 32) + 160);
        *(_DWORD *)long long buf = 134218240;
        id v30 = v8;
        __int16 v31 = 2048;
        uint64_t v32 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%lu] Adding snapshot %lu restore files to cache", buf, 0x16u);
        id v26 = *(id *)(*(void *)(a1 + 32) + 160);
        uint64_t v27 = v5;
        _MBLog();
      }
      id v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache", v26, v27, v28), "fileIDEnumeratorForSnapshotID:backupUDID:", v5, objc_msgSend(*(id *)(a1 + 32), "backupUDID"));
      do
      {
        id v11 = [v9 nextObject];
        if (!v11) {
          goto LABEL_25;
        }
        if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "restoreFileForFileID:", v11))
        {
          uint64_t v12 = MBGetDefaultLog();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            id v13 = *(void **)(*(void *)(a1 + 32) + 160);
            *(_DWORD *)long long buf = 134218498;
            id v30 = v13;
            __int16 v31 = 2048;
            uint64_t v32 = v7;
            __int16 v33 = 2112;
            id v34 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[%lu] Already added from snapshot %lu: %@", buf, 0x20u);
            uint64_t v27 = v7;
            id v28 = v11;
            id v26 = *(id *)(*(void *)(a1 + 32) + 160);
            _MBLog();
          }
        }
        else
        {
          id v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "fileForID:snapshotID:backupUDID:", v11, v7, objc_msgSend(*(id *)(a1 + 32), "backupUDID"));
          if (!v14)
          {
            id v26 = v11;
            [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 48) object:*(void *)(a1 + 32) file:@"MBServiceRestoreEngine.m" lineNumber:745 description:@"File not found: %@"];
          }
          if ((objc_msgSend(v14, "isCommitted", v26) & 1) == 0)
          {
            id v26 = v11;
            [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 48) object:*(void *)(a1 + 32) file:@"MBServiceRestoreEngine.m" lineNumber:746 description:@"Uncommitted file found during restore: %@"];
          }
          id v15 = [*(id *)(a1 + 32) _restoreFileForFile:v14];
          if (![v15 isPending]) {
            goto LABEL_26;
          }
          id v16 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 232), "deprecated_validateFile:debugContext:", v14, objc_msgSend(*(id *)(a1 + 32), "debugContext"));
          if (objc_msgSend(objc_msgSend(objc_msgSend(v14, "domain"), "name"), "isEqualToString:", @"KeyboardDomain")&& +[MBError isError:withCode:](MBError, "isError:withCode:", v16, 205))
          {
            id v17 = MBGetDefaultLog();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              id v18 = [v14 relativePath];
              *(_DWORD *)long long buf = 138412290;
              id v30 = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Skipping invalid file from KeyboardDomain: %@", buf, 0xCu);
              id v26 = [v14 relativePath];
              _MBLog();
            }
          }
          else
          {
            if (!objc_msgSend(objc_msgSend(objc_msgSend(v14, "domain"), "name"), "isEqualToString:", @"SystemPreferencesDomain")|| !+[MBError isError:withCode:](MBError, "isError:withCode:", v16, 205))
            {
              if (v16)
              {
                [v9 close];
                *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = v16;
LABEL_25:
                int v21 = 1;
                goto LABEL_31;
              }
LABEL_26:
              if ([v14 isRegularFile] && objc_msgSend(v14, "size")) {
                [v15 setItemID:v3++];
              }
              objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "addRestoreFile:", v15);
              goto LABEL_30;
            }
            unsigned __int8 v19 = MBGetDefaultLog();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              id v20 = [v14 relativePath];
              *(_DWORD *)long long buf = 138412290;
              id v30 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Skipping invalid file from SystemPreferencesDomain: %@", buf, 0xCu);
              id v26 = [v14 relativePath];
              _MBLog();
            }
          }
        }
LABEL_30:
        int v21 = 0;
LABEL_31:
      }
      while (!v21);
      uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      if (v22) {
        BOOL v23 = 1;
      }
      else {
        BOOL v23 = v2 <= 0;
      }
      --v2;
    }
    while (!v23);
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    int v24 = 0;
  }
  else
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "setRestoreBackupUDID:", objc_msgSend(*(id *)(a1 + 32), "backupUDID"));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "setRestoreSnapshotID:", objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "settingsContext"), "snapshotID"));
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "setRestoreBackupLastModified:", *(void *)(a1 + 56));
    int v24 = 1;
  }
  id result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache", v26), "end");
  if (v24)
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "vacuum");
    return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "analyze");
  }
  return result;
}

void sub_1001D67B4(_Unwind_Exception *a1)
{
}

void sub_1001D682C(void *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x1001D6744);
  }
  JUMPOUT(0x1001D6824);
}

id sub_1001D684C(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "begin");
  if ([*(id *)(a1 + 40) count])
  {
    unint64_t v2 = 0;
    do
    {
      id v3 = [*(id *)(a1 + 40) objectAtIndexedSubscript:v2];
      unint64_t v4 = v2 + 1;
      id v5 = [*(id *)(a1 + 40) objectAtIndexedSubscript:v4];
      id v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "restoreIDForMode:", +[MBServiceRestoreMode backgroundFileRestoreModeWithPath:](MBServiceRestoreMode, "backgroundFileRestoreModeWithPath:", objc_msgSend(v5, "absolutePath")));
      unsigned int v7 = [v5 isDirectory];
      id v8 = [*(id *)(a1 + 32) cache];
      if (v7) {
        objc_msgSend(v8, "setRestoreID:forDomainName:relativePath:backupUDID:", v6, objc_msgSend(objc_msgSend(v5, "domain"), "name"), objc_msgSend(v5, "relativePath"), objc_msgSend(*(id *)(a1 + 32), "backupUDID"));
      }
      else {
        [v8 setRestoreID:v6 forRestoreFile:v3];
      }
      unint64_t v2 = v4 + 1;
    }
    while (v2 < (unint64_t)[*(id *)(a1 + 40) count]);
  }
  id v9 = [*(id *)(a1 + 32) cache];
  return [v9 end];
}

void sub_1001D6F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

MBError *sub_1001D6F40(uint64_t a1, void *a2)
{
  id v4 = +[MBServiceRestoreMode backgroundContainerRestoreModeWithContainer:a2];
  id v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "restoreIDForMode:", v4);
  id v6 = *(void **)(a1 + 32);
  if (v5 == (id)v6[20])
  {
    unsigned int v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 160);
      *(_DWORD *)long long buf = 134218242;
      uint64_t v22 = v8;
      __int16 v23 = 2112;
      id v24 = [a2 identifier];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[%lu] Already restoring dependent container %@ files with this app", buf, 0x16u);
      [a2 identifier];
LABEL_4:
      _MBLog();
    }
  }
  else
  {
    id v9 = objc_msgSend(objc_msgSend(v6, "cache"), "restoreModeForBackgroundAppWithRestoreID:", v5);
    if (!v9)
    {
      uint64_t v12 = MBGetDefaultLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 160);
        *(_DWORD *)long long buf = 134218242;
        uint64_t v22 = v13;
        __int16 v23 = 2112;
        id v24 = [a2 identifier];
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[%lu] Restoring dependent container %@ files with this app", buf, 0x16u);
        uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 160);
        id v20 = [a2 identifier];
        _MBLog();
      }
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v4, v19, v20);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      return 0;
    }
    double v10 = v9;
    if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "containsRestoreFilesWithState:forRestoreID:", 4, v5))return +[MBError errorWithCode:format:](MBError, "errorWithCode:format:", 1, @"Restoring dependent container %@ previously failed unrecoverably", objc_msgSend(a2, "identifier")); {
    unsigned int v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "containsRestoreFilesWithState:forRestoreID:", 0, v5);
    }
    id v15 = MBGetDefaultLog();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
    if (v14)
    {
      if (v16)
      {
        uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 160);
        *(_DWORD *)long long buf = 134218498;
        uint64_t v22 = v17;
        __int16 v23 = 2112;
        id v24 = [a2 identifier];
        __int16 v25 = 2112;
        id v26 = [v10 bundleID];
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[%lu] Dependent container %@ hasn't finished being restored by app %@", buf, 0x20u);
        [a2 identifier];
        [v10 bundleID];
        _MBLog();
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      return 0;
    }
    if (v16)
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 160);
      *(_DWORD *)long long buf = 134218498;
      uint64_t v22 = v18;
      __int16 v23 = 2112;
      id v24 = [a2 identifier];
      __int16 v25 = 2112;
      id v26 = [v10 bundleID];
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[%lu] Dependent container %@ has finished being restored by app %@", buf, 0x20u);
      [a2 identifier];
      [v10 bundleID];
      goto LABEL_4;
    }
  }
  return 0;
}

id sub_1001D7320(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "begin");
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  unint64_t v2 = *(void **)(a1 + 40);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (char i = 0; i != v4; char i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "setRestoreID:forType:value:", *(void *)(*(void *)(a1 + 32) + 160), objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * i), "type"), objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * i), "value"));
      }
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "end");
}

void sub_1001D83CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1001D83F0(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = a2 != 0;
  if (a4) {
    *(void *)(*(void *)(a1[7] + 8) + 40) = +[MBError errorWithCode:105, a4, @"Failed to request free space of %llu bytes at URL %@", a1[8], a1[4] error format];
  }
  uint64_t v5 = a1[5];
  return dispatch_semaphore_signal(v5);
}

void sub_1001D9354(_Unwind_Exception *a1)
{
}

void sub_1001D9744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001D9774(uint64_t a1)
{
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "begin");
  unint64_t v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "First pass for files...", buf, 2u);
    _MBLog();
  }
  unint64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  while (1)
  {
    id v5 = objc_msgSend(*(id *)(a1 + 32), "_restoreFilesFromSnapshot:restoringDirectories:", objc_msgSend(*(id *)(v4 + 176), "snapshotAtIndex:", v3), 0);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = v5;
    if (v5) {
      break;
    }
    ++v3;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v3 > *(void *)(v4 + 184))
    {
      id v6 = MBGetDefaultLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Making another pass for directories...", v11, 2u);
        _MBLog();
      }
      unint64_t v7 = 0;
      uint64_t v8 = *(void *)(a1 + 32);
      do
      {
        id v9 = objc_msgSend(*(id *)(a1 + 32), "_restoreFilesFromSnapshot:restoringDirectories:", objc_msgSend(*(id *)(v8 + 176), "snapshotAtIndex:", v7), 1);
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = v9;
        if (v9) {
          break;
        }
        ++v7;
        uint64_t v8 = *(void *)(a1 + 32);
      }
      while (v7 <= *(void *)(v8 + 184));
      return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "end");
    }
  }
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "cache"), "end");
}

void sub_1001D990C(void *a1)
{
}

void sub_1001DA6CC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  objc_begin_catch(exception_object);
  JUMPOUT(0x1001DA618);
}

intptr_t sub_1001DA758(uint64_t a1, unsigned int a2, void *a3)
{
  id v6 = MBGetDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 160);
    *(_DWORD *)long long buf = 134218498;
    uint64_t v15 = v7;
    __int16 v16 = 1024;
    unsigned int v17 = a2;
    __int16 v18 = 2112;
    uint64_t v19 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%lu] Batch completed: result=%d, error=%@", buf, 0x1Cu);
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 160);
    _MBLog();
  }
  if (a2)
  {
    [*(id *)(a1 + 32) _checkForItemErrorsInCompletedBatch:*(void *)(a1 + 40)];
  }
  else
  {
    if (!a3) {
      [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 48) object:*(void *)(a1 + 32) file:@"MBServiceRestoreEngine.m" lineNumber:1575 description:@"Error expected"];
    }
    objc_msgSend(*(id *)(a1 + 40), "setError:", +[MBError errorWithCode:error:format:](MBError, "errorWithCode:error:format:", objc_msgSend(a3, "code", v11, v12, v13), a3, @"Error getting items from chunk store"));
  }
  uint64_t v8 = MBGetDefaultLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 160);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[%lu] Signaling that batch is complete", buf, 0xCu);
    _MBLog();
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 224));
}

void sub_1001DB4E8(_Unwind_Exception *a1)
{
}

void sub_1001DB500(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1001DB50CLL);
}

void sub_1001DC4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

id sub_1001DC4E8(uint64_t a1, void *a2)
{
  id result = objc_msgSend(a2, "restoreFilesExistForDomainName:backupUDID:size:", objc_msgSend(-[MBApp domain](+[MBApp appWithBundleID:](MBApp, "appWithBundleID:", objc_msgSend(*(id *)(a1 + 32), "bundleID")), "domain"), "name"), objc_msgSend(*(id *)(a1 + 40), "backupUDID"), 0);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result ^ 1;
  return result;
}

void sub_1001DCDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001DCE30(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "setDomainManager:", objc_msgSend(*(id *)(a1 + 32), "domainManager"));
  id result = [a2 restoreFileForItemID:*(void *)(a1 + 48)];
  if (result)
  {
    id v5 = result;
    id result = objc_msgSend(a2, "fileForID:snapshotID:backupUDID:", objc_msgSend(result, "fileID"), objc_msgSend(result, "snapshotID"), objc_msgSend(*(id *)(a1 + 32), "backupUDID"));
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
    if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
      return -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", *(void *)(a1 + 56), *(void *)(a1 + 32), @"MBServiceRestoreEngine.m", 2004, @"File not found: %@/%d", [v5 fileID], objc_msgSend(v5, "snapshotID"));
    }
  }
  return result;
}

uint64_t sub_1001DE418(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001DE428(uint64_t a1)
{
}

void sub_1001DE430(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    uint64_t v2 = 3145729;
  }
  else {
    uint64_t v2 = 3145734;
  }
  unint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 57);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v5 + 40);
  unsigned __int8 v6 = [v3 _openWithFlags:v2 usePQLBatching:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 24);
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Can't open database at %@: %@", buf, 0x16u);
      _MBLog();
    }
  }
}

void sub_1001DE720(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 _invalidate:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v4;
}

void sub_1001DEA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1001DEAD4(void *a1)
{
  uint64_t v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)(a1[4] + 8) + 40);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Closing PQL connection %@", buf, 0xCu);
    _MBLog();
  }

  unsigned __int8 v4 = *(void **)(*(void *)(a1[4] + 8) + 40);
  uint64_t v5 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v5 + 40);
  unsigned __int8 v6 = [v4 close:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v6;
}

id sub_1001DED70(uint64_t a1)
{
  return [*(id *)(a1 + 32) close:0];
}

uint64_t sub_1001DEE40(uint64_t a1)
{
  [*(id *)(a1 + 32) _removeCorruptDatabaseWithError:*(void *)(a1 + 40)];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

void sub_1001DFA7C(_Unwind_Exception *a1)
{
}

void sub_1001E0470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E049C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained) {
    goto LABEL_23;
  }
  uint64_t v11 = MBGetDefaultLog();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (v8)
  {
    if (!v12) {
      goto LABEL_8;
    }
    *(_DWORD *)long long buf = 138412802;
    id v26 = v8;
    __int16 v27 = 2112;
    id v28 = v7;
    __int16 v29 = 2112;
    id v30 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Sqlite request %@ failed on %@ with error: %@", buf, 0x20u);
    id v23 = v7;
    id v24 = v9;
    id v22 = v8;
  }
  else
  {
    if (!v12) {
      goto LABEL_8;
    }
    *(_DWORD *)long long buf = 138412546;
    id v26 = v7;
    __int16 v27 = 2112;
    id v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Sqlite failed on %@ with error: %@", buf, 0x16u);
    id v22 = v7;
    id v23 = v9;
  }
  _MBLog();
LABEL_8:

  uint64_t v13 = [v9 domain];
  unsigned int v14 = [v13 isEqualToString:PQLSqliteErrorDomain];

  if (v14)
  {
    unint64_t v15 = (unint64_t)[v9 code];
    unint64_t v16 = v15;
    if (v15 <= 0x1A)
    {
      if (((1 << v15) & 0x1384000) != 0) {
        goto LABEL_11;
      }
      if (((1 << v15) & 0x4000800) != 0)
      {
LABEL_17:
        objc_msgSend(WeakRetained, "_removeCorruptDatabaseWithError:completion:", v9, &stru_100415F68, v22, v23, v24);
        goto LABEL_23;
      }
      if (v15 == 13)
      {
LABEL_19:
        sleep(5u);
        goto LABEL_23;
      }
    }
    if (v15 != 1) {
      goto LABEL_23;
    }
    uint64_t v19 = [v9 userInfo];
    id v20 = [v19 objectForKeyedSubscript:@"SqliteSQL"];

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      unsigned __int8 v21 = [v20 isEqualToString:@"commit"];

      if (v21) {
        goto LABEL_23;
      }
    }
    else
    {
    }
LABEL_11:
    uint64_t v17 = MBGetDefaultLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      __int16 v18 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      id v26 = v18;
      __int16 v27 = 2112;
      id v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Unexpected SQLite error for db at %@: %@", buf, 0x16u);
      id v22 = *(id *)(a1 + 32);
      id v23 = v9;
      _MBLog();
    }

    if (v16 != 11)
    {
      if (v16 != 13) {
        goto LABEL_23;
      }
      goto LABEL_19;
    }
    goto LABEL_17;
  }
LABEL_23:
}

void sub_1001E0D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1001E0D68(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    id obj = *(id *)(v4 + 40);
    LOBYTE(v3) = (*(uint64_t (**)(uint64_t, void *, id *))(v3 + 16))(v3, v2, &obj);
    objc_storeStrong((id *)(v4 + 40), obj);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v3;
  }
  else
  {
    uint64_t v5 = [*(id *)(a1 + 32) _invalidatedError];
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
}

id sub_1001E0F88(uint64_t a1, void *a2, uint64_t a3)
{
  return [a2 groupInTransaction:*(void *)(a1 + 32) error:a3];
}

id sub_1001E10A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [v5 execute:*(void *)(a1 + 32) args:**(void **)(a1 + 40)];
  id v7 = v6;
  if (a3 && (v6 & 1) == 0)
  {
    *a3 = [v5 lastError];
  }

  return v7;
}

void sub_1001E1248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001E1260(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = **(void **)(a1 + 56);
  id v8 = a2;
  id v9 = [v8 fetchObjectOfClass:v6 sql:v5 args:v7];
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  BOOL v12 = [v8 lastError];

  uint64_t v13 = [v12 excludingNotFound];

  if (a3) {
    *a3 = v13;
  }

  return v13 == 0;
}

void sub_1001E1440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001E1458(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [v5 fetchObjectOfClass:objc_opt_class() sql:*(void *)(a1 + 32) args:**(void **)(a1 + 48)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  id v9 = [v5 lastError];

  if (a3) {
    *a3 = v9;
  }

  return v9 == 0;
}

id sub_1001E15A8(uint64_t a1, void *a2, uint64_t a3)
{
  return [a2 executeStatements:*(void *)(a1 + 32) error:a3];
}

void sub_1001E1720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001E1738(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = [a2 fetch:*(void *)(a1 + 32) args:**(void **)(a1 + 48)];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  id v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  return _[v8 checkSuccessWithError:a3];
}

id sub_1001E1A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) enumerateWithError:a3 block:*(void *)(a1 + 40)];
}

id MBAllDrivePlugins()
{
  id v0 = +[NSMutableArray array];
  [v0 addObject:objc_alloc_init(MBAnalyticsEventPlugin)];
  [v0 addObject:objc_alloc_init(MBAppleCarePlugin)];
  [v0 addObject:objc_alloc_init(MBApplePushServicePlugin)];
  [v0 addObject:objc_alloc_init(MBDataMigratorPlugin)];
  [v0 addObject:objc_alloc_init(MBDaemonPlugin)];
  [v0 addObject:objc_alloc_init(MBiTunesStorePlugin)];
  [v0 addObject:objc_alloc_init(MBKeychainPlugin)];
  [v0 addObject:objc_alloc_init(MBLockdownPlugin)];
  [v0 addObject:objc_alloc_init(MBManagerPlugin)];
  [v0 addObject:objc_alloc_init(MBRestoreAppsPlugin)];
  [v0 addObject:objc_alloc_init(MBATCBundlesPlugin)];
  [v0 addObject:objc_alloc_init(MBManateePlugin)];
  [v0 addObject:objc_alloc_init(MBWiFiPlugin)];
  [v0 addObject:objc_alloc_init(MBiCloudDrivePlugin)];
  [v0 addObject:objc_alloc_init(MBScreenTimePlugin)];
  [v0 addObject:objc_alloc_init(MBSiriPlugin)];
  [v0 addObject:objc_alloc_init(MBKeyboardPlugin)];
  [v0 addObject:objc_alloc_init(MBFileProviderPlugin)];
  return v0;
}

uint64_t sub_1001E24FC(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 stringAtIndex:0];
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v4;
}

void sub_1001E2CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Block_object_dispose((const void *)(v30 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E2D3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001E2D4C(uint64_t a1)
{
}

uint64_t sub_1001E2D54(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 unsignedLongLongAtIndex:0];
  unsigned __int8 v5 = [v3 unsignedLongAtIndex:1];
  uint64_t v6 = [v3 stringAtIndex:2];
  id v7 = [v3 unsignedLongLongAtIndex:3];
  if (!v6) {
    __assert_rtn("-[MBPendingSnapshotDB enumerateAssetsPendingUploadForDomain:error:block:]_block_invoke", "MBPendingSnapshotDB.m", 443, "path");
  }
  uint64_t v8 = *(void *)(a1[5] + 8);
  uint64_t v9 = *(void *)(a1[6] + 8);
  uint64_t v10 = *(void *)(v9 + 24);
  if (v4 == *(id *)(v8 + 24))
  {
    *(void *)(v9 + 24) = v10 + 1;
    if ((unint64_t)[*(id *)(*(void *)(a1[7] + 8) + 40) count] <= 4) {
      [*(id *)(*(void *)(a1[7] + 8) + 40) addObject:v6];
    }
    uint64_t v11 = 1;
  }
  else
  {
    id v12 = v7;
    if (v10 != -1)
    {
      if (!(*(unsigned int (**)(void))(a1[4] + 16))())
      {
        uint64_t v11 = 0;
        goto LABEL_11;
      }
      uint64_t v8 = *(void *)(a1[5] + 8);
    }
    *(void *)(v8 + 24) = v4;
    *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = v5;
    uint64_t v11 = 1;
    *(void *)(*(void *)(a1[6] + 8) + 24) = 1;
    id v13 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithObjects:", v6, 0);
    uint64_t v14 = *(void *)(a1[7] + 8);
    unint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    *(void *)(*(void *)(a1[9] + 8) + 24) = v12;
  }
LABEL_11:

  return v11;
}

void sub_1001E31B0(_Unwind_Exception *a1)
{
}

void sub_1001E31D0(void *a1)
{
}

id sub_1001E33B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _performAssetCopyFromAttachedFileListWithPreviousFileList:*(unsigned __int8 *)(a1 + 48) domainName:*(void *)(a1 + 40) error:a3];
}

uint64_t sub_1001E349C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = [*(id *)(a1 + 32) db];
  id v6 = [v5 fetchCountWithError:a3, @"SELECT COUNT(*) FROM AssetsToUpload WHERE domain = %@ AND uploadState = %llu", *(void *)(a1 + 40), 1 sql];

  if (v6 == (id)0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  id v7 = [*(id *)(a1 + 32) db];
  id v8 = [v7 fetchCountWithError:a3, @"SELECT COUNT(*) FROM AssetsToDelete WHERE domain = %@", *(void *)(a1 + 40) sql];

  if (v8 == (id)0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v10 = *(void **)(a1 + 48);
  if (v10) {
    *uint64_t v10 = v6;
  }
  uint64_t v11 = *(void **)(a1 + 56);
  if (v11) {
    void *v11 = v8;
  }
  return 1;
}

uint64_t sub_1001E3668(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v37 = 0;
  id v38 = &v37;
  uint64_t v39 = 0x2020000000;
  uint64_t v40 = 0;
  id v6 = objc_opt_new();
  id v7 = objc_opt_new();
  id v8 = [*(id *)(a1 + 32) db];
  uint64_t v9 = [v8 fetchSQL:@"SELECT recordIDSuffix FROM AssetsToUpload WHERE domain = %@ AND uploadState = %llu", *(void *)(a1 + 40), 1];
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_1001E3920;
  v31[3] = &unk_100416148;
  id v10 = v6;
  uint64_t v11 = *(void **)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  id v32 = v10;
  unsigned __int8 v35 = &v37;
  uint64_t v36 = v12;
  id v34 = v11;
  id v13 = v7;
  id v33 = v13;
  unsigned __int8 v14 = [v9 enumerateWithError:a3 block:v31];

  if ((v14 & 1) == 0) {
    goto LABEL_7;
  }
  unint64_t v15 = [*(id *)(a1 + 32) db];
  unint64_t v16 = [v15 fetchSQL:@"SELECT recordIDSuffix FROM AssetsToDelete WHERE domain = %@", *(void *)(a1 + 40)];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1001E39CC;
  v25[3] = &unk_100416148;
  id v17 = v13;
  id v26 = v17;
  id v18 = v10;
  uint64_t v19 = *(void **)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  id v27 = v18;
  __int16 v29 = &v37;
  uint64_t v30 = v20;
  id v28 = v19;
  unsigned int v21 = [v16 enumerateWithError:a3 block:v25];

  if (!v21) {
    goto LABEL_7;
  }
  if (v38[3] && (id v22 = [v18 count], !((char *)objc_msgSend(v17, "count") + (void)v22))
    || (*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))())
  {
    uint64_t v23 = 1;
  }
  else
  {
LABEL_7:
    uint64_t v23 = 0;
  }

  _Block_object_dispose(&v37, 8);
  return v23;
}

void sub_1001E3904(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E3920(uint64_t a1, void *a2)
{
  id v3 = [a2 stringAtIndex:0];
  [*(id *)(a1 + 32) addObject:v3];
  if ((unint64_t)[*(id *)(a1 + 32) count] >= *(void *)(a1 + 64))
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    if (!(*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))())
    {
      uint64_t v4 = 0;
      goto LABEL_6;
    }
    [*(id *)(a1 + 32) removeAllObjects];
  }
  uint64_t v4 = 1;
LABEL_6:

  return v4;
}

uint64_t sub_1001E39CC(uint64_t a1, void *a2)
{
  id v3 = [a2 stringAtIndex:0];
  [*(id *)(a1 + 32) addObject:v3];
  uint64_t v4 = (char *)[*(id *)(a1 + 40) count];
  if (&v4[(void)[*(id *)(a1 + 32) count]] >= (char *)*(void *)(a1 + 64))
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    if (!(*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))())
    {
      uint64_t v5 = 0;
      goto LABEL_6;
    }
    [*(id *)(a1 + 40) removeAllObjects];
    [*(id *)(a1 + 32) removeAllObjects];
  }
  uint64_t v5 = 1;
LABEL_6:

  return v5;
}

uint64_t sub_1001E3CBC(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_1001E3CE0(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_1001E3D04(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_1001E3EA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 stringAtIndex:0];
  uint64_t v5 = [v3 stringAtIndex:1];
  [v3 unsignedLongLongAtIndex:2];
  [v3 unsignedLongLongAtIndex:3];

  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  return v6;
}

uint64_t sub_1001E4034(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 stringAtIndex:0];
  uint64_t v5 = [v3 stringAtIndex:1];
  [v3 unsignedLongLongAtIndex:2];

  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  return v6;
}

uint64_t sub_1001E41AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 stringAtIndex:0];
  uint64_t v5 = [v3 stringAtIndex:1];
  [v3 unsignedLongLongAtIndex:2];

  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  return v6;
}

void sub_1001E4A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E4A60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 40)) {
    **(_DWORD **)(a1 + 40) = [v3 unsignedIntAtIndex:0];
  }
  uint64_t v5 = [v4 stringAtIndex:1];
  id v6 = [v4 unsignedLongLongAtIndex:2];
  signed __int8 v7 = [v4 unsignedCharAtIndex:3];
  id v8 = [v4 dataAtIndex:4];
  uint64_t v9 = +[MBAssetMetadata assetMetadataFromRecordIDSuffix:signature:size:type:compressionMethod:encryptionKey:](MBAssetMetadata, "assetMetadataFromRecordIDSuffix:signature:size:type:compressionMethod:encryptionKey:", v5, v8, [v4 unsignedLongLongAtIndex:5], v6, v7, 0);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  if (*(void *)(a1 + 48)) {
    **(void **)(a1 + 4_Block_object_dispose(&STACK[0x280], 8) = [v4 unsignedLongAtIndex:6];
  }

  return 1;
}

uint64_t sub_1001E4C6C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v3 stringAtIndex:0];
  unsigned int v5 = [v3 unsignedIntAtIndex:1];

  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, void))(v2 + 16))(v2, v4, v5);
  return v6;
}

uint64_t sub_1001E4EDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 unsignedLongLongAtIndex:0];
  uint64_t v4 = [v3 stringAtIndex:1];

  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  return v5;
}

uint64_t sub_1001E503C(uint64_t a1, void *a2, uint64_t *a3)
{
  id v5 = a2;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v6 = *(id *)(a1 + 32);
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v17;
    while (2)
    {
      for (char i = 0; i != v8; char i = (char *)i + 1)
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        if (([v5 executeWithError:a3, @"INSERT OR REPLACE INTO DomainHMACsToRepair (domainHMAC) VALUES (%@)", v11 sql] & 1) == 0)
        {
          id v13 = MBGetDefaultLog();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v14 = *a3;
            *(_DWORD *)long long buf = 138412546;
            uint64_t v21 = v11;
            __int16 v22 = 2112;
            uint64_t v23 = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to add repair domain HMAC %@: %@", buf, 0x16u);
            _MBLog();
          }

          uint64_t v12 = 0;
          goto LABEL_13;
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
  uint64_t v12 = 1;
LABEL_13:

  return v12;
}

uint64_t sub_1001E55F8(uint64_t a1, void *a2)
{
  id v3 = [a2 stringAtIndex:0];
  [*(id *)(a1 + 32) addObject:v3];

  return 1;
}

void sub_1001E5A2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1001E59CCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E5CE8(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_1001E5E04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (+[MBDomain isAppName:v3])
  {
    uint64_t v4 = [*(id *)(a1 + 40) dependentDomainNamesForAppDomainName:v3];
    [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v3];
  }
  return 1;
}

void sub_1001E6190(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1001E6110);
  }
  _Unwind_Resume(exception_object);
}

id MBCopyAssetsToUploadIntoPendingSnapshotDatabase(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  long long v16 = +[MBPendingSnapshotDB openOrCreateDatabaseIn:v12 commitID:v13 readonly:1 error:a6];
  if (!v16)
  {
    id v19 = 0;
    goto LABEL_12;
  }
  long long v17 = +[NSFileManager defaultManager];
  uint64_t v32 = 0;
  id v33 = &v32;
  uint64_t v34 = 0x3032000000;
  unsigned __int8 v35 = sub_1001E2D3C;
  uint64_t v36 = sub_1001E2D4C;
  id v37 = 0;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1001E6584;
  v24[3] = &unk_100416210;
  id v25 = v12;
  id v26 = v13;
  id v18 = v17;
  id v27 = v18;
  __int16 v31 = &v32;
  id v28 = v14;
  id v29 = v15;
  id v30 = v11;
  id v19 = [v16 enumerateDomainsRequiringFileListCopy:a6 block:v24];
  if (([v16 close:a6] & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v20 = (void *)v33[5];
  if (v20)
  {
    if (a6) {
      *a6 = v20;
    }
    uint64_t v21 = MBGetDefaultLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = v33[5];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v39 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to copy assets to upload into pending snapshot database: %@", buf, 0xCu);
      _MBLog();
    }

LABEL_9:
    id v19 = 0;
  }

  _Block_object_dispose(&v32, 8);
LABEL_12:

  return v19;
}

void sub_1001E655C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001E6584(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = MBFileListDBPath(*(void **)(a1 + 32), *(void *)(a1 + 40), v3);
  if ([*(id *)(a1 + 48) fileExistsAtPath:v4])
  {
    uint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      id v6 = MBFileListDBPath(*(void **)(a1 + 32), v5, v3);
      if ([*(id *)(a1 + 48) fileExistsAtPath:v6])
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 56);
        uint64_t v9 = *(void *)(*(void *)(a1 + 80) + 8);
        id v11 = *(void **)(v9 + 40);
        uint64_t v10 = (id *)(v9 + 40);
        id obj = v11;
        id v12 = +[MBFileListDB openDatabaseIn:v7 commitID:v8 domainName:v3 error:&obj];
        if (!v12)
        {
          objc_storeStrong(v10, obj);
LABEL_20:
          id v27 = MBGetDefaultLog();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            id v28 = *(void **)(a1 + 56);
            uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
            *(_DWORD *)long long buf = 138412802;
            id v35 = v28;
            __int16 v36 = 2112;
            id v37 = v3;
            __int16 v38 = 2112;
            uint64_t v39 = v29;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "=asset copy= Failed to upgrade file list database for commitID: %@ domainName: %@: %@", buf, 0x20u);
            _MBLog();
          }
          id v18 = 0;
          goto LABEL_23;
        }
        id v13 = v12;
        unsigned __int8 v14 = [v12 close:&obj];

        objc_storeStrong(v10, obj);
        if ((v14 & 1) == 0) {
          goto LABEL_20;
        }
LABEL_10:
        if ([*(id *)(a1 + 64) shouldRepairDomain:v3])
        {

          id v19 = MBGetDefaultLog();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            id v35 = v3;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "=domain repair= Not copying assets in previous file list for %@", buf, 0xCu);
            _MBLog();
          }

          id v6 = 0;
        }
        uint64_t v20 = MBGetDefaultLog();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          id v35 = v4;
          __int16 v36 = 2112;
          id v37 = v6;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "=asset copy= Copying assets to upload from pending file list:%@ previous file list:%@", buf, 0x16u);
          _MBLog();
        }

        uint64_t v21 = *(void **)(a1 + 72);
        uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8);
        id v32 = *(id *)(v22 + 40);
        unsigned int v23 = [v21 copyAssetsToUploadFromPendingFileList:v4 previousFileListPath:v6 domainName:v3 error:&v32];
        objc_storeStrong((id *)(v22 + 40), v32);
        if (!v23)
        {
          id v18 = 0;
LABEL_24:

          goto LABEL_25;
        }
        id v24 = *(void **)(a1 + 72);
        uint64_t v25 = *(void *)(*(void *)(a1 + 80) + 8);
        id v31 = *(id *)(v25 + 40);
        id v18 = [v24 markDomainRequiringAssetUpload:v3 error:&v31];
        id v26 = v31;
        id v27 = *(NSObject **)(v25 + 40);
        *(void *)(v25 + 40) = v26;
LABEL_23:

        goto LABEL_24;
      }
    }
    id v6 = 0;
    goto LABEL_10;
  }
  uint64_t v15 = +[MBError errorWithCode:205 path:v4 format:@"Pending file list for domain not found"];
  uint64_t v16 = *(void *)(*(void *)(a1 + 80) + 8);
  long long v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;

  id v18 = 0;
LABEL_25:

  return v18;
}

id MBCommitUploadedAssetsIntoFileList(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x3032000000;
  uint64_t v29 = sub_1001E2D3C;
  id v30 = sub_1001E2D4C;
  id v31 = 0;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1001E6B5C;
  void v21[3] = &unk_100416238;
  id v13 = v11;
  id v22 = v13;
  id v14 = v12;
  id v23 = v14;
  id v15 = v10;
  id v24 = v15;
  uint64_t v25 = &v26;
  id v16 = [v9 enumerateDomainsRequiringAssetUpload:a5 block:v21];
  long long v17 = (void *)v27[5];
  if (v17)
  {
    if (a5) {
      *a5 = v17;
    }
    id v18 = MBGetDefaultLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = v27[5];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v33 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to write uploaded assets into file list: %@", buf, 0xCu);
      _MBLog();
    }

    id v16 = 0;
  }

  _Block_object_dispose(&v26, 8);
  return v16;
}

void sub_1001E6B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001E6B5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = MBFileListDBPath(*(void **)(a1 + 32), *(void *)(a1 + 40), v3);
  uint64_t v5 = MBGetDefaultLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "=asset commit= Writing uploaded assets into file list %@", buf, 0xCu);
    _MBLog();
  }

  id v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v7 + 40);
  id v8 = [v6 countAssetsPendingUploadForDomainName:v3 error:&obj];
  objc_storeStrong((id *)(v7 + 40), obj);
  if (v8)
  {
    uint64_t v9 = +[MBError errorWithCode:205, @"Found %lld files pending upload for %@", v8, v3 format];
    id v10 = 0;
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v9;
  }
  else
  {
    id v13 = *(void **)(a1 + 48);
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
    id v21 = *(id *)(v14 + 40);
    unsigned int v15 = [v13 commitUploadedAssetsIntoPendingFileList:v4 domainName:v3 error:&v21];
    objc_storeStrong((id *)(v14 + 40), v21);
    if (!v15)
    {
      id v10 = 0;
      goto LABEL_8;
    }
    id v16 = *(void **)(a1 + 48);
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
    id v20 = *(id *)(v17 + 40);
    id v10 = [v16 markDomainRequiringFileListUpload:v3 error:&v20];
    id v18 = v20;
    id v12 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v18;
  }

LABEL_8:
  return v10;
}

id _MBAssert(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = sub_1001E6FB0(a1, a2, (uint64_t)&a9);
  return v9;
}

id sub_1001E6FB0(char a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = sub_1001E703C(a2, a3);
  }
  return v4;
}

id sub_1001E6FFC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = sub_1001E703C(a1, (uint64_t)&a9);
  return v9;
}

id sub_1001E703C(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = [objc_alloc((Class)NSString) initWithFormat:v3 arguments:a2];

  uint64_t v5 = +[MBError errorWithCode:1 description:v4];

  return v5;
}

BOOL sub_1001E70C4(char a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = sub_1001E6FB0(a1, a3, (uint64_t)&a9);
  uint64_t v11 = v10;
  if (a2 && v10) {
    *a2 = v10;
  }

  return v11 == 0;
}

int64_t sub_1001E8294(id a1, id a2, id a3)
{
  unsigned int v5 = [a2 snapshotID];
  if (v5 < [a3 snapshotID]) {
    return -1;
  }
  unsigned int v7 = [a2 snapshotID];
  return v7 != [a3 snapshotID];
}

int64_t sub_1001EC554(id a1, id a2, id a3)
{
  return (int64_t)[a3 compare:a2];
}

int64_t sub_1001EE5A4(id a1, id a2, id a3)
{
  return (int64_t)[a3 compare:a2];
}

void sub_1001EF42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EF478(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001EF488(uint64_t a1)
{
}

BOOL sub_1001EF490(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (v8)
  {
    uint64_t v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v39 = v10;
      __int16 v40 = 2112;
      *(void *)id v41 = v11;
      *(_WORD *)&v41[8] = 2112;
      *(void *)&v41[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "=scanning= Error enumerating file attrs %@ %@: %@", buf, 0x20u);
      _MBLog();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), a4);
    goto LABEL_13;
  }
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 48) + 49));
  if (v12)
  {
    uint64_t v26 = +[MBError errorWithCode:202 format:@"File scan cancelled"];
    uint64_t v27 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = v26;

LABEL_13:
    BOOL v25 = 0;
    goto LABEL_14;
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
  if (__ROR8__(0xD288CE703AFB7E91 * *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24), 4) <= 0x68DB8BAC710CBuLL)
  {
    id v13 = MBGetDefaultLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
      int v15 = *(_DWORD *)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = [*(id *)(a1 + 32) name];
      *(_DWORD *)long long buf = 134218754;
      uint64_t v39 = v14;
      __int16 v40 = 1024;
      *(_DWORD *)id v41 = v15;
      *(_WORD *)&v41[4] = 2114;
      *(void *)&v41[6] = v16;
      *(_WORD *)&v41[14] = 2114;
      *(void *)&v41[16] = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "=scanning= Found %llu/%u items under %{public}@ (%{public}@), single pass", buf, 0x26u);

      uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v20 = *(unsigned int *)(a1 + 104);
      [*(id *)(a1 + 32) name];
      id v37 = v36 = v19;
      uint64_t v34 = v18;
      uint64_t v35 = v20;
      _MBLog();
    }
  }
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 32);
  id v23 = objc_msgSend(*(id *)(a1 + 40), "stringByAppendingPathComponent:", v7, v34, v35, v36, v37);
  id v24 = +[MBFile fileWithDomain:v22 snapshotPath:v21 relativePath:v23];

  [v24 setNode:a3];
  if ([*(id *)(a1 + 48) _shouldNotBackupFile:v24 domain:*(void *)(a1 + 32)])
  {
    BOOL v25 = 1;
  }
  else
  {
    if ((*(_WORD *)(a3 + 68) & 0xF000) == 0x4000 || !objc_msgSend(v7, "mb_pathHasSQLiteJournalSuffix"))
    {
      [*(id *)(a1 + 64) addObject:v7];
      uint64_t v33 = *(void **)(a1 + 72);
      id v32 = +[NSData dataWithBytes:a3 length:72];
      [v33 addObject:v32];
    }
    else
    {
      uint64_t v30 = [*(id *)(a1 + 48) _foundFile:v24 snapshotPath:*(void *)(a1 + 56) stats:*(void *)(a1 + 96)];
      uint64_t v31 = *(void *)(*(void *)(a1 + 80) + 8);
      id v32 = *(void **)(v31 + 40);
      *(void *)(v31 + 40) = v30;
    }

    BOOL v25 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) == 0;
  }

LABEL_14:
  return v25;
}

void sub_1001EFDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 240), 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001EFDFC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (v8)
  {
    uint64_t v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v32 = v10;
      __int16 v33 = 2112;
      *(void *)uint64_t v34 = v11;
      *(_WORD *)&v34[8] = 2112;
      *(void *)&v34[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "=scanning= Error enumerating file attrs %@ %@: %@", buf, 0x20u);
      _MBLog();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a4);
    goto LABEL_15;
  }
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 48) + 49));
  if (v12)
  {
    uint64_t v23 = +[MBError errorWithCode:202 format:@"File scan cancelled"];
    uint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8);
    BOOL v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;

LABEL_15:
    BOOL v22 = 0;
    goto LABEL_16;
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  if (__ROR8__(0xD288CE703AFB7E91 * *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24), 4) <= 0x68DB8BAC710CBuLL)
  {
    id v13 = MBGetDefaultLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      int v15 = *(_DWORD *)(a1 + 88);
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = [*(id *)(a1 + 32) name];
      *(_DWORD *)long long buf = 134218754;
      uint64_t v32 = v14;
      __int16 v33 = 1024;
      *(_DWORD *)uint64_t v34 = v15;
      *(_WORD *)&v34[4] = 2114;
      *(void *)&v34[6] = v16;
      *(_WORD *)&v34[14] = 2114;
      *(void *)&v34[16] = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "=scanning= Found %llu/%u items under %{public}@ (%{public}@), first pass", buf, 0x26u);

      uint64_t v30 = [*(id *)(a1 + 32) name];
      _MBLog();
    }
  }
  if ((*(_WORD *)(a3 + 68) & 0xF000) == 0x4000 || !objc_msgSend(v7, "mb_pathHasSQLiteJournalSuffix"))
  {
    BOOL v22 = 1;
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = [*(id *)(a1 + 40) stringByAppendingPathComponent:v7];
    uint64_t v21 = +[MBFile fileWithDomain:v19 snapshotPath:v18 relativePath:v20];

    [v21 setNode:a3];
    if ([*(id *)(a1 + 48) _shouldNotBackupFile:v21 domain:*(void *)(a1 + 32)])
    {
      BOOL v22 = 1;
    }
    else
    {
      uint64_t v27 = [*(id *)(a1 + 48) _foundFile:v21 snapshotPath:*(void *)(a1 + 56) stats:*(void *)(a1 + 80)];
      uint64_t v28 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v29 = *(void **)(v28 + 40);
      *(void *)(v28 + 40) = v27;

      BOOL v22 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) == 0;
    }
  }
LABEL_16:

  return v22;
}

uint64_t sub_1001F0170(uint64_t a1, void *a2, unsigned int *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (v8)
  {
    uint64_t v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v42 = v10;
      __int16 v43 = 2112;
      *(void *)long long v44 = v11;
      *(_WORD *)&v44[8] = 2112;
      *(void *)&v44[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "=scanning= Error enumerating file attrs %@ %@: %@", buf, 0x20u);
      _MBLog();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), a4);
    goto LABEL_14;
  }
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 48) + 49));
  if (v12)
  {
    uint64_t v22 = +[MBError errorWithCode:202 format:@"File scan cancelled"];
    uint64_t v23 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v24 = *(void **)(v23 + 40);
    *(void *)(v23 + 40) = v22;

LABEL_14:
    uint64_t v21 = 0;
    goto LABEL_15;
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
  if (__ROR8__(0xD288CE703AFB7E91 * *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24), 4) <= 0x68DB8BAC710CBuLL)
  {
    id v13 = MBGetDefaultLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
      int v15 = *(_DWORD *)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = [*(id *)(a1 + 32) name];
      *(_DWORD *)long long buf = 134218754;
      uint64_t v42 = v14;
      __int16 v43 = 1024;
      *(_DWORD *)long long v44 = v15;
      *(_WORD *)&v44[4] = 2114;
      *(void *)&v44[6] = v16;
      *(_WORD *)&v44[14] = 2114;
      *(void *)&v44[16] = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "=scanning= Found %llu/%u items under %{public}@ (%{public}@), second pass", buf, 0x26u);

      uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v20 = *(unsigned int *)(a1 + 104);
      [*(id *)(a1 + 32) name];
      v40 = uint64_t v39 = v19;
      uint64_t v37 = v18;
      uint64_t v38 = v20;
      _MBLog();
    }
  }
  if ((a3[17] & 0xF000) == 0x4000 || (objc_msgSend(v7, "mb_pathHasSQLiteJournalSuffix") & 1) == 0)
  {
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v27 = *(void *)(a1 + 32);
    uint64_t v28 = objc_msgSend(*(id *)(a1 + 40), "stringByAppendingPathComponent:", v7, v37, v38, v39, v40);
    uint64_t v29 = +[MBFile fileWithDomain:v27 snapshotPath:v26 relativePath:v28];

    [v29 setNode:a3];
    if (([*(id *)(a1 + 48) _shouldNotBackupFile:v29 domain:*(void *)(a1 + 32)] & 1) == 0)
    {
      uint64_t v30 = [*(id *)(a1 + 48) _foundFile:v29 snapshotPath:*(void *)(a1 + 56) stats:*(void *)(a1 + 96)];
      uint64_t v31 = *(void *)(*(void *)(a1 + 80) + 8);
      uint64_t v32 = *(void **)(v31 + 40);
      *(void *)(v31 + 40) = v30;

      if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40))
      {
        uint64_t v21 = 0;
        goto LABEL_20;
      }
      if ([v29 isDirectory])
      {
        __int16 v33 = *(void **)(a1 + 64);
        uint64_t v34 = [v29 relativePath];
        [v33 addObject:v34];

        uint64_t v35 = *(void **)(a1 + 72);
        uint64_t v36 = +[NSNumber numberWithUnsignedInt:*a3];
        [v35 addObject:v36];
      }
    }
    uint64_t v21 = 1;
LABEL_20:

    goto LABEL_15;
  }
  uint64_t v21 = 1;
LABEL_15:

  return v21;
}

void sub_1001F2C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t sub_1001F2C88(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_1001F2CAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 subDomain];

  if (!v4)
  {
    id v7 = *(id *)(a1 + 56);
    goto LABEL_6;
  }
  unsigned int v5 = *(void **)(a1 + 32);
  id v6 = [v3 subDomain];
  id v7 = [v5 objectForKeyedSubscript:v6];

  if (v7)
  {
LABEL_6:
    [v7 updateWithFile:v3];
    [*(id *)(a1 + 64) updateWithFile:v3];
    uint64_t v17 = 1;
    goto LABEL_7;
  }
  id v8 = objc_alloc((Class)NSString);
  uint64_t v9 = [*(id *)(a1 + 40) domainName];
  uint64_t v10 = [v3 subDomain];
  id v7 = [v8 initWithFormat:@"%@/%@", v9, v10];

  uint64_t v11 = [[MBCKDomainStatistics alloc] initWithDomainName:v7];
  if (v11)
  {
    unsigned __int8 v12 = v11;
    id v13 = *(void **)(a1 + 32);
    uint64_t v14 = [v3 subDomain];
    [v13 setValue:v12 forKey:v14];

    int v15 = [(MBCKDomainStatistics *)v12 statistics];
    [v15 setValue:v7 forKey:@"DomainName"];

    uint64_t v16 = [(MBCKDomainStatistics *)v12 statistics];
    [*(id *)(a1 + 48) setObject:v16 forKeyedSubscript:v7];

    id v7 = v12;
    goto LABEL_6;
  }
  uint64_t v19 = MBGetDefaultLog();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Analysis: Unable to allocate MBCKDomainStatistics for subdomain", buf, 2u);
    _MBLog();
  }

  uint64_t v17 = 0;
LABEL_7:

  return v17;
}

uint64_t sub_1001F2EAC(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a3;
  return result;
}

uint64_t sub_1001F2EC8(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a3;
  return result;
}

void sub_1001F4FA4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1001F4C54);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1001F5048(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001F5058(uint64_t a1)
{
}

void sub_1001F5060(uint64_t a1, int a2, id obj)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
  id v5 = obj;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001F50C4(uint64_t a1, void *a2, char a3)
{
  id v6 = a2;
  if (v6)
  {
    id v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Placeholder: error during supplyBytes: %@", buf, 0xCu);
      _MBLog();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a3;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001F51D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = MBGetDefaultLog();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Placeholder: unable to unzip: %@ - %@", buf, 0x16u);
      _MBLog();
    }

    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    id v8 = v3;
    id v5 = *(NSObject **)(v7 + 40);
    *(void *)(v7 + 40) = v8;
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Placeholder: unzipped %@", buf, 0xCu);
    _MBLog();
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

id sub_1001F5EB8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _finishXPCWithError:a2];
}

void sub_1001F622C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a2 == 2) {
    uint64_t v4 = a3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = +[MBPrebuddyManager baseFollowupItem];
  uint64_t v6 = [*(id *)(a1 + 32) _initialFollowUpTitle:*(void *)(a1 + 40)];
  [v5 setTitle:v6];

  uint64_t v7 = [*(id *)(a1 + 32) _initialFollowUpMessage:*(void *)(a1 + 40) needsTemporaryStorage:v4];
  [v5 setInformativeText:v7];

  id v8 = [*(id *)(a1 + 32) _initialFollowUpActionTitle:*(void *)(a1 + 40)];
  uint64_t v9 = +[FLFollowUpAction actionWithLabel:v8 url:0];

  v30[0] = MBPrebuddyFollowUpIsManualSignalKey;
  v30[1] = FLUserInfoPropertyDontDisplayDate;
  v31[0] = &__kCFBooleanFalse;
  v31[1] = &__kCFBooleanFalse;
  uint64_t v10 = +[NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:2];
  [v9 setUserInfo:v10];

  uint64_t v29 = v9;
  uint64_t v11 = +[NSArray arrayWithObjects:&v29 count:1];
  [v5 setActions:v11];

  id v12 = [*(id *)(a1 + 32) _newPrebuddyNotification:*(void *)(a1 + 40)];
  [v5 setNotification:v12];

  id v26 = 0;
  id v13 = +[MBPersona personalPersonaWithError:&v26];
  id v14 = v26;
  if (!v13)
  {
    uint64_t v16 = MBGetDefaultLog();
    double v18 = 604800.0;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v28 = v14;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "No persona to get kMBPrebuddyFollowUpExpirationDelta: %@", buf, 0xCu);
      id v24 = v14;
      _MBLog();
    }
    goto LABEL_9;
  }
  int v15 = [v13 copyPreferencesValueForKey:@"PrebuddyFollowUpExpirationDelta" class:objc_opt_class()];
  if (v15)
  {
    uint64_t v16 = v15;
    [v15 doubleValue];
    double v18 = v17;
LABEL_9:

    goto LABEL_11;
  }
  double v18 = 604800.0;
LABEL_11:
  uint64_t v19 = +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", v18, v24);
  [v5 setExpirationDate:v19];

  id v20 = [objc_alloc((Class)FLFollowUpController) initWithClientIdentifier:@"com.apple.backupd"];
  id v25 = 0;
  unsigned __int8 v21 = [v20 postFollowUpItem:v5 error:&v25];
  id v22 = v25;
  if ((v21 & 1) == 0)
  {
    uint64_t v23 = MBGetDefaultLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v28 = v22;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to post prebuddy follow up, error : %@", buf, 0xCu);
      _MBLog();
    }
  }
}

void sub_1001F6F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_1001F6FAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001F6FBC(uint64_t a1)
{
}

void sub_1001F6FC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;

  if (v6)
  {
    uint64_t v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to compute estimated time remaining string: %{public}@", buf, 0xCu);
      _MBLog();
    }
  }
}

void sub_1001F70B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;

  if (v6)
  {
    uint64_t v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to compute countdown string: %{public}@", buf, 0xCu);
      _MBLog();
    }
  }
}

void sub_1001F79C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001F79D4(id a1)
{
  qword_1004826A8 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___MBHelperServiceProtocol];
  _objc_release_x1();
}

void sub_1001F7A1C(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  uint64_t v1 = (void *)qword_1004826A0;
  qword_1004826A0 = 0;

  objc_sync_exit(obj);
}

void sub_1001F7C2C(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_1004826C8;
  qword_1004826C8 = v1;

  uint64_t v3 = objc_opt_new();
  uint64_t v4 = (void *)qword_1004826D0;
  qword_1004826D0 = v3;

  uint64_t v5 = objc_opt_new();
  id v6 = (void *)qword_1004826D8;
  qword_1004826D8 = v5;

  dword_1004826C0 = 0;
  qword_1004826E0 = objc_opt_new();
  _objc_release_x1();
}

void sub_1001F8518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001F8550(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else if (v7)
  {
    id v10 = objc_alloc((Class)[*(id *)(a1 + 48) _responseClassForTask:*(void *)(a1 + 32)]);
    id v15 = 0;
    id v11 = [v10 initWithDictionary:v7 error:&v15];
    id v12 = v15;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = +[MBError errorWithCode:309 description:@"Got nil response for request"];
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v14);
  }
}

id sub_1001F867C(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1001F86A8(uint64_t a1)
{
}

void sub_1001F86B0(uint64_t a1)
{
  uint64_t v3 = MBGetDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sending %@", buf, 0xCu);
    _MBLog();
  }

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = [*(id *)(a1 + 72) _eventIDForTask:*(void *)(a1 + 48)];
  [v5 sendRequestID:v6 request:*(void *)(a1 + 56) destinationID:RPDestinationIdentifierDirectPeer options:0 responseHandler:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
}

void sub_1001F87CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v11 = MBGetDefaultLog();
  id v12 = v11;
  if (v9)
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v25 = v13;
    __int16 v26 = 2112;
    id v27 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Received response for request %@: %@", buf, 0x16u);
  }
  else
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    uint64_t v14 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v25 = v14;
    __int16 v26 = 2112;
    id v27 = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received response for request %@: %@", buf, 0x16u);
  }
  _MBLog();
LABEL_7:

  id v15 = [v9 domain];
  if (![v15 isEqualToString:RPErrorDomain])
  {

    goto LABEL_15;
  }
  if ([v9 code] != (id)-6723 && objc_msgSend(v9, "code") != (id)-6753)
  {
    id v23 = [v9 code];

    if (v23 == (id)-71143) {
      goto LABEL_11;
    }
LABEL_15:
    uint64_t v21 = *(void *)(*(void *)(a1 + 64) + 8);
    id v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = 0;

    (*(void (**)(void, id))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v7);
    goto LABEL_16;
  }

LABEL_11:
  uint64_t v16 = MBGetDefaultLog();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    double v18 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v25 = v17;
    __int16 v26 = 2048;
    id v27 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Resending %@ after %.3fs", buf, 0x16u);
    _MBLog();
  }

  dispatch_time_t v19 = dispatch_time(0, (uint64_t)(*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) * 1000000000.0));
  id v20 = [*(id *)(a1 + 40) dispatchQueue];
  dispatch_after(v19, v20, *(dispatch_block_t *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));

  *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                          + 24)
                                                              + 10.0;
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = fmin(*(double *)(*(void *)(*(void *)(a1 + 56) + 8)+ 24), 60.0);
LABEL_16:
}

void sub_1001F8CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F8CF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001F8D08(uint64_t a1)
{
}

void sub_1001F8D10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001F8F74(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a2;
  id v8 = [v7 objectForKeyedSubscript:@"MBPeerMessengerTransactionID"];
  id v9 = objc_alloc(*(Class *)(a1 + 48));
  id v21 = 0;
  id v10 = [v9 initWithDictionary:v7 error:&v21];

  id v11 = v21;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1001F91E0;
  v19[3] = &unk_100416558;
  id v12 = v6;
  id v20 = v12;
  uint64_t v13 = objc_retainBlock(v19);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001F9358;
  v18[3] = &unk_100416580;
  void v18[4] = *(void *)(a1 + 32);
  uint64_t v14 = objc_retainBlock(v18);
  if ([*(id *)(a1 + 32) isEqualToString:@"MBPeerTaskInit"])
  {
    id v15 = MBGetDefaultLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = objc_opt_class();
      *(_DWORD *)long long buf = 138412290;
      uint64_t v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Resetting the %@ cache", buf, 0xCu);
      uint64_t v17 = objc_opt_class();
      _MBLog();
    }

    [(id)qword_1004826E0 reset];
  }
  if (objc_msgSend((id)qword_1004826E0, "shouldHandleNewRequestForTask:transactionID:responseHandler:", *(void *)(a1 + 32), v8, v13, v17))(*(void (**)(void))(*(void *)(a1 + 40) + 16))(); {
}
  }

void sub_1001F91E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = MBGetDefaultLog();
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      id v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Sending %@, %@", buf, 0x16u);
LABEL_6:
      _MBLog();
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending %@", buf, 0xCu);
    goto LABEL_6;
  }

  id v9 = [v5 dictionaryRepresentation];
  (*(void (**)(void, void *))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v9);
}

id sub_1001F9358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[(id)qword_1004826E0 finishedHandlingTask:*(void *)(a1 + 32) response:a2 responseError:a3];
}

uint64_t sub_1001F9DBC(uint64_t a1)
{
  uint64_t v3 = 0;
  [*(id *)(a1 + 32) getBatch:*(void *)(a1 + 40) error:&v3];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001FB300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001FB33C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = MBGetDefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [v3 recordID];
    id v6 = [v5 recordName];
    *(_DWORD *)long long buf = 138543362;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fetched keybag record %{public}@", buf, 0xCu);

    id v7 = [v3 recordID];
    id v9 = [v7 recordName];
    _MBLog();
  }
  id v8 = [[MBCKKeyBag alloc] initWithRecord:v3 device:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addKeybag:v8];
}

void sub_1001FB488(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    id v6 = [WeakRetained operationID];

    id v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      uint64_t v30 = v6;
      __int16 v31 = 2112;
      id v32 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Keybag fetch operation %{public}@ failed with error: %@", buf, 0x16u);
      _MBLog();
    }
    goto LABEL_10;
  }
  id v8 = [*(id *)(a1 + 32) keybagRefs];
  id v9 = [v8 count];
  id v10 = [*(id *)(a1 + 32) keybagsByUUID];
  id v11 = [v10 count];

  if (v9 != v11)
  {
    __int16 v12 = MBGetDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = [*(id *)(a1 + 32) keybagsByUUID];
      uint64_t v14 = [v13 count];
      id v15 = [*(id *)(a1 + 32) keybagRefs];
      *(_DWORD *)long long buf = 134218240;
      uint64_t v30 = v14;
      __int16 v31 = 2048;
      id v32 = [v15 count];
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to fetch the expected number of keybags: %ld/%ld", buf, 0x16u);

      uint64_t v16 = [*(id *)(a1 + 32) keybagsByUUID];
      id v17 = [v16 count];
      double v18 = [*(id *)(a1 + 32) keybagRefs];
      id v26 = v17;
      id v27 = [v18 count];
      _MBLog();
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "setHasFetchedKeybags:", 1, v26, v27);
  id v6 = MBGetDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    dispatch_time_t v19 = [*(id *)(a1 + 32) keybagsByUUID];
    id v20 = [v19 count];
    id v21 = [*(id *)(a1 + 32) keybagRefs];
    id v22 = [v21 count];
    uint64_t v23 = [*(id *)(a1 + 40) deviceUUID];
    *(_DWORD *)long long buf = 134218498;
    uint64_t v30 = v20;
    __int16 v31 = 2048;
    id v32 = v22;
    __int16 v33 = 2114;
    uint64_t v34 = v23;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fetched %ld/%ld keybags for device %{public}@", buf, 0x20u);

    id v7 = [*(id *)(a1 + 32) keybagsByUUID];
    [v7 count];
    id v24 = [*(id *)(a1 + 32) keybagRefs];
    [v24 count];
    id v28 = [*(id *)(a1 + 40) deviceUUID];
    _MBLog();

LABEL_10:
  }

  (*(void (**)(void, id, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v4, v25);
}

void sub_1001FB924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FB93C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001FB94C(uint64_t a1)
{
}

void sub_1001FB954(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001FBAF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FBB90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FBC38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FBCEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FBD84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FBDF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FC088(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FC2A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

NSObject *MBRequiredProductVersion(int a1)
{
  if (qword_1004826F0 != -1) {
    dispatch_once(&qword_1004826F0, &stru_100416640);
  }
  if (a1 == 4)
  {
    id v5 = [(id)qword_1004826E8 objectForKeyedSubscript:@"D2D"];
    if (v5) {
      goto LABEL_16;
    }
LABEL_9:
    id v5 = MBGetDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)uint64_t v16 = a1;
      *(_WORD *)&void v16[4] = 2114;
      *(void *)&v16[6] = qword_1004826E8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Missing required product versions for engine type %d: %{public}@", buf, 0x12u);
      _MBLog();
    }
    goto LABEL_27;
  }
  if (a1 == 3)
  {
    uint64_t v2 = [(id)qword_1004826E8 objectForKeyedSubscript:@"Cloud"];
    if (!v2)
    {
      id v3 = (void *)qword_1004826E8;
      CFStringRef v4 = @"iCloud";
      goto LABEL_14;
    }
LABEL_12:
    id v6 = v2;
    goto LABEL_15;
  }
  if (a1 != 1) {
    goto LABEL_9;
  }
  uint64_t v2 = [(id)qword_1004826E8 objectForKeyedSubscript:@"Local"];
  if (v2) {
    goto LABEL_12;
  }
  id v3 = (void *)qword_1004826E8;
  CFStringRef v4 = @"Drive";
LABEL_14:
  id v6 = [v3 objectForKeyedSubscript:v4];
LABEL_15:
  id v5 = v6;

  if (!v5) {
    goto LABEL_9;
  }
LABEL_16:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    __int16 v12 = MBGetDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)uint64_t v16 = a1;
      *(_WORD *)&void v16[4] = 2114;
      *(void *)&v16[6] = v5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Invalid required product versions for engine type %d: %{public}@", buf, 0x12u);
      _MBLog();
    }

LABEL_27:
    id v11 = 0;
    goto LABEL_35;
  }
  uint64_t v7 = MBProductVersion();
  if (!v7) {
    __assert_rtn("MBRequiredProductVersion", "MBEngine.m", 46, "productVersion");
  }
  id v8 = (void *)v7;
  id v9 = [v5 objectForKeyedSubscript:v7];
  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v8 compare:v9 options:64] != (id)-1)
    {
      id v10 = MBGetDefaultLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543874;
        *(void *)uint64_t v16 = v8;
        *(_WORD *)&v16[8] = 1024;
        *(_DWORD *)&v16[10] = a1;
        __int16 v17 = 2114;
        double v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "productVersion:\"%{public}@\", engineType:%d, requiredProductVersion:\"%{public}@\"", buf, 0x1Cu);
        _MBLog();
      }

      id v11 = v9;
      goto LABEL_34;
    }
    id v13 = MBGetDefaultLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543874;
      *(void *)uint64_t v16 = v8;
      *(_WORD *)&v16[8] = 1024;
      *(_DWORD *)&v16[10] = a1;
      __int16 v17 = 2114;
      double v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Invalid required product version for \"%{public}@\" and engine type %d: %{public}@", buf, 0x1Cu);
LABEL_32:
      _MBLog();
    }
  }
  else
  {
    id v13 = MBGetDefaultLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543874;
      *(void *)uint64_t v16 = v8;
      *(_WORD *)&v16[8] = 1024;
      *(_DWORD *)&v16[10] = a1;
      __int16 v17 = 2114;
      double v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Missing required product version for \"%{public}@\" and engine type %d: %{public}@", buf, 0x1Cu);
      goto LABEL_32;
    }
  }

  id v11 = 0;
LABEL_34:

LABEL_35:
  return v11;
}

void sub_1001FC814(id a1)
{
  uint64_t v1 = +[NSBundle bundleForClass:objc_opt_class()];
  uint64_t v2 = [v1 pathForResource:@"CompatibilityVersions" ofType:@"plist"];

  uint64_t v3 = +[NSDictionary dictionaryWithContentsOfFile:v2];
  CFStringRef v4 = (void *)qword_1004826E8;
  qword_1004826E8 = v3;

  id v5 = MBGetDefaultLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    uint64_t v7 = v2;
    __int16 v8 = 2114;
    uint64_t v9 = qword_1004826E8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Loaded \"%{public}@\": %{public}@", buf, 0x16u);
    _MBLog();
  }
}

id sub_1001FEF54(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancel];
}

id sub_1001FF040(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startMonitoringForSetupAssistantFinished];
}

uint64_t sub_1001FF2BC(uint64_t a1)
{
  uint64_t result = BYSetupAssistantNeedsToRun();
  if ((result & 1) == 0)
  {
    uint64_t v3 = MBGetDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CFStringRef v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Setup assistant finished (polling)", v4, 2u);
      _MBLog();
    }

    return (uint64_t)[*(id *)(a1 + 32) _setupAssistantDidFinish];
  }
  return result;
}

id sub_1001FF34C(uint64_t a1)
{
  uint64_t v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received %{public}@ notification for background restore progress monitor", buf, 0xCu);
    _MBLog();
  }

  return [*(id *)(a1 + 40) _setupAssistantDidFinish];
}

void sub_1001FF598(uint64_t a1, int a2, unsigned int a3)
{
  char v4 = a2 & 1;
  int v5 = ((*(void *)&a2 & 0x10100) == 256) & (a3 >> 2);
  uint64_t v6 = [*(id *)(a1 + 32) queue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001FF650;
  v7[3] = &unk_1004166C8;
  v7[4] = *(void *)(a1 + 32);
  char v8 = v4;
  char v9 = v5;
  dispatch_async(v6, v7);
}

void sub_1001FF650(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 9));
  if ((v1 & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 40)) {
      [*(id *)(a1 + 32) _startNetworkAccessTimer];
    }
    [*(id *)(a1 + 32) _clearRestoreInProgressFollowUp];
    [*(id *)(a1 + 32) _registerForBackgroundRestoreCellularAccessChangedNotification];
    [*(id *)(a1 + 32) _registerForThermalPressureNotifications];
    [*(id *)(a1 + 32) _startRestoreInProgressFollowUpTimer];
    [*(id *)(a1 + 32) _startRestoreTelemetryHeartbeatTimer];
    uint64_t v3 = MBGetDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 40);
      int v5 = *(unsigned __int8 *)(a1 + 41);
      *(_DWORD *)long long buf = 67109376;
      int v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Started background restore progress monitor, isWiFiAvailable:%d isRestoreOnCellularAvailable:%d", buf, 0xEu);
      _MBLog();
    }
  }
}

id sub_1001FF818(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) == 1)
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 45);
    uint64_t v3 = MBGetDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v8 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Handling Wi-Fi network path update for restore prompt, isWiFiAvailable:%d", buf, 8u);
      uint64_t v6 = v2;
      _MBLog();
    }

    int v4 = *(void **)(a1 + 32);
    if (v2) {
      [v4 _cancelNetworkAccessTimer];
    }
    else {
      [v4 _startNetworkAccessTimer];
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "_postRestoreInProgressFollowUpWithReason:", @"Network Changed", v6);
}

void sub_1001FFB64(uint64_t a1)
{
  uint64_t v3 = MBGetDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Restore prompt network access timer fired", v5, 2u);
    _MBLog();
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleNetworkAccessTimer];
}

void sub_1001FFCDC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a2 & 1;
  int v5 = ((*(void *)&a2 & 0x10100) == 256) & (a3 >> 2);
  uint64_t v6 = MBGetDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    int v11 = v4;
    __int16 v12 = 1024;
    int v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Handling background restore prompt timer, isWiFiAvailable:%d, isRestoreOnCellularAvailable:%d", buf, 0xEu);
    _MBLog();
  }

  if (!v4)
  {
    int v7 = [*(id *)(a1 + 32) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001FFE34;
    block[3] = &unk_100411B10;
    char v9 = v5;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v7, block);
  }
}

id sub_1001FFE34(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id result = [v3 _firePromptForCellular];
    if (result)
    {
      int v5 = MBGetDefaultLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Retrying network access timer", v6, 2u);
        _MBLog();
      }

      return [*(id *)(a1 + 32) _startNetworkAccessTimer];
    }
  }
  else
  {
    return _[v3 _firePromptForWiFi];
  }
  return result;
}

void sub_1001FFF9C(id a1, int64_t a2, NSError *a3)
{
  uint64_t v4 = a3;
  int v5 = MBGetDefaultLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218242;
    int64_t v9 = a2;
    __int16 v10 = 2112;
    int v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received response from WiFi prompt:(%lu), error:%@", buf, 0x16u);
    _MBLog();
  }

  if (v4)
  {
    uint64_t v6 = MBGetDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      int64_t v9 = (int64_t)v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error when firing WiFi prompt:%@", buf, 0xCu);
      _MBLog();
    }
    goto LABEL_8;
  }
  if (a2 == 2)
  {
    uint64_t v6 = +[LSApplicationWorkspace defaultWorkspace];
    int v7 = +[NSURL URLWithString:@"prefs:root=WIFI"];
    [v6 openSensitiveURL:v7 withOptions:0];

LABEL_8:
  }
}

void sub_1002005B4(uint64_t a1, NSObject *a2, void *a3)
{
  int v5 = a3;
  uint64_t v6 = MBGetDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218242;
    int v13 = a2;
    __int16 v14 = 2112;
    id v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received response from cellular prompt:(%lu) error:%@", buf, 0x16u);
    _MBLog();
  }

  if (v5)
  {
    int v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      int v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error when firing cellular prompt:%@", buf, 0xCu);
      _MBLog();
    }
    goto LABEL_15;
  }
  if (a2 == 2)
  {
    int v7 = +[MBCellularAccess inexpensiveCellularAccess];
    __int16 v10 = MBGetDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      int v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "User specified cellular access from restore prompt:%@", buf, 0xCu);
      _MBLog();
    }

    [*(id *)(a1 + 32) saveBackgroundRestoreCellularAccess:v7 account:*(void *)(a1 + 40) error:0];
    int64_t v9 = [*(id *)(a1 + 40) persona];
    int v11 = +[NSDate now];
    [v9 setPreferencesValue:v11 forKey:@"BackgroundCellularAccessConfirmationDate"];

    goto LABEL_14;
  }
  if (a2 == 3)
  {
    int v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "User specified no cellular background access from restore prompt", buf, 2u);
      _MBLog();
    }

    [*(id *)(a1 + 32) saveBackgroundRestoreCellularAccess:0 account:*(void *)(a1 + 40) error:0];
    int v7 = [*(id *)(a1 + 40) persona];
    int64_t v9 = +[NSDate now];
    [v7 setPreferencesValue:v9 forKey:@"BackgroundCellularAccessConfirmationDate"];
LABEL_14:

LABEL_15:
  }
}

void sub_100200A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100200ABC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleCellularAccessChangedNotification];
}

void sub_100200BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100200C08(uint64_t a1)
{
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained;
    unsigned int v2 = [WeakRetained _isContinuouslyThermallyThrottled];
    id WeakRetained = v3;
    if (v3[20] != v2)
    {
      [v3 _postRestoreInProgressFollowUpWithReason:@"Thermals"];
      id WeakRetained = v3;
    }
    WeakRetained[20] = v2;
  }
}

void sub_100201044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100201058(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _postRestoreInProgressFollowUpWithReason:@"Timer"];
}

void sub_10020147C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100201560;
  block[3] = &unk_100416780;
  int v7 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  id v12 = v7;
  id v8 = *(id *)(a1 + 48);
  __int16 v10 = *(void **)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  id v13 = v8;
  uint64_t v17 = v9;
  id v14 = v10;
  dispatch_async(v6, block);
}

void sub_100201560(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 9));
  if ((v1 & 1) == 0)
  {
    uint64_t v3 = objc_opt_new();
    objc_msgSend(v3, "setIsThermallyThrottled:", objc_msgSend(*(id *)(a1 + 32), "_isContinuouslyThermallyThrottled"));
    [v3 setIsOnWiFi:*(unsigned __int8 *)(a1 + 64)];
    [v3 setIsOnInexpensiveCellular:((*(void *)(a1 + 64) & 0x10100) == 256) & (*(_DWORD *)(a1 + 72) >> 2)];
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    id v13 = 0;
    uint64_t v6 = [v4 fetchBackgroundRestoreCellularAccessForAccount:v5 error:&v13];
    id v7 = v13;
    [v3 setHasCellularPolicy:v6 != 0];

    [v3 setEstimatedSize:*(void *)(a1 + 80)];
    id v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 56);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Posting follow up with update (%@): %@", buf, 0x16u);
      _MBLog();
    }

    __int16 v10 = +[MBFollowUpManager sharedManager];
    int v11 = [*(id *)(a1 + 32) account];
    id v12 = [v10 postFollowUpForBackgroundRestoreProgress:v3 account:v11];
  }
}

void sub_1002019D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1002019E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _postRestoreTelemetryHeartbeat];
}

void sub_1002030CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100203104(uint64_t a1)
{
  unsigned int v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Springboard is ready for a restore", v4, 2u);
    _MBLog();
  }

  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  Current = CFRunLoopGetCurrent();
  CFRunLoopStop(Current);
}

uint64_t MBNoCellularCFStreamPropertyOptions()
{
  if (qword_1004826F8 != -1) {
    dispatch_once(&qword_1004826F8, &stru_100416818);
  }
  return qword_100482700;
}

void sub_1002034DC(id a1)
{
  id v1 = objc_alloc((Class)NSDictionary);
  qword_100482700 = (uint64_t)objc_msgSend(v1, "initWithObjectsAndKeys:", &__kCFBooleanTrue, kCFStreamPropertyNoCellular, &__kCFBooleanFalse, _kCFStreamPropertyAllowExpensiveAccess, &__kCFBooleanFalse, _kCFStreamPropertyAllowConstrainedNetworkAccess, 0);
}

uint64_t MBNoCellularURLConnectionProperties()
{
  if (qword_100482708 != -1) {
    dispatch_once(&qword_100482708, &stru_100416838);
  }
  return qword_100482710;
}

void sub_100203594(id a1)
{
  id v1 = objc_alloc((Class)NSDictionary);
  if (qword_1004826F8 != -1) {
    dispatch_once(&qword_1004826F8, &stru_100416818);
  }
  qword_100482710 = (uint64_t)objc_msgSend(v1, "initWithObjectsAndKeys:", qword_100482700, kCFURLConnectionSocketStreamProperties, 0);
}

void sub_100203828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10020385C(uint64_t a1, uint64_t a2)
{
}

void sub_10020386C(uint64_t a1)
{
}

intptr_t sub_100203878(void *a1, void *a2, void *a3, void *a4)
{
  *(void *)(*(void *)(a1[5] + 8) + 40) = a2;
  *(void *)(*(void *)(a1[6] + 8) + 40) = a3;
  *(void *)(*(void *)(a1[7] + 8) + 40) = a4;
  id v7 = a1[4];
  return dispatch_semaphore_signal(v7);
}

void sub_100203B88(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_100203BC0(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

id sub_100203BF0(void *a1, void *a2)
{
  id v4 = [*(id *)(*(void *)(a1[5] + 8) + 40) length];
  if (((unint64_t)v4 + (unint64_t)[a2 length]) >> 20 > 4)
  {
    id v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Response from the server is too large. Bailing.", v8, 2u);
      _MBLog();
    }
    [*(id *)(*(void *)(a1[6] + 8) + 40) cancel];
    +[MBError errorWithDomain:NSURLErrorDomain code:-1103 format:@"Response body too large"];
    return (id)(*(uint64_t (**)(void))(a1[4] + 16))();
  }
  else
  {
    uint64_t v5 = *(void **)(*(void *)(a1[5] + 8) + 40);
    return [v5 appendData:a2];
  }
}

uint64_t sub_100203D24(void *a1)
{
  *(void *)(*(void *)(a1[5] + 8) + 40) = 0;
  *(void *)(*(void *)(a1[6] + 8) + 40) = 0;
  unsigned int v2 = *(uint64_t (**)(void))(a1[4] + 16);
  return v2();
}

uint64_t sub_100203DA8(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(id *)(*(void *)(a1[5] + 8) + 40);
  id v4 = *(id *)(*(void *)(a1[6] + 8) + 40);
  uint64_t v5 = *(uint64_t (**)(uint64_t, id, id, void))(v2 + 16);
  return v5(v2, v3, v4, 0);
}

uint64_t sub_1002042C0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(unsigned char *)(v1 + 40))
  {
    uint64_t v2 = result;
    [*(id *)(v1 + 16) cancel];
    +[MBError errorWithDomain:NSURLErrorDomain code:-999 format:@"Request cancelled"];
    id v3 = *(uint64_t (**)(void))(*(void *)(*(void *)(v2 + 32) + 64) + 16);
    return v3();
  }
  return result;
}

id MBCompactSQLiteFileForiCloudBackup(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned char *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v59 = a3;
  id v13 = a4;
  id v14 = a5;
  if (a6) {
    *a6 = 0;
  }
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v15 = v13;
  id v16 = [v15 countByEnumeratingWithState:&v63 objects:v71 count:16];
  p_superclass = (__objc2_class **)(MBServiceRestoreEngine + 8);
  id v57 = v12;
  if (v16)
  {
    id v18 = v16;
    id v54 = a6;
    id v56 = v14;
    uint64_t v19 = *(void *)v64;
    while (2)
    {
      for (char i = 0; i != v18; char i = (char *)i + 1)
      {
        if (*(void *)v64 != v19) {
          objc_enumerationMutation(v15);
        }
        id v21 = *(void **)(*((void *)&v63 + 1) + 8 * i);
        if ((objc_opt_respondsToSelector() & 1) != 0
          && [v21 shouldScrubSQLiteFileCopyAtRelativePath:v59 domain:v12])
        {

          id v55 = v11;
          id v62 = 0;
          uint64_t v23 = v11;
          id v58 = v12;
          id v24 = v59;
          id v25 = v15;
          id v14 = v56;
          id v26 = v56;
          id v27 = [v26 makeTemporaryFilePath];
          p_superclass = MBServiceRestoreEngine.superclass;
          id v28 = 0;
          if (+[MBSQLiteFileHandle copySQLiteFileAtPath:v23 toPath:v27 error:&v62])
          {
            id v52 = v26;
            id v53 = v23;
            long long v70 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v67 = 0u;
            id v29 = v25;
            id v30 = [v29 countByEnumeratingWithState:&v67 objects:buf count:16];
            if (v30)
            {
              id v31 = v30;
              uint64_t v32 = *(void *)v68;
              while (2)
              {
                for (j = 0; j != v31; j = (char *)j + 1)
                {
                  if (*(void *)v68 != v32) {
                    objc_enumerationMutation(v29);
                  }
                  uint64_t v34 = *(void **)(*((void *)&v67 + 1) + 8 * (void)j);
                  if (objc_opt_respondsToSelector())
                  {
                    uint64_t v36 = [v34 scrubSQLiteFileCopyAtRelativePath:v24 copyTemporaryPath:v27 domain:v58];
                    if (v36)
                    {
                      uint64_t v37 = (void *)v36;

                      id v62 = v37;
                      id v28 = 0;
                      goto LABEL_26;
                    }
                  }
                }
                id v31 = [v29 countByEnumeratingWithState:&v67 objects:buf count:16];
                if (v31) {
                  continue;
                }
                break;
              }
            }

            id v28 = v27;
LABEL_26:
            id v14 = v56;
            p_superclass = MBServiceRestoreEngine.superclass;
            uint64_t v23 = v53;
            id v26 = v52;
          }

          id v38 = v62;
          if (v28)
          {
            if (v54) {
              *id v54 = 1;
            }
            uint64_t v39 = v23;
            uint64_t v23 = v28;
          }
          else
          {
            uint64_t v39 = MBGetDefaultLog();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v73 = v38;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Failed to scrub database - uploading original copy: %@", buf, 0xCu);
              id v51 = v38;
              _MBLog();
            }
          }

          id v11 = v55;
          goto LABEL_34;
        }
      }
      id v18 = [v15 countByEnumeratingWithState:&v63 objects:v71 count:16];
      if (v18) {
        continue;
      }
      break;
    }

    uint64_t v23 = v11;
    id v14 = v56;
    p_superclass = (__objc2_class **)(MBServiceRestoreEngine + 8);
  }
  else
  {

    uint64_t v23 = v11;
  }
LABEL_34:
  __int16 v40 = objc_msgSend(v14, "makeTemporaryFilePath", v51);
  id v61 = 0;
  unsigned int v41 = [p_superclass + 379 compactSQLiteDatabaseAtPath:v23 toPath:v40 error:&v61];
  id v42 = v61;
  if (v41)
  {
    id v43 = v40;
  }
  else
  {
    long long v44 = MBGetDefaultLog();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      id v73 = v11;
      __int16 v74 = 2112;
      id v75 = v42;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Failed to compact SQLite database at %@, attempt to copy and checkpoint instead: %@", buf, 0x16u);
      _MBLog();
    }

    long long v45 = [v14 makeTemporaryFilePath];
    id v60 = 0;
    unsigned __int8 v46 = [p_superclass + 379 copySQLiteFileAtPath:v23 toPath:v45 error:&v60];
    id v47 = v60;
    uint64_t v48 = v45;
    if ((v46 & 1) == 0)
    {
      __int16 v49 = MBGetDefaultLog();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        id v73 = v11;
        __int16 v74 = 2112;
        id v75 = v47;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Failed to copy and checkpoint SQLite database at %@, uploading file as-is: %@", buf, 0x16u);
        _MBLog();
      }

      uint64_t v48 = v11;
    }
    id v43 = v48;
  }
  return v43;
}

void sub_100208980(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1002088C4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020A0C4(void *a1, void *a2)
{
  unint64_t v3 = a1;
  unint64_t v4 = a2;
  uint64_t v5 = (void *)v4;
  if (v3 | v4)
  {
    uint64_t v6 = 0;
    if (v3 && v4) {
      uint64_t v6 = (uint64_t)[(id)v3 isEqualToData:v4];
    }
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_10020C884(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unsigned int v6 = [a3 unsignedIntValue];
  if ([v5 length])
  {
    do
    {
      id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
      id v8 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v7 unsignedIntValue] | v6);
      [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v5];

      id v11 = [v5 stringByDeletingLastPathComponent];

      id v5 = v11;
    }
    while ([v11 length]);
  }
  else
  {
    id v11 = v5;
  }
  uint64_t v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:&stru_100418BA8];
  uint64_t v10 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v9 unsignedIntValue] | v6);
  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:&stru_100418BA8];
}

void sub_10020DB44(_Unwind_Exception *a1)
{
}

uint64_t sub_10020DC04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10020DC14(uint64_t a1)
{
}

id sub_10020DC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) _handleNumEvents:a2 eventPaths:a3 eventFlags:a4 eventIDs:a5];
}

void sub_10020DC50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    unint64_t v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error collecting FSEvents: %@", buf, 0xCu);
      _MBLog();
    }

    atomic_fetch_add((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 40) + 8) + 24), 1uLL);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

BOOL IsDatalessFault(int a1)
{
  memset(&v4, 0, sizeof(v4));
  if (!fstat(a1, &v4)) {
    return (HIBYTE(v4.st_flags) >> 6) & 1;
  }
  uint64_t v1 = MBGetDefaultLog();
  BOOL result = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v3 = *__error();
    *(_DWORD *)long long buf = 67109120;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "fstat failed: %{errno}d", buf, 8u);
    __error();
    _MBLog();
    return 0;
  }
  return result;
}

BOOL IsDatalessFaultWithPath(void *a1)
{
  memset(&v5, 0, sizeof(v5));
  if (!lstat((const char *)[a1 fileSystemRepresentation], &v5)) {
    return (HIBYTE(v5.st_flags) >> 6) & 1;
  }
  uint64_t v2 = MBGetDefaultLog();
  BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v4 = *__error();
    *(_DWORD *)long long buf = 138412546;
    id v7 = a1;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "stat failed at %@: %{errno}d", buf, 0x12u);
    __error();
    _MBLog();
    return 0;
  }
  return result;
}

void sub_10020F648(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10020F6E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10020FE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10020FE44(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 4_Block_object_dispose(&STACK[0x240], 8) = v3 + 1;
  *(void *)(*(void *)(a1[6] + 8) + 24) = v3;
  id v4 = [objc_alloc((Class)NSNumber) initWithUnsignedLongLong:*(void *)(*(void *)(a1[6] + 8) + 24)];
  if (objc_msgSend(*(id *)(a1[4] + 40), "objectForKeyedSubscript:")) {
    [+[NSAssertionHandler currentHandler] handleFailureInMethod:a1[7] object:a1[4] file:@"MBMockChunkStore.m" lineNumber:118 description:@"Duplicate item ID"];
  }
  [*(id *)(a1[4] + 40) setObject:a1[5] forKeyedSubscript:v4];
}

void sub_100210A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_100210A88(uint64_t a1, uint64_t a2)
{
}

void sub_100210A98(uint64_t a1)
{
}

void sub_100210AA4(uint64_t a1)
{
  id v2 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 32), "itemID"));
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(*(void *)(a1 + 40) + 40) objectForKeyedSubscript:v2];
}

void sub_100213D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100213DD4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100213DE4(uint64_t a1)
{
}

uint64_t sub_100213DEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (![v3 isRegularFile]) {
    goto LABEL_21;
  }
  char v5 = 1;
  if ([*(id *)(a1 + 32) _shouldRestoreContentWithFile:v3 quiet:1])
  {
    int v6 = *(void **)(a1 + 32);
    id v7 = (void *)v6[26];
    __int16 v8 = [v6 debugContext];
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    id obj = *(id *)(v9 + 40);
    id v10 = [v7 restoreBehaviorForFile:v3 debugContext:v8 error:&obj];
    objc_storeStrong((id *)(v9 + 40), obj);

    if (v10 == (id)1)
    {
      char v5 = 0;
      LOBYTE(a1) = 1;
      goto LABEL_22;
    }
    if (v10 == (id)-1)
    {
      char v5 = 0;
      LOBYTE(a1) = 0;
      goto LABEL_22;
    }
    id v11 = *(void **)(*(void *)(a1 + 32) + 152);
    id v12 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v3 inodeNumber]);
    id v13 = [v11 objectForKeyedSubscript:v12];

    if (v13)
    {
      id v14 = [*(id *)(*(void *)(a1 + 32) + 144) fetchFileWithID:v13 error:0];
      if (!v14)
      {
        id v28 = +[NSAssertionHandler currentHandler];
        [v28 handleFailureInMethod:*(void *)(a1 + 80), *(void *)(a1 + 32), @"MBDriveRestoreEngine.m", 665, @"Restored file not found: %@", v13 object file lineNumber description];
      }
      id v15 = [v14 lastModified];
      if (v15 == [v3 lastModified])
      {
        id v16 = [v14 domain];
        uint64_t v17 = [v16 volumeMountPoint];
        id v18 = [v3 domain];
        uint64_t v19 = [v18 volumeMountPoint];
        unsigned __int8 v20 = [v17 isEqualToString:v19];

        if (v20)
        {
          char v21 = 1;
          goto LABEL_18;
        }
LABEL_15:
        if ((unint64_t)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) - 31) >= 0xFFFFFFFFFFFFFFE0)
        {
          uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          if (!(((unint64_t)[v3 size] + v24) >> 26)) {
            goto LABEL_19;
          }
        }
        char v21 = 0;
LABEL_18:
        id v25 = *(void **)(*(void *)(a1 + 32) + 112);
        id v26 = +[MBDriveOperation operationToDownloadFilesWithCount:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) size:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)];
        [v25 addOperation:v26];

        *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
        *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
        ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
        if (v21)
        {
LABEL_20:

LABEL_21:
          char v5 = 1;
          goto LABEL_22;
        }
LABEL_19:
        ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
        ++*(void *)(*(void *)(a1 + 32) + 168);
        *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += [v3 size];
        *(void *)(*(void *)(a1 + 32) + 176) += [v3 size];
        goto LABEL_20;
      }
    }
    else
    {
      id v14 = [v3 fileID];
      id v22 = *(void **)(*(void *)(a1 + 32) + 152);
      uint64_t v23 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v3 inodeNumber]);
      [v22 setObject:v14 forKeyedSubscript:v23];
    }
    goto LABEL_15;
  }
LABEL_22:

  return (v5 | a1) & 1;
}

void sub_10021535C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 208), 8);
  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002153C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (![*(id *)(a1 + 32) _shouldRestoreContentWithFile:v3 quiet:0])
  {
LABEL_75:
    uint64_t v9 = 1;
    goto LABEL_83;
  }
  char v5 = *(void **)(a1 + 32);
  int v6 = (void *)v5[26];
  id v7 = [v5 debugContext];
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v8 + 40);
  uint64_t v9 = (uint64_t)[v6 restoreBehaviorForFile:v3 debugContext:v7 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);

  if (v9 != 1)
  {
    if (v9 == -1)
    {
LABEL_82:
      uint64_t v9 = 0;
      goto LABEL_83;
    }
    id v10 = [*(id *)(a1 + 32) persona];
    id v11 = [v10 restorePathForDriveRestorable:v3];

    id v12 = *(void **)(*(void *)(a1 + 32) + 208);
    id v13 = [v3 domain];
    id v14 = [v3 relativePath];
    uint64_t v15 = [v12 validateRestoreDomain:v13 relativePath:v14];
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    if (v15)
    {
LABEL_81:

      goto LABEL_82;
    }
    id v18 = [v3 relativePath];
    id v19 = [v18 length];

    if (!v19)
    {
      unsigned __int8 v20 = [v11 stringByDeletingLastPathComponent];
      char v21 = MBGetDefaultLog();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v112 = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Creating directory: %@", buf, 0xCu);
        id v97 = v20;
        _MBLog();
      }

      id v22 = +[NSFileManager defaultManager];
      id v109 = 0;
      unsigned __int8 v23 = [v22 createDirectoryAtPath:v20 withIntermediateDirectories:1 attributes:0 error:&v109];
      id v24 = v109;

      if ((v23 & 1) == 0)
      {
        uint64_t v42 = +[MBError errorWithCode:102 error:v24 path:v20 format:@"Error creating directory"];
        uint64_t v43 = *(void *)(*(void *)(a1 + 40) + 8);
        id v44 = *(id *)(v43 + 40);
        *(void *)(v43 + 40) = v42;
LABEL_80:

        goto LABEL_81;
      }
    }
    if (objc_msgSend(v3, "isDirectory", v97))
    {
      id v25 = MBGetDefaultLog();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        id v26 = [v3 description];
        id v27 = [v3 fileID];
        *(_DWORD *)long long buf = 138412546;
        id v112 = v26;
        __int16 v113 = 2112;
        long long v114 = v27;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Restoring directory: %@ (%@)", buf, 0x16u);

        id v28 = [v3 description];
        uint64_t v99 = [v3 fileID];
        _MBLog();
      }
      uint64_t v29 = [v3 restoreDirectoryAtPath:v11 settingDataProtection:1 settingOwnershipAndFlags:1];
      goto LABEL_24;
    }
    if (![v3 isRegularFile])
    {
      if (![v3 isSymbolicLink])
      {
        uint64_t v29 = +[MBError errorWithCode:format:](MBError, "errorWithCode:format:", 205, @"Invalid file type: 0%o", [v3 type]);
LABEL_24:
        uint64_t v45 = *(void *)(*(void *)(a1 + 40) + 8);
        unsigned __int8 v20 = *(char **)(v45 + 40);
        *(void *)(v45 + 40) = v29;
        goto LABEL_71;
      }
      uint64_t v35 = MBGetDefaultLog();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        uint64_t v36 = [v3 description];
        uint64_t v37 = [v3 fileID];
        *(_DWORD *)long long buf = 138412546;
        id v112 = v36;
        __int16 v113 = 2112;
        long long v114 = v37;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Restoring symbolic link: %@ (%@)", buf, 0x16u);

        id v38 = [v3 description];
        v100 = [v3 fileID];
        _MBLog();
      }
      unsigned __int8 v20 = [v3 target];
      uint64_t v39 = [v3 restoreSymbolicLinkAtPath:v11 withTarget:v20 settingOwnershipAndFlags:1];
      uint64_t v40 = *(void *)(*(void *)(a1 + 40) + 8);
      unsigned int v41 = *(void **)(v40 + 40);
      *(void *)(v40 + 40) = v39;

LABEL_71:
      if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
      {
        id v86 = [v3 domain];
        unsigned int v87 = [v86 isAppDomain];

        if (v87)
        {
          uint64_t v88 = *(void **)(*(void *)(a1 + 32) + 160);
          v89 = [v3 domain];
          id v90 = [v89 containerID];
          [v88 addObject:v90];
        }
        goto LABEL_75;
      }
      goto LABEL_81;
    }
    id v30 = *(void **)(*(void *)(a1 + 32) + 152);
    uint64_t v31 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v3 inodeNumber]);
    id v24 = [v30 objectForKeyedSubscript:v31];

    if (!v24
      || ([v3 fileID],
          uint64_t v32 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v33 = [v24 isEqualToFileID:v32],
          v32,
          (v33 & 1) != 0))
    {
      unsigned __int8 v20 = 0;
      char v34 = 0;
LABEL_43:
      if ([*(id *)(a1 + 32) encrypted])
      {
        id v62 = [v3 encryptionKey];

        if (!v62)
        {
          id v44 = [v3 fileID];
          uint64_t v91 = +[MBError errorWithCode:205, @"Encryption key missing: %@ (%@)", v3, v44 format];
          uint64_t v92 = *(void *)(*(void *)(a1 + 40) + 8);
          id v76 = *(NSObject **)(v92 + 40);
          *(void *)(v92 + 40) = v91;
LABEL_79:

          goto LABEL_80;
        }
      }
      if (!v20
        && (char *)[*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count] - 31 >= (char *)0xFFFFFFFFFFFFFFE0)
      {
        uint64_t v63 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
        if (!(((unint64_t)[v3 size] + v63) >> 26)) {
          goto LABEL_61;
        }
      }
      uint64_t v64 = [*(id *)(a1 + 32) _restoreRegularFiles:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) size:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)];
      uint64_t v65 = *(void *)(*(void *)(a1 + 40) + 8);
      long long v66 = *(void **)(v65 + 40);
      *(void *)(v65 + 40) = v64;

      [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) removeAllObjects];
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) += [*(id *)(*(void *)(*(void *)(a1 + 48) + 8)+ 40) count];
      ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      if (!v20)
      {
LABEL_61:
        if ((v34 & 1) == 0)
        {
          [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v3];
          *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += [v3 size];
        }
        goto LABEL_70;
      }
      id v106 = v24;
      long long v67 = [*(id *)(a1 + 32) persona];
      long long v68 = [v67 restorePathForDriveRestorable:v20];

      id v44 = v68;
      long long v69 = (const char *)[v44 fileSystemRepresentation];
      if (!v69) {
        __assert_rtn("-[MBDriveRestoreEngine _restoreContent]_block_invoke", "MBDriveRestoreEngine.m", 901, "hardLinkPathFSR");
      }
      long long v70 = v69;
      id v104 = v11;
      int v71 = (const char *)[v104 fileSystemRepresentation];
      if (!v71) {
        __assert_rtn("-[MBDriveRestoreEngine _restoreContent]_block_invoke", "MBDriveRestoreEngine.m", 903, "pathFSR");
      }
      __int16 v72 = v71;
      id v73 = MBGetDefaultLog();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        __int16 v74 = [v3 fileID];
        *(_DWORD *)long long buf = 136315650;
        id v112 = v70;
        __int16 v113 = 2080;
        long long v114 = (void *)v72;
        __int16 v115 = 2112;
        long long v116 = v74;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, "Restoring hard link from %s to %s (%@)", buf, 0x20u);

        [v3 fileID];
        v102 = id v98 = v72;
        _MBLog();
      }
      if (!link(v70, v72))
      {
LABEL_69:

        id v24 = v106;
LABEL_70:

        goto LABEL_71;
      }
      if ([*(id *)(a1 + 32) isDeviceTransferEngine]
        && _os_feature_enabled_impl())
      {
        if (*__error() != 17 || ([v44 isEqualToString:v104] & 1) != 0) {
          goto LABEL_69;
        }
        id v75 = +[NSFileManager defaultManager];
        id v107 = 0;
        unsigned int v103 = [v75 removeItemAtPath:v104 error:&v107];
        id v76 = v107;

        if (v103)
        {
          if (link(v70, v72))
          {
            uint64_t v77 = +[MBError posixErrorWithPath:v104, @"hard link error: %@", v44 format];
            uint64_t v78 = *(void *)(*(void *)(a1 + 40) + 8);
            id v79 = *(void **)(v78 + 40);
            *(void *)(v78 + 40) = v77;

LABEL_78:
            id v24 = v106;
            goto LABEL_79;
          }
          goto LABEL_68;
        }
        v85 = MBGetDefaultLog();
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          id v112 = (const char *)v104;
          __int16 v113 = 2112;
          long long v114 = v76;
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "Failed to remove existing hard link at %@: %@", buf, 0x16u);
          _MBLog();
        }
      }
      else
      {
        if (*__error() != 17
          || (+[NSString stringWithUTF8String:v70],
              uint64_t v80 = objc_claimAutoreleasedReturnValue(),
              +[NSString stringWithUTF8String:v72],
              v81 = objc_claimAutoreleasedReturnValue(),
              unsigned int v82 = [v80 isEqualToString:v81],
              v81,
              v80,
              !v82))
        {
          uint64_t v93 = +[MBError posixErrorWithPath:v104, @"link error to \"%@\"", v44, v98, v102 format];
          uint64_t v94 = *(void *)(*(void *)(a1 + 40) + 8);
          id v76 = *(NSObject **)(v94 + 40);
          *(void *)(v94 + 40) = v93;
          goto LABEL_78;
        }
        id v76 = MBGetDefaultLog();
        if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_68;
        }
        id v83 = [v3 domain];
        id v84 = [v83 name];
        *(_DWORD *)long long buf = 138412546;
        id v112 = (const char *)v44;
        __int16 v113 = 2112;
        long long v114 = v84;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Ignoring spurious hard link at %@ for %@", buf, 0x16u);

        v85 = [v3 domain];
        id v101 = [v85 name];
        _MBLog();
      }
LABEL_68:

      goto LABEL_69;
    }
    unsigned __int8 v46 = *(void **)(*(void *)(a1 + 32) + 144);
    uint64_t v47 = *(void *)(*(void *)(a1 + 40) + 8);
    id v108 = *(id *)(v47 + 40);
    id v105 = v24;
    unsigned __int8 v20 = [v46 fetchFileWithID:v24 error:&v108];
    objc_storeStrong((id *)(v47 + 40), v108);
    if (!v20)
    {
      v96 = +[NSAssertionHandler currentHandler];
      [v96 handleFailureInMethod:*(void *)(a1 + 80), *(void *)(a1 + 32), @"MBDriveRestoreEngine.m", 865, @"Restored file not found: %@", v24 object file lineNumber description];
    }
    uint64_t v48 = [v20 domain];
    __int16 v49 = [v48 volumeMountPoint];
    id v50 = [v3 domain];
    id v51 = [v50 volumeMountPoint];
    unsigned __int8 v52 = [v49 isEqualToString:v51];

    if ((v52 & 1) == 0)
    {
      id v53 = MBGetDefaultLog();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "Not hard linking files with same inode number because they are on different volumes", buf, 2u);
        _MBLog();
      }

      unsigned __int8 v20 = 0;
    }
    id v54 = [v20 lastModified];
    if (v54 != [v3 lastModified])
    {
      id v55 = MBGetDefaultLog();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "Not hard linking files with same inode number because modification times differ", buf, 2u);
        _MBLog();
      }

      unsigned __int8 v20 = 0;
    }
    id v56 = [v20 domain];
    id v57 = [v56 name];
    if ([v57 isEqualToString:@"HomeKitDomain"])
    {
    }
    else
    {
      id v58 = [v3 domain];
      id v59 = [v58 name];
      unsigned int v60 = [v59 isEqualToString:@"HomeKitDomain"];

      if (!v60)
      {
        char v34 = 0;
LABEL_42:
        id v24 = v105;
        goto LABEL_43;
      }
    }
    id v61 = MBGetDefaultLog();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "Not hard linking known duplicate file in HomeKitDomain", buf, 2u);
      _MBLog();
    }

    unsigned __int8 v20 = 0;
    char v34 = 1;
    goto LABEL_42;
  }
LABEL_83:

  return v9;
}

void sub_100218404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10021843C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  char v5 = (void *)v4[26];
  int v6 = [v4 debugContext];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v7 + 40);
  id v8 = [v5 restoreBehaviorForFile:v3 debugContext:v6 error:&obj];
  objc_storeStrong((id *)(v7 + 40), obj);

  if (v8 == (id)1) {
    goto LABEL_7;
  }
  if (v8 == (id)-1)
  {
    uint64_t v9 = 0;
    goto LABEL_8;
  }
  if (![v3 isDirectory])
  {
LABEL_7:
    uint64_t v9 = 1;
    goto LABEL_8;
  }
  uint64_t v9 = 1;
  if ([*(id *)(a1 + 32) _shouldRestoreContentWithFile:v3 quiet:1])
  {
    id v10 = [*(id *)(a1 + 32) persona];
    id v11 = [v10 restorePathForDriveRestorable:v3];
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
    id v16 = *(id *)(v12 + 40);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1002185D0;
    v14[3] = &unk_1004169F0;
    id v15 = v3;
    uint64_t v9 = (uint64_t)objc_msgSend(v11, "mb_openatWithFlags:error:setupDir:itemAccessor:", 256, &v16, 0, v14);
    objc_storeStrong((id *)(v12 + 40), v16);
  }
LABEL_8:

  return v9;
}

id sub_1002185D0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) restoreLastModifiedWithFD:a2];
}

void sub_10021AD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10021ADA0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 64) != 3;
  return result;
}

id sub_10021B0A0(void *a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = objc_alloc_init((Class)NSAutoreleasePool);
  [a1 _gettingItemID:a2 state:a5 progress:a6 error:a3];
  return [v11 drain];
}

id sub_10021B124(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = objc_alloc_init((Class)NSAutoreleasePool);
  id v11 = +[NSData dataWithBytes:a3 length:MMCSSignatureAndSchemeSize()];
  if (a4) {
    id v12 = +[NSString mb_stringWithFileSystemRepresentation:a4];
  }
  else {
    id v12 = 0;
  }
  [a1 _didFinishGettingItemID:a2 signature:v11 path:v12 error:a5];
  return [v10 drain];
}

void sub_10021B1E8(void *a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v12 = [a6 objectForKeyedSubscript:kMMCSPutReceipt];
  objc_msgSend(a1, "_puttingItemID:state:progress:receipt:error:", a2, a5, v12, objc_msgSend(a6, "objectForKeyedSubscript:", kMMCSResultError), a3);
}

void sub_10021B294(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = +[NSData dataWithBytes:a3 length:MMCSSignatureAndSchemeSize()];
  id v10 = [a4 objectForKeyedSubscript:kMMCSPutReceipt];
  objc_msgSend(a1, "_didFinishPuttingItemID:signature:receipt:error:", a2, v9, v10, objc_msgSend(a4, "objectForKeyedSubscript:", kMMCSResultError));
}

id sub_10021B354(void *a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  [a1 _requestCompleted];
  return [v2 drain];
}

BOOL sub_10021B3A0(void *a1, uint64_t a2, uint64_t a3, void *a4, id *a5)
{
  id v9 = objc_alloc_init((Class)NSAutoreleasePool);
  id v10 = [a1 _itemReaderForItemID:a3 error:a5];
  if (a5) {
    id v11 = *a5;
  }
  [v9 drain];
  if (a4) {
    *a4 = v10;
  }
  return v10 != 0;
}

uint64_t sub_10021B424(uint64_t a1)
{
  [*(id *)(a1 + 32) performSelectorInBackground:"_runMMCSOnBackgroundThread" withObject:0];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 88), 0xFFFFFFFFFFFFFFFFLL);
  *(_DWORD *)(*(void *)(a1 + 32) + 64) = 1;
  [*(id *)(*(void *)(a1 + 32) + 56) getCFRunLoop];
  NSRunLoopMode v3 = NSDefaultRunLoopMode;
  +[NSArray arrayWithObjects:&v3 count:1];
  +[NSURL fileURLWithPath:*(void *)(*(void *)(a1 + 32) + 104)];
  +[NSString stringWithFormat:@"%@/%@", @"com.apple.MobileBackup", MBBuildVersion()];
  uint64_t result = MMCSEngineCreate();
  *(void *)(*(void *)(a1 + 32) + 4_Block_object_dispose(&STACK[0x240], 8) = result;
  return result;
}

void sub_10021B750(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 64) = 2;
  id v2 = (__CFRunLoop *)[*(id *)(*(void *)(a1 + 32) + 56) getCFRunLoop];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10021B800;
  v3[3] = &unk_100414998;
  long long v4 = *(_OWORD *)(a1 + 32);
  CFRunLoopPerformBlock(v2, NSDefaultRunLoopMode, v3);
}

intptr_t sub_10021B800(uint64_t a1)
{
  MMCSEngineDestroy();
  *(void *)(*(void *)(a1 + 32) + 4_Block_object_dispose(&STACK[0x240], 8) = 0;
  CFRunLoopStop((CFRunLoopRef)[*(id *)(*(void *)(a1 + 32) + 56) getCFRunLoop]);
  id v2 = *(NSObject **)(a1 + 40);
  return dispatch_semaphore_signal(v2);
}

uint64_t sub_10021B870(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 64) = 3;
  return result;
}

void sub_10021BC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10021BCAC(uint64_t a1, uint64_t a2)
{
}

void sub_10021BCBC(uint64_t a1)
{
}

void sub_10021BCC8(uint64_t a1)
{
  [*(id *)(a1 + 40) itemID];
  if (MMCSRegisterFile())
  {
    NSRunLoopMode v3 = MBGetDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id v4 = [*(id *)(a1 + 40) itemID];
      id v5 = [*(id *)(a1 + 40) path];
      id v6 = [*(id *)(a1 + 40) fileID];
      *(_DWORD *)long long buf = 134218754;
      id v9 = v4;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2112;
      id v13 = v5;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registered MMCS item %llu (%{bytes}llu): %@ (%@)", buf, 0x2Au);
      [*(id *)(a1 + 40) itemID];
      [*(id *)(a1 + 40) path];
      [*(id *)(a1 + 40) fileID];
      _MBLog();
    }
    char v7 = 1;
    objc_msgSend(*(id *)(a1 + 40), "setSignature:", +[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", 0, MMCSSignatureAndSchemeSize(), 1));
    [*(id *)(a1 + 40) setSize:0];
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = +[MBMobileMeChunkStore _errorWithMMCSError:path:description:](MBMobileMeChunkStore, "_errorWithMMCSError:path:description:", 0, [*(id *)(a1 + 40) path], @"Error registering file with MMCS");

    char v7 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v7;
}

void sub_10021C1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10021C1F0(uint64_t a1)
{
  NSRunLoopMode v3 = malloc_type_malloc(8 * (void)[*(id *)(a1 + 32) itemCount], 0x100004000313F17uLL);
  id v4 = malloc_type_malloc(8 * (void)[*(id *)(a1 + 32) itemCount], 0x10040436913F5uLL);
  id v5 = malloc_type_malloc(8 * (void)[*(id *)(a1 + 32) itemCount], 0x50040EE9192B6uLL);
  id v13 = 0;
  id v6 = [*(id *)(a1 + 32) itemCount];
  if (v6)
  {
    id v7 = v6;
    for (char i = 0; i != v7; char i = (char *)i + 1)
    {
      id v9 = [*(id *)(a1 + 32) itemAtIndex:i];
      if (![v9 itemID]) {
        [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 40) file:@"MBMobileMeChunkStore.m" lineNumber:564 description:@"Zero item ID"];
      }
      if (![v9 signature]) {
        [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 40) file:@"MBMobileMeChunkStore.m" lineNumber:565 description:@"Null signature"];
      }
      if (![v9 authToken]) {
        [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 40) file:@"MBMobileMeChunkStore.m" lineNumber:566 description:@"Null auth-token"];
      }
      v3[(void)i] = [v9 itemID];
      v4[(void)i] = objc_msgSend(objc_msgSend(v9, "signature"), "bytes");
      v5[(void)i] = objc_msgSend(objc_msgSend(v9, "authToken"), "cStringUsingEncoding:", 4);
    }
  }
  objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 32), "chunkStoreURL"), "URLByAppendingPathComponent:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 32), "dsid"));
  [*(id *)(a1 + 32) itemCount];
  uint64_t v12 = v5;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = MMCSGetItems() != 0;
  free(v3);
  free(v4);
  free(v5);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    __int16 v10 = MBGetDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v15 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error starting transfer of items with MMCS: %@", buf, 0xCu);
      uint64_t v12 = v13;
      _MBLog();
    }
  }
  if (v13)
  {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = +[MBMobileMeChunkStore _errorWithMMCSError:v13, @"Error getting items from MMCS", v12, &v13 description];
    uint64_t v11 = v13;
  }
  else
  {
    uint64_t v11 = 0;
  }
}

void sub_10021C838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10021C864(uint64_t a1)
{
  id v2 = malloc_type_malloc(8 * (void)[*(id *)(a1 + 32) itemCount], 0x100004000313F17uLL);
  NSRunLoopMode v3 = malloc_type_malloc(8 * (void)[*(id *)(a1 + 32) itemCount], 0x10040436913F5uLL);
  id v4 = malloc_type_malloc(8 * (void)[*(id *)(a1 + 32) itemCount], 0x50040EE9192B6uLL);
  id v5 = malloc_type_malloc(4 * (void)[*(id *)(a1 + 32) itemCount], 0x100004052888210uLL);
  uint64_t v14 = 0;
  id v6 = [*(id *)(a1 + 32) itemCount];
  if (v6)
  {
    id v7 = v6;
    for (char i = 0; i != v7; char i = (char *)i + 1)
    {
      id v9 = [*(id *)(a1 + 32) itemAtIndex:i];
      if (![v9 itemID]) {
        [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 40) file:@"MBMobileMeChunkStore.m" lineNumber:640 description:@"Zero item ID"];
      }
      if (![v9 signature]) {
        [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 40) file:@"MBMobileMeChunkStore.m" lineNumber:641 description:@"Null signature"];
      }
      if (![v9 authToken]) {
        [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 64) object:*(void *)(a1 + 40) file:@"MBMobileMeChunkStore.m" lineNumber:642 description:@"Null auth-token"];
      }
      v2[(void)i] = [v9 itemID];
      v3[(void)i] = objc_msgSend(objc_msgSend(v9, "signature"), "bytes");
      v4[(void)i] = objc_msgSend(objc_msgSend(v9, "authToken"), "cStringUsingEncoding:", 4);
      v5[(void)i] = 1;
    }
  }
  objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 32), "chunkStoreURL"), "URLByAppendingPathComponent:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 32), "dsid"));
  [*(id *)(a1 + 32) itemCount];
  uint64_t v12 = v4;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = MMCSPutItems() != 0;
  free(v2);
  free(v3);
  free(v4);
  free(v5);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    __int16 v10 = MBGetDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v16 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error starting transfer of items with MMCS: %@", buf, 0xCu);
      uint64_t v12 = v14;
      _MBLog();
    }
  }
  if (v14)
  {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = +[MBMobileMeChunkStore _errorWithMMCSError:v14, @"Error putting items into MMCS", v12, v5, &v14 description];
    uint64_t v11 = v14;
  }
  else
  {
    uint64_t v11 = 0;
  }
}

void sub_10021CD40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 64) == 1)
  {
    NSRunLoopMode v3 = (__CFRunLoop *)[*(id *)(v2 + 56) getCFRunLoop];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10021CE14;
    v5[3] = &unk_100414998;
    long long v6 = *(_OWORD *)(a1 + 32);
    CFRunLoopPerformBlock(v3, NSDefaultRunLoopMode, v5);
  }
  else
  {
    id v4 = *(NSObject **)(a1 + 40);
    dispatch_semaphore_signal(v4);
  }
}

intptr_t sub_10021CE14(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)MBMobileMeChunkStore;
  objc_msgSendSuper2(&v3, "cancel");
  if (*(void *)(*(void *)(a1 + 32) + 48)) {
    MMCSEngineCancelRequests();
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

id sub_10021DD6C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "statWithSize:error:");
}

id sub_10021DD88(uint64_t a1, void *a2, void *a3)
{
  id v9 = 0;
  id v6 = [a2 openWithError:&v9];
  id v7 = v6;
  if (a3 && (v6 & 1) == 0) {
    *a3 = v9;
  }
  return v7;
}

id sub_10021DDF8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "readWithOffset:buffer:bufferLength:bytesRead:error:");
}

id sub_10021DE14(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "closeWithError:");
}

uint64_t sub_10021EEDC(uint64_t a1)
{
  qword_100482720 = [[MBBackupScheduler alloc] initWithServiceManager:*(void *)(a1 + 32)];
  return _objc_release_x1();
}

void sub_10021F3D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_10021F404(uint64_t a1)
{
  __int16 v5 = 0;
  uint64_t v2 = [*(id *)(a1 + 32) _fetchAccountsAndIsEnabled:(char *)&v5 + 1 isBackupOnCellularEnabled:&v5];
  [*(id *)(a1 + 32) setAccounts:v2];

  [*(id *)(a1 + 32) setIsEnabled:HIBYTE(v5)];
  [*(id *)(a1 + 32) setIsBackupOnCellularEnabled:v5];
  objc_super v3 = +[MBFollowUpManager sharedManager];
  id v4 = [*(id *)(a1 + 32) accounts];
  [v3 clearPendingFollowUpsNotBelongingToAccounts:v4 excluding:&off_10043B538];
}

id sub_10021F4B0(uint64_t a1)
{
  [*(id *)(a1 + 32) _installMonitors];
  uint64_t v2 = *(void **)(a1 + 32);
  return _[v2 _registerAlarmHandler];
}

void sub_10021F4EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v6 = [v3 userInfo];
    id v7 = [v3 object];
    id v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [v3 name];
      __int16 v10 = [v7 accountIdentifier];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v17 = v9;
      __int16 v18 = 2114;
      id v19 = v10;
      __int16 v20 = 2112;
      char v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "=scheduler= Received \"%{public}@\" notification for account %{public}@: %@", buf, 0x20u);

      uint64_t v11 = [v3 name];
      uint64_t v14 = [v7 accountIdentifier];
      uint64_t v15 = v6;
      id v13 = v11;
      _MBLog();
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      __assert_rtn("-[MBBackupScheduler initWithServiceManager:]_block_invoke", "MBBackupScheduler.m", 301, "[account isKindOfClass:MBServiceAccount.class]");
    }
    uint64_t v12 = [v6 objectForKeyedSubscript:@"error"];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      __assert_rtn("-[MBBackupScheduler initWithServiceManager:]_block_invoke", "MBBackupScheduler.m", 303, "[error isKindOfClass:NSError.class]");
    }
    if (v12 && !+[MBError isError:v12 withCode:0]) {
      [WeakRetained _managerDidFailBackupWithAccount:v7 error:v12];
    }
    else {
      objc_msgSend(WeakRetained, "_managerDidFinishBackupWithAccount:", v7, v13, v14, v15);
    }
  }
}

void sub_10021FBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v14 - 152));
  _Unwind_Resume(a1);
}

void sub_10021FC60(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v1 = MKBGetDeviceLockState();
  if (v1 == 1)
  {
    uint64_t v2 = 1;
  }
  else
  {
    if (v1) {
      goto LABEL_6;
    }
    uint64_t v2 = 0;
  }
  [WeakRetained setIsLocked:v2];
LABEL_6:
}

void sub_10021FCC4(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = (void *)os_transaction_create();
  uint64_t state64 = 0;
  uint32_t state = notify_get_state(a2, &state64);
  if (state)
  {
    uint32_t v6 = state;
    id v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109376;
      int v14 = a2;
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "=scheduler= notify_get_state(%d) failed, status:%lu", buf, 0x12u);
      uint64_t v10 = a2;
      uint64_t v11 = v6;
      _MBLog();
    }

    BOOL v8 = 0;
    uint64_t state64 = 0;
  }
  else
  {
    BOOL v8 = state64 != 0;
  }
  objc_msgSend(WeakRetained, "setIsLocked:", v8, v10, v11);
  id v9 = self;
}

void sub_10021FE0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = IOPSDrawingUnlimitedPower();
  id v3 = MBGetDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136446466;
    __int16 v5 = "com.apple.system.powersources.source";
    __int16 v6 = 1024;
    int v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "=scheduler= Scheduler Received %{public}s: %d", buf, 0x12u);
    _MBLog();
  }

  [WeakRetained setIsOnPower:v2];
}

void sub_10021FF08(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    [WeakRetained setIsAutoBackupOnCellularAllowed:(a2 >> 1) & 1];
    id WeakRetained = v4;
  }
}

void sub_10021FF5C(uint64_t a1, int a2, unint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (a2 == 2)
    {
      id v6 = WeakRetained;
      [WeakRetained setIsOnExpensiveCellular:(~a3 & 0x10100) == 0];
      [v6 setIsOnCellular:(a3 >> 8) & 1];
    }
    else
    {
      if (a2 != 1) {
        goto LABEL_7;
      }
      id v6 = WeakRetained;
      [WeakRetained setIsOnWiFi:(a3 >> 8) & 1];
    }
    id WeakRetained = v6;
  }
LABEL_7:
}

void sub_1002200C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    CFStringRef v6 = @"error";
    uint64_t v7 = v3;
    id v4 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  }
  else
  {
    id v4 = 0;
  }
  __int16 v5 = +[NSNotificationCenter defaultCenter];
  [v5 postNotificationName:@"com.apple.backup.scheduler.backupFinished" object:*(void *)(a1 + 40) userInfo:v4];
}

id sub_100221BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _updateRetryAfterDate:a3 forKey:a2 account:*(void *)(a1 + 40)];
}

void sub_100222E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100222E68(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = [*(id *)(a1 + 40) backupOptions];
  id v4 = [*(id *)(a1 + 40) reason];
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v8 = 0;
  LOBYTE(v2) = [v2 startBackupWithOptions:v3 reason:v4 xpcActivity:v5 account:v6 connection:0 error:&v8];
  id v7 = v8;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = (_BYTE)v2;
}

void sub_100223998(uint64_t a1)
{
  [*(id *)(a1 + 32) _holdWorkAssertion];
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 == 1)
  {
    v37[0] = kCFUserNotificationAlertHeaderKey;
    v37[1] = kCFUserNotificationAlertMessageKey;
    v38[0] = @"iCloud Backup hit too many consecutive failures";
    v38[1] = @"Your device has not been backed up in the last 4 days";
    v37[2] = kCFUserNotificationDefaultButtonTitleKey;
    v37[3] = kCFUserNotificationAlternateButtonTitleKey;
    v38[2] = @"Open with Tap-to-Radar";
    v38[3] = @"Ignore";
    id v4 = v38;
    uint64_t v5 = v37;
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    v39[0] = kCFUserNotificationAlertHeaderKey;
    v39[1] = kCFUserNotificationAlertMessageKey;
    v40[0] = @"Internal Only: iCloud contains a backup for this device from a newer OS version";
    v40[1] = @"In order to continue backing up, the existing backup for this device needs to be deleted from iCloud. A replacement backup will be automatically scheduled.";
    v39[2] = kCFUserNotificationDefaultButtonTitleKey;
    id v39[3] = kCFUserNotificationAlternateButtonTitleKey;
    v40[2] = @"Delete Device Backup";
    v40[3] = @"Ignore";
    id v4 = v40;
    uint64_t v5 = v39;
LABEL_5:
    CFDictionaryRef v6 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v5 count:4];
    goto LABEL_7;
  }
  CFDictionaryRef v6 = 0;
LABEL_7:
  id v7 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, 0, v6);
  [*(id *)(a1 + 32) setInternalNotificationRef:v7];
  id v8 = MBGetDefaultLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134217984;
    CFOptionFlags v34 = (CFOptionFlags)v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "=scheduler= =ttr= Posted internal notification %p", buf, 0xCu);
    uint64_t v29 = v7;
    _MBLog();
  }

  CFOptionFlags responseFlags = 0;
  CFUserNotificationReceiveResponse(v7, 0.0, &responseFlags);
  CFOptionFlags v9 = responseFlags & 3;
  uint64_t v10 = MBGetDefaultLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134218240;
    CFOptionFlags v34 = v9;
    __int16 v35 = 2048;
    uint64_t v36 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "=scheduler= =ttr= Received response (%lu) from internal notification %p", buf, 0x16u);
    uint64_t v29 = (void *)v9;
    id v30 = v7;
    _MBLog();
  }

  if (!v9)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11 == 1)
    {
      __int16 v20 = +[NSCharacterSet URLQueryAllowedCharacterSet];
      id v16 = [@"iCloud Backup hit too many consecutive failures" stringByAddingPercentEncodingWithAllowedCharacters:v20];

      char v21 = +[NSCharacterSet URLQueryAllowedCharacterSet];
      uint64_t v17 = [@"Serious Bug" stringByAddingPercentEncodingWithAllowedCharacters:v21];

      id v22 = +[NSCharacterSet URLQueryAllowedCharacterSet];
      id v19 = [@"MobileBackup" stringByAddingPercentEncodingWithAllowedCharacters:v22];

      unsigned __int8 v23 = *(void **)(a1 + 32);
      id v24 = [*(id *)(a1 + 48) errors];
      id v25 = [v23 _descriptionForTTR:v24 account:*(void *)(a1 + 40)];

      id v26 = +[NSString stringWithFormat:@"tap-to-radar://new?Title=%@&Classification=%@&ComponentID=%@&ComponentName=%@&ComponentVersion=%@&Description=%@", v16, v17, @"1584597", v19, @"iCloud", v25];
      id v27 = +[NSURL URLWithString:v26];

      id v28 = +[LSApplicationWorkspace defaultWorkspace];
      [v28 openURL:v27 withOptions:0];

      goto LABEL_18;
    }
    if (v11 == 2)
    {
      uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 8);
      id v13 = MBDeviceUUID();
      uint64_t v14 = *(void *)(a1 + 40);
      id v31 = 0;
      unsigned __int8 v15 = [v12 deleteBackupUDID:v13 disableIfCurrentDevice:0 account:v14 connection:0 error:&v31];
      id v16 = v31;

      if (v15)
      {
LABEL_20:

        goto LABEL_21;
      }
      uint64_t v17 = MBGetDefaultLog();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
LABEL_19:

        goto LABEL_20;
      }
      __int16 v18 = [v16 localizedDescription];
      *(_DWORD *)long long buf = 138412290;
      CFOptionFlags v34 = (CFOptionFlags)v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "=scheduler= =ttr= Error deleting backup: %@", buf, 0xCu);

      id v19 = [v16 localizedDescription];
      uint64_t v29 = v19;
      _MBLog();
LABEL_18:

      goto LABEL_19;
    }
  }
LABEL_21:
  objc_msgSend(*(id *)(a1 + 32), "setInternalNotificationRef:", 0, v29, v30);
  [*(id *)(a1 + 32) _releaseWorkAssertion];
}

double sub_100224950(void *a1, void *a2, double a3, double a4)
{
  id v7 = a1;
  id v8 = a2;
  CFOptionFlags v9 = [v7 persona];
  id v10 = [v9 copyPreferencesValueForKey:v8 class:objc_opt_class()];

  if (v10)
  {
    [v10 doubleValue];
    a3 = v11;
    uint64_t v12 = MBGetDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      id v22 = v8;
      __int16 v23 = 2048;
      double v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "=scheduler= Period: %@ -> %f (prefs)", buf, 0x16u);
      _MBLog();
    }
  }
  else
  {
    id v13 = +[MBCKRemoteConfiguration sharedInstance];
    uint64_t v12 = [v13 valueForKey:v8 account:v7];

    if (v12)
    {
      uint64_t v14 = MBGetDefaultLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        [v12 doubleValue];
        *(_DWORD *)long long buf = 138412546;
        id v22 = v8;
        __int16 v23 = 2048;
        double v24 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "=scheduler= Period: %@ -> %f (remote)", buf, 0x16u);
        [v12 doubleValue];
        _MBLog();
      }

      [v12 doubleValue];
      a3 = v16;
    }
    else
    {
      int v17 = MBIsInternalInstall();
      __int16 v18 = MBGetDefaultLog();
      BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
      if (v17)
      {
        if (v19)
        {
          *(_DWORD *)long long buf = 138412546;
          id v22 = v8;
          __int16 v23 = 2048;
          double v24 = a3;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "=scheduler= Period: %@ -> %f (internal)", buf, 0x16u);
          _MBLog();
        }

        uint64_t v12 = 0;
      }
      else
      {
        if (v19)
        {
          *(_DWORD *)long long buf = 138412546;
          id v22 = v8;
          __int16 v23 = 2048;
          double v24 = a4;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "=scheduler= Period: %@ -> %f (external)", buf, 0x16u);
          _MBLog();
        }

        uint64_t v12 = 0;
        a3 = a4;
      }
    }
  }

  return a3;
}

void sub_100224CFC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEnabledForBackup])
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v2 = *(void **)(a1 + 40);
    _objc_msgSend(v2, "_onQueue_warnUserOfLateBackupWithAccount:", v3);
  }
  else
  {
    id v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "=scheduler= The iCloud account is not enabled for backup", v5, 2u);
      _MBLog();
    }
  }
}

id sub_100225270(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_warnUserOfDelayedRestoreWithAccount:", *(void *)(a1 + 40));
}

id sub_10022596C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _warnUserOfLateBackupWithAccount:*(void *)(a1 + 40)];
}

id sub_100225DE4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conditions];
  __int16 v11 = 0;
  uint64_t v3 = [*(id *)(a1 + 32) _fetchAccountsAndIsEnabled:(char *)&v11 + 1 isBackupOnCellularEnabled:&v11];
  [*(id *)(a1 + 32) setAccounts:v3];

  [*(id *)(a1 + 32) setAccountsToBackup:0];
  BOOL v4 = (v2 & 1) != HIBYTE(v11);
  if ((v2 & 1) != HIBYTE(v11)) {
    [*(id *)(a1 + 32) setIsEnabled:HIBYTE(v11) != 0];
  }
  if ((BYTE4(v2) & 1) != v11)
  {
    [*(id *)(a1 + 32) setIsBackupOnCellularEnabled:v11 != 0];
    BOOL v4 = 1;
  }
  if (!HIBYTE(v11)) {
    [*(id *)(a1 + 32) _cancelAlarm];
  }
  id v5 = *(id *)(a1 + 32);
  objc_sync_enter(v5);
  if (v4 && (uint64_t v6 = *(void *)(a1 + 32), *(unsigned __int8 *)(v6 + 100) == 255))
  {
    uint64_t v7 = *(void *)(v6 + 92);
    objc_sync_exit(v5);

    id v5 = (id)objc_opt_new();
    id v8 = +[NSNumber numberWithBool:HIBYTE(v11)];
    [v5 setEnabled:v8];

    CFOptionFlags v9 = +[NSNumber numberWithBool:v11];
    [v5 setBackupOnCellularEnabled:v9];

    [*(id *)(a1 + 32) _notifyStateChanged:v5 conditions:v7];
  }
  else
  {
    objc_sync_exit(v5);
  }

  return self;
}

id sub_1002261F8(uint64_t a1)
{
  id v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "=scheduler= Canceling the condition loss timer", buf, 2u);
    _MBLog();
  }

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  id result = [*(id *)(a1 + 40) conditions];
  if ((~result & 0x1010101) != 0)
  {
    BOOL v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 56);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "=scheduler= %llds have passed and the device is still not back on condition - canceling ongoing or scheduled backups", buf, 0xCu);
      _MBLog();
    }

    return [*(id *)(a1 + 40) _cancelBackupWithActivityType:2 changes:*(void *)(a1 + 48)];
  }
  return result;
}

void sub_1002277E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100227EC0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) firstConditionsGroup];
  BOOL v19 = v2;
  if (v2)
  {
    dispatch_group_leave(v2);
    [*(id *)(a1 + 32) setFirstConditionsGroup:0];
    [*(id *)(a1 + 40) setInitial:&__kCFBooleanTrue];
    uint64_t v3 = [*(id *)(a1 + 40) enabled];

    if (!v3)
    {
      BOOL v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
      [*(id *)(a1 + 40) setEnabled:v4];
    }
    uint64_t v5 = [*(id *)(a1 + 40) locked];

    if (!v5)
    {
      uint64_t v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 49)];
      [*(id *)(a1 + 40) setLocked:v6];
    }
    uint64_t v7 = [*(id *)(a1 + 40) onPower];

    if (!v7)
    {
      id v8 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 50)];
      [*(id *)(a1 + 40) setOnPower:v8];
    }
    CFOptionFlags v9 = [*(id *)(a1 + 40) onWiFi];

    if (!v9)
    {
      id v10 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 51)];
      [*(id *)(a1 + 40) setOnWiFi:v10];
    }
    __int16 v11 = [*(id *)(a1 + 40) backupOnCellularEnabled];

    if (!v11)
    {
      uint64_t v12 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 52)];
      [*(id *)(a1 + 40) setBackupOnCellularEnabled:v12];
    }
    id v13 = [*(id *)(a1 + 40) onCellular];

    if (!v13)
    {
      uint64_t v14 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 53)];
      [*(id *)(a1 + 40) setOnCellular:v14];
    }
    double v15 = [*(id *)(a1 + 40) onExpensiveCellular];

    if (!v15)
    {
      double v16 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 54)];
      [*(id *)(a1 + 40) setOnExpensiveCellular:v16];
    }
    int v17 = [*(id *)(a1 + 40) autoBackupOnCellularAllowed];

    if (!v17)
    {
      __int16 v18 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 55)];
      [*(id *)(a1 + 40) setAutoBackupOnCellularAllowed:v18];
    }
  }
  [*(id *)(a1 + 32) _stateDidChange:*(void *)(a1 + 40) conditions:*(void *)(a1 + 48)];
}

void sub_100228568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100228580(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100228590(uint64_t a1)
{
}

void sub_100228598(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    unsigned int v10 = +[MBError isCKNotFoundError:v9];
    __int16 v11 = MBGetDefaultLog();
    uint64_t v12 = v11;
    if (v10)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = [*(id *)(a1 + 32) recordID];
        *(_DWORD *)long long buf = 138412546;
        __int16 v20 = v13;
        __int16 v21 = 2112;
        id v22 = v9;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "=scheduler= Failed to fetch the device record:%@ (dateOfLastBackup): %@", buf, 0x16u);

        int v17 = [*(id *)(a1 + 32) recordID];
        _MBLog();
      }
      uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
      double v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = 0;
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        double v16 = [*(id *)(a1 + 32) recordID];
        *(_DWORD *)long long buf = 138412546;
        __int16 v20 = v16;
        __int16 v21 = 2112;
        id v22 = v9;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "=scheduler= Failed to fetch the device record:%@ (dateOfLastBackup): %@", buf, 0x16u);

        __int16 v18 = [*(id *)(a1 + 32) recordID];
        _MBLog();
      }
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a4);
    }
  }
  else
  {
    [*(id *)(a1 + 32) refreshWithRecord:v8];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10022BA94(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)os_transaction_create();
  uint64_t v5 = MBGetDefaultLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "=scheduler= Alarm fired: %{public}@", buf, 0xCu);
    id v7 = v3;
    _MBLog();
  }

  [*(id *)(a1 + 32) _cancelAlarm];
  if (([*(id *)(a1 + 32) _startBackupRequestForActivity:2] & 1) == 0) {
    [*(id *)(a1 + 32) _scheduleNextBackup];
  }
  objc_msgSend(*(id *)(a1 + 32), "_handleAlarm", v7);
  id v6 = self;
}

void sub_10022BFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10022BFF8(uint64_t a1)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    BOOL v4 = WeakRetained[2];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10022C0A4;
    v5[3] = &unk_1004110B0;
    id v6 = *(id *)(a1 + 32);
    id v7 = v3;
    dispatch_async(v4, v5);
  }
}

void *sub_10022C0A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v2 == result[32]) {
    return [result _cancelInitiatedBackupWithChanges:0 isDeferred:1];
  }
  return result;
}

id sub_10022C394(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) activityCoordinator];
  [v2 finishBackupActivity:*(unsigned int *)(a1 + 48)];

  return self;
}

id sub_10022C3E0(uint64_t a1)
{
  if (([*(id *)(a1 + 32) _startBackupRequestForActivity:*(unsigned int *)(a1 + 48)] & 1) == 0)
  {
    uint64_t v2 = [*(id *)(a1 + 32) activityCoordinator];
    [v2 finishBackupActivity:*(unsigned int *)(a1 + 48)];

    [*(id *)(a1 + 32) _scheduleNextBackup];
  }
  return self;
}

void sub_10022C488(id a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  int v1 = +[MBServiceAccount allServiceAccounts];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v10 objects:v17 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v11;
    while (2)
    {
      for (char i = 0; i != v2; char i = ((char *)i + 1))
      {
        if (*(void *)v11 != v3) {
          objc_enumerationMutation(v1);
        }
        uint64_t v5 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        id v6 = +[MBCKRemoteConfiguration sharedInstance];
        id v7 = [v6 valueForKey:@"DASIsDisabled" account:v5];

        if (v7 && [v7 BOOLValue])
        {
          uint64_t v2 = MBGetDefaultLog();
          if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543618;
            *(void *)double v15 = @"DASIsDisabled";
            *(_WORD *)&v15[8] = 2112;
            double v16 = v7;
            _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "=scheduler= %{public}@ -> %@ (remote)", buf, 0x16u);
            _MBLog();
          }

          LODWORD(v2) = 1;
          goto LABEL_14;
        }
      }
      uint64_t v2 = [v1 countByEnumeratingWithState:&v10 objects:v17 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  int v8 = _os_feature_enabled_impl();
  byte_10047F240 = v8 & ~(_BYTE)v2;
  id v9 = MBGetDefaultLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)double v15 = byte_10047F240;
    *(_WORD *)&v15[4] = 1024;
    *(_DWORD *)&v15[6] = v2;
    LOWORD(v16) = 1024;
    *(_DWORD *)((char *)&v16 + 2) = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "=scheduler= BackupOnWiFiWithDAS:%d serverDisabled:%d ff:%d", buf, 0x14u);
    _MBLog();
  }
}

void sub_10022C97C(uint64_t a1)
{
  if (lockdown_connect())
  {
    int v2 = lockdown_set_value();
    uint64_t v3 = MBGetDefaultLog();
    BOOL v4 = v3;
    if (v2)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v7) = v2;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Could not set lockdown key for encryption: %d", buf, 8u);
LABEL_10:
        _MBLog();
      }
    }
    else if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      CFStringRef v7 = @"WillEncrypt";
      __int16 v8 = 2112;
      uint64_t v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ key successfully set to %@", buf, 0x16u);
      goto LABEL_10;
    }

    lockdown_disconnect();
    return;
  }
  uint64_t v5 = MBGetDefaultLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Could not connect to lockdown!", buf, 2u);
    _MBLog();
  }
}

void makeLockdownEncryptionInfoConsistentWithKeychain()
{
  id v0 = MBGetDefaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Setting lockdown key to be consistent with the keychain", buf, 2u);
    _MBLog();
  }

  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    CFStringRef v9 = 0;
    goto LABEL_20;
  }
  int v2 = Mutable;
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(v2, kSecAttrService, @"BackupAgent");
  CFDictionaryAddValue(v2, kSecAttrAccount, @"BackupPassword");
  CFDictionaryAddValue(v2, kSecReturnData, kCFBooleanTrue);
  *(void *)long long buf = 0;
  OSStatus v3 = SecItemCopyMatching(v2, (CFTypeRef *)buf);
  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *(void *)buf == 0;
  }
  if (v4)
  {
    uint64_t v5 = MBGetDefaultLog();
    id v6 = v5;
    if (v3 == -25300)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Couldn't find an encrypted backup password in the keychain.", v13, 2u);
LABEL_15:
        _MBLog();
      }
    }
    else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v13 = 67109120;
      OSStatus v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Could not copy encrypted backup password from keychain: %d", v13, 8u);
      goto LABEL_15;
    }

    CFStringRef v9 = 0;
    goto LABEL_17;
  }
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)buf);
  CFIndex Length = CFDataGetLength(*(CFDataRef *)buf);
  CFStringRef v9 = CFStringCreateWithBytes(0, BytePtr, Length, 0x8000100u, 1u);
LABEL_17:
  if (*(void *)buf)
  {
    CFRelease(*(CFTypeRef *)buf);
    *(void *)long long buf = 0;
  }
  CFRelease(v2);
LABEL_20:
  long long v10 = MBGetDefaultLog();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v9)
  {
    if (v11)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "setting lockdown encryption info since a password exists in the keychain", buf, 2u);
      _MBLog();
    }

    sub_10022C97C((uint64_t)kCFBooleanTrue);
    CFRelease(v9);
  }
  else
  {
    if (v11)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "clearing lockdown encryption info since a password doesn't exist in the keychain", buf, 2u);
      _MBLog();
    }

    sub_10022C97C((uint64_t)kCFBooleanFalse);
  }
}

uint64_t MBShouldInjectError()
{
  return 0;
}

void sub_10022E81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose((const void *)(v63 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_10022E8A0(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 32);
  OSStatus v3 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v6 = *(void *)(v4 + 48);
    id v28 = 0;
    CFStringRef v7 = [v3 restorePlanForAccount:v5 snapshotUUID:v6 error:&v28];
    id v8 = v28;
    if (v7)
    {
      if ([v7 isPopulated])
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        id v24 = 0;
        uint64_t v25 = 0;
        unsigned __int8 v9 = [v7 fetchPendingRestoreSize:&v27 remainingFileCount:&v26 totalFileCount:&v25 error:&v24];
        id v10 = v24;
        if (v9)
        {
          *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v27;
          *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v26;
          *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v25;
        }
        else
        {
          __int16 v20 = MBGetDefaultLog();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            id v30 = v10;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "=bg-estimate= Failed to fetch the pending restore size from plan: %@", buf, 0xCu);
            _MBLog();
          }

          id v21 = *(id *)(a1 + 56);
          objc_sync_enter(v21);
          [*(id *)(a1 + 56) addObject:v10];
          objc_sync_exit(v21);
        }
      }
      else
      {
        double v15 = MBGetDefaultLog();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
        {
          double v16 = *(void **)(a1 + 48);
          *(_DWORD *)long long buf = 138412290;
          id v30 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "=bg-estimate= Failed to obtain a populated restore plan for %@", buf, 0xCu);
          _MBLog();
        }

        id v10 = *(id *)(a1 + 56);
        objc_sync_enter(v10);
        int v17 = *(void **)(a1 + 56);
        __int16 v18 = +[MBError errorWithCode:1 format:@"No populated restore plan"];
        [v17 addObject:v18];

        objc_sync_exit(v10);
      }
      goto LABEL_24;
    }
    OSStatus v14 = MBGetDefaultLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v30 = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "=bg-estimate= Failed to open plan for sizing: %@", buf, 0xCu);
      _MBLog();
    }

    id v10 = *(id *)(a1 + 56);
    objc_sync_enter(v10);
    [*(id *)(a1 + 56) addObject:v8];
LABEL_20:
    objc_sync_exit(v10);
    CFStringRef v7 = 0;
    goto LABEL_24;
  }
  id v23 = 0;
  CFStringRef v7 = [v3 openCacheWithAccount:v5 accessType:2 cached:0 error:&v23];
  id v8 = v23;
  if (!v7)
  {
    BOOL v19 = MBGetDefaultLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v30 = v8;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "=bg-estimate= Failed to open the cache: %@", buf, 0xCu);
      _MBLog();
    }

    id v10 = *(id *)(a1 + 56);
    objc_sync_enter(v10);
    [*(id *)(a1 + 56) addObject:v8];
    goto LABEL_20;
  }
  id v22 = 0;
  id v11 = [v7 sizeOfPendingRestore:&v22];
  id v10 = v22;
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v11;
  [v7 close];
  if (v10)
  {
    long long v12 = MBGetDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v30 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "=bg-estimate= Failed to fetch the pending restore size from cache: %@", buf, 0xCu);
      _MBLog();
    }

    id v13 = *(id *)(a1 + 56);
    objc_sync_enter(v13);
    [*(id *)(a1 + 56) addObject:v10];
    objc_sync_exit(v13);
  }
LABEL_24:
}

void sub_10022ED30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10022ED64(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = MBGetDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "=bg-estimate= Failed to fetch the download size from appstore: %@", buf, 0xCu);
      _MBLog();
    }

    id v7 = *(id *)(a1 + 32);
    objc_sync_enter(v7);
    [*(id *)(a1 + 32) addObject:v5];
    objc_sync_exit(v7);
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10022EE7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10022EE98(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) airTrafficDidFinishRestore];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    OSStatus v3 = +[ATSession sessionsWithSessionTypeIdentifier:ATSessionTypeRestore];
    if ([v3 count])
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      uint64_t v4 = v3;
      id v27 = [v4 countByEnumeratingWithState:&v35 objects:v46 count:16];
      if (v27)
      {
        uint64_t v29 = a1;
        id v24 = v2;
        uint64_t v25 = *(void *)v36;
        uint64_t v26 = v4;
        do
        {
          uint64_t v5 = 0;
          do
          {
            if (*(void *)v36 != v25) {
              objc_enumerationMutation(v4);
            }
            uint64_t v28 = v5;
            uint64_t v6 = objc_msgSend(*(id *)(*((void *)&v35 + 1) + 8 * v5), "sessionTasks", v21, v22, v23);
            long long v31 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            id obj = v6;
            id v7 = [v6 countByEnumeratingWithState:&v31 objects:v45 count:16];
            if (v7)
            {
              id v8 = v7;
              uint64_t v9 = *(void *)v32;
              do
              {
                for (char i = 0; i != v8; char i = (char *)i + 1)
                {
                  if (*(void *)v32 != v9) {
                    objc_enumerationMutation(obj);
                  }
                  id v11 = *(void **)(*((void *)&v31 + 1) + 8 * i);
                  long long v12 = objc_msgSend(v11, "dataClass", v21, v22, v23);
                  unsigned int v13 = [v12 isEqualToString:@"Book"];

                  if (v13)
                  {
                    OSStatus v14 = [v11 totalBytesToTransfer];
                    unsigned int v15 = [v14 unsignedIntValue];
                    uint64_t v16 = v15;

                    int v17 = [v11 totalBytesTransferred];
                    unsigned int v18 = [v17 unsignedIntValue];

                    if (v18 <= v15)
                    {
                      *(void *)(*(void *)(*(void *)(v29 + 56) + 8) + 24) += v15 - (unint64_t)v18;
                    }
                    else
                    {
                      BOOL v19 = MBGetDefaultLog();
                      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                      {
                        __int16 v20 = [v11 localizedDescription];
                        *(_DWORD *)long long buf = 138412802;
                        uint64_t v40 = v20;
                        __int16 v41 = 2048;
                        uint64_t v42 = v18;
                        __int16 v43 = 2048;
                        uint64_t v44 = v16;
                        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "=bg-estimate= Inconsistent AirTraffic byte transfer size: %@ completed: %llu > total: %llu", buf, 0x20u);

                        [v11 localizedDescription];
                        uint64_t v22 = v18;
                        v21 = uint64_t v23 = v16;
                        _MBLog();
                      }
                    }
                  }
                }
                id v8 = [obj countByEnumeratingWithState:&v31 objects:v45 count:16];
              }
              while (v8);
            }

            uint64_t v5 = v28 + 1;
            uint64_t v4 = v26;
          }
          while ((id)(v28 + 1) != v27);
          id v27 = [v26 countByEnumeratingWithState:&v35 objects:v46 count:16];
        }
        while (v27);
        int v2 = v24;
      }
    }
    else
    {
      atomic_store(1u, (unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
      uint64_t v4 = MBGetDefaultLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "=bg-estimate= Cannot fetch background restore size, ATC is not yet ready", buf, 2u);
        _MBLog();
      }
    }
  }
}

id sub_10022F404(uint64_t a1, void *a2, uint64_t a3)
{
  return [a2 executeStatements:*(void *)(a1 + 32) error:a3];
}

void sub_10023001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100230058(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100230068(uint64_t a1)
{
}

id sub_100230070(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = [*(id *)(a1 + 32) upgradeBlock];
  id v14 = 0;
  char v6 = ((uint64_t (**)(void, id, id *))v5)[2](v5, v3, &v14);
  id v7 = v14;
  id v8 = v14;

  if (v6)
  {
    id v9 = [v3 setUserVersion:*(unsigned int *)(a1 + 52)];
  }
  else
  {
    id v10 = MBGetDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *(_DWORD *)(a1 + 48);
      int v12 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)long long buf = 67109634;
      int v16 = v11;
      __int16 v17 = 1024;
      int v18 = v12;
      __int16 v19 = 2112;
      id v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "=pqldb= Can't migrate from version %d to %d: %@", buf, 0x18u);
      _MBLog();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v7);
    id v9 = 0;
  }

  return v9;
}

void sub_100230304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10023031C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, id *))(v2 + 16))(v2, a2, &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  return v4;
}

BOOL MBShouldSendInvalidChecksumForDomain(void *a1)
{
  id v1 = a1;
  if (MBIsInternalInstall())
  {
    uint64_t v2 = +[MBBehaviorOptions sharedOptions];
    uint64_t v3 = [v2 domainsToSendInvalidChecksumRegex];

    if (v3)
    {
      id v9 = 0;
      id v4 = [objc_alloc((Class)NSRegularExpression) initWithPattern:v3 options:0 error:&v9];
      id v5 = v9;
      if (v5)
      {
        char v6 = MBGetDefaultLog();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v11 = v5;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "=upload domain= Failed to compile regex: %@", buf, 0xCu);
          _MBLog();
        }

        BOOL v7 = 0;
      }
      else
      {
        BOOL v7 = objc_msgSend(v4, "numberOfMatchesInString:options:range:", v1, 0, 0, objc_msgSend(v1, "length")) != 0;
      }
    }
    else
    {
      BOOL v7 = 0;
    }
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

uint64_t MBUploadDomainRecordsForBackup(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v14 = a1;
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a7;
  if (!v14) {
    __assert_rtn("MBUploadDomainRecordsForBackup", "MBUploadDomainRecords.m", 310, "pendingSnapshotDatabase");
  }
  if (!v15) {
    __assert_rtn("MBUploadDomainRecordsForBackup", "MBUploadDomainRecords.m", 311, "snapshotDirectory");
  }
  if (!v16) {
    __assert_rtn("MBUploadDomainRecordsForBackup", "MBUploadDomainRecords.m", 312, "pendingSnapshotCommitID");
  }
  if (!v17) {
    __assert_rtn("MBUploadDomainRecordsForBackup", "MBUploadDomainRecords.m", 313, "hmacKey");
  }
  if (!v19) {
    __assert_rtn("MBUploadDomainRecordsForBackup", "MBUploadDomainRecords.m", 314, "operationTracker");
  }
  id v21 = v20;
  id v126 = 0;
  id v22 = v14;
  id v106 = v15;
  id v100 = v16;
  id v101 = v17;
  id v102 = v18;
  id v103 = v19;
  id v104 = v21;
  v127[0] = _NSConcreteStackBlock;
  v127[1] = 3221225472;
  v127[2] = sub_100231AD4;
  v127[3] = &unk_1004114C8;
  id v96 = (id)objc_opt_new();
  id v128 = v96;
  uint64_t v99 = v22;
  if (![v22 enumerateDomainsRequiringFileListUpload:&v126 block:v127])
  {
    uint64_t v64 = 0;
    goto LABEL_66;
  }
  uint64_t v23 = MBGetDefaultLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    id v24 = [v96 count];
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "=upload domain= Uploading records for %lu domains", (uint8_t *)&buf, 0xCu);
    id v79 = [v96 count];
    _MBLog();
  }

  uint64_t v25 = +[MBTemporaryDirectory temporaryDirectoryOnSameVolumeAsPath:v106 identifiedBy:@"compressed_file_lists" error:&v126];
  uint64_t v88 = v25;
  if (!v25)
  {
    uint64_t v64 = 0;
    goto LABEL_65;
  }
  uint64_t v26 = [v25 path];
  id v86 = v96;
  id v117 = v26;
  id v110 = v22;
  id v27 = v106;
  id v28 = v100;
  id v113 = v101;
  id v114 = v102;
  id v85 = v103;
  id v115 = v104;
  uint64_t v156 = 0;
  v157 = &v156;
  uint64_t v158 = 0x2020000000;
  uint64_t v159 = 0;
  uint64_t v152 = 0;
  v153 = &v152;
  uint64_t v154 = 0x2020000000;
  uint64_t v155 = 0;
  uint64_t v148 = 0;
  v149 = &v148;
  uint64_t v150 = 0x2020000000;
  uint64_t v151 = 0;
  id v111 = v28;
  id v112 = v27;
  long long v116 = +[MBPendingSnapshotDB openOrCreateDatabaseIn:v27 commitID:v28 readonly:1 error:&v126];
  if (!v116)
  {
    uint64_t v64 = 0;
    goto LABEL_64;
  }
  uint64_t v142 = 0;
  v143 = &v142;
  uint64_t v144 = 0x3032000000;
  v145 = sub_100231AF8;
  v146 = sub_100231B08;
  id v147 = 0;
  id v109 = [[MBCKBatchSave alloc] initWithOperationTracker:v85];
  long long v140 = 0u;
  long long v141 = 0u;
  long long v138 = 0u;
  long long v139 = 0u;
  id obj = v86;
  id v29 = [obj countByEnumeratingWithState:&v138 objects:v171 count:16];
  if (!v29) {
    goto LABEL_56;
  }
  uint64_t v108 = *(void *)v139;
  while (2)
  {
    id v30 = 0;
    exc_long long buf = v29;
    do
    {
      if (*(void *)v139 != v108) {
        objc_enumerationMutation(obj);
      }
      long long v31 = *(void **)(*((void *)&v138 + 1) + 8 * (void)v30);
      if (atomic_load((unint64_t *)v157 + 3))
      {
        uint64_t v65 = MBGetDefaultLog();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "=upload domain= Aborting upload of domain records because of upload failure", (uint8_t *)&buf, 2u);
          _MBLog();
        }

        goto LABEL_56;
      }
      v129[0] = _NSConcreteStackBlock;
      v129[1] = 3221225472;
      __int16 v130 = sub_100231B10;
      id v131 = &unk_100416CC0;
      long long v134 = &v156;
      long long v135 = &v142;
      long long v136 = &v152;
      v137 = &v148;
      id v132 = v115;
      long long v133 = v31;
      id v33 = v31;
      long long v120 = v109;
      id v34 = v117;
      id v123 = v116;
      id v121 = v110;
      id v35 = v112;
      id v36 = v111;
      id v124 = v113;
      id v122 = v114;
      long long v125 = v129;
      uint64_t v170 = 0;
      id v169 = 0;
      long long v119 = v34;
      long long v37 = MBCompressFileListDB(v35, (uint64_t)v36, v33, v34, 2, &v170, &v169);
      id v38 = v169;
      if (!v37)
      {
        v130((uint64_t)v125, v38, 0, 0);
        goto LABEL_48;
      }
      long long v118 = +[MBDomainRecord baseRecordIDForDomain:v33 commitID:v36 hmacKey:v124];
      v168 = 0;
      uint64_t v167 = 0;
      id v166 = v38;
      unsigned __int8 v39 = [v123 countAssetRecordsToCommitForDomain:v33 addedOrModifiedCount:&v168 deletedCount:&v167 error:&v166];
      id v40 = v166;

      if (v39)
      {
        uint64_t v165 = 0;
        long long v163 = 0u;
        long long v164 = 0u;
        id v162 = v40;
        id v41 = v35;
        id v42 = v36;
        id v43 = v33;
        id v97 = v42;
        id v98 = v122;
        id v105 = v43;
        uint64_t v44 = +[MBFileListDB openOrCreateDatabaseIn:v41 commitID:v42 domainName:v43 error:&v162];
        uint64_t v45 = v44;
        if (!v44)
        {
          uint64_t v47 = v41;
          uint64_t v92 = 0;
          unsigned __int8 v48 = 0;
LABEL_37:

          id v51 = v162;
          if (v48)
          {
            unsigned __int8 v52 = +[MBBehaviorOptions sharedOptions];
            id v87 = [v52 manifestPageSize];

            id v53 = v168;
            uint64_t v54 = v167;
            id v55 = MBGetDefaultLog();
            uint64_t v91 = (uint64_t)fmax(ceil((double)((unint64_t)v53 + v54) / (double)(unint64_t)v87), 1.0);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
            {
              id v56 = v168;
              uint64_t v57 = v167;
              id v58 = MBFileListStatsToString(&v163);
              *(_DWORD *)v193 = 138413570;
              *(void *)&v193[4] = v105;
              *(_WORD *)&v193[12] = 2048;
              *(void *)&v193[14] = v91;
              *(_WORD *)&v193[22] = 2048;
              v194 = v56;
              __int16 v195 = 2048;
              uint64_t v196 = v57;
              __int16 v197 = 2048;
              uint64_t v198 = v92;
              __int16 v199 = 2112;
              v200 = v58;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "=upload domain= Going to upload domain %@ (pages %llu, addedOrModified %llu, deleted %llu, checksum [0x%llx], stats [%@])", v193, 0x3Eu);

              id v59 = v168;
              uint64_t v60 = v167;
              MBFileListStatsToString(&v163);
              v84 = uint64_t v83 = v92;
              v81 = v59;
              uint64_t v82 = v60;
              id v79 = v105;
              uint64_t v80 = v91;
              _MBLog();
            }
            *(void *)v193 = 0;
            *(void *)&v193[8] = v193;
            *(void *)&v193[16] = 0x2020000000;
            v194 = 0;
            v161[0] = 0;
            v161[1] = v161;
            v161[2] = 0x2020000000;
            v161[3] = 0;
            id v160 = v51;
            *(void *)&long long buf = _NSConcreteStackBlock;
            *((void *)&buf + 1) = 3221225472;
            v173 = sub_100231C4C;
            v174 = &unk_100416D10;
            id v175 = v98;
            v184 = v193;
            id v61 = v105;
            id v176 = v61;
            id v177 = v97;
            id v178 = v124;
            long long v186 = v163;
            long long v187 = v164;
            uint64_t v188 = v165;
            id v179 = v37;
            char v192 = 2;
            v180 = v120;
            id v181 = v118;
            id v62 = v125;
            id v183 = v62;
            v185 = v161;
            uint64_t v189 = v91;
            id v182 = v121;
            uint64_t v190 = v92;
            uint64_t v191 = v170;
            LOBYTE(v61) = [v123 enumerateAssetRecordPagesToCommitForDomain:v61 pageSize:v87 error:&v160 block:&buf];
            id v63 = v160;

            if (v61)
            {
              if (*(void *)(*(void *)&v193[8] + 24) != v91) {
                __assert_rtn("_uploadFileListAndPagedDomainRecords", "MBUploadDomainRecords.m", 209, "pageIndex == pagesToUpload");
              }
            }
            else
            {
              v130((uint64_t)v62, v63, 0, 0);
            }

            _Block_object_dispose(v161, 8);
            _Block_object_dispose(v193, 8);
            id v51 = v63;
          }
          else
          {
            v130((uint64_t)v125, v51, 0, 0);
          }
          id v40 = v51;
          goto LABEL_47;
        }
        id v46 = [v44 countAssetsWithNilSignature:&v162];
        if (v46)
        {
          if (v46 != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            +[MBError errorWithCode:205, @"Found %llu assets with a nil signature", v46 format];
            uint64_t v47 = v41;
            uint64_t v92 = 0;
            unsigned __int8 v48 = 0;
            id v162 = (id)objc_claimAutoreleasedReturnValue();
LABEL_36:
            objc_msgSend(v45, "close:", 0, v79, v80, v81, v82, v83, v84);
            goto LABEL_37;
          }
        }
        else if ([v45 fetchFileListStats:&v163 error:&v162])
        {
          v161[0] = 0;
          uint64_t v49 = +[MBAssetRecord assetRecordIDPrefixFromAssetIDPrefix:v98];
          unsigned __int8 v48 = [v45 computeAssetRecordIDChecksumWithPrefix:v49 checksum:v161 error:&v162];
          id v90 = (void *)v49;
          if (v48)
          {
            uint64_t v47 = v41;
            if (MBShouldSendInvalidChecksumForDomain(v105))
            {
              uint64_t v93 = v161[0];
              v161[0] = 3735928559;
              id v50 = MBGetDefaultLog();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v193 = 134218498;
                *(void *)&v193[4] = v161[0];
                *(_WORD *)&v193[12] = 2048;
                *(void *)&v193[14] = v93;
                *(_WORD *)&v193[22] = 2112;
                v194 = v105;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "=upload domain= Sending bad checksum 0x%llx instead of 0x%llx for domain %@", v193, 0x20u);
                v81 = v105;
                id v79 = (id)v161[0];
                uint64_t v80 = v93;
                _MBLog();
              }
            }
            uint64_t v92 = v161[0];
          }
          else
          {
            uint64_t v47 = v41;
            uint64_t v92 = 0;
          }

          goto LABEL_36;
        }
        uint64_t v47 = v41;
        uint64_t v92 = 0;
        unsigned __int8 v48 = 0;
        goto LABEL_36;
      }
      v130((uint64_t)v125, v40, 0, 0);
LABEL_47:

      id v38 = v40;
LABEL_48:

      id v30 = (char *)v30 + 1;
    }
    while (exc_buf != v30);
    id v29 = [obj countByEnumeratingWithState:&v138 objects:v171 count:16];
    if (v29) {
      continue;
    }
    break;
  }
LABEL_56:

  unsigned int v66 = [(MBCKBatchSave *)v109 finishWithError:&v126];
  int v67 = v66 ^ 1;
  v161[0] = 0;
  if (([v116 close:v161] & 1) == 0 || v67)
  {
    uint64_t v64 = 0;
  }
  else
  {
    unint64_t v68 = atomic_load((unint64_t *)v157 + 3);
    uint64_t v69 = v143[5];
    if (v68)
    {
      if (!v69) {
        __assert_rtn("_uploadDomainRecords", "MBUploadDomainRecords.m", 263, "saveFailure");
      }
LABEL_70:
      __int16 v72 = MBGetDefaultLog();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v73 = v143[5];
        *(_DWORD *)v193 = 138412290;
        *(void *)&v193[4] = v73;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "=upload domain= Failed to save domain records: %@", v193, 0xCu);
        _MBLog();
      }

      uint64_t v64 = 0;
      id v126 = (id) v143[5];
    }
    else
    {
      if (v69) {
        goto LABEL_70;
      }
      unint64_t v74 = atomic_load((unint64_t *)v149 + 3);
      [v115 setUploadedFileListSize:v74];
      id v75 = MBGetDefaultLog();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      {
        id v76 = v75;
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v77 = atomic_load((unint64_t *)v153 + 3);
          id v78 = [v86 count];
          *(_DWORD *)v193 = 134218240;
          *(void *)&v193[4] = v77;
          *(_WORD *)&v193[12] = 2048;
          *(void *)&v193[14] = v78;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "=upload domain= Successfully uploaded %lu pages for %lu domains", v193, 0x16u);
        }

        atomic_load((unint64_t *)v153 + 3);
        [v86 count];
        _MBLog();
      }

      uint64_t v64 = 1;
    }
  }
  _Block_object_dispose(&v142, 8);

LABEL_64:
  _Block_object_dispose(&v148, 8);
  _Block_object_dispose(&v152, 8);
  _Block_object_dispose(&v156, 8);

  [v88 dispose];
LABEL_65:

LABEL_66:
  id v70 = v126;
  if (a8) {
    *a8 = v70;
  }

  return v64;
}

void sub_1002319C0(_Unwind_Exception *a1)
{
}

uint64_t sub_100231AD4(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_100231AF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100231B08(uint64_t a1)
{
}

void sub_100231B10(uint64_t a1, void *a2, unint64_t a3, unint64_t a4)
{
  id v8 = a2;
  if (v8)
  {
    id v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "=upload domain= Failed to upload records for domain: %@", buf, 0xCu);
      _MBLog();
    }

    atomic_fetch_add((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 48) + 8) + 24), 1uLL);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 64) + 8) + 24), a3);
    atomic_fetch_add((atomic_ullong *volatile)(*(void *)(*(void *)(a1 + 72) + 8) + 24), a4);
    [*(id *)(a1 + 32) trackUploadedDomain:*(void *)(a1 + 40)];
  }
}

uint64_t sub_100231C4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  BOOL v7 = sub_100231E24(v5, a2);
  id v8 = sub_100231E24(*(void **)(a1 + 32), v6);

  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  if (*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24))
  {
    +[MBDomainRecord domainRecordPageForDomain:commitID:addedOrModifiedAssets:deletedAssets:hmacKey:pageIndex:](MBDomainRecord, "domainRecordPageForDomain:commitID:addedOrModifiedAssets:deletedAssets:hmacKey:pageIndex:", v9, v10, v7, v8, v11);
  }
  else
  {
    LOBYTE(v1_Block_object_dispose(&STACK[0x2D0], 8) = *(unsigned char *)(a1 + 184);
    +[MBDomainRecord domainRecordForDomain:v9 commitID:v10 addedOrModifiedAssets:v7 deletedAssets:v8 hmacKey:v11 fileListStats:a1 + 120 fileListPath:*(void *)(a1 + 64) fileListEncodingType:v18];
  int v12 = };
  unsigned int v13 = *(void **)(a1 + 72);
  id v14 = [v12 asCKRecord];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100231FF4;
  v19[3] = &unk_100416CE8;
  id v20 = *(id *)(a1 + 80);
  id v15 = *(id *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 112);
  id v24 = v15;
  uint64_t v25 = v16;
  uint64_t v26 = *(void *)(a1 + 160);
  id v21 = *(id *)(a1 + 64);
  id v22 = *(id *)(a1 + 88);
  id v23 = *(id *)(a1 + 40);
  long long v27 = *(_OWORD *)(a1 + 168);
  [v13 saveRecord:v14 delegate:0 completion:v19];

  ++*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24);
  return 1;
}

id sub_100231E24(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 count])
  {
    id v5 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v4, "count"));
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v15 = v4;
    id v6 = v4;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        for (char i = 0; i != v8; char i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = +[MBAssetRecord recordIDFromAssetIDPrefix:v3 recordIDSuffix:*(void *)(*((void *)&v16 + 1) + 8 * i)];
          id v12 = [objc_alloc((Class)CKReference) initWithRecordID:v11 action:0];
          if (!v12) {
            __assert_rtn("_assetRefsFromAssetRecordIDs", "MBUploadDomainRecords.m", 107, "ref");
          }
          unsigned int v13 = v12;
          [v5 addObject:v12];
        }
        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v8);
    }

    id v4 = v15;
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_100231FF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 recordID];
  id v8 = [v7 recordName];
  if (([v8 hasPrefix:*(void *)(a1 + 32)] & 1) == 0) {
    __assert_rtn("_uploadFileListAndPagedDomainRecords_block_invoke_2", "MBUploadDomainRecords.m", 180, "[record.recordID.recordName hasPrefix:baseRecordID]");
  }

  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    uint64_t v9 = +[MBDomainRecord domainRecordFromCKRecord:v5];
    uint64_t v10 = MBGetDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v33 = [v9 recordID];
      uint64_t v11 = [v33 recordName];
      id v12 = [v9 domainName];
      uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      uint64_t v31 = *(void *)(a1 + 80);
      unsigned int v13 = [v9 addedOrModifiedAssets];
      id v14 = [v13 count];
      id v15 = [v9 deletedAssets];
      *(_DWORD *)long long buf = 138413570;
      id v36 = v11;
      __int16 v37 = 2112;
      id v38 = v12;
      __int16 v39 = 2048;
      uint64_t v40 = v31;
      __int16 v41 = 2048;
      uint64_t v42 = v29;
      __int16 v43 = 2048;
      id v44 = v14;
      __int16 v45 = 2048;
      id v46 = [v15 count];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "=upload domain= Uploaded domain record %@ for domain %@ - %llu/%llu (addedRefs %llu, deletedRefs %llu)", buf, 0x3Eu);

      long long v32 = [v9 recordID];
      id v30 = [v32 recordName];
      long long v16 = [v9 domainName];
      long long v17 = [v9 addedOrModifiedAssets];
      [v17 count];
      long long v18 = [v9 deletedAssets];
      [v18 count];
      _MBLog();
    }
    if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) >= *(void *)(a1 + 80))
    {
      unlink((const char *)[*(id *)(a1 + 40) fileSystemRepresentation]);
      long long v19 = *(void **)(a1 + 48);
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      uint64_t v23 = *(void *)(a1 + 88);
      id v34 = 0;
      unsigned __int8 v24 = [v19 markDomainAsUploaded:v20 baseRecordID:v21 pageCount:v22 checksum:v23 error:&v34];
      id v27 = v34;
      uint64_t v28 = *(void *)(a1 + 64);
      if (v24) {
        (*(void (**)(uint64_t, void, void, void, uint64_t, uint64_t))(v28 + 16))(v28, 0, *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24), *(void *)(a1 + 96), v25, v26);
      }
      else {
        (*(void (**)(uint64_t, id, void, void, uint64_t, uint64_t))(v28 + 16))(v28, v27, 0, 0, v25, v26);
      }
    }
  }
}

void sub_1002325FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100232A94(id a1)
{
  id v1 = +[MBBehaviorOptions sharedOptions];
  int v2 = [v1 maxBatchDeleteConcurrentModifyRecordsOperationsWithDefaultValue:6];

  if (v2 <= 1) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = v2;
  }
  if (v2) {
    intptr_t v4 = v3;
  }
  else {
    intptr_t v4 = 0x7FFFFFFFLL;
  }
  qword_100482730 = (uint64_t)dispatch_semaphore_create(v4);
  _objc_release_x1();
}

void sub_100232EEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10023326C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1002334FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100233518(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10023416C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
}

void sub_1002341A0(id *a1, void *a2, void *a3, void *a4)
{
  id v34 = a2;
  id v35 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (!WeakRetained) {
    __assert_rtn("-[MBCKBatchDelete _sendBatchDeleteOperationForDeleteInfos:]_block_invoke", "MBCKBatchDelete.m", 283, "strongOp");
  }
  id v8 = MBGetDefaultLog();
  uint64_t v9 = v8;
  if (v7)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    uint64_t v10 = [WeakRetained operationID];
    id v11 = a1[4];
    *(_DWORD *)long long buf = 138543874;
    id v46 = v10;
    __int16 v47 = 2114;
    id v48 = v11;
    __int16 v49 = 2112;
    id v50 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Operation %{public}@/%{public}@ failed: %@", buf, 0x20u);

    id v12 = [WeakRetained operationID];
    id v32 = a1[4];
    id v33 = v7;
    uint64_t v31 = v12;
    _MBLog();
  }
  else
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_8;
    }
    unsigned int v13 = [WeakRetained operationID];
    id v14 = a1[4];
    *(_DWORD *)long long buf = 138543618;
    id v46 = v13;
    __int16 v47 = 2114;
    id v48 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Operation %{public}@/%{public}@ completed", buf, 0x16u);

    id v12 = [WeakRetained operationID];
    uint64_t v31 = v12;
    id v32 = a1[4];
    _MBLog();
  }

LABEL_8:
  id v37 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(a1[5], "count"));
  id v38 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(a1[5], "count"));
  id obj = a1[4];
  objc_sync_enter(obj);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v15 = a1[5];
  id v16 = [v15 countByEnumeratingWithState:&v40 objects:v44 count:16];
  if (v16)
  {
    long long v17 = 0;
    uint64_t v18 = *(void *)v41;
    do
    {
      for (char i = 0; i != v16; char i = (char *)i + 1)
      {
        if (*(void *)v41 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        if (objc_msgSend(v20, "state", v31, v32, v33) != (id)2) {
          __assert_rtn("-[MBCKBatchDelete _sendBatchDeleteOperationForDeleteInfos:]_block_invoke", "MBCKBatchDelete.m", 298, "deleteInfo.state == MBCKDeleteInfoStateDeleting");
        }
        [a1[4] _handleCompletionForDeleteInfo:v20 operation:WeakRetained error:v7];
        if ([v20 state] == (id)3)
        {
          uint64_t v21 = [v20 error];
          uint64_t v22 = [v20 recordID];
          [v38 addObject:v22];

          [v37 addObject:v20];
          if (v21)
          {
            if (v7) {
              uint64_t v23 = v7;
            }
            else {
              uint64_t v23 = v21;
            }
            id v24 = v23;

            long long v17 = v24;
          }
        }
        else if ([v20 state] == (id)1)
        {
          [v20 setState:0];
        }
      }
      id v16 = [v15 countByEnumeratingWithState:&v40 objects:v44 count:16];
    }
    while (v16);

    if (v17) {
      [a1[4] setDeleteError:v17];
    }
  }
  else
  {

    long long v17 = 0;
  }
  uint64_t v25 = objc_msgSend(a1[4], "deleteInfosByRecordID", v31, v32);
  [v25 removeObjectsForKeys:v38];

  uint64_t v26 = [a1[4] deleteInfos];
  [v26 removeObjectsInArray:v37];

  objc_sync_exit(obj);
  uint64_t v28 = (atomic_uint *)a1[4];
  id v27 = a1 + 4;
  atomic_fetch_add_explicit(v28 + 2, 0xFFFFFFFF, memory_order_relaxed);
  uint64_t v29 = [*v27 deleteSemaphore];
  dispatch_semaphore_signal(v29);

  id v30 = [*v27 deleteGroup];
  dispatch_group_leave(v30);
}

void sub_100234658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id obj)
{
}

id sub_100234684(uint64_t a1)
{
  atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)(a1 + 32) + 8), 1u, memory_order_relaxed);
  [*(id *)(a1 + 40) addDatabaseOperation:*(void *)(a1 + 48) policy:*(void *)(a1 + 56)];
  id result = [*(id *)(a1 + 32) canceled];
  if (result)
  {
    id result = [*(id *)(a1 + 48) isCancelled];
    if ((result & 1) == 0)
    {
      unsigned int v3 = MBGetDefaultLog();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        intptr_t v4 = [*(id *)(a1 + 48) operationID];
        *(_DWORD *)long long buf = 138543362;
        id v7 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Canceling operation %{public}@", buf, 0xCu);

        id v5 = [*(id *)(a1 + 48) operationID];
        _MBLog();
      }
      return [*(id *)(a1 + 48) cancel];
    }
  }
  return result;
}

void sub_100234B7C(uint64_t a1)
{
  [*(id *)(a1 + 32) _sendBatchDeleteOperationForDeleteInfos:*(void *)(a1 + 40)];
  unsigned int v3 = [*(id *)(a1 + 32) deleteGroup];
  dispatch_group_leave(v3);
}

void sub_100235040(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

int64_t sub_10023507C(id a1, id a2, id a3)
{
  id v4 = a3;
  id v5 = [a2 recordID];
  id v6 = [v5 zoneID];

  id v7 = [v4 recordID];

  id v8 = [v7 zoneID];

  id v9 = [v6 compareToRecordZoneID:v8];
  return (int64_t)v9;
}

void sub_1002351FC(uint64_t a1)
{
  [*(id *)(a1 + 32) _finishBatchedDeletesWithCompletion:*(void *)(a1 + 40)];
}

void sub_100236834(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100236C0C(const char *a1)
{
  int v2 = (uint64_t *)malloc_type_malloc(0x10uLL, 0x85514AE9uLL);
  if (!v2) {
    __assert_rtn("MBDiagnoseGetNumberOfFileExtents", "MBDiagnostics.m", 43, "ds_buffer");
  }
  unsigned int v3 = v2;
  uint64_t *v2 = 0;
  v2[1] = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v19 = 0;
  long long v18 = xmmword_1003B3840;
  uint64_t v20 = v2;
  long long v21 = 0x10uLL;
  if (fsctl(a1, 0xC1B04A1EuLL, &v18, 0))
  {
    free(v3);
    id v4 = MBGetDefaultLog();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
LABEL_6:

      return;
    }
    int v5 = *__error();
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "=diag= fsctl(APFSIOC_DEBUG_STATS) failed: %{errno}d", buf, 8u);
    __error();
LABEL_5:
    _MBLog();
    goto LABEL_6;
  }
  if (!(void)v22)
  {
    free(v3);
    id v4 = MBGetDefaultLog();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "=diag= fsctl(APFSIOC_DEBUG_STATS) returned zero buffer entries", buf, 2u);
    goto LABEL_5;
  }
  id v6 = (char *)malloc_type_malloc(0x4E200uLL, 0x81E2D296uLL);
  if (v6)
  {
    id v7 = v6;
    id v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *v3;
      uint64_t v10 = v3[1];
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "=diag= Dstream id %llu, dstream size %llu bytes\n", buf, 0x16u);
      _MBLog();
    }

    for (uint64_t i = 0; ; uint64_t i = *((void *)v12 - 7) + *((void *)v12 - 8))
    {
      bzero(v7, 0x4E200uLL);
      uint64_t v76 = 0;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v53 = 0u;
      *(_OWORD *)long long buf = xmmword_1003B3850;
      *(void *)&uint8_t buf[16] = 10;
      __int16 v49 = v7;
      uint64_t v50 = 320000;
      uint64_t v51 = i;
      uint64_t v52 = *v3;
      if (fsctl(a1, 0xC1B04A1EuLL, buf, 0))
      {
        id v16 = MBGetDefaultLog();
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_24;
        }
        int v17 = *__error();
        *(_DWORD *)id v46 = 67109376;
        *(_DWORD *)__int16 v47 = v17;
        *(_WORD *)&v47[4] = 2048;
        *(void *)&v47[6] = i;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "=diag= fsctl(APFSIOC_DEBUG_STATS) failed: %{errno}d, cannot get extents at offset %lld", v46, 0x12u);
        __error();
        goto LABEL_23;
      }
      if (!(void)v53) {
        break;
      }
      id v12 = &v7[64 * (void)v53];
      unsigned int v13 = MBGetDefaultLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *((void *)v12 - 8);
        uint64_t v15 = *((void *)v12 - 7);
        *(_DWORD *)id v46 = 134218240;
        *(void *)__int16 v47 = v14;
        *(_WORD *)&v47[8] = 2048;
        *(void *)&v47[10] = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "=diag= Extent offset %lld and length %lld\n", v46, 0x16u);
        _MBLog();
      }
    }
    id v16 = MBGetDefaultLog();
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    *(_DWORD *)id v46 = 134217984;
    *(void *)__int16 v47 = i;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "=diag= fsctl(APFSIOC_DEBUG_STATS) for FUSION_DEBUG_STATS_PURE_FEXTS_ONLY returned zero buffer entries at offset %lld", v46, 0xCu);
LABEL_23:
    _MBLog();
LABEL_24:

    free(v7);
  }
  free(v3);
}

void MBDiagnoseFile(void *a1)
{
  id v1 = a1;
  __darwin_ino64_t v2 = geteuid();
  unsigned int v3 = MBGetDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = v3;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      buf.f_bsize = 138543618;
      *(void *)&buf.__darwin_ino64_t f_iosize = v1;
      WORD2(buf.f_blocks) = 1024;
      *(_DWORD *)((char *)&buf.f_blocks + 6) = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "=diag= Dumping diagnostics for %{public}@ (%d)", (uint8_t *)&buf, 0x12u);
    }

    __darwin_ino64_t f_iosize = v2;
    _MBLog();
  }

  id v5 = v1;
  id v6 = (const char *)[v5 fileSystemRepresentation];
  id v7 = [v5 lastPathComponent];
  id v8 = (const char *)[v7 fileSystemRepresentation];

  id v9 = [v5 stringByDeletingLastPathComponent];
  uint64_t v10 = (const char *)[v9 fileSystemRepresentation];

  if (v5)
  {
    if (!v6)
    {
      id v16 = MBGetDefaultLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.f_bsize) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "=diag= nil path FSR", (uint8_t *)&buf, 2u);
        goto LABEL_217;
      }
      goto LABEL_218;
    }
    if (!v8)
    {
      id v16 = MBGetDefaultLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.f_bsize) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "=diag= nil name FSR", (uint8_t *)&buf, 2u);
        goto LABEL_217;
      }
      goto LABEL_218;
    }
    if (v10)
    {
      if (access(v6, 4))
      {
        int32_t v11 = *__error();
        id v12 = MBGetDefaultLog();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v13 = v12;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            buf.f_bsize = 67109120;
            buf.__darwin_ino64_t f_iosize = v11;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "=diag= access(R_OK) failed: %{errno}d", (uint8_t *)&buf, 8u);
          }

          _MBLog();
        }

        if (access(v6, 0))
        {
          int32_t v14 = *__error();
          uint64_t v15 = MBGetDefaultLog();
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_33;
          }
          uint64_t v15 = v15;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            buf.f_bsize = 67109120;
            buf.__darwin_ino64_t f_iosize = v14;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "=diag= access(F_OK) failed: %{errno}d", (uint8_t *)&buf, 8u);
          }
        }
        else
        {
          uint64_t v15 = MBGetDefaultLog();
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_33;
          }
          uint64_t v15 = v15;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            buf.f_bsize = 67109120;
            buf.__darwin_ino64_t f_iosize = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "=diag= access(F_OK): %d", (uint8_t *)&buf, 8u);
          }
        }
      }
      else
      {
        uint64_t v15 = MBGetDefaultLog();
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_33;
        }
        uint64_t v15 = v15;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          buf.f_bsize = 67109120;
          buf.__darwin_ino64_t f_iosize = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "=diag= access(R_OK): %d", (uint8_t *)&buf, 8u);
        }
      }

      _MBLog();
LABEL_33:

      memset(&v154, 0, sizeof(v154));
      if (stat(v6, &v154))
      {
        int32_t v17 = *__error();
        long long v18 = MBGetDefaultLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          long long v18 = v18;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            buf.f_bsize = 67109120;
            buf.__darwin_ino64_t f_iosize = v17;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "=diag= stat failed: %{errno}d", (uint8_t *)&buf, 8u);
          }

          _MBLog();
        }
        __darwin_ino64_t st_ino = 0;
      }
      else
      {
        __darwin_ino64_t st_ino = v154.st_ino;
        long long v18 = MBGetDefaultLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          long long v18 = v18;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            buf.f_bsize = 67113472;
            buf.__darwin_ino64_t f_iosize = v154.st_dev;
            LOWORD(buf.f_blocks) = 2048;
            *(uint64_t *)((char *)&buf.f_blocks + 2) = v154.st_ino;
            WORD1(buf.f_bfree) = 1024;
            HIDWORD(buf.f_bfree) = v154.st_mode;
            LOWORD(buf.f_bavail) = 1024;
            *(_DWORD *)((char *)&buf.f_bavail + 2) = v154.st_nlink;
            HIWORD(buf.f_bavail) = 1024;
            LODWORD(buf.f_files) = v154.st_uid;
            WORD2(buf.f_files) = 1024;
            *(_DWORD *)((char *)&buf.f_files + 6) = v154.st_gid;
            WORD1(buf.f_ffree) = 1024;
            HIDWORD(buf.f_ffree) = v154.st_rdev;
            LOWORD(buf.f_fsid.val[0]) = 2048;
            *(fsid_t *)((char *)&buf.f_fsid + 2) = (fsid_t)v154.st_atimespec.tv_sec;
            HIWORD(buf.f_owner) = 2048;
            *(void *)&buf.f_type = v154.st_atimespec.tv_nsec;
            LOWORD(buf.f_fssubtype) = 2048;
            *(void *)((char *)&buf.f_fssubtype + 2) = v154.st_mtimespec.tv_sec;
            *(_WORD *)&buf.f_fstypename[6] = 2048;
            *(void *)&buf.f_fstypename[8] = v154.st_mtimespec.tv_nsec;
            *(_WORD *)buf.f_mntonname = 2048;
            *(void *)&buf.f_mntonname[2] = v154.st_ctimespec.tv_sec;
            *(_WORD *)&buf.f_mntonname[10] = 2048;
            *(void *)&buf.f_mntonname[12] = v154.st_ctimespec.tv_nsec;
            *(_WORD *)&buf.f_mntonname[20] = 2048;
            *(void *)&buf.f_mntonname[22] = v154.st_size;
            *(_WORD *)&buf.f_mntonname[30] = 2048;
            *(void *)&buf.f_mntonname[32] = v154.st_blocks << 9;
            *(_WORD *)&buf.f_mntonname[40] = 1024;
            *(_DWORD *)&buf.f_mntonname[42] = v154.st_blksize;
            *(_WORD *)&buf.f_mntonname[46] = 1024;
            *(_DWORD *)&buf.f_mntonname[48] = v154.st_flags;
            *(_WORD *)&buf.f_mntonname[52] = 1024;
            *(_DWORD *)&buf.f_mntonname[54] = v154.st_gen;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "=diag= stat: dev %d, ino %llu, mode 0%o, nlink %u, uid %u, gid %u, rdev %d, atime %lu.%ld, mtime %lu.%ld, ctime %lu.%ld, lgsize %lld, physize %lld, blksize %d, flags %u, gen %u", (uint8_t *)&buf, 0x92u);
          }

          uint64_t st_flags = v154.st_flags;
          uint64_t st_gen = v154.st_gen;
          blkcnt_t v115 = v154.st_blocks << 9;
          uint64_t st_blksize = v154.st_blksize;
          off_t st_size = v154.st_size;
          timespec st_ctimespec = v154.st_ctimespec;
          timespec st_mtimespec = v154.st_mtimespec;
          timespec st_atimespec = v154.st_atimespec;
          *((void *)&v109 + 1) = v154.st_gid;
          uint64_t st_rdev = v154.st_rdev;
          *((void *)&v108 + 1) = v154.st_nlink;
          *(void *)&long long v109 = v154.st_uid;
          __darwin_ino64_t f_iosize = v154.st_ino;
          *(void *)&long long v108 = v154.st_mode;
          _MBLog();
        }
      }

      long long v152 = xmmword_1003B3880;
      uint64_t v153 = 0x1800000403;
      memset(v151, 0, sizeof(v151));
      long long v149 = 0u;
      long long v150 = 0u;
      long long v148 = 0u;
      long long v147 = 0u;
      id v132 = v6;
      if (getattrlist(v6, &v152, &v147, 0x64uLL, 0x29u))
      {
        int32_t v20 = *__error();
        long long v21 = MBGetDefaultLog();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          long long v21 = v21;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            buf.f_bsize = 67109120;
            buf.__darwin_ino64_t f_iosize = v20;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "=diag= getattrlist failed: %{errno}d", (uint8_t *)&buf, 8u);
          }

          _MBLog();
        }
      }
      else
      {
        if (!st_ino)
        {
          if ((BYTE7(v147) & 2) != 0) {
            __darwin_ino64_t st_ino = *(void *)((char *)&v150 + 4);
          }
          else {
            __darwin_ino64_t st_ino = 0;
          }
        }
        if (HIDWORD(v148) != 1)
        {
          long long v22 = MBGetDefaultLog();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            __darwin_ino64_t v23 = st_ino;
            long long v24 = v22;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.f_bsize) = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "=diag= warning: not a regular file, link info and sizes will be garbage", (uint8_t *)&buf, 2u);
            }

            _MBLog();
            __darwin_ino64_t st_ino = v23;
          }
        }
        long long v21 = MBGetDefaultLog();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          long long v21 = v21;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            buf.__darwin_ino64_t f_iosize = v147;
            *(_DWORD *)((char *)&buf.f_blocks + 2) = (DWORD1(v147) >> 1) & 1;
            LODWORD(buf.f_bfree) = DWORD2(v148);
            *(_DWORD *)((char *)&buf.f_bfree + 6) = (DWORD1(v147) >> 3) & 1;
            HIDWORD(buf.f_bavail) = HIDWORD(v148);
            *(_DWORD *)((char *)&buf.f_files + 2) = (DWORD1(v147) >> 25) & 1;
            buf.f_ffree = *(void *)((char *)&v150 + 4);
            *(int32_t *)((char *)buf.f_fsid.val + 2) = (DWORD1(v147) >> 15) & 1;
            buf.f_owner = v149;
            *(uint32_t *)((char *)&buf.f_type + 2) = HIWORD(DWORD1(v147)) & 1;
            buf.f_fssubtype = DWORD1(v149);
            *(_DWORD *)&buf.f_fstypename[2] = (DWORD1(v147) >> 17) & 1;
            *(_DWORD *)&buf.f_fstypename[8] = DWORD2(v149);
            *(_DWORD *)&buf.f_fstypename[14] = (DWORD1(v147) >> 18) & 1;
            *(_DWORD *)&buf.f_mntonname[4] = HIDWORD(v149);
            *(_DWORD *)&buf.f_mntonname[10] = (DWORD1(v147) >> 19) & 1;
            *(_DWORD *)&buf.f_mntonname[16] = v150;
            *(_DWORD *)&buf.f_mntonname[22] = (DWORD1(v147) >> 30) & 1;
            *(_DWORD *)&buf.f_mntonname[28] = HIDWORD(v150);
            *(_DWORD *)&buf.f_mntonname[34] = v148 & 1;
            *(_DWORD *)&buf.f_mntonname[40] = v151[0];
            *(_DWORD *)&buf.f_mntonname[46] = (v148 >> 1) & 1;
            *(void *)&buf.f_mntonname[52] = *(void *)&v151[1];
            *(_DWORD *)&buf.f_mntonname[62] = (v148 >> 10) & 1;
            *(void *)&buf.f_mntonname[68] = *(void *)&v151[3];
            *(_DWORD *)&buf.f_mntonname[78] = (DWORD1(v148) >> 3) & 1;
            *(void *)&buf.f_mntonname[84] = *(void *)&v151[5];
            LOWORD(buf.f_blocks) = 1024;
            HIWORD(buf.f_blocks) = 1024;
            WORD2(buf.f_bfree) = 1024;
            WORD1(buf.f_bavail) = 1024;
            LOWORD(buf.f_files) = 1024;
            LOWORD(buf.f_fsid.val[0]) = 1024;
            HIWORD(buf.f_fsid.val[1]) = 1024;
            LOWORD(buf.f_type) = 1024;
            HIWORD(buf.f_flags) = 1024;
            *(_WORD *)buf.f_fstypename = 1024;
            *(_WORD *)&buf.f_fstypename[6] = 1024;
            *(_WORD *)&buf.f_fstypename[12] = 1024;
            *(_WORD *)&buf.f_mntonname[2] = 1024;
            *(_WORD *)&buf.f_mntonname[8] = 1024;
            *(_WORD *)&buf.f_mntonname[14] = 1024;
            *(_WORD *)&buf.f_mntonname[20] = 1024;
            *(_WORD *)&buf.f_mntonname[26] = 1024;
            *(_WORD *)&buf.f_mntonname[32] = 1024;
            *(_WORD *)&buf.f_mntonname[38] = 1024;
            *(_WORD *)&buf.f_mntonname[44] = 1024;
            *(_WORD *)&buf.f_mntonname[60] = 1024;
            *(_WORD *)&buf.f_mntonname[76] = 1024;
            *(_WORD *)&buf.f_mntonname[92] = 1024;
            *(_DWORD *)&buf.f_mntonname[94] = (DWORD1(v148) >> 4) & 1;
            HIWORD(buf.f_files) = 2048;
            *(_WORD *)&buf.f_mntonname[50] = 2048;
            *(_WORD *)&buf.f_mntonname[66] = 2048;
            *(_WORD *)&buf.f_mntonname[82] = 2048;
            *(_WORD *)&buf.f_mntonname[98] = 2048;
            *(void *)&buf.f_mntonname[100] = *(void *)&v151[7];
            buf.f_bsize = 67116288;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "=diag= getattrlist: len %u, dev (%d)%d, type (%d)%u, fileId (%d)%llu, uid (%d)%u, gid (%d)%u, access (%d)0%o, flags (%d)0x%x, gencount (%d)%u, protclass (%d)%u, nlink (%d)%u, lgsize (%d)%lld, physize (%d)%lld, realsize (%d)%lld, linkid (%d)%llu", (uint8_t *)&buf, 0xC4u);
          }

          __darwin_ino64_t v131 = (DWORD1(v147) >> 1) & 1;
          uint64_t v130 = (DWORD1(v147) >> 3) & 1;
          uint64_t v128 = (DWORD1(v148) >> 4) & 1;
          uint64_t v129 = *(void *)&v151[7];
          uint64_t v126 = (DWORD1(v148) >> 3) & 1;
          uint64_t v127 = *(void *)&v151[5];
          uint64_t v124 = (v148 >> 10) & 1;
          uint64_t v125 = *(void *)&v151[3];
          uint64_t v122 = (v148 >> 1) & 1;
          uint64_t v123 = *(void *)&v151[1];
          uint64_t v120 = v148 & 1;
          uint64_t v121 = v151[0];
          uint64_t st_gen = (DWORD1(v147) >> 30) & 1;
          uint64_t v119 = HIDWORD(v150);
          uint64_t st_blksize = (DWORD1(v147) >> 19) & 1;
          uint64_t st_flags = v150;
          off_t st_size = (DWORD1(v147) >> 18) & 1;
          blkcnt_t v115 = HIDWORD(v149);
          st_ctimespec.tv_sec = (DWORD1(v147) >> 17) & 1;
          st_ctimespec.tv_nsec = DWORD2(v149);
          st_mtimespec.tv_sec = HIWORD(DWORD1(v147)) & 1;
          st_mtimespec.tv_nsec = DWORD1(v149);
          st_atimespec.tv_sec = (DWORD1(v147) >> 15) & 1;
          st_atimespec.tv_nsec = v149;
          *((void *)&v109 + 1) = (DWORD1(v147) >> 25) & 1;
          uint64_t st_rdev = *(void *)((char *)&v150 + 4);
          *((void *)&v108 + 1) = v130;
          *(void *)&long long v109 = HIDWORD(v148);
          __darwin_ino64_t f_iosize = v131;
          *(void *)&long long v108 = DWORD2(v148);
          _MBLog();
        }
      }

      fsid_t f_fsid = 0;
      int v25 = open(v10, 256);
      if (v25 == -1)
      {
        __darwin_ino64_t v29 = *__error();
        long long v30 = MBGetDefaultLog();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          long long v31 = v30;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            buf.f_bsize = 136446466;
            *(void *)&buf.__darwin_ino64_t f_iosize = v10;
            WORD2(buf.f_blocks) = 1024;
            *(_DWORD *)((char *)&buf.f_blocks + 6) = v29;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "=diag= open failed at %{public}s: %{errno}d", (uint8_t *)&buf, 0x12u);
          }

          __darwin_ino64_t f_iosize = v29;
          _MBLog();
        }

        if (!st_ino) {
          goto LABEL_126;
        }
        goto LABEL_105;
      }
      int v26 = v25;
      *(void *)long long v133 = st_ino;
      bzero(&buf, 0x878uLL);
      if (fstatfs(v26, &buf))
      {
        __darwin_ino64_t v27 = *__error();
        long long v28 = MBGetDefaultLog();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          long long v28 = v28;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v161.d_ino) = 136446466;
            *(__uint64_t *)((char *)&v161.d_ino + 4) = (__uint64_t)v10;
            WORD2(v161.d_seekoff) = 1024;
            *(_DWORD *)((char *)&v161.d_seekoff + 6) = v27;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "=diag= fstatfs failed at %{public}s: %{errno}d", (uint8_t *)&v161, 0x12u);
          }

          __darwin_ino64_t f_iosize = v27;
LABEL_78:
          _MBLog();
        }
      }
      else
      {
        fsid_t f_fsid = buf.f_fsid;
        long long v28 = MBGetDefaultLog();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          long long v28 = v28;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v161.d_ino) = 67112448;
            HIDWORD(v161.d_ino) = buf.f_bsize;
            LOWORD(v161.d_seekoff) = 1024;
            *(_DWORD *)((char *)&v161.d_seekoff + 2) = buf.f_iosize;
            HIWORD(v161.d_seekoff) = 2048;
            *(void *)&v161.int d_reclen = buf.f_blocks;
            *(_WORD *)&v161.d_name[3] = 2048;
            *(void *)&v161.d_name[5] = buf.f_bfree;
            *(_WORD *)&v161.d_name[13] = 2048;
            *(void *)&v161.d_name[15] = buf.f_bavail;
            *(_WORD *)&v161.d_name[23] = 2048;
            *(void *)&v161.d_name[25] = buf.f_files;
            *(_WORD *)&v161.d_name[33] = 2048;
            *(void *)&v161.d_name[35] = buf.f_ffree;
            *(_WORD *)&v161.d_name[43] = 1024;
            *(_DWORD *)&v161.d_name[45] = buf.f_fsid.val[0];
            *(_WORD *)&v161.d_name[49] = 1024;
            *(_DWORD *)&v161.d_name[51] = buf.f_fsid.val[1];
            *(_WORD *)&v161.d_name[55] = 1024;
            *(_DWORD *)&v161.d_name[57] = buf.f_owner;
            *(_WORD *)&v161.d_name[61] = 1024;
            *(_DWORD *)&v161.d_name[63] = buf.f_type;
            *(_WORD *)&v161.d_name[67] = 1024;
            *(_DWORD *)&v161.d_name[69] = buf.f_flags;
            *(_WORD *)&v161.d_name[73] = 1024;
            *(_DWORD *)&v161.d_name[75] = buf.f_fssubtype;
            *(_WORD *)&v161.d_name[79] = 1024;
            *(_DWORD *)&v161.d_name[81] = buf.f_flags_ext;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "=diag= fstatfs: bsize %u, iosize %d, blocks %llu, bfree %llu, bavail %llu, files %llu, ffree %llu, fsid {%d, %d}, owner %d, type %d, flags 0x%x, fssubtype %d, flags_ext 0x%x", (uint8_t *)&v161, 0x6Au);
          }

          st_ctimespec.tv_nsec = buf.f_fssubtype;
          off_t st_size = buf.f_flags_ext;
          st_mtimespec.tv_nsec = buf.f_type;
          st_ctimespec.tv_sec = buf.f_flags;
          st_atimespec.tv_nsec = buf.f_fsid.val[1];
          st_mtimespec.tv_sec = buf.f_owner;
          uint64_t st_rdev = buf.f_ffree;
          st_atimespec.tv_sec = buf.f_fsid.val[0];
          long long v108 = *(_OWORD *)&buf.f_blocks;
          long long v109 = *(_OWORD *)&buf.f_bavail;
          __darwin_ino64_t f_iosize = buf.f_iosize;
          goto LABEL_78;
        }
      }

      long long v32 = fdopendir(v26);
      if (v32)
      {
        long long v33 = v32;
        int v34 = 0;
        while (1)
        {
          bzero(&v161, 0x418uLL);
          v145 = 0;
          int v35 = readdir_r(v33, &v161, &v145);
          if (v35) {
            break;
          }
          if (!v145) {
            goto LABEL_100;
          }
          if (*(unsigned __int16 *)v161.d_name != 46
            && *(unsigned __int16 *)v161.d_name ^ 0x2E2E | v161.d_name[2]
            && !strcmp(v161.d_name, v8))
          {
            __uint64_t d_ino = *(void *)v133;
            if (!*(void *)v133) {
              __uint64_t d_ino = v161.d_ino;
            }
            id v105 = MBGetDefaultLog();
            if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
            {
              id v106 = v105;
              if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v155) = 67110144;
                DWORD1(v155) = v34;
                WORD4(v155) = 1024;
                *(_DWORD *)((char *)&v155 + 10) = v161.d_type;
                HIWORD(v155) = 2048;
                __uint64_t v156 = v161.d_ino;
                __int16 v157 = 1024;
                int d_namlen = v161.d_namlen;
                __int16 v159 = 1024;
                int d_reclen = v161.d_reclen;
                _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "=diag= readdir_r found file entry (%u), type %d, ino %llu, namelen %d, reclen %d", (uint8_t *)&v155, 0x24u);
              }

              *((void *)&v108 + 1) = v161.d_namlen;
              *(void *)&long long v109 = v161.d_reclen;
              __darwin_ino64_t f_iosize = v161.d_type;
              *(void *)&long long v108 = v161.d_ino;
              _MBLog();
            }

            closedir(v33);
            __darwin_ino64_t st_ino = d_ino;
            if (d_ino) {
              goto LABEL_105;
            }
LABEL_126:
            long long v155 = 0uLL;
            if (fsctl(v6, 0x40104A0EuLL, &v155, 0))
            {
              int32_t v56 = *__error();
              long long v57 = MBGetDefaultLog();
              if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
              {
                long long v57 = v57;
                if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
                {
                  buf.f_bsize = 67109120;
                  buf.__darwin_ino64_t f_iosize = v56;
                  _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "=diag= fsctl(APFSIOC_GET_CLONE_INFO) failed: %{errno}d", (uint8_t *)&buf, 8u);
                }

                goto LABEL_135;
              }
            }
            else
            {
              long long v57 = MBGetDefaultLog();
              if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
              {
                long long v57 = v57;
                if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
                {
                  buf.f_bsize = 134218240;
                  *(void *)&buf.__darwin_ino64_t f_iosize = v155;
                  WORD2(buf.f_blocks) = 2048;
                  *(uint64_t *)((char *)&buf.f_blocks + 6) = *((void *)&v155 + 1);
                  _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "=diag= fsctl(APFSIOC_GET_CLONE_INFO): flags 0x%llx, private_id %llu", (uint8_t *)&buf, 0x16u);
                }

                __darwin_ino64_t f_iosize = *((void *)&v155 + 1);
LABEL_135:
                _MBLog();
              }
            }

            int v134 = open_dprotected_np(v6, 0, 0, 1, 0);
            if (v134 == -1)
            {
              int32_t v60 = *__error();
              long long v61 = MBGetDefaultLog();
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
              {
                buf.f_bsize = 67109120;
                buf.__darwin_ino64_t f_iosize = v60;
                _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "=diag= Failed to open the file raw encrypted: %{errno}d", (uint8_t *)&buf, 8u);
                _MBLog();
              }
            }
            else
            {
              uint64_t v144 = 0;
              if (fsctl(v6, 0x40084A25uLL, &v144, 8u))
              {
                int32_t v58 = *__error();
                long long v59 = MBGetDefaultLog();
                if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                {
                  long long v59 = v59;
                  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                  {
                    buf.f_bsize = 67109120;
                    buf.__darwin_ino64_t f_iosize = v58;
                    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "=diag= fsctl(APFSIOC_GET_INTERNAL_FLAGS) failed: %{errno}d", (uint8_t *)&buf, 8u);
                  }
                  goto LABEL_148;
                }
              }
              else
              {
                long long v59 = MBGetDefaultLog();
                if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                {
                  long long v59 = v59;
                  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                  {
                    buf.f_bsize = 134217984;
                    *(void *)&buf.__darwin_ino64_t f_iosize = v144;
                    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "=diag= fsctl(APFSIOC_GET_INTERNAL_FLAGS): flags 0x%llx", (uint8_t *)&buf, 0xCu);
                  }
LABEL_148:

                  _MBLog();
                }
              }

              long long v142 = 0u;
              long long v143 = 0u;
              long long v141 = 0u;
              if (fsctl(v6, 0x40304A6DuLL, &v141, 0))
              {
                int32_t v62 = *__error();
                long long v63 = MBGetDefaultLog();
                if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                {
                  long long v63 = v63;
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                  {
                    buf.f_bsize = 67109120;
                    buf.__darwin_ino64_t f_iosize = v62;
                    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "=diag= fsctl(APFSIOC_PURGEABLE_GET_FILE_INFO) failed: %{errno}d", (uint8_t *)&buf, 8u);
                  }

                  goto LABEL_158;
                }
              }
              else
              {
                long long v63 = MBGetDefaultLog();
                if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                {
                  long long v63 = v63;
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                  {
                    buf.f_bsize = 134219264;
                    *(void *)&buf.__darwin_ino64_t f_iosize = v141;
                    WORD2(buf.f_blocks) = 2048;
                    *(uint64_t *)((char *)&buf.f_blocks + 6) = *((void *)&v141 + 1);
                    HIWORD(buf.f_bfree) = 2048;
                    buf.f_bavail = v142;
                    LOWORD(buf.f_files) = 2048;
                    *(uint64_t *)((char *)&buf.f_files + 2) = *((void *)&v142 + 1);
                    WORD1(buf.f_ffree) = 2048;
                    *(uint64_t *)((char *)&buf.f_ffree + 4) = v143;
                    LOWORD(buf.f_fsid.val[1]) = 2048;
                    *(fsid_t *)((char *)&buf.f_fsid + 6) = (fsid_t)*((void *)&v143 + 1);
                    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "=diag= fsctl(APFSIOC_PURGEABLE_GET_FILE_INFO): file flags: 0x%llx related flags: 0x%llx, file acctime: %llu\n gen count: %llu sync root id: %llu size: %llu", (uint8_t *)&buf, 0x3Eu);
                  }

                  long long v109 = v143;
                  __darwin_ino64_t f_iosize = *((void *)&v141 + 1);
                  long long v108 = v142;
LABEL_158:
                  _MBLog();
                }
              }

              long long v64 = MBGetDefaultLog();
              if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
              {
                long long v65 = v64;
                if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(buf.f_bsize) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "=diag= Dumping extent information", (uint8_t *)&buf, 2u);
                }

                _MBLog();
              }

              int32_t v66 = 0;
              uint64_t v67 = 0;
              while (1)
              {
                LODWORD(v161.d_ino) = 0;
                *(__uint64_t *)((char *)&v161.d_ino + 4) = 0x7FFFFFFFFFFFFFFFLL;
                *(__uint64_t *)((char *)&v161.d_seekoff + 4) = v67;
                if (fcntl(v134, 65, &v161, f_iosize, v108, v109, st_rdev, st_atimespec, st_mtimespec, st_ctimespec, st_size, v115, st_blksize, st_flags, st_gen, v119, v120, v121, v122,
                       v123,
                       v124,
                       v125,
                       v126,
                       v127,
                       v128,
                       v129,
                       v130,
                       v131))
                {
                  break;
                }
                uint64_t v68 = *(__uint64_t *)((char *)&v161.d_ino + 4);
                long long v69 = MBGetDefaultLog();
                if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                {
                  long long v70 = v69;
                  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                  {
                    buf.f_bsize = 134218496;
                    *(void *)&buf.__darwin_ino64_t f_iosize = v67;
                    WORD2(buf.f_blocks) = 2048;
                    *(uint64_t *)((char *)&buf.f_blocks + 6) = v68;
                    HIWORD(buf.f_bfree) = 2048;
                    buf.f_bavail = *(__uint64_t *)((char *)&v161.d_seekoff + 4);
                    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "=diag= 0x%llx:+%lld @ 0x%llx", (uint8_t *)&buf, 0x20u);
                  }

                  __darwin_ino64_t f_iosize = v68;
                  *(void *)&long long v108 = *(__uint64_t *)((char *)&v161.d_seekoff + 4);
                  _MBLog();
                }

                if (v68 < 1 || (v68 ^ 0x7FFFFFFFFFFFFFFFLL) < v67) {
                  goto LABEL_179;
                }
                v67 += v68;
                if (++v66 == 10000)
                {
                  int32_t v66 = 10000;
                  goto LABEL_179;
                }
              }
              int v71 = *__error();
              if (v71 != 34)
              {
                long long v72 = MBGetDefaultLog();
                if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                {
                  long long v73 = v72;
                  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
                  {
                    buf.f_bsize = 134218240;
                    *(void *)&buf.__darwin_ino64_t f_iosize = v67;
                    WORD2(buf.f_blocks) = 1024;
                    *(_DWORD *)((char *)&buf.f_blocks + 6) = v71;
                    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "=diag= log2phys failed at 0x%llx: %{errno}d", (uint8_t *)&buf, 0x12u);
                  }

                  _MBLog();
                }
              }
LABEL_179:
              long long v74 = MBGetDefaultLog();
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
              {
                long long v75 = v74;
                if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                {
                  buf.f_bsize = 67109120;
                  buf.__darwin_ino64_t f_iosize = v66;
                  _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "=diag= Found %u extents", (uint8_t *)&buf, 8u);
                }

                _MBLog();
              }

              uint64_t v76 = (char *)malloc_type_malloc(0x4000uLL, 0x445AE8B7uLL);
              if (!v76) {
                __assert_rtn("MBDiagnoseFile", "MBDiagnostics.m", 365, "finfo");
              }
              unint64_t v77 = v76;
              int v135 = 1;
              uint64_t v137 = 0;
              uint64_t v136 = 0;
              int v138 = 0;
              uint64_t v139 = 0x4000;
              long long v140 = v76;
              if (ffsctl(v134, 0x80284A7FuLL, &v135, 0))
              {
                int32_t v78 = *__error();
                id v79 = MBGetDefaultLog();
                if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v80 = v79;
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                  {
                    buf.f_bsize = 67109120;
                    buf.__darwin_ino64_t f_iosize = v78;
                    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "=diag= Failed to get the crypto file infos: %{errno}d", (uint8_t *)&buf, 8u);
                  }

                  _MBLog();
                }
              }
              else
              {
                if ((*((void *)v77 + 2) & 0x8000000000000000) == 0) {
                  __assert_rtn("MBDiagnoseFile", "MBDiagnostics.m", 379, "finfo->dstream_exists");
                }
                v81 = MBGetDefaultLog();
                if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v82 = v81;
                  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
                  {
                    int32_t v83 = *((_DWORD *)v77 + 85);
                    uint64_t v84 = *((void *)v77 + 3);
                    buf.f_bsize = 67109376;
                    buf.__darwin_ino64_t f_iosize = v83;
                    LOWORD(buf.f_blocks) = 2048;
                    *(uint64_t *)((char *)&buf.f_blocks + 2) = v84;
                    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "=diag= Found %u crypto ids for filesize %lld", (uint8_t *)&buf, 0x12u);
                  }

                  _MBLog();
                }

                if (*((_DWORD *)v77 + 85))
                {
                  unsigned __int16 v85 = 0;
                  id v86 = v77 + 344;
                  do
                  {
                    int v87 = v85;
                    uint64_t v88 = &v86[312 * v85];
                    uint64_t v89 = *((void *)v88 + 2);
                    id v90 = MBGetDefaultLog();
                    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v91 = v90;
                      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                      {
                        uint64_t v92 = *(void *)v88;
                        uint64_t v93 = *(void *)&v86[312 * v87 + 8];
                        buf.f_bsize = 134218496;
                        *(void *)&buf.__darwin_ino64_t f_iosize = v92;
                        WORD2(buf.f_blocks) = 2048;
                        *(uint64_t *)((char *)&buf.f_blocks + 6) = v93;
                        HIWORD(buf.f_bfree) = 2048;
                        buf.f_bavail = v89;
                        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "=diag= offset %lld:length %llu, id %lld", (uint8_t *)&buf, 0x20u);
                      }

                      _MBLog();
                    }

                    uint64_t v94 = MBGetDefaultLog();
                    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                    {
                      v95 = v94;
                      if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
                      {
                        id v96 = &v86[312 * v87];
                        int v97 = *((_DWORD *)v96 + 10);
                        int v98 = *((_DWORD *)v96 + 11);
                        int v99 = *((unsigned __int16 *)v96 + 24);
                        LODWORD(v96) = *((unsigned __int16 *)v96 + 25);
                        buf.f_bsize = 134219008;
                        *(void *)&buf.__darwin_ino64_t f_iosize = v89;
                        WORD2(buf.f_blocks) = 1024;
                        *(_DWORD *)((char *)&buf.f_blocks + 6) = v97;
                        WORD1(buf.f_bfree) = 1024;
                        HIDWORD(buf.f_bfree) = v98;
                        LOWORD(buf.f_bavail) = 1024;
                        *(_DWORD *)((char *)&buf.f_bavail + 2) = v99;
                        HIWORD(buf.f_bavail) = 1024;
                        LODWORD(buf.f_files) = v96;
                        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "=diag= crypto_id %llu key_class %u, os_vers 0x%x, rev %hu, len %hu", (uint8_t *)&buf, 0x24u);
                      }

                      _MBLog();
                    }

                    unsigned __int16 v85 = v87 + 1;
                  }
                  while (*((_DWORD *)v77 + 85) > (unsigned __int16)(v87 + 1));
                }
              }
              free(v77);
              sub_100236C0C(v132);
              if (getxattr(v132, "com.apple.ResourceFork", 0, 0, 0, 0) != -1)
              {
                id v100 = MBGetDefaultLog();
                if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
                {
                  id v101 = v100;
                  if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
                  {
                    buf.f_bsize = 136315138;
                    *(void *)&buf.__darwin_ino64_t f_iosize = v132;
                    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "=diag= %s is a compressed file", (uint8_t *)&buf, 0xCu);
                  }

                  _MBLog();
                }

                id v102 = [v5 stringByAppendingPathComponent:@"/..namedfork/rsrc"];
                sub_100236C0C((const char *)[v102 fileSystemRepresentation]);
              }
              close(v134);
            }
            id v16 = MBGetDefaultLog();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              id v103 = v16;
              if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
              {
                buf.f_bsize = 138543362;
                *(void *)&buf.__darwin_ino64_t f_iosize = v5;
                _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "=diag= Finished dumping diagnostics for %{public}@", (uint8_t *)&buf, 0xCu);
              }

LABEL_217:
              _MBLog();
            }
            goto LABEL_218;
          }
          if (++v34 == 500000)
          {
            int v34 = 500000;
            goto LABEL_100;
          }
        }
        int v39 = v35;
        __darwin_ino64_t v40 = *__error();
        long long v41 = MBGetDefaultLog();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          long long v42 = v41;
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v155) = 67109376;
            DWORD1(v155) = v39;
            WORD4(v155) = 1024;
            *(_DWORD *)((char *)&v155 + 10) = v40;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "=diag= readdir_r failed: %d (%{errno}d)", (uint8_t *)&v155, 0xEu);
          }

          __darwin_ino64_t f_iosize = v40;
          _MBLog();
        }

LABEL_100:
        closedir(v33);
        long long v43 = MBGetDefaultLog();
        __darwin_ino64_t st_ino = *(void *)v133;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          long long v44 = v43;
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v161.d_ino) = 67109120;
            HIDWORD(v161.d_ino) = v34;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "=diag= Failed to find the file using readdir_r (%u)", (uint8_t *)&v161, 8u);
          }

          _MBLog();
        }

        if (!*(void *)v133) {
          goto LABEL_126;
        }
        goto LABEL_105;
      }
      __darwin_ino64_t v36 = *__error();
      long long v37 = MBGetDefaultLog();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        long long v38 = v37;
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v161.d_ino) = 136446466;
          *(__uint64_t *)((char *)&v161.d_ino + 4) = (__uint64_t)v10;
          WORD2(v161.d_seekoff) = 1024;
          *(_DWORD *)((char *)&v161.d_seekoff + 6) = v36;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "=diag= fdopendir failed at %{public}s: %{errno}d", (uint8_t *)&v161, 0x12u);
        }

        __darwin_ino64_t f_iosize = v36;
        _MBLog();
      }

      close(v26);
      __darwin_ino64_t st_ino = *(void *)v133;
      if (!*(void *)v133) {
        goto LABEL_126;
      }
LABEL_105:
      if (!f_fsid.val[0]) {
        goto LABEL_126;
      }
      *(void *)&long long v155 = st_ino;
      int v45 = openbyid_np();
      if (v45 == -1)
      {
        uint64_t v52 = *__error();
        long long v53 = MBGetDefaultLog();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          long long v54 = v53;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            buf.f_bsize = 67109888;
            buf.__darwin_ino64_t f_iosize = f_fsid.val[0];
            LOWORD(buf.f_blocks) = 1024;
            *(_DWORD *)((char *)&buf.f_blocks + 2) = f_fsid.val[1];
            HIWORD(buf.f_blocks) = 2048;
            buf.f_bfree = st_ino;
            LOWORD(buf.f_bavail) = 1024;
            *(_DWORD *)((char *)&buf.f_bavail + 2) = v52;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "=diag= openbyid_np({%d, %d}, %llu) failed: %{errno}d", (uint8_t *)&buf, 0x1Eu);
          }

          *(void *)&long long v108 = st_ino;
          *((void *)&v108 + 1) = v52;
          __darwin_ino64_t f_iosize = f_fsid.val[1];
          _MBLog();
        }

        goto LABEL_126;
      }
      int v46 = v45;
      __int16 v47 = MBGetDefaultLog();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        id v48 = v47;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          buf.f_bsize = 67109632;
          buf.__darwin_ino64_t f_iosize = f_fsid.val[0];
          LOWORD(buf.f_blocks) = 1024;
          *(_DWORD *)((char *)&buf.f_blocks + 2) = f_fsid.val[1];
          HIWORD(buf.f_blocks) = 2048;
          buf.f_bfree = st_ino;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "=diag= openbyid_np({%d, %d}, %llu) succeeded", (uint8_t *)&buf, 0x18u);
        }

        __darwin_ino64_t f_iosize = f_fsid.val[1];
        *(void *)&long long v108 = st_ino;
        _MBLog();
      }

      ssize_t v49 = pread(v46, &buf, 0x10uLL, 0);
      if (v49 == -1)
      {
        int v55 = *__error();
        uint64_t v51 = MBGetDefaultLog();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v51 = v51;
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v161.d_ino) = 67109120;
            HIDWORD(v161.d_ino) = v55;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "=diag= pread failed: %d", (uint8_t *)&v161, 8u);
          }
          goto LABEL_124;
        }
      }
      else
      {
        __uint64_t v50 = v49;
        uint64_t v51 = MBGetDefaultLog();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v51 = v51;
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v161.d_ino) = 134217984;
            *(__uint64_t *)((char *)&v161.d_ino + 4) = v50;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "=diag= pread returned %ld bytes", (uint8_t *)&v161, 0xCu);
          }
LABEL_124:

          _MBLog();
        }
      }

      close(v46);
      goto LABEL_126;
    }
    id v16 = MBGetDefaultLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.f_bsize) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "=diag= nil dir path FSR", (uint8_t *)&buf, 2u);
      goto LABEL_217;
    }
LABEL_218:
  }
}

void MBDiagnoseiTunesBackupFileAtPath(void *a1)
{
  id v3 = a1;
  id v1 = +[NSProcessInfo processInfo];
  __darwin_ino64_t v2 = [v1 processName];

  if ([v2 isEqualToString:@"BackupAgent2"]
    && atomic_fetch_add_explicit(&dword_100482740, 1u, memory_order_relaxed) <= 1)
  {
    MBDiagnoseFile(v3);
  }
}

void MBDiagnoseiCloudBackupFileAtPath(void *a1)
{
  id v3 = a1;
  id v1 = +[NSProcessInfo processInfo];
  __darwin_ino64_t v2 = [v1 processName];

  if ([v2 isEqualToString:@"backupd"]
    && atomic_fetch_add_explicit(&dword_100482744, 1u, memory_order_relaxed) <= 1)
  {
    MBDiagnoseFile(v3);
  }
}

void MBDiagnoseUnavailableiCloudBackupFile(void *a1, void *a2, void *a3, int a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = +[NSProcessInfo processInfo];
  unsigned int v13 = [v12 processName];
  unsigned int v14 = [v13 isEqualToString:@"backupd"];

  if (v14 && !atomic_fetch_add_explicit(&dword_100482748, 1u, memory_order_relaxed))
  {
    MBDiagnoseFile(v9);
    uint64_t v15 = MBLivePathFromSnapshotPath();
    if (v15 && ([v9 isEqualToString:v15] & 1) == 0) {
      MBDiagnoseFile(v15);
    }
    if (MBIsInternalInstall())
    {
      id v16 = MBGetDefaultLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)statfs buf = 136446722;
        uint64_t v18 = a5;
        __int16 v19 = 1024;
        int v20 = a4;
        __int16 v21 = 2114;
        id v22 = v9;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "=diag= %{public}s failed with %d at %{public}@", buf, 0x1Cu);
        _MBLog();
      }
    }
  }
}

void MBDiagnoseUnavailableiTunesBackupFile(void *a1, void *a2, void *a3, int a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = +[NSProcessInfo processInfo];
  unsigned int v13 = [v12 processName];
  unsigned int v14 = [v13 isEqualToString:@"BackupAgent2"];

  if (v14 && !atomic_fetch_add_explicit(&dword_10048274C, 1u, memory_order_relaxed))
  {
    MBDiagnoseFile(v9);
    uint64_t v15 = MBLivePathFromSnapshotPath();
    if (v15 && ([v9 isEqualToString:v15] & 1) == 0) {
      MBDiagnoseFile(v15);
    }
    if (MBIsInternalInstall())
    {
      id v16 = MBGetDefaultLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)statfs buf = 136446722;
        uint64_t v18 = a5;
        __int16 v19 = 1024;
        int v20 = a4;
        __int16 v21 = 2114;
        id v22 = v9;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "=diag= %{public}s failed with %d at %{public}@", buf, 0x1Cu);
        _MBLog();
      }
    }
  }
}

void sub_100239988()
{
  id v0 = (objc_class *)objc_opt_class();
  Name = class_getName(v0);
  id v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  __darwin_ino64_t v2 = dispatch_queue_attr_make_with_qos_class(v5, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v3 = dispatch_queue_create(Name, v2);
  id v4 = (void *)qword_100482750;
  qword_100482750 = (uint64_t)v3;
}

void sub_10023B340(uint64_t a1)
{
  __darwin_ino64_t v2 = +[ACAccountStore defaultStore];
  dispatch_queue_t v3 = [*(id *)(a1 + 32) accountIdentifier];
  id v4 = [v2 accountWithIdentifier:v3];

  [*(id *)(a1 + 32) _reloadAccountPropertiesFromACAccount:v4];
}

void sub_10023B71C(id a1)
{
  id v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_UTILITY, 0);

  dispatch_queue_t v2 = dispatch_queue_create("com.apple.backupd.saveAccount", attr);
  dispatch_queue_t v3 = (void *)qword_100482760;
  qword_100482760 = (uint64_t)v2;
}

void sub_10023B7A0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  if (v2 == [*(id *)(a1 + 32) isEnabledForDataclass:*(void *)(a1 + 40)])
  {
    dispatch_queue_t v3 = MBGetDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v5 = *(void *)(a1 + 48);
      int v6 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)statfs buf = 138543874;
      uint64_t v16 = v4;
      __int16 v17 = 2114;
      uint64_t v18 = v5;
      __int16 v19 = 1024;
      int v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "No need to save the \"%{public}@\" state for account %{public}@: %d", buf, 0x1Cu);
      _MBLog();
    }

    (*(void (**)(void, void, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), 0, v7);
  }
  else
  {
    [*(id *)(a1 + 32) setEnabled:*(unsigned __int8 *)(a1 + 64) forDataclass:*(void *)(a1 + 40)];
    id v8 = +[ACAccountStore defaultStore];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10023B97C;
    v10[3] = &unk_100416E10;
    uint64_t v9 = *(void *)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 48);
    char v14 = *(unsigned char *)(a1 + 64);
    id v13 = *(id *)(a1 + 56);
    [v8 saveAccount:v9 withCompletionHandler:v10];
  }
}

void sub_10023B97C(uint64_t a1, char a2, void *a3)
{
  uint64_t v5 = a3;
  int v6 = MBGetDefaultLog();
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = *(unsigned __int8 *)(a1 + 56);
      *(_DWORD *)statfs buf = 138543874;
      uint64_t v15 = v8;
      __int16 v16 = 2114;
      uint64_t v17 = v9;
      __int16 v18 = 1024;
      LODWORD(v19) = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Saved the \"%{public}@\" state for account %{public}@: %d", buf, 0x1Cu);
      _MBLog();
    }

    uint64_t v7 = v5;
    uint64_t v5 = 0;
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)statfs buf = 138543874;
    uint64_t v15 = v11;
    __int16 v16 = 2114;
    uint64_t v17 = v12;
    __int16 v18 = 2112;
    __int16 v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to save \"%{public}@\" state for account %{public}@: %@", buf, 0x20u);
    _MBLog();
  }

  (*(void (**)(void, NSObject *, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v5, v13);
}

void sub_10023BF38(uint64_t a1)
{
  int v2 = +[ACAccountStore defaultStore];
  dispatch_queue_t v3 = [*(id *)(a1 + 32) accountIdentifier];
  uint64_t v4 = [v2 accountWithIdentifier:v3];

  if (v4)
  {
    uint64_t v5 = +[ACAccountStore defaultStore];
    [v5 renewCredentialsForAccount:v4 completion:&stru_100416E58];
  }
  else
  {
    uint64_t v5 = MBGetDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Unable to retrieve account, cannot renew credentials", v6, 2u);
      _MBLog();
    }
  }
}

void sub_10023C02C(id a1, int64_t a2, NSError *a3)
{
  uint64_t v4 = MBGetDefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = +[MBServiceAccount _stringForAccountCredentialRenewResult:a2];
    *(_DWORD *)statfs buf = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 1024;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Account credentials %@ (%d)", buf, 0x12u);

    int v6 = +[MBServiceAccount _stringForAccountCredentialRenewResult:a2];
    _MBLog();
  }
}

void sub_10023C370(uint64_t a1)
{
  int v2 = +[ACAccountStore defaultStore];
  dispatch_queue_t v3 = [*(id *)(a1 + 32) accountIdentifier];
  uint64_t v4 = [v2 accountWithIdentifier:v3];

  uint64_t v5 = MBGetDefaultLog();
  int v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)statfs buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Updating account", buf, 2u);
      _MBLog();
    }

    uint64_t v7 = +[ACAccountStore defaultStore];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10023C570;
    v10[3] = &unk_100414BE8;
    void v10[4] = *(void *)(a1 + 32);
    id v11 = v4;
    id v12 = *(id *)(a1 + 40);
    objc_msgSend(v7, "aa_updatePropertiesForAppleAccount:completion:", v11, v10);
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)statfs buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "No primary account found to update", buf, 2u);
      _MBLog();
    }

    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      __int16 v9 = +[MBError errorWithCode:1 format:@"No primary account found to update"];
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
    }
  }
}

void sub_10023C570(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  int v6 = MBGetDefaultLog();
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)statfs buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Updated account", buf, 2u);
      _MBLog();
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = +[MBError descriptionForError:v5];
    *(_DWORD *)statfs buf = 138412290;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error updating account: %@", buf, 0xCu);

    int v10 = +[MBError descriptionForError:v5];
    _MBLog();
  }
  [*(id *)(a1 + 32) _reloadAccountPropertiesFromACAccount:*(void *)(a1 + 40)];
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v5);
  }
}

void sub_10023C82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10023C850(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10023C860(uint64_t a1)
{
}

void sub_10023C868(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10023C9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10023CA08(uint64_t a1)
{
  int v2 = +[ACAccountStore defaultStore];
  dispatch_queue_t v3 = [*(id *)(a1 + 32) accountIdentifier];
  id v9 = [v2 accountWithIdentifier:v3];

  if (v9)
  {
    id v4 = [v9 username];
    id v5 = [v4 copy];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    id v4 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0;
  }
}

void sub_10023CBD0(uint64_t a1)
{
  int v2 = +[ACAccountStore defaultStore];
  dispatch_queue_t v3 = [*(id *)(a1 + 32) accountIdentifier];
  id v4 = [v2 accountWithIdentifier:v3];

  id v5 = MBGetDefaultLog();
  uint64_t v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)statfs buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Re-authenticating account", buf, 2u);
      _MBLog();
    }

    objc_msgSend(v4, "aa_setPassword:", &stru_100418BA8);
    objc_msgSend(v4, "aa_setPassword:", *(void *)(a1 + 40));
    uint64_t v7 = +[ACAccountStore defaultStore];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10023CDD8;
    v10[3] = &unk_100416EA8;
    void v10[4] = *(void *)(a1 + 32);
    id v11 = *(id *)(a1 + 48);
    [v7 verifyCredentialsForAccount:v4 withHandler:v10];
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)statfs buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "No primary account found to update", buf, 2u);
      _MBLog();
    }

    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      id v9 = +[MBError errorWithCode:1 format:@"No primary account found to update"];
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
    }
  }
}

void sub_10023CDD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = MBGetDefaultLog();
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)statfs buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Authenticated account", buf, 2u);
      _MBLog();
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    id v9 = +[MBError descriptionForError:v6];
    *(_DWORD *)statfs buf = 138412290;
    __int16 v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error authenticating account: %@", buf, 0xCu);

    char v14 = +[MBError descriptionForError:v6];
    _MBLog();
  }
  int v10 = +[ACAccountStore defaultStore];
  id v11 = [*(id *)(a1 + 32) accountIdentifier];
  id v12 = [v10 accountWithIdentifier:v11];

  [*(id *)(a1 + 32) _reloadAccountPropertiesFromACAccount:v12];
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v6);
  }
}

void sub_10023D100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10023D124(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10023D5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10023D5EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 objectForKeyedSubscript:AKAuthenticationPasswordKey];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v5;
  id v11 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10023DE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("-[MBATCBundlesPlugin _populatePathsForEngine:domain:dataclass:allBackupPaths:]_block_invoke", "MBATCBundlesPlugin.m", 75, "path");
  }
  uint64_t v7 = v6;
  uint64_t v8 = MBGetDefaultLog();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (a3)
  {
    if (v9)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)statfs buf = 138412802;
      uint64_t v23 = v13;
      __int16 v24 = 2048;
      uint64_t v25 = a3;
      __int16 v26 = 2112;
      uint64_t v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "=atc-bundles= %@: attrs:0x%lx, pathNotToBackup:%@", buf, 0x20u);
      uint64_t v20 = a3;
      uint64_t v21 = a2;
      uint64_t v19 = *(void *)(a1 + 32);
      _MBLog();
    }
    id v14 = objc_msgSend(*(id *)(a1 + 40), "_standardizePath:fromDomain:", a2, *(void *)(a1 + 48), v19, v20, v21);
    uint64_t v15 = *(void **)(a1 + 72);
    goto LABEL_17;
  }
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)statfs buf = 138412802;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = a3;
    __int16 v26 = 2112;
    uint64_t v27 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "=atc-bundles= %@: attrs:0x%lx, pathToBackup:%@", buf, 0x20u);
    uint64_t v20 = a3;
    uint64_t v21 = a2;
    uint64_t v19 = *(void *)(a1 + 32);
    _MBLog();
  }
  if ((a3 & 2) != 0 && (*(_DWORD *)(a1 + 80) - 3) >= 0xFFFFFFFE)
  {
    id v11 = MBGetDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)statfs buf = 138412546;
      uint64_t v23 = v12;
      __int16 v24 = 2112;
      uint64_t v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "=atc-bundles= %@: Skipping redownloadable path: %@", buf, 0x16u);
LABEL_15:
      _MBLog();
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  id v16 = objc_msgSend(*(id *)(a1 + 40), "_standardizePath:fromDomain:", a2, *(void *)(a1 + 48), v19, v20, v21);
  if (![*(id *)(a1 + 56) containsObject:v16])
  {
    [*(id *)(a1 + 56) addObject:v16];
    uint64_t v15 = *(void **)(a1 + 64);
    id v14 = v16;
LABEL_17:
    [v15 addObject:v14];
    goto LABEL_18;
  }
  uint64_t v17 = MBGetDefaultLog();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(a1 + 32);
    *(_DWORD *)statfs buf = 138412546;
    uint64_t v23 = v18;
    __int16 v24 = 2112;
    uint64_t v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "=atc-bundles= %@: Skipping duplicate path: %@", buf, 0x16u);
    goto LABEL_15;
  }
LABEL_18:
}

void sub_10023EA8C(uint64_t a1, void *a2)
{
  id v5 = [a2 purchaserDSID];
  if (v5)
  {
    uint64_t v6 = v5;
    if (([v5 isEqualToNumber:&off_10043A188] & 1) == 0
      && ([*(id *)(a1 + 32) containsObject:v6] & 1) == 0)
    {
      if ([*(id *)(a1 + 40) addAccountWithDSID:v6])
      {
        id v7 = [*(id *)(a1 + 48) accountWithUniqueIdentifier:v6];
        if (v7)
        {
          uint64_t v8 = v7;
          id v9 = [v7 accountName];
          id v10 = objc_msgSend(objc_msgSend(v8, "uniqueIdentifier"), "stringValue");
          id v11 = [v8 altDSID];
        }
        else
        {
          id v13 = objc_msgSend(*(id *)(a1 + 64), "aa_appleAccountWithPersonID:", objc_msgSend(v6, "stringValue"));
          if (!v13) {
            goto LABEL_14;
          }
          id v14 = v13;
          id v9 = [v13 username];
          id v10 = objc_msgSend(v14, "aa_personID");
          id v11 = objc_msgSend(v14, "aa_altDSID");
        }
        [*(id *)(a1 + 56) addAppleID:v9 DSID:v10 altDSID:v11 dataClass:0];
        if (!*(unsigned char *)(a1 + 72)) {
          objc_msgSend(*(id *)(a1 + 56), "addAssetDescriptionForAppleID:assetDescription:", v9, objc_msgSend(a2, "localizedNameForContext:", 0));
        }
        [*(id *)(a1 + 32) addObject:v6];
      }
      else
      {
        uint64_t v12 = MBGetDefaultLog();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)statfs buf = 138412546;
          id v16 = [a2 applicationIdentifier];
          __int16 v17 = 2112;
          uint64_t v18 = v6;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "=atc-bundles= Skipping %@ for account %@", buf, 0x16u);
          [a2 applicationIdentifier];
          _MBLog();
        }
      }
    }
  }
LABEL_14:
}

uint64_t MBSCanRestoreSystemFilesBetweenProductClasses(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  char v12 = 0;
  id v5 = +[MBPersona personalPersonaWithError:0];
  unsigned int v6 = [v5 getBooleanValueForKey:@"AlwaysRestoreSystemFiles" keyExists:&v12];
  if (v12) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unsigned int v8 = [v3 isEqualToString:@"iPad"];
    unsigned int v9 = [v4 isEqualToString:@"iPad"];
    uint64_t v10 = v8 & v9 | (v8 | v9) ^ 1;
  }
  else
  {
    uint64_t v10 = 1;
  }

  return v10;
}

BOOL BackupStatusMessageReadFrom(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadString();
        id v13 = (BackupStatusKeyAndValue *)a1[1];
        a1[1] = v12;
LABEL_23:

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_25:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    id v13 = objc_alloc_init(BackupStatusKeyAndValue);
    [a1 addKeysAndValues:v13];
    if (!PBReaderPlaceMark() || !BackupStatusKeyAndValueReadFrom((uint64_t)v13, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_23;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1002424A4(uint64_t a1)
{
  int v2 = MBGetDefaultLog();
  uint64_t result = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    *(_DWORD *)statfs buf = 134218496;
    uint64_t v7 = a1;
    __int16 v8 = 2048;
    uint64_t v9 = v4;
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "<MBChunkStoreProgressModel:%p progress=%0.3f, remaining=%{bytes}llu>", buf, 0x20u);
    return _MBLog();
  }
  return result;
}

NSString *MBFileListStatsToString(void *a1)
{
  return +[NSString stringWithFormat:@"assets %llu, reg %llu, empty %llu, dir %llu, symlink %llu", *a1, a1[1], a1[2], a1[3], a1[4]];
}

void sub_100242DC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_1002430EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x100242FFCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100243834(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ([*(id *)(*(void *)(a1 + 32) + 16) isEqualToString:@"PlaceholderDomain"])
  {
    v9[0] = @"CREATE TABLE IF NOT EXISTS CumulativeDomainList (domainID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,domain TEXT NOT NULL UNIQUE, domainHMAC TEXT NOT NULL, isSystemApp INTEGER NOT NULL);";
    v9[1] = @"CREATE INDEX CumulativeDomainListDomainHMACIdx ON CumulativeDomainList(domainHMAC)";
    v9[2] = @"CREATE TABLE IF NOT EXISTS DomainDependencies(parentDomainID INTEGER NOT NULL, childDomainID INTEGER NOT NULL, PRIMARY KEY (parentDomainID, childDomainID));";
    unint64_t v6 = +[NSArray arrayWithObjects:v9 count:3];
    uint64_t v7 = (uint64_t)[v5 executeStatements:v6 error:a3];
  }
  else
  {
    uint64_t v7 = 1;
  }

  return v7;
}

void sub_100243C04(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x100243B2CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_10024433C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100244354(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100244364(uint64_t a1)
{
}

BOOL sub_10024436C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [(id)objc_opt_class() _fileMetadataForPath:*(void *)(a1 + 40) fetchXattrs:*(unsigned __int8 *)(a1 + 56) db:v5 error:a3];

  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  __int16 v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  return *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) != 0;
}

void sub_10024450C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100244524(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 uuidAtIndex:0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

uint64_t sub_100244BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (objc_msgSend(*(id *)(a1 + 32), "_markAllFilesAsDeleted:"))
  {
    id v5 = *(void **)(a1 + 32);
    id v24 = 0;
    uint64_t v6 = (uint64_t)[v5 _fetchVolumeUUID:&v24 error:a3];
    id v7 = v24;
    if (v6)
    {
      if (![*(id *)(a1 + 40) compare:v7])
      {
LABEL_21:
        uint64_t v6 = 1;
        goto LABEL_23;
      }
      if (v7)
      {
        __int16 v23 = 0;
        uint64_t v6 = 0;
        if (![*(id *)(a1 + 32) canReuseAssetsAcrossVolumeTransition:(char *)&v23 + 1 isResuming:&v23 error:a3])goto LABEL_23; {
        if (HIBYTE(v23))
        }
        {
          int v8 = v23;
          uint64_t v9 = MBGetDefaultLog();
          BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (v8)
          {
            if (v10)
            {
              uint64_t v11 = *(void *)(a1 + 40);
              uint64_t v12 = [*(id *)(a1 + 32) domainName];
              *(_DWORD *)statfs buf = 138412802;
              id v26 = v7;
              __int16 v27 = 2112;
              uint64_t v28 = v11;
              __int16 v29 = 2112;
              long long v30 = v12;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Resuming volumeUUID transition from %@ to %@ for %@", buf, 0x20u);

              uint64_t v13 = *(void *)(a1 + 40);
              [*(id *)(a1 + 32) domainName];
              id v22 = v21 = v13;
              uint64_t v20 = v7;
              _MBLog();
            }
LABEL_20:
            objc_msgSend(*(id *)(a1 + 32), "setVolumeUUIDToUpdateAfterTranscription:", *(void *)(a1 + 40), v20, v21, v22);
            goto LABEL_21;
          }
          if (v10)
          {
            uint64_t v16 = *(void *)(a1 + 40);
            __int16 v17 = [*(id *)(a1 + 32) domainName];
            *(_DWORD *)statfs buf = 138412802;
            id v26 = v7;
            __int16 v27 = 2112;
            uint64_t v28 = v16;
            __int16 v29 = 2112;
            long long v30 = v17;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "VolumeUUID transition detected %@ != %@ for %@", buf, 0x20u);

            uint64_t v18 = *(void *)(a1 + 40);
            [*(id *)(a1 + 32) domainName];
            id v22 = v21 = v18;
            uint64_t v20 = v7;
            _MBLog();
          }
          if ([*(id *)(a1 + 32) _adjustInodesForVolumeTransition:a3]) {
            goto LABEL_20;
          }
LABEL_22:
          uint64_t v6 = 0;
          goto LABEL_23;
        }
      }
      else
      {
        id v14 = MBGetDefaultLog();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = [*(id *)(a1 + 32) domainName];
          *(_DWORD *)statfs buf = 138412290;
          id v26 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Detected initial transcription for %@", buf, 0xCu);

          uint64_t v20 = [*(id *)(a1 + 32) domainName];
          _MBLog();
        }
      }
      if (!objc_msgSend(*(id *)(a1 + 32), "_truncateDeletedFiles:", a3, v20)) {
        goto LABEL_22;
      }
      uint64_t v6 = (uint64_t)[*(id *)(a1 + 32) _setVolumeUUID:*(void *)(a1 + 40) error:a3];
    }
LABEL_23:

    return v6;
  }
  return 0;
}

id sub_100245000(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_markAllFilesAsDeleted:");
}

uint64_t sub_100245150(uint64_t a1, void *a2, uint64_t a3)
{
  id v31 = a2;
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  [*(id *)(a1 + 32) getNode:&v33];
  uint64_t v4 = *((void *)&v35 + 1);
  uint64_t v5 = *((void *)&v34 + 1);
  uint64_t v29 = v34;
  uint64_t v30 = v36;
  uint64_t v6 = v35;
  uint64_t v7 = WORD2(v37);
  uint64_t v8 = BYTE6(v37);
  uint64_t v9 = DWORD1(v33);
  uint64_t v10 = DWORD2(v33);
  uint64_t v11 = HIDWORD(v33);
  uint64_t v12 = [*(id *)(a1 + 32) xattrs];
  LODWORD(v10) = objc_msgSend(v31, "executeWithError:sql:", a3, @"INSERT OR REPLACE INTO FileMetadata(inode, size, birth, modified, statusChanged, userID, groupID, mode, flags, protectionClass, xattrs, relativePath) VALUES (%llu, %llu, %lu, %lu, %lu, %d, %d, %d, %d, %d, %@, %@);",
                                 v30,
                                 v4,
                                 v29,
                                 v5,
                                 v6,
                                 v9,
                                 v10,
                                 v7,
                                 v11,
                                 v8,
                                 v12,
                                 *(void *)(a1 + 40));

  if (v10)
  {
    int v13 = WORD2(v37) & 0xF000;
    if (v13 != 0x4000)
    {
      if (v13 == 40960)
      {
        uint64_t v19 = v36;
        uint64_t v15 = [*(id *)(a1 + 32) linkTarget];
        uint64_t v18 = (uint64_t)objc_msgSend(v31, "executeWithError:sql:", a3, @"INSERT OR REPLACE INTO SymlinkTargets(inode, targetPath) VALUES (%llu, %@);",
                         v19,
                         v15);
LABEL_20:

        goto LABEL_21;
      }
      if (v13 != 0x8000) {
        __assert_rtn("-[MBFileListDB setFileMetadata:forPath:error:]_block_invoke", "MBFileListDB.m", 603, "0");
      }
      id v14 = [*(id *)(a1 + 32) assetMetadata];
      if (!v14) {
        __assert_rtn("-[MBFileListDB setFileMetadata:forPath:error:]_block_invoke", "MBFileListDB.m", 572, "assetMetadata");
      }
      uint64_t v15 = v14;
      if (!*((void *)&v35 + 1))
      {
        if ([v14 assetType] != (id)4) {
          __assert_rtn("-[MBFileListDB setFileMetadata:forPath:error:]_block_invoke", "MBFileListDB.m", 574, "assetMetadata.assetType == MBAssetTypeEmptyRegularFile");
        }
        goto LABEL_19;
      }
      uint64_t v16 = [v14 assetSignature];
      if (!v16 || ([v15 recordIDSuffix], (__int16 v17 = objc_claimAutoreleasedReturnValue()) == 0))
      {
        [v15 assetSignature];
        if (objc_claimAutoreleasedReturnValue()
          || ([v15 recordIDSuffix], objc_claimAutoreleasedReturnValue()))
        {
          __assert_rtn("-[MBFileListDB setFileMetadata:forPath:error:]_block_invoke", "MBFileListDB.m", 576, "(assetMetadata.assetSignature != nil && assetMetadata.recordIDSuffix != nil) || (assetMetadata.assetSignature == nil && assetMetadata.recordIDSuffix == nil)");
        }
        if (!v16) {
          goto LABEL_14;
        }
        __int16 v17 = 0;
      }

LABEL_14:
LABEL_19:
      uint64_t v20 = v36;
      uint64_t v21 = DWORD2(v36);
      id v22 = [v15 recordIDSuffix];
      signed int v23 = [v15 compressionMethod];
      id v24 = [v15 assetType];
      id v25 = [v15 assetSize];
      id v26 = [v15 assetSignature];
      __int16 v27 = [v15 encryptionKey];
      uint64_t v18 = (uint64_t)objc_msgSend(v31, "executeWithError:sql:", a3, @"INSERT OR REPLACE INTO Assets(inode, genCount, recordIDSuffix, compressionMethod, assetType, assetSize, assetSignature, encryptionKey) VALUES (%llu, %u, %@, %u, %llu, %llu, %@, %@);",
                       v20,
                       v21,
                       v22,
                       v23,
                       v24,
                       v25,
                       v26,
                       v27);

      goto LABEL_20;
    }
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v18 = 0;
  }
LABEL_21:

  return v18;
}

uint64_t sub_100245598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (objc_msgSend(*(id *)(a1 + 32), "_truncateDeletedFiles:"))
  {
    uint64_t v5 = [*(id *)(a1 + 32) volumeUUIDToUpdateAfterTranscription];
    if (v5)
    {
      if (![*(id *)(a1 + 32) _setVolumeUUID:v5 error:a3])
      {
        uint64_t v6 = 0;
        goto LABEL_8;
      }
      [*(id *)(a1 + 32) setVolumeUUIDToUpdateAfterTranscription:0];
    }
    uint64_t v6 = 1;
LABEL_8:

    return v6;
  }
  return 0;
}

uint64_t sub_1002456E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 unsignedLongLongAtIndex:0];
  uint64_t v4 = [v3 stringAtIndex:1];

  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  return v5;
}

uint64_t sub_100245850(uint64_t a1, void *a2)
{
  int v6 = 0;
  id v3 = [a2 fileWithDomain:*(void *)(a1 + 32) fromIndex:&v6];
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();

  return v4;
}

uint64_t sub_1002459B4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = [a2 stringAtIndex:0];
  int v6 = [(id)objc_opt_class() _fileMetadataForPath:v5 fetchXattrs:1 db:*(void *)(a1 + 40) error:a3];
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();

  return v7;
}

uint64_t sub_100245B20(uint64_t a1, void *a2)
{
  id v3 = [a2 stringAtIndex:0];
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v4;
}

void sub_100245C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100245CB8(uint64_t a1, void *a2)
{
  id v3 = [a2 stringAtIndex:0];
  uint64_t v4 = +[NSString stringWithFormat:@"%@:%@", *(void *)(a1 + 32), v3];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) ^= MBSimpleChecksumForString();

  return 1;
}

id sub_100245DD0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [v5 fetch:@"SELECT (mode & %d), COUNT(*) FROM FileMetadata GROUP BY (mode & %d)", 61440, 61440];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100245F10;
  v11[3] = &unk_100417048;
  v11[4] = *(void *)(a1 + 32);
  if ([v6 enumerateWithError:a3 block:v11])
  {
    id v7 = [v5 fetch:@"SELECT assetType, COUNT(*) FROM Assets GROUP BY assetType"];

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10024603C;
    v10[3] = &unk_100417048;
    void v10[4] = *(void *)(a1 + 32);
    id v8 = [v7 enumerateWithError:a3 block:v10];
    id v6 = v7;
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

uint64_t sub_100245F10(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 unsignedShortAtIndex:0];
  id v5 = [v3 unsignedLongLongAtIndex:1];

  switch(v4)
  {
    case 0x4000u:
      *(void *)(*(void *)(a1 + 32) + 24) = v5;
      break;
    case 0xA000u:
      *(void *)(*(void *)(a1 + 32) + 32) = v5;
      break;
    case 0x8000u:
      *(void *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x2D0], 8) = v5;
      break;
    default:
      id v6 = MBGetDefaultLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)statfs buf = 67109120;
        unsigned int v9 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Unexpected mode fmt 0%o", buf, 8u);
        _MBLog();
      }

      break;
  }
  return 1;
}

uint64_t sub_10024603C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 unsignedLongLongAtIndex:0];
  id v5 = [v3 unsignedLongLongAtIndex:1];

  id v6 = *(void **)(a1 + 32);
  if (v4 == (id)4) {
    void v6[2] = v5;
  }
  else {
    *v6 += v5;
  }
  return 1;
}

void sub_100246360(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

id sub_1002465C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (![v5 executeWithError:a3 sql:@"CREATE TEMPORARY TABLE TempDomainHMACList (domainHMAC PRIMARY KEY)"])goto LABEL_44; {
  long long v67 = 0u;
  }
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  id v6 = *(id *)(a1 + 32);
  id v7 = [v6 countByEnumeratingWithState:&v65 objects:v72 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v66;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v66 != v9) {
          objc_enumerationMutation(v6);
        }
        if (![v5 executeWithError:a3, @"INSERT OR REPLACE INTO TempDomainHMACList (domainHMAC) VALUES (%@)", *(void *)(*((void *)&v65 + 1) + 8 * i) sql])
        {
LABEL_47:
          id v36 = 0;
          goto LABEL_48;
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v65 objects:v72 count:16];
    }
    while (v8);
  }

  if (![v5 executeWithError:a3 sql:@"DELETE FROM CumulativeDomainList WHERE domainHMAC NOT IN(SELECT domainHMAC FROM TempDomainHMACList)"]|| !objc_msgSend(v5, "executeWithError:sql:", a3, @"DROP TABLE IF EXISTS TempDomainHMACList")|| !objc_msgSend(v5, "executeWithError:sql:", a3, @"DELETE FROM DomainDependencies WHERE parentDomainID NOT IN( SELECT domainID FROM CumulativeDomainList) OR childDomainID NOT IN( SELECT domainID FROM CumulativeDomainList)"))
  {
LABEL_44:
    id v36 = 0;
    goto LABEL_49;
  }
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id v6 = *(id *)(a1 + 40);
  id v11 = [v6 countByEnumeratingWithState:&v61 objects:v71 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v62;
    do
    {
      for (j = 0; j != v12; j = (char *)j + 1)
      {
        if (*(void *)v62 != v13) {
          objc_enumerationMutation(v6);
        }
        uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (void)j);
        uint64_t v16 = MBDomainHMACForDomainName(v15, *(void *)(a1 + 48));
        LODWORD(v15) = [v5 executeWithError:a3, @"INSERT OR IGNORE INTO CumulativeDomainList (domain, domainHMAC, isSystemApp) VALUES (%@, %@, %d)", v15, v16, objc_msgSend(*(id *)(a1 + 56), "containsObject:", v15) sql];

        if (!v15) {
          goto LABEL_47;
        }
      }
      id v12 = [v6 countByEnumeratingWithState:&v61 objects:v71 count:16];
    }
    while (v12);
  }

  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  id v17 = *(id *)(a1 + 64);
  id v18 = [v17 countByEnumeratingWithState:&v57 objects:v70 count:16];
  if (!v18)
  {
    id v20 = 0;
    goto LABEL_51;
  }
  id v19 = v18;
  id v20 = 0;
  uint64_t v21 = *(void *)v58;
  while (2)
  {
    uint64_t v22 = 0;
    do
    {
      if (*(void *)v58 != v21) {
        objc_enumerationMutation(v17);
      }
      uint64_t v44 = v22;
      uint64_t v23 = *(void *)(*((void *)&v57 + 1) + 8 * v22);
      uint64_t v24 = objc_opt_class();
      id v55 = v20;
      id v56 = 0;
      unsigned int v25 = [v5 fetchObjectOfClass:v24, &v56, &v55, @"SELECT domainID FROM CumulativeDomainList WHERE domain= %@", v23 outObject error sql];
      id v47 = v56;
      id v6 = v55;

      if (!v25)
      {
LABEL_52:

LABEL_46:
        goto LABEL_47;
      }
      if (!v47)
      {
        if (a3)
        {
          *a3 = +[MBError errorWithCode:4, @"domainID not found for %@", v23 format];
        }
        goto LABEL_46;
      }
      if (![v5 executeWithError:a3, @"DELETE FROM DomainDependencies WHERE parentDomainID = %@", v23 sql])goto LABEL_52; {
      id v26 = [*(id *)(a1 + 64) objectForKeyedSubscript:v23];
      }
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      id obj = v26;
      id v27 = [obj countByEnumeratingWithState:&v51 objects:v69 count:16];
      if (v27)
      {
        id v28 = v27;
        uint64_t v29 = *(void *)v52;
        id v20 = v6;
        id v45 = v17;
        id v42 = v19;
        uint64_t v43 = v21;
        while (2)
        {
          uint64_t v30 = 0;
          id v31 = v20;
          do
          {
            if (*(void *)v52 != v29) {
              objc_enumerationMutation(obj);
            }
            uint64_t v32 = *(void *)(*((void *)&v51 + 1) + 8 * (void)v30);
            uint64_t v33 = objc_opt_class();
            id v49 = v31;
            id v50 = 0;
            unsigned int v34 = [v5 fetchObjectOfClass:v33, &v50, &v49, @"SELECT domainID FROM CumulativeDomainList WHERE domain= %@", v32 outObject error sql];
            id v35 = v50;
            id v20 = v49;

            if (!v34
              || v35
              && ![v5 executeWithError:a3, @"INSERT OR IGNORE INTO DomainDependencies (parentDomainID, childDomainID) VALUES (%llu, %llu)", objc_msgSend(v47, "unsignedLongLongValue"), objc_msgSend(v35, "unsignedLongLongValue") sql])
            {

              id v6 = v20;
              id v17 = v45;
              goto LABEL_46;
            }

            uint64_t v30 = (char *)v30 + 1;
            id v31 = v20;
          }
          while (v28 != v30);
          id v28 = [obj countByEnumeratingWithState:&v51 objects:v69 count:16];
          id v17 = v45;
          id v19 = v42;
          uint64_t v21 = v43;
          if (v28) {
            continue;
          }
          break;
        }
      }
      else
      {
        id v20 = v6;
      }

      uint64_t v22 = v44 + 1;
    }
    while ((id)(v44 + 1) != v19);
    id v19 = [v17 countByEnumeratingWithState:&v57 objects:v70 count:16];
    if (v19) {
      continue;
    }
    break;
  }
LABEL_51:

  long long v38 = +[NSDate now];
  [v38 timeIntervalSince1970];
  uint64_t v40 = v39;

  uint64_t v48 = v40;
  long long v41 = +[NSData dataWithBytes:&v48 length:8];
  id v36 = [*(id *)(a1 + 72) _setPropertyValue:v41 forKey:@"domainListUpdateDate" error:a3];

  id v6 = v20;
LABEL_48:

LABEL_49:
  return v36;
}

uint64_t sub_100246C44(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 stringAtIndex:0];
  id v5 = [v3 stringAtIndex:1];
  [v3 BOOLAtIndex:2];

  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  return v6;
}

uint64_t sub_100246DC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 stringAtIndex:0];
  id v5 = [v3 stringAtIndex:1];

  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  return v6;
}

uint64_t sub_100246EFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 lastPathComponent];
  id v7 = [v6 pathExtension];
  unsigned int v8 = [v7 isEqualToString:@"ipa"];

  if (v8)
  {
    uint64_t v9 = [v6 stringByDeletingPathExtension];
    uint64_t v10 = +[MBDomain nameWithAppID:v9];
    [v5 size];
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_100247328(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100247B68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100247C10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002481E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,id location)
{
  objc_destroyWeak(v40);
  _Block_object_dispose(&a36, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10024823C(uint64_t a1, void *a2)
{
  id v3 = a2;
  ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  id v4 = [v3 recordID];
  id v5 = [v4 recordName];
  uint64_t v6 = +[MBCKFile fileIDFromRecordName:v5];

  id v7 = *(void **)(a1 + 32);
  id v55 = 0;
  unsigned int v8 = [v7 fetchFileFromFileID:v6 error:&v55];
  uint64_t v9 = v55;
  uint64_t v10 = v9;
  if (v8)
  {
    long long v52 = v9;
    uint64_t v11 = [*(id *)(a1 + 40) domainManager];
    id v12 = [v8 domainName];
    uint64_t v13 = [v11 domainForName:v12];

    [v8 setupWithDomain:v13];
    [v8 refreshWithRecord:v3];
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = [*(id *)(a1 + 40) ckOperationTracker];
    uint64_t v16 = *(void *)(a1 + 32);
    id v17 = [*(id *)(a1 + 40) device];
    id v54 = 0;
    LOBYTE(v14) = [v8 stashAssetsToTemporaryDirectoryWithAccount:v14 operationTracker:v15 cache:v16 device:v17 error:&v54];
    id v18 = v54;

    if ((v14 & 1) == 0)
    {
      uint64_t v21 = MBGetDefaultLog();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)statfs buf = 138412546;
        long long v57 = v8;
        __int16 v58 = 2112;
        long long v59 = v18;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Prefetch: Failed to stash downloaded asset for %@: %@", buf, 0x16u);
        _MBLog();
      }
      goto LABEL_34;
    }
    id v19 = (char *)[v8 size];
    id v20 = [v8 resourcesSize];
    uint64_t v21 = [v8 stashedAssetPath];
    if (!v21)
    {
      id v28 = [v8 stashedResourcePath];

      if (!v28) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    if (![v8 stashedAssetIsDecrypted]
      || ![v8 hasContentEncodingMethod])
    {
LABEL_32:
      id v42 = objc_msgSend(*(id *)(a1 + 32), "updateFile:", v8, v44, v45, v46);
LABEL_33:
      uint64_t v43 = [*(id *)(a1 + 56) progressModel];
      [v43 finishedTransferringItem:v8 size:&v19[(void)v20]];

LABEL_34:
      uint64_t v10 = v52;
      goto LABEL_35;
    }
    id v51 = v20;
    uint64_t v22 = [v8 decodedAssetPath];
    id v50 = v19;
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = +[NSFileManager defaultManager];
      unsigned __int8 v25 = [v24 fileExistsAtPath:v23];

      if (v25)
      {
        id v19 = v50;
LABEL_31:

        id v20 = v51;
        goto LABEL_32;
      }
      uint64_t v29 = MBGetDefaultLog();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)statfs buf = 138412546;
        long long v57 = v23;
        __int16 v58 = 2112;
        long long v59 = v8;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Prefetch: Missing decoded asset at %@ for %@", buf, 0x16u);
        uint64_t v44 = v23;
        id v45 = v8;
        _MBLog();
      }

      id v19 = v50;
    }
    uint64_t v48 = objc_msgSend(*(id *)(a1 + 48), "persona", v44, v45);
    uint64_t v30 = [v8 domain];
    uint64_t v31 = [v48 restorePrefetchDirectoryForDomain:v30];

    long long v53 = v18;
    id v47 = (void *)v31;
    LOBYTE(v31) = [v8 decodeWithFileAtPath:v21 destinationDirectory:v31 error:&v53];
    uint64_t v32 = v53;

    uint64_t v33 = [v8 decodedAssetPath];
    id v49 = v32;
    if (v31)
    {
      if (!v33) {
        __assert_rtn("-[MBCKRestoreFilePrefetchEngine _prefetchBatch]_block_invoke", "MBCKRestoreFilePrefetchEngine.m", 202, "restorable.decodedAssetPath");
      }

      unsigned int v34 = MBGetDefaultLog();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        id v35 = [v8 decodedAssetPath];
        *(_DWORD *)statfs buf = 138412802;
        long long v57 = v21;
        __int16 v58 = 2112;
        long long v59 = v35;
        __int16 v60 = 2112;
        long long v61 = v8;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Prefetch: Decoded asset from %@ to %@ for %@", buf, 0x20u);

        id v45 = [v8 decodedAssetPath];
        int v46 = v8;
        uint64_t v44 = v21;
        _MBLog();
      }
      [v8 setStashedAssetPath:0];
      [v8 setStashedAssetIsDecrypted:0];
      id v36 = *(void **)(a1 + 32);
      uint64_t v37 = [v8 decodedAssetPath];
      long long v38 = [v8 signature];
      uint64_t v39 = objc_msgSend(v36, "updateDecodedAssetPath:forSignature:volumeType:", v37, v38, -[NSObject volumeType](v8, "volumeType"));

      if (v39)
      {
        uint64_t v40 = MBGetDefaultLog();
        id v19 = v50;
        long long v41 = v47;
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)statfs buf = 138412290;
          long long v57 = v39;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Prefetch: Failed to update decoded asset path: %@", buf, 0xCu);
          uint64_t v44 = v39;
          _MBLog();
        }
      }
      else
      {
        id v19 = v50;
        long long v41 = v47;
      }
    }
    else
    {
      if (v33) {
        __assert_rtn("-[MBCKRestoreFilePrefetchEngine _prefetchBatch]_block_invoke", "MBCKRestoreFilePrefetchEngine.m", 199, "!restorable.decodedAssetPath");
      }
      uint64_t v39 = MBGetDefaultLog();
      long long v41 = v47;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)statfs buf = 138412802;
        long long v57 = v21;
        __int16 v58 = 2112;
        long long v59 = v8;
        __int16 v60 = 2112;
        long long v61 = v32;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Prefetch: Failed to decode the asset at %@ for %@: %@", buf, 0x20u);
        id v45 = v8;
        int v46 = v32;
        uint64_t v44 = v21;
        _MBLog();
      }
    }

    uint64_t v23 = 0;
    id v18 = v49;
    goto LABEL_31;
  }
  uint64_t v13 = MBGetDefaultLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    id v26 = [v3 recordID];
    id v27 = [v26 recordName];
    *(_DWORD *)statfs buf = 138412546;
    long long v57 = v27;
    __int16 v58 = 2112;
    long long v59 = v10;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Prefetch: Failed to find a file to restore for record %@: %@", buf, 0x16u);

    id v18 = [v3 recordID];
    uint64_t v21 = [v18 recordName];
    _MBLog();
LABEL_35:
  }
}

void sub_100248990(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v6 = [WeakRetained operationID];

  if (v4) {
    goto LABEL_2;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == v8)
  {
    id v4 = 0;
    goto LABEL_14;
  }
  id v4 = +[MBError errorWithCode:1, @"Batch file operation:%@ fetched incorrect number of file records (%lu of %lu)", v6, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), v8 format];
  if (MBIsInternalInstall()
    && !dword_100482770
    && !atomic_fetch_add_explicit(&dword_100482770, 1u, memory_order_relaxed))
  {
    uint64_t v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      uint64_t v11 = *(void **)(a1 + 56);
      *(_DWORD *)statfs buf = 138412802;
      uint64_t v16 = v6;
      __int16 v17 = 2048;
      uint64_t v18 = v10;
      __int16 v19 = 2048;
      id v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Operation %@ fetched an incorrect number of file records (%lu of %lu)", buf, 0x20u);
      _MBLog();
    }
  }
  if (v4)
  {
LABEL_2:
    id v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)statfs buf = 138543874;
      uint64_t v16 = v6;
      __int16 v17 = 2112;
      uint64_t v18 = 0;
      __int16 v19 = 2112;
      id v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Prefetch: Batch file operation %{public}@ for domain %@ failed with error: %@", buf, 0x20u);
      _MBLog();
    }
  }
LABEL_14:
  id v12 = MBGetDefaultLog();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    uint64_t v14 = *(void **)(a1 + 56);
    *(_DWORD *)statfs buf = 138543874;
    uint64_t v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v13;
    __int16 v19 = 2048;
    id v20 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Prefetch: Completed operation:%{public}@, records:%lu/%lu", buf, 0x20u);
    _MBLog();
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 56));
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48));
}

void sub_100249780(id a1)
{
  qword_100482778 = [[MBCKCodeLongLivedOperator alloc] initWithService:@"BackupStatusService" function:@"sendStatus" responseType:objc_opt_class() callback:&stru_100417168];
  _objc_release_x1();
}

void sub_1002497F8(id a1, BackupStatusResponse *a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    id v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)statfs buf = 138412290;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to report status: %@", buf, 0xCu);
      _MBLog();
    }
  }
}

void sub_1002498C0(uint64_t a1)
{
  id v2 = +[MBDaemon sharedDaemon];
  [v2 releaseWorkAssertion:*(void *)(a1 + 32)];
}

void sub_10024B2CC(uint64_t a1, uint64_t a2)
{
  **(unsigned char **)(a1 + 8_Block_object_dispose(&STACK[0x2D0], 8) = a2;
  v24[0] = @"AccountType";
  unint64_t v4 = *(void *)(a1 + 96) - 1;
  if (v4 > 2) {
    CFStringRef v5 = @"Unspecified";
  }
  else {
    CFStringRef v5 = *(&off_1004171B0 + v4);
  }
  v25[0] = v5;
  v24[1] = @"SnapshotAccountType";
  unint64_t v6 = *(void *)(a1 + 104) - 1;
  if (v6 > 2) {
    CFStringRef v7 = @"Unspecified";
  }
  else {
    CFStringRef v7 = *(&off_1004171B0 + v6);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  v25[1] = v7;
  v25[2] = v8;
  v24[2] = @"SnapshotFormat";
  v24[3] = @"SnapshotFormatEnum";
  uint64_t v9 = +[NSNumber numberWithLongLong:*(void *)(a1 + 112)];
  v25[3] = v9;
  void v24[4] = @"SnapshotID";
  uint64_t v10 = [*(id *)(a1 + 40) snapshotID];
  uint64_t v11 = (void *)v10;
  CFStringRef v12 = *(const __CFString **)(a1 + 48);
  CFStringRef v13 = *(const __CFString **)(a1 + 56);
  if (!v12) {
    CFStringRef v12 = @"nil";
  }
  void v25[4] = v10;
  v25[5] = v12;
  v24[5] = @"LocalLegacyPreference";
  v24[6] = @"RemoteFileListPreference";
  if (v13) {
    CFStringRef v14 = v13;
  }
  else {
    CFStringRef v14 = @"nil";
  }
  v25[6] = v14;
  v24[7] = @"RestoredFromFileList";
  uint64_t v15 = +[NSNumber numberWithBool:a2];
  uint64_t v16 = (void *)v15;
  CFStringRef v17 = *(const __CFString **)(a1 + 64);
  CFStringRef v18 = *(const __CFString **)(a1 + 72);
  if (!v17) {
    CFStringRef v17 = @"nil";
  }
  v25[7] = v15;
  v25[8] = v17;
  v24[8] = @"RequiredRestoreSnapshotFormat";
  v24[9] = @"LastFailedLightrailRestoreAttemptDate";
  if (v18) {
    CFStringRef v19 = v18;
  }
  else {
    CFStringRef v19 = @"nil";
  }
  v25[9] = v19;
  id v20 = +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:10];

  [*(id *)(a1 + 80) setPreferencesValue:v20 forKey:@"RestoreCloudFormatInfo"];
  uint64_t v21 = MBGetDefaultLog();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)statfs buf = 138412290;
    uint64_t v23 = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "=snapshot-policy= Cloud restore format info: %@", buf, 0xCu);
    _MBLog();
  }
}

void sub_10024B6A0(id a1)
{
  qword_100482790 = (uint64_t)dispatch_queue_create("MBLockdown", 0);
}

uint64_t sub_10024B7C8(uint64_t a1)
{
  uint64_t result = lockdown_connect();
  *(void *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x2D0], 8) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 8) != 0;
  return result;
}

uint64_t sub_10024B884(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = *(void *)(v2 + 8);
  if (result)
  {
    uint64_t result = lockdown_disconnect();
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(void *)(v2 + _Block_object_dispose(&STACK[0x2D0], 8) = 0;
  return result;
}

void sub_10024B994(uint64_t a1, uint64_t a2)
{
}

void sub_10024B9A4(uint64_t a1)
{
}

uint64_t sub_10024B9B0(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 8);
  if (result)
  {
    uint64_t result = lockdown_copy_value();
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = result;
  }
  return result;
}

uint64_t sub_10024BAAC(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 8);
  if (result)
  {
    uint64_t result = lockdown_save_value();
    if (result)
    {
      int v3 = result;
      unint64_t v4 = MBGetDefaultLog();
      uint64_t result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if (result)
      {
        uint64_t v5 = *(void *)(a1 + 40);
        uint64_t v6 = *(void *)(a1 + 48);
        *(_DWORD *)statfs buf = 138412802;
        uint64_t v8 = v5;
        __int16 v9 = 2112;
        uint64_t v10 = v6;
        __int16 v11 = 1024;
        int v12 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to save object to lockdown with domain '%@', key '%@': %d", buf, 0x1Cu);
        uint64_t result = _MBLog();
      }
      if (*(void *)(a1 + 72))
      {
        uint64_t result = +[MBError errorWithCode:1 format:@"Failed to save object to lockdown"];
        **(void **)(a1 + 72) = result;
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    }
  }
  return result;
}

uint64_t sub_10024BC9C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isEqualToString:@"com.apple.mobile.backup"] & 1) != 0
    || ([*(id *)(a1 + 32) isEqualToString:@"com.apple.mobile.ldbackup"] & 1) != 0
    || [*(id *)(a1 + 32) isEqualToString:@"com.apple.purplebuddy"])
  {
    uint64_t v2 = *(__CFString **)(a1 + 32);
    if ([(__CFString *)v2 isEqualToString:@"com.apple.mobile.backup"]) {
      uint64_t v2 = @"com.apple.mobile.ldbackup";
    }
    CFStringRef v3 = (const __CFString *)kMBMobileUserName;
    CFPreferencesSetValue(*(CFStringRef *)(a1 + 40), 0, v2, kMBMobileUserName, kCFPreferencesAnyHost);
    uint64_t result = CFPreferencesSynchronize(v2, v3, kCFPreferencesAnyHost);
    if (!result)
    {
      uint64_t v5 = MBGetDefaultLog();
      uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if (result)
      {
        uint64_t v6 = *(void *)(a1 + 40);
        *(_DWORD *)statfs buf = 138412546;
        int v12 = v2;
        __int16 v13 = 2112;
        uint64_t v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to sync preferences for %@ domain (%@)", buf, 0x16u);
        return _MBLog();
      }
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 8);
    if (result)
    {
      uint64_t result = lockdown_remove_value();
      if (result)
      {
        int v7 = result;
        uint64_t v8 = MBGetDefaultLog();
        uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
        if (result)
        {
          __int16 v9 = *(__CFString **)(a1 + 32);
          uint64_t v10 = *(void *)(a1 + 40);
          *(_DWORD *)statfs buf = 138412802;
          int v12 = v9;
          __int16 v13 = 2112;
          uint64_t v14 = v10;
          __int16 v15 = 1024;
          int v16 = v7;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to remove object from lockdown with domain '%@', key '%@': %d", buf, 0x1Cu);
          uint64_t result = _MBLog();
        }
        if (*(void *)(a1 + 64))
        {
          uint64_t result = +[MBError errorWithCode:1 format:@"Failed to remove object from lockdown"];
          **(void **)(a1 + 64) = result;
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
      }
    }
  }
  return result;
}

char *MBBackupXPCActivityNameWithType(int a1)
{
  if ((a1 - 1) >= 3) {
    __assert_rtn("MBBackupXPCActivityNameWithType", "MBXPCActivityCoordinator.m", 48, "0 && \"Unexpected\"");
  }
  return off_100417328[a1 - 1];
}

void sub_10024C6A8(uint64_t a1)
{
  uint64_t v2 = MBBackupXPCActivityNameWithType(*(_DWORD *)(a1 + 48));
  CFStringRef v3 = [*(id *)(a1 + 32) _activityForActivityType:*(unsigned int *)(a1 + 48)];
  unint64_t v4 = [v3 runnableXPCActivity];

  if (v4)
  {
    unint64_t state = xpc_activity_get_state(v4);
    uint64_t v6 = MBGetDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (state > 5) {
        int v7 = "???";
      }
      else {
        int v7 = off_100417340[state];
      }
      *(_DWORD *)statfs buf = 136446722;
      uint64_t v14 = v2;
      __int16 v15 = 2080;
      int v16 = v7;
      __int16 v17 = 2048;
      unint64_t v18 = state;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "=XPCActivity= Not re-registering XPC activity \"%{public}s\", current state:%s(%ld)", buf, 0x20u);
      _MBLog();
    }
  }
  else
  {
    uint64_t v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)statfs buf = 136446210;
      uint64_t v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "=XPCActivity= Registering XPC activity \"%{public}s\"", buf, 0xCu);
      _MBLog();
    }

    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    __int16 v9 = *(void **)(a1 + 40);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10024C928;
    handler[3] = &unk_100417268;
    objc_copyWeak(&v11, (id *)buf);
    int v12 = *(_DWORD *)(a1 + 48);
    xpc_activity_register(v2, v9, handler);
    objc_destroyWeak(&v11);
    objc_destroyWeak((id *)buf);
  }
}

void sub_10024C904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10024C928(uint64_t a1, void *a2)
{
  activity = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _handleXPCActivity:activity type:*(unsigned int *)(a1 + 40)];
  }
  else {
    xpc_activity_set_state(activity, 5);
  }
}

id sub_10024CA30(uint64_t a1)
{
  [*(id *)(a1 + 32) _finishXPCActivityForBackupActivity:*(unsigned int *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  return [v2 _cancelDeferralTimerForActivity:v3];
}

void sub_10024CC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10024CCB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10024CCC8(uint64_t a1)
{
}

void sub_10024CCD0(uint64_t a1, void *a2)
{
  activity = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    xpc_activity_set_state(activity, 5);
    goto LABEL_6;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  [WeakRetained _handleXPCActivity:activity type:*(unsigned int *)(a1 + 56)];
  dispatch_assert_queue_not_V2(*((dispatch_queue_t *)WeakRetained + 2));
  if (!xpc_activity_get_state(activity)
    && ([*((id *)WeakRetained + 4) containsIndex:*(int *)(a1 + 56)] & 1) == 0)
  {
    [*((id *)WeakRetained + 4) addIndex:*(int *)(a1 + 56)];
LABEL_6:
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }
}

void sub_10024CF74(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _activityForActivityType:*(unsigned int *)(a1 + 48)];
  uint64_t v2 = [v5 runnableXPCActivity];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10024D184(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10024D19C(uint64_t a1)
{
  ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v2 = [*(id *)(a1 + 32) _activityForActivityType:*(unsigned int *)(a1 + 64)];
  uint64_t v3 = [v2 runnableXPCActivity];

  if (v3)
  {
    if (xpc_activity_should_defer(v3))
    {
      unint64_t v4 = MBGetDefaultLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 56);
        *(_DWORD *)statfs buf = 136446466;
        uint64_t v8 = v5;
        __int16 v9 = 2114;
        uint64_t v10 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "=XPCActivity= The XPC activity \"%{public}s\" needs to be deferred: %{public}@", buf, 0x16u);
        _MBLog();
      }

      [*(id *)(a1 + 32) _cancelDeferralTimerForActivity:*(unsigned int *)(a1 + 64)];
      (*(void (**)(void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v6);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _cancelDeferralTimerForActivity:*(unsigned int *)(a1 + 64)];
  }
}

void sub_10024D2EC(uint64_t a1)
{
  uint64_t v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    *(_DWORD *)statfs buf = 136446466;
    uint64_t v7 = v3;
    __int16 v8 = 2048;
    uint64_t v9 = 2;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "=XPCActivity= Starting the XPC activity timer for \"%{public}s\", interval:%lld", buf, 0x16u);
    _MBLog();
  }

  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = [*(id *)(a1 + 32) _activityForActivityType:*(unsigned int *)(a1 + 56)];
  [v5 setDeferralTimer:v4];

  dispatch_resume(*(dispatch_object_t *)(a1 + 40));
}

void sub_10024D5F4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _activityForActivityType:*(unsigned int *)(a1 + 56)];
  uint64_t v3 = [v2 runnableXPCActivity];

  if (v3)
  {
    uint64_t v4 = MBBackupXPCActivityNameWithType(*(_DWORD *)(a1 + 56));
    uint64_t v5 = MBGetDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      unint64_t v6 = *(void *)(a1 + 48);
      if (v6 > 5) {
        uint64_t v7 = "???";
      }
      else {
        uint64_t v7 = off_100417340[v6];
      }
      *(_DWORD *)statfs buf = 136446722;
      id v11 = v4;
      __int16 v12 = 2080;
      __int16 v13 = v7;
      __int16 v14 = 2048;
      unint64_t v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "=XPCActivity= Delegate already notified for \"%{public}s\", current state:%s(%ld)", buf, 0x20u);
      _MBLog();
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = [*(id *)(a1 + 32) _activityForActivityType:*(unsigned int *)(a1 + 56)];
    [v9 setRunnableXPCActivity:v8];

    uint64_t v5 = [*(id *)(a1 + 32) delegate];
    [v5 backupActivityIsRunnable:*(unsigned int *)(a1 + 56)];
  }
}

void sub_10024E98C(_Unwind_Exception *a1)
{
}

void sub_10024E9D4(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x10024E934);
  }
  JUMPOUT(0x10024E9C0);
}

id sub_10024EC74(void *a1, uint64_t a2)
{
  uint64_t v2 = [a1 stringByAppendingPathComponent:a2];
  uint64_t v3 = [v2 stringByAppendingPathComponent:@"missed_encryption_keys.db"];

  return v3;
}

uint64_t sub_10024F198(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 stringAtIndex:0];
  [v3 unsignedLongLongAtIndex:1];

  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  return v5;
}

uint64_t MBStashMissedEncryptionKeysDB(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = sub_10024EC74(v5, (uint64_t)v6);
  uint64_t v8 = +[NSFileManager defaultManager];
  if ([v8 fileExistsAtPath:v7])
  {
    uint64_t v9 = sub_10024F530(v5);
    uint64_t v10 = +[MBTemporaryDirectory temporaryDirectoryOnSameVolumeAsPath:v7 identifiedBy:@"stashed-encryption-keys" error:a3];
    id v11 = v10;
    if (!v10) {
      goto LABEL_12;
    }
    __int16 v12 = [v10 makeTemporaryFilePath];
    if (+[MBSQLiteFileHandle copySQLiteFileAtPath:v7 toPath:v12 error:a3])
    {
      __int16 v13 = [v9 stringByDeletingLastPathComponent];
      unsigned int v14 = !+[MBFileOperation createDirectories:destinationBasePath:destinationRpath:permissions:error:](MBFileOperation, "createDirectories:destinationBasePath:destinationRpath:permissions:error:", 4294967294, @"/", v13, 493, a3)|| !+[MBFileOperation rename:4294967294 sourceRpath:v12 destinationBasePath:@"/" destinationBaseFD:4294967294 destinationRpath:v9 flags:0 error:a3];
    }
    else
    {
      unsigned int v14 = 1;
    }

    [v11 dispose];
    if (!v14)
    {
      int v16 = MBGetDefaultLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)statfs buf = 138412546;
        CFStringRef v19 = v7;
        __int16 v20 = 2112;
        uint64_t v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "=stashed-keys= Stashed db from %@ -> %@", buf, 0x16u);
        _MBLog();
      }

      uint64_t v15 = 1;
    }
    else
    {
LABEL_12:
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v9 = MBGetDefaultLog();
    uint64_t v15 = 1;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)statfs buf = 138412290;
      CFStringRef v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "=stashed-keys= No db found at %@", buf, 0xCu);
      _MBLog();
    }
  }

  return v15;
}

void sub_10024F4E4(_Unwind_Exception *a1)
{
}

id sub_10024F530(void *a1)
{
  uint64_t v1 = [a1 stringByAppendingPathComponent:@"stashed_encryption_keys"];
  uint64_t v2 = [v1 stringByAppendingPathComponent:@"stashed_encryption_keys.db"];

  return v2;
}

BOOL MBMoveStashedEncryptionKeysDBIntoPendingSnapshot(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = +[NSFileManager defaultManager];
  uint64_t v8 = sub_10024F530(v5);
  if ([v7 fileExistsAtPath:v8])
  {
    uint64_t v9 = sub_10024EC74(v5, (uint64_t)v6);
    BOOL v10 = +[MBFileOperation rename:4294967294 sourceRpath:v8 destinationBasePath:@"/" destinationBaseFD:4294967294 destinationRpath:v9 flags:0 error:a3];
    if (v10)
    {
      id v11 = MBGetDefaultLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)statfs buf = 138412546;
        unsigned int v14 = v8;
        __int16 v15 = 2112;
        int v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "=stashed-keys= Moved db from %@ -> %@", buf, 0x16u);
        _MBLog();
      }
    }
  }
  else
  {
    BOOL v10 = 1;
  }

  return v10;
}

void sub_10024FAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10024FB24(uint64_t a1, uint64_t a2)
{
}

void sub_10024FB34(uint64_t a1)
{
}

intptr_t sub_10024FB40(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = a2;
  id v3 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v3);
}

void sub_10024FD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10024FD90(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10024FF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10024FF98(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100250148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10025016C(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

CFStringRef MBRestorableStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5) {
    return @"Unspecified";
  }
  else {
    return *(&off_1004173C0 + a1 - 1);
  }
}

CFStringRef MBRestoreAssetStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"Unspecified";
  }
  else {
    return *(&off_1004173F0 + a1 - 1);
  }
}

void sub_10025137C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _MBCreateDiagnosticReport(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (MBIsInternalInstall())
  {
    id v5 = +[MBBehaviorOptions sharedOptions];
    unsigned int v6 = [v5 useABC];

    if (v6)
    {
      if (!v3) {
        __assert_rtn("_MBCreateDiagnosticReport", "MBDiagnosticReporterSupport.m", 26, "description");
      }
      if (qword_1004827A0 != -1) {
        dispatch_once(&qword_1004827A0, &stru_100417410);
      }
      uint64_t v7 = +[NSProcessInfo processInfo];
      uint64_t v8 = [v7 processName];

      uint64_t v9 = [(id)qword_100482798 signatureWithDomain:@"MobileBackup" type:kSymptomDiagnosticTypeFunctional subType:@"AssertionFailed" detectedProcess:v8 triggerThresholdValues:0];
      [v9 setObject:v3 forKeyedSubscript:kSymptomDiagnosticSignatureSubTypeContext];
      BOOL v10 = MBGetDefaultLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = (objc_class *)objc_opt_class();
        *(_DWORD *)statfs buf = 136315650;
        Name = class_getName(v11);
        __int16 v19 = 2112;
        id v20 = v3;
        __int16 v21 = 2112;
        id v22 = v4;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Taking an %s snapshot, description:\"%@\", payload:%@", buf, 0x20u);
        __int16 v12 = (objc_class *)objc_opt_class();
        class_getName(v12);
        _MBLog();
      }

      if (([(id)qword_100482798 snapshotWithSignature:v9 duration:0 event:v4 payload:&stru_100417450 reply:5.0] & 1) == 0)
      {
        __int16 v13 = MBGetDefaultLog();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          unsigned int v14 = (objc_class *)objc_opt_class();
          __int16 v15 = class_getName(v14);
          *(_DWORD *)statfs buf = 136315394;
          Name = v15;
          __int16 v19 = 2112;
          id v20 = v3;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to send a %s snapshot,description:\"%@\"", buf, 0x16u);
          int v16 = (objc_class *)objc_opt_class();
          class_getName(v16);
          _MBLog();
        }
      }
    }
  }
}

void sub_100251AC8(id a1)
{
  qword_100482798 = objc_opt_new();
  _objc_release_x1();
}

void sub_100251B04(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = MBGetDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (objc_class *)objc_opt_class();
    *(_DWORD *)statfs buf = 136315394;
    Name = class_getName(v4);
    __int16 v8 = 2112;
    uint64_t v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received a response from %s: %@", buf, 0x16u);
    id v5 = (objc_class *)objc_opt_class();
    class_getName(v5);
    _MBLog();
  }
}

void sub_1002537FC(id a1)
{
  uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_USER_INITIATED, 0);

  dispatch_queue_t v2 = dispatch_queue_create("MBMegaBackupEligibilityManager queue", attr);
  id v3 = (void *)qword_1004827A8;
  qword_1004827A8 = (uint64_t)v2;
}

void sub_100253AD0(uint64_t a1)
{
  dispatch_queue_t v2 = (void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) _account];
  id v4 = *v2;
  if (v3)
  {
    if ([v4 _isCloudBackupRestricted])
    {
      id v5 = MBGetDefaultLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "checkMegaBackupEligibility: Cloud Backup is restricted.", (uint8_t *)&buf, 2u);
        _MBLog();
      }

      unsigned int v6 = *(NSObject **)(a1 + 40);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1002541BC;
      block[3] = &unk_100411B88;
      id v41 = *(id *)(a1 + 64);
      dispatch_async(v6, block);
    }
    else if (objc_msgSend(v3, "aa_isManagedAppleID"))
    {
      id v11 = MBGetDefaultLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "checkMegaBackupEligibility: Unsupported Managed Apple ID.", (uint8_t *)&buf, 2u);
        _MBLog();
      }

      __int16 v12 = *(NSObject **)(a1 + 40);
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_10025423C;
      v38[3] = &unk_100411B88;
      id v39 = *(id *)(a1 + 64);
      dispatch_async(v12, v38);
    }
    else if ([*(id *)(a1 + 32) _isHSA2AvailableForAuthenticationContext:v3])
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v46 = 0x2020000000;
      char v47 = 1;
      __int16 v13 = [*(id *)(a1 + 32) _usedCapacityForVolume:@"/private/var"];
      unsigned int v14 = [*(id *)(a1 + 32) _usedCapacityForVolume:@"/private/var/mobile"];
      __int16 v15 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (char *)[v13 unsignedLongLongValue] + (void)objc_msgSend(v14, "unsignedLongLongValue"));
      id v16 = objc_alloc_init((Class)_ICQMegaBackupManager);
      uint64_t v17 = *(void *)(a1 + 48);
      id v18 = [*(id *)(a1 + 32) _entryMethodForEntryPoint:*(void *)(a1 + 72)];
      uint64_t v19 = *(void *)(a1 + 40);
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_1002542DC;
      v32[3] = &unk_1004174C8;
      uint64_t v20 = *(void *)(a1 + 56);
      id v33 = *(id *)(a1 + 64);
      p_long long buf = &buf;
      [v16 requestMegaBackupForAccount:v3 deviceBackupUUID:v17 deviceTotalUsedSpaceInBytes:v15 entryMethod:v18 deepLinkURL:v20 queue:v19 completion:v32];

      _Block_object_dispose(&buf, 8);
    }
    else
    {
      __int16 v21 = MBGetDefaultLog();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = objc_msgSend(v3, "aa_altDSID");
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "checkMegaBackupEligibility: User needs HSA2 account: %@", (uint8_t *)&buf, 0xCu);

        uint64_t v31 = objc_msgSend(v3, "aa_altDSID");
        _MBLog();
      }
      CFStringRef v48 = @"MBMegaBackupEligibilityErrorUserInfoAltDSIDKey";
      uint64_t v23 = objc_msgSend(v3, "aa_altDSID");
      uint64_t v24 = (void *)v23;
      CFStringRef v25 = &stru_100418BA8;
      if (v23) {
        CFStringRef v25 = (const __CFString *)v23;
      }
      CFStringRef v49 = v25;
      id v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1, v31);

      id v27 = +[NSError errorWithDomain:@"MBMegaBackupEligibilityErrorDomain" code:5 userInfo:v26];
      id v28 = *(NSObject **)(a1 + 40);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_1002542BC;
      v35[3] = &unk_100413A50;
      id v29 = *(id *)(a1 + 64);
      id v36 = v27;
      id v37 = v29;
      id v30 = v27;
      dispatch_async(v28, v35);
    }
  }
  else
  {
    unsigned int v7 = [v4 _isAccountModificationDisabledByRestrictions];
    __int16 v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        uint64_t v9 = &__kCFBooleanTrue;
      }
      else {
        uint64_t v9 = &__kCFBooleanFalse;
      }
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "checkMegaBackupEligibility couldn't get primary Apple Account: %{public}@", (uint8_t *)&buf, 0xCu);
      _MBLog();
    }

    BOOL v10 = *(NSObject **)(a1 + 40);
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100254110;
    v42[3] = &unk_1004174A0;
    char v44 = v7;
    id v43 = *(id *)(a1 + 64);
    dispatch_async(v10, v42);
  }
}

void sub_1002540E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100254110(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = +[NSError errorWithDomain:@"MBMegaBackupEligibilityErrorDomain" code:3 userInfo:0];
    id v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(v1 + 16);
    uint64_t v4 = v1;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v2 = +[NSError errorWithDomain:@"MBMegaBackupEligibilityErrorDomain" code:1 userInfo:0];
    id v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(v1 + 16);
    uint64_t v4 = v1;
    uint64_t v5 = 1;
  }
  id v6 = (id)v2;
  v3(v4, v5, 0, 21);
}

void sub_1002541BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:@"MBMegaBackupEligibilityErrorDomain" code:4 userInfo:0];
  (*(void (**)(uint64_t, void, void, uint64_t, id))(v1 + 16))(v1, 0, 0, 21, v2);
}

void sub_10025423C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:@"MBMegaBackupEligibilityErrorDomain" code:2 userInfo:0];
  (*(void (**)(uint64_t, void, void, uint64_t, id))(v1 + 16))(v1, 0, 0, 21, v2);
}

uint64_t sub_1002542BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 1, 0, 21, *(void *)(a1 + 32));
}

void sub_1002542DC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = MBGetDefaultLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218242;
    uint64_t v13 = a2;
    __int16 v14 = 2112;
    id v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "checkMegaBackupEligibility: _ICQMegaBackupManager response: %ld, error: %@", buf, 0x16u);
    _MBLog();
  }

  if (v7) {
    [v7 integerValue];
  }
  char v10 = 0;
  switch(a2)
  {
    case 0:
      (*(void (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0);
      goto LABEL_11;
    case 1:
      id v11 = +[NSError errorWithDomain:@"MBMegaBackupEligibilityErrorDomain" code:6 userInfo:0];
      (*(void (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 1);

      goto LABEL_11;
    case 2:
      goto LABEL_9;
    case 3:
      char v10 = 1;
LABEL_9:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v10;
      goto LABEL_10;
    default:
LABEL_10:
      (*(void (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 2);
LABEL_11:

      return;
  }
}

void sub_100255894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002558AC(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("MBPrefetchPath", v3);
  id v2 = (void *)qword_1004827B8;
  qword_1004827B8 = (uint64_t)v1;
}

uint64_t sub_100255910(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100255920(uint64_t a1)
{
}

void sub_100255928(uint64_t a1)
{
  int v2 = mkpath_np(*(const char **)(a1 + 56), 0x1C0u);
  if (v2 == 17) {
    goto LABEL_9;
  }
  if (v2)
  {
    id v3 = MBGetDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = *__error();
      *(_DWORD *)long long buf = 138412546;
      uint64_t v11 = v5;
      __int16 v12 = 1024;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "mkdir failed at %@: %{errno}d", buf, 0x12u);
      __error();
      goto LABEL_7;
    }
  }
  else
  {
    id v3 = MBGetDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Created the directory at %@", buf, 0xCu);
LABEL_7:
      _MBLog();
    }
  }

LABEL_9:
  if (*(void *)(a1 + 40)) {
    objc_msgSend(*(id *)(a1 + 32), "stringByAppendingPathComponent:");
  }
  else {
  uint64_t v7 = MBCreateTemporaryFilePathIn();
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

uint64_t MBProtectionClassSupportedValue(uint64_t result, char a2, void *a3)
{
  BOOL v3 = (result - 1) < 4 || result == 7;
  if (!v3 && (result || (a2 & 1) != 0))
  {
    if (a3) {
      *a3 = +[MBError errorWithCode:241, @"unsupported protection class (%d)", result format];
    }
    LOBYTE(result) = -1;
  }
  return result;
}

void sub_100258698(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    int v6 = MBGetDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "-restoreUserURL failed: %@", buf, 0xCu);
      _MBLog();
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100258944(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v10 = a2;
    uint64_t v11 = MBGetLogDateFormatter();
    __int16 v12 = +[NSDate date];
    int v13 = [v11 stringFromDate:v12];

    id v14 = [objc_alloc((Class)NSString) initWithFormat:v10 arguments:&a9];
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    if (!*(void *)(a1 + 24))
    {
      id v15 = fopen((const char *)[*(id *)(a1 + 16) fileSystemRepresentation], "a");
      if (!v15)
      {
        id v16 = MBGetDefaultLog();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = [(id)a1 path];
          int v18 = *__error();
          *(_DWORD *)long long buf = 138412546;
          __int16 v21 = v17;
          __int16 v22 = 1024;
          int v23 = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "MBRestoreOperationLogger failed to open %@: %{errno}d", buf, 0x12u);

          uint64_t v19 = [(id)a1 path];
          __error();
          _MBLog();
        }
        goto LABEL_6;
      }
      *(void *)(a1 + 24) = v15;
    }
    fputs((const char *)[v13 UTF8String], *(FILE **)(a1 + 24));
    fputs(" ", *(FILE **)(a1 + 24));
    fputs((const char *)[v14 fileSystemRepresentation], *(FILE **)(a1 + 24));
    fputs("\n", *(FILE **)(a1 + 24));
LABEL_6:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
}

uint64_t MBSKeyReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        LODWORD(v6) = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    int v12 = (unsigned __int16)(v6 >> 3);
    if (v12 == 2)
    {
      Data = (void *)PBReaderReadData();

      *(void *)(a1 + _Block_object_dispose(&STACK[0x2D0], 8) = Data;
    }
    else if (v12 == 1)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          goto LABEL_30;
        }
        v13 += 7;
        BOOL v9 = v14++ >= 9;
        if (v9)
        {
          LODWORD(v15) = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v15) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v15;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10025CB58(id a1)
{
  qword_1004827E0 = MBLocalizedStringFromTable();
  _objc_release_x1();
}

void sub_10025CCC0(id a1)
{
  dispatch_queue_t v1 = +[MBBehaviorOptions sharedOptions];
  if (!v1) {
    __assert_rtn("-[MBCKOperationPolicy init]_block_invoke", "MBCKOperationTracker.m", 56, "sharedOptions");
  }
  id v5 = v1;
  uint64_t v2 = (uint64_t)[v1 maxBatchCount];
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  qword_1004827F0 = v3;
  qword_1004827F8 = (uint64_t)[v5 maxBatchSize];
  qword_100482800 = (uint64_t)[v5 maxBatchFetchAssetSize];
  qword_100482808 = (uint64_t)[v5 maxBatchSaveAssetSize];
  uint64_t v4 = (uint64_t)[v5 recordSaveAttempts];
  qword_100482810 = v4 & ~(v4 >> 63);
}

id sub_10025D7B4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addEngine:a2];
}

void sub_10025DB28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10025DBE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10025DC50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10025DCB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10025E1A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10025E454(uint64_t a1)
{
}

void sub_10025E45C(uint64_t a1)
{
}

void sub_10025E464(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(void))(v3 + 16))();
  }
}

void sub_10025E84C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10025E868(uint64_t a1)
{
  uint64_t v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = [*(id *)(a1 + 32) eventName];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "=ck-op= Submitted CKEventMetric: %@", buf, 0xCu);

    uint64_t v4 = [*(id *)(a1 + 32) eventName];
    _MBLog();
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10025ECB0(uint64_t a1)
{
}

void sub_10025EEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10025EF1C(id a1, MBCKEngine *a2, unint64_t a3, BOOL *a4)
{
}

void sub_10025F9E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_10025FA80(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (!v5) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

uint64_t sub_10025FB04(uint64_t a1, void *a2, double a3)
{
  a2;
  if (a3 > 0.0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(double))(v5 + 16))(a3);
  }
  return _objc_release_x1();
}

void sub_10025FB88(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v7 = a3;
  id v8 = a4;
  if (!v8) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, id, id, id))(v9 + 16))(v9, v10, v7, v8);
  }
}

uint64_t sub_10025FC28(uint64_t a1, void *a2, double a3)
{
  a2;
  if (a3 > 0.0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(double))(v5 + 16))(a3);
  }
  return _objc_release_x1();
}

uint64_t sub_10025FCAC(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10025FCD4(uint64_t a1, void *a2)
{
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(void))(v3 + 16))();
  }
  return _objc_release_x1();
}

void sub_10025FD44(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)(a1 + 64);
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  [*(id *)(*(void *)(a1 + 32) + 8) removeObject:*(void *)(a1 + 40)];
  id v38 = [*(id *)(*(void *)(a1 + 32) + 8) count];
  objc_sync_exit(v4);

  uint64_t v5 = [*(id *)(a1 + 40) metrics];
  uint64_t v40 = [v5 cloudKitMetrics];

  uint64_t v6 = [*(id *)(a1 + 40) metrics];
  id v7 = [v6 MMCSMetrics];

  id v8 = [*(id *)(a1 + 40) group];
  id v39 = [v8 operationGroupID];

  uint64_t v9 = [*(id *)(a1 + 40) error];
  id v10 = MBGetDefaultLog();
  uint64_t v11 = v10;
  double v12 = Current - v3;
  if (!v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = objc_opt_class();
      __int16 v21 = [*(id *)(a1 + 40) operationID];
      *(_DWORD *)long long buf = 138545410;
      uint64_t v42 = v20;
      __int16 v43 = 2114;
      char v44 = v21;
      __int16 v45 = 2114;
      uint64_t v46 = v39;
      __int16 v47 = 2048;
      double v48 = v12;
      __int16 v49 = 2048;
      id v50 = v38;
      __int16 v51 = 2048;
      id v52 = [v40 bytesUploaded];
      __int16 v53 = 2048;
      id v54 = [v7 bytesUploaded];
      __int16 v55 = 2048;
      id v56 = [v40 bytesDownloaded];
      __int16 v57 = 2048;
      id v58 = [v7 bytesDownloaded];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "=ck-op= %{public}@ completed, id:%{public}@, gid:%{public}@, t:%.3fs, o:%lu, bu:%lu/%lu, bd:%lu/%lu", buf, 0x5Cu);

      uint64_t v22 = objc_opt_class();
      int v23 = [*(id *)(a1 + 40) operationID];
      id v24 = [v40 bytesUploaded];
      id v25 = [v7 bytesUploaded];
      id v34 = [v40 bytesDownloaded];
      id v35 = [v7 bytesDownloaded];
      id v32 = v24;
      id v33 = v25;
      id v31 = v38;
      double v30 = v12;
      id v28 = v23;
      id v29 = v39;
      uint64_t v27 = v22;
      _MBLog();
    }
    goto LABEL_9;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v13 = objc_opt_class();
    unsigned int v14 = [*(id *)(a1 + 40) operationID];
    *(_DWORD *)long long buf = 138545666;
    uint64_t v42 = v13;
    __int16 v43 = 2114;
    char v44 = v14;
    __int16 v45 = 2114;
    uint64_t v46 = v39;
    __int16 v47 = 2048;
    double v48 = v12;
    __int16 v49 = 2048;
    id v50 = v38;
    __int16 v51 = 2048;
    id v52 = [v40 bytesUploaded];
    __int16 v53 = 2048;
    id v54 = [v7 bytesUploaded];
    __int16 v55 = 2048;
    id v56 = [v40 bytesDownloaded];
    __int16 v57 = 2048;
    id v58 = [v7 bytesDownloaded];
    __int16 v59 = 2114;
    __int16 v60 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "=ck-op= %{public}@ failed, id:%{public}@, gid:%{public}@, t:%.3fs, o:%lu, bu:%lu/%lu, bd:%lu/%lu : %{public}@", buf, 0x66u);

    uint64_t v15 = objc_opt_class();
    unint64_t v16 = [*(id *)(a1 + 40) operationID];
    id v17 = [v40 bytesUploaded];
    id v18 = [v7 bytesUploaded];
    id v19 = [v40 bytesDownloaded];
    id v35 = [v7 bytesDownloaded];
    id v36 = v9;
    id v33 = v18;
    id v34 = v19;
    id v31 = v38;
    id v32 = v17;
    double v30 = v12;
    id v28 = v16;
    id v29 = v39;
    uint64_t v27 = v15;
    _MBLog();
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
LABEL_9:
  }
    objc_msgSend(*(id *)(a1 + 32), "_replenishRetryTokens", v27, v28, v29, *(void *)&v30, v31, v32, v33, v34, v35, v36, context);
  objc_msgSend(*(id *)(a1 + 32), "_associateMetricsWithOperation:", *(void *)(a1 + 40), v27, v28, v29, *(void *)&v30, v31, v32, v33, v34, v35);
  uint64_t v26 = *(void *)(a1 + 48);
  if (v26) {
    (*(void (**)(void))(v26 + 16))();
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 88));
}

void sub_1002601D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100260304(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100260528(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002605F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100260858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100260880(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100260890(uint64_t a1)
{
}

void sub_100260898(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  [*(id *)(*(void *)(a1 + 32) + 96) removeObject:*(void *)(a1 + 40)];
  objc_sync_exit(v4);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100260928(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10026093C(void *a1)
{
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1[4] + 88));
}

void sub_100260DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_100260E1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (!WeakRetained) {
    __assert_rtn("-[MBCKOperationTracker fetchRecordWithID:completion:]_block_invoke", "MBCKOperationTracker.m", 588, "strongOp");
  }
  id v8 = WeakRetained;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  if (v6)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      id v9 = +[MBError errorWithCode:202 format:@"Cancelled fetching record"];
    }
    else
    {
      id v9 = v6;
      id v10 = MBGetDefaultLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = [v8 operationID];
        *(_DWORD *)long long buf = 138543618;
        uint64_t v20 = v11;
        __int16 v21 = 2112;
        id v22 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "=ck-op= Fetch operation %{public}@ completed with error: %@", buf, 0x16u);

        id v18 = [v8 operationID];
        _MBLog();
      }
      if (+[MBError isCKPartialFailureError:v9])
      {
        double v12 = [v9 userInfo];
        uint64_t v13 = [v12 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];
        uint64_t v14 = [v13 objectForKeyedSubscript:*(void *)(a1 + 40)];

        id v9 = (id)v14;
      }
    }
  }
  else
  {
    id v9 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 48);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 40);
    id v17 = [v5 objectForKeyedSubscript:v16];
    (*(void (**)(uint64_t, uint64_t, void *, id))(v15 + 16))(v15, v16, v17, v9);
  }
}

void sub_10026120C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100261230(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v12 = a3;
  id v6 = a4;
  id v7 = v6;
  if (v6)
  {
    id v8 = (void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    uint64_t v9 = v6;
  }
  else
  {
    id v8 = (void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v9 = v12;
  }
  id v10 = v9;
  uint64_t v11 = *v8;
  void *v8 = v10;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100261370(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002615D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002615F8(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  [*(id *)(*(void *)(a1 + 32) + 104) removeObject:*(void *)(a1 + 40)];
  objc_sync_exit(v4);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100261688(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10026169C(void *a1)
{
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1[4] + 88));
}

void sub_10026187C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100261ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100261B04(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  [*(id *)(*(void *)(a1 + 32) + 112) removeObject:*(void *)(a1 + 40)];
  objc_sync_exit(v4);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100261B94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100261BA8(void *a1)
{
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1[4] + 88));
}

void sub_100261C68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100261D2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100261E4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100261E60(uint64_t a1, void *a2)
{
  return [a2 removeEngine:*(void *)(a1 + 32)];
}

void sub_1002625B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100262FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100262FD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    id v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Passcode policy evalutation succeeded: %@", buf, 0xCu);
LABEL_11:
      _MBLog();
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  uint64_t v9 = [v6 domain];
  if (![v9 isEqualToString:LAErrorDomain])
  {

LABEL_9:
    id v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Passcode policy evaluation failed: %@", buf, 0xCu);
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  id v10 = [v7 code];

  if (v10 != (id)-5) {
    goto LABEL_9;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  id v8 = MBGetDefaultLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Skipping passcode policy evaluation because there is no passcode set on device: %@", buf, 0xCu);
    goto LABEL_11;
  }
LABEL_12:

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100264608(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002662E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = [*(id *)(a1 + 32) prefixDirectories];
  unsigned __int8 v9 = [v8 containsObject:v5];

  if ((v9 & 1) == 0)
  {
    id v10 = MBBackupMetadataFilenames();
    unsigned __int8 v11 = [v10 containsObject:v5];

    if ((v11 & 1) == 0)
    {
      id v12 = +[MBFileID fileIDWithString:v5];
      if (v12 && !*(unsigned char *)(*(void *)(a1 + 32) + 192))
      {
        uint64_t v13 = MBGetDefaultLog();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          id v17 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Already uploaded to snapshot: %@", buf, 0xCu);
          _MBLog();
        }

        id v14 = [*(id *)(*(void *)(a1 + 32) + 152) setFlags:200 mask:-17 forFileID:v12];
      }
    }
  }

  return 1;
}

uint64_t sub_100266484(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = [*(id *)(a1 + 32) prefixDirectories];
  unsigned __int8 v9 = [v8 containsObject:v5];

  if ((v9 & 1) == 0)
  {
    id v10 = MBBackupMetadataFilenames();
    unsigned __int8 v11 = [v10 containsObject:v5];

    if ((v11 & 1) == 0)
    {
      id v12 = +[MBFileID fileIDWithString:v5];
      if (v12)
      {
        uint64_t v13 = MBGetDefaultLog();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          id v17 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Already uploaded to backup: %@", buf, 0xCu);
          _MBLog();
        }

        id v14 = [*(id *)(*(void *)(a1 + 32) + 152) setFlags:72 mask:-17 forFileID:v12];
      }
    }
  }

  return 1;
}

void sub_100266824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10026683C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 isEqualToString:@"Manifest.db"]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  id v8 = [*(id *)(a1 + 32) prefixDirectories];
  unsigned __int8 v9 = [v8 containsObject:v5];

  if ((v9 & 1) == 0)
  {
    id v10 = MBBackupMetadataFilenames();
    unsigned __int8 v11 = [v10 containsObject:v5];

    if ((v11 & 1) == 0)
    {
      id v12 = +[MBFileID fileIDWithString:v5];
      if (v12)
      {
        uint64_t v13 = MBGetDefaultLog();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          id v17 = v5;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Not already moved from snapshot: %@", buf, 0xCu);
          _MBLog();
        }

        id v14 = +[MBBackupOperation backupOperationWithType:0 domain:0 fileID:v12 path:0 size:0];
        [*(id *)(*(void *)(a1 + 32) + 168) addOperation:v14];
      }
    }
  }

  return 1;
}

id sub_100267798(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_10026A198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10026A1B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10026A1C0(uint64_t a1)
{
}

BOOL sub_10026A1C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(void **)(*(void *)(a1 + 32) + 152);
  id v6 = [v3 fileID];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v7 + 40);
  id v8 = [v5 fetchFileWithID:v6 error:&obj];
  objc_storeStrong((id *)(v7 + 40), obj);

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    BOOL v9 = 0;
    goto LABEL_13;
  }
  if (v8)
  {
    if (([v8 isRegularFile] & 1) != 0 || !objc_msgSend(v3, "isRegularFile"))
    {
LABEL_12:
      BOOL v9 = 1;
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v15 = MBGetDefaultLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = [v3 fileID];
      *(_DWORD *)long long buf = 138412290;
      id v25 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Removed from backup: %@", buf, 0xCu);

      __int16 v21 = [v3 fileID];
      _MBLog();
    }
    id v17 = [v3 domain];
    id v18 = [v3 fileID];
    id v19 = +[MBBackupOperation backupOperationWithType:4 domain:v17 fileID:v18 path:0 size:0];

    [*(id *)(*(void *)(a1 + 32) + 168) addOperation:v19];
    goto LABEL_12;
  }
  id v10 = *(void **)(*(void *)(a1 + 32) + 152);
  unsigned __int8 v11 = [v3 fileID];
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
  id v22 = *(id *)(v12 + 40);
  unsigned __int8 v13 = [v10 containsPlaceholderForFileID:v11 error:&v22];
  objc_storeStrong((id *)(v12 + 40), v22);

  uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  BOOL v9 = v14 == 0;
  if (!v14 && (v13 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_13:

  return v9;
}

void sub_10026D6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

void sub_10026D770(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  __uint64_t v38 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v37 = *(void *)(a1 + 112);
  if (![*(id *)(a1 + 40) index])
  {
    if ([*(id *)(*(void *)(a1 + 48) + 16) isFlagSet:@"SimulateErrorAfterUploadingFirstBatch"])
    {
      uint64_t v7 = +[MBError errorWithCode:1 format:@"Simulated error after uploading first batch"];

      id v5 = (id)v7;
    }
    else if ([*(id *)(*(void *)(a1 + 48) + 16) isFlagSet:@"SimulateCrashAfterUploadingFirstBatch"])
    {
      abort();
    }
  }
  if (v5)
  {
    id v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v9 = [*(id *)(a1 + 40) index];
      *(_DWORD *)long long buf = 67109378;
      unsigned int v40 = v9;
      __int16 v41 = 2112;
      id v42 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to upload batch i:%u: %@", buf, 0x12u);
      id v35 = [*(id *)(a1 + 40) index];
      id v36 = v5;
      _MBLog();
    }
  }
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  unint64_t v13 = a2[2];
  unint64_t v12 = a2[3];
  id v14 = *(id *)(a1 + 48);
  objc_sync_enter(v14);
  if (v5)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v17 = *(void *)(v15 + 40);
    uint64_t v16 = (id *)(v15 + 40);
    if (!v17) {
      objc_storeStrong(v16, v5);
    }
  }
  id v18 = *(void **)(*(void *)(a1 + 48) + 184);
  id v19 = objc_msgSend(*(id *)(a1 + 56), "allKeys", v35, v36);
  [v18 removeObjectsForKeys:v19];

  *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) += v10;
  unint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
  *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) += v11;
  uint64_t v21 = *(void *)(*(void *)(a1 + 96) + 8);
  unint64_t v22 = *(void *)(v21 + 24);
  if (v22 >= v13) {
    unint64_t v22 = v13;
  }
  *(void *)(v21 + 24) = v22;
  uint64_t v23 = *(void *)(*(void *)(a1 + 104) + 8);
  unint64_t v24 = *(void *)(v23 + 24);
  if (v24 <= v12) {
    unint64_t v24 = v12;
  }
  *(void *)(v23 + 24) = v24;
  objc_sync_exit(v14);

  double v25 = (double)(v38 - v6) / 1000000000.0;
  double v26 = -1.0;
  if (v25 > 0.0) {
    double v26 = (double)v20 / v25 / 1000000.0;
  }
  unsigned int add_explicit = atomic_fetch_add_explicit(dword_100482820, 0xFFFFFFFF, memory_order_relaxed);
  id v28 = MBGetDefaultLog();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v29 = [*(id *)(a1 + 40) index];
    double v30 = [*(id *)(a1 + 40) paths];
    id v31 = [v30 count];
    uint64_t v32 = *(void *)(a1 + 80);
    *(_DWORD *)long long buf = 67110400;
    uint64_t v33 = *(void *)(*(void *)(v32 + 8) + 24);
    unsigned int v40 = v29;
    __int16 v41 = 2048;
    id v42 = v31;
    __int16 v43 = 2048;
    double v44 = (double)(v38 - v37) / 1000000000.0;
    __int16 v45 = 2048;
    double v46 = v26;
    __int16 v47 = 1024;
    unsigned int v48 = add_explicit - 1;
    __int16 v49 = 2048;
    uint64_t v50 = v33;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Finished batch i:%u, c:%lu, t:%.3f, r:%.3f, o:%u s:%llu", buf, 0x36u);

    [*(id *)(a1 + 40) index];
    id v34 = [*(id *)(a1 + 40) paths];
    [v34 count];
    _MBLog();
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_10026DB44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10026DB60(uint64_t a1, void *a2)
{
  if (a2) {
    __assert_rtn("-[MBDriveBackupEngine _uploadInBatches]_block_invoke", "MBDriveBackupEngine.m", 2004, "finishError == nil");
  }
  id v3 = *(NSObject **)(a1 + 32);
  dispatch_group_leave(v3);
}

void sub_10026DD54(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v37 = a3;
  id v5 = a4;
  id v35 = v5;
  if (v5
    && (id v6 = v5,
        (+[MBError isError:v5 withCode:2] & 1) == 0))
  {
    __uint64_t v38 = +[MBBackupHelper driveWriteError:v6 description:@"Error uploading files to snapshot"];
    (*(void (**)(void, uint64_t, void *, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), a2, v38, v33);
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id obj = v37;
    id v40 = [obj countByEnumeratingWithState:&v43 objects:v53 count:16];
    if (v40)
    {
      __uint64_t v38 = 0;
      uint64_t v39 = *(void *)v44;
      do
      {
        for (uint64_t i = 0; i != v40; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v44 != v39) {
            objc_enumerationMutation(obj);
          }
          id v8 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          uint64_t v10 = [obj objectForKeyedSubscript:v8];
          uint64_t v11 = [*(id *)(a1 + 32) objectForKeyedSubscript:v8];
          unint64_t v12 = [v11 lastPathComponent];
          unint64_t v13 = +[MBFileID fileIDWithString:v12];

          if (!v13)
          {
            id v31 = +[NSAssertionHandler currentHandler];
            [v31 handleFailureInMethod:*(void *)(a1 + 56), *(void *)(a1 + 40), @"MBDriveBackupEngine.m", 2042, @"Unable to extract file ID from path: %@", v11 object file lineNumber description];
          }
          id v14 = *(id *)(a1 + 40);
          objc_sync_enter(v14);
          uint64_t v15 = *(void **)(*(void *)(a1 + 40) + 184);
          id v16 = v8;
          uint64_t v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", [v16 fileSystemRepresentation]);
          id v18 = [v15 objectForKeyedSubscript:v17];

          objc_sync_exit(v14);
          if (!v18)
          {
            uint64_t v32 = +[NSAssertionHandler currentHandler];
            [v32 handleFailureInMethod:*(void *)(a1 + 56), *(void *)(a1 + 40), @"MBDriveBackupEngine.m", 2048, @"No operation found for path: %@", v16 object file lineNumber description];
          }
          if (v10)
          {
            if ((+[MBError isError:v10 withCode:202] & 1) == 0)
            {
              id v19 = MBGetDefaultLog();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                int v20 = *(_DWORD *)(a1 + 64);
                *(_DWORD *)long long buf = 138413058;
                id v48 = v16;
                __int16 v49 = 2112;
                id v50 = v11;
                __int16 v51 = 1024;
                LODWORD(v52[0]) = v20;
                WORD2(v52[0]) = 2112;
                *(void *)((char *)v52 + 6) = v10;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to upload %@ to %@ in batch %u: %@", buf, 0x26u);
                _MBLog();
              }
            }
            id v21 = *(id *)(a1 + 40);
            objc_sync_enter(v21);
            if (+[MBError isError:withCodes:](MBError, "isError:withCodes:", v10, 4, 6, 7, 0))
            {
              unint64_t v22 = MBGetDefaultLog();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v23 = v22;
                if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                {
                  id v24 = [v10 code];
                  *(_DWORD *)long long buf = 138412802;
                  id v48 = v16;
                  __int16 v49 = 2048;
                  id v50 = v24;
                  __int16 v51 = 2112;
                  v52[0] = v13;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "File removed before being uploaded: %@ (%ld, %@)", buf, 0x20u);
                }

                [v10 code];
                _MBLog();
              }

              [*(id *)(*(void *)(a1 + 40) + 16) setFlag:@"FileDeletedWhileScanning"];
              double v25 = *(void **)(*(void *)(a1 + 40) + 176);
              double v26 = [v18 domain];
              [v25 addObject:v26];

              id v27 = [*(id *)(*(void *)(a1 + 40) + 152) setFlags:16 mask:-9 forFileID:v13];
            }
            else if (!+[MBError isError:withCodes:](MBError, "isError:withCodes:", v10, 9, 100, 0)|| ([*(id *)(*(void *)(a1 + 40) + 152) flagsForFileID:v13 error:0] & 0x10) == 0)
            {
              unsigned int v28 = +[MBError isError:v10 withCode:105];
              if (!v38)
              {
                if (v28) {
                  CFStringRef v29 = @"No space left on host";
                }
                else {
                  CFStringRef v29 = @"Multiple errors uploading files";
                }
                if (v28) {
                  uint64_t v30 = 105;
                }
                else {
                  uint64_t v30 = 104;
                }
                __uint64_t v38 = +[MBError errorWithCode:v30 format:v29];
              }
            }
            objc_sync_exit(v21);
          }
        }
        id v40 = [obj countByEnumeratingWithState:&v43 objects:v53 count:16];
      }
      while (v40);
    }
    else
    {
      __uint64_t v38 = 0;
    }

    (*(void (**)(void, uint64_t, void *, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), a2, v38, v34);
  }
}

void sub_10026E348(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002701F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = [*(id *)(a1 + 32) prefixDirectories];
  unsigned __int8 v9 = [v8 containsObject:v5];

  if ((v9 & 1) == 0)
  {
    uint64_t v10 = MBBackupMetadataFilenames();
    unsigned __int8 v11 = [v10 containsObject:v5];

    if ((v11 & 1) == 0)
    {
      unint64_t v12 = *(void **)(*(void *)(a1 + 32) + 144);
      unint64_t v13 = +[MBFileID fileIDWithString:v5];
      id v14 = [v12 setFlags:32 forFileID:v13];
    }
  }

  return 1;
}

void sub_100271044(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002717CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100271DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100271DD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = MBBackupMetadataFilenames();
  unsigned __int8 v9 = [v8 containsObject:v5];

  if ((v9 & 1) != 0
    || ([*(id *)(a1 + 32) prefixDirectories],
        uint64_t v10 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v11 = [v10 containsObject:v5],
        v10,
        (v11 & 1) != 0))
  {
    unint64_t v12 = 0;
LABEL_4:
    BOOL v13 = 1;
    goto LABEL_5;
  }
  unint64_t v12 = +[MBFileID fileIDWithString:v5];
  uint64_t v15 = *(void **)(a1 + 40);
  uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v16 + 40);
  unsigned __int8 v17 = [v15 containsRegularFileForFileID:v12 error:&obj];
  objc_storeStrong((id *)(v16 + 40), obj);
  uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  BOOL v13 = v18 == 0;
  if (!v18 && (v17 & 1) == 0)
  {
    id v19 = MBGetDefaultLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Removed from backup: %@", buf, 0xCu);
      id v24 = v5;
      _MBLog();
    }

    if (v12)
    {
      int v20 = 0;
    }
    else
    {
      id v21 = [*(id *)(a1 + 32) settingsContext];
      unint64_t v22 = [v21 driveBackupDir];
      int v20 = [v22 stringByAppendingPathComponent:v5];
    }
    uint64_t v23 = +[MBBackupOperation backupOperationWithType:domain:fileID:path:size:](MBBackupOperation, "backupOperationWithType:domain:fileID:path:size:", *(unsigned int *)(a1 + 56), 0, v12, v20, 0, v24);
    [*(id *)(*(void *)(a1 + 32) + 168) addOperation:v23];

    goto LABEL_4;
  }
LABEL_5:

  return v13;
}

id MBSnapshotDirectoryPath(void *a1, const char *a2)
{
  return [a1 stringByAppendingPathComponent:a2];
}

id MBSnapshotDirectoryExists(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = +[NSFileManager defaultManager];
  id v6 = [v4 stringByAppendingPathComponent:v3];

  id v7 = [v5 fileExistsAtPath:v6];
  return v7;
}

id MBFileListDBPath(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_100272538(a1, a2, v5);
  id v7 = [v5 stringByAppendingPathExtension:@"db"];

  id v8 = [v6 stringByAppendingPathComponent:v7];

  return v8;
}

id sub_100272538(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [a1 stringByAppendingPathComponent:a2];
  id v7 = [v6 stringByAppendingPathComponent:v5];

  return v7;
}

id MBDeleteFileListDB(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v5 = sub_100272538(a1, a2, a3);
  id v6 = +[NSFileManager defaultManager];
  id v7 = [v6 removeItemAtPath:v5 error:a4];

  return v7;
}

uint64_t MBCloneFileListDB(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  if ([v10 isEqualToString:v11])
  {
    uint64_t v13 = 1;
  }
  else
  {
    id v14 = +[NSFileManager defaultManager];
    uint64_t v15 = sub_100272538(v9, (uint64_t)v10, v12);
    if ([v14 fileExistsAtPath:v15])
    {
      uint64_t v16 = sub_100272538(v9, (uint64_t)v11, v12);
      if ([v14 fileExistsAtPath:v16])
      {
        unsigned __int8 v17 = MBGetDefaultLog();
        uint64_t v13 = 1;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138543362;
          id v56 = v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Reusing file list dir %{public}@", buf, 0xCu);
          _MBLog();
        }
      }
      else
      {
        uint64_t v18 = sub_100272B34(v16, a5);
        if (v18)
        {
          id v42 = (void *)a5;
          id v43 = v12;
          __int16 v49 = v18;
          id v45 = v9;
          long long v46 = v16;
          id v44 = v11;
          id v19 = [v12 stringByAppendingPathExtension:@"db"];
          __int16 v47 = [v19 stringByAppendingString:@"-wal"];
          id v48 = v19;
          v62[0] = v19;
          v62[1] = v47;
          +[NSArray arrayWithObjects:v62 count:2];
          long long v51 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          id obj = (id)objc_claimAutoreleasedReturnValue();
          id v20 = [obj countByEnumeratingWithState:&v51 objects:v61 count:16];
          if (v20)
          {
            id v21 = v20;
            uint64_t v22 = *(void *)v52;
            while (2)
            {
              for (uint64_t i = 0; i != v21; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v52 != v22) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v24 = *(void *)(*((void *)&v51 + 1) + 8 * i);
                double v25 = objc_msgSend(v15, "stringByAppendingPathComponent:", v24, v40, v41);
                if ([v14 fileExistsAtPath:v25])
                {
                  double v26 = [v49 stringByAppendingPathComponent:v24];
                  id v27 = v25;
                  unsigned int v28 = (const char *)[v27 fileSystemRepresentation];
                  CFStringRef v29 = v26;
                  if (clonefile(v28, (const char *)[v29 fileSystemRepresentation], 0))
                  {
                    if (v42)
                    {
                      *id v42 = +[MBError errorWithErrno:*__error() path:v27 format:@"Failed to clone file"];
                    }

                    unsigned __int8 v17 = v49;
                    __uint64_t v38 = obj;
                    id v11 = v44;
                    id v9 = v45;
                    id v12 = v43;
                    uint64_t v16 = v46;
                    goto LABEL_31;
                  }
                  uint64_t v30 = MBGetDefaultLog();
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)long long buf = 138543618;
                    id v56 = v27;
                    __int16 v57 = 2114;
                    id v58 = v29;
                    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Cloned file list db from %{public}@ -> %{public}@", buf, 0x16u);
                    id v40 = v27;
                    __int16 v41 = v29;
                    _MBLog();
                  }
                }
              }
              id v21 = [obj countByEnumeratingWithState:&v51 objects:v61 count:16];
              if (v21) {
                continue;
              }
              break;
            }
          }

          unsigned __int8 v17 = v49;
          id v31 = v49;
          uint64_t v32 = (const std::__fs::filesystem::path *)[v31 fileSystemRepresentation];
          uint64_t v16 = v46;
          uint64_t v33 = v46;
          uint64_t v34 = (const std::__fs::filesystem::path *)[v33 fileSystemRepresentation];
          rename(v32, v34, v35);
          if (v36)
          {
            uint64_t v37 = *__error();
            if (v42)
            {
              *id v42 = +[MBError errorWithErrno:v37 format:@"rename failed"];
            }
            __uint64_t v38 = MBGetDefaultLog();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)long long buf = 138543874;
              id v56 = v31;
              __int16 v57 = 2114;
              id v58 = v33;
              __int16 v59 = 1024;
              int v60 = v37;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "Failed to rename %{public}@ -> %{public}@: %{errno}d", buf, 0x1Cu);
              _MBLog();
            }
            id v11 = v44;
            id v9 = v45;
            id v12 = v43;
LABEL_31:

            uint64_t v13 = 0;
          }
          else
          {
            uint64_t v13 = 1;
            id v11 = v44;
            id v9 = v45;
            id v12 = v43;
          }
        }
        else
        {
          unsigned __int8 v17 = 0;
          uint64_t v13 = 0;
        }
      }
    }
    else
    {
      uint64_t v13 = 1;
    }
  }
  return v13;
}

id sub_100272B34(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = +[NSFileManager defaultManager];
  id v5 = [v3 stringByAppendingString:@"-incomplete"];

  [v4 removeItemAtPath:v5 error:0];
  v12[0] = NSFileOwnerAccountName;
  v12[1] = NSFileGroupOwnerAccountName;
  v13[0] = @"mobile";
  v13[1] = @"mobile";
  id v6 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:2];
  LOBYTE(a2) = [v4 createDirectoryAtPath:v5 withIntermediateDirectories:1 attributes:v6 error:a2];

  if (a2)
  {
    id v7 = v5;
  }
  else
  {
    id v8 = MBGetDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      id v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to create incomplete dir path at %{public}@", buf, 0xCu);
      _MBLog();
    }

    id v7 = 0;
  }

  return v7;
}

uint64_t MBDeleteSnapshotDirectoriesNotBelongingToSnapshots(void *a1, void *a2)
{
  id v3 = a1;
  id v32 = a2;
  id v4 = +[NSFileManager defaultManager];
  if ([v4 fileExistsAtPath:v3])
  {
    uint64_t v5 = +[NSURL fileURLWithPath:v3];
    NSURLResourceKey v6 = NSURLIsDirectoryKey;
    NSURLResourceKey v47 = NSURLIsDirectoryKey;
    id v7 = +[NSArray arrayWithObjects:&v47 count:1];
    uint64_t v30 = (void *)v5;
    id v8 = [v4 enumeratorAtURL:v5 includingPropertiesForKeys:v7 options:1 errorHandler:&stru_1004178F0];

    id v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      id v44 = v3;
      __int16 v45 = 2112;
      id v46 = v32;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Deleting FileListDatabases under %@ not belonging to snapshots %@", buf, 0x16u);
      unsigned int v28 = v3;
      id v29 = v32;
      _MBLog();
    }
    id v31 = v3;

    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id obj = v8;
    id v10 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v39;
      do
      {
        uint64_t v13 = 0;
        id v33 = v11;
        do
        {
          if (*(void *)v39 != v12) {
            objc_enumerationMutation(obj);
          }
          id v14 = *(void **)(*((void *)&v38 + 1) + 8 * (void)v13);
          id v36 = 0;
          id v37 = 0;
          unsigned __int8 v15 = objc_msgSend(v14, "getResourceValue:forKey:error:", &v37, v6, &v36, v28, v29);
          id v16 = v37;
          id v17 = v36;
          if ((v15 & 1) == 0)
          {
            uint64_t v18 = MBGetDefaultLog();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412546;
              id v44 = v14;
              __int16 v45 = 2112;
              id v46 = v17;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to get NSURLIsDirectoryKey for %@: %@", buf, 0x16u);
              unsigned int v28 = v14;
              id v29 = v17;
              _MBLog();
            }
LABEL_17:
            id v23 = v17;
            goto LABEL_21;
          }
          uint64_t v18 = [v14 lastPathComponent];
          if ([v16 BOOLValue]
            && ([v32 containsObject:v18] & 1) != 0)
          {
            goto LABEL_17;
          }
          uint64_t v19 = v12;
          id v20 = v6;
          id v35 = v17;
          id v21 = v4;
          unsigned __int8 v22 = [v4 removeItemAtURL:v14 error:&v35];
          id v23 = v35;

          uint64_t v24 = MBGetDefaultLog();
          double v25 = v24;
          if (v22)
          {
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              double v26 = [v14 path];
              *(_DWORD *)long long buf = 138412290;
              id v44 = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Removed FileListDatabase %@", buf, 0xCu);

              unsigned int v28 = [v14 path];
              _MBLog();
            }
          }
          else if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            id v44 = v23;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to remove item at URL: %@", buf, 0xCu);
            unsigned int v28 = v23;
            _MBLog();
          }

          id v4 = v21;
          NSURLResourceKey v6 = v20;
          uint64_t v12 = v19;
          id v11 = v33;
LABEL_21:

          uint64_t v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
      }
      while (v11);
    }

    id v3 = v31;
  }

  return 1;
}

BOOL sub_100273150(id a1, NSURL *a2, NSError *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  NSURLResourceKey v6 = MBGetDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v9 = v4;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Failed to enumerate file lists to delete at %@: %@", buf, 0x16u);
    _MBLog();
  }

  return 0;
}

uint64_t MBCreateSymlinksForPendingAndLatestSnapshots(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v20 = 0;
  char v10 = sub_100273464(v7, @"pending", v8, &v20);
  id v11 = v20;
  id v12 = v11;
  if (v10)
  {
    id v19 = v11;
    char v13 = sub_100273464(v7, @"latest", v9, &v19);
    id v14 = v19;

    if (v13)
    {
      uint64_t v15 = 1;
LABEL_14:
      id v12 = v14;
      goto LABEL_15;
    }
    id v17 = MBGetDefaultLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      id v22 = v9;
      __int16 v23 = 2112;
      id v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to create symlink for latest snapshot %@: %@", buf, 0x16u);
      _MBLog();
    }

    if (!a4)
    {
      uint64_t v15 = 0;
      goto LABEL_14;
    }
    id v12 = v14;
    goto LABEL_12;
  }
  id v16 = MBGetDefaultLog();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412546;
    id v22 = v8;
    __int16 v23 = 2112;
    id v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to create symlink for pending snapshot %@: %@", buf, 0x16u);
    _MBLog();
  }

  if (a4)
  {
LABEL_12:
    id v12 = v12;
    uint64_t v15 = 0;
    *a4 = v12;
    goto LABEL_15;
  }
  uint64_t v15 = 0;
LABEL_15:

  return v15;
}

uint64_t sub_100273464(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = [a1 stringByAppendingPathComponent:a2];
  id v9 = (const char *)[v8 fileSystemRepresentation];
  if (unlink(v9))
  {
    uint64_t v10 = *__error();
    if (v10 != 2)
    {
      if (a4)
      {
        CFStringRef v12 = @"unlink() failed";
        goto LABEL_9;
      }
LABEL_10:
      uint64_t v13 = 0;
      goto LABEL_15;
    }
  }
  if (!v7)
  {
LABEL_14:
    uint64_t v13 = 1;
    goto LABEL_15;
  }
  id v11 = v7;
  if (!symlink((const char *)[v11 fileSystemRepresentation], v9))
  {
    id v14 = MBGetDefaultLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      id v17 = v8;
      __int16 v18 = 2112;
      id v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Created symlink from %@ -> %@", buf, 0x16u);
      _MBLog();
    }

    goto LABEL_14;
  }
  if (!a4) {
    goto LABEL_10;
  }
  uint64_t v10 = *__error();
  CFStringRef v12 = @"symlink() failed";
LABEL_9:
  +[MBError errorWithErrno:v10 path:v8 format:v12];
  uint64_t v13 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_15:

  return v13;
}

id MBCompressFileListDB(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a1;
  id v16 = MBFileListDBPath(v15, a2, v13);
  id v17 = +[MBTemporaryDirectory temporaryDirectoryOnSameVolumeAsPath:v15 identifiedBy:@"file_list_compaction" error:a7];

  if (!v17)
  {
    id v24 = 0;
    goto LABEL_23;
  }
  long long v38 = a6;
  uint64_t v39 = a5;
  uint64_t v18 = +[NSString stringWithFormat:@"%@.db-compacted", v13];
  id v19 = [v17 path];
  long long v40 = (void *)v18;
  id v20 = [v19 stringByAppendingPathComponent:v18];

  id v21 = [v16 stringByAppendingString:@"-wal"];
  id v22 = +[NSFileManager defaultManager];
  unsigned int v23 = [v22 fileExistsAtPath:v21];

  if (v23)
  {
    if (!+[MBSQLiteFileHandle compactSQLiteDatabaseAtPath:v16 toPath:v20 error:a7])
    {
      [v17 dispose];
LABEL_15:
      id v24 = 0;
      goto LABEL_22;
    }
LABEL_11:
    id v36 = +[NSString stringWithFormat:@"%@.db-compressed", v13];
    uint64_t v27 = objc_msgSend(v14, "stringByAppendingPathComponent:");
    unsigned int v28 = dispatch_group_create();
    id v29 = +[MBFileEncodingTask encodingTaskWithEncodingMethod:1];
    [v29 setValidate:0];
    [v29 setSourcePath:v20];
    [v29 setSourceIsLive:1];
    id v37 = (void *)v27;
    [v29 setDestinationPath:v27];
    [v29 setProtectionClass:3];
    [v29 setSpaceSavingsThreshold:0];
    [v29 setCompressionMethod:v39];
    [v29 setGroup:v28];
    [v29 start];
    dispatch_group_wait(v28, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v30 = [v29 error];

    if (v30)
    {
      if (a7)
      {
        *a7 = [v29 error];
      }
      [v17 dispose];
      id v31 = [v29 destinationPath];
      unlink((const char *)[v31 fileSystemRepresentation]);

      id v24 = 0;
      id v32 = v37;
    }
    else
    {
      [v17 dispose];
      id v33 = MBGetDefaultLog();
      id v32 = v37;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        id v34 = [v29 destinationSize];
        *(_DWORD *)long long buf = 138413058;
        id v42 = v16;
        __int16 v43 = 2112;
        id v44 = v37;
        __int16 v45 = 2048;
        id v46 = v34;
        __int16 v47 = 1024;
        int v48 = v39;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Compressed FileList %@ -> %@ size:%lld (%d)", buf, 0x26u);
        id v32 = v37;
        [v29 destinationSize];
        _MBLog();
      }

      if (v38) {
        *long long v38 = [v29 destinationSize];
      }
      id v24 = v32;
    }

    goto LABEL_22;
  }
  double v25 = MBGetDefaultLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    id v42 = v16;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "No -wal found for db %@. Performing copy instead", buf, 0xCu);
    _MBLog();
  }

  id v26 = v16;
  if (!clonefile((const char *)[v26 fileSystemRepresentation], (const char *)objc_msgSend(v20, "fileSystemRepresentation"), 0))goto LABEL_11; {
  [v17 dispose];
  }
  if (!a7) {
    goto LABEL_15;
  }
  +[MBError errorWithErrno:*__error() path:v26 format:@"Failed to clone file"];
  id v24 = 0;
  *a7 = (id)objc_claimAutoreleasedReturnValue();
LABEL_22:

LABEL_23:
  return v24;
}

id MBDecompressFileListDB(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a5;
  id v13 = a4;
  id v14 = a3;
  id v15 = +[NSFileManager defaultManager];
  id v16 = sub_100272538(v14, (uint64_t)v13, v12);

  if ([v15 fileExistsAtPath:v16])
  {
    if (a6)
    {
      +[MBError errorWithCode:3, @"Domain already exists at %@", v16 format];
      id v17 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v17 = 0;
    }
  }
  else
  {
    uint64_t v18 = [v12 stringByAppendingPathExtension:@"db"];
    id v19 = [v16 stringByAppendingPathComponent:v18];
    id v20 = MBGetDefaultLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412802;
      id v47 = v11;
      __int16 v48 = 2112;
      id v49 = v19;
      __int16 v50 = 1024;
      int v51 = a2;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Attempting to decompress FileList %@ -> %@ (%b)", buf, 0x1Cu);
      uint64_t v39 = v19;
      uint64_t v40 = (int)a2;
      id v38 = v11;
      _MBLog();
    }

    id v21 = sub_100272B34(v16, (uint64_t)a6);
    if (v21)
    {
      __int16 v45 = v19;
      id v22 = v18;
      unsigned int v23 = dispatch_group_create();
      id v24 = +[MBFileEncodingTask decodingTaskWithEncodingMethod:1];
      [v24 setValidate:0];
      [v24 setSourcePath:v11];
      [v24 setSourceIsLive:1];
      __int16 v43 = v22;
      double v25 = [v21 stringByAppendingPathComponent:v22];
      [v24 setDestinationPath:v25];

      [v24 setProtectionClass:3];
      [v24 setSpaceSavingsThreshold:0];
      [v24 setCompressionMethod:a2];
      [v24 setGroup:v23];
      [v24 start];
      id v44 = v23;
      dispatch_group_wait(v23, 0xFFFFFFFFFFFFFFFFLL);
      id v26 = [v24 error];

      if (v26)
      {
        if (a6)
        {
          *a6 = [v24 error];
        }
        objc_msgSend(v24, "destinationPath", v38, v39, v40);
        id v27 = objc_claimAutoreleasedReturnValue();
        unlink((const char *)[v27 fileSystemRepresentation]);

        id v17 = 0;
        id v19 = v45;
        uint64_t v18 = v43;
      }
      else
      {
        id v28 = v21;
        id v29 = (const std::__fs::filesystem::path *)[v28 fileSystemRepresentation];
        id v42 = v16;
        uint64_t v30 = (const std::__fs::filesystem::path *)[v42 fileSystemRepresentation];
        rename(v29, v30, v31);
        if (v32)
        {
          id v41 = v28;
          uint64_t v33 = *__error();
          id v19 = v45;
          uint64_t v18 = v43;
          if (a6)
          {
            *a6 = +[MBError errorWithErrno:v33 format:@"rename failed"];
          }
          id v34 = MBGetDefaultLog();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 138543874;
            id v47 = v41;
            __int16 v48 = 2114;
            id v49 = v42;
            __int16 v50 = 1024;
            int v51 = v33;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "Failed to rename %{public}@ -> %{public}@: %{errno}d", buf, 0x1Cu);
            _MBLog();
          }

          id v17 = 0;
        }
        else
        {
          id v35 = MBGetDefaultLog();
          id v19 = v45;
          uint64_t v18 = v43;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            id v36 = [v24 destinationSize];
            *(_DWORD *)long long buf = 138413058;
            id v47 = v11;
            __int16 v48 = 2112;
            id v49 = v45;
            __int16 v50 = 1024;
            int v51 = a2;
            __int16 v52 = 2048;
            id v53 = v36;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Decompressed FileList %@ -> %@ (%b) size:%lld", buf, 0x26u);
            [v24 destinationSize];
            _MBLog();
          }

          id v17 = v45;
        }
      }
    }
    else
    {
      id v17 = 0;
    }
  }
  return v17;
}

BOOL MBEnumerateDomainNamesForSnapshot(void *a1, void *a2, void *a3, void *a4)
{
  id v6 = a1;
  id v7 = a2;
  id v31 = a4;
  id v27 = v6;
  id v28 = v7;
  id v29 = [v6 stringByAppendingPathComponent:v7];
  uint64_t v30 = +[NSFileManager defaultManager];
  if ([v30 fileExistsAtPath:v29])
  {
    double v25 = +[NSURL fileURLWithPath:v29];
    uint64_t v39 = 0;
    uint64_t v40 = (id *)&v39;
    uint64_t v41 = 0x3032000000;
    id v42 = sub_1002743F4;
    __int16 v43 = sub_100274404;
    id v44 = 0;
    NSURLResourceKey v50 = NSURLIsDirectoryKey;
    id v8 = +[NSArray arrayWithObjects:&v50 count:1];
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_10027440C;
    v38[3] = &unk_100417918;
    void v38[4] = &v39;
    id v9 = [v30 enumeratorAtURL:v25 includingPropertiesForKeys:v8 options:1 errorHandler:v38];

    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v34 objects:v49 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v35;
      while (2)
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v35 != v12) {
            objc_enumerationMutation(v10);
          }
          id v14 = *(void **)(*((void *)&v34 + 1) + 8 * i);
          id obj = 0;
          id v33 = 0;
          id v15 = v40;
          unsigned __int8 v16 = [v14 getResourceValue:&v33 forKey:NSURLIsDirectoryKey error:&obj];
          id v17 = v33;
          objc_storeStrong(v15 + 5, obj);
          if ((v16 & 1) == 0)
          {
            id v21 = MBGetDefaultLog();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              id v22 = v40[5];
              *(_DWORD *)long long buf = 138412546;
              id v46 = v14;
              __int16 v47 = 2112;
              id v48 = v22;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to get NSURLIsDirectoryKey for %@: %@", buf, 0x16u);
              _MBLog();
            }

LABEL_17:
            goto LABEL_18;
          }
          if ([v17 BOOLValue])
          {
            uint64_t v18 = [v14 lastPathComponent];
            char v19 = v31[2](v31, v18);

            if ((v19 & 1) == 0) {
              goto LABEL_17;
            }
          }
        }
        id v11 = [v10 countByEnumeratingWithState:&v34 objects:v49 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }
LABEL_18:

    id v23 = v40[5];
    BOOL v20 = v23 == 0;
    if (a3 && v23) {
      *a3 = v23;
    }

    _Block_object_dispose(&v39, 8);
  }
  else
  {
    BOOL v20 = 1;
  }

  return v20;
}

void sub_1002743B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_1002743F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100274404(uint64_t a1)
{
}

uint64_t sub_10027440C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = MBGetDefaultLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to enumerate file lists at %@: %@", buf, 0x16u);
    _MBLog();
  }

  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v6;

  return 0;
}

uint64_t MBCalculateDiskUsageForSnapshotDirectory(void *a1, uint64_t *a2, void *a3)
{
  id v40 = a1;
  uint64_t v39 = +[NSFileManager defaultManager];
  if (![v39 fileExistsAtPath:v40])
  {
    uint64_t v6 = 0;
    goto LABEL_36;
  }
  id v42 = +[NSMutableIndexSet indexSet];
  long long v36 = +[NSURL fileURLWithPath:v40];
  uint64_t v56 = 0;
  __int16 v57 = (id *)&v56;
  uint64_t v58 = 0x3032000000;
  __int16 v59 = sub_1002743F4;
  int v60 = sub_100274404;
  id v61 = 0;
  v67[0] = NSURLFileSizeKey;
  v67[1] = NSURLIsDirectoryKey;
  v67[2] = NSURLFileContentIdentifierKey;
  id v3 = +[NSArray arrayWithObjects:v67 count:3];
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472;
  v55[2] = sub_100274B30;
  v55[3] = &unk_100417918;
  void v55[4] = &v56;
  id v4 = [v39 enumeratorAtURL:v36 includingPropertiesForKeys:v3 options:0 errorHandler:v55];

  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id obj = v4;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  id v7 = [obj countByEnumeratingWithState:&v51 objects:v66 count:16];
  if (!v7) {
    goto LABEL_29;
  }
  uint64_t v44 = *(void *)v52;
  while (2)
  {
    for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v52 != v44) {
        objc_enumerationMutation(obj);
      }
      id v9 = *(void **)(*((void *)&v51 + 1) + 8 * i);
      id v49 = 0;
      id v50 = 0;
      id v10 = v57;
      unsigned __int8 v11 = [v9 getResourceValue:&v50 forKey:NSURLIsDirectoryKey error:&v49];
      id v12 = v50;
      objc_storeStrong(v10 + 5, v49);
      if ((v11 & 1) == 0)
      {
        unsigned __int8 v16 = MBGetDefaultLog();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          id v30 = v57[5];
          *(_DWORD *)long long buf = 138412546;
          long long v63 = v9;
          __int16 v64 = 2112;
          id v65 = v30;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to get NSURLIsDirectoryKey for %@: %@", buf, 0x16u);
          _MBLog();
        }
        goto LABEL_28;
      }
      if ([v12 BOOLValue]) {
        goto LABEL_16;
      }
      id v47 = 0;
      id v48 = 0;
      __int16 v13 = v57;
      unsigned __int8 v14 = [v9 getResourceValue:&v48 forKey:NSURLFileContentIdentifierKey error:&v47];
      id v15 = v13 + 5;
      unsigned __int8 v16 = v48;
      objc_storeStrong(v15, v47);
      if ((v14 & 1) == 0)
      {
        id v27 = MBGetDefaultLog();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          id v31 = v57[5];
          *(_DWORD *)long long buf = 138412546;
          long long v63 = v9;
          __int16 v64 = 2112;
          id v65 = v31;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Failed to get NSURLFileContentIdentifierKey for %@: %@", buf, 0x16u);
          _MBLog();
        }
LABEL_27:

LABEL_28:
        goto LABEL_29;
      }
      id v17 = [v16 unsignedLongLongValue];
      unsigned int v18 = [v42 containsIndex:v17];
      if ((v18 & 1) == 0) {
        [v42 addIndex:v17];
      }
      id v45 = 0;
      id v46 = 0;
      char v19 = v57;
      BOOL v20 = v9;
      unsigned __int8 v21 = [v9 getResourceValue:&v46 forKey:NSURLFileSizeKey error:&v45];
      id v43 = v12;
      id v22 = v16;
      id v23 = v7;
      uint64_t v24 = v5;
      uint64_t v25 = v6;
      id v26 = v19 + 5;
      id v27 = v46;
      id v28 = v26;
      uint64_t v6 = v25;
      uint64_t v5 = v24;
      id v7 = v23;
      unsigned __int8 v16 = v22;
      id v12 = v43;
      objc_storeStrong(v28, v45);
      if ((v21 & 1) == 0)
      {
        int v32 = MBGetDefaultLog();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          id v33 = v57[5];
          *(_DWORD *)long long buf = 138412546;
          long long v63 = v20;
          __int16 v64 = 2112;
          id v65 = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Failed to get NSURLFileSizeKey for %@: %@", buf, 0x16u);
          _MBLog();
        }

        goto LABEL_27;
      }
      id v29 = [v27 unsignedLongLongValue];
      if (v18) {
        v5 += (uint64_t)[v27 unsignedLongLongValue];
      }

      v6 += (uint64_t)v29;
LABEL_16:
    }
    id v7 = [obj countByEnumeratingWithState:&v51 objects:v66 count:16];
    if (v7) {
      continue;
    }
    break;
  }
LABEL_29:

  id v34 = v57[5];
  if (v34)
  {
    if (a3) {
      *a3 = v34;
    }
    uint64_t v5 = -1;
    uint64_t v6 = -1;
  }
  if (a2) {
    *a2 = v5;
  }

  _Block_object_dispose(&v56, 8);
LABEL_36:

  return v6;
}

void sub_100274ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

uint64_t sub_100274B30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
  id v7 = MBGetDefaultLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412546;
    id v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to calculate disk usage at %@: %@", buf, 0x16u);
    _MBLog();
  }

  return 0;
}

uint64_t MBAcquireSnapshotDirectoryLock(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  id v7 = v5;
  int v8 = open((const char *)[v7 fileSystemRepresentation], 1048608);
  if (v8 < 0)
  {
    if (a2)
    {
      +[MBError posixErrorWithPath:v7 format:@"Failed to open snapshot directory root"];
      char v10 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      char v10 = 0;
    }
  }
  else
  {
    int v9 = v8;
    char v10 = v6[2](v6, a2);
    close(v9);
  }

  return v10 & 1;
}

void sub_100274D0C(_Unwind_Exception *a1)
{
}

void sub_100274D2C(void *a1)
{
}

void sub_1002766C0(_Unwind_Exception *a1)
{
}

void sub_1002766D8(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1002766E4);
}

void sub_1002771A0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x100277134);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t sub_100277264(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  objc_sync_enter(v2);
  if (([*(id *)(a1 + 32) isCanceled] & 1) != 0
    || (id v3 = (id)*(int *)(a1 + 56),
        objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "retryStrategy"), "softConsecutiveRetryLimit") == v3))
  {
    uint64_t v4 = 0;
  }
  else
  {
    [*(id *)(a1 + 32) disableCancel];
    [*(id *)(*(void *)(a1 + 40) + 24) forceRefreshForBackupUDID:*(void *)(a1 + 48)];
    uint64_t v4 = 1;
  }
  objc_sync_exit(v2);
  return v4;
}

void sub_1002772E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002779B4(id a1, MBServiceCache *a2)
{
  uint64_t v31 = 0;
  id obj = [(MBServiceCache *)a2 pathsForFilesMissingEncryptionKeyWithOffset:0 limit:100];
  if ([obj count])
  {
    uint64_t v2 = 0;
    p_cache = MBCKManager.cache;
    do
    {
      if (!v2)
      {
        uint64_t v4 = MBGetDefaultLog();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.st_dev) = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finding missing encryption keys", (uint8_t *)&buf, 2u);
          _MBLog();
        }
      }
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v5 = [obj countByEnumeratingWithState:&v27 objects:v37 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v28;
        do
        {
          for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v28 != v7) {
              objc_enumerationMutation(obj);
            }
            int v9 = *(void **)(*((void *)&v27 + 1) + 8 * i);
            id v10 = objc_msgSend(p_cache + 483, "keybagFileWithPath:error:", v9, &v31, v23);
            if (v10)
            {
              __int16 v11 = v10;
              id v12 = [v10 encryptionKeyWithError:&v31];
              if (v12)
              {
                id v13 = v12;
                unsigned __int8 v14 = p_cache;
                memset(&buf, 0, sizeof(buf));
                int v15 = stat((const char *)[v9 fileSystemRepresentation], &buf);
                unsigned __int8 v16 = MBGetDefaultLog();
                BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
                if (v15)
                {
                  if (v17)
                  {
                    int v18 = *__error();
                    *(_DWORD *)int v32 = 138412546;
                    id v33 = v9;
                    __int16 v34 = 1024;
                    int v35 = v18;
                    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Error getting inode number for %@: %{errno}d", v32, 0x12u);
                    id v23 = v9;
                    unint64_t v24 = *__error();
                    _MBLog();
                  }
                  ++v2;
                }
                else
                {
                  if (v17)
                  {
                    *(_DWORD *)int v32 = 138412290;
                    id v33 = v9;
                    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Found encryption key for %@", v32, 0xCu);
                    id v23 = v9;
                    _MBLog();
                  }
                  -[MBServiceCache removeFileMissingEncryptionKeyWithPath:](a2, "removeFileMissingEncryptionKeyWithPath:", v9, v23);
                  [(MBServiceCache *)a2 setFileEncryptionKey:v13 forInodeNumber:buf.st_ino];
                }
                p_cache = v14;
              }
              else
              {
                unsigned __int8 v21 = MBGetDefaultLog();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
                {
                  id v22 = +[MBError descriptionForError:v31];
                  buf.st_dev = 138412546;
                  *(void *)&buf.st_mode = v9;
                  WORD2(buf.st_ino) = 2112;
                  *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v22;
                  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Error getting encryption key for %@: %@", (uint8_t *)&buf, 0x16u);
                  id v23 = v9;
                  unint64_t v24 = (unint64_t)+[MBError descriptionForError:v31];
                  _MBLog();
                }
                ++v2;
              }
              objc_msgSend(v11, "closeWithError:", 0, v23, v24);
            }
            else
            {
              char v19 = MBGetDefaultLog();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                id v20 = +[MBError descriptionForError:v31];
                buf.st_dev = 138412546;
                *(void *)&buf.st_mode = v9;
                WORD2(buf.st_ino) = 2112;
                *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v20;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Error opening file to get encryption key %@: %@", (uint8_t *)&buf, 0x16u);
                id v23 = v9;
                unint64_t v24 = (unint64_t)+[MBError descriptionForError:v31];
                _MBLog();
              }
              ++v2;
            }
          }
          id v6 = [obj countByEnumeratingWithState:&v27 objects:v37 count:16];
        }
        while (v6);
      }
      id obj = -[MBServiceCache pathsForFilesMissingEncryptionKeyWithOffset:limit:](a2, "pathsForFilesMissingEncryptionKeyWithOffset:limit:", v2, 100, v23);
    }
    while ([obj count]);
  }
}

uint64_t sub_100277F18(uint64_t a1, void *a2)
{
  uint64_t v42 = 0;
  id v4 = +[MBPersona personalPersonaWithError:&v42];
  if (!v4)
  {
    long long v27 = MBGetDefaultLog();
    uint64_t result = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)stat buf = 138412290;
    *(void *)uint64_t v44 = v42;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Error obtaining personal persona: %@", buf, 0xCu);
    return _MBLog();
  }
  id v5 = v4;
  id v6 = -[MBAppManager initWithMobileInstallation:]([MBAppManager alloc], "initWithMobileInstallation:", [*(id *)(*(void *)(a1 + 32) + 8) mobileInstallation]);
  if (![(MBAppManager *)v6 loadAppsWithPersona:v5 safeHarbors:0 error:&v42])
  {
    long long v28 = MBGetDefaultLog();
    uint64_t result = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)stat buf = 138412290;
    *(void *)uint64_t v44 = v42;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Error initializing app manager: %@", buf, 0xCu);
    return _MBLog();
  }
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v7 = [(MBAppManager *)v6 allContainers];
  id v8 = [v7 countByEnumeratingWithState:&v38 objects:v48 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v39 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        if ((objc_msgSend(objc_msgSend(a2, "domainManager"), "containsDomainName:", objc_msgSend(objc_msgSend(v12, "domain"), "name")) & 1) == 0)objc_msgSend(objc_msgSend(a2, "domainManager"), "addDomain:", objc_msgSend(v12, "domain")); {
      }
        }
      id v9 = [v7 countByEnumeratingWithState:&v38 objects:v48 count:16];
    }
    while (v9);
  }
  id v13 = [a2 protectionClassesToRestoreByPathWithOffset:0 limit:100];
  if ([v13 count])
  {
    unsigned __int8 v14 = 0;
    int v32 = a2;
    while (1)
    {
      id v33 = v14;
      if (!v14)
      {
        int v15 = MBGetDefaultLog();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Setting protection classes for protected files restored while device was locked", buf, 2u);
          _MBLog();
        }
      }
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v16 = [v13 countByEnumeratingWithState:&v34 objects:v47 count:16];
      if (v16) {
        break;
      }
LABEL_30:
      a2 = v32;
      unsigned __int8 v14 = &v33[(void)objc_msgSend(v13, "count", v29)];
      id v13 = [v32 protectionClassesToRestoreByPathWithOffset:v14 limit:100];
      if (![v13 count]) {
        return (uint64_t)[a2 removeAllProtectionClassesToRestore];
      }
    }
    id v17 = v16;
    uint64_t v18 = *(void *)v35;
LABEL_19:
    uint64_t v19 = 0;
    while (1)
    {
      if (*(void *)v35 != v18) {
        objc_enumerationMutation(v13);
      }
      uint64_t v20 = *(void *)(*((void *)&v34 + 1) + 8 * v19);
      unsigned __int8 v21 = objc_msgSend(objc_msgSend(v13, "objectForKeyedSubscript:", v20, v29, v30, v31), "intValue");
      unsigned int v22 = +[MBProtectionClassUtils setWithPath:v20 value:v21 error:&v42];
      id v23 = MBGetDefaultLog();
      unint64_t v24 = v23;
      if (v22)
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)stat buf = 67109378;
          *(_DWORD *)uint64_t v44 = v21;
          *(_WORD *)&v44[4] = 2112;
          *(void *)&v44[6] = v20;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Set protection class %d on restored file at %@", buf, 0x12u);
          uint64_t v29 = v21;
          uint64_t v30 = v20;
LABEL_27:
          _MBLog();
        }
      }
      else if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v25 = +[MBError descriptionForError:v42];
        *(_DWORD *)stat buf = 67109634;
        *(_DWORD *)uint64_t v44 = v21;
        *(_WORD *)&v44[4] = 2112;
        *(void *)&v44[6] = v20;
        __int16 v45 = 2112;
        id v46 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Error setting protection class %d for protected file restore while device was locked at %@: %@", buf, 0x1Cu);
        uint64_t v30 = v20;
        id v31 = +[MBError descriptionForError:v42];
        uint64_t v29 = v21;
        goto LABEL_27;
      }
      if (v17 == (id)++v19)
      {
        id v17 = [v13 countByEnumeratingWithState:&v34 objects:v47 count:16];
        if (!v17) {
          goto LABEL_30;
        }
        goto LABEL_19;
      }
    }
  }
  return (uint64_t)[a2 removeAllProtectionClassesToRestore];
}

id sub_100278C38(uint64_t a1)
{
  return [*(id *)(a1 + 32) close:0];
}

void sub_100278ED0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v1 = (id)objc_claimAutoreleasedReturnValue();
}

void sub_1002791AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002791E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002791F8(uint64_t a1)
{
}

void sub_100279200(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");

  id v3 = objc_msgSend(*(id *)(a1 + 32), "pql_database");

  id v4 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v5 + 40);
  unsigned __int8 v6 = [v4 close:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
}

void sub_100279538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10027955C(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v6 = [v2 fetch:@"PRAGMA quick_check"];

  uint64_t v3 = [v6 error];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == 0;
}

void sub_100279664(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "pql_database");
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    [v3 flush];
  }
}

void sub_100279BFC(id a1, PQLConnection *a2, PQLStatement *a3, NSError *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = MBGetDefaultLog();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (v7)
  {
    if (!v10) {
      goto LABEL_7;
    }
    *(_DWORD *)stat buf = 138412802;
    uint64_t v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    __int16 v15 = 2112;
    uint64_t v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Sqlite request %@ failed on %@ with error [%@]", buf, 0x20u);
  }
  else
  {
    if (!v10) {
      goto LABEL_7;
    }
    *(_DWORD *)stat buf = 138412546;
    uint64_t v12 = v6;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Sqlite failed on %@ with error [%@]", buf, 0x16u);
  }
  _MBLog();
LABEL_7:

  MBExit(1);
}

void sub_100279D2C()
{
}

void sub_10027A4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10027A508(void *a1, uint64_t a2, void **a3)
{
  id v4 = a1;
  v10[0] = @"CREATE TABLE IF NOT EXISTS Files (fileID TEXT PRIMARY KEY, domain TEXT, relativePath TEXT, flags INTEGER, file BLOB);";
  v10[1] = @"CREATE INDEX IF NOT EXISTS FilesDomainIdx ON Files(domain);";
  v10[2] = @"CREATE INDEX IF NOT EXISTS FilesRelativePathIdx ON Files(relativePath);";
  v10[3] = @"CREATE INDEX IF NOT EXISTS FilesFlagsIdx ON Files(flags);";
  uint64_t v5 = +[NSArray arrayWithObjects:v10 count:4];
  CFStringRef v9 = @"CREATE TABLE IF NOT EXISTS Properties (key TEXT PRIMARY KEY, value BLOB);";
  id v6 = +[NSArray arrayWithObjects:&v9 count:1];
  if (sub_10027E4CC(v4, v5, a3)) {
    uint64_t v7 = sub_10027E4CC(v4, v6, a3);
  }
  else {
    uint64_t v7 = 0;
  }

  return v7;
}

id sub_10027A614(uint64_t a1, void *a2)
{
  id v3 = a2;
  id obj = 0;
  char v5 = (*((uint64_t (**)(id, void, id *))&unk_1004179E8 + 3 * *(unsigned int *)(a1 + 48) + 1))(v3, *(void *)(a1 + 32), &obj);
  if (v5)
  {
    id v6 = [v3 setUserVersion:*(unsigned int *)(a1 + 56)];
  }
  else
  {
    uint64_t v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(_DWORD *)(a1 + 52);
      int v9 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)stat buf = 67109634;
      int v14 = v8;
      __int16 v15 = 1024;
      int v16 = v9;
      __int16 v17 = 2112;
      id v18 = obj;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Can't migrate from version %d to %d: %@", buf, 0x18u);
      _MBLog();
    }

    BOOL v10 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
    [v10 close:0];

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
    id v6 = 0;
  }

  return v6;
}

void sub_10027A8A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10027A8BC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10027AAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10027AAC4(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  unsigned __int8 v3 = [v2 execute:*(void *)(a1 + 40) args:**(void **)(a1 + 56)];

  if ((v3 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "pql_database");
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v4 = [v7 lastError];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
}

void sub_10027ACC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10027ACE0(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v3 = [v2 fetch:*(void *)(a1 + 40) args:**(void **)(a1 + 64)];

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v4 = [v3 enumerateObjectsOfClass:objc_opt_class()];
  id v5 = [v4 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v25;
LABEL_3:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v25 != v6) {
        objc_enumerationMutation(v4);
      }
      uint64_t v8 = *(void *)(*((void *)&v24 + 1) + 8 * v7);
      uint64_t v20 = 0;
      unsigned __int8 v21 = &v20;
      uint64_t v22 = 0x2020000000;
      char v23 = 1;
      int v9 = *(void **)(a1 + 32);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10027AF58;
      v17[3] = &unk_100417A48;
      uint64_t v19 = &v20;
      id v10 = *(id *)(a1 + 48);
      v17[4] = v8;
      id v18 = v10;
      [v9 performCallbackOnQueue:v17];
      LOBYTE(v9) = *((unsigned char *)v21 + 24) == 0;

      _Block_object_dispose(&v20, 8);
      if (v9) {
        break;
      }
      if (v5 == (id)++v7)
      {
        id v5 = [v4 countByEnumeratingWithState:&v24 objects:v28 count:16];
        if (v5) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  __int16 v11 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  uint64_t v12 = [v11 lastError];
  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
  int v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  if ([*(id *)(a1 + 32) _isNotFoundError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)])
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    int v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = 0;
  }
}

void sub_10027AF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10027AF58(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10027B150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10027B174(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v3 = [v2 fetchObjectOfClass:*(void *)(a1 + 64) sql:*(void *)(a1 + 40) args:**(void **)(a1 + 72)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  uint64_t v7 = [v6 lastError];

  if ([*(id *)(a1 + 32) _isNotFoundError:v7])
  {

    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  int v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_10027C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10027C218(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v3 = [*(id *)(a1 + 40) string];
  id v10 = [v2 fetch:@"SELECT flags FROM Files WHERE fileID = %@", v3];

  if ([v10 next]) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v10 unsignedIntAtIndex:0];
  }
  uint64_t v4 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  uint64_t v5 = [v4 lastError];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if ([*(id *)(a1 + 32) _isNotFoundError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)])
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0;
  }
}

void sub_10027C464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10027C488(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v3 = [*(id *)(a1 + 40) string];
  id v10 = [v2 fetch:@"SELECT COUNT(*) FROM Files WHERE fileID = %@ AND file IS NOT NULL", v3];

  if ([v10 next]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v10 unsignedIntAtIndex:0] != 0;
  }
  uint64_t v4 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  uint64_t v5 = [v4 lastError];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if ([*(id *)(a1 + 32) _isNotFoundError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)])
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0;
  }
}

void sub_10027C6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10027C6FC(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v3 = [*(id *)(a1 + 40) string];
  id v10 = [v2 fetch:@"SELECT COUNT(*) FROM Files WHERE fileID = %@ AND file IS NULL", v3];

  if ([v10 next]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v10 unsignedIntAtIndex:0] != 0;
  }
  uint64_t v4 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  uint64_t v5 = [v4 lastError];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if ([*(id *)(a1 + 32) _isNotFoundError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)])
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0;
  }
}

void sub_10027C94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10027C970(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v3 = [*(id *)(a1 + 40) string];
  id v10 = [v2 fetch:@"SELECT COUNT(*) FROM Files WHERE fileID = %@ AND (flags & %lu) != 0 AND file IS NOT NULL", v3, 1];

  if ([v10 next]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v10 unsignedIntAtIndex:0] != 0;
  }
  uint64_t v4 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  uint64_t v5 = [v4 lastError];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if ([*(id *)(a1 + 32) _isNotFoundError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)])
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0;
  }
}

void sub_10027CBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10027CC04(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v3 = [*(id *)(a1 + 40) string];
  id v4 = [v2 fetch:@"SELECT file, domain, relativePath FROM Files WHERE fileID = %@ AND file IS NOT NULL", v3];

  if ([v4 next])
  {
    if ([*(id *)(a1 + 32) encrypted])
    {
      uint64_t v5 = [v4 archivedObjectOfClass:objc_opt_class() atIndex:0];
      uint64_t v6 = [*(id *)(a1 + 32) passwordData];
      uint64_t v7 = [*(id *)(a1 + 32) salt];
      uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
      id obj = *(id *)(v8 + 40);
      uint64_t v9 = +[MBEncryptionUtilities decryptString:v5 withKey:v6 salt:v7 error:&obj];
      objc_storeStrong((id *)(v8 + 40), obj);

      if (!v9)
      {
LABEL_14:

        goto LABEL_15;
      }
      id v10 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v9 error:0];
      uint64_t v11 = [v10 decodeObjectOfClass:objc_opt_class() forKey:NSKeyedArchiveRootObjectKey];
      if (!v11)
      {
        uint64_t v25 = +[MBError errorWithCode:1, @"Failed to unarchive encrypted file (%@): %@", *(void *)(a1 + 40), v5 format];
        uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 8);
        long long v27 = *(void **)(v26 + 40);
        *(void *)(v26 + 40) = v25;

        goto LABEL_14;
      }
      uint64_t v12 = (void *)v11;
    }
    else
    {
      uint64_t v12 = [v4 archivedObjectOfClass:objc_opt_class() atIndex:0];
    }
    uint64_t v13 = [v4 stringAtIndex:1];
    uint64_t v14 = [*(id *)(a1 + 32) domainManager];
    uint64_t v15 = [v14 domainForName:v13];

    if (v15)
    {
      [v12 setNonRedirectedDomain:v15];
      int v16 = [*(id *)(a1 + 32) domainManager];
      __int16 v17 = [v12 relativePath];
      id v18 = [v16 redirectDomain:v15 forRelativePath:v17];

      [v12 setDomain:v18];
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v12);
    }
    else
    {
      id v18 = MBGetDefaultLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        *(_DWORD *)stat buf = 138412290;
        uint64_t v31 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "File %@ exists in manifest without a domain entry in manifest properties", buf, 0xCu);
        uint64_t v28 = *(void *)(a1 + 40);
        _MBLog();
      }
    }
  }
  uint64_t v20 = objc_msgSend(*(id *)(a1 + 32), "pql_database", v28);
  uint64_t v21 = [v20 lastError];
  uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 8);
  char v23 = *(void **)(v22 + 40);
  *(void *)(v22 + 40) = v21;

  if ([*(id *)(a1 + 32) _isNotFoundError:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)])
  {
    uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v5 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = 0;
    goto LABEL_14;
  }
LABEL_15:
}

void sub_10027D11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10027D140(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v10 = objc_msgSend(v2, "fetch:", @"SELECT COUNT(*) From Files WHERE (flags & %lu) = 0 AND file IS NOT NULL", 54);

  if ([v10 next]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v10 unsignedIntAtIndex:0] != 0;
  }
  id v3 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v4 = [v3 lastError];
  id v5 = [v4 copy];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if ([*(id *)(a1 + 32) _isNotFoundError:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)])
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0;
  }
}

void sub_10027D244(uint64_t a1)
{
  id v1 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v2 = [v1 fetch:@"SELECT fileID, domain, relativePath, flags From Files WHERE (flags & %lu) = 0 AND file IS NOT NULL", 54];

  if ([v2 next])
  {
    do
    {
      id v3 = MBGetDefaultLog();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        id v4 = [v2 stringAtIndex:0];
        id v5 = [v2 stringAtIndex:1];
        uint64_t v6 = [v2 stringAtIndex:2];
        uint64_t v7 = [v2 stringAtIndex:3];
        *(_DWORD *)stat buf = 138413058;
        uint64_t v13 = v4;
        __int16 v14 = 2112;
        uint64_t v15 = v5;
        __int16 v16 = 2112;
        __int16 v17 = v6;
        __int16 v18 = 2112;
        uint64_t v19 = v7;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Referenced File Not In Backup: %@|%@|%@|%@", buf, 0x2Au);

        uint64_t v8 = [v2 stringAtIndex:0];
        uint64_t v9 = [v2 stringAtIndex:1];
        id v10 = [v2 stringAtIndex:2];
        uint64_t v11 = [v2 stringAtIndex:3];
        _MBLog();
      }
    }
    while (([v2 next] & 1) != 0);
  }
}

void sub_10027D980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10027D9A0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) fetch:@"SELECT file, domain, relativePath FROM Files WHERE file IS NOT NULL ORDER BY domain, relativePath ASC"];
  if (![v2 next])
  {
LABEL_21:
    uint64_t v26 = objc_msgSend(*(id *)(a1 + 32), "lastError", v31);
    uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = v26;

    if ([*(id *)(a1 + 40) _isNotFoundError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)])
    {
      uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v30 = *(void **)(v29 + 40);
      *(void *)(v29 + 40) = 0;
    }
    goto LABEL_23;
  }
  while (1)
  {
    if ([*(id *)(a1 + 40) encrypted]) {
      break;
    }
    id v10 = [v2 archivedObjectOfClass:objc_opt_class() atIndex:0];
LABEL_7:
    uint64_t v11 = objc_msgSend(v2, "stringAtIndex:", 1, v31);
    uint64_t v12 = [*(id *)(a1 + 40) domainManager];
    uint64_t v13 = [v12 domainForName:v11];

    if ([v13 isUninstalledAppDomain])
    {
      __int16 v14 = MBGetDefaultLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v10;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "File %@ exists in manifest for uninstalled app", (uint8_t *)&buf, 0xCu);
LABEL_15:
        uint64_t v31 = v10;
        _MBLog();
        goto LABEL_16;
      }
      goto LABEL_16;
    }
    [v10 setNonRedirectedDomain:v13];
    if (!v13)
    {
      __int16 v14 = MBGetDefaultLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v10;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "File %@ exists in manifest without a domain entry in manifest properties", (uint8_t *)&buf, 0xCu);
        goto LABEL_15;
      }
LABEL_16:

      goto LABEL_17;
    }
    uint64_t v15 = [*(id *)(a1 + 40) domainManager];
    __int16 v16 = [v10 relativePath];
    __int16 v17 = [v15 redirectDomain:v13 forRelativePath:v16];

    [v10 setDomain:v17];
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v39 = 0x2020000000;
    char v40 = 1;
    __int16 v18 = *(void **)(a1 + 40);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10027DEDC;
    v33[3] = &unk_100417A48;
    p_long long buf = &buf;
    id v35 = *(id *)(a1 + 48);
    id v19 = v10;
    id v34 = v19;
    [v18 performCallbackOnQueue:v33];
    BOOL v20 = *(unsigned char *)(*((void *)&buf + 1) + 24) == 0;

    _Block_object_dispose(&buf, 8);
    if (v20)
    {

      goto LABEL_21;
    }
LABEL_17:

    if (([v2 next] & 1) == 0) {
      goto LABEL_21;
    }
  }
  id v4 = [v2 archivedObjectOfClass:objc_opt_class() atIndex:0];
  id v5 = [*(id *)(a1 + 40) passwordData];
  uint64_t v6 = [*(id *)(a1 + 40) salt];
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v7 + 40);
  uint64_t v8 = +[MBEncryptionUtilities decryptString:v4 withKey:v5 salt:v6 error:&obj];
  objc_storeStrong((id *)(v7 + 40), obj);

  if (!v8) {
    goto LABEL_20;
  }
  id v9 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v8 error:0];
  id v10 = [v9 decodeObjectOfClass:objc_opt_class() forKey:NSKeyedArchiveRootObjectKey];
  if (v10)
  {

    goto LABEL_7;
  }
  uint64_t v21 = [v2 stringAtIndex:1];
  uint64_t v22 = [v2 stringAtIndex:2];
  uint64_t v23 = +[MBError errorWithCode:1, @"Failed to unarchive encrypted file (%@:%@): %@", v21, v22, v4 format];
  uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 40) = v23;

LABEL_20:
LABEL_23:
}

void sub_10027DEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_10027DEDC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_10027DF1C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 close:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if ((v4 & 1) == 0)
  {
    id v5 = MBGetDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to close read-only connection to MBManifestDB: %@", buf, 0xCu);
      _MBLog();
    }
  }
}

void sub_10027E214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10027E238(uint64_t a1)
{
  uint64_t v3 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  id v4 = [v3 fetch:@"SELECT value FROM Properties WHERE key = %@", *(void *)(a1 + 40)];

  if ([v4 next])
  {
    uint64_t v5 = *(void *)(a1 + 64);
    if (v5 == objc_opt_class())
    {
      uint64_t v7 = [v4 dataAtIndex:0];
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 64);
      if (v6 == objc_opt_class()) {
        [v4 stringAtIndex:0];
      }
      else {
      uint64_t v7 = [v4 unarchivedObjectOfClass:*(void *)(a1 + 64) atIndex:0];
      }
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  id v10 = objc_msgSend(*(id *)(a1 + 32), "pql_database");
  uint64_t v11 = [v10 lastError];

  if ([*(id *)(a1 + 32) _isNotFoundError:v11])
  {

    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

uint64_t sub_10027E4CC(void *a1, void *a2, void **a3)
{
  id v5 = a1;
  id v6 = a2;
  if (!a3) {
    __assert_rtn("_executeStatements", "MBManifestDB.m", 466, "error");
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v18;
LABEL_4:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v18 != v10) {
        objc_enumerationMutation(v7);
      }
      if (!objc_msgSend(v5, "executeRaw:", *(void *)(*((void *)&v17 + 1) + 8 * v11), (void)v17)) {
        break;
      }
      if (v9 == (id)++v11)
      {
        id v9 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v9) {
          goto LABEL_4;
        }
        goto LABEL_10;
      }
    }
    __int16 v14 = [v5 lastError];

    if (v14)
    {
      uint64_t v15 = *a3;
      *a3 = v14;
      id v13 = v14;

      uint64_t v12 = 0;
      goto LABEL_13;
    }
    uint64_t v12 = 1;
  }
  else
  {
LABEL_10:
    uint64_t v12 = 1;
    id v13 = v7;
LABEL_13:
  }
  return v12;
}

void sub_10027E6A0(id a1)
{
  qword_100482828 = objc_alloc_init(MBThermalPressureMonitor);
  _objc_release_x1();
}

void sub_10027EA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10027EA54(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[4] = a2;
    id v4 = WeakRetained;
    [WeakRetained _measureCurrentThermalPressureLevel];
    id WeakRetained = v4;
  }
}

void sub_10027EB30(uint64_t a1)
{
  uint32_t state = notify_get_state(*(_DWORD *)(*(void *)(a1 + 32) + 16), (uint64_t *)(*(void *)(a1 + 32) + 8));
  uint64_t v3 = MBGetDefaultLog();
  id v4 = v3;
  if (state)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      id v8 = (const char *)state;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to fetch the thermal pressure level: %lu", buf, 0xCu);
      _MBLog();
    }

    *(void *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x2D0], 8) = kOSThermalPressureLevelUndefined;
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
      *(_DWORD *)long long buf = 136446466;
      id v8 = kOSThermalNotificationPressureLevelName;
      __int16 v9 = 2048;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received %{public}s for thermal pressure level: %llu", buf, 0x16u);
      _MBLog();
    }

    id v6 = +[NSNotificationCenter defaultCenter];
    [v6 postNotificationName:@"MBThermalPressureMonitorNotification" object:*(void *)(a1 + 32) userInfo:0];
  }
}

void sub_10027EDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10027EDCC(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 8);
  return result;
}

void sub_10027EFD4(uint64_t a1)
{
  uint64_t v3 = MBGetDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Timer fired: %{public}@", buf, 0xCu);
    _MBLog();
  }

  uint64_t v5 = [*(id *)(a1 + 32) handler];
  if (v5)
  {
    [*(id *)(a1 + 32) setHandler:0];
    v5[2](v5, 0);
  }
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
}

void sub_10027F0F0(uint64_t a1)
{
  uint64_t v3 = MBGetDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Timer canceled: %{public}@", buf, 0xCu);
    uint64_t v6 = *(void *)(a1 + 32);
    _MBLog();
  }

  uint64_t v5 = [*(id *)(a1 + 32) handler];
  if (v5)
  {
    [*(id *)(a1 + 32) setHandler:0];
    v5[2](v5, 1);
  }
  objc_msgSend(*(id *)(a1 + 32), "setTransaction:", 0, v6);
  [*(id *)(a1 + 32) setTimer:0];
}

void sub_100284848(id a1)
{
  qword_100482838 = [[MBKeyBag alloc] initWithHandle:MKBOTABackupKeyBag() OTA:1];
  _objc_release_x1();
}

id sub_10028A8F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  uint64_t v4 = *(unsigned int *)(v2 + 48);
  [(id)v2 timeout];
  objc_msgSend(v3, "setLock:forBackupUDID:", +[MBSLock lockWithState:type:timeout:](MBSLock, "lockWithState:type:timeout:", 1, v4, (unint64_t)v5), *(void *)(*(void *)(a1 + 32) + 8));
  uint64_t v6 = *(void **)(a1 + 32);
  [v6 renewInterval];
  return objc_msgSend(v6, "_scheduleTimerWithInterval:");
}

id sub_10028AA4C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  [v1 renewInterval];
  return objc_msgSend(v1, "_scheduleTimerWithInterval:");
}

id sub_10028AB54(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) invalidate];
}

void sub_10028AEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10028AEE4(uint64_t a1, uint64_t a2)
{
}

void sub_10028AEF4(uint64_t a1)
{
}

id sub_10028AF00(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) _reacquireLockWithError:*(void *)(*(void *)(a1 + 48) + 8)+ 40];
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  return v2;
}

id sub_10028AFD0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _releaseLockAndScheduleRetries];
}

id sub_10028B04C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _releaseLockAndScheduleRetries];
}

id sub_10028B330(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 40) lockForBackupUDID:*(void *)(*(void *)(a1 + 32) + 8)];
  if (result)
  {
    unsigned int v3 = [result state];
    uint64_t v4 = *(void **)(a1 + 32);
    id result = v3 == 1 ? [v4 _holdLock] : objc_msgSend(v4, "_releaseLock");
    if (v5 != 0.0)
    {
      uint64_t v6 = *(void **)(a1 + 32);
      return objc_msgSend(v6, "_scheduleTimerWithInterval:");
    }
  }
  return result;
}

uint64_t MBAppendAttemptSummaryToPlist(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  uint64_t v8 = [a2 stringByAppendingPathComponent:a3];
  uint64_t v9 = [v8 stringByAppendingPathComponent:@"backup_summary.plist"];

  id v30 = 0;
  id v10 = v9;
  uint64_t v11 = +[NSFileManager defaultManager];
  unsigned __int8 v12 = [v11 fileExistsAtPath:v10];

  if (v12)
  {
    id v13 = +[NSData dataWithContentsOfFile:v10 options:0 error:&v30];
    __int16 v14 = +[NSPropertyListSerialization propertyListWithData:v13 options:2 format:0 error:&v30];
  }
  else
  {
    __int16 v14 = objc_opt_new();
  }

  id v15 = v30;
  if (!v15)
  {
    long long v18 = [v14 objectForKeyedSubscript:@"Attempts"];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v19 = objc_opt_new();
      [v14 setObject:v19 forKeyedSubscript:@"Attempts"];

      long long v18 = (void *)v19;
    }
    long long v20 = (char *)[v18 count];
    uint64_t v21 = v20;
    if ((unint64_t)v20 >= 0xA)
    {
      uint64_t v22 = v20 - 9;
      do
      {
        --v22;
        [v18 removeObjectAtIndex:0];
      }
      while (v22);
    }
    uint64_t v23 = [v7 dictionaryRepresentation];
    [v18 addObject:v23];

    id v29 = 0;
    uint64_t v24 = +[NSPropertyListSerialization dataWithPropertyList:v14 format:200 options:0 error:&v29];
    id v25 = v29;
    id v16 = v25;
    if (v24) {
      BOOL v26 = v25 == 0;
    }
    else {
      BOOL v26 = 0;
    }
    if (v26)
    {
      if ([v24 writeToFile:v10 options:0x10000000 error:a4])
      {
        uint64_t v27 = MBGetDefaultLog();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          id v32 = v10;
          __int16 v33 = 2048;
          id v34 = v21;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Appended attempt summary to %@ (%llu)", buf, 0x16u);
          _MBLog();
        }

        uint64_t v17 = 1;
        goto LABEL_24;
      }
    }
    else if (a4)
    {
      uint64_t v17 = 0;
      *a4 = v25;
LABEL_24:

      goto LABEL_25;
    }
    uint64_t v17 = 0;
    goto LABEL_24;
  }
  id v16 = v15;
  if (a4)
  {
    id v16 = v15;
    uint64_t v17 = 0;
    *a4 = v16;
  }
  else
  {
    uint64_t v17 = 0;
  }
LABEL_25:

  return v17;
}

void sub_10028D6EC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSCharacterSet whitespaceCharacterSet];
  id v11 = [v1 stringByTrimmingCharactersInSet:v2];

  if ([v11 containsString:@"/"])
  {
    unsigned int v3 = +[NSAssertionHandler currentHandler];
    uint64_t v4 = +[NSString stringWithUTF8String:"void _assertIfInvalidSystemContainerID(NSString *__strong)"];
    [v3 handleFailureInFunction:v4, @"MBPersona+RestoreLocations.m", 25, @"containerID %@ contains '/'", v11 file lineNumber description];
  }
  if ([v11 isEqualToString:@".."])
  {
    double v5 = +[NSAssertionHandler currentHandler];
    uint64_t v6 = +[NSString stringWithUTF8String:"void _assertIfInvalidSystemContainerID(NSString *__strong)"];
    [v5 handleFailureInFunction:v6, @"MBPersona+RestoreLocations.m", 26, @"containerID %@ contains '..'", v11 file lineNumber description];
  }
  if ([v11 isEqualToString:&stru_100418BA8])
  {
    id v7 = +[NSAssertionHandler currentHandler];
    uint64_t v8 = +[NSString stringWithUTF8String:"void _assertIfInvalidSystemContainerID(NSString *__strong)"];
    [v7 handleFailureInFunction:v8, @"MBPersona+RestoreLocations.m", 27, @"containerID %@ is empty", v11 file lineNumber description];
  }
  if ([v11 isEqualToString:@"."])
  {
    uint64_t v9 = +[NSAssertionHandler currentHandler];
    id v10 = +[NSString stringWithUTF8String:"void _assertIfInvalidSystemContainerID(NSString *__strong)"];
  }
}

void sub_10028E21C(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_100482850;
  qword_100482850 = v1;

  dword_100482848 = 0;
}

uint64_t sub_10028E7E0(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = +[NSFileManager defaultManager];
  if (![v6 fileExistsAtPath:v5]) {
    goto LABEL_22;
  }
  id v7 = MBGetDefaultLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Removing old restore directory", v25, 2u);
    _MBLog();
  }

  if ([v6 removeItemAtPath:v5 error:a3])
  {
LABEL_22:
    uint64_t v8 = [v5 stringByAppendingPathComponent:@"var"];
    unsigned int v9 = [v6 createDirectoryAtPath:v8 withIntermediateDirectories:1 attributes:0 error:a3];

    if (v9)
    {
      v28[0] = NSFileOwnerAccountName;
      v28[1] = NSFileGroupOwnerAccountName;
      v29[0] = @"mobile";
      v29[1] = @"mobile";
      id v10 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];
      v26[0] = NSFileOwnerAccountName;
      v26[1] = NSFileGroupOwnerAccountName;
      v27[0] = @"_securityd";
      v27[1] = @"wheel";
      id v11 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:2];
      if (a2 == 1)
      {
        id v15 = [v5 stringByAppendingPathComponent:@"var/Keychains"];
        unsigned int v16 = [v6 createDirectoryAtPath:v15 withIntermediateDirectories:1 attributes:v11 error:a3];

        if (v16)
        {
          uint64_t v17 = [v5 stringByAppendingPathComponent:@"var/Managed Preferences"];
          unsigned int v18 = [v6 createDirectoryAtPath:v17 withIntermediateDirectories:1 attributes:0 error:a3];

          if (v18)
          {
            uint64_t v19 = [v5 stringByAppendingPathComponent:@"var/Managed Preferences/mobile"];
            unsigned int v20 = [v6 createDirectoryAtPath:v19 withIntermediateDirectories:1 attributes:v10 error:a3];

            if (v20)
            {
              uint64_t v21 = [v5 stringByAppendingPathComponent:@"var/MobileDevice"];
              unsigned int v22 = [v6 createDirectoryAtPath:v21 withIntermediateDirectories:1 attributes:0 error:a3];

              if (v22)
              {
                uint64_t v23 = [v5 stringByAppendingPathComponent:@"var/MobileDevice/ProvisioningProfiles"];
                uint64_t v14 = (uint64_t)[v6 createDirectoryAtPath:v23 withIntermediateDirectories:1 attributes:v10 error:a3];

                if (!v14) {
                  goto LABEL_18;
                }
                goto LABEL_9;
              }
            }
          }
        }
      }
      else if (a2 != 2 {
             || ([v5 stringByAppendingPathComponent:@"var/mobile"],
      }
                 unsigned __int8 v12 = objc_claimAutoreleasedReturnValue(),
                 unsigned __int8 v13 = [v6 createDirectoryAtPath:v12 withIntermediateDirectories:1 attributes:v10 error:a3], v12, (v13 & 1) != 0))
      {
LABEL_9:
        uint64_t v14 = 1;
LABEL_18:

        goto LABEL_19;
      }
      uint64_t v14 = 0;
      goto LABEL_18;
    }
  }
  uint64_t v14 = 0;
LABEL_19:

  return v14;
}

void sub_100290974(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100290A00(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100290A10(uint64_t a1)
{
}

uint64_t sub_100290A18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = MBGetDefaultLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "=restore-placeholder= Failed to enumerate placeholder ipas at %@: %@", buf, 0x16u);
    _MBLog();
  }

  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v6;

  return 0;
}

BOOL BackupStatusKeyAndValueReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
LABEL_21:
        id v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadString();
    uint64_t v13 = 16;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1002953F4(unint64_t a1)
{
  if (a1 >= 0xB) {
    __assert_rtn("_stringForRestoreDomainState", "MBRestoreDomainEngine.m", 52, "0");
  }
  return (uint64_t)*(&off_100417CE0 + a1);
}

id sub_100295F68(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setUpWithError:a2];
}

id sub_100295F74(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _downloadAssets:a2];
}

id sub_100295F80(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _placeDirectories:a2];
}

id sub_100295F8C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _placeAssets:a2];
}

id sub_100295F98(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _placeZeroByteFiles:a2];
}

id sub_100295FA4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _placeSymlinks:a2];
}

id sub_100295FB0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _fixUpDirectoryAttributes:a2];
}

id sub_100295FBC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _verify:a2];
}

id sub_100295FC8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _finalize:a2];
}

uint64_t sub_100296830(uint64_t a1, void *a2, uint64_t *a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestoreDomainEngine _downloadAssets:withFetcher:]_block_invoke", "MBRestoreDomainEngine.m", 367, "asset");
  }
  if (!a3) {
    __assert_rtn("-[MBRestoreDomainEngine _downloadAssets:withFetcher:]_block_invoke", "MBRestoreDomainEngine.m", 368, "enumerationError");
  }
  unint64_t v6 = v5;
  if (![*(id *)(a1 + 32) handleCancelation:a3])
  {
    char v29 = 0;
    if ([*(id *)(*(void *)(a1 + 32) + 144) containsAsset:v6 alreadyPresentOut:&v29 error:a3])
    {
      if (v29)
      {
        if (([*(id *)(*(void *)(a1 + 32) + 160) setAssetState:2 asset:v6 withFailure:0 error:a3] & 1) == 0)
        {
          int v10 = MBGetDefaultLog();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            id v11 = [*(id *)(a1 + 32) domainName];
            *(_DWORD *)long long buf = 138543618;
            uint64_t v31 = v11;
            __int16 v32 = 2112;
            __int16 v33 = v6;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "=domain-engine= %{public}@: Failed to mark asset %@ as complete, since it was already in the depot", buf, 0x16u);

            uint64_t v27 = [*(id *)(a1 + 32) domainName];
            _MBLog();
          }
        }
        uint64_t v12 = MBGetDefaultLog();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          uint64_t v13 = [*(id *)(a1 + 32) domainName];
          uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 144);
          *(_DWORD *)long long buf = 138543874;
          uint64_t v31 = v13;
          __int16 v32 = 2112;
          __int16 v33 = v6;
          __int16 v34 = 2112;
          uint64_t v35 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "=domain-engine= %{public}@: Asset %@ already present in depot %@", buf, 0x20u);

          id v15 = [*(id *)(a1 + 32) domainName];
          _MBLog();
        }
        unsigned int v16 = [*(id *)(a1 + 32) progressModel];
        uint64_t v17 = [v6 metadata];
        -[NSObject updatingProgress:previousProgress:size:](v16, "updatingProgress:previousProgress:size:", [v17 assetSize], 1.0, 0.0);
        uint64_t v9 = 1;
        goto LABEL_19;
      }
      uint64_t v21 = MBGetDefaultLog();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        unsigned int v22 = [*(id *)(a1 + 32) domainName];
        *(_DWORD *)long long buf = 138543618;
        uint64_t v31 = v22;
        __int16 v32 = 2112;
        __int16 v33 = v6;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "=domain-engine= %{public}@: Requesting asset %@", buf, 0x16u);

        uint64_t v28 = [*(id *)(a1 + 32) domainName];
        _MBLog();
      }
      if ([*(id *)(a1 + 40) requestAsset:v6 error:a3])
      {
        uint64_t v9 = 1;
        goto LABEL_28;
      }
      unsigned int v16 = MBGetDefaultLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = [*(id *)(a1 + 32) domainName];
        uint64_t v24 = *a3;
        *(_DWORD *)long long buf = 138543874;
        uint64_t v31 = v23;
        __int16 v32 = 2112;
        __int16 v33 = v6;
        __int16 v34 = 2112;
        uint64_t v35 = v24;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "=domain-engine= %{public}@: Failed requesting asset %@: %@", buf, 0x20u);

        uint64_t v17 = [*(id *)(a1 + 32) domainName];
        goto LABEL_18;
      }
    }
    else
    {
      unsigned int v16 = MBGetDefaultLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        unsigned int v18 = [*(id *)(a1 + 32) domainName];
        uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 144);
        uint64_t v20 = *a3;
        *(_DWORD *)long long buf = 138544130;
        uint64_t v31 = v18;
        __int16 v32 = 2112;
        __int16 v33 = v6;
        __int16 v34 = 2112;
        uint64_t v35 = v19;
        __int16 v36 = 2112;
        uint64_t v37 = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "=domain-engine= %{public}@: Failed checking for asset %@ in depot %@: %@", buf, 0x2Au);

        uint64_t v17 = [*(id *)(a1 + 32) domainName];
LABEL_18:
        _MBLog();
        uint64_t v9 = 0;
LABEL_19:

LABEL_27:
        goto LABEL_28;
      }
    }
    uint64_t v9 = 0;
    goto LABEL_27;
  }
  unint64_t v7 = MBGetDefaultLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = [*(id *)(a1 + 32) domainName];
    *(_DWORD *)long long buf = 138543362;
    uint64_t v31 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "=domain-engine= %{public}@: Cancelled downloading ", buf, 0xCu);

    BOOL v26 = [*(id *)(a1 + 32) domainName];
    _MBLog();
  }
  uint64_t v9 = 0;
LABEL_28:

  return v9;
}

id sub_1002974C4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestoreDomainEngine _placeDirectories:]_block_invoke", "MBRestoreDomainEngine.m", 455, "restorable");
  }
  if (!a3) {
    __assert_rtn("-[MBRestoreDomainEngine _placeDirectories:]_block_invoke", "MBRestoreDomainEngine.m", 456, "enumerationError");
  }
  unint64_t v6 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002975C0;
  v10[3] = &unk_100413F60;
  void v10[4] = v6;
  id v11 = v5;
  id v7 = v5;
  id v8 = [v6 _restoreRestorable:v7 error:a3 actionBlock:v10];

  return v8;
}

id sub_1002975C0(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("-[MBRestoreDomainEngine _placeDirectories:]_block_invoke_2", "MBRestoreDomainEngine.m", 459, "restoreError");
  }
  uint64_t v2 = *(void *)(a1 + 40);
  unsigned int v3 = *(void **)(*(void *)(a1 + 32) + 168);
  return _[v3 placeWithDirectory:v2 error:a2];
}

id sub_10029772C(uint64_t a1, void *a2, uint64_t a3, char a4, void *a5, char a6, uint64_t a7)
{
  id v13 = a2;
  id v14 = a5;
  if (!v13) {
    __assert_rtn("-[MBRestoreDomainEngine _placeAssets:]_block_invoke", "MBRestoreDomainEngine.m", 476, "restorable");
  }
  if (!v14) {
    __assert_rtn("-[MBRestoreDomainEngine _placeAssets:]_block_invoke", "MBRestoreDomainEngine.m", 477, "assetSignature");
  }
  if (!a7) {
    __assert_rtn("-[MBRestoreDomainEngine _placeAssets:]_block_invoke", "MBRestoreDomainEngine.m", 478, "enumerationError");
  }
  id v15 = *(void **)(a1 + 32);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  void v20[2] = sub_100297894;
  v20[3] = &unk_100417BF8;
  v20[4] = v15;
  id v21 = v13;
  char v24 = a4;
  id v22 = v14;
  uint64_t v23 = a3;
  char v25 = a6;
  id v16 = v14;
  id v17 = v13;
  id v18 = [v15 _restoreRestorable:v17 error:a7 actionBlock:v20];

  return v18;
}

id sub_100297894(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("-[MBRestoreDomainEngine _placeAssets:]_block_invoke_2", "MBRestoreDomainEngine.m", 481, "restoreError");
  }
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(char *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 65);
  id v7 = *(void **)(*(void *)(a1 + 32) + 168);
  return _[v7 placeAsset:v2 assetType:v4 compressionMethod:v3 assetSignature:v5 isHardlink:v6 error:a2];
}

id sub_100297A10(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  id v7 = a2;
  if (!v7) {
    __assert_rtn("-[MBRestoreDomainEngine _placeZeroByteFiles:]_block_invoke", "MBRestoreDomainEngine.m", 498, "restorable");
  }
  if (!a4) {
    __assert_rtn("-[MBRestoreDomainEngine _placeZeroByteFiles:]_block_invoke", "MBRestoreDomainEngine.m", 499, "enumerationError");
  }
  id v8 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100297B14;
  v12[3] = &unk_100417C48;
  v12[4] = v8;
  id v13 = v7;
  char v14 = a3;
  id v9 = v7;
  id v10 = [v8 _restoreRestorable:v9 error:a4 actionBlock:v12];

  return v10;
}

id sub_100297B14(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("-[MBRestoreDomainEngine _placeZeroByteFiles:]_block_invoke_2", "MBRestoreDomainEngine.m", 502, "restoreError");
  }
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 168);
  return _[v4 placeWithZeroByteFile:v2 isHardlink:v3 error:a2];
}

id sub_100297C88(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a4;
  if (!v9) {
    __assert_rtn("-[MBRestoreDomainEngine _placeSymlinks:]_block_invoke", "MBRestoreDomainEngine.m", 519, "restorable");
  }
  if (!v10) {
    __assert_rtn("-[MBRestoreDomainEngine _placeSymlinks:]_block_invoke", "MBRestoreDomainEngine.m", 520, "symlinkTarget");
  }
  if (!a5) {
    __assert_rtn("-[MBRestoreDomainEngine _placeSymlinks:]_block_invoke", "MBRestoreDomainEngine.m", 521, "enumerationError");
  }
  id v11 = *(void **)(a1 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100297DDC;
  v16[3] = &unk_100417C98;
  void v16[4] = v11;
  id v17 = v9;
  id v18 = v10;
  char v19 = a3;
  id v12 = v10;
  id v13 = v9;
  id v14 = [v11 _restoreRestorable:v13 error:a5 actionBlock:v16];

  return v14;
}

id sub_100297DDC(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("-[MBRestoreDomainEngine _placeSymlinks:]_block_invoke_2", "MBRestoreDomainEngine.m", 524, "restoreError");
  }
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 168);
  return _[v5 placeWithSymlink:v2 symlinkTarget:v3 isHardlink:v4 error:a2];
}

id sub_100297F54(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestoreDomainEngine _fixUpDirectoryAttributes:]_block_invoke", "MBRestoreDomainEngine.m", 541, "restorable");
  }
  if (!a3) {
    __assert_rtn("-[MBRestoreDomainEngine _fixUpDirectoryAttributes:]_block_invoke", "MBRestoreDomainEngine.m", 542, "enumerationError");
  }
  uint64_t v6 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100298050;
  v10[3] = &unk_100413F60;
  void v10[4] = v6;
  id v11 = v5;
  id v7 = v5;
  id v8 = [v6 _restoreRestorable:v7 error:a3 actionBlock:v10];

  return v8;
}

id sub_100298050(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("-[MBRestoreDomainEngine _fixUpDirectoryAttributes:]_block_invoke_2", "MBRestoreDomainEngine.m", 545, "restoreError");
  }
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 168);
  return _[v3 fixUpAttributesWithDirectory:v2 error:a2];
}

BOOL MBSFileExtendedAttributeReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      uint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          LODWORD(v6) = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v6) = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      int v12 = (unsigned __int16)(v6 >> 3);
      if (v12 == 2) {
        break;
      }
      if (v12 == 1)
      {
        String = (void *)PBReaderReadString();
        id v14 = &OBJC_IVAR___MBSFileExtendedAttribute__name;
LABEL_21:

        *(void *)(a1 + *v14) = String;
        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    String = (void *)PBReaderReadData();
    id v14 = &OBJC_IVAR___MBSFileExtendedAttribute__value;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id MBSanitizeError(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = +[MBError underlyingErrorFromCKCancelationError:v1];

    uint64_t v3 = [v2 domain];
    unsigned int v4 = [v3 isEqualToString:@"com.apple.appleaccount"];

    if (v4)
    {
      unsigned int v5 = [v2 localizedDescription];
      id v1 = +[MBError errorWithCode:305, v2, @"%@", v5 error format];
LABEL_52:

      goto LABEL_53;
    }
    CKXPCSuitableError();
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    if (+[MBError isError:v1 withCode:2])
    {
      uint64_t v6 = [v1 userInfo];
      unint64_t v7 = [v6 objectForKeyedSubscript:@"kMBUnderlyingErrorsKey"];

      if (v7)
      {
        if ([v7 count])
        {
          char v8 = [v7 firstObject];
          ((void (*)(void))MBSanitizeError)();
        }
        else
        {
          char v8 = [v1 localizedDescription];
          +[MBError errorWithCode:1, v1, @"%@", v8 error format];
        uint64_t v9 = };

        id v1 = (id)v9;
      }
    }
    if (+[MBError isCancelledError:v2]
      && [v2 code] != (id)202)
    {
      v50[0] = v2;
      v49[0] = NSUnderlyingErrorKey;
      v49[1] = NSLocalizedDescriptionKey;
      uint64_t v27 = [v2 localizedDescription];
      v50[1] = v27;
      uint64_t v28 = +[NSDictionary dictionaryWithObjects:v50 forKeys:v49 count:2];
      uint64_t v26 = +[NSError errorWithDomain:@"MBErrorDomain" code:202 userInfo:v28];
    }
    else
    {
      if (+[MBError isCKError:v1])
      {
        switch((unint64_t)[v1 code])
        {
          case 1uLL:
            uint64_t v31 = [v2 userInfo];
            uint64_t v27 = [v31 objectForKeyedSubscript:NSUnderlyingErrorKey];

            id v32 = [v27 code];
            uint64_t v33 = [v1 localizedDescription];
            __int16 v34 = (void *)v33;
            if (v32 == (id)3008) {
              uint64_t v35 = 105;
            }
            else {
              uint64_t v35 = 1;
            }
            uint64_t v26 = +[MBError errorWithCode:v35, @"%@", v33 format];

            goto LABEL_48;
          case 2uLL:
            memset(v41, 0, sizeof(v41));
            __int16 v36 = [v2 userInfo];
            uint64_t v37 = [v36 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];
            long long v38 = [v37 allValues];

            if ([v38 countByEnumeratingWithState:v41 objects:v48 count:16])
            {
              id v15 = **((id **)&v41[0] + 1);

              if (v15)
              {
                uint64_t v39 = MBSanitizeError(v15);
                goto LABEL_58;
              }
            }
            else
            {
            }
            id v15 = [v1 localizedDescription];
            uint64_t v39 = +[MBError errorWithCode:1, v1, @"%@", v15 error format];
LABEL_58:
            uint64_t v19 = v39;

LABEL_59:
            id v1 = (id)v19;
            break;
          case 3uLL:
            uint64_t v27 = [v1 localizedDescription];
            +[MBError errorWithCode:308, v1, @"%@", v27 error format];
            goto LABEL_47;
          case 4uLL:
            uint64_t v27 = [v1 localizedDescription];
            +[MBError errorWithCode:300, v1, @"%@", v27 error format];
            goto LABEL_47;
          case 6uLL:
            uint64_t v27 = [v1 localizedDescription];
            +[MBError errorWithCode:304, v1, @"%@", v27 error format];
            goto LABEL_47;
          case 7uLL:
          case 0x17uLL:
            int v10 = [v2 userInfo];
            id v11 = [v10 objectForKeyedSubscript:CKErrorRetryAfterKey];
            [v11 doubleValue];
            double v13 = v12;

            double v14 = 0.0;
            if (v13 >= 0.0) {
              double v14 = v13;
            }
            id v15 = +[NSNumber numberWithInt:(int)v14];
            v46[0] = NSLocalizedDescriptionKey;
            id v16 = [v1 localizedDescription];
            v46[1] = @"RetryAfter";
            v47[0] = v16;
            id v17 = [v15 stringValue];
            v47[1] = v17;
            id v18 = +[NSDictionary dictionaryWithObjects:v47 forKeys:v46 count:2];
            uint64_t v19 = +[NSError errorWithDomain:@"MBErrorDomain" code:17 userInfo:v18];

            goto LABEL_59;
          case 9uLL:
            uint64_t v27 = [v1 localizedDescription];
            +[MBError errorWithCode:305, v1, @"%@", v27 error format];
            goto LABEL_47;
          case 0x14uLL:
            uint64_t v27 = [v1 localizedDescription];
            +[MBError errorWithCode:202, v1, @"%@", v27 error format];
            goto LABEL_47;
          case 0x19uLL:
            uint64_t v27 = [v1 localizedDescription];
            +[MBError errorWithCode:303, v1, @"%@", v27 error format];
            goto LABEL_47;
          default:
            uint64_t v27 = [v1 localizedDescription];
            +[MBError errorWithCode:1, v1, @"%@", v27 error format];
            goto LABEL_47;
        }
        goto LABEL_50;
      }
      uint64_t v20 = [v1 domain];
      unsigned int v21 = [v20 isEqualToString:NSCocoaErrorDomain];

      if (v21)
      {
        if ((uint64_t)[v1 code] >= 4096 && (uint64_t)objc_msgSend(v1, "code") <= 4224)
        {
          id v22 = [v1 code];
          uint64_t v23 = 18;
          if (v22 == (id)4099) {
            uint64_t v23 = 20;
          }
          if (v22 == (id)4097) {
            uint64_t v24 = 19;
          }
          else {
            uint64_t v24 = v23;
          }
          char v25 = [v1 localizedDescription];
          uint64_t v26 = +[MBError errorWithCode:v24, v1, @"%@", v25 error format];

          goto LABEL_49;
        }
        if ([v1 code] != (id)640) {
          goto LABEL_50;
        }
        uint64_t v27 = [v1 localizedDescription];
        +[MBError errorWithCode:106, v1, @"%@", v27 error format];
      }
      else
      {
        char v29 = [v1 domain];
        unsigned int v30 = [v29 isEqualToString:PQLSqliteErrorDomain];

        if (!v30 || [v1 code] != (id)13)
        {
LABEL_50:
          unsigned int v5 = MBGetDefaultLog();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412546;
            id v43 = v2;
            __int16 v44 = 2112;
            id v45 = v1;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sanitized %@ to %@", buf, 0x16u);
            _MBLog();
          }
          goto LABEL_52;
        }
        uint64_t v27 = [v1 localizedDescription];
        +[MBError errorWithCode:105, v1, @"%@", v27 error format];
      }
      uint64_t v26 = LABEL_47:;
    }
LABEL_48:

LABEL_49:
    id v1 = (id)v26;
    goto LABEL_50;
  }
LABEL_53:
  return v1;
}

id MBSanitizeErrorWithDate(void *a1)
{
  id v1 = MBSanitizeError(a1);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = [v1 userInfo];
    unsigned int v4 = v3;
    if (!v3) {
      uint64_t v3 = &__NSDictionary0__struct;
    }
    id v5 = [v3 mutableCopy];

    uint64_t v6 = +[NSDate date];
    [v5 setObject:v6 forKeyedSubscript:@"kMBErrorDateKey"];

    unint64_t v7 = [v2 domain];
    char v8 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v7, [v2 code], v5);
  }
  else
  {
    char v8 = 0;
  }
  return v8;
}

id MBExtractFirstMBErrorOrCKError(void *a1)
{
  id v1 = a1;
  if (+[MBError isError:v1 withCode:2])
  {
    uint64_t v2 = [v1 userInfo];
    uint64_t v3 = [v2 objectForKeyedSubscript:@"kMBUnderlyingErrorsKey"];
  }
  else
  {
    unsigned int v4 = v1;
    if (!+[MBError isCKPartialFailureError:v1]) {
      goto LABEL_8;
    }
    uint64_t v2 = [v1 userInfo];
    id v5 = [v2 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];
    uint64_t v3 = [v5 allValues];
  }
  uint64_t v6 = [v3 firstObject];

  unsigned int v4 = v1;
  if (v6)
  {
    unsigned int v4 = [v3 firstObject];
  }
LABEL_8:

  return v4;
}

id MBSerializeErrors(void *a1, id *a2)
{
  id v3 = a1;
  if (!v3 || !a2) {
    __assert_rtn("MBSerializeErrors", "MBError+Helpers.m", 394, "originalError && firstError");
  }
  unsigned int v4 = v3;
  MBExtractFirstMBErrorOrCKError(v3);
  *a2 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = objc_opt_new();
  uint64_t v6 = [*a2 userInfo];
  unint64_t v7 = [v6 objectForKeyedSubscript:NSUnderlyingErrorKey];

  if ((unint64_t)[v5 count] <= 4 && v7 != 0)
  {
    do
    {
      uint64_t v9 = v7;
      int v10 = [v7 domain];
      id v11 = [v7 code];
      double v12 = [v7 localizedDescription];
      double v13 = +[NSString stringWithFormat:@"%@|%ld|%@", v10, v11, v12];

      [v5 addObject:v13];
      double v14 = [v7 userInfo];
      unint64_t v7 = [v14 objectForKeyedSubscript:NSUnderlyingErrorKey];
    }
    while ((unint64_t)[v5 count] <= 4 && v7);
  }

  return v5;
}

void sub_10029BCA8(id a1)
{
  qword_100482860 = objc_alloc_init(MBUserNotificationManager);
}

void sub_10029BE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10029BE24(uint64_t a1, uint64_t a2)
{
}

void sub_10029BE34(uint64_t a1)
{
}

id sub_10029BE40(uint64_t a1)
{
  return _[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) _setupIsDone];
}

id sub_10029C0A0(uint64_t a1)
{
  if (BYSetupAssistantNeedsToRun())
  {
    uint64_t v2 = MBGetDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Deferring block until end of setup.", v5, 2u);
      _MBLog();
    }
    return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "addObject:", objc_msgSend(*(id *)(a1 + 40), "copy"));
  }
  else
  {
    unsigned int v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return (id)v4();
  }
}

uint64_t sub_10029C7AC(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_mbNotificationForIdentifier:", objc_msgSend(*(id *)(a1 + 40), "identifier"));
  if (v2)
  {
    id v3 = v2;
    if (!objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "title"), "isEqual:", objc_msgSend(v2, "title"))
      || !objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "body"), "isEqual:", objc_msgSend(v3, "body"))
      || !objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "button"), "isEqual:", objc_msgSend(v3, "button")))
    {
      double v13 = MBGetDefaultLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = [*(id *)(a1 + 40) identifier];
        id v15 = [*(id *)(a1 + 40) title];
        id v16 = [*(id *)(a1 + 40) body];
        id v17 = [*(id *)(a1 + 40) button];
        id v18 = [*(id *)(a1 + 40) alternateButton];
        *(_DWORD *)long long buf = 138413314;
        id v47 = v14;
        __int16 v48 = 2112;
        id v49 = v15;
        __int16 v50 = 2112;
        id v51 = v16;
        __int16 v52 = 2112;
        id v53 = v17;
        __int16 v54 = 2112;
        id v55 = v18;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Updating alert %@: \"%@\", \"%@\", \"%@\", \"%@\"", buf, 0x34u);
        id v19 = [*(id *)(a1 + 40) identifier];
        id v20 = [*(id *)(a1 + 40) title];
        id v21 = [*(id *)(a1 + 40) body];
        id v44 = [*(id *)(a1 + 40) button];
        id v45 = [*(id *)(a1 + 40) alternateButton];
        id v42 = v20;
        id v43 = v21;
        id v41 = v19;
        _MBLog();
      }
      CFUserNotificationUpdate((CFUserNotificationRef)objc_msgSend(v3, "cfUserNotification", v41, v42, v43, v44, v45), 0.0, 2uLL, (CFDictionaryRef)objc_msgSend(*(id *)(a1 + 32), "_propertiesForMBUserNotification:", *(void *)(a1 + 40)));
      [*(id *)(*(void *)(a1 + 32) + 40) removeObject:v3];
      [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
      goto LABEL_10;
    }
    unsigned int v4 = MBGetDefaultLog();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
LABEL_10:
      uint64_t result = *(void *)(a1 + 56);
      if (result) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(result + 16))(result, 0, v5, v6, v7);
      }
      return result;
    }
    id v8 = [*(id *)(a1 + 40) identifier];
    id v9 = [*(id *)(a1 + 40) title];
    id v10 = [*(id *)(a1 + 40) body];
    id v11 = [*(id *)(a1 + 40) button];
    id v12 = [*(id *)(a1 + 40) alternateButton];
    *(_DWORD *)long long buf = 138413314;
    id v47 = v8;
    __int16 v48 = 2112;
    id v49 = v9;
    __int16 v50 = 2112;
    id v51 = v10;
    __int16 v52 = 2112;
    id v53 = v11;
    __int16 v54 = 2112;
    id v55 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unchanged alert %@: \"%@\", \"%@\", \"%@\", \"%@\"", buf, 0x34u);
    [*(id *)(a1 + 40) identifier];
    [*(id *)(a1 + 40) title];
    [*(id *)(a1 + 40) body];
    [*(id *)(a1 + 40) button];
    [*(id *)(a1 + 40) alternateButton];
LABEL_27:
    _MBLog();
    goto LABEL_10;
  }
  if ([*(id *)(a1 + 32) _shouldInformUserWithNotification:*(void *)(a1 + 40) account:*(void *)(a1 + 48)])
  {
    [*(id *)(a1 + 32) _updateDidInformUserWithNotification:*(void *)(a1 + 40) account:*(void *)(a1 + 48)];
    uint64_t v23 = MBGetDefaultLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 40) identifier];
      id v25 = [*(id *)(a1 + 40) title];
      id v26 = [*(id *)(a1 + 40) body];
      id v27 = [*(id *)(a1 + 40) button];
      id v28 = [*(id *)(a1 + 40) alternateButton];
      *(_DWORD *)long long buf = 138413314;
      id v47 = v24;
      __int16 v48 = 2112;
      id v49 = v25;
      __int16 v50 = 2112;
      id v51 = v26;
      __int16 v52 = 2112;
      id v53 = v27;
      __int16 v54 = 2112;
      id v55 = v28;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Creating alert %@: \"%@\", \"%@\", \"%@\", \"%@\"", buf, 0x34u);
      id v29 = [*(id *)(a1 + 40) identifier];
      id v30 = [*(id *)(a1 + 40) title];
      id v31 = [*(id *)(a1 + 40) body];
      id v44 = [*(id *)(a1 + 40) button];
      id v45 = [*(id *)(a1 + 40) alternateButton];
      id v42 = v30;
      id v43 = v31;
      id v41 = v29;
      _MBLog();
    }
    id v32 = (__CFUserNotification *)objc_msgSend(*(id *)(a1 + 32), "_createCFUserNotificationFromMBUserNotification:", *(void *)(a1 + 40), v41, v42, v43, v44, v45);
    if (!v32)
    {
      char v40 = MBGetDefaultLog();
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_10;
      }
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Unable to create notification", buf, 2u);
      goto LABEL_27;
    }
    uint64_t v33 = v32;
    RunLoopSource = CFUserNotificationCreateRunLoopSource(0, v32, (CFUserNotificationCallBack)sub_10029CD84, 0);
    Main = CFRunLoopGetMain();
    CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
    NSMapInsert(*(NSMapTable **)(*(void *)(a1 + 32) + 32), v33, RunLoopSource);
    CFRelease(RunLoopSource);
    [*(id *)(a1 + 40) setCFUserNotification:v33];
    [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
    if ([*(id *)(a1 + 40) displayedBlock]) {
      (*((void (**)(void))[*(id *)(a1 + 40) displayedBlock] + 2))();
    }
    [+[MBDaemon sharedDaemon] holdWorkAssertion:*(void *)(a1 + 64)];
    uint64_t result = *(void *)(a1 + 56);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16))(result, 1, v36, v37, v38);
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 56);
    if (result)
    {
      uint64_t v39 = *(uint64_t (**)(void))(result + 16);
      return v39();
    }
  }
  return result;
}

id sub_10029CD84(uint64_t a1, uint64_t a2)
{
  id v4 = +[MBUserNotificationManager sharedManager];
  return _[v4 _userDidRespondToNotification:a1 withFlags:a2];
}

id sub_10029CE44(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _mbNotificationForIdentifier:*(void *)(a1 + 40)];
  if (result)
  {
    id v3 = result;
    id v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Canceling alert %@", buf, 0xCu);
      uint64_t v6 = *(void *)(a1 + 40);
      _MBLog();
    }
    CFUserNotificationCancel((CFUserNotificationRef)objc_msgSend(v3, "cfUserNotification", v6));
    return [*(id *)(a1 + 32) clearDidInformUserWithNotificationIdentifier:*(void *)(a1 + 40) account:*(void *)(a1 + 48)];
  }
  return result;
}

void sub_10029D71C(id a1)
{
  qword_100482870 = objc_alloc_init(MBNotificationCenter);
}

void sub_10029DA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10029DA8C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:*(void *)(a1 + 40)];
  if (v2)
  {
    uint64_t result = (uint64_t)[v2 intValue];
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  }
  else
  {
    for (char i = 1; ; char i = 0)
    {
      char v5 = i;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = notify_register_check((const char *)objc_msgSend(*(id *)(a1 + 40), "UTF8String", v9, v10), (int *)(*(void *)(*(void *)(a1 + 48) + 8)+ 24));
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
        break;
      }
      uint64_t v6 = MBGetDefaultLog();
      uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (result)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        uint64_t v8 = *(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v12 = v7;
        __int16 v13 = 2048;
        uint64_t v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "notify_register_check(%@) failed: %lu", buf, 0x16u);
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = *(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
        uint64_t result = _MBLog();
      }
      if ((v5 & 1) == 0) {
        return result;
      }
    }
    return (uint64_t)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)), *(void *)(a1 + 40));
  }
  return result;
}

void sub_10029EF1C(uint64_t a1)
{
}

void sub_10029F128(uint64_t a1, uint64_t a2)
{
}

void sub_10029F138(uint64_t a1)
{
}

uint64_t sub_10029F144(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(*(void *)(*(void *)(result + 40) + 8)
                                                                                        + 40)
                                                                            + 9);
  return result;
}

void sub_10029F41C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = MBGetDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reachability changed, flags:0x%lx", buf, 0xCu);
    _MBLog();
  }
  id v7 = a3;
  [a3 _reachabilityCallback:a2];
}

uint64_t sub_10029F50C(uint64_t a1)
{
  SCNetworkReachabilityFlags flags = 0;
  int v2 = SCNetworkReachabilityGetFlags(*(SCNetworkReachabilityRef *)(*(void *)(a1 + 32) + 16), &flags);
  id v3 = MBGetDefaultLog();
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v9 = flags;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Initial reachability flags: 0x%lx", buf, 0xCu);
      uint64_t v6 = flags;
      _MBLog();
    }
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "_reachabilityCallback:", flags, v6);
  }
  else
  {
    uint64_t result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to fetch the reachability flags", buf, 2u);
      return _MBLog();
    }
  }
  return result;
}

int64_t sub_1002A1138(id a1, id a2, id a3)
{
  id v4 = [a2 relativePath];
  id v5 = [a3 relativePath];
  return (int64_t)[v4 compare:v5];
}

uint64_t MBSFileReferenceReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        LODWORD(v6) = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    int v12 = (unsigned __int16)(v6 >> 3);
    if (v12 == 2)
    {
      Data = (void *)PBReaderReadData();

      *(void *)(a1 + _Block_object_dispose(&STACK[0x2D0], 8) = Data;
    }
    else if (v12 == 1)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          goto LABEL_30;
        }
        v13 += 7;
        BOOL v9 = v14++ >= 9;
        if (v9)
        {
          LODWORD(v15) = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v15) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v15;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1002A4624(uint64_t a1)
{
  fwrite("\b\b", 2uLL, 1uLL, __stderrp);
  kill(*(_DWORD *)(a1 + 40), 9);
  int v2 = [*(id *)(a1 + 32) redirectStderrToFileAtPath];
  if ([v2 length])
  {
  }
  else
  {
    unsigned int v3 = [*(id *)(a1 + 32) redirectStderrToFileDescriptor];

    if (v3 == -1) {
      return;
    }
  }
  char v4 = [*(id *)(a1 + 32) redirectStderrToFileAtPath];

  unsigned int v5 = *(void **)(a1 + 32);
  if (v4)
  {
    uint64_t v6 = [v5 redirectStderrToFileAtPath];
    if (v6)
    {
LABEL_6:
      id v10 = v6;
      unint64_t v7 = fopen((const char *)[v10 fileSystemRepresentation], "a+");
      if (v7)
      {
        char v8 = v7;
        fwrite("\n\n === Aborted by user", 0x16uLL, 1uLL, v7);
        fclose(v8);
      }
      uint64_t v6 = v10;
    }
  }
  else if ([v5 redirectStderrToFileDescriptor] == 1 {
         && ([*(id *)(a1 + 32) redirectStdoutToFileAtPath],
  }
             BOOL v9 = objc_claimAutoreleasedReturnValue(),
             v9,
             v9))
  {
    uint64_t v6 = [*(id *)(a1 + 32) redirectStdoutToFileAtPath];
    if (v6) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
}

void sub_1002A48D8(id a1)
{
  qword_100482880 = objc_alloc_init(MBRestoreFailuresManager);
}

id sub_1002A4C80(uint64_t a1, void *a2)
{
  return _[a2 addRestoreFailure:*(void *)(a1 + 32)];
}

void sub_1002A4D5C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1002A4D74(uint64_t a1, uint64_t a2)
{
}

void sub_1002A4D84(uint64_t a1)
{
}

id sub_1002A4D90(void *a1, void *a2)
{
  id result = objc_msgSend(a2, "restoreFailuresForDataClass:assetType:range:", a1[4], a1[5], a1[7], a1[8]);
  *(void *)(*(void *)(a1[6] + 8) + 40) = result;
  return result;
}

void sub_1002A4E74(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_1002A4E8C(void *a1, void *a2)
{
  id result = [a2 countOfRestoreFailuresForDataclass:a1[4] assetType:a1[5]];
  *(void *)(*(void *)(a1[6] + 8) + 24) = result;
  return result;
}

void MBExit(int a1)
{
  int v2 = +[NSProcessInfo processInfo];
  unsigned int v3 = [v2 processName];

  if ([v3 isEqualToString:@"backupd"]) {
    MBTearDownBackupd();
  }
  if (a1)
  {
    char v4 = MBGetDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v6 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MBExit(%d)", buf, 8u);
      _MBLog();
    }
  }
  _MBLogFlushDeprecated();
  exit(a1);
}

id MBTearDownBackupd()
{
  MBRemoveTemporaryDirectory();
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v0 = MBD2DSnapshotMountPoints();
  id v1 = [v0 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = *(void *)v16;
    do
    {
      char v4 = 0;
      do
      {
        if (*(void *)v16 != v3) {
          objc_enumerationMutation(v0);
        }
        +[MBFileSystemManager unmount:*(void *)(*((void *)&v15 + 1) + 8 * (void)v4) error:0];
        char v4 = (char *)v4 + 1;
      }
      while (v2 != v4);
      id v2 = [v0 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v2);
  }

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  unsigned int v5 = MBiCloudUserSessionSnapshotMountPoints();
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v19 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      BOOL v9 = 0;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        +[MBFileSystemManager unmount:error:](MBFileSystemManager, "unmount:error:", *(void *)(*((void *)&v11 + 1) + 8 * (void)v9), 0, (void)v11);
        BOOL v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v19 count:16];
    }
    while (v7);
  }

  +[MBPersona removeTemporaryDirectoriesForAllPersonae];
  return +[MBPersona removeBackupSnapshotsForAllPersonae];
}

CFStringRef MBStringForFileCompressionMethod(unsigned int a1)
{
  if (a1 > 3) {
    return @"default";
  }
  else {
    return *(&off_100417F20 + (int)a1);
  }
}

void sub_1002A5FF4(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) encodingMethod];
  if (v2 - 2 < 2)
  {
    char v4 = *(void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 48) == 1) {
      [v4 _archive];
    }
    else {
      [v4 _unarchive];
    }
  }
  else
  {
    if (v2 == -1)
    {
      [*(id *)(a1 + 32) setEncodingMethod:1];
    }
    else if (v2 != 1)
    {
      uint64_t v3 = +[MBError errorWithCode:format:](MBError, "errorWithCode:format:", 1, @"Unknown encoding method %ld", (int)[*(id *)(a1 + 32) encodingMethod]);
      goto LABEL_13;
    }
    unsigned int v5 = *(void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 48) == 1) {
      [v5 _compress];
    }
    else {
      [v5 _decompress];
    }
  uint64_t v3 = };
LABEL_13:
  id v6 = (id)v3;
  [*(id *)(a1 + 32) _finishWithError:v3];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

BOOL sub_1002A6788(int a1, int *a2, void *a3)
{
  if (!a2) {
    __assert_rtn("makeCompressionAlgorithmFromFileCompressionMethod", "MBFileEncodingTask.m", 171, "algorithm");
  }
  *a2 = 0;
  switch(a1)
  {
    case -1:
    case 2:
      id v4 = 0;
      int v5 = 2049;
      goto LABEL_9;
    case 1:
      id v4 = 0;
      int v5 = 517;
      goto LABEL_9;
    case 3:
      id v4 = 0;
      int v5 = 774;
LABEL_9:
      *a2 = v5;
      BOOL v6 = 1;
      break;
    default:
      id v4 = +[MBError errorWithCode:1, @"Invalid file compression method %ld", a1 format];
      BOOL v6 = v4 == 0;
      if (a3 && v4)
      {
        id v4 = v4;
        BOOL v6 = 0;
        *a3 = v4;
      }
      break;
  }

  return v6;
}

uint64_t sub_1002A6890(unsigned int a1, char *a2, void *a3)
{
  if (!a2) {
    __assert_rtn("makeFileCompressionMethodFromCompressionAlgorithm", "MBFileEncodingTask.m", 203, "compressionMethod");
  }
  *a2 = 0;
  switch(a1)
  {
    case 0x205u:
      id v4 = 0;
      uint64_t v6 = 1;
      *a2 = 1;
      break;
    case 0x306u:
      id v4 = 0;
      char v5 = 3;
      goto LABEL_8;
    case 0x801u:
      id v4 = 0;
      char v5 = 2;
LABEL_8:
      *a2 = v5;
LABEL_9:
      uint64_t v6 = 1;
      break;
    default:
      id v4 = +[MBError errorWithCode:1, @"Invalid compression algorithm %ld", a1 format];
      if (!v4)
      {
        if (*a2 == 255 || !*a2) {
          __assert_rtn("makeFileCompressionMethodFromCompressionAlgorithm", "MBFileEncodingTask.m", 227, "*compressionMethod != MBFileCompressionMethodUnspecified && *compressionMethod != MBFileCompressionMethodDefault");
        }
        id v4 = 0;
        goto LABEL_9;
      }
      if (a3)
      {
        id v4 = v4;
        uint64_t v6 = 0;
        *a3 = v4;
      }
      else
      {
        uint64_t v6 = 0;
      }
      break;
  }

  return v6;
}

void sub_1002A8548(id a1)
{
  NSTemporaryDirectory();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v3 stringByAppendingPathComponent:@"tmpbackupXXXXXXXX"];
  unsigned int v2 = (void *)qword_100482890;
  qword_100482890 = v1;
}

void sub_1002A8FD0(id a1)
{
  qword_1004828A0 = (uint64_t)dispatch_semaphore_create(2);
  _objc_release_x1();
}

void sub_1002A9008(id a1)
{
  uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency((dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_UTILITY, 0);

  dispatch_queue_t v2 = dispatch_queue_create("com.apple.backupd.encoding", attr);
  id v3 = (void *)qword_1004828B0;
  qword_1004828B0 = (uint64_t)v2;
}

void sub_1002A9090(id a1)
{
  qword_1004828C0 = (uint64_t)dispatch_semaphore_create(1);
  _objc_release_x1();
}

void sub_1002A90C8(id a1)
{
  uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency((dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_UTILITY, 0);

  dispatch_queue_t v2 = dispatch_queue_create("com.apple.backupd.decoding", attr);
  id v3 = (void *)qword_1004828D0;
  qword_1004828D0 = (uint64_t)v2;
}

void MBCKRegisterLongLivedOperator(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (qword_1004828E8 != -1) {
    dispatch_once(&qword_1004828E8, &stru_100417F40);
  }
  id v5 = (id)qword_1004828E0;
  uint64_t v6 = [v5 objectForKeyedSubscript:v3];

  if (v6)
  {
    id v7 = MBGetDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "MBCKLongLivedOperator: already registered operator with identifier %@", buf, 0xCu);
      id v8 = v3;
      _MBLog();
    }
  }
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, v3, v8);
}

void sub_1002A9290(id a1)
{
  qword_1004828E0 = +[NSMutableDictionary dictionary];
  _objc_release_x1();
}

__CFString *MBStringForContainerType(int a1)
{
  if ((a1 - 1) > 4) {
    return 0;
  }
  else {
    return off_1004180B8[a1 - 1];
  }
}

uint64_t sub_1002A9A50(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"Data/Application"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"Data/PluginKitPlugin"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"Shared/AppGroup"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"System/Data"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"System/Shared"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id sub_1002AA7CC(void *a1)
{
  id v1 = [a1 stringByStandardizingPath];
  uint64_t v2 = [v1 stringByDeletingLastPathComponent];
  id v3 = objc_msgSend(v1, "substringFromIndex:", (char *)objc_msgSend(v2, "length") + 1);
  id v4 = [v3 stringByAppendingPathComponent:@"PlaceholderEntitlements.plist"];

  return v4;
}

id sub_1002AB09C()
{
  if (qword_100482938 != -1) {
    dispatch_once(&qword_100482938, &stru_100417FF8);
  }
  id v0 = (void *)qword_100482930;
  return v0;
}

id sub_1002AB0F0()
{
  if (qword_100482948 != -1) {
    dispatch_once(&qword_100482948, &stru_100418018);
  }
  id v0 = (void *)qword_100482940;
  return v0;
}

id sub_1002AB144()
{
  if (qword_100482958 != -1) {
    dispatch_once(&qword_100482958, &stru_100418038);
  }
  id v0 = (void *)qword_100482950;
  return v0;
}

void sub_1002AB7D8(id a1)
{
  qword_1004828F0 = +[NSSet setWithObjects:kCFBundleIdentifierKey, @"ContainerContentClass", kCFBundleVersionKey, @"Path", @"SafeHarborDockingDate", 0];
  _objc_release_x1();
}

void sub_1002AB85C(id a1)
{
  qword_100482900 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", &stru_100418BA8, 0);
  _objc_release_x1();
}

void sub_1002AB8B0(id a1)
{
  sub_1002AB0F0();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v1 = +[NSSet setWithObjects:@".com.apple.mobile_container_manager.metadata.plist", @"SystemData/com.apple.AuthenticationServices", @"Library/SplashBoard", 0];
  uint64_t v2 = [v4 setByAddingObjectsFromSet:v1];
  id v3 = (void *)qword_100482910;
  qword_100482910 = v2;
}

void sub_1002AB94C(id a1)
{
  sub_1002AB144();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v1 = +[NSSet setWithObjects:@"SystemData/com.apple.AuthenticationServices", @"Library/SplashBoard", @"Library/Caches/NeverRestore", 0];
  uint64_t v2 = [v4 setByAddingObjectsFromSet:v1];
  id v3 = (void *)qword_100482920;
  qword_100482920 = v2;
}

void sub_1002AB9E8(id a1)
{
  qword_100482930 = +[NSSet setWithObjects:@"Documents", @"Library", @"GeoJSON", 0];
  _objc_release_x1();
}

void sub_1002ABA50(id a1)
{
  qword_100482940 = +[NSSet setWithObjects:@"Library/Caches", @"Library/SyncedPreferences", @"Library/Saved Application State", @"SystemData/com.apple.AuthenticationServices", @"Library/SplashBoard", @"SystemData/com.apple.chrono", 0];
  _objc_release_x1();
}

void sub_1002ABAD4(id a1)
{
  qword_100482950 = +[NSSet setWithObjects:@"NewsstandArtwork", @"Library/Saved Application State", @"SystemData/com.apple.AuthenticationServices", @"Library/SplashBoard", @"SystemData/com.apple.chrono", 0];
  _objc_release_x1();
}

void sub_1002ABB50(id a1)
{
  qword_100482960 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", &stru_100418BA8, 0);
  _objc_release_x1();
}

void sub_1002ABBA4(id a1)
{
  id v4 = sub_1002AB0F0();
  id v1 = +[NSSet setWithObjects:@".com.apple.mobile_container_manager.metadata.plist", @"Library/Saved Application State", @"SystemData/com.apple.AuthenticationServices", @"Library/SplashBoard", 0];
  uint64_t v2 = [v4 setByAddingObjectsFromSet:v1];
  id v3 = (void *)qword_100482970;
  qword_100482970 = v2;
}

void sub_1002ABC48(id a1)
{
  sub_1002AB144();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v1 = +[NSSet setWithObjects:@"Library/Saved Application State", @"SystemData/com.apple.AuthenticationServices", @"Library/SplashBoard", 0];
  uint64_t v2 = [v4 setByAddingObjectsFromSet:v1];
  id v3 = (void *)qword_100482980;
  qword_100482980 = v2;
}

uint64_t MBCKStringForRestoreState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_100418110 + a1 - 1);
  }
}

void sub_1002AE09C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v12 = 0;
  id v3 = [v2 _startStreamWithError:&v12];
  id v4 = v12;
  if (v3)
  {
    [*(id *)(a1 + 32) setStreamRef:v3];
    dispatch_group_t v5 = dispatch_group_create();
    [*(id *)(a1 + 32) setGroup:v5];

    uint64_t v6 = [*(id *)(a1 + 32) group];
    dispatch_group_enter(v6);

    id v7 = [*(id *)(a1 + 32) group];
    id v8 = [*(id *)(a1 + 32) eventQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002AE1DC;
    block[3] = &unk_1004124D8;
    BOOL v9 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v11 = v9;
    dispatch_group_notify(v7, v8, block);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1002AE1DC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) cancelled])
  {
    uint64_t v2 = +[MBError errorWithCode:202 format:@"Event stream cancelled"];
  }
  else
  {
    uint64_t v2 = 0;
  }
  id v4 = (id)v2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v3 = self;
}

id sub_1002AE2F8(uint64_t a1)
{
  uint64_t v2 = MBGetDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cancelling stream %@", buf, 0xCu);
    _MBLog();
  }

  [*(id *)(a1 + 32) setCancelled:1];
  return [*(id *)(a1 + 32) _cancel];
}

void sub_1002AE920(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v13 = a2;
  if ([v13 streamRef])
  {
    id v10 = +[NSDate now];
    [v13 setDateWhenCallbackWasFired:v10];

    id v11 = [v13 eventHandler];
    char v12 = v11[2](v11, a3, a4, a5, a6);

    if ((v12 & 1) == 0) {
      [v13 _cancel];
    }
  }
}

void sub_1002AEF74(uint64_t a1)
{
  if (!*(_DWORD *)(*(void *)(a1 + 32) + 8))
  {
    uint64_t v2 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"backupd-%@", *(void *)(*(void *)(a1 + 32) + 16)];
    IOPMAssertionID AssertionID = 0;
    dispatch_group_t v5 = [*(id *)(a1 + 32) description];
    IOReturn v6 = IOPMAssertionCreateWithDescription(@"NoIdleSleepAssertion", v2, v5, 0, 0, *(CFTimeInterval *)(*(void *)(a1 + 32) + 24), @"TimeoutActionTurnOff", &AssertionID);

    if (v6)
    {
      id v7 = MBGetDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 16);
        *(_DWORD *)long long buf = 138412802;
        CFStringRef v13 = @"NoIdleSleepAssertion";
        __int16 v14 = 2112;
        uint64_t v15 = v8;
        __int16 v16 = 1024;
        IOReturn v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to take \"%@\", n:\"%@\" - IOPMAssertionCreateWithName() returned %#x", buf, 0x1Cu);
LABEL_9:
        _MBLog();
      }
    }
    else
    {
      *(_DWORD *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x2D0], 8) = AssertionID;
      id v7 = MBGetDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(v9 + 16);
        LODWORD(v9) = *(_DWORD *)(v9 + 8);
        *(_DWORD *)long long buf = 138412802;
        CFStringRef v13 = @"NoIdleSleepAssertion";
        __int16 v14 = 2112;
        uint64_t v15 = v10;
        __int16 v16 = 1024;
        IOReturn v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Preventing sleep with \"%@\", n:\"%@\", id:%i", buf, 0x1Cu);
        goto LABEL_9;
      }
    }

    goto LABEL_11;
  }
  MBGetDefaultLog();
  uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 16);
    LODWORD(v3) = *(_DWORD *)(v3 + 8);
    *(_DWORD *)long long buf = 138412802;
    CFStringRef v13 = @"NoIdleSleepAssertion";
    __int16 v14 = 2112;
    uint64_t v15 = v4;
    __int16 v16 = 1024;
    IOReturn v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v2, OS_LOG_TYPE_INFO, "Already holding \"%@\", n:\"%@\", id:%i", buf, 0x1Cu);
    _MBLog();
  }
LABEL_11:
}

id sub_1002AF460(uint64_t a1)
{
  return [*(id *)(a1 + 32) _drop];
}

uint64_t MBGetChargingType()
{
  CFDictionaryRef v0 = IOPSCopyExternalPowerAdapterDetails();
  CFDictionaryRef v1 = v0;
  if (v0)
  {
    uint64_t v2 = [(__CFDictionary *)v0 objectForKeyedSubscript:@"IsWireless"];
    if ([v2 BOOLValue]) {
      uint64_t v3 = 3;
    }
    else {
      uint64_t v3 = 2;
    }
  }
  else
  {
    uint64_t v3 = 1;
  }

  return v3;
}

uint64_t MBSetChargeLimit()
{
  int v0 = IOPSLimitBatteryLevelRegister();
  if (v0)
  {
    int v1 = v0;
    uint64_t v2 = MBGetDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v7 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to register for charge limit: %u", buf, 8u);
LABEL_7:
      _MBLog();
    }
  }
  else
  {
    int v3 = IOPSLimitBatteryLevel();
    if (!v3) {
      return 0;
    }
    int v4 = v3;
    uint64_t v2 = MBGetDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to set charge limit: %u", buf, 8u);
      goto LABEL_7;
    }
  }

  return 0;
}

void MBCancelChargeLimit()
{
  int v0 = IOPSLimitBatteryLevelCancel();
  int v1 = MBGetDefaultLog();
  uint64_t v2 = v1;
  if (v0)
  {
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v4 = v0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to cancel charge limit: %u", buf, 8u);
LABEL_6:
      _MBLog();
    }
  }
  else if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cancelled charge limit", buf, 2u);
    goto LABEL_6;
  }
}

CFStringRef MBStringForChargingType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"unspecified";
  }
  else {
    return *(&off_100418160 + a1 - 1);
  }
}

int64_t sub_1002B0248(id a1, id a2, id a3)
{
  return -(uint64_t)[a2 compare:a3];
}

int64_t sub_1002B0268(id a1, id a2, id a3)
{
  return -(uint64_t)[a2 compare:a3];
}

void sub_1002B0C10(_Unwind_Exception *a1)
{
}

id sub_1002B0E10(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = a2;
  id v9 = a1;
  id v10 = [objc_alloc((Class)CKCodeOperation) initWithServiceName:v8 functionName:v7 responseClass:a4];

  [v10 setRequest:v9];
  return v10;
}

void sub_1002B0EB0(void *a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002B13F4;
  v4[3] = &unk_1004181C0;
  id v5 = a2;
  id v3 = v5;
  [a1 setCodeOperationCompletionBlock:v4];
}

void sub_1002B13F4(uint64_t a1, void *a2, void *a3)
{
  unint64_t v7 = a2;
  uint64_t v5 = a3;
  if (!(v7 | v5))
  {
    uint64_t v5 = +[NSError errorWithDomain:@"CKCodeDeser" code:1 userInfo:&__NSDictionary0__struct];
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v6, v7, v5);
  }
}

void sub_1002B216C(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

id sub_1002B21B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _ingest:*(void *)(a1 + 40) into:*(void *)(a1 + 48) error:a3];
}

id sub_1002B2A80(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB atcRestorableForAbsolutePath:error:domainProvider:restorableAccessor:]_block_invoke", "MBRestorePlanDB.m", 803, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB atcRestorableForAbsolutePath:error:domainProvider:restorableAccessor:]_block_invoke", "MBRestorePlanDB.m", 804, "accessorError");
  }
  uint64_t v6 = v5;
  objc_msgSend(v5, "fetchSQL:", @"\n SELECT Domains.domain, \nRestorables.domainID, \ninode, size, birth, modified, statusChanged, userID, groupID, mode, flags, protectionClass, \nxattrs, \nrelativePath, \nrestorableID\n FROM   Restorables\n  JOIN  Domains ON\n       (Restorables.domainID = Domains.domainID)\n WHERE  Restorables.absolutePath = %@;",
  unint64_t v7 = *(void *)(a1 + 32));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1002B2BC8;
  v12[3] = &unk_100418210;
  id v15 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 40);
  id v16 = v8;
  uint64_t v14 = v9;
  id v10 = [v7 enumerateWithError:a3 block:v12];

  return v10;
}

id sub_1002B2BC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB atcRestorableForAbsolutePath:error:domainProvider:restorableAccessor:]_block_invoke_2", "MBRestorePlanDB.m", 818, "rs");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB atcRestorableForAbsolutePath:error:domainProvider:restorableAccessor:]_block_invoke_2", "MBRestorePlanDB.m", 819, "enumeratorError");
  }
  uint64_t v6 = v5;
  unint64_t v7 = [v5 objectOfClass:objc_opt_class() atIndex:0];
  int v24 = 2;
  id v8 = [v6 unsignedLongLongAtIndex:1];
  if (v7)
  {
    id v9 = v8;
    id v10 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    if (v10)
    {
      id v11 = [v6 fileWithDomain:v10 fromIndex:&v24];
      ++v24;
      id v12 = objc_msgSend(v6, "unsignedLongLongAtIndex:");
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
      if ((unint64_t)(v13 - 1) > 2)
      {
        id v21 = objc_msgSend(*(id *)(a1 + 40), "_recordRestorableState:restorableID:domainID:inode:restoreType:error:", v13, v12, v9, objc_msgSend(v11, "inodeNumber"), 2, a3);
      }
      else
      {
        uint64_t v14 = MBGetDefaultLog();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
        {
          uint64_t v23 = MBRestorableStateToString(v13);
          *(_DWORD *)long long buf = 138412546;
          id v26 = v23;
          __int16 v27 = 2112;
          id v28 = v11;
          _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Invalid restorable state (%@) for %@ when returning atc restorable by absolute path", buf, 0x16u);
        }
        id v15 = MBRestorableStateToString(v13);
        sub_1001E70C4(0, a3, @"Invalid restorable state (%@) for %@ when returning atc restorable by absolute path", v16, v17, v18, v19, v20, (uint64_t)v15);

        id v21 = 0;
      }
    }
    else
    {
      +[MBError errorWithCode:244 path:*(void *)(a1 + 32) format:@"No domain found for absolute path"];
      id v21 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v21 = 0;
  }

  return v21;
}

BOOL sub_1002B32A4(uint64_t a1, void *a2, uint64_t *a3)
{
  id v21 = a2;
  if (!v21) {
    __assert_rtn("-[MBRestorePlanDB _atcPathsByDomainNameForPaths:error:]_block_invoke", "MBRestorePlanDB.m", 894, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB _atcPathsByDomainNameForPaths:error:]_block_invoke", "MBRestorePlanDB.m", 895, "accessorError");
  }
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v37 objects:v47 count:16];
  if (!v4) {
    goto LABEL_31;
  }
  uint64_t v5 = *(void *)v38;
  do
  {
    for (char i = 0; i != v4; char i = (char *)i + 1)
    {
      if (*(void *)v38 != v5) {
        objc_enumerationMutation(obj);
      }
      uint64_t v7 = *(void *)(*((void *)&v37 + 1) + 8 * i);
      uint64_t v31 = 0;
      id v32 = &v31;
      uint64_t v33 = 0x3032000000;
      __int16 v34 = sub_1002B3794;
      uint64_t v35 = sub_1002B37A4;
      id v36 = 0;
      uint64_t v27 = 0;
      id v28 = &v27;
      uint64_t v29 = 0x2020000000;
      __int16 v30 = 0;
      uint64_t v23 = 0;
      int v24 = &v23;
      uint64_t v25 = 0x2020000000;
      uint64_t v26 = 0;
      objc_msgSend(v21, "fetchSQL:", @"\n SELECT domain, \ntype, \nsize\n FROM   Domains\n  JOIN  Restorables ON \n       (Restorables.domainID = Domains.domainID)\n WHERE  Restorables.absolutePath = %@;",
        v7,
        v17,
      id v8 = v18);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_1002B37AC;
      v22[3] = &unk_100418260;
      void v22[4] = &v31;
      v22[5] = &v27;
      v22[6] = &v23;
      unsigned __int8 v9 = [v8 enumerateWithError:a3 block:v22];

      if (v9)
      {
        if (v32[5])
        {
          objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:");
          id v10 = (_ATCPaths *)objc_claimAutoreleasedReturnValue();
          if (!v10)
          {
            id v10 = objc_alloc_init(_ATCPaths);
            [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:v32[5]];
          }
          int v11 = v28[3] & 0xF000;
          switch(v11)
          {
            case 16384:
              id v12 = [(_ATCPaths *)v10 directories];
              [v12 addObject:v7];
              break;
            case 40960:
              id v12 = [(_ATCPaths *)v10 symlinks];
              [v12 addObject:v7];
              break;
            case 32768:
              if (v24[3])
              {
                id v12 = [(_ATCPaths *)v10 assetFiles];
                [v12 addObject:v7];
                int v13 = 0;
                goto LABEL_25;
              }
              id v12 = [(_ATCPaths *)v10 zeroByteFiles];
              [v12 addObject:v7];
              break;
            default:
              __assert_rtn("-[MBRestorePlanDB _atcPathsByDomainNameForPaths:error:]_block_invoke", "MBRestorePlanDB.m", 944, "S_ISREG(type)");
          }
          int v13 = 3;
LABEL_25:
        }
        else
        {
          *a3 = +[MBError errorWithCode:4, v7, @"Failed to find domain %@ for ATC absolute path", 0 path format];
          MBGetDefaultLog();
          id v10 = (_ATCPaths *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(&v10->super, OS_LOG_TYPE_ERROR))
          {
            uint64_t v14 = v32[5];
            uint64_t v15 = *a3;
            *(_DWORD *)long long buf = 138412802;
            uint64_t v42 = v14;
            __int16 v43 = 2112;
            uint64_t v44 = v7;
            __int16 v45 = 2112;
            uint64_t v46 = v15;
            _os_log_impl((void *)&_mh_execute_header, &v10->super, OS_LOG_TYPE_ERROR, "=plan= Failed to find %@ domain for ATC absolute path %@: %@", buf, 0x20u);
            uint64_t v17 = v7;
            uint64_t v18 = *a3;
            _MBLog();
          }
          int v13 = 1;
        }

        goto LABEL_27;
      }
      int v13 = 1;
LABEL_27:
      _Block_object_dispose(&v23, 8);
      _Block_object_dispose(&v27, 8);
      _Block_object_dispose(&v31, 8);

      if (v13 != 3 && v13) {
        goto LABEL_32;
      }
    }
    id v4 = [obj countByEnumeratingWithState:&v37 objects:v47 count:16];
  }
  while (v4);
LABEL_31:
  int v13 = 0;
LABEL_32:

  return v13 == 0;
}

void sub_1002B374C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_1002B3794(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002B37A4(uint64_t a1)
{
}

uint64_t sub_1002B37AC(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB _atcPathsByDomainNameForPaths:error:]_block_invoke", "MBRestorePlanDB.m", 911, "rs");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB _atcPathsByDomainNameForPaths:error:]_block_invoke", "MBRestorePlanDB.m", 912, "enumeratorError");
  }
  uint64_t v6 = v5;
  uint64_t v7 = [v5 stringAtIndex:0];
  uint64_t v8 = *(void *)(a1[4] + 8);
  unsigned __int8 v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  *(_WORD *)(*(void *)(a1[5] + 8) + 24) = (unsigned __int16)[v6 unsignedShortAtIndex:1];
  *(void *)(*(void *)(a1[6] + 8) + 24) = [v6 unsignedLongLongAtIndex:2];

  return 1;
}

id sub_1002B3A80(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB enumerateDomainNamesPendingRestoreWithError:enumerator:]_block_invoke", "MBRestorePlanDB.m", 986, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB enumerateDomainNamesPendingRestoreWithError:enumerator:]_block_invoke", "MBRestorePlanDB.m", 987, "accessorError");
  }
  uint64_t v6 = v5;
  uint64_t v7 = objc_msgSend(v5, "fetchSQL:", @"\n SELECT domain\n FROM   Domains\n WHERE  engineState != %u", 10);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002B3B98;
  v10[3] = &unk_100413728;
  id v11 = *(id *)(a1 + 32);
  id v8 = [v7 enumerateWithError:a3 block:v10];

  return v8;
}

uint64_t sub_1002B3B98(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB enumerateDomainNamesPendingRestoreWithError:enumerator:]_block_invoke_2", "MBRestorePlanDB.m", 994, "rs");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB enumerateDomainNamesPendingRestoreWithError:enumerator:]_block_invoke_2", "MBRestorePlanDB.m", 995, "enumerationError");
  }
  uint64_t v6 = v5;
  uint64_t v7 = [v5 stringAtIndex:0];
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v8;
}

id sub_1002B3CF8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB enumerateBundleIDsWithPlaceholderIPAsWithError:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1005, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB enumerateBundleIDsWithPlaceholderIPAsWithError:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1006, "accessorError");
  }
  uint64_t v6 = v5;
  objc_msgSend(v5, "fetchSQL:", @"\n SELECT relativePath\n FROM   Restorables\n  JOIN  Domains ON \n       (Domains.domainID = Restorables.domainID)\n WHERE  Domains.domain = %@;",
  uint64_t v7 = @"PlaceholderDomain");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002B3E14;
  v10[3] = &unk_100413728;
  id v11 = *(id *)(a1 + 32);
  id v8 = [v7 enumerateWithError:a3 block:v10];

  return v8;
}

uint64_t sub_1002B3E14(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB enumerateBundleIDsWithPlaceholderIPAsWithError:enumerator:]_block_invoke_2", "MBRestorePlanDB.m", 1015, "rs");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB enumerateBundleIDsWithPlaceholderIPAsWithError:enumerator:]_block_invoke_2", "MBRestorePlanDB.m", 1016, "enumerationError");
  }
  uint64_t v6 = v5;
  uint64_t v7 = [v5 stringAtIndex:0];
  if ([v7 hasSuffix:@".ipa"])
  {
    id v8 = [v7 lastPathComponent];
    unsigned __int8 v9 = [v8 stringByDeletingPathExtension];

    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v10 = 1;
  }

  return v10;
}

uint64_t sub_1002B404C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB addRemainingProgress:forDomainNames:error:]_block_invoke", "MBRestorePlanDB.m", 1035, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB addRemainingProgress:forDomainNames:error:]_block_invoke", "MBRestorePlanDB.m", 1036, "accessorError");
  }
  uint64_t v6 = v5;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = *(id *)(a1 + 32);
  id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v17;
    while (2)
    {
      for (char i = 0; i != v9; char i = (char *)i + 1)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        id v13 = objc_msgSend(v6, "fetchCountWithError:sql:", a3, @"\n SELECT domainID\n   FROM Domains\n  WHERE domain = %@;",
                v12);
        if (v13 == (id)0x7FFFFFFFFFFFFFFFLL
          || ![*(id *)(a1 + 40) _addRemainingProgress:*(void *)(a1 + 48) forDomainID:v13 domainName:v12 readOnlyDB:v6 error:a3])
        {
          uint64_t v14 = 0;
          goto LABEL_15;
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
      uint64_t v14 = 1;
      if (v9) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v14 = 1;
  }
LABEL_15:

  return v14;
}

void sub_1002B4674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 240), 8);
  _Block_object_dispose((const void *)(v39 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B46E4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB _addRemainingProgress:forDomainID:domainName:readOnlyDB:error:]_block_invoke", "MBRestorePlanDB.m", 1083, "rs");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB _addRemainingProgress:forDomainID:domainName:readOnlyDB:error:]_block_invoke", "MBRestorePlanDB.m", 1084, "enumerationError");
  }
  uint64_t v6 = v5;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 unsignedLongLongAtIndex:0];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v6 unsignedLongLongAtIndex:1];

  return 1;
}

uint64_t sub_1002B4794(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB _addRemainingProgress:forDomainID:domainName:readOnlyDB:error:]_block_invoke_2", "MBRestorePlanDB.m", 1115, "rs");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB _addRemainingProgress:forDomainID:domainName:readOnlyDB:error:]_block_invoke_2", "MBRestorePlanDB.m", 1116, "enumerationError");
  }
  uint64_t v6 = v5;
  *(void *)(*(void *)(a1[4] + 8) + 24) = [v5 unsignedLongLongAtIndex:0];
  *(void *)(*(void *)(a1[5] + 8) + 24) = [v6 unsignedLongLongAtIndex:1];
  *(void *)(*(void *)(a1[6] + 8) + 24) = [v6 unsignedLongLongAtIndex:2];
  *(void *)(*(void *)(a1[7] + 8) + 24) = [v6 unsignedLongLongAtIndex:3];

  return 1;
}

void sub_1002B4BAC(_Unwind_Exception *a1)
{
}

void sub_1002B4BCC(void *a1)
{
}

id sub_1002B4CDC(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB fetchPendingRestoreSize:remainingFileCount:totalFileCount:error:]_block_invoke", "MBRestorePlanDB.m", 1202, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB fetchPendingRestoreSize:remainingFileCount:totalFileCount:error:]_block_invoke", "MBRestorePlanDB.m", 1203, "accessorError");
  }
  uint64_t v6 = v5;
  uint64_t v29 = 0;
  __int16 v30 = &v29;
  uint64_t v31 = 0x2020000000;
  uint64_t v32 = 0;
  objc_msgSend(v5, "fetchSQL:", @"\nSELECT \n  SUM (assetSize)\n FROM  RestorableAssets\n JOIN  Restorables ON\n      (RestorableAssets.inode = Restorables.inode\n   AND RestorableAssets.domainID = Restorables.domainID\n     )\n WHERE RestorableAssets.assetState = %u\n   AND Restorables.restoreState != %u\n   AND Restorables.restoreState != %u\n GROUP BY RestorableAssets.inode;",
    1,
    2,
  id v7 = 5);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  void v28[2] = sub_1002B4F94;
  v28[3] = &unk_100416F88;
  v28[4] = &v29;
  unsigned __int8 v8 = [v7 enumerateWithError:a3 block:v28];

  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = &v24;
    uint64_t v26 = 0x2020000000;
    uint64_t v27 = 0;
    uint64_t v20 = 0;
    id v21 = &v20;
    uint64_t v22 = 0x2020000000;
    uint64_t v23 = 0;
    uint64_t v16 = 0;
    long long v17 = &v16;
    uint64_t v18 = 0x2020000000;
    uint64_t v19 = 0;
    id v9 = [v6 fetchSQL:@"\n SELECT \n    SUM(IIF(restoreState == %u, 1, 0)),\n    SUM(IIF(restoreState == %u, 1, 0)),\n    COUNT(*)\n FROM Restorables", 1, 2];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1002B502C;
    v15[3] = &unk_100418260;
    v15[4] = &v24;
    v15[5] = &v20;
    v15[6] = &v16;
    id v10 = [v9 enumerateWithError:a3 block:v15];

    if (v10)
    {
      id v11 = (void *)a1[4];
      if (v11) {
        void *v11 = v30[3];
      }
      uint64_t v12 = (void *)a1[5];
      if (v12) {
        void *v12 = v25[3];
      }
      id v13 = (void *)a1[6];
      if (v13) {
        *id v13 = v17[3] - v21[3];
      }
    }
    _Block_object_dispose(&v16, 8);
    _Block_object_dispose(&v20, 8);
    _Block_object_dispose(&v24, 8);
  }
  else
  {
    id v10 = 0;
  }
  _Block_object_dispose(&v29, 8);

  return v10;
}

void sub_1002B4F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B4F94(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB fetchPendingRestoreSize:remainingFileCount:totalFileCount:error:]_block_invoke_2", "MBRestorePlanDB.m", 1219, "rs");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB fetchPendingRestoreSize:remainingFileCount:totalFileCount:error:]_block_invoke_2", "MBRestorePlanDB.m", 1220, "enumerationError");
  }
  uint64_t v6 = v5;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 unsignedLongLongAtIndex:0];

  return 1;
}

uint64_t sub_1002B502C(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB fetchPendingRestoreSize:remainingFileCount:totalFileCount:error:]_block_invoke_3", "MBRestorePlanDB.m", 1238, "rs");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB fetchPendingRestoreSize:remainingFileCount:totalFileCount:error:]_block_invoke_3", "MBRestorePlanDB.m", 1239, "enumerationError");
  }
  uint64_t v6 = v5;
  *(void *)(*(void *)(a1[4] + 8) + 24) = [v5 unsignedLongLongAtIndex:0];
  *(void *)(*(void *)(a1[5] + 8) + 24) = [v6 unsignedLongLongAtIndex:1];
  *(void *)(*(void *)(a1[6] + 8) + 24) = [v6 unsignedLongLongAtIndex:2];

  return 1;
}

id sub_1002B5250(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB enumerateRestoreFailuresOfType:isFatal:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1264, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB enumerateRestoreFailuresOfType:isFatal:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1265, "accessorError");
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 48)) {
    id v9 = [v5 _enumerateFatalFailuresOfType:v7 error:a3 enumerator:v8];
  }
  else {
    id v9 = [v5 _enumerateNonFatalFailuresOfType:v7 error:a3 enumerator:v8];
  }
  id v10 = v9;

  return v10;
}

void sub_1002B5524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B5560(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB restoreVerificationSummary:]_block_invoke", "MBRestorePlanDB.m", 1302, "rs");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB restoreVerificationSummary:]_block_invoke", "MBRestorePlanDB.m", 1303, "enumerationError");
  }
  uint64_t v6 = v5;
  id v7 = [v5 unsignedIntegerAtIndex:0];
  id v8 = [v6 unsignedLongLongAtIndex:1];
  switch((unint64_t)v7)
  {
    case 1uLL:
      uint64_t v9 = a1[4];
      goto LABEL_11;
    case 2uLL:
      uint64_t v9 = a1[5];
      goto LABEL_11;
    case 3uLL:
      uint64_t v9 = a1[6];
      goto LABEL_11;
    case 4uLL:
      uint64_t v9 = a1[7];
LABEL_11:
      *(void *)(*(void *)(v9 + 8) + 24) = v8;
      uint64_t v18 = 1;
      break;
    default:
      id v10 = MBGetDefaultLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        id v21 = v7;
        _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Invalid restore verification state: %lu", buf, 0xCu);
      }

      sub_1001E6FFC(@"Invalid restore verification state: %lu", v11, v12, v13, v14, v15, v16, v17, (uint64_t)v7);
      uint64_t v18 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      break;
  }

  return v18;
}

uint64_t sub_1002B5824(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = *(id *)(a1 + 32);
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    while (2)
    {
      for (char i = 0; i != v8; char i = (char *)i + 1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = objc_msgSend(v5, "fetchCountWithError:sql:", a3, @"\n SELECT domainID\n   FROM Domains\n  WHERE domain = %@;",
                *(void *)(*((void *)&v14 + 1) + 8 * i));
        if (v11 == (id)0x7FFFFFFFFFFFFFFFLL
          || ![*(id *)(a1 + 40) _skipDomainID:v11 into:v5 error:a3])
        {
          uint64_t v12 = 0;
          goto LABEL_13;
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      uint64_t v12 = 1;
      if (v8) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v12 = 1;
  }
LABEL_13:

  return v12;
}

id sub_1002B5C48(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB enumerateDomainNamesByTotalAssetSize:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1423, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB enumerateDomainNamesByTotalAssetSize:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1424, "accessorError");
  }
  id v6 = v5;
  id v7 = [v5 fetchSQL:@"\n  SELECT domain, totalAssetBytes\n    FROM Domains\nORDER BY totalAssetBytes;"];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002B5D58;
  v10[3] = &unk_100413728;
  id v11 = *(id *)(a1 + 32);
  id v8 = [v7 enumerateWithError:a3 block:v10];

  return v8;
}

uint64_t sub_1002B5D58(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[MBRestorePlanDB enumerateDomainNamesByTotalAssetSize:enumerator:]_block_invoke_2", "MBRestorePlanDB.m", 1433, "rs");
  }
  if (!a3) {
    __assert_rtn("-[MBRestorePlanDB enumerateDomainNamesByTotalAssetSize:enumerator:]_block_invoke_2", "MBRestorePlanDB.m", 1434, "enumerationError");
  }
  id v6 = v5;
  id v7 = [v5 stringAtIndex:0];
  [v6 unsignedLongLongAtIndex:1];
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v8;
}

void sub_1002B619C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002B61B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanBase _countsOfRestorablesByState:]_block_invoke", "MBRestorePlanDB.m", 1493, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanBase _countsOfRestorablesByState:]_block_invoke", "MBRestorePlanDB.m", 1494, "accessorError");
  }
  id v6 = v5;
  objc_msgSend(v5, "fetchSQL:", @"\n SELECT restoreState, \n  COUNT(restoreState) AS CountOfStates\n FROM   Restorables\n WHERE  domainID = %llu\n GROUP BY restoreState;",
  id v7 = *(void *)(*(void *)(a1 + 32) + 24));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002B62C0;
  v10[3] = &unk_100416F88;
  void v10[4] = *(void *)(a1 + 40);
  id v8 = [v7 enumerateWithError:a3 block:v10];

  return v8;
}

uint64_t sub_1002B62C0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanBase _countsOfRestorablesByState:]_block_invoke_2", "MBRestorePlanDB.m", 1503, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanBase _countsOfRestorablesByState:]_block_invoke_2", "MBRestorePlanDB.m", 1504, "enumerationError");
  }
  id v6 = v5;
  id v7 = [v5 numberAtIndex:0];
  id v8 = [v6 numberAtIndex:1];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v8 forKeyedSubscript:v7];

  return 1;
}

id sub_1002B66BC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkRestorablesMatchingType:state:readOnlyDB:absolutePath:descending:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1579, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkRestorablesMatchingType:state:readOnlyDB:absolutePath:descending:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1580, "enumeratorError");
  }
  id v6 = v5;
  int v10 = 0;
  id v7 = [v5 fileWithDomain:*(void *)(*(void *)(a1 + 32) + 16) fromIndex:&v10];
  ++v10;
  objc_msgSend(v7, "setPriority:", objc_msgSend(v6, "unsignedLongAtIndex:"));
  ++v10;
  id v8 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "_recordRestorableState:restorableID:domainID:inode:restoreType:error:", (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))(), objc_msgSend(v6, "unsignedLongLongAtIndex:"), *(void *)(*(void *)(a1 + 32) + 24), objc_msgSend(v7, "inodeNumber"), *(unsigned int *)(*(void *)(a1 + 32) + 32), a3);

  return v8;
}

unint64_t sub_1002B6944(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkNotStartedDirectoriesTopDown:absolutePath:matchingState:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1598, "restorable");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkNotStartedDirectoriesTopDown:absolutePath:matchingState:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1599, "enumeratorError");
  }
  id v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v7 == 5) {
    unint64_t v8 = 4;
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 <= 5 && ((1 << v8) & 0x29) != 0)
  {
    int v10 = MBGetDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      uint64_t v18 = MBRestorableStateToString(v8);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v20 = v18;
      __int16 v21 = 2112;
      uint64_t v22 = v6;
      _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Invalid restorable state (%@) for %@ when enumerating not started directories", buf, 0x16u);
    }
    id v11 = MBRestorableStateToString(v8);
    sub_1001E70C4(0, a3, @"Invalid restorable state (%@) for %@ when enumerating not started directories", v12, v13, v14, v15, v16, (uint64_t)v11);

    unint64_t v8 = 0;
  }

  return v8;
}

unint64_t sub_1002B6C18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkPlacedDirectoriesBottomUp:absolutePath:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1626, "restorable");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkPlacedDirectoriesBottomUp:absolutePath:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1627, "enumeratorError");
  }
  id v6 = v5;
  unint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v7 <= 4 && ((1 << v7) & 0x19) != 0)
  {
    uint64_t v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      long long v17 = MBRestorableStateToString(v7);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v19 = v17;
      __int16 v20 = 2112;
      __int16 v21 = v6;
      _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid restorable state (%@) for %@ when enumerating placed directories", buf, 0x16u);
    }
    int v10 = MBRestorableStateToString(v7);
    sub_1001E70C4(0, a3, @"Invalid restorable state (%@) for %@ when enumerating placed directories", v11, v12, v13, v14, v15, (uint64_t)v10);

    unint64_t v7 = 0;
  }

  return v7;
}

id sub_1002B6F04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkUnfinishedSymlinks:absolutePath:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1667, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkUnfinishedSymlinks:absolutePath:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1668, "enumeratorError");
  }
  id v6 = v5;
  int v22 = 0;
  unint64_t v7 = [v5 fileWithDomain:*(void *)(*(void *)(a1 + 32) + 16) fromIndex:&v22];
  ++v22;
  unint64_t v8 = objc_msgSend(v6, "stringAtIndex:");
  ++v22;
  objc_msgSend(v6, "unsignedIntAtIndex:");
  ++v22;
  id v9 = objc_msgSend(v6, "unsignedLongLongAtIndex:");
  unint64_t v10 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  if (v10 > 4 || ((1 << v10) & 0x19) == 0)
  {
    id v19 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "_recordRestorableState:restorableID:domainID:inode:restoreType:error:", v10, v9, *(void *)(*(void *)(a1 + 32) + 24), objc_msgSend(v7, "inodeNumber"), *(unsigned int *)(*(void *)(a1 + 32) + 32), a3);
  }
  else
  {
    uint64_t v12 = MBGetDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      __int16 v21 = MBRestorableStateToString(v10);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v24 = v21;
      __int16 v25 = 2112;
      uint64_t v26 = v7;
      _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Invalid restorable state (%@) for %@ when enumerating unfinished symlinks", buf, 0x16u);
    }
    uint64_t v13 = MBRestorableStateToString(v10);
    sub_1001E70C4(0, a3, @"Invalid restorable state (%@) for %@ when enumerating unfinished symlinks", v14, v15, v16, v17, v18, (uint64_t)v13);

    id v19 = 0;
  }

  return v19;
}

id sub_1002B72BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkUnfinishedZeroByteFiles:absolutePath:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1716, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkUnfinishedZeroByteFiles:absolutePath:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1717, "enumeratorError");
  }
  id v6 = v5;
  int v21 = 1;
  id v7 = [v5 unsignedLongLongAtIndex:0];
  unint64_t v8 = [v6 fileWithDomain:*(void *)(*(void *)(a1 + 32) + 16) fromIndex:&v21];
  ++v21;
  objc_msgSend(v6, "unsignedIntAtIndex:");
  unint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  if (v9 > 4 || ((1 << v9) & 0x19) == 0)
  {
    id v18 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "_recordRestorableState:restorableID:domainID:inode:restoreType:error:", v9, v7, *(void *)(*(void *)(a1 + 32) + 24), objc_msgSend(v8, "inodeNumber"), *(unsigned int *)(*(void *)(a1 + 32) + 32), a3);
  }
  else
  {
    uint64_t v11 = MBGetDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      __int16 v20 = MBRestorableStateToString(v9);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v23 = v20;
      __int16 v24 = 2112;
      __int16 v25 = v8;
      _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid restorable state (%@) for %@ when enumerating unfinished zero-byte files", buf, 0x16u);
    }
    uint64_t v12 = MBRestorableStateToString(v9);
    sub_1001E70C4(0, a3, @"Invalid restorable state (%@) for %@ when enumerating unfinished zero-byte files", v13, v14, v15, v16, v17, (uint64_t)v12);

    id v18 = 0;
  }

  return v18;
}

id sub_1002B7648(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkUnfinishedAssets:absolutePath:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1768, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAndMarkUnfinishedAssets:absolutePath:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1769, "enumeratorError");
  }
  id v6 = v5;
  id v7 = [*(id *)(a1 + 32) _enumerateAssetsFromResultSet:v5 columnIndex:0 error:a3 enumerator:*(void *)(a1 + 40)];

  return v7;
}

uint64_t sub_1002B7BD8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAssetsToDownload:absolutePath:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1843, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanBase _enumerateAssetsToDownload:absolutePath:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1844, "enumeratorError");
  }
  id v6 = v5;
  id v7 = [v5 unsignedLongLongAtIndex:0];
  int v16 = 2;
  id v8 = [v6 unsignedIntAtIndex:1];
  unint64_t v9 = [v6 assetMetadataFromIndex:&v16];
  ++v16;
  id v10 = objc_msgSend(v6, "unsignedLongLongAtIndex:");
  ++v16;
  id v11 = objc_msgSend(v6, "unsignedCharAtIndex:");
  ++v16;
  uint64_t v12 = objc_msgSend(v6, "stringAtIndex:");
  uint64_t v13 = [[_TtC7backupd14MBFetchedAsset alloc] initWithMetadata:v9 protectionClass:v11 originalFileSize:v10 originalInode:v7 linkCount:v8 rpath:v12];
  uint64_t v14 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v14;
}

id sub_1002B7FE8(uint64_t a1, void *a2, uint64_t a3)
{
  return [a2 _recordVerificationState:2 domainID:*(void *)(*(void *)(a1 + 32) + 24) error:a3];
}

id sub_1002B8130(uint64_t a1, void *a2, uint64_t a3)
{
  return [a2 _recordVerificationState:3 domainID:*(void *)(*(void *)(a1 + 32) + 24) error:a3];
}

void sub_1002B82C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_1002B82E0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanStandard enumerateAndMarkATCRestorables:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1926, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanStandard enumerateAndMarkATCRestorables:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1927, "accessorError");
  }
  id v6 = v5;
  id v7 = [*(id *)(a1 + 32) _enumerateAndMarkATCRestorables:v5 totalATCAssets:*(void *)(*(void *)(a1 + 48) + 8) + 24 error:a3 enumerator:*(void *)(a1 + 40)];

  return v7;
}

id sub_1002B8508(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanStandard _enumerateAndMarkATCRestorables:totalATCAssets:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1958, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanStandard _enumerateAndMarkATCRestorables:totalATCAssets:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 1959, "enumeratorError");
  }
  id v6 = v5;
  int v21 = 0;
  id v7 = [v5 fileWithDomain:*(void *)(*(void *)(a1 + 32) + 16) fromIndex:&v21];
  ++v21;
  objc_msgSend(v7, "setPriority:", objc_msgSend(v6, "unsignedLongAtIndex:"));
  ++v21;
  id v8 = objc_msgSend(v6, "unsignedLongLongAtIndex:");
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v10 = v9;
  if ((unint64_t)(v9 - 4) >= 2)
  {
    if (v9 == 3)
    {
      if ([*(id *)(a1 + 32) _setWillRestoreInATCBackgroundPhase:v7 restorableID:v8 error:a3])
      {
        ++**(void **)(a1 + 48);
        uint64_t v10 = 3;
      }
      else
      {
        uint64_t v10 = 6;
      }
    }
    id v18 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "_recordRestorableState:restorableID:domainID:inode:restoreType:error:", v10, v8, *(void *)(*(void *)(a1 + 32) + 24), objc_msgSend(v7, "inodeNumber"), *(unsigned int *)(*(void *)(a1 + 32) + 32), a3);
  }
  else
  {
    id v11 = MBGetDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      __int16 v20 = MBRestorableStateToString(v10);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v23 = v20;
      __int16 v24 = 2112;
      __int16 v25 = v7;
      _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid restorable state (%@) for %@ when enumerating and marking ATC restorables", buf, 0x16u);
    }
    uint64_t v12 = MBRestorableStateToString(v10);
    sub_1001E70C4(0, a3, @"Invalid restorable state (%@) for %@ when enumerating and marking ATC restorables", v13, v14, v15, v16, v17, (uint64_t)v12);

    id v18 = 0;
  }

  return v18;
}

id sub_1002B896C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _enumerateAndMarkNotStartedDirectoriesTopDown:a2 absolutePath:0 matchingState:1 error:a3 enumerator:*(void *)(a1 + 40)];
}

id sub_1002B8A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _enumerateAndMarkPlacedDirectoriesBottomUp:a2 absolutePath:0 error:a3 enumerator:*(void *)(a1 + 40)];
}

id sub_1002B8B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _enumerateAndMarkUnfinishedSymlinks:a2 absolutePath:0 error:a3 enumerator:*(void *)(a1 + 40)];
}

id sub_1002B8CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _enumerateAndMarkUnfinishedZeroByteFiles:a2 absolutePath:0 error:a3 enumerator:*(void *)(a1 + 40)];
}

id sub_1002B8DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _enumerateAndMarkUnfinishedAssets:a2 absolutePath:0 error:a3 enumerator:*(void *)(a1 + 40)];
}

id sub_1002B8EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _enumerateAssetsToDownload:a2 absolutePath:0 error:a3 enumerator:*(void *)(a1 + 40)];
}

void sub_1002B9280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002B92B8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanStandard atcFileInfosMatchingRelativePath:pendingOnly:range:error:]_block_invoke", "MBRestorePlanDB.m", 2082, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanStandard atcFileInfosMatchingRelativePath:pendingOnly:range:error:]_block_invoke", "MBRestorePlanDB.m", 2083, "accessorError");
  }
  id v6 = v5;
  objc_msgSend(v5, "fetchSQL:", @"\n SELECT relativePath, \nmode, \npriority, \nabsolutePath\n FROM   Restorables\n WHERE  domainID = %llu\n  AND   restoreState != %u\n  AND   restoreState != %u\n  AND   restoreState != %u\n  AND   restoreState != %u\n ORDER BY Restorables.type, Restorables.relativePath ASC\n LIMIT %lu OFFSET %lu;",
    *(void *)(*(void *)(a1 + 32) + 24),
    2,
    1,
    6,
    *(void *)(a1 + 64),
    *(void *)(a1 + 80),
  id v7 = *(void *)(a1 + 72));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1002B9414;
  v12[3] = &unk_100418460;
  id v13 = *(id *)(a1 + 40);
  long long v11 = *(_OWORD *)(a1 + 48);
  id v8 = (id)v11;
  long long v14 = v11;
  id v9 = [v7 enumerateWithError:a3 block:v12];

  return v9;
}

uint64_t sub_1002B9414(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanStandard atcFileInfosMatchingRelativePath:pendingOnly:range:error:]_block_invoke_2", "MBRestorePlanDB.m", 2106, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanStandard atcFileInfosMatchingRelativePath:pendingOnly:range:error:]_block_invoke_2", "MBRestorePlanDB.m", 2107, "enumeratorError");
  }
  id v6 = v5;
  if (a1[4])
  {
    id v7 = [v5 stringAtIndex:0];
    if (([v7 hasPrefix:a1[4]] & 1) == 0)
    {
      ++*(void *)(*(void *)(a1[6] + 8) + 24);
      uint64_t v12 = (void *)a1[5];
      uint64_t v10 = +[NSNull null];
      long long v11 = v12;
      goto LABEL_8;
    }
  }
  id v8 = [v6 unsignedShortAtIndex:1];
  uint64_t v9 = [v6 unsignedIntAtIndex:2];
  id v7 = [v6 stringAtIndex:3];
  uint64_t v10 = +[MBFileInfo fileInfoWithAbsolutePath:v7 mode:v8 priority:v9];
  long long v11 = (void *)a1[5];
LABEL_8:
  [v11 addObject:v10];

  return 1;
}

id sub_1002B97A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _enumerateAndMarkNotStartedDirectoriesTopDown:a2 absolutePath:a3 matchingState:3 error:a4 enumerator:*(void *)(a1 + 40)];
}

id sub_1002B98DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _enumerateAndMarkPlacedDirectoriesBottomUp:a2 absolutePath:a3 error:a4 enumerator:*(void *)(a1 + 40)];
}

id sub_1002B9A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _enumerateAndMarkUnfinishedSymlinks:a2 absolutePath:a3 error:a4 enumerator:*(void *)(a1 + 40)];
}

id sub_1002B9B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _enumerateAndMarkUnfinishedZeroByteFiles:a2 absolutePath:a3 error:a4 enumerator:*(void *)(a1 + 40)];
}

id sub_1002B9C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _enumerateAndMarkUnfinishedAssets:a2 absolutePath:a3 error:a4 enumerator:*(void *)(a1 + 40)];
}

id sub_1002B9D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _enumerateAssetsToDownload:a2 absolutePath:a3 error:a4 enumerator:*(void *)(a1 + 40)];
}

BOOL sub_1002B9EF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_RestoreDomainPlanATC _enumerate:error:block:]_block_invoke", "MBRestorePlanDB.m", 2239, "readOnlyDB");
  }
  if (!a3) {
    __assert_rtn("-[_RestoreDomainPlanATC _enumerate:error:block:]_block_invoke", "MBRestorePlanDB.m", 2240, "accessorError");
  }
  id v6 = v5;
  __int16 v20 = a3;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v7 = *(id *)(a1 + 32);
  id v8 = (char *)[v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (!v8)
  {

    int v16 = 0;
LABEL_16:
    BOOL v18 = v16 == 0;
    goto LABEL_17;
  }
  id v9 = 0;
  uint64_t v10 = *(void *)v23;
  while (2)
  {
    long long v11 = 0;
    uint64_t v12 = v9;
    do
    {
      if (*(void *)v23 != v10) {
        objc_enumerationMutation(v7);
      }
      uint64_t v14 = *(void *)(a1 + 40);
      id v21 = v12;
      int v15 = (*(uint64_t (**)(void))(v14 + 16))();
      id v9 = v21;

      if (!v15)
      {
        int v16 = 1;
        goto LABEL_13;
      }
      ++v11;
      uint64_t v12 = v9;
    }
    while (v8 != v11);
    id v8 = (char *)[v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v8) {
      continue;
    }
    break;
  }
  int v16 = 0;
LABEL_13:

  if (!v9) {
    goto LABEL_16;
  }
  id v17 = v9;
  *__int16 v20 = v17;

  BOOL v18 = 0;
LABEL_17:

  return v18;
}

void sub_1002BA0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  objc_begin_catch(exception_object);
  if (v9)
  {
    id v10 = v9;
    *a9 = v10;
    objc_end_catch();

    JUMPOUT(0x1002BA044);
  }
  objc_exception_rethrow();
}

BOOL sub_1002BAA30(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_ROPlanDB _childFailuresOfErrorID:error:]_block_invoke", "MBRestorePlanDB.m", 2425, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_ROPlanDB _childFailuresOfErrorID:error:]_block_invoke", "MBRestorePlanDB.m", 2426, "enumerationError");
  }
  id v6 = v5;
  int v12 = 1;
  id v7 = [v5 unsignedLongLongAtIndex:0];
  id v8 = [*(id *)(a1 + 32) _childFailuresOfErrorID:v7 error:a3];
  if (v8)
  {
    id v9 = [v6 _failureAtIndex:&v12 childFailures:v8];
    [*(id *)(a1 + 40) addObject:v9];
  }
  else
  {
    id v9 = MBGetDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134218242;
      id v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "=plan= Failed fetching child errors of error ID: %llu from %@", buf, 0x16u);
      _MBLog();
    }
  }

  return v8 != 0;
}

uint64_t sub_1002BACFC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_ROPlanDB _enumerateFatalFailuresOfType:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 2462, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_ROPlanDB _enumerateFatalFailuresOfType:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 2463, "enumerationError");
  }
  id v6 = v5;
  int v13 = 1;
  id v7 = objc_msgSend(*(id *)(a1 + 32), "_childFailuresOfErrorID:error:", objc_msgSend(v5, "unsignedLongLongAtIndex:", 0), a3);
  if (v7)
  {
    id v8 = [v6 _failureAtIndex:&v13 childFailures:v7];
    ++v13;
    objc_msgSend(v6, "unsignedIntegerAtIndex:");
    ++v13;
    id v9 = objc_msgSend(v6, "stringAtIndex:");
    ++v13;
    uint64_t v10 = objc_msgSend(v6, "stringAtIndex:");
    ++v13;
    objc_msgSend(v6, "unsignedLongLongAtIndex:");
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

uint64_t sub_1002BAFA4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5) {
    __assert_rtn("-[_ROPlanDB _enumerateNonFatalFailuresOfType:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 2498, "rs");
  }
  if (!a3) {
    __assert_rtn("-[_ROPlanDB _enumerateNonFatalFailuresOfType:error:enumerator:]_block_invoke", "MBRestorePlanDB.m", 2499, "enumerationError");
  }
  id v6 = v5;
  int v12 = 0;
  id v7 = [v5 _failureAtIndex:&v12 childFailures:&__NSArray0__struct];
  ++v12;
  objc_msgSend(v6, "unsignedIntegerAtIndex:");
  ++v12;
  id v8 = objc_msgSend(v6, "stringAtIndex:");
  ++v12;
  id v9 = objc_msgSend(v6, "stringAtIndex:");
  ++v12;
  objc_msgSend(v6, "unsignedLongLongAtIndex:");
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v10;
}

BOOL sub_1002BB298(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (objc_msgSend(v5, "fetchCountWithError:sql:", a3, @"\nUPDATE Errors\n   SET count = count + 1\n WHERE errorDomain = %@ \n   AND errorCode = %lld \n   AND domainID = %lld \n   AND restoreType = %u \n   AND inode IS %@ \n   AND restorableID IS %@ \n RETURNING errorID;",
         *(void *)(a1 + 32),
         *(void *)(a1 + 64),
         *(void *)(a1 + 72),
         *(unsigned int *)(a1 + 80),
         *(void *)(a1 + 40),
         *(void *)(a1 + 48)) == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v6 = [v5 _insertFailure:*(void *)(a1 + 56) domainID:*(void *)(a1 + 72) restoreType:*(unsigned int *)(a1 + 80) inode:*(void *)(a1 + 40) restorableID:*(void *)(a1 + 48) error:a3];
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 1;
  }

  return v7;
}

id sub_1002BB89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _recordFatalFailure:*(void *)(a1 + 40) into:a2 parentErrorID:0 domainID:*(void *)(a1 + 64) restoreType:*(unsigned int *)(a1 + 72) inode:*(void *)(a1 + 48) restorableID:*(void *)(a1 + 56) error:a3];
}

id MBDescriptionForStateSummaryDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSMutableArray array];
  for (uint64_t i = 0; i != 6; ++i)
  {
    id v4 = +[NSNumber numberWithUnsignedInteger:i];
    id v5 = [v1 objectForKeyedSubscript:v4];
    id v6 = [v5 integerValue];

    if (v6)
    {
      BOOL v7 = MBRestorableStateToString(i);
      id v8 = +[NSString stringWithFormat:@"%@: %lu", v7, v6];
      [v2 addObject:v8];
    }
  }
  id v9 = [v2 componentsJoinedByString:@", "];

  return v9;
}

uint64_t POSIXError._nsError.getter()
{
  return POSIXError._nsError.getter();
}

uint64_t type metadata accessor for POSIXError()
{
  return type metadata accessor for POSIXError();
}

uint64_t URLResourceValues.isExcludedFromBackup.setter()
{
  return URLResourceValues.isExcludedFromBackup.setter();
}

uint64_t URLResourceValues.init()()
{
  return URLResourceValues.init()();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return URL.init(fileURLWithPath:isDirectory:)();
}

uint64_t URL.setResourceValues(_:)()
{
  return URL.setResourceValues(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t NSLog(_:_:)()
{
  return NSLog(_:_:)();
}

uint64_t IndexSet.insert(integersIn:)()
{
  return IndexSet.insert(integersIn:)();
}

uint64_t IndexSet.RangeView.makeIterator()()
{
  return IndexSet.RangeView.makeIterator()();
}

uint64_t type metadata accessor for IndexSet.RangeView()
{
  return type metadata accessor for IndexSet.RangeView();
}

uint64_t IndexSet.rangeView.getter()
{
  return IndexSet.rangeView.getter();
}

uint64_t type metadata accessor for IndexSet()
{
  return type metadata accessor for IndexSet();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t Logger.init(_:)()
{
  return Logger.init(_:)();
}

uint64_t FilePath.lexicallyNormalized()()
{
  return FilePath.lexicallyNormalized()();
}

uint64_t FilePath.removingLastComponent()()
{
  return FilePath.removingLastComponent()();
}

uint64_t FilePath.string.getter()
{
  return FilePath.string.getter();
}

uint64_t FilePath.appending(_:)()
{
  return FilePath.appending(_:)();
}

uint64_t FilePath.init()()
{
  return FilePath.init()();
}

uint64_t type metadata accessor for FilePath()
{
  return type metadata accessor for FilePath();
}

uint64_t FilePath.init(_:)()
{
  return FilePath.init(_:)();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.utility.getter()
{
  return static DispatchQoS.utility.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.withPlatformString<A>(_:)()
{
  return String.withPlatformString<A>(_:)();
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

Swift::Void __swiftcall OS_dispatch_group.wait()()
{
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.appendingFormat<A>(_:_:)()
{
  return StringProtocol.appendingFormat<A>(_:_:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t BYDataStashCreate()
{
  return _BYDataStashCreate();
}

uint64_t BYSetupAssistantNeedsToRun()
{
  return _BYSetupAssistantNeedsToRun();
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return _CCCrypt(op, alg, options, key, keyLength, iv, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return _CCRandomGenerateBytes(bytes, count);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return _CFBundleCreate(allocator, bundleURL);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return _CFMakeCollectable(cf);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyValue(key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppIntegerValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesSynchronize(applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return _CFRunLoopGetMain();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return _CFRunLoopRunInMode(mode, seconds, returnAfterSourceHandled);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, void *block)
{
  return _CFRunLoopTimerCreateWithHandler(allocator, fireDate, interval, flags, order, block);
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return _CFStringCreateWithBytes(alloc, bytes, numBytes, encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return _CFStringGetFileSystemRepresentation(string, buffer, maxBufLen);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return _CFStringGetMaximumSizeOfFileSystemRepresentation(string);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

Boolean CFURLCopyResourcePropertyForKey(CFURLRef url, CFStringRef key, void *propertyValueTypeRefPtr, CFErrorRef *error)
{
  return _CFURLCopyResourcePropertyForKey(url, key, propertyValueTypeRefPtr, error);
}

CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding)
{
  return _CFURLCreateStringByAddingPercentEscapes(allocator, originalString, charactersToLeaveUnescaped, legalURLCharactersToBeEscaped, encoding);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return _CFUUIDCreateString(alloc, uuid);
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return _CFUserNotificationCancel(userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return _CFUserNotificationCreateRunLoopSource(allocator, userNotification, callout, order);
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationDisplayAlert(timeout, flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, otherButtonTitle, responseFlags);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

SInt32 CFUserNotificationUpdate(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags flags, CFDictionaryRef dictionary)
{
  return _CFUserNotificationUpdate(userNotification, timeout, flags, dictionary);
}

uint64_t CKXPCSuitableError()
{
  return _CKXPCSuitableError();
}

uint64_t CPFreeSpaceRequestBytesAtPathWithCompletionBlock()
{
  return _CPFreeSpaceRequestBytesAtPathWithCompletionBlock();
}

uint64_t CacheDeleteCancelPurge()
{
  return _CacheDeleteCancelPurge();
}

uint64_t CacheDeleteCopyPurgeableSpaceWithInfo()
{
  return _CacheDeleteCopyPurgeableSpaceWithInfo();
}

uint64_t CacheDeletePurgeSpaceWithInfo()
{
  return _CacheDeletePurgeSpaceWithInfo();
}

uint64_t CreateDataSourceForDataClassName()
{
  return _CreateDataSourceForDataClassName();
}

uint64_t DMSetContext()
{
  return _DMSetContext();
}

uint64_t DataSourceClearSyncAnchors()
{
  return _DataSourceClearSyncAnchors();
}

uint64_t DataSourceDeleteDataSource()
{
  return _DataSourceDeleteDataSource();
}

uint64_t FPIsCloudDocsWithFPFSEnabled()
{
  return _FPIsCloudDocsWithFPFSEnabled();
}

FSEventStreamRef FSEventStreamCreateRelativeToDevice(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, dev_t deviceToWatch, CFArrayRef pathsToWatchRelativeToDevice, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  return _FSEventStreamCreateRelativeToDevice(allocator, callback, context, deviceToWatch, pathsToWatchRelativeToDevice, sinceWhen, latency, flags);
}

void FSEventStreamInvalidate(FSEventStreamRef streamRef)
{
}

void FSEventStreamRelease(FSEventStreamRef streamRef)
{
}

void FSEventStreamSetDispatchQueue(FSEventStreamRef streamRef, dispatch_queue_t q)
{
}

Boolean FSEventStreamStart(FSEventStreamRef streamRef)
{
  return _FSEventStreamStart(streamRef);
}

void FSEventStreamStop(FSEventStreamRef streamRef)
{
}

CFUUIDRef FSEventsCopyUUIDForDevice(dev_t dev)
{
  return _FSEventsCopyUUIDForDevice(dev);
}

FSEventStreamEventId FSEventsGetCurrentEventId(void)
{
  return _FSEventsGetCurrentEventId();
}

IOReturn IOPMAssertionCreateWithDescription(CFStringRef AssertionType, CFStringRef Name, CFStringRef Details, CFStringRef HumanReadableReason, CFStringRef LocalizationBundlePath, CFTimeInterval Timeout, CFStringRef TimeoutAction, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithDescription(AssertionType, Name, Details, HumanReadableReason, LocalizationBundlePath, Timeout, TimeoutAction, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return _IOPMAssertionRelease(AssertionID);
}

CFDictionaryRef IOPSCopyExternalPowerAdapterDetails(void)
{
  return _IOPSCopyExternalPowerAdapterDetails();
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return _IOPSDrawingUnlimitedPower();
}

uint64_t IOPSLimitBatteryLevel()
{
  return _IOPSLimitBatteryLevel();
}

uint64_t IOPSLimitBatteryLevelCancel()
{
  return _IOPSLimitBatteryLevelCancel();
}

uint64_t IOPSLimitBatteryLevelRegister()
{
  return _IOPSLimitBatteryLevelRegister();
}

uint64_t IXCreateUserPresentableError()
{
  return _IXCreateUserPresentableError();
}

uint64_t LICopyIconPathsFromBundle()
{
  return _LICopyIconPathsFromBundle();
}

uint64_t LICreateCachedUncompressedDataFromImage()
{
  return _LICreateCachedUncompressedDataFromImage();
}

uint64_t LICreateIconForBundle()
{
  return _LICreateIconForBundle();
}

uint64_t MBAcquireRestoreLock()
{
  return _MBAcquireRestoreLock();
}

uint64_t MBBackgroundRestoreSignpostHandle()
{
  return _MBBackgroundRestoreSignpostHandle();
}

uint64_t MBBackupMetadataFilenames()
{
  return _MBBackupMetadataFilenames();
}

uint64_t MBBackupReasonIsManual()
{
  return _MBBackupReasonIsManual();
}

uint64_t MBBackupReasonIsScheduled()
{
  return _MBBackupReasonIsScheduled();
}

uint64_t MBBuildIsSeed()
{
  return _MBBuildIsSeed();
}

uint64_t MBBuildVersion()
{
  return _MBBuildVersion();
}

uint64_t MBBytesWithString()
{
  return _MBBytesWithString();
}

uint64_t MBCKStringForBackupState()
{
  return _MBCKStringForBackupState();
}

uint64_t MBCompareVersionStrings()
{
  return _MBCompareVersionStrings();
}

uint64_t MBCreateTemporaryFilePathIn()
{
  return _MBCreateTemporaryFilePathIn();
}

uint64_t MBD2DSnapshotMountPoints()
{
  return _MBD2DSnapshotMountPoints();
}

uint64_t MBDataWithString()
{
  return _MBDataWithString();
}

uint64_t MBDefaultOptions()
{
  return _MBDefaultOptions();
}

uint64_t MBDeviceBackingColor()
{
  return _MBDeviceBackingColor();
}

uint64_t MBDeviceClass()
{
  return _MBDeviceClass();
}

uint64_t MBDeviceColor()
{
  return _MBDeviceColor();
}

uint64_t MBDeviceCoverGlassColor()
{
  return _MBDeviceCoverGlassColor();
}

uint64_t MBDeviceEnclosureColor()
{
  return _MBDeviceEnclosureColor();
}

uint64_t MBDeviceHousingColor()
{
  return _MBDeviceHousingColor();
}

uint64_t MBDeviceName()
{
  return _MBDeviceName();
}

uint64_t MBDeviceUDID_Legacy()
{
  return _MBDeviceUDID_Legacy();
}

uint64_t MBDeviceUUID()
{
  return _MBDeviceUUID();
}

uint64_t MBFinderSnapshotMountPoints()
{
  return _MBFinderSnapshotMountPoints();
}

uint64_t MBFreeDiskSpace()
{
  return _MBFreeDiskSpace();
}

uint64_t MBFreeDiskSpaceForVolume()
{
  return _MBFreeDiskSpaceForVolume();
}

uint64_t MBGetCacheDir()
{
  return _MBGetCacheDir();
}

uint64_t MBGetDefaultLog()
{
  return _MBGetDefaultLog();
}

uint64_t MBGetFileIDBytes()
{
  return _MBGetFileIDBytes();
}

uint64_t MBGetGestaltValueForKey()
{
  return _MBGetGestaltValueForKey();
}

uint64_t MBGetLogDateFormatter()
{
  return _MBGetLogDateFormatter();
}

uint64_t MBGetLogDir()
{
  return _MBGetLogDir();
}

uint64_t MBGetMBSwiftLog()
{
  return _MBGetMBSwiftLog();
}

uint64_t MBGetSQLLog()
{
  return _MBGetSQLLog();
}

uint64_t MBGroupWaitForever()
{
  return _MBGroupWaitForever();
}

uint64_t MBHTTPDateFormatter()
{
  return _MBHTTPDateFormatter();
}

uint64_t MBHardwareModel()
{
  return _MBHardwareModel();
}

uint64_t MBIsInternalInstall()
{
  return _MBIsInternalInstall();
}

uint64_t MBIsRestoreCompatible()
{
  return _MBIsRestoreCompatible();
}

uint64_t MBIsRunningInDaemon()
{
  return _MBIsRunningInDaemon();
}

uint64_t MBIsTransientErrorCode()
{
  return _MBIsTransientErrorCode();
}

uint64_t MBIsValidRelativePath()
{
  return _MBIsValidRelativePath();
}

uint64_t MBIsValidRelativePathIgnoreTilde()
{
  return _MBIsValidRelativePathIgnoreTilde();
}

uint64_t MBLivePathFromSnapshotPath()
{
  return _MBLivePathFromSnapshotPath();
}

uint64_t MBLocale()
{
  return _MBLocale();
}

uint64_t MBLocalizations()
{
  return _MBLocalizations();
}

uint64_t MBLocalizedString()
{
  return _MBLocalizedString();
}

uint64_t MBLocalizedStringFromTable()
{
  return _MBLocalizedStringFromTable();
}

uint64_t MBLocalizedStringWithFormat()
{
  return _MBLocalizedStringWithFormat();
}

uint64_t MBLocalizedStringWithGreenTeaSuffix()
{
  return _MBLocalizedStringWithGreenTeaSuffix();
}

uint64_t MBLocalizedStringWithGreenTeaSuffixAndSubstitutions()
{
  return _MBLocalizedStringWithGreenTeaSuffixAndSubstitutions();
}

uint64_t MBLocalizedStringWithSubstitutions()
{
  return _MBLocalizedStringWithSubstitutions();
}

uint64_t MBLogDeviceProperties()
{
  return _MBLogDeviceProperties();
}

uint64_t MBLogEnableFileLogging()
{
  return _MBLogEnableFileLogging();
}

uint64_t MBLogStashLogs()
{
  return _MBLogStashLogs();
}

uint64_t MBLogStringForNSQualityOfService()
{
  return _MBLogStringForNSQualityOfService();
}

uint64_t MBMarketingName()
{
  return _MBMarketingName();
}

uint64_t MBMobileFileAttributes()
{
  return _MBMobileFileAttributes();
}

uint64_t MBMobileUID()
{
  return _MBMobileUID();
}

uint64_t MBNobodyUID()
{
  return _MBNobodyUID();
}

uint64_t MBPathHasVolumePrefix()
{
  return _MBPathHasVolumePrefix();
}

uint64_t MBPeakProcessMemoryUsage()
{
  return _MBPeakProcessMemoryUsage();
}

uint64_t MBProductType()
{
  return _MBProductType();
}

uint64_t MBProductVersion()
{
  return _MBProductVersion();
}

uint64_t MBRandomDataWithLength()
{
  return _MBRandomDataWithLength();
}

uint64_t MBRandomUUID()
{
  return _MBRandomUUID();
}

uint64_t MBReleaseRestoreLock()
{
  return _MBReleaseRestoreLock();
}

uint64_t MBRemoveTemporaryDirectory()
{
  return _MBRemoveTemporaryDirectory();
}

uint64_t MBRunLoopPerformBlockAndWait()
{
  return _MBRunLoopPerformBlockAndWait();
}

uint64_t MBSQLiteJournalSuffixes()
{
  return _MBSQLiteJournalSuffixes();
}

uint64_t MBSQLitePathExtensions()
{
  return _MBSQLitePathExtensions();
}

uint64_t MBSemaphoreWaitForever()
{
  return _MBSemaphoreWaitForever();
}

uint64_t MBSerialNumber()
{
  return _MBSerialNumber();
}

uint64_t MBSetIsRunningInDaemon()
{
  return _MBSetIsRunningInDaemon();
}

uint64_t MBSimpleChecksumForString()
{
  return _MBSimpleChecksumForString();
}

uint64_t MBSnapshotFormatContainsAssets()
{
  return _MBSnapshotFormatContainsAssets();
}

uint64_t MBSnapshotFormatContainsFileLists()
{
  return _MBSnapshotFormatContainsFileLists();
}

uint64_t MBSnapshotFormatContainsManifests()
{
  return _MBSnapshotFormatContainsManifests();
}

uint64_t MBSnapshotFormatForString()
{
  return _MBSnapshotFormatForString();
}

uint64_t MBSnapshotName()
{
  return _MBSnapshotName();
}

uint64_t MBSnapshotNameWithCurrentDate()
{
  return _MBSnapshotNameWithCurrentDate();
}

uint64_t MBSnapshotPathFromLivePath()
{
  return _MBSnapshotPathFromLivePath();
}

uint64_t MBSnapshotTypeIsFull()
{
  return _MBSnapshotTypeIsFull();
}

uint64_t MBStandardizePath()
{
  return _MBStandardizePath();
}

uint64_t MBStringForBackupPolicy()
{
  return _MBStringForBackupPolicy();
}

uint64_t MBStringForBackupReason()
{
  return _MBStringForBackupReason();
}

uint64_t MBStringForSnapshotFormat()
{
  return _MBStringForSnapshotFormat();
}

uint64_t MBStringForSnapshotType()
{
  return _MBStringForSnapshotType();
}

uint64_t MBStringWithArray()
{
  return _MBStringWithArray();
}

uint64_t MBStringWithData()
{
  return _MBStringWithData();
}

uint64_t MBStringWithDate()
{
  return _MBStringWithDate();
}

uint64_t MBStringWithDictionary()
{
  return _MBStringWithDictionary();
}

uint64_t MBStringWithSet()
{
  return _MBStringWithSet();
}

uint64_t MBStringWithXPCObject()
{
  return _MBStringWithXPCObject();
}

uint64_t MBTemporaryPath()
{
  return _MBTemporaryPath();
}

uint64_t MBUniqueIntegerFilenameWithDirectory()
{
  return _MBUniqueIntegerFilenameWithDirectory();
}

uint64_t MBUsedDiskSpaceForVolume()
{
  return _MBUsedDiskSpaceForVolume();
}

uint64_t MBVolumeTypeFromPath()
{
  return _MBVolumeTypeFromPath();
}

uint64_t MBWeakLinkClass()
{
  return _MBWeakLinkClass();
}

uint64_t MBWeakLinkSymbol()
{
  return _MBWeakLinkSymbol();
}

uint64_t MBiCloudUserSessionSnapshotMountPoints()
{
  return _MBiCloudUserSessionSnapshotMountPoints();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MICreateSerializedPlaceholderForInstalledApplication()
{
  return _MICreateSerializedPlaceholderForInstalledApplication();
}

uint64_t MKBBackupClose()
{
  return _MKBBackupClose();
}

uint64_t MKBBackupCopyBackupBagUUIDForVolume()
{
  return _MKBBackupCopyBackupBagUUIDForVolume();
}

uint64_t MKBBackupCopyBackupKeyUUID()
{
  return _MKBBackupCopyBackupKeyUUID();
}

uint64_t MKBBackupCopyKeyWithError()
{
  return _MKBBackupCopyKeyWithError();
}

uint64_t MKBBackupDecryptInPlace()
{
  return _MKBBackupDecryptInPlace();
}

uint64_t MKBBackupDisableForVolume()
{
  return _MKBBackupDisableForVolume();
}

uint64_t MKBBackupEnableForVolume()
{
  return _MKBBackupEnableForVolume();
}

uint64_t MKBBackupOpen()
{
  return _MKBBackupOpen();
}

uint64_t MKBBackupPread()
{
  return _MKBBackupPread();
}

uint64_t MKBBackupSetKeyEncryptionModeToXTS()
{
  return _MKBBackupSetKeyEncryptionModeToXTS();
}

uint64_t MKBBackupUpdateKeyWithError()
{
  return _MKBBackupUpdateKeyWithError();
}

uint64_t MKBBackupValidateKey()
{
  return _MKBBackupValidateKey();
}

uint64_t MKBBackupValidateKeyUUID()
{
  return _MKBBackupValidateKeyUUID();
}

uint64_t MKBDeviceLockAssertion()
{
  return _MKBDeviceLockAssertion();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MKBFileClose()
{
  return _MKBFileClose();
}

uint64_t MKBFileCopyWrappedKey()
{
  return _MKBFileCopyWrappedKey();
}

uint64_t MKBFileCreateForRestore()
{
  return _MKBFileCreateForRestore();
}

uint64_t MKBFileOpenForBackup()
{
  return _MKBFileOpenForBackup();
}

uint64_t MKBFileRead()
{
  return _MKBFileRead();
}

uint64_t MKBFileValidateWrappedKey()
{
  return _MKBFileValidateWrappedKey();
}

uint64_t MKBFileWrite()
{
  return _MKBFileWrite();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

uint64_t MKBKeyBagChangeSecret()
{
  return _MKBKeyBagChangeSecret();
}

uint64_t MKBKeyBagCopyData()
{
  return _MKBKeyBagCopyData();
}

uint64_t MKBKeyBagCopyUUID()
{
  return _MKBKeyBagCopyUUID();
}

uint64_t MKBKeyBagCreateBackup()
{
  return _MKBKeyBagCreateBackup();
}

uint64_t MKBKeyBagCreateOTABackup()
{
  return _MKBKeyBagCreateOTABackup();
}

uint64_t MKBKeyBagCreateWithData()
{
  return _MKBKeyBagCreateWithData();
}

uint64_t MKBKeyBagKeyStashCommit()
{
  return _MKBKeyBagKeyStashCommit();
}

uint64_t MKBKeyBagRegisterOTABackup()
{
  return _MKBKeyBagRegisterOTABackup();
}

uint64_t MKBKeyBagUnlock()
{
  return _MKBKeyBagUnlock();
}

uint64_t MKBOTABackupBagClose()
{
  return _MKBOTABackupBagClose();
}

uint64_t MKBOTABackupBagCopyUUID()
{
  return _MKBOTABackupBagCopyUUID();
}

uint64_t MKBOTABackupBagOpen()
{
  return _MKBOTABackupBagOpen();
}

uint64_t MKBOTABackupDecryptInPlace()
{
  return _MKBOTABackupDecryptInPlace();
}

uint64_t MKBOTABackupKeyBag()
{
  return _MKBOTABackupKeyBag();
}

uint64_t MKBOTABackupStart()
{
  return _MKBOTABackupStart();
}

uint64_t MKBOTABackupStartForVolume()
{
  return _MKBOTABackupStartForVolume();
}

uint64_t MKBOTABackupStop()
{
  return _MKBOTABackupStop();
}

uint64_t MKBOTABackupStopForVolume()
{
  return _MKBOTABackupStopForVolume();
}

uint64_t MMCSEngineCancelRequests()
{
  return _MMCSEngineCancelRequests();
}

uint64_t MMCSEngineCreate()
{
  return _MMCSEngineCreate();
}

uint64_t MMCSEngineDestroy()
{
  return _MMCSEngineDestroy();
}

uint64_t MMCSGetItems()
{
  return _MMCSGetItems();
}

uint64_t MMCSItemReaderWriterCreate()
{
  return _MMCSItemReaderWriterCreate();
}

uint64_t MMCSPutItems()
{
  return _MMCSPutItems();
}

uint64_t MMCSRegisterFile()
{
  return _MMCSRegisterFile();
}

uint64_t MMCSSignatureAndSchemeSize()
{
  return _MMCSSignatureAndSchemeSize();
}

uint64_t MMCSUnregisterFile()
{
  return _MMCSUnregisterFile();
}

uint64_t MobileInstallationCopySafeHarbors()
{
  return _MobileInstallationCopySafeHarbors();
}

uint64_t MobileInstallationRegisterSafeHarborForContainerType()
{
  return _MobileInstallationRegisterSafeHarborForContainerType();
}

uint64_t MobileInstallationRemoveSafeHarborForContainerType()
{
  return _MobileInstallationRemoveSafeHarborForContainerType();
}

void NSLog(NSString *format, ...)
{
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return _NSMapGet(table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
}

void NSMapRemove(NSMapTable *table, const void *key)
{
}

NSRange NSRangeFromString(NSString *aString)
{
  NSRange v3 = _NSRangeFromString(aString);
  NSUInteger length = v3.length;
  NSUInteger location = v3.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return _NSSelectorFromString(aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return _PBDataWriterWriteBOOLField();
}

uint64_t PBDataWriterWriteDataField()
{
  return _PBDataWriterWriteDataField();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return _PBDataWriterWriteInt32Field();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return _PBDataWriterWriteInt64Field();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return _PBDataWriterWriteSubmessage();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return _PBDataWriterWriteUint32Field();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return _PBDataWriterWriteUint64Field();
}

uint64_t PBReaderPlaceMark()
{
  return _PBReaderPlaceMark();
}

uint64_t PBReaderReadData()
{
  return _PBReaderReadData();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderRecallMark()
{
  return _PBReaderRecallMark();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

uint64_t PLLogRegisteredEvent()
{
  return _PLLogRegisteredEvent();
}

uint64_t SBSCopyIconImagePNGDataForDisplayIdentifier()
{
  return _SBSCopyIconImagePNGDataForDisplayIdentifier();
}

uint64_t SBSSetStatusBarShowsSyncActivity()
{
  return _SBSSetStatusBarShowsSyncActivity();
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddress(CFAllocatorRef allocator, const sockaddr *address)
{
  return _SCNetworkReachabilityCreateWithAddress(allocator, address);
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return _SCNetworkReachabilityGetFlags(target, flags);
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  return _SCNetworkReachabilitySetCallback(target, callout, context);
}

Boolean SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef target, dispatch_queue_t queue)
{
  return _SCNetworkReachabilitySetDispatchQueue(target, queue);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return _SecItemUpdate(query, attributesToUpdate);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return _SecTaskCopySigningIdentifier(task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint64_t WiFiManagerClientCreate()
{
  return _WiFiManagerClientCreate();
}

uint64_t WiFiManagerClientMergeKnownNetworks()
{
  return _WiFiManagerClientMergeKnownNetworks();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFBundleFlushBundleCaches()
{
  return __CFBundleFlushBundleCaches();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return __CFXPCCreateCFObjectFromXPCObject();
}

uint64_t _MBLog()
{
  return __MBLog();
}

uint64_t _MBLogFlushDeprecated()
{
  return __MBLogFlushDeprecated();
}

uint64_t _SecKeychainCopyKeybagUUIDFromFileDescriptor()
{
  return __SecKeychainCopyKeybagUUIDFromFileDescriptor();
}

uint64_t _SecKeychainRestoreBackupFromFileDescriptor()
{
  return __SecKeychainRestoreBackupFromFileDescriptor();
}

uint64_t _SecKeychainWriteBackupToFileDescriptor()
{
  return __SecKeychainWriteBackupToFileDescriptor();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return ___error();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

{
}

{
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sqlite3_apple_archive()
{
  return __sqlite3_apple_archive();
}

uint64_t _sqlite3_apple_unarchive()
{
  return __sqlite3_apple_unarchive();
}

uint64_t _sqlite3_db_copy_compact()
{
  return __sqlite3_db_copy_compact();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return _access(a1, a2);
}

uint32_t arc4random(void)
{
  return _arc4random();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

int atexit_b(void *a1)
{
  return _atexit_b(a1);
}

void bzero(void *a1, size_t a2)
{
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return _class_getMethodImplementation(cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return _class_getName(cls);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return _clock_gettime_nsec_np(__clock_id);
}

int clonefile(const char *a1, const char *a2, uint32_t a3)
{
  return _clonefile(a1, a2, a3);
}

int clonefileat(int a1, const char *a2, int a3, const char *a4, uint32_t a5)
{
  return _clonefileat(a1, a2, a3, a4, a5);
}

int close(int a1)
{
  return _close(a1);
}

int closedir(DIR *a1)
{
  return _closedir(a1);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return _compression_stream_destroy(stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return _compression_stream_init(stream, operation, algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return _compression_stream_process(stream, flags);
}

uint64_t container_copy_path()
{
  return _container_copy_path();
}

uint64_t container_free_array_of_containers()
{
  return _container_free_array_of_containers();
}

uint64_t container_get_all_with_class_for_current_user()
{
  return _container_get_all_with_class_for_current_user();
}

uint64_t container_get_identifier()
{
  return _container_get_identifier();
}

uint64_t container_subdirectories_for_class()
{
  return _container_subdirectories_for_class();
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return _copyfile(from, to, state, flags);
}

copyfile_state_t copyfile_state_alloc(void)
{
  return _copyfile_state_alloc();
}

int copyfile_state_free(copyfile_state_t a1)
{
  return _copyfile_state_free(a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return _dispatch_block_create_with_qos_class(flags, qos_class, relative_priority, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return _dispatch_block_wait(block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return _dispatch_get_specific(key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return _dispatch_queue_attr_make_initially_inactive(attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return _dispatch_walltime(when, delta);
}

double drand48(void)
{
  return _drand48();
}

void exit(int a1)
{
}

long double exp2(long double __x)
{
  return _exp2(__x);
}

int faccessat(int a1, const char *a2, int a3, int a4)
{
  return _faccessat(a1, a2, a3, a4);
}

int fchflags(int a1, __uint32_t a2)
{
  return _fchflags(a1, a2);
}

int fchmod(int a1, mode_t a2)
{
  return _fchmod(a1, a2);
}

int fchmodat(int a1, const char *a2, mode_t a3, int a4)
{
  return _fchmodat(a1, a2, a3, a4);
}

int fchown(int a1, uid_t a2, gid_t a3)
{
  return _fchown(a1, a2, a3);
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

DIR *__cdecl fdopendir(int a1)
{
  return _fdopendir(a1);
}

int fflush(FILE *a1)
{
  return _fflush(a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return _ffsctl(a1, a2, a3, a4);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return _fgetattrlist(a1, a2, a3, a4, a5);
}

ssize_t fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return _fgetxattr(fd, name, value, size, position, options);
}

ssize_t flistxattr(int fd, char *namebuff, size_t size, int options)
{
  return _flistxattr(fd, namebuff, size, options);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return _fputs(a1, a2);
}

void free(void *a1)
{
}

int fremovexattr(int fd, const char *name, int options)
{
  return _fremovexattr(fd, name, options);
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return _fsctl(a1, a2, a3, a4);
}

int fsetxattr(int fd, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return _fsetxattr(fd, name, value, size, position, options);
}

ssize_t fsgetpath(char *a1, size_t a2, fsid_t *a3, uint64_t a4)
{
  return _fsgetpath(a1, a2, a3, a4);
}

int fstat(int a1, stat *a2)
{
  return _fstat(a1, a2);
}

int fstatat(int a1, const char *a2, stat *a3, int a4)
{
  return _fstatat(a1, a2, a3, a4);
}

int fstatfs(int a1, statfs *a2)
{
  return _fstatfs(a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return _ftruncate(a1, a2);
}

int fts_close(FTS *a1)
{
  return _fts_close(a1);
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  return _fts_open(a1, a2, a3);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  return _fts_read(a1);
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  return _fts_set(a1, a2, a3);
}

int futimes(int a1, const timeval *a2)
{
  return _futimes(a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return _getattrlist(a1, a2, a3, a4, a5);
}

int getattrlistat(int a1, const char *a2, void *a3, void *a4, size_t a5, unint64_t a6)
{
  return _getattrlistat(a1, a2, a3, a4, a5, a6);
}

int getattrlistbulk(int a1, void *a2, void *a3, size_t a4, uint64_t a5)
{
  return _getattrlistbulk(a1, a2, a3, a4, a5);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

uid_t geteuid(void)
{
  return _geteuid();
}

int getrlimit(int a1, rlimit *a2)
{
  return _getrlimit(a1, a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

uid_t getuid(void)
{
  return _getuid();
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return _getxattr(path, name, value, size, position, options);
}

int kill(pid_t a1, int a2)
{
  return _kill(a1, a2);
}

int lchflags(const char *a1, __uint32_t a2)
{
  return _lchflags(a1, a2);
}

int lchmod(const char *a1, mode_t a2)
{
  return _lchmod(a1, a2);
}

int lchown(const char *a1, uid_t a2, gid_t a3)
{
  return _lchown(a1, a2, a3);
}

int link(const char *a1, const char *a2)
{
  return _link(a1, a2);
}

int linkat(int a1, const char *a2, int a3, const char *a4, int a5)
{
  return _linkat(a1, a2, a3, a4, a5);
}

ssize_t listxattr(const char *path, char *namebuff, size_t size, int options)
{
  return _listxattr(path, namebuff, size, options);
}

uint64_t lockdown_connect()
{
  return _lockdown_connect();
}

uint64_t lockdown_copy_value()
{
  return _lockdown_copy_value();
}

uint64_t lockdown_disconnect()
{
  return _lockdown_disconnect();
}

uint64_t lockdown_remove_value()
{
  return _lockdown_remove_value();
}

uint64_t lockdown_save_value()
{
  return _lockdown_save_value();
}

uint64_t lockdown_set_value()
{
  return _lockdown_set_value();
}

uint64_t logEventForAppleCare()
{
  return _logEventForAppleCare();
}

off_t lseek(int a1, off_t a2, int a3)
{
  return _lseek(a1, a2, a3);
}

int lstat(const char *a1, stat *a2)
{
  return _lstat(a1, a2);
}

int lutimes(const char *a1, const timeval *a2)
{
  return _lutimes(a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return _mkdir(a1, a2);
}

int mkdirat(int a1, const char *a2, mode_t a3)
{
  return _mkdirat(a1, a2, a3);
}

int mkpath_np(const char *path, mode_t omode)
{
  return _mkpath_np(path, omode);
}

int mkpathat_np(int dfd, const char *path, mode_t omode)
{
  return _mkpathat_np(dfd, path, omode);
}

int mkstemp(char *a1)
{
  return _mkstemp(a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return _mmap(a1, a2, a3, a4, a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return _munmap(a1, a2);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return _open_dprotected_np(a1, a2, a3, a4);
}

int openat(int a1, const char *a2, int a3, ...)
{
  return _openat(a1, a2, a3);
}

uint64_t openbyid_np()
{
  return _openbyid_np();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int posix_spawn(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return _posix_spawn(a1, a2, a3, a4, __argv, __envp);
}

int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *a1, int a2, int a3)
{
  return _posix_spawn_file_actions_adddup2(a1, a2, a3);
}

int posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *a1, int a2, const char *a3, int a4, mode_t a5)
{
  return _posix_spawn_file_actions_addopen(a1, a2, a3, a4, a5);
}

int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *a1)
{
  return _posix_spawn_file_actions_destroy(a1);
}

int posix_spawn_file_actions_init(posix_spawn_file_actions_t *a1)
{
  return _posix_spawn_file_actions_init(a1);
}

int posix_spawnp(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return _posix_spawnp(a1, a2, a3, a4, __argv, __envp);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return _pread(__fd, __buf, __nbyte, a4);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_name(pid, buffer, buffersize);
}

uint64_t random(void)
{
  return _random();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  return _readdir_r(a1, a2, a3);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return _readlink(a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return _realpath_DARWIN_EXTSN(a1, a2);
}

uint64_t reboot3()
{
  return _reboot3();
}

int removexattr(const char *path, const char *name, int options)
{
  return _removexattr(path, name, options);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int renameatx_np(int a1, const char *a2, int a3, const char *a4, unsigned int a5)
{
  return _renameatx_np(a1, a2, a3, a4, a5);
}

int renamex_np(const char *a1, const char *a2, unsigned int a3)
{
  return _renamex_np(a1, a2, a3);
}

int rmdir(const char *a1)
{
  return _rmdir(a1);
}

const char *__cdecl sel_getName(SEL sel)
{
  return _sel_getName(sel);
}

int setattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return _setattrlist(a1, a2, a3, a4, a5);
}

int setpriority(int a1, id_t a2, int a3)
{
  return _setpriority(a1, a2, a3);
}

int setrlimit(int a1, const rlimit *a2)
{
  return _setrlimit(a1, a2);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return _setxattr(path, name, value, size, position, options);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_blob(a1, a2, a3, n, a5);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return _sqlite3_bind_int(a1, a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return _sqlite3_bind_int64(a1, a2, a3);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return _sqlite3_busy_timeout(a1, ms);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return _sqlite3_clear_bindings(a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return _sqlite3_close(a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_blob(a1, iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_bytes(a1, iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return _sqlite3_column_count(pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int(a1, iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int64(a1, iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return _sqlite3_column_name(a1, N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_type(a1, iCol);
}

int sqlite3_errcode(sqlite3 *db)
{
  return _sqlite3_errcode(db);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return _sqlite3_errmsg(a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return _sqlite3_exec(a1, sql, callback, a4, errmsg);
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  return _sqlite3_expanded_sql(pStmt);
}

int sqlite3_extended_errcode(sqlite3 *db)
{
  return _sqlite3_extended_errcode(db);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return _sqlite3_file_control(a1, zDbName, op, a4);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

void sqlite3_free(void *a1)
{
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return _sqlite3_last_insert_rowid(a1);
}

int sqlite3_open(const char *filename, sqlite3 **ppDb)
{
  return _sqlite3_open(filename, ppDb);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return _sqlite3_reset(pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

int sqlite3_trace_v2(sqlite3 *a1, unsigned int uMask, int (__cdecl *xCallback)(unsigned int, void *, void *, void *), void *pCtx)
{
  return _sqlite3_trace_v2(a1, uMask, xCallback, pCtx);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return _sqlite3_wal_checkpoint_v2(db, zDb, eMode, pnLog, pnCkpt);
}

void srand48(uint64_t a1)
{
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return _statfs(a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return _strdup(__s1);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return _strtoull(__str, __endptr, __base);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_deallocUninitializedObject()
{
  return _swift_deallocUninitializedObject();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int symlink(const char *a1, const char *a2)
{
  return _symlink(a1, a2);
}

int symlinkat(const char *a1, int a2, const char *a3)
{
  return _symlinkat(a1, a2, a3);
}

time_t time(time_t *a1)
{
  return _time(a1);
}

int unlink(const char *a1)
{
  return _unlink(a1);
}

int unlinkat(int a1, const char *a2, int a3)
{
  return _unlinkat(a1, a2, a3);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

int utimes(const char *a1, const timeval *a2)
{
  return _utimes(a1, a2);
}

uint64_t voucher_copy()
{
  return _voucher_copy();
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return _waitpid(a1, a2, a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return _xpc_activity_copy_criteria(activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return _xpc_activity_should_defer(activity);
}

void xpc_activity_unregister(const char *identifier)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return _xpc_connection_get_audit_token();
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return _xpc_connection_get_pid(connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_object_t xpc_double_create(double value)
{
  return _xpc_double_create(value);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return _xpc_equal(object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return _xpc_int64_get_value(xint);
}

uint64_t xpc_set_event()
{
  return _xpc_set_event();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

id objc_msgSend_DSID(void *a1, const char *a2, ...)
{
  return _[a1 DSID];
}

id objc_msgSend_ISO8601Formatter(void *a1, const char *a2, ...)
{
  return _[a1 ISO8601Formatter];
}

id objc_msgSend_MBFileWithDomainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "MBFileWithDomainManager:");
}

id objc_msgSend_MMCSMetrics(void *a1, const char *a2, ...)
{
  return _[a1 MMCSMetrics];
}

id objc_msgSend_NSURLRequest(void *a1, const char *a2, ...)
{
  return _[a1 NSURLRequest];
}

id objc_msgSend_OTAKeyBagWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "OTAKeyBagWithData:error:");
}

id objc_msgSend_OTAKeyBagWithData_secret_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "OTAKeyBagWithData:secret:error:");
}

id objc_msgSend_OTAKeyBagWithSecret_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "OTAKeyBagWithSecret:error:");
}

id objc_msgSend_OTAKeybagUUIDStringWithVolume_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "OTAKeybagUUIDStringWithVolume:error:");
}

id objc_msgSend_OTAKeybagWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "OTAKeybagWithError:");
}

id objc_msgSend_RSSI(void *a1, const char *a2, ...)
{
  return _[a1 RSSI];
}

id objc_msgSend_SQLiteFileHandleWithOriginalFileHandle_copiedFileHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SQLiteFileHandleWithOriginalFileHandle:copiedFileHandle:");
}

id objc_msgSend_SQLiteSpaceSavingsThresholdWithDefaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SQLiteSpaceSavingsThresholdWithDefaultValue:");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingLastPathComponent];
}

id objc_msgSend_URLByInsertingUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByInsertingUser:");
}

id objc_msgSend_URLQueryAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 URLQueryAllowedCharacterSet];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_UUIDStringForKeyBagUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDStringForKeyBagUUID:");
}

id objc_msgSend_UUIDStringFromRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDStringFromRecordID:");
}

id objc_msgSend_UUIDWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDWithError:");
}

id objc_msgSend__URLForItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_URLForItem:");
}

id objc_msgSend__abortBatchPipeline(void *a1, const char *a2, ...)
{
  return _[a1 _abortBatchPipeline];
}

id objc_msgSend__account(void *a1, const char *a2, ...)
{
  return _[a1 _account];
}

id objc_msgSend__accountTypeFromAccountClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountTypeFromAccountClass:");
}

id objc_msgSend__activityForActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activityForActivityType:");
}

id objc_msgSend__addBackupPathsNotInManifestDB_operationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addBackupPathsNotInManifestDB:operationType:");
}

id objc_msgSend__addBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addBatch:");
}

id objc_msgSend__addBatchToService_fileAuthTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addBatchToService:fileAuthTokens:");
}

id objc_msgSend__addBytesRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addBytesRemaining:");
}

id objc_msgSend__addCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCache:");
}

id objc_msgSend__addCloudSize_localSize_forDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCloudSize:localSize:forDomain:");
}

id objc_msgSend__addContainer_toArray_visited_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addContainer:toArray:visited:");
}

id objc_msgSend__addDatabaseOperation_account_container_policy_operationGroup_xpcActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addDatabaseOperation:account:container:policy:operationGroup:xpcActivity:");
}

id objc_msgSend__addDependentDomainsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addDependentDomainsWithError:");
}

id objc_msgSend__addDomainSizesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addDomainSizesWithError:");
}

id objc_msgSend__addFileChange_toBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addFileChange:toBatch:");
}

id objc_msgSend__addFileChangesToBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addFileChangesToBatch:");
}

id objc_msgSend__addFileToDomainName_relativePath_fromPath_progress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addFileToDomainName:relativePath:fromPath:progress:");
}

id objc_msgSend__addFileToLeaveAlone_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addFileToLeaveAlone:flags:");
}

id objc_msgSend__addFileToMove_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addFileToMove:");
}

id objc_msgSend__addFileToUploadAndMove_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addFileToUploadAndMove:flags:");
}

id objc_msgSend__addMetadataToFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addMetadataToFile:");
}

id objc_msgSend__addMetricsWithTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addMetricsWithTracker:");
}

id objc_msgSend__addPlaceholdersSizesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPlaceholdersSizesWithError:");
}

id objc_msgSend__addRelativePathsToPathsToBackupAndRestore_forDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addRelativePathsToPathsToBackupAndRestore:forDomain:");
}

id objc_msgSend__addRemainingProgress_forDomainID_domainName_readOnlyDB_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addRemainingProgress:forDomainID:domainName:readOnlyDB:error:");
}

id objc_msgSend__addTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addTracker:");
}

id objc_msgSend__addZeroBytesForDisabledAndRestrictedDomainNames(void *a1, const char *a2, ...)
{
  return _[a1 _addZeroBytesForDisabledAndRestrictedDomainNames];
}

id objc_msgSend__adjustInodesForVolumeTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustInodesForVolumeTransition:");
}

id objc_msgSend__airTrafficFinishedRestoring(void *a1, const char *a2, ...)
{
  return _[a1 _airTrafficFinishedRestoring];
}

id objc_msgSend__alertUserOfFinishedRestoreForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alertUserOfFinishedRestoreForAccount:");
}

id objc_msgSend__allDisabledDomainNamesForPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allDisabledDomainNamesForPersona:");
}

id objc_msgSend__allPersistedDisabledDomainNamesForPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allPersistedDisabledDomainNamesForPersona:");
}

id objc_msgSend__allValuesForKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allValuesForKey:account:");
}

id objc_msgSend__annotate(void *a1, const char *a2, ...)
{
  return _[a1 _annotate];
}

id objc_msgSend__annotateDomain_atDomainRoot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_annotateDomain:atDomainRoot:");
}

id objc_msgSend__annotateNotBackedUpDomain_domainRoot_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_annotateNotBackedUpDomain:domainRoot:relativePath:");
}

id objc_msgSend__annotatePath_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_annotatePath:value:");
}

id objc_msgSend__annotateRestoredDomain_domainRoot_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_annotateRestoredDomain:domainRoot:relativePath:");
}

id objc_msgSend__archive(void *a1, const char *a2, ...)
{
  return _[a1 _archive];
}

id objc_msgSend__assetIDForDomain_inode_hmacKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assetIDForDomain:inode:hmacKey:");
}

id objc_msgSend__assetMetadataForRenamedOrHardlinkedFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assetMetadataForRenamedOrHardlinkedFile:error:");
}

id objc_msgSend__assetMetadataFromFile_oldMetadata_modificationType_outRequiresInvalidation_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assetMetadataFromFile:oldMetadata:modificationType:outRequiresInvalidation:error:");
}

id objc_msgSend__associateMetricsWithOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_associateMetricsWithOperation:");
}

id objc_msgSend__atcPathsByDomainNameForPaths_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_atcPathsByDomainNameForPaths:error:");
}

id objc_msgSend__backUp(void *a1, const char *a2, ...)
{
  return _[a1 _backUp];
}

id objc_msgSend__backoffDateForAccount_softCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backoffDateForAccount:softCancelled:");
}

id objc_msgSend__backoffForError_networkAvailable_attempt_backoffCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backoffForError:networkAvailable:attempt:backoffCache:");
}

id objc_msgSend__backupAfterPreflight(void *a1, const char *a2, ...)
{
  return _[a1 _backupAfterPreflight];
}

id objc_msgSend__backupEngineWithPreflightRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backupEngineWithPreflightRequest:");
}

id objc_msgSend__backupEngineWithReason_settingsContext_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backupEngineWithReason:settingsContext:account:");
}

id objc_msgSend__backupManagerForSnapshotURL_liveFSURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backupManagerForSnapshotURL:liveFSURL:");
}

id objc_msgSend__backupOnBatteryAllowed(void *a1, const char *a2, ...)
{
  return _[a1 _backupOnBatteryAllowed];
}

id objc_msgSend__baseRestorePathForDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_baseRestorePathForDomain:");
}

id objc_msgSend__buildEventReadersForPersona_domainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildEventReadersForPersona:domainManager:");
}

id objc_msgSend__buildPathToDomainMapWithDomainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildPathToDomainMapWithDomainManager:");
}

id objc_msgSend__buildRestoreFilesTable(void *a1, const char *a2, ...)
{
  return _[a1 _buildRestoreFilesTable];
}

id objc_msgSend__bundleIDForDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bundleIDForDomainName:");
}

id objc_msgSend__cacheSyncZoneFetchedWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheSyncZoneFetchedWithAccount:");
}

id objc_msgSend__cacheTrackerWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheTrackerWithAccount:");
}

id objc_msgSend__cancel(void *a1, const char *a2, ...)
{
  return _[a1 _cancel];
}

id objc_msgSend__cancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancel:");
}

id objc_msgSend__cancelAlarm(void *a1, const char *a2, ...)
{
  return _[a1 _cancelAlarm];
}

id objc_msgSend__cancelAllBackgroundRestoreEngines(void *a1, const char *a2, ...)
{
  return _[a1 _cancelAllBackgroundRestoreEngines];
}

id objc_msgSend__cancelBackgroundRestoreCellularAccessChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 _cancelBackgroundRestoreCellularAccessChangedNotification];
}

id objc_msgSend__cancelBackgroundRestoreTTRTimerWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelBackgroundRestoreTTRTimerWithAccount:");
}

id objc_msgSend__cancelBackupAndScanEnginesWithAccount_timeout_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelBackupAndScanEnginesWithAccount:timeout:completion:");
}

id objc_msgSend__cancelBackupAndScanEnginesWithTimeout_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelBackupAndScanEnginesWithTimeout:completion:");
}

id objc_msgSend__cancelBackupEngine(void *a1, const char *a2, ...)
{
  return _[a1 _cancelBackupEngine];
}

id objc_msgSend__cancelBackupEngineWithError_account_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelBackupEngineWithError:account:connection:");
}

id objc_msgSend__cancelBackupWithActivityType_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelBackupWithActivityType:changes:");
}

id objc_msgSend__cancelDeferralTimerForActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelDeferralTimerForActivity:");
}

id objc_msgSend__cancelDelayedBackgroundRestoreTimerWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelDelayedBackgroundRestoreTimerWithAccount:");
}

id objc_msgSend__cancelDisconnectTimer(void *a1, const char *a2, ...)
{
  return _[a1 _cancelDisconnectTimer];
}

id objc_msgSend__cancelInitiatedBackupWithChanges_isDeferred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelInitiatedBackupWithChanges:isDeferred:");
}

id objc_msgSend__cancelInternalNotification(void *a1, const char *a2, ...)
{
  return _[a1 _cancelInternalNotification];
}

id objc_msgSend__cancelLossTimers(void *a1, const char *a2, ...)
{
  return _[a1 _cancelLossTimers];
}

id objc_msgSend__cancelMonitoringForSetupAssistantFinished(void *a1, const char *a2, ...)
{
  return _[a1 _cancelMonitoringForSetupAssistantFinished];
}

id objc_msgSend__cancelNetworkAccessTimer(void *a1, const char *a2, ...)
{
  return _[a1 _cancelNetworkAccessTimer];
}

id objc_msgSend__cancelPowerLossTimer(void *a1, const char *a2, ...)
{
  return _[a1 _cancelPowerLossTimer];
}

id objc_msgSend__cancelRestoreInProgressFollowUpTimer(void *a1, const char *a2, ...)
{
  return _[a1 _cancelRestoreInProgressFollowUpTimer];
}

id objc_msgSend__cancelThermalPressureNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _cancelThermalPressureNotifications];
}

id objc_msgSend__cancelTimer(void *a1, const char *a2, ...)
{
  return _[a1 _cancelTimer];
}

id objc_msgSend__cancelWiFiLossTimer(void *a1, const char *a2, ...)
{
  return _[a1 _cancelWiFiLossTimer];
}

id objc_msgSend__cancelWithBlocking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelWithBlocking:");
}

id objc_msgSend__cancellationError(void *a1, const char *a2, ...)
{
  return _[a1 _cancellationError];
}

id objc_msgSend__changeBackupKeyBagPasswordInProperties_fromPassword_toPassword_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changeBackupKeyBagPasswordInProperties:fromPassword:toPassword:error:");
}

id objc_msgSend__checkCompatibility(void *a1, const char *a2, ...)
{
  return _[a1 _checkCompatibility];
}

id objc_msgSend__checkForBackupCtlPrivileged_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForBackupCtlPrivileged:description:error:");
}

id objc_msgSend__checkForCancellation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForCancellation:");
}

id objc_msgSend__checkForItemErrorsInCompletedBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForItemErrorsInCompletedBatch:");
}

id objc_msgSend__checkFreeDiskSpace_preflightInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkFreeDiskSpace:preflightInfo:error:");
}

id objc_msgSend__checkPassword_withPasswordHash_andSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkPassword:withPasswordHash:andSalt:");
}

id objc_msgSend__checkinXPCActivities(void *a1, const char *a2, ...)
{
  return _[a1 _checkinXPCActivities];
}

id objc_msgSend__childFailuresOfErrorID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_childFailuresOfErrorID:error:");
}

id objc_msgSend__ckClearRestoreSessionWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ckClearRestoreSessionWithAccount:");
}

id objc_msgSend__ckSettingsContextForBackupUDID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ckSettingsContextForBackupUDID:account:");
}

id objc_msgSend__ckSettingsContextForRestoreWithDeviceUUID_account_delegateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ckSettingsContextForRestoreWithDeviceUUID:account:delegateContext:");
}

id objc_msgSend__ckStartBackgroundRestoreWithSettingsContext_delegateContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ckStartBackgroundRestoreWithSettingsContext:delegateContext:error:");
}

id objc_msgSend__cleanUpBackupEngine(void *a1, const char *a2, ...)
{
  return _[a1 _cleanUpBackupEngine];
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return _[a1 _cleanup];
}

id objc_msgSend__cleanupDeviceSnapshotDir(void *a1, const char *a2, ...)
{
  return _[a1 _cleanupDeviceSnapshotDir];
}

id objc_msgSend__cleanupStaleStateWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupStaleStateWithAccount:");
}

id objc_msgSend__clearAllFailureCountsForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearAllFailureCountsForAccount:");
}

id objc_msgSend__clearAllRetryAfterDatesForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearAllRetryAfterDatesForAccount:");
}

id objc_msgSend__clearDeferredDiscountingCameraRollQuota(void *a1, const char *a2, ...)
{
  return _[a1 _clearDeferredDiscountingCameraRollQuota];
}

id objc_msgSend__clearFailureCountWithKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearFailureCountWithKey:account:");
}

id objc_msgSend__clearInProgressVolumeTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearInProgressVolumeTransition:");
}

id objc_msgSend__clearLastPendingSnapshotSizeForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearLastPendingSnapshotSizeForAccount:");
}

id objc_msgSend__clearMegaBackupTelemetries(void *a1, const char *a2, ...)
{
  return _[a1 _clearMegaBackupTelemetries];
}

id objc_msgSend__clearPendingSnapshotAfterQuotaExceededError(void *a1, const char *a2, ...)
{
  return _[a1 _clearPendingSnapshotAfterQuotaExceededError];
}

id objc_msgSend__clearPreferencesForRestoringSettingsEnabledForMegaBackup(void *a1, const char *a2, ...)
{
  return _[a1 _clearPreferencesForRestoringSettingsEnabledForMegaBackup];
}

id objc_msgSend__clearRestoreInProgressFollowUp(void *a1, const char *a2, ...)
{
  return _[a1 _clearRestoreInProgressFollowUp];
}

id objc_msgSend__clearRestoreSession(void *a1, const char *a2, ...)
{
  return _[a1 _clearRestoreSession];
}

id objc_msgSend__clearRestoreSessionWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearRestoreSessionWithAccount:");
}

id objc_msgSend__clearRetryAfterDateWithKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearRetryAfterDateWithKey:account:");
}

id objc_msgSend__clearSnapshotActionsWithOperationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearSnapshotActionsWithOperationTracker:error:");
}

id objc_msgSend__clearSyncZoneFetchedWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearSyncZoneFetchedWithAccount:");
}

id objc_msgSend__clientLastError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientLastError:");
}

id objc_msgSend__closeCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeCache:");
}

id objc_msgSend__codeWithMMCSError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_codeWithMMCSError:");
}

id objc_msgSend__collectEventsFromPreviousState_persona_cancellationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collectEventsFromPreviousState:persona:cancellationHandler:");
}

id objc_msgSend__collectFileIntoOpenedFileListDatabase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collectFileIntoOpenedFileListDatabase:error:");
}

id objc_msgSend__collectRestoreErrorsAndFileTTR_restoreFailuresPlistPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collectRestoreErrorsAndFileTTR:restoreFailuresPlistPath:error:");
}

id objc_msgSend__commitBatchToService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commitBatchToService:");
}

id objc_msgSend__commitSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 _commitSnapshot];
}

id objc_msgSend__compactSQLiteDatabaseAtPath_file_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_compactSQLiteDatabaseAtPath:file:error:");
}

id objc_msgSend__compactSQLiteDatabaseAtPath_temporaryDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_compactSQLiteDatabaseAtPath:temporaryDirectory:error:");
}

id objc_msgSend__compress(void *a1, const char *a2, ...)
{
  return _[a1 _compress];
}

id objc_msgSend__conditionLossTimerWithSeconds_changes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_conditionLossTimerWithSeconds:changes:");
}

id objc_msgSend__configureAndIXInstallPlaceholdersInDirectory_isDataSeparated_migratorCache_demotedAppsPlist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureAndIXInstallPlaceholdersInDirectory:isDataSeparated:migratorCache:demotedAppsPlist:");
}

id objc_msgSend__configureAppPlaceholderAtPath_installType_isDataSeparated_migratorCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureAppPlaceholderAtPath:installType:isDataSeparated:migratorCache:");
}

id objc_msgSend__configureCKOperation_container_policy_operationGroup_xpcActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureCKOperation:container:policy:operationGroup:xpcActivity:");
}

id objc_msgSend__configureModifyRecordsOperation_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureModifyRecordsOperation:container:");
}

id objc_msgSend__consumeTokensAfterError_networkAvailable_attempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_consumeTokensAfterError:networkAvailable:attempt:");
}

id objc_msgSend__containerClassForMBContainerType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_containerClassForMBContainerType:");
}

id objc_msgSend__contentAssetForFileAtPath_domain_assetType_compressionMethod_protectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contentAssetForFileAtPath:domain:assetType:compressionMethod:protectionClass:");
}

id objc_msgSend__convertDomainSizesToDomainInfos(void *a1, const char *a2, ...)
{
  return _[a1 _convertDomainSizesToDomainInfos];
}

id objc_msgSend__copyAppsWithPlists_volumeMountPoints_safeHarbor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyAppsWithPlists:volumeMountPoints:safeHarbor:error:");
}

id objc_msgSend__copyBackupStateInfoForInitialMegaBackup_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyBackupStateInfoForInitialMegaBackup:account:");
}

id objc_msgSend__copySQLiteDatabaseAtPath_temporaryDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copySQLiteDatabaseAtPath:temporaryDirectory:error:");
}

id objc_msgSend__copySafeHarborsWithVolumeMountPoints_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copySafeHarborsWithVolumeMountPoints:error:");
}

id objc_msgSend__copySystemContainersWithPlists_volumeMountPoints_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copySystemContainersWithPlists:volumeMountPoints:error:");
}

id objc_msgSend__copySystemContainersWithVolumeMountPoints_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copySystemContainersWithVolumeMountPoints:error:");
}

id objc_msgSend__copySystemPluginsForPersona_volumeMountPoints_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copySystemPluginsForPersona:volumeMountPoints:error:");
}

id objc_msgSend__copySystemPluginsWithPlists_volumeMountPoints_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copySystemPluginsWithPlists:volumeMountPoints:error:");
}

id objc_msgSend__copyUserAppsForPersona_dataSeparatedBundleIDs_volumeMountPoints_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyUserAppsForPersona:dataSeparatedBundleIDs:volumeMountPoints:error:");
}

id objc_msgSend__countMissingEncryptionKeyForFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_countMissingEncryptionKeyForFile:");
}

id objc_msgSend__createBackupAndSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 _createBackupAndSnapshot];
}

id objc_msgSend__createBaseRecordIDs_pageCounts_checksums_fromReferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createBaseRecordIDs:pageCounts:checksums:fromReferences:");
}

id objc_msgSend__createCFUserNotificationFromMBUserNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createCFUserNotificationFromMBUserNotification:");
}

id objc_msgSend__createContainerWithSyncZoneForAccount_policy_operationGroup_xpcActivity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createContainerWithSyncZoneForAccount:policy:operationGroup:xpcActivity:error:");
}

id objc_msgSend__createDomainRecordQuotaFromBaseRecordIDs_domainQuotas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDomainRecordQuotaFromBaseRecordIDs:domainQuotas:");
}

id objc_msgSend__createDomainReferencesFromBaseRecordIDs_pageCounts_checksums_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDomainReferencesFromBaseRecordIDs:pageCounts:checksums:");
}

id objc_msgSend__createDomainTranscriberForAPFSSnapshots_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDomainTranscriberForAPFSSnapshots:error:");
}

id objc_msgSend__createInstallCoordinatorForPlaceholderAtPath_bundleID_installType_isDataSeparated_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createInstallCoordinatorForPlaceholderAtPath:bundleID:installType:isDataSeparated:error:");
}

id objc_msgSend__createModifyOperationForSaveInfos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createModifyOperationForSaveInfos:");
}

id objc_msgSend__createResourceCopyWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createResourceCopyWithError:");
}

id objc_msgSend__createSchemaStatements(void *a1, const char *a2, ...)
{
  return _[a1 _createSchemaStatements];
}

id objc_msgSend__createTemporarySQLiteCopyWithEngine_temporaryDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createTemporarySQLiteCopyWithEngine:temporaryDirectory:error:");
}

id objc_msgSend__dataForItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataForItem:");
}

id objc_msgSend__dateOfLastBackupFromCloudWithConnection_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dateOfLastBackupFromCloudWithConnection:account:error:");
}

id objc_msgSend__dateOfLastBackupFromLockdown(void *a1, const char *a2, ...)
{
  return _[a1 _dateOfLastBackupFromLockdown];
}

id objc_msgSend__dateOfLastNagForIdentifier_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dateOfLastNagForIdentifier:account:");
}

id objc_msgSend__decodeBackupPropertiesWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decodeBackupPropertiesWithValue:");
}

id objc_msgSend__decompress(void *a1, const char *a2, ...)
{
  return _[a1 _decompress];
}

id objc_msgSend__decrementSignatureRetainCount(void *a1, const char *a2, ...)
{
  return _[a1 _decrementSignatureRetainCount];
}

id objc_msgSend__decryptFile_restorePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decryptFile:restorePath:");
}

id objc_msgSend__decryptWithOperationTracker_destination_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decryptWithOperationTracker:destination:device:error:");
}

id objc_msgSend__decrypterFor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decrypterFor:error:");
}

id objc_msgSend__defaultMegaBackupExpirationDate(void *a1, const char *a2, ...)
{
  return _[a1 _defaultMegaBackupExpirationDate];
}

id objc_msgSend__defaultSubdirectoriesForMCMContainerType_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_defaultSubdirectoriesForMCMContainerType:withError:");
}

id objc_msgSend__deferDiscountingCameraRollQuota(void *a1, const char *a2, ...)
{
  return _[a1 _deferDiscountingCameraRollQuota];
}

id objc_msgSend__deleteItemFromDomainName_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteItemFromDomainName:relativePath:");
}

id objc_msgSend__deleteRecordsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteRecordsWithCompletion:");
}

id objc_msgSend__descriptionForResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionForResponse:");
}

id objc_msgSend__descriptionForTTR_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionForTTR:account:");
}

id objc_msgSend__detectModifiedDomain_relativePath_lastModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_detectModifiedDomain:relativePath:lastModified:");
}

id objc_msgSend__determineInternalNotificationActionForErrors_dateOfLastUnlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineInternalNotificationActionForErrors:dateOfLastUnlock:");
}

id objc_msgSend__deviceIsNonAopDevice(void *a1, const char *a2, ...)
{
  return _[a1 _deviceIsNonAopDevice];
}

id objc_msgSend__deviceSnapshotDir(void *a1, const char *a2, ...)
{
  return _[a1 _deviceSnapshotDir];
}

id objc_msgSend__deviceSnapshotManifestDatabasePath(void *a1, const char *a2, ...)
{
  return _[a1 _deviceSnapshotManifestDatabasePath];
}

id objc_msgSend__deviceSnapshotPropertiesPath(void *a1, const char *a2, ...)
{
  return _[a1 _deviceSnapshotPropertiesPath];
}

id objc_msgSend__dictToJSONString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dictToJSONString:");
}

id objc_msgSend__dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 _dictionaryRepresentation];
}

id objc_msgSend__didFinishGettingItemID_signature_path_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFinishGettingItemID:signature:path:error:");
}

id objc_msgSend__didFinishPuttingItemID_signature_receipt_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFinishPuttingItemID:signature:receipt:error:");
}

id objc_msgSend__didUpdateBackupProgress_estimatedTimeRemaining_bytesRemaining_engineState_stateInfo_isInitialMegaBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didUpdateBackupProgress:estimatedTimeRemaining:bytesRemaining:engineState:stateInfo:isInitialMegaBackup:");
}

id objc_msgSend__differencesBetweenCloudMetadata_localMetadata_domain_path_isBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_differencesBetweenCloudMetadata:localMetadata:domain:path:isBackup:");
}

id objc_msgSend__disableHyperLogging(void *a1, const char *a2, ...)
{
  return _[a1 _disableHyperLogging];
}

id objc_msgSend__disableInfraWiFi(void *a1, const char *a2, ...)
{
  return _[a1 _disableInfraWiFi];
}

id objc_msgSend__disableKeychainSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disableKeychainSync:");
}

id objc_msgSend__disabledDomainNames(void *a1, const char *a2, ...)
{
  return _[a1 _disabledDomainNames];
}

id objc_msgSend__disabledSyncDataclassesForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disabledSyncDataclassesForAccount:");
}

id objc_msgSend__discountCameraRollQuotaForBackupUDID_account_operationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discountCameraRollQuotaForBackupUDID:account:operationTracker:error:");
}

id objc_msgSend__domainDisplayNamesForFailedDomainsWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_domainDisplayNamesForFailedDomainsWithAccount:");
}

id objc_msgSend__domainFromPath_requiresScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_domainFromPath:requiresScan:");
}

id objc_msgSend__domainHMACsToRepair_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_domainHMACsToRepair:");
}

id objc_msgSend__domainIDForDomainName_inDB_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_domainIDForDomainName:inDB:error:");
}

id objc_msgSend__domainInfoForName_cache_appManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_domainInfoForName:cache:appManager:");
}

id objc_msgSend__domainNamesFromFileListWithCommitID_snapshotDir_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_domainNamesFromFileListWithCommitID:snapshotDir:error:");
}

id objc_msgSend__domainsInCurrentSnapshotDirectory_outSystemApps_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_domainsInCurrentSnapshotDirectory:outSystemApps:error:");
}

id objc_msgSend__downloadAssets_withFetcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_downloadAssets:withFetcher:");
}

id objc_msgSend__drainBatchPipeline(void *a1, const char *a2, ...)
{
  return _[a1 _drainBatchPipeline];
}

id objc_msgSend__drainWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drainWithCompletion:");
}

id objc_msgSend__drop(void *a1, const char *a2, ...)
{
  return _[a1 _drop];
}

id objc_msgSend__enableBackgroundHyperLogging(void *a1, const char *a2, ...)
{
  return _[a1 _enableBackgroundHyperLogging];
}

id objc_msgSend__enableForegroundHyperLogging(void *a1, const char *a2, ...)
{
  return _[a1 _enableForegroundHyperLogging];
}

id objc_msgSend__enableInfraWiFi(void *a1, const char *a2, ...)
{
  return _[a1 _enableInfraWiFi];
}

id objc_msgSend__enableKeychainSync_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableKeychainSync:completion:");
}

id objc_msgSend__encryptedRestorePathForFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_encryptedRestorePathForFile:");
}

id objc_msgSend__encryptionKeyForFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_encryptionKeyForFile:error:");
}

id objc_msgSend__encryptionKeyForFile_existingEncryptionKey_outEncryptionKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_encryptionKeyForFile:existingEncryptionKey:outEncryptionKey:error:");
}

id objc_msgSend__encryptionKeyForFileWithID_inodeNumber_path_protectionClass_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_encryptionKeyForFileWithID:inodeNumber:path:protectionClass:error:");
}

id objc_msgSend__endingRestoreWithDriveEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endingRestoreWithDriveEngine:");
}

id objc_msgSend__endingRestoreWithServicePolicy_engine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endingRestoreWithServicePolicy:engine:");
}

id objc_msgSend__enginePolicy(void *a1, const char *a2, ...)
{
  return _[a1 _enginePolicy];
}

id objc_msgSend__entryMethodForEntryPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_entryMethodForEntryPoint:");
}

id objc_msgSend__enumerate_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerate:error:block:");
}

id objc_msgSend__enumerateAndMarkATCRestorables_totalATCAssets_error_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateAndMarkATCRestorables:totalATCAssets:error:enumerator:");
}

id objc_msgSend__enumerateAndMarkRestorablesMatchingType_state_readOnlyDB_absolutePath_descending_error_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateAndMarkRestorablesMatchingType:state:readOnlyDB:absolutePath:descending:error:enumerator:");
}

id objc_msgSend__enumerateAppsWithEnumerationOptions_to_persona_dataSeparatedBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateAppsWithEnumerationOptions:to:persona:dataSeparatedBundleIDs:");
}

id objc_msgSend__enumerateAssetsFromResultSet_columnIndex_error_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateAssetsFromResultSet:columnIndex:error:enumerator:");
}

id objc_msgSend__enumerateDomainsWithState_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateDomainsWithState:error:block:");
}

id objc_msgSend__enumerateFatalFailuresOfType_error_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateFatalFailuresOfType:error:enumerator:");
}

id objc_msgSend__enumerateNonFatalFailuresOfType_error_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateNonFatalFailuresOfType:error:enumerator:");
}

id objc_msgSend__enumerateObjectsOfClass_callback_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateObjectsOfClass:callback:format:");
}

id objc_msgSend__errorWithMMCSError_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorWithMMCSError:description:");
}

id objc_msgSend__errorWithMMCSError_path_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorWithMMCSError:path:description:");
}

id objc_msgSend__errorWithSQL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorWithSQL:");
}

id objc_msgSend__estimateCurrentBackgroundRestoreSizeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_estimateCurrentBackgroundRestoreSizeWithError:");
}

id objc_msgSend__eventIDForTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventIDForTask:");
}

id objc_msgSend__exec_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_exec:");
}

id objc_msgSend__executeSQL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeSQL:");
}

id objc_msgSend__expandedSQL(void *a1, const char *a2, ...)
{
  return _[a1 _expandedSQL];
}

id objc_msgSend__expirationExtensionFollowUpAction(void *a1, const char *a2, ...)
{
  return _[a1 _expirationExtensionFollowUpAction];
}

id objc_msgSend__exportKeychainForCKBackupEngine_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_exportKeychainForCKBackupEngine:error:");
}

id objc_msgSend__extendedAttributesForPathFSR_quiet_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extendedAttributesForPathFSR:quiet:error:");
}

id objc_msgSend__extractFileID_toPath_progress_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extractFileID:toPath:progress:error:");
}

id objc_msgSend__extractItemFromDomainName_relativePath_toPath_progress_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extractItemFromDomainName:relativePath:toPath:progress:error:");
}

id objc_msgSend__failureAtIndex_childFailures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failureAtIndex:childFailures:");
}

id objc_msgSend__failuresFor_isFatal_domainsNamesOut_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failuresFor:isFatal:domainsNamesOut:error:");
}

id objc_msgSend__fetch(void *a1, const char *a2, ...)
{
  return _[a1 _fetch];
}

id objc_msgSend__fetchAccountsAndIsEnabled_isBackupOnCellularEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAccountsAndIsEnabled:isBackupOnCellularEnabled:");
}

id objc_msgSend__fetchBackupPolicyWithDevice_snapshotUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchBackupPolicyWithDevice:snapshotUUID:error:");
}

id objc_msgSend__fetchDeviceRecordWithRecordID_tracker_hmacKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchDeviceRecordWithRecordID:tracker:hmacKey:error:");
}

id objc_msgSend__fetchDomainNamesToForegroundRestoreWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchDomainNamesToForegroundRestoreWithError:");
}

id objc_msgSend__fetchMetadataFromDiskForPath_modifiedDate_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchMetadataFromDiskForPath:modifiedDate:metadata:");
}

id objc_msgSend__fetchMetadataFromFetchedFileList_relativePath_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchMetadataFromFetchedFileList:relativePath:metadata:");
}

id objc_msgSend__fetchNextBackupDateAcrossAccountsOnWifi_cellular_battery_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchNextBackupDateAcrossAccountsOnWifi:cellular:battery:error:");
}

id objc_msgSend__fetchNextBackupDateOnWiFi_nextBackupDateOnCellular_nextBackupDateOnBattery_lastBackupDate_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchNextBackupDateOnWiFi:nextBackupDateOnCellular:nextBackupDateOnBattery:lastBackupDate:account:connection:error:");
}

id objc_msgSend__fetchObjectOfClass_error_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchObjectOfClass:error:format:");
}

id objc_msgSend__fetchPluginFieldsFromDelegate(void *a1, const char *a2, ...)
{
  return _[a1 _fetchPluginFieldsFromDelegate];
}

id objc_msgSend__fetchPreviousBackupFSEventState(void *a1, const char *a2, ...)
{
  return _[a1 _fetchPreviousBackupFSEventState];
}

id objc_msgSend__fetchPreviouslyBackedUpEncryptionKeyForFile_oldMetadata_outEncryptionKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPreviouslyBackedUpEncryptionKeyForFile:oldMetadata:outEncryptionKey:error:");
}

id objc_msgSend__fetchPropertyValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPropertyValue:forKey:error:");
}

id objc_msgSend__fetchRecordsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecordsWithCompletion:");
}

id objc_msgSend__fetchSnapshotsWithOperationTracker_retry_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSnapshotsWithOperationTracker:retry:completion:");
}

id objc_msgSend__fetchVolumeUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchVolumeUUID:error:");
}

id objc_msgSend__fileChangeFromStmt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileChangeFromStmt:");
}

id objc_msgSend__fileChangeTypeForNewFile_oldFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileChangeTypeForNewFile:oldFile:");
}

id objc_msgSend__fileHandleWithPath_flags_mode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileHandleWithPath:flags:mode:error:");
}

id objc_msgSend__fileListContainsValidFileMetadata_forFile_metadata_outModificationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileListContainsValidFileMetadata:forFile:metadata:outModificationType:");
}

id objc_msgSend__fileListReferencesMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileListReferencesMatching:");
}

id objc_msgSend__fileMetadataForPath_fetchXattrs_db_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileMetadataForPath:fetchXattrs:db:error:");
}

id objc_msgSend__fileSystemSupportsSparseFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileSystemSupportsSparseFiles:");
}

id objc_msgSend__fileTTR_classification_componentID_componentName_componentVersion_description_reproducibility_attachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileTTR:classification:componentID:componentName:componentVersion:description:reproducibility:attachment:");
}

id objc_msgSend__fileWithStmt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileWithStmt:");
}

id objc_msgSend__finalRestorePathForFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finalRestorePathForFile:");
}

id objc_msgSend__finalizeAll(void *a1, const char *a2, ...)
{
  return _[a1 _finalizeAll];
}

id objc_msgSend__findBackupAndSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 _findBackupAndSnapshot];
}

id objc_msgSend__findChangesForBundleIDs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findChangesForBundleIDs:error:");
}

id objc_msgSend__findChangesForDomains_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findChangesForDomains:error:");
}

id objc_msgSend__findDeletedFiles(void *a1, const char *a2, ...)
{
  return _[a1 _findDeletedFiles];
}

id objc_msgSend__findDependentContainersWithAddedFiles_waitingForFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findDependentContainersWithAddedFiles:waitingForFiles:");
}

id objc_msgSend__findDomainsLimitedTo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findDomainsLimitedTo:error:");
}

id objc_msgSend__findFilesToRestore(void *a1, const char *a2, ...)
{
  return _[a1 _findFilesToRestore];
}

id objc_msgSend__findMissingEncryptionKeys(void *a1, const char *a2, ...)
{
  return _[a1 _findMissingEncryptionKeys];
}

id objc_msgSend__findMissingEncryptionKeysFromCKCacheWithAccount_serviceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findMissingEncryptionKeysFromCKCacheWithAccount:serviceManager:");
}

id objc_msgSend__findMissingEncryptionKeysFromPendingSnapshotDirectoryForPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findMissingEncryptionKeysFromPendingSnapshotDirectoryForPersona:");
}

id objc_msgSend__findMissingEncryptionKeysWithAccount_serviceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findMissingEncryptionKeysWithAccount:serviceManager:");
}

id objc_msgSend__findPathsRemovedFromBackup(void *a1, const char *a2, ...)
{
  return _[a1 _findPathsRemovedFromBackup];
}

id objc_msgSend__findTargetDeviceTransferEngineWithConnection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findTargetDeviceTransferEngineWithConnection:error:");
}

id objc_msgSend__finishAppDataRestore(void *a1, const char *a2, ...)
{
  return _[a1 _finishAppDataRestore];
}

id objc_msgSend__finishBatchedDeletesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishBatchedDeletesWithCompletion:");
}

id objc_msgSend__finishBatchedFetchesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishBatchedFetchesWithCompletion:");
}

id objc_msgSend__finishBatchedSavesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishBatchedSavesWithCompletion:");
}

id objc_msgSend__finishCollectingTelemetry(void *a1, const char *a2, ...)
{
  return _[a1 _finishCollectingTelemetry];
}

id objc_msgSend__finishRestoreWithAccount_cancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishRestoreWithAccount:cancelled:");
}

id objc_msgSend__finishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishWithError:");
}

id objc_msgSend__finishXPCActivityForBackupActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishXPCActivityForBackupActivity:");
}

id objc_msgSend__finishedRestore(void *a1, const char *a2, ...)
{
  return _[a1 _finishedRestore];
}

id objc_msgSend__finishedRestoreWithAccount_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishedRestoreWithAccount:reason:");
}

id objc_msgSend__firePromptForCellular(void *a1, const char *a2, ...)
{
  return _[a1 _firePromptForCellular];
}

id objc_msgSend__firePromptWithDict_retryCount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firePromptWithDict:retryCount:completion:");
}

id objc_msgSend__flush(void *a1, const char *a2, ...)
{
  return _[a1 _flush];
}

id objc_msgSend__flushBatchedDeletes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flushBatchedDeletes:");
}

id objc_msgSend__flushBatchedFetches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flushBatchedFetches:");
}

id objc_msgSend__flushBatchedSaves_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flushBatchedSaves:");
}

id objc_msgSend__foundFile_snapshotPath_stats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_foundFile:snapshotPath:stats:");
}

id objc_msgSend__foundPendingFollowUpItemWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_foundPendingFollowUpItemWithIdentifiers:");
}

id objc_msgSend__freeSpaceAvailableForSize_atURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_freeSpaceAvailableForSize:atURL:error:");
}

id objc_msgSend__generateDeletionMarkersUsingInodesForDomainName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateDeletionMarkersUsingInodesForDomainName:error:");
}

id objc_msgSend__generateDeletionMarkersUsingTemporaryAssetIDTable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateDeletionMarkersUsingTemporaryAssetIDTable:error:");
}

id objc_msgSend__getDomainInfoForDomainName_cache_restrictedDomains_disabledDomains_dependentDomains_appManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getDomainInfoForDomainName:cache:restrictedDomains:disabledDomains:dependentDomains:appManager:");
}

id objc_msgSend__getManifestForDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getManifestForDomain:");
}

id objc_msgSend__getRecordIDString(void *a1, const char *a2, ...)
{
  return _[a1 _getRecordIDString];
}

id objc_msgSend__gettingItemID_state_progress_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gettingItemID:state:progress:error:");
}

id objc_msgSend__handleAccountAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _handleAccountAvailable];
}

id objc_msgSend__handleAccountChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAccountChangeNotification:");
}

id objc_msgSend__handleAlarm(void *a1, const char *a2, ...)
{
  return _[a1 _handleAlarm];
}

id objc_msgSend__handleAssetFetchResponseFor_decrypter_record_withFetchError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAssetFetchResponseFor:decrypter:record:withFetchError:");
}

id objc_msgSend__handleCellularAccessChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 _handleCellularAccessChangedNotification];
}

id objc_msgSend__handleCompletionForDeleteInfo_operation_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCompletionForDeleteInfo:operation:error:");
}

id objc_msgSend__handleCompletionForFetchInfo_record_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCompletionForFetchInfo:record:error:");
}

id objc_msgSend__handleCompletionForSaveInfo_operation_record_saveInfos_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCompletionForSaveInfo:operation:record:saveInfos:error:");
}

id objc_msgSend__handleCompletionForSaveInfos_operation_savedRecords_operationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCompletionForSaveInfos:operation:savedRecords:operationError:");
}

id objc_msgSend__handleCompletionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCompletionWithError:");
}

id objc_msgSend__handleCompressionOperation_algorithm_destinationSize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCompressionOperation:algorithm:destinationSize:error:");
}

id objc_msgSend__handleError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleError:");
}

id objc_msgSend__handleEventPath_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEventPath:flags:");
}

id objc_msgSend__handleFileTransferSessionProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFileTransferSessionProgress:");
}

id objc_msgSend__handleMergeAction_outputSnapshotID_serverSnapshot_shouldMergeDeletions_operationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMergeAction:outputSnapshotID:serverSnapshot:shouldMergeDeletions:operationTracker:error:");
}

id objc_msgSend__handleNetworkAccessTimer(void *a1, const char *a2, ...)
{
  return _[a1 _handleNetworkAccessTimer];
}

id objc_msgSend__handleNetworkPathUpdateWithPathType_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNetworkPathUpdateWithPathType:state:");
}

id objc_msgSend__handleReceivedItem_metadata_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReceivedItem:metadata:error:");
}

id objc_msgSend__handleRemoveDomain_domainHmacs_outputSnapshotID_serverSnapshot_operationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRemoveDomain:domainHmacs:outputSnapshotID:serverSnapshot:operationTracker:error:");
}

id objc_msgSend__handleRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRequest:");
}

id objc_msgSend__handleSkippedFilesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSkippedFilesWithError:");
}

id objc_msgSend__handleSnapshotAction_operationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSnapshotAction:operationTracker:error:");
}

id objc_msgSend__handleStateTransition(void *a1, const char *a2, ...)
{
  return _[a1 _handleStateTransition];
}

id objc_msgSend__handleTimeout_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTimeout:error:");
}

id objc_msgSend__handleXPCActivity_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleXPCActivity:type:");
}

id objc_msgSend__hasDefaultOwnershipAndAttributes(void *a1, const char *a2, ...)
{
  return _[a1 _hasDefaultOwnershipAndAttributes];
}

id objc_msgSend__holdLock(void *a1, const char *a2, ...)
{
  return _[a1 _holdLock];
}

id objc_msgSend__holdWorkAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _holdWorkAssertion];
}

id objc_msgSend__iconDataForRestoreFailure_persona_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_iconDataForRestoreFailure:persona:error:");
}

id objc_msgSend__impl_encryptionKeyForFileWithID_inodeNumber_path_protectionClass_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_impl_encryptionKeyForFileWithID:inodeNumber:path:protectionClass:error:");
}

id objc_msgSend__initWith_asset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWith:asset:");
}

id objc_msgSend__initWithAccount_databaseManager_policy_group_parentTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithAccount:databaseManager:policy:group:parentTracker:");
}

id objc_msgSend__initWithBuffer_nextDayIndex_endDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithBuffer:nextDayIndex:endDay:");
}

id objc_msgSend__initWithCompiledExpression_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithCompiledExpression:");
}

id objc_msgSend__initWithDatabase_creationError_resultSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithDatabase:creationError:resultSet:");
}

id objc_msgSend__initWithParentPlan_domain_domainID_atcPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithParentPlan:domain:domainID:atcPaths:");
}

id objc_msgSend__initWithParentPlan_domain_domainID_restoreType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithParentPlan:domain:domainID:restoreType:");
}

id objc_msgSend__initWithPath_domainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithPath:domainName:");
}

id objc_msgSend__initWithPath_restoreSnapshotsDir_snapshotUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithPath:restoreSnapshotsDir:snapshotUUID:error:");
}

id objc_msgSend__initWithPersona_engineType_backupPolicy_shouldRestoreSystemFiles_encrypted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithPersona:engineType:backupPolicy:shouldRestoreSystemFiles:encrypted:");
}

id objc_msgSend__initWithRequest_delegate_usesCache_maxContentLength_startImmediately_connectionProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithRequest:delegate:usesCache:maxContentLength:startImmediately:connectionProperties:");
}

id objc_msgSend__initWithTracker_device_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithTracker:device:");
}

id objc_msgSend__initWithType_value_errorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithType:value:errorCode:");
}

id objc_msgSend__initWithType_values_errorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithType:values:errorCode:");
}

id objc_msgSend__initialFollowUpActionTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initialFollowUpActionTitle:");
}

id objc_msgSend__initialFollowUpMessage_needsTemporaryStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initialFollowUpMessage:needsTemporaryStorage:");
}

id objc_msgSend__initialFollowUpTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initialFollowUpTitle:");
}

id objc_msgSend__initialNotificationMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initialNotificationMessage:");
}

id objc_msgSend__initialNotificationTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initialNotificationTitle:");
}

id objc_msgSend__initializeDatabaseAt_withFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeDatabaseAt:withFlags:error:");
}

id objc_msgSend__initializeState(void *a1, const char *a2, ...)
{
  return _[a1 _initializeState];
}

id objc_msgSend__insertFailure_domainID_restoreType_inode_restorableID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertFailure:domainID:restoreType:inode:restorableID:error:");
}

id objc_msgSend__installCoordinatorForPlaceholder_bundleID_installType_isDataSeparated_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_installCoordinatorForPlaceholder:bundleID:installType:isDataSeparated:error:");
}

id objc_msgSend__installMonitors(void *a1, const char *a2, ...)
{
  return _[a1 _installMonitors];
}

id objc_msgSend__installedPlaceholderWithBundleID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_installedPlaceholderWithBundleID:error:");
}

id objc_msgSend__invalidate(void *a1, const char *a2, ...)
{
  return _[a1 _invalidate];
}

id objc_msgSend__invalidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidate:");
}

id objc_msgSend__invalidateConnections(void *a1, const char *a2, ...)
{
  return _[a1 _invalidateConnections];
}

id objc_msgSend__invalidateStreamRef(void *a1, const char *a2, ...)
{
  return _[a1 _invalidateStreamRef];
}

id objc_msgSend__invalidatedError(void *a1, const char *a2, ...)
{
  return _[a1 _invalidatedError];
}

id objc_msgSend__invokeTimeoutBlock(void *a1, const char *a2, ...)
{
  return _[a1 _invokeTimeoutBlock];
}

id objc_msgSend__isAccountModificationDisabledByRestrictions(void *a1, const char *a2, ...)
{
  return _[a1 _isAccountModificationDisabledByRestrictions];
}

id objc_msgSend__isAnyError_withCodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAnyError:withCodes:");
}

id objc_msgSend__isBackupAllowed(void *a1, const char *a2, ...)
{
  return _[a1 _isBackupAllowed];
}

id objc_msgSend__isBackupOnCellularAllowedForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBackupOnCellularAllowedForAccount:");
}

id objc_msgSend__isCKError_withCodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCKError:withCodes:");
}

id objc_msgSend__isCKNetworkDisconnectedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCKNetworkDisconnectedError:");
}

id objc_msgSend__isCloudBackupRestricted(void *a1, const char *a2, ...)
{
  return _[a1 _isCloudBackupRestricted];
}

id objc_msgSend__isCloudKitEngine(void *a1, const char *a2, ...)
{
  return _[a1 _isCloudKitEngine];
}

id objc_msgSend__isContainerizedAppDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isContainerizedAppDomain:");
}

id objc_msgSend__isContinuouslyThermallyThrottled(void *a1, const char *a2, ...)
{
  return _[a1 _isContinuouslyThermallyThrottled];
}

id objc_msgSend__isDeviceTransferEngine(void *a1, const char *a2, ...)
{
  return _[a1 _isDeviceTransferEngine];
}

id objc_msgSend__isDriveEngine(void *a1, const char *a2, ...)
{
  return _[a1 _isDriveEngine];
}

id objc_msgSend__isDriveOrMegaBackupPolicy(void *a1, const char *a2, ...)
{
  return _[a1 _isDriveOrMegaBackupPolicy];
}

id objc_msgSend__isEnabledForKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEnabledForKey:account:");
}

id objc_msgSend__isEncrypted(void *a1, const char *a2, ...)
{
  return _[a1 _isEncrypted];
}

id objc_msgSend__isEnterpriseAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEnterpriseAccount:");
}

id objc_msgSend__isForegroundRestore(void *a1, const char *a2, ...)
{
  return _[a1 _isForegroundRestore];
}

id objc_msgSend__isHSA2AvailableForAuthenticationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isHSA2AvailableForAuthenticationContext:");
}

id objc_msgSend__isInitialMegaBackupCompleted(void *a1, const char *a2, ...)
{
  return _[a1 _isInitialMegaBackupCompleted];
}

id objc_msgSend__isMegaBackup(void *a1, const char *a2, ...)
{
  return _[a1 _isMegaBackup];
}

id objc_msgSend__isMegaBackupMode(void *a1, const char *a2, ...)
{
  return _[a1 _isMegaBackupMode];
}

id objc_msgSend__isModifiedSince_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isModifiedSince:error:");
}

id objc_msgSend__isNotFoundError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isNotFoundError:");
}

id objc_msgSend__isRestoreOnCellularSupported(void *a1, const char *a2, ...)
{
  return _[a1 _isRestoreOnCellularSupported];
}

id objc_msgSend__isServiceEngine(void *a1, const char *a2, ...)
{
  return _[a1 _isServiceEngine];
}

id objc_msgSend__isSubPathOfRelativePathsToRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSubPathOfRelativePathsToRestore:");
}

id objc_msgSend__isSupportedBackupDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSupportedBackupDomain:");
}

id objc_msgSend__isSupportedDataclassForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSupportedDataclassForDevice:");
}

id objc_msgSend__itemReaderForItemID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_itemReaderForItemID:error:");
}

id objc_msgSend__keyBagIsLockingWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyBagIsLockingWithAccount:");
}

id objc_msgSend__keyForRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyForRecord:");
}

id objc_msgSend__keybag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keybag:");
}

id objc_msgSend__keybagUUIDData(void *a1, const char *a2, ...)
{
  return _[a1 _keybagUUIDData];
}

id objc_msgSend__keybagUUIDString(void *a1, const char *a2, ...)
{
  return _[a1 _keybagUUIDString];
}

id objc_msgSend__keychainSyncStatusDidChange(void *a1, const char *a2, ...)
{
  return _[a1 _keychainSyncStatusDidChange];
}

id objc_msgSend__lastFailedLightrailRestoreAttemptDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastFailedLightrailRestoreAttemptDate:");
}

id objc_msgSend__lastInsertRowID(void *a1, const char *a2, ...)
{
  return _[a1 _lastInsertRowID];
}

id objc_msgSend__lastPendingSnapshotSizeForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastPendingSnapshotSizeForAccount:");
}

id objc_msgSend__lastRefreshPropertyKeyForBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastRefreshPropertyKeyForBackupUDID:");
}

id objc_msgSend__lastSnapshotFromCacheWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastSnapshotFromCacheWithAccount:");
}

id objc_msgSend__latestBackup(void *a1, const char *a2, ...)
{
  return _[a1 _latestBackup];
}

id objc_msgSend__loadDomainsFromVolumesToBackUpWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadDomainsFromVolumesToBackUpWithError:");
}

id objc_msgSend__loadPreviouslySkippedFiles(void *a1, const char *a2, ...)
{
  return _[a1 _loadPreviouslySkippedFiles];
}

id objc_msgSend__loadRestoreState(void *a1, const char *a2, ...)
{
  return _[a1 _loadRestoreState];
}

id objc_msgSend__localFileInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localFileInfo:");
}

id objc_msgSend__localRootPathForDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localRootPathForDomain:");
}

id objc_msgSend__lockMustRenew(void *a1, const char *a2, ...)
{
  return _[a1 _lockMustRenew];
}

id objc_msgSend__logEventWithSubtype_code_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logEventWithSubtype:code:");
}

id objc_msgSend__logProfile(void *a1, const char *a2, ...)
{
  return _[a1 _logProfile];
}

id objc_msgSend__makeAnnotatedIntermediatePaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeAnnotatedIntermediatePaths:");
}

id objc_msgSend__makeContainerForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeContainerForAccount:");
}

id objc_msgSend__makeEmptyAnnotationFileWithPath_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeEmptyAnnotationFileWithPath:value:");
}

id objc_msgSend__makePQLConnectionWithFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makePQLConnectionWithFlags:error:");
}

id objc_msgSend__makePQLConnectionWithFlags_usePQLBatching_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makePQLConnectionWithFlags:usePQLBatching:error:");
}

id objc_msgSend__managerDidFailBackupWithAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_managerDidFailBackupWithAccount:error:");
}

id objc_msgSend__managerDidFinishBackupWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_managerDidFinishBackupWithAccount:");
}

id objc_msgSend__manifestDomainNameForDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_manifestDomainNameForDomainName:");
}

id objc_msgSend__manifestRecordIDsForManifestPageCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_manifestRecordIDsForManifestPageCount:");
}

id objc_msgSend__manifestRecordWithFiles_placeholderFiles_manifestIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_manifestRecordWithFiles:placeholderFiles:manifestIndex:");
}

id objc_msgSend__markAllFilesAsDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markAllFilesAsDeleted:");
}

id objc_msgSend__markForegroundRestorablesForBackgroundRestoreInPlan_domainName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markForegroundRestorablesForBackgroundRestoreInPlan:domainName:error:");
}

id objc_msgSend__mbNotificationForCFNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mbNotificationForCFNotification:");
}

id objc_msgSend__mbNotificationForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mbNotificationForIdentifier:");
}

id objc_msgSend__measureCurrentThermalPressureLevel(void *a1, const char *a2, ...)
{
  return _[a1 _measureCurrentThermalPressureLevel];
}

id objc_msgSend__megaBackupExpirationDate(void *a1, const char *a2, ...)
{
  return _[a1 _megaBackupExpirationDate];
}

id objc_msgSend__metadataFromFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_metadataFromFile:error:");
}

id objc_msgSend__migrateMobileBackupDatabaseFromRootToMobile(void *a1, const char *a2, ...)
{
  return _[a1 _migrateMobileBackupDatabaseFromRootToMobile];
}

id objc_msgSend__mkdir_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mkdir:");
}

id objc_msgSend__modifiedDomainDependenciesWithAppManager_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_modifiedDomainDependenciesWithAppManager:error:");
}

id objc_msgSend__mountSnapshotsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mountSnapshotsWithError:");
}

id objc_msgSend__moveBatchWithPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveBatchWithPaths:");
}

id objc_msgSend__moveInBatchesWithOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveInBatchesWithOperationType:");
}

id objc_msgSend__moveRestoreDirectoryFrom_toFinalLocation_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveRestoreDirectoryFrom:toFinalLocation:error:");
}

id objc_msgSend__moveRestoreDirs(void *a1, const char *a2, ...)
{
  return _[a1 _moveRestoreDirs];
}

id objc_msgSend__moveWithOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveWithOperationType:");
}

id objc_msgSend__newConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newConnection:");
}

id objc_msgSend__newPrebuddyNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newPrebuddyNotification:");
}

id objc_msgSend__nilBackupDateFetchDateForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nilBackupDateFetchDateForAccount:");
}

id objc_msgSend__notifyDisplayWifi(void *a1, const char *a2, ...)
{
  return _[a1 _notifyDisplayWifi];
}

id objc_msgSend__notifyPluginsOfBackupEnded_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyPluginsOfBackupEnded:error:");
}

id objc_msgSend__notifyRestoreCompleted(void *a1, const char *a2, ...)
{
  return _[a1 _notifyRestoreCompleted];
}

id objc_msgSend__notifyStateChanged_conditions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyStateChanged:conditions:");
}

id objc_msgSend__now(void *a1, const char *a2, ...)
{
  return _[a1 _now];
}

id objc_msgSend__nullifyL28Stats(void *a1, const char *a2, ...)
{
  return _[a1 _nullifyL28Stats];
}

id objc_msgSend__onBatteryRetryAfterDateForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onBatteryRetryAfterDateForAccount:");
}

id objc_msgSend__openBackupManifestForResume(void *a1, const char *a2, ...)
{
  return _[a1 _openBackupManifestForResume];
}

id objc_msgSend__openCache(void *a1, const char *a2, ...)
{
  return _[a1 _openCache];
}

id objc_msgSend__openOrCreateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_openOrCreateWithError:");
}

id objc_msgSend__openPQLConnectionWithFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_openPQLConnectionWithFlags:error:");
}

id objc_msgSend__openWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_openWithError:");
}

id objc_msgSend__openWithFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_openWithFlags:error:");
}

id objc_msgSend__openWithFlags_usePQLBatching_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_openWithFlags:usePQLBatching:error:");
}

id objc_msgSend__operationTrackerWithAccount_databaseManager_policy_group_parentTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_operationTrackerWithAccount:databaseManager:policy:group:parentTracker:error:");
}

id objc_msgSend__optionsFromACAccount_currentOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_optionsFromACAccount:currentOptions:");
}

id objc_msgSend__passwordHashWithPassword_salt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_passwordHashWithPassword:salt:");
}

id objc_msgSend__pathToModifiedDomainFlagsForVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pathToModifiedDomainFlagsForVolume:");
}

id objc_msgSend__pathToMonitorForVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pathToMonitorForVolume:");
}

id objc_msgSend__perform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_perform:");
}

id objc_msgSend__performCallbacksForDeleteInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performCallbacksForDeleteInfo:error:");
}

id objc_msgSend__performCallbacksForFetchInfo_record_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performCallbacksForFetchInfo:record:error:");
}

id objc_msgSend__performCallbacksForSaveInfo_record_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performCallbacksForSaveInfo:record:error:");
}

id objc_msgSend__performOnDBQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performOnDBQueue:");
}

id objc_msgSend__performSchemaUpgrade_fromDatabaseVersion_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSchemaUpgrade:fromDatabaseVersion:error:");
}

id objc_msgSend__performSinglePassEnumerationForDomain_snapshotPath_relativePath_buffer_dirFd_direntCount_directoryPathStack_directoryCountStack_stats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSinglePassEnumerationForDomain:snapshotPath:relativePath:buffer:dirFd:direntCount:directoryPathStack:directoryCountStack:stats:");
}

id objc_msgSend__performToolWithBackupUDID_account_snapshotID_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performToolWithBackupUDID:account:snapshotID:block:");
}

id objc_msgSend__performTwoPassEnumerationForDomain_snapshotPath_relativePath_buffer_dirFd_direntCount_directoryPathStack_directoryCountStack_stats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performTwoPassEnumerationForDomain:snapshotPath:relativePath:buffer:dirFd:direntCount:directoryPathStack:directoryCountStack:stats:");
}

id objc_msgSend__persistDisabledDomainNames_forPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistDisabledDomainNames:forPersona:");
}

id objc_msgSend__pipelineRestoringBatch_snapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pipelineRestoringBatch:snapshotID:");
}

id objc_msgSend__placeholderAtPath_bundleID_installType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_placeholderAtPath:bundleID:installType:error:");
}

id objc_msgSend__placeholderDomainRootedInDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_placeholderDomainRootedInDirectory:");
}

id objc_msgSend__placeholderFilesForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_placeholderFilesForBundleID:");
}

id objc_msgSend__placeholderRelativePathsToBackupAndRestoreWithCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_placeholderRelativePathsToBackupAndRestoreWithCache:");
}

id objc_msgSend__pluginsAllowForegroundRestoreFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pluginsAllowForegroundRestoreFile:");
}

id objc_msgSend__policyElementsForEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_policyElementsForEngine:");
}

id objc_msgSend__populateAccountsAndAssetsForEngine_accountsTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateAccountsAndAssetsForEngine:accountsTracker:");
}

id objc_msgSend__populateAccountsForEngine_dataClasses_accountsTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateAccountsForEngine:dataClasses:accountsTracker:");
}

id objc_msgSend__populateBuddyStashForEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateBuddyStashForEngine:");
}

id objc_msgSend__populatePathsForEngine_domain_dataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populatePathsForEngine:domain:dataclass:");
}

id objc_msgSend__populatePathsForEngine_domain_dataclass_allBackupPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populatePathsForEngine:domain:dataclass:allBackupPaths:");
}

id objc_msgSend__populatePathsForEngine_domainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populatePathsForEngine:domainName:");
}

id objc_msgSend__populatedRestorePlan(void *a1, const char *a2, ...)
{
  return _[a1 _populatedRestorePlan];
}

id objc_msgSend__postFollowUpItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postFollowUpItem:");
}

id objc_msgSend__postNewFollowup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postNewFollowup:");
}

id objc_msgSend__postNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postNotification:");
}

id objc_msgSend__postRestoreInProgressFollowUpWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postRestoreInProgressFollowUpWithReason:");
}

id objc_msgSend__postRestoreTelemetryHeartbeat(void *a1, const char *a2, ...)
{
  return _[a1 _postRestoreTelemetryHeartbeat];
}

id objc_msgSend__postUpdateFollowupWithProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postUpdateFollowupWithProgress:");
}

id objc_msgSend__postconditions(void *a1, const char *a2, ...)
{
  return _[a1 _postconditions];
}

id objc_msgSend__preconditions(void *a1, const char *a2, ...)
{
  return _[a1 _preconditions];
}

id objc_msgSend__prefetchBatch(void *a1, const char *a2, ...)
{
  return _[a1 _prefetchBatch];
}

id objc_msgSend__preflight(void *a1, const char *a2, ...)
{
  return _[a1 _preflight];
}

id objc_msgSend__prepare(void *a1, const char *a2, ...)
{
  return _[a1 _prepare];
}

id objc_msgSend__prepare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepare:");
}

id objc_msgSend__prepareCopyBackup(void *a1, const char *a2, ...)
{
  return _[a1 _prepareCopyBackup];
}

id objc_msgSend__prepareEncryption(void *a1, const char *a2, ...)
{
  return _[a1 _prepareEncryption];
}

id objc_msgSend__prepareForBackgroundRestore(void *a1, const char *a2, ...)
{
  return _[a1 _prepareForBackgroundRestore];
}

id objc_msgSend__prepareForPreflight(void *a1, const char *a2, ...)
{
  return _[a1 _prepareForPreflight];
}

id objc_msgSend__prepareForUpload(void *a1, const char *a2, ...)
{
  return _[a1 _prepareForUpload];
}

id objc_msgSend__prepareFreeSpace(void *a1, const char *a2, ...)
{
  return _[a1 _prepareFreeSpace];
}

id objc_msgSend__prepareMoveBackup(void *a1, const char *a2, ...)
{
  return _[a1 _prepareMoveBackup];
}

id objc_msgSend__prepareProgress(void *a1, const char *a2, ...)
{
  return _[a1 _prepareProgress];
}

id objc_msgSend__prepareResume(void *a1, const char *a2, ...)
{
  return _[a1 _prepareResume];
}

id objc_msgSend__prepareSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 _prepareSnapshot];
}

id objc_msgSend__preparingBackupWithCKEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preparingBackupWithCKEngine:");
}

id objc_msgSend__preparingBackupWithDriveEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preparingBackupWithDriveEngine:");
}

id objc_msgSend__processCompletedBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processCompletedBatch:");
}

id objc_msgSend__profile_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_profile:time:");
}

id objc_msgSend__propertiesForMBUserNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_propertiesForMBUserNotification:");
}

id objc_msgSend__propertiesPath(void *a1, const char *a2, ...)
{
  return _[a1 _propertiesPath];
}

id objc_msgSend__purgeBeforeRestoring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeBeforeRestoring:");
}

id objc_msgSend__purgeableDiskSpace(void *a1, const char *a2, ...)
{
  return _[a1 _purgeableDiskSpace];
}

id objc_msgSend__putBatchInChunkStore_fileAuthTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_putBatchInChunkStore:fileAuthTokens:");
}

id objc_msgSend__puttingItemID_state_progress_receipt_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_puttingItemID:state:progress:receipt:error:");
}

id objc_msgSend__queryManifestWithOperationTracker_progress_recordName_cursor_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queryManifestWithOperationTracker:progress:recordName:cursor:completion:");
}

id objc_msgSend__queue(void *a1, const char *a2, ...)
{
  return _[a1 _queue];
}

id objc_msgSend__queueWithBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queueWithBatch:");
}

id objc_msgSend__raise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_raise:");
}

id objc_msgSend__reachabilityCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reachabilityCallback:");
}

id objc_msgSend__reacquireLockWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reacquireLockWithError:");
}

id objc_msgSend__rebuildSnapshot_backupUDID_service_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rebuildSnapshot:backupUDID:service:error:");
}

id objc_msgSend__reconcileBooksAndHealthInDisabledDomainsList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reconcileBooksAndHealthInDisabledDomainsList:");
}

id objc_msgSend__recordAssetState_inode_domainID_failure_restoreType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordAssetState:inode:domainID:failure:restoreType:error:");
}

id objc_msgSend__recordCurrentTime(void *a1, const char *a2, ...)
{
  return _[a1 _recordCurrentTime];
}

id objc_msgSend__recordFailure_domainID_restoreType_inode_restorableID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordFailure:domainID:restoreType:inode:restorableID:error:");
}

id objc_msgSend__recordFatalFailure_into_parentErrorID_domainID_restoreType_inode_restorableID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordFatalFailure:into:parentErrorID:domainID:restoreType:inode:restorableID:error:");
}

id objc_msgSend__recordIDForAssetIDPrefix_commitID_domainName_inode_hmacKey_logicalSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordIDForAssetIDPrefix:commitID:domainName:inode:hmacKey:logicalSize:");
}

id objc_msgSend__recordIDForDomain_commitID_hmacKey_pageIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordIDForDomain:commitID:hmacKey:pageIndex:");
}

id objc_msgSend__recordIDStringForManifestAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordIDStringForManifestAtIndex:");
}

id objc_msgSend__recordRestorableState_restorableID_domainID_inode_restoreType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordRestorableState:restorableID:domainID:inode:restoreType:error:");
}

id objc_msgSend__recordRetryableFailure_domainID_restoreType_inode_restorableID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordRetryableFailure:domainID:restoreType:inode:restorableID:error:");
}

id objc_msgSend__recordVerificationState_domainID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordVerificationState:domainID:error:");
}

id objc_msgSend__recurringBackupWarningPeriodForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recurringBackupWarningPeriodForAccount:");
}

id objc_msgSend__refreshCache(void *a1, const char *a2, ...)
{
  return _[a1 _refreshCache];
}

id objc_msgSend__refreshCacheWithDevice_operationTracker_refreshState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshCacheWithDevice:operationTracker:refreshState:error:");
}

id objc_msgSend__refreshIsBackupOnCellularEnabledWithCurrentOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshIsBackupOnCellularEnabledWithCurrentOptions:");
}

id objc_msgSend__refreshLockdownLastBackupDateWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshLockdownLastBackupDateWithAccount:");
}

id objc_msgSend__refreshRetryAfterDateForAccount_softCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshRetryAfterDateForAccount:softCancelled:");
}

id objc_msgSend__refreshSnapshot_operationTracker_refreshState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshSnapshot:operationTracker:refreshState:error:");
}

id objc_msgSend__registerForBackgroundRestoreCellularAccessChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 _registerForBackgroundRestoreCellularAccessChangedNotification];
}

id objc_msgSend__registerForThermalPressureNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForThermalPressureNotifications];
}

id objc_msgSend__registerKeyBag_withID_passcode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerKeyBag:withID:passcode:error:");
}

id objc_msgSend__registerRequestHandlerTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerRequestHandlerTask:");
}

id objc_msgSend__registerSafeHarborsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerSafeHarborsAtPath:");
}

id objc_msgSend__releaseLock(void *a1, const char *a2, ...)
{
  return _[a1 _releaseLock];
}

id objc_msgSend__releaseLockAndScheduleRetries(void *a1, const char *a2, ...)
{
  return _[a1 _releaseLockAndScheduleRetries];
}

id objc_msgSend__releaseLockAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _releaseLockAssertion];
}

id objc_msgSend__releaseWorkAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _releaseWorkAssertion];
}

id objc_msgSend__reloadAccountPropertiesFromACAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadAccountPropertiesFromACAccount:");
}

id objc_msgSend__reloadAccounts(void *a1, const char *a2, ...)
{
  return _[a1 _reloadAccounts];
}

id objc_msgSend__remove(void *a1, const char *a2, ...)
{
  return _[a1 _remove];
}

id objc_msgSend__removeAbortedFiles(void *a1, const char *a2, ...)
{
  return _[a1 _removeAbortedFiles];
}

id objc_msgSend__removeBatchWithPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBatchWithPaths:");
}

id objc_msgSend__removeBundleIconNameKeyFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBundleIconNameKeyFrom:");
}

id objc_msgSend__removeContainerForPersonaIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeContainerForPersonaIdentifier:");
}

id objc_msgSend__removeCorruptDatabaseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeCorruptDatabaseWithError:");
}

id objc_msgSend__removeCorruptDatabaseWithError_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeCorruptDatabaseWithError:completion:");
}

id objc_msgSend__removeDatabaseAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDatabaseAtPath:error:");
}

id objc_msgSend__removeDeviceSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 _removeDeviceSnapshot];
}

id objc_msgSend__removeDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDirectory:error:");
}

id objc_msgSend__removeDomain_cache_tracker_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDomain:cache:tracker:account:error:");
}

id objc_msgSend__removeDomainName_service_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDomainName:service:error:");
}

id objc_msgSend__removeFilesystemSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 _removeFilesystemSnapshot];
}

id objc_msgSend__removeInBatchesWithOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeInBatchesWithOperationType:");
}

id objc_msgSend__removeIncompatibleSnapshotsWithAccountType_device_snapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeIncompatibleSnapshotsWithAccountType:device:snapshots:");
}

id objc_msgSend__removeOldBackup(void *a1, const char *a2, ...)
{
  return _[a1 _removeOldBackup];
}

id objc_msgSend__removePropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removePropertyForKey:");
}

id objc_msgSend__removeRelativePathsFromPathsNotToBackup_forDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeRelativePathsFromPathsNotToBackup:forDomain:");
}

id objc_msgSend__removeRelativePathsFromPathsNotToRestore_forDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeRelativePathsFromPathsNotToRestore:forDomain:");
}

id objc_msgSend__removeResourceCopy(void *a1, const char *a2, ...)
{
  return _[a1 _removeResourceCopy];
}

id objc_msgSend__removeRestorePrefetchCacheAtPath_earliestDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeRestorePrefetchCacheAtPath:earliestDate:");
}

id objc_msgSend__removeSnapshotForID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeSnapshotForID:backupUDID:");
}

id objc_msgSend__removeTemporaryCopy(void *a1, const char *a2, ...)
{
  return _[a1 _removeTemporaryCopy];
}

id objc_msgSend__removeTemporaryDirectories(void *a1, const char *a2, ...)
{
  return _[a1 _removeTemporaryDirectories];
}

id objc_msgSend__removeTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeTracker:");
}

id objc_msgSend__removeWithOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeWithOperationType:");
}

id objc_msgSend__renewLockAndScheduleRetries(void *a1, const char *a2, ...)
{
  return _[a1 _renewLockAndScheduleRetries];
}

id objc_msgSend__repairRequiredForFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_repairRequiredForFile:");
}

id objc_msgSend__replenishRetryTokens(void *a1, const char *a2, ...)
{
  return _[a1 _replenishRetryTokens];
}

id objc_msgSend__replenishTokensWithNetworkAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replenishTokensWithNetworkAvailable:");
}

id objc_msgSend__reportProgressOfSuccessfullyFetchedManifestPageRecord_referenceFetchProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportProgressOfSuccessfullyFetchedManifestPageRecord:referenceFetchProgress:");
}

id objc_msgSend__reportStatusForEngine_account_manager_key_values_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportStatusForEngine:account:manager:key:values:");
}

id objc_msgSend__reportStatusForEngine_key_values_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportStatusForEngine:key:values:");
}

id objc_msgSend__requestClassForTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestClassForTask:");
}

id objc_msgSend__requestCompleted(void *a1, const char *a2, ...)
{
  return _[a1 _requestCompleted];
}

id objc_msgSend__requestInitWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestInitWithError:");
}

id objc_msgSend__requestKeychainWithSourceInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestKeychainWithSourceInfo:error:");
}

id objc_msgSend__requestMDMAppInstallation(void *a1, const char *a2, ...)
{
  return _[a1 _requestMDMAppInstallation];
}

id objc_msgSend__requestPreflightWithSourceInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestPreflightWithSourceInfo:error:");
}

id objc_msgSend__resetDatabaseForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetDatabaseForAccount:error:");
}

id objc_msgSend__resetReceivedFilesProgress(void *a1, const char *a2, ...)
{
  return _[a1 _resetReceivedFilesProgress];
}

id objc_msgSend__resetTetheredSyncAnchors(void *a1, const char *a2, ...)
{
  return _[a1 _resetTetheredSyncAnchors];
}

id objc_msgSend__resolveRelativePath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resolveRelativePath:error:");
}

id objc_msgSend__resourceRelativePathsToBackupAndRestoreForRootDir_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resourceRelativePathsToBackupAndRestoreForRootDir:relativePath:");
}

id objc_msgSend__respondSynchronouslyTo_description_withAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_respondSynchronouslyTo:description:withAccount:");
}

id objc_msgSend__respondSynchronouslyTo_with_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_respondSynchronouslyTo:with:");
}

id objc_msgSend__responseClassForTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_responseClassForTask:");
}

id objc_msgSend__restore(void *a1, const char *a2, ...)
{
  return _[a1 _restore];
}

id objc_msgSend__restoreATCEngineForPlan_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreATCEngineForPlan:error:");
}

id objc_msgSend__restoreATCFiles_usingCKCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreATCFiles:usingCKCache:");
}

id objc_msgSend__restoreATCFiles_usingPlan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreATCFiles:usingPlan:");
}

id objc_msgSend__restoreApplicationWithBundleID_failed_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreApplicationWithBundleID:failed:context:error:");
}

id objc_msgSend__restoreBackgroundContainersUsingCKCacheForApp_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreBackgroundContainersUsingCKCacheForApp:error:");
}

id objc_msgSend__restoreBackgroundContainersUsingPlanForApp_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreBackgroundContainersUsingPlanForApp:error:");
}

id objc_msgSend__restoreBackupDomainsEnabledForMegaBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreBackupDomainsEnabledForMegaBackup:");
}

id objc_msgSend__restoreBackupEnabledForMegaBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreBackupEnabledForMegaBackup:");
}

id objc_msgSend__restoreBookWithPath_range_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreBookWithPath:range:context:error:");
}

id objc_msgSend__restoreContent(void *a1, const char *a2, ...)
{
  return _[a1 _restoreContent];
}

id objc_msgSend__restoreDefaultsWithEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreDefaultsWithEngine:");
}

id objc_msgSend__restoreDirectoryModificationTimes(void *a1, const char *a2, ...)
{
  return _[a1 _restoreDirectoryModificationTimes];
}

id objc_msgSend__restoreDomainEngineForDomain_plan_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreDomainEngineForDomain:plan:error:");
}

id objc_msgSend__restoreDomains_plan_withQueue_concurrencyLimit_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreDomains:plan:withQueue:concurrencyLimit:error:");
}

id objc_msgSend__restoreEngineWithRestoreType_settingsContext_debugContext_excludedAppBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreEngineWithRestoreType:settingsContext:debugContext:excludedAppBundleIDs:");
}

id objc_msgSend__restoreEngineWithSourceInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreEngineWithSourceInfo:");
}

id objc_msgSend__restoreEntitlements_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreEntitlements:withError:");
}

id objc_msgSend__restoreFile_fromSnapshot_withBatch_restoringDirectories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreFile:fromSnapshot:withBatch:restoringDirectories:");
}

id objc_msgSend__restoreFileForFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreFileForFile:");
}

id objc_msgSend__restoreFileWithStmt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreFileWithStmt:");
}

id objc_msgSend__restoreFilesFromSnapshot_restoringDirectories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreFilesFromSnapshot:restoringDirectories:");
}

id objc_msgSend__restoreFilesFromSnapshots(void *a1, const char *a2, ...)
{
  return _[a1 _restoreFilesFromSnapshots];
}

id objc_msgSend__restoreFilesWithStmt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreFilesWithStmt:");
}

id objc_msgSend__restoreFinishedFollowUpItemForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreFinishedFollowUpItemForAccount:");
}

id objc_msgSend__restoreForegroundFilesUsingCKCacheForDomainNames_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreForegroundFilesUsingCKCacheForDomainNames:error:");
}

id objc_msgSend__restoreForegroundFilesUsingPlanForDomainNames_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreForegroundFilesUsingPlanForDomainNames:error:");
}

id objc_msgSend__restoreKeychainBackupAtPath_withEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreKeychainBackupAtPath:withEngine:");
}

id objc_msgSend__restoreLegacyZippedAppPlaceholderWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreLegacyZippedAppPlaceholderWithError:");
}

id objc_msgSend__restoreManagerForRestoreDirURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreManagerForRestoreDirURL:");
}

id objc_msgSend__restoreParentDirectoriesOfFile_deleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreParentDirectoriesOfFile:deleted:");
}

id objc_msgSend__restorePathForFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restorePathForFile:");
}

id objc_msgSend__restorePlaceholderEntitlements(void *a1, const char *a2, ...)
{
  return _[a1 _restorePlaceholderEntitlements];
}

id objc_msgSend__restoreRegularFiles_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreRegularFiles:size:");
}

id objc_msgSend__restoreRestorable_error_actionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreRestorable:error:actionBlock:");
}

id objc_msgSend__restoreStateWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreStateWithAccount:");
}

id objc_msgSend__restoreSyncSettingsEnabledForMegaBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreSyncSettingsEnabledForMegaBackup:");
}

id objc_msgSend__resume(void *a1, const char *a2, ...)
{
  return _[a1 _resume];
}

id objc_msgSend__resumeAfterFailureMoving(void *a1, const char *a2, ...)
{
  return _[a1 _resumeAfterFailureMoving];
}

id objc_msgSend__resumeAfterFailureRemoving(void *a1, const char *a2, ...)
{
  return _[a1 _resumeAfterFailureRemoving];
}

id objc_msgSend__resumeAfterFailureUploading(void *a1, const char *a2, ...)
{
  return _[a1 _resumeAfterFailureUploading];
}

id objc_msgSend__resumeAfterSuccess(void *a1, const char *a2, ...)
{
  return _[a1 _resumeAfterSuccess];
}

id objc_msgSend__retry(void *a1, const char *a2, ...)
{
  return _[a1 _retry];
}

id objc_msgSend__retryAfterDateForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryAfterDateForAccount:");
}

id objc_msgSend__retryAppDataDownloadsWithConnectivity_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryAppDataDownloadsWithConnectivity:account:");
}

id objc_msgSend__run(void *a1, const char *a2, ...)
{
  return _[a1 _run];
}

id objc_msgSend__runRestoreWithSettingsContext_delegateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runRestoreWithSettingsContext:delegateContext:");
}

id objc_msgSend__runWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runWithError:");
}

id objc_msgSend__sanitizeError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sanitizeError:");
}

id objc_msgSend__saveDeviceTransferInfo(void *a1, const char *a2, ...)
{
  return _[a1 _saveDeviceTransferInfo];
}

id objc_msgSend__saveEnabledSyncDataclasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveEnabledSyncDataclasses:");
}

id objc_msgSend__saveForegroundRestoreCellularAccess_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveForegroundRestoreCellularAccess:account:");
}

id objc_msgSend__saveLastPendingSnapshotSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveLastPendingSnapshotSize:");
}

id objc_msgSend__saveNextBackupFSEventState(void *a1, const char *a2, ...)
{
  return _[a1 _saveNextBackupFSEventState];
}

id objc_msgSend__savePurpleBuddyRestoreState_persona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_savePurpleBuddyRestoreState:persona:");
}

id objc_msgSend__saveRecordsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveRecordsWithCompletion:");
}

id objc_msgSend__scan(void *a1, const char *a2, ...)
{
  return _[a1 _scan];
}

id objc_msgSend__scanAllDomains(void *a1, const char *a2, ...)
{
  return _[a1 _scanAllDomains];
}

id objc_msgSend__scanDirectory_domain_domainDirFd_snapshotPath_relativePath_depth_stats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanDirectory:domain:domainDirFd:snapshotPath:relativePath:depth:stats:");
}

id objc_msgSend__scanDomain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanDomain:error:");
}

id objc_msgSend__scanDomain_snapshotPath_stats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanDomain:snapshotPath:stats:");
}

id objc_msgSend__scanDomain_snapshotPathForDomain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanDomain:snapshotPathForDomain:error:");
}

id objc_msgSend__scanFiles(void *a1, const char *a2, ...)
{
  return _[a1 _scanFiles];
}

id objc_msgSend__scanFilesForDomain_snapshotPath_relativePath_stats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanFilesForDomain:snapshotPath:relativePath:stats:");
}

id objc_msgSend__scanFilesUsingGetattrlistbulkForDomain_snapshotPath_relativePath_stats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanFilesUsingGetattrlistbulkForDomain:snapshotPath:relativePath:stats:");
}

id objc_msgSend__scanFilesUsingReaddirForDomain_snapshotPath_relativePath_depth_stats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanFilesUsingReaddirForDomain:snapshotPath:relativePath:depth:stats:");
}

id objc_msgSend__scanFinished(void *a1, const char *a2, ...)
{
  return _[a1 _scanFinished];
}

id objc_msgSend__scanTree_forDomain_snapshotPath_relativePath_stats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanTree:forDomain:snapshotPath:relativePath:stats:");
}

id objc_msgSend__scannerMode(void *a1, const char *a2, ...)
{
  return _[a1 _scannerMode];
}

id objc_msgSend__scheduleBackgroundRestoreTimeoutTTRWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleBackgroundRestoreTimeoutTTRWithAccount:");
}

id objc_msgSend__scheduleBackupOnWiFi_onCellular_onBattery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleBackupOnWiFi:onCellular:onBattery:");
}

id objc_msgSend__scheduleBatchDeleteOperationForDeleteInfos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleBatchDeleteOperationForDeleteInfos:");
}

id objc_msgSend__scheduleBatchFetchOperationForFetchInfos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleBatchFetchOperationForFetchInfos:");
}

id objc_msgSend__scheduleBatchSaveOperationForSaveInfos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleBatchSaveOperationForSaveInfos:");
}

id objc_msgSend__scheduleDelayedBackgroundRestoreTimerWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleDelayedBackgroundRestoreTimerWithAccount:");
}

id objc_msgSend__scheduleDrain(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleDrain];
}

id objc_msgSend__scheduleIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleIdleTimer];
}

id objc_msgSend__scheduleNextBackup(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleNextBackup];
}

id objc_msgSend__scheduleTimerWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleTimerWithInterval:");
}

id objc_msgSend__scrubSQLiteDatabaseWithEngine_temporaryDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrubSQLiteDatabaseWithEngine:temporaryDirectory:error:");
}

id objc_msgSend__secondsRemainingWithProgress_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_secondsRemainingWithProgress:now:");
}

id objc_msgSend__sendBarrierMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendBarrierMessage:");
}

id objc_msgSend__sendBatchDeleteOperationForDeleteInfos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendBatchDeleteOperationForDeleteInfos:");
}

id objc_msgSend__sendBatchFetchOperationForFetchInfos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendBatchFetchOperationForFetchInfos:");
}

id objc_msgSend__sendBatchSaveOperationForSaveInfos_savePolicy_batchSize_batchAssetsSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendBatchSaveOperationForSaveInfos:savePolicy:batchSize:batchAssetsSize:");
}

id objc_msgSend__sendDoneMessageWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendDoneMessageWithError:");
}

id objc_msgSend__sendMessage_connections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendMessage:connections:");
}

id objc_msgSend__sendRequestWithMethod_path_message_responseClass_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendRequestWithMethod:path:message:responseClass:lastModified:error:");
}

id objc_msgSend__sendRequestWithMethod_path_messages_responseClass_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendRequestWithMethod:path:messages:responseClass:lastModified:error:");
}

id objc_msgSend__sendRequestWithMethod_path_requestBody_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendRequestWithMethod:path:requestBody:lastModified:error:");
}

id objc_msgSend__sendTelemetryForStateChange_start_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendTelemetryForStateChange:start:end:");
}

id objc_msgSend__sendWithAccount_databaseManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendWithAccount:databaseManager:");
}

id objc_msgSend__serializedWiFiQualityMeasurementFromInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serializedWiFiQualityMeasurementFromInterface:");
}

id objc_msgSend__setBackupDisabledIfMissingFromAccount_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBackupDisabledIfMissingFromAccount:connection:");
}

id objc_msgSend__setBackupEnabled_account_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBackupEnabled:account:completion:");
}

id objc_msgSend__setDMContextWithPolicy_engine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDMContextWithPolicy:engine:");
}

id objc_msgSend__setFileMissingEncryptionKeyForPath_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setFileMissingEncryptionKeyForPath:account:");
}

id objc_msgSend__setIsInitialMegaBackupCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIsInitialMegaBackupCompleted:");
}

id objc_msgSend__setLockdownValue_forDomain_key_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLockdownValue:forDomain:key:connection:");
}

id objc_msgSend__setMegaBackupExpirationDate_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setMegaBackupExpirationDate:account:");
}

id objc_msgSend__setMegaBackupMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setMegaBackupMode:");
}

id objc_msgSend__setProperty_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setProperty:forKey:");
}

id objc_msgSend__setPropertyValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPropertyValue:forKey:error:");
}

id objc_msgSend__setProtectionClassWithPathFSR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setProtectionClassWithPathFSR:");
}

id objc_msgSend__setProxiedAppBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setProxiedAppBundleID:");
}

id objc_msgSend__setProxyingForApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setProxyingForApp:");
}

id objc_msgSend__setPurpleBuddyRestoreState_withEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPurpleBuddyRestoreState:withEngine:");
}

id objc_msgSend__setState_forToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setState:forToken:");
}

id objc_msgSend__setUp(void *a1, const char *a2, ...)
{
  return _[a1 _setUp];
}

id objc_msgSend__setUpFileTransferSessionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpFileTransferSessionWithError:");
}

id objc_msgSend__setUpMessaging(void *a1, const char *a2, ...)
{
  return _[a1 _setUpMessaging];
}

id objc_msgSend__setUpSyncZoneWithContainer_policy_operationGroup_xpcActivity_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpSyncZoneWithContainer:policy:operationGroup:xpcActivity:completion:");
}

id objc_msgSend__setUpWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpWithError:");
}

id objc_msgSend__setVolumeUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setVolumeUUID:error:");
}

id objc_msgSend__setWillRestoreInATCBackgroundPhase_restorableID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setWillRestoreInATCBackgroundPhase:restorableID:error:");
}

id objc_msgSend__settingsContextForBackgroundAppRestoreWithBundleID_account_errorCode_delegateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_settingsContextForBackgroundAppRestoreWithBundleID:account:errorCode:delegateContext:");
}

id objc_msgSend__settingsContextForBackgroundFileRestoreWithPath_account_delegateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_settingsContextForBackgroundFileRestoreWithPath:account:delegateContext:");
}

id objc_msgSend__settingsContextForBackupUDID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_settingsContextForBackupUDID:account:");
}

id objc_msgSend__settingsContextForForegroundRestoreWithBackupUDID_account_snapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_settingsContextForForegroundRestoreWithBackupUDID:account:snapshotID:");
}

id objc_msgSend__setup(void *a1, const char *a2, ...)
{
  return _[a1 _setup];
}

id objc_msgSend__setupAddOfFileChange_file_item_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupAddOfFileChange:file:item:");
}

id objc_msgSend__setupAssistantDidFinish(void *a1, const char *a2, ...)
{
  return _[a1 _setupAssistantDidFinish];
}

id objc_msgSend__setupBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupBatch:");
}

id objc_msgSend__setupCacheWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupCacheWithError:");
}

id objc_msgSend__setupConnectionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupConnectionWithError:");
}

id objc_msgSend__setupEncryption(void *a1, const char *a2, ...)
{
  return _[a1 _setupEncryption];
}

id objc_msgSend__setupItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupItem:");
}

id objc_msgSend__setupManifestDB(void *a1, const char *a2, ...)
{
  return _[a1 _setupManifestDB];
}

id objc_msgSend__setupOperationJournal(void *a1, const char *a2, ...)
{
  return _[a1 _setupOperationJournal];
}

id objc_msgSend__setupSnapshotDirectory(void *a1, const char *a2, ...)
{
  return _[a1 _setupSnapshotDirectory];
}

id objc_msgSend__setupVerifyEncryption(void *a1, const char *a2, ...)
{
  return _[a1 _setupVerifyEncryption];
}

id objc_msgSend__shouldBackupIgnoringProtectionClass_domain_protectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldBackupIgnoringProtectionClass:domain:protectionClass:");
}

id objc_msgSend__shouldBackupUsingFSEvents(void *a1, const char *a2, ...)
{
  return _[a1 _shouldBackupUsingFSEvents];
}

id objc_msgSend__shouldEnableHyperLogging(void *a1, const char *a2, ...)
{
  return _[a1 _shouldEnableHyperLogging];
}

id objc_msgSend__shouldForceRetry(void *a1, const char *a2, ...)
{
  return _[a1 _shouldForceRetry];
}

id objc_msgSend__shouldIdleExit(void *a1, const char *a2, ...)
{
  return _[a1 _shouldIdleExit];
}

id objc_msgSend__shouldInformUserWithNotification_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldInformUserWithNotification:account:");
}

id objc_msgSend__shouldInformUserWithPersona_identifiers_withInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldInformUserWithPersona:identifiers:withInterval:");
}

id objc_msgSend__shouldNotBackupFile_domain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldNotBackupFile:domain:");
}

id objc_msgSend__shouldPackFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldPackFile:");
}

id objc_msgSend__shouldRemoveSnapshotAfterError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldRemoveSnapshotAfterError:");
}

id objc_msgSend__shouldResetConsecutiveRetryCounter(void *a1, const char *a2, ...)
{
  return _[a1 _shouldResetConsecutiveRetryCounter];
}

id objc_msgSend__shouldRestore_restorable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldRestore:restorable:error:");
}

id objc_msgSend__shouldRestoreContentWithFile_quiet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldRestoreContentWithFile:quiet:");
}

id objc_msgSend__shouldRetry(void *a1, const char *a2, ...)
{
  return _[a1 _shouldRetry];
}

id objc_msgSend__shouldRollKeyBag(void *a1, const char *a2, ...)
{
  return _[a1 _shouldRollKeyBag];
}

id objc_msgSend__shouldSimulateCancelationForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSimulateCancelationForState:");
}

id objc_msgSend__shouldStartBackupWithAccount_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldStartBackupWithAccount:reason:");
}

id objc_msgSend__shouldUpdateDomainListInPlaceholderDomain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUpdateDomainListInPlaceholderDomain:error:");
}

id objc_msgSend__shouldVerify(void *a1, const char *a2, ...)
{
  return _[a1 _shouldVerify];
}

id objc_msgSend__signalControlConnectionStarted(void *a1, const char *a2, ...)
{
  return _[a1 _signalControlConnectionStarted];
}

id objc_msgSend__sizeOfDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sizeOfDomain:");
}

id objc_msgSend__sizeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sizeWithError:");
}

id objc_msgSend__skipDomainID_into_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_skipDomainID:into:error:");
}

id objc_msgSend__sleep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sleep:");
}

id objc_msgSend__sleepIntervalAfterError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sleepIntervalAfterError:");
}

id objc_msgSend__sleepIntervalAfterError_networkAvailable_attempt_backoffCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sleepIntervalAfterError:networkAvailable:attempt:backoffCache:");
}

id objc_msgSend__slotAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_slotAtIndex:");
}

id objc_msgSend__slots(void *a1, const char *a2, ...)
{
  return _[a1 _slots];
}

id objc_msgSend__snapshotAttributes(void *a1, const char *a2, ...)
{
  return _[a1 _snapshotAttributes];
}

id objc_msgSend__snapshotFilesystem(void *a1, const char *a2, ...)
{
  return _[a1 _snapshotFilesystem];
}

id objc_msgSend__snapshotForSnapshotID_backupUDID_cached_operationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_snapshotForSnapshotID:backupUDID:cached:operationTracker:error:");
}

id objc_msgSend__snapshotFormatForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_snapshotFormatForAccount:error:");
}

id objc_msgSend__snapshotIDForSnapshotUUID_backupUDID_operationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_snapshotIDForSnapshotUUID:backupUDID:operationTracker:error:");
}

id objc_msgSend__snapshotWithStmt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_snapshotWithStmt:");
}

id objc_msgSend__standardizePath_fromDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_standardizePath:fromDomain:");
}

id objc_msgSend__startBackgroundRestoreWithSettingsContext_delegateContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startBackgroundRestoreWithSettingsContext:delegateContext:error:");
}

id objc_msgSend__startBackupForNextAvailableAccountWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startBackupForNextAvailableAccountWithRequest:");
}

id objc_msgSend__startBackupRequestForActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startBackupRequestForActivity:");
}

id objc_msgSend__startBackupWithEngine_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startBackupWithEngine:account:");
}

id objc_msgSend__startCollectingWiFiQualityMeasurements(void *a1, const char *a2, ...)
{
  return _[a1 _startCollectingWiFiQualityMeasurements];
}

id objc_msgSend__startDisconnectTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startDisconnectTimer];
}

id objc_msgSend__startEngine_delegateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startEngine:delegateContext:");
}

id objc_msgSend__startNetworkAccessTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startNetworkAccessTimer];
}

id objc_msgSend__startNetworkPathMonitor(void *a1, const char *a2, ...)
{
  return _[a1 _startNetworkPathMonitor];
}

id objc_msgSend__startOTABackupWithAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startOTABackupWithAccount:error:");
}

id objc_msgSend__startRestoreInProgressFollowUpTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startRestoreInProgressFollowUpTimer];
}

id objc_msgSend__startRestoreTelemetryHeartbeatTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startRestoreTelemetryHeartbeatTimer];
}

id objc_msgSend__startRestoreWithEngine_delegateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startRestoreWithEngine:delegateContext:");
}

id objc_msgSend__startScanWithSettingsContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startScanWithSettingsContext:error:");
}

id objc_msgSend__startSourceDeviceTransferWithSessionInfo_connection_personaIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startSourceDeviceTransferWithSessionInfo:connection:personaIdentifier:completion:");
}

id objc_msgSend__startStreamWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startStreamWithError:");
}

id objc_msgSend__startTargetDeviceTransferWithSessionInfo_connection_personaIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startTargetDeviceTransferWithSessionInfo:connection:personaIdentifier:completion:");
}

id objc_msgSend__startTrackingPeerConnectionStatus(void *a1, const char *a2, ...)
{
  return _[a1 _startTrackingPeerConnectionStatus];
}

id objc_msgSend__stashFileAtURL_prefetchDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stashFileAtURL:prefetchDirectory:error:");
}

id objc_msgSend__stateDidChange_conditions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stateDidChange:conditions:");
}

id objc_msgSend__stateForToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stateForToken:");
}

id objc_msgSend__stopCollectingWiFiQualityMeasurements(void *a1, const char *a2, ...)
{
  return _[a1 _stopCollectingWiFiQualityMeasurements];
}

id objc_msgSend__stopMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 _stopMonitoring];
}

id objc_msgSend__stopOTABackupWithAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopOTABackupWithAccount:error:");
}

id objc_msgSend__stopTrackingPeerConnectionStatus(void *a1, const char *a2, ...)
{
  return _[a1 _stopTrackingPeerConnectionStatus];
}

id objc_msgSend__storeAndComputeThroughput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeAndComputeThroughput:");
}

id objc_msgSend__stringForAccountCredentialRenewResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForAccountCredentialRenewResult:");
}

id objc_msgSend__stringValueForStats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringValueForStats:");
}

id objc_msgSend__subBytesRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_subBytesRemaining:");
}

id objc_msgSend__subdomainNamesForAppDomainNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_subdomainNamesForAppDomainNames:");
}

id objc_msgSend__submitMetrics(void *a1, const char *a2, ...)
{
  return _[a1 _submitMetrics];
}

id objc_msgSend__syncBackupEnabledWithAccount_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_syncBackupEnabledWithAccount:connection:");
}

id objc_msgSend__syncDisabledDomainsWithAllInstalledAppDomains_persona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_syncDisabledDomainsWithAllInstalledAppDomains:persona:");
}

id objc_msgSend__systemContainersWithError_shared_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemContainersWithError:shared:");
}

id objc_msgSend__taskForRequestClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_taskForRequestClass:");
}

id objc_msgSend__tearDown(void *a1, const char *a2, ...)
{
  return _[a1 _tearDown];
}

id objc_msgSend__tearDownScheduledBackupWithActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tearDownScheduledBackupWithActivityType:");
}

id objc_msgSend__temporaryPathForFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_temporaryPathForFile:");
}

id objc_msgSend__tokenForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tokenForName:");
}

id objc_msgSend__totalProgressForPhaseProgress_phase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_totalProgressForPhaseProgress:phase:");
}

id objc_msgSend__trackFetchError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trackFetchError:");
}

id objc_msgSend__trackModifiedFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trackModifiedFile:");
}

id objc_msgSend__trackOrderFollowUpAction(void *a1, const char *a2, ...)
{
  return _[a1 _trackOrderFollowUpAction];
}

id objc_msgSend__trackUnmodifiedFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trackUnmodifiedFile:");
}

id objc_msgSend__triggerInternalNotificationWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_triggerInternalNotificationWithAccount:");
}

id objc_msgSend__truncateDeletedFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_truncateDeletedFiles:");
}

id objc_msgSend__tryBackingUp(void *a1, const char *a2, ...)
{
  return _[a1 _tryBackingUp];
}

id objc_msgSend__tryRestoring(void *a1, const char *a2, ...)
{
  return _[a1 _tryRestoring];
}

id objc_msgSend__turnOnAppsBackingUpFollowUpAction(void *a1, const char *a2, ...)
{
  return _[a1 _turnOnAppsBackingUpFollowUpAction];
}

id objc_msgSend__turnOnAppsUsingiCloudFollowUpAction(void *a1, const char *a2, ...)
{
  return _[a1 _turnOnAppsUsingiCloudFollowUpAction];
}

id objc_msgSend__typeString(void *a1, const char *a2, ...)
{
  return _[a1 _typeString];
}

id objc_msgSend__unarchive(void *a1, const char *a2, ...)
{
  return _[a1 _unarchive];
}

id objc_msgSend__uninstallExistingAppWithBundleID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uninstallExistingAppWithBundleID:error:");
}

id objc_msgSend__unlocked(void *a1, const char *a2, ...)
{
  return _[a1 _unlocked];
}

id objc_msgSend__unmountSnapshotsAndRemoveThem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unmountSnapshotsAndRemoveThem:");
}

id objc_msgSend__unzipPlaceholderDomainZipFile_intoDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unzipPlaceholderDomainZipFile:intoDirectory:error:");
}

id objc_msgSend__updateAccountIfNeededAfterError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccountIfNeededAfterError:");
}

id objc_msgSend__updateBundleIDsToPersonaIDMappingWithConfig_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBundleIDsToPersonaIDMappingWithConfig:error:");
}

id objc_msgSend__updateCacheWithFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCacheWithFile:");
}

id objc_msgSend__updateCameraRollBackupStateWithEngine_foundiCPLSyncMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCameraRollBackupStateWithEngine:foundiCPLSyncMarker:");
}

id objc_msgSend__updateCurrentMetrics_forDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCurrentMetrics:forDay:");
}

id objc_msgSend__updateDeviceTransferInfoWithPlist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDeviceTransferInfoWithPlist:");
}

id objc_msgSend__updateDidInformUserWithNotification_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDidInformUserWithNotification:account:");
}

id objc_msgSend__updateDidInformUserWithPersona_identifier_oldIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDidInformUserWithPersona:identifier:oldIdentifier:");
}

id objc_msgSend__updateDomainListInPendingSnapshotDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDomainListInPendingSnapshotDatabase:");
}

id objc_msgSend__updateFailureCountsForAccount_lastBackupError_canceled_lowCellularBudget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFailureCountsForAccount:lastBackupError:canceled:lowCellularBudget:");
}

id objc_msgSend__updateFollowUpActions_hasDisabledSyncCategories_hasDisabledBackupDomains_canTrackOrder_allowsExpirationExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFollowUpActions:hasDisabledSyncCategories:hasDisabledBackupDomains:canTrackOrder:allowsExpirationExtension:");
}

id objc_msgSend__updateLockdownKeysForAccountState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLockdownKeysForAccountState:");
}

id objc_msgSend__updateMegaBackupStatus_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMegaBackupStatus:account:");
}

id objc_msgSend__updateMobileBackupPreferencesWithEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMobileBackupPreferencesWithEngine:");
}

id objc_msgSend__updateNilBackupDateFetchDate_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNilBackupDateFetchDate:account:");
}

id objc_msgSend__updateOpenFdsLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOpenFdsLimit:");
}

id objc_msgSend__updatePathsForCameraRollDomainWithEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePathsForCameraRollDomainWithEngine:");
}

id objc_msgSend__updatePathsForHomeDomainWithEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePathsForHomeDomainWithEngine:");
}

id objc_msgSend__updatePathsForKeyboardDomainWithEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePathsForKeyboardDomainWithEngine:");
}

id objc_msgSend__updateProgressForReceivedItem_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateProgressForReceivedItem:size:");
}

id objc_msgSend__updateProgressForSentItem_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateProgressForSentItem:size:");
}

id objc_msgSend__updateRetryAfterDate_forKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRetryAfterDate:forKey:account:");
}

id objc_msgSend__updateRetryAfterDate_forKey_account_ignoreExistingDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRetryAfterDate:forKey:account:ignoreExistingDate:");
}

id objc_msgSend__updateRetryAfterDateAfterUnlockForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRetryAfterDateAfterUnlockForAccount:");
}

id objc_msgSend__updateStats_file_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStats:file:");
}

id objc_msgSend__updateTotalProgressWithTransferInfo_phaseProgress_phase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTotalProgressWithTransferInfo:phaseProgress:phase:");
}

id objc_msgSend__upgradeFileListDatabaseForDomainName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_upgradeFileListDatabaseForDomainName:error:");
}

id objc_msgSend__upload(void *a1, const char *a2, ...)
{
  return _[a1 _upload];
}

id objc_msgSend__uploadBatch_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadBatch:options:completion:");
}

id objc_msgSend__uploadInBatches(void *a1, const char *a2, ...)
{
  return _[a1 _uploadInBatches];
}

id objc_msgSend__uploadStatusToDriveWithSnapshotState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadStatusToDriveWithSnapshotState:error:");
}

id objc_msgSend__usedCapacityForVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_usedCapacityForVolume:");
}

id objc_msgSend__validRWDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validRWDatabase:");
}

id objc_msgSend__validateAppInstallation(void *a1, const char *a2, ...)
{
  return _[a1 _validateAppInstallation];
}

id objc_msgSend__verificationStateForDomainID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verificationStateForDomainID:error:");
}

id objc_msgSend__verifyAllAssetRecordIDsAreReferencedForDomain_assetIDPrefix_recordsDB_totalVerifiedAssetRecordsCount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyAllAssetRecordIDsAreReferencedForDomain:assetIDPrefix:recordsDB:totalVerifiedAssetRecordsCount:error:");
}

id objc_msgSend__verifyAssetMetadata_file_localPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyAssetMetadata:file:localPath:");
}

id objc_msgSend__verifyBackupMetadataForFile_localPath_fileList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyBackupMetadataForFile:localPath:fileList:");
}

id objc_msgSend__verifyBackupReloadingManifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyBackupReloadingManifest:");
}

id objc_msgSend__verifyContainerizedDataAfterBackgroundRestore_domainPlan_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyContainerizedDataAfterBackgroundRestore:domainPlan:error:");
}

id objc_msgSend__verifyDomain_snapshotUUID_errors_cancellationError_pathForFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyDomain:snapshotUUID:errors:cancellationError:pathForFile:");
}

id objc_msgSend__verifyFSEventDatabase_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyFSEventDatabase:device:error:");
}

id objc_msgSend__verifyFreeSpace(void *a1, const char *a2, ...)
{
  return _[a1 _verifyFreeSpace];
}

id objc_msgSend__verifyRestoreMetadataForFile_localPath_fileList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyRestoreMetadataForFile:localPath:fileList:");
}

id objc_msgSend__verifySnapshotAfterCommitWithPath_operationTracker_scanMode_enginePolicy_snapshotTracker_domainManager_deviceRecordID_hmacKey_backupAttemptSummary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifySnapshotAfterCommitWithPath:operationTracker:scanMode:enginePolicy:snapshotTracker:domainManager:deviceRecordID:hmacKey:backupAttemptSummary:error:");
}

id objc_msgSend__verifySnapshotManifests_operationTracker_summary_shouldOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifySnapshotManifests:operationTracker:summary:shouldOutput:");
}

id objc_msgSend__verifySnapshotWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifySnapshotWithError:");
}

id objc_msgSend__volumeIdentifierForDomain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_volumeIdentifierForDomain:error:");
}

id objc_msgSend__volumesToBackUpForPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_volumesToBackUpForPersona:");
}

id objc_msgSend__waitForControlConnectionWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_waitForControlConnectionWithBlock:");
}

id objc_msgSend__waitForRebootSignal(void *a1, const char *a2, ...)
{
  return _[a1 _waitForRebootSignal];
}

id objc_msgSend__waitForRestoreConditions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_waitForRestoreConditions:");
}

id objc_msgSend__warnUserOfLateBackupWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_warnUserOfLateBackupWithAccount:");
}

id objc_msgSend__warnUserOfPowerBudgetSuspendingRestoreForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_warnUserOfPowerBudgetSuspendingRestoreForAccount:");
}

id objc_msgSend__withReadOnlyDB_accessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_withReadOnlyDB:accessor:");
}

id objc_msgSend__writeMigratorCache_config_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeMigratorCache:config:error:");
}

id objc_msgSend_aa_accountClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_accountClass");
}

id objc_msgSend_aa_altDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_altDSID");
}

id objc_msgSend_aa_appleAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_appleAccountWithAltDSID:");
}

id objc_msgSend_aa_appleAccountWithPersonID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_appleAccountWithPersonID:");
}

id objc_msgSend_aa_isAccountClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isAccountClass:");
}

id objc_msgSend_aa_isManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isManagedAppleID");
}

id objc_msgSend_aa_isPrimaryEmailVerified(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isPrimaryEmailVerified");
}

id objc_msgSend_aa_personID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_personID");
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_primaryAppleAccount");
}

id objc_msgSend_aa_setPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_setPassword:");
}

id objc_msgSend_aa_updatePropertiesForAppleAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_updatePropertiesForAppleAccount:completion:");
}

id objc_msgSend_aa_useCellularForDataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_useCellularForDataclass:");
}

id objc_msgSend_abbreviation(void *a1, const char *a2, ...)
{
  return _[a1 abbreviation];
}

id objc_msgSend_abortedTransferringItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "abortedTransferringItem:");
}

id objc_msgSend_abortedTransferringItemWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "abortedTransferringItemWithSize:");
}

id objc_msgSend_absoluteDay(void *a1, const char *a2, ...)
{
  return _[a1 absoluteDay];
}

id objc_msgSend_absolutePath(void *a1, const char *a2, ...)
{
  return _[a1 absolutePath];
}

id objc_msgSend_absolutePathFSR(void *a1, const char *a2, ...)
{
  return _[a1 absolutePathFSR];
}

id objc_msgSend_absolutePathPrefix(void *a1, const char *a2, ...)
{
  return _[a1 absolutePathPrefix];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_absoluteURL(void *a1, const char *a2, ...)
{
  return _[a1 absoluteURL];
}

id objc_msgSend_accessGroupName(void *a1, const char *a2, ...)
{
  return _[a1 accessGroupName];
}

id objc_msgSend_accessibilityType(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityType];
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _[a1 account];
}

id objc_msgSend_accountChanged(void *a1, const char *a2, ...)
{
  return _[a1 accountChanged];
}

id objc_msgSend_accountChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountChanged:");
}

id objc_msgSend_accountClass(void *a1, const char *a2, ...)
{
  return _[a1 accountClass];
}

id objc_msgSend_accountID(void *a1, const char *a2, ...)
{
  return _[a1 accountID];
}

id objc_msgSend_accountIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 accountIdentifier];
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInfoWithCompletionHandler:");
}

id objc_msgSend_accountName(void *a1, const char *a2, ...)
{
  return _[a1 accountName];
}

id objc_msgSend_accountStatus(void *a1, const char *a2, ...)
{
  return _[a1 accountStatus];
}

id objc_msgSend_accountStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusWithCompletionHandler:");
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _[a1 accountType];
}

id objc_msgSend_accountTypeWithAccountTypeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTypeWithAccountTypeIdentifier:");
}

id objc_msgSend_accountWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountWithError:");
}

id objc_msgSend_accountWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountWithIdentifier:");
}

id objc_msgSend_accountWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountWithIdentifier:error:");
}

id objc_msgSend_accountWithUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountWithUniqueIdentifier:");
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_accountsForAssets(void *a1, const char *a2, ...)
{
  return _[a1 accountsForAssets];
}

id objc_msgSend_accountsQueue(void *a1, const char *a2, ...)
{
  return _[a1 accountsQueue];
}

id objc_msgSend_accountsToBackup(void *a1, const char *a2, ...)
{
  return _[a1 accountsToBackup];
}

id objc_msgSend_accountsWithAccountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsWithAccountType:");
}

id objc_msgSend_acquireCache(void *a1, const char *a2, ...)
{
  return _[a1 acquireCache];
}

id objc_msgSend_acquireLock(void *a1, const char *a2, ...)
{
  return _[a1 acquireLock];
}

id objc_msgSend_acquireLockWithBackupUDID_account_owner_timeout_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireLockWithBackupUDID:account:owner:timeout:connection:error:");
}

id objc_msgSend_actionWithLabel_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithLabel:url:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activeAccount(void *a1, const char *a2, ...)
{
  return _[a1 activeAccount];
}

id objc_msgSend_activeAppleID(void *a1, const char *a2, ...)
{
  return _[a1 activeAppleID];
}

id objc_msgSend_activity(void *a1, const char *a2, ...)
{
  return _[a1 activity];
}

id objc_msgSend_activityCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 activityCoordinator];
}

id objc_msgSend_activityHandler(void *a1, const char *a2, ...)
{
  return _[a1 activityHandler];
}

id objc_msgSend_activityType(void *a1, const char *a2, ...)
{
  return _[a1 activityType];
}

id objc_msgSend_addAccountWithDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccountWithDSID:");
}

id objc_msgSend_addAllPasswordItems_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAllPasswordItems:error:");
}

id objc_msgSend_addAppleID_DSID_altDSID_dataClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAppleID:DSID:altDSID:dataClass:");
}

id objc_msgSend_addAppleIDsFromSet_dataClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAppleIDsFromSet:dataClass:");
}

id objc_msgSend_addAssetDescriptionForAppleID_assetDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAssetDescriptionForAppleID:assetDescription:");
}

id objc_msgSend_addBackup_lastModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBackup:lastModified:");
}

id objc_msgSend_addBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBackupUDID:");
}

id objc_msgSend_addBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBundleID:");
}

id objc_msgSend_addCKMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCKMetric:");
}

id objc_msgSend_addChunkStoreItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChunkStoreItem:");
}

id objc_msgSend_addContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addContainer:");
}

id objc_msgSend_addContainersFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addContainersFromArray:");
}

id objc_msgSend_addDatabaseOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDatabaseOperation:");
}

id objc_msgSend_addDatabaseOperation_account_policy_operationGroup_xpcActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDatabaseOperation:account:policy:operationGroup:xpcActivity:");
}

id objc_msgSend_addDatabaseOperation_container_policy_operationGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDatabaseOperation:container:policy:operationGroup:");
}

id objc_msgSend_addDatabaseOperation_policy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDatabaseOperation:policy:");
}

id objc_msgSend_addDependentDomains_forApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDependentDomains:forApp:");
}

id objc_msgSend_addDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDevice:error:");
}

id objc_msgSend_addDisabledDomainNames_restricted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDisabledDomainNames:restricted:");
}

id objc_msgSend_addDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDomain:");
}

id objc_msgSend_addDomain_forName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDomain:forName:");
}

id objc_msgSend_addDomainFromPreviousSnapshotsWithName_recordID_pageCount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDomainFromPreviousSnapshotsWithName:recordID:pageCount:error:");
}

id objc_msgSend_addDomainHMACsToRepair_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDomainHMACsToRepair:error:");
}

id objc_msgSend_addDomainHmacToRemove_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDomainHmacToRemove:");
}

id objc_msgSend_addDomainRecordIDsFromPendingSnapshotDatabase_attemptSummary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDomainRecordIDsFromPendingSnapshotDatabase:attemptSummary:error:");
}

id objc_msgSend_addDomainReference_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDomainReference:error:");
}

id objc_msgSend_addDomainsToBackUpToiCloudWithAppManager_manager_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDomainsToBackUpToiCloudWithAppManager:manager:account:");
}

id objc_msgSend_addEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEngine:");
}

id objc_msgSend_addEntriesForApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesForApp:");
}

id objc_msgSend_addEntriesForApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesForApps:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addExtendedAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExtendedAttribute:");
}

id objc_msgSend_addExtendedAttributesDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExtendedAttributesDictionary:");
}

id objc_msgSend_addFile_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFile:flags:");
}

id objc_msgSend_addFile_itemID_restorePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFile:itemID:restorePath:");
}

id objc_msgSend_addFile_snapshotID_backupUDID_committed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFile:snapshotID:backupUDID:committed:");
}

id objc_msgSend_addFile_toManifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFile:toManifest:");
}

id objc_msgSend_addFileChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFileChange:");
}

id objc_msgSend_addFileChange_batchSave_engine_skipped_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFileChange:batchSave:engine:skipped:error:");
}

id objc_msgSend_addFileMissingEncryptionKeyWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFileMissingEncryptionKeyWithPath:");
}

id objc_msgSend_addFilePath_forHash_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFilePath:forHash:error:");
}

id objc_msgSend_addFileReferences_forManifest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFileReferences:forManifest:error:");
}

id objc_msgSend_addFileToBackupUDID_snapshotID_domainName_relativePath_fromPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFileToBackupUDID:snapshotID:domainName:relativePath:fromPath:error:");
}

id objc_msgSend_addFileToDomainName_relativePath_fromPath_progress_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFileToDomainName:relativePath:fromPath:progress:error:");
}

id objc_msgSend_addFileToRestoreFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFileToRestoreFiles:");
}

id objc_msgSend_addFiles_backupUDID_snapshotID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFiles:backupUDID:snapshotID:lastModified:error:");
}

id objc_msgSend_addFilesCount(void *a1, const char *a2, ...)
{
  return _[a1 addFilesCount];
}

id objc_msgSend_addFilesSize(void *a1, const char *a2, ...)
{
  return _[a1 addFilesSize];
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItem:");
}

id objc_msgSend_addItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItems:");
}

id objc_msgSend_addKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKey:");
}

id objc_msgSend_addKeyBagInfo_forBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKeyBagInfo:forBackupUDID:");
}

id objc_msgSend_addKeybag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKeybag:");
}

id objc_msgSend_addKeybagSecret_forUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKeybagSecret:forUUID:error:");
}

id objc_msgSend_addKeysAndValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKeysAndValues:");
}

id objc_msgSend_addLocalBackupPassword_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLocalBackupPassword:error:");
}

id objc_msgSend_addManifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addManifest:");
}

id objc_msgSend_addManifest_toPendingSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addManifest:toPendingSnapshot:");
}

id objc_msgSend_addManifestPage_forManifestID_pageIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addManifestPage:forManifestID:pageIndex:");
}

id objc_msgSend_addMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMessages:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperations:");
}

id objc_msgSend_addPasswordItem_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPasswordItem:error:");
}

id objc_msgSend_addPendingSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingSnapshot:");
}

id objc_msgSend_addPendingSnapshot_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingSnapshot:error:");
}

id objc_msgSend_addPlaceholderForFile_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPlaceholderForFile:flags:");
}

id objc_msgSend_addPlaceholderReferences_forManifest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPlaceholderReferences:forManifest:error:");
}

id objc_msgSend_addQueryCursor_forSnapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addQueryCursor:forSnapshotID:");
}

id objc_msgSend_addQuota_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addQuota:");
}

id objc_msgSend_addRefreshedSnapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRefreshedSnapshotID:");
}

id objc_msgSend_addRemainingProgress_forDomainNames_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRemainingProgress:forDomainNames:error:");
}

id objc_msgSend_addRepairDomainHMAC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRepairDomainHMAC:");
}

id objc_msgSend_addRepairDomainToMBCKDevice(void *a1, const char *a2, ...)
{
  return _[a1 addRepairDomainToMBCKDevice];
}

id objc_msgSend_addRestoreFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRestoreFile:");
}

id objc_msgSend_addSavesWithBatchSave_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSavesWithBatchSave:completion:");
}

id objc_msgSend_addSavesWithOperationTracker_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSavesWithOperationTracker:completion:");
}

id objc_msgSend_addServiceFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addServiceFile:");
}

id objc_msgSend_addSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSettings:");
}

id objc_msgSend_addSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSnapshot:");
}

id objc_msgSend_addSnapshot_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSnapshot:backupUDID:");
}

id objc_msgSend_addSnapshotIntoFileChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSnapshotIntoFileChanges:");
}

id objc_msgSend_addSnapshotToMerge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSnapshotToMerge:");
}

id objc_msgSend_addTimer_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTimer:forMode:");
}

id objc_msgSend_addUnreferencedKeybagsFromCacheWithOperationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUnreferencedKeybagsFromCacheWithOperationTracker:error:");
}

id objc_msgSend_addValue_forServiceName_accountName_withAccessibility_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addValue:forServiceName:accountName:withAccessibility:error:");
}

id objc_msgSend_addValue_toKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addValue:toKey:");
}

id objc_msgSend_added(void *a1, const char *a2, ...)
{
  return _[a1 added];
}

id objc_msgSend_addedOrModifiedAssets(void *a1, const char *a2, ...)
{
  return _[a1 addedOrModifiedAssets];
}

id objc_msgSend_adjustNodeOwnershipAndPermissionsForDataMigratorPlugIn_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustNodeOwnershipAndPermissionsForDataMigratorPlugIn:path:");
}

id objc_msgSend_aggregateDictionaryGroup(void *a1, const char *a2, ...)
{
  return _[a1 aggregateDictionaryGroup];
}

id objc_msgSend_aggregateSize(void *a1, const char *a2, ...)
{
  return _[a1 aggregateSize];
}

id objc_msgSend_airTrafficDidFinishRestore(void *a1, const char *a2, ...)
{
  return _[a1 airTrafficDidFinishRestore];
}

id objc_msgSend_allAppGroupContainers(void *a1, const char *a2, ...)
{
  return _[a1 allAppGroupContainers];
}

id objc_msgSend_allApps(void *a1, const char *a2, ...)
{
  return _[a1 allApps];
}

id objc_msgSend_allClients(void *a1, const char *a2, ...)
{
  return _[a1 allClients];
}

id objc_msgSend_allContainers(void *a1, const char *a2, ...)
{
  return _[a1 allContainers];
}

id objc_msgSend_allDisabledDomainNames(void *a1, const char *a2, ...)
{
  return _[a1 allDisabledDomainNames];
}

id objc_msgSend_allDisabledDomainNamesForPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDisabledDomainNamesForPersona:");
}

id objc_msgSend_allDomains(void *a1, const char *a2, ...)
{
  return _[a1 allDomains];
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allPasswordItemsForService_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allPasswordItemsForService:error:");
}

id objc_msgSend_allPasswordItemsForServices_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allPasswordItemsForServices:error:");
}

id objc_msgSend_allPersonaStates(void *a1, const char *a2, ...)
{
  return _[a1 allPersonaStates];
}

id objc_msgSend_allPersonae(void *a1, const char *a2, ...)
{
  return _[a1 allPersonae];
}

id objc_msgSend_allPlugins(void *a1, const char *a2, ...)
{
  return _[a1 allPlugins];
}

id objc_msgSend_allRestrictedDomainNames(void *a1, const char *a2, ...)
{
  return _[a1 allRestrictedDomainNames];
}

id objc_msgSend_allRestrictedDomainNames_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allRestrictedDomainNames:account:");
}

id objc_msgSend_allRestrictedDomainNamesForPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allRestrictedDomainNamesForPersona:");
}

id objc_msgSend_allServiceAccounts(void *a1, const char *a2, ...)
{
  return _[a1 allServiceAccounts];
}

id objc_msgSend_allSystemContainers(void *a1, const char *a2, ...)
{
  return _[a1 allSystemContainers];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowBackupOnExpensiveCellular(void *a1, const char *a2, ...)
{
  return _[a1 allowBackupOnExpensiveCellular];
}

id objc_msgSend_allowSnapshotFormatSelectionOnGMForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowSnapshotFormatSelectionOnGMForAccount:");
}

id objc_msgSend_allowedCellularCost(void *a1, const char *a2, ...)
{
  return _[a1 allowedCellularCost];
}

id objc_msgSend_allowiTunesBackup(void *a1, const char *a2, ...)
{
  return _[a1 allowiTunesBackup];
}

id objc_msgSend_allowsExpensiveNetworkAccess(void *a1, const char *a2, ...)
{
  return _[a1 allowsExpensiveNetworkAccess];
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return _[a1 altDSID];
}

id objc_msgSend_alternateButton(void *a1, const char *a2, ...)
{
  return _[a1 alternateButton];
}

id objc_msgSend_analyticsEvent(void *a1, const char *a2, ...)
{
  return _[a1 analyticsEvent];
}

id objc_msgSend_analyze(void *a1, const char *a2, ...)
{
  return _[a1 analyze];
}

id objc_msgSend_analyzeChurnWithFileCount_withTotalFileSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyzeChurnWithFileCount:withTotalFileSize:");
}

id objc_msgSend_annotateDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotateDomains:");
}

id objc_msgSend_appClipMetadata(void *a1, const char *a2, ...)
{
  return _[a1 appClipMetadata];
}

id objc_msgSend_appDataDidFinishRestore(void *a1, const char *a2, ...)
{
  return _[a1 appDataDidFinishRestore];
}

id objc_msgSend_appDomainWithIdentifier_volumeMountPoint_rootPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appDomainWithIdentifier:volumeMountPoint:rootPath:");
}

id objc_msgSend_appGroupDomainWithIdentifier_volumeMountPoint_rootPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appGroupDomainWithIdentifier:volumeMountPoint:rootPath:");
}

id objc_msgSend_appInstallCoordinators(void *a1, const char *a2, ...)
{
  return _[a1 appInstallCoordinators];
}

id objc_msgSend_appManager(void *a1, const char *a2, ...)
{
  return _[a1 appManager];
}

id objc_msgSend_appManagerWithSettingsContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appManagerWithSettingsContext:");
}

id objc_msgSend_appPlaceholderArchiveDirectory(void *a1, const char *a2, ...)
{
  return _[a1 appPlaceholderArchiveDirectory];
}

id objc_msgSend_appPlaceholderDomainWithIdentifier_volumeMountPoint_rootPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appPlaceholderDomainWithIdentifier:volumeMountPoint:rootPath:");
}

id objc_msgSend_appPluginDomainWithIdentifier_volumeMountPoint_rootPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appPluginDomainWithIdentifier:volumeMountPoint:rootPath:");
}

id objc_msgSend_appRestorerForAccount_stateQueue_delegate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appRestorerForAccount:stateQueue:delegate:error:");
}

id objc_msgSend_appWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appWithBundleID:");
}

id objc_msgSend_appWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appWithIdentifier:");
}

id objc_msgSend_appWithPropertyList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appWithPropertyList:");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appleID(void *a1, const char *a2, ...)
{
  return _[a1 appleID];
}

id objc_msgSend_appleIDHeadersForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDHeadersForRequest:");
}

id objc_msgSend_appleIDs(void *a1, const char *a2, ...)
{
  return _[a1 appleIDs];
}

id objc_msgSend_appleIDsForAssets(void *a1, const char *a2, ...)
{
  return _[a1 appleIDsForAssets];
}

id objc_msgSend_applicationDSID(void *a1, const char *a2, ...)
{
  return _[a1 applicationDSID];
}

id objc_msgSend_applicationExtensionRecords(void *a1, const char *a2, ...)
{
  return _[a1 applicationExtensionRecords];
}

id objc_msgSend_applicationIDs(void *a1, const char *a2, ...)
{
  return _[a1 applicationIDs];
}

id objc_msgSend_applicationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 applicationIdentifier];
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return _[a1 applicationState];
}

id objc_msgSend_applicationType(void *a1, const char *a2, ...)
{
  return _[a1 applicationType];
}

id objc_msgSend_archivePlaceholderDomainWithPersonaIdentifier_intoDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivePlaceholderDomainWithPersonaIdentifier:intoDirectory:error:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_archivedObjectOfClass_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedObjectOfClass:atIndex:");
}

id objc_msgSend_areAllFilesCommittedForSnapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areAllFilesCommittedForSnapshotID:backupUDID:");
}

id objc_msgSend_areFilesMissingEncryptionKey(void *a1, const char *a2, ...)
{
  return _[a1 areFilesMissingEncryptionKey];
}

id objc_msgSend_arguments(void *a1, const char *a2, ...)
{
  return _[a1 arguments];
}

id objc_msgSend_argv(void *a1, const char *a2, ...)
{
  return _[a1 argv];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByExcludingObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByExcludingObjectsInArray:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_asArchiveData(void *a1, const char *a2, ...)
{
  return _[a1 asArchiveData];
}

id objc_msgSend_asCKRecord(void *a1, const char *a2, ...)
{
  return _[a1 asCKRecord];
}

id objc_msgSend_assetFetchSummary(void *a1, const char *a2, ...)
{
  return _[a1 assetFetchSummary];
}

id objc_msgSend_assetFetcherWithOperationTracker_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetFetcherWithOperationTracker:device:error:");
}

id objc_msgSend_assetFiles(void *a1, const char *a2, ...)
{
  return _[a1 assetFiles];
}

id objc_msgSend_assetIDPrefix(void *a1, const char *a2, ...)
{
  return _[a1 assetIDPrefix];
}

id objc_msgSend_assetMetadata(void *a1, const char *a2, ...)
{
  return _[a1 assetMetadata];
}

id objc_msgSend_assetMetadataForEmptyFileWithEncryptionKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetMetadataForEmptyFileWithEncryptionKey:");
}

id objc_msgSend_assetMetadataForFilePendingUploadWithEncryptionKey_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetMetadataForFilePendingUploadWithEncryptionKey:size:");
}

id objc_msgSend_assetMetadataForUploadedRecordWithRecordIDSuffix_signature_size_type_compressionMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetMetadataForUploadedRecordWithRecordIDSuffix:signature:size:type:compressionMethod:");
}

id objc_msgSend_assetMetadataFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetMetadataFromIndex:");
}

id objc_msgSend_assetMetadataFromRecordIDSuffix_signature_size_type_compressionMethod_encryptionKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetMetadataFromRecordIDSuffix:signature:size:type:compressionMethod:encryptionKey:");
}

id objc_msgSend_assetPath(void *a1, const char *a2, ...)
{
  return _[a1 assetPath];
}

id objc_msgSend_assetRecordForDomain_absolutePath_extension_inode_protectionClass_assetType_compressionMethod_device_commitID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetRecordForDomain:absolutePath:extension:inode:protectionClass:assetType:compressionMethod:device:commitID:error:");
}

id objc_msgSend_assetRecordFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetRecordFromCKRecord:");
}

id objc_msgSend_assetRecordIDPrefixFromAssetIDPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetRecordIDPrefixFromAssetIDPrefix:");
}

id objc_msgSend_assetSignature(void *a1, const char *a2, ...)
{
  return _[a1 assetSignature];
}

id objc_msgSend_assetSize(void *a1, const char *a2, ...)
{
  return _[a1 assetSize];
}

id objc_msgSend_assetTransferOptions(void *a1, const char *a2, ...)
{
  return _[a1 assetTransferOptions];
}

id objc_msgSend_assetType(void *a1, const char *a2, ...)
{
  return _[a1 assetType];
}

id objc_msgSend_associateWithCompletedOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateWithCompletedOperation:");
}

id objc_msgSend_atcFileInfosMatchingRelativePath_pendingOnly_range_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "atcFileInfosMatchingRelativePath:pendingOnly:range:error:");
}

id objc_msgSend_atcRestorableForAbsolutePath_error_domainProvider_restorableAccessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "atcRestorableForAbsolutePath:error:domainProvider:restorableAccessor:");
}

id objc_msgSend_atcRestorePlansForAbsolutePaths_domainProvider_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "atcRestorePlansForAbsolutePaths:domainProvider:error:");
}

id objc_msgSend_atomic(void *a1, const char *a2, ...)
{
  return _[a1 atomic];
}

id objc_msgSend_attemptSummary(void *a1, const char *a2, ...)
{
  return _[a1 attemptSummary];
}

id objc_msgSend_attributeDataHashWithAttributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeDataHashWithAttributes:error:");
}

id objc_msgSend_attributeDataTruncatedHashWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeDataTruncatedHashWithError:");
}

id objc_msgSend_attributeDataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeDataWithError:");
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _[a1 attributes];
}

id objc_msgSend_attributesForFD_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesForFD:error:");
}

id objc_msgSend_attributesForPathFSR_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesForPathFSR:error:");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_authKitAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authKitAccountWithAltDSID:");
}

id objc_msgSend_authPromptReason(void *a1, const char *a2, ...)
{
  return _[a1 authPromptReason];
}

id objc_msgSend_authToken(void *a1, const char *a2, ...)
{
  return _[a1 authToken];
}

id objc_msgSend_authenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithContext:completion:");
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return _[a1 authenticationMethod];
}

id objc_msgSend_autoBackupOnCellularAllowed(void *a1, const char *a2, ...)
{
  return _[a1 autoBackupOnCellularAllowed];
}

id objc_msgSend_automaticallyRetryNetworkFailures(void *a1, const char *a2, ...)
{
  return _[a1 automaticallyRetryNetworkFailures];
}

id objc_msgSend_backUpFPFSDatabaseManifestForUserVolume_snapshotMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backUpFPFSDatabaseManifestForUserVolume:snapshotMountPoint:");
}

id objc_msgSend_backUpUserURL_outputUserURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backUpUserURL:outputUserURL:completionHandler:");
}

id objc_msgSend_backUpWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backUpWithCompletionBlock:");
}

id objc_msgSend_backUpiCloudDriveDatabaseManifestForUserVolume_snapshotMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backUpiCloudDriveDatabaseManifestForUserVolume:snapshotMountPoint:");
}

id objc_msgSend_backgroundAppGroupRestoreModeWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundAppGroupRestoreModeWithBundleID:");
}

id objc_msgSend_backgroundAppPluginRestoreModeWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundAppPluginRestoreModeWithBundleID:");
}

id objc_msgSend_backgroundAppRestoreModeWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundAppRestoreModeWithBundleID:");
}

id objc_msgSend_backgroundAppRestoreModeWithBundleID_errorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundAppRestoreModeWithBundleID:errorCode:");
}

id objc_msgSend_backgroundContainerRestoreModeWithContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundContainerRestoreModeWithContainer:");
}

id objc_msgSend_backgroundDataSeparatedAppRestoreModeWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundDataSeparatedAppRestoreModeWithBundleID:");
}

id objc_msgSend_backgroundFileRestoreModeWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundFileRestoreModeWithPath:");
}

id objc_msgSend_backgroundFilesRestoreModeWithPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundFilesRestoreModeWithPaths:");
}

id objc_msgSend_backgroundRestorableFileCount(void *a1, const char *a2, ...)
{
  return _[a1 backgroundRestorableFileCount];
}

id objc_msgSend_backgroundRestorableSize(void *a1, const char *a2, ...)
{
  return _[a1 backgroundRestorableSize];
}

id objc_msgSend_backgroundRestoreInfoWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundRestoreInfoWithAccount:");
}

id objc_msgSend_backgroundRestoreProgressMonitor(void *a1, const char *a2, ...)
{
  return _[a1 backgroundRestoreProgressMonitor];
}

id objc_msgSend_backgroundRestoreProgressQueue(void *a1, const char *a2, ...)
{
  return _[a1 backgroundRestoreProgressQueue];
}

id objc_msgSend_backgroundRestoreVerificationStatus(void *a1, const char *a2, ...)
{
  return _[a1 backgroundRestoreVerificationStatus];
}

id objc_msgSend_backgroundVerificationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 backgroundVerificationEnabled];
}

id objc_msgSend_backingUpSQLiteFileCopyAtPath_temporaryPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backingUpSQLiteFileCopyAtPath:temporaryPath:");
}

id objc_msgSend_backsUpPrimaryAccount(void *a1, const char *a2, ...)
{
  return _[a1 backsUpPrimaryAccount];
}

id objc_msgSend_backup(void *a1, const char *a2, ...)
{
  return _[a1 backup];
}

id objc_msgSend_backupActivityIsRunnable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupActivityIsRunnable:");
}

id objc_msgSend_backupAfterPreflight(void *a1, const char *a2, ...)
{
  return _[a1 backupAfterPreflight];
}

id objc_msgSend_backupAnnotationXattrKey(void *a1, const char *a2, ...)
{
  return _[a1 backupAnnotationXattrKey];
}

id objc_msgSend_backupAttemptCount(void *a1, const char *a2, ...)
{
  return _[a1 backupAttemptCount];
}

id objc_msgSend_backupByMergingMBSBackup_device_snapshots_filterSnapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupByMergingMBSBackup:device:snapshots:filterSnapshots:");
}

id objc_msgSend_backupDirectoryCount(void *a1, const char *a2, ...)
{
  return _[a1 backupDirectoryCount];
}

id objc_msgSend_backupEnabled(void *a1, const char *a2, ...)
{
  return _[a1 backupEnabled];
}

id objc_msgSend_backupEnded(void *a1, const char *a2, ...)
{
  return _[a1 backupEnded];
}

id objc_msgSend_backupEngineWithSettingsContext_debugContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupEngineWithSettingsContext:debugContext:");
}

id objc_msgSend_backupFileCount(void *a1, const char *a2, ...)
{
  return _[a1 backupFileCount];
}

id objc_msgSend_backupForUDID_lastModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupForUDID:lastModified:");
}

id objc_msgSend_backupForUDID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupForUDID:lastModified:error:");
}

id objc_msgSend_backupFromMBSBackup_filterSnapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupFromMBSBackup:filterSnapshots:");
}

id objc_msgSend_backupOnCellularEnabled(void *a1, const char *a2, ...)
{
  return _[a1 backupOnCellularEnabled];
}

id objc_msgSend_backupOnCellularSupport(void *a1, const char *a2, ...)
{
  return _[a1 backupOnCellularSupport];
}

id objc_msgSend_backupOnWiFiWithDAS(void *a1, const char *a2, ...)
{
  return _[a1 backupOnWiFiWithDAS];
}

id objc_msgSend_backupOperationJournalWithBatchSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupOperationJournalWithBatchSize:");
}

id objc_msgSend_backupOperationWithType_domain_fileID_path_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupOperationWithType:domain:fileID:path:size:");
}

id objc_msgSend_backupOperationWithType_domain_fileID_path_size_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupOperationWithType:domain:fileID:path:size:flags:");
}

id objc_msgSend_backupOptions(void *a1, const char *a2, ...)
{
  return _[a1 backupOptions];
}

id objc_msgSend_backupPathsToFailVerifyingRegex(void *a1, const char *a2, ...)
{
  return _[a1 backupPathsToFailVerifyingRegex];
}

id objc_msgSend_backupPolicy(void *a1, const char *a2, ...)
{
  return _[a1 backupPolicy];
}

id objc_msgSend_backupProperties(void *a1, const char *a2, ...)
{
  return _[a1 backupProperties];
}

id objc_msgSend_backupReason(void *a1, const char *a2, ...)
{
  return _[a1 backupReason];
}

id objc_msgSend_backupState(void *a1, const char *a2, ...)
{
  return _[a1 backupState];
}

id objc_msgSend_backupStateDescription(void *a1, const char *a2, ...)
{
  return _[a1 backupStateDescription];
}

id objc_msgSend_backupStateInfoForInitialMegaBackup_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupStateInfoForInitialMegaBackup:account:");
}

id objc_msgSend_backupStateName(void *a1, const char *a2, ...)
{
  return _[a1 backupStateName];
}

id objc_msgSend_backupStateWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupStateWithString:");
}

id objc_msgSend_backupStatusInfo_backupUDID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupStatusInfo:backupUDID:error:");
}

id objc_msgSend_backupSymbolicLinkTarget(void *a1, const char *a2, ...)
{
  return _[a1 backupSymbolicLinkTarget];
}

id objc_msgSend_backupToCloudImageName(void *a1, const char *a2, ...)
{
  return _[a1 backupToCloudImageName];
}

id objc_msgSend_backupTotalSize(void *a1, const char *a2, ...)
{
  return _[a1 backupTotalSize];
}

id objc_msgSend_backupType(void *a1, const char *a2, ...)
{
  return _[a1 backupType];
}

id objc_msgSend_backupUDID(void *a1, const char *a2, ...)
{
  return _[a1 backupUDID];
}

id objc_msgSend_backupUDIDAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupUDIDAtIndex:");
}

id objc_msgSend_backupUDIDForPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupUDIDForPath:");
}

id objc_msgSend_backupUDIDs(void *a1, const char *a2, ...)
{
  return _[a1 backupUDIDs];
}

id objc_msgSend_backupUDIDsCount(void *a1, const char *a2, ...)
{
  return _[a1 backupUDIDsCount];
}

id objc_msgSend_backupUUID(void *a1, const char *a2, ...)
{
  return _[a1 backupUUID];
}

id objc_msgSend_backupVerificationEnabledForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupVerificationEnabledForAccount:");
}

id objc_msgSend_backupVolumeUUID(void *a1, const char *a2, ...)
{
  return _[a1 backupVolumeUUID];
}

id objc_msgSend_backupsDisabledFromAnotherDevice(void *a1, const char *a2, ...)
{
  return _[a1 backupsDisabledFromAnotherDevice];
}

id objc_msgSend_backupsDisabledFromAnotherDeviceForUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupsDisabledFromAnotherDeviceForUUID:");
}

id objc_msgSend_bagID(void *a1, const char *a2, ...)
{
  return _[a1 bagID];
}

id objc_msgSend_balanceForBudgetWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "balanceForBudgetWithName:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseFollowupItem(void *a1, const char *a2, ...)
{
  return _[a1 baseFollowupItem];
}

id objc_msgSend_baseRecordID(void *a1, const char *a2, ...)
{
  return _[a1 baseRecordID];
}

id objc_msgSend_baseRecordIDForDomain_commitID_hmacKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseRecordIDForDomain:commitID:hmacKey:");
}

id objc_msgSend_baseRecordIDString(void *a1, const char *a2, ...)
{
  return _[a1 baseRecordIDString];
}

id objc_msgSend_basicFileHandleWithPath_flags_mode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "basicFileHandleWithPath:flags:mode:error:");
}

id objc_msgSend_batch(void *a1, const char *a2, ...)
{
  return _[a1 batch];
}

id objc_msgSend_batchCompletion(void *a1, const char *a2, ...)
{
  return _[a1 batchCompletion];
}

id objc_msgSend_batchOperationWithFilePaths_serviceManager_delegateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchOperationWithFilePaths:serviceManager:delegateContext:");
}

id objc_msgSend_batchOperationWithFilePaths_serviceManager_delegateContext_batchCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchOperationWithFilePaths:serviceManager:delegateContext:batchCompletion:");
}

id objc_msgSend_batchQueues(void *a1, const char *a2, ...)
{
  return _[a1 batchQueues];
}

id objc_msgSend_batchRestoreOps(void *a1, const char *a2, ...)
{
  return _[a1 batchRestoreOps];
}

id objc_msgSend_batchWithCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchWithCache:");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_beginBatch(void *a1, const char *a2, ...)
{
  return _[a1 beginBatch];
}

id objc_msgSend_beginPerforming(void *a1, const char *a2, ...)
{
  return _[a1 beginPerforming];
}

id objc_msgSend_beginPrebuddyBackupWithAccount_connection_fromManualSignal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginPrebuddyBackupWithAccount:connection:fromManualSignal:");
}

id objc_msgSend_beginStageWithMinProgress_maxProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginStageWithMinProgress:maxProgress:");
}

id objc_msgSend_beginTranscriptionForVolumeUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTranscriptionForVolumeUUID:error:");
}

id objc_msgSend_bindBlob_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindBlob:atIndex:");
}

id objc_msgSend_bindInt64_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindInt64:atIndex:");
}

id objc_msgSend_bindInt_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindInt:atIndex:");
}

id objc_msgSend_bindInteger_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindInteger:atIndex:");
}

id objc_msgSend_bindText_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindText:atIndex:");
}

id objc_msgSend_birth(void *a1, const char *a2, ...)
{
  return _[a1 birth];
}

id objc_msgSend_birthDate(void *a1, const char *a2, ...)
{
  return _[a1 birthDate];
}

id objc_msgSend_blobColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blobColumn:");
}

id objc_msgSend_block(void *a1, const char *a2, ...)
{
  return _[a1 block];
}

id objc_msgSend_body(void *a1, const char *a2, ...)
{
  return _[a1 body];
}

id objc_msgSend_BOOLAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLAtIndex:");
}

id objc_msgSend_BOOLForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForName:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_boostBackgroundRestoreWithAccount_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boostBackgroundRestoreWithAccount:completionHandler:");
}

id objc_msgSend_broadcast(void *a1, const char *a2, ...)
{
  return _[a1 broadcast];
}

id objc_msgSend_buddySetupState(void *a1, const char *a2, ...)
{
  return _[a1 buddySetupState];
}

id objc_msgSend_buddyStashData(void *a1, const char *a2, ...)
{
  return _[a1 buddyStashData];
}

id objc_msgSend_buildIndexFromDatabaseIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 buildIndexFromDatabaseIfNeeded];
}

id objc_msgSend_buildVersion(void *a1, const char *a2, ...)
{
  return _[a1 buildVersion];
}

id objc_msgSend_bundleContainerURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleContainerURL];
}

id objc_msgSend_bundleDir(void *a1, const char *a2, ...)
{
  return _[a1 bundleDir];
}

id objc_msgSend_bundleExecutable(void *a1, const char *a2, ...)
{
  return _[a1 bundleExecutable];
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return _[a1 bundleID];
}

id objc_msgSend_bundleIDs(void *a1, const char *a2, ...)
{
  return _[a1 bundleIDs];
}

id objc_msgSend_bundleIDsNotToBackUp(void *a1, const char *a2, ...)
{
  return _[a1 bundleIDsNotToBackUp];
}

id objc_msgSend_bundleIDsToScan(void *a1, const char *a2, ...)
{
  return _[a1 bundleIDsToScan];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleVersion(void *a1, const char *a2, ...)
{
  return _[a1 bundleVersion];
}

id objc_msgSend_button(void *a1, const char *a2, ...)
{
  return _[a1 button];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_bytesDownloaded(void *a1, const char *a2, ...)
{
  return _[a1 bytesDownloaded];
}

id objc_msgSend_bytesRemaining(void *a1, const char *a2, ...)
{
  return _[a1 bytesRemaining];
}

id objc_msgSend_bytesTransferred(void *a1, const char *a2, ...)
{
  return _[a1 bytesTransferred];
}

id objc_msgSend_bytesUploaded(void *a1, const char *a2, ...)
{
  return _[a1 bytesUploaded];
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cache(void *a1, const char *a2, ...)
{
  return _[a1 cache];
}

id objc_msgSend_cacheDeleteRequest(void *a1, const char *a2, ...)
{
  return _[a1 cacheDeleteRequest];
}

id objc_msgSend_cacheDeleteRequests(void *a1, const char *a2, ...)
{
  return _[a1 cacheDeleteRequests];
}

id objc_msgSend_cacheDirectory(void *a1, const char *a2, ...)
{
  return _[a1 cacheDirectory];
}

id objc_msgSend_cacheOnlySnapshotCount(void *a1, const char *a2, ...)
{
  return _[a1 cacheOnlySnapshotCount];
}

id objc_msgSend_cachePath(void *a1, const char *a2, ...)
{
  return _[a1 cachePath];
}

id objc_msgSend_cacheRefreshSummary(void *a1, const char *a2, ...)
{
  return _[a1 cacheRefreshSummary];
}

id objc_msgSend_cacheSize(void *a1, const char *a2, ...)
{
  return _[a1 cacheSize];
}

id objc_msgSend_cacheTrackersByAccountIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 cacheTrackersByAccountIdentifier];
}

id objc_msgSend_cachedBackupsByUDID(void *a1, const char *a2, ...)
{
  return _[a1 cachedBackupsByUDID];
}

id objc_msgSend_cachedFileDescriptorWithSnapshotPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedFileDescriptorWithSnapshotPath:error:");
}

id objc_msgSend_cachedSnapshotCount(void *a1, const char *a2, ...)
{
  return _[a1 cachedSnapshotCount];
}

id objc_msgSend_cadence(void *a1, const char *a2, ...)
{
  return _[a1 cadence];
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _[a1 callStackSymbols];
}

id objc_msgSend_callbackQueue(void *a1, const char *a2, ...)
{
  return _[a1 callbackQueue];
}

id objc_msgSend_callbacks(void *a1, const char *a2, ...)
{
  return _[a1 callbacks];
}

id objc_msgSend_cameraRollBackupState(void *a1, const char *a2, ...)
{
  return _[a1 cameraRollBackupState];
}

id objc_msgSend_canOpenWhenLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canOpenWhenLocked:");
}

id objc_msgSend_canRestoreSystemFiles(void *a1, const char *a2, ...)
{
  return _[a1 canRestoreSystemFiles];
}

id objc_msgSend_canRetryAfterError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canRetryAfterError:");
}

id objc_msgSend_canReuseAssetsAcrossVolumeTransition_isResuming_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canReuseAssetsAcrossVolumeTransition:isResuming:error:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAndUninstallRestorerForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAndUninstallRestorerForAccount:");
}

id objc_msgSend_cancelAndUninstallRestorerForPersonaIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAndUninstallRestorerForPersonaIdentifier:");
}

id objc_msgSend_cancelApplicationRestoreWithBundleID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelApplicationRestoreWithBundleID:error:");
}

id objc_msgSend_cancelBackgroundRestoreWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelBackgroundRestoreWithAccount:");
}

id objc_msgSend_cancelBackupDuringJournalReplay(void *a1, const char *a2, ...)
{
  return _[a1 cancelBackupDuringJournalReplay];
}

id objc_msgSend_cancelBackupEngineWithError_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelBackupEngineWithError:connection:");
}

id objc_msgSend_cancelDeviceTransferWithConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDeviceTransferWithConnection:");
}

id objc_msgSend_cancelDeviceTransferWithTaskType_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDeviceTransferWithTaskType:connection:error:");
}

id objc_msgSend_cancelEnginesWithAccount_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelEnginesWithAccount:connection:");
}

id objc_msgSend_cancelError(void *a1, const char *a2, ...)
{
  return _[a1 cancelError];
}

id objc_msgSend_cancelForReason_client_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelForReason:client:error:");
}

id objc_msgSend_cancelNotificationWithIdentifier_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelNotificationWithIdentifier:account:");
}

id objc_msgSend_cancelRestoreEnginesWithReason_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelRestoreEnginesWithReason:connection:");
}

id objc_msgSend_cancelSync(void *a1, const char *a2, ...)
{
  return _[a1 cancelSync];
}

id objc_msgSend_cancelWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelWithError:");
}

id objc_msgSend_cancelWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelWithReason:");
}

id objc_msgSend_cancelWithUnderlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelWithUnderlyingError:");
}

id objc_msgSend_canceled(void *a1, const char *a2, ...)
{
  return _[a1 canceled];
}

id objc_msgSend_cancellationError(void *a1, const char *a2, ...)
{
  return _[a1 cancellationError];
}

id objc_msgSend_cancelled(void *a1, const char *a2, ...)
{
  return _[a1 cancelled];
}

id objc_msgSend_capabilities(void *a1, const char *a2, ...)
{
  return _[a1 capabilities];
}

id objc_msgSend_capitalizedString(void *a1, const char *a2, ...)
{
  return _[a1 capitalizedString];
}

id objc_msgSend_cellularAccess(void *a1, const char *a2, ...)
{
  return _[a1 cellularAccess];
}

id objc_msgSend_cellularAccessForRestoreType_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellularAccessForRestoreType:account:");
}

id objc_msgSend_cellularRadioType(void *a1, const char *a2, ...)
{
  return _[a1 cellularRadioType];
}

id objc_msgSend_cfUserNotification(void *a1, const char *a2, ...)
{
  return _[a1 cfUserNotification];
}

id objc_msgSend_changePasswordFrom_toPassword_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changePasswordFrom:toPassword:error:");
}

id objc_msgSend_changeSecretFrom_toSecret_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeSecretFrom:toSecret:error:");
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return _[a1 changeType];
}

id objc_msgSend_changeTypeForFullBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeTypeForFullBackup:");
}

id objc_msgSend_changeTypeString(void *a1, const char *a2, ...)
{
  return _[a1 changeTypeString];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_chargeToken(void *a1, const char *a2, ...)
{
  return _[a1 chargeToken];
}

id objc_msgSend_chargingType(void *a1, const char *a2, ...)
{
  return _[a1 chargingType];
}

id objc_msgSend_checkIfBackupHasKeybagWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkIfBackupHasKeybagWithUUID:");
}

id objc_msgSend_checkInBackupActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkInBackupActivity:");
}

id objc_msgSend_checkMegaBackupEligibility_deepLinkURL_backupDeviceUUID_queue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkMegaBackupEligibility:deepLinkURL:backupDeviceUUID:queue:completion:");
}

id objc_msgSend_checkWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkWithError:");
}

id objc_msgSend_checksum(void *a1, const char *a2, ...)
{
  return _[a1 checksum];
}

id objc_msgSend_checksumForManifest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checksumForManifest:error:");
}

id objc_msgSend_checksumForManifest_shouldLog_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checksumForManifest:shouldLog:error:");
}

id objc_msgSend_chunkStore(void *a1, const char *a2, ...)
{
  return _[a1 chunkStore];
}

id objc_msgSend_chunkStore_pathForItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chunkStore:pathForItemID:");
}

id objc_msgSend_chunkStoreBatch(void *a1, const char *a2, ...)
{
  return _[a1 chunkStoreBatch];
}

id objc_msgSend_chunkStoreItemWithFileID_domain_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chunkStoreItemWithFileID:domain:path:");
}

id objc_msgSend_chunkStorePath(void *a1, const char *a2, ...)
{
  return _[a1 chunkStorePath];
}

id objc_msgSend_chunkStoreURL(void *a1, const char *a2, ...)
{
  return _[a1 chunkStoreURL];
}

id objc_msgSend_ckContainer(void *a1, const char *a2, ...)
{
  return _[a1 ckContainer];
}

id objc_msgSend_ckContainerWithZoneWidePCS(void *a1, const char *a2, ...)
{
  return _[a1 ckContainerWithZoneWidePCS];
}

id objc_msgSend_ckDatabase(void *a1, const char *a2, ...)
{
  return _[a1 ckDatabase];
}

id objc_msgSend_ckDatabaseWithZoneWidePCS(void *a1, const char *a2, ...)
{
  return _[a1 ckDatabaseWithZoneWidePCS];
}

id objc_msgSend_ckOperationGroup(void *a1, const char *a2, ...)
{
  return _[a1 ckOperationGroup];
}

id objc_msgSend_ckOperationPolicy(void *a1, const char *a2, ...)
{
  return _[a1 ckOperationPolicy];
}

id objc_msgSend_ckOperationTracker(void *a1, const char *a2, ...)
{
  return _[a1 ckOperationTracker];
}

id objc_msgSend_classAFilesMissingEncryptionKeys(void *a1, const char *a2, ...)
{
  return _[a1 classAFilesMissingEncryptionKeys];
}

id objc_msgSend_classBFilesMissingEncryptionKeys(void *a1, const char *a2, ...)
{
  return _[a1 classBFilesMissingEncryptionKeys];
}

id objc_msgSend_cleanUpAfterError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUpAfterError:");
}

id objc_msgSend_cleanUpReceivedFilesDirectory(void *a1, const char *a2, ...)
{
  return _[a1 cleanUpReceivedFilesDirectory];
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return _[a1 cleanup];
}

id objc_msgSend_cleanupAfterError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupAfterError:");
}

id objc_msgSend_cleanupAfterUpload(void *a1, const char *a2, ...)
{
  return _[a1 cleanupAfterUpload];
}

id objc_msgSend_cleanupRestoreDirectoriesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupRestoreDirectoriesWithError:");
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _[a1 clear];
}

id objc_msgSend_clearAgentForDomainRestoresWithAgentDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAgentForDomainRestoresWithAgentDomain:");
}

id objc_msgSend_clearAllPendingFollowUps(void *a1, const char *a2, ...)
{
  return _[a1 clearAllPendingFollowUps];
}

id objc_msgSend_clearBackupUDIDs(void *a1, const char *a2, ...)
{
  return _[a1 clearBackupUDIDs];
}

id objc_msgSend_clearCurrentRestoreSessionWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCurrentRestoreSessionWithAccount:");
}

id objc_msgSend_clearDidInformUserWithNotificationIdentifier_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDidInformUserWithNotificationIdentifier:account:");
}

id objc_msgSend_clearDomainsFromPreviousSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDomainsFromPreviousSnapshot:");
}

id objc_msgSend_clearExtendedAttributes(void *a1, const char *a2, ...)
{
  return _[a1 clearExtendedAttributes];
}

id objc_msgSend_clearKeys(void *a1, const char *a2, ...)
{
  return _[a1 clearKeys];
}

id objc_msgSend_clearKeysAndValues(void *a1, const char *a2, ...)
{
  return _[a1 clearKeysAndValues];
}

id objc_msgSend_clearLockWithAccount_pluginFields_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLockWithAccount:pluginFields:error:");
}

id objc_msgSend_clearMessages(void *a1, const char *a2, ...)
{
  return _[a1 clearMessages];
}

id objc_msgSend_clearNilBackupDateFetchDateForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearNilBackupDateFetchDateForAccount:");
}

id objc_msgSend_clearPendingFollowUpItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPendingFollowUpItems:");
}

id objc_msgSend_clearPendingFollowUpItemsWithUniqueIdentifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPendingFollowUpItemsWithUniqueIdentifiers:error:");
}

id objc_msgSend_clearPendingFollowUpsNotBelongingToAccounts_excluding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPendingFollowUpsNotBelongingToAccounts:excluding:");
}

id objc_msgSend_clearPendingFollowUpsWithAccount_identifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPendingFollowUpsWithAccount:identifiers:");
}

id objc_msgSend_clearPendingFollowUpsWithAccountIdentifier_identifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPendingFollowUpsWithAccountIdentifier:identifiers:");
}

id objc_msgSend_clearPendingSnapshotAndRebuildFileChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPendingSnapshotAndRebuildFileChanges:");
}

id objc_msgSend_clearPendingSnapshotForBackupUUID_enabledState_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPendingSnapshotForBackupUUID:enabledState:account:error:");
}

id objc_msgSend_clearPrebuddyWithAccount_accountSignOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPrebuddyWithAccount:accountSignOut:");
}

id objc_msgSend_clearRestoreSession(void *a1, const char *a2, ...)
{
  return _[a1 clearRestoreSession];
}

id objc_msgSend_clearRestoreSessionWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearRestoreSessionWithAccount:");
}

id objc_msgSend_clearSettings(void *a1, const char *a2, ...)
{
  return _[a1 clearSettings];
}

id objc_msgSend_clearSnapshots(void *a1, const char *a2, ...)
{
  return _[a1 clearSnapshots];
}

id objc_msgSend_clientForDataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientForDataclass:");
}

id objc_msgSend_clientInfoHeader(void *a1, const char *a2, ...)
{
  return _[a1 clientInfoHeader];
}

id objc_msgSend_cloneID(void *a1, const char *a2, ...)
{
  return _[a1 cloneID];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_close_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "close:");
}

id objc_msgSend_closeAndRemoveFileWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeAndRemoveFileWithError:");
}

id objc_msgSend_closeRestorePlanForAccount_snapshotUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeRestorePlanForAccount:snapshotUUID:error:");
}

id objc_msgSend_closeRestorePlanWithPersona_snapshotUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeRestorePlanWithPersona:snapshotUUID:error:");
}

id objc_msgSend_closeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeWithError:");
}

id objc_msgSend_cloudFormatInfo(void *a1, const char *a2, ...)
{
  return _[a1 cloudFormatInfo];
}

id objc_msgSend_cloudKitContainerName(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitContainerName];
}

id objc_msgSend_cloudKitMetrics(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitMetrics];
}

id objc_msgSend_cloudPhotosSyncedMarkerPath(void *a1, const char *a2, ...)
{
  return _[a1 cloudPhotosSyncedMarkerPath];
}

id objc_msgSend_cloudSize(void *a1, const char *a2, ...)
{
  return _[a1 cloudSize];
}

id objc_msgSend_cloudSyncClient(void *a1, const char *a2, ...)
{
  return _[a1 cloudSyncClient];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_codeForErrno_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "codeForErrno:");
}

id objc_msgSend_codeForNSError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "codeForNSError:");
}

id objc_msgSend_codeWithReturnCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "codeWithReturnCode:");
}

id objc_msgSend_columnCount(void *a1, const char *a2, ...)
{
  return _[a1 columnCount];
}

id objc_msgSend_columns(void *a1, const char *a2, ...)
{
  return _[a1 columns];
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _[a1 commit];
}

id objc_msgSend_commitFilePutReceipts_backupUDID_snapshotID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitFilePutReceipts:backupUDID:snapshotID:lastModified:error:");
}

id objc_msgSend_commitID(void *a1, const char *a2, ...)
{
  return _[a1 commitID];
}

id objc_msgSend_commitSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitSnapshot:");
}

id objc_msgSend_commitSnapshotForID_backupUDID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitSnapshotForID:backupUDID:lastModified:error:");
}

id objc_msgSend_commitUploadedAssetsIntoPendingFileList_domainName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitUploadedAssetsIntoPendingFileList:domainName:error:");
}

id objc_msgSend_committed(void *a1, const char *a2, ...)
{
  return _[a1 committed];
}

id objc_msgSend_committedManifestContainsDomain_relativePath_pendingManifestID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "committedManifestContainsDomain:relativePath:pendingManifestID:error:");
}

id objc_msgSend_compactSQLiteDatabaseAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactSQLiteDatabaseAtPath:toPath:error:");
}

id objc_msgSend_compactedSQLiteFileCount(void *a1, const char *a2, ...)
{
  return _[a1 compactedSQLiteFileCount];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_compareToRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compareToRecordZoneID:");
}

id objc_msgSend_compatibilityDelegate(void *a1, const char *a2, ...)
{
  return _[a1 compatibilityDelegate];
}

id objc_msgSend_compatibilityObject(void *a1, const char *a2, ...)
{
  return _[a1 compatibilityObject];
}

id objc_msgSend_completedItemCount(void *a1, const char *a2, ...)
{
  return _[a1 completedItemCount];
}

id objc_msgSend_completion(void *a1, const char *a2, ...)
{
  return _[a1 completion];
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _[a1 completionBlock];
}

id objc_msgSend_completionError(void *a1, const char *a2, ...)
{
  return _[a1 completionError];
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return _[a1 completionHandler];
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_components_fromDate_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:toDate:options:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_compressedSQLiteFileCount(void *a1, const char *a2, ...)
{
  return _[a1 compressedSQLiteFileCount];
}

id objc_msgSend_compressionMethod(void *a1, const char *a2, ...)
{
  return _[a1 compressionMethod];
}

id objc_msgSend_computeAssetRecordIDChecksumWithPrefix_checksum_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeAssetRecordIDChecksumWithPrefix:checksum:error:");
}

id objc_msgSend_computeSignatureRetainCountsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeSignatureRetainCountsWithError:");
}

id objc_msgSend_computeStatsOnL28BackupHistory(void *a1, const char *a2, ...)
{
  return _[a1 computeStatsOnL28BackupHistory];
}

id objc_msgSend_conditions(void *a1, const char *a2, ...)
{
  return _[a1 conditions];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configurationWithPropertyList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithPropertyList:");
}

id objc_msgSend_configurationWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithURL:error:");
}

id objc_msgSend_confirmFileWasModifiedOnDisk(void *a1, const char *a2, ...)
{
  return _[a1 confirmFileWasModifiedOnDisk];
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connect(void *a1, const char *a2, ...)
{
  return _[a1 connect];
}

id objc_msgSend_connectSemaphore(void *a1, const char *a2, ...)
{
  return _[a1 connectSemaphore];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_connection_didFinishDeviceTransferWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didFinishDeviceTransferWithError:");
}

id objc_msgSend_connection_didUpdateDeviceTransferConnectionInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didUpdateDeviceTransferConnectionInfo:");
}

id objc_msgSend_connection_didUpdateDeviceTransferProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didUpdateDeviceTransferProgress:");
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return _[a1 connectionState];
}

id objc_msgSend_connectionType(void *a1, const char *a2, ...)
{
  return _[a1 connectionType];
}

id objc_msgSend_connectionTypeFromLinkType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionTypeFromLinkType:");
}

id objc_msgSend_connectionWithRequest_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionWithRequest:properties:");
}

id objc_msgSend_connectionsQueue(void *a1, const char *a2, ...)
{
  return _[a1 connectionsQueue];
}

id objc_msgSend_consecutiveRetryCount(void *a1, const char *a2, ...)
{
  return _[a1 consecutiveRetryCount];
}

id objc_msgSend_consecutiveRetryCountWhenConnected(void *a1, const char *a2, ...)
{
  return _[a1 consecutiveRetryCountWhenConnected];
}

id objc_msgSend_consecutiveRetryCountWhenDisconnected(void *a1, const char *a2, ...)
{
  return _[a1 consecutiveRetryCountWhenDisconnected];
}

id objc_msgSend_consolidateDomainName_hmacKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consolidateDomainName:hmacKey:");
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return _[a1 container];
}

id objc_msgSend_containerDir(void *a1, const char *a2, ...)
{
  return _[a1 containerDir];
}

id objc_msgSend_containerID(void *a1, const char *a2, ...)
{
  return _[a1 containerID];
}

id objc_msgSend_containerIDWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerIDWithName:");
}

id objc_msgSend_containerType(void *a1, const char *a2, ...)
{
  return _[a1 containerType];
}

id objc_msgSend_containerTypeString(void *a1, const char *a2, ...)
{
  return _[a1 containerTypeString];
}

id objc_msgSend_containerTypeWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerTypeWithName:");
}

id objc_msgSend_containerWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithIdentifier:");
}

id objc_msgSend_containerWithPropertyList_volumeMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithPropertyList:volumeMountPoint:");
}

id objc_msgSend_containers(void *a1, const char *a2, ...)
{
  return _[a1 containers];
}

id objc_msgSend_containersByPersonaIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 containersByPersonaIdentifier];
}

id objc_msgSend_containingBundleRecord(void *a1, const char *a2, ...)
{
  return _[a1 containingBundleRecord];
}

id objc_msgSend_containsAsset_alreadyPresentOut_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsAsset:alreadyPresentOut:error:");
}

id objc_msgSend_containsDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsDomainName:");
}

id objc_msgSend_containsIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsIndex:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsPlaceholderForFileID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsPlaceholderForFileID:error:");
}

id objc_msgSend_containsRegularFileForFileID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsRegularFileForFileID:error:");
}

id objc_msgSend_containsRestoreFilesForRestoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsRestoreFilesForRestoreID:");
}

id objc_msgSend_containsRestoreFilesWithState_forRestoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsRestoreFilesWithState:forRestoreID:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_containsValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsValueForKey:");
}

id objc_msgSend_contentCompressionMethod(void *a1, const char *a2, ...)
{
  return _[a1 contentCompressionMethod];
}

id objc_msgSend_contentEncodingMethod(void *a1, const char *a2, ...)
{
  return _[a1 contentEncodingMethod];
}

id objc_msgSend_contents(void *a1, const char *a2, ...)
{
  return _[a1 contents];
}

id objc_msgSend_contentsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsAtPath:");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_contentsOfDirectoryAtPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtPath:options:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_controlWithArguments_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlWithArguments:error:");
}

id objc_msgSend_coordinatorForAppWithBundleID_withClientID_createIfNotExisting_created_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinatorForAppWithBundleID:withClientID:createIfNotExisting:created:error:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyAssetsToUploadFromPendingFileList_previousFileListPath_domainName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAssetsToUploadFromPendingFileList:previousFileListPath:domainName:error:");
}

id objc_msgSend_copyCurrentPersonaContextWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCurrentPersonaContextWithError:");
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copyItemAtPath_toPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtPath:toPath:options:error:");
}

id objc_msgSend_copyPlaceholderIPAsForAppInstallationExcluding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPlaceholderIPAsForAppInstallationExcluding:error:");
}

id objc_msgSend_copyPreferencesValueForKey_class_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPreferencesValueForKey:class:");
}

id objc_msgSend_copySQLiteFileAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copySQLiteFileAtPath:toPath:error:");
}

id objc_msgSend_copySQLiteFileAtPath_toPath_timeout_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copySQLiteFileAtPath:toPath:timeout:error:");
}

id objc_msgSend_copyTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyTo:");
}

id objc_msgSend_copyWithVolumeMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithVolumeMountPoint:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_couldRetryError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "couldRetryError:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countAssetRecordsToCommitForDomain_addedOrModifiedCount_deletedCount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countAssetRecordsToCommitForDomain:addedOrModifiedCount:deletedCount:error:");
}

id objc_msgSend_countAssetsPendingUploadForDomainName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countAssetsPendingUploadForDomainName:error:");
}

id objc_msgSend_countAssetsWithNilSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countAssetsWithNilSignature:");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countCameraRollQuota(void *a1, const char *a2, ...)
{
  return _[a1 countCameraRollQuota];
}

id objc_msgSend_countCameraRollQuotaForBackupUDID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countCameraRollQuotaForBackupUDID:error:");
}

id objc_msgSend_countDomainHmacForManifest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countDomainHmacForManifest:error:");
}

id objc_msgSend_countFilesForManifest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countFilesForManifest:error:");
}

id objc_msgSend_countFilesForManifestID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countFilesForManifestID:error:");
}

id objc_msgSend_countFilesMarkedAsDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countFilesMarkedAsDeleted:");
}

id objc_msgSend_countFilesMissingEncryptionKeysWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countFilesMissingEncryptionKeysWithError:");
}

id objc_msgSend_countForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForType:");
}

id objc_msgSend_countManifestPagesForManifestID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countManifestPagesForManifestID:error:");
}

id objc_msgSend_countManifestsForSnapshot_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countManifestsForSnapshot:error:");
}

id objc_msgSend_countMissedEncryptionKeysWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countMissedEncryptionKeysWithError:");
}

id objc_msgSend_countOfRestoreFailuresForDataclass_assetType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfRestoreFailuresForDataclass:assetType:");
}

id objc_msgSend_countRestoreFilesWithSourceDeviceInode_signature_volumeType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countRestoreFilesWithSourceDeviceInode:signature:volumeType:error:");
}

id objc_msgSend_countUploadedFileWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countUploadedFileWithSize:");
}

id objc_msgSend_countsOfRestorablesByState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countsOfRestorablesByState:");
}

id objc_msgSend_createAndMountSnapshotForVolume_name_atFirstAvailableMountPoint_error_cancelationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndMountSnapshotForVolume:name:atFirstAvailableMountPoint:error:cancelationHandler:");
}

id objc_msgSend_createChunkStoreWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createChunkStoreWithPath:");
}

id objc_msgSend_createDirectories_destinationBasePath_destinationRpath_permissions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectories:destinationBasePath:destinationRpath:permissions:error:");
}

id objc_msgSend_createDirectoryAtPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:options:error:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createKeySet_forBackupUDID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createKeySet:forBackupUDID:lastModified:error:");
}

id objc_msgSend_createManager(void *a1, const char *a2, ...)
{
  return _[a1 createManager];
}

id objc_msgSend_createOrLoadForPersona_outLoadType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createOrLoadForPersona:outLoadType:error:");
}

id objc_msgSend_createPathInDirectory_fileName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPathInDirectory:fileName:");
}

id objc_msgSend_createPersonaContextForBackgroundProcessingWithPersonaUniqueString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPersonaContextForBackgroundProcessingWithPersonaUniqueString:");
}

id objc_msgSend_createRestoreDirectoriesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRestoreDirectoriesWithError:");
}

id objc_msgSend_createRestorePlanWithPersona_snapshotUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRestorePlanWithPersona:snapshotUUID:error:");
}

id objc_msgSend_createSafeHarborForContainer_withPersona_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSafeHarborForContainer:withPersona:error:");
}

id objc_msgSend_createSafeHarborForContainer_withPersona_usingIntermediateRestoreDir_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSafeHarborForContainer:withPersona:usingIntermediateRestoreDir:error:");
}

id objc_msgSend_createSnapshot_backupUDID_lastModified_error_snapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSnapshot:backupUDID:lastModified:error:snapshotID:");
}

id objc_msgSend_createSnapshotForVolume_name_error_cancelationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSnapshotForVolume:name:error:cancelationHandler:");
}

id objc_msgSend_created(void *a1, const char *a2, ...)
{
  return _[a1 created];
}

id objc_msgSend_createdNewOTAKeybag(void *a1, const char *a2, ...)
{
  return _[a1 createdNewOTAKeybag];
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return _[a1 creationDate];
}

id objc_msgSend_credential(void *a1, const char *a2, ...)
{
  return _[a1 credential];
}

id objc_msgSend_criteria(void *a1, const char *a2, ...)
{
  return _[a1 criteria];
}

id objc_msgSend_crossVolumeCopyFrom_toDestination_shouldDeleteSource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crossVolumeCopyFrom:toDestination:shouldDeleteSource:error:");
}

id objc_msgSend_crossVolumeMoveFrom_intoDir_toFileNamed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crossVolumeMoveFrom:intoDir:toFileNamed:error:");
}

id objc_msgSend_cumulativeAssetCount(void *a1, const char *a2, ...)
{
  return _[a1 cumulativeAssetCount];
}

id objc_msgSend_cumulativeDirectoryCount(void *a1, const char *a2, ...)
{
  return _[a1 cumulativeDirectoryCount];
}

id objc_msgSend_cumulativeEmptyRegCount(void *a1, const char *a2, ...)
{
  return _[a1 cumulativeEmptyRegCount];
}

id objc_msgSend_cumulativeRegCount(void *a1, const char *a2, ...)
{
  return _[a1 cumulativeRegCount];
}

id objc_msgSend_cumulativeSymlinkCount(void *a1, const char *a2, ...)
{
  return _[a1 cumulativeSymlinkCount];
}

id objc_msgSend_current(void *a1, const char *a2, ...)
{
  return _[a1 current];
}

id objc_msgSend_currentBatchAssetSize(void *a1, const char *a2, ...)
{
  return _[a1 currentBatchAssetSize];
}

id objc_msgSend_currentBatchCount(void *a1, const char *a2, ...)
{
  return _[a1 currentBatchCount];
}

id objc_msgSend_currentBatchSize(void *a1, const char *a2, ...)
{
  return _[a1 currentBatchSize];
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentFileList(void *a1, const char *a2, ...)
{
  return _[a1 currentFileList];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentPersona(void *a1, const char *a2, ...)
{
  return _[a1 currentPersona];
}

id objc_msgSend_currentPlaceholderRestoreDirectory(void *a1, const char *a2, ...)
{
  return _[a1 currentPlaceholderRestoreDirectory];
}

id objc_msgSend_currentRestoreSessionWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentRestoreSessionWithAccount:");
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_currentSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 currentSnapshot];
}

id objc_msgSend_currentTransactionsByTask(void *a1, const char *a2, ...)
{
  return _[a1 currentTransactionsByTask];
}

id objc_msgSend_d2dTransferLargeFileBufferKilobytes(void *a1, const char *a2, ...)
{
  return _[a1 d2dTransferLargeFileBufferKilobytes];
}

id objc_msgSend_d2dTransferLargeFileMaxTasks(void *a1, const char *a2, ...)
{
  return _[a1 d2dTransferLargeFileMaxTasks];
}

id objc_msgSend_d2dTransferSmallFileMaxTasks(void *a1, const char *a2, ...)
{
  return _[a1 d2dTransferSmallFileMaxTasks];
}

id objc_msgSend_d2dTransferUSBOnly(void *a1, const char *a2, ...)
{
  return _[a1 d2dTransferUSBOnly];
}

id objc_msgSend_d2dTransferUseCompression(void *a1, const char *a2, ...)
{
  return _[a1 d2dTransferUseCompression];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataAtIndex:");
}

id objc_msgSend_dataAtPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataAtPath:options:error:");
}

id objc_msgSend_dataClass(void *a1, const char *a2, ...)
{
  return _[a1 dataClass];
}

id objc_msgSend_dataClassesRemaining(void *a1, const char *a2, ...)
{
  return _[a1 dataClassesRemaining];
}

id objc_msgSend_dataContainerURL(void *a1, const char *a2, ...)
{
  return _[a1 dataContainerURL];
}

id objc_msgSend_dataFromPropertyList_format_errorDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataFromPropertyList:format:errorDescription:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:options:error:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithError:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithLength:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_databaseIndex(void *a1, const char *a2, ...)
{
  return _[a1 databaseIndex];
}

id objc_msgSend_databaseManager(void *a1, const char *a2, ...)
{
  return _[a1 databaseManager];
}

id objc_msgSend_databaseUUID(void *a1, const char *a2, ...)
{
  return _[a1 databaseUUID];
}

id objc_msgSend_databaseWithDrive_path_domainManager_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseWithDrive:path:domainManager:error:");
}

id objc_msgSend_dataclass(void *a1, const char *a2, ...)
{
  return _[a1 dataclass];
}

id objc_msgSend_dataclassActionsForAccountSave_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataclassActionsForAccountSave:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateByAddingUnit_value_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingUnit:value:toDate:options:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateOfLastBackup(void *a1, const char *a2, ...)
{
  return _[a1 dateOfLastBackup];
}

id objc_msgSend_dateOfLastBackupFromLockdownPlist(void *a1, const char *a2, ...)
{
  return _[a1 dateOfLastBackupFromLockdownPlist];
}

id objc_msgSend_dateOfLastBackupWithAccount_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateOfLastBackupWithAccount:connection:error:");
}

id objc_msgSend_dateOfLastDomainListUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateOfLastDomainListUpdate:");
}

id objc_msgSend_dateOfLastSizeEstimate(void *a1, const char *a2, ...)
{
  return _[a1 dateOfLastSizeEstimate];
}

id objc_msgSend_dateOfLastUnlockSeenByDaemon(void *a1, const char *a2, ...)
{
  return _[a1 dateOfLastUnlockSeenByDaemon];
}

id objc_msgSend_dateOfNextScheduledBackupWithAccount_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateOfNextScheduledBackupWithAccount:connection:error:");
}

id objc_msgSend_dateOfThermalThrottleStart(void *a1, const char *a2, ...)
{
  return _[a1 dateOfThermalThrottleStart];
}

id objc_msgSend_datePlacedInSafeHarbor(void *a1, const char *a2, ...)
{
  return _[a1 datePlacedInSafeHarbor];
}

id objc_msgSend_dateSkipped(void *a1, const char *a2, ...)
{
  return _[a1 dateSkipped];
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return _[a1 day];
}

id objc_msgSend_db(void *a1, const char *a2, ...)
{
  return _[a1 db];
}

id objc_msgSend_dbHandle(void *a1, const char *a2, ...)
{
  return _[a1 dbHandle];
}

id objc_msgSend_debugContext(void *a1, const char *a2, ...)
{
  return _[a1 debugContext];
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBytes:length:");
}

id objc_msgSend_decodeData(void *a1, const char *a2, ...)
{
  return _[a1 decodeData];
}

id objc_msgSend_decodeInt16(void *a1, const char *a2, ...)
{
  return _[a1 decodeInt16];
}

id objc_msgSend_decodeInt32(void *a1, const char *a2, ...)
{
  return _[a1 decodeInt32];
}

id objc_msgSend_decodeInt32ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt32ForKey:");
}

id objc_msgSend_decodeInt64(void *a1, const char *a2, ...)
{
  return _[a1 decodeInt64];
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeInt8(void *a1, const char *a2, ...)
{
  return _[a1 decodeInt8];
}

id objc_msgSend_decodeIntForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decodeString(void *a1, const char *a2, ...)
{
  return _[a1 decodeString];
}

id objc_msgSend_decodeVersion(void *a1, const char *a2, ...)
{
  return _[a1 decodeVersion];
}

id objc_msgSend_decodeWithFileAtPath_destinationDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeWithFileAtPath:destinationDirectory:error:");
}

id objc_msgSend_decodedAssetPath(void *a1, const char *a2, ...)
{
  return _[a1 decodedAssetPath];
}

id objc_msgSend_decoderWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decoderWithData:");
}

id objc_msgSend_decodingTaskWithEncodingMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodingTaskWithEncodingMethod:");
}

id objc_msgSend_decompressAssetIntoSnapshotDirectoryRoot_commitID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decompressAssetIntoSnapshotDirectoryRoot:commitID:error:");
}

id objc_msgSend_decrementRetainCountForSignature_volumeType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decrementRetainCountForSignature:volumeType:error:");
}

id objc_msgSend_decryptFileWithPath_encryptionKey_size_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decryptFileWithPath:encryptionKey:size:error:");
}

id objc_msgSend_decryptFileWithPath_encryptionKey_size_hardwareModel_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decryptFileWithPath:encryptionKey:size:hardwareModel:error:");
}

id objc_msgSend_decryptFileWithPath_keybag_encryptionKey_size_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decryptFileWithPath:keybag:encryptionKey:size:error:");
}

id objc_msgSend_decryptString_withKey_salt_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decryptString:withKey:salt:error:");
}

id objc_msgSend_decryptedSize(void *a1, const char *a2, ...)
{
  return _[a1 decryptedSize];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultDebugContext(void *a1, const char *a2, ...)
{
  return _[a1 defaultDebugContext];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultQualityOfService(void *a1, const char *a2, ...)
{
  return _[a1 defaultQualityOfService];
}

id objc_msgSend_defaultRecordZone(void *a1, const char *a2, ...)
{
  return _[a1 defaultRecordZone];
}

id objc_msgSend_defaultSettingsContext(void *a1, const char *a2, ...)
{
  return _[a1 defaultSettingsContext];
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return _[a1 defaultStore];
}

id objc_msgSend_defaultSubdirectoriesForMBContainerType_withNestedSubdirectories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSubdirectoriesForMBContainerType:withNestedSubdirectories:");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_defaultZoneID(void *a1, const char *a2, ...)
{
  return _[a1 defaultZoneID];
}

id objc_msgSend_deferUntilAfterSetupIsDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deferUntilAfterSetupIsDone:");
}

id objc_msgSend_deferralTimer(void *a1, const char *a2, ...)
{
  return _[a1 deferralTimer];
}

id objc_msgSend_delayedRestoreTimer(void *a1, const char *a2, ...)
{
  return _[a1 delayedRestoreTimer];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_delegateContext(void *a1, const char *a2, ...)
{
  return _[a1 delegateContext];
}

id objc_msgSend_deleteAccountWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAccountWithError:");
}

id objc_msgSend_deleteAccountWithServiceAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAccountWithServiceAccount:error:");
}

id objc_msgSend_deleteAllSnapshotsForVolume_withPrefix_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllSnapshotsForVolume:withPrefix:error:");
}

id objc_msgSend_deleteAllSnapshotsForVolume_withPrefix_latestCreationDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllSnapshotsForVolume:withPrefix:latestCreationDate:error:");
}

id objc_msgSend_deleteAttempts(void *a1, const char *a2, ...)
{
  return _[a1 deleteAttempts];
}

id objc_msgSend_deleteBackupForUDID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteBackupForUDID:error:");
}

id objc_msgSend_deleteBackupUDID_disableIfCurrentDevice_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteBackupUDID:disableIfCurrentDevice:account:connection:error:");
}

id objc_msgSend_deleteCharactersInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCharactersInRange:");
}

id objc_msgSend_deleteCloudFilePendingDeleteWithFileID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCloudFilePendingDeleteWithFileID:");
}

id objc_msgSend_deleteCloudFilesPendingDelete(void *a1, const char *a2, ...)
{
  return _[a1 deleteCloudFilesPendingDelete];
}

id objc_msgSend_deleteCloudFilesPendingDeleteForManifestID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCloudFilesPendingDeleteForManifestID:");
}

id objc_msgSend_deleteDeviceWithOperationTracker_deviceUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteDeviceWithOperationTracker:deviceUUID:error:");
}

id objc_msgSend_deleteError(void *a1, const char *a2, ...)
{
  return _[a1 deleteError];
}

id objc_msgSend_deleteGroup(void *a1, const char *a2, ...)
{
  return _[a1 deleteGroup];
}

id objc_msgSend_deleteIncrementally(void *a1, const char *a2, ...)
{
  return _[a1 deleteIncrementally];
}

id objc_msgSend_deleteInfos(void *a1, const char *a2, ...)
{
  return _[a1 deleteInfos];
}

id objc_msgSend_deleteInfosByRecordID(void *a1, const char *a2, ...)
{
  return _[a1 deleteInfosByRecordID];
}

id objc_msgSend_deleteItemFromBackupUDID_snapshotID_domainName_relativePath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteItemFromBackupUDID:snapshotID:domainName:relativePath:error:");
}

id objc_msgSend_deleteItemFromDomainName_relativePath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteItemFromDomainName:relativePath:error:");
}

id objc_msgSend_deleteManifestPagesForManifestID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteManifestPagesForManifestID:");
}

id objc_msgSend_deletePendingCloudFilesWithBatchDelete_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletePendingCloudFilesWithBatchDelete:completion:");
}

id objc_msgSend_deletePendingManifestPagesWithBatchDelete_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletePendingManifestPagesWithBatchDelete:completion:");
}

id objc_msgSend_deleteRecordWithID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordWithID:completion:");
}

id objc_msgSend_deleteRecordsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordsWithCompletion:");
}

id objc_msgSend_deleteSavedFilesWithOperationTracker_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSavedFilesWithOperationTracker:completion:");
}

id objc_msgSend_deleteSemaphore(void *a1, const char *a2, ...)
{
  return _[a1 deleteSemaphore];
}

id objc_msgSend_deleteSnapshotForID_backupUDID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSnapshotForID:backupUDID:lastModified:error:");
}

id objc_msgSend_deleteSnapshotID_fromBackupUDID_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSnapshotID:fromBackupUDID:account:error:");
}

id objc_msgSend_deleted(void *a1, const char *a2, ...)
{
  return _[a1 deleted];
}

id objc_msgSend_deletedAssets(void *a1, const char *a2, ...)
{
  return _[a1 deletedAssets];
}

id objc_msgSend_deletedFileCount(void *a1, const char *a2, ...)
{
  return _[a1 deletedFileCount];
}

id objc_msgSend_deletedFileIDEnumeratorForBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletedFileIDEnumeratorForBackupUDID:");
}

id objc_msgSend_demotedAppsPlist(void *a1, const char *a2, ...)
{
  return _[a1 demotedAppsPlist];
}

id objc_msgSend_demotedAppsPlistPath(void *a1, const char *a2, ...)
{
  return _[a1 demotedAppsPlistPath];
}

id objc_msgSend_demotedRestoreCoordinatorsAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "demotedRestoreCoordinatorsAndReturnError:");
}

id objc_msgSend_dependentDomainNames(void *a1, const char *a2, ...)
{
  return _[a1 dependentDomainNames];
}

id objc_msgSend_dependentDomainNamesForAppDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dependentDomainNamesForAppDomainName:");
}

id objc_msgSend_dependentDomainsForApp_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dependentDomainsForApp:error:");
}

id objc_msgSend_depositWithAsset_decrypter_assetPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "depositWithAsset:decrypter:assetPath:error:");
}

id objc_msgSend_deprecated_validateFile_debugContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deprecated_validateFile:debugContext:");
}

id objc_msgSend_deregisterRequestID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deregisterRequestID:");
}

id objc_msgSend_deriveATCPolicy(void *a1, const char *a2, ...)
{
  return _[a1 deriveATCPolicy];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForError:");
}

id objc_msgSend_descriptionForError_paths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForError:paths:");
}

id objc_msgSend_destinationDigest(void *a1, const char *a2, ...)
{
  return _[a1 destinationDigest];
}

id objc_msgSend_destinationPath(void *a1, const char *a2, ...)
{
  return _[a1 destinationPath];
}

id objc_msgSend_destinationPathForRestorable_safeHarborDir_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationPathForRestorable:safeHarborDir:");
}

id objc_msgSend_destinationSize(void *a1, const char *a2, ...)
{
  return _[a1 destinationSize];
}

id objc_msgSend_destroy(void *a1, const char *a2, ...)
{
  return _[a1 destroy];
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return _[a1 device];
}

id objc_msgSend_deviceBackingColor(void *a1, const char *a2, ...)
{
  return _[a1 deviceBackingColor];
}

id objc_msgSend_deviceBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 deviceBuildVersion];
}

id objc_msgSend_deviceCacheDir(void *a1, const char *a2, ...)
{
  return _[a1 deviceCacheDir];
}

id objc_msgSend_deviceClass(void *a1, const char *a2, ...)
{
  return _[a1 deviceClass];
}

id objc_msgSend_deviceColor(void *a1, const char *a2, ...)
{
  return _[a1 deviceColor];
}

id objc_msgSend_deviceCoverGlassColor(void *a1, const char *a2, ...)
{
  return _[a1 deviceCoverGlassColor];
}

id objc_msgSend_deviceEnclosureColor(void *a1, const char *a2, ...)
{
  return _[a1 deviceEnclosureColor];
}

id objc_msgSend_deviceForRestore(void *a1, const char *a2, ...)
{
  return _[a1 deviceForRestore];
}

id objc_msgSend_deviceForUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceForUUID:");
}

id objc_msgSend_deviceHousingColor(void *a1, const char *a2, ...)
{
  return _[a1 deviceHousingColor];
}

id objc_msgSend_deviceID(void *a1, const char *a2, ...)
{
  return _[a1 deviceID];
}

id objc_msgSend_deviceLockAssertion(void *a1, const char *a2, ...)
{
  return _[a1 deviceLockAssertion];
}

id objc_msgSend_deviceLockInfosWithAccount_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceLockInfosWithAccount:connection:error:");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return _[a1 deviceName];
}

id objc_msgSend_deviceRefs(void *a1, const char *a2, ...)
{
  return _[a1 deviceRefs];
}

id objc_msgSend_deviceToDeviceEncryptionAvailability(void *a1, const char *a2, ...)
{
  return _[a1 deviceToDeviceEncryptionAvailability];
}

id objc_msgSend_deviceUUID(void *a1, const char *a2, ...)
{
  return _[a1 deviceUUID];
}

id objc_msgSend_devicesByUUID(void *a1, const char *a2, ...)
{
  return _[a1 devicesByUUID];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryRepresentationForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryRepresentationForError:");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfURL:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didFail(void *a1, const char *a2, ...)
{
  return _[a1 didFail];
}

id objc_msgSend_didFinishAppRestoresWithAccount_cancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishAppRestoresWithAccount:cancelled:");
}

id objc_msgSend_didRestoreFromBackup(void *a1, const char *a2, ...)
{
  return _[a1 didRestoreFromBackup];
}

id objc_msgSend_didRestoreFromCloudBackup(void *a1, const char *a2, ...)
{
  return _[a1 didRestoreFromCloudBackup];
}

id objc_msgSend_didUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 didUpgrade];
}

id objc_msgSend_digest(void *a1, const char *a2, ...)
{
  return _[a1 digest];
}

id objc_msgSend_digestDidNotMatchForFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digestDidNotMatchForFile:");
}

id objc_msgSend_digestForData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digestForData:");
}

id objc_msgSend_digestForFileAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digestForFileAtPath:error:");
}

id objc_msgSend_directories(void *a1, const char *a2, ...)
{
  return _[a1 directories];
}

id objc_msgSend_disableCancel(void *a1, const char *a2, ...)
{
  return _[a1 disableCancel];
}

id objc_msgSend_disabledBackupDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disabledBackupDomains:");
}

id objc_msgSend_disabledDomainInfos(void *a1, const char *a2, ...)
{
  return _[a1 disabledDomainInfos];
}

id objc_msgSend_disabledDomainInfosForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disabledDomainInfosForAccount:");
}

id objc_msgSend_disabledSyncDataclasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disabledSyncDataclasses:");
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return _[a1 disconnect];
}

id objc_msgSend_disconnectTimer(void *a1, const char *a2, ...)
{
  return _[a1 disconnectTimer];
}

id objc_msgSend_discountCameraRollQuotaForBackupUDID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discountCameraRollQuotaForBackupUDID:account:connection:error:");
}

id objc_msgSend_discountCameraRollQuotaForBackupUDID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discountCameraRollQuotaForBackupUDID:error:");
}

id objc_msgSend_discountCameraRollQuotaWithAccount_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discountCameraRollQuotaWithAccount:connection:error:");
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 dispatchQueue];
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _[a1 displayName];
}

id objc_msgSend_displayNameForBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayNameForBundleIdentifier:");
}

id objc_msgSend_displayNameForDomain_isSystemDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayNameForDomain:isSystemDomain:");
}

id objc_msgSend_displayNamesForDomainNames_domainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayNamesForDomainNames:domainManager:");
}

id objc_msgSend_displayedBlock(void *a1, const char *a2, ...)
{
  return _[a1 displayedBlock];
}

id objc_msgSend_dispose(void *a1, const char *a2, ...)
{
  return _[a1 dispose];
}

id objc_msgSend_disposeAllDepotsForPersona_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disposeAllDepotsForPersona:error:");
}

id objc_msgSend_disposeAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disposeAndReturnError:");
}

id objc_msgSend_disposeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disposeWithError:");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _[a1 distantFuture];
}

id objc_msgSend_distributorInfo(void *a1, const char *a2, ...)
{
  return _[a1 distributorInfo];
}

id objc_msgSend_distributorIsThirdParty(void *a1, const char *a2, ...)
{
  return _[a1 distributorIsThirdParty];
}

id objc_msgSend_doNotBackupAppIDs(void *a1, const char *a2, ...)
{
  return _[a1 doNotBackupAppIDs];
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesNotRecognizeSelector:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_domainForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainForName:");
}

id objc_msgSend_domainForPath_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainForPath:relativePath:");
}

id objc_msgSend_domainHMAC(void *a1, const char *a2, ...)
{
  return _[a1 domainHMAC];
}

id objc_msgSend_domainHMACsToRepair(void *a1, const char *a2, ...)
{
  return _[a1 domainHMACsToRepair];
}

id objc_msgSend_domainHMACsToRepairMatches_outResult_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainHMACsToRepairMatches:outResult:error:");
}

id objc_msgSend_domainHMACsToRepairOnDisk(void *a1, const char *a2, ...)
{
  return _[a1 domainHMACsToRepairOnDisk];
}

id objc_msgSend_domainHmac(void *a1, const char *a2, ...)
{
  return _[a1 domainHmac];
}

id objc_msgSend_domainHmac_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainHmac:key:");
}

id objc_msgSend_domainHmacForDomainName_hmacKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainHmacForDomainName:hmacKey:");
}

id objc_msgSend_domainHmacFromBaseRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainHmacFromBaseRecordID:");
}

id objc_msgSend_domainHmacsToRemove(void *a1, const char *a2, ...)
{
  return _[a1 domainHmacsToRemove];
}

id objc_msgSend_domainInfoForName_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainInfoForName:backupUDID:");
}

id objc_msgSend_domainInfoWithName_systemApp_remoteSize_localSize_enabled_restricted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainInfoWithName:systemApp:remoteSize:localSize:enabled:restricted:");
}

id objc_msgSend_domainManager(void *a1, const char *a2, ...)
{
  return _[a1 domainManager];
}

id objc_msgSend_domainMarker(void *a1, const char *a2, ...)
{
  return _[a1 domainMarker];
}

id objc_msgSend_domainName(void *a1, const char *a2, ...)
{
  return _[a1 domainName];
}

id objc_msgSend_domainNameForFileRecord_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainNameForFileRecord:error:");
}

id objc_msgSend_domainNameForManifestID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainNameForManifestID:error:");
}

id objc_msgSend_domainNamesByBundleID(void *a1, const char *a2, ...)
{
  return _[a1 domainNamesByBundleID];
}

id objc_msgSend_domainNamesForBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainNamesForBackupUDID:");
}

id objc_msgSend_domainNamesForRestoreFailures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainNamesForRestoreFailures:");
}

id objc_msgSend_domainNamesModifiedInPreviousSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 domainNamesModifiedInPreviousSnapshot];
}

id objc_msgSend_domainNamesNotToBackUp(void *a1, const char *a2, ...)
{
  return _[a1 domainNamesNotToBackUp];
}

id objc_msgSend_domainRecordForDomain_commitID_addedOrModifiedAssets_deletedAssets_hmacKey_fileListStats_fileListPath_fileListEncodingType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainRecordForDomain:commitID:addedOrModifiedAssets:deletedAssets:hmacKey:fileListStats:fileListPath:fileListEncodingType:");
}

id objc_msgSend_domainRecordFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainRecordFromCKRecord:");
}

id objc_msgSend_domainRecordPageForDomain_commitID_addedOrModifiedAssets_deletedAssets_hmacKey_pageIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainRecordPageForDomain:commitID:addedOrModifiedAssets:deletedAssets:hmacKey:pageIndex:");
}

id objc_msgSend_domainRecordQuotaWithBaseRecordID_quota_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainRecordQuotaWithBaseRecordID:quota:");
}

id objc_msgSend_domainRecordQuotas(void *a1, const char *a2, ...)
{
  return _[a1 domainRecordQuotas];
}

id objc_msgSend_domainRedirects(void *a1, const char *a2, ...)
{
  return _[a1 domainRedirects];
}

id objc_msgSend_domainShouldRestoreToSafeHarbor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainShouldRestoreToSafeHarbor:error:");
}

id objc_msgSend_domainState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainState:");
}

id objc_msgSend_domainsForApp_persona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domainsForApp:persona:");
}

id objc_msgSend_domainsToBackUpRegex(void *a1, const char *a2, ...)
{
  return _[a1 domainsToBackUpRegex];
}

id objc_msgSend_domainsToSendInvalidChecksumRegex(void *a1, const char *a2, ...)
{
  return _[a1 domainsToSendInvalidChecksumRegex];
}

id objc_msgSend_domainsTransitioningVolumes(void *a1, const char *a2, ...)
{
  return _[a1 domainsTransitioningVolumes];
}

id objc_msgSend_domainsWithMissingEncryptionKeys(void *a1, const char *a2, ...)
{
  return _[a1 domainsWithMissingEncryptionKeys];
}

id objc_msgSend_done(void *a1, const char *a2, ...)
{
  return _[a1 done];
}

id objc_msgSend_doubleAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleAtIndex:");
}

id objc_msgSend_doubleColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleColumn:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadContentsWithOperationTracker_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadContentsWithOperationTracker:completion:");
}

id objc_msgSend_downloadFileAtPath_toPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadFileAtPath:toPath:options:error:");
}

id objc_msgSend_downloadFilesAtPaths_options_results_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadFilesAtPaths:options:results:error:");
}

id objc_msgSend_downloaded(void *a1, const char *a2, ...)
{
  return _[a1 downloaded];
}

id objc_msgSend_downloadedSnapshotCount(void *a1, const char *a2, ...)
{
  return _[a1 downloadedSnapshotCount];
}

id objc_msgSend_downloadedSnapshotVerificationFailureCount(void *a1, const char *a2, ...)
{
  return _[a1 downloadedSnapshotVerificationFailureCount];
}

id objc_msgSend_drain(void *a1, const char *a2, ...)
{
  return _[a1 drain];
}

id objc_msgSend_drive(void *a1, const char *a2, ...)
{
  return _[a1 drive];
}

id objc_msgSend_driveBackupDatabaseIndexPath(void *a1, const char *a2, ...)
{
  return _[a1 driveBackupDatabaseIndexPath];
}

id objc_msgSend_driveBackupDatabasePath(void *a1, const char *a2, ...)
{
  return _[a1 driveBackupDatabasePath];
}

id objc_msgSend_driveBackupDir(void *a1, const char *a2, ...)
{
  return _[a1 driveBackupDir];
}

id objc_msgSend_driveBackupEngine(void *a1, const char *a2, ...)
{
  return _[a1 driveBackupEngine];
}

id objc_msgSend_driveBackupManifestDatabasePath(void *a1, const char *a2, ...)
{
  return _[a1 driveBackupManifestDatabasePath];
}

id objc_msgSend_driveBackupPropertiesPath(void *a1, const char *a2, ...)
{
  return _[a1 driveBackupPropertiesPath];
}

id objc_msgSend_driveBackupStatusPath(void *a1, const char *a2, ...)
{
  return _[a1 driveBackupStatusPath];
}

id objc_msgSend_driveOperationWithBackupOperationType_count_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driveOperationWithBackupOperationType:count:size:");
}

id objc_msgSend_driveOperationsForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driveOperationsForType:");
}

id objc_msgSend_driveReadError_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driveReadError:description:");
}

id objc_msgSend_driveSettingsContext(void *a1, const char *a2, ...)
{
  return _[a1 driveSettingsContext];
}

id objc_msgSend_driveSnapshotDatabasePath(void *a1, const char *a2, ...)
{
  return _[a1 driveSnapshotDatabasePath];
}

id objc_msgSend_driveSnapshotDir(void *a1, const char *a2, ...)
{
  return _[a1 driveSnapshotDir];
}

id objc_msgSend_driveSnapshotManifestDatabasePath(void *a1, const char *a2, ...)
{
  return _[a1 driveSnapshotManifestDatabasePath];
}

id objc_msgSend_driveSnapshotPropertiesPath(void *a1, const char *a2, ...)
{
  return _[a1 driveSnapshotPropertiesPath];
}

id objc_msgSend_driveWriteError_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driveWriteError:description:");
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return _[a1 drop];
}

id objc_msgSend_dryRestoreInterval(void *a1, const char *a2, ...)
{
  return _[a1 dryRestoreInterval];
}

id objc_msgSend_dryRestoreManager(void *a1, const char *a2, ...)
{
  return _[a1 dryRestoreManager];
}

id objc_msgSend_dryRestoreWithAllowance_snapshotUUID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dryRestoreWithAllowance:snapshotUUID:account:connection:error:");
}

id objc_msgSend_dsid(void *a1, const char *a2, ...)
{
  return _[a1 dsid];
}

id objc_msgSend_dumpContentsToLog(void *a1, const char *a2, ...)
{
  return _[a1 dumpContentsToLog];
}

id objc_msgSend_duplicateFile(void *a1, const char *a2, ...)
{
  return _[a1 duplicateFile];
}

id objc_msgSend_duplicateFileReference(void *a1, const char *a2, ...)
{
  return _[a1 duplicateFileReference];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_effectiveBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveBoolValueForSetting:");
}

id objc_msgSend_emptyDomainCount(void *a1, const char *a2, ...)
{
  return _[a1 emptyDomainCount];
}

id objc_msgSend_enableCancel(void *a1, const char *a2, ...)
{
  return _[a1 enableCancel];
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _[a1 enabled];
}

id objc_msgSend_enabledDomainsCount(void *a1, const char *a2, ...)
{
  return _[a1 enabledDomainsCount];
}

id objc_msgSend_encode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encode:");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBytes:length:");
}

id objc_msgSend_encodeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeData:");
}

id objc_msgSend_encodeInt16_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt16:");
}

id objc_msgSend_encodeInt32_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt32:");
}

id objc_msgSend_encodeInt32_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt32:forKey:");
}

id objc_msgSend_encodeInt64_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInt8_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt8:");
}

id objc_msgSend_encodeInt_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeString:");
}

id objc_msgSend_encodeSystemFieldsWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeSystemFieldsWithCoder:");
}

id objc_msgSend_encodeVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeVersion:");
}

id objc_msgSend_encodeWithFileAtPath_encodingMethod_hasSnapshot_destinationDirectory_account_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeWithFileAtPath:encodingMethod:hasSnapshot:destinationDirectory:account:device:error:");
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return _[a1 encodedData];
}

id objc_msgSend_encoderToFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encoderToFile:error:");
}

id objc_msgSend_encodingMethod(void *a1, const char *a2, ...)
{
  return _[a1 encodingMethod];
}

id objc_msgSend_encodingTaskWithEncodingMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodingTaskWithEncodingMethod:");
}

id objc_msgSend_encrypted(void *a1, const char *a2, ...)
{
  return _[a1 encrypted];
}

id objc_msgSend_encryptedFileForRestoreWithPath_key_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptedFileForRestoreWithPath:key:error:");
}

id objc_msgSend_encryptedFileHandleForBackupWithPath_keybag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptedFileHandleForBackupWithPath:keybag:error:");
}

id objc_msgSend_encryptedFileHandleForRestoreWithPath_keybag_key_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptedFileHandleForRestoreWithPath:keybag:key:error:");
}

id objc_msgSend_encryptedFilesExistForBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptedFilesExistForBackupUDID:");
}

id objc_msgSend_encryptedKey(void *a1, const char *a2, ...)
{
  return _[a1 encryptedKey];
}

id objc_msgSend_encryptedValueStore(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValueStore];
}

id objc_msgSend_encryptedValues(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValues];
}

id objc_msgSend_encryptionKey(void *a1, const char *a2, ...)
{
  return _[a1 encryptionKey];
}

id objc_msgSend_encryptionKeyForFileWithID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptionKeyForFileWithID:backupUDID:");
}

id objc_msgSend_encryptionKeyForFileWithInodeNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptionKeyForFileWithInodeNumber:");
}

id objc_msgSend_encryptionKeyForFileWithInodeNumber_volumeType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptionKeyForFileWithInodeNumber:volumeType:error:");
}

id objc_msgSend_encryptionKeyReaderForFileAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptionKeyReaderForFileAtPath:error:");
}

id objc_msgSend_encryptionKeyVersion(void *a1, const char *a2, ...)
{
  return _[a1 encryptionKeyVersion];
}

id objc_msgSend_encryptionKeyWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptionKeyWithError:");
}

id objc_msgSend_encryptionManager(void *a1, const char *a2, ...)
{
  return _[a1 encryptionManager];
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _[a1 end];
}

id objc_msgSend_endDay(void *a1, const char *a2, ...)
{
  return _[a1 endDay];
}

id objc_msgSend_endWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endWithError:");
}

id objc_msgSend_ended(void *a1, const char *a2, ...)
{
  return _[a1 ended];
}

id objc_msgSend_engine(void *a1, const char *a2, ...)
{
  return _[a1 engine];
}

id objc_msgSend_engineError(void *a1, const char *a2, ...)
{
  return _[a1 engineError];
}

id objc_msgSend_engineMode(void *a1, const char *a2, ...)
{
  return _[a1 engineMode];
}

id objc_msgSend_engineModeString(void *a1, const char *a2, ...)
{
  return _[a1 engineModeString];
}

id objc_msgSend_enginePolicy(void *a1, const char *a2, ...)
{
  return _[a1 enginePolicy];
}

id objc_msgSend_engineStateToCancelBackupAfter(void *a1, const char *a2, ...)
{
  return _[a1 engineStateToCancelBackupAfter];
}

id objc_msgSend_engineStateToCancelRestoreAfter(void *a1, const char *a2, ...)
{
  return _[a1 engineStateToCancelRestoreAfter];
}

id objc_msgSend_engineType(void *a1, const char *a2, ...)
{
  return _[a1 engineType];
}

id objc_msgSend_engineWillTransitionToNextState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "engineWillTransitionToNextState:");
}

id objc_msgSend_engines(void *a1, const char *a2, ...)
{
  return _[a1 engines];
}

id objc_msgSend_enginesByContext(void *a1, const char *a2, ...)
{
  return _[a1 enginesByContext];
}

id objc_msgSend_entitlements(void *a1, const char *a2, ...)
{
  return _[a1 entitlements];
}

id objc_msgSend_entitlementsPath(void *a1, const char *a2, ...)
{
  return _[a1 entitlementsPath];
}

id objc_msgSend_entitlementsRelativePath(void *a1, const char *a2, ...)
{
  return _[a1 entitlementsRelativePath];
}

id objc_msgSend_entryAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entryAtIndex:");
}

id objc_msgSend_entryCount(void *a1, const char *a2, ...)
{
  return _[a1 entryCount];
}

id objc_msgSend_enumerateAndMarkATCRestorables_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAndMarkATCRestorables:enumerator:");
}

id objc_msgSend_enumerateAndMarkNotStartedDirectoriesTopDown_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAndMarkNotStartedDirectoriesTopDown:enumerator:");
}

id objc_msgSend_enumerateAndMarkPlacedDirectoriesBottomUp_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAndMarkPlacedDirectoriesBottomUp:enumerator:");
}

id objc_msgSend_enumerateAndMarkUnfinishedAssets_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAndMarkUnfinishedAssets:enumerator:");
}

id objc_msgSend_enumerateAndMarkUnfinishedSymlinks_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAndMarkUnfinishedSymlinks:enumerator:");
}

id objc_msgSend_enumerateAndMarkUnfinishedZeroByteFiles_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAndMarkUnfinishedZeroByteFiles:enumerator:");
}

id objc_msgSend_enumerateAppPlaceholderDomains_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAppPlaceholderDomains:block:");
}

id objc_msgSend_enumerateAssetRecordIdSuffixForNonEmptyFiles_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAssetRecordIdSuffixForNonEmptyFiles:block:");
}

id objc_msgSend_enumerateAssetRecordPagesToCommitForDomain_pageSize_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAssetRecordPagesToCommitForDomain:pageSize:error:block:");
}

id objc_msgSend_enumerateAssetsPendingUploadForDomain_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAssetsPendingUploadForDomain:error:block:");
}

id objc_msgSend_enumerateAssetsToDownload_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAssetsToDownload:enumerator:");
}

id objc_msgSend_enumerateBundleIDsWithPlaceholderIPAsWithError_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateBundleIDsWithPlaceholderIPAsWithError:enumerator:");
}

id objc_msgSend_enumerateBundlesOfType_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateBundlesOfType:block:");
}

id objc_msgSend_enumerateChangedDomainNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateChangedDomainNames:");
}

id objc_msgSend_enumerateCloudFilesPendingDeleteForManifestID_withFoundFileID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateCloudFilesPendingDeleteForManifestID:withFoundFileID:");
}

id objc_msgSend_enumerateConsolidatedDomainNamesAndReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateConsolidatedDomainNamesAndReference:");
}

id objc_msgSend_enumerateContentsOfDirectoryAtPath_options_foundItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateContentsOfDirectoryAtPath:options:foundItem:");
}

id objc_msgSend_enumerateContentsOfDirectoryAtPath_options_recurse_foundItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateContentsOfDirectoryAtPath:options:recurse:foundItem:");
}

id objc_msgSend_enumerateDomainDependencies_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDomainDependencies:block:");
}

id objc_msgSend_enumerateDomainList_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDomainList:block:");
}

id objc_msgSend_enumerateDomainNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDomainNames:");
}

id objc_msgSend_enumerateDomainNamesOfPendingSnapshot_domainCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDomainNamesOfPendingSnapshot:domainCallback:");
}

id objc_msgSend_enumerateDomainNamesPendingRestoreWithError_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDomainNamesPendingRestoreWithError:enumerator:");
}

id objc_msgSend_enumerateDomainsDeletedSincePreviousSnapshot_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDomainsDeletedSincePreviousSnapshot:block:");
}

id objc_msgSend_enumerateDomainsRequiringAssetUpload_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDomainsRequiringAssetUpload:block:");
}

id objc_msgSend_enumerateDomainsRequiringFileListCopy_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDomainsRequiringFileListCopy:block:");
}

id objc_msgSend_enumerateDomainsRequiringFileListUpload_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDomainsRequiringFileListUpload:block:");
}

id objc_msgSend_enumerateFileChangesForDomainName_skipUnmodified_foundChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateFileChangesForDomainName:skipUnmodified:foundChange:");
}

id objc_msgSend_enumerateFileMetadataWithError_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateFileMetadataWithError:block:");
}

id objc_msgSend_enumerateFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateFiles:");
}

id objc_msgSend_enumerateFilesForManifest_foundFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateFilesForManifest:foundFile:");
}

id objc_msgSend_enumerateFilesForSnapshotOrderedByDomain_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateFilesForSnapshotOrderedByDomain:block:");
}

id objc_msgSend_enumerateFilesMissingEncryptionKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateFilesMissingEncryptionKeys:");
}

id objc_msgSend_enumerateFilesWithDomain_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateFilesWithDomain:error:block:");
}

id objc_msgSend_enumerateInodesMissingEncryptionKeys_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateInodesMissingEncryptionKeys:block:");
}

id objc_msgSend_enumerateKeybagUUIDsForAllFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeybagUUIDsForAllFiles:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateManifestsForSnapshot_foundManifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateManifestsForSnapshot:foundManifest:");
}

id objc_msgSend_enumerateObjectsOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsOfClass:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumeratePathsForBackupType_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePathsForBackupType:usingBlock:");
}

id objc_msgSend_enumeratePendingRestorableDomainsWithCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePendingRestorableDomainsWithCallback:");
}

id objc_msgSend_enumeratePendingRestoreFilesForAnyDomainOrderAscendingWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePendingRestoreFilesForAnyDomainOrderAscendingWithBlock:");
}

id objc_msgSend_enumeratePendingRestoreFilesForDomain_excludingType_foundRestorable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePendingRestoreFilesForDomain:excludingType:foundRestorable:");
}

id objc_msgSend_enumeratePendingRestoreFilesForDomain_forType_orderAscending_foundRestorable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePendingRestoreFilesForDomain:forType:orderAscending:foundRestorable:");
}

id objc_msgSend_enumeratePendingRestoreFilesForDomain_orderAscending_foundRestorable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePendingRestoreFilesForDomain:orderAscending:foundRestorable:");
}

id objc_msgSend_enumeratePendingRestoreRegularFilesForAnyDomainOrderAscendingWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePendingRestoreRegularFilesForAnyDomainOrderAscendingWithBlock:");
}

id objc_msgSend_enumerateReferencesWithUnknownDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateReferencesWithUnknownDomainName:");
}

id objc_msgSend_enumerateRestoreFailuresOfType_isFatal_error_enumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRestoreFailuresOfType:isFatal:error:enumerator:");
}

id objc_msgSend_enumerateRestoreFilesForDomain_excludingState_foundRestorable_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRestoreFilesForDomain:excludingState:foundRestorable:range:");
}

id objc_msgSend_enumerateSnapshotIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSnapshotIDs:");
}

id objc_msgSend_enumerateSnapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSnapshots:");
}

id objc_msgSend_enumerateUploadedDomains_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateUploadedDomains:block:");
}

id objc_msgSend_enumerateWithError_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateWithError:block:");
}

id objc_msgSend_enumeratorAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtPath:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_enumeratorCache(void *a1, const char *a2, ...)
{
  return _[a1 enumeratorCache];
}

id objc_msgSend_enumeratorWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorWithOptions:");
}

id objc_msgSend_enumeratorWithStmt_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorWithStmt:block:");
}

id objc_msgSend_errnoForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errnoForError:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return _[a1 errorCode];
}

id objc_msgSend_errorForException_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorForException:");
}

id objc_msgSend_errorForHTTPURLResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorForHTTPURLResponse:error:");
}

id objc_msgSend_errorForNSError_path_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorForNSError:path:format:");
}

id objc_msgSend_errorIfMatches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorIfMatches:");
}

id objc_msgSend_errorInjectorForRegex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorInjectorForRegex:");
}

id objc_msgSend_errorString(void *a1, const char *a2, ...)
{
  return _[a1 errorString];
}

id objc_msgSend_errorToReport(void *a1, const char *a2, ...)
{
  return _[a1 errorToReport];
}

id objc_msgSend_errorWithCode_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithCode:description:");
}

id objc_msgSend_errorWithCode_error_URL_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithCode:error:URL:format:");
}

id objc_msgSend_errorWithCode_error_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithCode:error:format:");
}

id objc_msgSend_errorWithCode_error_path_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithCode:error:path:format:");
}

id objc_msgSend_errorWithCode_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithCode:format:");
}

id objc_msgSend_errorWithCode_path_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithCode:path:description:");
}

id objc_msgSend_errorWithCode_path_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithCode:path:format:");
}

id objc_msgSend_errorWithDomain_code_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:format:");
}

id objc_msgSend_errorWithDomain_code_path_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:path:format:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errorWithErrno_code_path_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithErrno:code:path:format:");
}

id objc_msgSend_errorWithErrno_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithErrno:format:");
}

id objc_msgSend_errorWithErrno_path_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithErrno:path:format:");
}

id objc_msgSend_errorWithErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithErrors:");
}

id objc_msgSend_errorWithReturnCode_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithReturnCode:description:");
}

id objc_msgSend_errorWithReturnCode_path_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithReturnCode:path:description:");
}

id objc_msgSend_errorWithSqliteCode_andMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithSqliteCode:andMessage:");
}

id objc_msgSend_errors(void *a1, const char *a2, ...)
{
  return _[a1 errors];
}

id objc_msgSend_estimatedBackgroundRestoreSize(void *a1, const char *a2, ...)
{
  return _[a1 estimatedBackgroundRestoreSize];
}

id objc_msgSend_estimatedBackgroundRestoreSizeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedBackgroundRestoreSizeWithError:");
}

id objc_msgSend_estimatedDuration(void *a1, const char *a2, ...)
{
  return _[a1 estimatedDuration];
}

id objc_msgSend_estimatedRestoreSize(void *a1, const char *a2, ...)
{
  return _[a1 estimatedRestoreSize];
}

id objc_msgSend_estimatedSize(void *a1, const char *a2, ...)
{
  return _[a1 estimatedSize];
}

id objc_msgSend_estimatedTimeRemaining(void *a1, const char *a2, ...)
{
  return _[a1 estimatedTimeRemaining];
}

id objc_msgSend_estimator(void *a1, const char *a2, ...)
{
  return _[a1 estimator];
}

id objc_msgSend_evaluatePolicy_options_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluatePolicy:options:reply:");
}

id objc_msgSend_eventDatabaseUUIDForVolumeUUID(void *a1, const char *a2, ...)
{
  return _[a1 eventDatabaseUUIDForVolumeUUID];
}

id objc_msgSend_eventHandler(void *a1, const char *a2, ...)
{
  return _[a1 eventHandler];
}

id objc_msgSend_eventID(void *a1, const char *a2, ...)
{
  return _[a1 eventID];
}

id objc_msgSend_eventId(void *a1, const char *a2, ...)
{
  return _[a1 eventId];
}

id objc_msgSend_eventName(void *a1, const char *a2, ...)
{
  return _[a1 eventName];
}

id objc_msgSend_eventQueue(void *a1, const char *a2, ...)
{
  return _[a1 eventQueue];
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return _[a1 eventType];
}

id objc_msgSend_eventsCollected(void *a1, const char *a2, ...)
{
  return _[a1 eventsCollected];
}

id objc_msgSend_eventsSkipped(void *a1, const char *a2, ...)
{
  return _[a1 eventsSkipped];
}

id objc_msgSend_exchangeObjectAtIndex_withObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exchangeObjectAtIndex:withObjectAtIndex:");
}

id objc_msgSend_excludedAppBundleIDs(void *a1, const char *a2, ...)
{
  return _[a1 excludedAppBundleIDs];
}

id objc_msgSend_excludingNotFound(void *a1, const char *a2, ...)
{
  return _[a1 excludingNotFound];
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:");
}

id objc_msgSend_execute_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:args:");
}

id objc_msgSend_executeRaw_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRaw:");
}

id objc_msgSend_executeStatements_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeStatements:error:");
}

id objc_msgSend_executeWithError_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeWithError:sql:");
}

id objc_msgSend_exitMegaBackupModeWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitMegaBackupModeWithAccount:");
}

id objc_msgSend_expensiveCellularAccess(void *a1, const char *a2, ...)
{
  return _[a1 expensiveCellularAccess];
}

id objc_msgSend_expensiveCellularPolicy(void *a1, const char *a2, ...)
{
  return _[a1 expensiveCellularPolicy];
}

id objc_msgSend_exportKeychainForCKBackupEngine_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exportKeychainForCKBackupEngine:error:");
}

id objc_msgSend_extendExpirationForAccount_deviceBackupUUID_requestedExpirationDate_queue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extendExpirationForAccount:deviceBackupUUID:requestedExpirationDate:queue:completion:");
}

id objc_msgSend_extendedAttributeAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extendedAttributeAtIndex:");
}

id objc_msgSend_extendedAttributes(void *a1, const char *a2, ...)
{
  return _[a1 extendedAttributes];
}

id objc_msgSend_extendedAttributesCount(void *a1, const char *a2, ...)
{
  return _[a1 extendedAttributesCount];
}

id objc_msgSend_extendedSqliteCode(void *a1, const char *a2, ...)
{
  return _[a1 extendedSqliteCode];
}

id objc_msgSend_extension(void *a1, const char *a2, ...)
{
  return _[a1 extension];
}

id objc_msgSend_extractFileID_toPath_progress_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractFileID:toPath:progress:error:");
}

id objc_msgSend_extractItemFromBackupUDID_snapshotID_domainName_relativePath_toPath_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractItemFromBackupUDID:snapshotID:domainName:relativePath:toPath:account:connection:error:");
}

id objc_msgSend_extractItemFromDomainName_relativePath_toPath_progress_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractItemFromDomainName:relativePath:toPath:progress:error:");
}

id objc_msgSend_factoryWithProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "factoryWithProtectionClass:");
}

id objc_msgSend_failedToTransferItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedToTransferItem:");
}

id objc_msgSend_failureResponses(void *a1, const char *a2, ...)
{
  return _[a1 failureResponses];
}

id objc_msgSend_fatalErrorCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fatalErrorCount:");
}

id objc_msgSend_fd(void *a1, const char *a2, ...)
{
  return _[a1 fd];
}

id objc_msgSend_fetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetch:");
}

id objc_msgSend_fetch_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetch:args:");
}

id objc_msgSend_fetchAccountWithOperationTracker_cache_create_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccountWithOperationTracker:cache:create:error:");
}

id objc_msgSend_fetchAccountWithOperationTracker_cache_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccountWithOperationTracker:cache:error:");
}

id objc_msgSend_fetchAllKeybagsWithOperationTracker_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllKeybagsWithOperationTracker:completion:");
}

id objc_msgSend_fetchAppWithIdentifier_persona_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAppWithIdentifier:persona:error:");
}

id objc_msgSend_fetchAssetMetdataWithInode_genCount_outAssetMetadata_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAssetMetdataWithInode:genCount:outAssetMetadata:error:");
}

id objc_msgSend_fetchAssets(void *a1, const char *a2, ...)
{
  return _[a1 fetchAssets];
}

id objc_msgSend_fetchAttempts(void *a1, const char *a2, ...)
{
  return _[a1 fetchAttempts];
}

id objc_msgSend_fetchBackgroundRestoreCellularAccessForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBackgroundRestoreCellularAccessForAccount:error:");
}

id objc_msgSend_fetchConfigurationWithAccount_configuration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchConfigurationWithAccount:configuration:completion:");
}

id objc_msgSend_fetchCountWithError_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCountWithError:sql:");
}

id objc_msgSend_fetchDeviceForRestoreWithUUID_tracker_isForegroundRestore_cache_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceForRestoreWithUUID:tracker:isForegroundRestore:cache:error:");
}

id objc_msgSend_fetchDeviceRecordAndSnapshots_account_manager_tracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceRecordAndSnapshots:account:manager:tracker:error:");
}

id objc_msgSend_fetchDeviceToDeviceEncryptionSupportedByAccount_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceToDeviceEncryptionSupportedByAccount:account:error:");
}

id objc_msgSend_fetchDeviceToDeviceEncryptionSupportedByAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceToDeviceEncryptionSupportedByAccount:error:");
}

id objc_msgSend_fetchDevicesWithOperationTracker_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDevicesWithOperationTracker:completion:");
}

id objc_msgSend_fetchDevicesWithOperationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDevicesWithOperationTracker:error:");
}

id objc_msgSend_fetchDomainRestoreStateForDomain_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDomainRestoreStateForDomain:callback:");
}

id objc_msgSend_fetchDomainsWithTopNFileCounts_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDomainsWithTopNFileCounts:error:");
}

id objc_msgSend_fetchDomainsWithTopNSizes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDomainsWithTopNSizes:error:");
}

id objc_msgSend_fetchEncryptionKeyForInode_outEncryptionKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEncryptionKeyForInode:outEncryptionKey:error:");
}

id objc_msgSend_fetchEncryptionKeyForInode_volumeMountPoint_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEncryptionKeyForInode:volumeMountPoint:error:");
}

id objc_msgSend_fetchEncryptionKeyWithAccount_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEncryptionKeyWithAccount:device:error:");
}

id objc_msgSend_fetchError(void *a1, const char *a2, ...)
{
  return _[a1 fetchError];
}

id objc_msgSend_fetchFileFromFileID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFileFromFileID:error:");
}

id objc_msgSend_fetchFileListStats_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFileListStats:error:");
}

id objc_msgSend_fetchFileWithID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFileWithID:error:");
}

id objc_msgSend_fetchFilesWithOperationTracker_progress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFilesWithOperationTracker:progress:completion:");
}

id objc_msgSend_fetchFromServerWithOperationTracker_childrenOfClass_refs_cache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFromServerWithOperationTracker:childrenOfClass:refs:cache:completion:");
}

id objc_msgSend_fetchFromServerWithOperationTracker_childrenOfClass_refs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFromServerWithOperationTracker:childrenOfClass:refs:completion:");
}

id objc_msgSend_fetchFromServerWithOperationTracker_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFromServerWithOperationTracker:completion:");
}

id objc_msgSend_fetchFromServerWithOperationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFromServerWithOperationTracker:error:");
}

id objc_msgSend_fetchGroup(void *a1, const char *a2, ...)
{
  return _[a1 fetchGroup];
}

id objc_msgSend_fetchIncrementally(void *a1, const char *a2, ...)
{
  return _[a1 fetchIncrementally];
}

id objc_msgSend_fetchInfos(void *a1, const char *a2, ...)
{
  return _[a1 fetchInfos];
}

id objc_msgSend_fetchInfosByRecordID(void *a1, const char *a2, ...)
{
  return _[a1 fetchInfosByRecordID];
}

id objc_msgSend_fetchKeybagSecretForUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchKeybagSecretForUUID:error:");
}

id objc_msgSend_fetchKeybagsWithOperationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchKeybagsWithOperationTracker:error:");
}

id objc_msgSend_fetchLocalBackupPasswordAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocalBackupPasswordAndReturnError:");
}

id objc_msgSend_fetchManifestPageForManifestID_pageIndex_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchManifestPageForManifestID:pageIndex:error:");
}

id objc_msgSend_fetchManifestsWithOperationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchManifestsWithOperationTracker:error:");
}

id objc_msgSend_fetchManifestsWithOperationTracker_referenceFetchProgress_manifestProgress_snapshotCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchManifestsWithOperationTracker:referenceFetchProgress:manifestProgress:snapshotCompletion:");
}

id objc_msgSend_fetchMostRecentSnapshotForDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMostRecentSnapshotForDevice:error:");
}

id objc_msgSend_fetchMostRecentSnapshotWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMostRecentSnapshotWithError:");
}

id objc_msgSend_fetchNetworkConnectivityWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNetworkConnectivityWithBlock:");
}

id objc_msgSend_fetchObjectOfClass_error_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObjectOfClass:error:sql:");
}

id objc_msgSend_fetchObjectOfClass_outObject_error_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObjectOfClass:outObject:error:sql:");
}

id objc_msgSend_fetchObjectOfClass_sql_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObjectOfClass:sql:args:");
}

id objc_msgSend_fetchPendingRestoreSize_remainingFileCount_totalFileCount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPendingRestoreSize:remainingFileCount:totalFileCount:error:");
}

id objc_msgSend_fetchPendingRestoreSizeForDomain_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPendingRestoreSizeForDomain:callback:");
}

id objc_msgSend_fetchPendingUploadSizeInBytes_assetCount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPendingUploadSizeInBytes:assetCount:error:");
}

id objc_msgSend_fetchPluginFieldsForLockManger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPluginFieldsForLockManger:");
}

id objc_msgSend_fetchPropertyWithName_class_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPropertyWithName:class:error:");
}

id objc_msgSend_fetchQuotaReservationByDomain_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchQuotaReservationByDomain:block:");
}

id objc_msgSend_fetchRecordWithID_assetSize_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithID:assetSize:completion:");
}

id objc_msgSend_fetchRecordWithID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithID:completion:");
}

id objc_msgSend_fetchRecordWithID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithID:error:");
}

id objc_msgSend_fetchRecordsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithCompletion:");
}

id objc_msgSend_fetchRecordsWithIDs_progress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithIDs:progress:completion:");
}

id objc_msgSend_fetchRestorableFileForPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRestorableFileForPath:error:");
}

id objc_msgSend_fetchRestorableSnapshotsForAccount_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRestorableSnapshotsForAccount:connection:error:");
}

id objc_msgSend_fetchRestoreFileStateForFileID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRestoreFileStateForFileID:error:");
}

id objc_msgSend_fetchRestoreSizeForDomain_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRestoreSizeForDomain:callback:");
}

id objc_msgSend_fetchRestoreStateForDeviceUUID_snapshotUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRestoreStateForDeviceUUID:snapshotUUID:error:");
}

id objc_msgSend_fetchSQL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSQL:");
}

id objc_msgSend_fetchSemaphore(void *a1, const char *a2, ...)
{
  return _[a1 fetchSemaphore];
}

id objc_msgSend_fetchSnapshotsWithOperationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSnapshotsWithOperationTracker:error:");
}

id objc_msgSend_fetchSnapshotsWithOperationTracker_retry_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSnapshotsWithOperationTracker:retry:completion:");
}

id objc_msgSend_fetchSnapshotsWithOperationTracker_retry_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSnapshotsWithOperationTracker:retry:error:");
}

id objc_msgSend_fetchSnapshotsWithRefs_operationTracker_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSnapshotsWithRefs:operationTracker:completion:");
}

id objc_msgSend_fetchValueForServiceName_accountName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchValueForServiceName:accountName:error:");
}

id objc_msgSend_fetchedAssetBytes(void *a1, const char *a2, ...)
{
  return _[a1 fetchedAssetBytes];
}

id objc_msgSend_fetchedAssetCount(void *a1, const char *a2, ...)
{
  return _[a1 fetchedAssetCount];
}

id objc_msgSend_fetchedSyncZone(void *a1, const char *a2, ...)
{
  return _[a1 fetchedSyncZone];
}

id objc_msgSend_fetchedSyncZoneWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchedSyncZoneWithAccount:");
}

id objc_msgSend_fetcher_didReceiveAsset_decrypter_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetcher:didReceiveAsset:decrypter:path:");
}

id objc_msgSend_fetcher_failedFetchingAsset_withFetchError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetcher:failedFetchingAsset:withFetchError:");
}

id objc_msgSend_file(void *a1, const char *a2, ...)
{
  return _[a1 file];
}

id objc_msgSend_fileAssetMetadataForSignature_volumeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileAssetMetadataForSignature:volumeType:");
}

id objc_msgSend_fileAtOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileAtOffset:");
}

id objc_msgSend_fileChange(void *a1, const char *a2, ...)
{
  return _[a1 fileChange];
}

id objc_msgSend_fileChangeCount_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileChangeCount:size:");
}

id objc_msgSend_fileChangeEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 fileChangeEnumerator];
}

id objc_msgSend_fileChangeIDsWithResult_offset_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileChangeIDsWithResult:offset:limit:");
}

id objc_msgSend_fileChangeWithFile_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileChangeWithFile:type:");
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 fileDescriptor];
}

id objc_msgSend_fileEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 fileEnumerator];
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileForID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileForID:backupUDID:");
}

id objc_msgSend_fileForID_snapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileForID:snapshotID:backupUDID:");
}

id objc_msgSend_fileForTemporaryPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileForTemporaryPath:");
}

id objc_msgSend_fileHandle(void *a1, const char *a2, ...)
{
  return _[a1 fileHandle];
}

id objc_msgSend_fileHandleForReadingAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForReadingAtPath:");
}

id objc_msgSend_fileHandleForReadingFromURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForReadingFromURL:error:");
}

id objc_msgSend_fileHandleWithPath_flags_mode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleWithPath:flags:mode:error:");
}

id objc_msgSend_fileID(void *a1, const char *a2, ...)
{
  return _[a1 fileID];
}

id objc_msgSend_fileIDEnumeratorForSnapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileIDEnumeratorForSnapshotID:backupUDID:");
}

id objc_msgSend_fileIDFromRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileIDFromRecordName:");
}

id objc_msgSend_fileIDWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileIDWithData:");
}

id objc_msgSend_fileIDWithDomain_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileIDWithDomain:relativePath:");
}

id objc_msgSend_fileIDWithDomainName_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileIDWithDomainName:relativePath:");
}

id objc_msgSend_fileIDWithHmacKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileIDWithHmacKey:");
}

id objc_msgSend_fileIDWithMBFileID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileIDWithMBFileID:");
}

id objc_msgSend_fileIDWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileIDWithString:");
}

id objc_msgSend_fileInfoWithAbsolutePath_mode_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileInfoWithAbsolutePath:mode:priority:");
}

id objc_msgSend_fileInfoWithRestorable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileInfoWithRestorable:");
}

id objc_msgSend_fileList(void *a1, const char *a2, ...)
{
  return _[a1 fileList];
}

id objc_msgSend_fileListEncodingType(void *a1, const char *a2, ...)
{
  return _[a1 fileListEncodingType];
}

id objc_msgSend_fileMetadataExcludingAssetForPath_modifiedDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileMetadataExcludingAssetForPath:modifiedDate:error:");
}

id objc_msgSend_fileMetadataExcludingXattrsAndAssetFromNode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileMetadataExcludingXattrsAndAssetFromNode:error:");
}

id objc_msgSend_fileMetadataForPath_fetchXattrs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileMetadataForPath:fetchXattrs:error:");
}

id objc_msgSend_fileMetadataFromNode_xattrs_linkTarget_assetMetadata_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileMetadataFromNode:xattrs:linkTarget:assetMetadata:error:");
}

id objc_msgSend_fileModificationDate(void *a1, const char *a2, ...)
{
  return _[a1 fileModificationDate];
}

id objc_msgSend_fileModifiedWhileUploadingFile_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileModifiedWhileUploadingFile:reason:");
}

id objc_msgSend_filePath(void *a1, const char *a2, ...)
{
  return _[a1 filePath];
}

id objc_msgSend_filePathForHash_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filePathForHash:error:");
}

id objc_msgSend_filePathURL(void *a1, const char *a2, ...)
{
  return _[a1 filePathURL];
}

id objc_msgSend_fileScanner_didFindFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileScanner:didFindFile:");
}

id objc_msgSend_fileScanner_failedToOpenFile_withErrno_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileScanner:failedToOpenFile:withErrno:");
}

id objc_msgSend_fileScanner_failedToStatFile_withErrno_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileScanner:failedToStatFile:withErrno:");
}

id objc_msgSend_fileScanner_isFileAddedOrModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileScanner:isFileAddedOrModified:");
}

id objc_msgSend_fileScanner_shouldExcludeFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileScanner:shouldExcludeFile:");
}

id objc_msgSend_fileSeen_changeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSeen:changeType:");
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _[a1 fileSize];
}

id objc_msgSend_fileSystemCapacity(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemCapacity];
}

id objc_msgSend_fileSystemFileNumber(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemFileNumber];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileTransferEndDate(void *a1, const char *a2, ...)
{
  return _[a1 fileTransferEndDate];
}

id objc_msgSend_fileTransferSession(void *a1, const char *a2, ...)
{
  return _[a1 fileTransferSession];
}

id objc_msgSend_fileTransferStartDate(void *a1, const char *a2, ...)
{
  return _[a1 fileTransferStartDate];
}

id objc_msgSend_fileType(void *a1, const char *a2, ...)
{
  return _[a1 fileType];
}

id objc_msgSend_fileTypeString(void *a1, const char *a2, ...)
{
  return _[a1 fileTypeString];
}

id objc_msgSend_fileURL(void *a1, const char *a2, ...)
{
  return _[a1 fileURL];
}

id objc_msgSend_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileUploadError(void *a1, const char *a2, ...)
{
  return _[a1 fileUploadError];
}

id objc_msgSend_fileWithDecoder_database_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileWithDecoder:database:");
}

id objc_msgSend_fileWithDomain_fromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileWithDomain:fromIndex:");
}

id objc_msgSend_fileWithDomain_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileWithDomain:relativePath:");
}

id objc_msgSend_fileWithDomain_snapshotPath_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileWithDomain:snapshotPath:relativePath:");
}

id objc_msgSend_fileWithFileChange_manifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileWithFileChange:manifest:");
}

id objc_msgSend_fileWithMBFile_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileWithMBFile:cache:");
}

id objc_msgSend_fileWithRecord_cache_manifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileWithRecord:cache:manifest:");
}

id objc_msgSend_fileWithRecord_cache_snapshot_domainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileWithRecord:cache:snapshot:domainName:");
}

id objc_msgSend_filename(void *a1, const char *a2, ...)
{
  return _[a1 filename];
}

id objc_msgSend_filenamePrefix(void *a1, const char *a2, ...)
{
  return _[a1 filenamePrefix];
}

id objc_msgSend_filenameWithPrefix(void *a1, const char *a2, ...)
{
  return _[a1 filenameWithPrefix];
}

id objc_msgSend_files(void *a1, const char *a2, ...)
{
  return _[a1 files];
}

id objc_msgSend_filesForSnapshotID_backupUDID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filesForSnapshotID:backupUDID:account:connection:error:");
}

id objc_msgSend_filesInFlightByID(void *a1, const char *a2, ...)
{
  return _[a1 filesInFlightByID];
}

id objc_msgSend_filesToRestoreForDomainName_relativePath_pendingOnly_backupUDID_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filesToRestoreForDomainName:relativePath:pendingOnly:backupUDID:range:");
}

id objc_msgSend_filesTransferred(void *a1, const char *a2, ...)
{
  return _[a1 filesTransferred];
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filteredSetUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredSetUsingPredicate:");
}

id objc_msgSend_final(void *a1, const char *a2, ...)
{
  return _[a1 final];
}

id objc_msgSend_finalizeRestoreDirectoriesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizeRestoreDirectoriesWithError:");
}

id objc_msgSend_findChangesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findChangesWithError:");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _[a1 finish];
}

id objc_msgSend_finishAirTrafficRestoreWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishAirTrafficRestoreWithAccount:");
}

id objc_msgSend_finishBackupActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishBackupActivity:");
}

id objc_msgSend_finishBatchDelete_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishBatchDelete:completion:");
}

id objc_msgSend_finishBatchFetch_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishBatchFetch:completion:");
}

id objc_msgSend_finishBatchSave_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishBatchSave:completion:");
}

id objc_msgSend_finishBatchUploadsWithOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishBatchUploadsWithOptions:completion:");
}

id objc_msgSend_finishSampling(void *a1, const char *a2, ...)
{
  return _[a1 finishSampling];
}

id objc_msgSend_finishStreamWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishStreamWithCompletionBlock:");
}

id objc_msgSend_finishTranscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishTranscription:");
}

id objc_msgSend_finishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithError:");
}

id objc_msgSend_finishedAppRestores(void *a1, const char *a2, ...)
{
  return _[a1 finishedAppRestores];
}

id objc_msgSend_finishedItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedItem:");
}

id objc_msgSend_finishedItem_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedItem:size:");
}

id objc_msgSend_finishedPerforming(void *a1, const char *a2, ...)
{
  return _[a1 finishedPerforming];
}

id objc_msgSend_finishedScanningDomain(void *a1, const char *a2, ...)
{
  return _[a1 finishedScanningDomain];
}

id objc_msgSend_finishedTransferringItem_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedTransferringItem:size:");
}

id objc_msgSend_fireCellularPromptWithEstimate_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireCellularPromptWithEstimate:completion:");
}

id objc_msgSend_fireWiFiPromptWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireWiFiPromptWithCompletion:");
}

id objc_msgSend_firstConditionsGroup(void *a1, const char *a2, ...)
{
  return _[a1 firstConditionsGroup];
}

id objc_msgSend_firstItemError(void *a1, const char *a2, ...)
{
  return _[a1 firstItemError];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_flagsForFileID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flagsForFileID:error:");
}

id objc_msgSend_flagsForMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flagsForMode:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _[a1 flush];
}

id objc_msgSend_followUpController(void *a1, const char *a2, ...)
{
  return _[a1 followUpController];
}

id objc_msgSend_forceRefreshForBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceRefreshForBackupUDID:");
}

id objc_msgSend_forcedRetryTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 forcedRetryTimeInterval];
}

id objc_msgSend_foregroundDataSeparatedRestoreMode(void *a1, const char *a2, ...)
{
  return _[a1 foregroundDataSeparatedRestoreMode];
}

id objc_msgSend_foregroundRestorableDomainCount(void *a1, const char *a2, ...)
{
  return _[a1 foregroundRestorableDomainCount];
}

id objc_msgSend_foregroundRestorableFileCount(void *a1, const char *a2, ...)
{
  return _[a1 foregroundRestorableFileCount];
}

id objc_msgSend_foregroundRestorableSize(void *a1, const char *a2, ...)
{
  return _[a1 foregroundRestorableSize];
}

id objc_msgSend_foregroundRestoreMode(void *a1, const char *a2, ...)
{
  return _[a1 foregroundRestoreMode];
}

id objc_msgSend_foregroundRestoreVerificationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 foregroundRestoreVerificationEnabled];
}

id objc_msgSend_foregroundRestoreVerificationStatus(void *a1, const char *a2, ...)
{
  return _[a1 foregroundRestoreVerificationStatus];
}

id objc_msgSend_foregroundStateForRestorable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foregroundStateForRestorable:");
}

id objc_msgSend_forgetManifests(void *a1, const char *a2, ...)
{
  return _[a1 forgetManifests];
}

id objc_msgSend_forgetSnapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forgetSnapshotID:");
}

id objc_msgSend_freeDiskSpace(void *a1, const char *a2, ...)
{
  return _[a1 freeDiskSpace];
}

id objc_msgSend_freeSpace_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freeSpace:error:");
}

id objc_msgSend_fseventDuration(void *a1, const char *a2, ...)
{
  return _[a1 fseventDuration];
}

id objc_msgSend_full(void *a1, const char *a2, ...)
{
  return _[a1 full];
}

id objc_msgSend_fullURLForDriveRelativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullURLForDriveRelativePath:");
}

id objc_msgSend_functionName(void *a1, const char *a2, ...)
{
  return _[a1 functionName];
}

id objc_msgSend_genCount(void *a1, const char *a2, ...)
{
  return _[a1 genCount];
}

id objc_msgSend_getAppleIDsForBackupUDID_account_snapshotID_activeAppleID_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAppleIDsForBackupUDID:account:snapshotID:activeAppleID:connection:error:");
}

id objc_msgSend_getAppleIDsMapForBackupUDID_account_snapshotID_activeAppleID_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAppleIDsMapForBackupUDID:account:snapshotID:activeAppleID:connection:error:");
}

id objc_msgSend_getBackupListWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBackupListWithError:");
}

id objc_msgSend_getBackupListWithFiltering_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBackupListWithFiltering:account:connection:error:");
}

id objc_msgSend_getBackupListWithOperationTracker_shouldFilter_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBackupListWithOperationTracker:shouldFilter:error:");
}

id objc_msgSend_getBatch_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBatch:block:");
}

id objc_msgSend_getBatch_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBatch:error:");
}

id objc_msgSend_getBooleanValueForKey_keyExists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBooleanValueForKey:keyExists:");
}

id objc_msgSend_getBuddyDataStashForBackupUDID_snapshotID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBuddyDataStashForBackupUDID:snapshotID:account:connection:error:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
}

id objc_msgSend_getBytes_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:range:");
}

id objc_msgSend_getCFRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 getCFRunLoop];
}

id objc_msgSend_getEncryptedFileHandleWithKeybag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEncryptedFileHandleWithKeybag:error:");
}

id objc_msgSend_getEntitlementsForDomainsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEntitlementsForDomainsWithError:");
}

id objc_msgSend_getFileIDs_backupUDID_snapshotID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFileIDs:backupUDID:snapshotID:lastModified:error:");
}

id objc_msgSend_getFileSystemRepresentation_maxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFileSystemRepresentation:maxLength:");
}

id objc_msgSend_getFilesCount(void *a1, const char *a2, ...)
{
  return _[a1 getFilesCount];
}

id objc_msgSend_getFilesSize(void *a1, const char *a2, ...)
{
  return _[a1 getFilesSize];
}

id objc_msgSend_getNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNode:");
}

id objc_msgSend_getNode_fromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNode:fromIndex:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getStat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStat:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_getValueForDomain_key_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValueForDomain:key:usingBlock:");
}

id objc_msgSend_getWithFD_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getWithFD:error:");
}

id objc_msgSend_getWithPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getWithPath:error:");
}

id objc_msgSend_getWithPathFSR_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getWithPathFSR:error:");
}

id objc_msgSend_gracePeriod(void *a1, const char *a2, ...)
{
  return _[a1 gracePeriod];
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return _[a1 group];
}

id objc_msgSend_groupContainerURLs(void *a1, const char *a2, ...)
{
  return _[a1 groupContainerURLs];
}

id objc_msgSend_groupID(void *a1, const char *a2, ...)
{
  return _[a1 groupID];
}

id objc_msgSend_groupInTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupInTransaction:");
}

id objc_msgSend_groupInTransaction_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupInTransaction:error:");
}

id objc_msgSend_groups(void *a1, const char *a2, ...)
{
  return _[a1 groups];
}

id objc_msgSend_hadTemporarySQLiteArchive(void *a1, const char *a2, ...)
{
  return _[a1 hadTemporarySQLiteArchive];
}

id objc_msgSend_handleActivity(void *a1, const char *a2, ...)
{
  return _[a1 handleActivity];
}

id objc_msgSend_handleCancelation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCancelation:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleMergeConflictWithOperationTracker_attemptedRecord_serverRecord_originalRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMergeConflictWithOperationTracker:attemptedRecord:serverRecord:originalRecord:");
}

id objc_msgSend_handleNetworkPathUpdateWithType_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNetworkPathUpdateWithType:state:");
}

id objc_msgSend_handleSaveComplete_withError_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSaveComplete:withError:completion:");
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return _[a1 handler];
}

id objc_msgSend_hardwareModel(void *a1, const char *a2, ...)
{
  return _[a1 hardwareModel];
}

id objc_msgSend_hardwareModelNeedsH8Workaround_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hardwareModelNeedsH8Workaround:");
}

id objc_msgSend_hasAbsolutePath(void *a1, const char *a2, ...)
{
  return _[a1 hasAbsolutePath];
}

id objc_msgSend_hasAccountID(void *a1, const char *a2, ...)
{
  return _[a1 hasAccountID];
}

id objc_msgSend_hasAppleAccount(void *a1, const char *a2, ...)
{
  return _[a1 hasAppleAccount];
}

id objc_msgSend_hasAssetReference_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAssetReference:error:");
}

id objc_msgSend_hasAttributes(void *a1, const char *a2, ...)
{
  return _[a1 hasAttributes];
}

id objc_msgSend_hasAttributesForPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAttributesForPath:error:");
}

id objc_msgSend_hasBackupContentsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasBackupContentsWithError:");
}

id objc_msgSend_hasBackupEnabledState(void *a1, const char *a2, ...)
{
  return _[a1 hasBackupEnabledState];
}

id objc_msgSend_hasBirth(void *a1, const char *a2, ...)
{
  return _[a1 hasBirth];
}

id objc_msgSend_hasCellularPolicy(void *a1, const char *a2, ...)
{
  return _[a1 hasCellularPolicy];
}

id objc_msgSend_hasContentCompressionMethod(void *a1, const char *a2, ...)
{
  return _[a1 hasContentCompressionMethod];
}

id objc_msgSend_hasContentEncodingMethod(void *a1, const char *a2, ...)
{
  return _[a1 hasContentEncodingMethod];
}

id objc_msgSend_hasCorruptSQLiteDBs(void *a1, const char *a2, ...)
{
  return _[a1 hasCorruptSQLiteDBs];
}

id objc_msgSend_hasDecodedAssetPath(void *a1, const char *a2, ...)
{
  return _[a1 hasDecodedAssetPath];
}

id objc_msgSend_hasDecryptedSize(void *a1, const char *a2, ...)
{
  return _[a1 hasDecryptedSize];
}

id objc_msgSend_hasDeleted(void *a1, const char *a2, ...)
{
  return _[a1 hasDeleted];
}

id objc_msgSend_hasDomain(void *a1, const char *a2, ...)
{
  return _[a1 hasDomain];
}

id objc_msgSend_hasDomainBeenBackedUp_backedUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDomainBeenBackedUp:backedUp:");
}

id objc_msgSend_hasEncryptionKey(void *a1, const char *a2, ...)
{
  return _[a1 hasEncryptionKey];
}

id objc_msgSend_hasEncryptionKeyVersion(void *a1, const char *a2, ...)
{
  return _[a1 hasEncryptionKeyVersion];
}

id objc_msgSend_hasError(void *a1, const char *a2, ...)
{
  return _[a1 hasError];
}

id objc_msgSend_hasExternalConfig(void *a1, const char *a2, ...)
{
  return _[a1 hasExternalConfig];
}

id objc_msgSend_hasFetchedDevices(void *a1, const char *a2, ...)
{
  return _[a1 hasFetchedDevices];
}

id objc_msgSend_hasFetchedKeybags(void *a1, const char *a2, ...)
{
  return _[a1 hasFetchedKeybags];
}

id objc_msgSend_hasFetchedManifests(void *a1, const char *a2, ...)
{
  return _[a1 hasFetchedManifests];
}

id objc_msgSend_hasFetchedSnapshots(void *a1, const char *a2, ...)
{
  return _[a1 hasFetchedSnapshots];
}

id objc_msgSend_hasFileID(void *a1, const char *a2, ...)
{
  return _[a1 hasFileID];
}

id objc_msgSend_hasFlags(void *a1, const char *a2, ...)
{
  return _[a1 hasFlags];
}

id objc_msgSend_hasGroupID(void *a1, const char *a2, ...)
{
  return _[a1 hasGroupID];
}

id objc_msgSend_hasInode(void *a1, const char *a2, ...)
{
  return _[a1 hasInode];
}

id objc_msgSend_hasInodeNumber(void *a1, const char *a2, ...)
{
  return _[a1 hasInodeNumber];
}

id objc_msgSend_hasIsMMCSEncryptedOnly(void *a1, const char *a2, ...)
{
  return _[a1 hasIsMMCSEncryptedOnly];
}

id objc_msgSend_hasKeybagID(void *a1, const char *a2, ...)
{
  return _[a1 hasKeybagID];
}

id objc_msgSend_hasKeybagWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasKeybagWithUUID:");
}

id objc_msgSend_hasKeybags(void *a1, const char *a2, ...)
{
  return _[a1 hasKeybags];
}

id objc_msgSend_hasLastModified(void *a1, const char *a2, ...)
{
  return _[a1 hasLastModified];
}

id objc_msgSend_hasLastStatusChange(void *a1, const char *a2, ...)
{
  return _[a1 hasLastStatusChange];
}

id objc_msgSend_hasLinkTarget(void *a1, const char *a2, ...)
{
  return _[a1 hasLinkTarget];
}

id objc_msgSend_hasLoggingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 hasLoggingEnabled];
}

id objc_msgSend_hasManifestDB(void *a1, const char *a2, ...)
{
  return _[a1 hasManifestDB];
}

id objc_msgSend_hasMode(void *a1, const char *a2, ...)
{
  return _[a1 hasMode];
}

id objc_msgSend_hasModified(void *a1, const char *a2, ...)
{
  return _[a1 hasModified];
}

id objc_msgSend_hasNetworkConnectivityInfo(void *a1, const char *a2, ...)
{
  return _[a1 hasNetworkConnectivityInfo];
}

id objc_msgSend_hasNewOTAKeyBag(void *a1, const char *a2, ...)
{
  return _[a1 hasNewOTAKeyBag];
}

id objc_msgSend_hasOverriddenModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 hasOverriddenModifiedDate];
}

id objc_msgSend_hasParallelPlaceholder(void *a1, const char *a2, ...)
{
  return _[a1 hasParallelPlaceholder];
}

id objc_msgSend_hasPendingBackupContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPendingBackupContents:");
}

id objc_msgSend_hasPrebuddyFollowUp(void *a1, const char *a2, ...)
{
  return _[a1 hasPrebuddyFollowUp];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasProtectionClass(void *a1, const char *a2, ...)
{
  return _[a1 hasProtectionClass];
}

id objc_msgSend_hasRefreshedSnapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRefreshedSnapshotID:");
}

id objc_msgSend_hasRelativePath(void *a1, const char *a2, ...)
{
  return _[a1 hasRelativePath];
}

id objc_msgSend_hasResources(void *a1, const char *a2, ...)
{
  return _[a1 hasResources];
}

id objc_msgSend_hasResourcesSize(void *a1, const char *a2, ...)
{
  return _[a1 hasResourcesSize];
}

id objc_msgSend_hasRestoreFilesWithCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRestoreFilesWithCallback:");
}

id objc_msgSend_hasRootPath(void *a1, const char *a2, ...)
{
  return _[a1 hasRootPath];
}

id objc_msgSend_hasSha256Signature(void *a1, const char *a2, ...)
{
  return _[a1 hasSha256Signature];
}

id objc_msgSend_hasSignature(void *a1, const char *a2, ...)
{
  return _[a1 hasSignature];
}

id objc_msgSend_hasSize(void *a1, const char *a2, ...)
{
  return _[a1 hasSize];
}

id objc_msgSend_hasSizeBeforeCopy(void *a1, const char *a2, ...)
{
  return _[a1 hasSizeBeforeCopy];
}

id objc_msgSend_hasSizeBeforeEncoding(void *a1, const char *a2, ...)
{
  return _[a1 hasSizeBeforeEncoding];
}

id objc_msgSend_hasSnapshotID(void *a1, const char *a2, ...)
{
  return _[a1 hasSnapshotID];
}

id objc_msgSend_hasSourceDeviceInode(void *a1, const char *a2, ...)
{
  return _[a1 hasSourceDeviceInode];
}

id objc_msgSend_hasStashedAssetIsDecrypted(void *a1, const char *a2, ...)
{
  return _[a1 hasStashedAssetIsDecrypted];
}

id objc_msgSend_hasStashedAssetPath(void *a1, const char *a2, ...)
{
  return _[a1 hasStashedAssetPath];
}

id objc_msgSend_hasStashedResourcePath(void *a1, const char *a2, ...)
{
  return _[a1 hasStashedResourcePath];
}

id objc_msgSend_hasStatusChanged(void *a1, const char *a2, ...)
{
  return _[a1 hasStatusChanged];
}

id objc_msgSend_hasSubDomain(void *a1, const char *a2, ...)
{
  return _[a1 hasSubDomain];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasTarget(void *a1, const char *a2, ...)
{
  return _[a1 hasTarget];
}

id objc_msgSend_hasUnverifiedFilesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUnverifiedFilesWithError:");
}

id objc_msgSend_hasUserID(void *a1, const char *a2, ...)
{
  return _[a1 hasUserID];
}

id objc_msgSend_hasVolumeType(void *a1, const char *a2, ...)
{
  return _[a1 hasVolumeType];
}

id objc_msgSend_hasXattrs(void *a1, const char *a2, ...)
{
  return _[a1 hasXattrs];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_headers(void *a1, const char *a2, ...)
{
  return _[a1 headers];
}

id objc_msgSend_hmacKey(void *a1, const char *a2, ...)
{
  return _[a1 hmacKey];
}

id objc_msgSend_hold(void *a1, const char *a2, ...)
{
  return _[a1 hold];
}

id objc_msgSend_holdLockAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "holdLockAssertion:");
}

id objc_msgSend_holdWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "holdWithError:");
}

id objc_msgSend_holdWorkAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "holdWorkAssertion:");
}

id objc_msgSend_holdWorkAssertionWithClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "holdWorkAssertionWithClass:");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_iTunesStoreKVS(void *a1, const char *a2, ...)
{
  return _[a1 iTunesStoreKVS];
}

id objc_msgSend_icon(void *a1, const char *a2, ...)
{
  return _[a1 icon];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_ignoredLastOnConditionEvent(void *a1, const char *a2, ...)
{
  return _[a1 ignoredLastOnConditionEvent];
}

id objc_msgSend_incrementPriorityOfRestorableForDomain_relativePath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementPriorityOfRestorableForDomain:relativePath:error:");
}

id objc_msgSend_incrementRetryCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementRetryCount];
}

id objc_msgSend_index(void *a1, const char *a2, ...)
{
  return _[a1 index];
}

id objc_msgSend_indexFromDatabaseIgnoringTruncation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexFromDatabaseIgnoringTruncation:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_inexpensiveCellularAccess(void *a1, const char *a2, ...)
{
  return _[a1 inexpensiveCellularAccess];
}

id objc_msgSend_inexpensiveCellularBalance(void *a1, const char *a2, ...)
{
  return _[a1 inexpensiveCellularBalance];
}

id objc_msgSend_infoWithDrive_path_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoWithDrive:path:error:");
}

id objc_msgSend_infoWithID_uuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoWithID:uuid:");
}

id objc_msgSend_ingestFileListForDomainNamed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ingestFileListForDomainNamed:error:");
}

id objc_msgSend_inheritSnapshotWithAccount_fromSnapshot_fromDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inheritSnapshotWithAccount:fromSnapshot:fromDevice:error:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initFileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:");
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:isDirectory:");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initFromArchiveData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromArchiveData:");
}

id objc_msgSend_initRequiringSecureCoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRequiringSecureCoding:");
}

id objc_msgSend_initWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:");
}

id objc_msgSend_initWithAccount_backupUDID_type_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:backupUDID:type:delegate:");
}

id objc_msgSend_initWithAccount_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:path:");
}

id objc_msgSend_initWithAccount_restoreType_backupUDID_databaseManager_delegate_operationGroup_thermalPressureMonitor_snapshotUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:restoreType:backupUDID:databaseManager:delegate:operationGroup:thermalPressureMonitor:snapshotUUID:");
}

id objc_msgSend_initWithAccount_serviceManager_snapshotUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:serviceManager:snapshotUUID:");
}

id objc_msgSend_initWithAccount_serviceManager_thermalPressureMonitor_snapshotUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:serviceManager:thermalPressureMonitor:snapshotUUID:");
}

id objc_msgSend_initWithAccount_useSandbox_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:useSandbox:");
}

id objc_msgSend_initWithAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountID:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributes:");
}

id objc_msgSend_initWithBackupState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackupState:");
}

id objc_msgSend_initWithBackupUDID_backupUUID_deviceClass_productType_hardwareModel_marketingName_snapshots_restoreSystemFiles_isMBSBackup_isBackupEnabled_hasBackupEnabledState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackupUDID:backupUUID:deviceClass:productType:hardwareModel:marketingName:snapshots:restoreSystemFiles:isMBSBackup:isBackupEnabled:hasBackupEnabledState:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBaseRecordID_domainHmac_quota_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBaseRecordID:domainHmac:quota:");
}

id objc_msgSend_initWithBaseRecordID_pageCount_checksum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBaseRecordID:pageCount:checksum:");
}

id objc_msgSend_initWithBatchSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBatchSize:");
}

id objc_msgSend_initWithBundleID_relativePath_entitlements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleID:relativePath:entitlements:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:encoding:freeWhenDone:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCache:");
}

id objc_msgSend_initWithCache_SQL_stmt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCache:SQL:stmt:");
}

id objc_msgSend_initWithCacheDirPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCacheDirPath:error:");
}

id objc_msgSend_initWithCacheDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCacheDirectory:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithClientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientIdentifier:");
}

id objc_msgSend_initWithCode_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCode:format:");
}

id objc_msgSend_initWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoder:");
}

id objc_msgSend_initWithContainerID_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerID:options:");
}

id objc_msgSend_initWithContainerIdentifier_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:environment:");
}

id objc_msgSend_initWithCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCursor:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:error:");
}

id objc_msgSend_initWithDataSeparatedAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataSeparatedAccount:");
}

id objc_msgSend_initWithDebugContext_networkAvailabilityProvider_engineMode_restoreType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDebugContext:networkAvailabilityProvider:engineMode:restoreType:");
}

id objc_msgSend_initWithDecoder_database_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDecoder:database:");
}

id objc_msgSend_initWithDecoder_domainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDecoder:domainManager:");
}

id objc_msgSend_initWithDefaultSystemDomainsPlist(void *a1, const char *a2, ...)
{
  return _[a1 initWithDefaultSystemDomainsPlist];
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDelegate_mode_enginePolicy_debugContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:mode:enginePolicy:debugContext:");
}

id objc_msgSend_initWithDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:");
}

id objc_msgSend_initWithDevice_cache_engine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:cache:engine:");
}

id objc_msgSend_initWithDevice_domainHMAC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:domainHMAC:");
}

id objc_msgSend_initWithDevice_keybagRefs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:keybagRefs:");
}

id objc_msgSend_initWithDevice_manifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:manifest:");
}

id objc_msgSend_initWithDevice_reason_type_snapshotFormat_backupPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:reason:type:snapshotFormat:backupPolicy:");
}

id objc_msgSend_initWithDeviceUUID_databaseManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceUUID:databaseManager:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_device_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:device:");
}

id objc_msgSend_initWithDictionary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:error:");
}

id objc_msgSend_initWithDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionaryRepresentation:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDomain_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:relativePath:");
}

id objc_msgSend_initWithDomain_snapshotPath_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:snapshotPath:relativePath:");
}

id objc_msgSend_initWithDomainMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomainMarker:");
}

id objc_msgSend_initWithDomainMarker_pathToMonitor_pathToModifiedDomainFlags_pathToDomainMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomainMarker:pathToMonitor:pathToModifiedDomainFlags:pathToDomainMapping:");
}

id objc_msgSend_initWithDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomainName:");
}

id objc_msgSend_initWithDomainName_recordID_pageIndex_addedOrModifiedAssets_deletedAssets_cumulativeDirectoryCount_cumulativeRegCount_cumulativeEmptyRegCount_cumulativeSymlinkCount_cumulativeAssetCount_fileList_fileListEncodingType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomainName:recordID:pageIndex:addedOrModifiedAssets:deletedAssets:cumulativeDirectoryCount:cumulativeRegCount:cumulativeEmptyRegCount:cumulativeSymlinkCount:cumulativeAssetCount:fileList:fileListEncodingType:");
}

id objc_msgSend_initWithDomainName_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomainName:relativePath:");
}

id objc_msgSend_initWithDomainName_systemApp_remoteSize_localSize_enabled_restricted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomainName:systemApp:remoteSize:localSize:enabled:restricted:");
}

id objc_msgSend_initWithDomainsNotVerifiedCount_domainsPassingVerificationCount_domainsFailingVerificationCount_domainsSkippedVerificationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomainsNotVerifiedCount:domainsPassingVerificationCount:domainsFailingVerificationCount:domainsSkippedVerificationCount:");
}

id objc_msgSend_initWithDrive_path_domainManager_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDrive:path:domainManager:error:");
}

id objc_msgSend_initWithDrive_path_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDrive:path:error:");
}

id objc_msgSend_initWithEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEngine:");
}

id objc_msgSend_initWithEngine_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEngine:account:");
}

id objc_msgSend_initWithEngine_fileHandle_file_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEngine:fileHandle:file:");
}

id objc_msgSend_initWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithError:");
}

id objc_msgSend_initWithEstimator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEstimator:");
}

id objc_msgSend_initWithEventName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventName:");
}

id objc_msgSend_initWithFile_domainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFile:domainManager:");
}

id objc_msgSend_initWithFile_domainManager_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFile:domainManager:error:");
}

id objc_msgSend_initWithFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFile:error:");
}

id objc_msgSend_initWithFileChange_manifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileChange:manifest:");
}

id objc_msgSend_initWithFileID_domain_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileID:domain:path:");
}

id objc_msgSend_initWithFilePath_serviceManager_delegateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFilePath:serviceManager:delegateContext:");
}

id objc_msgSend_initWithFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:");
}

id objc_msgSend_initWithFireDate_interval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFireDate:interval:target:selector:userInfo:repeats:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithFreeDiskSpace_purgeSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFreeDiskSpace:purgeSize:");
}

id objc_msgSend_initWithFromPath_toRelativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFromPath:toRelativePath:");
}

id objc_msgSend_initWithHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHandle:");
}

id objc_msgSend_initWithHandle_OTA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHandle:OTA:");
}

id objc_msgSend_initWithID_uuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:uuid:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_destinationPath_policy_depot_progressModel_logger_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:destinationPath:policy:depot:progressModel:logger:error:");
}

id objc_msgSend_initWithItemID_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemID:path:");
}

id objc_msgSend_initWithItemID_path_encryptedKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemID:path:encryptedKey:");
}

id objc_msgSend_initWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:ascending:");
}

id objc_msgSend_initWithKeyBag_password_keychainFileName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyBag:password:keychainFileName:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithMBFile_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMBFile:cache:");
}

id objc_msgSend_initWithMBFile_manifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMBFile:manifest:");
}

id objc_msgSend_initWithMaxFiles_maxBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMaxFiles:maxBytes:");
}

id objc_msgSend_initWithMetadata_protectionClass_originalFileSize_originalInode_linkCount_rpath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMetadata:protectionClass:originalFileSize:originalInode:linkCount:rpath:");
}

id objc_msgSend_initWithMobileInstallation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMobileInstallation:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:arguments:");
}

id objc_msgSend_initWithName_client_diskSpaceNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:client:diskSpaceNeeded:");
}

id objc_msgSend_initWithName_date_gracePeriod_cadence_priority_options_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:date:gracePeriod:cadence:priority:options:block:");
}

id objc_msgSend_initWithName_date_gracePeriod_priority_options_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:date:gracePeriod:priority:options:block:");
}

id objc_msgSend_initWithName_timeInterval_priority_options_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:timeInterval:priority:options:block:");
}

id objc_msgSend_initWithName_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:timeout:");
}

id objc_msgSend_initWithOTAHandle_keyBagData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOTAHandle:keyBagData:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithOffset_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOffset:flags:");
}

id objc_msgSend_initWithOperationTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOperationTracker:");
}

id objc_msgSend_initWithOriginalFileHandle_copiedFileHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOriginalFileHandle:copiedFileHandle:");
}

id objc_msgSend_initWithOutputStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOutputStream:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithPath_domainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:domainManager:");
}

id objc_msgSend_initWithPath_fd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:fd:");
}

id objc_msgSend_initWithPath_keybag_file_restore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:keybag:file:restore:");
}

id objc_msgSend_initWithPath_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:options:");
}

id objc_msgSend_initWithPath_properties_domainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:properties:domainManager:");
}

id objc_msgSend_initWithPath_readOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:readOnly:");
}

id objc_msgSend_initWithPath_readOnly_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:readOnly:error:");
}

id objc_msgSend_initWithPath_readOnly_shouldDeleteOnFailureToOpen_usePQLBatching_schemaCurrentVersion_schemaMinDatabaseVersionForUpgrade_error_schemaUpgrades_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:readOnly:shouldDeleteOnFailureToOpen:usePQLBatching:schemaCurrentVersion:schemaMinDatabaseVersionForUpgrade:error:schemaUpgrades:");
}

id objc_msgSend_initWithPath_snapshotDirectoryRoot_commitID_readonly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:snapshotDirectoryRoot:commitID:readonly:");
}

id objc_msgSend_initWithPaths_size_last_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPaths:size:last:");
}

id objc_msgSend_initWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPattern:options:error:");
}

id objc_msgSend_initWithPendingCommitID_snapshotDatabaseDirectory_scanMode_enginePolicy_snapshotFormat_device_volumeMap_snapshotTracker_attemptSummary_compatibilityDelegate_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPendingCommitID:snapshotDatabaseDirectory:scanMode:enginePolicy:snapshotFormat:device:volumeMap:snapshotTracker:attemptSummary:compatibilityDelegate:delegate:");
}

id objc_msgSend_initWithPercentage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPercentage:");
}

id objc_msgSend_initWithPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersona:");
}

id objc_msgSend_initWithPersona_account_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersona:account:options:");
}

id objc_msgSend_initWithPersona_accountIdentifier_dsid_altDSID_serviceURL_chunkStoreURL_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersona:accountIdentifier:dsid:altDSID:serviceURL:chunkStoreURL:options:");
}

id objc_msgSend_initWithPersona_enginePolicyProvider_appManager_plugins_serviceRestoreMode_osBuildVersionOfBackup_shouldRestoreSystemFiles_isRestoringPrimaryAccount_shouldCreateMissingIntermediateDirectories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersona:enginePolicyProvider:appManager:plugins:serviceRestoreMode:osBuildVersionOfBackup:shouldRestoreSystemFiles:isRestoringPrimaryAccount:shouldCreateMissingIntermediateDirectories:");
}

id objc_msgSend_initWithPersona_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersona:error:");
}

id objc_msgSend_initWithPersonaID_didRestoreFromBackup_didRestoreFromCloudBackup_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersonaID:didRestoreFromBackup:didRestoreFromCloudBackup:error:");
}

id objc_msgSend_initWithPersonaIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersonaIdentifier:");
}

id objc_msgSend_initWithPlaceholderFileList_persona_cache_appManager_domainQuotasByDomainHMAC_restrictedDomains_disabledDomains_domainToSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlaceholderFileList:persona:cache:appManager:domainQuotasByDomainHMAC:restrictedDomains:disabledDomains:domainToSize:");
}

id objc_msgSend_initWithPlistDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlistDict:");
}

id objc_msgSend_initWithPlistPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlistPath:");
}

id objc_msgSend_initWithPolicy_snapshotFormat_snapshotDir_snapshotUUID_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPolicy:snapshotFormat:snapshotDir:snapshotUUID:delegate:");
}

id objc_msgSend_initWithProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProgress:");
}

id objc_msgSend_initWithProperties_database_databaseIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProperties:database:databaseIndex:");
}

id objc_msgSend_initWithPropertyList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPropertyList:");
}

id objc_msgSend_initWithPropertyList_volumeMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPropertyList:volumeMountPoint:");
}

id objc_msgSend_initWithProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProtectionClass:");
}

id objc_msgSend_initWithQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQuery:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueue_volumeMountPoint_databaseUUID_eventID_rootPathToMonitor_eventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:volumeMountPoint:databaseUUID:eventID:rootPathToMonitor:eventHandler:");
}

id objc_msgSend_initWithReason_activityType_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReason:activityType:options:");
}

id objc_msgSend_initWithReason_settingsContext_debugContext_serviceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReason:settingsContext:debugContext:serviceManager:");
}

id objc_msgSend_initWithReason_settingsContext_debugContext_serviceManager_domainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReason:settingsContext:debugContext:serviceManager:domainManager:");
}

id objc_msgSend_initWithRecord_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecord:cache:");
}

id objc_msgSend_initWithRecord_cache_manifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecord:cache:manifest:");
}

id objc_msgSend_initWithRecord_cache_snapshot_domainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecord:cache:snapshot:domainName:");
}

id objc_msgSend_initWithRecord_device_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecord:device:");
}

id objc_msgSend_initWithRecordID_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordID:action:");
}

id objc_msgSend_initWithRecordID_contents_extension_pluginFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordID:contents:extension:pluginFields:");
}

id objc_msgSend_initWithRecordIDSuffix_signature_size_type_compressionMethod_encryptionKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordIDSuffix:signature:size:type:compressionMethod:encryptionKey:");
}

id objc_msgSend_initWithRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordIDs:");
}

id objc_msgSend_initWithRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithRecordType_predicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:predicate:");
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:recordID:");
}

id objc_msgSend_initWithRecordZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneIDs:");
}

id objc_msgSend_initWithRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordsToSave:recordIDsToDelete:");
}

id objc_msgSend_initWithRequest_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:properties:");
}

id objc_msgSend_initWithRequestType_device_duration_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestType:device:duration:error:");
}

id objc_msgSend_initWithRestoreEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRestoreEngine:");
}

id objc_msgSend_initWithRestoreEngine_enumeratorCache_domain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRestoreEngine:enumeratorCache:domain:");
}

id objc_msgSend_initWithRestoreEngine_file_destinationPath_shouldSetProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRestoreEngine:file:destinationPath:shouldSetProtectionClass:");
}

id objc_msgSend_initWithRootPath_policy_depot_fetcher_plan_progress_verifier_logger_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootPath:policy:depot:fetcher:plan:progress:verifier:logger:error:");
}

id objc_msgSend_initWithRootURL_fileTransferSession_uploadBatchSize_concurrentUploadBatchCount_concurrentOpenBatchCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootURL:fileTransferSession:uploadBatchSize:concurrentUploadBatchCount:concurrentOpenBatchCount:");
}

id objc_msgSend_initWithSafeHarborDir_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSafeHarborDir:");
}

id objc_msgSend_initWithSamplingPeriod_maximumNumberOfPeriods_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSamplingPeriod:maximumNumberOfPeriods:");
}

id objc_msgSend_initWithSandbox_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSandbox:");
}

id objc_msgSend_initWithScript_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScript:delegate:");
}

id objc_msgSend_initWithScript_delegate_index_subindex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScript:delegate:index:subindex:");
}

id objc_msgSend_initWithSeconds_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSeconds:queue:");
}

id objc_msgSend_initWithService_function_responseType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:function:responseType:");
}

id objc_msgSend_initWithService_function_responseType_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:function:responseType:callback:");
}

id objc_msgSend_initWithServiceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceManager:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithServiceName_functionName_responseClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:functionName:responseClass:");
}

id objc_msgSend_initWithSessionInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSessionInfo:");
}

id objc_msgSend_initWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSet:");
}

id objc_msgSend_initWithSettingsContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSettingsContext:");
}

id objc_msgSend_initWithSettingsContext_debugContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSettingsContext:debugContext:");
}

id objc_msgSend_initWithSettingsContext_debugContext_domainManager_serviceManager_excludedAppBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSettingsContext:debugContext:domainManager:serviceManager:excludedAppBundleIDs:");
}

id objc_msgSend_initWithSettingsContext_domainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSettingsContext:domainManager:");
}

id objc_msgSend_initWithSettingsContext_serviceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSettingsContext:serviceManager:");
}

id objc_msgSend_initWithSettingsContext_serviceManager_domainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSettingsContext:serviceManager:domainManager:");
}

id objc_msgSend_initWithSnapshot_domainName_manifestID_count_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSnapshot:domainName:manifestID:count:cache:");
}

id objc_msgSend_initWithSnapshotID_backupUUID_snapshotUUID_commitID_format_deviceName_date_created_modified_state_isCompatible_systemVersion_buildVersion_quotaReserved_type_backupPolicy_accountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSnapshotID:backupUUID:snapshotUUID:commitID:format:deviceName:date:created:modified:state:isCompatible:systemVersion:buildVersion:quotaReserved:type:backupPolicy:accountType:");
}

id objc_msgSend_initWithSnapshotName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSnapshotName:");
}

id objc_msgSend_initWithSourceDeviceUDID_deviceName_deviceClass_buildVersion_productVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSourceDeviceUDID:deviceName:deviceClass:buildVersion:productVersion:");
}

id objc_msgSend_initWithStashedAssetPath_stashedAssetIsDecrypted_decodedAssetPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStashedAssetPath:stashedAssetIsDecrypted:decodedAssetPath:");
}

id objc_msgSend_initWithState_progress_estimatedTimeRemaining_error_errors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:progress:estimatedTimeRemaining:error:errors:");
}

id objc_msgSend_initWithState_type_owner_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:type:owner:timeout:");
}

id objc_msgSend_initWithStmt_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStmt:block:");
}

id objc_msgSend_initWithStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStream:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithTargetDeviceUDID_deviceName_deviceClass_buildVersion_productVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetDeviceUDID:deviceName:deviceClass:buildVersion:productVersion:");
}

id objc_msgSend_initWithTargetDeviceUDID_freeDiskSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetDeviceUDID:freeDiskSpace:");
}

id objc_msgSend_initWithTimeInterval_serviceIdentifier_target_selector_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:serviceIdentifier:target:selector:userInfo:");
}

id objc_msgSend_initWithTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTracker:");
}

id objc_msgSend_initWithType_count_size_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:count:size:duration:");
}

id objc_msgSend_initWithType_encodingMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:encodingMethod:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUID_cache_backupEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:cache:backupEnabled:");
}

id objc_msgSend_initWithUUID_data_secret_device_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:data:secret:device:");
}

id objc_msgSend_initWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedLongLong:");
}

id objc_msgSend_initWithUploadSize_uploadFileCount_uploadSizeExcludingHardlinksAndClones_freeDiskSpace_purgeableDiskSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUploadSize:uploadFileCount:uploadSizeExcludingHardlinksAndClones:freeDiskSpace:purgeableDiskSpace:");
}

id objc_msgSend_initWithUrl_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUrl:error:");
}

id objc_msgSend_initWithUserURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserURL:");
}

id objc_msgSend_initWithUserURL_outputUserURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserURL:outputUserURL:");
}

id objc_msgSend_initWithVolumePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVolumePath:");
}

id objc_msgSend_initWithXPCConnection_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithXPCConnection:delegate:delegateQueue:");
}

id objc_msgSend_initWithZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneID:");
}

id objc_msgSend_initWithZoneName_ownerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:ownerName:");
}

id objc_msgSend_initial(void *a1, const char *a2, ...)
{
  return _[a1 initial];
}

id objc_msgSend_initialMegaBackup(void *a1, const char *a2, ...)
{
  return _[a1 initialMegaBackup];
}

id objc_msgSend_initiatedBackupRequest(void *a1, const char *a2, ...)
{
  return _[a1 initiatedBackupRequest];
}

id objc_msgSend_injectedError(void *a1, const char *a2, ...)
{
  return _[a1 injectedError];
}

id objc_msgSend_inode(void *a1, const char *a2, ...)
{
  return _[a1 inode];
}

id objc_msgSend_inodeNumber(void *a1, const char *a2, ...)
{
  return _[a1 inodeNumber];
}

id objc_msgSend_inputStreamWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputStreamWithData:");
}

id objc_msgSend_insertAssetRecordReferenceForDomainRecordID_assetRecordID_isDeletedAsset_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertAssetRecordReferenceForDomainRecordID:assetRecordID:isDeletedAsset:error:");
}

id objc_msgSend_insertDomainRecordForSnapshotID_domain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertDomainRecordForSnapshotID:domain:error:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertOperation_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertOperation:atIndex:");
}

id objc_msgSend_insertSnapshotRecord_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSnapshotRecord:error:");
}

id objc_msgSend_installCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 installCoordinator];
}

id objc_msgSend_installType(void *a1, const char *a2, ...)
{
  return _[a1 installType];
}

id objc_msgSend_installTypeForBundleID_demotedAppsPlist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installTypeForBundleID:demotedAppsPlist:");
}

id objc_msgSend_insufficientFreeSpaceToRestoreForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insufficientFreeSpaceToRestoreForAccount:");
}

id objc_msgSend_int64Column_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "int64Column:");
}

id objc_msgSend_intAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intAtIndex:");
}

id objc_msgSend_intColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intColumn:");
}

id objc_msgSend_intForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intForName:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerAtIndex:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internalDelegate(void *a1, const char *a2, ...)
{
  return _[a1 internalDelegate];
}

id objc_msgSend_internalNotificationRef(void *a1, const char *a2, ...)
{
  return _[a1 internalNotificationRef];
}

id objc_msgSend_interruptWithCause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interruptWithCause:");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return _[a1 interval];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateUploadedAssetForDomain_inode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateUploadedAssetForDomain:inode:error:");
}

id objc_msgSend_invalidated(void *a1, const char *a2, ...)
{
  return _[a1 invalidated];
}

id objc_msgSend_isAbsolutePath(void *a1, const char *a2, ...)
{
  return _[a1 isAbsolutePath];
}

id objc_msgSend_isAdded(void *a1, const char *a2, ...)
{
  return _[a1 isAdded];
}

id objc_msgSend_isAppDomain(void *a1, const char *a2, ...)
{
  return _[a1 isAppDomain];
}

id objc_msgSend_isAppGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppGroupName:");
}

id objc_msgSend_isAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppName:");
}

id objc_msgSend_isAppPlaceholderName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppPlaceholderName:");
}

id objc_msgSend_isAppPluginName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppPluginName:");
}

id objc_msgSend_isAssetNotAvailableError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAssetNotAvailableError:");
}

id objc_msgSend_isAssetNotFoundError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAssetNotFoundError:");
}

id objc_msgSend_isAssetTooLargeError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAssetTooLargeError:");
}

id objc_msgSend_isAuthenticated(void *a1, const char *a2, ...)
{
  return _[a1 isAuthenticated];
}

id objc_msgSend_isAutomation(void *a1, const char *a2, ...)
{
  return _[a1 isAutomation];
}

id objc_msgSend_isBackground(void *a1, const char *a2, ...)
{
  return _[a1 isBackground];
}

id objc_msgSend_isBackgroundApp(void *a1, const char *a2, ...)
{
  return _[a1 isBackgroundApp];
}

id objc_msgSend_isBackgroundFile(void *a1, const char *a2, ...)
{
  return _[a1 isBackgroundFile];
}

id objc_msgSend_isBackgroundFiles(void *a1, const char *a2, ...)
{
  return _[a1 isBackgroundFiles];
}

id objc_msgSend_isBackgroundRestore(void *a1, const char *a2, ...)
{
  return _[a1 isBackgroundRestore];
}

id objc_msgSend_isBackgroundRestoringAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackgroundRestoringAccount:");
}

id objc_msgSend_isBackgroundRestoringAnyAccount(void *a1, const char *a2, ...)
{
  return _[a1 isBackgroundRestoringAnyAccount];
}

id objc_msgSend_isBackupAllowedOnCellular(void *a1, const char *a2, ...)
{
  return _[a1 isBackupAllowedOnCellular];
}

id objc_msgSend_isBackupDisabledByMCPolicy(void *a1, const char *a2, ...)
{
  return _[a1 isBackupDisabledByMCPolicy];
}

id objc_msgSend_isBackupDomain(void *a1, const char *a2, ...)
{
  return _[a1 isBackupDomain];
}

id objc_msgSend_isBackupEmpty(void *a1, const char *a2, ...)
{
  return _[a1 isBackupEmpty];
}

id objc_msgSend_isBackupEnabledForDomainName_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackupEnabledForDomainName:account:");
}

id objc_msgSend_isBackupEngine(void *a1, const char *a2, ...)
{
  return _[a1 isBackupEngine];
}

id objc_msgSend_isBackupNew(void *a1, const char *a2, ...)
{
  return _[a1 isBackupNew];
}

id objc_msgSend_isBackupOld(void *a1, const char *a2, ...)
{
  return _[a1 isBackupOld];
}

id objc_msgSend_isBackupOnCellularAllowedWithAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackupOnCellularAllowedWithAccount:error:");
}

id objc_msgSend_isBackupOnCellularEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isBackupOnCellularEnabled];
}

id objc_msgSend_isBeneficiaryAccount(void *a1, const char *a2, ...)
{
  return _[a1 isBeneficiaryAccount];
}

id objc_msgSend_isBeneficiaryForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBeneficiaryForAccount:");
}

id objc_msgSend_isBeta(void *a1, const char *a2, ...)
{
  return _[a1 isBeta];
}

id objc_msgSend_isCKError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCKError:");
}

id objc_msgSend_isCKError_matchingSubErrors_withCodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCKError:matchingSubErrors:withCodes:");
}

id objc_msgSend_isCKError_withCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCKError:withCode:");
}

id objc_msgSend_isCKError_withCodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCKError:withCodes:");
}

id objc_msgSend_isCKInternalError_withCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCKInternalError:withCode:");
}

id objc_msgSend_isCKNotFoundError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCKNotFoundError:");
}

id objc_msgSend_isCKPartialFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCKPartialFailureError:");
}

id objc_msgSend_isCameraRollDomain(void *a1, const char *a2, ...)
{
  return _[a1 isCameraRollDomain];
}

id objc_msgSend_isCanceled(void *a1, const char *a2, ...)
{
  return _[a1 isCanceled];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isCancelledError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelledError:");
}

id objc_msgSend_isCancelledXPCActivityDeferredError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelledXPCActivityDeferredError:");
}

id objc_msgSend_isCloudKitEngine(void *a1, const char *a2, ...)
{
  return _[a1 isCloudKitEngine];
}

id objc_msgSend_isCloudPhotosEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCloudPhotosEnabled];
}

id objc_msgSend_isCommitted(void *a1, const char *a2, ...)
{
  return _[a1 isCommitted];
}

id objc_msgSend_isCompatible(void *a1, const char *a2, ...)
{
  return _[a1 isCompatible];
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return _[a1 isComplete];
}

id objc_msgSend_isCompressed(void *a1, const char *a2, ...)
{
  return _[a1 isCompressed];
}

id objc_msgSend_isContainerizedDomain(void *a1, const char *a2, ...)
{
  return _[a1 isContainerizedDomain];
}

id objc_msgSend_isContainerizedName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContainerizedName:");
}

id objc_msgSend_isContentUnavailableDueToCxExpiration_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContentUnavailableDueToCxExpiration:error:");
}

id objc_msgSend_isDataSeparated(void *a1, const char *a2, ...)
{
  return _[a1 isDataSeparated];
}

id objc_msgSend_isDataSeparatedPersona(void *a1, const char *a2, ...)
{
  return _[a1 isDataSeparatedPersona];
}

id objc_msgSend_isDataless(void *a1, const char *a2, ...)
{
  return _[a1 isDataless];
}

id objc_msgSend_isDate_inSameDayAsDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDate:inSameDayAsDate:");
}

id objc_msgSend_isDeleted(void *a1, const char *a2, ...)
{
  return _[a1 isDeleted];
}

id objc_msgSend_isDeviceKeyBagLocked(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceKeyBagLocked];
}

id objc_msgSend_isDeviceTransfer(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceTransfer];
}

id objc_msgSend_isDeviceTransferEngine(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceTransferEngine];
}

id objc_msgSend_isDiagnosticSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isDiagnosticSubmissionAllowed];
}

id objc_msgSend_isDirectory(void *a1, const char *a2, ...)
{
  return _[a1 isDirectory];
}

id objc_msgSend_isDomainInPreviousSnapshot_outResult_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDomainInPreviousSnapshot:outResult:error:");
}

id objc_msgSend_isDomainMarkedAsModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDomainMarkedAsModified:");
}

id objc_msgSend_isDomainNameEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDomainNameEnabled:");
}

id objc_msgSend_isDomainNameEnabled_forPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDomainNameEnabled:forPersona:");
}

id objc_msgSend_isDowngraded(void *a1, const char *a2, ...)
{
  return _[a1 isDowngraded];
}

id objc_msgSend_isDriveEngine(void *a1, const char *a2, ...)
{
  return _[a1 isDriveEngine];
}

id objc_msgSend_isEmailVerified(void *a1, const char *a2, ...)
{
  return _[a1 isEmailVerified];
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEnabled];
}

id objc_msgSend_isEnabledForBackup(void *a1, const char *a2, ...)
{
  return _[a1 isEnabledForBackup];
}

id objc_msgSend_isEnabledForDataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabledForDataclass:");
}

id objc_msgSend_isEngineInProgressForBundleID_percentComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEngineInProgressForBundleID:percentComplete:");
}

id objc_msgSend_isEnterpriseBookBackupAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isEnterpriseBookBackupAllowed];
}

id objc_msgSend_isEnterprisePersona(void *a1, const char *a2, ...)
{
  return _[a1 isEnterprisePersona];
}

id objc_msgSend_isEphemeralMultiUser(void *a1, const char *a2, ...)
{
  return _[a1 isEphemeralMultiUser];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDomain:");
}

id objc_msgSend_isEqualToFileID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToFileID:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToReference:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isError_withCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isError:withCode:");
}

id objc_msgSend_isError_withCodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isError:withCodes:");
}

id objc_msgSend_isExpired(void *a1, const char *a2, ...)
{
  return _[a1 isExpired];
}

id objc_msgSend_isExternalConfig(void *a1, const char *a2, ...)
{
  return _[a1 isExternalConfig];
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _[a1 isFileURL];
}

id objc_msgSend_isFinalRetry(void *a1, const char *a2, ...)
{
  return _[a1 isFinalRetry];
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _[a1 isFinished];
}

id objc_msgSend_isFinishing(void *a1, const char *a2, ...)
{
  return _[a1 isFinishing];
}

id objc_msgSend_isFlagSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFlagSet:");
}

id objc_msgSend_isForeground(void *a1, const char *a2, ...)
{
  return _[a1 isForeground];
}

id objc_msgSend_isForegroundRestore(void *a1, const char *a2, ...)
{
  return _[a1 isForegroundRestore];
}

id objc_msgSend_isFullBackup(void *a1, const char *a2, ...)
{
  return _[a1 isFullBackup];
}

id objc_msgSend_isFullClone(void *a1, const char *a2, ...)
{
  return _[a1 isFullClone];
}

id objc_msgSend_isGroupAppDomain(void *a1, const char *a2, ...)
{
  return _[a1 isGroupAppDomain];
}

id objc_msgSend_isHardLink(void *a1, const char *a2, ...)
{
  return _[a1 isHardLink];
}

id objc_msgSend_isHoldingWorkAssertionForBackgroundRestore(void *a1, const char *a2, ...)
{
  return _[a1 isHoldingWorkAssertionForBackgroundRestore];
}

id objc_msgSend_isICDPEnabledForDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isICDPEnabledForDSID:");
}

id objc_msgSend_isIPod(void *a1, const char *a2, ...)
{
  return _[a1 isIPod];
}

id objc_msgSend_isIdle(void *a1, const char *a2, ...)
{
  return _[a1 isIdle];
}

id objc_msgSend_isIgnoredAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIgnoredAppleID:");
}

id objc_msgSend_isIncompatible(void *a1, const char *a2, ...)
{
  return _[a1 isIncompatible];
}

id objc_msgSend_isInherited(void *a1, const char *a2, ...)
{
  return _[a1 isInherited];
}

id objc_msgSend_isInitialMegaBackupCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInitialMegaBackupCompleted:");
}

id objc_msgSend_isInstalled(void *a1, const char *a2, ...)
{
  return _[a1 isInstalled];
}

id objc_msgSend_isInternetReachableViaWiFi(void *a1, const char *a2, ...)
{
  return _[a1 isInternetReachableViaWiFi];
}

id objc_msgSend_isInvalid(void *a1, const char *a2, ...)
{
  return _[a1 isInvalid];
}

id objc_msgSend_isLaunchProhibited(void *a1, const char *a2, ...)
{
  return _[a1 isLaunchProhibited];
}

id objc_msgSend_isMBSSession(void *a1, const char *a2, ...)
{
  return _[a1 isMBSSession];
}

id objc_msgSend_isMMCSEncryptedOnly(void *a1, const char *a2, ...)
{
  return _[a1 isMMCSEncryptedOnly];
}

id objc_msgSend_isManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 isManagedAppleID];
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isModified(void *a1, const char *a2, ...)
{
  return _[a1 isModified];
}

id objc_msgSend_isModifiedSince_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isModifiedSince:reason:");
}

id objc_msgSend_isMoving(void *a1, const char *a2, ...)
{
  return _[a1 isMoving];
}

id objc_msgSend_isNSFileNotFoundError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNSFileNotFoundError:");
}

id objc_msgSend_isNetworkAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isNetworkAvailable];
}

id objc_msgSend_isNetworkDisconnectedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNetworkDisconnectedError:");
}

id objc_msgSend_isNotFound(void *a1, const char *a2, ...)
{
  return _[a1 isNotFound];
}

id objc_msgSend_isOTA(void *a1, const char *a2, ...)
{
  return _[a1 isOTA];
}

id objc_msgSend_isOnInexpensiveCellular(void *a1, const char *a2, ...)
{
  return _[a1 isOnInexpensiveCellular];
}

id objc_msgSend_isOnWiFi(void *a1, const char *a2, ...)
{
  return _[a1 isOnWiFi];
}

id objc_msgSend_isOpen(void *a1, const char *a2, ...)
{
  return _[a1 isOpen];
}

id objc_msgSend_isPasscodeSet(void *a1, const char *a2, ...)
{
  return _[a1 isPasscodeSet];
}

id objc_msgSend_isPending(void *a1, const char *a2, ...)
{
  return _[a1 isPending];
}

id objc_msgSend_isPendingUpload(void *a1, const char *a2, ...)
{
  return _[a1 isPendingUpload];
}

id objc_msgSend_isPersistedToServer(void *a1, const char *a2, ...)
{
  return _[a1 isPersistedToServer];
}

id objc_msgSend_isPersonalPersona(void *a1, const char *a2, ...)
{
  return _[a1 isPersonalPersona];
}

id objc_msgSend_isPlaceholder(void *a1, const char *a2, ...)
{
  return _[a1 isPlaceholder];
}

id objc_msgSend_isPlaceholderAppDomain(void *a1, const char *a2, ...)
{
  return _[a1 isPlaceholderAppDomain];
}

id objc_msgSend_isPlaceholderDomain(void *a1, const char *a2, ...)
{
  return _[a1 isPlaceholderDomain];
}

id objc_msgSend_isPlaceholderName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPlaceholderName:");
}

id objc_msgSend_isPluginAppDomain(void *a1, const char *a2, ...)
{
  return _[a1 isPluginAppDomain];
}

id objc_msgSend_isPopulated(void *a1, const char *a2, ...)
{
  return _[a1 isPopulated];
}

id objc_msgSend_isPowerBudgetAvailableForRestore(void *a1, const char *a2, ...)
{
  return _[a1 isPowerBudgetAvailableForRestore];
}

id objc_msgSend_isPrebuddyMode(void *a1, const char *a2, ...)
{
  return _[a1 isPrebuddyMode];
}

id objc_msgSend_isPrimaryAccount(void *a1, const char *a2, ...)
{
  return _[a1 isPrimaryAccount];
}

id objc_msgSend_isPrimaryUser(void *a1, const char *a2, ...)
{
  return _[a1 isPrimaryUser];
}

id objc_msgSend_isProtected(void *a1, const char *a2, ...)
{
  return _[a1 isProtected];
}

id objc_msgSend_isProtected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isProtected:");
}

id objc_msgSend_isProvisionedForDataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isProvisionedForDataclass:");
}

id objc_msgSend_isRefreshNeededForBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRefreshNeededForBackupUDID:");
}

id objc_msgSend_isRegularFile(void *a1, const char *a2, ...)
{
  return _[a1 isRegularFile];
}

id objc_msgSend_isRemoving(void *a1, const char *a2, ...)
{
  return _[a1 isRemoving];
}

id objc_msgSend_isReset(void *a1, const char *a2, ...)
{
  return _[a1 isReset];
}

id objc_msgSend_isRestoreEngine(void *a1, const char *a2, ...)
{
  return _[a1 isRestoreEngine];
}

id objc_msgSend_isRestoredPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRestoredPath:");
}

id objc_msgSend_isRestoringAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRestoringAccount:");
}

id objc_msgSend_isRestoringFromFileLists_persona_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRestoringFromFileLists:persona:error:");
}

id objc_msgSend_isRestoringPrimaryAccount(void *a1, const char *a2, ...)
{
  return _[a1 isRestoringPrimaryAccount];
}

id objc_msgSend_isRestoringToSameDevice(void *a1, const char *a2, ...)
{
  return _[a1 isRestoringToSameDevice];
}

id objc_msgSend_isRestoringWithFileLists(void *a1, const char *a2, ...)
{
  return _[a1 isRestoringWithFileLists];
}

id objc_msgSend_isRestricted(void *a1, const char *a2, ...)
{
  return _[a1 isRestricted];
}

id objc_msgSend_isResumableCacheRefreshError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isResumableCacheRefreshError:");
}

id objc_msgSend_isRetryAfterError_retryAfterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRetryAfterError:retryAfterDate:");
}

id objc_msgSend_isRetryableRestoreError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRetryableRestoreError:");
}

id objc_msgSend_isRetryableXPCError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRetryableXPCError:");
}

id objc_msgSend_isSQLiteFile(void *a1, const char *a2, ...)
{
  return _[a1 isSQLiteFile];
}

id objc_msgSend_isSQLiteFileAtPath_result_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSQLiteFileAtPath:result:error:");
}

id objc_msgSend_isSQLiteFileHandle_result_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSQLiteFileHandle:result:error:");
}

id objc_msgSend_isSafeHarbor(void *a1, const char *a2, ...)
{
  return _[a1 isSafeHarbor];
}

id objc_msgSend_isScanningPlaceholderAppDomain(void *a1, const char *a2, ...)
{
  return _[a1 isScanningPlaceholderAppDomain];
}

id objc_msgSend_isScanningPlaceholderDomain(void *a1, const char *a2, ...)
{
  return _[a1 isScanningPlaceholderDomain];
}

id objc_msgSend_isServiceEngine(void *a1, const char *a2, ...)
{
  return _[a1 isServiceEngine];
}

id objc_msgSend_isStaleSnapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStaleSnapshotID:backupUDID:");
}

id objc_msgSend_isStatusChangedComparedToFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStatusChangedComparedToFile:");
}

id objc_msgSend_isSubclassOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubclassOfClass:");
}

id objc_msgSend_isSymbolicLink(void *a1, const char *a2, ...)
{
  return _[a1 isSymbolicLink];
}

id objc_msgSend_isSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 isSystemApp];
}

id objc_msgSend_isSystemContainer(void *a1, const char *a2, ...)
{
  return _[a1 isSystemContainer];
}

id objc_msgSend_isSystemContainerDomain(void *a1, const char *a2, ...)
{
  return _[a1 isSystemContainerDomain];
}

id objc_msgSend_isSystemContainerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSystemContainerName:");
}

id objc_msgSend_isSystemDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSystemDomainName:");
}

id objc_msgSend_isSystemSharedContainer(void *a1, const char *a2, ...)
{
  return _[a1 isSystemSharedContainer];
}

id objc_msgSend_isSystemSharedContainerDomain(void *a1, const char *a2, ...)
{
  return _[a1 isSystemSharedContainerDomain];
}

id objc_msgSend_isSystemSharedContainerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSystemSharedContainerName:");
}

id objc_msgSend_isThermallyThrottled(void *a1, const char *a2, ...)
{
  return _[a1 isThermallyThrottled];
}

id objc_msgSend_isTopLevelDirectoryToExcludeFromiCloud(void *a1, const char *a2, ...)
{
  return _[a1 isTopLevelDirectoryToExcludeFromiCloud];
}

id objc_msgSend_isTransientError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTransientError:");
}

id objc_msgSend_isTransitioningVolumes(void *a1, const char *a2, ...)
{
  return _[a1 isTransitioningVolumes];
}

id objc_msgSend_isUninstalledAppDomain(void *a1, const char *a2, ...)
{
  return _[a1 isUninstalledAppDomain];
}

id objc_msgSend_isUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 isUnlocked];
}

id objc_msgSend_isUnmodified(void *a1, const char *a2, ...)
{
  return _[a1 isUnmodified];
}

id objc_msgSend_isUploading(void *a1, const char *a2, ...)
{
  return _[a1 isUploading];
}

id objc_msgSend_isUserVisibleKeychainSyncEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isUserVisibleKeychainSyncEnabled];
}

id objc_msgSend_isVersionAmbiguous(void *a1, const char *a2, ...)
{
  return _[a1 isVersionAmbiguous];
}

id objc_msgSend_isXPCActivityDeferredError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isXPCActivityDeferredError:");
}

id objc_msgSend_itemAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemAtIndex:");
}

id objc_msgSend_itemCount(void *a1, const char *a2, ...)
{
  return _[a1 itemCount];
}

id objc_msgSend_itemID(void *a1, const char *a2, ...)
{
  return _[a1 itemID];
}

id objc_msgSend_itemURL(void *a1, const char *a2, ...)
{
  return _[a1 itemURL];
}

id objc_msgSend_items(void *a1, const char *a2, ...)
{
  return _[a1 items];
}

id objc_msgSend_journalActionCount(void *a1, const char *a2, ...)
{
  return _[a1 journalActionCount];
}

id objc_msgSend_journalForBackupUUID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "journalForBackupUUID:account:connection:error:");
}

id objc_msgSend_journalForDevice_cache_engine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "journalForDevice:cache:engine:");
}

id objc_msgSend_journalLastModifiedForBackupUUID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "journalLastModifiedForBackupUUID:account:connection:error:");
}

id objc_msgSend_journalReplaySucceeded(void *a1, const char *a2, ...)
{
  return _[a1 journalReplaySucceeded];
}

id objc_msgSend_journalVerificationErrorCount(void *a1, const char *a2, ...)
{
  return _[a1 journalVerificationErrorCount];
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _[a1 key];
}

id objc_msgSend_keyAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyAtIndex:");
}

id objc_msgSend_keyBagForUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyBagForUUID:");
}

id objc_msgSend_keyBagInfoForBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyBagInfoForBackupUDID:");
}

id objc_msgSend_keyBagIsLocking(void *a1, const char *a2, ...)
{
  return _[a1 keyBagIsLocking];
}

id objc_msgSend_keyBagIsUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 keyBagIsUnlocked];
}

id objc_msgSend_keyBagUUIDForEncryptionKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyBagUUIDForEncryptionKey:");
}

id objc_msgSend_keyData(void *a1, const char *a2, ...)
{
  return _[a1 keyData];
}

id objc_msgSend_keyDataForKey_salt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyDataForKey:salt:");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_keyID(void *a1, const char *a2, ...)
{
  return _[a1 keyID];
}

id objc_msgSend_keybag(void *a1, const char *a2, ...)
{
  return _[a1 keybag];
}

id objc_msgSend_keybagData(void *a1, const char *a2, ...)
{
  return _[a1 keybagData];
}

id objc_msgSend_keybagFileWithPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keybagFileWithPath:error:");
}

id objc_msgSend_keybagID(void *a1, const char *a2, ...)
{
  return _[a1 keybagID];
}

id objc_msgSend_keybagIsLocking(void *a1, const char *a2, ...)
{
  return _[a1 keybagIsLocking];
}

id objc_msgSend_keybagIsLockingWithAccount_serviceManager_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keybagIsLockingWithAccount:serviceManager:completion:");
}

id objc_msgSend_keybagIsUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 keybagIsUnlocked];
}

id objc_msgSend_keybagIsUnlockedWithAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keybagIsUnlockedWithAccount:completion:");
}

id objc_msgSend_keybagIsUnlockedWithAccount_serviceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keybagIsUnlockedWithAccount:serviceManager:");
}

id objc_msgSend_keybagManager(void *a1, const char *a2, ...)
{
  return _[a1 keybagManager];
}

id objc_msgSend_keybagRefs(void *a1, const char *a2, ...)
{
  return _[a1 keybagRefs];
}

id objc_msgSend_keybagRefsByUUID(void *a1, const char *a2, ...)
{
  return _[a1 keybagRefsByUUID];
}

id objc_msgSend_keybagUUID(void *a1, const char *a2, ...)
{
  return _[a1 keybagUUID];
}

id objc_msgSend_keybagUUID_keybagID_forBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keybagUUID:keybagID:forBackupUDID:");
}

id objc_msgSend_keybagUUIDData(void *a1, const char *a2, ...)
{
  return _[a1 keybagUUIDData];
}

id objc_msgSend_keybagUUIDString(void *a1, const char *a2, ...)
{
  return _[a1 keybagUUIDString];
}

id objc_msgSend_keybagWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keybagWithData:error:");
}

id objc_msgSend_keybagWithDevice_keybagUUID_operationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keybagWithDevice:keybagUUID:operationTracker:error:");
}

id objc_msgSend_keybagWithPassword_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keybagWithPassword:error:");
}

id objc_msgSend_keybagWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keybagWithUUID:");
}

id objc_msgSend_keybagsByUUID(void *a1, const char *a2, ...)
{
  return _[a1 keybagsByUUID];
}

id objc_msgSend_keybagsByUUIDString(void *a1, const char *a2, ...)
{
  return _[a1 keybagsByUUIDString];
}

id objc_msgSend_keychainFileName(void *a1, const char *a2, ...)
{
  return _[a1 keychainFileName];
}

id objc_msgSend_keychainItemWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainItemWithAttributes:");
}

id objc_msgSend_keys(void *a1, const char *a2, ...)
{
  return _[a1 keys];
}

id objc_msgSend_keysAndValuesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysAndValuesAtIndex:");
}

id objc_msgSend_keysAndValuesCount(void *a1, const char *a2, ...)
{
  return _[a1 keysAndValuesCount];
}

id objc_msgSend_keysCount(void *a1, const char *a2, ...)
{
  return _[a1 keysCount];
}

id objc_msgSend_keysForFD_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysForFD:error:");
}

id objc_msgSend_keysForPathFSR_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysForPathFSR:error:");
}

id objc_msgSend_keysFromDictionary_toIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysFromDictionary:toIndex:");
}

id objc_msgSend_keysSortedByValueUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysSortedByValueUsingComparator:");
}

id objc_msgSend_keysToFetchWithContents(void *a1, const char *a2, ...)
{
  return _[a1 keysToFetchWithContents];
}

id objc_msgSend_keysToFetchWithoutContents(void *a1, const char *a2, ...)
{
  return _[a1 keysToFetchWithoutContents];
}

id objc_msgSend_keysetForBackupUDID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysetForBackupUDID:lastModified:error:");
}

id objc_msgSend_keysetForBackupUDID_lastModified_userInitiated_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysetForBackupUDID:lastModified:userInitiated:error:");
}

id objc_msgSend_keysetForBackupUDID_lastModified_userInitiated_willVerifyCredentialsCallback_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysetForBackupUDID:lastModified:userInitiated:willVerifyCredentialsCallback:error:");
}

id objc_msgSend_knownAccounts(void *a1, const char *a2, ...)
{
  return _[a1 knownAccounts];
}

id objc_msgSend_knownAccountsByDSID(void *a1, const char *a2, ...)
{
  return _[a1 knownAccountsByDSID];
}

id objc_msgSend_l28BackupStatsForAccount_backupReason_backupError_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l28BackupStatsForAccount:backupReason:backupError:error:");
}

id objc_msgSend_l28BackupTelemetryPlistPath(void *a1, const char *a2, ...)
{
  return _[a1 l28BackupTelemetryPlistPath];
}

id objc_msgSend_l28StatsTelemetryPolicy_plistPath_backupReason_backupError_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l28StatsTelemetryPolicy:plistPath:backupReason:backupError:error:");
}

id objc_msgSend_last(void *a1, const char *a2, ...)
{
  return _[a1 last];
}

id objc_msgSend_lastAcquired(void *a1, const char *a2, ...)
{
  return _[a1 lastAcquired];
}

id objc_msgSend_lastBackedUpFileForFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastBackedUpFileForFile:error:");
}

id objc_msgSend_lastBackedUpFileWithDomainName_relativePath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastBackedUpFileWithDomainName:relativePath:error:");
}

id objc_msgSend_lastConsecutiveRetryStartTime(void *a1, const char *a2, ...)
{
  return _[a1 lastConsecutiveRetryStartTime];
}

id objc_msgSend_lastDuration(void *a1, const char *a2, ...)
{
  return _[a1 lastDuration];
}

id objc_msgSend_lastError(void *a1, const char *a2, ...)
{
  return _[a1 lastError];
}

id objc_msgSend_lastKeyBag(void *a1, const char *a2, ...)
{
  return _[a1 lastKeyBag];
}

id objc_msgSend_lastModified(void *a1, const char *a2, ...)
{
  return _[a1 lastModified];
}

id objc_msgSend_lastModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastModifiedDate];
}

id objc_msgSend_lastModifiedForSQLiteFileAtPath_time_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastModifiedForSQLiteFileAtPath:time:error:");
}

id objc_msgSend_lastNeedsReplenishingTime(void *a1, const char *a2, ...)
{
  return _[a1 lastNeedsReplenishingTime];
}

id objc_msgSend_lastNotifiedState(void *a1, const char *a2, ...)
{
  return _[a1 lastNotifiedState];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastOnConditionChargingType(void *a1, const char *a2, ...)
{
  return _[a1 lastOnConditionChargingType];
}

id objc_msgSend_lastOnConditionDate(void *a1, const char *a2, ...)
{
  return _[a1 lastOnConditionDate];
}

id objc_msgSend_lastOnConditionEvents(void *a1, const char *a2, ...)
{
  return _[a1 lastOnConditionEvents];
}

id objc_msgSend_lastOnConditionEventsForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastOnConditionEventsForAccount:");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastRetryAttemptTime(void *a1, const char *a2, ...)
{
  return _[a1 lastRetryAttemptTime];
}

id objc_msgSend_lastStatusChange(void *a1, const char *a2, ...)
{
  return _[a1 lastStatusChange];
}

id objc_msgSend_lastStatusChangeDate(void *a1, const char *a2, ...)
{
  return _[a1 lastStatusChangeDate];
}

id objc_msgSend_lastUpdateProgressInfo(void *a1, const char *a2, ...)
{
  return _[a1 lastUpdateProgressInfo];
}

id objc_msgSend_lastWatchdogResume(void *a1, const char *a2, ...)
{
  return _[a1 lastWatchdogResume];
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_latestGMSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 latestGMSnapshot];
}

id objc_msgSend_legacyController(void *a1, const char *a2, ...)
{
  return _[a1 legacyController];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_linkTarget(void *a1, const char *a2, ...)
{
  return _[a1 linkTarget];
}

id objc_msgSend_linkType(void *a1, const char *a2, ...)
{
  return _[a1 linkType];
}

id objc_msgSend_listFilesCount(void *a1, const char *a2, ...)
{
  return _[a1 listFilesCount];
}

id objc_msgSend_listFilesForBackupUDID_snapshotID_offset_limit_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listFilesForBackupUDID:snapshotID:offset:limit:error:");
}

id objc_msgSend_livePath(void *a1, const char *a2, ...)
{
  return _[a1 livePath];
}

id objc_msgSend_loadAppsWithPersona_safeHarbors_dataSeparatedBundleIDs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAppsWithPersona:safeHarbors:dataSeparatedBundleIDs:error:");
}

id objc_msgSend_loadAppsWithPersona_safeHarbors_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAppsWithPersona:safeHarbors:error:");
}

id objc_msgSend_loadBackupStateInfoForInitialMegaBackup_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadBackupStateInfoForInitialMegaBackup:account:");
}

id objc_msgSend_loadConfigurationWithContainer_databaseManager_policy_operationGroup_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadConfigurationWithContainer:databaseManager:policy:operationGroup:completion:");
}

id objc_msgSend_loadFromCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadFromCache:");
}

id objc_msgSend_loadRestoreKeyBagsByIDWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadRestoreKeyBagsByIDWithError:");
}

id objc_msgSend_loadRestoreKeyBagsWithAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadRestoreKeyBagsWithAccount:error:");
}

id objc_msgSend_loadRestoreStateInfo(void *a1, const char *a2, ...)
{
  return _[a1 loadRestoreStateInfo];
}

id objc_msgSend_loadRestoreStateInfoWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadRestoreStateInfoWithAccount:");
}

id objc_msgSend_loadRestoreStateWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadRestoreStateWithAccount:");
}

id objc_msgSend_loadTypeToStringWithLoadType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadTypeToStringWithLoadType:");
}

id objc_msgSend_localCommittedForSnapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localCommittedForSnapshotID:backupUDID:");
}

id objc_msgSend_localSize(void *a1, const char *a2, ...)
{
  return _[a1 localSize];
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeWithLocaleIdentifier:");
}

id objc_msgSend_localizedCapitalizedString(void *a1, const char *a2, ...)
{
  return _[a1 localizedCapitalizedString];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_localizedNameForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedNameForContext:");
}

id objc_msgSend_localizedNameWithPreferredLocalizations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedNameWithPreferredLocalizations:");
}

id objc_msgSend_localizedStringForCountdownFrom_toDate_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForCountdownFrom:toDate:reply:");
}

id objc_msgSend_localizedStringForEstimatedTimeRemaining_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForEstimatedTimeRemaining:reply:");
}

id objc_msgSend_localizedStringForStatusCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForStatusCode:");
}

id objc_msgSend_localizedStringFromByteCount_countStyle_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringFromByteCount:countStyle:reply:");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockForBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockForBackupUDID:");
}

id objc_msgSend_lockManager(void *a1, const char *a2, ...)
{
  return _[a1 lockManager];
}

id objc_msgSend_lockManager_failedToAcquireLockWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockManager:failedToAcquireLockWithError:");
}

id objc_msgSend_lockManager_failedToReleaseLockWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockManager:failedToReleaseLockWithError:");
}

id objc_msgSend_lockManagerDidAcquireLock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockManagerDidAcquireLock:");
}

id objc_msgSend_lockManagerDidReleaseLock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockManagerDidReleaseLock:");
}

id objc_msgSend_lockManagerWithAccount_backupUDID_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockManagerWithAccount:backupUDID:type:");
}

id objc_msgSend_lockWithState_type_owner_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockWithState:type:owner:timeout:");
}

id objc_msgSend_lockWithState_type_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockWithState:type:timeout:");
}

id objc_msgSend_lockdownKeys(void *a1, const char *a2, ...)
{
  return _[a1 lockdownKeys];
}

id objc_msgSend_lockdownShouldDisableDeviceRestore(void *a1, const char *a2, ...)
{
  return _[a1 lockdownShouldDisableDeviceRestore];
}

id objc_msgSend_locked(void *a1, const char *a2, ...)
{
  return _[a1 locked];
}

id objc_msgSend_log(void *a1, const char *a2, ...)
{
  return _[a1 log];
}

id objc_msgSend_logCloneForRestorable_state_source_target_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logCloneForRestorable:state:source:target:");
}

id objc_msgSend_logForegroundRestoreFinished(void *a1, const char *a2, ...)
{
  return _[a1 logForegroundRestoreFinished];
}

id objc_msgSend_logForegroundRestoreStart(void *a1, const char *a2, ...)
{
  return _[a1 logForegroundRestoreStart];
}

id objc_msgSend_logLinkForRestorable_state_source_target_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logLinkForRestorable:state:source:target:");
}

id objc_msgSend_logSetClassForRestorable_state_absolutePath_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSetClassForRestorable:state:absolutePath:value:");
}

id objc_msgSend_logStep_byParty_phase_success_forBundleID_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logStep:byParty:phase:success:forBundleID:description:");
}

id objc_msgSend_loggableDescriptionForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggableDescriptionForError:");
}

id objc_msgSend_loggableStats(void *a1, const char *a2, ...)
{
  return _[a1 loggableStats];
}

id objc_msgSend_loggingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 loggingEnabled];
}

id objc_msgSend_longLivedOperationForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longLivedOperationForRequest:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_makeLockdownAndKeychainConsistentWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeLockdownAndKeychainConsistentWithError:");
}

id objc_msgSend_makeObjectsPerformSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:");
}

id objc_msgSend_makeStateTransition(void *a1, const char *a2, ...)
{
  return _[a1 makeStateTransition];
}

id objc_msgSend_makeTemporaryFilePath(void *a1, const char *a2, ...)
{
  return _[a1 makeTemporaryFilePath];
}

id objc_msgSend_managedPersonas(void *a1, const char *a2, ...)
{
  return _[a1 managedPersonas];
}

id objc_msgSend_managementDomain(void *a1, const char *a2, ...)
{
  return _[a1 managementDomain];
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return _[a1 manager];
}

id objc_msgSend_manager_didFailBackupWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didFailBackupWithError:");
}

id objc_msgSend_manager_didFailRestoreForPath_withContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didFailRestoreForPath:withContext:error:");
}

id objc_msgSend_manager_didFailRestoreWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didFailRestoreWithContext:error:");
}

id objc_msgSend_manager_didFailScanWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didFailScanWithError:");
}

id objc_msgSend_manager_didFinishRestoreForPath_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didFinishRestoreForPath:withContext:");
}

id objc_msgSend_manager_didFinishRestoreWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didFinishRestoreWithContext:");
}

id objc_msgSend_manager_didScanBundleWithID_bytesUsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didScanBundleWithID:bytesUsed:");
}

id objc_msgSend_manager_didScanDomainWithName_forBundleID_bytesUsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didScanDomainWithName:forBundleID:bytesUsed:");
}

id objc_msgSend_manager_didScanFiles_forDomainWithName_bundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didScanFiles:forDomainWithName:bundleID:");
}

id objc_msgSend_manager_didSetBackupEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didSetBackupEnabled:");
}

id objc_msgSend_manager_didUpdateBackgroundRestoreWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didUpdateBackgroundRestoreWithContext:");
}

id objc_msgSend_manager_didUpdateProgress_estimatedTimeRemaining_bytesRemaining_state_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didUpdateProgress:estimatedTimeRemaining:bytesRemaining:state:context:");
}

id objc_msgSend_manager_didUpdateProgress_estimatedTimeRemaining_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didUpdateProgress:estimatedTimeRemaining:context:");
}

id objc_msgSend_managerDidCancelRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managerDidCancelRestore:");
}

id objc_msgSend_managerDidFinishBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managerDidFinishBackup:");
}

id objc_msgSend_managerDidFinishRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managerDidFinishRestore:");
}

id objc_msgSend_managerDidFinishScan_bytesUsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managerDidFinishScan:bytesUsed:");
}

id objc_msgSend_managerToUse(void *a1, const char *a2, ...)
{
  return _[a1 managerToUse];
}

id objc_msgSend_manifest(void *a1, const char *a2, ...)
{
  return _[a1 manifest];
}

id objc_msgSend_manifestChecksums(void *a1, const char *a2, ...)
{
  return _[a1 manifestChecksums];
}

id objc_msgSend_manifestCount(void *a1, const char *a2, ...)
{
  return _[a1 manifestCount];
}

id objc_msgSend_manifestDBWithDrive_sourcePath_properties_domainManager_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manifestDBWithDrive:sourcePath:properties:domainManager:error:");
}

id objc_msgSend_manifestDBWithDrive_sourcePath_properties_domainManager_keybag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manifestDBWithDrive:sourcePath:properties:domainManager:keybag:error:");
}

id objc_msgSend_manifestEncryptionKey(void *a1, const char *a2, ...)
{
  return _[a1 manifestEncryptionKey];
}

id objc_msgSend_manifestForDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manifestForDomainName:");
}

id objc_msgSend_manifestID(void *a1, const char *a2, ...)
{
  return _[a1 manifestID];
}

id objc_msgSend_manifestIDs(void *a1, const char *a2, ...)
{
  return _[a1 manifestIDs];
}

id objc_msgSend_manifestIDsToCounts(void *a1, const char *a2, ...)
{
  return _[a1 manifestIDsToCounts];
}

id objc_msgSend_manifestPageSize(void *a1, const char *a2, ...)
{
  return _[a1 manifestPageSize];
}

id objc_msgSend_manifestWithProperties_database_databaseIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manifestWithProperties:database:databaseIndex:");
}

id objc_msgSend_manifestWithSnapshot_domainName_count_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manifestWithSnapshot:domainName:count:cache:");
}

id objc_msgSend_manifestWithSnapshot_manifestID_count_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manifestWithSnapshot:manifestID:count:cache:");
}

id objc_msgSend_manifestsByDomainName(void *a1, const char *a2, ...)
{
  return _[a1 manifestsByDomainName];
}

id objc_msgSend_markAllDomainsAsNotOnDisk_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAllDomainsAsNotOnDisk:");
}

id objc_msgSend_markAllFileChangesAsDeleted(void *a1, const char *a2, ...)
{
  return _[a1 markAllFileChangesAsDeleted];
}

id objc_msgSend_markDomainAsPresentOnDisk_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markDomainAsPresentOnDisk:error:");
}

id objc_msgSend_markDomainAsUploaded_baseRecordID_pageCount_checksum_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markDomainAsUploaded:baseRecordID:pageCount:checksum:error:");
}

id objc_msgSend_markDomainRequiringAssetUpload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markDomainRequiringAssetUpload:error:");
}

id objc_msgSend_markDomainRequiringFileListCopy_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markDomainRequiringFileListCopy:error:");
}

id objc_msgSend_markDomainRequiringFileListUpload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markDomainRequiringFileListUpload:error:");
}

id objc_msgSend_markFileAsCopyable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markFileAsCopyable:");
}

id objc_msgSend_markFileAsPresent_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markFileAsPresent:error:");
}

id objc_msgSend_markFileChangesAsUnmodifiedForDomainNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markFileChangesAsUnmodifiedForDomainNames:");
}

id objc_msgSend_markMissedEncryptionKeyForVolume_inode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markMissedEncryptionKeyForVolume:inode:error:");
}

id objc_msgSend_markModificationsWith_since_domainManager_persona_cancellationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markModificationsWith:since:domainManager:persona:cancellationHandler:");
}

id objc_msgSend_markModifiedDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markModifiedDomain:");
}

id objc_msgSend_markUnmodifiedDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markUnmodifiedDomain:");
}

id objc_msgSend_markUploadedAssetForDomain_inode_assetMetadata_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markUploadedAssetForDomain:inode:assetMetadata:error:");
}

id objc_msgSend_marketingName(void *a1, const char *a2, ...)
{
  return _[a1 marketingName];
}

id objc_msgSend_maxBatchCount(void *a1, const char *a2, ...)
{
  return _[a1 maxBatchCount];
}

id objc_msgSend_maxBatchDeleteConcurrentModifyRecordsOperationsWithDefaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxBatchDeleteConcurrentModifyRecordsOperationsWithDefaultValue:");
}

id objc_msgSend_maxBatchFetchAssetSize(void *a1, const char *a2, ...)
{
  return _[a1 maxBatchFetchAssetSize];
}

id objc_msgSend_maxBatchFetchConcurrentFetchRecordsOperationsWithDefaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxBatchFetchConcurrentFetchRecordsOperationsWithDefaultValue:");
}

id objc_msgSend_maxBatchSaveAssetSize(void *a1, const char *a2, ...)
{
  return _[a1 maxBatchSaveAssetSize];
}

id objc_msgSend_maxBatchSaveConcurrentModifyRecordsOperationsWithDefaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxBatchSaveConcurrentModifyRecordsOperationsWithDefaultValue:");
}

id objc_msgSend_maxBatchSize(void *a1, const char *a2, ...)
{
  return _[a1 maxBatchSize];
}

id objc_msgSend_maxRetryAttempts(void *a1, const char *a2, ...)
{
  return _[a1 maxRetryAttempts];
}

id objc_msgSend_maxSamplingPeriods(void *a1, const char *a2, ...)
{
  return _[a1 maxSamplingPeriods];
}

id objc_msgSend_maxServiceRetryAfterInterval(void *a1, const char *a2, ...)
{
  return _[a1 maxServiceRetryAfterInterval];
}

id objc_msgSend_maxSupportedVersion(void *a1, const char *a2, ...)
{
  return _[a1 maxSupportedVersion];
}

id objc_msgSend_maxUploadedFileSize(void *a1, const char *a2, ...)
{
  return _[a1 maxUploadedFileSize];
}

id objc_msgSend_maximumLengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumLengthOfBytesUsingEncoding:");
}

id objc_msgSend_mbNode(void *a1, const char *a2, ...)
{
  return _[a1 mbNode];
}

id objc_msgSend_mb_accountForPersonaIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_accountForPersonaIdentifier:");
}

id objc_msgSend_mb_applicationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_applicationType");
}

id objc_msgSend_mb_backupIDByAddingCKPrefix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_backupIDByAddingCKPrefix");
}

id objc_msgSend_mb_base64EncodedFileSystemPathString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_base64EncodedFileSystemPathString");
}

id objc_msgSend_mb_bundleURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_bundleURL");
}

id objc_msgSend_mb_dataFromHexadecimalString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_dataFromHexadecimalString:");
}

id objc_msgSend_mb_entitlements(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_entitlements");
}

id objc_msgSend_mb_isContainerized(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_isContainerized");
}

id objc_msgSend_mb_migrateIfNeededFromSource_sourceSubPaths_toDestination_destinationSubPaths_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_migrateIfNeededFromSource:sourceSubPaths:toDestination:destinationSubPaths:error:");
}

id objc_msgSend_mb_minusPathSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_minusPathSet:");
}

id objc_msgSend_mb_moveAsideAndMarkPurgeableDBFilesAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_moveAsideAndMarkPurgeableDBFilesAtPath:error:");
}

id objc_msgSend_mb_moveToTmpDirThenRemoveItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_moveToTmpDirThenRemoveItemAtPath:error:");
}

id objc_msgSend_mb_openatWithFlags_error_setupDir_itemAccessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_openatWithFlags:error:setupDir:itemAccessor:");
}

id objc_msgSend_mb_pathComponentExistsInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_pathComponentExistsInSet:");
}

id objc_msgSend_mb_pathHasSQLiteJournalSuffix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_pathHasSQLiteJournalSuffix");
}

id objc_msgSend_mb_pluginIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_pluginIdentifier");
}

id objc_msgSend_mb_savePlistAtPath_addingItems_removing_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_savePlistAtPath:addingItems:removing:error:");
}

id objc_msgSend_mb_splitIntoBase_andRelativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_splitIntoBase:andRelativePath:");
}

id objc_msgSend_mb_stringByAppendingGreenteaSuffix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_stringByAppendingGreenteaSuffix");
}

id objc_msgSend_mb_stringWithFileSystemRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mb_stringWithFileSystemRepresentation:");
}

id objc_msgSend_megaBackupExpirationDate(void *a1, const char *a2, ...)
{
  return _[a1 megaBackupExpirationDate];
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFrom:");
}

id objc_msgSend_mergeKeybagRefs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeKeybagRefs:");
}

id objc_msgSend_mergeKnownAccountsByDSID_into_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeKnownAccountsByDSID:into:");
}

id objc_msgSend_mergeManifest_withNewerManifest_outputManifest_mergeDeletions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeManifest:withNewerManifest:outputManifest:mergeDeletions:");
}

id objc_msgSend_mergeRemoteConfigurationForAccount_response_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeRemoteConfigurationForAccount:response:");
}

id objc_msgSend_mergeSnapshots_backupUUID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeSnapshots:backupUUID:account:connection:error:");
}

id objc_msgSend_messageWithName_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageWithName:arguments:");
}

id objc_msgSend_messagesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messagesAtIndex:");
}

id objc_msgSend_messagesCount(void *a1, const char *a2, ...)
{
  return _[a1 messagesCount];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_metadataQueues(void *a1, const char *a2, ...)
{
  return _[a1 metadataQueues];
}

id objc_msgSend_metadataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataWithError:");
}

id objc_msgSend_method(void *a1, const char *a2, ...)
{
  return _[a1 method];
}

id objc_msgSend_metrics(void *a1, const char *a2, ...)
{
  return _[a1 metrics];
}

id objc_msgSend_migratorCacheURL(void *a1, const char *a2, ...)
{
  return _[a1 migratorCacheURL];
}

id objc_msgSend_migratorCacheURLFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migratorCacheURLFor:");
}

id objc_msgSend_minSleepIntervalWhenConnected(void *a1, const char *a2, ...)
{
  return _[a1 minSleepIntervalWhenConnected];
}

id objc_msgSend_minSleepIntervalWhenDisconnected(void *a1, const char *a2, ...)
{
  return _[a1 minSleepIntervalWhenDisconnected];
}

id objc_msgSend_minSupportedVersion(void *a1, const char *a2, ...)
{
  return _[a1 minSupportedVersion];
}

id objc_msgSend_minUploadedFileSize(void *a1, const char *a2, ...)
{
  return _[a1 minUploadedFileSize];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_minutesRemaining(void *a1, const char *a2, ...)
{
  return _[a1 minutesRemaining];
}

id objc_msgSend_missedEncryptionKeysDB(void *a1, const char *a2, ...)
{
  return _[a1 missedEncryptionKeysDB];
}

id objc_msgSend_mobileInstallation(void *a1, const char *a2, ...)
{
  return _[a1 mobileInstallation];
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _[a1 mode];
}

id objc_msgSend_modeString(void *a1, const char *a2, ...)
{
  return _[a1 modeString];
}

id objc_msgSend_modificationDate(void *a1, const char *a2, ...)
{
  return _[a1 modificationDate];
}

id objc_msgSend_modificationTypeForMetadata_oldMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modificationTypeForMetadata:oldMetadata:");
}

id objc_msgSend_modified(void *a1, const char *a2, ...)
{
  return _[a1 modified];
}

id objc_msgSend_modifiedBytes(void *a1, const char *a2, ...)
{
  return _[a1 modifiedBytes];
}

id objc_msgSend_modifiedBytesByBundleID(void *a1, const char *a2, ...)
{
  return _[a1 modifiedBytesByBundleID];
}

id objc_msgSend_modifiedBytesByDomainName(void *a1, const char *a2, ...)
{
  return _[a1 modifiedBytesByDomainName];
}

id objc_msgSend_modifiedDirectories(void *a1, const char *a2, ...)
{
  return _[a1 modifiedDirectories];
}

id objc_msgSend_modifiedDirectoryCount(void *a1, const char *a2, ...)
{
  return _[a1 modifiedDirectoryCount];
}

id objc_msgSend_modifiedDomainNames(void *a1, const char *a2, ...)
{
  return _[a1 modifiedDomainNames];
}

id objc_msgSend_modifiedDomainRecordReferences(void *a1, const char *a2, ...)
{
  return _[a1 modifiedDomainRecordReferences];
}

id objc_msgSend_modifiedDomains(void *a1, const char *a2, ...)
{
  return _[a1 modifiedDomains];
}

id objc_msgSend_modifiedDomainsFlags(void *a1, const char *a2, ...)
{
  return _[a1 modifiedDomainsFlags];
}

id objc_msgSend_modifiedFileCountInCurrentlyScannedDomain(void *a1, const char *a2, ...)
{
  return _[a1 modifiedFileCountInCurrentlyScannedDomain];
}

id objc_msgSend_modifiedRegularFileCount(void *a1, const char *a2, ...)
{
  return _[a1 modifiedRegularFileCount];
}

id objc_msgSend_modifiedRegularFiles(void *a1, const char *a2, ...)
{
  return _[a1 modifiedRegularFiles];
}

id objc_msgSend_modifiedSymlinks(void *a1, const char *a2, ...)
{
  return _[a1 modifiedSymlinks];
}

id objc_msgSend_mostRecentResponseHandlers(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentResponseHandlers];
}

id objc_msgSend_mountedSnapshotTracker(void *a1, const char *a2, ...)
{
  return _[a1 mountedSnapshotTracker];
}

id objc_msgSend_mountedSnapshots(void *a1, const char *a2, ...)
{
  return _[a1 mountedSnapshots];
}

id objc_msgSend_moveFileFromSource_destination_destinationSize_conflictResolution_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveFileFromSource:destination:destinationSize:conflictResolution:error:");
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtPath:toPath:error:");
}

id objc_msgSend_moveItemAtPath_toPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtPath:toPath:options:error:");
}

id objc_msgSend_moveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtURL:toURL:error:");
}

id objc_msgSend_moveItemsAtPaths_options_results_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemsAtPaths:options:results:error:");
}

id objc_msgSend_moveManifest_toSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveManifest:toSnapshot:");
}

id objc_msgSend_movedBackupName(void *a1, const char *a2, ...)
{
  return _[a1 movedBackupName];
}

id objc_msgSend_movedOldBackup(void *a1, const char *a2, ...)
{
  return _[a1 movedOldBackup];
}

id objc_msgSend_multistateRetryStrategy(void *a1, const char *a2, ...)
{
  return _[a1 multistateRetryStrategy];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_mutableCopyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopyWithZone:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameWithAppID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameWithAppID:");
}

id objc_msgSend_networkConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 networkConnectivity];
}

id objc_msgSend_networkConnectivityAtFinish(void *a1, const char *a2, ...)
{
  return _[a1 networkConnectivityAtFinish];
}

id objc_msgSend_networkConnectivityAtStart(void *a1, const char *a2, ...)
{
  return _[a1 networkConnectivityAtStart];
}

id objc_msgSend_networkPathMonitor(void *a1, const char *a2, ...)
{
  return _[a1 networkPathMonitor];
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 newlineCharacterSet];
}

id objc_msgSend_next(void *a1, const char *a2, ...)
{
  return _[a1 next];
}

id objc_msgSend_nextBackupDelta(void *a1, const char *a2, ...)
{
  return _[a1 nextBackupDelta];
}

id objc_msgSend_nextBackupFSEventState(void *a1, const char *a2, ...)
{
  return _[a1 nextBackupFSEventState];
}

id objc_msgSend_nextBackupSize(void *a1, const char *a2, ...)
{
  return _[a1 nextBackupSize];
}

id objc_msgSend_nextBackupSizeInfoWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextBackupSizeInfoWithAccount:");
}

id objc_msgSend_nextBackupSizeWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextBackupSizeWithAccount:");
}

id objc_msgSend_nextDayIndex(void *a1, const char *a2, ...)
{
  return _[a1 nextDayIndex];
}

id objc_msgSend_nextIndex(void *a1, const char *a2, ...)
{
  return _[a1 nextIndex];
}

id objc_msgSend_nextMessage(void *a1, const char *a2, ...)
{
  return _[a1 nextMessage];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_nextOp(void *a1, const char *a2, ...)
{
  return _[a1 nextOp];
}

id objc_msgSend_nextSubindex(void *a1, const char *a2, ...)
{
  return _[a1 nextSubindex];
}

id objc_msgSend_noise(void *a1, const char *a2, ...)
{
  return _[a1 noise];
}

id objc_msgSend_nonRedirectedDomain(void *a1, const char *a2, ...)
{
  return _[a1 nonRedirectedDomain];
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return _[a1 notification];
}

id objc_msgSend_notifyPluginsEndedRestoreWithEngine_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPluginsEndedRestoreWithEngine:error:");
}

id objc_msgSend_notifyPluginsEndingRestoreWithEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPluginsEndingRestoreWithEngine:");
}

id objc_msgSend_notifyPluginsOfEndedBackup_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPluginsOfEndedBackup:error:");
}

id objc_msgSend_notifyPluginsOfEndingBackupWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPluginsOfEndingBackupWithError:");
}

id objc_msgSend_notifyPluginsOfPreparedBackupWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPluginsOfPreparedBackupWithError:");
}

id objc_msgSend_notifyPluginsOfPreparingBackupWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPluginsOfPreparingBackupWithError:");
}

id objc_msgSend_notifyPluginsOfStartingBackupWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPluginsOfStartingBackupWithError:");
}

id objc_msgSend_notifyPluginsPreparingRestoreWithEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPluginsPreparingRestoreWithEngine:");
}

id objc_msgSend_notifyPluginsStartingRestoreWithEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPluginsStartingRestoreWithEngine:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberAtIndex:");
}

id objc_msgSend_numberOfMatchesInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfMatchesInString:options:range:");
}

id objc_msgSend_numberOfRecordsToFetchBeforeCancellingPrivilegedSnapshotDownload(void *a1, const char *a2, ...)
{
  return _[a1 numberOfRecordsToFetchBeforeCancellingPrivilegedSnapshotDownload];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithChar:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 objectEnumerator];
}

id objc_msgSend_objectForDomain_andKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForDomain:andKey:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectOfClass_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectOfClass:atIndex:");
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return _[a1 offset];
}

id objc_msgSend_offsetForFileID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "offsetForFileID:");
}

id objc_msgSend_onCellular(void *a1, const char *a2, ...)
{
  return _[a1 onCellular];
}

id objc_msgSend_onExpensiveCellular(void *a1, const char *a2, ...)
{
  return _[a1 onExpensiveCellular];
}

id objc_msgSend_onPower(void *a1, const char *a2, ...)
{
  return _[a1 onPower];
}

id objc_msgSend_onWiFi(void *a1, const char *a2, ...)
{
  return _[a1 onWiFi];
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _[a1 open];
}

id objc_msgSend_openAtURL_withFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openAtURL:withFlags:error:");
}

id objc_msgSend_openCacheWithAccessType_cached_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openCacheWithAccessType:cached:error:");
}

id objc_msgSend_openCacheWithAccount_accessType_cached_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openCacheWithAccount:accessType:cached:error:");
}

id objc_msgSend_openCacheWithAccount_accessType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openCacheWithAccount:accessType:error:");
}

id objc_msgSend_openDatabaseIn_commitID_domainName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openDatabaseIn:commitID:domainName:error:");
}

id objc_msgSend_openDatabaseIn_commitID_readOnly_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openDatabaseIn:commitID:readOnly:error:");
}

id objc_msgSend_openDatabaseIn_readOnly_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openDatabaseIn:readOnly:error:");
}

id objc_msgSend_openOrCreateDatabaseIn_commitID_domainName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openOrCreateDatabaseIn:commitID:domainName:error:");
}

id objc_msgSend_openOrCreateDatabaseIn_commitID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openOrCreateDatabaseIn:commitID:error:");
}

id objc_msgSend_openOrCreateDatabaseIn_commitID_readonly_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openOrCreateDatabaseIn:commitID:readonly:error:");
}

id objc_msgSend_openOrCreateDatabaseIn_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openOrCreateDatabaseIn:error:");
}

id objc_msgSend_openOrCreatePlaceholderFileListIn_commitID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openOrCreatePlaceholderFileListIn:commitID:error:");
}

id objc_msgSend_openOrUseExistingPlanWithPersona_snapshotUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openOrUseExistingPlanWithPersona:snapshotUUID:error:");
}

id objc_msgSend_openRawEncryptedWithPathFSR_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openRawEncryptedWithPathFSR:error:");
}

id objc_msgSend_openReadOnlyInstance_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openReadOnlyInstance:error:");
}

id objc_msgSend_openRestoreSlot(void *a1, const char *a2, ...)
{
  return _[a1 openRestoreSlot];
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_openURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:withOptions:");
}

id objc_msgSend_openWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openWithError:");
}

id objc_msgSend_openedFileListDatabase(void *a1, const char *a2, ...)
{
  return _[a1 openedFileListDatabase];
}

id objc_msgSend_operationAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationAtIndex:");
}

id objc_msgSend_operationEnumeratorWithDomainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationEnumeratorWithDomainManager:");
}

id objc_msgSend_operationForContentsOfDirectory(void *a1, const char *a2, ...)
{
  return _[a1 operationForContentsOfDirectory];
}

id objc_msgSend_operationForRequest_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationForRequest:callback:");
}

id objc_msgSend_operationGroupID(void *a1, const char *a2, ...)
{
  return _[a1 operationGroupID];
}

id objc_msgSend_operationGroupWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationGroupWithName:");
}

id objc_msgSend_operationGroupWithName_processName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationGroupWithName:processName:");
}

id objc_msgSend_operationID(void *a1, const char *a2, ...)
{
  return _[a1 operationID];
}

id objc_msgSend_operationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 operationIdentifier];
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _[a1 operationQueue];
}

id objc_msgSend_operationToC0pyItemWithCount_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToC0pyItemWithCount:size:");
}

id objc_msgSend_operationToCreateDirectory(void *a1, const char *a2, ...)
{
  return _[a1 operationToCreateDirectory];
}

id objc_msgSend_operationToDownloadFilesWithCount_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToDownloadFilesWithCount:size:");
}

id objc_msgSend_operationToMoveItem(void *a1, const char *a2, ...)
{
  return _[a1 operationToMoveItem];
}

id objc_msgSend_operationToMoveItemsWithCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToMoveItemsWithCount:");
}

id objc_msgSend_operationToRemoveItem(void *a1, const char *a2, ...)
{
  return _[a1 operationToRemoveItem];
}

id objc_msgSend_operationToRemoveItemsWithCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToRemoveItemsWithCount:");
}

id objc_msgSend_operationToUploadFileWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToUploadFileWithSize:");
}

id objc_msgSend_operationToUploadFilesWithCount_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToUploadFilesWithCount:size:");
}

id objc_msgSend_operationTrackerWithAccount_databaseManager_policy_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationTrackerWithAccount:databaseManager:policy:error:");
}

id objc_msgSend_operationTrackerWithAccount_databaseManager_policy_group_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationTrackerWithAccount:databaseManager:policy:group:error:");
}

id objc_msgSend_operationTrackerWithParentTracker_policy_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationTrackerWithParentTracker:policy:error:");
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return _[a1 operations];
}

id objc_msgSend_operator(void *a1, const char *a2, ...)
{
  return _[a1 operator];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_originalFileSize(void *a1, const char *a2, ...)
{
  return _[a1 originalFileSize];
}

id objc_msgSend_originalInode(void *a1, const char *a2, ...)
{
  return _[a1 originalInode];
}

id objc_msgSend_osBuildVersionOfBackup(void *a1, const char *a2, ...)
{
  return _[a1 osBuildVersionOfBackup];
}

id objc_msgSend_outputStreamToFileAtPath_append_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputStreamToFileAtPath:append:");
}

id objc_msgSend_outputStreamToMemory(void *a1, const char *a2, ...)
{
  return _[a1 outputStreamToMemory];
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _[a1 owner];
}

id objc_msgSend_ownerBundleID(void *a1, const char *a2, ...)
{
  return _[a1 ownerBundleID];
}

id objc_msgSend_owningBundleID(void *a1, const char *a2, ...)
{
  return _[a1 owningBundleID];
}

id objc_msgSend_pageCount(void *a1, const char *a2, ...)
{
  return _[a1 pageCount];
}

id objc_msgSend_pageIndex(void *a1, const char *a2, ...)
{
  return _[a1 pageIndex];
}

id objc_msgSend_parentEngine(void *a1, const char *a2, ...)
{
  return _[a1 parentEngine];
}

id objc_msgSend_parentTracker(void *a1, const char *a2, ...)
{
  return _[a1 parentTracker];
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return _[a1 password];
}

id objc_msgSend_passwordData(void *a1, const char *a2, ...)
{
  return _[a1 passwordData];
}

id objc_msgSend_passwordHash(void *a1, const char *a2, ...)
{
  return _[a1 passwordHash];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathComponents(void *a1, const char *a2, ...)
{
  return _[a1 pathComponents];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pathToDomainMapping(void *a1, const char *a2, ...)
{
  return _[a1 pathToDomainMapping];
}

id objc_msgSend_pathToModifiedDomainFlags(void *a1, const char *a2, ...)
{
  return _[a1 pathToModifiedDomainFlags];
}

id objc_msgSend_pathToMonitor(void *a1, const char *a2, ...)
{
  return _[a1 pathToMonitor];
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_paths(void *a1, const char *a2, ...)
{
  return _[a1 paths];
}

id objc_msgSend_pathsByDomainName(void *a1, const char *a2, ...)
{
  return _[a1 pathsByDomainName];
}

id objc_msgSend_pathsForFilesMissingEncryptionKeyWithOffset_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathsForFilesMissingEncryptionKeyWithOffset:limit:");
}

id objc_msgSend_pathsToBackup_pathsNotToBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathsToBackup:pathsNotToBackup:");
}

id objc_msgSend_pathsToRestoreForDomain_absolutePath_pendingOnly_backupUDID_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathsToRestoreForDomain:absolutePath:pendingOnly:backupUDID:range:");
}

id objc_msgSend_peakMemoryUsage(void *a1, const char *a2, ...)
{
  return _[a1 peakMemoryUsage];
}

id objc_msgSend_peerInitRequest(void *a1, const char *a2, ...)
{
  return _[a1 peerInitRequest];
}

id objc_msgSend_peerInitResponse(void *a1, const char *a2, ...)
{
  return _[a1 peerInitResponse];
}

id objc_msgSend_peerKeychainInfo(void *a1, const char *a2, ...)
{
  return _[a1 peerKeychainInfo];
}

id objc_msgSend_peerKeychainTransferResponse(void *a1, const char *a2, ...)
{
  return _[a1 peerKeychainTransferResponse];
}

id objc_msgSend_peerPreflightInfo(void *a1, const char *a2, ...)
{
  return _[a1 peerPreflightInfo];
}

id objc_msgSend_peerPreflightResponse(void *a1, const char *a2, ...)
{
  return _[a1 peerPreflightResponse];
}

id objc_msgSend_peerTaskGroup(void *a1, const char *a2, ...)
{
  return _[a1 peerTaskGroup];
}

id objc_msgSend_pendingCommitID(void *a1, const char *a2, ...)
{
  return _[a1 pendingCommitID];
}

id objc_msgSend_pendingFollowUpItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingFollowUpItems:");
}

id objc_msgSend_pendingSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 pendingSnapshot];
}

id objc_msgSend_pendingSnapshotBackupPolicy(void *a1, const char *a2, ...)
{
  return _[a1 pendingSnapshotBackupPolicy];
}

id objc_msgSend_pendingSnapshotBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 pendingSnapshotBuildVersion];
}

id objc_msgSend_pendingSnapshotDatabase(void *a1, const char *a2, ...)
{
  return _[a1 pendingSnapshotDatabase];
}

id objc_msgSend_pendingSnapshotForCurrentDeviceAndAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingSnapshotForCurrentDeviceAndAccount:error:");
}

id objc_msgSend_pendingSnapshotFormat(void *a1, const char *a2, ...)
{
  return _[a1 pendingSnapshotFormat];
}

id objc_msgSend_pendingSnapshotID(void *a1, const char *a2, ...)
{
  return _[a1 pendingSnapshotID];
}

id objc_msgSend_pendingSnapshotQuotaReserved(void *a1, const char *a2, ...)
{
  return _[a1 pendingSnapshotQuotaReserved];
}

id objc_msgSend_pendingSnapshotRecordID(void *a1, const char *a2, ...)
{
  return _[a1 pendingSnapshotRecordID];
}

id objc_msgSend_pendingSnapshotType(void *a1, const char *a2, ...)
{
  return _[a1 pendingSnapshotType];
}

id objc_msgSend_perClassItemsRemaining(void *a1, const char *a2, ...)
{
  return _[a1 perClassItemsRemaining];
}

id objc_msgSend_perRecordCompletionBlock(void *a1, const char *a2, ...)
{
  return _[a1 perRecordCompletionBlock];
}

id objc_msgSend_perRecordProgressBlock(void *a1, const char *a2, ...)
{
  return _[a1 perRecordProgressBlock];
}

id objc_msgSend_percentComplete(void *a1, const char *a2, ...)
{
  return _[a1 percentComplete];
}

id objc_msgSend_percentage(void *a1, const char *a2, ...)
{
  return _[a1 percentage];
}

id objc_msgSend_performBlockUnderPersona_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockUnderPersona:block:");
}

id objc_msgSend_performCallbackOnQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performCallbackOnQueue:");
}

id objc_msgSend_performInTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performInTransaction:");
}

id objc_msgSend_performKeyBagReferenceValidationOnDeviceWithRecordID_tracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performKeyBagReferenceValidationOnDeviceWithRecordID:tracker:error:");
}

id objc_msgSend_performMigrationWithConfig_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMigrationWithConfig:error:");
}

id objc_msgSend_performRetryablePhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRetryablePhase:");
}

id objc_msgSend_performSanityChecksBeforeCommitWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSanityChecksBeforeCommitWithError:");
}

id objc_msgSend_performSchemaUpgrades_isReadOnly_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSchemaUpgrades:isReadOnly:error:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performSelectorForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelectorForName:");
}

id objc_msgSend_performSelectorForName_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelectorForName:withObject:");
}

id objc_msgSend_performSelectorInBackground_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelectorInBackground:withObject:");
}

id objc_msgSend_performWithConnection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithConnection:error:");
}

id objc_msgSend_performWithFlags_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithFlags:action:");
}

id objc_msgSend_performanceStatistics(void *a1, const char *a2, ...)
{
  return _[a1 performanceStatistics];
}

id objc_msgSend_performingOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performingOperation:");
}

id objc_msgSend_permissions(void *a1, const char *a2, ...)
{
  return _[a1 permissions];
}

id objc_msgSend_persistValueForKey_value_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistValueForKey:value:account:");
}

id objc_msgSend_persistValueIfNeeded_forKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistValueIfNeeded:forKey:account:");
}

id objc_msgSend_persistValuesIfNeeded_forKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistValuesIfNeeded:forKey:account:");
}

id objc_msgSend_persistedValueForKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistedValueForKey:account:");
}

id objc_msgSend_persona(void *a1, const char *a2, ...)
{
  return _[a1 persona];
}

id objc_msgSend_personaAttributesForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personaAttributesForIdentifier:");
}

id objc_msgSend_personaAttributesForPersonaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personaAttributesForPersonaType:");
}

id objc_msgSend_personaAttributesForPersonaType_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personaAttributesForPersonaType:withError:");
}

id objc_msgSend_personaAttributesForPersonaUniqueString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personaAttributesForPersonaUniqueString:");
}

id objc_msgSend_personaIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 personaIdentifier];
}

id objc_msgSend_personaLayoutPathURL(void *a1, const char *a2, ...)
{
  return _[a1 personaLayoutPathURL];
}

id objc_msgSend_personaStateForPersonaID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personaStateForPersonaID:");
}

id objc_msgSend_personaWithAttributes_volumeMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personaWithAttributes:volumeMountPoint:");
}

id objc_msgSend_personaWithUMPersona_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personaWithUMPersona:error:");
}

id objc_msgSend_personalPersonaIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 personalPersonaIdentifier];
}

id objc_msgSend_personalPersonaWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalPersonaWithError:");
}

id objc_msgSend_phaseDescription(void *a1, const char *a2, ...)
{
  return _[a1 phaseDescription];
}

id objc_msgSend_pinLatestGMSnapshotIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 pinLatestGMSnapshotIfNeeded];
}

id objc_msgSend_pinSnapshot_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pinSnapshot:error:");
}

id objc_msgSend_pinSnapshotID_backupUDID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pinSnapshotID:backupUDID:account:connection:error:");
}

id objc_msgSend_pinnedSnapshotRefs(void *a1, const char *a2, ...)
{
  return _[a1 pinnedSnapshotRefs];
}

id objc_msgSend_placeholderDomainWithCache_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderDomainWithCache:error:");
}

id objc_msgSend_placeholderForInstallable_client_installType_metadata_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderForInstallable:client:installType:metadata:error:");
}

id objc_msgSend_placeholderFromSerializedPlaceholder_client_installType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderFromSerializedPlaceholder:client:installType:error:");
}

id objc_msgSend_placeholderInstallationGroup(void *a1, const char *a2, ...)
{
  return _[a1 placeholderInstallationGroup];
}

id objc_msgSend_placeholderNameWithAppID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderNameWithAppID:");
}

id objc_msgSend_placeholderRestoreDirectory(void *a1, const char *a2, ...)
{
  return _[a1 placeholderRestoreDirectory];
}

id objc_msgSend_planForDomain_restoreType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "planForDomain:restoreType:error:");
}

id objc_msgSend_plistPath(void *a1, const char *a2, ...)
{
  return _[a1 plistPath];
}

id objc_msgSend_pluginFields(void *a1, const char *a2, ...)
{
  return _[a1 pluginFields];
}

id objc_msgSend_pluginNotifier(void *a1, const char *a2, ...)
{
  return _[a1 pluginNotifier];
}

id objc_msgSend_plugins(void *a1, const char *a2, ...)
{
  return _[a1 plugins];
}

id objc_msgSend_pollForBackupActivityDeferrals_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pollForBackupActivityDeferrals:block:");
}

id objc_msgSend_popFirstObject(void *a1, const char *a2, ...)
{
  return _[a1 popFirstObject];
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return _[a1 port];
}

id objc_msgSend_posixErrorWithCode_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "posixErrorWithCode:format:");
}

id objc_msgSend_posixErrorWithCode_path_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "posixErrorWithCode:path:format:");
}

id objc_msgSend_posixErrorWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "posixErrorWithFormat:");
}

id objc_msgSend_posixErrorWithPath_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "posixErrorWithPath:format:");
}

id objc_msgSend_postBackup_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postBackup:lastModified:error:");
}

id objc_msgSend_postBackupCompletionNotificationWithAccount_completionError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postBackupCompletionNotificationWithAccount:completionError:");
}

id objc_msgSend_postBackupRestoredOffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postBackupRestoredOffer:");
}

id objc_msgSend_postFollowUpForBackgroundRestoreProgress_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFollowUpForBackgroundRestoreProgress:account:");
}

id objc_msgSend_postFollowUpForDrySpellForAccount_duration_firstBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFollowUpForDrySpellForAccount:duration:firstBackup:");
}

id objc_msgSend_postFollowUpForRestoreFailedForAccount_failedDomainDisplayNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFollowUpForRestoreFailedForAccount:failedDomainDisplayNames:");
}

id objc_msgSend_postFollowUpForRestoreFailedForAccount_failedDomainNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFollowUpForRestoreFailedForAccount:failedDomainNames:");
}

id objc_msgSend_postFollowUpForRestoreFinishedForAccount_skipiCloudQuotaOffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFollowUpForRestoreFinishedForAccount:skipiCloudQuotaOffer:");
}

id objc_msgSend_postFollowUpForRestoreTimeoutForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFollowUpForRestoreTimeoutForAccount:");
}

id objc_msgSend_postFollowUpItem_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFollowUpItem:error:");
}

id objc_msgSend_postNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotification:");
}

id objc_msgSend_postNotification_ifStateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotification:ifStateChanged:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_postUploadDuration(void *a1, const char *a2, ...)
{
  return _[a1 postUploadDuration];
}

id objc_msgSend_powerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 powerAssertion];
}

id objc_msgSend_powerAssertionName(void *a1, const char *a2, ...)
{
  return _[a1 powerAssertionName];
}

id objc_msgSend_pql_database(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pql_database");
}

id objc_msgSend_preUploadDuration(void *a1, const char *a2, ...)
{
  return _[a1 preUploadDuration];
}

id objc_msgSend_prebuddyBackupDeletedWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prebuddyBackupDeletedWithAccount:");
}

id objc_msgSend_prebuddyFollowUpController(void *a1, const char *a2, ...)
{
  return _[a1 prebuddyFollowUpController];
}

id objc_msgSend_prebuddyFollowUpTimer(void *a1, const char *a2, ...)
{
  return _[a1 prebuddyFollowUpTimer];
}

id objc_msgSend_prebuddyFollowUpTimerForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prebuddyFollowUpTimerForAccount:");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_preferencesDirectory(void *a1, const char *a2, ...)
{
  return _[a1 preferencesDirectory];
}

id objc_msgSend_prefetchRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefetchRecord:");
}

id objc_msgSend_prefixDirectories(void *a1, const char *a2, ...)
{
  return _[a1 prefixDirectories];
}

id objc_msgSend_preflight(void *a1, const char *a2, ...)
{
  return _[a1 preflight];
}

id objc_msgSend_preflightDuration(void *a1, const char *a2, ...)
{
  return _[a1 preflightDuration];
}

id objc_msgSend_preflightProperties(void *a1, const char *a2, ...)
{
  return _[a1 preflightProperties];
}

id objc_msgSend_preflightStartDate(void *a1, const char *a2, ...)
{
  return _[a1 preflightStartDate];
}

id objc_msgSend_prepareForBackgroundRestoreWithAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForBackgroundRestoreWithAccount:error:");
}

id objc_msgSend_prepareForBackup(void *a1, const char *a2, ...)
{
  return _[a1 prepareForBackup];
}

id objc_msgSend_prepareForExtraction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForExtraction:");
}

id objc_msgSend_prepareForSaveWithOperationTracker_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForSaveWithOperationTracker:completion:");
}

id objc_msgSend_prepareForUploadWithEngine_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForUploadWithEngine:error:");
}

id objc_msgSend_presentUserNotification_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentUserNotification:account:");
}

id objc_msgSend_previousFailureCount(void *a1, const char *a2, ...)
{
  return _[a1 previousFailureCount];
}

id objc_msgSend_previousSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 previousSnapshot];
}

id objc_msgSend_previousSnapshotHasSkippedFiles(void *a1, const char *a2, ...)
{
  return _[a1 previousSnapshotHasSkippedFiles];
}

id objc_msgSend_previouslySkippedFiles(void *a1, const char *a2, ...)
{
  return _[a1 previouslySkippedFiles];
}

id objc_msgSend_prioritizeRestoreFileWithDomain_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prioritizeRestoreFileWithDomain:relativePath:");
}

id objc_msgSend_prioritizeRestoreFileWithPath_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prioritizeRestoreFileWithPath:account:");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_privateCloudDatabase(void *a1, const char *a2, ...)
{
  return _[a1 privateCloudDatabase];
}

id objc_msgSend_privilegedQueryType(void *a1, const char *a2, ...)
{
  return _[a1 privilegedQueryType];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_processedSnapshotActions(void *a1, const char *a2, ...)
{
  return _[a1 processedSnapshotActions];
}

id objc_msgSend_productType(void *a1, const char *a2, ...)
{
  return _[a1 productType];
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return _[a1 productVersion];
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return _[a1 progress];
}

id objc_msgSend_progressAtLastUpdate(void *a1, const char *a2, ...)
{
  return _[a1 progressAtLastUpdate];
}

id objc_msgSend_progressGroup(void *a1, const char *a2, ...)
{
  return _[a1 progressGroup];
}

id objc_msgSend_progressInfo(void *a1, const char *a2, ...)
{
  return _[a1 progressInfo];
}

id objc_msgSend_progressModel(void *a1, const char *a2, ...)
{
  return _[a1 progressModel];
}

id objc_msgSend_progressUpdatedWithPercentage_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressUpdatedWithPercentage:size:");
}

id objc_msgSend_promptTTRIfLightrailRestoreFailed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promptTTRIfLightrailRestoreFailed:");
}

id objc_msgSend_promptUser(void *a1, const char *a2, ...)
{
  return _[a1 promptUser];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _[a1 properties];
}

id objc_msgSend_propertiesData(void *a1, const char *a2, ...)
{
  return _[a1 propertiesData];
}

id objc_msgSend_propertiesForDataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertiesForDataclass:");
}

id objc_msgSend_propertiesWithDrive_path_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertiesWithDrive:path:error:");
}

id objc_msgSend_propertiesWithFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertiesWithFile:error:");
}

id objc_msgSend_propertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyForKey:");
}

id objc_msgSend_propertyForKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyForKey:error:");
}

id objc_msgSend_propertyList(void *a1, const char *a2, ...)
{
  return _[a1 propertyList];
}

id objc_msgSend_propertyListAtPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListAtPath:options:error:");
}

id objc_msgSend_propertyListForBackupProperties(void *a1, const char *a2, ...)
{
  return _[a1 propertyListForBackupProperties];
}

id objc_msgSend_propertyListForSafeHarborInfo(void *a1, const char *a2, ...)
{
  return _[a1 propertyListForSafeHarborInfo];
}

id objc_msgSend_propertyListFromData_mutabilityOption_format_errorDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListFromData:mutabilityOption:format:errorDescription:");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_proposedCredential(void *a1, const char *a2, ...)
{
  return _[a1 proposedCredential];
}

id objc_msgSend_protectionClass(void *a1, const char *a2, ...)
{
  return _[a1 protectionClass];
}

id objc_msgSend_protectionClassesToRestoreByPathWithOffset_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protectionClassesToRestoreByPathWithOffset:limit:");
}

id objc_msgSend_protectionSpace(void *a1, const char *a2, ...)
{
  return _[a1 protectionSpace];
}

id objc_msgSend_protocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 protocolVersion];
}

id objc_msgSend_purchaserDSID(void *a1, const char *a2, ...)
{
  return _[a1 purchaserDSID];
}

id objc_msgSend_purge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purge:");
}

id objc_msgSend_purgeDiskSpace_amountRequested_urgencyLevel_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeDiskSpace:amountRequested:urgencyLevel:error:");
}

id objc_msgSend_purgeSize(void *a1, const char *a2, ...)
{
  return _[a1 purgeSize];
}

id objc_msgSend_purgeableDiskSpace(void *a1, const char *a2, ...)
{
  return _[a1 purgeableDiskSpace];
}

id objc_msgSend_putBatch_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "putBatch:error:");
}

id objc_msgSend_qos(void *a1, const char *a2, ...)
{
  return _[a1 qos];
}

id objc_msgSend_qualityOfService(void *a1, const char *a2, ...)
{
  return _[a1 qualityOfService];
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return _[a1 query];
}

id objc_msgSend_queryCursorFetchedBlock(void *a1, const char *a2, ...)
{
  return _[a1 queryCursorFetchedBlock];
}

id objc_msgSend_queryCursorForSnapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryCursorForSnapshotID:");
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _[a1 queryItems];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_queueUploadOfFileChange_batchSave_engine_skipped_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queueUploadOfFileChange:batchSave:engine:skipped:error:");
}

id objc_msgSend_queuedFileCount(void *a1, const char *a2, ...)
{
  return _[a1 queuedFileCount];
}

id objc_msgSend_queuedSize(void *a1, const char *a2, ...)
{
  return _[a1 queuedSize];
}

id objc_msgSend_quota(void *a1, const char *a2, ...)
{
  return _[a1 quota];
}

id objc_msgSend_quotaReserved(void *a1, const char *a2, ...)
{
  return _[a1 quotaReserved];
}

id objc_msgSend_quotaUsed(void *a1, const char *a2, ...)
{
  return _[a1 quotaUsed];
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_randomSecret(void *a1, const char *a2, ...)
{
  return _[a1 randomSecret];
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_reachability(void *a1, const char *a2, ...)
{
  return _[a1 reachability];
}

id objc_msgSend_reachabilityMonitorDidDetectWifiStatusChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reachabilityMonitorDidDetectWifiStatusChange:");
}

id objc_msgSend_reacquireLockWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reacquireLockWithError:");
}

id objc_msgSend_readBackupDatabaseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readBackupDatabaseWithError:");
}

id objc_msgSend_readBackupManifestDatabaseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readBackupManifestDatabaseWithError:");
}

id objc_msgSend_readBackupManifestWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readBackupManifestWithError:");
}

id objc_msgSend_readBackupPropertiesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readBackupPropertiesWithError:");
}

id objc_msgSend_readFromPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readFromPath:error:");
}

id objc_msgSend_readSnapshotDatabaseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readSnapshotDatabaseWithError:");
}

id objc_msgSend_readSnapshotManifestDatabaseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readSnapshotManifestDatabaseWithError:");
}

id objc_msgSend_readSnapshotPropertiesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readSnapshotPropertiesWithError:");
}

id objc_msgSend_readStatusWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readStatusWithError:");
}

id objc_msgSend_readWithBytes_count_offset_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readWithBytes:count:offset:error:");
}

id objc_msgSend_readWithBytes_length_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readWithBytes:length:error:");
}

id objc_msgSend_readWithOffset_buffer_bufferLength_bytesRead_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readWithOffset:buffer:bufferLength:bytesRead:error:");
}

id objc_msgSend_readerForVolume(void *a1, const char *a2, ...)
{
  return _[a1 readerForVolume];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_reboot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reboot:");
}

id objc_msgSend_rebuildEncryptionKeysTable(void *a1, const char *a2, ...)
{
  return _[a1 rebuildEncryptionKeysTable];
}

id objc_msgSend_receipt(void *a1, const char *a2, ...)
{
  return _[a1 receipt];
}

id objc_msgSend_receiveProgressHandler(void *a1, const char *a2, ...)
{
  return _[a1 receiveProgressHandler];
}

id objc_msgSend_recentATCErrors(void *a1, const char *a2, ...)
{
  return _[a1 recentATCErrors];
}

id objc_msgSend_recentlyFailedAssets(void *a1, const char *a2, ...)
{
  return _[a1 recentlyFailedAssets];
}

id objc_msgSend_record(void *a1, const char *a2, ...)
{
  return _[a1 record];
}

id objc_msgSend_record_madeProgress_previousProgress_assetSize_recordSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "record:madeProgress:previousProgress:assetSize:recordSize:");
}

id objc_msgSend_recordFetchedBlock(void *a1, const char *a2, ...)
{
  return _[a1 recordFetchedBlock];
}

id objc_msgSend_recordID(void *a1, const char *a2, ...)
{
  return _[a1 recordID];
}

id objc_msgSend_recordIDFromAssetIDPrefix_recordIDSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDFromAssetIDPrefix:recordIDSuffix:");
}

id objc_msgSend_recordIDFromBaseRecordID_pageIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDFromBaseRecordID:pageIndex:");
}

id objc_msgSend_recordIDString(void *a1, const char *a2, ...)
{
  return _[a1 recordIDString];
}

id objc_msgSend_recordIDStringWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDStringWithUUID:");
}

id objc_msgSend_recordIDStringWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDStringWithUUIDString:");
}

id objc_msgSend_recordIDSuffix(void *a1, const char *a2, ...)
{
  return _[a1 recordIDSuffix];
}

id objc_msgSend_recordIDs(void *a1, const char *a2, ...)
{
  return _[a1 recordIDs];
}

id objc_msgSend_recordIDsToDelete(void *a1, const char *a2, ...)
{
  return _[a1 recordIDsToDelete];
}

id objc_msgSend_recordLightrailForegroundRestoreFailed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordLightrailForegroundRestoreFailed:");
}

id objc_msgSend_recordMetadataWithSHA256Data_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordMetadataWithSHA256Data:error:");
}

id objc_msgSend_recordName(void *a1, const char *a2, ...)
{
  return _[a1 recordName];
}

id objc_msgSend_recordNameWithDeviceUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordNameWithDeviceUUID:");
}

id objc_msgSend_recordPlacingDurationWithStart_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordPlacingDurationWithStart:end:");
}

id objc_msgSend_recordPrefix(void *a1, const char *a2, ...)
{
  return _[a1 recordPrefix];
}

id objc_msgSend_recordRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 recordRepresentation];
}

id objc_msgSend_recordRestoreFailure_persona_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordRestoreFailure:persona:error:");
}

id objc_msgSend_recordSaveAttempts(void *a1, const char *a2, ...)
{
  return _[a1 recordSaveAttempts];
}

id objc_msgSend_recordSavePolicy(void *a1, const char *a2, ...)
{
  return _[a1 recordSavePolicy];
}

id objc_msgSend_recordSize(void *a1, const char *a2, ...)
{
  return _[a1 recordSize];
}

id objc_msgSend_recordType(void *a1, const char *a2, ...)
{
  return _[a1 recordType];
}

id objc_msgSend_recordVerificationFailure_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordVerificationFailure:error:");
}

id objc_msgSend_recordVerificationSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordVerificationSuccess:");
}

id objc_msgSend_recordWasSaved_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWasSaved:withError:");
}

id objc_msgSend_recordZone(void *a1, const char *a2, ...)
{
  return _[a1 recordZone];
}

id objc_msgSend_recordsToSave(void *a1, const char *a2, ...)
{
  return _[a1 recordsToSave];
}

id objc_msgSend_redirectDomain_forRelativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "redirectDomain:forRelativePath:");
}

id objc_msgSend_redirectStderrToFileAtPath(void *a1, const char *a2, ...)
{
  return _[a1 redirectStderrToFileAtPath];
}

id objc_msgSend_redirectStderrToFileDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 redirectStderrToFileDescriptor];
}

id objc_msgSend_redirectStdoutToFileAtPath(void *a1, const char *a2, ...)
{
  return _[a1 redirectStdoutToFileAtPath];
}

id objc_msgSend_redirectStdoutToFileDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 redirectStdoutToFileDescriptor];
}

id objc_msgSend_refreshAttributesArchiveWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAttributesArchiveWithData:error:");
}

id objc_msgSend_refreshAttributesPlistWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAttributesPlistWithData:error:");
}

id objc_msgSend_refreshAttributesWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAttributesWithData:error:");
}

id objc_msgSend_refreshCacheWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshCacheWithError:");
}

id objc_msgSend_refreshForBackupUDID_service_deleted_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshForBackupUDID:service:deleted:error:");
}

id objc_msgSend_refreshFromCopyWithAccount_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshFromCopyWithAccount:device:error:");
}

id objc_msgSend_refreshFromFilesystemWithAccount_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshFromFilesystemWithAccount:device:error:");
}

id objc_msgSend_refreshWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshWithDictionary:");
}

id objc_msgSend_refreshWithMBFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshWithMBFile:");
}

id objc_msgSend_refreshWithRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshWithRecord:");
}

id objc_msgSend_registerBackupActivity_criteria_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerBackupActivity:criteria:");
}

id objc_msgSend_registerItem_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerItem:error:");
}

id objc_msgSend_registerOTAKeyBagWithVolume_secret_keybagUUIDData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerOTAKeyBagWithVolume:secret:keybagUUIDData:error:");
}

id objc_msgSend_registerRequestClass_responseClass_forTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerRequestClass:responseClass:forTask:");
}

id objc_msgSend_registerRequestHandler_forTask_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerRequestHandler:forTask:session:");
}

id objc_msgSend_registerRequestID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerRequestID:options:handler:");
}

id objc_msgSend_registerSafeHarborWithIdentifier_path_type_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerSafeHarborWithIdentifier:path:type:error:");
}

id objc_msgSend_registerWithPasscode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerWithPasscode:error:");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_regularRestoreCoordinatorsAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularRestoreCoordinatorsAndReturnError:");
}

id objc_msgSend_relativePath(void *a1, const char *a2, ...)
{
  return _[a1 relativePath];
}

id objc_msgSend_relativePathAggregateDictionaryGroups(void *a1, const char *a2, ...)
{
  return _[a1 relativePathAggregateDictionaryGroups];
}

id objc_msgSend_relativePaths(void *a1, const char *a2, ...)
{
  return _[a1 relativePaths];
}

id objc_msgSend_relativePathsNotToBackup(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToBackup];
}

id objc_msgSend_relativePathsNotToBackupAndRestoreToAppleTVs(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToBackupAndRestoreToAppleTVs];
}

id objc_msgSend_relativePathsNotToBackupInMegaBackup(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToBackupInMegaBackup];
}

id objc_msgSend_relativePathsNotToBackupToDrive(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToBackupToDrive];
}

id objc_msgSend_relativePathsNotToBackupToLocal(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToBackupToLocal];
}

id objc_msgSend_relativePathsNotToBackupToService(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToBackupToService];
}

id objc_msgSend_relativePathsNotToCheckIfModifiedDuringBackup(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToCheckIfModifiedDuringBackup];
}

id objc_msgSend_relativePathsNotToMigrate(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToMigrate];
}

id objc_msgSend_relativePathsNotToRemoveIfNotRestored(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToRemoveIfNotRestored];
}

id objc_msgSend_relativePathsNotToRestore(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToRestore];
}

id objc_msgSend_relativePathsNotToRestoreFromLocal(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToRestoreFromLocal];
}

id objc_msgSend_relativePathsNotToRestoreToIPods(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsNotToRestoreToIPods];
}

id objc_msgSend_relativePathsOfPlaceholderResourcesWithBundleID_lastModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relativePathsOfPlaceholderResourcesWithBundleID:lastModified:");
}

id objc_msgSend_relativePathsOfSystemFilesToAlwaysRemoveOnRestore(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsOfSystemFilesToAlwaysRemoveOnRestore];
}

id objc_msgSend_relativePathsOfSystemFilesToAlwaysRestore(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsOfSystemFilesToAlwaysRestore];
}

id objc_msgSend_relativePathsToBackgroundRestore(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToBackgroundRestore];
}

id objc_msgSend_relativePathsToBackup(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToBackup];
}

id objc_msgSend_relativePathsToBackupAndRestore(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToBackupAndRestore];
}

id objc_msgSend_relativePathsToBackupIgnoringProtectionClass(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToBackupIgnoringProtectionClass];
}

id objc_msgSend_relativePathsToBackupToDriveAndStandardAccount(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToBackupToDriveAndStandardAccount];
}

id objc_msgSend_relativePathsToIgnoreExclusionsForDrive(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToIgnoreExclusionsForDrive];
}

id objc_msgSend_relativePathsToOnlyBackupEncrypted(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToOnlyBackupEncrypted];
}

id objc_msgSend_relativePathsToRemoveOnRestore(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToRemoveOnRestore];
}

id objc_msgSend_relativePathsToRestore(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToRestore];
}

id objc_msgSend_relativePathsToRestoreOnly(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToRestoreOnly];
}

id objc_msgSend_relativePathsToRestoreOnlyFromService(void *a1, const char *a2, ...)
{
  return _[a1 relativePathsToRestoreOnlyFromService];
}

id objc_msgSend_releaseCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseCache:");
}

id objc_msgSend_releaseCachedFileDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 releaseCachedFileDescriptors];
}

id objc_msgSend_releaseLock(void *a1, const char *a2, ...)
{
  return _[a1 releaseLock];
}

id objc_msgSend_releaseLockAsync(void *a1, const char *a2, ...)
{
  return _[a1 releaseLockAsync];
}

id objc_msgSend_releaseLockNow(void *a1, const char *a2, ...)
{
  return _[a1 releaseLockNow];
}

id objc_msgSend_releaseLockSync(void *a1, const char *a2, ...)
{
  return _[a1 releaseLockSync];
}

id objc_msgSend_releaseLockWithBackupUDID_account_owner_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseLockWithBackupUDID:account:owner:connection:error:");
}

id objc_msgSend_releaseWorkAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseWorkAssertion:");
}

id objc_msgSend_releaseWorkAssertionWithClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseWorkAssertionWithClass:");
}

id objc_msgSend_reloaded(void *a1, const char *a2, ...)
{
  return _[a1 reloaded];
}

id objc_msgSend_remainingCellularBalance(void *a1, const char *a2, ...)
{
  return _[a1 remainingCellularBalance];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteSize(void *a1, const char *a2, ...)
{
  return _[a1 remoteSize];
}

id objc_msgSend_remove(void *a1, const char *a2, ...)
{
  return _[a1 remove];
}

id objc_msgSend_removeAllBackups(void *a1, const char *a2, ...)
{
  return _[a1 removeAllBackups];
}

id objc_msgSend_removeAllContainers(void *a1, const char *a2, ...)
{
  return _[a1 removeAllContainers];
}

id objc_msgSend_removeAllDisabledDomains(void *a1, const char *a2, ...)
{
  return _[a1 removeAllDisabledDomains];
}

id objc_msgSend_removeAllFileChanges(void *a1, const char *a2, ...)
{
  return _[a1 removeAllFileChanges];
}

id objc_msgSend_removeAllFileEncryptionKeys(void *a1, const char *a2, ...)
{
  return _[a1 removeAllFileEncryptionKeys];
}

id objc_msgSend_removeAllFilesMissingEncryptionKey(void *a1, const char *a2, ...)
{
  return _[a1 removeAllFilesMissingEncryptionKey];
}

id objc_msgSend_removeAllFilesMissingEncryptionKeys(void *a1, const char *a2, ...)
{
  return _[a1 removeAllFilesMissingEncryptionKeys];
}

id objc_msgSend_removeAllMissedEncryptionKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllMissedEncryptionKeys:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAllOrphanedItems(void *a1, const char *a2, ...)
{
  return _[a1 removeAllOrphanedItems];
}

id objc_msgSend_removeAllOrphanedItemsForSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllOrphanedItemsForSnapshot:");
}

id objc_msgSend_removeAllProtectionClassesToRestore(void *a1, const char *a2, ...)
{
  return _[a1 removeAllProtectionClassesToRestore];
}

id objc_msgSend_removeAllRestores(void *a1, const char *a2, ...)
{
  return _[a1 removeAllRestores];
}

id objc_msgSend_removeAllSQLiteFilesAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllSQLiteFilesAtPath:");
}

id objc_msgSend_removeAllScannedDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllScannedDomains:");
}

id objc_msgSend_removeAllValues(void *a1, const char *a2, ...)
{
  return _[a1 removeAllValues];
}

id objc_msgSend_removeAllValuesWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllValuesWithCompletionBlock:");
}

id objc_msgSend_removeBackupForUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeBackupForUDID:");
}

id objc_msgSend_removeBackupSnapshotsForAllPersonae(void *a1, const char *a2, ...)
{
  return _[a1 removeBackupSnapshotsForAllPersonae];
}

id objc_msgSend_removeDeletedFileChanges(void *a1, const char *a2, ...)
{
  return _[a1 removeDeletedFileChanges];
}

id objc_msgSend_removeDeletedRestoreFiles(void *a1, const char *a2, ...)
{
  return _[a1 removeDeletedRestoreFiles];
}

id objc_msgSend_removeDeviceForUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeviceForUUID:");
}

id objc_msgSend_removeDisabledDomainNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDisabledDomainNames:");
}

id objc_msgSend_removeDomain_cache_databaseManager_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDomain:cache:databaseManager:account:connection:error:");
}

id objc_msgSend_removeDomainName_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDomainName:account:connection:error:");
}

id objc_msgSend_removeDomainName_backupUDID_lastModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDomainName:backupUDID:lastModified:");
}

id objc_msgSend_removeDomainName_backupUDID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDomainName:backupUDID:lastModified:error:");
}

id objc_msgSend_removeDomainRequestForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDomainRequestForDevice:");
}

id objc_msgSend_removeDomainsNotMatchingRegex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDomainsNotMatchingRegex:");
}

id objc_msgSend_removeEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEngine:");
}

id objc_msgSend_removeEphemeralRetriedFiles(void *a1, const char *a2, ...)
{
  return _[a1 removeEphemeralRetriedFiles];
}

id objc_msgSend_removeFailedAssetFromDestination_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFailedAssetFromDestination:withError:");
}

id objc_msgSend_removeFileAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFileAtPath:");
}

id objc_msgSend_removeFileEncryptionKeyForInode_volumeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFileEncryptionKeyForInode:volumeType:");
}

id objc_msgSend_removeFileEncryptionKeyForInodeNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFileEncryptionKeyForInodeNumber:");
}

id objc_msgSend_removeFileID_forSnapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFileID:forSnapshotID:backupUDID:");
}

id objc_msgSend_removeFileIDs_backupUDID_snapshotID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFileIDs:backupUDID:snapshotID:lastModified:error:");
}

id objc_msgSend_removeFileMissingEncryptionKeyWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFileMissingEncryptionKeyWithPath:");
}

id objc_msgSend_removeFilesCount(void *a1, const char *a2, ...)
{
  return _[a1 removeFilesCount];
}

id objc_msgSend_removeFilesNotAlreadyUploaded(void *a1, const char *a2, ...)
{
  return _[a1 removeFilesNotAlreadyUploaded];
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:options:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeItemsAtPaths_options_results_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemsAtPaths:options:results:error:");
}

id objc_msgSend_removeJournalsForSQLiteFileAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeJournalsForSQLiteFileAtPath:error:");
}

id objc_msgSend_removeKeybagSecretForUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeKeybagSecretForUUID:error:");
}

id objc_msgSend_removeKeybagWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeKeybagWithUUID:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeLocalBackupPasswordAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLocalBackupPasswordAndReturnError:");
}

id objc_msgSend_removeLockForBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLockForBackupUDID:");
}

id objc_msgSend_removeManifestAndFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeManifestAndFiles:");
}

id objc_msgSend_removeMissedEncryptionKeysForVolume_inode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMissedEncryptionKeysForVolume:inode:error:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectIdenticalTo:");
}

id objc_msgSend_removeObjectWithDomain_andKey_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectWithDomain:andKey:withError:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeOldSafeHarborsWithExpiration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeOldSafeHarborsWithExpiration:");
}

id objc_msgSend_removePropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePropertyForKey:");
}

id objc_msgSend_removeRestoreKeyBagsWithAccount_device_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRestoreKeyBagsWithAccount:device:");
}

id objc_msgSend_removeRestoreKeyBagsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRestoreKeyBagsWithError:");
}

id objc_msgSend_removeRestoreKeybags(void *a1, const char *a2, ...)
{
  return _[a1 removeRestoreKeybags];
}

id objc_msgSend_removeRestorePrefetchCachesOlderThanDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRestorePrefetchCachesOlderThanDate:");
}

id objc_msgSend_removeSQLiteFileAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSQLiteFileAtPath:error:");
}

id objc_msgSend_removeSafeHarborWithIdentifier_type_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSafeHarborWithIdentifier:type:error:");
}

id objc_msgSend_removeServiceKeychainBackup(void *a1, const char *a2, ...)
{
  return _[a1 removeServiceKeychainBackup];
}

id objc_msgSend_removeSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSnapshot:");
}

id objc_msgSend_removeSnapshotForID_backupUDID_lastModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSnapshotForID:backupUDID:lastModified:");
}

id objc_msgSend_removeSnapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSnapshotID:");
}

id objc_msgSend_removeStaleStateForUninstalledAppsForPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeStaleStateForUninstalledAppsForPersona:");
}

id objc_msgSend_removeTemporaryDirectoriesForAllPersonae(void *a1, const char *a2, ...)
{
  return _[a1 removeTemporaryDirectoriesForAllPersonae];
}

id objc_msgSend_removeUncommittedFileWithDomain_relativePath_pendingManifestID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeUncommittedFileWithDomain:relativePath:pendingManifestID:");
}

id objc_msgSend_rename_sourceRpath_destinationBasePath_destinationBaseFD_destinationRpath_flags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rename:sourceRpath:destinationBasePath:destinationBaseFD:destinationRpath:flags:error:");
}

id objc_msgSend_renewCredentials(void *a1, const char *a2, ...)
{
  return _[a1 renewCredentials];
}

id objc_msgSend_renewCredentialsForAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renewCredentialsForAccount:completion:");
}

id objc_msgSend_renewInterval(void *a1, const char *a2, ...)
{
  return _[a1 renewInterval];
}

id objc_msgSend_repair(void *a1, const char *a2, ...)
{
  return _[a1 repair];
}

id objc_msgSend_replaceBytesInRange_withBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceBytesInRange:withBytes:");
}

id objc_msgSend_replayJournalResetOrDisableWithOperationTracker_serviceManager_disable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replayJournalResetOrDisableWithOperationTracker:serviceManager:disable:error:");
}

id objc_msgSend_replayWithOperationTracker_actionCount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replayWithOperationTracker:actionCount:error:");
}

id objc_msgSend_replenishRetryTokens(void *a1, const char *a2, ...)
{
  return _[a1 replenishRetryTokens];
}

id objc_msgSend_reportBackgroundRestoreTimeoutWithPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportBackgroundRestoreTimeoutWithPersona:");
}

id objc_msgSend_reportBackupStateChangeForEngine_state_start_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportBackupStateChangeForEngine:state:start:end:");
}

id objc_msgSend_reportBackupVerificationFailure(void *a1, const char *a2, ...)
{
  return _[a1 reportBackupVerificationFailure];
}

id objc_msgSend_reportLightrailRestoreFailed(void *a1, const char *a2, ...)
{
  return _[a1 reportLightrailRestoreFailed];
}

id objc_msgSend_reportRestoreErrorsIn_persona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportRestoreErrorsIn:persona:");
}

id objc_msgSend_reportRestoreStateChangeForEngine_state_start_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportRestoreStateChangeForEngine:state:start:end:");
}

id objc_msgSend_reportRestoreStatusForState_start_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportRestoreStatusForState:start:end:");
}

id objc_msgSend_reportStatusForAccount_manager_key_values_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportStatusForAccount:manager:key:values:");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestAsset_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestAsset:error:");
}

id objc_msgSend_requestBackupSemaphore(void *a1, const char *a2, ...)
{
  return _[a1 requestBackupSemaphore];
}

id objc_msgSend_requestInitSemaphore(void *a1, const char *a2, ...)
{
  return _[a1 requestInitSemaphore];
}

id objc_msgSend_requestInstallOfAppsInRestoreWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestInstallOfAppsInRestoreWithCompletion:");
}

id objc_msgSend_requestKeychainSemaphore(void *a1, const char *a2, ...)
{
  return _[a1 requestKeychainSemaphore];
}

id objc_msgSend_requestMegaBackupExpirationDate_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestMegaBackupExpirationDate:account:error:");
}

id objc_msgSend_requestMegaBackupForAccount_deviceBackupUUID_deviceTotalUsedSpaceInBytes_entryMethod_deepLinkURL_queue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestMegaBackupForAccount:deviceBackupUUID:deviceTotalUsedSpaceInBytes:entryMethod:deepLinkURL:queue:completion:");
}

id objc_msgSend_requestPreflightSemaphore(void *a1, const char *a2, ...)
{
  return _[a1 requestPreflightSemaphore];
}

id objc_msgSend_requestWithDevice_domainHMAC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithDevice:domainHMAC:");
}

id objc_msgSend_requestWithMethod_URL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithMethod:URL:");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requestsToSupportBudget(void *a1, const char *a2, ...)
{
  return _[a1 requestsToSupportBudget];
}

id objc_msgSend_requiredProductVersion(void *a1, const char *a2, ...)
{
  return _[a1 requiredProductVersion];
}

id objc_msgSend_requiredRestoreSnapshotFormatString(void *a1, const char *a2, ...)
{
  return _[a1 requiredRestoreSnapshotFormatString];
}

id objc_msgSend_requiresFullBackupForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiresFullBackupForAccount:");
}

id objc_msgSend_reservedBackupSizeListWithAccount_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reservedBackupSizeListWithAccount:connection:error:");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_resetCacheWithAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCacheWithAccount:error:");
}

id objc_msgSend_resetCachedConfigurationForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCachedConfigurationForAccount:");
}

id objc_msgSend_resetConsecutiveRetriesTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 resetConsecutiveRetriesTimeInterval];
}

id objc_msgSend_resetDatabaseForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetDatabaseForAccount:error:");
}

id objc_msgSend_resetDatabaseWithAccount_policy_operationGroup_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetDatabaseWithAccount:policy:operationGroup:error:");
}

id objc_msgSend_resetIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 resetIdleTimer];
}

id objc_msgSend_resetRenewalTimer(void *a1, const char *a2, ...)
{
  return _[a1 resetRenewalTimer];
}

id objc_msgSend_resetRestorePolicy(void *a1, const char *a2, ...)
{
  return _[a1 resetRestorePolicy];
}

id objc_msgSend_resetStartTime(void *a1, const char *a2, ...)
{
  return _[a1 resetStartTime];
}

id objc_msgSend_resourceValuesForKeys_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceValuesForKeys:error:");
}

id objc_msgSend_resourcesSize(void *a1, const char *a2, ...)
{
  return _[a1 resourcesSize];
}

id objc_msgSend_responseCallback(void *a1, const char *a2, ...)
{
  return _[a1 responseCallback];
}

id objc_msgSend_responseType(void *a1, const char *a2, ...)
{
  return _[a1 responseType];
}

id objc_msgSend_restore(void *a1, const char *a2, ...)
{
  return _[a1 restore];
}

id objc_msgSend_restoreApplicationWithBundleID_failed_qos_context_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreApplicationWithBundleID:failed:qos:context:account:error:");
}

id objc_msgSend_restoreAssetIDsToFailFetchingRegex(void *a1, const char *a2, ...)
{
  return _[a1 restoreAssetIDsToFailFetchingRegex];
}

id objc_msgSend_restoreAssetWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreAssetWithError:");
}

id objc_msgSend_restoreAssetWithOperationTracker_destination_logger_cache_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreAssetWithOperationTracker:destination:logger:cache:device:error:");
}

id objc_msgSend_restoreAttributesToDestination_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreAttributesToDestination:error:");
}

id objc_msgSend_restoreAttributesToDestination_withUserID_groupID_permissions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreAttributesToDestination:withUserID:groupID:permissions:error:");
}

id objc_msgSend_restoreBackupLastModified(void *a1, const char *a2, ...)
{
  return _[a1 restoreBackupLastModified];
}

id objc_msgSend_restoreBackupUDID(void *a1, const char *a2, ...)
{
  return _[a1 restoreBackupUDID];
}

id objc_msgSend_restoreBehaviorForDomain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreBehaviorForDomain:error:");
}

id objc_msgSend_restoreBehaviorForFile_debugContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreBehaviorForFile:debugContext:error:");
}

id objc_msgSend_restoreBookWithPath_context_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreBookWithPath:context:account:error:");
}

id objc_msgSend_restoreBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 restoreBuildVersion];
}

id objc_msgSend_restoreCompleteWithInfo_backupUDID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreCompleteWithInfo:backupUDID:error:");
}

id objc_msgSend_restoreDataExistsForApplicationWithBundleID_size_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreDataExistsForApplicationWithBundleID:size:account:");
}

id objc_msgSend_restoreDepotWithPersona_destination_restoreDepotOverridePath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreDepotWithPersona:destination:restoreDepotOverridePath:error:");
}

id objc_msgSend_restoreDirectoryAnnotatorWithPersona_engineType_backupPolicy_shouldRestoreSystemFiles_encrypted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreDirectoryAnnotatorWithPersona:engineType:backupPolicy:shouldRestoreSystemFiles:encrypted:");
}

id objc_msgSend_restoreDirectoryAtPath_settingDataProtection_settingOwnershipAndFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreDirectoryAtPath:settingDataProtection:settingOwnershipAndFlags:");
}

id objc_msgSend_restoreEmptyRegularFileAtPath_settingAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreEmptyRegularFileAtPath:settingAttributes:");
}

id objc_msgSend_restoreExtendedAttributesToDestination_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreExtendedAttributesToDestination:withError:");
}

id objc_msgSend_restoreFailuresForDataClass_assetType_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFailuresForDataClass:assetType:range:");
}

id objc_msgSend_restoreFailuresPlistPath(void *a1, const char *a2, ...)
{
  return _[a1 restoreFailuresPlistPath];
}

id objc_msgSend_restoreFile(void *a1, const char *a2, ...)
{
  return _[a1 restoreFile];
}

id objc_msgSend_restoreFileExistsWithDomainName_relativePath_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFileExistsWithDomainName:relativePath:backupUDID:");
}

id objc_msgSend_restoreFileExistsWithPath_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFileExistsWithPath:account:");
}

id objc_msgSend_restoreFileForFileID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFileForFileID:");
}

id objc_msgSend_restoreFileForItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFileForItemID:");
}

id objc_msgSend_restoreFileWithPath_context_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFileWithPath:context:account:error:");
}

id objc_msgSend_restoreFilesCount_size_forRestoreID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFilesCount:size:forRestoreID:backupUDID:");
}

id objc_msgSend_restoreFilesExistForDomainName_backupUDID_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFilesExistForDomainName:backupUDID:size:");
}

id objc_msgSend_restoreFilesForBackupUDID_offset_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFilesForBackupUDID:offset:limit:");
}

id objc_msgSend_restoreFilesForDomain_relativePath_pendingOnly_range_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFilesForDomain:relativePath:pendingOnly:range:account:error:");
}

id objc_msgSend_restoreFilesForSnapshotID_backupUDID_restoreID_pendingOnly_offset_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFilesForSnapshotID:backupUDID:restoreID:pendingOnly:offset:limit:");
}

id objc_msgSend_restoreFilesWithPaths_context_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreFilesWithPaths:context:account:error:");
}

id objc_msgSend_restoreID(void *a1, const char *a2, ...)
{
  return _[a1 restoreID];
}

id objc_msgSend_restoreIDForMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreIDForMode:");
}

id objc_msgSend_restoreInfoForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreInfoForAccount:");
}

id objc_msgSend_restoreKeyBagsByID(void *a1, const char *a2, ...)
{
  return _[a1 restoreKeyBagsByID];
}

id objc_msgSend_restoreKeyBagsForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreKeyBagsForDevice:");
}

id objc_msgSend_restoreKeyBagsPath(void *a1, const char *a2, ...)
{
  return _[a1 restoreKeyBagsPath];
}

id objc_msgSend_restoreLastModifiedWithFD_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreLastModifiedWithFD:");
}

id objc_msgSend_restoreLogger(void *a1, const char *a2, ...)
{
  return _[a1 restoreLogger];
}

id objc_msgSend_restoreMode(void *a1, const char *a2, ...)
{
  return _[a1 restoreMode];
}

id objc_msgSend_restoreModeForBackgroundAppWithRestoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreModeForBackgroundAppWithRestoreID:");
}

id objc_msgSend_restoreModeWithType_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreModeWithType:value:");
}

id objc_msgSend_restoreNetworkAccessPrompt(void *a1, const char *a2, ...)
{
  return _[a1 restoreNetworkAccessPrompt];
}

id objc_msgSend_restoreOperationLogPath(void *a1, const char *a2, ...)
{
  return _[a1 restoreOperationLogPath];
}

id objc_msgSend_restoreOwnershipToDestination_withUserID_withGroupID_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreOwnershipToDestination:withUserID:withGroupID:withError:");
}

id objc_msgSend_restorePathForDriveRestorable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restorePathForDriveRestorable:");
}

id objc_msgSend_restorePathsToFailVerifyingRegex(void *a1, const char *a2, ...)
{
  return _[a1 restorePathsToFailVerifyingRegex];
}

id objc_msgSend_restorePersonaWithSavedPersonaContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restorePersonaWithSavedPersonaContext:");
}

id objc_msgSend_restorePlan(void *a1, const char *a2, ...)
{
  return _[a1 restorePlan];
}

id objc_msgSend_restorePlanForAccount_snapshotUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restorePlanForAccount:snapshotUUID:error:");
}

id objc_msgSend_restorePolicy(void *a1, const char *a2, ...)
{
  return _[a1 restorePolicy];
}

id objc_msgSend_restorePrefetchDirectories(void *a1, const char *a2, ...)
{
  return _[a1 restorePrefetchDirectories];
}

id objc_msgSend_restorePrefetchDirectoryForDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restorePrefetchDirectoryForDomain:");
}

id objc_msgSend_restorePreviousSettingsEnabledForMegaBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restorePreviousSettingsEnabledForMegaBackup:");
}

id objc_msgSend_restorePreviousSettingsEnabledForMegaBackup_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restorePreviousSettingsEnabledForMegaBackup:error:");
}

id objc_msgSend_restoreProtectionClassToDestination_unspecifiedDirectoryProtectionClass_logger_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreProtectionClassToDestination:unspecifiedDirectoryProtectionClass:logger:error:");
}

id objc_msgSend_restoreQosByContext(void *a1, const char *a2, ...)
{
  return _[a1 restoreQosByContext];
}

id objc_msgSend_restoreRegularFileAtPath_settingAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreRegularFileAtPath:settingAttributes:");
}

id objc_msgSend_restoreRootForDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreRootForDomain:");
}

id objc_msgSend_restoreRootPath(void *a1, const char *a2, ...)
{
  return _[a1 restoreRootPath];
}

id objc_msgSend_restoreSession(void *a1, const char *a2, ...)
{
  return _[a1 restoreSession];
}

id objc_msgSend_restoreSessionForPersonaID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreSessionForPersonaID:");
}

id objc_msgSend_restoreSessionOverridden(void *a1, const char *a2, ...)
{
  return _[a1 restoreSessionOverridden];
}

id objc_msgSend_restoreSessionWithPropertyList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreSessionWithPropertyList:");
}

id objc_msgSend_restoreSnapshotID(void *a1, const char *a2, ...)
{
  return _[a1 restoreSnapshotID];
}

id objc_msgSend_restoreSnapshotsDatabaseDirectory(void *a1, const char *a2, ...)
{
  return _[a1 restoreSnapshotsDatabaseDirectory];
}

id objc_msgSend_restoreSnapshotsDirectoryRoot(void *a1, const char *a2, ...)
{
  return _[a1 restoreSnapshotsDirectoryRoot];
}

id objc_msgSend_restoreStartDate(void *a1, const char *a2, ...)
{
  return _[a1 restoreStartDate];
}

id objc_msgSend_restoreState(void *a1, const char *a2, ...)
{
  return _[a1 restoreState];
}

id objc_msgSend_restoreStateDescription(void *a1, const char *a2, ...)
{
  return _[a1 restoreStateDescription];
}

id objc_msgSend_restoreStateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreStateWithError:");
}

id objc_msgSend_restoreSupportsBatching(void *a1, const char *a2, ...)
{
  return _[a1 restoreSupportsBatching];
}

id objc_msgSend_restoreSymbolicLinkAtPath_withTarget_settingOwnershipAndFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreSymbolicLinkAtPath:withTarget:settingOwnershipAndFlags:");
}

id objc_msgSend_restoreTTRTimer(void *a1, const char *a2, ...)
{
  return _[a1 restoreTTRTimer];
}

id objc_msgSend_restoreTelemetryID(void *a1, const char *a2, ...)
{
  return _[a1 restoreTelemetryID];
}

id objc_msgSend_restoreType(void *a1, const char *a2, ...)
{
  return _[a1 restoreType];
}

id objc_msgSend_restoreTypeForContainerType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreTypeForContainerType:");
}

id objc_msgSend_restoreUserURL_fromBuild_restoreType_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreUserURL:fromBuild:restoreType:completionHandler:");
}

id objc_msgSend_restoreVerificationEnabledForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreVerificationEnabledForAccount:");
}

id objc_msgSend_restoreVerificationSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreVerificationSummary:");
}

id objc_msgSend_restoreWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreWithCompletionBlock:");
}

id objc_msgSend_restoreWithDomain_rootPath_snapshotUUID_deviceUUID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreWithDomain:rootPath:snapshotUUID:deviceUUID:account:connection:error:");
}

id objc_msgSend_restoredBackupDeviceName(void *a1, const char *a2, ...)
{
  return _[a1 restoredBackupDeviceName];
}

id objc_msgSend_restoredSnapshotBackupPolicy(void *a1, const char *a2, ...)
{
  return _[a1 restoredSnapshotBackupPolicy];
}

id objc_msgSend_restoresPrimaryAccount(void *a1, const char *a2, ...)
{
  return _[a1 restoresPrimaryAccount];
}

id objc_msgSend_restoringBundleID(void *a1, const char *a2, ...)
{
  return _[a1 restoringBundleID];
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return _[a1 result];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_resumeDeviceTransferWithTaskType_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeDeviceTransferWithTaskType:connection:error:");
}

id objc_msgSend_resumeInProgressManifest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeInProgressManifest:");
}

id objc_msgSend_resumeWatchdogIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 resumeWatchdogIfNeeded];
}

id objc_msgSend_resumeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeWithError:");
}

id objc_msgSend_resumingSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 resumingSnapshot];
}

id objc_msgSend_retainCountForSignature_volumeType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retainCountForSignature:volumeType:error:");
}

id objc_msgSend_retryAfterInterval(void *a1, const char *a2, ...)
{
  return _[a1 retryAfterInterval];
}

id objc_msgSend_retryAppDataDownloadsForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryAppDataDownloadsForAccount:");
}

id objc_msgSend_retryAppDataDownloadsWithNetworkConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryAppDataDownloadsWithNetworkConnectivity:");
}

id objc_msgSend_retryDate(void *a1, const char *a2, ...)
{
  return _[a1 retryDate];
}

id objc_msgSend_retryInterval(void *a1, const char *a2, ...)
{
  return _[a1 retryInterval];
}

id objc_msgSend_retrySemaphore(void *a1, const char *a2, ...)
{
  return _[a1 retrySemaphore];
}

id objc_msgSend_retryStrategy(void *a1, const char *a2, ...)
{
  return _[a1 retryStrategy];
}

id objc_msgSend_retryWhenNetworkDisconnected(void *a1, const char *a2, ...)
{
  return _[a1 retryWhenNetworkDisconnected];
}

id objc_msgSend_retrying(void *a1, const char *a2, ...)
{
  return _[a1 retrying];
}

id objc_msgSend_reusedAssetRecords(void *a1, const char *a2, ...)
{
  return _[a1 reusedAssetRecords];
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_rollKeyBagWithKeyBagID_forEngine_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rollKeyBagWithKeyBagID:forEngine:error:");
}

id objc_msgSend_rollback(void *a1, const char *a2, ...)
{
  return _[a1 rollback];
}

id objc_msgSend_rootPath(void *a1, const char *a2, ...)
{
  return _[a1 rootPath];
}

id objc_msgSend_rootPathRelativeToVolumeMountPoint(void *a1, const char *a2, ...)
{
  return _[a1 rootPathRelativeToVolumeMountPoint];
}

id objc_msgSend_rootPathToMonitor(void *a1, const char *a2, ...)
{
  return _[a1 rootPathToMonitor];
}

id objc_msgSend_rootURL(void *a1, const char *a2, ...)
{
  return _[a1 rootURL];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_runEncodingTask_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runEncodingTask:reply:");
}

id objc_msgSend_runWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runWithError:");
}

id objc_msgSend_runWithQueue_stateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runWithQueue:stateChange:");
}

id objc_msgSend_runnableXPCActivity(void *a1, const char *a2, ...)
{
  return _[a1 runnableXPCActivity];
}

id objc_msgSend_safeHarborDir(void *a1, const char *a2, ...)
{
  return _[a1 safeHarborDir];
}

id objc_msgSend_safeHarborDirectory(void *a1, const char *a2, ...)
{
  return _[a1 safeHarborDirectory];
}

id objc_msgSend_safeHarborExpiration(void *a1, const char *a2, ...)
{
  return _[a1 safeHarborExpiration];
}

id objc_msgSend_safeHarborWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeHarborWithPath:");
}

id objc_msgSend_safeHarborsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeHarborsWithError:");
}

id objc_msgSend_salt(void *a1, const char *a2, ...)
{
  return _[a1 salt];
}

id objc_msgSend_sampleUploadedBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sampleUploadedBytes:");
}

id objc_msgSend_samplingPeriod(void *a1, const char *a2, ...)
{
  return _[a1 samplingPeriod];
}

id objc_msgSend_sanitizedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sanitizedError:");
}

id objc_msgSend_saveAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveAccount:error:");
}

id objc_msgSend_saveAccount_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveAccount:withCompletionHandler:");
}

id objc_msgSend_saveAccount_withDataclassActions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveAccount:withDataclassActions:completion:");
}

id objc_msgSend_saveAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveAtPath:");
}

id objc_msgSend_saveAttempts(void *a1, const char *a2, ...)
{
  return _[a1 saveAttempts];
}

id objc_msgSend_saveBackgroundRestoreCellularAccess_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveBackgroundRestoreCellularAccess:account:error:");
}

id objc_msgSend_saveBackupDomainsEnabledForMegaBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveBackupDomainsEnabledForMegaBackup:");
}

id objc_msgSend_saveBackupEnabledForMegaBackup(void *a1, const char *a2, ...)
{
  return _[a1 saveBackupEnabledForMegaBackup];
}

id objc_msgSend_saveBackupStateInfo_forInitialMegaBackup_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveBackupStateInfo:forInitialMegaBackup:account:");
}

id objc_msgSend_saveDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveDevice:error:");
}

id objc_msgSend_saveError(void *a1, const char *a2, ...)
{
  return _[a1 saveError];
}

id objc_msgSend_saveFailedBackupShadowStateWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveFailedBackupShadowStateWithAccount:");
}

id objc_msgSend_saveGroup(void *a1, const char *a2, ...)
{
  return _[a1 saveGroup];
}

id objc_msgSend_saveIncrementally(void *a1, const char *a2, ...)
{
  return _[a1 saveIncrementally];
}

id objc_msgSend_saveInfos(void *a1, const char *a2, ...)
{
  return _[a1 saveInfos];
}

id objc_msgSend_saveInfosByRecordID(void *a1, const char *a2, ...)
{
  return _[a1 saveInfosByRecordID];
}

id objc_msgSend_saveKeybagsForBackupUDID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveKeybagsForBackupUDID:account:connection:error:");
}

id objc_msgSend_saveLockWithAccount_timeout_pluginFields_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveLockWithAccount:timeout:pluginFields:error:");
}

id objc_msgSend_savePolicy(void *a1, const char *a2, ...)
{
  return _[a1 savePolicy];
}

id objc_msgSend_saveRecord_assetSize_delegate_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRecord:assetSize:delegate:completion:");
}

id objc_msgSend_saveRecord_delegate_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRecord:delegate:completion:");
}

id objc_msgSend_saveRecordsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRecordsWithCompletion:");
}

id objc_msgSend_saveRefreshState_toCache_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRefreshState:toCache:error:");
}

id objc_msgSend_saveRestoreKeyBagDatasByID_secret_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRestoreKeyBagDatasByID:secret:error:");
}

id objc_msgSend_saveRestoreKeyBagsWithAccount_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRestoreKeyBagsWithAccount:device:error:");
}

id objc_msgSend_saveRestoreStateInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRestoreStateInfo:");
}

id objc_msgSend_saveRestoreStateInfo_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRestoreStateInfo:account:");
}

id objc_msgSend_saveSemaphore(void *a1, const char *a2, ...)
{
  return _[a1 saveSemaphore];
}

id objc_msgSend_saveSyncSettingsEnabledForMegaBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveSyncSettingsEnabledForMegaBackup:");
}

id objc_msgSend_saveToCacheWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveToCacheWithCompletion:");
}

id objc_msgSend_saveToCacheWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveToCacheWithError:");
}

id objc_msgSend_saveWithBatchSave_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveWithBatchSave:completion:");
}

id objc_msgSend_saveWithOperationTracker_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveWithOperationTracker:completion:");
}

id objc_msgSend_saveWithOperationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveWithOperationTracker:error:");
}

id objc_msgSend_scanAllDomainsFlags(void *a1, const char *a2, ...)
{
  return _[a1 scanAllDomainsFlags];
}

id objc_msgSend_scanDomain_snapshotMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanDomain:snapshotMountPoint:");
}

id objc_msgSend_scanDomains_pendingSnapshotDatabase_progress_summary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanDomains:pendingSnapshotDatabase:progress:summary:error:");
}

id objc_msgSend_scannedDomainsCount(void *a1, const char *a2, ...)
{
  return _[a1 scannedDomainsCount];
}

id objc_msgSend_scanner(void *a1, const char *a2, ...)
{
  return _[a1 scanner];
}

id objc_msgSend_scheduleInQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleInQueue:");
}

id objc_msgSend_scheduleInRunLoop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleInRunLoop:");
}

id objc_msgSend_scheduler(void *a1, const char *a2, ...)
{
  return _[a1 scheduler];
}

id objc_msgSend_schemaCurrentVersion(void *a1, const char *a2, ...)
{
  return _[a1 schemaCurrentVersion];
}

id objc_msgSend_schemaMinDatabaseVersionForUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 schemaMinDatabaseVersionForUpgrade];
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_scrubSQLiteFileCopyAtRelativePath_copyTemporaryPath_domain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrubSQLiteFileCopyAtRelativePath:copyTemporaryPath:domain:");
}

id objc_msgSend_scrubbedSQLiteFileCount(void *a1, const char *a2, ...)
{
  return _[a1 scrubbedSQLiteFileCount];
}

id objc_msgSend_seconds(void *a1, const char *a2, ...)
{
  return _[a1 seconds];
}

id objc_msgSend_secondsRemaining(void *a1, const char *a2, ...)
{
  return _[a1 secondsRemaining];
}

id objc_msgSend_secret(void *a1, const char *a2, ...)
{
  return _[a1 secret];
}

id objc_msgSend_secretForUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secretForUUID:");
}

id objc_msgSend_securityLevelForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securityLevelForAccount:");
}

id objc_msgSend_selfPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 selfPublicKey];
}

id objc_msgSend_sendAsyncRequest_properties_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAsyncRequest:properties:block:");
}

id objc_msgSend_sendBackgroundRestoreCompletion_snapshotUUID_snapshotIndex_snapshotFormat_isRestoringUsingFileLists_duration_peakMemoryUsage_error_fatalErrors_domainsTopNSizes_domainsTopNFileCount_failedDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendBackgroundRestoreCompletion:snapshotUUID:snapshotIndex:snapshotFormat:isRestoringUsingFileLists:duration:peakMemoryUsage:error:fatalErrors:domainsTopNSizes:domainsTopNFileCount:failedDomains:");
}

id objc_msgSend_sendBackgroundRestoreHeartbeat_restoreInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendBackgroundRestoreHeartbeat:restoreInfo:");
}

id objc_msgSend_sendBackupEngineCompletionStatus_duration_peakMemoryUsage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendBackupEngineCompletionStatus:duration:peakMemoryUsage:error:");
}

id objc_msgSend_sendBackupEngineStateChangeStatus_state_start_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendBackupEngineStateChangeStatus:state:start:end:");
}

id objc_msgSend_sendEngineCompletionTelemetry_duration_peakMemoryUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEngineCompletionTelemetry:duration:peakMemoryUsage:");
}

id objc_msgSend_sendMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:");
}

id objc_msgSend_sendMessage_barrierBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:barrierBlock:");
}

id objc_msgSend_sendOneMessageWithSessionInfo_userInfo_category_type_payload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendOneMessageWithSessionInfo:userInfo:category:type:payload:error:");
}

id objc_msgSend_sendProgressHandler(void *a1, const char *a2, ...)
{
  return _[a1 sendProgressHandler];
}

id objc_msgSend_sendReply(void *a1, const char *a2, ...)
{
  return _[a1 sendReply];
}

id objc_msgSend_sendRequest_session_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequest:session:responseHandler:");
}

id objc_msgSend_sendRequestID_request_destinationID_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestID:request:destinationID:options:responseHandler:");
}

id objc_msgSend_sendRequestSync_session_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestSync:session:error:");
}

id objc_msgSend_sendRestoreEngineCompletionStatus_duration_peakMemoryUsage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRestoreEngineCompletionStatus:duration:peakMemoryUsage:error:");
}

id objc_msgSend_sendRestoreEngineStateChangeStatus_state_start_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRestoreEngineStateChangeStatus:state:start:end:");
}

id objc_msgSend_sendStatusRequestForBackgroundRestoreCompletionWithAccount_databaseManager_sourceDeviceID_snapshotUUID_snapshotIndex_snapshotFormat_isRestoringUsingFileLists_plan_duration_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendStatusRequestForBackgroundRestoreCompletionWithAccount:databaseManager:sourceDeviceID:snapshotUUID:snapshotIndex:snapshotFormat:isRestoringUsingFileLists:plan:duration:error:");
}

id objc_msgSend_sendStatusRequestWithEngine_duration_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendStatusRequestWithEngine:duration:error:");
}

id objc_msgSend_sendSyncRequest_properties_connection_response_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSyncRequest:properties:connection:response:error:");
}

id objc_msgSend_sender(void *a1, const char *a2, ...)
{
  return _[a1 sender];
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _[a1 serialNumber];
}

id objc_msgSend_serialQueue(void *a1, const char *a2, ...)
{
  return _[a1 serialQueue];
}

id objc_msgSend_serializedUnderlyingErrors(void *a1, const char *a2, ...)
{
  return _[a1 serializedUnderlyingErrors];
}

id objc_msgSend_serverRequestedFullBackup(void *a1, const char *a2, ...)
{
  return _[a1 serverRequestedFullBackup];
}

id objc_msgSend_serverSnapshotCount(void *a1, const char *a2, ...)
{
  return _[a1 serverSnapshotCount];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_serviceAccount(void *a1, const char *a2, ...)
{
  return _[a1 serviceAccount];
}

id objc_msgSend_serviceDelegate(void *a1, const char *a2, ...)
{
  return _[a1 serviceDelegate];
}

id objc_msgSend_serviceDidHoldLock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceDidHoldLock:");
}

id objc_msgSend_serviceEncryptionManager(void *a1, const char *a2, ...)
{
  return _[a1 serviceEncryptionManager];
}

id objc_msgSend_serviceFileIDs(void *a1, const char *a2, ...)
{
  return _[a1 serviceFileIDs];
}

id objc_msgSend_serviceFiles(void *a1, const char *a2, ...)
{
  return _[a1 serviceFiles];
}

id objc_msgSend_serviceGroup(void *a1, const char *a2, ...)
{
  return _[a1 serviceGroup];
}

id objc_msgSend_serviceManager(void *a1, const char *a2, ...)
{
  return _[a1 serviceManager];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_serviceRestoreMode(void *a1, const char *a2, ...)
{
  return _[a1 serviceRestoreMode];
}

id objc_msgSend_serviceState(void *a1, const char *a2, ...)
{
  return _[a1 serviceState];
}

id objc_msgSend_serviceURL(void *a1, const char *a2, ...)
{
  return _[a1 serviceURL];
}

id objc_msgSend_sessionQueue(void *a1, const char *a2, ...)
{
  return _[a1 sessionQueue];
}

id objc_msgSend_sessionTasks(void *a1, const char *a2, ...)
{
  return _[a1 sessionTasks];
}

id objc_msgSend_sessionsWithSessionTypeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionsWithSessionTypeIdentifier:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAbsolutePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAbsolutePath:");
}

id objc_msgSend_setAbsolutePathPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAbsolutePathPrefix:");
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountID:");
}

id objc_msgSend_setAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountIdentifier:");
}

id objc_msgSend_setAccountOverrideInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountOverrideInfo:");
}

id objc_msgSend_setAccountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountType:");
}

id objc_msgSend_setAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccounts:");
}

id objc_msgSend_setAccountsToBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountsToBackup:");
}

id objc_msgSend_setActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActions:");
}

id objc_msgSend_setActiveAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveAppleID:");
}

id objc_msgSend_setActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivity:");
}

id objc_msgSend_setAirTrafficDidFinishRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAirTrafficDidFinishRestore:");
}

id objc_msgSend_setAllHTTPHeaderFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllHTTPHeaderFields:");
}

id objc_msgSend_setAllowBackupOnExpensiveCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowBackupOnExpensiveCellular:");
}

id objc_msgSend_setAllowedCellularCost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedCellularCost:");
}

id objc_msgSend_setAllowedUnits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedUnits:");
}

id objc_msgSend_setAllowiTunesBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowiTunesBackup:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAllowsConstrainedNetworkAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsConstrainedNetworkAccess:");
}

id objc_msgSend_setAllowsExpensiveNetworkAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsExpensiveNetworkAccess:");
}

id objc_msgSend_setAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltDSID:");
}

id objc_msgSend_setAlternateButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternateButton:");
}

id objc_msgSend_setAnalyticsEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnalyticsEvent:");
}

id objc_msgSend_setAppAssetPromiseResponsibleClient_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppAssetPromiseResponsibleClient:error:");
}

id objc_msgSend_setAppDataDidFinishRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppDataDidFinishRestore:");
}

id objc_msgSend_setAppInstallCoordinators_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppInstallCoordinators:");
}

id objc_msgSend_setAppleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppleIDs:");
}

id objc_msgSend_setApplicationIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationIDs:");
}

id objc_msgSend_setArgv_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArgv:");
}

id objc_msgSend_setAssetChunkerOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetChunkerOptions:");
}

id objc_msgSend_setAssetCopyDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetCopyDuration:");
}

id objc_msgSend_setAssetIDPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetIDPrefix:");
}

id objc_msgSend_setAssetMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetMetadata:");
}

id objc_msgSend_setAssetSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetSize:");
}

id objc_msgSend_setAssetState_asset_withFailure_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetState:asset:withFailure:error:");
}

id objc_msgSend_setAssetTransferOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetTransferOptions:");
}

id objc_msgSend_setAssetTransferOptionsByKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetTransferOptionsByKey:");
}

id objc_msgSend_setAssetType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetType:");
}

id objc_msgSend_setAssetUploadDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetUploadDuration:");
}

id objc_msgSend_setAtomic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAtomic:");
}

id objc_msgSend_setAttemptSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttemptSummary:");
}

id objc_msgSend_setAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:");
}

id objc_msgSend_setAttributes_forFD_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:forFD:error:");
}

id objc_msgSend_setAttributes_forPathFSR_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:forPathFSR:error:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAuthPromptReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthPromptReason:");
}

id objc_msgSend_setAuthToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthToken:");
}

id objc_msgSend_setAutoBackupOnCellularAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoBackupOnCellularAllowed:");
}

id objc_msgSend_setAutoRollbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoRollbackHandler:");
}

id objc_msgSend_setAutomaticallyRetryNetworkFailures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomaticallyRetryNetworkFailures:");
}

id objc_msgSend_setBackgroundRestorableFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundRestorableFileCount:");
}

id objc_msgSend_setBackgroundRestorableSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundRestorableSize:");
}

id objc_msgSend_setBackgroundRestoreProgressMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundRestoreProgressMonitor:");
}

id objc_msgSend_setBackgroundRestoreVerificationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundRestoreVerificationStatus:");
}

id objc_msgSend_setBackgroundVerificationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundVerificationEnabled:");
}

id objc_msgSend_setBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackup:");
}

id objc_msgSend_setBackupAttemptCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupAttemptCount:");
}

id objc_msgSend_setBackupBuildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupBuildVersion:");
}

id objc_msgSend_setBackupDirectoryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupDirectoryCount:");
}

id objc_msgSend_setBackupEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupEnabled:");
}

id objc_msgSend_setBackupEnabled_account_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupEnabled:account:connection:");
}

id objc_msgSend_setBackupEnabled_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupEnabled:completion:");
}

id objc_msgSend_setBackupEnabled_forDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupEnabled:forDomainName:");
}

id objc_msgSend_setBackupEnabled_forDomainName_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupEnabled:forDomainName:account:");
}

id objc_msgSend_setBackupFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupFileCount:");
}

id objc_msgSend_setBackupOnCellularEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupOnCellularEnabled:");
}

id objc_msgSend_setBackupOnCellularSupportUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupOnCellularSupportUpdateHandler:");
}

id objc_msgSend_setBackupOnWiFiWithDAS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupOnWiFiWithDAS:");
}

id objc_msgSend_setBackupPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupPolicy:");
}

id objc_msgSend_setBackupProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupProperties:");
}

id objc_msgSend_setBackupReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupReason:");
}

id objc_msgSend_setBackupState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupState:");
}

id objc_msgSend_setBackupTotalSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupTotalSize:");
}

id objc_msgSend_setBackupType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupType:");
}

id objc_msgSend_setBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupUDID:");
}

id objc_msgSend_setBackupUDIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackupUDIDs:");
}

id objc_msgSend_setBatchCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatchCompletion:");
}

id objc_msgSend_setBatchQueues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatchQueues:");
}

id objc_msgSend_setBatchSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatchSize:");
}

id objc_msgSend_setBirth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBirth:");
}

id objc_msgSend_setBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlock:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setBool_forName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBool:forName:");
}

id objc_msgSend_setBuddyStashData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBuddyStashData:");
}

id objc_msgSend_setBuildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBuildVersion:");
}

id objc_msgSend_setBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIDs:");
}

id objc_msgSend_setBundleIconName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIconName:");
}

id objc_msgSend_setBundlesIdentifiers_forPersonaWithPersonaUniqueString_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundlesIdentifiers:forPersonaWithPersonaUniqueString:completionHandler:");
}

id objc_msgSend_setButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButton:");
}

id objc_msgSend_setByAddingObjectsFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObjectsFromSet:");
}

id objc_msgSend_setBytesRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBytesRemaining:");
}

id objc_msgSend_setBytesTransferred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBytesTransferred:");
}

id objc_msgSend_setCFUserNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCFUserNotification:");
}

id objc_msgSend_setCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCache:");
}

id objc_msgSend_setCacheDeleteRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCacheDeleteRequest:");
}

id objc_msgSend_setCacheDeleteRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCacheDeleteRequests:");
}

id objc_msgSend_setCacheDir_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCacheDir:");
}

id objc_msgSend_setCacheOnlySnapshotCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCacheOnlySnapshotCount:");
}

id objc_msgSend_setCachePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachePolicy:");
}

id objc_msgSend_setCacheRefreshSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCacheRefreshSummary:");
}

id objc_msgSend_setCacheSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCacheSize:");
}

id objc_msgSend_setCachedBackupsByUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedBackupsByUDID:");
}

id objc_msgSend_setCachedSnapshotCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedSnapshotCount:");
}

id objc_msgSend_setCadence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCadence:");
}

id objc_msgSend_setCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalendar:");
}

id objc_msgSend_setCallbacks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallbacks:");
}

id objc_msgSend_setCameraRollBackupState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCameraRollBackupState:");
}

id objc_msgSend_setCancelError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelError:");
}

id objc_msgSend_setCanceled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanceled:");
}

id objc_msgSend_setCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelled:");
}

id objc_msgSend_setCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellularAccess:");
}

id objc_msgSend_setChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeType:");
}

id objc_msgSend_setChargeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChargeToken:");
}

id objc_msgSend_setChargingType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChargingType:");
}

id objc_msgSend_setChunkStoreURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChunkStoreURL:");
}

id objc_msgSend_setCkContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkContainer:");
}

id objc_msgSend_setCkContainerWithZoneWidePCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkContainerWithZoneWidePCS:");
}

id objc_msgSend_setCkOperationGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkOperationGroup:");
}

id objc_msgSend_setCkOperationPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkOperationPolicy:");
}

id objc_msgSend_setCkOperationTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkOperationTracker:");
}

id objc_msgSend_setClassAFilesMissingEncryptionKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClassAFilesMissingEncryptionKeys:");
}

id objc_msgSend_setClassBFilesMissingEncryptionKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClassBFilesMissingEncryptionKeys:");
}

id objc_msgSend_setClassOfNextMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClassOfNextMessage:");
}

id objc_msgSend_setCloudFormatInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudFormatInfo:");
}

id objc_msgSend_setCloudPhotosSyncedMarkerPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudPhotosSyncedMarkerPath:");
}

id objc_msgSend_setCloudSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudSize:");
}

id objc_msgSend_setCloudSyncClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudSyncClient:");
}

id objc_msgSend_setCodeOperationCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCodeOperationCompletionBlock:");
}

id objc_msgSend_setCommandWithArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommandWithArguments:");
}

id objc_msgSend_setCommitID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommitID:");
}

id objc_msgSend_setCommitted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommitted:");
}

id objc_msgSend_setCommitted_forFileID_snapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommitted:forFileID:snapshotID:backupUDID:");
}

id objc_msgSend_setCommitted_forSnapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommitted:forSnapshotID:backupUDID:");
}

id objc_msgSend_setCompactedSQLiteFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompactedSQLiteFileCount:");
}

id objc_msgSend_setComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComplete:");
}

id objc_msgSend_setCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletion:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setCompletionError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionError:");
}

id objc_msgSend_setCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionHandler:");
}

id objc_msgSend_setCompressedSQLiteFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompressedSQLiteFileCount:");
}

id objc_msgSend_setCompressionMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompressionMethod:");
}

id objc_msgSend_setConcurrentUploadBatchCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConcurrentUploadBatchCount:");
}

id objc_msgSend_setConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfiguration:");
}

id objc_msgSend_setConfigurationCompleteWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurationCompleteWithError:");
}

id objc_msgSend_setConnectSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectSemaphore:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setConnectionProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionProperties:");
}

id objc_msgSend_setConnectionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionState:");
}

id objc_msgSend_setConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionType:");
}

id objc_msgSend_setConsecutiveRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConsecutiveRetryCount:");
}

id objc_msgSend_setConsecutiveRetryCountWhenConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConsecutiveRetryCountWhenConnected:");
}

id objc_msgSend_setConsecutiveRetryCountWhenDisconnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConsecutiveRetryCountWhenDisconnected:");
}

id objc_msgSend_setContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainer:");
}

id objc_msgSend_setContainerDir_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerDir:");
}

id objc_msgSend_setContainersByPersonaIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainersByPersonaIdentifier:");
}

id objc_msgSend_setContentCompressionMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentCompressionMethod:");
}

id objc_msgSend_setContentEncodingMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentEncodingMethod:");
}

id objc_msgSend_setCrashIfUsedAfterClose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCrashIfUsedAfterClose:");
}

id objc_msgSend_setCreated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreated:");
}

id objc_msgSend_setCreatedNewOTAKeybag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreatedNewOTAKeybag:");
}

id objc_msgSend_setCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreationDate:");
}

id objc_msgSend_setCurrentBatchAssetSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentBatchAssetSize:");
}

id objc_msgSend_setCurrentBatchCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentBatchCount:");
}

id objc_msgSend_setCurrentBatchSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentBatchSize:");
}

id objc_msgSend_setCurrentFileList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentFileList:");
}

id objc_msgSend_setCurrentPlaceholderRestoreDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPlaceholderRestoreDirectory:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setData:");
}

id objc_msgSend_setDataClassesRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataClassesRemaining:");
}

id objc_msgSend_setDataReceived_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataReceived:");
}

id objc_msgSend_setDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDatabase:");
}

id objc_msgSend_setDatabaseManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDatabaseManager:");
}

id objc_msgSend_setDataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataclass:");
}

id objc_msgSend_setDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDate:");
}

id objc_msgSend_setDateCreated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateCreated:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDateOfLastSizeEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateOfLastSizeEstimate:");
}

id objc_msgSend_setDateOfThermalThrottleStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateOfThermalThrottleStart:");
}

id objc_msgSend_setDatePlacedInSafeHarbor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDatePlacedInSafeHarbor:");
}

id objc_msgSend_setDateSkipped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateSkipped:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDateWhenCallbackWasFired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateWhenCallbackWasFired:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDb:");
}

id objc_msgSend_setDecodedAssetPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDecodedAssetPath:");
}

id objc_msgSend_setDecryptedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDecryptedSize:");
}

id objc_msgSend_setDefaultConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultConfiguration:");
}

id objc_msgSend_setDeferralTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeferralTimer:");
}

id objc_msgSend_setDelayedRestoreTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelayedRestoreTimer:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegateContext:");
}

id objc_msgSend_setDelegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegateQueue:");
}

id objc_msgSend_setDeleteAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeleteAttempts:");
}

id objc_msgSend_setDeleteError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeleteError:");
}

id objc_msgSend_setDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeleted:");
}

id objc_msgSend_setDeletedFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeletedFileCount:");
}

id objc_msgSend_setDependentDomainNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDependentDomainNames:");
}

id objc_msgSend_setDesiredKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredKeys:");
}

id objc_msgSend_setDestinationDigest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationDigest:");
}

id objc_msgSend_setDestinationPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationPath:");
}

id objc_msgSend_setDestinationSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationSize:");
}

id objc_msgSend_setDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDevice:");
}

id objc_msgSend_setDeviceBuildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceBuildVersion:");
}

id objc_msgSend_setDeviceCacheDir_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceCacheDir:");
}

id objc_msgSend_setDeviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceClass:");
}

id objc_msgSend_setDeviceColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceColor:");
}

id objc_msgSend_setDeviceEnclosureColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceEnclosureColor:");
}

id objc_msgSend_setDeviceForRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceForRestore:");
}

id objc_msgSend_setDeviceLockAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceLockAssertion:");
}

id objc_msgSend_setDeviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceName:");
}

id objc_msgSend_setDeviceRefs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceRefs:");
}

id objc_msgSend_setDeviceUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceUUID:");
}

id objc_msgSend_setDigest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDigest:");
}

id objc_msgSend_setDisableSystemWaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableSystemWaking:");
}

id objc_msgSend_setDisableWWAN_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableWWAN:");
}

id objc_msgSend_setDisabledDomainNames_restrictedDomainNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabledDomainNames:restrictedDomainNames:");
}

id objc_msgSend_setDisconnectTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisconnectTimer:");
}

id objc_msgSend_setDiscretionaryNetworkBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscretionaryNetworkBehavior:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayName:");
}

id objc_msgSend_setDisplayStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayStyle:");
}

id objc_msgSend_setDisplayedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayedBlock:");
}

id objc_msgSend_setDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomain:");
}

id objc_msgSend_setDomainHMAC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainHMAC:");
}

id objc_msgSend_setDomainHMACsToRepairOnDisk_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainHMACsToRepairOnDisk:");
}

id objc_msgSend_setDomainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainManager:");
}

id objc_msgSend_setDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainName:");
}

id objc_msgSend_setDomainNamesModifiedInPreviousSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainNamesModifiedInPreviousSnapshot:");
}

id objc_msgSend_setDomainNamesToForegroundRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainNamesToForegroundRestore:");
}

id objc_msgSend_setDomainRedirects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainRedirects:");
}

id objc_msgSend_setDomainRestoreAgent_forDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainRestoreAgent:forDomain:");
}

id objc_msgSend_setDomainRestoreState_forDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainRestoreState:forDomain:");
}

id objc_msgSend_setDomainState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainState:error:");
}

id objc_msgSend_setDomainsTransitioningVolumes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomainsTransitioningVolumes:");
}

id objc_msgSend_setDownloadedSnapshotCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloadedSnapshotCount:");
}

id objc_msgSend_setDownloadedSnapshotVerificationFailureCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloadedSnapshotVerificationFailureCount:");
}

id objc_msgSend_setDrive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDrive:");
}

id objc_msgSend_setDriveBackupEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDriveBackupEngine:");
}

id objc_msgSend_setDriveSettingsContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDriveSettingsContext:");
}

id objc_msgSend_setDsid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDsid:");
}

id objc_msgSend_setDuplicateFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuplicateFile:");
}

id objc_msgSend_setDuplicateFileReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuplicateFileReference:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setEmptyDomainCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmptyDomainCount:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEnabled_forDataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:forDataclass:");
}

id objc_msgSend_setEnabled_forDomainName_persona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:forDomainName:persona:");
}

id objc_msgSend_setEnabledDomainsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabledDomainsCount:");
}

id objc_msgSend_setEncodingMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncodingMethod:");
}

id objc_msgSend_setEncrypted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncrypted:");
}

id objc_msgSend_setEncryptedKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptedKey:");
}

id objc_msgSend_setEncryptionKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptionKey:");
}

id objc_msgSend_setEncryptionKeyVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptionKeyVersion:");
}

id objc_msgSend_setEncryptionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptionManager:");
}

id objc_msgSend_setEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnd:");
}

id objc_msgSend_setEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndTime:");
}

id objc_msgSend_setEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEngine:");
}

id objc_msgSend_setEngineError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEngineError:");
}

id objc_msgSend_setEngines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEngines:");
}

id objc_msgSend_setEntitlements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntitlements:");
}

id objc_msgSend_setEntitlementsPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntitlementsPath:");
}

id objc_msgSend_setEnumeratorCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnumeratorCache:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorCode:");
}

id objc_msgSend_setErrorDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorDescription:");
}

id objc_msgSend_setErrorInjector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorInjector:");
}

id objc_msgSend_setErrorToReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorToReport:");
}

id objc_msgSend_setEstimatedBackgroundRestoreSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedBackgroundRestoreSize:");
}

id objc_msgSend_setEstimatedRestoreSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedRestoreSize:");
}

id objc_msgSend_setEstimatedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedSize:");
}

id objc_msgSend_setEstimatedTimeRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedTimeRemaining:");
}

id objc_msgSend_setEstimationHysteresis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimationHysteresis:");
}

id objc_msgSend_setEstimator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimator:");
}

id objc_msgSend_setEventDatabaseUUIDForVolumeUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventDatabaseUUIDForVolumeUUID:");
}

id objc_msgSend_setEventId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventId:");
}

id objc_msgSend_setEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventType:");
}

id objc_msgSend_setEventsCollected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventsCollected:");
}

id objc_msgSend_setEventsSkipped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventsSkipped:");
}

id objc_msgSend_setExcludedAppBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExcludedAppBundleIDs:");
}

id objc_msgSend_setExpirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpirationDate:");
}

id objc_msgSend_setExtendedAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtendedAttributes:");
}

id objc_msgSend_setExtensionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtensionIdentifier:");
}

id objc_msgSend_setFailedDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailedDomains:");
}

id objc_msgSend_setFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailure:");
}

id objc_msgSend_setFetchAllResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchAllResults:");
}

id objc_msgSend_setFetchAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchAssets:");
}

id objc_msgSend_setFetchAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchAttempts:");
}

id objc_msgSend_setFetchError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchError:");
}

id objc_msgSend_setFetchRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordZonesCompletionBlock:");
}

id objc_msgSend_setFetchRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordsCompletionBlock:");
}

id objc_msgSend_setFetchSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchSemaphore:");
}

id objc_msgSend_setFetchedAssetBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchedAssetBytes:");
}

id objc_msgSend_setFetchedAssetCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchedAssetCount:");
}

id objc_msgSend_setFileEncryptionKey_forInodeNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileEncryptionKey:forInodeNumber:");
}

id objc_msgSend_setFileEncryptionKey_forInodeNumber_volumeType_atPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileEncryptionKey:forInodeNumber:volumeType:atPath:");
}

id objc_msgSend_setFileHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileHandle:");
}

id objc_msgSend_setFileID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileID:");
}

id objc_msgSend_setFileMetadata_forPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileMetadata:forPath:error:");
}

id objc_msgSend_setFileMissingEncryptionKeyForPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileMissingEncryptionKeyForPath:");
}

id objc_msgSend_setFilePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilePath:");
}

id objc_msgSend_setFileStateToCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileStateToCompleted:");
}

id objc_msgSend_setFileStateToPending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileStateToPending:");
}

id objc_msgSend_setFileTransferEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileTransferEndDate:");
}

id objc_msgSend_setFileTransferSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileTransferSession:");
}

id objc_msgSend_setFileTransferStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileTransferStartDate:");
}

id objc_msgSend_setFileUploadError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileUploadError:");
}

id objc_msgSend_setFilesTransferred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilesTransferred:");
}

id objc_msgSend_setFinishedAppRestores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinishedAppRestores:");
}

id objc_msgSend_setFinishedLoading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinishedLoading:");
}

id objc_msgSend_setFinishing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinishing:");
}

id objc_msgSend_setFirstConditionsGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstConditionsGroup:");
}

id objc_msgSend_setFirstItemError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstItemError:");
}

id objc_msgSend_setFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlag:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setFlags_forFileID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:forFileID:");
}

id objc_msgSend_setFlags_mask_forFileID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:mask:forFileID:");
}

id objc_msgSend_setForcedRetryTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForcedRetryTimeInterval:");
}

id objc_msgSend_setForegroundRestorableDomainCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundRestorableDomainCount:");
}

id objc_msgSend_setForegroundRestorableFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundRestorableFileCount:");
}

id objc_msgSend_setForegroundRestorableSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundRestorableSize:");
}

id objc_msgSend_setForegroundRestoreVerificationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundRestoreVerificationEnabled:");
}

id objc_msgSend_setForegroundRestoreVerificationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundRestoreVerificationStatus:");
}

id objc_msgSend_setFormattingContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFormattingContext:");
}

id objc_msgSend_setFoundEncryptionKey_forVolumeMountPoint_inode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFoundEncryptionKey:forVolumeMountPoint:inode:error:");
}

id objc_msgSend_setFreeDiskSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFreeDiskSpace:");
}

id objc_msgSend_setFreeSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFreeSpace:");
}

id objc_msgSend_setFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrequency:");
}

id objc_msgSend_setFseventDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFseventDuration:");
}

id objc_msgSend_setFullBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullBackup:");
}

id objc_msgSend_setGracePeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGracePeriod:");
}

id objc_msgSend_setGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroup:");
}

id objc_msgSend_setGroupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupID:");
}

id objc_msgSend_setGroupIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupIdentifier:");
}

id objc_msgSend_setGroupNamePrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupNamePrefix:");
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPBody:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHTTPShouldUsePipelining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPShouldUsePipelining:");
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandler:");
}

id objc_msgSend_setHardwareModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHardwareModel:");
}

id objc_msgSend_setHasCellularPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasCellularPolicy:");
}

id objc_msgSend_setHasFetchedKeybags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasFetchedKeybags:");
}

id objc_msgSend_setHasNetworkConnectivityInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasNetworkConnectivityInfo:");
}

id objc_msgSend_setHasNewOTAKeyBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasNewOTAKeyBag:");
}

id objc_msgSend_setHmacKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHmacKey:");
}

id objc_msgSend_setIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIcon:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIgnoredLastOnConditionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoredLastOnConditionEvent:");
}

id objc_msgSend_setIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIndex:");
}

id objc_msgSend_setInformativeText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInformativeText:");
}

id objc_msgSend_setInitial_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitial:");
}

id objc_msgSend_setInitialMegaBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialMegaBackup:");
}

id objc_msgSend_setInitiatedBackupRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitiatedBackupRequest:");
}

id objc_msgSend_setInode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInode:");
}

id objc_msgSend_setInodeNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInodeNumber:");
}

id objc_msgSend_setInstallCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstallCoordinator:");
}

id objc_msgSend_setInt_forName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInt:forName:");
}

id objc_msgSend_setInternalDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInternalDelegate:");
}

id objc_msgSend_setInternalNotificationRef_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInternalNotificationRef:");
}

id objc_msgSend_setInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterval:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsAutoBackupOnCellularAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAutoBackupOnCellularAllowed:");
}

id objc_msgSend_setIsBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsBackground:");
}

id objc_msgSend_setIsBackupAllowedOnCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsBackupAllowedOnCellular:");
}

id objc_msgSend_setIsBackupOnCellularEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsBackupOnCellularEnabled:");
}

id objc_msgSend_setIsDeviceTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDeviceTransfer:");
}

id objc_msgSend_setIsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsEnabled:");
}

id objc_msgSend_setIsFetched_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFetched:");
}

id objc_msgSend_setIsFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFinished:");
}

id objc_msgSend_setIsForegroundRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsForegroundRestore:");
}

id objc_msgSend_setIsHoldingWorkAssertionForBackgroundRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsHoldingWorkAssertionForBackgroundRestore:");
}

id objc_msgSend_setIsInherited_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInherited:");
}

id objc_msgSend_setIsLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsLocked:");
}

id objc_msgSend_setIsMMCSEncryptedOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMMCSEncryptedOnly:");
}

id objc_msgSend_setIsOnCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOnCellular:");
}

id objc_msgSend_setIsOnExpensiveCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOnExpensiveCellular:");
}

id objc_msgSend_setIsOnInexpensiveCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOnInexpensiveCellular:");
}

id objc_msgSend_setIsOnPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOnPower:");
}

id objc_msgSend_setIsOnWiFi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOnWiFi:");
}

id objc_msgSend_setIsPersistedToServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPersistedToServer:");
}

id objc_msgSend_setIsRestoringWithFileLists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsRestoringWithFileLists:");
}

id objc_msgSend_setIsScanningPlaceholderAppDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsScanningPlaceholderAppDomain:");
}

id objc_msgSend_setIsScanningPlaceholderDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsScanningPlaceholderDomain:");
}

id objc_msgSend_setIsThermallyThrottled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsThermallyThrottled:");
}

id objc_msgSend_setIsUsernameEditable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUsernameEditable:");
}

id objc_msgSend_setItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemID:");
}

id objc_msgSend_setItemTypeHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemTypeHint:");
}

id objc_msgSend_setItemURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemURL:");
}

id objc_msgSend_setItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItems:");
}

id objc_msgSend_setJournalActionCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setJournalActionCount:");
}

id objc_msgSend_setJournalReplaySucceeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setJournalReplaySucceeded:");
}

id objc_msgSend_setJournalVerificationErrorCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setJournalVerificationErrorCount:");
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKey:");
}

id objc_msgSend_setKey_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKey:value:");
}

id objc_msgSend_setKeyBagInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyBagInfo:");
}

id objc_msgSend_setKeyBagInfo_forBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyBagInfo:forBackupUDID:");
}

id objc_msgSend_setKeyData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyData:");
}

id objc_msgSend_setKeyID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyID:");
}

id objc_msgSend_setKeybag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeybag:");
}

id objc_msgSend_setKeybagData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeybagData:");
}

id objc_msgSend_setKeybagID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeybagID:");
}

id objc_msgSend_setKeybagRefsByUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeybagRefsByUUID:");
}

id objc_msgSend_setKeybagUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeybagUUID:");
}

id objc_msgSend_setKeybagsByID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeybagsByID:");
}

id objc_msgSend_setKeybagsByUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeybagsByUUID:");
}

id objc_msgSend_setKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeys:");
}

id objc_msgSend_setKnownAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKnownAccounts:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLargeFileBufferBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLargeFileBufferBytes:");
}

id objc_msgSend_setLast_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLast:");
}

id objc_msgSend_setLastAcquired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAcquired:");
}

id objc_msgSend_setLastConsecutiveRetryStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConsecutiveRetryStartTime:");
}

id objc_msgSend_setLastDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastDuration:");
}

id objc_msgSend_setLastError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastError:");
}

id objc_msgSend_setLastModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastModified:");
}

id objc_msgSend_setLastModified_forBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastModified:forBackupUDID:");
}

id objc_msgSend_setLastModified_forSnapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastModified:forSnapshotID:backupUDID:");
}

id objc_msgSend_setLastNeedsReplenishingTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastNeedsReplenishingTime:");
}

id objc_msgSend_setLastNotifiedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastNotifiedState:");
}

id objc_msgSend_setLastOnConditionChargingType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastOnConditionChargingType:");
}

id objc_msgSend_setLastOnConditionDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastOnConditionDate:");
}

id objc_msgSend_setLastOnConditionEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastOnConditionEvents:");
}

id objc_msgSend_setLastOnConditionEvents_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastOnConditionEvents:account:");
}

id objc_msgSend_setLastRetryAttemptTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastRetryAttemptTime:");
}

id objc_msgSend_setLastStatusChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastStatusChange:");
}

id objc_msgSend_setLastUpdateProgressInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUpdateProgressInfo:");
}

id objc_msgSend_setLastWatchdogResume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastWatchdogResume:");
}

id objc_msgSend_setLatestGMSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatestGMSnapshot:");
}

id objc_msgSend_setLegacyCacheSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLegacyCacheSize:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setLinkTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLinkTarget:");
}

id objc_msgSend_setLocalCommitted_snapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalCommitted:snapshotID:backupUDID:");
}

id objc_msgSend_setLocalSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalSize:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLock_forBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLock:forBackupUDID:");
}

id objc_msgSend_setLockManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLockManager:");
}

id objc_msgSend_setLockdownKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLockdownKeys:");
}

id objc_msgSend_setLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocked:");
}

id objc_msgSend_setMMePreAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMMePreAuth:");
}

id objc_msgSend_setManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManager:");
}

id objc_msgSend_setManifestEncryptionKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManifestEncryptionKey:");
}

id objc_msgSend_setManifestID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManifestID:");
}

id objc_msgSend_setMarketingName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMarketingName:");
}

id objc_msgSend_setMaxBatchCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxBatchCount:");
}

id objc_msgSend_setMaxBatchFetchAssetSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxBatchFetchAssetSize:");
}

id objc_msgSend_setMaxBatchSaveAssetSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxBatchSaveAssetSize:");
}

id objc_msgSend_setMaxBatchSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxBatchSize:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMaxLargeFileTasks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxLargeFileTasks:");
}

id objc_msgSend_setMaxProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxProgress:");
}

id objc_msgSend_setMaxRetryAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxRetryAttempts:");
}

id objc_msgSend_setMaxSamplingPeriods_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxSamplingPeriods:");
}

id objc_msgSend_setMaxServiceRetryAfterInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxServiceRetryAfterInterval:");
}

id objc_msgSend_setMaxSmallFileTasks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxSmallFileTasks:");
}

id objc_msgSend_setMaxSupportedVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxSupportedVersion:");
}

id objc_msgSend_setMaxUploadedFileSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxUploadedFileSize:");
}

id objc_msgSend_setMaximumUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumUnitCount:");
}

id objc_msgSend_setMegaBackupExpirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMegaBackupExpirationDate:");
}

id objc_msgSend_setMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadata:");
}

id objc_msgSend_setMetadataQueues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadataQueues:");
}

id objc_msgSend_setMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMethod:");
}

id objc_msgSend_setMetric_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetric:value:");
}

id objc_msgSend_setMetricValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetricValue:forKey:");
}

id objc_msgSend_setMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetrics:");
}

id objc_msgSend_setMinSleepIntervalWhenConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinSleepIntervalWhenConnected:");
}

id objc_msgSend_setMinSleepIntervalWhenDisconnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinSleepIntervalWhenDisconnected:");
}

id objc_msgSend_setMinSupportedVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinSupportedVersion:");
}

id objc_msgSend_setMinUploadedFileSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinUploadedFileSize:");
}

id objc_msgSend_setMinutesRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinutesRemaining:");
}

id objc_msgSend_setMissedEncryptionKeysDB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMissedEncryptionKeysDB:");
}

id objc_msgSend_setMmcsEncryptionSupport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMmcsEncryptionSupport:");
}

id objc_msgSend_setMobileInstallation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMobileInstallation:");
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMode:");
}

id objc_msgSend_setModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModified:");
}

id objc_msgSend_setModifiedDirectories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedDirectories:");
}

id objc_msgSend_setModifiedDirectoryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedDirectoryCount:");
}

id objc_msgSend_setModifiedDomainsFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedDomainsFlags:");
}

id objc_msgSend_setModifiedFileCountInCurrentlyScannedDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedFileCountInCurrentlyScannedDomain:");
}

id objc_msgSend_setModifiedRegularFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedRegularFileCount:");
}

id objc_msgSend_setModifiedRegularFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedRegularFiles:");
}

id objc_msgSend_setModifiedSymlinks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedSymlinks:");
}

id objc_msgSend_setModifyRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordZonesCompletionBlock:");
}

id objc_msgSend_setModifyRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordsCompletionBlock:");
}

id objc_msgSend_setMonitoring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonitoring:");
}

id objc_msgSend_setMountedSnapshotTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMountedSnapshotTracker:");
}

id objc_msgSend_setMovedBackupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMovedBackupName:");
}

id objc_msgSend_setMovedOldBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMovedOldBackup:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNetworkConnectivityAtFinish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkConnectivityAtFinish:");
}

id objc_msgSend_setNetworkConnectivityAtStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkConnectivityAtStart:");
}

id objc_msgSend_setNetworkPathMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkPathMonitor:");
}

id objc_msgSend_setNetworkPathUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkPathUpdateHandler:");
}

id objc_msgSend_setNextBackupDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextBackupDelta:");
}

id objc_msgSend_setNextBackupFSEventState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextBackupFSEventState:");
}

id objc_msgSend_setNextBackupSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextBackupSize:");
}

id objc_msgSend_setNextOp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextOp:");
}

id objc_msgSend_setNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNode:");
}

id objc_msgSend_setNonRedirectedDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNonRedirectedDomain:");
}

id objc_msgSend_setNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotification:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setOTA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOTA:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forDomain_andKey_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forDomain:andKey:withError:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObserver:");
}

id objc_msgSend_setOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOffset:");
}

id objc_msgSend_setOffset_flags_forFileID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOffset:flags:forFileID:");
}

id objc_msgSend_setOnCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnCellular:");
}

id objc_msgSend_setOnExpensiveCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnExpensiveCellular:");
}

id objc_msgSend_setOnPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnPower:");
}

id objc_msgSend_setOnWiFi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnWiFi:");
}

id objc_msgSend_setOpenedFileListDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpenedFileListDatabase:");
}

id objc_msgSend_setOperationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperationError:");
}

id objc_msgSend_setOperationQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperationQueue:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwner:");
}

id objc_msgSend_setOwnerDeviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwnerDeviceName:");
}

id objc_msgSend_setOwnerDeviceUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwnerDeviceUUID:");
}

id objc_msgSend_setOwningBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwningBundleID:");
}

id objc_msgSend_setParentEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParentEngine:");
}

id objc_msgSend_setParentTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParentTracker:");
}

id objc_msgSend_setPasscodeSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasscodeSet:");
}

id objc_msgSend_setPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassword:");
}

id objc_msgSend_setPasswordData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasswordData:");
}

id objc_msgSend_setPasswordHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasswordHash:");
}

id objc_msgSend_setPasswordInKeychain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasswordInKeychain:error:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPaths:");
}

id objc_msgSend_setPeakMemoryUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeakMemoryUsage:");
}

id objc_msgSend_setPeerInitRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerInitRequest:");
}

id objc_msgSend_setPeerInitResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerInitResponse:");
}

id objc_msgSend_setPeerKeychainInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerKeychainInfo:");
}

id objc_msgSend_setPeerKeychainTransferResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerKeychainTransferResponse:");
}

id objc_msgSend_setPeerPreflightInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerPreflightInfo:");
}

id objc_msgSend_setPeerPreflightResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerPreflightResponse:");
}

id objc_msgSend_setPeerTaskGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerTaskGroup:");
}

id objc_msgSend_setPendingRepairedDomainHMACs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingRepairedDomainHMACs:");
}

id objc_msgSend_setPendingSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingSnapshot:");
}

id objc_msgSend_setPendingSnapshotBackupPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingSnapshotBackupPolicy:");
}

id objc_msgSend_setPendingSnapshotDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingSnapshotDatabase:");
}

id objc_msgSend_setPendingSnapshotFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingSnapshotFormat:");
}

id objc_msgSend_setPendingSnapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingSnapshotID:");
}

id objc_msgSend_setPendingSnapshotQuotaReserved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingSnapshotQuotaReserved:");
}

id objc_msgSend_setPendingSnapshotType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingSnapshotType:");
}

id objc_msgSend_setPerClassItemsRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerClassItemsRemaining:");
}

id objc_msgSend_setPerRecordCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordCompletionBlock:");
}

id objc_msgSend_setPerRecordProgressBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordProgressBlock:");
}

id objc_msgSend_setPerRecordSaveBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordSaveBlock:");
}

id objc_msgSend_setPercentComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPercentComplete:");
}

id objc_msgSend_setPersonaIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonaIdentifier:");
}

id objc_msgSend_setPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhase:");
}

id objc_msgSend_setPhaseDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhaseDescription:");
}

id objc_msgSend_setPlaceholderInstallationGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderInstallationGroup:");
}

id objc_msgSend_setPlaceholderPromise_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderPromise:error:");
}

id objc_msgSend_setPlaceholderResourceRelativePaths_lastModified_forBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderResourceRelativePaths:lastModified:forBundleID:");
}

id objc_msgSend_setPluginFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPluginFields:");
}

id objc_msgSend_setPlugins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlugins:");
}

id objc_msgSend_setPostUploadDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPostUploadDuration:");
}

id objc_msgSend_setPowerAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPowerAssertion:");
}

id objc_msgSend_setPreUploadDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreUploadDuration:");
}

id objc_msgSend_setPrebuddyFollowUpTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrebuddyFollowUpTimer:");
}

id objc_msgSend_setPrebuddyMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrebuddyMode:");
}

id objc_msgSend_setPreferencesValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferencesValue:forKey:");
}

id objc_msgSend_setPreflightDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreflightDuration:");
}

id objc_msgSend_setPreflightStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreflightStartDate:");
}

id objc_msgSend_setPreviousSnapshotCommitID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousSnapshotCommitID:");
}

id objc_msgSend_setPreviouslySkippedFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviouslySkippedFiles:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductType:");
}

id objc_msgSend_setProductVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductVersion:");
}

id objc_msgSend_setProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgress:");
}

id objc_msgSend_setProgressHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressHandler:");
}

id objc_msgSend_setProgressHysteresis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressHysteresis:");
}

id objc_msgSend_setProgressModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressModel:");
}

id objc_msgSend_setProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProperties:");
}

id objc_msgSend_setPropertiesData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPropertiesData:");
}

id objc_msgSend_setProperty_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProperty:forKey:");
}

id objc_msgSend_setPropertyWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPropertyWithName:value:");
}

id objc_msgSend_setProtected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtected:");
}

id objc_msgSend_setProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtectionClass:");
}

id objc_msgSend_setProtectionClass_toRestoreForDomainName_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtectionClass:toRestoreForDomainName:relativePath:");
}

id objc_msgSend_setProtocolVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtocolVersion:");
}

id objc_msgSend_setPutReceipt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPutReceipt:");
}

id objc_msgSend_setQos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQos:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueryCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryCompletionBlock:");
}

id objc_msgSend_setQueryCursorFetchedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryCursorFetchedBlock:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setQueuedFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuedFileCount:");
}

id objc_msgSend_setQueuedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuedSize:");
}

id objc_msgSend_setQuotaReserved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuotaReserved:");
}

id objc_msgSend_setReaderForVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReaderForVolume:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setReceipt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceipt:");
}

id objc_msgSend_setReceiveProgressHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceiveProgressHandler:");
}

id objc_msgSend_setReceivedItemHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceivedItemHandler:");
}

id objc_msgSend_setRecentATCErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecentATCErrors:");
}

id objc_msgSend_setRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecord:");
}

id objc_msgSend_setRecordFetchedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordFetchedBlock:");
}

id objc_msgSend_setRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordID:");
}

id objc_msgSend_setRecordMatchedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordMatchedBlock:");
}

id objc_msgSend_setRecordSavePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordSavePolicy:");
}

id objc_msgSend_setRecordSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordSize:");
}

id objc_msgSend_setRecordsInFlightBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordsInFlightBlock:");
}

id objc_msgSend_setRedirectStderrToFileAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRedirectStderrToFileAtPath:");
}

id objc_msgSend_setRedirectStdoutToFileAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRedirectStdoutToFileAtPath:");
}

id objc_msgSend_setRedirectStdoutToFileDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRedirectStdoutToFileDescriptor:");
}

id objc_msgSend_setRelativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePath:");
}

id objc_msgSend_setRelativePaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePaths:");
}

id objc_msgSend_setRelativePathsNotToBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePathsNotToBackup:");
}

id objc_msgSend_setRelativePathsNotToBackupToDrive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePathsNotToBackupToDrive:");
}

id objc_msgSend_setRelativePathsNotToRemoveIfNotRestored_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePathsNotToRemoveIfNotRestored:");
}

id objc_msgSend_setRelativePathsNotToRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePathsNotToRestore:");
}

id objc_msgSend_setRelativePathsToBackupAndRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePathsToBackupAndRestore:");
}

id objc_msgSend_setRelativePathsToIgnoreExclusionsForDrive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePathsToIgnoreExclusionsForDrive:");
}

id objc_msgSend_setRelativePathsToOnlyBackupEncrypted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePathsToOnlyBackupEncrypted:");
}

id objc_msgSend_setRelativePathsToRemoveOnRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePathsToRemoveOnRestore:");
}

id objc_msgSend_setRelativePathsToRestoreOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePathsToRestoreOnly:");
}

id objc_msgSend_setRemainingCellularBalance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemainingCellularBalance:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRemoteSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteSize:");
}

id objc_msgSend_setReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReply:");
}

id objc_msgSend_setReplyError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplyError:");
}

id objc_msgSend_setRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequest:");
}

id objc_msgSend_setRequestBackupSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestBackupSemaphore:");
}

id objc_msgSend_setRequestInitSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestInitSemaphore:");
}

id objc_msgSend_setRequestKeychainSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestKeychainSemaphore:");
}

id objc_msgSend_setRequestPreflightSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestPreflightSemaphore:");
}

id objc_msgSend_setRequestUserConfirmation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestUserConfirmation:");
}

id objc_msgSend_setRequestsToSupportBudget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestsToSupportBudget:");
}

id objc_msgSend_setRequiredProductVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiredProductVersion:");
}

id objc_msgSend_setResetConsecutiveRetriesTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResetConsecutiveRetriesTimeInterval:");
}

id objc_msgSend_setResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceValue:forKey:error:");
}

id objc_msgSend_setResourcesSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourcesSize:");
}

id objc_msgSend_setResponseReceived_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseReceived:");
}

id objc_msgSend_setRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestore:");
}

id objc_msgSend_setRestoreBackupLastModified_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreBackupLastModified:");
}

id objc_msgSend_setRestoreBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreBackupUDID:");
}

id objc_msgSend_setRestoreBuildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreBuildVersion:");
}

id objc_msgSend_setRestoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreID:");
}

id objc_msgSend_setRestoreID_forDomainName_relativePath_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreID:forDomainName:relativePath:backupUDID:");
}

id objc_msgSend_setRestoreID_forRestoreFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreID:forRestoreFile:");
}

id objc_msgSend_setRestoreID_forType_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreID:forType:value:");
}

id objc_msgSend_setRestoreKeyBagsByID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreKeyBagsByID:");
}

id objc_msgSend_setRestoreLogger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreLogger:");
}

id objc_msgSend_setRestoreMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreMode:");
}

id objc_msgSend_setRestoreQualityOfService_account_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreQualityOfService:account:connection:");
}

id objc_msgSend_setRestoreSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreSession:");
}

id objc_msgSend_setRestoreSessionOverridden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreSessionOverridden:");
}

id objc_msgSend_setRestoreSessionWithBackupUDID_snapshotUUID_account_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreSessionWithBackupUDID:snapshotUUID:account:connection:");
}

id objc_msgSend_setRestoreSnapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreSnapshotID:");
}

id objc_msgSend_setRestoreStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreStartDate:");
}

id objc_msgSend_setRestoreState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreState:");
}

id objc_msgSend_setRestoreState_forDeviceUUID_snapshotUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreState:forDeviceUUID:snapshotUUID:");
}

id objc_msgSend_setRestoreState_forFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreState:forFile:");
}

id objc_msgSend_setRestoreState_forFilesInDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreState:forFilesInDomain:");
}

id objc_msgSend_setRestoreTTRTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreTTRTimer:");
}

id objc_msgSend_setRestoreTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreTransaction:");
}

id objc_msgSend_setRestoreType_forFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoreType:forFile:");
}

id objc_msgSend_setRestoredSnapshotBackupPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestoredSnapshotBackupPolicy:");
}

id objc_msgSend_setResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResult:");
}

id objc_msgSend_setResult_forFileChangeID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResult:forFileChangeID:");
}

id objc_msgSend_setResumingSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResumingSnapshot:");
}

id objc_msgSend_setRetryAfterInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryAfterInterval:");
}

id objc_msgSend_setRetryDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryDate:");
}

id objc_msgSend_setRetrySemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetrySemaphore:");
}

id objc_msgSend_setRetryWhenNetworkDisconnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryWhenNetworkDisconnected:");
}

id objc_msgSend_setReusedAssetRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReusedAssetRecords:");
}

id objc_msgSend_setRootURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRootURL:");
}

id objc_msgSend_setRunnableXPCActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRunnableXPCActivity:");
}

id objc_msgSend_setSafeHarborDir_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSafeHarborDir:");
}

id objc_msgSend_setSafeHarborExpiration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSafeHarborExpiration:");
}

id objc_msgSend_setSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSalt:");
}

id objc_msgSend_setSamplingPeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSamplingPeriod:");
}

id objc_msgSend_setSaveAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSaveAttempts:");
}

id objc_msgSend_setSaveError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSaveError:");
}

id objc_msgSend_setSaveIncrementally_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSaveIncrementally:");
}

id objc_msgSend_setSavePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavePolicy:");
}

id objc_msgSend_setScannedDomainsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScannedDomainsCount:");
}

id objc_msgSend_setScanner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanner:");
}

id objc_msgSend_setScrubbedSQLiteFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrubbedSQLiteFileCount:");
}

id objc_msgSend_setSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeconds:");
}

id objc_msgSend_setSendProgressHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendProgressHandler:");
}

id objc_msgSend_setSerialNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSerialNumber:");
}

id objc_msgSend_setSerializedUnderlyingErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSerializedUnderlyingErrors:");
}

id objc_msgSend_setServerSnapshotCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerSnapshotCount:");
}

id objc_msgSend_setServiceDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceDelegate:");
}

id objc_msgSend_setServiceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceManager:");
}

id objc_msgSend_setServiceState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceState:");
}

id objc_msgSend_setServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceType:");
}

id objc_msgSend_setServiceURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceURL:");
}

id objc_msgSend_setSessionQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionQueue:");
}

id objc_msgSend_setSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSet:");
}

id objc_msgSend_setSetupAssistantTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSetupAssistantTimer:");
}

id objc_msgSend_setSha256Signature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSha256Signature:");
}

id objc_msgSend_setSharedQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharedQueue:");
}

id objc_msgSend_setShouldAdvanceState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAdvanceState:");
}

id objc_msgSend_setShouldCopy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldCopy:");
}

id objc_msgSend_setShouldDigest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldDigest:");
}

id objc_msgSend_setShouldFetchAssetContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFetchAssetContent:");
}

id objc_msgSend_setShouldPreserveSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPreserveSettings:");
}

id objc_msgSend_setShouldReadRawEncryptedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldReadRawEncryptedData:");
}

id objc_msgSend_setShouldRestoreSystemFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldRestoreSystemFiles:");
}

id objc_msgSend_setShouldRetryWhenNetworkUnavailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldRetryWhenNetworkUnavailable:");
}

id objc_msgSend_setShouldSetProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSetProtectionClass:");
}

id objc_msgSend_setShouldSupportBudgeting_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSupportBudgeting:account:");
}

id objc_msgSend_setShouldVacuum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldVacuum:");
}

id objc_msgSend_setShowArchiveOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowArchiveOption:");
}

id objc_msgSend_setSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignature:");
}

id objc_msgSend_setSimulatedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimulatedDate:");
}

id objc_msgSend_setSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSize:");
}

id objc_msgSend_setSizeBeforeCopy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSizeBeforeCopy:");
}

id objc_msgSend_setSizeBeforeEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSizeBeforeEncoding:");
}

id objc_msgSend_setSkippedFileTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSkippedFileTracker:");
}

id objc_msgSend_setSkippedFilesCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSkippedFilesCount:");
}

id objc_msgSend_setSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshot:");
}

id objc_msgSend_setSnapshotBackupPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotBackupPolicy:");
}

id objc_msgSend_setSnapshotDirectoryCloneSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotDirectoryCloneSize:");
}

id objc_msgSend_setSnapshotDirectorySize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotDirectorySize:");
}

id objc_msgSend_setSnapshotFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotFormat:");
}

id objc_msgSend_setSnapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotID:");
}

id objc_msgSend_setSnapshotIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotIndex:");
}

id objc_msgSend_setSnapshotMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotMountPoint:");
}

id objc_msgSend_setSnapshotName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotName:");
}

id objc_msgSend_setSnapshotPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotPath:");
}

id objc_msgSend_setSnapshotState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotState:");
}

id objc_msgSend_setSnapshotType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotType:");
}

id objc_msgSend_setSnapshotUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotUUID:");
}

id objc_msgSend_setSnapshotVerificationCancellationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotVerificationCancellationError:");
}

id objc_msgSend_setSnapshotVerificationDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotVerificationDuration:");
}

id objc_msgSend_setSnapshotVerificationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotVerificationEnabled:");
}

id objc_msgSend_setSnapshotVerificationRan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotVerificationRan:");
}

id objc_msgSend_setSnapshotVerificationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotVerificationStatus:");
}

id objc_msgSend_setSnapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshots:");
}

id objc_msgSend_setSourceApplicationSecondaryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceApplicationSecondaryIdentifier:");
}

id objc_msgSend_setSourceDeviceDataSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceDeviceDataSize:");
}

id objc_msgSend_setSourceDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceDeviceID:");
}

id objc_msgSend_setSourceDeviceInode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceDeviceInode:");
}

id objc_msgSend_setSourceDigest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceDigest:");
}

id objc_msgSend_setSourceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceIdentifier:");
}

id objc_msgSend_setSourceIsLive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceIsLive:");
}

id objc_msgSend_setSourcePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourcePath:");
}

id objc_msgSend_setSourcePurgeableSpaceSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourcePurgeableSpaceSize:");
}

id objc_msgSend_setSourceRequiredProductVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceRequiredProductVersion:");
}

id objc_msgSend_setSpaceSavingsThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpaceSavingsThreshold:");
}

id objc_msgSend_setSparseAware_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSparseAware:");
}

id objc_msgSend_setSqliteErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSqliteErrorHandler:");
}

id objc_msgSend_setStale_forSnapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStale:forSnapshotID:backupUDID:");
}

id objc_msgSend_setStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStart:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setStartDateOfCurrentPeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDateOfCurrentPeriod:");
}

id objc_msgSend_setStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartTime:");
}

id objc_msgSend_setStashedAssetDecrypted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStashedAssetDecrypted:");
}

id objc_msgSend_setStashedAssetIsDecrypted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStashedAssetIsDecrypted:");
}

id objc_msgSend_setStashedAssetPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStashedAssetPath:");
}

id objc_msgSend_setStashedResourcePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStashedResourcePath:");
}

id objc_msgSend_setStat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStat:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setState_forFileID_restoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:forFileID:restoreID:");
}

id objc_msgSend_setState_forNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:forNotification:");
}

id objc_msgSend_setState_forRestoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:forRestoreID:");
}

id objc_msgSend_setStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateChange:");
}

id objc_msgSend_setStateDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateDescription:");
}

id objc_msgSend_setStatementCacheMaxCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatementCacheMaxCount:");
}

id objc_msgSend_setStatusChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusChanged:");
}

id objc_msgSend_setStoredKeybagsByUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoredKeybagsByUUIDString:");
}

id objc_msgSend_setStreamRef_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStreamRef:");
}

id objc_msgSend_setSubDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubDomain:");
}

id objc_msgSend_setSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuccess:");
}

id objc_msgSend_setSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSummary:");
}

id objc_msgSend_setSuppressAuthorization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressAuthorization:");
}

id objc_msgSend_setSuppressUnauthorizedAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressUnauthorizedAlert:");
}

id objc_msgSend_setSyscallErrno_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyscallErrno:");
}

id objc_msgSend_setSyscallType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyscallType:");
}

id objc_msgSend_setSystemApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemApp:");
}

id objc_msgSend_setSystemAppNotAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemAppNotAllowed:");
}

id objc_msgSend_setSystemDomainsVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemDomainsVersion:");
}

id objc_msgSend_setSystemFieldData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemFieldData:");
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTarget:");
}

id objc_msgSend_setTargetDeviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetDeviceClass:");
}

id objc_msgSend_setTargetDeviceFreeSpaceSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetDeviceFreeSpaceSize:");
}

id objc_msgSend_setTargetIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetIdentifier:");
}

id objc_msgSend_setTargetSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetSnapshot:");
}

id objc_msgSend_setTelemetryID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTelemetryID:");
}

id objc_msgSend_setTemporaryDirectoryURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemporaryDirectoryURL:");
}

id objc_msgSend_setTemporaryPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemporaryPath:");
}

id objc_msgSend_setTestCommitRepairChecksumOnLightrailChecksumMismatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTestCommitRepairChecksumOnLightrailChecksumMismatch:");
}

id objc_msgSend_setThroughputs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThroughputs:");
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStyle:");
}

id objc_msgSend_setTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeout:");
}

id objc_msgSend_setTimeoutBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutBlock:");
}

id objc_msgSend_setTimeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutInterval:");
}

id objc_msgSend_setTimeoutIntervalForFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForFetch:");
}

id objc_msgSend_setTimeoutIntervalForModify_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForModify:");
}

id objc_msgSend_setTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimer:");
}

id objc_msgSend_setTimers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimers:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTopDomainsWithMissingEncryptionKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopDomainsWithMissingEncryptionKeys:");
}

id objc_msgSend_setTotal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotal:");
}

id objc_msgSend_setTotalByteCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalByteCount:");
}

id objc_msgSend_setTotalFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalFileCount:");
}

id objc_msgSend_setTotalQuotaReservation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalQuotaReservation:");
}

id objc_msgSend_setTotalRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalRetryCount:");
}

id objc_msgSend_setTraced_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTraced:");
}

id objc_msgSend_setTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTracker:");
}

id objc_msgSend_setTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransaction:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setTypeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypeIdentifier:");
}

id objc_msgSend_setURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURL:");
}

id objc_msgSend_setUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUUID:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUniqueIdentifier:");
}

id objc_msgSend_setUnitsStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnitsStyle:");
}

id objc_msgSend_setUnknownDomainHMACsToRepair_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnknownDomainHMACsToRepair:");
}

id objc_msgSend_setUnlockActionLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnlockActionLabel:");
}

id objc_msgSend_setUnmodifiedDirectories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnmodifiedDirectories:");
}

id objc_msgSend_setUnmodifiedDirectoryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnmodifiedDirectoryCount:");
}

id objc_msgSend_setUnmodifiedFileCountInCurrentlyScannedDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnmodifiedFileCountInCurrentlyScannedDomain:");
}

id objc_msgSend_setUnmodifiedRegularFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnmodifiedRegularFileCount:");
}

id objc_msgSend_setUnmodifiedRegularFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnmodifiedRegularFiles:");
}

id objc_msgSend_setUnmodifiedSymlinks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnmodifiedSymlinks:");
}

id objc_msgSend_setUpDataPromiseForBundleID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpDataPromiseForBundleID:error:");
}

id objc_msgSend_setUpMobileBackupPreferencesForBackgroundRestoreWithAccount_restoreSession_cloudFormatInfo_performanceStatistics_backupPolicy_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpMobileBackupPreferencesForBackgroundRestoreWithAccount:restoreSession:cloudFormatInfo:performanceStatistics:backupPolicy:error:");
}

id objc_msgSend_setUpOperationTrackerWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpOperationTrackerWithError:");
}

id objc_msgSend_setUpSyncZoneWithAccount_policy_operationGroup_xpcActivity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpSyncZoneWithAccount:policy:operationGroup:xpcActivity:error:");
}

id objc_msgSend_setUpWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpWithError:");
}

id objc_msgSend_setUpXPCEventHandler(void *a1, const char *a2, ...)
{
  return _[a1 setUpXPCEventHandler];
}

id objc_msgSend_setUpgradeBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpgradeBlock:");
}

id objc_msgSend_setUploadFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadFileCount:");
}

id objc_msgSend_setUploadProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadProgress:");
}

id objc_msgSend_setUploadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadSize:");
}

id objc_msgSend_setUploadSizeExcludingHardlinksAndClones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadSizeExcludingHardlinksAndClones:");
}

id objc_msgSend_setUploadStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadStartTime:");
}

id objc_msgSend_setUploadedAssetCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadedAssetCount:");
}

id objc_msgSend_setUploadedAssetSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadedAssetSize:");
}

id objc_msgSend_setUploadedAssetWriteDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadedAssetWriteDuration:");
}

id objc_msgSend_setUploadedByteCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadedByteCount:");
}

id objc_msgSend_setUploadedBytesInCurrentPeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadedBytesInCurrentPeriod:");
}

id objc_msgSend_setUploadedFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadedFileCount:");
}

id objc_msgSend_setUploadedFileListSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadedFileListSize:");
}

id objc_msgSend_setUploadedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadedSize:");
}

id objc_msgSend_setUseFileLists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseFileLists:");
}

id objc_msgSend_setUseFullSynchronization_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseFullSynchronization:error:");
}

id objc_msgSend_setUseLightweightPCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseLightweightPCS:");
}

id objc_msgSend_setUseMMCSEncryptionV2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseMMCSEncryptionV2:");
}

id objc_msgSend_setUsePrivilegedBatchRecordFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsePrivilegedBatchRecordFetch:");
}

id objc_msgSend_setUseSandbox_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseSandbox:");
}

id objc_msgSend_setUseZoneWidePCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseZoneWidePCS:");
}

id objc_msgSend_setUsedAPFSSnapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsedAPFSSnapshots:");
}

id objc_msgSend_setUserDataPromise_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDataPromise:error:");
}

id objc_msgSend_setUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserID:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserVersion:");
}

id objc_msgSend_setUserVisibleKeychainSyncEnabled_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserVisibleKeychainSyncEnabled:withCompletion:");
}

id objc_msgSend_setUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsername:");
}

id objc_msgSend_setUuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUuid:");
}

id objc_msgSend_setValidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValidate:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setValue_forDomain_key_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forDomain:key:completionBlock:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHeader:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValue_forKey_forPathFSR_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:forPathFSR:error:");
}

id objc_msgSend_setValue_forName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forName:");
}

id objc_msgSend_setValuesWithDictionary_forDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValuesWithDictionary:forDomain:");
}

id objc_msgSend_setValuesWithDictionary_forDomain_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValuesWithDictionary:forDomain:completionBlock:");
}

id objc_msgSend_setVerify_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerify:");
}

id objc_msgSend_setVerifyProgressModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerifyProgressModel:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setVolumeIdentifierForCurrentlyScannedDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeIdentifierForCurrentlyScannedDomain:");
}

id objc_msgSend_setVolumeMapLoadType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeMapLoadType:");
}

id objc_msgSend_setVolumeMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeMountPoint:");
}

id objc_msgSend_setVolumeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeType:");
}

id objc_msgSend_setVolumeUUIDToUpdateAfterTranscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeUUIDToUpdateAfterTranscription:");
}

id objc_msgSend_setWaitForDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaitForDeletion:");
}

id objc_msgSend_setWasCloudRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWasCloudRestore:");
}

id objc_msgSend_setWatchdog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchdog:");
}

id objc_msgSend_setWeekOfMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekOfMonth:");
}

id objc_msgSend_setWifiQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiQuality:");
}

id objc_msgSend_setWifiQualityGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiQualityGroup:");
}

id objc_msgSend_setWifiQualityMeasurementTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiQualityMeasurementTimer:");
}

id objc_msgSend_setWifiStatusChangedCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiStatusChangedCallback:");
}

id objc_msgSend_setWillEncryptInLockdown_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWillEncryptInLockdown:error:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithFD_value_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithFD:value:error:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithPath_value_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithPath:value:error:");
}

id objc_msgSend_setWithPathFSR_value_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithPathFSR:value:error:");
}

id objc_msgSend_setXattrs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXattrs:");
}

id objc_msgSend_setXpcActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcActivity:");
}

id objc_msgSend_setZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoneID:");
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return _[a1 settings];
}

id objc_msgSend_settingsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settingsAtIndex:");
}

id objc_msgSend_settingsContext(void *a1, const char *a2, ...)
{
  return _[a1 settingsContext];
}

id objc_msgSend_settingsCount(void *a1, const char *a2, ...)
{
  return _[a1 settingsCount];
}

id objc_msgSend_setup(void *a1, const char *a2, ...)
{
  return _[a1 setup];
}

id objc_msgSend_setupAssistantTimer(void *a1, const char *a2, ...)
{
  return _[a1 setupAssistantTimer];
}

id objc_msgSend_setupBackupWithPasscode_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupBackupWithPasscode:account:connection:error:");
}

id objc_msgSend_setupBackupWithPasscode_userInitiated_keybagID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupBackupWithPasscode:userInitiated:keybagID:error:");
}

id objc_msgSend_setupDeviceWithOperationTracker_deviceUUID_passcode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDeviceWithOperationTracker:deviceUUID:passcode:error:");
}

id objc_msgSend_setupDeviceWithOperationTracker_deviceUUID_passcode_hasNewOTAKeyBag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDeviceWithOperationTracker:deviceUUID:passcode:hasNewOTAKeyBag:error:");
}

id objc_msgSend_setupEncryptionWithPassword_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupEncryptionWithPassword:withError:");
}

id objc_msgSend_setupKeybagForDevice_operationTracker_passcode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupKeybagForDevice:operationTracker:passcode:error:");
}

id objc_msgSend_setupKeybagWithOperationTracker_passcode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupKeybagWithOperationTracker:passcode:error:");
}

id objc_msgSend_setupPragmas(void *a1, const char *a2, ...)
{
  return _[a1 setupPragmas];
}

id objc_msgSend_setupRestorePlanForAccount_snapshotUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupRestorePlanForAccount:snapshotUUID:error:");
}

id objc_msgSend_setupSignalHandlers(void *a1, const char *a2, ...)
{
  return _[a1 setupSignalHandlers];
}

id objc_msgSend_setupWithDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupWithDomain:");
}

id objc_msgSend_sha1ForData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sha1ForData:");
}

id objc_msgSend_sha1HmacForString_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sha1HmacForString:key:");
}

id objc_msgSend_sha256(void *a1, const char *a2, ...)
{
  return _[a1 sha256];
}

id objc_msgSend_sha256ForData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sha256ForData:");
}

id objc_msgSend_sha256HashData(void *a1, const char *a2, ...)
{
  return _[a1 sha256HashData];
}

id objc_msgSend_sha256Signature(void *a1, const char *a2, ...)
{
  return _[a1 sha256Signature];
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _[a1 shared];
}

id objc_msgSend_sharedClient(void *a1, const char *a2, ...)
{
  return _[a1 sharedClient];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedDaemon(void *a1, const char *a2, ...)
{
  return _[a1 sharedDaemon];
}

id objc_msgSend_sharedIncompleteRestoreDirectory(void *a1, const char *a2, ...)
{
  return _[a1 sharedIncompleteRestoreDirectory];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedNotificationCenter(void *a1, const char *a2, ...)
{
  return _[a1 sharedNotificationCenter];
}

id objc_msgSend_sharedOptions(void *a1, const char *a2, ...)
{
  return _[a1 sharedOptions];
}

id objc_msgSend_sharedPool(void *a1, const char *a2, ...)
{
  return _[a1 sharedPool];
}

id objc_msgSend_sharedQueue(void *a1, const char *a2, ...)
{
  return _[a1 sharedQueue];
}

id objc_msgSend_sharedRestoreDirectory(void *a1, const char *a2, ...)
{
  return _[a1 sharedRestoreDirectory];
}

id objc_msgSend_sharedScheduler(void *a1, const char *a2, ...)
{
  return _[a1 sharedScheduler];
}

id objc_msgSend_sharedSystemContainerRestoreRootWithContainerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedSystemContainerRestoreRootWithContainerID:");
}

id objc_msgSend_sharedTemporaryDirectoryIdentifiedBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedTemporaryDirectoryIdentifiedBy:");
}

id objc_msgSend_sharedThermalPressureMonitor(void *a1, const char *a2, ...)
{
  return _[a1 sharedThermalPressureMonitor];
}

id objc_msgSend_shortVersionString(void *a1, const char *a2, ...)
{
  return _[a1 shortVersionString];
}

id objc_msgSend_shouldAdvanceState(void *a1, const char *a2, ...)
{
  return _[a1 shouldAdvanceState];
}

id objc_msgSend_shouldAlwaysRestoreSystemSharedContainerDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAlwaysRestoreSystemSharedContainerDomain:");
}

id objc_msgSend_shouldBackUpAnyChildOfRelativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBackUpAnyChildOfRelativePath:");
}

id objc_msgSend_shouldBackgroundRestoreContentWithPolicy_fileInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBackgroundRestoreContentWithPolicy:fileInfo:");
}

id objc_msgSend_shouldBackgroundRestoreFile_backupManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBackgroundRestoreFile:backupManager:");
}

id objc_msgSend_shouldBackgroundRestorePath_backupManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBackgroundRestorePath:backupManager:");
}

id objc_msgSend_shouldBackupRelativePathFromLiveFileSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBackupRelativePathFromLiveFileSystem:");
}

id objc_msgSend_shouldBackupRelativePathIgnoringProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBackupRelativePathIgnoringProtectionClass:");
}

id objc_msgSend_shouldBeBackedUpIgnoringProtectionClass(void *a1, const char *a2, ...)
{
  return _[a1 shouldBeBackedUpIgnoringProtectionClass];
}

id objc_msgSend_shouldCancelTranscription(void *a1, const char *a2, ...)
{
  return _[a1 shouldCancelTranscription];
}

id objc_msgSend_shouldCancelVerification(void *a1, const char *a2, ...)
{
  return _[a1 shouldCancelVerification];
}

id objc_msgSend_shouldCommitIfPossible(void *a1, const char *a2, ...)
{
  return _[a1 shouldCommitIfPossible];
}

id objc_msgSend_shouldCopyBackup(void *a1, const char *a2, ...)
{
  return _[a1 shouldCopyBackup];
}

id objc_msgSend_shouldDeleteDevice(void *a1, const char *a2, ...)
{
  return _[a1 shouldDeleteDevice];
}

id objc_msgSend_shouldDigest(void *a1, const char *a2, ...)
{
  return _[a1 shouldDigest];
}

id objc_msgSend_shouldForegroundRestoreDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldForegroundRestoreDomain:");
}

id objc_msgSend_shouldHandleNewRequestForTask_transactionID_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHandleNewRequestForTask:transactionID:responseHandler:");
}

id objc_msgSend_shouldInheritBackupsFromDevice_toDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldInheritBackupsFromDevice:toDevice:error:");
}

id objc_msgSend_shouldKeepFileSystemSnapshotAfterBackupFailure(void *a1, const char *a2, ...)
{
  return _[a1 shouldKeepFileSystemSnapshotAfterBackupFailure];
}

id objc_msgSend_shouldKeepFileSystemSnapshotAfterBackupSuccess(void *a1, const char *a2, ...)
{
  return _[a1 shouldKeepFileSystemSnapshotAfterBackupSuccess];
}

id objc_msgSend_shouldNotifySpringBoard(void *a1, const char *a2, ...)
{
  return _[a1 shouldNotifySpringBoard];
}

id objc_msgSend_shouldObserveCoordinatorForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldObserveCoordinatorForBundleID:");
}

id objc_msgSend_shouldPrepareForBackgroundRestore(void *a1, const char *a2, ...)
{
  return _[a1 shouldPrepareForBackgroundRestore];
}

id objc_msgSend_shouldPreserveSettings(void *a1, const char *a2, ...)
{
  return _[a1 shouldPreserveSettings];
}

id objc_msgSend_shouldPreserveSettingsAfterRestore(void *a1, const char *a2, ...)
{
  return _[a1 shouldPreserveSettingsAfterRestore];
}

id objc_msgSend_shouldReadRawEncryptedData(void *a1, const char *a2, ...)
{
  return _[a1 shouldReadRawEncryptedData];
}

id objc_msgSend_shouldRegisterSafeHarbors(void *a1, const char *a2, ...)
{
  return _[a1 shouldRegisterSafeHarbors];
}

id objc_msgSend_shouldReloadConfigurationWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldReloadConfigurationWithAccount:");
}

id objc_msgSend_shouldRemoveItemsNotRestored(void *a1, const char *a2, ...)
{
  return _[a1 shouldRemoveItemsNotRestored];
}

id objc_msgSend_shouldRepairDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRepairDomain:");
}

id objc_msgSend_shouldReportLowDiskSpaceForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldReportLowDiskSpaceForError:");
}

id objc_msgSend_shouldResetTetheredSyncAnchors(void *a1, const char *a2, ...)
{
  return _[a1 shouldResetTetheredSyncAnchors];
}

id objc_msgSend_shouldRestoreAppWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRestoreAppWithID:");
}

id objc_msgSend_shouldRestoreContentWithPolicy_atPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRestoreContentWithPolicy:atPath:");
}

id objc_msgSend_shouldRestoreContentWithPolicy_fileInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRestoreContentWithPolicy:fileInfo:");
}

id objc_msgSend_shouldRestoreFile_backupManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRestoreFile:backupManager:");
}

id objc_msgSend_shouldRestoreFile_markFileAsSkipped_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRestoreFile:markFileAsSkipped:error:");
}

id objc_msgSend_shouldRestoreFilesSparse(void *a1, const char *a2, ...)
{
  return _[a1 shouldRestoreFilesSparse];
}

id objc_msgSend_shouldRestoreFromLegacySnapshotFormat(void *a1, const char *a2, ...)
{
  return _[a1 shouldRestoreFromLegacySnapshotFormat];
}

id objc_msgSend_shouldRestoreRelativeSymlinks(void *a1, const char *a2, ...)
{
  return _[a1 shouldRestoreRelativeSymlinks];
}

id objc_msgSend_shouldRestoreSnapshot_account_persona_useFileLists_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRestoreSnapshot:account:persona:useFileLists:error:");
}

id objc_msgSend_shouldRestoreSystemFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRestoreSystemFile:");
}

id objc_msgSend_shouldRestoreSystemFiles(void *a1, const char *a2, ...)
{
  return _[a1 shouldRestoreSystemFiles];
}

id objc_msgSend_shouldRestoreToSharedVolume(void *a1, const char *a2, ...)
{
  return _[a1 shouldRestoreToSharedVolume];
}

id objc_msgSend_shouldRestoreUsingFileListsForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRestoreUsingFileListsForAccount:");
}

id objc_msgSend_shouldRetryAfterError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRetryAfterError:");
}

id objc_msgSend_shouldRetryAfterError_connected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRetryAfterError:connected:");
}

id objc_msgSend_shouldRetryAfterError_hard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRetryAfterError:hard:");
}

id objc_msgSend_shouldRetrySaveWithRetryAfterInterval_recordID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRetrySaveWithRetryAfterInterval:recordID:error:");
}

id objc_msgSend_shouldRetryWhenNetworkUnavailable(void *a1, const char *a2, ...)
{
  return _[a1 shouldRetryWhenNetworkUnavailable];
}

id objc_msgSend_shouldRunVerifierForRestoreWithSnapshotFormat_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunVerifierForRestoreWithSnapshotFormat:account:");
}

id objc_msgSend_shouldRunVerifierWithBackupPolicy_backupReason_snapshotFormat_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunVerifierWithBackupPolicy:backupReason:snapshotFormat:account:");
}

id objc_msgSend_shouldScrubSQLiteFileCopyAtRelativePath_domain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldScrubSQLiteFileCopyAtRelativePath:domain:");
}

id objc_msgSend_shouldSetProtectionClass(void *a1, const char *a2, ...)
{
  return _[a1 shouldSetProtectionClass];
}

id objc_msgSend_shouldTriggerDeviceRecordOpLockFailureInBackupCommit(void *a1, const char *a2, ...)
{
  return _[a1 shouldTriggerDeviceRecordOpLockFailureInBackupCommit];
}

id objc_msgSend_shouldUpdateTimeEstimateForProgressPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateTimeEstimateForProgressPhase:");
}

id objc_msgSend_shouldUpdateWithProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateWithProgress:");
}

id objc_msgSend_shouldVacuum(void *a1, const char *a2, ...)
{
  return _[a1 shouldVacuum];
}

id objc_msgSend_shouldValidateFileEncoding(void *a1, const char *a2, ...)
{
  return _[a1 shouldValidateFileEncoding];
}

id objc_msgSend_shouldVerifyDigests(void *a1, const char *a2, ...)
{
  return _[a1 shouldVerifyDigests];
}

id objc_msgSend_shouldVerifyRestore(void *a1, const char *a2, ...)
{
  return _[a1 shouldVerifyRestore];
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_signalPrebuddy_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signalPrebuddy:account:");
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return _[a1 signature];
}

id objc_msgSend_signatureForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureForError:");
}

id objc_msgSend_signatureWithDomain_type_subType_detectedProcess_triggerThresholdValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureWithDomain:type:subType:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_simpleChecksumForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simpleChecksumForString:");
}

id objc_msgSend_simulatedDate(void *a1, const char *a2, ...)
{
  return _[a1 simulatedDate];
}

id objc_msgSend_singleFromMultiErrorWithReturnValue_results_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "singleFromMultiErrorWithReturnValue:results:error:");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _[a1 size];
}

id objc_msgSend_sizeBeforeCopy(void *a1, const char *a2, ...)
{
  return _[a1 sizeBeforeCopy];
}

id objc_msgSend_sizeBeforeEncoding(void *a1, const char *a2, ...)
{
  return _[a1 sizeBeforeEncoding];
}

id objc_msgSend_sizeDomain_manager_operationTracker_account_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeDomain:manager:operationTracker:account:device:error:");
}

id objc_msgSend_sizeDomainWithName_manager_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeDomainWithName:manager:account:error:");
}

id objc_msgSend_sizeDomainsWithManager_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeDomainsWithManager:account:error:");
}

id objc_msgSend_sizeDomainsWithManager_operationTracker_account_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeDomainsWithManager:operationTracker:account:device:error:");
}

id objc_msgSend_sizeExcludingHardlinksAndClonesForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeExcludingHardlinksAndClonesForType:");
}

id objc_msgSend_sizeForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeForType:");
}

id objc_msgSend_sizeFromFileIDWithDefaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeFromFileIDWithDefaultValue:");
}

id objc_msgSend_sizeOfAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeOfAttributes:");
}

id objc_msgSend_sizeOfDomain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeOfDomain:error:");
}

id objc_msgSend_sizeOfPendingRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeOfPendingRestore:");
}

id objc_msgSend_sizeOfScannedDomain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeOfScannedDomain:error:");
}

id objc_msgSend_sizeOfSnapshot_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeOfSnapshot:error:");
}

id objc_msgSend_skippedFileRecordsPlistPath(void *a1, const char *a2, ...)
{
  return _[a1 skippedFileRecordsPlistPath];
}

id objc_msgSend_skippedFileTracker(void *a1, const char *a2, ...)
{
  return _[a1 skippedFileTracker];
}

id objc_msgSend_skippedFiles(void *a1, const char *a2, ...)
{
  return _[a1 skippedFiles];
}

id objc_msgSend_skippedFilesCount(void *a1, const char *a2, ...)
{
  return _[a1 skippedFilesCount];
}

id objc_msgSend_skippedFilesDomainWithVolumeMountPoint_rootPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "skippedFilesDomainWithVolumeMountPoint:rootPath:");
}

id objc_msgSend_skippedFilesPlistValue(void *a1, const char *a2, ...)
{
  return _[a1 skippedFilesPlistValue];
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_snapshot(void *a1, const char *a2, ...)
{
  return _[a1 snapshot];
}

id objc_msgSend_snapshotActions(void *a1, const char *a2, ...)
{
  return _[a1 snapshotActions];
}

id objc_msgSend_snapshotAfterForegroundRestore(void *a1, const char *a2, ...)
{
  return _[a1 snapshotAfterForegroundRestore];
}

id objc_msgSend_snapshotAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotAtIndex:");
}

id objc_msgSend_snapshotAttributes(void *a1, const char *a2, ...)
{
  return _[a1 snapshotAttributes];
}

id objc_msgSend_snapshotBackupPolicy(void *a1, const char *a2, ...)
{
  return _[a1 snapshotBackupPolicy];
}

id objc_msgSend_snapshotCommitDates(void *a1, const char *a2, ...)
{
  return _[a1 snapshotCommitDates];
}

id objc_msgSend_snapshotDatabaseDirectory(void *a1, const char *a2, ...)
{
  return _[a1 snapshotDatabaseDirectory];
}

id objc_msgSend_snapshotDirectoryRoot(void *a1, const char *a2, ...)
{
  return _[a1 snapshotDirectoryRoot];
}

id objc_msgSend_snapshotForDevice_reason_type_snapshotFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotForDevice:reason:type:snapshotFormat:");
}

id objc_msgSend_snapshotForDevice_reason_type_snapshotFormat_accountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotForDevice:reason:type:snapshotFormat:accountType:");
}

id objc_msgSend_snapshotForDevice_reason_type_snapshotFormat_snapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotForDevice:reason:type:snapshotFormat:snapshotID:");
}

id objc_msgSend_snapshotForSnapshotID_backupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotForSnapshotID:backupUDID:");
}

id objc_msgSend_snapshotForSnapshotID_backupUDID_operationTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotForSnapshotID:backupUDID:operationTracker:error:");
}

id objc_msgSend_snapshotFormat(void *a1, const char *a2, ...)
{
  return _[a1 snapshotFormat];
}

id objc_msgSend_snapshotFormatForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotFormatForAccount:error:");
}

id objc_msgSend_snapshotFormatForBackupWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotFormatForBackupWithAccount:");
}

id objc_msgSend_snapshotFormatForCurrentRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotFormatForCurrentRestore:");
}

id objc_msgSend_snapshotFormatString(void *a1, const char *a2, ...)
{
  return _[a1 snapshotFormatString];
}

id objc_msgSend_snapshotFromMBCKSnapshot_withSnapshotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotFromMBCKSnapshot:withSnapshotID:");
}

id objc_msgSend_snapshotFromMBSSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotFromMBSSnapshot:");
}

id objc_msgSend_snapshotID(void *a1, const char *a2, ...)
{
  return _[a1 snapshotID];
}

id objc_msgSend_snapshotIDFromSnapshotRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotIDFromSnapshotRecordID:");
}

id objc_msgSend_snapshotIndex(void *a1, const char *a2, ...)
{
  return _[a1 snapshotIndex];
}

id objc_msgSend_snapshotManifestDB(void *a1, const char *a2, ...)
{
  return _[a1 snapshotManifestDB];
}

id objc_msgSend_snapshotMergeRequestForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotMergeRequestForDevice:");
}

id objc_msgSend_snapshotMountPoint(void *a1, const char *a2, ...)
{
  return _[a1 snapshotMountPoint];
}

id objc_msgSend_snapshotMountPointForVolumeMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotMountPointForVolumeMountPoint:");
}

id objc_msgSend_snapshotName(void *a1, const char *a2, ...)
{
  return _[a1 snapshotName];
}

id objc_msgSend_snapshotPath(void *a1, const char *a2, ...)
{
  return _[a1 snapshotPath];
}

id objc_msgSend_snapshotRefs(void *a1, const char *a2, ...)
{
  return _[a1 snapshotRefs];
}

id objc_msgSend_snapshotState(void *a1, const char *a2, ...)
{
  return _[a1 snapshotState];
}

id objc_msgSend_snapshotStateName(void *a1, const char *a2, ...)
{
  return _[a1 snapshotStateName];
}

id objc_msgSend_snapshotStateWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotStateWithString:");
}

id objc_msgSend_snapshotType(void *a1, const char *a2, ...)
{
  return _[a1 snapshotType];
}

id objc_msgSend_snapshotUUID(void *a1, const char *a2, ...)
{
  return _[a1 snapshotUUID];
}

id objc_msgSend_snapshotVerificationCancellationError(void *a1, const char *a2, ...)
{
  return _[a1 snapshotVerificationCancellationError];
}

id objc_msgSend_snapshotVerificationDuration(void *a1, const char *a2, ...)
{
  return _[a1 snapshotVerificationDuration];
}

id objc_msgSend_snapshotVerificationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 snapshotVerificationEnabled];
}

id objc_msgSend_snapshotVerificationStatus(void *a1, const char *a2, ...)
{
  return _[a1 snapshotVerificationStatus];
}

id objc_msgSend_snapshotWithSignature_duration_event_payload_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotWithSignature:duration:event:payload:reply:");
}

id objc_msgSend_snapshots(void *a1, const char *a2, ...)
{
  return _[a1 snapshots];
}

id objc_msgSend_snapshotsCount(void *a1, const char *a2, ...)
{
  return _[a1 snapshotsCount];
}

id objc_msgSend_snapshotsForBackupUDID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotsForBackupUDID:");
}

id objc_msgSend_softConsecutiveRetryLimit(void *a1, const char *a2, ...)
{
  return _[a1 softConsecutiveRetryLimit];
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingSelector:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sortedArrayWithOptions_usingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayWithOptions:usingComparator:");
}

id objc_msgSend_sortedSnapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedSnapshots:");
}

id objc_msgSend_sourceBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 sourceBuildVersion];
}

id objc_msgSend_sourceDeviceClass(void *a1, const char *a2, ...)
{
  return _[a1 sourceDeviceClass];
}

id objc_msgSend_sourceDeviceDataSize(void *a1, const char *a2, ...)
{
  return _[a1 sourceDeviceDataSize];
}

id objc_msgSend_sourceDeviceID(void *a1, const char *a2, ...)
{
  return _[a1 sourceDeviceID];
}

id objc_msgSend_sourceDeviceInode(void *a1, const char *a2, ...)
{
  return _[a1 sourceDeviceInode];
}

id objc_msgSend_sourceDeviceName(void *a1, const char *a2, ...)
{
  return _[a1 sourceDeviceName];
}

id objc_msgSend_sourceDeviceUDID(void *a1, const char *a2, ...)
{
  return _[a1 sourceDeviceUDID];
}

id objc_msgSend_sourceDigest(void *a1, const char *a2, ...)
{
  return _[a1 sourceDigest];
}

id objc_msgSend_sourceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sourceIdentifier];
}

id objc_msgSend_sourceIsLive(void *a1, const char *a2, ...)
{
  return _[a1 sourceIsLive];
}

id objc_msgSend_sourcePath(void *a1, const char *a2, ...)
{
  return _[a1 sourcePath];
}

id objc_msgSend_sourceProductVersion(void *a1, const char *a2, ...)
{
  return _[a1 sourceProductVersion];
}

id objc_msgSend_sourceProtocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 sourceProtocolVersion];
}

id objc_msgSend_sourceRequiredProductVersion(void *a1, const char *a2, ...)
{
  return _[a1 sourceRequiredProductVersion];
}

id objc_msgSend_spaceSavingsThreshold(void *a1, const char *a2, ...)
{
  return _[a1 spaceSavingsThreshold];
}

id objc_msgSend_sqlBatchCount(void *a1, const char *a2, ...)
{
  return _[a1 sqlBatchCount];
}

id objc_msgSend_sqlBatchTime(void *a1, const char *a2, ...)
{
  return _[a1 sqlBatchTime];
}

id objc_msgSend_sqlTrace(void *a1, const char *a2, ...)
{
  return _[a1 sqlTrace];
}

id objc_msgSend_sqliteCopyDirectory(void *a1, const char *a2, ...)
{
  return _[a1 sqliteCopyDirectory];
}

id objc_msgSend_sqliteErrorHandler(void *a1, const char *a2, ...)
{
  return _[a1 sqliteErrorHandler];
}

id objc_msgSend_sqliteOpenFlagForProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sqliteOpenFlagForProtectionClass:");
}

id objc_msgSend_sqliteSpaceSavingsThreshold(void *a1, const char *a2, ...)
{
  return _[a1 sqliteSpaceSavingsThreshold];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startBackupWithOptions_reason_xpcActivity_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startBackupWithOptions:reason:xpcActivity:account:connection:error:");
}

id objc_msgSend_startBatchDelete(void *a1, const char *a2, ...)
{
  return _[a1 startBatchDelete];
}

id objc_msgSend_startBatchFetch(void *a1, const char *a2, ...)
{
  return _[a1 startBatchFetch];
}

id objc_msgSend_startBatchSave(void *a1, const char *a2, ...)
{
  return _[a1 startBatchSave];
}

id objc_msgSend_startDataTransferWithPreflightInfo_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDataTransferWithPreflightInfo:completion:");
}

id objc_msgSend_startDataTransferWithPreflightInfo_connection_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDataTransferWithPreflightInfo:connection:completion:");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startDateOfCurrentPeriod(void *a1, const char *a2, ...)
{
  return _[a1 startDateOfCurrentPeriod];
}

id objc_msgSend_startDeviceTransferWithTaskType_sessionInfo_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDeviceTransferWithTaskType:sessionInfo:connection:error:");
}

id objc_msgSend_startFilesystemKeyRollingWithPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startFilesystemKeyRollingWithPath:error:");
}

id objc_msgSend_startFollowup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startFollowup:");
}

id objc_msgSend_startKeychainDataImportWithKeychainInfo_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startKeychainDataImportWithKeychainInfo:completion:");
}

id objc_msgSend_startKeychainDataImportWithKeychainInfo_connection_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startKeychainDataImportWithKeychainInfo:connection:completion:");
}

id objc_msgSend_startKeychainDataTransferWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startKeychainDataTransferWithCompletion:");
}

id objc_msgSend_startKeychainDataTransferWithConnection_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startKeychainDataTransferWithConnection:completion:");
}

id objc_msgSend_startKeychainTransferWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startKeychainTransferWithCompletion:");
}

id objc_msgSend_startKeychainTransferWithConnection_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startKeychainTransferWithConnection:completion:");
}

id objc_msgSend_startOTABackup(void *a1, const char *a2, ...)
{
  return _[a1 startOTABackup];
}

id objc_msgSend_startOTABackupForVolumeUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOTABackupForVolumeUUID:");
}

id objc_msgSend_startObservingInstallCoordinators(void *a1, const char *a2, ...)
{
  return _[a1 startObservingInstallCoordinators];
}

id objc_msgSend_startPreflightWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startPreflightWithCompletion:");
}

id objc_msgSend_startPreflightWithConnection_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startPreflightWithConnection:completion:");
}

id objc_msgSend_startRenewingLock(void *a1, const char *a2, ...)
{
  return _[a1 startRenewingLock];
}

id objc_msgSend_startRestoreForSnapshot_options_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRestoreForSnapshot:options:account:connection:error:");
}

id objc_msgSend_startRestoreWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRestoreWithError:");
}

id objc_msgSend_startScanForBundleIDs_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanForBundleIDs:account:error:");
}

id objc_msgSend_startScanWithAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanWithAccount:error:");
}

id objc_msgSend_startSync(void *a1, const char *a2, ...)
{
  return _[a1 startSync];
}

id objc_msgSend_startTime(void *a1, const char *a2, ...)
{
  return _[a1 startTime];
}

id objc_msgSend_startWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithCompletion:");
}

id objc_msgSend_startWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithCompletionHandler:");
}

id objc_msgSend_stashAsset_forDomain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stashAsset:forDomain:error:");
}

id objc_msgSend_stashAssetsToTemporaryDirectoryWithAccount_operationTracker_cache_device_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stashAssetsToTemporaryDirectoryWithAccount:operationTracker:cache:device:error:");
}

id objc_msgSend_stashedAssetDecrypted(void *a1, const char *a2, ...)
{
  return _[a1 stashedAssetDecrypted];
}

id objc_msgSend_stashedAssetIsDecrypted(void *a1, const char *a2, ...)
{
  return _[a1 stashedAssetIsDecrypted];
}

id objc_msgSend_stashedAssetPath(void *a1, const char *a2, ...)
{
  return _[a1 stashedAssetPath];
}

id objc_msgSend_stashedResourcePath(void *a1, const char *a2, ...)
{
  return _[a1 stashedResourcePath];
}

id objc_msgSend_statWithBuffer_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statWithBuffer:error:");
}

id objc_msgSend_statWithSize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statWithSize:error:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stateChange(void *a1, const char *a2, ...)
{
  return _[a1 stateChange];
}

id objc_msgSend_stateDescription(void *a1, const char *a2, ...)
{
  return _[a1 stateDescription];
}

id objc_msgSend_stateForVolumeMountPoints_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateForVolumeMountPoints:error:");
}

id objc_msgSend_stateString(void *a1, const char *a2, ...)
{
  return _[a1 stateString];
}

id objc_msgSend_statistics(void *a1, const char *a2, ...)
{
  return _[a1 statistics];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusChanged(void *a1, const char *a2, ...)
{
  return _[a1 statusChanged];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_statusToReport(void *a1, const char *a2, ...)
{
  return _[a1 statusToReport];
}

id objc_msgSend_statusWithDrive_path_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusWithDrive:path:error:");
}

id objc_msgSend_step(void *a1, const char *a2, ...)
{
  return _[a1 step];
}

id objc_msgSend_stmt(void *a1, const char *a2, ...)
{
  return _[a1 stmt];
}

id objc_msgSend_stopFilesystemKeyRollingWithPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopFilesystemKeyRollingWithPath:error:");
}

id objc_msgSend_stopListeningForFileTransfers(void *a1, const char *a2, ...)
{
  return _[a1 stopListeningForFileTransfers];
}

id objc_msgSend_stopOTABackup(void *a1, const char *a2, ...)
{
  return _[a1 stopOTABackup];
}

id objc_msgSend_stopOTABackupForVolumeUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopOTABackupForVolumeUUID:");
}

id objc_msgSend_stopRenewingLock(void *a1, const char *a2, ...)
{
  return _[a1 stopRenewingLock];
}

id objc_msgSend_stopTrackingCoordinator_withSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTrackingCoordinator:withSuccess:");
}

id objc_msgSend_stopTrackingCoordinatorWithBundleID_success_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTrackingCoordinatorWithBundleID:success:");
}

id objc_msgSend_storedKeybagsByUUIDString(void *a1, const char *a2, ...)
{
  return _[a1 storedKeybagsByUUIDString];
}

id objc_msgSend_streamError(void *a1, const char *a2, ...)
{
  return _[a1 streamError];
}

id objc_msgSend_streamRef(void *a1, const char *a2, ...)
{
  return _[a1 streamRef];
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringAtIndex:");
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByReplacingCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingCharactersInRange:withString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByResolvingSymlinksInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByResolvingSymlinksInPath];
}

id objc_msgSend_stringByStandardizingPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByStandardizingPath];
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForEngineMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForEngineMode:");
}

id objc_msgSend_stringForEngineType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForEngineType:");
}

id objc_msgSend_stringForRestorePhase(void *a1, const char *a2, ...)
{
  return _[a1 stringForRestorePhase];
}

id objc_msgSend_stringForRestoreType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForRestoreType:");
}

id objc_msgSend_stringForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForType:");
}

id objc_msgSend_stringFromByteCount_countStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromByteCount:countStyle:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromDateComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDateComponents:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 stringRepresentation];
}

id objc_msgSend_stringRepresentationWithAssetMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringRepresentationWithAssetMetadata:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFileSystemRepresentation_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFileSystemRepresentation:length:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithSnapshotState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithSnapshotState:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subDomain(void *a1, const char *a2, ...)
{
  return _[a1 subDomain];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subcount(void *a1, const char *a2, ...)
{
  return _[a1 subcount];
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_subdictionary_toIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdictionary:toIndex:");
}

id objc_msgSend_subdictionary_withKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdictionary:withKeys:");
}

id objc_msgSend_subindex(void *a1, const char *a2, ...)
{
  return _[a1 subindex];
}

id objc_msgSend_submit(void *a1, const char *a2, ...)
{
  return _[a1 submit];
}

id objc_msgSend_submitCKEventMetric_account_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitCKEventMetric:account:completionHandler:");
}

id objc_msgSend_submitEventMetric_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitEventMetric:completionHandler:");
}

id objc_msgSend_submitEventName_metrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitEventName:metrics:");
}

id objc_msgSend_submitMegaLifeCycleTelemetriesWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitMegaLifeCycleTelemetriesWithAccount:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_successResponses(void *a1, const char *a2, ...)
{
  return _[a1 successResponses];
}

id objc_msgSend_summarizeCloudFilesPendingDeleteForManifestID_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summarizeCloudFilesPendingDeleteForManifestID:callback:");
}

id objc_msgSend_summarizeFileChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summarizeFileChanges:");
}

id objc_msgSend_summarizeFileChangesForAllChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summarizeFileChangesForAllChanges:");
}

id objc_msgSend_summarizeFileChangesForDomainName_foundChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summarizeFileChangesForDomainName:foundChanges:");
}

id objc_msgSend_summarizeFileChangesGroupByDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summarizeFileChangesGroupByDomain:");
}

id objc_msgSend_summary(void *a1, const char *a2, ...)
{
  return _[a1 summary];
}

id objc_msgSend_supplyBytes_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supplyBytes:withCompletionBlock:");
}

id objc_msgSend_supportsFSEventsForDetectingChanges(void *a1, const char *a2, ...)
{
  return _[a1 supportsFSEventsForDetectingChanges];
}

id objc_msgSend_suppressAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 suppressAuthorization];
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return _[a1 suspend];
}

id objc_msgSend_symbolicLinkTargetWithPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "symbolicLinkTargetWithPath:error:");
}

id objc_msgSend_symbolicLinkTargetWithPathFSR_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "symbolicLinkTargetWithPathFSR:error:");
}

id objc_msgSend_symlinks(void *a1, const char *a2, ...)
{
  return _[a1 symlinks];
}

id objc_msgSend_syncBackupEnabledWithAccount_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncBackupEnabledWithAccount:connection:");
}

id objc_msgSend_syncZoneID(void *a1, const char *a2, ...)
{
  return _[a1 syncZoneID];
}

id objc_msgSend_synchronizeFileListsWithDeviceUUID_commitID_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeFileListsWithDeviceUUID:commitID:account:error:");
}

id objc_msgSend_synchronizeFileListsWithOperationTracker_snapshotDirectory_commitID_error_fetchedFileListBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeFileListsWithOperationTracker:snapshotDirectory:commitID:error:fetchedFileListBlock:");
}

id objc_msgSend_synchronizeFileListsWithOperationTracker_snapshotDirectory_snapshotUUID_error_fetchedFileListBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeFileListsWithOperationTracker:snapshotDirectory:snapshotUUID:error:fetchedFileListBlock:");
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_syscallErrno(void *a1, const char *a2, ...)
{
  return _[a1 syscallErrno];
}

id objc_msgSend_syscallType(void *a1, const char *a2, ...)
{
  return _[a1 syscallType];
}

id objc_msgSend_systemAttributes(void *a1, const char *a2, ...)
{
  return _[a1 systemAttributes];
}

id objc_msgSend_systemContainerDomainWithIdentifier_volumeMountPoint_rootPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemContainerDomainWithIdentifier:volumeMountPoint:rootPath:");
}

id objc_msgSend_systemContainerRestoreRootWithContainerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemContainerRestoreRootWithContainerID:");
}

id objc_msgSend_systemContainersVolumeMountPoint(void *a1, const char *a2, ...)
{
  return _[a1 systemContainersVolumeMountPoint];
}

id objc_msgSend_systemContainersWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemContainersWithError:");
}

id objc_msgSend_systemDataContainerRestoreDirectory(void *a1, const char *a2, ...)
{
  return _[a1 systemDataContainerRestoreDirectory];
}

id objc_msgSend_systemDataContainerWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemDataContainerWithIdentifier:");
}

id objc_msgSend_systemDomainsByName(void *a1, const char *a2, ...)
{
  return _[a1 systemDomainsByName];
}

id objc_msgSend_systemDomainsVersion(void *a1, const char *a2, ...)
{
  return _[a1 systemDomainsVersion];
}

id objc_msgSend_systemFieldData(void *a1, const char *a2, ...)
{
  return _[a1 systemFieldData];
}

id objc_msgSend_systemPath(void *a1, const char *a2, ...)
{
  return _[a1 systemPath];
}

id objc_msgSend_systemPluginsForPersona_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemPluginsForPersona:error:");
}

id objc_msgSend_systemSharedContainerDomainWithIdentifier_volumeMountPoint_rootPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemSharedContainerDomainWithIdentifier:volumeMountPoint:rootPath:");
}

id objc_msgSend_systemSharedContainerWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemSharedContainerWithIdentifier:");
}

id objc_msgSend_systemSharedContainersWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemSharedContainersWithError:");
}

id objc_msgSend_systemSharedDataContainerRestoreDirectory(void *a1, const char *a2, ...)
{
  return _[a1 systemSharedDataContainerRestoreDirectory];
}

id objc_msgSend_systemTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 systemTimeZone];
}

id objc_msgSend_target(void *a1, const char *a2, ...)
{
  return _[a1 target];
}

id objc_msgSend_targetBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 targetBuildVersion];
}

id objc_msgSend_targetDeviceClass(void *a1, const char *a2, ...)
{
  return _[a1 targetDeviceClass];
}

id objc_msgSend_targetDeviceName(void *a1, const char *a2, ...)
{
  return _[a1 targetDeviceName];
}

id objc_msgSend_targetDeviceUDID(void *a1, const char *a2, ...)
{
  return _[a1 targetDeviceUDID];
}

id objc_msgSend_targetIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 targetIdentifier];
}

id objc_msgSend_targetProductVersion(void *a1, const char *a2, ...)
{
  return _[a1 targetProductVersion];
}

id objc_msgSend_targetProtocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 targetProtocolVersion];
}

id objc_msgSend_targetSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 targetSnapshot];
}

id objc_msgSend_taskWithCommandWithArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskWithCommandWithArguments:");
}

id objc_msgSend_tearDownBackupForVolume_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tearDownBackupForVolume:error:");
}

id objc_msgSend_telemetry(void *a1, const char *a2, ...)
{
  return _[a1 telemetry];
}

id objc_msgSend_telemetryID(void *a1, const char *a2, ...)
{
  return _[a1 telemetryID];
}

id objc_msgSend_temporaryDirectoryOnSameVolumeAsPath_identifiedBy_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "temporaryDirectoryOnSameVolumeAsPath:identifiedBy:error:");
}

id objc_msgSend_temporaryPath(void *a1, const char *a2, ...)
{
  return _[a1 temporaryPath];
}

id objc_msgSend_testCommitRepairChecksumOnLightrailChecksumMismatch(void *a1, const char *a2, ...)
{
  return _[a1 testCommitRepairChecksumOnLightrailChecksumMismatch];
}

id objc_msgSend_textColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textColumn:");
}

id objc_msgSend_thermalPressureLevel(void *a1, const char *a2, ...)
{
  return _[a1 thermalPressureLevel];
}

id objc_msgSend_thermalPressureMonitor(void *a1, const char *a2, ...)
{
  return _[a1 thermalPressureMonitor];
}

id objc_msgSend_throughputEstimator(void *a1, const char *a2, ...)
{
  return _[a1 throughputEstimator];
}

id objc_msgSend_throughputs(void *a1, const char *a2, ...)
{
  return _[a1 throughputs];
}

id objc_msgSend_time(void *a1, const char *a2, ...)
{
  return _[a1 time];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return _[a1 timeout];
}

id objc_msgSend_timeoutIntervalForFetch(void *a1, const char *a2, ...)
{
  return _[a1 timeoutIntervalForFetch];
}

id objc_msgSend_timeoutIntervalForModify(void *a1, const char *a2, ...)
{
  return _[a1 timeoutIntervalForModify];
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return _[a1 timer];
}

id objc_msgSend_timers(void *a1, const char *a2, ...)
{
  return _[a1 timers];
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_toolsWithSettingsContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toolsWithSettingsContext:");
}

id objc_msgSend_topDomainsWithMissingEncryptionKeys(void *a1, const char *a2, ...)
{
  return _[a1 topDomainsWithMissingEncryptionKeys];
}

id objc_msgSend_total(void *a1, const char *a2, ...)
{
  return _[a1 total];
}

id objc_msgSend_totalBytesToTransfer(void *a1, const char *a2, ...)
{
  return _[a1 totalBytesToTransfer];
}

id objc_msgSend_totalBytesTransferred(void *a1, const char *a2, ...)
{
  return _[a1 totalBytesTransferred];
}

id objc_msgSend_totalItemCount(void *a1, const char *a2, ...)
{
  return _[a1 totalItemCount];
}

id objc_msgSend_totalRetryCount(void *a1, const char *a2, ...)
{
  return _[a1 totalRetryCount];
}

id objc_msgSend_totalSize(void *a1, const char *a2, ...)
{
  return _[a1 totalSize];
}

id objc_msgSend_trackConsolidatedDomainDuringFileListSynchronization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackConsolidatedDomainDuringFileListSynchronization:");
}

id objc_msgSend_trackDeletedDomainDuringFileListSynchronization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackDeletedDomainDuringFileListSynchronization:");
}

id objc_msgSend_trackDeletedDomainInCommit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackDeletedDomainInCommit:");
}

id objc_msgSend_trackDomainTranscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackDomainTranscription:");
}

id objc_msgSend_trackDownloadedDomainDuringFileListSynchronization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackDownloadedDomainDuringFileListSynchronization:");
}

id objc_msgSend_trackDuration_forEngineState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackDuration:forEngineState:");
}

id objc_msgSend_trackFoundEncryptionKeysForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackFoundEncryptionKeysForAccount:");
}

id objc_msgSend_trackMissingEncryptionKeyForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackMissingEncryptionKeyForAccount:");
}

id objc_msgSend_trackModifiedDomainInCommit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackModifiedDomainInCommit:");
}

id objc_msgSend_trackModifiedDomainInTranscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackModifiedDomainInTranscription:");
}

id objc_msgSend_trackRepairedDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackRepairedDomain:");
}

id objc_msgSend_trackSkippedFile_syscallType_syscallErrno_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackSkippedFile:syscallType:syscallErrno:");
}

id objc_msgSend_trackSkippedFileListCloneDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackSkippedFileListCloneDomain:");
}

id objc_msgSend_trackSnapshotForVolume_snapshotName_mountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackSnapshotForVolume:snapshotName:mountPoint:");
}

id objc_msgSend_trackSnapshotVerificationFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackSnapshotVerificationFailure:");
}

id objc_msgSend_trackUploadedDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackUploadedDomain:");
}

id objc_msgSend_trackVerificationFailureForSnapshot_manifestID_domain_serverChecksum_localChecksum_localFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackVerificationFailureForSnapshot:manifestID:domain:serverChecksum:localChecksum:localFileCount:");
}

id objc_msgSend_tracker(void *a1, const char *a2, ...)
{
  return _[a1 tracker];
}

id objc_msgSend_trackers(void *a1, const char *a2, ...)
{
  return _[a1 trackers];
}

id objc_msgSend_transaction(void *a1, const char *a2, ...)
{
  return _[a1 transaction];
}

id objc_msgSend_transferDrive(void *a1, const char *a2, ...)
{
  return _[a1 transferDrive];
}

id objc_msgSend_transferLocalDrive(void *a1, const char *a2, ...)
{
  return _[a1 transferLocalDrive];
}

id objc_msgSend_treeWithPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "treeWithPaths:");
}

id objc_msgSend_truncateDomainsNotPresentOnDisk_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "truncateDomainsNotPresentOnDisk:");
}

id objc_msgSend_txRate(void *a1, const char *a2, ...)
{
  return _[a1 txRate];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeForInstallMachinery(void *a1, const char *a2, ...)
{
  return _[a1 typeForInstallMachinery];
}

id objc_msgSend_typeName(void *a1, const char *a2, ...)
{
  return _[a1 typeName];
}

id objc_msgSend_typeOfColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeOfColumn:");
}

id objc_msgSend_typeString(void *a1, const char *a2, ...)
{
  return _[a1 typeString];
}

id objc_msgSend_unarchivedObjectOfClass_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:atIndex:");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:atIndex:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unboostBackgroundRestore(void *a1, const char *a2, ...)
{
  return _[a1 unboostBackgroundRestore];
}

id objc_msgSend_uncancel(void *a1, const char *a2, ...)
{
  return _[a1 uncancel];
}

id objc_msgSend_underlyingErrorFromCKCancelationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "underlyingErrorFromCKCancelationError:");
}

id objc_msgSend_underlyingErrors(void *a1, const char *a2, ...)
{
  return _[a1 underlyingErrors];
}

id objc_msgSend_uninstallAppWithBundleID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstallAppWithBundleID:error:");
}

id objc_msgSend_uninstallAppWithBundleID_options_disposition_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstallAppWithBundleID:options:disposition:error:");
}

id objc_msgSend_uninstallAppWithBundleID_requestUserConfirmation_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstallAppWithBundleID:requestUserConfirmation:completion:");
}

id objc_msgSend_uninstalledContainerWithDomainName_volumeMountPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstalledContainerWithDomainName:volumeMountPoint:");
}

id objc_msgSend_uninstalledDomainWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstalledDomainWithName:");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueContainers(void *a1, const char *a2, ...)
{
  return _[a1 uniqueContainers];
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentifier];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unlockKeybag_accountType_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlockKeybag:accountType:error:block:");
}

id objc_msgSend_unlockWithAccountType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlockWithAccountType:error:");
}

id objc_msgSend_unlockWithPassword_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlockWithPassword:error:");
}

id objc_msgSend_unlockWithSecret_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlockWithSecret:error:");
}

id objc_msgSend_unlockedKeyBagWithData_password_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlockedKeyBagWithData:password:error:");
}

id objc_msgSend_unmodifiedDirectories(void *a1, const char *a2, ...)
{
  return _[a1 unmodifiedDirectories];
}

id objc_msgSend_unmodifiedDirectoryCount(void *a1, const char *a2, ...)
{
  return _[a1 unmodifiedDirectoryCount];
}

id objc_msgSend_unmodifiedDomainNames(void *a1, const char *a2, ...)
{
  return _[a1 unmodifiedDomainNames];
}

id objc_msgSend_unmodifiedFileCountInCurrentlyScannedDomain(void *a1, const char *a2, ...)
{
  return _[a1 unmodifiedFileCountInCurrentlyScannedDomain];
}

id objc_msgSend_unmodifiedRegularFileCount(void *a1, const char *a2, ...)
{
  return _[a1 unmodifiedRegularFileCount];
}

id objc_msgSend_unmodifiedRegularFiles(void *a1, const char *a2, ...)
{
  return _[a1 unmodifiedRegularFiles];
}

id objc_msgSend_unmodifiedSymlinks(void *a1, const char *a2, ...)
{
  return _[a1 unmodifiedSymlinks];
}

id objc_msgSend_unmount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unmount:error:");
}

id objc_msgSend_unmountAndDeleteSnapshotForVolume_name_mountPoint_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unmountAndDeleteSnapshotForVolume:name:mountPoint:error:");
}

id objc_msgSend_unmountAndRenameSnapshotForVolume_name_mountPoint_newName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unmountAndRenameSnapshotForVolume:name:mountPoint:newName:error:");
}

id objc_msgSend_unpinGMSnapshotAndSaveNewSnapshotIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpinGMSnapshotAndSaveNewSnapshotIfNeeded:");
}

id objc_msgSend_unpinSnapshot_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpinSnapshot:error:");
}

id objc_msgSend_unpinSnapshotID_backupUDID_account_connection_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpinSnapshotID:backupUDID:account:connection:error:");
}

id objc_msgSend_unregisterOTAKeyBagForVolume_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterOTAKeyBagForVolume:error:");
}

id objc_msgSend_unregisterOTAKeyBagWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterOTAKeyBagWithError:");
}

id objc_msgSend_unsetAlreadyUploadedFlags(void *a1, const char *a2, ...)
{
  return _[a1 unsetAlreadyUploadedFlags];
}

id objc_msgSend_unsetVerifiedFlags(void *a1, const char *a2, ...)
{
  return _[a1 unsetVerifiedFlags];
}

id objc_msgSend_unsignedCharAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedCharAtIndex:");
}

id objc_msgSend_unsignedIntAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntAtIndex:");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerAtIndex:");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongAtIndex:");
}

id objc_msgSend_unsignedLongLongAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongLongAtIndex:");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongValue];
}

id objc_msgSend_unsignedShortAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedShortAtIndex:");
}

id objc_msgSend_unzipPlaceholderDomainZipFile_intoDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unzipPlaceholderDomainZipFile:intoDirectory:error:");
}

id objc_msgSend_updateAppleAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAppleAccount:");
}

id objc_msgSend_updateAppleAccountSync(void *a1, const char *a2, ...)
{
  return _[a1 updateAppleAccountSync];
}

id objc_msgSend_updateApplePassword_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateApplePassword:completionHandler:");
}

id objc_msgSend_updateApplePasswordSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateApplePasswordSync:");
}

id objc_msgSend_updateDecodedAssetPath_forSignature_volumeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDecodedAssetPath:forSignature:volumeType:");
}

id objc_msgSend_updateDomainListInPlaceholderDomainWithDevice_appManager_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDomainListInPlaceholderDomainWithDevice:appManager:error:");
}

id objc_msgSend_updateDomainListWithServerDomainHMACs_domainsInCurrentSnapshot_systemAppsInCurrentSnapshot_modifiedDomainDependencies_hmacKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDomainListWithServerDomainHMACs:domainsInCurrentSnapshot:systemAppsInCurrentSnapshot:modifiedDomainDependencies:hmacKey:error:");
}

id objc_msgSend_updateFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFile:");
}

id objc_msgSend_updateFileChangesAfterCommittingSnapshot(void *a1, const char *a2, ...)
{
  return _[a1 updateFileChangesAfterCommittingSnapshot];
}

id objc_msgSend_updateFileChangesAfterRemovingDomainName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFileChangesAfterRemovingDomainName:");
}

id objc_msgSend_updateFollowupWithBackupProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFollowupWithBackupProgress:");
}

id objc_msgSend_updateFromServerWithBatchFetch_referenceFetchProgress_manifestCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFromServerWithBatchFetch:referenceFetchProgress:manifestCompletion:");
}

id objc_msgSend_updateKeySet_forBackupUDID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateKeySet:forBackupUDID:lastModified:error:");
}

id objc_msgSend_updateKeybagSecret_forUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateKeybagSecret:forUUID:error:");
}

id objc_msgSend_updateL28HistoryWithCurrentBackupState_isSuccessful_quotaExceeded_osVersion_currentDay_isNewDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateL28HistoryWithCurrentBackupState:isSuccessful:quotaExceeded:osVersion:currentDay:isNewDay:");
}

id objc_msgSend_updateLocalBackupPassword_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLocalBackupPassword:error:");
}

id objc_msgSend_updateMegaBackupExpirationDate_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMegaBackupExpirationDate:account:");
}

id objc_msgSend_updateMegaBackupStatusForAccount_deviceBackupUUID_status_queue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMegaBackupStatusForAccount:deviceBackupUUID:status:queue:completion:");
}

id objc_msgSend_updatePassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePassword:");
}

id objc_msgSend_updatePrebuddyFollowUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrebuddyFollowUp:");
}

id objc_msgSend_updateProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateProgress:");
}

id objc_msgSend_updateProgressForCoordinatorWithBundleID_progress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateProgressForCoordinatorWithBundleID:progress:");
}

id objc_msgSend_updateScannedDomain_withSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateScannedDomain:withSize:");
}

id objc_msgSend_updateSnapshot_backupUDID_lastModified_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSnapshot:backupUDID:lastModified:error:");
}

id objc_msgSend_updateStashPath_forSignature_volumeType_isDecrypted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStashPath:forSignature:volumeType:isDecrypted:");
}

id objc_msgSend_updateTotalProgressWithPhase_transferInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTotalProgressWithPhase:transferInfo:");
}

id objc_msgSend_updateTotalProgressWithPhaseProgress_phase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTotalProgressWithPhaseProgress:phase:");
}

id objc_msgSend_updateValue_forServiceName_accountName_withAccessibility_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateValue:forServiceName:accountName:withAccessibility:error:");
}

id objc_msgSend_updateWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithBytes:length:");
}

id objc_msgSend_updateWithDuration_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithDuration:size:");
}

id objc_msgSend_updateWithFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithFile:");
}

id objc_msgSend_updatedEncryptionKeyForCurrentKey_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedEncryptionKeyForCurrentKey:withError:");
}

id objc_msgSend_updatedTotalProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedTotalProgress:");
}

id objc_msgSend_updatingProgress_forItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatingProgress:forItem:");
}

id objc_msgSend_updatingProgress_previousProgress_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatingProgress:previousProgress:size:");
}

id objc_msgSend_upgradeBlock(void *a1, const char *a2, ...)
{
  return _[a1 upgradeBlock];
}

id objc_msgSend_upgradeWithVersion_shouldVacuum_statements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeWithVersion:shouldVacuum:statements:");
}

id objc_msgSend_upgradeWithVersion_shouldVacuum_upgradeBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeWithVersion:shouldVacuum:upgradeBlock:");
}

id objc_msgSend_uploadBatch_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadBatch:options:completion:");
}

id objc_msgSend_uploadData_toPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadData:toPath:options:error:");
}

id objc_msgSend_uploadFileAtPath_toPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadFileAtPath:toPath:options:error:");
}

id objc_msgSend_uploadFileCount(void *a1, const char *a2, ...)
{
  return _[a1 uploadFileCount];
}

id objc_msgSend_uploadFilesAtPaths_options_results_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadFilesAtPaths:options:results:error:");
}

id objc_msgSend_uploadProgress(void *a1, const char *a2, ...)
{
  return _[a1 uploadProgress];
}

id objc_msgSend_uploadPropertyList_toPath_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadPropertyList:toPath:options:error:");
}

id objc_msgSend_uploadSize(void *a1, const char *a2, ...)
{
  return _[a1 uploadSize];
}

id objc_msgSend_uploadSizeExcludingHardlinksAndClones(void *a1, const char *a2, ...)
{
  return _[a1 uploadSizeExcludingHardlinksAndClones];
}

id objc_msgSend_uploadStartTime(void *a1, const char *a2, ...)
{
  return _[a1 uploadStartTime];
}

id objc_msgSend_uploadToPath_withDrive_keybag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadToPath:withDrive:keybag:error:");
}

id objc_msgSend_uploadedAssetCount(void *a1, const char *a2, ...)
{
  return _[a1 uploadedAssetCount];
}

id objc_msgSend_uploadedAssetSize(void *a1, const char *a2, ...)
{
  return _[a1 uploadedAssetSize];
}

id objc_msgSend_uploadedByteCount(void *a1, const char *a2, ...)
{
  return _[a1 uploadedByteCount];
}

id objc_msgSend_uploadedBytesInCurrentPeriod(void *a1, const char *a2, ...)
{
  return _[a1 uploadedBytesInCurrentPeriod];
}

id objc_msgSend_uploadedFileCount(void *a1, const char *a2, ...)
{
  return _[a1 uploadedFileCount];
}

id objc_msgSend_uploadedFileInPendingSnapshotWithDomainName_relativePath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadedFileInPendingSnapshotWithDomainName:relativePath:error:");
}

id objc_msgSend_uploadedFileListSize(void *a1, const char *a2, ...)
{
  return _[a1 uploadedFileListSize];
}

id objc_msgSend_uploadedSize(void *a1, const char *a2, ...)
{
  return _[a1 uploadedSize];
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _[a1 url];
}

id objc_msgSend_usageOfDirectoryAtPath_count_size_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usageOfDirectoryAtPath:count:size:options:error:");
}

id objc_msgSend_useABC(void *a1, const char *a2, ...)
{
  return _[a1 useABC];
}

id objc_msgSend_useBackgroundOperationsForBackup(void *a1, const char *a2, ...)
{
  return _[a1 useBackgroundOperationsForBackup];
}

id objc_msgSend_useBatchingWithDelay_changeCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useBatchingWithDelay:changeCount:");
}

id objc_msgSend_useFileLists(void *a1, const char *a2, ...)
{
  return _[a1 useFileLists];
}

id objc_msgSend_useMMCSEncryptionV2(void *a1, const char *a2, ...)
{
  return _[a1 useMMCSEncryptionV2];
}

id objc_msgSend_useMockChunkStore(void *a1, const char *a2, ...)
{
  return _[a1 useMockChunkStore];
}

id objc_msgSend_usePowerLog(void *a1, const char *a2, ...)
{
  return _[a1 usePowerLog];
}

id objc_msgSend_useRestoreOperationLog(void *a1, const char *a2, ...)
{
  return _[a1 useRestoreOperationLog];
}

id objc_msgSend_useSandbox(void *a1, const char *a2, ...)
{
  return _[a1 useSandbox];
}

id objc_msgSend_useSandboxCKContainer(void *a1, const char *a2, ...)
{
  return _[a1 useSandboxCKContainer];
}

id objc_msgSend_useSerialQueue(void *a1, const char *a2, ...)
{
  return _[a1 useSerialQueue];
}

id objc_msgSend_usedAPFSSnapshots(void *a1, const char *a2, ...)
{
  return _[a1 usedAPFSSnapshots];
}

id objc_msgSend_user(void *a1, const char *a2, ...)
{
  return _[a1 user];
}

id objc_msgSend_userAppWithBundleID_placeholder_persona_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userAppWithBundleID:placeholder:persona:error:");
}

id objc_msgSend_userAppsForPersona_dataSeparatedBundleIDs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userAppsForPersona:dataSeparatedBundleIDs:error:");
}

id objc_msgSend_userDataDisposition(void *a1, const char *a2, ...)
{
  return _[a1 userDataDisposition];
}

id objc_msgSend_userDataPromiseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDataPromiseWithError:");
}

id objc_msgSend_userDataRestoreShouldBegin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDataRestoreShouldBegin:");
}

id objc_msgSend_userDataVolume(void *a1, const char *a2, ...)
{
  return _[a1 userDataVolume];
}

id objc_msgSend_userID(void *a1, const char *a2, ...)
{
  return _[a1 userID];
}

id objc_msgSend_userIncompleteRestoreDirectory(void *a1, const char *a2, ...)
{
  return _[a1 userIncompleteRestoreDirectory];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userLanguageDidChange(void *a1, const char *a2, ...)
{
  return _[a1 userLanguageDidChange];
}

id objc_msgSend_userPersonaUniqueString(void *a1, const char *a2, ...)
{
  return _[a1 userPersonaUniqueString];
}

id objc_msgSend_userRestoreDirectory(void *a1, const char *a2, ...)
{
  return _[a1 userRestoreDirectory];
}

id objc_msgSend_userTemporaryDirectoryForPersona_identifiedBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userTemporaryDirectoryForPersona:identifiedBy:");
}

id objc_msgSend_userVersion(void *a1, const char *a2, ...)
{
  return _[a1 userVersion];
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return _[a1 username];
}

id objc_msgSend_utf8ValueSafe(void *a1, const char *a2, ...)
{
  return _[a1 utf8ValueSafe];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _[a1 uuid];
}

id objc_msgSend_uuidAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uuidAtIndex:");
}

id objc_msgSend_vacuum(void *a1, const char *a2, ...)
{
  return _[a1 vacuum];
}

id objc_msgSend_validate(void *a1, const char *a2, ...)
{
  return _[a1 validate];
}

id objc_msgSend_validateCache(void *a1, const char *a2, ...)
{
  return _[a1 validateCache];
}

id objc_msgSend_validateCacheWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateCacheWithCompletion:");
}

id objc_msgSend_validateEncryptionKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateEncryptionKey:error:");
}

id objc_msgSend_validateEncryptionKeyWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateEncryptionKeyWithError:");
}

id objc_msgSend_validateFileEncodingWithDefaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateFileEncodingWithDefaultValue:");
}

id objc_msgSend_validateRestoreDomain_relativePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateRestoreDomain:relativePath:");
}

id objc_msgSend_validateSignatureAtDestination_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateSignatureAtDestination:withError:");
}

id objc_msgSend_validateSignatureOnRestoreWithDefaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateSignatureOnRestoreWithDefaultValue:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueData(void *a1, const char *a2, ...)
{
  return _[a1 valueData];
}

id objc_msgSend_valueForDomain_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForDomain:key:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:account:");
}

id objc_msgSend_valueForKey_forFD_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:forFD:error:");
}

id objc_msgSend_valueForKey_forPathFSR_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:forPathFSR:error:");
}

id objc_msgSend_valueForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForName:");
}

id objc_msgSend_valueOfColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueOfColumn:");
}

id objc_msgSend_verificationFailureStrings(void *a1, const char *a2, ...)
{
  return _[a1 verificationFailureStrings];
}

id objc_msgSend_verifierWasRun(void *a1, const char *a2, ...)
{
  return _[a1 verifierWasRun];
}

id objc_msgSend_verifyAppleAccountCredentialsWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyAppleAccountCredentialsWithContext:");
}

id objc_msgSend_verifyBackupUDID_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyBackupUDID:service:");
}

id objc_msgSend_verifyContainerizedDataAfterBackgroundRestore_domainPlan_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyContainerizedDataAfterBackgroundRestore:domainPlan:error:");
}

id objc_msgSend_verifyCredentialsForAccount_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyCredentialsForAccount:withHandler:");
}

id objc_msgSend_verifyEqualToStmt_exceptColumnNumbers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyEqualToStmt:exceptColumnNumbers:");
}

id objc_msgSend_verifyIntermediateDirectoryAfterForegroundRestoreWithDomainManager_plan_overridePath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyIntermediateDirectoryAfterForegroundRestoreWithDomainManager:plan:overridePath:error:");
}

id objc_msgSend_verifyProgressModel(void *a1, const char *a2, ...)
{
  return _[a1 verifyProgressModel];
}

id objc_msgSend_verifySnapshotAfterCommit(void *a1, const char *a2, ...)
{
  return _[a1 verifySnapshotAfterCommit];
}

id objc_msgSend_verifySnapshotAfterCommitWithOperationTracker_scanMode_enginePolicy_snapshotTracker_domainManager_deviceRecordID_hmacKey_backupAttemptSummary_duration_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifySnapshotAfterCommitWithOperationTracker:scanMode:enginePolicy:snapshotTracker:domainManager:deviceRecordID:hmacKey:backupAttemptSummary:duration:error:");
}

id objc_msgSend_verifyWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyWithError:");
}

id objc_msgSend_verifyWithFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyWithFile:error:");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_volumeIdentifierForCurrentlyScannedDomain(void *a1, const char *a2, ...)
{
  return _[a1 volumeIdentifierForCurrentlyScannedDomain];
}

id objc_msgSend_volumeIdentifierForVolumeUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "volumeIdentifierForVolumeUUID:");
}

id objc_msgSend_volumeMap(void *a1, const char *a2, ...)
{
  return _[a1 volumeMap];
}

id objc_msgSend_volumeMountPoint(void *a1, const char *a2, ...)
{
  return _[a1 volumeMountPoint];
}

id objc_msgSend_volumeMountPointForFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "volumeMountPointForFile:error:");
}

id objc_msgSend_volumePath(void *a1, const char *a2, ...)
{
  return _[a1 volumePath];
}

id objc_msgSend_volumeSupportsLocalSnapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "volumeSupportsLocalSnapshots:");
}

id objc_msgSend_volumeType(void *a1, const char *a2, ...)
{
  return _[a1 volumeType];
}

id objc_msgSend_volumeUUIDToUpdateAfterTranscription(void *a1, const char *a2, ...)
{
  return _[a1 volumeUUIDToUpdateAfterTranscription];
}

id objc_msgSend_volumeUUIDWithVolumeMountPoint_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "volumeUUIDWithVolumeMountPoint:error:");
}

id objc_msgSend_volumeUUIDsByMountPoint(void *a1, const char *a2, ...)
{
  return _[a1 volumeUUIDsByMountPoint];
}

id objc_msgSend_volumesToBackUp(void *a1, const char *a2, ...)
{
  return _[a1 volumesToBackUp];
}

id objc_msgSend_wait(void *a1, const char *a2, ...)
{
  return _[a1 wait];
}

id objc_msgSend_waitForPrefetchCompletion(void *a1, const char *a2, ...)
{
  return _[a1 waitForPrefetchCompletion];
}

id objc_msgSend_waitWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitWithTimeout:");
}

id objc_msgSend_warnUserOfDelayedRestoreWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "warnUserOfDelayedRestoreWithAccount:");
}

id objc_msgSend_wasCancelled(void *a1, const char *a2, ...)
{
  return _[a1 wasCancelled];
}

id objc_msgSend_wasDeviceUnlockedSinceBoot(void *a1, const char *a2, ...)
{
  return _[a1 wasDeviceUnlockedSinceBoot];
}

id objc_msgSend_wasPasscodeSet(void *a1, const char *a2, ...)
{
  return _[a1 wasPasscodeSet];
}

id objc_msgSend_wasSkipped(void *a1, const char *a2, ...)
{
  return _[a1 wasSkipped];
}

id objc_msgSend_watchdog(void *a1, const char *a2, ...)
{
  return _[a1 watchdog];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceCharacterSet];
}

id objc_msgSend_wifiQuality(void *a1, const char *a2, ...)
{
  return _[a1 wifiQuality];
}

id objc_msgSend_wifiQualityGroup(void *a1, const char *a2, ...)
{
  return _[a1 wifiQualityGroup];
}

id objc_msgSend_wifiQualityMeasurementTimer(void *a1, const char *a2, ...)
{
  return _[a1 wifiQualityMeasurementTimer];
}

id objc_msgSend_willScanDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willScanDomains:");
}

id objc_msgSend_willTransferItemWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willTransferItemWithSize:");
}

id objc_msgSend_willTransferItemsWithSize_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willTransferItemsWithSize:count:");
}

id objc_msgSend_wouldRetry(void *a1, const char *a2, ...)
{
  return _[a1 wouldRetry];
}

id objc_msgSend_write_maxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "write:maxLength:");
}

id objc_msgSend_writeMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeMessage:");
}

id objc_msgSend_writeSkippedFilesToPlistWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeSkippedFilesToPlistWithError:");
}

id objc_msgSend_writeTo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeTo:error:");
}

id objc_msgSend_writeToDrive_path_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToDrive:path:error:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:error:");
}

id objc_msgSend_writeToFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:options:error:");
}

id objc_msgSend_writeToURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:error:");
}

id objc_msgSend_writeWithBytes_length_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeWithBytes:length:error:");
}

id objc_msgSend_xattrOptionsForFD_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xattrOptionsForFD:");
}

id objc_msgSend_xattrOptionsForPathFSR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xattrOptionsForPathFSR:");
}

id objc_msgSend_xattrs(void *a1, const char *a2, ...)
{
  return _[a1 xattrs];
}

id objc_msgSend_xattrsFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xattrsFromIndex:");
}

id objc_msgSend_xpcActivity(void *a1, const char *a2, ...)
{
  return _[a1 xpcActivity];
}

id objc_msgSend_xpcActivityForBackupActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcActivityForBackupActivity:");
}

id objc_msgSend_xpcConnection(void *a1, const char *a2, ...)
{
  return _[a1 xpcConnection];
}

id objc_msgSend_zeroByteFiles(void *a1, const char *a2, ...)
{
  return _[a1 zeroByteFiles];
}

id objc_msgSend_zoneID(void *a1, const char *a2, ...)
{
  return _[a1 zoneID];
}

id objc_msgSend_zoneIDOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneIDOfType:");
}