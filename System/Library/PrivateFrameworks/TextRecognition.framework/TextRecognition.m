uint64_t deviceHasAppleNeuralEngine()
{
  if (qword_1EB58CA78 != -1) {
    dispatch_once(&qword_1EB58CA78, &__block_literal_global_282);
  }
  return _MergedGlobals_15;
}

uint64_t __deviceHasAppleNeuralEngine_block_invoke()
{
  _MergedGlobals_15 = espresso_create_context() != 0;
  return espresso_context_destroy();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

CRGeometryUtilities __swiftcall CRGeometryUtilities.init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (CRGeometryUtilities)objc_msgSend(v0, sel_init);
}

id CRGeometryUtilities.init()()
{
  v1.super_class = (Class)CRGeometryUtilities;
  return objc_msgSendSuper2(&v1, sel_init);
}

BOOL sub_1DD7365C0(double *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v9 = a4 - a2;
  double v10 = a5 - a3;
  double v11 = (a4 - a2) * (a9 - a7) - (a5 - a3) * (a8 - a6);
  if (v11 == 0.0) {
    return 0;
  }
  double v13 = a3 * a4 - a2 * a5;
  double v14 = a7 * a8 - a6 * a9;
  double v15 = v13 * (a8 - a6) - v9 * v14;
  double v16 = (v13 * (a9 - a7) - v10 * v14) / v11;
  *a1 = v15 / v11;
  a1[1] = v16;
  return (v15 / v11 - a6) * (v15 / v11 - a8) + (v16 - a7) * (v16 - a9) <= 0.0;
}

unint64_t type metadata accessor for CRGeometryUtilities()
{
  unint64_t result = qword_1EAB68880;
  if (!qword_1EAB68880)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAB68880);
  }
  return result;
}

uint64_t sub_1DD736690(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 32;
  while (1)
  {
    uint64_t v10 = *(void *)(v7 + 8 * v6);
    swift_bridgeObjectRetain();
    char v8 = a1(&v10);
    swift_bridgeObjectRelease();
    if (v3 || (v8 & 1) != 0) {
      break;
    }
    if (v4 == ++v6) {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_1DD736754(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v6 = a3 + 24;
    do
    {
      uint64_t v9 = *(void *)(v6 + 8 * v4);
      swift_bridgeObjectRetain();
      char v7 = a1(&v9);
      swift_bridgeObjectRelease();
      if (v3) {
        break;
      }
      --v4;
    }
    while (!(v7 & 1 | (v4 == 0)));
  }
  return v4;
}

uint64_t sub_1DD736804(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *(void **)v1;
  int64_t v5 = *(void *)(*(void *)v1 + 16);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t v4 = sub_1DD736AB8(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    int64_t v9 = v4[3] >> 1;
  }
  uint64_t v11 = v4[2];
  uint64_t v12 = v9 - v11;
  unint64_t result = sub_1DD736E6C(&v30, &v4[v11 + 4], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, result);
    uint64_t v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_32;
    }
    v4[2] = v15;
  }
  if (result != v12)
  {
LABEL_13:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v4;
    return result;
  }
LABEL_16:
  if (!v31) {
    goto LABEL_13;
  }
  unint64_t v16 = v31 - 1;
  if (!__OFSUB__(v31, 1))
  {
    int64_t v2 = v4[2];
    uint64_t v17 = v30;
    v18 = sub_1DD736DFC((uint64_t (*)())v29, v31 - 1, v30);
    uint64_t v20 = *v19;
    swift_bridgeObjectRetain();
    ((void (*)(unsigned char *, void))v18)(v29, 0);
    while (1)
    {
LABEL_20:
      unint64_t v21 = v4[3];
      int64_t v22 = v21 >> 1;
      int64_t v23 = v2 + 1;
      if ((uint64_t)(v21 >> 1) < v2 + 1)
      {
        v27 = sub_1DD736AB8((void *)(v21 > 1), v2 + 1, 1, v4);
        int64_t v23 = v2 + 1;
        uint64_t v4 = v27;
        int64_t v22 = v27[3] >> 1;
        if (v2 < v22)
        {
LABEL_22:
          v4[v2 + 4] = v20;
          if (v16)
          {
            int64_t v28 = v22;
            int64_t v24 = v22 - 1;
            while (1)
            {
              BOOL v14 = __OFSUB__(v16--, 1);
              if (v14) {
                break;
              }
              v25 = sub_1DD736DFC((uint64_t (*)())v29, v16, v17);
              uint64_t v20 = *v26;
              swift_bridgeObjectRetain();
              ((void (*)(unsigned char *, void))v25)(v29, 0);
              if (v24 == v2)
              {
                int64_t v2 = v28;
                v4[2] = v28;
                goto LABEL_20;
              }
              v4[v2++ + 5] = v20;
              if (!v16) {
                goto LABEL_33;
              }
            }
LABEL_32:
            __break(1u);
LABEL_33:
            int64_t v23 = v2 + 1;
          }
          v4[2] = v23;
          goto LABEL_13;
        }
      }
      else if (v2 < v22)
      {
        goto LABEL_22;
      }
      v4[2] = v2;
    }
  }
  __break(1u);
  return result;
}

void *sub_1DD736AB8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58420);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58418);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1DD736BDC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58428);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1DD736CD8(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_1DD736CF8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DD736CF8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58408);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t (*sub_1DD736DFC(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a3 + 16) > a2)
  {
    *(void *)unint64_t result = *(void *)(a3 + 8 * a2 + 32);
    swift_bridgeObjectRetain();
    return sub_1DD736E64;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DD736E64()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DD736E6C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  if (!a2)
  {
    uint64_t v8 = *(void *)(a4 + 16);
    uint64_t v6 = 0;
    goto LABEL_17;
  }
  uint64_t v7 = a3;
  if (!a3)
  {
    uint64_t v8 = *(void *)(a4 + 16);
    uint64_t v6 = 0;
    goto LABEL_17;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (!v6)
  {
LABEL_20:
    uint64_t v8 = 0;
    goto LABEL_17;
  }
  uint64_t v8 = v6 - 1;
  *a2 = *(void *)(a4 + 32 + 8 * (v6 - 1));
  if (a3 == 1)
  {
LABEL_13:
    uint64_t v6 = v7;
    goto LABEL_14;
  }
  if (v6 != 1)
  {
    uint64_t v8 = v6 - 2;
    a2[1] = *(void *)(a4 + 32 + 8 * (v6 - 2));
    uint64_t v9 = a3 - 2;
    if (a3 != 2)
    {
      uint64_t v10 = 0;
      int64_t v11 = a2 + 2;
      uint64_t v12 = a4 + 8 * v6 + 8;
      while (v8 + v10)
      {
        swift_bridgeObjectRetain();
        *v11++ = *(void *)(v12 + 8 * v10--);
        if (!(v9 + v10))
        {
          v8 += v10;
          goto LABEL_12;
        }
      }
      uint64_t v8 = 0;
      uint64_t v7 = v6;
    }
LABEL_12:
    swift_bridgeObjectRetain();
    goto LABEL_13;
  }
LABEL_14:
  swift_bridgeObjectRetain();
LABEL_17:
  *a1 = a4;
  a1[1] = v8;
  return v6;
}

void sub_1DD736F88(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58418);
        swift_arrayInitWithCopy();
        return;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58420);
      uint64_t v7 = (void *)swift_allocObject();
      int64_t v8 = _swift_stdlib_malloc_size(v7);
      uint64_t v9 = v8 - 32;
      if (v8 < 32) {
        uint64_t v9 = v8 - 25;
      }
      v7[2] = v5;
      v7[3] = 2 * (v9 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_1DD737068(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v7 = *(void **)v4;
  int64_t v8 = *(void *)(*(void *)v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v7[3] >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v12 = v8 + v6;
      }
      else {
        int64_t v12 = v8;
      }
      isUniquelyReferenced_nonNull_native = sub_1DD736AB8(isUniquelyReferenced_nonNull_native, v12, 1, v7);
      uint64_t v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_16;
  }
LABEL_12:
  if ((v7[3] >> 1) - v7[2] < v6) {
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58418);
  swift_arrayInitWithCopy();
  if (v6 <= 0)
  {
LABEL_16:
    *(void *)uint64_t v4 = v7;
    return;
  }
  uint64_t v13 = v7[2];
  BOOL v14 = __OFADD__(v13, v6);
  uint64_t v15 = v13 + v6;
  if (!v14)
  {
    v7[2] = v15;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_1DD737178(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1DD8A7400();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  int64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  int64_t v11 = (char *)&v74 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v74 - v12;
  uint64_t v83 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v84 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v14) {
    goto LABEL_9;
  }
  sub_1DD8A73D0();
  swift_bridgeObjectRelease();
  sub_1DD8A73D0();
  sub_1DD8A73E0();
  uint64_t v87 = a1;
  unint64_t v88 = a2;
  sub_1DD737CAC();
  uint64_t v15 = sub_1DD8A7620();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v11, v4);
    v19(v13, v4);
LABEL_9:
    swift_bridgeObjectRetain();
    return a1;
  }
  v75 = v8;
  uint64_t v76 = v5;
  uint64_t v77 = v4;
  uint64_t v81 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v82 = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  uint64_t v21 = 0;
  char v22 = 1;
  long long v78 = xmmword_1DD8CDA90;
  v79 = (void *)MEMORY[0x1E4FBC860];
LABEL_12:
  v80 = (char *)MEMORY[0x1E4FBC860];
  while (1)
  {
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        int v23 = sub_1DD8A7660();
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          uint64_t v87 = a1;
          unint64_t v88 = v82;
        }
        else if ((a1 & 0x1000000000000000) == 0)
        {
          sub_1DD8A7680();
        }
        int v23 = sub_1DD8A7690();
      }
      int v25 = v23;
      v21 += v24;
      char v26 = sub_1DD8A73F0();
      if (v26)
      {
        if (*((void *)v80 + 2))
        {
          swift_bridgeObjectRetain();
          uint64_t v30 = v79;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v30 = sub_1DD736AB8(0, v30[2] + 1, 1, v30);
          }
          unint64_t v32 = v30[2];
          unint64_t v31 = v30[3];
          v33 = v30;
          if (v32 >= v31 >> 1) {
            v33 = sub_1DD736AB8((void *)(v31 > 1), v32 + 1, 1, v30);
          }
          v33[2] = v32 + 1;
          v34 = &v33[v32];
          v35 = v33;
          v34[4] = v80;
        }
        else
        {
          v35 = v79;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58428);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = v78;
        *(_DWORD *)(v36 + 32) = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v35 = sub_1DD736AB8(0, v35[2] + 1, 1, v35);
        }
        v37 = v35;
        unint64_t v38 = v35[2];
        v79 = v37;
        unint64_t v39 = v37[3];
        if (v38 >= v39 >> 1) {
          v79 = sub_1DD736AB8((void *)(v39 > 1), v38 + 1, 1, v79);
        }
        v40 = v79;
        v79[2] = v38 + 1;
        v40[v38 + 4] = v36;
        swift_bridgeObjectRelease();
        if (v21 >= v14) {
          goto LABEL_79;
        }
LABEL_44:
        char v22 = v26 ^ 1;
        goto LABEL_12;
      }
      if (sub_1DD8A73F0()) {
        break;
      }
      if (v21 >= v14) {
        goto LABEL_51;
      }
    }
    if ((v22 & 1) == 0 && *((void *)v80 + 2)) {
      break;
    }
    v27 = v80;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v27 = sub_1DD736BDC(0, *((void *)v27 + 2) + 1, 1, v27);
    }
    unint64_t v29 = *((void *)v27 + 2);
    unint64_t v28 = *((void *)v27 + 3);
    if (v29 >= v28 >> 1) {
      v27 = sub_1DD736BDC((char *)(v28 > 1), v29 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v29 + 1;
    v80 = v27;
    *(_DWORD *)&v27[4 * v29 + 32] = v25;
    char v22 = 1;
    if (v21 >= v14)
    {
LABEL_51:
      v44 = v80;
      goto LABEL_52;
    }
  }
  swift_bridgeObjectRetain();
  v41 = v79;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    v41 = sub_1DD736AB8(0, v41[2] + 1, 1, v41);
  }
  unint64_t v43 = v41[2];
  unint64_t v42 = v41[3];
  if (v43 >= v42 >> 1) {
    v41 = sub_1DD736AB8((void *)(v42 > 1), v43 + 1, 1, v41);
  }
  v41[2] = v43 + 1;
  v41[v43 + 4] = v80;
  swift_bridgeObjectRelease();
  v79 = v41;
  if (v21 < v14) {
    goto LABEL_44;
  }
LABEL_79:
  v44 = (char *)MEMORY[0x1E4FBC860];
LABEL_52:
  uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
  uint64_t v46 = *((void *)v44 + 2);
  v80 = v44;
  if (v46)
  {
    swift_bridgeObjectRetain();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1DD736AB8(0, v79[2] + 1, 1, v79);
      v79 = (void *)isUniquelyReferenced_nonNull_native;
    }
    unint64_t v48 = v79[2];
    unint64_t v47 = v79[3];
    if (v48 >= v47 >> 1)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1DD736AB8((void *)(v47 > 1), v48 + 1, 1, v79);
      v79 = (void *)isUniquelyReferenced_nonNull_native;
    }
    v50 = v79;
    v49 = v80;
    v79[2] = v48 + 1;
    v50[v48 + 4] = v49;
  }
  else
  {
    v50 = v79;
  }
  MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
  *(&v74 - 2) = (uint64_t)v13;
  swift_bridgeObjectRetain();
  uint64_t v51 = sub_1DD736690((uint64_t (*)(uint64_t *))sub_1DD737D48, (uint64_t)(&v74 - 4), (uint64_t)v50);
  char v53 = v52;
  uint64_t v54 = swift_bridgeObjectRelease();
  if (v53) {
    uint64_t v55 = 0;
  }
  else {
    uint64_t v55 = v51;
  }
  MEMORY[0x1F4188790](v54);
  *(&v74 - 2) = (uint64_t)v13;
  swift_bridgeObjectRetain();
  uint64_t v56 = sub_1DD736754((uint64_t (*)(uint64_t *))sub_1DD737D48, (uint64_t)(&v74 - 4), (uint64_t)v50);
  uint64_t v58 = v57;
  swift_bridgeObjectRelease();
  v79 = v50;
  if (v58) {
    uint64_t v56 = v50[2] - 1;
  }
  if (v55 == v56)
  {
    swift_bridgeObjectRelease();
    v59 = *(void (**)(char *, uint64_t))(v76 + 8);
    uint64_t v60 = v77;
    v59(v75, v77);
    v59(v11, v60);
    v59(v13, v60);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v86 = MEMORY[0x1E4FBC860];
  if (v55 < 0)
  {
    __break(1u);
    goto LABEL_81;
  }
  v61 = v79;
  if (v79[2] < (unint64_t)v55)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v58 = (uint64_t)(v79 + 4);
  uint64_t v62 = swift_bridgeObjectRetain();
  sub_1DD737068(v62, (uint64_t)(v61 + 4), 0, (2 * v55) | 1);
  swift_bridgeObjectRelease();
  if (v56 < v55)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (__OFADD__(v56++, 1))
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (v79[2] < v56)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (v56 < 0)
  {
LABEL_85:
    __break(1u);
LABEL_86:
    v66 = v79;
    swift_bridgeObjectRelease();
    sub_1DD736F88((uint64_t)v66, v58, v55, (2 * v56) | 1);
    uint64_t v67 = v73;
    goto LABEL_77;
  }
  sub_1DD8A7780();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v64 = swift_dynamicCastClass();
  if (!v64)
  {
    swift_bridgeObjectRelease();
    uint64_t v64 = MEMORY[0x1E4FBC860];
  }
  uint64_t v65 = *(void *)(v64 + 16);
  swift_release();
  if (v65 != v56 - v55) {
    goto LABEL_86;
  }
  v66 = v79;
  uint64_t v67 = swift_dynamicCastClass();
  if (!v67)
  {
    swift_bridgeObjectRelease();
    uint64_t v67 = MEMORY[0x1E4FBC860];
  }
LABEL_77:
  swift_bridgeObjectRelease();
  uint64_t result = sub_1DD736804(v67);
  unint64_t v68 = v66[2];
  if (v68 < v56)
  {
    __break(1u);
  }
  else
  {
    unint64_t v69 = (2 * v68) | 1;
    uint64_t v70 = swift_bridgeObjectRetain();
    sub_1DD737068(v70, v58, v56, v69);
    swift_bridgeObjectRelease();
    uint64_t v85 = v86;
    uint64_t v87 = 0;
    unint64_t v88 = 0xE000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58430);
    sub_1DD737DA8(&qword_1EAB58438, &qword_1EAB58430);
    sub_1DD8A7490();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v87;
    v71 = *(void (**)(char *, uint64_t))(v76 + 8);
    uint64_t v72 = v77;
    v71(v75, v77);
    v71(v11, v72);
    v71(v13, v72);
    swift_bridgeObjectRelease();
    return a1;
  }
  return result;
}

uint64_t sub_1DD737AF8()
{
  sub_1DD737CAC();
  uint64_t v0 = sub_1DD8A7610();
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    sub_1DD736CD8(0, v1, 0);
    int64_t v2 = (unint64_t *)(v0 + 40);
    do
    {
      uint64_t v3 = *(v2 - 1);
      unint64_t v4 = *v2;
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_1DD737178(v3, v4);
      uint64_t v7 = v6;
      swift_bridgeObjectRelease();
      unint64_t v9 = *(void *)(v13 + 16);
      unint64_t v8 = *(void *)(v13 + 24);
      if (v9 >= v8 >> 1) {
        sub_1DD736CD8((char *)(v8 > 1), v9 + 1, 1);
      }
      v2 += 2;
      *(void *)(v13 + 16) = v9 + 1;
      uint64_t v10 = v13 + 16 * v9;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 40) = v7;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB583F8);
  sub_1DD737DA8(&qword_1EAB58400, &qword_1EAB583F8);
  uint64_t v11 = sub_1DD8A7450();
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t sub_1DD737CAC()
{
  unint64_t result = qword_1EB58C828;
  if (!qword_1EB58C828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB58C828);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1DD737D48(uint64_t a1)
{
  return sub_1DD737D64(a1) & 1;
}

uint64_t sub_1DD737D64(uint64_t result)
{
  if (*(void *)(*(void *)result + 16)) {
    return sub_1DD8A73F0() & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DD737DA8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1DD737E00()
{
  objc_allocWithZone((Class)CRMultiLocaleRecognizerConfiguration);
  int64_t v2 = v0;
  swift_bridgeObjectRetain();
  id v3 = sub_1DD738630();
  if (v1)
  {
    swift_bridgeObjectRelease();

    type metadata accessor for CRSingleLocaleTextRecognizer(v7);
    swift_deallocPartialClassInstance();
  }
  else
  {
    unint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_languages);
    id v6 = objc_msgSend(v5, sel_firstObject);

    if (v6)
    {
      sub_1DD73872C(0, &qword_1EAB58410);
      sub_1DD8A7640();
      swift_unknownObjectRelease();
      sub_1DD738768(&v15, &v16);
      swift_dynamicCast();
      swift_bridgeObjectRetain();
      *(void *)&v2[OBJC_IVAR___CRSingleLocaleTextRecognizer_neuralRecognizer] = sub_1DD738048();

      unint64_t v8 = (void *)sub_1DD8A7430();
      swift_bridgeObjectRelease();
      v14.receiver = v2;
      v14.super_class = (Class)CRSingleLocaleTextRecognizer;
      id v9 = objc_msgSendSuper2(&v14, sel_initWithConfigurationOptions_, v8);

      id v10 = v9;
      objc_msgSend(v10, sel_setConfiguration_, v4);
      id v11 = objc_allocWithZone((Class)CRNonSplittingTextFeatureSplitterV3);
      id v12 = v10;
      id v13 = objc_msgSend(v11, sel_initWithConfiguration_, v4);
      objc_msgSend(v12, sel_setTextFeatureSplitter_, v13);
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_1DD738048()
{
  v6[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)sub_1DD8A7470();
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)sub_1DD8A7430();
  swift_bridgeObjectRelease();
  v6[0] = 0;
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_recognizerForLocale_imageReaderOptions_error_, v0, v1, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    sub_1DD8A7420();

    swift_willThrow();
  }
  return v2;
}

void __swiftcall CRSingleLocaleTextRecognizer.recognizer(forIdentifier:)(CRNeuralTextRecognizer *__return_ptr retstr, Swift::String forIdentifier)
{
  id v3 = objc_msgSend(v2, sel_neuralRecognizer);
  id v4 = v3;
}

id CRSingleLocaleTextRecognizer.inferenceStats.getter()
{
  return sub_1DD73831C((SEL *)&selRef_inferenceStats);
}

id sub_1DD738298(void *a1, uint64_t a2, SEL *a3)
{
  id v4 = a1;
  id v5 = objc_msgSend(v4, sel_neuralRecognizer);
  id v6 = [v5 *a3];

  return v6;
}

id CRSingleLocaleTextRecognizer.decodingStats.getter()
{
  return sub_1DD73831C((SEL *)&selRef_decodingStats);
}

id sub_1DD73831C(SEL *a1)
{
  id v3 = objc_msgSend(v1, sel_neuralRecognizer);
  id v4 = [v3 *a1];

  return v4;
}

uint64_t CRSingleLocaleTextRecognizer.identifier(forTextRegion:)()
{
  return 0;
}

Swift::Void __swiftcall CRSingleLocaleTextRecognizer.cancel()()
{
  v2.super_class = (Class)CRSingleLocaleTextRecognizer;
  objc_msgSendSuper2(&v2, sel_cancel);
  id v1 = objc_msgSend(v0, sel_neuralRecognizer);
  objc_msgSend(v1, sel_cancel);
}

void __swiftcall CRSingleLocaleTextRecognizer.init(configurationOptions:)(CRSingleLocaleTextRecognizer *__return_ptr retstr, Swift::OpaquePointer configurationOptions)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v3 = (void *)sub_1DD8A7430();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithConfigurationOptions_, v3);
}

void CRSingleLocaleTextRecognizer.init(configurationOptions:)()
{
}

void __swiftcall CRSingleLocaleTextRecognizer.init()(CRSingleLocaleTextRecognizer *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  objc_msgSend(v1, sel_init);
}

void CRSingleLocaleTextRecognizer.init()()
{
}

id sub_1DD738630()
{
  v6[1] = *(id *)MEMORY[0x1E4F143B8];
  id v1 = (void *)sub_1DD8A7430();
  swift_bridgeObjectRelease();
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initWithImageReaderOptions_error_, v1, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    sub_1DD8A7420();

    swift_willThrow();
  }
  return v2;
}

uint64_t type metadata accessor for CRSingleLocaleTextRecognizer(uint64_t a1)
{
  return sub_1DD73872C(a1, &qword_1EAB68888);
}

uint64_t sub_1DD73872C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

_OWORD *sub_1DD738768(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1DD738778(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  unint64_t v47 = a6;
  uint64_t v46 = a5;
  uint64_t v50 = a3;
  unint64_t v51 = a4;
  *(void *)&long long v55 = 32;
  *((void *)&v55 + 1) = 0xE100000000000000;
  uint64_t v54 = &v55;
  swift_bridgeObjectRetain();
  uint64_t v48 = a1;
  unint64_t v49 = a2;
  unint64_t v8 = sub_1DD73940C(0x7FFFFFFFFFFFFFFFLL, 1, sub_1DD739CC0, (uint64_t)v53, a1, a2);
  uint64_t v9 = *((void *)v8 + 2);
  if (v9)
  {
    id v10 = v8 + 56;
    uint64_t v11 = MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v16 = *(v10 - 3);
      if ((*(v10 - 2) ^ v16) >= 0x4000)
      {
        long long v52 = *((_OWORD *)v10 - 1);
        uint64_t v17 = *v10;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v55 = v11;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1DD739988(0, *(void *)(v11 + 16) + 1, 1);
          uint64_t v11 = v55;
        }
        unint64_t v13 = *(void *)(v11 + 16);
        unint64_t v12 = *(void *)(v11 + 24);
        long long v14 = v52;
        if (v13 >= v12 >> 1)
        {
          sub_1DD739988((char *)(v12 > 1), v13 + 1, 1);
          long long v14 = v52;
          uint64_t v11 = v55;
        }
        *(void *)(v11 + 16) = v13 + 1;
        uint64_t v15 = v11 + 32 * v13;
        *(void *)(v15 + 32) = v16;
        *(_OWORD *)(v15 + 40) = v14;
        *(void *)(v15 + 56) = v17;
      }
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
  }
  uint64_t v19 = swift_bridgeObjectRelease();
  *(void *)&long long v55 = 32;
  *((void *)&v55 + 1) = 0xE100000000000000;
  MEMORY[0x1F4188790](v19);
  v44 = &v55;
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1DD73940C(0x7FFFFFFFFFFFFFFFLL, 1, sub_1DD739CC0, (uint64_t)&v43, v50, v51);
  unint64_t v51 = 0;
  uint64_t v21 = *((void *)v20 + 2);
  if (v21)
  {
    char v22 = v20 + 56;
    uint64_t v23 = MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v28 = *(v22 - 3);
      if ((*(v22 - 2) ^ v28) >= 0x4000)
      {
        long long v52 = *((_OWORD *)v22 - 1);
        uint64_t v29 = *v22;
        swift_bridgeObjectRetain();
        char v30 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v55 = v23;
        if ((v30 & 1) == 0)
        {
          sub_1DD739988(0, *(void *)(v23 + 16) + 1, 1);
          uint64_t v23 = v55;
        }
        unint64_t v25 = *(void *)(v23 + 16);
        unint64_t v24 = *(void *)(v23 + 24);
        long long v26 = v52;
        if (v25 >= v24 >> 1)
        {
          sub_1DD739988((char *)(v24 > 1), v25 + 1, 1);
          long long v26 = v52;
          uint64_t v23 = v55;
        }
        *(void *)(v23 + 16) = v25 + 1;
        uint64_t v27 = v23 + 32 * v25;
        *(void *)(v27 + 32) = v28;
        *(_OWORD *)(v27 + 40) = v26;
        *(void *)(v27 + 56) = v29;
      }
      v22 += 4;
      --v21;
    }
    while (v21);
  }
  else
  {
    uint64_t v23 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v11 + 16) == *(void *)(v23 + 16))
  {
    unint64_t v31 = v47;
    if (v47
      && (swift_bridgeObjectRetain(),
          v32._countAndFlagsBits = v46,
          v32._object = v31,
          CRLocale.init(rawValue:)(v32),
          v55 != 30)
      && (objc_msgSend(self, sel_defaultRevisionNumber), (v33 = sub_1DD73A8DC()) != 0))
    {
      v34 = v33;
      if (v33[2] && (unint64_t v35 = sub_1DD73982C(0xD000000000000011, 0x80000001DD8B39F0), (v36 & 1) != 0))
      {
        sub_1DD73A314(v34[7] + 32 * v35, (uint64_t)&v55);
      }
      else
      {
        long long v55 = 0u;
        long long v56 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v56 + 1))
      {
        uint64_t v38 = swift_dynamicCast();
        goto LABEL_31;
      }
    }
    else
    {
      long long v55 = 0u;
      long long v56 = 0u;
    }
    uint64_t v38 = sub_1DD739D34((uint64_t)&v55);
LABEL_31:
    MEMORY[0x1F4188790](v38);
    LOBYTE(v44) = v39;
    uint64_t v45 = v40;
    uint64_t v41 = sub_1DD739F84(v11, v23, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1DD739D94);
    swift_release();
    swift_release();
    *(void *)&long long v55 = v41;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB58C838);
    sub_1DD73A264();
    sub_1DD73A2C0();
    uint64_t v37 = sub_1DD8A7570();
    swift_bridgeObjectRelease();
    return v37;
  }
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  return v48;
}

BOOL sub_1DD738C40(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 14;
  swift_bridgeObjectRetain();
  if (v5 == a3 >> 14)
  {
LABEL_10:
    sub_1DD8A74D0();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    BOOL v15 = v14 == 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    while (1)
    {
      while (1)
      {
        uint64_t v7 = sub_1DD8A75F0();
        uint64_t v9 = v8;
        unint64_t v10 = sub_1DD8A75B0();
        uint64_t v11 = sub_1DD8A74D0();
        if (!v12)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v15 = 1;
          goto LABEL_13;
        }
        if (v7 != v11 || v12 != v9) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v5 == v10 >> 14)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      char v6 = sub_1DD8A7760();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        break;
      }
      if (v5 == v10 >> 14) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    BOOL v15 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1DD738DD8(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  unint64_t v25 = a5;
  unint64_t v5 = a2 >> 14;
  if (a2 >> 14 != a1 >> 14)
  {
    uint64_t v10 = ((unint64_t)a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v10) = 1;
    }
    uint64_t v23 = 4 << v10;
    if ((a4 & 0x2000000000000000) != 0) {
      unint64_t v11 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v12 = (a4 >> 62) & 1;
    if ((a4 & 0x2000000000000000) == 0) {
      LOBYTE(v12) = a3 < 0;
    }
    char v22 = v12;
    uint64_t v21 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v20 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    swift_bridgeObjectRetain();
    unint64_t v13 = a1;
    while (1)
    {
      uint64_t result = sub_1DD8A75E0();
      unsigned __int16 v15 = result;
      if ((v13 & 0xC) == v23)
      {
        uint64_t result = sub_1DD739DF4(v13, a3, a4);
        unint64_t v13 = result;
      }
      unint64_t v16 = v13 >> 16;
      if (v13 >> 16 >= v11)
      {
        __break(1u);
        return result;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t v13 = MEMORY[0x1E01BDFB0](v13, a3, a4);
        goto LABEL_32;
      }
      if (v22)
      {
        unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_32;
      }
      if ((v13 & 0xC001) != 0)
      {
        if ((a4 & 0x2000000000000000) != 0) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v19 = sub_1DD739E70(v13, a3, a4);
        unint64_t v13 = v19 & 0xFFFFFFFFFFFFFFF2 | 1;
        unint64_t v16 = v19 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
LABEL_28:
          v24[0] = a3;
          v24[1] = v21;
          LODWORD(v17) = *((unsigned __int8 *)v24 + v16);
          if ((v17 & 0x80) == 0) {
            goto LABEL_29;
          }
          goto LABEL_22;
        }
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        LODWORD(v17) = *(unsigned __int8 *)(v20 + v16);
        if ((v17 & 0x80) == 0) {
          goto LABEL_29;
        }
      }
      else
      {
        LODWORD(v17) = *(unsigned __int8 *)(sub_1DD8A7680() + v16);
        if ((v17 & 0x80) == 0)
        {
LABEL_29:
          uint64_t v17 = 1;
          goto LABEL_30;
        }
      }
LABEL_22:
      LODWORD(v17) = __clz(v17 ^ 0xFF) - 24;
      if (v17 != 4)
      {
        uint64_t v17 = v17;
        goto LABEL_30;
      }
      if ((v13 & 0xC000) != 0)
      {
        uint64_t v17 = 4;
LABEL_30:
        v13 += v17 << 16;
        unsigned __int16 v18 = 5;
        goto LABEL_31;
      }
      unsigned __int16 v18 = 16388;
LABEL_31:
      unint64_t v13 = v13 & 0xFFFFFFFFFFFF0000 | v18;
LABEL_32:
      uint64_t v6 = v25(v15);
      if ((v6 & 1) != 0 || v13 >> 14 == v5)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }
  }
  return 0;
}

uint64_t sub_1DD739010(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 >> 14;
  if (a2 >> 14 != a1 >> 14)
  {
    uint64_t v9 = ((unint64_t)a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v9) = 1;
    }
    uint64_t v23 = 4 << v9;
    if ((a4 & 0x2000000000000000) != 0) {
      unint64_t v10 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v11 = (a4 >> 62) & 1;
    if ((a4 & 0x2000000000000000) == 0) {
      LOBYTE(v11) = a3 < 0;
    }
    char v21 = v11;
    uint64_t v20 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v19 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    swift_bridgeObjectRetain();
    unint64_t v12 = a1;
    while (1)
    {
      uint64_t result = sub_1DD8A75E0();
      unsigned __int16 v14 = result;
      if ((v12 & 0xC) == v23)
      {
        uint64_t result = sub_1DD739DF4(v12, a3, a4);
        unint64_t v12 = result;
      }
      unint64_t v15 = v12 >> 16;
      if (v12 >> 16 >= v10)
      {
        __break(1u);
        return result;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t v12 = MEMORY[0x1E01BDFB0](v12, a3, a4);
        goto LABEL_32;
      }
      if (v21)
      {
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_32;
      }
      if ((v12 & 0xC001) != 0)
      {
        if ((a4 & 0x2000000000000000) != 0) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v18 = sub_1DD739E70(v12, a3, a4);
        unint64_t v12 = v18 & 0xFFFFFFFFFFFFFFF2 | 1;
        unint64_t v15 = v18 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
LABEL_28:
          v22[0] = a3;
          v22[1] = v20;
          LODWORD(v16) = *((unsigned __int8 *)v22 + v15);
          if ((v16 & 0x80) == 0) {
            goto LABEL_29;
          }
          goto LABEL_22;
        }
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        LODWORD(v16) = *(unsigned __int8 *)(v19 + v15);
        if ((v16 & 0x80) == 0) {
          goto LABEL_29;
        }
      }
      else
      {
        LODWORD(v16) = *(unsigned __int8 *)(sub_1DD8A7680() + v15);
        if ((v16 & 0x80) == 0)
        {
LABEL_29:
          uint64_t v16 = 1;
          goto LABEL_30;
        }
      }
LABEL_22:
      LODWORD(v16) = __clz(v16 ^ 0xFF) - 24;
      if (v16 != 4)
      {
        uint64_t v16 = v16;
        goto LABEL_30;
      }
      if ((v12 & 0xC000) != 0)
      {
        uint64_t v16 = 4;
LABEL_30:
        v12 += v16 << 16;
        unsigned __int16 v17 = 5;
        goto LABEL_31;
      }
      unsigned __int16 v17 = 16388;
LABEL_31:
      unint64_t v12 = v12 & 0xFFFFFFFFFFFF0000 | v17;
LABEL_32:
      BOOL v5 = utf16CheckIsEnglishCapital(v14);
      if (!v5 || v12 >> 14 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
  }
  return 1;
}

uint64_t static CRTextDecodingUtilsTesting.adjustedBeamSearchDecodedString(_:greedyDecodedString:decodingLocale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  int v5 = *a5;
  uint64_t v6 = (void *)sub_1DD8A7470();
  uint64_t v7 = (void *)sub_1DD8A7470();
  if (v5 == 30)
  {
    uint64_t v8 = 0;
  }
  else
  {
    CRLocale.rawValue.getter();
    uint64_t v8 = (void *)sub_1DD8A7470();
    swift_bridgeObjectRelease();
  }
  id v9 = objc_msgSend(self, sel_adjustedBeamSearchDecodedString_greedyDecodedString_decodingLocale_, v6, v7, v8);

  uint64_t v10 = sub_1DD8A7480();
  return v10;
}

char *sub_1DD73940C(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v46[3] = a4;
  if (a1 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v11 = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = 15;
  uint64_t v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v16 = HIBYTE(a6) & 0xF) : (uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_1DD739AAC(v30 | (v15 << 16), v43, a2 & 1, v14);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_38;
  }
  uint64_t v38 = a1;
  uint64_t v39 = v14;
  unint64_t v44 = 4 * v16;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v9 = 15;
  unint64_t v8 = 15;
  unint64_t v17 = 15;
  while (1)
  {
    v46[0] = sub_1DD8A7550();
    v46[1] = v18;
    uint64_t v19 = a3(v46);
    if (v7)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    uint64_t v6 = v19;
    swift_bridgeObjectRelease();
    if (v6) {
      break;
    }
    unint64_t v9 = sub_1DD8A74B0();
LABEL_9:
    if (v44 == v9 >> 14) {
      goto LABEL_29;
    }
  }
  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v9 = sub_1DD8A74B0();
    *(void *)(v43 + 16) = v9;
    unint64_t v8 = v9;
    unint64_t v17 = v9;
    goto LABEL_9;
  }
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v20 = sub_1DD8A7560();
  uint64_t v40 = v21;
  uint64_t v41 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = sub_1DD739BBC(0, *((void *)v10 + 2) + 1, 1, v10);
  }
  unint64_t v27 = *((void *)v10 + 2);
  unint64_t v26 = *((void *)v10 + 3);
  uint64_t v6 = v27 + 1;
  if (v27 >= v26 >> 1) {
    uint64_t v10 = sub_1DD739BBC((char *)(v26 > 1), v27 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v6;
  unint64_t v28 = &v10[32 * v27];
  *((void *)v28 + 4) = v41;
  *((void *)v28 + 5) = v23;
  *((void *)v28 + 6) = v25;
  *((void *)v28 + 7) = v40;
  *(void *)(v39 + 16) = v10;
  uint64_t v29 = sub_1DD8A74B0();
  unint64_t v9 = v29;
  *(void *)(v43 + 16) = v29;
  if (*((void *)v10 + 2) != v38)
  {
    unint64_t v8 = v29;
    unint64_t v17 = v29;
    goto LABEL_9;
  }
  unint64_t v17 = v29;
  unint64_t v8 = v29;
LABEL_29:
  if (v44 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v44 >= v17 >> 14)
  {
    uint64_t v6 = sub_1DD8A7560();
    unint64_t v8 = v31;
    unint64_t v9 = v32;
    uint64_t v11 = v33;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  uint64_t v10 = sub_1DD739BBC(0, *((void *)v10 + 2) + 1, 1, v10);
LABEL_34:
  unint64_t v35 = *((void *)v10 + 2);
  unint64_t v34 = *((void *)v10 + 3);
  if (v35 >= v34 >> 1) {
    uint64_t v10 = sub_1DD739BBC((char *)(v34 > 1), v35 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v35 + 1;
  char v36 = &v10[32 * v35];
  *((void *)v36 + 4) = v6;
  *((void *)v36 + 5) = v8;
  *((void *)v36 + 6) = v9;
  *((void *)v36 + 7) = v11;
  *(void *)(v39 + 16) = v10;
LABEL_37:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_38:
  swift_release();
  return v10;
}

unint64_t sub_1DD73982C(uint64_t a1, uint64_t a2)
{
  sub_1DD8A77C0();
  sub_1DD8A74A0();
  uint64_t v4 = sub_1DD8A77D0();
  return sub_1DD7398A4(a1, a2, v4);
}

unint64_t sub_1DD7398A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1DD8A7760() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1DD8A7760() & 1) == 0);
    }
  }
  return v6;
}

char *sub_1DD739988(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1DD7399A8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DD7399A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB58C868);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1DD739AAC(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v10 = *(void *)(a2 + 16) >> 14;
  int v11 = (v10 == a1 >> 14) & a3;
  if (v11 == 1) {
    return v11 ^ 1u;
  }
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a4;
  uint64_t v5 = sub_1DD8A7560();
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  uint64_t v9 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    uint64_t v9 = sub_1DD739BBC(0, *((void *)v9 + 2) + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  unint64_t v17 = *((void *)v9 + 2);
  unint64_t v16 = *((void *)v9 + 3);
  if (v17 >= v16 >> 1)
  {
    uint64_t v9 = sub_1DD739BBC((char *)(v16 > 1), v17 + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }
  *((void *)v9 + 2) = v17 + 1;
  uint64_t v18 = &v9[32 * v17];
  *((void *)v18 + 4) = v5;
  *((void *)v18 + 5) = v6;
  *((void *)v18 + 6) = v7;
  *((void *)v18 + 7) = v8;
  return v11 ^ 1u;
}

char *sub_1DD739BBC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB58C868);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1DD739CC0(void *a1)
{
  return sub_1DD739CDC(a1) & 1;
}

uint64_t sub_1DD739CDC(void *a1)
{
  long long v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return sub_1DD8A7760() & 1;
  }
}

uint64_t sub_1DD739D34(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58448);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1DD739D94(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  unint64_t v9 = sub_1DD73A380(a1, a2, a3, a4, a5, a6, a7, a8, *(unsigned char *)(v8 + 16));
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t sub_1DD739DF4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_1DD8A7530();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E01BDF90](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unint64_t sub_1DD739E70(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v10 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          unint64_t v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            int v7 = *(unsigned char *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = sub_1DD8A7680();
        unint64_t v5 = v12;
        if (v12 != v9) {
          goto LABEL_9;
        }
      }
      return v5 << 16;
    }
    uint64_t v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v8)
    {
      return MEMORY[0x1F4184CD0]();
    }
  }
  return result;
}

uint64_t sub_1DD739F84(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v51 = *(void *)(a2 + 16);
  unint64_t v53 = *(void *)(a1 + 16);
  if (v51 >= v53) {
    int64_t v5 = *(void *)(a1 + 16);
  }
  else {
    int64_t v5 = *(void *)(a2 + 16);
  }
  uint64_t v62 = MEMORY[0x1E4FBC860];
  sub_1DD739988(0, v5, 0);
  uint64_t v6 = v62;
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  int64_t v48 = v5;
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v7 = (uint64_t *)(a1 + 56);
    uint64_t v8 = (uint64_t *)(a2 + 56);
    while (1)
    {
      int64_t v57 = v5;
      uint64_t v60 = v6;
      uint64_t v9 = *(v7 - 3);
      uint64_t v10 = *(v7 - 2);
      uint64_t v11 = *(v7 - 1);
      uint64_t v12 = *v7;
      uint64_t v13 = *(v8 - 1);
      uint64_t v14 = *v8;
      uint64_t v16 = *(v8 - 3);
      uint64_t v15 = *(v8 - 2);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
      if (!v12) {
        break;
      }
      uint64_t v18 = a3(v9, v10, v11, v12, v16, v15, v13, v14);
      uint64_t v20 = v19;
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v6 = v60;
      unint64_t v26 = *(void *)(v60 + 16);
      unint64_t v25 = *(void *)(v60 + 24);
      if (v26 >= v25 >> 1)
      {
        uint64_t result = (uint64_t)sub_1DD739988((char *)(v25 > 1), v26 + 1, 1);
        uint64_t v6 = v60;
      }
      v8 += 4;
      *(void *)(v6 + 16) = v26 + 1;
      unint64_t v27 = (void *)(v6 + 32 * v26);
      v27[4] = v18;
      v27[5] = v20;
      v27[6] = v22;
      v27[7] = v24;
      v7 += 4;
      int64_t v5 = v57 - 1;
      if (v57 == 1) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_12:
    if (v53 <= v51)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    unint64_t v28 = v51 - v48;
    unint64_t v29 = v53 - v48;
    uint64_t v52 = 32 * v48;
    uint64_t v31 = v49;
    uint64_t v30 = v50;
    while (v29)
    {
      if (v28)
      {
        unint64_t v61 = v29;
        uint64_t v58 = *(void *)(v30 + v52 + 32);
        uint64_t v54 = *(void *)(v30 + v52 + 40);
        uint64_t v32 = v6;
        uint64_t v33 = *(void *)(v30 + v52 + 48);
        uint64_t v34 = *(void *)(v30 + v52 + 56);
        uint64_t v35 = *(void *)(v31 + v52 + 48);
        uint64_t v36 = *(void *)(v31 + v52 + 56);
        uint64_t v38 = *(void *)(v31 + v52 + 32);
        uint64_t v37 = *(void *)(v31 + v52 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v39 = a3(v58, v54, v33, v34, v38, v37, v35, v36);
        uint64_t v6 = v32;
        uint64_t v59 = v39;
        uint64_t v55 = v40;
        uint64_t v42 = v41;
        uint64_t v44 = v43;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v63 = v32;
        unint64_t v45 = *(void *)(v32 + 16);
        unint64_t v46 = *(void *)(v6 + 24);
        if (v45 >= v46 >> 1)
        {
          uint64_t result = (uint64_t)sub_1DD739988((char *)(v46 > 1), v45 + 1, 1);
          uint64_t v6 = v63;
        }
        *(void *)(v6 + 16) = v45 + 1;
        unint64_t v47 = (void *)(v6 + 32 * v45);
        v47[4] = v59;
        v47[5] = v55;
        v47[6] = v42;
        v47[7] = v44;
        --v28;
        v30 += 32;
        v31 += 32;
        unint64_t v29 = v61 - 1;
        if (v61 != 1) {
          continue;
        }
      }
      goto LABEL_19;
    }
    __break(1u);
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1DD73A264()
{
  unint64_t result = qword_1EB58C840;
  if (!qword_1EB58C840)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EB58C838);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB58C840);
  }
  return result;
}

unint64_t sub_1DD73A2C0()
{
  unint64_t result = qword_1EB58C830;
  if (!qword_1EB58C830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB58C830);
  }
  return result;
}

uint64_t sub_1DD73A314(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for CRTextDecodingUtilsTesting()
{
  return &type metadata for CRTextDecodingUtilsTesting;
}

unint64_t sub_1DD73A380(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, char a9)
{
  swift_bridgeObjectRetain();
  unint64_t result = sub_1DD8A75C0();
  if (v18) {
    unint64_t result = a2;
  }
  if (a2 >> 14 < result >> 14)
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v31 = a1;
  unint64_t v32 = a2;
  unint64_t v19 = sub_1DD8A7600();
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  unint64_t result = sub_1DD8A75D0();
  if (__OFSUB__(result, 1))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  unint64_t result = sub_1DD8A75C0();
  if (v22) {
    unint64_t v23 = v21;
  }
  else {
    unint64_t v23 = result;
  }
  if (v23 >> 14 < v19 >> 14) {
    goto LABEL_26;
  }
  sub_1DD8A7600();
  swift_bridgeObjectRelease();
  sub_1DD73A2C0();
  sub_1DD737CAC();
  char v24 = sub_1DD8A7630();
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0
    && !sub_1DD738C40(0x2F2F3A70747468, 0xE700000000000000, a1, v32)
    && !sub_1DD738C40(0x2F2F3A7370747468, 0xE800000000000000, a1, v32)
    || (swift_bridgeObjectRetain(),
        uint64_t v25 = sub_1DD8A75D0(),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRetain(),
        uint64_t v26 = sub_1DD8A75D0(),
        swift_bridgeObjectRelease(),
        v26 < v25))
  {
    swift_bridgeObjectRetain();
    char v27 = sub_1DD738DD8(v31, v32, a3, a4, (uint64_t (*)(void))utf16CheckIsDigit);
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0
      || (swift_bridgeObjectRetain(),
          char v28 = sub_1DD738DD8(a5, a6, a7, a8, (uint64_t (*)(void))utf16CheckIsLatin),
          swift_bridgeObjectRelease(),
          (v28 & 1) == 0))
    {
      if (a9)
      {
        return v31;
      }
      else if (sub_1DD8A7540() >= 10 {
             && (swift_bridgeObjectRetain(),
      }
                 char v29 = sub_1DD739010(v31, v32, a3, a4),
                 swift_bridgeObjectRelease(),
                 (v29 & 1) != 0))
      {
        swift_bridgeObjectRetain();
        char v30 = sub_1DD739010(a5, a6, a7, a8);
        swift_bridgeObjectRelease();
        if ((v30 & 1) == 0) {
          return v31;
        }
      }
      else
      {
        return v31;
      }
    }
  }
  return a5;
}

uint64_t sub_1DD73A774()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1DD73A7AC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1DD73A7BC()
{
  sub_1DD8A7480();
  sub_1DD8A74D0();
  if (v0)
  {
    do
    {
      sub_1DD8A74C0();
      swift_bridgeObjectRelease();
      sub_1DD8A74D0();
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  return 0;
}

id sub_1DD73A864(void *a1)
{
  id v1 = a1;
  sub_1DD73A7BC();
  uint64_t v3 = v2;

  if (v3)
  {
    uint64_t v4 = (void *)sub_1DD8A7470();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4;
}

id sub_1DD73A8DC()
{
  id result = lmConfig();
  if (result)
  {
    id v1 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58450);
    uint64_t v2 = sub_1DD8A7440();

    uint64_t v3 = sub_1DD8A7750();
    if (*(void *)(v2 + 16)
      && (unint64_t v5 = sub_1DD73982C(v3, v4), (v6 & 1) != 0)
      && (uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          swift_bridgeObjectRelease(),
          uint64_t v8 = CRLocale.rawValue.getter(),
          *(void *)(v7 + 16))
      && (unint64_t v10 = sub_1DD73982C(v8, v9), (v11 & 1) != 0))
    {
      uint64_t v12 = *(void *)(*(void *)(v7 + 56) + 8 * v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v13 = sub_1DD73ACEC(v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    return (id)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CRLocale.rawValue.getter()
{
  uint64_t result = 0x53552D6E65;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x52462D7266;
      break;
    case 2:
      uint64_t result = 0x54492D7469;
      break;
    case 3:
      uint64_t result = 0x45442D6564;
      break;
    case 4:
      uint64_t result = 0x53452D7365;
      break;
    case 5:
      uint64_t result = 0x52422D7470;
      break;
    case 6:
      uint64_t result = 0x55522D7572;
      break;
    case 7:
      uint64_t result = 0x41552D6B75;
      break;
    case 8:
      uint64_t result = 0x48542D6874;
      break;
    case 9:
      uint64_t result = 0x54562D6976;
      break;
    case 0xA:
      uint64_t result = 0x52542D7274;
      break;
    case 0xB:
      uint64_t result = 0x44492D6469;
      break;
    case 0xC:
      uint64_t result = 0x5A432D7363;
      break;
    case 0xD:
      uint64_t result = 0x4B442D6164;
      break;
    case 0xE:
      uint64_t result = 0x4C4E2D6C6ELL;
      break;
    case 0xF:
      uint64_t result = 0x4F4E2D6F6ELL;
      break;
    case 0x10:
      uint64_t result = 0x4F4E2D6E6ELL;
      break;
    case 0x11:
      uint64_t result = 0x4F4E2D626ELL;
      break;
    case 0x12:
      uint64_t result = 0x594D2D736DLL;
      break;
    case 0x13:
      uint64_t result = 0x4C502D6C70;
      break;
    case 0x14:
      uint64_t result = 0x4F522D6F72;
      break;
    case 0x15:
      uint64_t result = 0x45532D7673;
      break;
    case 0x16:
      uint64_t result = 0x736E61482D687ALL;
      break;
    case 0x17:
      uint64_t result = 0x746E61482D687ALL;
      break;
    case 0x18:
      uint64_t result = 0x736E61482D657579;
      break;
    case 0x19:
      uint64_t result = 0x746E61482D657579;
      break;
    case 0x1A:
      uint64_t result = 0x524B2D6F6BLL;
      break;
    case 0x1B:
      uint64_t result = 0x504A2D616ALL;
      break;
    case 0x1C:
      uint64_t result = 0x41532D7261;
      break;
    case 0x1D:
      uint64_t result = 0x41532D737261;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1DD73ACEC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58460);
    uint64_t v2 = (void *)sub_1DD8A7730();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v34 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v33 = (unint64_t)(63 - v3) >> 6;
  char v6 = &v38;
  uint64_t v7 = &v40;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = MEMORY[0x1E4FBC840] + 8;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v33) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v33) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v34 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v33) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v34 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v33) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v34 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v33)
          {
            unint64_t v21 = *(void *)(v34 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v33) {
                break;
              }
              unint64_t v21 = *(void *)(v34 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1DD73B6D8();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = v18 | (i << 6))
  {
    char v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v25 = *(void **)(*(void *)(v1 + 56) + 8 * v19);
    uint64_t v36 = *v24;
    uint64_t v37 = v24[1];
    sub_1DD73B648();
    swift_bridgeObjectRetain();
    id v26 = v25;
    swift_dynamicCast();
    sub_1DD738768(v6, v7);
    sub_1DD738768(v7, v41);
    sub_1DD738768(v41, &v39);
    unint64_t result = sub_1DD73982C(v36, v37);
    unint64_t v27 = result;
    if (v28)
    {
      unint64_t v35 = v5;
      char v11 = v7;
      uint64_t v12 = v6;
      uint64_t v13 = v1;
      int64_t v14 = i;
      uint64_t v15 = v10;
      uint64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v16 = v36;
      v16[1] = v37;
      uint64_t v10 = v15;
      int64_t i = v14;
      uint64_t v1 = v13;
      char v6 = v12;
      uint64_t v7 = v11;
      unint64_t v5 = v35;
      unint64_t v17 = (_OWORD *)(v2[7] + 32 * v27);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
      unint64_t result = (unint64_t)sub_1DD738768(&v39, v17);
      if (!v35) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v29 = (uint64_t *)(v2[6] + 16 * result);
    *char v29 = v36;
    v29[1] = v37;
    unint64_t result = (unint64_t)sub_1DD738768(&v39, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v30 = v2[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_34;
    }
    v2[2] = v32;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v18 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

TextRecognition::CRLocale_optional __swiftcall CRLocale.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_1DD8A7790();
  result.value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 12;
  switch(v3)
  {
    case 0:
      goto LABEL_14;
    case 1:
      char v5 = 1;
      goto LABEL_14;
    case 2:
      char v5 = 2;
      goto LABEL_14;
    case 3:
      char v5 = 3;
      goto LABEL_14;
    case 4:
      char v5 = 4;
      goto LABEL_14;
    case 5:
      char v5 = 5;
      goto LABEL_14;
    case 6:
      char v5 = 6;
      goto LABEL_14;
    case 7:
      char v5 = 7;
      goto LABEL_14;
    case 8:
      char v5 = 8;
      goto LABEL_14;
    case 9:
      char v5 = 9;
      goto LABEL_14;
    case 10:
      char v5 = 10;
      goto LABEL_14;
    case 11:
      char v5 = 11;
LABEL_14:
      char v6 = v5;
      break;
    case 12:
      break;
    case 13:
      char v6 = 13;
      break;
    case 14:
      char v6 = 14;
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    case 22:
      char v6 = 22;
      break;
    case 23:
      char v6 = 23;
      break;
    case 24:
      char v6 = 24;
      break;
    case 25:
      char v6 = 25;
      break;
    case 26:
      char v6 = 26;
      break;
    case 27:
      char v6 = 27;
      break;
    case 28:
      char v6 = 28;
      break;
    case 29:
      char v6 = 29;
      break;
    default:
      char v6 = 30;
      break;
  }
  *uint64_t v2 = v6;
  return result;
}

uint64_t sub_1DD73B230()
{
  return sub_1DD73B23C();
}

uint64_t sub_1DD73B23C()
{
  uint64_t v0 = CRLocale.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == CRLocale.rawValue.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1DD8A7760();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1DD73B2D4()
{
  return sub_1DD8A77D0();
}

uint64_t sub_1DD73B33C()
{
  CRLocale.rawValue.getter();
  sub_1DD8A74A0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DD73B3A0()
{
  return sub_1DD8A77D0();
}

TextRecognition::CRLocale_optional sub_1DD73B404(Swift::String *a1)
{
  return CRLocale.init(rawValue:)(*a1);
}

uint64_t sub_1DD73B410@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CRLocale.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1DD73B43C()
{
  unint64_t result = qword_1EAB58458;
  if (!qword_1EAB58458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAB58458);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLocale(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE3) {
    goto LABEL_17;
  }
  if (a2 + 29 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 29) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 29;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 29;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1E;
  int v8 = v6 - 30;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CRLocale(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 29 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 29) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE2)
  {
    unsigned int v6 = ((a2 - 227) >> 8) + 1;
    *unint64_t result = a2 + 29;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DD73B5FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 29;
        break;
    }
  }
  return result;
}

uint64_t sub_1DD73B624(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1DD73B630(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CRLocale()
{
  return &type metadata for CRLocale;
}

unint64_t sub_1DD73B648()
{
  unint64_t result = qword_1EAB58468;
  if (!qword_1EAB58468)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAB58468);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1DD73B6D8()
{
  return swift_release();
}

double sub_1DD73B6E0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB584B0);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1DD8CDA90;
  *(void *)(v0 + 32) = &type metadata for CRCorrectLatinCyrillicAmbiguities;
  *(void *)(v0 + 40) = &off_1F38EE2A8;
  qword_1EAB68A28 = v0;
  return result;
}

void sub_1DD73B7D8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  id v6 = objc_msgSend(a1, sel_text);
  uint64_t v7 = sub_1DD8A7480();
  uint64_t v9 = v8;

  id v10 = objc_msgSend(v5, sel_text);
  uint64_t v11 = sub_1DD8A7480();
  unint64_t v13 = v12;

  _s15TextRecognition33CRCorrectLatinCyrillicAmbiguitiesV03fixE0011correctableA0S2S_tFZ_0(v11, v13);
  swift_bridgeObjectRelease();
  int64_t v14 = (void *)sub_1DD8A7470();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setText_, v14);

  if (a3)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = (void *)sub_1DD8A7470();
    objc_msgSend(v5, sel_setLocale_, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_3;
  }
  id v23 = objc_msgSend(v5, sel_text);
  uint64_t v24 = sub_1DD8A7480();
  uint64_t v26 = v25;

  if (v7 == v24 && v9 == v26)
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  char v28 = sub_1DD8A7760();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v28 & 1) == 0)
  {
LABEL_3:
    id v16 = objc_msgSend(v5, sel_subregions);
    if (!v16) {
      goto LABEL_36;
    }
    unint64_t v17 = v16;
    sub_1DD73872C(0, &qword_1EAB58470);
    unint64_t v18 = sub_1DD8A7590();

    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1DD8A7700();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v19)
      {
LABEL_6:
        unint64_t v49 = MEMORY[0x1E4FBC860];
        sub_1DD8A76C0();
        if (v19 < 0)
        {
          __break(1u);
          goto LABEL_66;
        }
        unint64_t v47 = v5;
        uint64_t v20 = 0;
        do
        {
          if ((v18 & 0xC000000000000001) != 0) {
            id v21 = (id)MEMORY[0x1E01BE120](v20, v18);
          }
          else {
            id v21 = *(id *)(v18 + 8 * v20 + 32);
          }
          int64_t v22 = v21;
          self;
          if (!swift_dynamicCastObjCClass())
          {
            objc_msgSend(v22, sel_mutableCopy);
            sub_1DD8A7640();
            swift_unknownObjectRelease();
            sub_1DD73872C(0, &qword_1EAB58478);
            swift_dynamicCast();
          }
          ++v20;
          sub_1DD8A76A0();
          sub_1DD8A76D0();
          sub_1DD8A76E0();
          sub_1DD8A76B0();
        }
        while (v19 != v20);
        unint64_t v27 = v49;
        swift_bridgeObjectRelease();
        uint64_t v5 = v47;
LABEL_23:
        if (v27 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v29 = sub_1DD8A7700();
          if (v29)
          {
LABEL_25:
            if (v29 >= 1)
            {
              for (uint64_t i = 0; i != v29; ++i)
              {
                if ((v27 & 0xC000000000000001) != 0) {
                  id v31 = (id)MEMORY[0x1E01BE120](i, v27);
                }
                else {
                  id v31 = *(id *)(v27 + 8 * i + 32);
                }
                uint64_t v32 = v31;
                sub_1DD73B7D8(v31, a2, a3);
              }
              goto LABEL_32;
            }
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v29) {
            goto LABEL_25;
          }
        }
LABEL_32:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if (v27 >> 62)
        {
          sub_1DD8A76F0();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_1DD8A7770();
        }
        swift_bridgeObjectRelease();
        int64_t v33 = (void *)sub_1DD8A7580();
        swift_bridgeObjectRelease();
        objc_msgSend(v5, sel_setSubregions_, v33);

LABEL_36:
        id v34 = objc_msgSend(v5, sel_candidates);
        if (!v34) {
          return;
        }
        unint64_t v35 = v34;
        sub_1DD73872C(0, &qword_1EAB58470);
        unint64_t v36 = sub_1DD8A7590();

        if (v36 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v37 = sub_1DD8A7700();
          swift_bridgeObjectRelease();
          if (v37)
          {
LABEL_39:
            unint64_t v50 = MEMORY[0x1E4FBC860];
            sub_1DD8A76C0();
            if ((v37 & 0x8000000000000000) == 0)
            {
              int64_t v48 = v5;
              uint64_t v38 = 0;
              do
              {
                if ((v36 & 0xC000000000000001) != 0) {
                  id v39 = (id)MEMORY[0x1E01BE120](v38, v36);
                }
                else {
                  id v39 = *(id *)(v36 + 8 * v38 + 32);
                }
                uint64_t v40 = v39;
                self;
                if (!swift_dynamicCastObjCClass())
                {
                  objc_msgSend(v40, sel_mutableCopy);
                  sub_1DD8A7640();
                  swift_unknownObjectRelease();
                  sub_1DD73872C(0, &qword_1EAB58478);
                  swift_dynamicCast();
                }
                ++v38;
                sub_1DD8A76A0();
                sub_1DD8A76D0();
                sub_1DD8A76E0();
                sub_1DD8A76B0();
              }
              while (v37 != v38);
              unint64_t v41 = v50;
              swift_bridgeObjectRelease();
              uint64_t v5 = v48;
LABEL_51:
              if (v41 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v42 = sub_1DD8A7700();
                if (v42)
                {
LABEL_53:
                  if (v42 >= 1)
                  {
                    for (uint64_t j = 0; j != v42; ++j)
                    {
                      if ((v41 & 0xC000000000000001) != 0) {
                        id v44 = (id)MEMORY[0x1E01BE120](j, v41);
                      }
                      else {
                        id v44 = *(id *)(v41 + 8 * j + 32);
                      }
                      unint64_t v45 = v44;
                      sub_1DD73B7D8(v44, a2, a3);
                    }
                    goto LABEL_60;
                  }
LABEL_68:
                  __break(1u);
                  return;
                }
              }
              else
              {
                uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if (v42) {
                  goto LABEL_53;
                }
              }
LABEL_60:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              if (v41 >> 62)
              {
                sub_1DD8A76F0();
                swift_bridgeObjectRelease();
              }
              else
              {
                sub_1DD8A7770();
              }
              swift_bridgeObjectRelease();
              unint64_t v46 = (void *)sub_1DD8A7580();
              swift_bridgeObjectRelease();
              objc_msgSend(v5, sel_setCandidates_, v46);

              return;
            }
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
        }
        else
        {
          uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v37) {
            goto LABEL_39;
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v41 = MEMORY[0x1E4FBC860];
        goto LABEL_51;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v27 = MEMORY[0x1E4FBC860];
    goto LABEL_23;
  }
}

void sub_1DD73BF7C(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(a1, sel_text);
  uint64_t v7 = sub_1DD8A7480();
  uint64_t v9 = v8;

  id v10 = objc_msgSend(a1, sel_text);
  uint64_t v11 = sub_1DD8A7480();
  unint64_t v13 = v12;

  swift_bridgeObjectRetain();
  sub_1DD740090(v11, v13);
  swift_bridgeObjectRelease();
  sub_1DD8A7460();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v14 = (void *)sub_1DD8A7470();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setText_, v14);

  if (a3)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = (void *)sub_1DD8A7470();
    objc_msgSend(a1, sel_setLocale_, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_3;
  }
  id v23 = objc_msgSend(a1, sel_text);
  uint64_t v24 = sub_1DD8A7480();
  uint64_t v26 = v25;

  if (v7 == v24 && v9 == v26)
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  char v28 = sub_1DD8A7760();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v28 & 1) == 0)
  {
LABEL_3:
    id v16 = objc_msgSend(a1, sel_subregions);
    if (!v16) {
      goto LABEL_36;
    }
    unint64_t v17 = v16;
    sub_1DD73872C(0, &qword_1EAB58470);
    unint64_t v18 = sub_1DD8A7590();

    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1DD8A7700();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v19)
      {
LABEL_6:
        unint64_t v47 = MEMORY[0x1E4FBC860];
        sub_1DD8A76C0();
        if (v19 < 0)
        {
          __break(1u);
          goto LABEL_66;
        }
        uint64_t v20 = 0;
        do
        {
          if ((v18 & 0xC000000000000001) != 0) {
            id v21 = (id)MEMORY[0x1E01BE120](v20, v18);
          }
          else {
            id v21 = *(id *)(v18 + 8 * v20 + 32);
          }
          int64_t v22 = v21;
          self;
          if (!swift_dynamicCastObjCClass())
          {
            objc_msgSend(v22, sel_mutableCopy);
            sub_1DD8A7640();
            swift_unknownObjectRelease();
            sub_1DD73872C(0, &qword_1EAB58478);
            swift_dynamicCast();
          }
          ++v20;
          sub_1DD8A76A0();
          sub_1DD8A76D0();
          sub_1DD8A76E0();
          sub_1DD8A76B0();
        }
        while (v19 != v20);
        unint64_t v27 = v47;
        swift_bridgeObjectRelease();
LABEL_23:
        if (v27 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v29 = sub_1DD8A7700();
          if (v29)
          {
LABEL_25:
            if (v29 >= 1)
            {
              for (uint64_t i = 0; i != v29; ++i)
              {
                if ((v27 & 0xC000000000000001) != 0) {
                  id v31 = (id)MEMORY[0x1E01BE120](i, v27);
                }
                else {
                  id v31 = *(id *)(v27 + 8 * i + 32);
                }
                uint64_t v32 = v31;
                sub_1DD73BF7C(v31, a2, a3);
              }
              goto LABEL_32;
            }
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v29) {
            goto LABEL_25;
          }
        }
LABEL_32:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if (v27 >> 62)
        {
          sub_1DD8A76F0();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_1DD8A7770();
        }
        swift_bridgeObjectRelease();
        int64_t v33 = (void *)sub_1DD8A7580();
        swift_bridgeObjectRelease();
        objc_msgSend(a1, sel_setSubregions_, v33);

LABEL_36:
        id v34 = objc_msgSend(a1, sel_candidates);
        if (!v34) {
          return;
        }
        unint64_t v35 = v34;
        sub_1DD73872C(0, &qword_1EAB58470);
        unint64_t v36 = sub_1DD8A7590();

        if (v36 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v37 = sub_1DD8A7700();
          swift_bridgeObjectRelease();
          if (v37)
          {
LABEL_39:
            unint64_t v48 = MEMORY[0x1E4FBC860];
            sub_1DD8A76C0();
            if ((v37 & 0x8000000000000000) == 0)
            {
              uint64_t v38 = 0;
              do
              {
                if ((v36 & 0xC000000000000001) != 0) {
                  id v39 = (id)MEMORY[0x1E01BE120](v38, v36);
                }
                else {
                  id v39 = *(id *)(v36 + 8 * v38 + 32);
                }
                uint64_t v40 = v39;
                self;
                if (!swift_dynamicCastObjCClass())
                {
                  objc_msgSend(v40, sel_mutableCopy);
                  sub_1DD8A7640();
                  swift_unknownObjectRelease();
                  sub_1DD73872C(0, &qword_1EAB58478);
                  swift_dynamicCast();
                }
                ++v38;
                sub_1DD8A76A0();
                sub_1DD8A76D0();
                sub_1DD8A76E0();
                sub_1DD8A76B0();
              }
              while (v37 != v38);
              unint64_t v41 = v48;
              swift_bridgeObjectRelease();
LABEL_51:
              if (v41 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v42 = sub_1DD8A7700();
                if (v42)
                {
LABEL_53:
                  if (v42 >= 1)
                  {
                    for (uint64_t j = 0; j != v42; ++j)
                    {
                      if ((v41 & 0xC000000000000001) != 0) {
                        id v44 = (id)MEMORY[0x1E01BE120](j, v41);
                      }
                      else {
                        id v44 = *(id *)(v41 + 8 * j + 32);
                      }
                      unint64_t v45 = v44;
                      sub_1DD73BF7C(v44, a2, a3);
                    }
                    goto LABEL_60;
                  }
LABEL_68:
                  __break(1u);
                  return;
                }
              }
              else
              {
                uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if (v42) {
                  goto LABEL_53;
                }
              }
LABEL_60:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              if (v41 >> 62)
              {
                sub_1DD8A76F0();
                swift_bridgeObjectRelease();
              }
              else
              {
                sub_1DD8A7770();
              }
              swift_bridgeObjectRelease();
              unint64_t v46 = (void *)sub_1DD8A7580();
              swift_bridgeObjectRelease();
              objc_msgSend(a1, sel_setCandidates_, v46);

              return;
            }
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
        }
        else
        {
          uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v37) {
            goto LABEL_39;
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v41 = MEMORY[0x1E4FBC860];
        goto LABEL_51;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v27 = MEMORY[0x1E4FBC860];
    goto LABEL_23;
  }
}

char *sub_1DD73C750(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    if (!v2) {
      return (char *)v3;
    }
    uint64_t v15 = MEMORY[0x1E4FBC860];
    double result = sub_1DD736CD8(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v15;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x1E01BE120](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel_locale);
      uint64_t v9 = sub_1DD8A7480();
      uint64_t v11 = v10;

      unint64_t v13 = *(void *)(v15 + 16);
      unint64_t v12 = *(void *)(v15 + 24);
      if (v13 >= v12 >> 1) {
        sub_1DD736CD8((char *)(v12 > 1), v13 + 1, 1);
      }
      ++v5;
      *(void *)(v15 + 16) = v13 + 1;
      uint64_t v14 = v15 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      if (v2 == v5) {
        return (char *)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1DD8A7700();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

char *sub_1DD73C8CC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_65;
  }
  uint64_t v5 = sub_1DD8A7510();
LABEL_3:
  uint64_t v6 = v5;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!v5) {
    return (char *)v7;
  }
  uint64_t v26 = MEMORY[0x1E4FBC860];
  double result = sub_1DD73E664(0, v5 & ~(v5 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = ((unint64_t)a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0) {
      LOBYTE(v9) = 1;
    }
    uint64_t v10 = 4 << v9;
    BOOL v11 = a1 < 0;
    if ((a2 & 0x2000000000000000) != 0) {
      unint64_t v12 = v4;
    }
    else {
      unint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if ((a2 & 0x2000000000000000) != 0) {
      BOOL v11 = (a2 & 0x4000000000000000) != 0;
    }
    BOOL v21 = v11;
    unint64_t v13 = 15;
    uint64_t v22 = a1;
    uint64_t v23 = v10;
    while (1)
    {
      if (!v6)
      {
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        uint64_t v5 = sub_1DD8A74F0();
        goto LABEL_3;
      }
      uint64_t v4 = v13 & 0xC;
      unint64_t v14 = v13;
      if (v4 == v10) {
        unint64_t v14 = sub_1DD739DF4(v13, a1, a2);
      }
      if (v14 >> 16 >= v12) {
        goto LABEL_61;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        LOWORD(v15) = sub_1DD8A7520();
LABEL_33:
        LOWORD(v16) = v15;
        goto LABEL_34;
      }
      if (v14)
      {
        if ((a2 & 0x2000000000000000) != 0) {
          goto LABEL_26;
        }
      }
      else
      {
        sub_1DD739E70(v14, a1, a2);
        if ((a2 & 0x2000000000000000) != 0)
        {
LABEL_26:
          uint64_t v24 = a1;
          uint64_t v25 = a2 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_27;
        }
      }
      if ((a1 & 0x1000000000000000) == 0) {
        sub_1DD8A7680();
      }
LABEL_27:
      unsigned int v15 = sub_1DD8A7690();
      if ((v14 & 0xC000) == 0x4000)
      {
        if (v15 < 0x10000) {
          goto LABEL_63;
        }
        LOWORD(v16) = v15 & 0x3FF | 0xDC00;
      }
      else
      {
        if (!HIWORD(v15)) {
          goto LABEL_33;
        }
        int v16 = (unsigned __int16)((v15 + 67043328) >> 10) + 55296;
        if ((v16 & 0x10000) != 0) {
          goto LABEL_64;
        }
      }
LABEL_34:
      uint64_t v7 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1DD73E664(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v26;
      }
      unint64_t v18 = *(void *)(v7 + 16);
      unint64_t v17 = *(void *)(v7 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_1DD73E664((char *)(v17 > 1), v18 + 1, 1);
        uint64_t v7 = v26;
      }
      *(void *)(v7 + 16) = v18 + 1;
      *(_WORD *)(v7 + 2 * v18 + 32) = v16;
      uint64_t v10 = v23;
      a1 = v22;
      if (v4 == v23) {
        unint64_t v13 = sub_1DD739DF4(v13, v22, a2);
      }
      uint64_t v4 = v13 >> 16;
      if (v13 >> 16 >= v12) {
        goto LABEL_62;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t v13 = MEMORY[0x1E01BDFB0](v13, v22, a2);
        goto LABEL_14;
      }
      if (v21)
      {
        unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_14;
      }
      if ((v13 & 0xC001) != 0)
      {
        if ((a2 & 0x2000000000000000) == 0) {
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v20 = sub_1DD739E70(v13, v22, a2);
        unint64_t v13 = v20 & 0xFFFFFFFFFFFFFFF2 | 1;
        uint64_t v4 = v20 >> 16;
        if ((a2 & 0x2000000000000000) == 0)
        {
LABEL_46:
          if ((v22 & 0x1000000000000000) != 0)
          {
            LODWORD(v19) = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32 + v4);
            if ((v19 & 0x80) == 0) {
              goto LABEL_55;
            }
          }
          else
          {
            LODWORD(v19) = *(unsigned __int8 *)(sub_1DD8A7680() + v4);
            if ((v19 & 0x80) == 0)
            {
LABEL_55:
              uint64_t v19 = 1;
              goto LABEL_56;
            }
          }
          goto LABEL_48;
        }
      }
      uint64_t v24 = v22;
      uint64_t v25 = a2 & 0xFFFFFFFFFFFFFFLL;
      LODWORD(v19) = *((unsigned __int8 *)&v24 + v4);
      if ((v19 & 0x80) == 0) {
        goto LABEL_55;
      }
LABEL_48:
      LODWORD(v19) = __clz(v19 ^ 0xFF) - 24;
      if (v19 != 4)
      {
        uint64_t v19 = v19;
        goto LABEL_56;
      }
      if ((v13 & 0xC000) != 0)
      {
        uint64_t v19 = 4;
LABEL_56:
        unint64_t v13 = (v13 + (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_14;
      }
      unint64_t v13 = v13 & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_14:
      if (!--v6) {
        return (char *)v7;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1DD73CC78(uint64_t a1, SEL *a2)
{
  unint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = sub_1DD73FEF8(v4, a2);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_1DD73C750(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)v6 + 2);
  id v8 = (void *)MEMORY[0x1E4FBC868];
  if (!v7)
  {
    uint64_t v19 = 0;
    goto LABEL_17;
  }
  uint64_t v10 = *((void *)v6 + 4);
  uint64_t v9 = *((void *)v6 + 5);
  uint64_t v42 = v6;
  swift_bridgeObjectRetain();
  sub_1DD740570(0);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = v8;
  unint64_t v13 = sub_1DD73982C(v10, v9);
  uint64_t v14 = v8[2];
  BOOL v15 = !v12;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15)) {
    goto LABEL_37;
  }
  BOOL v2 = v12;
  if (v8[3] < v16)
  {
    sub_1DD73E900(v16, isUniquelyReferenced_nonNull_native);
    id v8 = v43;
    unint64_t v17 = sub_1DD73982C(v10, v9);
    if (v2 == (v18 & 1))
    {
      unint64_t v13 = v17;
      goto LABEL_8;
    }
LABEL_41:
    sub_1DD8A77A0();
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_40;
  }
  while (1)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    if (!v2)
    {
      v8[(v13 >> 6) + 8] |= 1 << v13;
      unint64_t v20 = (uint64_t *)(v8[6] + 16 * v13);
      *unint64_t v20 = v10;
      v20[1] = v9;
      *(void *)(v8[7] + 8 * v13) = 0;
      uint64_t v21 = v8[2];
      uint64_t v10 = v21 + 1;
      BOOL v2 = __OFADD__(v21, 1);
      swift_bridgeObjectRetain();
      if (v2) {
        goto LABEL_39;
      }
      v8[2] = v10;
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = v8[7];
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(v10 + 8 * v13);
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23) {
      break;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    sub_1DD73F758();
    id v8 = v43;
  }
  *(void *)(v10 + 8 * v13) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v30 = (uint64_t *)(v42 + 56);
    uint64_t v7 = 1;
    while (1)
    {
      uint64_t v10 = *(v30 - 1);
      uint64_t v9 = *v30;
      swift_bridgeObjectRetain();
      sub_1DD740570((uint64_t)sub_1DD73D074);
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v43 = v8;
      unint64_t v13 = sub_1DD73982C(v10, v9);
      uint64_t v33 = v8[2];
      BOOL v34 = !v32;
      uint64_t v35 = v33 + v34;
      if (__OFADD__(v33, v34)) {
        break;
      }
      BOOL v2 = v32;
      if (v8[3] >= v35)
      {
        if ((v31 & 1) == 0)
        {
          sub_1DD73F758();
          id v8 = v43;
        }
      }
      else
      {
        sub_1DD73E900(v35, v31);
        id v8 = v43;
        unint64_t v36 = sub_1DD73982C(v10, v9);
        if (v2 != (v37 & 1)) {
          goto LABEL_41;
        }
        unint64_t v13 = v36;
      }
      swift_bridgeObjectRelease();
      if (!v2)
      {
        v8[(v13 >> 6) + 8] |= 1 << v13;
        uint64_t v38 = (uint64_t *)(v8[6] + 16 * v13);
        *uint64_t v38 = v10;
        v38[1] = v9;
        *(void *)(v8[7] + 8 * v13) = 0;
        uint64_t v39 = v8[2];
        uint64_t v10 = v39 + 1;
        BOOL v2 = __OFADD__(v39, 1);
        swift_bridgeObjectRetain();
        if (v2) {
          goto LABEL_39;
        }
        v8[2] = v10;
      }
      swift_bridgeObjectRetain();
      uint64_t v10 = v8[7];
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void *)(v10 + 8 * v13);
      BOOL v23 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v23) {
        goto LABEL_38;
      }
      v30 += 2;
      *(void *)(v10 + 8 * v13) = v41;
      swift_bridgeObjectRelease();
      if (!--v25) {
        goto LABEL_16;
      }
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
LABEL_16:
  uint64_t v19 = sub_1DD73D074;
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v26 = sub_1DD73E56C((uint64_t)v8);
  swift_bridgeObjectRelease();
  uint64_t v43 = v26;
  sub_1DD73EC0C(&v43);
  swift_bridgeObjectRelease();
  unint64_t v27 = v43;
  swift_bridgeObjectRelease();
  if (v27[2])
  {
    uint64_t v28 = v27[4];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v28 = 0;
  }
  swift_release();
  sub_1DD740570((uint64_t)v19);
  return v28;
}

void sub_1DD73D074(void *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_1DD73D07C()
{
  unint64_t result = sub_1DD73FB24((uint64_t)&unk_1F38EE180);
  qword_1EAB68A38 = result;
  return result;
}

unint64_t sub_1DD73D0A4()
{
  unint64_t result = sub_1DD73FB24((uint64_t)&unk_1F38EE1F0);
  qword_1EAB68A48 = result;
  return result;
}

unint64_t sub_1DD73D0CC()
{
  unint64_t result = sub_1DD73FB24((uint64_t)&unk_1F38EE238);
  qword_1EAB68A58 = result;
  return result;
}

id static CRCorrectLatinCyrillicAmbiguities.postprocess(lineRegions:)(unint64_t a1)
{
  unint64_t v3 = a1;
  uint64_t v158 = MEMORY[0x1E4FBC860];
  unint64_t v137 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1DD8A7700();
    if (v4) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v13 = MEMORY[0x1E4FBC860];
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t v5 = self;
  if (v4 < 1)
  {
    __break(1u);
    __break(1u);
LABEL_309:
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_1DD8A7700();
    swift_bridgeObjectRelease();
LABEL_101:
    if (v49)
    {
      uint64_t v143 = v2;
      uint64_t v147 = v1;
      unint64_t v161 = MEMORY[0x1E4FBC860];
      id result = (id)sub_1DD8A76C0();
      if (v49 < 0)
      {
        __break(1u);
LABEL_312:
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
      }
      else
      {
        uint64_t v50 = 0;
        unint64_t v153 = v3 & 0xC000000000000001;
        uint64_t v151 = v49;
        while (1)
        {
          id v51 = v153 ? (id)MEMORY[0x1E01BE120](v50, v3) : *(id *)(v3 + 8 * v50 + 32);
          uint64_t v52 = v51;
          id result = objc_msgSend(v51, sel_text);
          if (!result) {
            break;
          }
          unint64_t v53 = result;
          uint64_t v54 = sub_1DD8A7480();
          unint64_t v56 = v55;

          if ((v56 & 0x2000000000000000) != 0) {
            uint64_t v57 = HIBYTE(v56) & 0xF;
          }
          else {
            uint64_t v57 = v54 & 0xFFFFFFFFFFFFLL;
          }
          if (v57)
          {
            v156 = v52;
            if ((v56 & 0x1000000000000000) == 0)
            {
              if ((v56 & 0x2000000000000000) != 0)
              {
                swift_bridgeObjectRetain_n();
                uint64_t v58 = 0;
                uint64_t v59 = 0;
              }
              else
              {
                swift_bridgeObjectRetain_n();
                uint64_t v58 = 0;
                uint64_t v59 = 0;
                if ((v54 & 0x1000000000000000) == 0) {
                  goto LABEL_118;
                }
              }
              goto LABEL_119;
            }
            swift_bridgeObjectRetain_n();
            uint64_t v58 = 0;
            uint64_t v59 = 0;
            while (1)
            {
              unsigned int v60 = sub_1DD8A7660();
LABEL_120:
              unsigned int v62 = v60;
              uint64_t v63 = v61;
              uint64_t v64 = v58;
              if (v60 >= 0x10000)
              {
                uint64_t v64 = sub_1DD8A77E0();
                unsigned __int16 v65 = sub_1DD8A77E0();
              }
              else
              {
                unsigned __int16 v65 = v60;
              }
              v59 += v63;
              if (utf16CheckIsCyrillic(v65))
              {
                if (qword_1EAB68A30 != -1) {
                  swift_once();
                }
                if (!*(void *)(qword_1EAB68A38 + 16)) {
                  break;
                }
                sub_1DD73E8B8(v65);
                if ((v66 & 1) == 0) {
                  break;
                }
              }
              if (v62 >= 0x10000)
              {
                uint64_t v58 = 0;
                if (utf16CheckIsCyrillic((unsigned __int16)v64))
                {
                  if (qword_1EAB68A30 != -1) {
                    swift_once();
                  }
                  if (!*(void *)(qword_1EAB68A38 + 16)) {
                    break;
                  }
                  sub_1DD73E8B8(v64);
                  uint64_t v58 = 0;
                  if ((v67 & 1) == 0) {
                    break;
                  }
                }
              }
              else
              {
                uint64_t v58 = v64;
              }
              if (v59 >= v57)
              {
LABEL_168:
                swift_bridgeObjectRelease_n();
                uint64_t v49 = v151;
                uint64_t v52 = v156;
                goto LABEL_169;
              }
              if ((v56 & 0x1000000000000000) == 0)
              {
                if ((v56 & 0x2000000000000000) == 0 && (v54 & 0x1000000000000000) == 0) {
LABEL_118:
                }
                  sub_1DD8A7680();
LABEL_119:
                unsigned int v60 = sub_1DD8A7690();
                goto LABEL_120;
              }
            }
            swift_bridgeObjectRelease_n();
            if ((v56 & 0x1000000000000000) == 0)
            {
              if ((v56 & 0x2000000000000000) != 0)
              {
                swift_bridgeObjectRetain_n();
                unsigned __int16 v68 = 0;
                uint64_t v69 = 0;
              }
              else
              {
                swift_bridgeObjectRetain_n();
                unsigned __int16 v68 = 0;
                uint64_t v69 = 0;
                if ((v54 & 0x1000000000000000) == 0) {
                  goto LABEL_151;
                }
              }
              goto LABEL_152;
            }
            swift_bridgeObjectRetain_n();
            unsigned __int16 v68 = 0;
            uint64_t v69 = 0;
            while (1)
            {
              unsigned int v70 = sub_1DD8A7660();
LABEL_153:
              unsigned int v72 = v70;
              uint64_t v73 = v71;
              if (v70 >= 0x10000)
              {
                unsigned __int16 v68 = sub_1DD8A77E0();
                unsigned __int16 v74 = sub_1DD8A77E0();
              }
              else
              {
                unsigned __int16 v74 = v70;
              }
              v69 += v73;
              if (qword_1EAB68A40 != -1) {
                swift_once();
              }
              if (!*(void *)(qword_1EAB68A48 + 16)) {
                break;
              }
              sub_1DD73E8B8(v74);
              if ((v75 & 1) == 0) {
                break;
              }
              if (v72 >= 0x10000)
              {
                sub_1DD73E8B8(v68);
                unsigned __int16 v68 = 0;
                if ((v76 & 1) == 0) {
                  break;
                }
              }
              if (v69 >= v57) {
                goto LABEL_168;
              }
              if ((v56 & 0x1000000000000000) == 0)
              {
                if ((v56 & 0x2000000000000000) == 0 && (v54 & 0x1000000000000000) == 0) {
LABEL_151:
                }
                  sub_1DD8A7680();
LABEL_152:
                unsigned int v70 = sub_1DD8A7690();
                goto LABEL_153;
              }
            }
            swift_bridgeObjectRelease_n();
            unint64_t v3 = v150;
            uint64_t v49 = v151;
          }
          else
          {
LABEL_169:
            swift_bridgeObjectRelease();
            self;
            uint64_t v77 = swift_dynamicCastObjCClass();
            if (v77)
            {
              long long v78 = (void *)v77;
              id v79 = v52;
            }
            else
            {
              objc_msgSend(v52, sel_mutableCopy);
              sub_1DD8A7640();
              swift_unknownObjectRelease();
              sub_1DD73872C(0, &qword_1EAB58478);
              swift_dynamicCast();
              long long v78 = v160;
            }
            unint64_t v3 = v150;
            sub_1DD73B7D8(v78, v143, v147);
          }
          ++v50;
          sub_1DD8A76A0();
          sub_1DD8A76D0();
          sub_1DD8A76E0();
          sub_1DD8A76B0();
          if (v49 == v50) {
            goto LABEL_299;
          }
        }
      }
      __break(1u);
      goto LABEL_316;
    }
LABEL_300:
    swift_bridgeObjectRelease();
    return (id)MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = (void *)v5;
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v8 = (id)MEMORY[0x1E01BE120](i, v3);
    }
    else {
      id v8 = *(id *)(v3 + 8 * i + 32);
    }
    uint64_t v9 = v8;
    id v10 = objc_msgSend(v8, sel_locale);
    sub_1DD8A7480();

    BOOL v11 = (void *)sub_1DD8A7470();
    swift_bridgeObjectRelease();
    unsigned int v12 = objc_msgSend(v6, sel_languageIsCyrillic_, v11);

    if (v12)
    {
      sub_1DD8A76A0();
      sub_1DD8A76D0();
      sub_1DD8A76E0();
      sub_1DD8A76B0();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v158;
LABEL_15:
  LODWORD(v14) = v13 < 0 || (v13 & 0x4000000000000000) != 0;
  uint64_t v150 = v3;
  if (v14 == 1) {
    goto LABEL_176;
  }
  uint64_t v15 = *(void *)(v13 + 16);
  swift_retain();
  uint64_t v146 = v15;
  if (v15)
  {
LABEL_20:
    int v136 = v14;
    uint64_t v16 = 0;
    uint64_t v140 = v4;
    unint64_t v142 = v13 & 0xC000000000000001;
    uint64_t v17 = 4;
    uint64_t v138 = v13;
    do
    {
      uint64_t v14 = v17 - 4;
      if (v142) {
        id v18 = (id)MEMORY[0x1E01BE120](v17 - 4, v13);
      }
      else {
        id v18 = *(id *)(v13 + 8 * v17);
      }
      uint64_t v19 = v18;
      uint64_t v20 = v17 - 3;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        swift_retain();
        uint64_t v146 = sub_1DD8A7700();
        if (v146) {
          goto LABEL_20;
        }
        goto LABEL_177;
      }
      id result = objc_msgSend(v18, sel_text);
      if (!result) {
        goto LABEL_313;
      }
      uint64_t v22 = result;
      uint64_t v23 = sub_1DD8A7480();
      unint64_t v3 = v24;

      if ((v3 & 0x2000000000000000) != 0) {
        uint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        uint64_t v25 = v23 & 0xFFFFFFFFFFFFLL;
      }
      if (v25)
      {
        v154 = v19;
        if ((v3 & 0x1000000000000000) == 0)
        {
          if ((v3 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n();
            uint64_t v26 = 0;
            uint64_t v27 = 0;
          }
          else
          {
            swift_bridgeObjectRetain_n();
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            if ((v23 & 0x1000000000000000) == 0) {
              goto LABEL_37;
            }
          }
          goto LABEL_38;
        }
        swift_bridgeObjectRetain_n();
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        while (1)
        {
          unsigned int v28 = sub_1DD8A7660();
LABEL_39:
          unsigned int v30 = v28;
          uint64_t v31 = v29;
          uint64_t v32 = v26;
          if (v28 >= 0x10000)
          {
            uint64_t v32 = sub_1DD8A77E0();
            unsigned __int16 v33 = sub_1DD8A77E0();
          }
          else
          {
            unsigned __int16 v33 = v28;
          }
          v27 += v31;
          if (utf16CheckIsCyrillic(v33))
          {
            if (qword_1EAB68A30 != -1) {
              swift_once();
            }
            if (!*(void *)(qword_1EAB68A38 + 16)) {
              break;
            }
            sub_1DD73E8B8(v33);
            if ((v34 & 1) == 0) {
              break;
            }
          }
          if (v30 >= 0x10000)
          {
            uint64_t v26 = 0;
            if (utf16CheckIsCyrillic((unsigned __int16)v32))
            {
              if (qword_1EAB68A30 != -1) {
                swift_once();
              }
              if (!*(void *)(qword_1EAB68A38 + 16)) {
                break;
              }
              sub_1DD73E8B8(v32);
              uint64_t v26 = 0;
              if ((v35 & 1) == 0) {
                break;
              }
            }
          }
          else
          {
            uint64_t v26 = v32;
          }
          if (v27 >= v25)
          {
LABEL_67:

            swift_bridgeObjectRelease_n();
            uint64_t v14 = 1;
            goto LABEL_68;
          }
          if ((v3 & 0x1000000000000000) == 0)
          {
            if ((v3 & 0x2000000000000000) == 0 && (v23 & 0x1000000000000000) == 0) {
LABEL_37:
            }
              sub_1DD8A7680();
LABEL_38:
            unsigned int v28 = sub_1DD8A7690();
            goto LABEL_39;
          }
        }
        swift_bridgeObjectRelease_n();
        if ((v3 & 0x1000000000000000) == 0)
        {
          if ((v3 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n();
            unsigned __int16 v36 = 0;
            uint64_t v37 = 0;
          }
          else
          {
            swift_bridgeObjectRetain_n();
            unsigned __int16 v36 = 0;
            uint64_t v37 = 0;
            if ((v23 & 0x1000000000000000) == 0) {
              goto LABEL_73;
            }
          }
          goto LABEL_74;
        }
        swift_bridgeObjectRetain_n();
        unsigned __int16 v36 = 0;
        uint64_t v37 = 0;
        while (1)
        {
          unsigned int v39 = sub_1DD8A7660();
LABEL_75:
          unsigned int v41 = v39;
          uint64_t v42 = v40;
          if (v39 >= 0x10000)
          {
            unsigned __int16 v36 = sub_1DD8A77E0();
            unsigned __int16 v43 = sub_1DD8A77E0();
          }
          else
          {
            unsigned __int16 v43 = v39;
          }
          v37 += v42;
          if (qword_1EAB68A40 != -1) {
            swift_once();
          }
          if (!*(void *)(qword_1EAB68A48 + 16)) {
            break;
          }
          sub_1DD73E8B8(v43);
          if ((v44 & 1) == 0) {
            break;
          }
          if (v41 >= 0x10000)
          {
            sub_1DD73E8B8(v36);
            unsigned __int16 v36 = 0;
            if ((v45 & 1) == 0) {
              break;
            }
          }
          if (v37 >= v25) {
            goto LABEL_67;
          }
          if ((v3 & 0x1000000000000000) == 0)
          {
            if ((v3 & 0x2000000000000000) == 0 && (v23 & 0x1000000000000000) == 0) {
LABEL_73:
            }
              sub_1DD8A7680();
LABEL_74:
            unsigned int v39 = sub_1DD8A7690();
            goto LABEL_75;
          }
        }
        swift_bridgeObjectRelease_n();

        uint64_t v14 = 0;
LABEL_68:
        uint64_t v13 = v138;
        uint64_t v20 = v17 - 3;
      }
      else
      {

        uint64_t v14 = 1;
      }
      swift_bridgeObjectRelease();
      BOOL v38 = __OFADD__(v16, v14);
      v16 += v14;
      uint64_t v4 = v140;
      if (v38) {
        goto LABEL_175;
      }
      ++v17;
      unint64_t v3 = v150;
    }
    while (v20 != v146);
    swift_release();
    if (v16 <= 0)
    {
      swift_release();
      goto LABEL_178;
    }
    if (v136)
    {
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_1DD8A7700();
      swift_release();
    }
    else
    {
      uint64_t v46 = *(void *)(v13 + 16);
    }
    swift_release();
    if (v16 != v46) {
      goto LABEL_178;
    }
    uint64_t v47 = sub_1DD73CC78(v150, (SEL *)&selRef_languageIsLatin_);
    if (!v48) {
      uint64_t v47 = sub_1DD8A7480();
    }
    uint64_t v2 = v47;
    uint64_t v1 = v48;
    if (!v137)
    {
      uint64_t v49 = *(void *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_101;
    }
    goto LABEL_309;
  }
LABEL_177:
  swift_release_n();
LABEL_178:
  uint64_t v159 = MEMORY[0x1E4FBC860];
  if (v4)
  {
    v80 = self;
    swift_bridgeObjectRetain();
    for (uint64_t j = 0; j != v4; ++j)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v82 = (id)MEMORY[0x1E01BE120](j, v3);
      }
      else {
        id v82 = *(id *)(v3 + 8 * j + 32);
      }
      uint64_t v83 = v82;
      id v84 = objc_msgSend(v82, sel_locale);
      sub_1DD8A7480();

      uint64_t v85 = (void *)sub_1DD8A7470();
      swift_bridgeObjectRelease();
      unsigned int v86 = objc_msgSend(v80, sel_languageIsLatin_, v85);

      if (v86)
      {
        sub_1DD8A76A0();
        sub_1DD8A76D0();
        sub_1DD8A76E0();
        sub_1DD8A76B0();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v87 = v159;
  }
  else
  {
    uint64_t v87 = MEMORY[0x1E4FBC860];
  }
  LODWORD(v88) = v87 < 0 || (v87 & 0x4000000000000000) != 0;
  if (v88 == 1) {
    goto LABEL_303;
  }
  uint64_t v89 = *(void *)(v87 + 16);
  swift_retain();
  uint64_t v148 = v89;
  if (!v89)
  {
LABEL_304:
    swift_release();
LABEL_305:
    swift_release();
LABEL_306:
    swift_bridgeObjectRetain();
    return (id)v3;
  }
LABEL_194:
  int v139 = v88;
  uint64_t v90 = 0;
  uint64_t v141 = v87;
  unint64_t v144 = v87 & 0xC000000000000001;
  unint64_t v3 = 4;
  do
  {
    uint64_t v88 = v3 - 4;
    if (v144) {
      id v91 = (id)MEMORY[0x1E01BE120](v3 - 4, v87);
    }
    else {
      id v91 = *(id *)(v87 + 8 * v3);
    }
    v92 = v91;
    unint64_t v93 = v3 - 3;
    if (__OFADD__(v88, 1))
    {
      __break(1u);
LABEL_302:
      __break(1u);
LABEL_303:
      swift_retain();
      uint64_t v148 = sub_1DD8A7700();
      if (v148) {
        goto LABEL_194;
      }
      goto LABEL_304;
    }
    id result = objc_msgSend(v91, sel_text);
    if (!result) {
      goto LABEL_314;
    }
    v94 = result;
    uint64_t v95 = sub_1DD8A7480();
    unint64_t v97 = v96;

    if ((v97 & 0x2000000000000000) != 0) {
      uint64_t v98 = HIBYTE(v97) & 0xF;
    }
    else {
      uint64_t v98 = v95 & 0xFFFFFFFFFFFFLL;
    }
    if (v98)
    {
      v155 = v92;
      if ((v97 & 0x1000000000000000) == 0)
      {
        if ((v97 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v99 = 0;
          uint64_t v100 = 0;
        }
        else
        {
          swift_bridgeObjectRetain_n();
          uint64_t v99 = 0;
          uint64_t v100 = 0;
          if ((v95 & 0x1000000000000000) == 0) {
            goto LABEL_211;
          }
        }
        goto LABEL_212;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      while (1)
      {
        unsigned int v101 = sub_1DD8A7660();
LABEL_213:
        unsigned int v103 = v101;
        uint64_t v104 = v102;
        uint64_t v105 = v99;
        if (v101 >= 0x10000)
        {
          uint64_t v105 = sub_1DD8A77E0();
          unsigned __int16 v106 = sub_1DD8A77E0();
        }
        else
        {
          unsigned __int16 v106 = v101;
        }
        v100 += v104;
        if (utf16CheckIsLatin(v106))
        {
          if (qword_1EAB68A50 != -1) {
            swift_once();
          }
          if (!*(void *)(qword_1EAB68A58 + 16) || (sub_1DD73E8B8(v106), (v107 & 1) == 0))
          {
LABEL_233:
            swift_bridgeObjectRelease_n();

            uint64_t v88 = 0;
            goto LABEL_234;
          }
        }
        if (v103 >= 0x10000)
        {
          uint64_t v99 = 0;
          if (utf16CheckIsLatin((unsigned __int16)v105))
          {
            if (qword_1EAB68A50 != -1) {
              swift_once();
            }
            if (!*(void *)(qword_1EAB68A58 + 16)) {
              goto LABEL_233;
            }
            sub_1DD73E8B8(v105);
            uint64_t v99 = 0;
            if ((v108 & 1) == 0) {
              goto LABEL_233;
            }
          }
        }
        else
        {
          uint64_t v99 = v105;
        }
        if (v100 >= v98) {
          break;
        }
        if ((v97 & 0x1000000000000000) == 0)
        {
          if ((v97 & 0x2000000000000000) == 0 && (v95 & 0x1000000000000000) == 0) {
LABEL_211:
          }
            sub_1DD8A7680();
LABEL_212:
          unsigned int v101 = sub_1DD8A7690();
          goto LABEL_213;
        }
      }

      swift_bridgeObjectRelease_n();
      uint64_t v88 = 1;
LABEL_234:
      uint64_t v87 = v141;
      unint64_t v93 = v3 - 3;
    }
    else
    {

      uint64_t v88 = 1;
    }
    swift_bridgeObjectRelease();
    BOOL v38 = __OFADD__(v90, v88);
    v90 += v88;
    if (v38) {
      goto LABEL_302;
    }
    ++v3;
  }
  while (v93 != v148);
  swift_release();
  unint64_t v3 = v150;
  if (v90 <= 0) {
    goto LABEL_305;
  }
  if (v139)
  {
    swift_bridgeObjectRetain();
    uint64_t v109 = sub_1DD8A7700();
    swift_release();
  }
  else
  {
    uint64_t v109 = *(void *)(v87 + 16);
  }
  swift_release();
  if (v90 != v109) {
    goto LABEL_306;
  }
  uint64_t v110 = sub_1DD73CC78(v150, (SEL *)&selRef_languageIsCyrillic_);
  if (!v111) {
    uint64_t v110 = sub_1DD8A7480();
  }
  uint64_t v112 = v110;
  uint64_t v113 = v111;
  if (v137)
  {
    swift_bridgeObjectRetain();
    uint64_t v114 = sub_1DD8A7700();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v114 = *(void *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v114) {
    goto LABEL_300;
  }
  uint64_t v145 = v112;
  uint64_t v149 = v113;
  unint64_t v161 = MEMORY[0x1E4FBC860];
  id result = (id)sub_1DD8A76C0();
  if (v114 < 0) {
    goto LABEL_312;
  }
  uint64_t v115 = 0;
  uint64_t v152 = v114;
  while (1)
  {
    id v116 = (v150 & 0xC000000000000001) != 0
         ? (id)MEMORY[0x1E01BE120](v115, v3)
         : *(id *)(v3 + 8 * v115 + 32);
    v117 = v116;
    id result = objc_msgSend(v116, sel_text);
    if (!result) {
      break;
    }
    v118 = result;
    uint64_t v119 = sub_1DD8A7480();
    unint64_t v121 = v120;

    if ((v121 & 0x2000000000000000) != 0) {
      uint64_t v122 = HIBYTE(v121) & 0xF;
    }
    else {
      uint64_t v122 = v119 & 0xFFFFFFFFFFFFLL;
    }
    if (v122)
    {
      v157 = v117;
      if ((v121 & 0x1000000000000000) == 0)
      {
        if ((v121 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v123 = 0;
          uint64_t v124 = 0;
        }
        else
        {
          swift_bridgeObjectRetain_n();
          uint64_t v123 = 0;
          uint64_t v124 = 0;
          if ((v119 & 0x1000000000000000) == 0) {
            goto LABEL_267;
          }
        }
        goto LABEL_268;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      while (1)
      {
        unsigned int v125 = sub_1DD8A7660();
LABEL_269:
        unsigned int v127 = v125;
        uint64_t v128 = v126;
        uint64_t v129 = v123;
        if (v125 >= 0x10000)
        {
          uint64_t v129 = sub_1DD8A77E0();
          unsigned __int16 v130 = sub_1DD8A77E0();
        }
        else
        {
          unsigned __int16 v130 = v125;
        }
        v124 += v128;
        if (utf16CheckIsLatin(v130))
        {
          if (qword_1EAB68A50 != -1) {
            swift_once();
          }
          if (!*(void *)(qword_1EAB68A58 + 16)) {
            break;
          }
          sub_1DD73E8B8(v130);
          if ((v131 & 1) == 0) {
            break;
          }
        }
        if (v127 >= 0x10000)
        {
          uint64_t v123 = 0;
          if (utf16CheckIsLatin((unsigned __int16)v129))
          {
            if (qword_1EAB68A50 != -1) {
              swift_once();
            }
            if (!*(void *)(qword_1EAB68A58 + 16)) {
              break;
            }
            sub_1DD73E8B8(v129);
            uint64_t v123 = 0;
            if ((v132 & 1) == 0) {
              break;
            }
          }
        }
        else
        {
          uint64_t v123 = v129;
        }
        if (v124 >= v122)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v114 = v152;
          v117 = v157;
          goto LABEL_295;
        }
        if ((v121 & 0x1000000000000000) == 0)
        {
          if ((v121 & 0x2000000000000000) == 0 && (v119 & 0x1000000000000000) == 0) {
LABEL_267:
          }
            sub_1DD8A7680();
LABEL_268:
          unsigned int v125 = sub_1DD8A7690();
          goto LABEL_269;
        }
      }
      swift_bridgeObjectRelease_n();
      unint64_t v3 = v150;
      uint64_t v114 = v152;
    }
    else
    {
LABEL_295:
      swift_bridgeObjectRelease();
      self;
      uint64_t v133 = swift_dynamicCastObjCClass();
      if (v133)
      {
        v134 = (void *)v133;
        id v135 = v117;
      }
      else
      {
        objc_msgSend(v117, sel_mutableCopy);
        sub_1DD8A7640();
        swift_unknownObjectRelease();
        sub_1DD73872C(0, &qword_1EAB58478);
        swift_dynamicCast();
        v134 = v160;
      }
      unint64_t v3 = v150;
      sub_1DD73BF7C(v134, v145, v149);
    }
    ++v115;
    sub_1DD8A76A0();
    sub_1DD8A76D0();
    sub_1DD8A76E0();
    sub_1DD8A76B0();
    if (v114 == v115)
    {
LABEL_299:
      unint64_t v3 = v161;
      swift_bridgeObjectRelease();
      return (id)v3;
    }
  }
LABEL_316:
  __break(1u);
  return result;
}

uint64_t static CRCorrectLatinCyrillicAmbiguities.fixLatin(correctableText:)(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  sub_1DD740090(a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_1DD8A7460();
  swift_bridgeObjectRelease();
  return v4;
}

void *sub_1DD73E56C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58498);
  unint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = sub_1DD73F908((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1DD73B6D8();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

char *sub_1DD73E664(char *a1, int64_t a2, char a3)
{
  id result = sub_1DD73E7C0(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

void *sub_1DD73E684(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58498);
    id v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    id v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB584A0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1DD73E7C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58480);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    id v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 2 * v8);
  }
  swift_release();
  return v10;
}

unint64_t sub_1DD73E8B8(unsigned __int16 a1)
{
  uint64_t v3 = MEMORY[0x1E01BE260](*(void *)(v1 + 40), a1, 2);
  return sub_1DD73F6B8(a1, v3);
}

uint64_t sub_1DD73E900(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58490);
  char v37 = a2;
  uint64_t v6 = sub_1DD8A7720();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_1DD8A77C0();
    sub_1DD8A74A0();
    uint64_t result = sub_1DD8A77D0();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    id v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *id v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1DD73EC0C(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1DD73FB10(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_1DD73EC78(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1DD73EC78(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1DD8A7740();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v86 = 0;
      uint64_t v87 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v89 = *(void *)(v87 + 24 * i + 16);
        uint64_t v90 = v86;
        do
        {
          uint64_t v91 = v87 + v90;
          if (*(void *)(v87 + v90 + 16) >= v89) {
            break;
          }
          if (!v87) {
            goto LABEL_141;
          }
          uint64_t v92 = *(void *)(v91 + 24);
          unint64_t v93 = (void *)(v87 + v90);
          uint64_t v94 = *(void *)(v87 + v90 + 32);
          *(_OWORD *)(v91 + 24) = *(_OWORD *)v91;
          uint64_t result = *(void *)(v91 + 16);
          *(void *)(v91 + 40) = result;
          *unint64_t v93 = v92;
          v93[1] = v94;
          *(void *)(v91 + 16) = v89;
          v90 -= 24;
        }
        while (v90 != -24);
        v86 += 24;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_136;
    }
    uint64_t v6 = result;
    uint64_t v102 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB584A0);
      uint64_t result = sub_1DD8A75A0();
      *(void *)(result + 16) = v7;
      uint64_t v104 = result;
      char v108 = (char *)(result + 32);
LABEL_13:
      uint64_t v9 = 0;
      uint64_t v10 = *a1;
      uint64_t v103 = *a1 + 64;
      uint64_t v11 = MEMORY[0x1E4FBC860];
      uint64_t v105 = v6;
      uint64_t v106 = v3;
      uint64_t v107 = v10;
      while (1)
      {
        uint64_t v13 = v9++;
        if (v9 < v3)
        {
          uint64_t v14 = *(void *)(v10 + 24 * v9 + 16);
          uint64_t v15 = *(void *)(v10 + 24 * v13 + 16);
          uint64_t v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            unint64_t v16 = (uint64_t *)(v103 + 24 * v13);
            uint64_t v17 = v14;
            while (1)
            {
              uint64_t v19 = *v16;
              v16 += 3;
              uint64_t v18 = v19;
              if (v15 < v14 == v17 >= v19) {
                break;
              }
              ++v9;
              uint64_t v17 = v18;
              if (v3 == v9)
              {
                uint64_t v9 = v3;
                break;
              }
            }
          }
          if (v15 < v14)
          {
            if (v9 < v13) {
              goto LABEL_138;
            }
            if (v13 < v9)
            {
              uint64_t v20 = 24 * v9;
              uint64_t v21 = 24 * v13;
              uint64_t v22 = v9;
              uint64_t v23 = v13;
              do
              {
                if (v23 != --v22)
                {
                  if (!v10) {
                    goto LABEL_144;
                  }
                  uint64_t v24 = v10 + v21;
                  uint64_t v25 = v10 + v20;
                  long long v26 = *(_OWORD *)(v10 + v21);
                  uint64_t v27 = *(void *)(v10 + v21 + 16);
                  uint64_t v28 = *(void *)(v10 + v20 - 8);
                  *(_OWORD *)uint64_t v24 = *(_OWORD *)(v10 + v20 - 24);
                  *(void *)(v24 + 16) = v28;
                  *(_OWORD *)(v25 - 24) = v26;
                  *(void *)(v25 - 8) = v27;
                }
                ++v23;
                v20 -= 24;
                v21 += 24;
              }
              while (v23 < v22);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13)) {
            goto LABEL_135;
          }
          if (v9 - v13 < v6)
          {
            uint64_t v29 = v13 + v6;
            if (__OFADD__(v13, v6)) {
              goto LABEL_139;
            }
            if (v29 >= v3) {
              uint64_t v29 = v3;
            }
            if (v29 < v13)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v9 != v29)
            {
              uint64_t v30 = (uint64_t *)(v10 + 24 * v9);
              do
              {
                uint64_t v31 = *(void *)(v10 + 24 * v9 + 16);
                uint64_t v32 = v13;
                uint64_t v33 = v30;
                do
                {
                  if (*(v33 - 1) >= v31) {
                    break;
                  }
                  if (!v10) {
                    goto LABEL_142;
                  }
                  uint64_t v34 = *v33;
                  uint64_t v35 = v33[1];
                  *(_OWORD *)uint64_t v33 = *(_OWORD *)(v33 - 3);
                  v33[2] = *(v33 - 1);
                  *(v33 - 2) = v35;
                  *(v33 - 1) = v31;
                  *(v33 - 3) = v34;
                  v33 -= 3;
                  ++v32;
                }
                while (v9 != v32);
                ++v9;
                v30 += 3;
              }
              while (v9 != v29);
              uint64_t v9 = v29;
            }
          }
        }
        if (v9 < v13) {
          goto LABEL_130;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1DD73F5A8(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
          uint64_t v11 = result;
        }
        unint64_t v37 = *(void *)(v11 + 16);
        unint64_t v36 = *(void *)(v11 + 24);
        unint64_t v12 = v37 + 1;
        uint64_t v10 = v107;
        if (v37 >= v36 >> 1)
        {
          uint64_t result = (uint64_t)sub_1DD73F5A8((char *)(v36 > 1), v37 + 1, 1, (char *)v11);
          uint64_t v10 = v107;
          uint64_t v11 = result;
        }
        *(void *)(v11 + 16) = v12;
        uint64_t v38 = v11 + 32;
        unsigned int v39 = (uint64_t *)(v11 + 32 + 16 * v37);
        *unsigned int v39 = v13;
        v39[1] = v9;
        if (v37)
        {
          while (1)
          {
            unint64_t v40 = v12 - 1;
            if (v12 >= 4)
            {
              unint64_t v45 = v38 + 16 * v12;
              uint64_t v46 = *(void *)(v45 - 64);
              uint64_t v47 = *(void *)(v45 - 56);
              BOOL v51 = __OFSUB__(v47, v46);
              uint64_t v48 = v47 - v46;
              if (v51) {
                goto LABEL_119;
              }
              uint64_t v50 = *(void *)(v45 - 48);
              uint64_t v49 = *(void *)(v45 - 40);
              BOOL v51 = __OFSUB__(v49, v50);
              uint64_t v43 = v49 - v50;
              char v44 = v51;
              if (v51) {
                goto LABEL_120;
              }
              unint64_t v52 = v12 - 2;
              unint64_t v53 = (uint64_t *)(v38 + 16 * (v12 - 2));
              uint64_t v55 = *v53;
              uint64_t v54 = v53[1];
              BOOL v51 = __OFSUB__(v54, v55);
              uint64_t v56 = v54 - v55;
              if (v51) {
                goto LABEL_121;
              }
              BOOL v51 = __OFADD__(v43, v56);
              uint64_t v57 = v43 + v56;
              if (v51) {
                goto LABEL_123;
              }
              if (v57 >= v48)
              {
                char v75 = (uint64_t *)(v38 + 16 * v40);
                uint64_t v77 = *v75;
                uint64_t v76 = v75[1];
                BOOL v51 = __OFSUB__(v76, v77);
                uint64_t v78 = v76 - v77;
                if (v51) {
                  goto LABEL_129;
                }
                BOOL v68 = v43 < v78;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                uint64_t v69 = *(void *)(v11 + 32);
                uint64_t v70 = *(void *)(v11 + 40);
                BOOL v51 = __OFSUB__(v70, v69);
                uint64_t v62 = v70 - v69;
                char v63 = v51;
                goto LABEL_77;
              }
              uint64_t v42 = *(void *)(v11 + 32);
              uint64_t v41 = *(void *)(v11 + 40);
              BOOL v51 = __OFSUB__(v41, v42);
              uint64_t v43 = v41 - v42;
              char v44 = v51;
            }
            if (v44) {
              goto LABEL_122;
            }
            unint64_t v52 = v12 - 2;
            uint64_t v58 = (uint64_t *)(v38 + 16 * (v12 - 2));
            uint64_t v60 = *v58;
            uint64_t v59 = v58[1];
            BOOL v61 = __OFSUB__(v59, v60);
            uint64_t v62 = v59 - v60;
            char v63 = v61;
            if (v61) {
              goto LABEL_124;
            }
            uint64_t v64 = (uint64_t *)(v38 + 16 * v40);
            uint64_t v66 = *v64;
            uint64_t v65 = v64[1];
            BOOL v51 = __OFSUB__(v65, v66);
            uint64_t v67 = v65 - v66;
            if (v51) {
              goto LABEL_126;
            }
            if (__OFADD__(v62, v67)) {
              goto LABEL_128;
            }
            if (v62 + v67 >= v43)
            {
              BOOL v68 = v43 < v67;
LABEL_83:
              if (v68) {
                unint64_t v40 = v52;
              }
              goto LABEL_85;
            }
LABEL_77:
            if (v63) {
              goto LABEL_125;
            }
            uint64_t v71 = (uint64_t *)(v38 + 16 * v40);
            uint64_t v73 = *v71;
            uint64_t v72 = v71[1];
            BOOL v51 = __OFSUB__(v72, v73);
            uint64_t v74 = v72 - v73;
            if (v51) {
              goto LABEL_127;
            }
            if (v74 < v62) {
              goto LABEL_15;
            }
LABEL_85:
            unint64_t v79 = v40 - 1;
            if (v40 - 1 >= v12)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v10) {
              goto LABEL_143;
            }
            uint64_t v80 = v11;
            uint64_t v81 = (uint64_t *)(v38 + 16 * v79);
            uint64_t v82 = *v81;
            uint64_t v83 = (void *)(v38 + 16 * v40);
            uint64_t v84 = v83[1];
            uint64_t result = sub_1DD73F348((char *)(v10 + 24 * *v81), (char *)(v10 + 24 * *v83), v10 + 24 * v84, v108);
            if (v1) {
              goto LABEL_93;
            }
            if (v84 < v82) {
              goto LABEL_116;
            }
            if (v40 > *(void *)(v80 + 16)) {
              goto LABEL_117;
            }
            *uint64_t v81 = v82;
            *(void *)(v38 + 16 * v79 + 8) = v84;
            unint64_t v85 = *(void *)(v80 + 16);
            if (v40 >= v85) {
              goto LABEL_118;
            }
            uint64_t v11 = v80;
            unint64_t v12 = v85 - 1;
            uint64_t result = (uint64_t)memmove((void *)(v38 + 16 * v40), v83 + 2, 16 * (v85 - 1 - v40));
            *(void *)(v80 + 16) = v85 - 1;
            uint64_t v10 = v107;
            if (v85 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v12 = 1;
LABEL_15:
        uint64_t v6 = v105;
        uint64_t v3 = v106;
        if (v9 >= v106)
        {
          uint64_t v8 = v104;
          goto LABEL_102;
        }
      }
    }
    uint64_t v8 = MEMORY[0x1E4FBC860];
    char v108 = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 == 1)
    {
      uint64_t v104 = MEMORY[0x1E4FBC860];
      goto LABEL_13;
    }
    unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    uint64_t v11 = MEMORY[0x1E4FBC860];
LABEL_102:
    uint64_t result = v11;
    uint64_t v104 = v8;
    if (v12 >= 2)
    {
      uint64_t v95 = *v102;
      do
      {
        unint64_t v96 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_131;
        }
        if (!v95) {
          goto LABEL_145;
        }
        uint64_t v97 = result;
        uint64_t v98 = *(void *)(result + 32 + 16 * v96);
        uint64_t v99 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
        uint64_t result = sub_1DD73F348((char *)(v95 + 24 * v98), (char *)(v95 + 24 * *(void *)(result + 32 + 16 * (v12 - 1))), v95 + 24 * v99, v108);
        if (v1) {
          break;
        }
        if (v99 < v98) {
          goto LABEL_132;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1DD73F6A4(v97);
          uint64_t v97 = result;
        }
        if (v96 >= *(void *)(v97 + 16)) {
          goto LABEL_133;
        }
        uint64_t v100 = (void *)(v97 + 32 + 16 * v96);
        *uint64_t v100 = v98;
        v100[1] = v99;
        unint64_t v101 = *(void *)(v97 + 16);
        if (v12 > v101) {
          goto LABEL_134;
        }
        memmove((void *)(v97 + 32 + 16 * (v12 - 1)), (const void *)(v97 + 32 + 16 * v12), 16 * (v101 - v12));
        uint64_t result = v97;
        *(void *)(v97 + 16) = v101 - 1;
        unint64_t v12 = v101 - 1;
      }
      while (v101 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(void *)(v104 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1DD73F348(char *__dst, char *__src, unint64_t a3, char *a4)
{
  size_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 24;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[24 * v11] <= a4) {
      memmove(a4, __src, 24 * v11);
    }
    unint64_t v12 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_39;
    }
    unint64_t v17 = a3 - 24;
    while (1)
    {
      uint64_t v18 = (char *)(v17 + 24);
      if (*((void *)v6 - 1) >= *((void *)v12 - 1))
      {
        uint64_t v19 = v12 - 24;
        if (v18 != v12)
        {
          v12 -= 24;
          goto LABEL_36;
        }
        BOOL v20 = v17 >= (unint64_t)v12;
        v12 -= 24;
        if (v20) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v19 = v6 - 24;
        if (v18 != v6)
        {
          v6 -= 24;
LABEL_36:
          long long v21 = *(_OWORD *)v19;
          *(void *)(v17 + 16) = *((void *)v19 + 2);
          *(_OWORD *)unint64_t v17 = v21;
          goto LABEL_37;
        }
        BOOL v20 = v17 >= (unint64_t)v6;
        v6 -= 24;
        if (v20) {
          goto LABEL_36;
        }
      }
LABEL_37:
      if (v6 > v7)
      {
        v17 -= 24;
        if (v12 > v4) {
          continue;
        }
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[24 * v9] <= a4) {
    memmove(a4, __dst, 24 * v9);
  }
  unint64_t v12 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      if (*((void *)v4 + 2) >= *((void *)v6 + 2))
      {
        uint64_t v15 = v4 + 24;
        uint64_t v14 = v4;
        uint64_t v13 = v6;
        if (v7 == v4)
        {
          v4 += 24;
          if (v7 < v15) {
            goto LABEL_16;
          }
        }
        else
        {
          v4 += 24;
        }
      }
      else
      {
        uint64_t v13 = v6 + 24;
        uint64_t v14 = v6;
        if (v7 == v6 && v7 < v13) {
          goto LABEL_16;
        }
      }
      long long v16 = *(_OWORD *)v14;
      *((void *)v7 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v7 = v16;
LABEL_16:
      v7 += 24;
      if (v4 < v12)
      {
        uint64_t v6 = v13;
        if ((unint64_t)v13 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v6 = v7;
LABEL_39:
  uint64_t v22 = (unsigned __int128)((v12 - v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  uint64_t v23 = (v22 >> 2) + ((unint64_t)v22 >> 63);
  if (v6 != v4 || v6 >= &v4[24 * v23]) {
    memmove(v6, v4, 24 * v23);
  }
  return 1;
}

char *sub_1DD73F5A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB584A8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1DD73F6A4(uint64_t a1)
{
  return sub_1DD73F5A8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_1DD73F6B8(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

void *sub_1DD73F758()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58490);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1DD8A7710();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1DD73F908(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v22;
    v11[1] = v21;
    v11[2] = v23;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    unint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1DD73FB10(void *a1)
{
  return sub_1DD73E684(0, a1[2], 0, a1);
}

unint64_t sub_1DD73FB24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB58488);
    uint64_t v3 = (void *)sub_1DD8A7730();
    for (uint64_t i = (__int16 *)(a1 + 34); ; i += 2)
    {
      unsigned __int16 v5 = *(i - 1);
      __int16 v6 = *i;
      unint64_t result = sub_1DD73E8B8(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 2 * result;
      *(_WORD *)(v3[6] + v9) = v5;
      *(_WORD *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

uint64_t _s15TextRecognition33CRCorrectLatinCyrillicAmbiguitiesV03fixE0011correctableA0S2S_tFZ_0(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1DD73C8CC(a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v5 = *((void *)v4 + 2);
  if (v5)
  {
    uint64_t v6 = qword_1EAB68A40;
    swift_bridgeObjectRetain();
    if (v6 != -1) {
LABEL_31:
    }
      swift_once();
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(qword_1EAB68A48 + 16);
    while (1)
    {
      uint64_t v9 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (!v8) {
        break;
      }
      sub_1DD73E8B8(*(_WORD *)&v4[2 * v7 + 32]);
      if ((v10 & 1) == 0) {
        break;
      }
      ++v7;
      if (v9 == v5)
      {
        swift_bridgeObjectRelease();
        int64_t v11 = *((void *)v4 + 2);
        if (v11)
        {
          uint64_t v29 = MEMORY[0x1E4FBC860];
          sub_1DD73E664(0, v11, 0);
          if (qword_1EAB68A40 != -1) {
            swift_once();
          }
          uint64_t v12 = 0;
          uint64_t v13 = qword_1EAB68A48;
          do
          {
            __int16 v14 = *(_WORD *)&v4[2 * v12 + 32];
            if (*(void *)(v13 + 16))
            {
              unint64_t v15 = sub_1DD73E8B8(*(_WORD *)&v4[2 * v12 + 32]);
              if (v16) {
                __int16 v14 = *(_WORD *)(*(void *)(v13 + 56) + 2 * v15);
              }
            }
            unint64_t v18 = *(void *)(v29 + 16);
            unint64_t v17 = *(void *)(v29 + 24);
            if (v18 >= v17 >> 1) {
              sub_1DD73E664((char *)(v17 > 1), v18 + 1, 1);
            }
            ++v12;
            *(void *)(v29 + 16) = v18 + 1;
            *(_WORD *)(v29 + 2 * v18 + 32) = v14;
          }
          while (v11 != v12);
        }
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRelease();
    int64_t v19 = *((void *)v4 + 2);
    if (v19)
    {
      uint64_t v30 = MEMORY[0x1E4FBC860];
      sub_1DD73E664(0, v19, 0);
      if (qword_1EAB68A30 != -1) {
        swift_once();
      }
      uint64_t v20 = 0;
      uint64_t v21 = qword_1EAB68A38;
      do
      {
        __int16 v22 = *(_WORD *)&v4[2 * v20 + 32];
        if (*(void *)(v21 + 16))
        {
          unint64_t v23 = sub_1DD73E8B8(*(_WORD *)&v4[2 * v20 + 32]);
          if (v24) {
            __int16 v22 = *(_WORD *)(*(void *)(v21 + 56) + 2 * v23);
          }
        }
        unint64_t v26 = *(void *)(v30 + 16);
        unint64_t v25 = *(void *)(v30 + 24);
        if (v26 >= v25 >> 1) {
          sub_1DD73E664((char *)(v25 > 1), v26 + 1, 1);
        }
        ++v20;
        *(void *)(v30 + 16) = v26 + 1;
        *(_WORD *)(v30 + 2 * v26 + 32) = v22;
      }
      while (v19 != v20);
    }
  }
LABEL_29:
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1DD8A7460();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t sub_1DD73FEF8(unint64_t a1, SEL *a2)
{
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)MEMORY[0x1E01BE120](v4, a1);
LABEL_9:
        uint64_t v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_17;
        }
        id v8 = objc_msgSend(v5, sel_locale);
        if (!v8)
        {
          sub_1DD8A7480();
          id v8 = (id)sub_1DD8A7470();
          swift_bridgeObjectRelease();
        }
        unsigned int v9 = objc_msgSend(self, *a2, v8);

        if (v9)
        {
          sub_1DD8A76A0();
          sub_1DD8A76D0();
          sub_1DD8A76E0();
          sub_1DD8A76B0();
        }
        else
        {
        }
        ++v4;
        if (v7 == v3) {
          return v12;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v3 = sub_1DD8A7700();
      if (!v3) {
        return MEMORY[0x1E4FBC860];
      }
    }
    id v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E4FBC860];
}

char *sub_1DD740090(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
  uint64_t v5 = sub_1DD8A7510();
LABEL_3:
  uint64_t v6 = v5;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!v5) {
    return (char *)v7;
  }
  uint64_t v29 = MEMORY[0x1E4FBC860];
  unint64_t result = sub_1DD73E664(0, v5 & ~(v5 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = ((unint64_t)a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0) {
      LOBYTE(v9) = 1;
    }
    uint64_t v10 = 4 << v9;
    BOOL v11 = a1 < 0;
    if ((a2 & 0x2000000000000000) != 0) {
      unint64_t v12 = v4;
    }
    else {
      unint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if ((a2 & 0x2000000000000000) != 0) {
      BOOL v11 = (a2 & 0x4000000000000000) != 0;
    }
    BOOL v24 = v11;
    unint64_t v13 = 15;
    uint64_t v25 = a1;
    uint64_t v26 = v10;
    while (1)
    {
      if (!v6)
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        uint64_t v5 = sub_1DD8A74F0();
        goto LABEL_3;
      }
      uint64_t v4 = v13 & 0xC;
      unint64_t v14 = v13;
      if (v4 == v10) {
        unint64_t v14 = sub_1DD739DF4(v13, a1, a2);
      }
      if (v14 >> 16 >= v12) {
        goto LABEL_66;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        LOWORD(v15) = sub_1DD8A7520();
LABEL_33:
        LOWORD(v16) = v15;
        goto LABEL_34;
      }
      if (v14)
      {
        if ((a2 & 0x2000000000000000) != 0) {
          goto LABEL_26;
        }
      }
      else
      {
        sub_1DD739E70(v14, a1, a2);
        if ((a2 & 0x2000000000000000) != 0)
        {
LABEL_26:
          uint64_t v27 = a1;
          uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_27;
        }
      }
      if ((a1 & 0x1000000000000000) == 0) {
        sub_1DD8A7680();
      }
LABEL_27:
      unsigned int v15 = sub_1DD8A7690();
      if ((v14 & 0xC000) == 0x4000)
      {
        if (v15 < 0x10000) {
          goto LABEL_68;
        }
        LOWORD(v16) = v15 & 0x3FF | 0xDC00;
      }
      else
      {
        if (!HIWORD(v15)) {
          goto LABEL_33;
        }
        int v16 = (unsigned __int16)((v15 + 67043328) >> 10) + 55296;
        if ((v16 & 0x10000) != 0) {
          goto LABEL_69;
        }
      }
LABEL_34:
      if (qword_1EAB68A50 != -1) {
        swift_once();
      }
      uint64_t v17 = qword_1EAB68A58;
      if (*(void *)(qword_1EAB68A58 + 16))
      {
        unint64_t v18 = sub_1DD73E8B8(v16);
        if (v19) {
          LOWORD(v16) = *(_WORD *)(*(void *)(v17 + 56) + 2 * v18);
        }
      }
      uint64_t v7 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1DD73E664(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v29;
      }
      unint64_t v21 = *(void *)(v7 + 16);
      unint64_t v20 = *(void *)(v7 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1DD73E664((char *)(v20 > 1), v21 + 1, 1);
        uint64_t v7 = v29;
      }
      *(void *)(v7 + 16) = v21 + 1;
      *(_WORD *)(v7 + 2 * v21 + 32) = v16;
      uint64_t v10 = v26;
      a1 = v25;
      if (v4 == v26) {
        unint64_t v13 = sub_1DD739DF4(v13, v25, a2);
      }
      uint64_t v4 = v13 >> 16;
      if (v13 >> 16 >= v12) {
        goto LABEL_67;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t v13 = MEMORY[0x1E01BDFB0](v13, v25, a2);
        goto LABEL_14;
      }
      if (v24)
      {
        unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_14;
      }
      if ((v13 & 0xC001) != 0)
      {
        if ((a2 & 0x2000000000000000) == 0) {
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v23 = sub_1DD739E70(v13, v25, a2);
        unint64_t v13 = v23 & 0xFFFFFFFFFFFFFFF2 | 1;
        uint64_t v4 = v23 >> 16;
        if ((a2 & 0x2000000000000000) == 0)
        {
LABEL_51:
          if ((v25 & 0x1000000000000000) != 0)
          {
            LODWORD(v22) = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32 + v4);
            if ((v22 & 0x80) == 0) {
              goto LABEL_60;
            }
          }
          else
          {
            LODWORD(v22) = *(unsigned __int8 *)(sub_1DD8A7680() + v4);
            if ((v22 & 0x80) == 0)
            {
LABEL_60:
              uint64_t v22 = 1;
              goto LABEL_61;
            }
          }
          goto LABEL_53;
        }
      }
      uint64_t v27 = v25;
      uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      LODWORD(v22) = *((unsigned __int8 *)&v27 + v4);
      if ((v22 & 0x80) == 0) {
        goto LABEL_60;
      }
LABEL_53:
      LODWORD(v22) = __clz(v22 ^ 0xFF) - 24;
      if (v22 != 4)
      {
        uint64_t v22 = v22;
        goto LABEL_61;
      }
      if ((v13 & 0xC000) != 0)
      {
        uint64_t v22 = 4;
LABEL_61:
        unint64_t v13 = (v13 + (v22 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_14;
      }
      unint64_t v13 = v13 & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_14:
      if (!--v6) {
        return (char *)v7;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1DD740490(uint64_t a1)
{
  if (qword_1EAB68A20 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1EAB68A28;
  uint64_t v3 = *(void *)(qword_1EAB68A28 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 40;
    do
    {
      a1 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(a1);
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1DD740570(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

ValueMetadata *type metadata accessor for CRCorrectLatinCyrillicAmbiguities()
{
  return &type metadata for CRCorrectLatinCyrillicAmbiguities;
}

void sub_1DD740680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD740768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD740A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD740C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD740C88()
{
}

void sub_1DD740C90()
{
}

void sub_1DD740EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1DD741048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7412F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7414E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD74171C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  _Block_object_dispose(&a23, 8);
  std::vector<+[CRFormParser horizontalClustersFromFields:]::ClusteredLine>::~vector[abi:ne180100](a10);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__15(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void **__Block_byref_object_dispose__16(uint64_t a1)
{
  return std::vector<+[CRFormParser horizontalClustersFromFields:]::ClusteredLine>::~vector[abi:ne180100]((void **)(a1 + 48));
}

void sub_1DD741CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD741E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD742270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1DD7423CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD742478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD742A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a14);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a17);

  _Unwind_Resume(a1);
}

void sub_1DD742B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD742C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CRCastAsClass<CROutputRegion>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1DD742C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD742FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1DD743138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD743384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1DD743454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7434C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD743524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD74367C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD743904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

id CRCastAsClass<CRFormFieldOutputRegion>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1DD7439E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD743E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1DD74427C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  id v17 = va_arg(va1, id);
  _Block_object_dispose(va, 8);

  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__125(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__126(uint64_t a1)
{
}

void sub_1DD7443F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD744560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD744660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD744898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD744954(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<unsigned long>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6CDA628, MEMORY[0x1E4FBA1C8]);
}

void sub_1DD744A4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*a1);
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      id v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            id v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *id v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        id v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *id v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::vector<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 3;

        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CTCLayer::CTCLayer(CTCLayer *this)
{
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = (char *)this + 32;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  id v2 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
  *id v2 = &unk_1F38ECED8;
  v2[16] = 0;
  v2[17] = 0;
  *((void *)this + 25) = v2;
  uint64_t v3 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
  *uint64_t v3 = &unk_1F38ECED8;
  v3[16] = 0;
  v3[17] = 0;
  *((void *)this + 26) = v3;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 24) = 103;
}

void sub_1DD744F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = v3;
  v2[25] = 0;
  Matrix<float>::~Matrix(v5);
  uint64_t v7 = (void *)v2[22];
  if (v7)
  {
    v2[23] = v7;
    operator delete(v7);
  }
  int v8 = (void *)v2[19];
  if (v8)
  {
    v2[20] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)v2[16];
  if (v9)
  {
    v2[17] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)v2[13];
  if (v10)
  {
    v2[14] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)v2[10];
  if (v11)
  {
    v2[11] = v11;
    operator delete(v11);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*v4);
  _Unwind_Resume(a1);
}

void CTCLayer::CTCLayer(CTCLayer *this, __int16 a2)
{
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = (char *)this + 32;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  uint64_t v4 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
  *uint64_t v4 = &unk_1F38ECED8;
  v4[16] = 0;
  v4[17] = 0;
  *((void *)this + 25) = v4;
  uint64_t v5 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
  *uint64_t v5 = &unk_1F38ECED8;
  v5[16] = 0;
  v5[17] = 0;
  *((void *)this + 26) = v5;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 24) = a2;
}

void sub_1DD7450A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  v2[25] = 0;
  Matrix<float>::~Matrix(v3);
  int v6 = (void *)v2[22];
  if (v6)
  {
    v2[23] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)v2[19];
  if (v7)
  {
    v2[20] = v7;
    operator delete(v7);
  }
  int v8 = (void *)v2[16];
  if (v8)
  {
    v2[17] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)v2[13];
  if (v9)
  {
    v2[14] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)v2[10];
  if (v10)
  {
    v2[11] = v10;
    operator delete(v10);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*v4);
  _Unwind_Resume(a1);
}

void CTCLayer::~CTCLayer(CTCLayer *this)
{
  uint64_t v2 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 19);
  if (v5)
  {
    *((void *)this + 20) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 16);
  if (v6)
  {
    *((void *)this + 17) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 13);
  if (v7)
  {
    *((void *)this + 14) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 10);
  if (v8)
  {
    *((void *)this + 11) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*((void **)this + 4));
}

void CTCLayer::bestPathDecoding(CTCLayer *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 16);
  uint64_t v3 = *((void *)this + 17);
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    int v6 = a2 + 2;
    do
    {
      int v7 = *(_DWORD *)(v2 + 4);
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v9 = *a2;
        uint64_t v10 = (v5 - *a2) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = *v6 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v13);
          uint64_t v9 = *a2;
          uint64_t v5 = a2[1];
        }
        else
        {
          uint64_t v14 = 0;
        }
        uint64_t v15 = &v14[4 * v10];
        *(_DWORD *)uint64_t v15 = v7;
        int v8 = v15 + 4;
        while (v5 != v9)
        {
          int v16 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[4 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v5 = v7;
        int v8 = v5 + 4;
      }
      a2[1] = v8;
      v2 += 8;
      uint64_t v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1DD74533C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::setCummulativeScores(CTCLayer *this)
{
  uint64_t v3 = (void **)((char *)this + 176);
  uint64_t v2 = *((void *)this + 22);
  *((void *)this + 17) = *((void *)this + 16);
  *((void *)this + 20) = *((void *)this + 19);
  *((void *)this + 23) = v2;
  uint64_t v4 = *(unsigned int *)(*((void *)this + 10) + 4);
  int v5 = *((unsigned __int16 *)this + 24);
  int v98 = v5;
  uint64_t v6 = *((unsigned int *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)this + 3, v5, (unsigned int *)&v98)+ 8);
  uint64_t v8 = (uint64_t)*(v3 - 12);
  uint64_t v7 = (uint64_t)*(v3 - 11);
  if (v7 == v8)
  {
    uint64_t v11 = 0;
    int v10 = 0;
    float v12 = 0.0;
  }
  else
  {
    unint64_t v9 = 0;
    int v10 = 0;
    uint64_t v11 = 0;
    float v12 = 0.0;
    uint64_t v13 = v4;
    do
    {
      uint64_t v4 = *(unsigned int *)(v8 + 8 * v9 + 4);
      if (v4 == v13)
      {
        float v12 = v12 + *(float *)(v8 + 8 * v9);
      }
      else
      {
        if (v13 == v6)
        {
          int v10 = v9;
        }
        else
        {
          unint64_t v14 = LODWORD(v12) | (unint64_t)(v13 << 32);
          int v16 = (unint64_t *)*((void *)this + 17);
          unint64_t v15 = *((void *)this + 18);
          if ((unint64_t)v16 >= v15)
          {
            uint64_t v18 = *((void *)this + 16);
            uint64_t v19 = ((uint64_t)v16 - v18) >> 3;
            if ((unint64_t)(v19 + 1) >> 61) {
              goto LABEL_111;
            }
            uint64_t v20 = v15 - v18;
            uint64_t v21 = v20 >> 2;
            if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
              uint64_t v21 = v19 + 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v21;
            }
            if (v22) {
              unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v22);
            }
            else {
              uint64_t v23 = 0;
            }
            BOOL v24 = (unint64_t *)(v22 + 8 * v19);
            *BOOL v24 = v14;
            id v17 = v24 + 1;
            uint64_t v26 = (char *)*((void *)this + 16);
            uint64_t v25 = (char *)*((void *)this + 17);
            if (v25 != v26)
            {
              do
              {
                unint64_t v27 = *((void *)v25 - 1);
                v25 -= 8;
                *--BOOL v24 = v27;
              }
              while (v25 != v26);
              uint64_t v25 = (char *)*((void *)this + 16);
            }
            *((void *)this + 16) = v24;
            *((void *)this + 17) = v17;
            *((void *)this + 18) = v22 + 8 * v23;
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *int v16 = v14;
            id v17 = v16 + 1;
          }
          *((void *)this + 17) = v17;
          unint64_t v28 = LODWORD(v12) | (unint64_t)(v11 << 32);
          uint64_t v30 = (unint64_t *)*((void *)this + 20);
          unint64_t v29 = *((void *)this + 21);
          if ((unint64_t)v30 >= v29)
          {
            uint64_t v32 = *((void *)this + 19);
            uint64_t v33 = ((uint64_t)v30 - v32) >> 3;
            if ((unint64_t)(v33 + 1) >> 61) {
              goto LABEL_111;
            }
            uint64_t v34 = v29 - v32;
            uint64_t v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
              uint64_t v35 = v33 + 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36) {
              unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v36);
            }
            else {
              uint64_t v37 = 0;
            }
            uint64_t v38 = (unint64_t *)(v36 + 8 * v33);
            *uint64_t v38 = v28;
            uint64_t v31 = v38 + 1;
            unint64_t v40 = (char *)*((void *)this + 19);
            unsigned int v39 = (char *)*((void *)this + 20);
            if (v39 != v40)
            {
              do
              {
                unint64_t v41 = *((void *)v39 - 1);
                v39 -= 8;
                *--uint64_t v38 = v41;
              }
              while (v39 != v40);
              unsigned int v39 = (char *)*((void *)this + 19);
            }
            *((void *)this + 19) = v38;
            *((void *)this + 20) = v31;
            *((void *)this + 21) = v36 + 8 * v37;
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *uint64_t v30 = v28;
            uint64_t v31 = v30 + 1;
          }
          *((void *)this + 20) = v31;
          float v42 = (float)((int)v9 - v10) * 0.5 + (float)v10;
          char v44 = (float *)*((void *)this + 23);
          unint64_t v43 = *((void *)this + 24);
          if ((unint64_t)v44 >= v43)
          {
            uint64_t v46 = (float *)*v3;
            uint64_t v47 = ((char *)v44 - (unsigned char *)*v3) >> 3;
            unint64_t v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61) {
              goto LABEL_112;
            }
            uint64_t v49 = v43 - (void)v46;
            if (v49 >> 2 > v48) {
              unint64_t v48 = v49 >> 2;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v48;
            }
            if (v50)
            {
              BOOL v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 192, v50);
              uint64_t v46 = (float *)*((void *)this + 22);
              char v44 = (float *)*((void *)this + 23);
            }
            else
            {
              BOOL v51 = 0;
            }
            unint64_t v52 = (float *)&v51[8 * v47];
            *unint64_t v52 = v12;
            v52[1] = v42;
            unint64_t v53 = v52;
            if (v44 != v46)
            {
              do
              {
                uint64_t v54 = *((void *)v44 - 1);
                v44 -= 2;
                *((void *)v53 - 1) = v54;
                v53 -= 2;
              }
              while (v44 != v46);
              uint64_t v46 = (float *)*v3;
            }
            unint64_t v45 = v52 + 2;
            *((void *)this + 22) = v53;
            *((void *)this + 23) = v52 + 2;
            *((void *)this + 24) = &v51[8 * v50];
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            float *v44 = v12;
            v44[1] = v42;
            unint64_t v45 = v44 + 2;
          }
          *((void *)this + 23) = v45;
          uint64_t v11 = (v11 + 1);
          int v10 = v9;
          uint64_t v8 = *((void *)this + 10);
          uint64_t v7 = *((void *)this + 11);
        }
        float v12 = *(float *)(v8 + 8 * v9);
      }
      ++v9;
      uint64_t v13 = v4;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  if (v4 != v6)
  {
    unint64_t v55 = LODWORD(v12) | (unint64_t)(v4 << 32);
    uint64_t v57 = (unint64_t *)*((void *)this + 17);
    unint64_t v56 = *((void *)this + 18);
    if ((unint64_t)v57 >= v56)
    {
      uint64_t v59 = *((void *)this + 16);
      uint64_t v60 = ((uint64_t)v57 - v59) >> 3;
      if ((unint64_t)(v60 + 1) >> 61) {
        goto LABEL_111;
      }
      uint64_t v61 = v56 - v59;
      uint64_t v62 = v61 >> 2;
      if (v61 >> 2 <= (unint64_t)(v60 + 1)) {
        uint64_t v62 = v60 + 1;
      }
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v62;
      }
      if (v63) {
        unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v63);
      }
      else {
        uint64_t v64 = 0;
      }
      uint64_t v65 = (unint64_t *)(v63 + 8 * v60);
      unint64_t v66 = v63 + 8 * v64;
      *uint64_t v65 = v55;
      uint64_t v58 = v65 + 1;
      BOOL v68 = (char *)*((void *)this + 16);
      uint64_t v67 = (char *)*((void *)this + 17);
      if (v67 != v68)
      {
        do
        {
          unint64_t v69 = *((void *)v67 - 1);
          v67 -= 8;
          *--uint64_t v65 = v69;
        }
        while (v67 != v68);
        uint64_t v67 = (char *)*((void *)this + 16);
      }
      *((void *)this + 16) = v65;
      *((void *)this + 17) = v58;
      *((void *)this + 18) = v66;
      if (v67) {
        operator delete(v67);
      }
    }
    else
    {
      *uint64_t v57 = v55;
      uint64_t v58 = v57 + 1;
    }
    *((void *)this + 17) = v58;
    unint64_t v70 = LODWORD(v12) | (unint64_t)(v11 << 32);
    uint64_t v72 = (unint64_t *)*((void *)this + 20);
    unint64_t v71 = *((void *)this + 21);
    if ((unint64_t)v72 < v71)
    {
      *uint64_t v72 = v70;
      uint64_t v73 = v72 + 1;
LABEL_93:
      unint64_t v85 = *((void *)this + 24);
      *((void *)this + 20) = v73;
      float v86 = (float)(unint64_t)(((uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3) - v10) * 0.5
          + (float)v10;
      uint64_t v87 = (float *)*((void *)this + 23);
      if ((unint64_t)v87 >= v85)
      {
        uint64_t v89 = (float *)*v3;
        uint64_t v90 = ((char *)v87 - (unsigned char *)*v3) >> 3;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61) {
LABEL_112:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v92 = v85 - (void)v89;
        if (v92 >> 2 > v91) {
          unint64_t v91 = v92 >> 2;
        }
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v91;
        }
        if (v93)
        {
          uint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 192, v93);
          uint64_t v89 = (float *)*((void *)this + 22);
          uint64_t v87 = (float *)*((void *)this + 23);
        }
        else
        {
          uint64_t v94 = 0;
        }
        uint64_t v95 = (float *)&v94[8 * v90];
        unint64_t v96 = &v94[8 * v93];
        *uint64_t v95 = v12;
        v95[1] = v86;
        uint64_t v88 = v95 + 2;
        if (v87 != v89)
        {
          do
          {
            uint64_t v97 = *((void *)v87 - 1);
            v87 -= 2;
            *((void *)v95 - 1) = v97;
            v95 -= 2;
          }
          while (v87 != v89);
          uint64_t v89 = (float *)*v3;
        }
        *((void *)this + 22) = v95;
        *((void *)this + 23) = v88;
        *((void *)this + 24) = v96;
        if (v89) {
          operator delete(v89);
        }
      }
      else
      {
        *uint64_t v87 = v12;
        v87[1] = v86;
        uint64_t v88 = v87 + 2;
      }
      *((void *)this + 23) = v88;
      return;
    }
    uint64_t v74 = *((void *)this + 19);
    uint64_t v75 = ((uint64_t)v72 - v74) >> 3;
    if (!((unint64_t)(v75 + 1) >> 61))
    {
      uint64_t v76 = v71 - v74;
      uint64_t v77 = v76 >> 2;
      if (v76 >> 2 <= (unint64_t)(v75 + 1)) {
        uint64_t v77 = v75 + 1;
      }
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v78 = v77;
      }
      if (v78) {
        unint64_t v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v78);
      }
      else {
        uint64_t v79 = 0;
      }
      uint64_t v80 = (unint64_t *)(v78 + 8 * v75);
      unint64_t v81 = v78 + 8 * v79;
      unint64_t *v80 = v70;
      uint64_t v73 = v80 + 1;
      uint64_t v83 = (char *)*((void *)this + 19);
      uint64_t v82 = (char *)*((void *)this + 20);
      if (v82 != v83)
      {
        do
        {
          unint64_t v84 = *((void *)v82 - 1);
          v82 -= 8;
          *--uint64_t v80 = v84;
        }
        while (v82 != v83);
        uint64_t v82 = (char *)*((void *)this + 19);
      }
      *((void *)this + 19) = v80;
      *((void *)this + 20) = v73;
      *((void *)this + 21) = v81;
      if (v82) {
        operator delete(v82);
      }
      goto LABEL_93;
    }
LABEL_111:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
}

void CTCLayer::pathDecodingFixedLength(CTCLayer *this@<X0>, int a2@<W1>, char **a3@<X8>)
{
  unint64_t v6 = *((void *)this + 20);
  unint64_t v7 = *((void *)this + 19);
  unint64_t v8 = 126 - 2 * __clz((uint64_t)(v6 - v7) >> 3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v6 == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>,false>(v6, v6, v7, v7, v9, 1);
  __p = 0;
  unint64_t v40 = 0;
  unint64_t v41 = 0;
  uint64_t v10 = *((void *)this + 19);
  unint64_t v11 = (*((void *)this + 20) - v10) >> 3;
  float v12 = 0;
  if (v11 >= a2) {
    unint64_t v11 = a2;
  }
  if (v11)
  {
    unint64_t v13 = 0;
    do
    {
      unint64_t v14 = (_DWORD *)(v10 + 8 * v13 + 4);
      if ((unint64_t)v12 >= v41)
      {
        unint64_t v15 = __p;
        uint64_t v16 = (v12 - __p) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v41 - (void)__p;
        if ((uint64_t)(v41 - (void)__p) >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v41, v19);
          uint64_t v21 = v20;
          unint64_t v15 = __p;
          float v12 = v40;
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = (char *)(v19 + 4 * v16);
        *(_DWORD *)unint64_t v22 = *v14;
        uint64_t v23 = v22 + 4;
        while (v12 != v15)
        {
          int v24 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v22 - 1) = v24;
          v22 -= 4;
        }
        __p = v22;
        unint64_t v41 = v19 + 4 * v21;
        if (v15) {
          operator delete(v15);
        }
        float v12 = v23;
      }
      else
      {
        *(_DWORD *)float v12 = *v14;
        v12 += 4;
      }
      unint64_t v40 = v12;
      ++v13;
      uint64_t v10 = *((void *)this + 19);
      unint64_t v25 = (*((void *)this + 20) - v10) >> 3;
      if (v25 >= a2) {
        unint64_t v25 = a2;
      }
    }
    while (v25 > v13);
  }
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v26 = (int *)__p;
  if (__p != v40)
  {
    unint64_t v27 = a3 + 2;
    unint64_t v28 = a3[1];
    do
    {
      int v29 = *(_DWORD *)(*((void *)this + 16) + 8 * *v26 + 4);
      if ((unint64_t)v28 >= *v27)
      {
        uint64_t v31 = *a3;
        uint64_t v32 = (v28 - *a3) >> 2;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = *v27 - (void)v31;
        if (v34 >> 1 > v33) {
          unint64_t v33 = v34 >> 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          unint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v35);
          uint64_t v31 = *a3;
          unint64_t v28 = a3[1];
        }
        else
        {
          unint64_t v36 = 0;
        }
        uint64_t v37 = &v36[4 * v32];
        *(_DWORD *)uint64_t v37 = v29;
        uint64_t v30 = v37 + 4;
        while (v28 != v31)
        {
          int v38 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *((_DWORD *)v37 - 1) = v38;
          v37 -= 4;
        }
        *a3 = v37;
        a3[1] = v30;
        a3[2] = &v36[4 * v35];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v28 = v29;
        uint64_t v30 = v28 + 4;
      }
      a3[1] = v30;
      ++v26;
      unint64_t v28 = v30;
    }
    while (v26 != (int *)v40);
    uint64_t v26 = (int *)__p;
  }
  if (v26) {
    operator delete(v26);
  }
}

void sub_1DD745BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  float v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::pathDecodingFixedLengthInjectSpaces(CTCLayer *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  unint64_t v6 = *((void *)this + 20);
  unint64_t v7 = *((void *)this + 19);
  unint64_t v8 = 126 - 2 * __clz((uint64_t)(v6 - v7) >> 3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v6 == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>,false>(v6, v6, v7, v7, v9, 1);
  __p = 0;
  unint64_t v66 = 0;
  unint64_t v67 = 0;
  uint64_t v10 = *((void *)this + 19);
  unint64_t v11 = (*((void *)this + 20) - v10) >> 3;
  float v12 = 0;
  if (v11 >= a2) {
    unint64_t v11 = a2;
  }
  if (v11)
  {
    unint64_t v13 = 0;
    do
    {
      unint64_t v14 = (int *)(v10 + 8 * v13 + 4);
      if ((unint64_t)v12 >= v67)
      {
        unint64_t v15 = __p;
        uint64_t v16 = v12 - __p;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v67 - (void)__p;
        if ((uint64_t)(v67 - (void)__p) >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67, v19);
          uint64_t v21 = v20;
          unint64_t v15 = __p;
          float v12 = v66;
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = (int *)(v19 + 4 * v16);
        *unint64_t v22 = *v14;
        uint64_t v23 = v22 + 1;
        while (v12 != v15)
        {
          int v24 = *--v12;
          *--unint64_t v22 = v24;
        }
        __p = v22;
        unint64_t v67 = v19 + 4 * v21;
        if (v15) {
          operator delete(v15);
        }
        float v12 = v23;
      }
      else
      {
        *v12++ = *v14;
      }
      unint64_t v66 = v12;
      ++v13;
      uint64_t v10 = *((void *)this + 19);
      unint64_t v25 = (*((void *)this + 20) - v10) >> 3;
      if (v25 >= a2) {
        unint64_t v25 = a2;
      }
    }
    while (v25 > v13);
  }
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v26 = v66;
  if (v66 != __p)
  {
    unint64_t v27 = (_DWORD *)(*((void *)this + 16) + 8 * *__p + 4);
    int v29 = (char **)(a3 + 2);
    unint64_t v28 = a3[2];
    uint64_t v30 = (char *)a3[1];
    if ((unint64_t)v30 >= v28)
    {
      uint64_t v32 = (char *)*a3;
      uint64_t v33 = (uint64_t)&v30[-*a3] >> 2;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v35 = v28 - (void)v32;
      if (v35 >> 1 > v34) {
        unint64_t v34 = v35 >> 1;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v36);
        uint64_t v32 = (char *)*a3;
        uint64_t v30 = (char *)a3[1];
      }
      else
      {
        uint64_t v37 = 0;
      }
      int v38 = &v37[4 * v33];
      unsigned int v39 = &v37[4 * v36];
      *(_DWORD *)int v38 = *v27;
      uint64_t v31 = v38 + 4;
      while (v30 != v32)
      {
        int v40 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v38 - 1) = v40;
        v38 -= 4;
      }
      *a3 = v38;
      a3[1] = v31;
      a3[2] = v39;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v30 = *v27;
      uint64_t v31 = v30 + 4;
    }
    a3[1] = v31;
    uint64_t v26 = __p;
    if ((unint64_t)((char *)v66 - (char *)__p) >= 5)
    {
      unint64_t v41 = 1;
      do
      {
        uint64_t v42 = v26[v41];
        uint64_t v43 = *((void *)this + 22);
        float v44 = *(float *)(v43 + 8 * v26[v41 - 1] + 4);
        unint64_t v45 = *v29;
        if ((float)((float)(*(float *)(v43 + 8 * v42 + 4) - v44) + (float)(*(float *)(v43 + 8 * v42 + 4) - v44)) > 30.0)
        {
          if (v31 >= v45)
          {
            uint64_t v47 = (char *)*a3;
            uint64_t v48 = (uint64_t)&v31[-*a3] >> 2;
            unint64_t v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 62) {
              goto LABEL_86;
            }
            uint64_t v50 = v45 - v47;
            if (v50 >> 1 > v49) {
              unint64_t v49 = v50 >> 1;
            }
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51)
            {
              unint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v51);
              uint64_t v47 = (char *)*a3;
              uint64_t v31 = (char *)a3[1];
            }
            else
            {
              unint64_t v52 = 0;
            }
            unint64_t v53 = &v52[4 * v48];
            *(_DWORD *)unint64_t v53 = *((_DWORD *)this + 1);
            uint64_t v46 = v53 + 4;
            while (v31 != v47)
            {
              int v54 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v53 - 1) = v54;
              v53 -= 4;
            }
            unint64_t v45 = &v52[4 * v51];
            *a3 = v53;
            a3[1] = v46;
            a3[2] = v45;
            if (v47)
            {
              operator delete(v47);
              unint64_t v45 = *v29;
            }
          }
          else
          {
            *(_DWORD *)uint64_t v31 = *((_DWORD *)this + 1);
            uint64_t v46 = v31 + 4;
          }
          a3[1] = v46;
          uint64_t v42 = __p[v41];
          uint64_t v31 = v46;
        }
        unint64_t v55 = (_DWORD *)(*((void *)this + 16) + 8 * v42 + 4);
        if (v31 >= v45)
        {
          uint64_t v57 = (char *)*a3;
          uint64_t v58 = (uint64_t)&v31[-*a3] >> 2;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 62) {
LABEL_86:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v60 = v45 - v57;
          if (v60 >> 1 > v59) {
            unint64_t v59 = v60 >> 1;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61)
          {
            uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v61);
            uint64_t v57 = (char *)*a3;
            uint64_t v31 = (char *)a3[1];
          }
          else
          {
            uint64_t v62 = 0;
          }
          unint64_t v63 = &v62[4 * v58];
          *(_DWORD *)unint64_t v63 = *v55;
          unint64_t v56 = v63 + 4;
          while (v31 != v57)
          {
            int v64 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v63 - 1) = v64;
            v63 -= 4;
          }
          *a3 = v63;
          a3[1] = v56;
          a3[2] = &v62[4 * v61];
          if (v57) {
            operator delete(v57);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v31 = *v55;
          unint64_t v56 = v31 + 4;
        }
        a3[1] = v56;
        ++v41;
        uint64_t v26 = __p;
        uint64_t v31 = v56;
      }
      while (v41 < v66 - __p);
    }
  }
  if (v26) {
    operator delete(v26);
  }
}

void sub_1DD746058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  float v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::pathDecodingGeometrical(CTCLayer *this@<X0>, char **a2@<X8>)
{
  uint64_t v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  unint64_t v51 = 0;
  unint64_t v52 = 0;
  uint64_t v5 = *((void *)this + 22);
  uint64_t v6 = *((void *)this + 23);
  if (v6 != v5 && v6 - v5 != 8)
  {
    uint64_t v4 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v5 + 8 * v8++;
      float v12 = (float)(*(float *)(v5 + 8 * v8 + 4) - *(float *)(v11 + 4))
          + (float)(*(float *)(v5 + 8 * v8 + 4) - *(float *)(v11 + 4));
      if (v12 > 12.0 && v12 < 24.0)
      {
        uint64_t v10 = v8;
      }
      else if ((int)v10 <= (int)v9)
      {
        uint64_t v9 = v8;
      }
      else
      {
        uint64_t v14 = v9 | (v10 << 32);
        if (v4 >= v52)
        {
          uint64_t v15 = (v4 - __p) >> 3;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v16 = (v52 - __p) >> 2;
          if (v16 <= v15 + 1) {
            unint64_t v16 = v15 + 1;
          }
          if ((unint64_t)(v52 - __p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v52, v17);
          }
          else {
            uint64_t v18 = 0;
          }
          unint64_t v19 = &v18[8 * v15];
          *(void *)unint64_t v19 = v14;
          uint64_t v4 = v19 + 8;
          uint64_t v20 = v51;
          if (v51 != __p)
          {
            do
            {
              uint64_t v21 = *((void *)v20 - 1);
              v20 -= 8;
              *((void *)v19 - 1) = v21;
              v19 -= 8;
            }
            while (v20 != __p);
            uint64_t v20 = __p;
          }
          __p = v19;
          unint64_t v52 = &v18[8 * v17];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(void *)uint64_t v4 = v14;
          v4 += 8;
        }
        unint64_t v51 = v4;
        uint64_t v9 = v8;
        uint64_t v5 = *((void *)this + 22);
        uint64_t v6 = *((void *)this + 23);
      }
    }
    while (((v6 - v5) >> 3) - 1 > v8);
    if ((int)v10 > (int)v9)
    {
      uint64_t v22 = v9 | (v10 << 32);
      if (v4 >= v52)
      {
        uint64_t v23 = (v4 - __p) >> 3;
        if ((unint64_t)(v23 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = (v52 - __p) >> 2;
        if (v24 <= v23 + 1) {
          unint64_t v24 = v23 + 1;
        }
        if ((unint64_t)(v52 - __p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v52, v25);
        }
        else {
          uint64_t v26 = 0;
        }
        unint64_t v27 = &v26[8 * v23];
        unint64_t v28 = &v26[8 * v25];
        *(void *)unint64_t v27 = v22;
        uint64_t v4 = v27 + 8;
        int v29 = v51;
        if (v51 != __p)
        {
          do
          {
            uint64_t v30 = *((void *)v29 - 1);
            v29 -= 8;
            *((void *)v27 - 1) = v30;
            v27 -= 8;
          }
          while (v29 != __p);
          int v29 = __p;
        }
        __p = v27;
        unint64_t v52 = v28;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(void *)uint64_t v4 = v22;
        v4 += 8;
      }
    }
  }
  uint64_t v31 = __p;
  if (__p != v4)
  {
    int v32 = 0;
    uint64_t v33 = a2 + 2;
    unint64_t v49 = v4;
    do
    {
      int v34 = *((_DWORD *)v31 + 1);
      uint64_t v35 = *(int *)v31;
      int v36 = v34 - v35;
      if (v34 - (int)v35 > v32)
      {
        uint64_t v37 = *a2;
        a2[1] = *a2;
        if (v34 >= (int)v35)
        {
          int v38 = v34 + 1;
          do
          {
            unsigned int v39 = (_DWORD *)(*((void *)this + 16) + 8 * v35 + 4);
            if ((unint64_t)v37 >= *v33)
            {
              unint64_t v41 = *a2;
              uint64_t v42 = (v37 - *a2) >> 2;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v44 = *v33 - (void)v41;
              if (v44 >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v45);
                unint64_t v41 = *a2;
                uint64_t v37 = a2[1];
              }
              else
              {
                uint64_t v46 = 0;
              }
              uint64_t v47 = &v46[4 * v42];
              *(_DWORD *)uint64_t v47 = *v39;
              int v40 = v47 + 4;
              while (v37 != v41)
              {
                int v48 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *a2 = v47;
              a2[1] = v40;
              a2[2] = &v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v37 = *v39;
              int v40 = v37 + 4;
            }
            a2[1] = v40;
            ++v35;
            uint64_t v37 = v40;
          }
          while (v38 != v35);
          int v32 = v36;
          uint64_t v4 = v49;
        }
        else
        {
          int v32 = v34 - v35;
        }
      }
      v31 += 8;
    }
    while (v31 != v4);
    uint64_t v4 = __p;
  }
  if (v4) {
    operator delete(v4);
  }
}

void sub_1DD746448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::pathDecodingCTCSegment(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  LODWORD(v199.__begin_) = *(unsigned __int16 *)(a1 + 48);
  int v8 = *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(a1 + 24), (int)v199.__begin_, (unsigned int *)&v199)+ 8);
  *(void *)(a1 + 184) = *(void *)(a1 + 176);
  uint64_t v9 = *(uint64_t **)(a1 + 56);
  int v10 = -1431655765 * ((uint64_t)(*(void *)(a1 + 64) - (void)v9) >> 3);
  if (v10 == 1)
  {
    returnIndiciesOfSortedFloatVector(&v199, v9);
    std::vector<int>::pointer begin = v199.__begin_;
    int v12 = *v199.__begin_;
    if (*v199.__begin_ == v8)
    {
      unint64_t v13 = (unint64_t)a4[2];
      uint64_t v14 = a4[1];
      if ((unint64_t)v14 < v13)
      {
        *uint64_t v14 = v199.__begin_[1];
        uint64_t v15 = v14 + 1;
LABEL_99:
        uint64_t v92 = v15;
LABEL_128:
        a4[1] = v92;
        goto LABEL_241;
      }
      unint64_t v93 = *a4;
      uint64_t v94 = v14 - *a4;
      unint64_t v95 = v94 + 1;
      if (!((unint64_t)(v94 + 1) >> 62))
      {
        uint64_t v96 = v13 - (void)v93;
        if (v96 >> 1 > v95) {
          unint64_t v95 = v96 >> 1;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          int v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v97);
          unint64_t v93 = *a4;
          uint64_t v14 = a4[1];
        }
        else
        {
          int v98 = 0;
        }
        uint64_t v104 = &v98[4 * v94];
        uint64_t v105 = &v98[4 * v97];
        *(_DWORD *)uint64_t v104 = begin[1];
        uint64_t v92 = (int *)(v104 + 4);
        while (v14 != v93)
        {
          int v106 = *--v14;
          *((_DWORD *)v104 - 1) = v106;
          v104 -= 4;
        }
        *a4 = (int *)v104;
LABEL_126:
        a4[1] = v92;
        a4[2] = (int *)v105;
        if (v93) {
          operator delete(v93);
        }
        goto LABEL_128;
      }
    }
    else
    {
      unint64_t v90 = (unint64_t)a4[2];
      unint64_t v91 = a4[1];
      if ((unint64_t)v91 < v90)
      {
        *unint64_t v91 = v12;
        uint64_t v15 = v91 + 1;
        goto LABEL_99;
      }
      unint64_t v93 = *a4;
      uint64_t v99 = v91 - *a4;
      unint64_t v100 = v99 + 1;
      if (!((unint64_t)(v99 + 1) >> 62))
      {
        uint64_t v101 = v90 - (void)v93;
        if (v101 >> 1 > v100) {
          unint64_t v100 = v101 >> 1;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v100;
        }
        if (v102)
        {
          uint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v102);
          unint64_t v93 = *a4;
          unint64_t v91 = a4[1];
          int v12 = *begin;
        }
        else
        {
          uint64_t v103 = 0;
        }
        uint64_t v107 = (int *)&v103[4 * v99];
        uint64_t v105 = &v103[4 * v102];
        *uint64_t v107 = v12;
        uint64_t v92 = v107 + 1;
        while (v91 != v93)
        {
          int v108 = *--v91;
          *--uint64_t v107 = v108;
        }
        *a4 = v107;
        goto LABEL_126;
      }
    }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = *v9;
  uint64_t v16 = v9[1];
  __x[0] = 1;
  std::vector<int>::vector(&v199, v10, __x);
  std::vector<int>::pointer v18 = v199.__begin_;
  if (v10 >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(a1 + 56);
    do
    {
      uint64_t v21 = (float **)(v20 + 24 * v19);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      unint64_t v24 = v22 + 1;
      BOOL v25 = v22 == v23 || v24 == v23;
      uint64_t v26 = v22;
      if (!v25)
      {
        float v27 = *v22;
        uint64_t v26 = v22;
        unint64_t v28 = v22 + 1;
        do
        {
          float v29 = *v28++;
          float v30 = v29;
          if (v27 < v29)
          {
            float v27 = v30;
            uint64_t v26 = v24;
          }
          unint64_t v24 = v28;
        }
        while (v28 != v23);
      }
      float v31 = *v26;
      if (v8 == ((unint64_t)((char *)v26 - (char *)v22) >> 2)) {
        v18[v19] = 0;
      }
      if (v31 == 0.0) {
        v18[v19] = 0;
      }
      ++v19;
    }
    while (v19 != v10);
  }
  *(void *)__x = 0;
  uint64_t v197 = 0;
  uint64_t v198 = 0;
  v194 = 0;
  uint64_t v195 = 0;
  v193 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v193, v18, (uint64_t)v199.__end_, v199.__end_ - v18);
  int v32 = indexGrouping(&v193, (uint64_t *)__x, 0);
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v32)
  {
    uint64_t v170 = v17;
    v172 = a4;
    v173 = (void **)(a1 + 176);
    std::vector<int>::pointer v33 = v199.__begin_;
    if (v197 != *(void *)__x)
    {
      if ((unint64_t)((v197 - *(void *)__x) / 24) <= 1) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = (v197 - *(void *)__x) / 24;
      }
      uint64_t v35 = (void *)(*(void *)__x + 8);
      do
      {
        int v36 = (int *)*(v35 - 1);
        uint64_t v37 = *v35 - (void)v36;
        if ((unint64_t)v37 <= 0xB)
        {
          int v38 = &v33[*v36];
          if ((unint64_t)v37 < 5)
          {
            *int v38 = 1;
          }
          else
          {
            uint64_t v39 = 4 * v36[(v37 >> 2) - 1] + 4 - 4 * *v36;
            if (v39 >= 1) {
              memset_pattern16(v38, &unk_1DD8CDD60, 4 * (((unint64_t)v39 >> 2) - ((unint64_t)v39 > 3)) + 4);
            }
          }
        }
        v35 += 3;
        --v34;
      }
      while (v34);
    }
    v190 = 0;
    v191 = 0;
    uint64_t v192 = 0;
    v188 = 0;
    uint64_t v189 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v33, (uint64_t)v199.__end_, v199.__end_ - v33);
    char v40 = indexGrouping((char **)&__p, (uint64_t *)&v190, 1);
    if (__p)
    {
      v188 = __p;
      operator delete(__p);
    }
    if (v40)
    {
      unint64_t v41 = v190;
      uint64_t v42 = v191;
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v191 - (char *)v190) >> 3);
      if (v43 >= 0x14)
      {
        std::vector<int>::pointer v44 = v199.__begin_;
        unint64_t v45 = (void **)(v190 + 2);
        unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v191 - (char *)v190) >> 3);
        do
        {
          uint64_t v47 = (int *)*(v45 - 1);
          if ((unint64_t)((unsigned char *)*v45 - (unsigned char *)v47) <= 7)
          {
            v44[*v47] = 0;
            if ((int)v46 < 21) {
              break;
            }
            LODWORD(v46) = v46 - 1;
          }
          v45 += 3;
          --v43;
        }
        while (v43);
      }
      v184 = 0;
      v185 = 0;
      v186 = 0;
      v181 = 0;
      v182 = 0;
      v183 = 0;
      if (v42 != v41)
      {
        unint64_t v48 = 0;
        unint64_t v169 = (unint64_t)(v16 - v170) >> 2;
        do
        {
          unint64_t v49 = &v41[6 * v48];
          uint64_t v50 = *(void *)v49;
          uint64_t v51 = *((void *)v49 + 1) - *(void *)v49;
          int v52 = *(_DWORD *)(v50 + ((v51 >> 1) & 0xFFFFFFFFFFFFFFFCLL));
          uint64_t v53 = *(void *)(a1 + 56) + 24 * v52;
          int v54 = *(float **)v53;
          unint64_t v55 = *(float **)(v53 + 8);
          unint64_t v56 = v54 + 1;
          if (v54 != v55 && v56 != v55)
          {
            float v58 = *v54;
            unint64_t v59 = v54 + 1;
            do
            {
              float v60 = *v59++;
              float v61 = v60;
              if (v58 < v60)
              {
                float v58 = v61;
                int v54 = v56;
              }
              unint64_t v56 = v59;
            }
            while (v59 != v55);
          }
          if ((unint64_t)v51 > 7 || *v54 >= 0.5)
          {
            int v64 = v185;
            if (v185 >= v186)
            {
              unint64_t v66 = (char *)v184;
              uint64_t v67 = (v185 - (unsigned char *)v184) >> 2;
              unint64_t v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 62) {
                goto LABEL_244;
              }
              uint64_t v69 = v186 - (unsigned char *)v184;
              if ((v186 - (unsigned char *)v184) >> 1 > v68) {
                unint64_t v68 = v69 >> 1;
              }
              if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v68;
              }
              if (v70)
              {
                unint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v186, v70);
                unint64_t v66 = (char *)v184;
                int v64 = v185;
              }
              else
              {
                unint64_t v71 = 0;
              }
              unint64_t v78 = &v71[4 * v67];
              *(_DWORD *)unint64_t v78 = v52;
              uint64_t v65 = v78 + 4;
              while (v64 != v66)
              {
                int v79 = *((_DWORD *)v64 - 1);
                v64 -= 4;
                *((_DWORD *)v78 - 1) = v79;
                v78 -= 4;
              }
              v184 = v78;
              v185 = v65;
              v186 = &v71[4 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              *(_DWORD *)v185 = v52;
              uint64_t v65 = v64 + 4;
            }
            v185 = v65;
          }
          else
          {
            uint64_t v62 = v182;
            if (v182 >= v183)
            {
              uint64_t v72 = (char *)v181;
              uint64_t v73 = (v182 - (unsigned char *)v181) >> 2;
              unint64_t v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 62) {
LABEL_244:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              uint64_t v75 = v183 - (unsigned char *)v181;
              if ((v183 - (unsigned char *)v181) >> 1 > v74) {
                unint64_t v74 = v75 >> 1;
              }
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v74;
              }
              if (v76)
              {
                uint64_t v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v183, v76);
                uint64_t v72 = (char *)v181;
                uint64_t v62 = v182;
              }
              else
              {
                uint64_t v77 = 0;
              }
              uint64_t v80 = &v77[4 * v73];
              *(_DWORD *)uint64_t v80 = v48;
              unint64_t v63 = v80 + 4;
              while (v62 != v72)
              {
                int v81 = *((_DWORD *)v62 - 1);
                v62 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              v181 = v80;
              v182 = v63;
              v183 = &v77[4 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(_DWORD *)v182 = v48;
              unint64_t v63 = v62 + 4;
            }
            v182 = v63;
          }
          ++v48;
          unint64_t v41 = v190;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v191 - (char *)v190) >> 3) > v48);
        if (v184 != v185)
        {
          v174[0] = 0;
          std::vector<int>::vector(&v180, (v185 - (unsigned char *)v184) >> 2, v174);
          uint64_t v82 = v185;
          std::vector<int>::pointer v83 = v180.__begin_;
          if (v184 != v185)
          {
            unint64_t v84 = (int *)((char *)v184 + 4);
            int v85 = *(_DWORD *)v184;
            *v180.__begin_ = *(_DWORD *)v184;
            if (v84 != (int *)v82)
            {
              float v86 = v83 + 1;
              do
              {
                int v87 = *v84++;
                *v86++ = v87 - v85;
                int v85 = v87;
              }
              while (v84 != (int *)v82);
            }
          }
          uint64_t v88 = (char *)((char *)v180.__end_ - (char *)(v83 + 1));
          if (v180.__end_ == v83 + 1)
          {
            std::vector<int>::pointer v89 = v83;
          }
          else
          {
            memmove(v83, v83 + 1, (char *)v180.__end_ - (char *)(v83 + 1));
            std::vector<int>::pointer v89 = v180.__begin_;
          }
          v180.__end_ = (std::vector<int>::pointer)&v88[(void)v83];
          v178 = 0;
          uint64_t v179 = 0;
          v177 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v177, v89, (uint64_t)&v88[(void)v83], (&v88[(void)v83] - (char *)v89) >> 2);
          if (v178 == v177)
          {
            uint64_t v111 = 0;
          }
          else
          {
            uint64_t v109 = 0;
            uint64_t v110 = 0;
            uint64_t v111 = 0;
            unint64_t v112 = v178 - v177;
            if (v112 <= 1) {
              unint64_t v112 = 1;
            }
            do
            {
              uint64_t v113 = 0;
              uint64_t v114 = v177;
              do
              {
                int v115 = *v114++;
                if (v115 == v177[v109]) {
                  ++v113;
                }
              }
              while (v114 != v178);
              if (v113 > v110)
              {
                uint64_t v111 = v177[v109];
                uint64_t v110 = v113;
              }
              ++v109;
            }
            while (v109 != v112);
          }
          if (v177)
          {
            v178 = v177;
            operator delete(v177);
          }
          id v116 = (char *)v184;
          v117 = v185;
          if (v185 != v184)
          {
            unint64_t v118 = 0;
            BOOL v119 = 0;
            BOOL v120 = 0;
            uint64_t v171 = (uint64_t)(v172 + 2);
            double v121 = (double)v111 * 1.7;
            double v122 = (double)v111 * 1.3;
            while (1)
            {
              if (v120)
              {
                if ((unint64_t)((char *)v172[1] - (char *)*v172) > 0x10) {
                  goto LABEL_233;
                }
                v172[1] = *v172;
              }
              if (v119)
              {
                uint64_t v124 = v172[1];
                unint64_t v123 = (unint64_t)v172[2];
                if ((unint64_t)v124 >= v123)
                {
                  uint64_t v126 = *v172;
                  uint64_t v127 = v124 - *v172;
                  unint64_t v128 = v127 + 1;
                  if ((unint64_t)(v127 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v129 = v123 - (void)v126;
                  if (v129 >> 1 > v128) {
                    unint64_t v128 = v129 >> 1;
                  }
                  if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v130 = v128;
                  }
                  if (v130)
                  {
                    char v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v171, v130);
                    uint64_t v126 = *v172;
                    uint64_t v124 = v172[1];
                  }
                  else
                  {
                    char v131 = 0;
                  }
                  char v132 = &v131[4 * v127];
                  *(_DWORD *)char v132 = v169;
                  unsigned int v125 = (int *)(v132 + 4);
                  while (v124 != v126)
                  {
                    int v133 = *--v124;
                    *((_DWORD *)v132 - 1) = v133;
                    v132 -= 4;
                  }
                  *v172 = (int *)v132;
                  v172[1] = v125;
                  v172[2] = (int *)&v131[4 * v130];
                  if (v126) {
                    operator delete(v126);
                  }
                }
                else
                {
                  *uint64_t v124 = v169;
                  unsigned int v125 = v124 + 1;
                }
                v172[1] = v125;
                id v116 = (char *)v184;
                v117 = v185;
              }
              if (((v117 - v116) >> 2) - 1 == v118)
              {
                BOOL v120 = 0;
                BOOL v119 = 0;
              }
              else
              {
                double v134 = (double)v180.__begin_[v118];
                BOOL v120 = v121 < v134;
                BOOL v119 = v121 >= v134 && v122 < v134;
              }
              uint64_t v135 = *(void *)(a1 + 56) + 24 * *(int *)&v116[4 * v118];
              v175 = 0;
              uint64_t v176 = 0;
              *(void *)v174 = 0;
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v174, *(const void **)v135, *(void *)(v135 + 8), (uint64_t)(*(void *)(v135 + 8) - *(void *)v135) >> 2);
              int v136 = *(void **)v174;
              if (v175 != *(void **)v174) {
                break;
              }
              int v139 = -1;
LABEL_196:
              if (v139 != v8)
              {
                uint64_t v146 = v172[1];
                unint64_t v145 = (unint64_t)v172[2];
                if ((unint64_t)v146 >= v145)
                {
                  uint64_t v148 = *v172;
                  uint64_t v149 = v146 - *v172;
                  unint64_t v150 = v149 + 1;
                  if ((unint64_t)(v149 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v151 = v145 - (void)v148;
                  if (v151 >> 1 > v150) {
                    unint64_t v150 = v151 >> 1;
                  }
                  if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v152 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v152 = v150;
                  }
                  if (v152)
                  {
                    unint64_t v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v171, v152);
                    uint64_t v148 = *v172;
                    uint64_t v146 = v172[1];
                  }
                  else
                  {
                    unint64_t v153 = 0;
                  }
                  v154 = (int *)&v153[4 * v149];
                  int *v154 = v139;
                  uint64_t v147 = v154 + 1;
                  while (v146 != v148)
                  {
                    int v155 = *--v146;
                    *--v154 = v155;
                  }
                  *v172 = v154;
                  v172[1] = v147;
                  v172[2] = (int *)&v153[4 * v152];
                  if (v148) {
                    operator delete(v148);
                  }
                }
                else
                {
                  *uint64_t v146 = v139;
                  uint64_t v147 = v146 + 1;
                }
                v172[1] = v147;
                float v156 = (float)(*((_DWORD *)v184 + v118) / 2);
                uint64_t v158 = *(float **)(a1 + 184);
                unint64_t v157 = *(void *)(a1 + 192);
                if ((unint64_t)v158 >= v157)
                {
                  v160 = (float *)*v173;
                  uint64_t v161 = ((char *)v158 - (unsigned char *)*v173) >> 3;
                  unint64_t v162 = v161 + 1;
                  if ((unint64_t)(v161 + 1) >> 61) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v163 = v157 - (void)v160;
                  if (v163 >> 2 > v162) {
                    unint64_t v162 = v163 >> 2;
                  }
                  if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v164 = v162;
                  }
                  if (v164)
                  {
                    v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 192, v164);
                    v160 = *(float **)(a1 + 176);
                    uint64_t v158 = *(float **)(a1 + 184);
                  }
                  else
                  {
                    v165 = 0;
                  }
                  v166 = (float *)&v165[8 * v161];
                  float *v166 = 1.0;
                  v166[1] = v156;
                  v167 = v166;
                  if (v158 != v160)
                  {
                    do
                    {
                      uint64_t v168 = *((void *)v158 - 1);
                      v158 -= 2;
                      *((void *)v167 - 1) = v168;
                      v167 -= 2;
                    }
                    while (v158 != v160);
                    v160 = (float *)*v173;
                  }
                  uint64_t v159 = v166 + 2;
                  *(void *)(a1 + 176) = v167;
                  *(void *)(a1 + 184) = v166 + 2;
                  *(void *)(a1 + 192) = &v165[8 * v164];
                  if (v160) {
                    operator delete(v160);
                  }
                }
                else
                {
                  *uint64_t v158 = 1.0;
                  v158[1] = v156;
                  uint64_t v159 = v158 + 2;
                }
                *(void *)(a1 + 184) = v159;
                int v136 = *(void **)v174;
              }
              if (v136)
              {
                v175 = v136;
                operator delete(v136);
              }
              ++v118;
              id v116 = (char *)v184;
              v117 = v185;
              if (v118 >= (v185 - (unsigned char *)v184) >> 2) {
                goto LABEL_233;
              }
            }
            uint64_t v137 = 0;
            unint64_t v138 = ((uint64_t)v175 - *(void *)v174) >> 2;
            if (v138 <= 1) {
              unint64_t v138 = 1;
            }
            int v139 = -1;
            float v140 = -INFINITY;
            while (1)
            {
              if (a2 == 3)
              {
                int v143 = *(_DWORD *)(a3 + 4 * v137);
                if (v143 != 103 && (v143 - 91) <= 0xFFFFFFE5)
                {
LABEL_191:
                  if (*(float *)(*(void *)v174 + 4 * v137) > v140)
                  {
                    float v140 = *(float *)(*(void *)v174 + 4 * v137);
                    int v139 = v137;
                  }
                }
              }
              else if (a2 == 2)
              {
                int v141 = *(_DWORD *)(a3 + 4 * v137);
                if (v141 != 103 && (v141 - 58) <= 0xFFFFFFF5) {
                  goto LABEL_191;
                }
              }
              else if (a2 == 1 && (*(_DWORD *)(a3 + 4 * v137) - 48) <= 9)
              {
                goto LABEL_191;
              }
              if (v138 == ++v137) {
                goto LABEL_196;
              }
            }
          }
LABEL_233:
          if (v180.__begin_)
          {
            v180.__end_ = v180.__begin_;
            operator delete(v180.__begin_);
          }
        }
        if (v181)
        {
          v182 = (char *)v181;
          operator delete(v181);
        }
        if (v184)
        {
          v185 = (char *)v184;
          operator delete(v184);
        }
      }
    }
    v184 = &v190;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
  }
  v190 = __x;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
LABEL_241:
  if (v199.__begin_)
  {
    v199.__end_ = v199.__begin_;
    operator delete(v199.__begin_);
  }
}

void sub_1DD7470B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t *a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26)
  {
    a27 = a26;
    operator delete(a26);
  }
  a26 = &a32;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a32 = v32 - 168;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  uint64_t v34 = *(void **)(v32 - 144);
  if (v34)
  {
    *(void *)(v32 - 136) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)a12;
  if (*(void *)a12)
  {
    *(void *)(a12 + 8) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

int *returnIndiciesOfSortedFloatVector(std::vector<int> *a1, uint64_t *a2)
{
  uint64_t v5 = std::vector<int>::vector(a1, (a2[1] - *a2) >> 2);
  std::vector<int>::pointer begin = v5->__begin_;
  end = v5->__end_;
  unint64_t v6 = end - v5->__begin_;
  if (end != v5->__begin_)
  {
    uint64_t v7 = 0;
    if (v6 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = end - begin;
    }
    do
    {
      begin[v7] = v7;
      ++v7;
    }
    while (v8 != v7);
  }
  int v12 = a2;
  unint64_t v9 = 126 - 2 * __clz(v6);
  if (end == begin) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  return std::__introsort<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *,false>(begin, end, &v12, v10, 1);
}

uint64_t indexGrouping(char **a1, uint64_t *a2, int a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    uint64_t v8 = v5 + 4;
    while (v8 != v6)
    {
      int v9 = *((_DWORD *)v8 - 1);
      int v10 = *(_DWORD *)v8;
      v8 += 4;
      if (v9 != v10)
      {
        uint64_t v11 = v5 + 4;
        while (v11 != v6)
        {
          int v12 = *((_DWORD *)v11 - 1);
          int v13 = *(_DWORD *)v11;
          v11 += 4;
          if (v12 != v13)
          {
            if (v11 - 8 == v6) {
              goto LABEL_15;
            }
            uint64_t v14 = *a1;
            while (*(_DWORD *)v14 != a3)
            {
              v14 += 4;
              if (v14 == v6)
              {
                uint64_t v14 = a1[1];
                break;
              }
            }
            int64_t v15 = v14 - v5;
            unint64_t v16 = (unint64_t)(v14 - v5) >> 2;
            uint64_t v17 = operator new(4uLL);
            *uint64_t v17 = v16;
            v51[1] = v17 + 1;
            v51[2] = v17 + 1;
            unint64_t v19 = a2[1];
            unint64_t v18 = a2[2];
            v51[0] = v17;
            if (v19 >= v18)
            {
              uint64_t v20 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(a2, (uint64_t)v51);
            }
            else
            {
              std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)a2, (uint64_t)v51);
              uint64_t v20 = v19 + 24;
            }
            a2[1] = v20;
            uint64_t v25 = (v15 << 30) + 0x100000000;
            uint64_t v26 = *a1;
            unint64_t v27 = (a1[1] - *a1) >> 2;
            if (v27 >= v25 >> 32)
            {
              uint64_t v28 = v25 >> 32;
              if (v27 != v28)
              {
                do
                {
                  uint64_t v29 = 4 * (int)v16;
                  unint64_t v16 = v28;
                  int v30 = *(_DWORD *)&v26[4 * v28];
                  int v31 = *(_DWORD *)&v26[v29];
                  if (v30 == a3 && v30 == v31)
                  {
                    if (a2[1] - *a2 == 6120) {
                      goto LABEL_22;
                    }
                    uint64_t v37 = (void *)(a2[1] - 8);
                    uint64_t v39 = (char **)(v37 - 1);
                    int v38 = (char *)*(v37 - 1);
                    if ((unint64_t)v38 >= *v37)
                    {
                      unint64_t v41 = (void **)(v37 - 2);
                      uint64_t v42 = (char *)*(v37 - 2);
                      uint64_t v43 = (v38 - v42) >> 2;
                      unint64_t v44 = v43 + 1;
                      if ((unint64_t)(v43 + 1) >> 62) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v45 = *v37 - (void)v42;
                      if (v45 >> 1 > v44) {
                        unint64_t v44 = v45 >> 1;
                      }
                      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v46 = v44;
                      }
                      if (v46)
                      {
                        uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v37, v46);
                        int v38 = *v39;
                        uint64_t v42 = (char *)*v41;
                      }
                      else
                      {
                        uint64_t v47 = 0;
                      }
                      unint64_t v48 = &v47[4 * v43];
                      *(_DWORD *)unint64_t v48 = v16;
                      char v40 = v48 + 4;
                      while (v38 != v42)
                      {
                        int v49 = *((_DWORD *)v38 - 1);
                        v38 -= 4;
                        *((_DWORD *)v48 - 1) = v49;
                        v48 -= 4;
                      }
                      std::vector<int>::value_type *v41 = v48;
                      *uint64_t v39 = v40;
                      void *v37 = &v47[4 * v46];
                      if (v42) {
                        operator delete(v42);
                      }
                    }
                    else
                    {
                      *(_DWORD *)int v38 = v16;
                      char v40 = v38 + 4;
                    }
                    *uint64_t v39 = v40;
                  }
                  else if (v30 == a3)
                  {
                    std::vector<int>::pointer v33 = operator new(4uLL);
                    _DWORD *v33 = v16;
                    v50[1] = v33 + 1;
                    v50[2] = v33 + 1;
                    unint64_t v35 = a2[1];
                    unint64_t v34 = a2[2];
                    v50[0] = v33;
                    if (v35 >= v34)
                    {
                      uint64_t v36 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(a2, (uint64_t)v50);
                    }
                    else
                    {
                      std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)a2, (uint64_t)v50);
                      uint64_t v36 = v35 + 24;
                    }
                    a2[1] = v36;
                    operator delete(v33);
                  }
                  uint64_t v28 = v16 + 1;
                  uint64_t v26 = *a1;
                }
                while (v16 + 1 != (a1[1] - *a1) >> 2);
              }
              uint64_t v23 = 1;
            }
            else
            {
LABEL_22:
              uint64_t v23 = 0;
            }
            operator delete(v17);
            return v23;
          }
        }
        break;
      }
    }
  }
LABEL_15:
  unint64_t v21 = a2[1];
  if (v21 >= a2[2])
  {
    uint64_t v22 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(a2, (uint64_t)a1);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)a2, (uint64_t)a1);
    uint64_t v22 = v21 + 24;
  }
  a2[1] = v22;
  return 1;
}

void sub_1DD747558(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void CTCLayer::removeNoise(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = *(_DWORD **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(void *)a2 != v3)
  {
    uint64_t v8 = (char *)operator new(4uLL);
    *(_DWORD *)uint64_t v8 = *v4;
    uint64_t v9 = (uint64_t)(v8 + 4);
    unint64_t v27 = v8 + 4;
    uint64_t v28 = v8 + 4;
    __p = v8;
    if ((unint64_t)(v3 - (void)v4) < 5)
    {
      int v10 = 0;
      unint64_t v24 = 0;
    }
    else
    {
      int v10 = 0;
      unint64_t v11 = 1;
      do
      {
        float v12 = *(float *)(*(void *)(a1 + 176) + 8 * v11 + 4) - *(float *)(*(void *)(a1 + 176) + 8 * v11 - 4);
        if ((float)(v12 + v12) <= 50.0)
        {
          int v13 = (char *)v9;
        }
        else
        {
          int v13 = (char *)__p;
          unint64_t v14 = (v9 - (uint64_t)__p) >> 2;
          if (v14 > (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2)
          {
            *(_DWORD *)(a1 + 16) = v10;
            if (&__p != (void **)a3)
            {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, v13, v9, v14);
              int v13 = (char *)__p;
              uint64_t v4 = *(_DWORD **)a2;
            }
          }
          unint64_t v27 = v13;
          int v10 = v11;
        }
        if (v13 >= v28)
        {
          int64_t v15 = (char *)__p;
          uint64_t v16 = (v13 - (unsigned char *)__p) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = v28 - (unsigned char *)__p;
          if ((v28 - (unsigned char *)__p) >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v28, v19);
            uint64_t v21 = v20;
            int64_t v15 = (char *)__p;
            int v13 = v27;
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (_DWORD *)(v19 + 4 * v16);
          *uint64_t v22 = v4[v11];
          uint64_t v9 = (uint64_t)(v22 + 1);
          while (v13 != v15)
          {
            int v23 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v22 = v23;
          }
          __p = v22;
          unint64_t v27 = (char *)v9;
          uint64_t v28 = (char *)(v19 + 4 * v21);
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(_DWORD *)int v13 = v4[v11];
          uint64_t v9 = (uint64_t)(v13 + 4);
        }
        unint64_t v27 = (char *)v9;
        ++v11;
        uint64_t v4 = *(_DWORD **)a2;
      }
      while (v11 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t v8 = (char *)__p;
      unint64_t v24 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
    }
    unint64_t v25 = (v9 - (uint64_t)v8) >> 2;
    if (v25 > v24)
    {
      *(_DWORD *)(a1 + 16) = v10;
      if (&__p != (void **)a3)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, v8, v9, v25);
        uint64_t v8 = (char *)__p;
      }
    }
    if (v8)
    {
      unint64_t v27 = v8;
      operator delete(v8);
    }
  }
}

void sub_1DD7477D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  int v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::injectSpaces(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(_DWORD **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(void *)a2 != v3)
  {
    uint64_t v8 = operator new(4uLL);
    *uint64_t v8 = *v4;
    uint64_t v9 = (char *)(v8 + 1);
    a3[1] = v8 + 1;
    a3[2] = v8 + 1;
    *a3 = v8;
    if ((unint64_t)(v3 - (void)v4) >= 5)
    {
      int v10 = (char **)(a3 + 2);
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *(void *)(a1 + 176) + 8 * (*(int *)(a1 + 16) + (uint64_t)(int)v11);
        float v13 = (float)(*(float *)(v12 + 4) - *(float *)(v12 - 4)) + (float)(*(float *)(v12 + 4) - *(float *)(v12 - 4));
        unint64_t v14 = *v10;
        if (v13 > 30.0)
        {
          if (v9 >= v14)
          {
            uint64_t v16 = (char *)*a3;
            uint64_t v17 = (uint64_t)&v9[-*a3] >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              goto LABEL_40;
            }
            uint64_t v19 = v14 - v16;
            if (v19 >> 1 > v18) {
              unint64_t v18 = v19 >> 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v20);
              uint64_t v16 = (char *)*a3;
              uint64_t v9 = (char *)a3[1];
            }
            else
            {
              uint64_t v21 = 0;
            }
            uint64_t v22 = &v21[4 * v17];
            *(_DWORD *)uint64_t v22 = *(_DWORD *)(a1 + 4);
            int64_t v15 = v22 + 4;
            while (v9 != v16)
            {
              int v23 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            unint64_t v14 = &v21[4 * v20];
            *a3 = v22;
            a3[1] = v15;
            a3[2] = v14;
            if (v16)
            {
              operator delete(v16);
              unint64_t v14 = *v10;
            }
          }
          else
          {
            *(_DWORD *)uint64_t v9 = *(_DWORD *)(a1 + 4);
            int64_t v15 = v9 + 4;
          }
          a3[1] = v15;
          uint64_t v4 = *(_DWORD **)a2;
          uint64_t v9 = v15;
        }
        if (v9 >= v14)
        {
          unint64_t v25 = (char *)*a3;
          uint64_t v26 = (uint64_t)&v9[-*a3] >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
LABEL_40:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v28 = v14 - v25;
          if (v28 >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v29);
            unint64_t v25 = (char *)*a3;
            uint64_t v9 = (char *)a3[1];
          }
          else
          {
            int v30 = 0;
          }
          int v31 = &v30[4 * v26];
          *(_DWORD *)int v31 = v4[v11];
          unint64_t v24 = v31 + 4;
          while (v9 != v25)
          {
            int v32 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *a3 = v31;
          a3[1] = v24;
          a3[2] = &v30[4 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v9 = v4[v11];
          unint64_t v24 = v9 + 4;
        }
        a3[1] = v24;
        ++v11;
        uint64_t v4 = *(_DWORD **)a2;
        uint64_t v9 = v24;
      }
      while (v11 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    }
  }
}

void sub_1DD747A48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::getMaxActivations(CTCLayer *this)
{
  __p = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  *((void *)this + 11) = *((void *)this + 10);
  if (*((int *)this + 2) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *((void *)this + 7);
      uint64_t v4 = (char **)(v3 + 24 * v2);
      if (&__p != (void **)v4) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&__p, *v4, *(void *)(v3 + 24 * v2 + 8), (uint64_t)(*(void *)(v3 + 24 * v2 + 8) - (void)*v4) >> 2);
      }
      if (v25 == __p)
      {
        uint64_t v6 = 0;
        float v8 = 0.0;
      }
      else
      {
        uint64_t v5 = 0;
        LODWORD(v6) = 0;
        unint64_t v7 = (v25 - (unsigned char *)__p) >> 2;
        if (v7 <= 1) {
          unint64_t v7 = 1;
        }
        float v8 = 0.0;
        do
        {
          float v9 = *((float *)__p + v5);
          if (v9 <= v8) {
            uint64_t v6 = v6;
          }
          else {
            uint64_t v6 = v5;
          }
          if (v9 > v8) {
            float v8 = *((float *)__p + v5);
          }
          ++v5;
        }
        while (v7 != v5);
      }
      unint64_t v10 = LODWORD(v8) | (unint64_t)(v6 << 32);
      uint64_t v12 = (unint64_t *)*((void *)this + 11);
      unint64_t v11 = *((void *)this + 12);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = *((void *)this + 10);
        uint64_t v15 = ((uint64_t)v12 - v14) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v11 - v14;
        uint64_t v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
          uint64_t v17 = v15 + 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v20 = (unint64_t *)(v18 + 8 * v15);
        *unint64_t v20 = v10;
        float v13 = v20 + 1;
        uint64_t v22 = (char *)*((void *)this + 10);
        uint64_t v21 = (char *)*((void *)this + 11);
        if (v21 != v22)
        {
          do
          {
            unint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *--unint64_t v20 = v23;
          }
          while (v21 != v22);
          uint64_t v21 = (char *)*((void *)this + 10);
        }
        *((void *)this + 10) = v20;
        *((void *)this + 11) = v13;
        *((void *)this + 12) = v18 + 8 * v19;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *uint64_t v12 = v10;
        float v13 = v12 + 1;
      }
      *((void *)this + 11) = v13;
      ++v2;
    }
    while (v2 < *((int *)this + 2));
    if (__p)
    {
      unint64_t v25 = __p;
      operator delete(__p);
    }
  }
}

void sub_1DD747C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::setActivations(uint64_t a1, uint64_t **a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  uint64_t v4 = (void *)**a2;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((*a2)[1] - (uint64_t)v4) >> 3);
  *(_DWORD *)(a1 + 4) = (v4[1] - *v4) >> 2;
  *(_DWORD *)(a1 + 8) = v5;
  uint64_t v6 = (uint64_t *)(a1 + 56);
  if ((int)v3 <= 1)
  {
    std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 56), (int)v5);
    int v32 = *(_DWORD *)(a1 + 8);
    if (v32 >= 1)
    {
      uint64_t v33 = 0;
      for (uint64_t i = 0; i < v32; ++i)
      {
        uint64_t v35 = **a2;
        if (*v6 != v35)
        {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(*v6 + v33), *(char **)(v35 + v33), *(void *)(v35 + v33 + 8), (uint64_t)(*(void *)(v35 + v33 + 8) - *(void *)(v35 + v33)) >> 2);
          int v32 = *(_DWORD *)(a1 + 8);
        }
        v33 += 24;
      }
    }
  }
  else
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 56));
    std::vector<std::vector<float>>::resize(v6, *(int *)(a1 + 8));
    int v7 = *(_DWORD *)(a1 + 8);
    if (v7 >= 1)
    {
      uint64_t v8 = 0;
      float v9 = (float)(int)v3;
      LODWORD(v10) = *(_DWORD *)(a1 + 4);
      uint64_t v11 = v3;
      do
      {
        if ((int)v10 >= 1)
        {
          uint64_t v12 = 0;
          do
          {
            float v13 = *a2;
            float v14 = 0.0;
            uint64_t v15 = v11;
            do
            {
              uint64_t v16 = *v13;
              v13 += 3;
              float v14 = v14 + *(float *)(*(void *)(v16 + 24 * v8) + 4 * v12);
              --v15;
            }
            while (v15);
            uint64_t v17 = *v6 + 24 * v8;
            float v18 = v14 / v9;
            unint64_t v20 = (float **)(v17 + 8);
            uint64_t v19 = *(float **)(v17 + 8);
            uint64_t v22 = (void *)(v17 + 16);
            unint64_t v21 = *(void *)(v17 + 16);
            if ((unint64_t)v19 >= v21)
            {
              unint64_t v24 = *(float **)v17;
              uint64_t v25 = ((uint64_t)v19 - *(void *)v17) >> 2;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v27 = v21 - (void)v24;
              if (v27 >> 1 > v26) {
                unint64_t v26 = v27 >> 1;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v26;
              }
              if (v28)
              {
                unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v22, v28);
                uint64_t v19 = *v20;
                unint64_t v24 = *(float **)v17;
              }
              else
              {
                unint64_t v29 = 0;
              }
              int v30 = (float *)&v29[4 * v25];
              *int v30 = v18;
              unint64_t v23 = v30 + 1;
              while (v19 != v24)
              {
                int v31 = *((_DWORD *)v19-- - 1);
                *((_DWORD *)v30-- - 1) = v31;
              }
              *(void *)uint64_t v17 = v30;
              *unint64_t v20 = v23;
              *uint64_t v22 = &v29[4 * v28];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              float *v19 = v18;
              unint64_t v23 = v19 + 1;
            }
            *unint64_t v20 = v23;
            ++v12;
            uint64_t v10 = *(int *)(a1 + 4);
          }
          while (v12 < v10);
          int v7 = *(_DWORD *)(a1 + 8);
        }
        ++v8;
      }
      while (v8 < v7);
    }
  }
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        float v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t *CTCLayer::setCodeMap(uint64_t *this, unsigned int *a2, int a3)
{
  if (a3 >= 1)
  {
    unint64_t v4 = a2;
    uint64_t v5 = 0;
    unint64_t v6 = (uint64_t **)(this + 3);
    uint64_t v7 = (int *)a2;
    uint64_t v8 = a3;
    do
    {
      int v9 = *v7++;
      this = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v6, v9, v4);
      *((_DWORD *)this + 8) = v5++;
      unint64_t v4 = (unsigned int *)v7;
    }
    while (v8 != v5);
  }
  return this;
}

float CTCLayer::computeScore(CTCLayer *this, uint64_t a2)
{
  unint64_t v4 = (char *)this + 104;
  if (v4 != (char *)a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  if (*(void *)(a2 + 8) - *(void *)a2 < 5uLL)
  {
    if (logZero(void)::onceToken != -1) {
      dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
    }
    float v5 = *(double *)&logZero(void)::slogZero;
    *(float *)this = v5;
  }
  else
  {
    CTCLayer::computeForwardVariables((uint64_t)this);
    float v5 = *(float *)this;
  }
  return -v5;
}

uint64_t CTCLayer::computeForwardVariables(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 200);
  if (v1)
  {
    int v2 = ((*(void *)(this + 112) - *(void *)(this + 104)) >> 1) | 1;
    *(_DWORD *)(this + 12) = v2;
    int v3 = *(_DWORD *)(this + 8);
    if (logZero(void)::onceToken != -1) {
      dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
    }
    Matrix<float>::Initialize(v1, v3, v2);
  }
  return this;
}

void CTCLayer::stringSequence2codeSequence(uint64_t a1@<X0>, int **a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unint64_t v6 = (uint64_t **)(a1 + 24);
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      int v21 = *v3;
      uint64_t v8 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v6, v21, (unsigned int *)&v21);
      int v9 = v8;
      uint64_t v11 = a3[1];
      unint64_t v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        float v13 = *a3;
        uint64_t v14 = (v11 - *a3) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7, v17);
          float v13 = *a3;
          uint64_t v11 = a3[1];
        }
        else
        {
          float v18 = 0;
        }
        uint64_t v19 = &v18[4 * v14];
        *(_DWORD *)uint64_t v19 = *((_DWORD *)v9 + 8);
        uint64_t v12 = v19 + 4;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        *a3 = v19;
        a3[1] = v12;
        a3[2] = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v11 = *((_DWORD *)v8 + 8);
        uint64_t v12 = v11 + 4;
      }
      a3[1] = v12;
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1DD7484BC(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Matrix<float>::Initialize(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 128);
  if (v6) {
    MEMORY[0x1E01BF110](v6, 0x1000C8052888210);
  }
  *(_DWORD *)(a1 + 136) = a3;
  *(_DWORD *)(a1 + 140) = a2;
  operator new[]();
}

float logSafe(float a1)
{
  if (a1 <= 2.22507386e-308)
  {
    if (logZero(void)::onceToken != -1) {
      dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
    }
    return *(double *)&logZero(void)::slogZero;
  }
  else
  {
    return logf(a1);
  }
}

float logAdd(float a1, float a2)
{
  double v4 = a1;
  if (logZero(void)::onceToken != -1) {
    dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
  }
  if (*(double *)&logZero(void)::slogZero != v4)
  {
    if (*(double *)&logZero(void)::slogZero == a2)
    {
      return a1;
    }
    else
    {
      if (a1 <= a2) {
        float v5 = a1 - a2;
      }
      else {
        float v5 = a2 - a1;
      }
      if (a1 > a2) {
        a2 = a1;
      }
      float v6 = expf(v5) + 1.0;
      if (v5 >= 1024.0) {
        float v6 = INFINITY;
      }
      return a2 + logSafe(v6);
    }
  }
  return a2;
}

void logMult(float a1, float a2)
{
  if (logZero(void)::onceToken != -1) {
    dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
  }
}

uint64_t CTCLayer::computeBackwardVariables(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 208);
  if (v1)
  {
    int v2 = *(_DWORD *)(this + 8);
    int v3 = *(_DWORD *)(this + 12);
    if (logZero(void)::onceToken != -1) {
      dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
    }
    Matrix<float>::Initialize(v1, v2, v3);
  }
  return this;
}

void CTCLayer::backprop(CTCLayer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((CTCLayer *)((char *)this + 104) != (CTCLayer *)a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 104, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  CTCLayer::computeForwardVariables((uint64_t)this);
  CTCLayer::computeBackwardVariables((uint64_t)this);
  *(void *)a3 = &unk_1F38ECED8;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  int v5 = *((_DWORD *)this + 2);
  *(_DWORD *)(a3 + 136) = *((_DWORD *)this + 1);
  *(_DWORD *)(a3 + 140) = v5;
  operator new[]();
}

void sub_1DD748EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *float v18 = a11;
  uint64_t v20 = v18[16];
  if (v20)
  {
    MEMORY[0x1E01BF110](v20, 0x1000C8052888210);
    *a10 = 0;
  }
  _Unwind_Resume(exception_object);
}

void *Matrix<float>::~Matrix(void *a1)
{
  *a1 = &unk_1F38ECED8;
  uint64_t v2 = a1[16];
  if (v2)
  {
    MEMORY[0x1E01BF110](v2, 0x1000C8052888210);
    a1[16] = 0;
  }
  return a1;
}

void CTCLayer::pathDecodingCTCSegment(uint64_t **this@<X0>, int a2@<W1>, unsigned int a3@<W2>, char **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  LODWORD(__x.__begin_) = *((unsigned __int16 *)this + 24);
  uint64_t v8 = *((int *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(this + 3, (int)__x.__begin_, (unsigned int *)&__x)+ 8);
  this[23] = this[22];
  int v9 = this[7];
  uint64_t v10 = (char *)this[8] - (char *)v9;
  if (v10 == 24)
  {
    if (a3 <= 1 && (a2 & 1) != 0)
    {
      uint64_t v12 = (float *)*v9;
      uint64_t v11 = (float *)v9[1];
      uint64_t v13 = *v9 + 4;
      BOOL v14 = (float *)*v9 == v11 || v13 == (void)v11;
      uint64_t v15 = *v9;
      if (!v14)
      {
        float v16 = *v12;
        uint64_t v15 = *v9;
        unint64_t v17 = (float *)(*v9 + 4);
        do
        {
          float v18 = *v17++;
          float v19 = v18;
          if (v16 < v18)
          {
            float v16 = v19;
            uint64_t v15 = v13;
          }
          uint64_t v13 = (uint64_t)v17;
        }
        while (v17 != v11);
      }
      std::vector<int>::pointer begin = (int *)operator new(4uLL);
      *std::vector<int>::pointer begin = (unint64_t)(v15 - (void)v12) >> 2;
      std::vector<int>::pointer end = begin + 1;
      if (!a2) {
        goto LABEL_13;
      }
    }
    else
    {
      returnIndiciesOfSortedFloatVector(&__x, v9);
      std::vector<int>::pointer begin = __x.__begin_;
      std::vector<int>::pointer end = __x.__end_;
      if (!a2)
      {
LABEL_13:
        unint64_t v22 = (int)fmin((double)a3, (double)(unint64_t)(end - begin - 1));
        std::vector<int>::pointer v23 = (std::vector<int>::pointer)*a4;
        unint64_t v24 = (int *)a4[1];
        unint64_t v25 = ((char *)v24 - *a4) >> 2;
        if (v25 < v22)
        {
          uint64_t v26 = 0;
          uint64_t v27 = a4 + 2;
          do
          {
            int v28 = begin[v26];
            if (v28 != v8)
            {
              if ((unint64_t)v24 >= *v27)
              {
                uint64_t v29 = *v27 - (void)v23;
                uint64_t v30 = v29 >> 1;
                if (v29 >> 1 <= v25 + 1) {
                  uint64_t v30 = v25 + 1;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v30;
                }
                uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v31);
                std::vector<int>::pointer v34 = (std::vector<int>::pointer)*a4;
                std::vector<int>::pointer v35 = (std::vector<int>::pointer)a4[1];
                uint64_t v36 = &v33[4 * v25];
                *(_DWORD *)uint64_t v36 = v28;
                unint64_t v24 = (int *)(v36 + 4);
                while (v35 != v34)
                {
                  int v37 = *--v35;
                  *((_DWORD *)v36 - 1) = v37;
                  v36 -= 4;
                }
                *a4 = v36;
                a4[1] = (char *)v24;
                a4[2] = &v33[4 * v32];
                if (v34) {
                  operator delete(v34);
                }
              }
              else
              {
                *v24++ = v28;
              }
              a4[1] = (char *)v24;
              std::vector<int>::pointer v23 = (std::vector<int>::pointer)*a4;
            }
            ++v26;
            unint64_t v25 = v24 - v23;
          }
          while (v25 < v22);
        }
LABEL_122:
        if (!begin) {
          return;
        }
        std::vector<int>::pointer v99 = begin;
LABEL_422:
        operator delete(v99);
        return;
      }
    }
    if (a3)
    {
      uint64_t v87 = 0;
      uint64_t v88 = a4 + 2;
      std::vector<int>::pointer v89 = (std::vector<int>::pointer)a4[1];
      do
      {
        if ((unint64_t)v89 >= *v88)
        {
          std::vector<int>::pointer v91 = (std::vector<int>::pointer)*a4;
          uint64_t v92 = ((char *)v89 - *a4) >> 2;
          unint64_t v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v94 = *v88 - (void)v91;
          if (v94 >> 1 > v93) {
            unint64_t v93 = v94 >> 1;
          }
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v95 = v93;
          }
          if (v95)
          {
            uint64_t v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v95);
            std::vector<int>::pointer v91 = (std::vector<int>::pointer)*a4;
            std::vector<int>::pointer v89 = (std::vector<int>::pointer)a4[1];
          }
          else
          {
            uint64_t v96 = 0;
          }
          unint64_t v97 = &v96[4 * v92];
          *(_DWORD *)unint64_t v97 = begin[v87];
          unint64_t v90 = (int *)(v97 + 4);
          while (v89 != v91)
          {
            int v98 = *--v89;
            *((_DWORD *)v97 - 1) = v98;
            v97 -= 4;
          }
          *a4 = v97;
          a4[1] = (char *)v90;
          a4[2] = &v96[4 * v95];
          if (v91) {
            operator delete(v91);
          }
        }
        else
        {
          *std::vector<int>::pointer v89 = begin[v87];
          unint64_t v90 = v89 + 1;
        }
        a4[1] = (char *)v90;
        ++v87;
        std::vector<int>::pointer v89 = v90;
      }
      while (v87 != a3);
    }
    goto LABEL_122;
  }
  unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
  LODWORD(__x.__begin_) = 1;
  std::vector<int>::vector(&v336, (int)v38, (const std::vector<int>::value_type *)&__x);
  std::vector<int>::pointer v39 = v336.__begin_;
  if ((int)v38 >= 1)
  {
    uint64_t v40 = 0;
    unint64_t v41 = this[7];
    do
    {
      uint64_t v42 = (float **)&v41[3 * v40];
      uint64_t v43 = *v42;
      unint64_t v44 = v42[1];
      uint64_t v45 = v43 + 1;
      BOOL v46 = v43 == v44 || v45 == v44;
      uint64_t v47 = v43;
      if (!v46)
      {
        float v48 = *v43;
        uint64_t v47 = v43;
        int v49 = v43 + 1;
        do
        {
          float v50 = *v49++;
          float v51 = v50;
          if (v48 < v50)
          {
            float v48 = v51;
            uint64_t v47 = v45;
          }
          uint64_t v45 = v49;
        }
        while (v49 != v44);
      }
      float v52 = *v47;
      if (v8 == ((unint64_t)((char *)v47 - (char *)v43) >> 2) && v52 > 0.9) {
        v39[v40] = 0;
      }
      if (v52 == 0.0) {
        v39[v40] = 0;
      }
      ++v40;
    }
    while (v40 != v38);
  }
  memset(v335, 0, sizeof(v335));
  v333 = 0;
  uint64_t v334 = 0;
  v332 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v332, v39, (uint64_t)v336.__end_, v336.__end_ - v39);
  char v53 = indexGrouping(&v332, v335, 0);
  if (v332)
  {
    v333 = v332;
    operator delete(v332);
  }
  if ((v53 & 1) == 0)
  {
LABEL_420:
    __x.__begin_ = (std::vector<int>::pointer)v335;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
    std::vector<int>::pointer v99 = v336.__begin_;
    if (!v336.__begin_) {
      return;
    }
    v336.__end_ = v336.__begin_;
    goto LABEL_422;
  }
  v329 = 0;
  v330 = 0;
  unint64_t v331 = 0;
  v327 = 0;
  uint64_t v328 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v336.__begin_, (uint64_t)v336.__end_, v336.__end_ - v336.__begin_);
  int v54 = indexGrouping((char **)&__p, (uint64_t *)&v329, 1);
  if (__p)
  {
    v327 = __p;
    operator delete(__p);
  }
  if (!v54 || (unint64_t v55 = v329, v330 == (std::vector<int> *)v329))
  {
LABEL_419:
    __x.__begin_ = (std::vector<int>::pointer)&v329;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
    goto LABEL_420;
  }
  v293 = (void **)(this + 22);
  unint64_t v56 = 0;
  v323 = 0;
  v324 = 0;
  v325 = 0;
  v320 = 0;
  v321 = 0;
  unint64_t v322 = 0;
  do
  {
    uint64_t v57 = (*(void *)&v55[24 * v56 + 8] - *(void *)&v55[24 * v56]) >> 2;
    float v58 = v321;
    if ((unint64_t)v321 >= v322)
    {
      float v60 = v320;
      uint64_t v61 = ((char *)v321 - (unsigned char *)v320) >> 2;
      unint64_t v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v63 = v322 - (void)v320;
      if ((uint64_t)(v322 - (void)v320) >> 1 > v62) {
        unint64_t v62 = v63 >> 1;
      }
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64)
      {
        uint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v322, v64);
        float v60 = v320;
        float v58 = v321;
      }
      else
      {
        uint64_t v65 = 0;
      }
      unint64_t v66 = &v65[4 * v61];
      *(_DWORD *)unint64_t v66 = v57;
      unint64_t v59 = v66 + 4;
      while (v58 != v60)
      {
        int v67 = *--v58;
        *((_DWORD *)v66 - 1) = v67;
        v66 -= 4;
      }
      v320 = v66;
      v321 = v59;
      unint64_t v322 = (unint64_t)&v65[4 * v64];
      if (v60) {
        operator delete(v60);
      }
    }
    else
    {
      _DWORD *v321 = v57;
      unint64_t v59 = v58 + 1;
    }
    v321 = v59;
    unint64_t v55 = v329;
    if (v56)
    {
      int v68 = **(_DWORD **)&v329[24 * v56] - *(_DWORD *)(*(void *)&v329[24 * (v56 - 1) + 8] - 4);
      uint64_t v69 = v324;
      if (v324 >= v325)
      {
        unint64_t v71 = (char *)v323;
        uint64_t v72 = (v324 - (unsigned char *)v323) >> 2;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v74 = v325 - (unsigned char *)v323;
        if ((v325 - (unsigned char *)v323) >> 1 > v73) {
          unint64_t v73 = v74 >> 1;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75)
        {
          unint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v325, v75);
          unint64_t v71 = (char *)v323;
          uint64_t v69 = v324;
        }
        else
        {
          unint64_t v76 = 0;
        }
        uint64_t v77 = (int *)&v76[4 * v72];
        *uint64_t v77 = v68;
        unint64_t v70 = (char *)(v77 + 1);
        while (v69 != v71)
        {
          int v78 = *((_DWORD *)v69 - 1);
          v69 -= 4;
          *--uint64_t v77 = v78;
        }
        v323 = v77;
        v324 = v70;
        v325 = &v76[4 * v75];
        if (v71) {
          operator delete(v71);
        }
      }
      else
      {
        *(_DWORD *)v324 = v68;
        unint64_t v70 = v69 + 4;
      }
      v324 = v70;
      unint64_t v55 = v329;
    }
    ++v56;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)v330 - v55) >> 3) > v56);
  int v79 = v321;
  if (v321 == v320)
  {
LABEL_415:
    if (v79)
    {
      v321 = v79;
      operator delete(v79);
    }
    if (v323)
    {
      v324 = (char *)v323;
      operator delete(v323);
    }
    goto LABEL_419;
  }
  v317 = 0;
  v318 = 0;
  uint64_t v319 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v317, v320, (uint64_t)v321, ((char *)v321 - (unsigned char *)v320) >> 2);
  if (v318 == v317)
  {
    uint64_t v82 = 0;
  }
  else
  {
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    unint64_t v83 = v318 - v317;
    if (v83 <= 1) {
      unint64_t v83 = 1;
    }
    do
    {
      uint64_t v84 = 0;
      int v85 = v317;
      do
      {
        int v86 = *v85++;
        if (v86 == v317[v80]) {
          ++v84;
        }
      }
      while (v85 != v318);
      if (v84 > v81)
      {
        uint64_t v82 = v317[v80];
        uint64_t v81 = v84;
      }
      ++v80;
    }
    while (v80 != v83);
  }
  if (v317)
  {
    v318 = v317;
    operator delete(v317);
  }
  unint64_t v100 = v329;
  if (v330 == (std::vector<int> *)v329)
  {
    memset(&__x, 0, sizeof(__x));
LABEL_412:
    if (__x.__begin_)
    {
      __x.__end_ = __x.__begin_;
      operator delete(__x.__begin_);
    }
    int v79 = v320;
    goto LABEL_415;
  }
  uint64_t v101 = 0;
  char v294 = 0;
  LODWORD(v102) = 0;
  int v103 = 0;
  unint64_t v104 = 2 * v82;
  while (1)
  {
    v314 = 0;
    v315 = 0;
    uint64_t v316 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v314, *(const void **)&v100[24 * v101], *(void *)&v100[24 * v101 + 8], (uint64_t)(*(void *)&v100[24 * v101 + 8] - *(void *)&v100[24 * v101]) >> 2);
    std::vector<int>::size_type v105 = ((char *)v315 - (unsigned char *)v314) >> 2;
    if (v105 <= v104)
    {
      LODWORD(v102) = v102 + 1;
LABEL_224:
      int v129 = 0;
      goto LABEL_225;
    }
    LODWORD(__x.__begin_) = 1;
    std::vector<int>::vector(&v313, v105, (const std::vector<int>::value_type *)&__x);
    int v106 = v314;
    uint64_t v107 = v315;
    std::vector<int>::pointer v108 = v313.__begin_;
    if (v314 != v315)
    {
      uint64_t v109 = this[7];
      uint64_t v110 = (int *)v314;
      do
      {
        int v111 = *v110;
        unint64_t v112 = (float **)&v109[3 * *v110];
        uint64_t v113 = *v112;
        uint64_t v114 = v112[1];
        int v115 = v113 + 1;
        BOOL v116 = v113 == v114 || v115 == v114;
        v117 = v113;
        if (!v116)
        {
          float v118 = *v113;
          v117 = v113;
          BOOL v119 = v113 + 1;
          do
          {
            float v120 = *v119++;
            float v121 = v120;
            if (v118 < v120)
            {
              float v118 = v121;
              v117 = v115;
            }
            int v115 = v119;
          }
          while (v119 != v114);
        }
        float v122 = *v117;
        if (v8 == ((unint64_t)((char *)v117 - (char *)v113) >> 2) && v122 > 0.85) {
          v108[v111 - *v106] = 0;
        }
        if (v122 == 0.0) {
          v108[v111 - *v106] = 0;
        }
        ++v110;
      }
      while (v110 != v107);
    }
    v310 = 0;
    v311 = 0;
    v312 = 0;
    v308 = 0;
    uint64_t v309 = 0;
    v307 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v307, v108, (uint64_t)v313.__end_, v313.__end_ - v108);
    int v123 = indexGrouping((char **)&v307, (uint64_t *)&v310, 0);
    if (v307)
    {
      v308 = v307;
      operator delete(v307);
    }
    if (v123)
    {
      std::vector<int>::pointer v124 = v313.__begin_;
      if (v311 != v310)
      {
        unint64_t v125 = (v311 - (unsigned char *)v310) / 24;
        if (v125 <= 1) {
          unint64_t v125 = 1;
        }
        uint64_t v126 = (char *)v310 + 8;
        do
        {
          uint64_t v127 = (int *)*(v126 - 1);
          if (*v126 - (void)v127 <= 7uLL) {
            v124[*v127] = 1;
          }
          v126 += 3;
          --v125;
        }
        while (v125);
      }
      v304 = 0;
      v305 = 0;
      uint64_t v306 = 0;
      v302 = 0;
      uint64_t v303 = 0;
      v301 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v301, v124, (uint64_t)v313.__end_, v313.__end_ - v124);
      int v128 = indexGrouping((char **)&v301, (uint64_t *)&v304, 1);
      if (v301)
      {
        v302 = v301;
        operator delete(v301);
      }
      if (v128 && 0xAAAAAAAAAAAAAAABLL * ((v305 - (unsigned char *)v304) >> 3) > 1)
      {
        unint64_t v130 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::vector<int> *,std::vector<int> *,std::vector<int> *,0>((std::vector<int> *)&v329[24 * (int)v102 + 24], v330, (std::vector<int> *)&v329[24 * (int)v102]);
        char v131 = v330;
        if (v330 != v130)
        {
          char v132 = v330;
          do
          {
            std::vector<int>::pointer v134 = v132[-1].__begin_;
            --v132;
            int v133 = v134;
            if (v134)
            {
              v131[-1].__end_ = v133;
              operator delete(v133);
            }
            char v131 = v132;
          }
          while (v132 != v130);
        }
        v330 = v130;
        uint64_t v135 = (char *)v304;
        v297 = v305;
        if (v304 != v305)
        {
          unint64_t v292 = v104;
          uint64_t v102 = (int)v102;
          uint64_t v136 = 24 * (int)v102 - 24;
          do
          {
            v298 = 0;
            v299 = 0;
            uint64_t v300 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v298, *(const void **)v135, *((void *)v135 + 1), (uint64_t)(*((void *)v135 + 1) - *(void *)v135) >> 2);
            uint64_t v137 = v298;
            unint64_t v138 = v299;
            if (v298 != v299)
            {
              int v139 = *(_DWORD *)v314;
              do
                *v137++ += v139;
              while (v137 != v138);
            }
            float v140 = v329;
            int v141 = v330;
            unint64_t v142 = (std::vector<int> *)&v329[24 * v102];
            if ((unint64_t)v330 >= v331)
            {
              unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * (((char *)v330 - v329) >> 3) + 1;
              if (v150 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v331 - (void)v329) >> 3) > v150) {
                unint64_t v150 = 0x5555555555555556 * ((uint64_t)(v331 - (void)v329) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v331 - (void)v329) >> 3) >= 0x555555555555555) {
                unint64_t v151 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v151 = v150;
              }
              v340 = &v331;
              if (v151) {
                unint64_t v152 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v331, v151);
              }
              else {
                unint64_t v152 = 0;
              }
              unint64_t v153 = (std::vector<int> *)&v152[6 * v102];
              v337 = v152;
              *(void *)&long long v338 = v153;
              *((void *)&v338 + 1) = v153;
              v339 = (char *)&v152[6 * v151];
              if (v102 == v151)
              {
                if (v102 < 1)
                {
                  if (v102) {
                    unint64_t v155 = 2 * v102;
                  }
                  else {
                    unint64_t v155 = 1;
                  }
                  v343 = &v331;
                  float v156 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v331, v155);
                  uint64_t v158 = v338;
                  if (*((void *)&v338 + 1) == (void)v338)
                  {
                    int64x2_t v161 = vdupq_n_s64(v338);
                    uint64_t v159 = (uint64_t)&v156[6 * (v155 >> 2)];
                  }
                  else
                  {
                    uint64_t v159 = (uint64_t)&v156[6 * (v155 >> 2)] + *((void *)&v338 + 1) - v338;
                    v160 = (char *)&v156[6 * (v155 >> 2)];
                    do
                    {
                      *(void *)v160 = 0;
                      *((void *)v160 + 1) = 0;
                      *((void *)v160 + 2) = 0;
                      *(_OWORD *)v160 = *(_OWORD *)v158;
                      *((void *)v160 + 2) = *(void *)(v158 + 16);
                      *(void *)uint64_t v158 = 0;
                      *(void *)(v158 + 8) = 0;
                      *(void *)(v158 + 16) = 0;
                      v160 += 24;
                      v158 += 24;
                    }
                    while (v160 != (char *)v159);
                    int64x2_t v161 = (int64x2_t)v338;
                  }
                  unint64_t v162 = v337;
                  uint64_t v163 = v339;
                  v337 = v156;
                  *(void *)&long long v338 = &v156[6 * (v155 >> 2)];
                  *(int64x2_t *)&__x.__end_ = v161;
                  *((void *)&v338 + 1) = v159;
                  v339 = (char *)&v156[6 * v157];
                  __x.__begin_ = v162;
                  v342 = v163;
                  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&__x);
                  unint64_t v153 = (std::vector<int> *)*((void *)&v338 + 1);
                }
                else
                {
                  v154 = &v153[-((unint64_t)(v102 + 1) >> 1)];
                  unint64_t v153 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::vector<int> *,std::vector<int> *,std::vector<int> *,0>(v153, v153, v154);
                  *(void *)&long long v338 = v154;
                  *((void *)&v338 + 1) = v153;
                }
              }
              v153->__begin_ = 0;
              v153->__end_ = 0;
              v153->__end_cap_.__value_ = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v153, v298, (uint64_t)v299, ((char *)v299 - (unsigned char *)v298) >> 2);
              *((void *)&v338 + 1) += 24;
              std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)&v331, (uint64_t)v142, v142, (uint64_t)v329, v329, v338, v338);
              *(void *)&long long v338 = v164;
              v165 = v330;
              v166 = (std::vector<int> *)*((void *)&v338 + 1);
              if (v330 != v142)
              {
                do
                {
                  v166->__begin_ = 0;
                  v166->__end_ = 0;
                  v166->__end_cap_.__value_ = 0;
                  *(_OWORD *)&v166->__begin_ = *(_OWORD *)&v142->__begin_;
                  v166->__end_cap_.__value_ = v142->__end_cap_.__value_;
                  v142->__begin_ = 0;
                  v142->__end_ = 0;
                  v142->__end_cap_.__value_ = 0;
                  ++v166;
                  ++v142;
                }
                while (v142 != v165);
                unint64_t v164 = (char *)v338;
                unint64_t v142 = v330;
              }
              v167 = v329;
              unint64_t v168 = v331;
              v329 = v164;
              v330 = v166;
              unint64_t v331 = (unint64_t)v339;
              *((void *)&v338 + 1) = v142;
              v339 = (char *)v168;
              v337 = (int *)v167;
              *(void *)&long long v338 = v167;
              std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v337);
            }
            else if (v142 == v330)
            {
              v142->__begin_ = 0;
              v142->__end_ = 0;
              v142->__end_cap_.__value_ = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v142, v298, (uint64_t)v299, ((char *)v299 - (unsigned char *)v298) >> 2);
              v330 = v142 + 1;
            }
            else
            {
              int v143 = v330 - 1;
              unint64_t v144 = v330;
              unint64_t v145 = v330 - 1;
              if ((unint64_t)v330 >= 0x18)
              {
                do
                {
                  v144->__begin_ = 0;
                  v144->__end_ = 0;
                  v144->__end_cap_.__value_ = 0;
                  *(_OWORD *)&v144->__begin_ = *(_OWORD *)&v145->__begin_;
                  v144->__end_cap_.__value_ = v145->__end_cap_.__value_;
                  v145->__begin_ = 0;
                  v145->__end_ = 0;
                  v145->__end_cap_.__value_ = 0;
                  ++v144;
                  ++v145;
                }
                while (v145 < v141);
              }
              v330 = v144;
              if (v141 != &v142[1])
              {
                uint64_t v146 = 8 * (((char *)v141 - (char *)&v142[1]) >> 3);
                uint64_t v147 = &v140[v136];
                do
                {
                  std::vector<int>::__move_assign((uint64_t)v143--, (__n128 *)&v147[v146]);
                  v146 -= 24;
                }
                while (v146);
                unint64_t v144 = v330;
              }
              BOOL v149 = v142 <= (std::vector<int> *)&v298 && v144 > (std::vector<int> *)&v298;
              if (v142 != (std::vector<int> *)(&v298 + 3 * v149)) {
                std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v142, (char *)v298, (uint64_t)v299, ((char *)v299 - (unsigned char *)v298) >> 2);
              }
            }
            if (v298)
            {
              v299 = v298;
              operator delete(v298);
            }
            ++v102;
            v135 += 24;
            v136 += 24;
          }
          while (v135 != v297);
          unint64_t v104 = v292;
        }
        int v129 = 0;
        int v103 = v102 - 1;
      }
      else
      {
        LODWORD(v102) = v102 + 1;
        int v129 = 15;
      }
      __x.__begin_ = (std::vector<int>::pointer)&v304;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
    }
    else
    {
      int v129 = 1;
      char v294 = 1;
    }
    __x.__begin_ = (std::vector<int>::pointer)&v310;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
    if (v313.__begin_)
    {
      v313.__end_ = v313.__begin_;
      operator delete(v313.__begin_);
    }
    if (!v129) {
      goto LABEL_224;
    }
LABEL_225:
    if (v314)
    {
      v315 = (int *)v314;
      operator delete(v314);
    }
    if (v129 != 15 && v129) {
      break;
    }
    uint64_t v101 = ++v103;
    unint64_t v100 = v329;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v330 - v329) >> 3) <= v103)
    {
      memset(&__x, 0, sizeof(__x));
      v337 = 0;
      long long v338 = 0uLL;
      if (v330 != (std::vector<int> *)v329)
      {
        uint64_t v169 = 0;
        do
        {
          uint64_t v170 = &v100[24 * v169];
          int v295 = *(_DWORD *)(*(void *)v170
                           + (((uint64_t)(*((void *)v170 + 1) - *(void *)v170) >> 1) & 0xFFFFFFFFFFFFFFFCLL));
          v314 = 0;
          v315 = 0;
          uint64_t v316 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v314, *(const void **)v170, *((void *)v170 + 1), (uint64_t)(*((void *)v170 + 1) - *(void *)v170) >> 2);
          uint64_t v296 = v169;
          v313.__end_ = 0;
          v313.__end_cap_.__value_ = 0;
          v312 = 0;
          v313.__begin_ = (std::vector<int>::pointer)&v313.__end_;
          v310 = 0;
          v311 = 0;
          v172 = (int *)v314;
          uint64_t v171 = v315;
          do
          {
            int v173 = *v172;
            uint64_t v174 = (uint64_t)&this[7][3 * *v172];
            v175 = *(float **)v174;
            uint64_t v176 = *(float **)(v174 + 8);
            v177 = v175 + 1;
            BOOL v178 = v175 == v176 || v177 == v176;
            uint64_t v179 = v175;
            if (!v178)
            {
              float v180 = *v175;
              uint64_t v179 = v175;
              v181 = v175 + 1;
              do
              {
                float v182 = *v181++;
                float v183 = v182;
                if (v180 < v182)
                {
                  float v180 = v183;
                  uint64_t v179 = v177;
                }
                v177 = v181;
              }
              while (v181 != v176);
            }
            float v184 = *v179;
            unint64_t v185 = (unint64_t)((char *)v179 - (char *)v175) >> 2;
            LODWORD(v304) = v185;
            if (v8 == v185)
            {
              v186 = v311;
              if (v311 >= v312)
              {
                uint64_t v198 = (char *)v310;
                uint64_t v199 = (v311 - (unsigned char *)v310) >> 2;
                unint64_t v200 = v199 + 1;
                if ((unint64_t)(v199 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v201 = v312 - (unsigned char *)v310;
                if ((v312 - (unsigned char *)v310) >> 1 > v200) {
                  unint64_t v200 = v201 >> 1;
                }
                if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v202 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v202 = v200;
                }
                if (v202)
                {
                  v203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v312, v202);
                  uint64_t v198 = (char *)v310;
                  v186 = v311;
                }
                else
                {
                  v203 = 0;
                }
                v205 = &v203[4 * v199];
                *(_DWORD *)v205 = v173;
                v187 = v205 + 4;
                while (v186 != v198)
                {
                  int v206 = *((_DWORD *)v186 - 1);
                  v186 -= 4;
                  *((_DWORD *)v205 - 1) = v206;
                  v205 -= 4;
                }
                v310 = v205;
                v311 = v187;
                v312 = &v203[4 * v202];
                if (v198) {
                  operator delete(v198);
                }
              }
              else
              {
                *(_DWORD *)v311 = v173;
                v187 = v186 + 4;
              }
              v311 = v187;
            }
            else
            {
              std::vector<int>::pointer v188 = v313.__end_;
              p_std::vector<int>::pointer end = &v313.__end_;
              v190 = &v313.__end_;
              if (v313.__end_)
              {
                v191 = (std::vector<int> *)&v313.__end_;
                std::vector<int>::pointer v192 = v313.__end_;
                do
                {
                  std::vector<int>::pointer v193 = v192;
                  v194 = v191;
                  int v195 = v192[7];
                  if (v195 >= (int)v185) {
                    v191 = (std::vector<int> *)v192;
                  }
                  else {
                    v192 += 2;
                  }
                  std::vector<int>::pointer v192 = *(std::vector<int>::pointer *)v192;
                }
                while (v192);
                if (v191 == (std::vector<int> *)&v313.__end_) {
                  goto LABEL_257;
                }
                if (v195 < (int)v185) {
                  std::vector<int>::pointer v193 = (std::vector<int>::pointer)v194;
                }
                if (v193[7] > (int)v185)
                {
LABEL_257:
                  while (1)
                  {
                    while (1)
                    {
                      v190 = (std::vector<int>::pointer *)v188;
                      int v196 = v188[7];
                      if (v196 <= (int)v185) {
                        break;
                      }
                      std::vector<int>::pointer v188 = *v190;
                      p_std::vector<int>::pointer end = v190;
                      if (!*v190) {
                        goto LABEL_260;
                      }
                    }
                    if (v196 >= (int)v185) {
                      break;
                    }
                    std::vector<int>::pointer v188 = v190[1];
                    if (!v188)
                    {
                      p_std::vector<int>::pointer end = v190 + 1;
                      goto LABEL_260;
                    }
                  }
                }
                else
                {
                  v204 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v313, v185, (unsigned int *)&v304);
                  *((float *)v204 + 8) = v184 + *((float *)v204 + 8);
                }
              }
              else
              {
LABEL_260:
                uint64_t v197 = (float *)operator new(0x28uLL);
                *((_DWORD *)v197 + 7) = v185;
                v197[8] = v184;
                *(void *)uint64_t v197 = 0;
                *((void *)v197 + 1) = 0;
                *((void *)v197 + 2) = v190;
                *p_std::vector<int>::pointer end = (std::vector<int>::pointer)v197;
                if (*(void *)v313.__begin_)
                {
                  v313.__begin_ = *(std::vector<int>::pointer *)v313.__begin_;
                  uint64_t v197 = (float *)*p_end;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v313.__end_, (uint64_t *)v197);
                ++v313.__end_cap_.__value_;
              }
            }
            ++v172;
          }
          while (v172 != v171);
          v207 = (char *)v310;
          if (v313.__end_cap_.__value_)
          {
            v208 = v311;
            while (v207 != v208)
            {
              std::vector<int>::pointer v209 = v313.__begin_;
              if ((std::vector<int>::pointer *)v313.__begin_ != &v313.__end_)
              {
                int v210 = *(_DWORD *)v207;
                do
                {
                  v304 = *(void **)(v209 + 7);
                  float v211 = *(float *)(this[7][3 * v210] + 4 * (int)v304);
                  v212 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v313, (int)v304, (unsigned int *)&v304);
                  *((float *)v212 + 8) = v211 + *((float *)v212 + 8);
                  v213 = (std::vector<int> *)*((void *)v209 + 1);
                  if (v213)
                  {
                    do
                    {
                      v214 = v213;
                      v213 = (std::vector<int> *)v213->__begin_;
                    }
                    while (v213);
                  }
                  else
                  {
                    do
                    {
                      v214 = (std::vector<int> *)*((void *)v209 + 2);
                      BOOL v14 = v214->__begin_ == v209;
                      std::vector<int>::pointer v209 = (std::vector<int>::pointer)v214;
                    }
                    while (!v14);
                  }
                  std::vector<int>::pointer v209 = (std::vector<int>::pointer)v214;
                }
                while (v214 != (std::vector<int> *)&v313.__end_);
              }
              v207 += 4;
            }
            std::vector<int>::pointer v215 = v313.__begin_;
            v216 = (float *)&v313.__end_;
            if ((std::vector<int>::pointer *)v313.__begin_ != &v313.__end_)
            {
              v216 = (float *)v313.__begin_;
              while (1)
              {
                v217 = (int *)*((void *)v215 + 1);
                std::vector<int>::pointer v218 = v215;
                if (v217)
                {
                  do
                  {
                    std::vector<int>::pointer v215 = v217;
                    v217 = *(int **)v217;
                  }
                  while (v217);
                }
                else
                {
                  do
                  {
                    std::vector<int>::pointer v215 = (std::vector<int>::pointer)*((void *)v218 + 2);
                    BOOL v14 = *(void *)v215 == (void)v218;
                    std::vector<int>::pointer v218 = v215;
                  }
                  while (!v14);
                }
                if (v215 == (std::vector<int>::pointer)&v313.__end_) {
                  break;
                }
                if ((int)v216[8] < (int)*((float *)v215 + 8)) {
                  v216 = (float *)v215;
                }
              }
            }
            uint64_t v219 = *((int *)v216 + 7);
          }
          else
          {
            uint64_t v220 = (uint64_t)&this[7][3 * *(int *)v310];
            v305 = 0;
            uint64_t v306 = 0;
            v304 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v304, *(const void **)v220, *(void *)(v220 + 8), (uint64_t)(*(void *)(v220 + 8) - *(void *)v220) >> 2);
            v221 = v304;
            v222 = (char *)v304 + 4 * v8;
            int64_t v223 = v305 - (v222 + 4);
            if (v305 != v222 + 4)
            {
              memmove((char *)v304 + 4 * v8, v222 + 4, v305 - (v222 + 4));
              v221 = v304;
            }
            v305 = &v222[v223];
            v298 = 0;
            v299 = 0;
            uint64_t v300 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v298, v221, (uint64_t)&v222[v223], (&v222[v223] - (unsigned char *)v221) >> 2);
            v224 = v310;
            if ((unint64_t)(v311 - (unsigned char *)v310) < 5)
            {
              unint64_t v237 = (unint64_t)(v311 - (unsigned char *)v310) >> 2;
              v233 = (float *)v298;
              v234 = (float *)v299;
            }
            else
            {
              unint64_t v225 = 1;
              do
              {
                int v226 = v224[v225];
                v227 = this[7];
                v228 = (char **)&v227[3 * v226];
                if (&v304 != (void **)v228)
                {
                  uint64_t v229 = v227[3 * v226 + 1];
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v304, *v228, v229, (v229 - (uint64_t)*v228) >> 2);
                }
                v230 = (float *)v304;
                v231 = (char *)v304 + 4 * v8;
                int64_t v232 = v305 - (v231 + 4);
                if (v305 != v231 + 4)
                {
                  memmove((char *)v304 + 4 * v8, v231 + 4, v305 - (v231 + 4));
                  v230 = (float *)v304;
                }
                v305 = &v231[v232];
                v233 = (float *)v298;
                v234 = (float *)v299;
                if (v298 != v299)
                {
                  v235 = (float *)v298;
                  do
                  {
                    float v236 = *v230++;
                    float *v235 = *v235 + v236;
                    ++v235;
                  }
                  while (v235 != v234);
                }
                ++v225;
                v224 = v310;
                unint64_t v237 = (v311 - (unsigned char *)v310) >> 2;
              }
              while (v237 > v225);
            }
            if (v233 == v234) {
              goto LABEL_327;
            }
            float v238 = 1.0 / (float)v237;
            v239 = v233;
            do
            {
              float *v239 = v238 * *v239;
              ++v239;
            }
            while (v239 != v234);
            v240 = v233 + 1;
            if (v233 + 1 == v234)
            {
LABEL_327:
              v242 = v233;
            }
            else
            {
              float v241 = *v233;
              v242 = v233;
              v243 = v233 + 1;
              do
              {
                float v244 = *v243++;
                float v245 = v244;
                if (v241 < v244)
                {
                  float v241 = v245;
                  v242 = v240;
                }
                v240 = v243;
              }
              while (v243 != v234);
            }
            uint64_t v246 = v242 - v233;
            if (v246 < v8) {
              uint64_t v219 = v242 - v233;
            }
            else {
              uint64_t v219 = v246 + 1;
            }
            if (v233)
            {
              v299 = v233;
              operator delete(v233);
            }
            if (v304)
            {
              v305 = (char *)v304;
              operator delete(v304);
            }
          }
          if (v219 != v8)
          {
            std::vector<int>::pointer v248 = (std::vector<int>::pointer)a4[1];
            unint64_t v247 = (unint64_t)a4[2];
            if ((unint64_t)v248 >= v247)
            {
              std::vector<int>::pointer v250 = (std::vector<int>::pointer)*a4;
              uint64_t v251 = ((char *)v248 - *a4) >> 2;
              unint64_t v252 = v251 + 1;
              if ((unint64_t)(v251 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v253 = v247 - (void)v250;
              if (v253 >> 1 > v252) {
                unint64_t v252 = v253 >> 1;
              }
              if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v254 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v254 = v252;
              }
              if (v254)
              {
                v255 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v254);
                std::vector<int>::pointer v250 = (std::vector<int>::pointer)*a4;
                std::vector<int>::pointer v248 = (std::vector<int>::pointer)a4[1];
              }
              else
              {
                v255 = 0;
              }
              v256 = &v255[4 * v251];
              *(_DWORD *)v256 = v219;
              v249 = v256 + 4;
              while (v248 != v250)
              {
                int v257 = *--v248;
                *((_DWORD *)v256 - 1) = v257;
                v256 -= 4;
              }
              *a4 = v256;
              a4[1] = v249;
              a4[2] = &v255[4 * v254];
              if (v250) {
                operator delete(v250);
              }
            }
            else
            {
              *std::vector<int>::pointer v248 = v219;
              v249 = (char *)(v248 + 1);
            }
            a4[1] = v249;
            if (v295 >= 0) {
              int v258 = v295;
            }
            else {
              int v258 = v295 + 1;
            }
            float v259 = (float)(v258 >> 1);
            v261 = (float *)this[23];
            v260 = this[24];
            if (v261 >= (float *)v260)
            {
              v263 = (uint64_t *)*v293;
              uint64_t v264 = ((char *)v261 - (unsigned char *)*v293) >> 3;
              unint64_t v265 = v264 + 1;
              if ((unint64_t)(v264 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v266 = (char *)v260 - (char *)v263;
              if (v266 >> 2 > v265) {
                unint64_t v265 = v266 >> 2;
              }
              if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v267 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v267 = v265;
              }
              if (v267)
              {
                v268 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(this + 24), v267);
                v263 = this[22];
                v261 = (float *)this[23];
              }
              else
              {
                v268 = 0;
              }
              v269 = &v268[8 * v264];
              *(_DWORD *)v269 = 1065353216;
              *((float *)v269 + 1) = v259;
              v270 = (uint64_t *)v269;
              if (v261 != (float *)v263)
              {
                do
                {
                  uint64_t v271 = *((void *)v261 - 1);
                  v261 -= 2;
                  *--v270 = v271;
                }
                while (v261 != (float *)v263);
                v263 = (uint64_t *)*v293;
              }
              v262 = (uint64_t *)(v269 + 8);
              this[22] = v270;
              this[23] = (uint64_t *)(v269 + 8);
              this[24] = (uint64_t *)&v268[8 * v267];
              if (v263) {
                operator delete(v263);
              }
            }
            else
            {
              float *v261 = 1.0;
              v261[1] = v259;
              v262 = (uint64_t *)(v261 + 2);
            }
            this[23] = v262;
            std::vector<int>::pointer v272 = __x.__end_;
            if (__x.__end_ >= __x.__end_cap_.__value_)
            {
              std::vector<int>::pointer v274 = __x.__begin_;
              int64_t v275 = __x.__end_ - __x.__begin_;
              unint64_t v276 = v275 + 1;
              if ((unint64_t)(v275 + 1) >> 62) {
                goto LABEL_440;
              }
              int64_t v277 = (char *)__x.__end_cap_.__value_ - (char *)__x.__begin_;
              if (((char *)__x.__end_cap_.__value_ - (char *)__x.__begin_) >> 1 > v276) {
                unint64_t v276 = v277 >> 1;
              }
              if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v278 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v278 = v276;
              }
              if (v278)
              {
                v279 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__x.__end_cap_, v278);
                std::vector<int>::pointer v274 = __x.__begin_;
                std::vector<int>::pointer v272 = __x.__end_;
              }
              else
              {
                v279 = 0;
              }
              v280 = (int *)&v279[4 * v275];
              int *v280 = v295;
              v273 = v280 + 1;
              while (v272 != v274)
              {
                int v281 = *--v272;
                *--v280 = v281;
              }
              __x.__begin_ = v280;
              __x.__end_ = v273;
              __x.__end_cap_.__value_ = (int *)&v279[4 * v278];
              if (v274) {
                operator delete(v274);
              }
            }
            else
            {
              *__x.__end_ = v295;
              v273 = v272 + 1;
            }
            __x.__end_ = v273;
            v282 = (int *)v338;
            if ((unint64_t)v338 >= *((void *)&v338 + 1))
            {
              v284 = v337;
              uint64_t v285 = (uint64_t)(v338 - (void)v337) >> 2;
              unint64_t v286 = v285 + 1;
              if ((unint64_t)(v285 + 1) >> 62) {
LABEL_440:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              uint64_t v287 = *((void *)&v338 + 1) - (void)v337;
              if ((uint64_t)(*((void *)&v338 + 1) - (void)v337) >> 1 > v286) {
                unint64_t v286 = v287 >> 1;
              }
              if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v288 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v288 = v286;
              }
              if (v288)
              {
                v289 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v338 + 8, v288);
                v284 = v337;
                v282 = (int *)v338;
              }
              else
              {
                v289 = 0;
              }
              v290 = (int *)&v289[4 * v285];
              int *v290 = v296;
              v283 = v290 + 1;
              while (v282 != v284)
              {
                int v291 = *--v282;
                *--v290 = v291;
              }
              v337 = v290;
              *(void *)&long long v338 = v283;
              *((void *)&v338 + 1) = &v289[4 * v288];
              if (v284) {
                operator delete(v284);
              }
            }
            else
            {
              *(_DWORD *)long long v338 = v296;
              v283 = v282 + 1;
            }
            *(void *)&long long v338 = v283;
          }
          if (v310)
          {
            v311 = (char *)v310;
            operator delete(v310);
          }
          std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((void *)v313.__end_);
          if (v314)
          {
            v315 = (int *)v314;
            operator delete(v314);
          }
          uint64_t v169 = v296 + 1;
          unint64_t v100 = v329;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v330 - v329) >> 3) > v296 + 1);
        if (v337)
        {
          *(void *)&long long v338 = v337;
          operator delete(v337);
        }
      }
      goto LABEL_412;
    }
  }
  if (v320)
  {
    v321 = v320;
    operator delete(v320);
  }
  if (v323)
  {
    v324 = (char *)v323;
    operator delete(v323);
  }
  __x.__begin_ = (std::vector<int>::pointer)&v329;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  __x.__begin_ = (std::vector<int>::pointer)v335;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  if (v336.__begin_)
  {
    v336.__end_ = v336.__begin_;
    operator delete(v336.__begin_);
  }
  if ((v294 & 1) == 0)
  {
    std::vector<int>::pointer v99 = (std::vector<int>::pointer)*a4;
    if (*a4)
    {
      a4[1] = (char *)v99;
      goto LABEL_422;
    }
  }
}

void sub_1DD74A740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t *a44,uint64_t *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (__p) {
    operator delete(__p);
  }
  if (a44)
  {
    a45 = a44;
    operator delete(a44);
  }
  a44 = &a50;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  a50 = v52 - 232;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  int v54 = *(void **)(v52 - 208);
  if (v54)
  {
    *(void *)(v52 - 200) = v54;
    operator delete(v54);
  }
  unint64_t v55 = *(void **)v51;
  if (*(void *)v51)
  {
    *(void *)(v51 + 8) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1DD74A9F4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void __clang_call_terminate(void *a1)
{
}

int *std::__introsort<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *,false>(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v45 = *(a2 - 1);
                uint64_t v46 = *v12;
                if (*(float *)(**a3 + 4 * v45) > *(float *)(**a3 + 4 * v46))
                {
                  *uint64_t v12 = v45;
                  *(a2 - 1) = v46;
                }
                break;
              case 3uLL:
                uint64_t v47 = **a3;
                __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v12, v12 + 1, a2 - 1, v47);
                break;
              case 4uLL:
                __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                float v48 = v12 + 2;
                int v49 = v12 + 3;
                __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                uint64_t v50 = *(a2 - 1);
                uint64_t v51 = v12[3];
                uint64_t v52 = **a3;
                if (*(float *)(v52 + 4 * v50) > *(float *)(v52 + 4 * v51))
                {
                  int *v49 = v50;
                  *(a2 - 1) = v51;
                  uint64_t v53 = *v49;
                  uint64_t v54 = *v48;
                  float v55 = *(float *)(v52 + 4 * v53);
                  if (v55 > *(float *)(v52 + 4 * v54))
                  {
                    *float v48 = v53;
                    int *v49 = v54;
                    uint64_t v56 = v12[1];
                    if (v55 > *(float *)(v52 + 4 * v56))
                    {
                      v12[1] = v53;
                      v12[2] = v56;
                      uint64_t v57 = *v12;
                      if (v55 > *(float *)(v52 + 4 * v57))
                      {
                        *uint64_t v12 = v53;
                        v12[1] = v57;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                float v58 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v59 = **a3;
                  uint64_t v60 = 4;
                  uint64_t v61 = v12;
                  do
                  {
                    uint64_t v63 = *v61;
                    uint64_t v62 = v61[1];
                    uint64_t v61 = v58;
                    float v64 = *(float *)(v59 + 4 * v62);
                    if (v64 > *(float *)(v59 + 4 * v63))
                    {
                      uint64_t v65 = v60;
                      do
                      {
                        *(int *)((char *)v12 + v65) = v63;
                        uint64_t v66 = v65 - 4;
                        if (v65 == 4)
                        {
                          int v67 = v12;
                          goto LABEL_80;
                        }
                        uint64_t v63 = *(int *)((char *)v12 + v65 - 8);
                        v65 -= 4;
                      }
                      while (v64 > *(float *)(v59 + 4 * v63));
                      int v67 = (int *)((char *)v12 + v66);
LABEL_80:
                      *int v67 = v62;
                    }
                    float v58 = v61 + 1;
                    v60 += 4;
                  }
                  while (v61 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              std::vector<int>::pointer v99 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v100 = **a3;
                do
                {
                  uint64_t v102 = *v11;
                  uint64_t v101 = v11[1];
                  uint64_t v11 = v99;
                  float v103 = *(float *)(v100 + 4 * v101);
                  if (v103 > *(float *)(v100 + 4 * v102))
                  {
                    do
                    {
                      *std::vector<int>::pointer v99 = v102;
                      uint64_t v102 = *(v99 - 2);
                      --v99;
                    }
                    while (v103 > *(float *)(v100 + 4 * v102));
                    *std::vector<int>::pointer v99 = v101;
                  }
                  std::vector<int>::pointer v99 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v68 = (v14 - 2) >> 1;
              uint64_t v69 = *a3;
              int64_t v70 = v68;
              do
              {
                int64_t v71 = v70;
                if (v68 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  unint64_t v73 = &v12[v72];
                  uint64_t v74 = 2 * v70 + 2;
                  uint64_t v75 = *v69;
                  if (v74 < (uint64_t)v14 && *(float *)(v75 + 4 * *v73) > *(float *)(v75 + 4 * v73[1]))
                  {
                    ++v73;
                    uint64_t v72 = 2 * v71 + 2;
                  }
                  __n128 result = &v12[v71];
                  uint64_t v76 = *v73;
                  uint64_t v77 = *result;
                  float v78 = *(float *)(v75 + 4 * v77);
                  if (*(float *)(v75 + 4 * v76) <= v78)
                  {
                    do
                    {
                      int v79 = v73;
                      *__n128 result = v76;
                      if (v68 < v72) {
                        break;
                      }
                      uint64_t v80 = 2 * v72;
                      uint64_t v72 = (2 * v72) | 1;
                      unint64_t v73 = &v12[v72];
                      uint64_t v81 = v80 + 2;
                      if (v81 < (uint64_t)v14 && *(float *)(v75 + 4 * *v73) > *(float *)(v75 + 4 * v73[1]))
                      {
                        ++v73;
                        uint64_t v72 = v81;
                      }
                      uint64_t v76 = *v73;
                      __n128 result = v79;
                    }
                    while (*(float *)(v75 + 4 * v76) <= v78);
                    int *v79 = v77;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              uint64_t v82 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v83 = 0;
                int v84 = *v12;
                int v85 = *a3;
                int v86 = v12;
                do
                {
                  uint64_t v87 = v86;
                  v86 += v83 + 1;
                  uint64_t v88 = 2 * v83;
                  uint64_t v83 = (2 * v83) | 1;
                  uint64_t v89 = v88 + 2;
                  if (v89 < v82)
                  {
                    __n128 result = (int *)v86[1];
                    if (*(float *)(*v85 + 4 * *v86) > *(float *)(*v85 + 4 * (void)result))
                    {
                      ++v86;
                      uint64_t v83 = v89;
                    }
                  }
                  *uint64_t v87 = *v86;
                }
                while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
                if (v86 == --a2)
                {
                  *int v86 = v84;
                }
                else
                {
                  *int v86 = *a2;
                  *a2 = v84;
                  uint64_t v90 = (char *)v86 - (char *)v12 + 4;
                  if (v90 >= 5)
                  {
                    unint64_t v91 = (((unint64_t)v90 >> 2) - 2) >> 1;
                    uint64_t v92 = &v12[v91];
                    uint64_t v93 = *v92;
                    uint64_t v94 = *v86;
                    uint64_t v95 = *v85;
                    float v96 = *(float *)(v95 + 4 * v94);
                    if (*(float *)(v95 + 4 * v93) > v96)
                    {
                      do
                      {
                        unint64_t v97 = v92;
                        *int v86 = v93;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                        uint64_t v92 = &v12[v91];
                        uint64_t v93 = *v92;
                        int v86 = v97;
                      }
                      while (*(float *)(v95 + 4 * v93) > v96);
                      *unint64_t v97 = v94;
                    }
                  }
                }
              }
              while (v82-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          float v16 = &v12[v14 >> 1];
          uint64_t v17 = **a3;
          if ((unint64_t)v13 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v11, &v11[v14 >> 1], a2 - 1, v17);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v11 + 1, v16 - 1, a2 - 2, **a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v11 + 2, &v11[v15 + 1], a2 - 3, **a3);
            __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v16 - 1, v16, &v11[v15 + 1], **a3);
            int v18 = *v11;
            *uint64_t v11 = *v16;
            *float v16 = v18;
          }
          else
          {
            __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(&v11[v14 >> 1], v11, a2 - 1, v17);
          }
          --a4;
          int v19 = *v11;
          uint64_t v20 = **a3;
          if (a5) {
            break;
          }
          float v21 = *(float *)(v20 + 4 * v19);
          if (*(float *)(v20 + 4 * *(v11 - 1)) > v21) {
            goto LABEL_13;
          }
          if (v21 <= *(float *)(v20 + 4 * *(a2 - 1)))
          {
            int v37 = v11 + 1;
            do
            {
              uint64_t v12 = v37;
              if (v37 >= a2) {
                break;
              }
              ++v37;
            }
            while (v21 <= *(float *)(v20 + 4 * *v12));
          }
          else
          {
            uint64_t v12 = v11;
            do
            {
              uint64_t v36 = v12[1];
              ++v12;
            }
            while (v21 <= *(float *)(v20 + 4 * v36));
          }
          unint64_t v38 = a2;
          if (v12 < a2)
          {
            unint64_t v38 = a2;
            do
              uint64_t v39 = *--v38;
            while (v21 > *(float *)(v20 + 4 * v39));
          }
          if (v12 < v38)
          {
            int v40 = *v12;
            int v41 = *v38;
            do
            {
              *uint64_t v12 = v41;
              *unint64_t v38 = v40;
              do
              {
                uint64_t v42 = v12[1];
                ++v12;
                int v40 = v42;
              }
              while (v21 <= *(float *)(v20 + 4 * v42));
              do
              {
                uint64_t v43 = *--v38;
                int v41 = v43;
              }
              while (v21 > *(float *)(v20 + 4 * v43));
            }
            while (v12 < v38);
          }
          unint64_t v44 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v44;
          }
          a5 = 0;
          int *v44 = v19;
        }
        float v21 = *(float *)(v20 + 4 * v19);
LABEL_13:
        uint64_t v22 = 0;
        do
          uint64_t v23 = v11[++v22];
        while (*(float *)(v20 + 4 * v23) > v21);
        unint64_t v24 = &v11[v22];
        unint64_t v25 = a2;
        if (v22 == 1)
        {
          unint64_t v25 = a2;
          do
          {
            if (v24 >= v25) {
              break;
            }
            uint64_t v27 = *--v25;
          }
          while (*(float *)(v20 + 4 * v27) <= v21);
        }
        else
        {
          do
            uint64_t v26 = *--v25;
          while (*(float *)(v20 + 4 * v26) <= v21);
        }
        if (v24 >= v25)
        {
          std::vector<int>::pointer v34 = v24 - 1;
        }
        else
        {
          int v28 = *v25;
          int v29 = v23;
          uint64_t v30 = &v11[v22];
          unint64_t v31 = v25;
          do
          {
            *uint64_t v30 = v28;
            *unint64_t v31 = v29;
            do
            {
              uint64_t v32 = v30[1];
              ++v30;
              int v29 = v32;
            }
            while (*(float *)(v20 + 4 * v32) > v21);
            do
            {
              uint64_t v33 = *--v31;
              int v28 = v33;
            }
            while (*(float *)(v20 + 4 * v33) <= v21);
          }
          while (v30 < v31);
          std::vector<int>::pointer v34 = v30 - 1;
        }
        if (v34 != v11) {
          *uint64_t v11 = *v34;
        }
        int *v34 = v19;
        if (v24 >= v25) {
          break;
        }
LABEL_34:
        __n128 result = (int *)std::__introsort<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *,false>(v11, v34, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v34 + 1;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v11, v34, a3);
      uint64_t v12 = v34 + 1;
      __n128 result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v34 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_34;
      }
    }
    a2 = v34;
    if (!v35) {
      continue;
    }
    return result;
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  float v6 = *(float *)(a4 + 4 * v4);
  float v7 = *(float *)(a4 + 4 * v5);
  uint64_t v8 = *a3;
  float v9 = *(float *)(a4 + 4 * v8);
  if (v6 <= v7)
  {
    if (v9 > v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *a2;
      uint64_t v11 = *result;
      if (*(float *)(a4 + 4 * v10) > *(float *)(a4 + 4 * v11))
      {
        *__n128 result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 <= v6)
    {
      *__n128 result = v4;
      *a2 = v5;
      uint64_t v12 = *a3;
      if (*(float *)(a4 + 4 * v12) <= v7) {
        return result;
      }
      *a2 = v12;
    }
    else
    {
      *__n128 result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) > *(float *)(**a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      float v21 = a1 + 2;
      uint64_t v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = **a3;
      if (*(float *)(v25 + 4 * v23) > *(float *)(v25 + 4 * v24))
      {
        *uint64_t v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        float v28 = *(float *)(v25 + 4 * v26);
        if (v28 > *(float *)(v25 + 4 * v27))
        {
          *float v21 = v26;
          *uint64_t v22 = v27;
          uint64_t v29 = a1[1];
          if (v28 > *(float *)(v25 + 4 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (v28 > *(float *)(v25 + 4 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, **a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * v15);
    if (v17 > *(float *)(v13 + 4 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(float *)(v13 + 4 * v16))
        {
          uint64_t v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *uint64_t v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(a1, a2, a3, **a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = **a5;
  if (*(float *)(v13 + 4 * v11) > *(float *)(v13 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(float *)(v13 + 4 * v14) > *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(float *)(v13 + 4 * v16) > *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

void *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a1 + 8);
  *int v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  BOOL result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1DD74B658(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1DD74B764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void ___ZL7logZerov_block_invoke()
{
  logZero(void)::slogZero = 0xC06CC845B54B54F2;
}

void Matrix<float>::~Matrix(void *a1)
{
  *a1 = &unk_1F38ECED8;
  uint64_t v1 = a1[16];
  if (v1) {
    MEMORY[0x1E01BF110](v1, 0x1000C8052888210);
  }
  JUMPOUT(0x1E01BF130);
}

void Matrix<float>::operator*(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 140);
  int v5 = *(_DWORD *)(a2 + 136);
  *(void *)a3 = &unk_1F38ECED8;
  *(_DWORD *)(a3 + 136) = v5;
  *(_DWORD *)(a3 + 140) = v4;
  operator new[]();
}

void Matrix<float>::operator*(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 140);
  *(void *)a2 = &unk_1F38ECED8;
  *(_DWORD *)(a2 + 136) = v4;
  *(_DWORD *)(a2 + 140) = v3;
  operator new[]();
}

void Matrix<float>::operator+(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 140);
  *(void *)a2 = &unk_1F38ECED8;
  *(_DWORD *)(a2 + 136) = v4;
  *(_DWORD *)(a2 + 140) = v3;
  operator new[]();
}

uint64_t Matrix<float>::operator+=(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 140);
  if (v2)
  {
    unsigned int v3 = 0;
    uint64_t v4 = *(unsigned int *)(result + 136);
    uint64_t v5 = *(void *)(a2 + 128);
    int v6 = *(_DWORD *)(a2 + 136);
    do
    {
      if (v4)
      {
        uint64_t v7 = *(void *)(result + 128);
        unsigned int v8 = v3;
        unsigned int v9 = v3;
        uint64_t v10 = v4;
        do
        {
          *(float *)(v7 + 4 * v9) = *(float *)(v5 + 4 * v8) + *(float *)(v7 + 4 * v9);
          v9 += v4;
          v8 += v6;
          --v10;
        }
        while (v10);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void Matrix<float>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4) {
    MEMORY[0x1E01BF110](v4, 0x1000C8052888210);
  }
  int v5 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = v5;
  operator new[]();
}

uint64_t Matrix<float>::operator=(uint64_t a1, const void *a2)
{
  return a1;
}

BOOL Matrix<float>::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 136);
  if (v2 == *(_DWORD *)(a2 + 136) && (int v3 = *(_DWORD *)(a1 + 140), v3 == *(_DWORD *)(a2 + 140))) {
    return memcmp(*(const void **)(a1 + 128), *(const void **)(a2 + 128), 4 * (v3 * v2)) == 0;
  }
  else {
    return 0;
  }
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      int v6 = *(void **)(v4 - 24);
      v4 -= 24;
      int v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int a2, unsigned int *a3)
{
  int v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    unsigned int v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>,false>(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  while (1)
  {
    uint64_t v12 = a2 - a4;
    unint64_t v13 = (uint64_t)(a2 - a4) >> 3;
    if (v7 || !v6)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v57 = *(float *)a4;
          float v58 = *(float *)(a2 - 8);
          if (*(float *)a4 >= v58)
          {
            if (v58 < v57) {
              return;
            }
            int v60 = *(_DWORD *)(a4 + 4);
            int v59 = *(_DWORD *)(a2 - 4);
            if (v60 >= v59) {
              return;
            }
          }
          else
          {
            int v59 = *(_DWORD *)(a2 - 4);
            int v60 = *(_DWORD *)(a4 + 4);
          }
          *(float *)(a2 - 8) = v57;
          *(float *)a4 = v58;
          *(_DWORD *)(a2 - 4) = v60;
          *(_DWORD *)(a4 + 4) = v59;
          return;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a3, a4 + 8);
          return;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a3, a4 + 8);
          return;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a2 - 24, a2 - 24, a3, a4 + 8);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 191)
    {
      unint64_t v61 = a2 - 8;
      BOOL v63 = a2 == a4 || v61 == a4;
      if (a6)
      {
        if (v63) {
          return;
        }
        uint64_t v64 = 0;
        unint64_t v65 = a2 - 8;
        while (1)
        {
          unint64_t v66 = v61 + 8;
          float v67 = *(float *)v61;
          float v68 = *(float *)(v65 - 8);
          v65 -= 8;
          float v69 = v68;
          if (v68 < *(float *)v61) {
            break;
          }
          if (v67 >= v69)
          {
            int v70 = *(_DWORD *)(v61 - 4);
            int v71 = *(_DWORD *)(v61 + 4);
            if (v70 < v71) {
              goto LABEL_114;
            }
          }
LABEL_127:
          v64 -= 8;
          unint64_t v61 = v65;
          if (v65 == a4) {
            return;
          }
        }
        int v70 = *(_DWORD *)(v61 - 4);
        int v71 = *(_DWORD *)(v61 + 4);
LABEL_114:
        *(float *)(v61 - 8) = v67;
        *(_DWORD *)(v61 - 4) = v71;
        unint64_t v72 = a2;
        if (v66 != a2)
        {
          uint64_t v73 = v64;
          unint64_t v72 = v66;
          do
          {
            float v74 = *(float *)(a2 + v73);
            if (v69 >= v74)
            {
              if (v74 < v69) {
                goto LABEL_126;
              }
              int v75 = *(_DWORD *)(a2 + v73 + 4);
              if (v70 >= v75)
              {
                unint64_t v72 = a2 + v73;
                goto LABEL_126;
              }
            }
            else
            {
              int v75 = *(_DWORD *)(a2 + v73 + 4);
            }
            v72 += 8;
            uint64_t v76 = a2 + v73;
            *(float *)(v76 - 8) = v74;
            *(_DWORD *)(v76 - 4) = v75;
            v73 += 8;
          }
          while (v73);
          unint64_t v72 = a2;
        }
LABEL_126:
        *(float *)(v72 - 8) = v69;
        *(_DWORD *)(v72 - 4) = v70;
        goto LABEL_127;
      }
      if (v63) {
        return;
      }
      unint64_t v125 = a2 - 4;
      unint64_t v126 = a2 - 8;
      while (1)
      {
        float v127 = *(float *)(v126 - 8);
        v126 -= 8;
        float v128 = v127;
        float v129 = *(float *)v61;
        if (v127 < *(float *)v61) {
          break;
        }
        if (v129 >= v128)
        {
          int v130 = *(_DWORD *)(v61 - 4);
          if (v130 < *(_DWORD *)(v61 + 4)) {
            goto LABEL_192;
          }
        }
LABEL_200:
        v125 -= 8;
        unint64_t v61 = v126;
        if (v126 == a4) {
          return;
        }
      }
      int v130 = *(_DWORD *)(v61 - 4);
LABEL_192:
      for (unint64_t i = v125; ; i += 8)
      {
        *(float *)(i - 12) = v129;
        *(_DWORD *)(i - 8) = *(_DWORD *)i;
        float v129 = *(float *)(i + 4);
        if (v128 >= v129 && (v129 < v128 || v130 >= *(_DWORD *)(i + 8))) {
          break;
        }
      }
      *(float *)(i - 4) = v128;
      *(_DWORD *)unint64_t i = v130;
      goto LABEL_200;
    }
    if (!a5) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = a2 - 8 * (v13 >> 1);
    unint64_t v16 = a2;
    uint64_t v17 = a1;
    if ((unint64_t)v12 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8 * (v13 >> 1), a2 - 8 * (v13 >> 1), a4 + 8, a4 + 8);
      uint64_t v18 = a2 + 8 * (1 - v14);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a2 - 8, a2 - 8, v18, v18, a4 + 16, a4 + 16);
      uint64_t v19 = a2 + 8 * ~v14;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a2 - 16, a2 - 16, v19, v19, a4 + 24, a4 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(v18, v18, v15, v15, v19, v19);
      int v20 = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = *(_DWORD *)(v15 - 8);
      *(_DWORD *)(v15 - 8) = v20;
      int v21 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = *(_DWORD *)(v15 - 4);
      *(_DWORD *)(v15 - 4) = v21;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a2 - 8 * (v13 >> 1), a2 - 8 * (v13 >> 1), a1, a2, a4 + 8, a4 + 8);
    }
    --a5;
    uint64_t v22 = (float *)(a2 - 8);
    if (a6)
    {
      float v23 = *v22;
      goto LABEL_11;
    }
    float v23 = *(float *)(a2 - 8);
    if (*(float *)a2 >= v23)
    {
      if (v23 >= *(float *)a2)
      {
        int v42 = *(_DWORD *)(a2 - 4);
        if (*(_DWORD *)(a2 + 4) < v42) {
          goto LABEL_11;
        }
      }
      else
      {
        int v42 = *(_DWORD *)(a2 - 4);
      }
      float v43 = *(float *)a4;
      if (v23 < *(float *)a4 || v43 >= v23 && v42 < *(_DWORD *)(a4 + 4))
      {
        float v44 = *(float *)(a2 - 16);
        if (v23 >= v44)
        {
          unint64_t v45 = a2 - 24;
          do
          {
            if (v44 >= v23 && v42 < *(_DWORD *)(v45 + 12)) {
              break;
            }
            float v46 = *(float *)v45;
            v45 -= 8;
            float v44 = v46;
          }
          while (v23 >= v46);
          uint64_t v22 = (float *)(v45 + 16);
        }
      }
      else
      {
        while ((unint64_t)v22 > a4)
        {
          float v56 = *(v22 - 2);
          if (v23 < v56 || v56 >= v23 && v42 < *((_DWORD *)v22 - 1)) {
            break;
          }
          v22 -= 2;
        }
      }
      uint64_t j = (float *)a4;
      if ((unint64_t)v22 > a4)
      {
        for (uint64_t j = (float *)(a4 + 8); v23 < v43 || v43 >= v23 && v42 < *((_DWORD *)j - 1); j += 2)
        {
          float v48 = *j;
          float v43 = v48;
        }
      }
      if (j >= v22)
      {
        int v49 = v22;
      }
      else
      {
        int v49 = v22;
        do
        {
          int v50 = *((_DWORD *)v49 - 2);
          v49 -= 2;
          float *v49 = *(j - 2);
          *((_DWORD *)j - 2) = v50;
          int v51 = *((_DWORD *)v49 + 1);
          v49[1] = *(j - 1);
          *((_DWORD *)j - 1) = v51;
          float v52 = *(v49 - 2);
          if (v23 >= v52)
          {
            uint64_t v53 = v22 - 6;
            do
            {
              if (v52 >= v23 && v42 < *((_DWORD *)v53 + 3)) {
                break;
              }
              float v54 = *v53;
              v53 -= 2;
              float v52 = v54;
            }
            while (v23 >= v54);
            int v49 = v53 + 4;
          }
          do
          {
            do
            {
              j += 2;
              float v55 = *(j - 2);
            }
            while (v23 < v55);
          }
          while (v55 >= v23 && v42 < *((_DWORD *)j - 1));
          uint64_t v22 = v49;
        }
        while (j < v49);
      }
      BOOL v6 = (unint64_t)(v49 + 2) >= a2;
      BOOL v7 = v49 + 2 == (float *)a2;
      if (v49 + 2 != (float *)a2)
      {
        *(float *)(a2 - 8) = *v49;
        *(float *)(a2 - 4) = v49[1];
      }
      a6 = 0;
      float *v49 = v23;
      *((_DWORD *)v49 + 1) = v42;
      a2 = (unint64_t)v49;
    }
    else
    {
LABEL_11:
      uint64_t v24 = 0;
      int v25 = *(_DWORD *)(a2 - 4);
      while (1)
      {
        float v26 = *(float *)(a2 + v24 - 16);
        if (v26 >= v23 && (v23 < v26 || *(_DWORD *)(a2 + v24 - 12) >= v25)) {
          break;
        }
        v24 -= 8;
      }
      unint64_t v27 = a2 + v24 - 8;
      if (v24)
      {
        float v28 = *(float *)a4;
        uint64_t v29 = (float *)(a4 + 8);
        if (*(float *)a4 >= v23)
        {
          do
          {
            if (v23 >= v28 && *((_DWORD *)v29 - 1) < v25) {
              break;
            }
            float v30 = *v29;
            v29 += 2;
            float v28 = v30;
          }
          while (v30 >= v23);
        }
      }
      else
      {
        uint64_t v29 = (float *)a4;
        if (v27 > a4)
        {
          float v31 = *(float *)a4;
          uint64_t v29 = (float *)(a4 + 8);
          while (v31 >= v23)
          {
            if (v23 >= v31)
            {
              if (*((_DWORD *)v29 - 1) < v25 || (unint64_t)v29 >= v27) {
                break;
              }
            }
            else if ((unint64_t)v29 >= v27)
            {
              break;
            }
            float v33 = *v29;
            v29 += 2;
            float v31 = v33;
          }
        }
      }
      std::vector<int>::pointer v34 = (float *)v27;
      if ((unint64_t)v29 < v27)
      {
        BOOL v35 = v29;
        do
        {
          int v36 = *((_DWORD *)v34 - 2);
          v34 -= 2;
          float *v34 = *(v35 - 2);
          *((_DWORD *)v35 - 2) = v36;
          int v37 = *((_DWORD *)v34 + 1);
          v34[1] = *(v35 - 1);
          *((_DWORD *)v35 - 1) = v37;
          while (1)
          {
            float v38 = *(v34 - 2);
            if (v38 >= v23 && (v23 < v38 || *((_DWORD *)v34 - 1) >= v25)) {
              break;
            }
            v34 -= 2;
          }
          do
          {
            float v39 = *v35;
            v35 += 2;
            float v40 = v39;
          }
          while (v39 >= v23 && (v23 < v40 || *((_DWORD *)v35 - 1) >= v25));
        }
        while (v35 < v34);
      }
      if (v34 + 2 != (float *)a2)
      {
        *(float *)(a2 - 8) = *v34;
        *(float *)(a2 - 4) = v34[1];
      }
      float *v34 = v23;
      *((_DWORD *)v34 + 1) = v25;
      if ((unint64_t)v29 >= v27)
      {
        char v41 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, (uint64_t)(v34 + 2), (uint64_t)(v34 + 2));
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>((uint64_t)v34, (uint64_t)v34, a3, a4))
        {
          a3 = (uint64_t)(v34 + 2);
          a4 = (unint64_t)(v34 + 2);
          if (v41) {
            return;
          }
        }
        else
        {
          a1 = (uint64_t)(v34 + 2);
          a2 = (unint64_t)v34;
          if ((v41 & 1) == 0) {
            goto LABEL_47;
          }
        }
      }
      else
      {
LABEL_47:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>,false>(v17, v16, v34 + 2, v34 + 2, a5, a6 & 1);
        a6 = 0;
        a1 = (uint64_t)(v34 + 2);
        a2 = (unint64_t)v34;
      }
    }
  }
  if (a2 != a4)
  {
    int64_t v77 = (v13 - 2) >> 1;
    int64_t v78 = v77;
    while (2)
    {
      int64_t v79 = v78;
      uint64_t v80 = 8 * v78;
      if (v77 >= v80 >> 3)
      {
        uint64_t v81 = v80 >> 2;
        uint64_t v82 = (v80 >> 2) | 1;
        unint64_t v83 = a2 - 8 * v82;
        uint64_t v84 = v81 + 2;
        if (v84 < (uint64_t)v13)
        {
          float v85 = *(float *)(v83 - 8);
          float v86 = *(float *)(v83 - 16);
          if (v85 < v86 || v86 >= v85 && *(_DWORD *)(v83 - 4) < *(_DWORD *)(v83 - 12))
          {
            v83 -= 8;
            uint64_t v82 = v84;
          }
        }
        unint64_t v87 = a2 - 8 * v79;
        float v88 = *(float *)(v83 - 8);
        float v89 = *(float *)(v87 - 8);
        if (v88 >= v89)
        {
          if (v89 < v88)
          {
            int v90 = *(_DWORD *)(v87 - 4);
            int v91 = *(_DWORD *)(v83 - 4);
            goto LABEL_141;
          }
          int v91 = *(_DWORD *)(v83 - 4);
          int v90 = *(_DWORD *)(v87 - 4);
          if (v91 >= v90)
          {
LABEL_141:
            *(float *)(v87 - 8) = v88;
            *(_DWORD *)(v87 - 4) = v91;
            if (v77 >= v82)
            {
              while (1)
              {
                uint64_t v93 = 2 * v82;
                uint64_t v82 = (2 * v82) | 1;
                unint64_t v92 = a2 - 8 * v82;
                uint64_t v94 = v93 + 2;
                if (v94 < (uint64_t)v13)
                {
                  float v95 = *(float *)(v92 - 8);
                  float v96 = *(float *)(v92 - 16);
                  if (v95 < v96 || v96 >= v95 && *(_DWORD *)(v92 - 4) < *(_DWORD *)(v92 - 12))
                  {
                    v92 -= 8;
                    uint64_t v82 = v94;
                  }
                }
                float v97 = *(float *)(v92 - 8);
                if (v97 < v89) {
                  break;
                }
                int v98 = *(_DWORD *)(v92 - 4);
                BOOL v99 = v89 >= v97 && v98 < v90;
                if (v99) {
                  break;
                }
                *(float *)(v83 - 8) = v97;
                *(_DWORD *)(v83 - 4) = v98;
                unint64_t v83 = v92;
                if (v77 < v82) {
                  goto LABEL_143;
                }
              }
            }
            unint64_t v92 = v83;
LABEL_143:
            *(float *)(v92 - 8) = v89;
            *(_DWORD *)(v92 - 4) = v90;
          }
        }
      }
      int64_t v78 = v79 - 1;
      if (v79) {
        continue;
      }
      break;
    }
    uint64_t v100 = (unint64_t)v12 >> 3;
    while (2)
    {
      uint64_t v101 = 0;
      int v102 = *(_DWORD *)(a2 - 8);
      int v103 = *(_DWORD *)(a2 - 4);
      uint64_t v104 = v100 - 2;
      if (v100 < 2) {
        uint64_t v104 = v100 - 1;
      }
      uint64_t v105 = v104 >> 1;
      unint64_t v106 = a2;
      do
      {
        unint64_t v107 = v106;
        v106 += 8 * ~v101;
        uint64_t v108 = 2 * v101;
        uint64_t v101 = (2 * v101) | 1;
        uint64_t v109 = v108 + 2;
        if (v109 < v100)
        {
          float v110 = *(float *)(v106 - 8);
          float v111 = *(float *)(v106 - 16);
          if (v110 < v111 || v111 >= v110 && *(_DWORD *)(v106 - 4) < *(_DWORD *)(v106 - 12))
          {
            v106 -= 8;
            uint64_t v101 = v109;
          }
        }
        *(_DWORD *)(v107 - 8) = *(_DWORD *)(v106 - 8);
        *(_DWORD *)(v107 - 4) = *(_DWORD *)(v106 - 4);
      }
      while (v101 <= v105);
      if (a4 + 8 == v106)
      {
        *(_DWORD *)(v106 - 8) = v102;
        *(_DWORD *)(v106 - 4) = v103;
      }
      else
      {
        unint64_t v112 = (float *)(v106 - 8);
        *(_DWORD *)(v106 - 8) = *(_DWORD *)a4;
        *(_DWORD *)(v106 - 4) = *(_DWORD *)(a4 + 4);
        *(_DWORD *)a4 = v102;
        *(_DWORD *)(a4 + 4) = v103;
        uint64_t v113 = a2 - (v106 - 8);
        if (v113 >= 9)
        {
          unint64_t v114 = ((unint64_t)v113 >> 3) - 2;
          unint64_t v115 = v114 >> 1;
          unint64_t v116 = a2 - 8 * (v114 >> 1);
          float v117 = *(float *)(v116 - 8);
          float v118 = *v112;
          if (v117 < *v112)
          {
            int v119 = *(_DWORD *)(v106 - 4);
            int v120 = *(_DWORD *)(v116 - 4);
            goto LABEL_174;
          }
          if (v118 >= v117)
          {
            int v120 = *(_DWORD *)(v116 - 4);
            int v119 = *(_DWORD *)(v106 - 4);
            if (v120 < v119)
            {
LABEL_174:
              *(float *)(v106 - 8) = v117;
              *(_DWORD *)(v106 - 4) = v120;
              if (v114 >= 2)
              {
                while (1)
                {
                  unint64_t v122 = v115 - 1;
                  unint64_t v115 = (v115 - 1) >> 1;
                  unint64_t v121 = a2 - 8 * v115;
                  float v123 = *(float *)(v121 - 8);
                  if (v123 >= v118)
                  {
                    if (v118 < v123) {
                      break;
                    }
                    int v124 = *(_DWORD *)(v121 - 4);
                    if (v124 >= v119) {
                      break;
                    }
                  }
                  else
                  {
                    int v124 = *(_DWORD *)(v121 - 4);
                  }
                  *(float *)(v116 - 8) = v123;
                  *(_DWORD *)(v116 - 4) = v124;
                  unint64_t v116 = a2 - 8 * v115;
                  if (v122 <= 1) {
                    goto LABEL_181;
                  }
                }
              }
              unint64_t v121 = v116;
LABEL_181:
              *(float *)(v121 - 8) = v118;
              *(_DWORD *)(v121 - 4) = v119;
            }
          }
        }
      }
      a4 += 8;
      BOOL v99 = v100-- <= 2;
      if (v99) {
        return;
      }
      continue;
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v6 = *(float *)(a4 - 8);
  float v7 = *(float *)(a2 - 8);
  if (v6 >= v7 && (v7 < v6 || *(_DWORD *)(a4 - 4) >= *(_DWORD *)(a2 - 4)))
  {
    float v11 = *(float *)(a6 - 8);
    if (v11 >= v6)
    {
      if (v6 < v11) {
        return;
      }
      int v13 = *(_DWORD *)(a6 - 4);
      int v12 = *(_DWORD *)(a4 - 4);
      if (v13 >= v12) {
        return;
      }
    }
    else
    {
      int v12 = *(_DWORD *)(a4 - 4);
      int v13 = *(_DWORD *)(a6 - 4);
    }
    *(float *)(a4 - 8) = v11;
    *(float *)(a6 - 8) = v6;
    *(_DWORD *)(a4 - 4) = v13;
    *(_DWORD *)(a6 - 4) = v12;
    float v14 = *(float *)(a4 - 8);
    float v15 = *(float *)(a2 - 8);
    if (v14 >= v15)
    {
      if (v15 < v14) {
        return;
      }
      int v17 = *(_DWORD *)(a4 - 4);
      int v16 = *(_DWORD *)(a2 - 4);
      if (v17 >= v16) {
        return;
      }
    }
    else
    {
      int v16 = *(_DWORD *)(a2 - 4);
      int v17 = *(_DWORD *)(a4 - 4);
    }
    *(float *)(a2 - 8) = v14;
    *(float *)(a4 - 8) = v15;
    *(_DWORD *)(a2 - 4) = v17;
    *(_DWORD *)(a4 - 4) = v16;
    return;
  }
  float v8 = *(float *)(a6 - 8);
  if (v8 < v6)
  {
    int v9 = *(_DWORD *)(a6 - 4);
LABEL_6:
    *(float *)(a2 - 8) = v8;
    *(float *)(a6 - 8) = v7;
    int v10 = *(_DWORD *)(a2 - 4);
    *(_DWORD *)(a2 - 4) = v9;
    *(_DWORD *)(a6 - 4) = v10;
    return;
  }
  if (v6 >= v8)
  {
    int v9 = *(_DWORD *)(a6 - 4);
    int v18 = *(_DWORD *)(a4 - 4);
    if (v9 < v18) {
      goto LABEL_6;
    }
  }
  else
  {
    int v18 = *(_DWORD *)(a4 - 4);
  }
  *(float *)(a2 - 8) = v6;
  *(float *)(a4 - 8) = v7;
  int v19 = *(_DWORD *)(a2 - 4);
  *(_DWORD *)(a2 - 4) = v18;
  *(_DWORD *)(a4 - 4) = v19;
  float v20 = *(float *)(a6 - 8);
  if (v20 < v7)
  {
    int v21 = *(_DWORD *)(a6 - 4);
LABEL_24:
    *(float *)(a4 - 8) = v20;
    *(float *)(a6 - 8) = v7;
    *(_DWORD *)(a4 - 4) = v21;
    *(_DWORD *)(a6 - 4) = v19;
    return;
  }
  if (v7 >= v20)
  {
    int v21 = *(_DWORD *)(a6 - 4);
    if (v21 < v19) {
      goto LABEL_24;
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6 = 1;
  switch((a2 - a4) >> 3)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      float v7 = *(float *)a4;
      float v8 = *(float *)(a2 - 8);
      if (*(float *)a4 >= v8)
      {
        if (v8 < v7) {
          return v6 & 1;
        }
        int v10 = *(_DWORD *)(a4 + 4);
        int v9 = *(_DWORD *)(a2 - 4);
        if (v10 >= v9) {
          goto LABEL_25;
        }
      }
      else
      {
        int v9 = *(_DWORD *)(a2 - 4);
        int v10 = *(_DWORD *)(a4 + 4);
      }
      *(float *)(a2 - 8) = v7;
      *(float *)a4 = v8;
      *(_DWORD *)(a2 - 4) = v10;
      char v6 = 1;
      *(_DWORD *)(a4 + 4) = v9;
      return v6 & 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a3, a4 + 8);
      goto LABEL_25;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a3, a4 + 8);
      goto LABEL_25;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a2 - 24, a2 - 24, a3, a4 + 8);
LABEL_25:
      char v6 = 1;
      return v6 & 1;
    default:
      uint64_t v11 = a2 - 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16);
      uint64_t v13 = a2 - 24;
      if (a2 - 24 == a4) {
        goto LABEL_26;
      }
      uint64_t v12 = 0;
      int v14 = 0;
      uint64_t v15 = a2 - 24;
      break;
  }
  do
  {
    float v16 = *(float *)(v15 - 8);
    v15 -= 8;
    float v17 = v16;
    float v18 = *(float *)(v11 - 8);
    if (v16 >= v18)
    {
      if (v18 < v17) {
        goto LABEL_19;
      }
      int v19 = *(_DWORD *)(v13 - 4);
      int v20 = *(_DWORD *)(v11 - 4);
      if (v19 >= v20) {
        goto LABEL_19;
      }
    }
    else
    {
      int v19 = *(_DWORD *)(v13 - 4);
      int v20 = *(_DWORD *)(v11 - 4);
    }
    *(float *)(v13 - 8) = v18;
    *(_DWORD *)(v13 - 4) = v20;
    if (v11 == a2)
    {
LABEL_17:
      uint64_t v11 = a2;
      goto LABEL_18;
    }
    uint64_t v21 = v12;
    while (1)
    {
      float v22 = *(float *)(a2 + v21 - 16);
      if (v17 >= v22) {
        break;
      }
      int v23 = *(_DWORD *)(a2 + v21 - 12);
LABEL_16:
      v11 += 8;
      uint64_t v24 = a2 + v21;
      *(float *)(v24 - 24) = v22;
      *(_DWORD *)(v24 - 20) = v23;
      v21 += 8;
      if (v21 == 16) {
        goto LABEL_17;
      }
    }
    if (v22 >= v17)
    {
      int v23 = *(_DWORD *)(a2 + v21 - 12);
      if (v19 >= v23) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    uint64_t v11 = a2 + v21 - 16;
LABEL_18:
    *(float *)(v11 - 8) = v17;
    *(_DWORD *)(v11 - 4) = v19;
    if (++v14 == 8)
    {
      char v25 = 0;
      LOBYTE(v12) = v15 == a4;
      goto LABEL_31;
    }
LABEL_19:
    v12 -= 8;
    uint64_t v11 = v13;
    uint64_t v13 = v15;
  }
  while (v15 != a4);
LABEL_26:
  char v25 = 1;
LABEL_31:
  char v6 = v25 | v12;
  return v6 & 1;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a3, a4, a5, a6);
  float v12 = *(float *)(a8 - 8);
  float v13 = *(float *)(a6 - 8);
  if (v12 >= v13)
  {
    if (v13 < v12) {
      return;
    }
    int v15 = *(_DWORD *)(a8 - 4);
    int v14 = *(_DWORD *)(a6 - 4);
    if (v15 >= v14) {
      return;
    }
  }
  else
  {
    int v14 = *(_DWORD *)(a6 - 4);
    int v15 = *(_DWORD *)(a8 - 4);
  }
  *(float *)(a6 - 8) = v12;
  *(float *)(a8 - 8) = v13;
  *(_DWORD *)(a6 - 4) = v15;
  *(_DWORD *)(a8 - 4) = v14;
  float v16 = *(float *)(a6 - 8);
  float v17 = *(float *)(a4 - 8);
  if (v16 >= v17)
  {
    if (v17 < v16) {
      return;
    }
    int v19 = *(_DWORD *)(a6 - 4);
    int v18 = *(_DWORD *)(a4 - 4);
    if (v19 >= v18) {
      return;
    }
  }
  else
  {
    int v18 = *(_DWORD *)(a4 - 4);
    int v19 = *(_DWORD *)(a6 - 4);
  }
  *(float *)(a4 - 8) = v16;
  *(float *)(a6 - 8) = v17;
  *(_DWORD *)(a4 - 4) = v19;
  *(_DWORD *)(a6 - 4) = v18;
  float v20 = *(float *)(a4 - 8);
  float v21 = *(float *)(a2 - 8);
  if (v20 < v21)
  {
    int v22 = *(_DWORD *)(a2 - 4);
    int v23 = *(_DWORD *)(a4 - 4);
LABEL_15:
    *(float *)(a2 - 8) = v20;
    *(float *)(a4 - 8) = v21;
    *(_DWORD *)(a2 - 4) = v23;
    *(_DWORD *)(a4 - 4) = v22;
    return;
  }
  if (v21 >= v20)
  {
    int v23 = *(_DWORD *)(a4 - 4);
    int v22 = *(_DWORD *)(a2 - 4);
    if (v23 < v22) {
      goto LABEL_15;
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a3, a4, a5, a6, a7, a8);
  float v14 = *(float *)(a10 - 8);
  float v15 = *(float *)(a8 - 8);
  if (v14 >= v15)
  {
    if (v15 < v14) {
      return;
    }
    int v17 = *(_DWORD *)(a10 - 4);
    int v16 = *(_DWORD *)(a8 - 4);
    if (v17 >= v16) {
      return;
    }
  }
  else
  {
    int v16 = *(_DWORD *)(a8 - 4);
    int v17 = *(_DWORD *)(a10 - 4);
  }
  *(float *)(a8 - 8) = v14;
  *(float *)(a10 - 8) = v15;
  *(_DWORD *)(a8 - 4) = v17;
  *(_DWORD *)(a10 - 4) = v16;
  float v18 = *(float *)(a8 - 8);
  float v19 = *(float *)(a6 - 8);
  if (v18 >= v19)
  {
    if (v19 < v18) {
      return;
    }
    int v21 = *(_DWORD *)(a8 - 4);
    int v20 = *(_DWORD *)(a6 - 4);
    if (v21 >= v20) {
      return;
    }
  }
  else
  {
    int v20 = *(_DWORD *)(a6 - 4);
    int v21 = *(_DWORD *)(a8 - 4);
  }
  *(float *)(a6 - 8) = v18;
  *(float *)(a8 - 8) = v19;
  *(_DWORD *)(a6 - 4) = v21;
  *(_DWORD *)(a8 - 4) = v20;
  float v22 = *(float *)(a6 - 8);
  float v23 = *(float *)(a4 - 8);
  if (v22 >= v23)
  {
    if (v23 < v22) {
      return;
    }
    int v25 = *(_DWORD *)(a6 - 4);
    int v24 = *(_DWORD *)(a4 - 4);
    if (v25 >= v24) {
      return;
    }
  }
  else
  {
    int v24 = *(_DWORD *)(a4 - 4);
    int v25 = *(_DWORD *)(a6 - 4);
  }
  *(float *)(a4 - 8) = v22;
  *(float *)(a6 - 8) = v23;
  *(_DWORD *)(a4 - 4) = v25;
  *(_DWORD *)(a6 - 4) = v24;
  float v26 = *(float *)(a4 - 8);
  float v27 = *(float *)(a2 - 8);
  if (v26 < v27)
  {
    int v28 = *(_DWORD *)(a2 - 4);
    int v29 = *(_DWORD *)(a4 - 4);
LABEL_9:
    *(float *)(a2 - 8) = v26;
    *(float *)(a4 - 8) = v27;
    *(_DWORD *)(a2 - 4) = v29;
    *(_DWORD *)(a4 - 4) = v28;
    return;
  }
  if (v27 >= v26)
  {
    int v29 = *(_DWORD *)(a4 - 4);
    int v28 = *(_DWORD *)(a2 - 4);
    if (v29 < v28) {
      goto LABEL_9;
    }
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    float v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1DD74D170(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD74D1EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD74D268(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    float v13 = (char *)v7[1];
    float v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  float v12 = (void **)(result + 8);
  float v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    float v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *float v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      float v12 = 0;
    }
    unint64_t v15 = v12;
    int v16 = &v12[24 * v8];
    float v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    size_t v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1DD74D4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, unsigned int *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

__n128 std::vector<int>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

std::vector<int> *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::vector<int> *,std::vector<int> *,std::vector<int> *,0>(std::vector<int> *__c, std::vector<int> *a2, std::vector<int> *this)
{
  if (__c != a2)
  {
    uint64_t v5 = (__n128 *)__c;
    do
    {
      std::vector<int>::__move_assign((uint64_t)this, v5);
      uint64_t v5 = (__n128 *)((char *)v5 + 24);
      ++this;
    }
    while (v5 != (__n128 *)a2);
  }
  return this;
}

id CROSLogForCategory(int a1)
{
  if (CROSLogForCategory_onceToken != -1) {
    dispatch_once(&CROSLogForCategory_onceToken, &__block_literal_global_1);
  }
  uint64_t v2 = (void *)CROSLogForCategory_logObjects[a1];
  return v2;
}

void __CROSLogForCategory_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextRecognition", "General");
  uint64_t v1 = (void *)CROSLogForCategory_logObjects[0];
  CROSLogForCategory_logObjects[0] = (uint64_t)v0;

  os_log_t v2 = os_log_create("com.apple.TextRecognition", "Tracking");
  uint64_t v3 = (void *)qword_1EB58CF38;
  qword_1EB58CF38 = (uint64_t)v2;

  os_log_t v4 = os_log_create("com.apple.TextRecognition", "Detection");
  uint64_t v5 = (void *)qword_1EB58CF40;
  qword_1EB58CF40 = (uint64_t)v4;

  os_log_t v6 = os_log_create("com.apple.TextRecognition", "Recognition");
  uint64_t v7 = (void *)qword_1EB58CF48;
  qword_1EB58CF48 = (uint64_t)v6;

  os_log_t v8 = os_log_create("com.apple.TextRecognition", "Layout");
  uint64_t v9 = (void *)qword_1EB58CF50;
  qword_1EB58CF50 = (uint64_t)v8;

  os_log_t v10 = os_log_create("com.apple.TextRecognition", "TSR");
  unint64_t v11 = (void *)qword_1EB58CF58;
  qword_1EB58CF58 = (uint64_t)v10;

  os_log_t v12 = os_log_create("com.apple.TextRecognition", "Form");
  long long v13 = (void *)qword_1EB58CF60;
  qword_1EB58CF60 = (uint64_t)v12;

  os_log_t v14 = os_log_create("com.apple.TextRecognition", "DD");
  unint64_t v15 = (void *)qword_1EB58CF68;
  qword_1EB58CF68 = (uint64_t)v14;

  os_log_t v16 = os_log_create("com.apple.TextRecognition", "CameraReader");
  size_t v17 = (void *)qword_1EB58CF70;
  qword_1EB58CF70 = (uint64_t)v16;
}

void sub_1DD74E094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD74E808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  std::__tree<CRCHuint128>::destroy(v58, *v55);
  std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(v57, *v53);
  CRCHSymbolMap::~CRCHSymbolMap(a11);
  uint64_t v62 = *(void **)(v54 + 112);
  if (v62)
  {
    *(void *)(v54 + 120) = v62;
    operator delete(v62);
  }
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  std::__tree<CRCHuint128>::destroy(a12, *v60);
  BOOL v63 = *v59;
  if (*v59)
  {
    *(void *)(v54 + 48) = v63;
    operator delete(v63);
  }
  if (*(char *)(v54 + 31) < 0) {
    operator delete(*v56);
  }
  MEMORY[0x1E01BF140](v54, 0x10F2C40A9BC773BLL);
  _Unwind_Resume(a1);
}

void NetworkEdge::NetworkEdge(NetworkEdge *this, const NetworkEdge *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((void *)this + 4) = *((void *)a2 + 4);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = 0;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)this + 7, *((const void **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
}

void *std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    os_log_t v6 = result;
    __n128 result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD74EA24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CRCHSymbolMap::~CRCHSymbolMap(char **this)
{
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy((uint64_t)(this + 4), this[5]);
  os_log_t v2 = (void **)(this + 1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    os_log_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    os_log_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void CRCHSymbolMap::CRCHSymbolMap(CRCHSymbolMap *this)
{
  *(void *)this = &unk_1F38ECEC0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 6) = 0;
  std::string::basic_string[abi:ne180100]<0>(v4, ",");
  std::string::basic_string[abi:ne180100]<0>(__p, "#");
  CRCHSymbolMap::store(this, (long long *)v4);
  CRCHSymbolMap::store(this, (long long *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1DD74EC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(v20, *v21);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t CRCHSymbolMap::store(void *a1, long long *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  char v5 = a1 + 1;
  uint64_t v7 = (uint64_t **)(a1 + 4);
  if (a1 + 5 == (void *)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>((uint64_t)(a1 + 4), (const void **)a2))
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v4) >> 3);
    os_log_t v12 = a2;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (const void **)a2, (uint64_t)&std::piecewise_construct, &v12)[7] = v8;
    unint64_t v9 = a1[2];
    if (v9 >= a1[3])
    {
      uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, a2);
      uint64_t v10 = v9 + 24;
    }
    a1[2] = v10;
  }
  else
  {
    os_log_t v12 = a2;
    return std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (const void **)a2, (uint64_t)&std::piecewise_construct, &v12)[7];
  }
  return v8;
}

uint64_t CRCHSymbolMap::store(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 32);
  if (a1 + 40 == std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(a1 + 32, (const void **)a2))
  {
    unint64_t v11 = a2;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v11)[7] = a3;
    uint64_t v7 = (uint64_t *)(a1 + 8);
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8 >= *(void *)(a1 + 24))
    {
      uint64_t v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, a2);
      uint64_t v9 = v8 + 24;
    }
    *(void *)(a1 + 16) = v9;
  }
  else
  {
    unint64_t v11 = a2;
    return std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v11)[7];
  }
  return a3;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    unint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      unint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  size_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        size_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      size_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1DD74F0E0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1DD74F254(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    int v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1DD74F36C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<int>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::__tree<CRCHuint128>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<CRCHuint128>::destroy(a1, *a2);
    std::__tree<CRCHuint128>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(a1, a2[1]);
    std::__tree<CRCHuint128>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

void std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<NetworkEdge>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<NetworkEdge>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 80)
  {
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void CRCHNetwork::~CRCHNetwork(CRCHNetwork *this)
{
  std::__tree<CRCHuint128>::destroy((uint64_t)this + 224, *((void **)this + 29));
  std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy((uint64_t)this + 200, *((void **)this + 26));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy((uint64_t)this + 168, *((char **)this + 22));
  unint64_t v4 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)((char *)this + 88);
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<CRCHuint128>::destroy((uint64_t)this + 64, *((void **)this + 9));
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

BOOL pathForResource(const char *a1, const char *a2, UInt8 *a3)
{
  if (!a1) {
    return 0;
  }
  unint64_t v5 = strdup(a1);
  __lasts = 0;
  std::string::size_type v6 = strtok_r(v5, ".", &__lasts);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 0x8000100u);
  if (!__lasts)
  {
    CFStringRef v9 = 0;
    if (!a2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  CFStringRef v9 = CFStringCreateWithCString(v7, __lasts, 0x8000100u);
  if (a2) {
LABEL_4:
  }
    a2 = (const char *)CFStringCreateWithCString(v7, a2, 0x8000100u);
LABEL_5:
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.TextRecognition");
  CFURLRef v11 = CFBundleCopyResourceURL(BundleWithIdentifier, v8, v9, (CFStringRef)a2);
  BOOL v12 = CFURLGetFileSystemRepresentation(v11, 1u, a3, 1024) != 0;
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (a2) {
    CFRelease(a2);
  }
  if (v11) {
    CFRelease(v11);
  }
  free(v5);
  return v12;
}

uint64_t firstMatchingResourceForLocale(NSLocale *a1, NSString *a2, NSString *a3, UInt8 *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v7 = rankedCandidateIdentifiersForLocale(a1);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)v15;
LABEL_3:
  uint64_t v11 = 0;
  while (1)
  {
    if (*(void *)v15 != v10) {
      objc_enumerationMutation(v7);
    }
    uint64_t v12 = *(void *)(*((void *)&v14 + 1) + 8 * v11);
    if (pathForResource([[[(NSString *)a2 stringByAppendingString:v12] stringByAppendingPathExtension:a3] UTF8String], 0, a4))
    {
      return v12;
    }
    if (v9 == ++v11)
    {
      uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v9) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

void *rankedCandidateIdentifiersForLocale(NSLocale *a1)
{
  uint64_t v2 = [(NSString *)[(NSLocale *)a1 languageCode] lowercaseString];
  uint64_t v3 = [(NSString *)[(NSLocale *)a1 scriptCode] capitalizedString];
  unint64_t v4 = [(NSString *)[(NSLocale *)a1 countryCode] uppercaseString];
  unint64_t v5 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (v2) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (v7 == 1 && v4 != 0) {
    [v5 addObject:objc_msgSend(NSString, "stringWithFormat:", @"%@-%@_%@", v2, v3, v4)];
  }
  if (v2 && v4) {
    [v5 addObject:objc_msgSend(NSString, "stringWithFormat:", @"%@_%@", v2, v4)];
  }
  if (v7)
  {
    [v5 addObject:objc_msgSend(NSString, "stringWithFormat:", @"%@-%@", v2, v3)];
LABEL_18:
    [v5 addObject:v2];
    return v5;
  }
  if (v2) {
    goto LABEL_18;
  }
  return v5;
}

void *NSStringFromUInt32Ptr(unsigned int *a1, uint64_t a2, _NSRange a3)
{
  if (!a1) {
    return 0;
  }
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  int v7 = (void *)[MEMORY[0x1E4F28E78] string];
  if (a2 && length)
  {
    NSUInteger v8 = 0;
    do
    {
      int v9 = a1[v8];
      if (v9 == 1)
      {
        ++location;
      }
      else if (location <= v8 && location + length > v8)
      {
        [v7 appendString:CH_unicodeToNSString(v9)];
      }
      ++v8;
    }
    while (a2 != v8);
  }
  return v7;
}

uint64_t CH_unicodeToNSString(int a1)
{
  if ((a1 - 0x10000) >> 20)
  {
    uint64_t v2 = 1;
    LOWORD(v1) = a1;
  }
  else
  {
    unsigned int v1 = ((a1 + 67043328) >> 10) - 10240;
    v4[1] = a1 & 0x3FF | 0xDC00;
    uint64_t v2 = 2;
  }
  v4[0] = v1;
  return [NSString stringWithCharacters:v4 length:v2];
}

void *createUInt32PtrWithNSString(NSString *a1, NSUInteger a2, uint64_t a3, unint64_t *a4, BOOL *a5)
{
  uint64_t v22 = 0;
  float v23 = &v22;
  uint64_t v24 = 0x2020000000;
  int v25 = 0;
  NSUInteger v10 = [(NSString *)a1 lengthOfBytesUsingEncoding:2348810496];
  uint64_t v11 = 0;
  *a4 = 0;
  *a5 = 0;
  if (v10 >> 2 < a2) {
    a2 = v10 >> 2;
  }
  if (v10 >= 4 && a2)
  {
    uint64_t v18 = 0;
    uint64_t v19 = &v18;
    uint64_t v20 = 0x2020000000;
    int v21 = 0;
    int v21 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
    if ((a3 & 0x100) != 0)
    {
      *((_DWORD *)v23 + 6) = a2 - 1;
      int v12 = -1;
    }
    else
    {
      int v12 = 1;
    }
    NSUInteger v13 = [(NSString *)a1 length];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = ___Z27createUInt32PtrWithNSStringP8NSStringmmRmRb_block_invoke;
    v16[3] = &unk_1E6CDAA70;
    v16[6] = a3;
    v16[7] = a2;
    v16[4] = &v22;
    v16[5] = &v18;
    int v17 = v12;
    v16[8] = a4;
    v16[9] = a5;
    -[NSString enumerateSubstringsInRange:options:usingBlock:](a1, "enumerateSubstringsInRange:options:usingBlock:", 0, v13, a3, v16);
    uint64_t v14 = *a4;
    if (*a4)
    {
      uint64_t v11 = (void *)v19[3];
      if (a2 == v14)
      {
LABEL_13:
        _Block_object_dispose(&v18, 8);
        goto LABEL_14;
      }
      uint64_t v11 = malloc_type_realloc((void *)v19[3], 4 * v14, 0x100004052888210uLL);
    }
    else
    {
      free((void *)v19[3]);
      uint64_t v11 = 0;
    }
    v19[3] = (uint64_t)v11;
    goto LABEL_13;
  }
LABEL_14:
  _Block_object_dispose(&v22, 8);
  return v11;
}

void sub_1DD74FF18(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z27createUInt32PtrWithNSStringP8NSStringmmRmRb_block_invoke(uint64_t result, NSString *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v9 = result;
  if ((*(unsigned char *)(result + 49) & 1) == 0
    && *(void *)(result + 56) <= (unint64_t)*(int *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    goto LABEL_10;
  }
  if (a4 > 2)
  {
    **(unsigned char **)(result + 72) = 1;
    NSUInteger v10 = a7;
    goto LABEL_7;
  }
  __n128 result = CH_NSStringToUnicode(a2);
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(v9 + 40) + 8) + 24)
            + 4 * *(int *)(*(void *)(*(void *)(v9 + 32) + 8) + 24)) = result;
  *(_DWORD *)(*(void *)(*(void *)(v9 + 32) + 8) + 24) += *(_DWORD *)(v9 + 80);
  ++**(void **)(v9 + 64);
  if (a4 == 2)
  {
    NSUInteger v10 = *(unsigned char **)(v9 + 72);
LABEL_7:
    *NSUInteger v10 = 1;
  }
  if ((*(unsigned char *)(v9 + 49) & 1) != 0 && (*(_DWORD *)(*(void *)(*(void *)(v9 + 32) + 8) + 24) & 0x80000000) != 0) {
LABEL_10:
  }
    *a7 = 1;
  return result;
}

uint64_t CH_NSStringToUnicode(NSString *a1)
{
  if ([(NSString *)a1 length] == 1) {
    return [(NSString *)a1 characterAtIndex:0];
  }
  if ([(NSString *)a1 length] != 2) {
    return 0;
  }
  unsigned int v3 = [(NSString *)a1 characterAtIndex:0];
  int v4 = [(NSString *)a1 characterAtIndex:1];
  if ((v4 & 0xFFF0) == 0xFE00) {
    return v3;
  }
  else {
    return (int)(v4 + (v3 << 10) - 56613888);
  }
}

uint64_t createUInt32PtrFromCharacterAtIndex(unint64_t a1, NSString *a2, unint64_t *a3, BOOL *a4)
{
  *a3 = 0;
  *a4 = 0;
  if ([(NSString *)a2 length] > a1 && [(NSString *)a2 length])
  {
    v6[0] = 0;
    v6[1] = v6;
    id v6[2] = 0x2020000000;
    v6[3] = 0;
    operator new[]();
  }
  return 0;
}

void sub_1DD75023C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z35createUInt32PtrFromCharacterAtIndexmP8NSStringRmRb_block_invoke(uint64_t result, NSString *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v7 = *(void *)(*(void *)(result + 32) + 8);
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8 == *(void *)(result + 48))
  {
    uint64_t v11 = result;
    if (a4 > 2
      || (__n128 result = CH_NSStringToUnicode(a2),
          **(_DWORD **)(*(void *)(*(void *)(v11 + 40) + 8) + 24) = result,
          **(void **)(v11 + 56) = 1,
          a4 == 2))
    {
      **(unsigned char **)(v11 + 64) = 1;
    }
    *a7 = 1;
    uint64_t v7 = *(void *)(*(void *)(v11 + 32) + 8);
    uint64_t v8 = *(void *)(v7 + 24);
  }
  *(void *)(v7 + 24) = v8 + 1;
  return result;
}

uint64_t halfWidthToFullWidthCode(uint64_t result)
{
  if ((result - 33) < 0xF
    || (result - 91) <= 0x23 && ((1 << (result - 91)) & 0xF0000003FLL) != 0
    || (result - 58) < 6)
  {
    if (result == 46) {
      return 12290;
    }
    else {
      return (result + 65248);
    }
  }
  return result;
}

uint64_t characterCount(NSString *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  NSUInteger v2 = [(NSString *)a1 length];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = ___Z14characterCountP8NSString_block_invoke;
  v5[3] = &unk_1E6CDAAC0;
  v5[4] = &v6;
  -[NSString enumerateSubstringsInRange:options:usingBlock:](a1, "enumerateSubstringsInRange:options:usingBlock:", 0, v2, 2, v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1DD750414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z14characterCountP8NSString_block_invoke(uint64_t result)
{
  return result;
}

id uppercaseFirstCharacter(NSString *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x3052000000;
  uint64_t v9 = __Block_byref_object_copy__0;
  NSUInteger v10 = __Block_byref_object_dispose__0;
  uint64_t v11 = 0;
  uint64_t v11 = [(NSString *)a1 mutableCopy];
  NSUInteger v2 = [(NSString *)a1 length];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = ___Z23uppercaseFirstCharacterP8NSString_block_invoke;
  v5[3] = &unk_1E6CDAAC0;
  v5[4] = &v6;
  -[NSString enumerateSubstringsInRange:options:usingBlock:](a1, "enumerateSubstringsInRange:options:usingBlock:", 0, v2, 2, v5);
  id v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1DD750538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t ___Z23uppercaseFirstCharacterP8NSString_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t result = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "replaceCharactersInRange:withString:", a3, a4, objc_msgSend(a2, "uppercaseString"));
  *a7 = 1;
  return result;
}

id lastWordInString(NSString *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x3052000000;
  uint64_t v9 = __Block_byref_object_copy__0;
  NSUInteger v10 = __Block_byref_object_dispose__0;
  uint64_t v11 = 0;
  NSUInteger v2 = [(NSString *)a1 length];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = ___Z16lastWordInStringP8NSString_block_invoke;
  v5[3] = &unk_1E6CDAAC0;
  v5[4] = &v6;
  -[NSString enumerateSubstringsInRange:options:usingBlock:](a1, "enumerateSubstringsInRange:options:usingBlock:", 0, v2, 1283, v5);
  id v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1DD7506B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z16lastWordInStringP8NSString_block_invoke(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  if (a3 == a5 && a4 == a6)
  {
    uint64_t v8 = result;
    uint64_t result = [a2 copy];
    *(void *)(*(void *)(*(void *)(v8 + 32) + 8) + 40) = result;
  }
  *a7 = 1;
  return result;
}

unint64_t editDistance(NSString *a1, NSString *a2)
{
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  *(_WORD *)uint64_t v7 = 0;
  id v3 = (unsigned int *)createUInt32PtrWithNSString(a1, [(NSString *)a1 length], 2, &v9, &v7[1]);
  int v4 = (unsigned int *)createUInt32PtrWithNSString(a2, [(NSString *)a2 length], 2, &v8, v7);
  unint64_t v5 = editDistance(v3, v9, v4, v8);
  free(v3);
  free(v4);
  return v5;
}

unint64_t editDistance(unsigned int *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (!a2 || !a4) {
    return a4 + a2;
  }
  unint64_t v8 = a2 + 1;
  BOOL v9 = a2 == -1;
  unint64_t v10 = a4 + 1;
  std::vector<unsigned long>::vector(&__p, a4 + 1);
  std::vector<int>::pointer v34 = 0;
  BOOL v35 = 0;
  uint64_t v36 = 0;
  int v37 = &v34;
  char v38 = 0;
  if (!v9)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](&v34, a2 + 1);
    uint64_t v11 = v35;
    int v12 = &v35[3 * v8];
    uint64_t v13 = 24 * a2 + 24;
    do
    {
      *uint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, __p, (uint64_t)v33, (v33 - (unsigned char *)__p) >> 3);
      v11 += 3;
      v13 -= 24;
    }
    while (v13);
    BOOL v35 = v12;
  }
  if (__p)
  {
    float v33 = __p;
    operator delete(__p);
  }
  uint64_t v14 = v34;
  if (a2 != -1)
  {
    unint64_t v15 = 0;
    do
    {
      long long v16 = *v14;
      v14 += 3;
      *long long v16 = v15++;
    }
    while (v8 != v15);
    uint64_t v14 = v34;
  }
  if (a4 != -1)
  {
    unint64_t v17 = 0;
    uint64_t v18 = *v14;
    do
    {
      v18[v17] = v17;
      ++v17;
    }
    while (v10 != v17);
    uint64_t v14 = v34;
  }
  uint64_t v19 = 2;
  if (v10 <= 2) {
    uint64_t v20 = 2;
  }
  else {
    uint64_t v20 = a4 + 1;
  }
  if (v8 > 2) {
    uint64_t v19 = a2 + 1;
  }
  int v21 = *v14;
  uint64_t v22 = v20 - 1;
  uint64_t v23 = 1;
  do
  {
    uint64_t v24 = 0;
    unsigned int v25 = a1[v23 - 1];
    float v26 = v14[3 * v23];
    unint64_t v27 = *v26;
    do
    {
      double v28 = fmin((double)(v21[v24 + 1] + 1), (double)(v27 + 1));
      if (v25 == a3[v24]) {
        uint64_t v29 = v21[v24];
      }
      else {
        uint64_t v29 = v21[v24] + 1;
      }
      unint64_t v27 = (unint64_t)fmin((double)(unint64_t)v28, (double)(unint64_t)v29);
      v26[++v24] = v27;
    }
    while (v22 != v24);
    ++v23;
    int v21 = v26;
  }
  while (v23 != v19);
  unint64_t v30 = v14[3 * a2][a4];
  __p = &v34;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v30;
}

void sub_1DD7509B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t isMixedCaseString(NSString *a1)
{
  if ([(NSString *)a1 isEqualToString:[(NSString *)a1 lowercaseString]]
    || [(NSString *)a1 isEqualToString:[(NSString *)a1 uppercaseString]])
  {
    return 0;
  }
  else
  {
    return [(NSString *)a1 isEqualToString:[(NSString *)a1 capitalizedString]] ^ 1;
  }
}

void *tokenRangesForString(__CFString *a1, NSLocale *a2)
{
  int v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (qword_1EB58C8E8 != -1) {
    dispatch_once(&qword_1EB58C8E8, &__block_literal_global_2);
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v9.NSUInteger length = [(__CFString *)a1 length];
  v9.NSUInteger location = 0;
  uint64_t v6 = CFStringTokenizerCreate(v5, a1, v9, 4uLL, (CFLocaleRef)a2);
  while (CFStringTokenizerAdvanceToNextToken(v6))
  {
    CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v6);
    if (-[__CFString rangeOfCharacterFromSet:options:range:](a1, "rangeOfCharacterFromSet:options:range:", _MergedGlobals_9, 2, CurrentTokenRange.location, CurrentTokenRange.length) != 0x7FFFFFFFFFFFFFFFLL)objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", CurrentTokenRange.location, CurrentTokenRange.length)); {
  }
    }
  CFRelease(v6);
  return v4;
}

id ___Z20tokenRangesForStringP8NSStringP8NSLocale_block_invoke()
{
  id result = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B88], "whitespaceAndNewlineCharacterSet"), "invertedSet");
  _MergedGlobals_9 = (uint64_t)result;
  return result;
}

double ratioHorizontalOverlapOfSubjectToReferenceRect(CGRect a1, CGRect a2)
{
  CGFloat width = a2.size.width;
  CGFloat x = a2.origin.x;
  double v4 = a1.size.width;
  CGFloat v5 = a1.origin.x;
  if (a1.size.width == 0.0)
  {
    double v6 = 0.0;
    uint64_t v7 = 0;
    double v8 = 1.0;
    double MinX = CGRectGetMinX(a1);
    v16.origin.y = 0.0;
    v16.size.height = 1.0;
    v16.origin.CGFloat x = x;
    v16.size.CGFloat width = width;
    if (MinX >= CGRectGetMinX(v16))
    {
      v17.origin.y = 0.0;
      v17.size.height = 1.0;
      v17.origin.CGFloat x = v5;
      v17.size.CGFloat width = v4;
      double v10 = CGRectGetMinX(v17);
      v18.origin.y = 0.0;
      v18.size.height = 1.0;
      v18.origin.CGFloat x = x;
      v18.size.CGFloat width = width;
      if (v10 <= CGRectGetMaxX(v18)) {
        return 1.0;
      }
    }
  }
  else
  {
    double v6 = 0.0;
    if (a2.size.width > 0.0)
    {
      uint64_t v11 = 0;
      double v12 = 1.0;
      uint64_t v13 = 0;
      double v14 = 1.0;
      CGRect v19 = CGRectIntersection(a1, a2);
      return v19.size.width / v4;
    }
  }
  return v6;
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    double v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DD750CF4(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  id result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_1DD7521A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1DD7528B0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_1DD752A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1DD752EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  objc_sync_exit(v45);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_1DD753858(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD753E74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD754540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1DD754698(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DD754730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7548AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD754A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD754D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD754E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD754EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD754F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD755020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7550CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD755178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD755224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD75528C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD755918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1DD7563DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id CRCastAsClass<CRFormTextFieldOutputRegion>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1DD756558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7565C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD756704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD756858(_Unwind_Exception *a1)
{
  CGFloat v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DD756B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1DD757338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1DD7577F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD757938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD757CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1DD75818C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  _Unwind_Resume(a1);
}

void sub_1DD758960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD758DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1DD758F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD7591D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD759350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD759534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD759934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1DD759A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD759C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1DD759D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75A180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75A254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75A2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75A484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75A544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75A730(_Unwind_Exception *a1)
{
  double v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1DD75A944(_Unwind_Exception *a1)
{
  double v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1DD75AB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75AD4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75AFE8(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_1DD75B170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75B4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD75BA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void sub_1DD75C104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD75C530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD75C668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75C6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRLanguageCorrection;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1DD75CFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1DD75D308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75D4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75D998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD75DBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD75E024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<BreakPoint>>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6CDA630, MEMORY[0x1E4FBA1D0]);
}

void sub_1DD75E248(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  id result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void *std::__function::__value_func<void ()(std::vector<unsigned long> const&,double,double,double,double,double,double)>::~__value_func[abi:ne180100](void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1DD75E5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::vector<CRCHLatticePath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  id v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    CGFloat v5 = v2;
    if (v4 != v2)
    {
      do
        CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)(v4 - 448));
      while (v4 != v2);
      CGFloat v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CRCHLatticePath::~CRCHLatticePath(CRCHLatticePath *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    free(v2);
    *(void *)this = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    free(v3);
    *((void *)this + 1) = 0;
  }
  uint64_t v4 = (const void *)*((void *)this + 28);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 28) = 0;
  }
  CGFloat v5 = (const void *)*((void *)this + 27);
  if (v5)
  {
    CFRelease(v5);
    *((void *)this + 27) = 0;
  }
  double v6 = (void *)*((void *)this + 51);
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 48);
  if (v7) {
    operator delete(v7);
  }
  double v8 = (void *)*((void *)this + 45);
  if (v8)
  {
    *((void *)this + 46) = v8;
    operator delete(v8);
  }
  CFRange v9 = (void *)*((void *)this + 42);
  if (v9)
  {
    *((void *)this + 43) = v9;
    operator delete(v9);
  }
  double v10 = (void *)*((void *)this + 39);
  if (v10)
  {
    *((void *)this + 40) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 36);
  if (v11)
  {
    *((void *)this + 37) = v11;
    operator delete(v11);
  }
  double v12 = (void *)*((void *)this + 31);
  if (v12)
  {
    *((void *)this + 32) = v12;
    operator delete(v12);
  }

  uint64_t v13 = (void *)*((void *)this + 11);
  if (v13)
  {
    *((void *)this + 12) = v13;
    operator delete(v13);
  }
  double v14 = (void *)*((void *)this + 8);
  if (v14)
  {
    *((void *)this + 9) = v14;
    operator delete(v14);
  }
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DD75E854(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *result;
  double v5 = *(double *)(a4 + 8 * *result);
  uint64_t v6 = *a2;
  double v7 = *(double *)(a4 + 8 * *a2);
  uint64_t v8 = *a3;
  double v9 = *(double *)(a4 + 8 * *a3);
  if (v5 >= v7)
  {
    if (v7 < v9)
    {
      *a2 = v8;
      *a3 = v6;
      uint64_t v10 = *result;
      if (*(double *)(a4 + 8 * *result) < *(double *)(a4 + 8 * *a2))
      {
        *id result = *a2;
        *a2 = v10;
      }
    }
  }
  else
  {
    if (v7 >= v9)
    {
      *id result = v6;
      *a2 = v4;
      if (v5 >= *(double *)(a4 + 8 * *a3)) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *id result = v8;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a1;
      uint64_t v9 = *(a2 - 1);
      if (*(double *)(**a3 + 8 * *a1) < *(double *)(**a3 + 8 * v9))
      {
        *a1 = v9;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      int v21 = a1 + 1;
      uint64_t v22 = a1 + 2;
      uint64_t v23 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v24 = a1[3];
      uint64_t v25 = **a3;
      uint64_t v26 = *(a2 - 1);
      if (*(double *)(v25 + 8 * v24) < *(double *)(v25 + 8 * v26))
      {
        *uint64_t v23 = v26;
        *(a2 - 1) = v24;
        uint64_t v27 = *v22;
        uint64_t v28 = *v23;
        double v29 = *(double *)(v25 + 8 * *v23);
        if (*(double *)(v25 + 8 * *v22) < v29)
        {
          *uint64_t v22 = v28;
          *uint64_t v23 = v27;
          uint64_t v30 = *v21;
          if (*(double *)(v25 + 8 * *v21) < v29)
          {
            a1[1] = v28;
            a1[2] = v30;
            uint64_t v31 = *a1;
            if (*(double *)(v25 + 8 * *a1) < v29)
            {
              *a1 = v28;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(a1, a1 + 1, a1 + 2, **a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v10;
    uint64_t v16 = *v11;
    double v17 = *(double *)(v13 + 8 * *v11);
    if (*(double *)(v13 + 8 * *v10) < v17)
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v15;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v15 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (*(double *)(v13 + 8 * v15) >= v17)
        {
          uint64_t v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *uint64_t v20 = v16;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(a1, a2, a3, **a5);
  uint64_t v11 = *a3;
  uint64_t v12 = **a5;
  if (*(double *)(v12 + 8 * *a3) < *(double *)(v12 + 8 * *a4))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    if (*(double *)(v12 + 8 * *a2) < *(double *)(v12 + 8 * *a3))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (*(double *)(v12 + 8 * *a1) < *(double *)(v12 + 8 * *a2))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

void sub_1DD76009C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v47 - 208), 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_1DD760948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose((const void *)(v59 - 144), 8);
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_1DD7614F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD762040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7620B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRTextRecognizerModelEspressoInput;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1DD76220C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7623C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7625D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD762738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD762F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD763220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *__copy_helper_block_ea8_64c59_ZTSNSt3__16vectorI17espresso_buffer_tNS_9allocatorIS1_EEEE88c70_ZTSNSt3__16vectorIU8__strongU13block_pointerFvvENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<espresso_buffer_t>::__init_with_size[abi:ne180100]<espresso_buffer_t*,espresso_buffer_t*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  return std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__init_with_size[abi:ne180100]<void({block_pointer} {__strong}*)(void),void({block_pointer} {__strong}*)(void)>((char *)(a1 + 88), *(uint64_t **)(a2 + 88), *(uint64_t **)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
}

void sub_1DD7632DC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_64c59_ZTSNSt3__16vectorI17espresso_buffer_tNS_9allocatorIS1_EEEE88c70_ZTSNSt3__16vectorIU8__strongU13block_pointerFvvENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 88);
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void sub_1DD763514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7636B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD763750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD763850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRTextSequenceRecognizerModelEspresso;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1DD763914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76398C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD763A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD763DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD763E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD763F8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1DD764150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD764470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  objc_sync_exit(v13);
  _Unwind_Resume(a1);
}

char *std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

void std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<espresso_buffer_t>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[168 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(168 * a2);
}

void *std::vector<espresso_buffer_t>::__init_with_size[abi:ne180100]<espresso_buffer_t*,espresso_buffer_t*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = std::vector<espresso_buffer_t>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD764924(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__init_with_size[abi:ne180100]<void({block_pointer} {__strong}*)(void),void({block_pointer} {__strong}*)(void)>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (char **)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      BOOL result = (char *)MEMORY[0x1E01BFAC0](v8);
      *v7++ = result;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DD7649AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1DD7655C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7657F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD765DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD7665D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1DD766884(_Unwind_Exception *a1)
{
  double v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DD766954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CRImageBuffer::CRImageBuffer(CRImageBuffer *this, size_t count, size_t size, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *((void *)this + 2) = a5;
  *((void *)this + 3) = a6;
  *(void *)this = 0;
  *((void *)this + 1) = a4;
  if (count) {
    *(void *)this = malloc_type_calloc(count, size, 0xF2EF0BD8uLL);
  }
}

{
  *((void *)this + 2) = a5;
  *((void *)this + 3) = a6;
  *(void *)this = 0;
  *((void *)this + 1) = a4;
  if (count) {
    *(void *)this = malloc_type_calloc(count, size, 0xF2EF0BD8uLL);
  }
}

void CRImageBuffer::~CRImageBuffer(void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    free(v1);
  }
}

{
  void *v1;

  uint64_t v1 = *this;
  if (v1) {
    free(v1);
  }
}

void sub_1DD766EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1DD7670FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD76738C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7677FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD767AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD767B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD767BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD767C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD767CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD768024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD768220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7683E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD768450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD768508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD768584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7685EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD768CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1DD768F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76937C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  _Unwind_Resume(a1);
}

void sub_1DD7694E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD769578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD769664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD76978C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD769810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7698E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7699B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD769AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD769E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD769FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76A5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD76A704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD76A764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76A808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76A8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76A958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76AA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76AAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76AB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76ABF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76ACA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76AD48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76ADF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76AE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76AF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76AFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76B138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76B1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76B250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76B4F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76B654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD76B83C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RectangleFinder::RectangleFinder(RectangleFinder *this)
{
  *((void *)this + 10) = 0x340200000;
  *((_DWORD *)this + 22) = 1080033280;
}

{
  *((void *)this + 10) = 0x340200000;
  *((_DWORD *)this + 22) = 1080033280;
}

uint64_t RectangleFinder::PrintLabels(RectangleFinder *this, int **a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      uint64_t v8 = a2;
      for (uint64_t j = a3; j; --j)
      {
        uint64_t v10 = (uint64_t)*v8++;
        printf("%3d ", *(_DWORD *)(v10 + 4 * i));
      }
      uint64_t result = putchar(10);
    }
  }
  return result;
}

uint64_t RectangleFinder::FindNextContourPixelPosition(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int *a6, int a7)
{
  int v7 = 0;
  int v8 = *a6;
  unint64_t v9 = HIDWORD(a5);
  while (1)
  {
    int v10 = (v8 + v7) & 7;
    if (v8 + v7 <= 0) {
      int v10 = -(-(v8 + v7) & 7);
    }
    unint64_t v11 = neighborColumnOffset[v10] + (uint64_t)(int)a5;
    unint64_t v12 = neighborRowOffset[v10] + (uint64_t)SHIDWORD(a5);
    if (v11 >= a3 || v12 >= a4)
    {
LABEL_12:
      *a6 = 0;
      uint64_t v15 = a5;
      return v15 | (v9 << 32);
    }
    if (*(unsigned __int8 *)(a1 + v11 + v12 * a3) != a7) {
      break;
    }
    uint64_t v14 = *(void *)(a2 + 8 * v11);
    if (!*(_DWORD *)(v14 + 4 * v12)) {
      *(_DWORD *)(v14 + 4 * v12) = -1;
    }
    if (++v7 == 8) {
      goto LABEL_12;
    }
  }
  unint64_t v9 = v12;
  uint64_t v15 = v11;
  *a6 = (char)(v10 + 4 - ((v10 + 4 + (((char)(v10 + 4) >> 12) & 7)) & 0xF8));
  return v15 | (v9 << 32);
}

void RectangleFinder::TraceSingleContour(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, void **a9@<X8>)
{
  unsigned int v11 = a5;
  unint64_t v17 = HIDWORD(a5);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if ((a6 - 1) >= 2) {
    int v18 = 7;
  }
  else {
    int v18 = 3;
  }
  int v59 = v18;
  int64_t NextContourPixelPosition = RectangleFinder::FindNextContourPixelPosition(a1, a2, a3, a4, a5, &v59, a8);
  int64_t v20 = NextContourPixelPosition;
  int v57 = a7;
  *(_DWORD *)(*(void *)(a2 + 8 * (int)NextContourPixelPosition) + 4 * (NextContourPixelPosition >> 32)) = a7;
  if (NextContourPixelPosition == __PAIR64__(v17, v11))
  {
    int v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a9 + 2), 1uLL);
    uint64_t v23 = &v21[v22];
    *int v21 = v20;
    uint64_t v24 = v21 + 1;
    uint64_t v26 = (char *)*a9;
    uint64_t v25 = (char *)a9[1];
    if (v25 != *a9)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *--int v21 = v27;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)*a9;
    }
    *a9 = v21;
    a9[1] = v24;
    a9[2] = v23;
    if (v25) {
      operator delete(v25);
    }
    a9[1] = v24;
  }
  else
  {
    unint64_t v55 = HIDWORD(NextContourPixelPosition);
    int v56 = v17;
    int v54 = a6;
    int v28 = (v59 + 2) & 7;
    if (v59 + 2 <= 0) {
      int v28 = -(-(v59 + 2) & 7);
    }
    int v59 = v28;
    uint64_t v29 = RectangleFinder::FindNextContourPixelPosition(a1, a2, a3, a4, NextContourPixelPosition, &v59, a8);
    uint64_t v30 = (int)v29;
    if ((int)v29 < a3)
    {
      int64_t v31 = v29;
      BOOL v32 = 0;
      do
      {
        if (v31 >> 32 >= a4) {
          break;
        }
        *(_DWORD *)(*(void *)(a2 + 8 * v30) + 4 * (v31 >> 32)) = v57;
        std::vector<int>::pointer v34 = (int64_t *)a9[1];
        unint64_t v33 = (unint64_t)a9[2];
        if ((unint64_t)v34 >= v33)
        {
          uint64_t v36 = ((char *)v34 - (unsigned char *)*a9) >> 3;
          if ((unint64_t)(v36 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v37 = v33 - (void)*a9;
          uint64_t v38 = v37 >> 2;
          if (v37 >> 2 <= (unint64_t)(v36 + 1)) {
            uint64_t v38 = v36 + 1;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39) {
            float v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a9 + 2), v39);
          }
          else {
            float v40 = 0;
          }
          char v41 = (int64_t *)&v40[8 * v36];
          int64_t *v41 = v31;
          BOOL v35 = v41 + 1;
          float v43 = (char *)*a9;
          int v42 = (char *)a9[1];
          if (v42 != *a9)
          {
            do
            {
              int64_t v44 = *((void *)v42 - 1);
              v42 -= 8;
              *--char v41 = v44;
            }
            while (v42 != v43);
            int v42 = (char *)*a9;
          }
          *a9 = v41;
          a9[1] = v35;
          a9[2] = &v40[8 * v39];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          int64_t *v34 = v31;
          BOOL v35 = v34 + 1;
        }
        a9[1] = v35;
        if (v31 == v20 && v32 && HIDWORD(v31) == v55) {
          break;
        }
        BOOL v32 = v31 == v11 && HIDWORD(v31) == v56;
        int v46 = (v59 + 2) & 7;
        if (v59 + 2 <= 0) {
          int v46 = -(-(v59 + 2) & 7);
        }
        int v59 = v46;
        int64_t v31 = RectangleFinder::FindNextContourPixelPosition(a1, a2, a3, a4, v31, &v59, a8);
        uint64_t v30 = (int)v31;
      }
      while ((int)v31 < a3);
    }
    if (v54)
    {
      unint64_t v47 = (unint64_t)*a9;
      float v48 = (char *)a9[1];
      int v49 = v48 - 8;
      if (*a9 != v48 && (unint64_t)v49 > v47)
      {
        unint64_t v51 = v47 + 8;
        do
        {
          uint64_t v52 = *(void *)(v51 - 8);
          *(void *)(v51 - 8) = *(void *)v49;
          *(void *)int v49 = v52;
          v49 -= 8;
          BOOL v53 = v51 >= (unint64_t)v49;
          v51 += 8;
        }
        while (!v53);
      }
    }
  }
}

void sub_1DD76BEB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void RectangleFinder::TraceAllContours(const vImage_Buffer *a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  int64_t v78 = 0;
  int64_t v79 = 0;
  unint64_t v80 = 0;
  long long v76 = 0uLL;
  uint64_t v77 = 0;
  vImagePixelCount width = a1->width;
  vImagePixelCount count = a1->height;
  data = a1->data;
  int v8 = malloc_type_calloc(width, 8uLL, 0x10040436913F5uLL);
  unint64_t v9 = v8;
  if (width)
  {
    int v10 = (void **)v8;
    vImagePixelCount v11 = width;
    do
    {
      *v10++ = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
      --v11;
    }
    while (v11);
    unint64_t v12 = data;
    vImagePixelCount v13 = width;
    do
    {
      *unint64_t v12 = a2;
      v12[(count - 1) * width] = a2;
      ++v12;
      --v13;
    }
    while (v13);
  }
  uint64_t v58 = a3;
  if (count >= 2)
  {
    vImagePixelCount v14 = count - 1;
    uint64_t v15 = &data[width];
    do
    {
      *uint64_t v15 = a2;
      *(v15 - 1) = a2;
      v15 += width;
      --v14;
    }
    while (v14);
  }
  unint64_t v62 = width;
  uint64_t v73 = 0;
  float v74 = 0;
  int v75 = 0;
  vImagePixelCount v16 = count - 1;
  if (count - 1 >= 2)
  {
    unint64_t v17 = width - 1;
    uint64_t v18 = 1;
    int v19 = 1;
    unint64_t v61 = v9;
    while (v17 <= 1)
    {
      uint64_t v22 = v18 + 1;
LABEL_61:
      uint64_t v18 = v22;
      if (v22 == v16) {
        goto LABEL_62;
      }
    }
    uint64_t v20 = v18 << 32;
    uint64_t v21 = (((v18 << 32) + 0x100000000) >> 32) * v62;
    uint64_t v22 = v18 + 1;
    uint64_t v23 = 1;
    uint64_t v60 = (((v18 << 32) - 0x100000000) >> 32) * v62;
    while (1)
    {
      if (data[v23 + v18 * v62] == a2) {
        goto LABEL_58;
      }
      unint64_t v24 = v23 | v20;
      uint64_t v25 = v9[v23];
      int v26 = *(_DWORD *)(v25 + 4 * v18);
      if (v26)
      {
        int v27 = 2;
        goto LABEL_46;
      }
      if (data[v23 + v60] != a2) {
        goto LABEL_44;
      }
      *(_DWORD *)(v25 + 4 * v18) = v19;
      RectangleFinder::TraceSingleContour((uint64_t)data, (uint64_t)v9, v62, count, v23 | v20, 0, v19, a2, v71);
      if ((void)v76)
      {
        *((void *)&v76 + 1) = v76;
        operator delete((void *)v76);
      }
      long long v76 = *(_OWORD *)v71;
      uint64_t v77 = v72;
      int v28 = v79;
      if ((unint64_t)v79 >= v80)
      {
        uint64_t v29 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>((uint64_t *)&v78, (uint64_t)&v76);
      }
      else
      {
        void *v79 = 0;
        v28[1] = 0;
        v28[2] = 0;
        std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v28, (const void *)v76, *((uint64_t *)&v76 + 1), (uint64_t)(*((void *)&v76 + 1) - v76) >> 3);
        uint64_t v29 = (uint64_t)(v28 + 3);
      }
      int v59 = v19;
      int64_t v79 = (void *)v29;
      uint64_t v30 = (*((void *)&v76 + 1) - (void)v76) >> 3;
      int64_t v31 = v74;
      if (v74 >= v75)
      {
        unint64_t v33 = v73;
        uint64_t v34 = (v74 - v73) >> 2;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v36 = v75 - v73;
        if ((v75 - v73) >> 1 > v35) {
          unint64_t v35 = v36 >> 1;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37)
        {
          uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75, v37);
          unint64_t v33 = v73;
          int64_t v31 = v74;
        }
        else
        {
          uint64_t v38 = 0;
        }
        unint64_t v39 = &v38[4 * v34];
        *(_DWORD *)unint64_t v39 = v30;
        BOOL v32 = v39 + 4;
        if (v31 == v33)
        {
          unint64_t v9 = v61;
        }
        else
        {
          unint64_t v9 = v61;
          do
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          while (v31 != v33);
        }
        uint64_t v73 = v39;
        float v74 = v32;
        int v75 = &v38[4 * v37];
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(_DWORD *)float v74 = v30;
        BOOL v32 = v31 + 4;
        unint64_t v9 = v61;
      }
      float v74 = v32;
      int v19 = v59 + 1;
      uint64_t v25 = v9[v23];
      int v26 = *(_DWORD *)(v25 + 4 * v18);
      uint64_t v21 = (((v18 << 32) + 0x100000000) >> 32) * v62;
      uint64_t v20 = v18 << 32;
      if (!v26) {
        break;
      }
      int v27 = 2;
LABEL_45:
      uint64_t v22 = v18 + 1;
LABEL_46:
      if (data[v23 + v21] == a2)
      {
        if (!v26)
        {
          int v41 = *(_DWORD *)(v9[v23 - 1] + 4 * v18);
          *(_DWORD *)(v25 + 4 * v18) = v41;
          ++*(_DWORD *)&v73[4 * v41 - 4];
        }
        if (*(_DWORD *)(v25 + 4 * v22) != -1)
        {
          uint64_t v42 = (uint64_t)v9;
          int v43 = *(_DWORD *)(v25 + 4 * v18);
          RectangleFinder::TraceSingleContour((uint64_t)data, v42, v62, count, v24, v27, v43, a2, v71);
          if ((void)v76)
          {
            *((void *)&v76 + 1) = v76;
            operator delete((void *)v76);
          }
          long long v76 = *(_OWORD *)v71;
          uint64_t v77 = v72;
          int64_t v44 = v79;
          if ((unint64_t)v79 >= v80)
          {
            uint64_t v45 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>((uint64_t *)&v78, (uint64_t)&v76);
          }
          else
          {
            void *v79 = 0;
            v44[1] = 0;
            v44[2] = 0;
            std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v44, (const void *)v76, *((uint64_t *)&v76 + 1), (uint64_t)(*((void *)&v76 + 1) - v76) >> 3);
            uint64_t v45 = (uint64_t)(v44 + 3);
          }
          int64_t v79 = (void *)v45;
          *(_DWORD *)&v73[4 * v43 - 4] += (*((void *)&v76 + 1) - (void)v76) >> 3;
          unint64_t v9 = v61;
          uint64_t v21 = (((v18 << 32) + 0x100000000) >> 32) * v62;
          uint64_t v20 = v18 << 32;
        }
        goto LABEL_58;
      }
      if (!v26) {
        goto LABEL_55;
      }
LABEL_58:
      if (++v23 == v17)
      {
        vImagePixelCount v16 = count - 1;
        goto LABEL_61;
      }
    }
    if (data[v23 + v60] == a2)
    {
      uint64_t v22 = v18 + 1;
LABEL_55:
      int v46 = *(_DWORD *)(v9[v23 - 1] + 4 * v18);
      *(_DWORD *)(v25 + 4 * v18) = v46;
      ++*(_DWORD *)&v73[4 * v46 - 4];
      goto LABEL_58;
    }
LABEL_44:
    int v26 = 0;
    int v27 = 1;
    goto LABEL_45;
  }
LABEL_62:
  *uint64_t v58 = 0;
  v58[1] = 0;
  v58[2] = 0;
  uint64_t v47 = (uint64_t)v78;
  unint64_t v48 = v62;
  if (v79 != v78)
  {
    uint64_t v49 = 0;
    unint64_t v50 = 0;
    do
    {
      v71[0] = 0;
      v71[1] = 0;
      uint64_t v72 = 0;
      float v68 = 0;
      float v69 = 0;
      uint64_t v70 = 0;
      std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&v68, *(const void **)(v47 + v49), *(void *)(v47 + v49 + 8), (uint64_t)(*(void *)(v47 + v49 + 8) - *(void *)(v47 + v49)) >> 3);
      unint64_t v51 = v68;
      if ((unint64_t)(v69 - (unsigned char *)v68) >= 0x11)
      {
        if (*(int *)&v73[4 * *(int *)(v9[*v68] + 4 * v68[1]) - 4] < 100) {
          goto LABEL_82;
        }
        unint64_t v65 = 0;
        uint64_t v66 = 0;
        __p = 0;
        std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&__p, v68, (uint64_t)v69, (v69 - (unsigned char *)v68) >> 3);
        RectangleFinder::generateConvexHull((uint64_t *)&__p, (char **)v67);
        if (__p)
        {
          unint64_t v65 = __p;
          operator delete(__p);
        }
        PolygonApproximateContourC((uint64_t *)&v68, (uint64_t)v71, 30.0);
        if ((void *)((char *)v71[1] - (char *)v71[0]) == (void *)40)
        {
          unint64_t v52 = v58[1];
          if (v52 >= v58[2])
          {
            uint64_t v53 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(v58, (uint64_t)v71);
          }
          else
          {
            std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)v58, (uint64_t)v71);
            uint64_t v53 = v52 + 24;
          }
          v58[1] = v53;
        }
        PolygonApproximateContourC((uint64_t *)v67, (uint64_t)v71, 30.0);
        if ((void *)((char *)v71[1] - (char *)v71[0]) == (void *)40)
        {
          unint64_t v54 = v58[1];
          if (v54 >= v58[2])
          {
            uint64_t v55 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(v58, (uint64_t)v71);
          }
          else
          {
            std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)v58, (uint64_t)v71);
            uint64_t v55 = v54 + 24;
          }
          v58[1] = v55;
        }
        if (v67[0])
        {
          v67[1] = v67[0];
          operator delete(v67[0]);
        }
        unint64_t v51 = v68;
      }
      if (v51)
      {
LABEL_82:
        float v69 = v51;
        operator delete(v51);
      }
      if (v71[0])
      {
        v71[1] = v71[0];
        operator delete(v71[0]);
      }
      ++v50;
      uint64_t v47 = (uint64_t)v78;
      v49 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v79 - v78) > v50);
  }
  if (v62)
  {
    int v56 = (void **)v9;
    do
    {
      int v57 = *v56++;
      free(v57);
      --v48;
    }
    while (v48);
  }
  free(v9);
  if (v73)
  {
    float v74 = v73;
    operator delete(v73);
  }
  if ((void)v76)
  {
    *((void *)&v76 + 1) = v76;
    operator delete((void *)v76);
  }
  *(void *)&long long v76 = &v78;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
}

void sub_1DD76C57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  BOOL v32 = *(void **)(v30 - 144);
  if (v32)
  {
    *(void *)(v30 - 136) = v32;
    operator delete(v32);
  }
  *(void *)(v30 - 144) = v30 - 112;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  _Unwind_Resume(a1);
}

void RectangleFinder::generateConvexHull(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (int32x2_t *)a1[1];
  uint64_t v6 = (uint64_t)v4 - v3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  __p = 0;
  uint64_t v136 = 0;
  if ((unint64_t)v4 - v3 >= 0x19)
  {
    unint64_t v8 = v6 >> 3;
    unint64_t v9 = 126 - 2 * __clz(v6 >> 3);
    if (v4 == (int32x2_t *)v3) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v9;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,false>(v3, v4, (uint64_t)&v137, v10, 1);
    vImagePixelCount v11 = (void *)*a1;
    vImagePixelCount v13 = a2 + 2;
    unint64_t v12 = (unint64_t)a2[2];
    vImagePixelCount v14 = a2[1];
    if ((unint64_t)v14 >= v12)
    {
      uint64_t v16 = (v14 - *a2) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_159;
      }
      uint64_t v17 = v12 - (void)*a2;
      uint64_t v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
        uint64_t v18 = v16 + 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19) {
        uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v19);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      *(void *)uint64_t v21 = *v11;
      uint64_t v15 = v21 + 8;
      unint64_t v24 = *a2;
      uint64_t v23 = a2[1];
      if (v23 != *a2)
      {
        do
        {
          uint64_t v25 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v21 - 1) = v25;
          v21 -= 8;
        }
        while (v23 != v24);
        uint64_t v23 = *a2;
      }
      *a2 = v21;
      a2[1] = v15;
      a2[2] = v22;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *(void *)vImagePixelCount v14 = *v11;
      uint64_t v15 = v14 + 8;
    }
    a2[1] = v15;
    uint64_t v26 = *a1;
    unint64_t v27 = (unint64_t)a2[2];
    if ((unint64_t)v15 >= v27)
    {
      uint64_t v29 = (v15 - *a2) >> 3;
      if ((unint64_t)(v29 + 1) >> 61) {
        goto LABEL_159;
      }
      uint64_t v30 = v27 - (void)*a2;
      uint64_t v31 = v30 >> 2;
      if (v30 >> 2 <= (unint64_t)(v29 + 1)) {
        uint64_t v31 = v29 + 1;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v32) {
        unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v32);
      }
      else {
        unint64_t v33 = 0;
      }
      uint64_t v34 = &v33[8 * v29];
      unint64_t v35 = &v33[8 * v32];
      *(void *)uint64_t v34 = *(void *)(v26 + 8);
      int v28 = v34 + 8;
      unint64_t v37 = *a2;
      uint64_t v36 = a2[1];
      if (v36 != *a2)
      {
        do
        {
          uint64_t v38 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v34 - 1) = v38;
          v34 -= 8;
        }
        while (v36 != v37);
        uint64_t v36 = *a2;
      }
      *a2 = v34;
      a2[1] = v28;
      a2[2] = v35;
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      *(void *)uint64_t v15 = *(void *)(v26 + 8);
      int v28 = v15 + 8;
    }
    a2[1] = v28;
    unint64_t v39 = v8 - 1;
    uint64_t v40 = *a1;
    if (v136)
    {
      MEMORY[0] = *(void *)(v40 + 8 * v39);
      unint64_t v41 = 8;
    }
    else
    {
      uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v136, 1uLL);
      *(void *)uint64_t v42 = *(void *)(v40 + 8 * v39);
      unint64_t v41 = (unint64_t)(v42 + 8);
      __p = v42;
      uint64_t v136 = &v42[8 * v43];
    }
    std::vector<int>::pointer v134 = (char *)v41;
    unint64_t v44 = v8 - 2;
    uint64_t v45 = *a1;
    unint64_t v132 = v6;
    if (v41 < (unint64_t)v136)
    {
      *(void *)unint64_t v41 = *(void *)(v45 + 8 * v44);
      int v46 = (char *)(v41 + 8);
LABEL_56:
      uint64_t v135 = v46;
      uint64_t v131 = v6 >> 3;
      if (v8 <= 3) {
        uint64_t v55 = 3;
      }
      else {
        uint64_t v55 = v6 >> 3;
      }
      int v56 = a2[1];
      uint64_t v57 = 2;
      do
      {
        uint64_t v58 = *a1;
        if ((unint64_t)v56 >= *v13)
        {
          uint64_t v59 = (v56 - *a2) >> 3;
          if ((unint64_t)(v59 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v60 = *v13 - (void)*a2;
          uint64_t v61 = v60 >> 2;
          if (v60 >> 2 <= (unint64_t)(v59 + 1)) {
            uint64_t v61 = v59 + 1;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v61;
          }
          if (v62) {
            BOOL v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v62);
          }
          else {
            BOOL v63 = 0;
          }
          uint64_t v64 = &v63[8 * v59];
          *(void *)uint64_t v64 = *(void *)(v58 + 8 * v57);
          int v56 = v64 + 8;
          uint64_t v66 = *a2;
          unint64_t v65 = a2[1];
          if (v65 != *a2)
          {
            do
            {
              uint64_t v67 = *((void *)v65 - 1);
              v65 -= 8;
              *((void *)v64 - 1) = v67;
              v64 -= 8;
            }
            while (v65 != v66);
            unint64_t v65 = *a2;
          }
          *a2 = v64;
          a2[1] = v56;
          a2[2] = &v63[8 * v62];
          if (v65) {
            operator delete(v65);
          }
        }
        else
        {
          *(void *)int v56 = *(void *)(v58 + 8 * v57);
          v56 += 8;
        }
        a2[1] = v56;
        if ((unint64_t)(v56 - *a2) >= 0x11)
        {
          int v68 = *((_DWORD *)v56 - 2);
          int v69 = *((_DWORD *)v56 - 1);
          uint64_t v70 = v56 - 16;
          int v71 = (int *)(v56 - 24);
          while (1)
          {
            int v72 = *((_DWORD *)v70 + 1);
            int v74 = *v71;
            int v73 = v71[1];
            int v75 = (v69 - v73) * (*(_DWORD *)v70 - v74) + (v72 - v73) * (v74 - v68);
            if (v75)
            {
              if (v75 > 0) {
                break;
              }
            }
            else
            {
              if (v72 < v73) {
                int v73 = v72;
              }
              if (v73 < v69) {
                break;
              }
            }
            long long v76 = v56 - 16;
            memmove(v56 - 16, v56 - 8, 8uLL);
            uint64_t v77 = *a2;
            v56 -= 8;
            a2[1] = v76 + 8;
            if ((unint64_t)(v76 + 8 - v77) < 0x18) {
              break;
            }
            int v71 = (int *)(v76 - 16);
            uint64_t v70 = v76 - 8;
          }
        }
        ++v57;
      }
      while (v57 != v55);
      if ((int)(v132 >> 3) <= 2)
      {
        float v88 = __p;
        int64_t v79 = v135;
      }
      else
      {
        uint64_t v78 = (v131 - 3);
        int64_t v79 = v135;
        do
        {
          uint64_t v80 = *a1;
          if (v79 >= v136)
          {
            uint64_t v81 = (v79 - __p) >> 3;
            if ((unint64_t)(v81 + 1) >> 61) {
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v82 = (v136 - __p) >> 2;
            if (v82 <= v81 + 1) {
              unint64_t v82 = v81 + 1;
            }
            if ((unint64_t)(v136 - __p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v83 = v82;
            }
            if (v83) {
              uint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v136, v83);
            }
            else {
              uint64_t v84 = 0;
            }
            float v85 = &v84[8 * v81];
            *(void *)float v85 = *(void *)(v80 + 8 * v78);
            int64_t v79 = v85 + 8;
            float v86 = v135;
            if (v135 != __p)
            {
              do
              {
                uint64_t v87 = *((void *)v86 - 1);
                v86 -= 8;
                *((void *)v85 - 1) = v87;
                v85 -= 8;
              }
              while (v86 != __p);
              float v86 = __p;
            }
            __p = v85;
            uint64_t v136 = &v84[8 * v83];
            if (v86) {
              operator delete(v86);
            }
          }
          else
          {
            *(void *)int64_t v79 = *(void *)(v80 + 8 * v78);
            v79 += 8;
          }
          uint64_t v135 = v79;
          float v88 = __p;
          if ((unint64_t)(v79 - __p) >= 0x11)
          {
            int v89 = *((_DWORD *)v79 - 2);
            int v90 = *((_DWORD *)v79 - 1);
            int v91 = v79 - 16;
            unint64_t v92 = v79 - 24;
            while (1)
            {
              int v93 = *((_DWORD *)v91 + 1);
              int v95 = *(_DWORD *)v92;
              int v94 = *((_DWORD *)v92 + 1);
              int v96 = (v90 - v94) * (*(_DWORD *)v91 - v95) + (v93 - v94) * (v95 - v89);
              if (v96)
              {
                if (v96 > 0) {
                  break;
                }
              }
              else
              {
                if (v93 < v94) {
                  int v94 = v93;
                }
                if (v94 < v90) {
                  break;
                }
              }
              float v97 = v79 - 16;
              memmove(v79 - 16, v79 - 8, 8uLL);
              float v88 = __p;
              v79 -= 8;
              uint64_t v135 = v97 + 8;
              if ((unint64_t)(v97 + 8 - __p) < 0x18) {
                break;
              }
              unint64_t v92 = v97 - 16;
              int v91 = v97 - 8;
            }
          }
        }
        while (v78-- > 0);
      }
      BOOL v99 = v88;
      if (v79 != v88 + 8)
      {
        memmove(v88, v88 + 8, v79 - (v88 + 8));
        BOOL v99 = __p;
      }
      uint64_t v100 = v79 - 8;
      uint64_t v101 = v79 - 8 - v99;
      if (v101 < 1) {
        goto LABEL_154;
      }
      uint64_t v102 = v101 >> 3;
      unint64_t v103 = (unint64_t)a2[1];
      uint64_t v104 = v103 - (void)*a2;
      uint64_t v105 = &(*a2)[v104 & 0xFFFFFFFFFFFFFFF8];
      if (v101 >> 3 <= (uint64_t)(*v13 - v103) >> 3)
      {
        uint64_t v111 = (uint64_t)(v103 - (void)v105) >> 3;
        if (v111 >= v102)
        {
          unint64_t v112 = &v99[8 * v102];
          unint64_t v114 = a2[1];
        }
        else
        {
          unint64_t v112 = &v99[8 * v111];
          int64_t v113 = v100 - v112;
          if (v100 != v112) {
            memmove(a2[1], &v99[8 * v111], v100 - v112);
          }
          unint64_t v114 = (char *)(v103 + v113);
          a2[1] = (char *)(v103 + v113);
          if ((uint64_t)(v103 - (void)v105) < 1) {
            goto LABEL_154;
          }
        }
        unint64_t v115 = &v105[8 * v102];
        unint64_t v116 = (uint64_t *)&v114[-8 * v102];
        float v117 = v114;
        if ((unint64_t)v116 < v103)
        {
          float v117 = v114;
          do
          {
            uint64_t v118 = *v116++;
            *(void *)float v117 = v118;
            v117 += 8;
          }
          while ((unint64_t)v116 < v103);
        }
        a2[1] = v117;
        if (v114 != v115) {
          memmove(&v114[-8 * ((v114 - v115) >> 3)], v105, v114 - v115);
        }
        if (v112 != v99) {
          memmove(v105, v99, v112 - v99);
        }
      }
      else
      {
        uint64_t v106 = v104 >> 3;
        unint64_t v107 = (v104 >> 3) + v102;
        if (v107 >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v108 = *v13 - (void)*a2;
        if (v108 >> 2 > v107) {
          unint64_t v107 = v108 >> 2;
        }
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v109 = v107;
        }
        if (v109) {
          float v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v109);
        }
        else {
          float v110 = 0;
        }
        int v119 = &v110[8 * v106];
        int v120 = &v119[8 * v102];
        uint64_t v121 = 8 * v102;
        unint64_t v122 = v119;
        do
        {
          uint64_t v123 = *(void *)v99;
          v99 += 8;
          *(void *)unint64_t v122 = v123;
          v122 += 8;
          v121 -= 8;
        }
        while (v121);
        int v124 = *a2;
        if (*a2 != v105)
        {
          unint64_t v125 = v105;
          do
          {
            uint64_t v126 = *((void *)v125 - 1);
            v125 -= 8;
            *((void *)v119 - 1) = v126;
            v119 -= 8;
          }
          while (v125 != v124);
        }
        float v127 = &v110[8 * v109];
        float v128 = a2[1];
        uint64_t v129 = v128 - v105;
        if (v128 != v105) {
          memmove(v120, v105, v128 - v105);
        }
        int v130 = *a2;
        *a2 = v119;
        a2[1] = &v120[v129];
        a2[2] = v127;
        if (v130) {
          operator delete(v130);
        }
      }
LABEL_154:
      if (__p) {
        operator delete(__p);
      }
      return;
    }
    uint64_t v47 = (uint64_t)(v41 - (void)__p) >> 3;
    if (!((unint64_t)(v47 + 1) >> 61))
    {
      unint64_t v48 = (v136 - __p) >> 2;
      if (v48 <= v47 + 1) {
        unint64_t v48 = v47 + 1;
      }
      if ((unint64_t)(v136 - __p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v48;
      }
      if (v49) {
        unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v136, v49);
      }
      else {
        unint64_t v50 = 0;
      }
      unint64_t v51 = &v50[8 * v47];
      unint64_t v52 = &v50[8 * v49];
      *(void *)unint64_t v51 = *(void *)(v45 + 8 * v44);
      int v46 = v51 + 8;
      uint64_t v53 = v134;
      if (v134 != __p)
      {
        do
        {
          uint64_t v54 = *((void *)v53 - 1);
          v53 -= 8;
          *((void *)v51 - 1) = v54;
          v51 -= 8;
        }
        while (v53 != __p);
        uint64_t v53 = __p;
      }
      __p = v51;
      uint64_t v136 = v52;
      if (v53) {
        operator delete(v53);
      }
      goto LABEL_56;
    }
LABEL_159:
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
}

void sub_1DD76CEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void PolygonApproximateContourC(uint64_t *a1, uint64_t a2, float a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1] - *a1;
  if (v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v6 >> 3;
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v9;
    }
    int32x2_t v11 = 0;
    do
      int32x2_t v11 = vadd_s32(*(int32x2_t *)(v5 + 8 * v8++), v11);
    while (v10 != v8);
    uint64_t v12 = 0;
    int v13 = 0;
    int v14 = 0;
    unint64_t v15 = v11.i32[0] / v9;
    uint64_t v16 = (_DWORD *)(v5 + 4);
    unint64_t v17 = v11.i32[1] / v9;
    do
    {
      if ((*(v16 - 1) - (int)v15) * (*(v16 - 1) - (int)v15) + (*v16 - (int)v17) * (*v16 - (int)v17) > v13)
      {
        int v14 = v12;
        int v13 = (*(v16 - 1) - v15) * (*(v16 - 1) - v15) + (*v16 - v17) * (*v16 - v17);
      }
      ++v12;
      v16 += 2;
    }
    while (v10 != v12);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = v14;
    __p = 0;
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    do
    {
      unint64_t v21 = (v19 + v20) % (v9 - 1);
      if (v18 >= v32)
      {
        uint64_t v22 = (v18 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v23 = (v32 - (unsigned char *)__p) >> 2;
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        if ((unint64_t)(v32 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v32, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = &v25[8 * v22];
        *(void *)uint64_t v26 = *(void *)(v5 + 8 * v21);
        uint64_t v18 = v26 + 8;
        int v28 = (char *)__p;
        unint64_t v27 = v31;
        if (v31 != __p)
        {
          do
          {
            uint64_t v29 = *((void *)v27 - 1);
            v27 -= 8;
            *((void *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v27 != v28);
          unint64_t v27 = (char *)__p;
        }
        __p = v26;
        uint64_t v31 = v18;
        unint64_t v32 = &v25[8 * v24];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(void *)uint64_t v18 = *(void *)(v5 + 8 * v21);
        v18 += 8;
      }
      uint64_t v31 = v18;
      ++v19;
      uint64_t v5 = *a1;
      unint64_t v9 = (a1[1] - *a1) >> 3;
    }
    while (v9 > v19);
  }
  else
  {
    __p = 0;
    uint64_t v31 = 0;
    unint64_t v32 = 0;
  }
  PolygonApproximateContour((uint64_t)&__p, a2, a3);
  if (__p)
  {
    uint64_t v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1DD76D138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RectangleFinder::traceAllContoursWithoutFiltering(RectangleFinder *this@<X0>, const vImage_Buffer *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __p = 0;
  long long v43 = 0uLL;
  size_t v3 = *((void *)this + 2);
  size_t count = *((void *)this + 1);
  if (v3) {
    BOOL v4 = *((void *)this + 1) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *(void *)this;
    if (*(void *)this)
    {
      int v6 = (int)a2;
      int v7 = malloc_type_calloc(v3, 8uLL, 0x10040436913F5uLL);
      uint64_t v8 = 0;
      do
        v7[v8++] = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
      while (v3 != v8);
      uint64_t v9 = 0;
      unint64_t v10 = count - 1;
      do
      {
        *(unsigned char *)(v5 + v9) = v6;
        *(unsigned char *)(v5 + (count - 1) * v3 + v9++) = v6;
      }
      while (v3 != v9);
      if (count >= 2)
      {
        int32x2_t v11 = (unsigned char *)(v5 + v3);
        size_t v12 = count - 1;
        do
        {
          *int32x2_t v11 = v6;
          *(v11 - 1) = v6;
          v11 += v3;
          --v12;
        }
        while (v12);
      }
      if (v10 >= 2)
      {
        unint64_t v13 = v3 - 1;
        size_t v14 = 2 - v3;
        uint64_t v15 = 1;
        int v37 = 1;
        uint64_t v35 = v5;
        unint64_t v36 = v3;
        unint64_t v32 = v3 - 1;
        while (v13 <= 1)
        {
          uint64_t v29 = v15 + 1;
LABEL_50:
          uint64_t v15 = v29;
          if (v29 == v10) {
            goto LABEL_51;
          }
        }
        size_t v39 = v5 + (((v15 << 32) + 0x100000000) >> 32) * v3;
        size_t v33 = v5 + (((v15 << 32) - 0x100000000) >> 32) * v3;
        size_t v17 = v5 + v15 * v3;
        uint64_t v18 = 1;
        uint64_t v19 = 1;
        while (1)
        {
          if (*(unsigned __int8 *)(v17 + v19) == v6) {
            goto LABEL_47;
          }
          uint64_t v16 = v15 << 32;
          uint64_t v20 = v7[v18];
          int v21 = *(_DWORD *)(v20 + 4 * v15);
          if (v21) {
            break;
          }
          if (*(unsigned __int8 *)(v33 + v19) == v6)
          {
            *(_DWORD *)(v20 + 4 * v15) = v37;
            RectangleFinder::TraceSingleContour(v35, (uint64_t)v7, v36, count, v19 | v16, 0, v37, v6, &v40);
            if (__p)
            {
              *(void *)&long long v43 = __p;
              operator delete(__p);
            }
            __p = v40;
            long long v43 = v41;
            if ((void *)v41 != v40)
            {
              unint64_t v24 = a3[1];
              if (v24 >= a3[2])
              {
                uint64_t v25 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(a3, (uint64_t)&__p);
              }
              else
              {
                std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)a3, (uint64_t)&__p);
                uint64_t v25 = v24 + 24;
              }
              a3[1] = v25;
            }
            ++v37;
            uint64_t v20 = v7[v18];
            int v21 = *(_DWORD *)(v20 + 4 * v15);
            if (v21) {
              break;
            }
            if (*(unsigned __int8 *)(v33 + v19) == v6) {
              goto LABEL_44;
            }
          }
          int v21 = 0;
          char v22 = 1;
          int v23 = 1;
LABEL_31:
          if (*(unsigned __int8 *)(v39 + v19) == v6)
          {
            if (!v21)
            {
              int v21 = *(_DWORD *)(v7[v18 - 1] + 4 * v15);
              *(_DWORD *)(v20 + 4 * v15) = v21;
            }
            if (*(_DWORD *)(v20 + 4 * (v15 + 1)) != -1)
            {
              RectangleFinder::TraceSingleContour(v35, (uint64_t)v7, v36, count, v19 | v16, v23, v21, v6, &v40);
              if (__p)
              {
                *(void *)&long long v43 = __p;
                operator delete(__p);
              }
              __p = v40;
              long long v43 = v41;
              if ((void *)v41 == v40) {
                char v26 = 1;
              }
              else {
                char v26 = v22;
              }
              if ((v26 & 1) == 0)
              {
                unint64_t v27 = a3[1];
                if (v27 >= a3[2])
                {
                  uint64_t v28 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(a3, (uint64_t)&__p);
                }
                else
                {
                  std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)a3, (uint64_t)&__p);
                  uint64_t v28 = v27 + 24;
                }
                a3[1] = v28;
              }
            }
            goto LABEL_47;
          }
          if (!v21) {
LABEL_44:
          }
            *(_DWORD *)(v20 + 4 * v15) = *(_DWORD *)(v7[v18 - 1] + 4 * v15);
LABEL_47:
          ++v19;
          ++v18;
          if (v14 + v19 == 1)
          {
            uint64_t v5 = v35;
            size_t v3 = v36;
            unint64_t v13 = v32;
            unint64_t v10 = count - 1;
            uint64_t v29 = v15 + 1;
            goto LABEL_50;
          }
        }
        char v22 = 0;
        int v23 = 2;
        goto LABEL_31;
      }
LABEL_51:
      uint64_t v30 = 0;
      if (v3 <= 1) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = v3;
      }
      do
        free((void *)v7[v30++]);
      while (v31 != v30);
      free(v7);
      if (__p)
      {
        *(void *)&long long v43 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1DD76D504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  __p = a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void RectangleFinder::identifyRectangleContours(uint64_t *a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  unint64_t v59 = 0;
  uint64_t v3 = *a1;
  if (a1[1] == *a1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      unint64_t v51 = 0;
      unint64_t v52 = 0;
      uint64_t v53 = 0;
      std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&v51, *(const void **)(v3 + v5), *(void *)(v3 + v5 + 8), (uint64_t)(*(void *)(v3 + v5 + 8) - *(void *)(v3 + v5)) >> 3);
      int v7 = v51;
      if ((unint64_t)(v52 - v51) >= 0x11)
      {
        unint64_t v48 = 0;
        uint64_t v49 = 0;
        __p = 0;
        std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&__p, v51, (uint64_t)v52, (v52 - v51) >> 3);
        RectangleFinder::generateConvexHull((uint64_t *)&__p, (char **)v50);
        if (__p)
        {
          unint64_t v48 = __p;
          operator delete(__p);
        }
        PolygonApproximateContourC((uint64_t *)&v51, (uint64_t)&v54, 20.0);
        if (v55 - (unsigned char *)v54 == 40)
        {
          uint64_t v8 = v58;
          if ((unint64_t)v58 >= v59)
          {
            uint64_t v9 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(&v57, (uint64_t)&v54);
          }
          else
          {
            *uint64_t v58 = 0;
            v8[1] = 0;
            v8[2] = 0;
            std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v8, v54, (uint64_t)v55, (v55 - (unsigned char *)v54) >> 3);
            uint64_t v9 = (uint64_t)(v8 + 3);
          }
          uint64_t v58 = (void *)v9;
        }
        PolygonApproximateContourC((uint64_t *)v50, (uint64_t)&v54, 20.0);
        if (v55 - (unsigned char *)v54 == 40)
        {
          unint64_t v10 = v58;
          if ((unint64_t)v58 >= v59)
          {
            uint64_t v11 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(&v57, (uint64_t)&v54);
          }
          else
          {
            *uint64_t v58 = 0;
            v10[1] = 0;
            v10[2] = 0;
            std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v10, v54, (uint64_t)v55, (v55 - (unsigned char *)v54) >> 3);
            uint64_t v11 = (uint64_t)(v10 + 3);
          }
          uint64_t v58 = (void *)v11;
        }
        if (v50[0])
        {
          v50[1] = v50[0];
          operator delete(v50[0]);
        }
        int v7 = v51;
      }
      if (v7)
      {
        unint64_t v52 = v7;
        operator delete(v7);
      }
      if (v54)
      {
        uint64_t v55 = v54;
        operator delete(v54);
      }
      ++v6;
      uint64_t v3 = *a1;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v6);
    uint64_t v12 = v57;
    unint64_t v13 = v58;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    if (v13 != (void *)v12)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = v12 + v14;
        uint64_t v18 = *(int **)(v12 + v14);
        if (*(void *)(v12 + v14 + 8) - (void)v18 == 40)
        {
          int v19 = *v18;
          if (*v18 == v18[8])
          {
            int v20 = v18[1];
            if (v20 == v18[9])
            {
              int v21 = v18[2];
              int v22 = v18[3];
              int v23 = (int)sqrt((double)((v19 - v21) * (v19 - v21) + (v20 - v22) * (v20 - v22)));
              int v24 = v18[6];
              int v25 = v18[7];
              int v26 = (int)sqrt((double)((v19 - v24) * (v19 - v24) + (v20 - v25) * (v20 - v25)));
              int v28 = v18[4];
              int v27 = v18[5];
              int v29 = (int)sqrt((double)((v21 - v28) * (v21 - v28) + (v22 - v27) * (v22 - v27)));
              int v30 = (int)sqrt((double)((v28 - v24) * (v28 - v24) + (v27 - v25) * (v27 - v25)));
              BOOL v31 = v23 <= v29 || v30 <= v26;
              BOOL v32 = !v31;
              BOOL v33 = !v32 || v23 <= v26;
              BOOL v34 = v33 || v30 <= v29;
              if (!v34
                || (v29 > v23 ? (BOOL v35 = v26 <= v30) : (BOOL v35 = 1),
                    !v35 ? (BOOL v36 = v26 <= v23) : (BOOL v36 = 1),
                    !v36 ? (BOOL v37 = v29 <= v30) : (BOOL v37 = 1),
                    !v37))
              {
                if (v29 >= v26) {
                  int v38 = v26;
                }
                else {
                  int v38 = v29;
                }
                float v39 = (float)v38;
                if (v29 <= v26) {
                  int v40 = v26;
                }
                else {
                  int v40 = v29;
                }
                float v41 = v39 / (float)v40;
                if (v23 >= v30) {
                  int v42 = v30;
                }
                else {
                  int v42 = v23;
                }
                if (v23 <= v30) {
                  int v23 = v30;
                }
                float v43 = (float)v42 / (float)v23;
                if (v29 >= v26) {
                  int v44 = v26;
                }
                else {
                  int v44 = v29;
                }
                if (v29 > v26) {
                  int v26 = v29;
                }
                if (v32)
                {
                  int v23 = v26;
                  int v45 = v44;
                }
                else
                {
                  int v45 = v42;
                }
                if (v32) {
                  float v41 = v43;
                }
                if ((float)((float)(1.0 - v41) * 100.0) < 20.0
                  && (float)((float)(1.0 - (float)((float)v45 / (float)v23)) * 100.0) < 50.0)
                {
                  if (v15 >= a2[2])
                  {
                    unint64_t v15 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(a2, v17);
                  }
                  else
                  {
                    std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)a2, v17);
                    v15 += 24;
                  }
                  a2[1] = v15;
                  uint64_t v12 = v57;
                  unint64_t v13 = v58;
                }
              }
            }
          }
        }
        ++v16;
        v14 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - v12) >> 3) > v16);
    }
  }
  uint64_t v54 = &v57;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
}

void sub_1DD76D92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  a19 = &a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t RectangleFinder::pointAboveOrRightOfLineSegment(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = HIDWORD(a2);
  int v4 = (HIDWORD(a1) - HIDWORD(a2)) * (a3 - a2) + (HIDWORD(a3) - HIDWORD(a2)) * (a2 - a1);
  if (v4)
  {
    if (v4 > 0) {
      return 1;
    }
  }
  else
  {
    if (SHIDWORD(a3) < SHIDWORD(a2)) {
      LODWORD(v3) = HIDWORD(a3);
    }
    if ((int)v3 < SHIDWORD(a1)) {
      return 1;
    }
  }
  return 0;
}

float RectangleFinder::angleBetweenLines(RectangleFinder *this, CGPoint a2, CGPoint a3, CGPoint a4)
{
  double v4 = ((a3.y - a2.y) * (a4.y - a2.y) + (a3.x - a2.x) * (a4.x - a2.x))
     / (sqrt((a3.y - a2.y) * (a3.y - a2.y) + (a3.x - a2.x) * (a3.x - a2.x))
      * sqrt((a4.y - a2.y) * (a4.y - a2.y) + (a4.x - a2.x) * (a4.x - a2.x)));
  long double v5 = -1.0;
  if (v4 >= -1.0)
  {
    long double v5 = v4;
    if (v4 > 1.0) {
      long double v5 = 1.0;
    }
  }
  return acos(v5) * 180.0 / 3.14159265;
}

uint64_t RectangleFinder::linesIntersect(RectangleFinder *this, CGPoint a2, CGPoint a3, CGPoint a4, CGPoint a5, CGPoint *a6)
{
  double v6 = a3.x - a2.x;
  double v7 = a3.y - a2.y;
  double v8 = a5.x - a4.x;
  double v9 = a5.y - a4.y;
  float v10 = v6 * v9 - v8 * v7;
  uint64_t result = 0;
  if (fabsf(v10) > 1.0e-10)
  {
    double v12 = a2.x - a4.x;
    double v13 = a2.y - a4.y;
    double v14 = v10;
    float v15 = (v6 * v13 - v7 * v12) / v14;
    if (v15 >= 0.0 && v15 <= 1.0)
    {
      float v17 = (v8 * v13 - v9 * v12) / v14;
      if (v17 >= 0.0 && v17 <= 1.0)
      {
        if (a6)
        {
          double v19 = v17;
          a6->CGFloat x = a2.x + v19 * v6;
          a6->y = a2.y + v19 * v7;
        }
        return 1;
      }
    }
  }
  return result;
}

BOOL RectangleFinder::pointInPolygon(RectangleFinder *this, CGPoint *a2, CGPoint a3)
{
  uint64_t v3 = 0;
  BOOL result = 0;
  double y = a2[3].y;
  p_double y = &a2->y;
  uint64_t v7 = 3;
  do
  {
    uint64_t v8 = v7;
    uint64_t v7 = v3;
    double v9 = y;
    double y = *p_y;
    BOOL v10 = *p_y <= a3.y && a3.y < v9;
    if (v10 || (a3.y < y ? (BOOL v11 = v9 > a3.y) : (BOOL v11 = 1), !v11))
    {
      if (a3.x < *(p_y - 1) + (a3.y - y) * (a2[v8].x - *(p_y - 1)) / (v9 - y)) {
        BOOL result = !result;
      }
    }
    ++v3;
    p_y += 2;
  }
  while (v7 != 3);
  return result;
}

float RectangleFinder::percentageOfPtsOnEdge(RectangleFinder *this, vImage_Buffer *a2, CGPoint *a3)
{
  uint64_t v3 = 0;
  int v4 = 0;
  int v5 = 0;
  do
  {
    float64x2_t v6 = (float64x2_t)a3[v3++];
    float32x2_t v7 = vcvt_f32_f64(v6);
    float32x2_t v8 = vcvt_f32_f64((float64x2_t)a3[v3 & 3]);
    *(float32x2_t *)&v6.f64[0] = vabd_f32(v8, v7);
    unsigned __int8 v9 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v6.f64[0], 1), *(float32x2_t *)&v6.f64[0]).u8[0];
    float v10 = v8.f32[1];
    float v11 = v7.f32[1];
    if (v9)
    {
      float v12 = (float)(int)v7.f32[0];
      float v13 = (float)(int)v8.f32[0];
    }
    else
    {
      float v12 = v7.f32[1];
      float v13 = v8.f32[1];
      float v11 = v7.f32[0];
      float v10 = v8.f32[0];
    }
    if (v11 > v10)
    {
      int v14 = (int)v11;
      float v11 = v10;
      float v10 = (float)v14;
      int v15 = (int)v12;
      float v12 = v13;
      float v13 = (float)v15;
    }
    if (v12 < v13) {
      int v16 = 1;
    }
    else {
      int v16 = -1;
    }
    if (v10 > (float)(int)v11)
    {
      float v17 = v10 - v11;
      int v18 = (int)v11;
      int v19 = (int)v12;
      float v20 = 0.0;
      float v21 = vabds_f32(v13, v12) / v17;
      do
      {
        unsigned int v22 = v18 - 3;
        int v23 = v18 + 3;
        int v24 = v19 + 3;
        char v25 = 0;
        if (v9)
        {
          do
          {
            vImagePixelCount v26 = v22;
            LODWORD(v27) = v19 - 4;
            do
            {
              uint64_t v27 = (v27 + 1);
              if ((int)v26 >= 1
                && (int)v27 >= 1
                && a2->height > v26
                && a2->width > v27
                && !*((unsigned char *)a2->data + v27 + a2->rowBytes * v26))
              {
                char v25 = 1;
              }
            }
            while ((int)v27 < v24);
            unsigned int v22 = v26 + 1;
          }
          while ((int)v26 < v23);
          v25 &= 1u;
        }
        else
        {
          do
          {
            vImagePixelCount v28 = v22;
            LODWORD(v29) = v19 - 4;
            do
            {
              uint64_t v29 = (v29 + 1);
              if ((int)v28 >= 1 && (int)v29 >= 1 && a2->width > v28 && a2->height > v29) {
                v25 |= *((unsigned char *)a2->data + v28 + a2->rowBytes * v29) == 0;
              }
            }
            while ((int)v29 < v24);
            unsigned int v22 = v28 + 1;
          }
          while ((int)v28 < v23);
        }
        ++v4;
        v5 += v25 & 1;
        float v20 = v21 + v20;
        if (v20 < 0.5)
        {
          int v30 = 0;
        }
        else
        {
          float v20 = v20 + -1.0;
          int v30 = v16;
        }
        v19 += v30;
        ++v18;
      }
      while (v10 > (float)v18);
    }
  }
  while (v3 != 4);
  return (float)((float)v5 * 100.0) / (float)v4;
}

uint64_t RectangleFinder::peakHistogramPtsInPolygon(RectangleFinder *this, vImage_Buffer *a2, CGPoint *a3)
{
  v33[258] = *MEMORY[0x1E4F143B8];
  data = (char *)a2->data;
  bzero(v33, 0x800uLL);
  vImagePixelCount height = a2->height;
  if (height)
  {
    uint64_t v7 = 0;
    CGFloat y = a3[3].y;
    do
    {
      uint64_t v9 = 0;
      int v10 = 0;
      double v11 = (float)(int)v7;
      p_CGFloat y = &a3->y;
      double v13 = y;
      uint64_t v14 = 3;
      do
      {
        uint64_t v15 = v9;
        double v16 = *p_y;
        BOOL v17 = *p_y >= v11 || v13 < v11;
        if (!v17 || (v16 >= v11 ? (BOOL v18 = v13 < v11) : (BOOL v18 = 0), v18)) {
          *((_DWORD *)&v33[256] + v10++) = (int)(*(p_y - 1)
        }
                                               + ((double)(int)v7 - v16) / (v13 - v16) * (a3[v14].x - *(p_y - 1)));
        ++v9;
        p_y += 2;
        double v13 = v16;
        uint64_t v14 = v15;
      }
      while (v15 != 3);
      if (v10 > 1)
      {
        int v19 = 0;
        do
        {
          uint64_t v20 = v19;
          int v21 = *((_DWORD *)&v33[256] + v19);
          uint64_t v22 = v20 + 1;
          int v23 = *((_DWORD *)&v33[256] + v20 + 1);
          if (v21 > v23)
          {
            *((_DWORD *)&v33[256] + v20) = v23;
            *((_DWORD *)&v33[256] + v22) = v21;
            LODWORD(v22) = v20 - 1;
            if (!v20) {
              LODWORD(v22) = 0;
            }
          }
          int v19 = v22;
        }
        while ((int)v22 < v10 - 1);
      }
      if (v10 >= 1)
      {
        uint64_t v24 = 0;
        vImagePixelCount width = a2->width;
        do
        {
          vImagePixelCount v26 = SLODWORD(v33[v24 + 256]);
          if (width <= v26) {
            break;
          }
          vImagePixelCount v27 = *((unsigned int *)&v33[256] + ((v24 * 2) | 1));
          if ((int)v27 >= 1)
          {
            if ((v26 & 0x80000000) != 0)
            {
              LODWORD(v26) = 0;
              LODWORD(v33[v24 + 256]) = 0;
            }
            if (width >= v27) {
              vImagePixelCount v27 = v27;
            }
            else {
              vImagePixelCount v27 = width;
            }
            *((_DWORD *)&v33[256] + ((v24 * 2) | 1)) = v27;
            if ((int)v26 < (int)v27)
            {
              vImagePixelCount v28 = v27 - v26;
              uint64_t v29 = &data[width * v7 + v26];
              do
              {
                int v30 = *v29++;
                ++v33[v30];
                --v28;
              }
              while (v28);
            }
          }
          ++v24;
        }
        while (v10 > (int)(v24 * 2));
      }
      ++v7;
    }
    while (v7 != height);
  }
  uint64_t v31 = 0;
  LODWORD(result) = 0;
  do
  {
    if (v33[v31] <= v33[(int)result]) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v31;
    }
    ++v31;
  }
  while (v31 != 255);
  return result;
}

void RectangleFinder::bestContours(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6 != *a3)
  {
    uint64_t v9 = 0;
    unint64_t v76 = 0;
    unint64_t v10 = 0;
    float v11 = 1.0;
    float v12 = 20.0;
    double v13 = 0.005;
    *(float *)&int v14 = 63.333;
    do
    {
      uint64_t v15 = *(int **)(v7 + v9);
      if (*(void *)(v7 + v9 + 8) - (void)v15 == 40)
      {
        int v16 = *v15;
        if (*v15 == v15[8])
        {
          int v17 = v15[1];
          if (v17 == v15[9])
          {
            int v18 = v15[2];
            int v19 = v15[3];
            int v20 = (int)sqrt((double)((v16 - v18) * (v16 - v18) + (v17 - v19) * (v17 - v19)));
            int v21 = v15[6];
            int v22 = v15[7];
            int v23 = (int)sqrt((double)((v16 - v21) * (v16 - v21) + (v17 - v22) * (v17 - v22)));
            int v24 = v15[4];
            int v25 = v15[5];
            int v26 = (int)sqrt((double)((v18 - v24) * (v18 - v24) + (v19 - v25) * (v19 - v25)));
            int v27 = (int)sqrt((double)((v24 - v21) * (v24 - v21) + (v25 - v22) * (v25 - v22)));
            BOOL v28 = v20 <= v26 || v27 <= v23;
            BOOL v29 = !v28;
            BOOL v30 = !v29 || v20 <= v23;
            BOOL v31 = v30 || v27 <= v26;
            if (!v31
              || (v26 > v20 ? (BOOL v32 = v23 <= v27) : (BOOL v32 = 1),
                  !v32 ? (BOOL v33 = v23 <= v20) : (BOOL v33 = 1),
                  !v33 ? (BOOL v34 = v26 <= v27) : (BOOL v34 = 1),
                  !v34))
            {
              if (v26 >= v23) {
                int v35 = v23;
              }
              else {
                int v35 = v26;
              }
              float v36 = (float)v35;
              if (v26 <= v23) {
                int v37 = v23;
              }
              else {
                int v37 = v26;
              }
              float v38 = v36 / (float)v37;
              if (v20 >= v27) {
                int v39 = v27;
              }
              else {
                int v39 = v20;
              }
              if (v20 <= v27) {
                int v40 = v27;
              }
              else {
                int v40 = v20;
              }
              float v41 = (float)v39 / (float)v40;
              if (v26 >= v23) {
                int v42 = v23;
              }
              else {
                int v42 = v26;
              }
              if (v26 <= v23) {
                int v43 = v23;
              }
              else {
                int v43 = v26;
              }
              BOOL v44 = !v29;
              if (v29) {
                int v45 = v43;
              }
              else {
                int v45 = v40;
              }
              if (!v44)
              {
                int v39 = v42;
                float v38 = v41;
              }
              if ((float)((float)(v11 - v38) * 100.0) < v12
                && (float)((float)(v11 - (float)((float)v39 / (float)v45)) * 100.0) < 50.0
                && v20 >= 31
                && v26 >= 31
                && v27 >= 31
                && v23 >= 31)
              {
                if (v20 > v27) {
                  int v27 = v20;
                }
                if (v26 <= v23) {
                  int v26 = v23;
                }
                if (v27 * v26 > (int)((double)*(unint64_t *)(a2 + 16)
                                     * v13
                                     * (double)*(unint64_t *)(a2 + 8)))
                {
                  float v74 = *(float *)&v14;
                  double v75 = v13;
                  double v51 = (double)v16;
                  double v52 = (double)v17;
                  double v53 = (double)v18;
                  double v54 = (double)v19;
                  double v55 = (double)v24;
                  double v56 = (double)v25;
                  double v57 = (double)v21;
                  double v58 = (double)v22;
                  v90.CGFloat x = (double)v16;
                  v90.CGFloat y = (double)v17;
                  v96.CGFloat x = (double)v18;
                  v96.CGFloat y = (double)v19;
                  v102.CGFloat x = (double)v21;
                  v102.CGFloat y = (double)v22;
                  float v73 = RectangleFinder::angleBetweenLines((RectangleFinder *)0x42480000, v90, v96, v102);
                  v91.CGFloat x = v53;
                  v91.CGFloat y = v54;
                  v97.CGFloat x = v51;
                  v97.CGFloat y = v52;
                  v103.CGFloat x = v55;
                  v103.CGFloat y = v56;
                  float v72 = RectangleFinder::angleBetweenLines(v59, v91, v97, v103);
                  v92.CGFloat x = v55;
                  v92.CGFloat y = v56;
                  v98.CGFloat x = v53;
                  v98.CGFloat y = v54;
                  v104.CGFloat x = v57;
                  v104.CGFloat y = v58;
                  float v71 = RectangleFinder::angleBetweenLines(v60, v92, v98, v104);
                  v93.CGFloat x = v57;
                  v93.CGFloat y = v58;
                  v99.CGFloat x = v51;
                  v99.CGFloat y = v52;
                  v105.CGFloat x = v55;
                  v105.CGFloat y = v56;
                  float v70 = RectangleFinder::angleBetweenLines(v61, v93, v99, v105);
                  float v69 = *(float *)(a1 + 88);
                  v94.CGFloat x = v51;
                  v94.CGFloat y = v52;
                  v100.CGFloat x = v53;
                  v100.CGFloat y = v54;
                  v106.CGFloat x = v55;
                  v106.CGFloat y = v56;
                  v108.CGFloat x = v57;
                  v108.CGFloat y = v58;
                  BOOL v63 = (RectangleFinder *)RectangleFinder::linesIntersect(v62, v94, v100, v106, v108, 0);
                  if (v63)
                  {
                    BOOL v64 = 1;
                  }
                  else
                  {
                    v95.CGFloat x = v53;
                    v95.CGFloat y = v54;
                    v101.CGFloat x = v55;
                    v101.CGFloat y = v56;
                    v107.CGFloat x = v51;
                    v107.CGFloat y = v52;
                    v109.CGFloat x = v57;
                    v109.CGFloat y = v58;
                    BOOL v63 = (RectangleFinder *)RectangleFinder::linesIntersect(v63, v95, v101, v107, v109, 0);
                    BOOL v64 = v63 != 0;
                  }
                  v82.CGFloat x = v51;
                  v82.CGFloat y = v52;
                  double v83 = v53;
                  double v84 = v54;
                  double v85 = v55;
                  double v86 = v56;
                  double v87 = v57;
                  double v88 = v58;
                  if (fmaxf(vabds_f32(v73, v72), vabds_f32(v71, v70)) >= 30.0)
                  {
                    float v11 = 1.0;
                    float v12 = 20.0;
                    double v13 = v75;
                    *(float *)&int v14 = v74;
                  }
                  else
                  {
                    float v11 = 1.0;
                    float v12 = 20.0;
                    double v13 = v75;
                    *(float *)&int v14 = v74;
                    if (vabds_f32(fmaxf((float)v23 / (float)v20, (float)v20 / (float)v23), v69) < 1.0 && !v64)
                    {
                      long long v65 = a4[1];
                      *(_OWORD *)&v81.data = *a4;
                      *(_OWORD *)&v81.vImagePixelCount width = v65;
                      if (RectangleFinder::percentageOfPtsOnEdge(v63, &v81, &v82) > v74)
                      {
                        long long v67 = *(_OWORD *)(a2 + 16);
                        *(_OWORD *)&v80.data = *(_OWORD *)a2;
                        *(_OWORD *)&v80.vImagePixelCount width = v67;
                        if (RectangleFinder::peakHistogramPtsInPolygon(v66, &v80, &v82) - 70 <= 0xA2)
                        {
                          if (v76 >= a5[2])
                          {
                            uint64_t v68 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(a5, v7 + v9);
                          }
                          else
                          {
                            std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)a5, v7 + v9);
                            uint64_t v68 = v76 + 24;
                          }
                          unint64_t v76 = v68;
                          a5[1] = v68;
                          uint64_t v7 = *a3;
                          uint64_t v6 = a3[1];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v10;
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > v10);
  }
}

void sub_1DD76E480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t RectangleFinder::bestContour(RectangleFinder *a1, uint64_t a2, void *a3, _OWORD *a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3[1] - *a3;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0;
  unint64_t v7 = v4 / 24;
  if (v7 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = (void *)(*a3 + 8);
  float v10 = 15.0;
  uint64_t v11 = 0xFFFFFFFFLL;
  float v12 = 66.667;
  float v13 = 1.0;
  float v14 = 20.0;
  double v15 = 0.005;
  *(float *)&int v16 = 0.95;
  do
  {
    int v17 = (int *)*(v9 - 1);
    if (*v9 - (void)v17 == 40)
    {
      int v18 = *v17;
      if (*v17 == v17[8])
      {
        int v19 = v17[1];
        if (v19 == v17[9])
        {
          int v20 = v17[2];
          int v21 = v17[3];
          int v22 = (int)sqrt((double)((v18 - v20) * (v18 - v20) + (v19 - v21) * (v19 - v21)));
          int v23 = v17[6];
          int v24 = v17[7];
          int v25 = (int)sqrt((double)((v18 - v23) * (v18 - v23) + (v19 - v24) * (v19 - v24)));
          int v26 = v17[4];
          int v27 = v17[5];
          int v28 = (int)sqrt((double)((v20 - v26) * (v20 - v26) + (v21 - v27) * (v21 - v27)));
          int v29 = (int)sqrt((double)((v26 - v23) * (v26 - v23) + (v27 - v24) * (v27 - v24)));
          BOOL v30 = v22 <= v28 || v29 <= v25;
          BOOL v31 = !v30;
          BOOL v32 = !v31 || v22 <= v25;
          BOOL v33 = v32 || v29 <= v28;
          if (!v33
            || (v28 > v22 ? (BOOL v34 = v25 <= v29) : (BOOL v34 = 1),
                !v34 ? (BOOL v35 = v25 <= v22) : (BOOL v35 = 1),
                !v35 ? (BOOL v36 = v28 <= v29) : (BOOL v36 = 1),
                !v36))
          {
            if (v28 >= v25) {
              int v37 = v25;
            }
            else {
              int v37 = v28;
            }
            float v38 = (float)v37;
            if (v28 <= v25) {
              int v39 = v25;
            }
            else {
              int v39 = v28;
            }
            float v40 = v38 / (float)v39;
            if (v22 >= v29) {
              int v41 = v29;
            }
            else {
              int v41 = v22;
            }
            if (v22 <= v29) {
              int v42 = v29;
            }
            else {
              int v42 = v22;
            }
            float v43 = (float)v41 / (float)v42;
            if (v28 >= v25) {
              int v44 = v25;
            }
            else {
              int v44 = v28;
            }
            if (v28 <= v25) {
              int v45 = v25;
            }
            else {
              int v45 = v28;
            }
            if (v31)
            {
              int v42 = v45;
              int v41 = v44;
              float v40 = v43;
            }
            if ((float)((float)(v13 - v40) * 100.0) < v14
              && (float)((float)(v13 - (float)((float)v41 / (float)v42)) * 100.0) < 50.0
              && v22 >= 31
              && v28 >= 31
              && v29 >= 31
              && v25 >= 31)
            {
              if (v22 > v29) {
                int v29 = v22;
              }
              if (v28 <= v25) {
                int v28 = v25;
              }
              if (v29 * v28 > (int)((double)*(unint64_t *)(a2 + 16) * v15 * (double)*(unint64_t *)(a2 + 8)))
              {
                float v78 = *(float *)&v16;
                double v79 = v15;
                float v80 = v12;
                float v81 = v10;
                double v51 = (float *)a1;
                CGPoint v82 = a4;
                double v52 = (double)v18;
                double v53 = (double)v19;
                double v54 = (double)v20;
                double v55 = (double)v21;
                double v56 = (double)v26;
                double v57 = (double)v27;
                double v58 = (double)v23;
                double v59 = (double)v24;
                v93.CGFloat x = (double)v18;
                v93.CGFloat y = (double)v19;
                v99.CGFloat x = (double)v20;
                v99.CGFloat y = (double)v21;
                v105.CGFloat x = (double)v23;
                v105.CGFloat y = (double)v24;
                float v77 = RectangleFinder::angleBetweenLines(a1, v93, v99, v105);
                v94.CGFloat x = v54;
                v94.CGFloat y = v55;
                v100.CGFloat x = v52;
                v100.CGFloat y = v53;
                v106.CGFloat x = v56;
                v106.CGFloat y = v57;
                float v76 = RectangleFinder::angleBetweenLines(v60, v94, v100, v106);
                v95.CGFloat x = v56;
                v95.CGFloat y = v57;
                v101.CGFloat x = v54;
                v101.CGFloat y = v55;
                v107.CGFloat x = v58;
                v107.CGFloat y = v59;
                float v75 = RectangleFinder::angleBetweenLines(v61, v95, v101, v107);
                v96.CGFloat x = v58;
                v96.CGFloat y = v59;
                v102.CGFloat x = v52;
                v102.CGFloat y = v53;
                v108.CGFloat x = v56;
                v108.CGFloat y = v57;
                float v74 = RectangleFinder::angleBetweenLines(v62, v96, v102, v108);
                float v73 = v51[22];
                v97.CGFloat x = v52;
                v97.CGFloat y = v53;
                v103.CGFloat x = v54;
                v103.CGFloat y = v55;
                v109.CGFloat x = v56;
                v109.CGFloat y = v57;
                v111.CGFloat x = v58;
                v111.CGFloat y = v59;
                BOOL v64 = (RectangleFinder *)RectangleFinder::linesIntersect(v63, v97, v103, v109, v111, 0);
                if (v64)
                {
                  BOOL v65 = 1;
                }
                else
                {
                  v98.CGFloat x = v54;
                  v98.CGFloat y = v55;
                  v104.CGFloat x = v56;
                  v104.CGFloat y = v57;
                  v110.CGFloat x = v52;
                  v110.CGFloat y = v53;
                  v112.CGFloat x = v58;
                  v112.CGFloat y = v59;
                  BOOL v64 = (RectangleFinder *)RectangleFinder::linesIntersect(v64, v98, v104, v110, v112, 0);
                  BOOL v65 = v64 != 0;
                }
                a4 = v82;
                float v66 = fmaxf(vabds_f32(v77, v76), vabds_f32(v75, v74));
                v85.CGFloat x = v52;
                v85.CGFloat y = v53;
                double v86 = v54;
                double v87 = v55;
                double v88 = v56;
                double v89 = v57;
                double v90 = v58;
                double v91 = v59;
                float v10 = v81;
                if (v66 >= (float)(v10 + v10))
                {
                  float v12 = v80;
                  float v13 = 1.0;
                  float v14 = 20.0;
                  double v15 = v79;
                  *(float *)&int v16 = v78;
                }
                else
                {
                  float v13 = 1.0;
                  float v12 = v80;
                  float v14 = 20.0;
                  double v15 = v79;
                  *(float *)&int v16 = v78;
                  if (vabds_f32(fmaxf((float)v25 / (float)v22, (float)v22 / (float)v25), v73) < 1.0 && !v65)
                  {
                    float v67 = v66;
                    long long v68 = v82[1];
                    *(_OWORD *)&v84.data = *v82;
                    *(_OWORD *)&v84.vImagePixelCount width = v68;
                    float v70 = RectangleFinder::percentageOfPtsOnEdge(v64, &v84, &v85);
                    if (v70 > (float)(v80 * v78))
                    {
                      long long v71 = *(_OWORD *)(a2 + 16);
                      *(_OWORD *)&v83.data = *(_OWORD *)a2;
                      *(_OWORD *)&v83.vImagePixelCount width = v71;
                      if (RectangleFinder::peakHistogramPtsInPolygon(v69, &v83, &v85) - 70 >= 0xA3)
                      {
                        uint64_t v11 = v11;
                      }
                      else
                      {
                        float v12 = v70;
                        float v10 = v67;
                        uint64_t v11 = v6;
                      }
                    }
                    a4 = v82;
                  }
                }
                a1 = (RectangleFinder *)v51;
              }
            }
          }
        }
      }
    }
    ++v6;
    v9 += 3;
  }
  while (v8 != v6);
  return v11;
}

void RectangleFinder::findCodeRectPoints(RectangleFinder *this@<X0>, vImage_Buffer *a2@<X1>, int a3@<W2>, double **a4@<X8>)
{
  uint64_t v8 = malloc_type_calloc(a2->rowBytes * a2->height, 1uLL, 0x100004077774924uLL);
  v113.data = v8;
  *(_OWORD *)&v113.vImagePixelCount height = *(_OWORD *)&a2->height;
  v113.size_t rowBytes = a2->rowBytes;
  long long v9 = *(_OWORD *)&a2->width;
  if (a3 == 95192327)
  {
    v112[0] = *(_OWORD *)&a2->data;
    v112[1] = v9;
    float v10 = v112;
    int v11 = 7;
    int v12 = 3;
  }
  else
  {
    v111[0] = *(_OWORD *)&a2->data;
    v111[1] = v9;
    float v10 = v111;
    int v11 = 13;
    int v12 = 7;
  }
  adaptiveThresholdIntegralImage((uint64_t)v10, (uint64_t *)&v113, v11, v12);
  if ((int)TRShouldLogImages() >= 4)
  {
    vImage_Buffer v98 = v113;
    writeBufferWithMetadata((uint64_t)&v98, @"/tmp/CoreRecognitionImages/Debug/threshold200.png", 0);
  }
  RectangleFinder::TraceAllContours(&v113, 255, &v109);
  long long v13 = *(_OWORD *)&a2->width;
  v107[0] = *(_OWORD *)&a2->data;
  v107[1] = v13;
  vImage_Buffer v106 = v113;
  RectangleFinder::bestContours((uint64_t)this, (uint64_t)v107, &v109, &v106, v108);
  long long v14 = *(_OWORD *)&a2->width;
  v105[0] = *(_OWORD *)&a2->data;
  v105[1] = v14;
  vImage_Buffer v104 = v113;
  *((_DWORD *)this + 28) = RectangleFinder::bestContour(this, (uint64_t)v105, &v109, &v104);
  if ((int)TRShouldLogImages() >= 4)
  {
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    std::vector<std::vector<PixelPosition>>::__init_with_size[abi:ne180100]<std::vector<PixelPosition>*,std::vector<PixelPosition>*>(&v101, v109, v110, 0xAAAAAAAAAAAAAAABLL * ((v110 - v109) >> 3));
    data = a2->data;
    vImagePixelCount height = a2->height;
    vImagePixelCount width = a2->width;
    size_t rowBytes = a2->rowBytes;
    DeviceGradouble y = CGColorSpaceCreateDeviceGray();
    int v20 = CGBitmapContextCreate(data, width, height, 8uLL, rowBytes, DeviceGray, 0);
    CGColorSpaceRelease(DeviceGray);
    Image = CGBitmapContextCreateImage(v20);
    CGContextRelease(v20);
    unint64_t v22 = CGImageGetWidth(Image);
    unint64_t v23 = CGImageGetHeight(Image);
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    int v25 = malloc_type_malloc(v23 * 4 * v22, 0x29D91509uLL);
    int v26 = CGBitmapContextCreate(v25, v22, v23, 8uLL, 4 * v22, DeviceRGB, 5u);
    CGColorSpaceRelease(DeviceRGB);
    v120.size.vImagePixelCount width = (double)v22;
    v120.origin.double x = 0.0;
    v120.origin.double y = 0.0;
    v120.size.vImagePixelCount height = (double)v23;
    CGContextDrawImage(v26, v120, Image);
    CGImageRelease(Image);
    CGContextTranslateCTM(v26, 0.0, (double)v23);
    CGContextScaleCTM(v26, 1.0, -1.0);
    uint64_t v27 = v101;
    if (v102 - v101 >= 1)
    {
      uint64_t v28 = 0;
      if ((uint64_t)((v102 - v101) / 0x18uLL) <= 1) {
        unint64_t v29 = 1;
      }
      else {
        unint64_t v29 = (v102 - v101) / 0x18uLL;
      }
      do
      {
        if (*(void *)(v27 + 24 * v28 + 8) - *(void *)(v27 + 24 * v28) >= 9uLL)
        {
          int v30 = rand();
          int v31 = rand();
          int v32 = rand();
          float v33 = (double)(10 * v30) / 10.0;
          float v34 = (double)(10 * v31) / 10.0;
          float v35 = (double)(10 * v32) / 10.0;
          CGFloat v36 = v33;
          CGFloat v37 = v34;
          CGFloat v38 = v35;
          CGContextSetRGBStrokeColor(v26, v33, v34, v35, 0.0);
          CGContextSetRGBFillColor(v26, v36, v37, v38, 0.0);
          CGContextSetLineWidth(v26, 1.0);
          CGContextBeginPath(v26);
          CGContextMoveToPoint(v26, (double)**(int **)(v101 + 24 * v28), (double)*(int *)(*(void *)(v101 + 24 * v28) + 4));
          CGContextSetRGBStrokeColor(v26, v36, v37, v38, 1.0);
          CGContextSetRGBFillColor(v26, v36, v37, v38, 1.0);
          CGContextSetLineWidth(v26, 1.0);
          uint64_t v39 = *(void *)(v101 + 24 * v28);
          if ((unint64_t)(*(void *)(v101 + 24 * v28 + 8) - v39) >= 9)
          {
            uint64_t v40 = 0;
            unint64_t v41 = 1;
            do
            {
              CGContextAddLineToPoint(v26, (double)*(int *)(v39 + v40 + 8), (double)*(int *)(v39 + v40 + 12));
              ++v41;
              uint64_t v39 = *(void *)(v101 + 24 * v28);
              v40 += 8;
            }
            while (v41 < (*(void *)(v101 + 24 * v28 + 8) - v39) >> 3);
          }
          CGContextStrokePath(v26);
          uint64_t v27 = v101;
          uint64_t v42 = *(void *)(v101 + 24 * v28);
          if (*(void *)(v101 + 24 * v28 + 8) != v42)
          {
            uint64_t v43 = 0;
            unint64_t v44 = 0;
            do
            {
              v121.origin.double x = (double)*(int *)(v42 + v43);
              v121.origin.double y = (double)*(int *)(v42 + v43 + 4);
              v121.size.vImagePixelCount width = 3.0;
              v121.size.vImagePixelCount height = 3.0;
              CGContextFillRect(v26, v121);
              ++v44;
              uint64_t v27 = v101;
              uint64_t v42 = *(void *)(v101 + 24 * v28);
              v43 += 8;
            }
            while (v44 < (*(void *)(v101 + 24 * v28 + 8) - v42) >> 3);
          }
        }
        ++v28;
      }
      while (v28 != v29);
    }
    int v45 = CGBitmapContextCreateImage(v26);
    CGContextRelease(v26);
    free(v25);
    v98.data = &v101;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
    writeCGImageWithMetadata(v45, @"/tmp/CoreRecognitionImages/Debug/contours.png", 0);
    CGImageRelease(v45);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unsigned int v46 = *((_DWORD *)this + 28);
  uint64_t v47 = v109;
  if ((v46 & 0x80000000) != 0)
  {
    uint64_t v49 = 0;
    double v53 = 0;
  }
  else
  {
    unint64_t v48 = *(const float **)(v109 + 24 * v46);
    float32x4x2_t v114 = vld2q_f32(v48);
    float32x4x2_t v96 = v114;
    uint64_t v49 = (double *)operator new(0x40uLL);
    v50.i64[0] = v96.val[0].i32[2];
    v50.i64[1] = v96.val[0].i32[3];
    int64x2_t v51 = v50;
    v50.i64[0] = v96.val[0].i32[0];
    v50.i64[1] = v96.val[0].i32[1];
    v116.val[0] = vcvtq_f64_s64(v50);
    v50.i64[0] = v96.val[1].i32[0];
    v50.i64[1] = v96.val[1].i32[1];
    v116.val[1] = vcvtq_f64_s64(v50);
    v118.val[0] = vcvtq_f64_s64(v51);
    double v52 = v49;
    vst2q_f64(v52, v116);
    v52 += 4;
    v50.i64[0] = v96.val[1].i32[2];
    v50.i64[1] = v96.val[1].i32[3];
    v118.val[1] = vcvtq_f64_s64(v50);
    vst2q_f64(v52, v118);
    double v53 = (char *)(v49 + 8);
    a4[1] = v49 + 8;
    a4[2] = v49 + 8;
    *a4 = v49;
  }
  if (v110 != v47)
  {
    unint64_t v54 = 0;
    double v55 = (double *)v53;
    do
    {
      uint64_t v56 = 0;
      double v57 = *(const float **)(v47 + 24 * v54);
      float32x4x2_t v115 = vld2q_f32(v57);
      v58.i64[0] = v115.val[0].i32[2];
      v58.i64[1] = v115.val[0].i32[3];
      v117.val[0] = vcvtq_f64_s64(v58);
      v58.i64[0] = v115.val[1].i32[2];
      v58.i64[1] = v115.val[1].i32[3];
      int64x2_t v59 = v58;
      v58.i64[0] = v115.val[0].i32[0];
      v58.i64[1] = v115.val[0].i32[1];
      int64x2_t v60 = v58;
      v58.i64[0] = v115.val[1].i32[0];
      v58.i64[1] = v115.val[1].i32[1];
      v119.val[0] = vcvtq_f64_s64(v60);
      v119.val[1] = vcvtq_f64_s64(v58);
      uint64_t v61 = (double *)&v98;
      vst2q_f64(v61, v119);
      v61 += 4;
      v117.val[1] = vcvtq_f64_s64(v59);
      vst2q_f64(v61, v117);
      unint64_t v62 = (unsigned __int8 *)a2->data;
      do
      {
        BOOL v63 = (double *)&v98 + 2 * v56;
        double v65 = *v63;
        double v64 = v63[1];
        int v66 = (int)(*v63 + -2.0);
        double v67 = *v63 + 2.0;
        double v68 = (double)v66;
        if (v67 >= (double)v66)
        {
          int v69 = (int)(v64 + -2.0);
          double v70 = v64 + 2.0;
          do
          {
            if (v70 >= (double)v69)
            {
              double v71 = (double)v69;
              int v72 = v69;
              do
              {
                if (v66 >= 1
                  && v72 >= 1
                  && a2->width > v66
                  && a2->height > v72
                  && v62[(int)(v66 + v72 * a2->rowBytes)] < v62[(int)(v65 + (double)a2->rowBytes * v64)])
                {
                  double v65 = v68;
                  double v64 = v71;
                }
                double v71 = (double)++v72;
              }
              while (v70 >= (double)v72);
            }
            double v68 = (double)++v66;
          }
          while (v67 >= (double)v66);
        }
        *BOOL v63 = v65;
        v63[1] = v64;
        ++v56;
      }
      while (v56 != 4);
      double v73 = (double)a2->width;
      double v74 = (double)a2->height;
      long long v75 = *(_OWORD *)&v98.data;
      v122.origin.double x = 0.0;
      v122.origin.double y = 0.0;
      v122.size.vImagePixelCount width = v73;
      v122.size.vImagePixelCount height = v74;
      if (CGRectContainsPoint(v122, *(CGPoint *)&v98.data))
      {
        long long v76 = *(_OWORD *)&v98.width;
        v123.origin.double x = 0.0;
        v123.origin.double y = 0.0;
        v123.size.vImagePixelCount width = v73;
        v123.size.vImagePixelCount height = v74;
        if (CGRectContainsPoint(v123, *(CGPoint *)&v98.width))
        {
          v124.origin.double x = 0.0;
          v124.origin.double y = 0.0;
          v124.size.vImagePixelCount width = v73;
          v124.size.vImagePixelCount height = v74;
          double y = v99.y;
          double x = v99.x;
          if (CGRectContainsPoint(v124, v99))
          {
            v125.origin.double x = 0.0;
            v125.origin.double y = 0.0;
            v125.size.vImagePixelCount width = v73;
            double v77 = v100.x;
            v125.size.vImagePixelCount height = v74;
            double v78 = v100.y;
            if (CGRectContainsPoint(v125, v100))
            {
              uint64_t v79 = (char *)v55 - (char *)v49;
              if (v55 == v49
                || *(v55 - 8) != *(double *)&v75
                || *(v55 - 7) != *((double *)&v75 + 1)
                || *(v55 - 6) != *(double *)&v76
                || *(v55 - 5) != *((double *)&v76 + 1)
                || *(v55 - 4) != x
                || *(v55 - 3) != y
                || *(v55 - 2) != v77
                || *(v55 - 1) != v78)
              {
                if (v55 >= (double *)v53)
                {
                  uint64_t v83 = v79 >> 6;
                  unint64_t v84 = (v79 >> 6) + 1;
                  if (v84 >> 58) {
                    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                  }
                  if ((v53 - (char *)v49) >> 5 > v84) {
                    unint64_t v84 = (v53 - (char *)v49) >> 5;
                  }
                  if ((unint64_t)(v53 - (char *)v49) >= 0x7FFFFFFFFFFFFFC0) {
                    unint64_t v85 = 0x3FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v85 = v84;
                  }
                  if (v85)
                  {
                    if (v85 >> 58) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    double v86 = (char *)operator new(v85 << 6);
                  }
                  else
                  {
                    double v86 = 0;
                  }
                  double v87 = &v86[64 * v83];
                  long long v88 = *(_OWORD *)&v98.width;
                  *(_OWORD *)double v87 = *(_OWORD *)&v98.data;
                  *((_OWORD *)v87 + 1) = v88;
                  CGPoint v89 = v100;
                  *((CGPoint *)v87 + 2) = v99;
                  *((CGPoint *)v87 + 3) = v89;
                  if (v55 == v49)
                  {
                    CGPoint v94 = &v86[64 * v83];
                  }
                  else
                  {
                    double v90 = &v86[64 * v83];
                    do
                    {
                      long long v91 = *((_OWORD *)v55 - 4);
                      long long v92 = *((_OWORD *)v55 - 3);
                      long long v93 = *((_OWORD *)v55 - 1);
                      CGPoint v94 = v90 - 64;
                      *((_OWORD *)v90 - 2) = *((_OWORD *)v55 - 2);
                      *((_OWORD *)v90 - 1) = v93;
                      *((_OWORD *)v90 - 4) = v91;
                      *((_OWORD *)v90 - 3) = v92;
                      v55 -= 8;
                      v90 -= 64;
                    }
                    while (v55 != v49);
                  }
                  double v53 = &v86[64 * v85];
                  double v55 = (double *)(v87 + 64);
                  *a4 = (double *)v94;
                  a4[1] = (double *)(v87 + 64);
                  a4[2] = (double *)v53;
                  if (v49) {
                    operator delete(v49);
                  }
                  uint64_t v49 = (double *)v94;
                }
                else
                {
                  long long v80 = *(_OWORD *)&v98.data;
                  long long v81 = *(_OWORD *)&v98.width;
                  CGPoint v82 = v100;
                  *((CGPoint *)v55 + 2) = v99;
                  *((CGPoint *)v55 + 3) = v82;
                  *(_OWORD *)double v55 = v80;
                  *((_OWORD *)v55 + 1) = v81;
                  v55 += 8;
                }
                a4[1] = v55;
              }
            }
          }
        }
      }
      ++v54;
      uint64_t v47 = v109;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v110 - v109) >> 3) > v54);
    uint64_t v8 = v113.data;
  }
  free(v8);
  v98.data = v108;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
  v98.data = &v109;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
}

void sub_1DD76F260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  unint64_t v48 = *(void **)v46;
  if (*(void *)v46)
  {
    *(void *)(v46 + 8) = v48;
    operator delete(v48);
  }
  a15 = (void **)&a43;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a15);
  a15 = (void **)&a46;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void PolygonApproximateContour(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = *(int **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = v5 - *(void *)a1;
  unint64_t v8 = v7 >> 3;
  if ((unint64_t)v7 >= 0x18)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    float v12 = (float)*v6;
    long long v13 = &v6[2 * v8];
    int v14 = *(v13 - 2);
    int v15 = *(v13 - 1);
    int v16 = v6 + 1;
    float v17 = (float)v6[1];
    float v18 = (float)v14;
    float v19 = (float)v15;
    float v20 = v18 - v12;
    float v21 = v19 - v17;
    float v22 = (float)(v21 * v21) + (float)(v20 * v20);
    float v23 = sqrtf(v22);
    if (v8 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v8;
    }
    float v25 = 0.0;
    do
    {
      float v26 = (float)*(v16 - 1);
      float v27 = (float)*v16;
      float v28 = (float)((float)(v21 * (float)(v27 - v17)) + (float)((float)(v26 - v12) * v20)) / v22;
      if (v28 < 0.0 || v28 > 1.0)
      {
        float v30 = (float)((float)(v27 - v17) * (float)(v27 - v17)) + (float)((float)(v26 - v12) * (float)(v26 - v12));
        float v31 = (float)((float)(v27 - v19) * (float)(v27 - v19)) + (float)((float)(v26 - v18) * (float)(v26 - v18));
        float v32 = sqrtf(v31);
        float v33 = sqrtf(v30);
        if (v30 >= v31) {
          float v34 = v32;
        }
        else {
          float v34 = v33;
        }
      }
      else
      {
        float v34 = v23 * fabsf((float)((float)((float)(v17 - v27) * v20) - (float)((float)(v12 - v26) * v21)) / v22);
      }
      v16 += 2;
      if (v34 > v25)
      {
        int v11 = v10;
        float v25 = v34;
      }
      ++v10;
    }
    while (v24 != v10);
    if (v25 <= a3)
    {
      double v65 = *(void **)a2;
      *(void *)(a2 + 8) = *(void *)a2;
      unint64_t v66 = *(void *)(a2 + 16);
      if ((unint64_t)v65 >= v66)
      {
        uint64_t v68 = v66 - (void)v65;
        uint64_t v69 = v68 >> 2;
        if ((unint64_t)(v68 >> 2) <= 1) {
          uint64_t v69 = 1;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v69;
        }
        double v71 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2 + 16, v70);
        double v73 = &v71[v72];
        *double v71 = *(void *)v6;
        double v67 = v71 + 1;
        long long v75 = *(void **)a2;
        double v74 = *(void **)(a2 + 8);
        if (v74 != *(void **)a2)
        {
          do
          {
            uint64_t v76 = *--v74;
            *--double v71 = v76;
          }
          while (v74 != v75);
          double v74 = *(void **)a2;
        }
        *(void *)a2 = v71;
        *(void *)(a2 + 8) = v67;
        *(void *)(a2 + 16) = v73;
        if (v74) {
          operator delete(v74);
        }
      }
      else
      {
        *double v65 = *(void *)v6;
        double v67 = v65 + 1;
      }
      *(void *)(a2 + 8) = v67;
      uint64_t v77 = *(void *)(a1 + 8);
      unint64_t v78 = *(void *)(a2 + 16);
      if ((unint64_t)v67 >= v78)
      {
        uint64_t v80 = ((uint64_t)v67 - *(void *)a2) >> 3;
        if ((unint64_t)(v80 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v81 = v78 - *(void *)a2;
        uint64_t v82 = v81 >> 2;
        if (v81 >> 2 <= (unint64_t)(v80 + 1)) {
          uint64_t v82 = v80 + 1;
        }
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83) {
          unint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2 + 16, v83);
        }
        else {
          unint64_t v84 = 0;
        }
        unint64_t v85 = &v84[8 * v80];
        double v86 = &v84[8 * v83];
        *(void *)unint64_t v85 = *(void *)(v77 - 8);
        uint64_t v79 = v85 + 8;
        long long v88 = *(void **)a2;
        double v87 = *(void **)(a2 + 8);
        if (v87 != *(void **)a2)
        {
          do
          {
            uint64_t v89 = *--v87;
            *((void *)v85 - 1) = v89;
            v85 -= 8;
          }
          while (v87 != v88);
          double v87 = *(void **)a2;
        }
        *(void *)a2 = v85;
        *(void *)(a2 + 8) = v79;
        *(void *)(a2 + 16) = v86;
        if (v87) {
          operator delete(v87);
        }
      }
      else
      {
        *double v67 = *(void *)(v77 - 8);
        uint64_t v79 = v67 + 1;
      }
      *(void *)(a2 + 8) = v79;
    }
    else
    {
      CGPoint v99 = 0;
      CGPoint v100 = 0;
      uint64_t v101 = 0;
      std::vector<PixelPosition>::__init_with_size[abi:ne180100]<std::__wrap_iter<PixelPosition const*>,std::__wrap_iter<PixelPosition const*>>(&v99, v6, (uint64_t)&v6[2 * v11 + 2], (8 * v11 + 8) >> 3);
      uint64_t v35 = *(void *)(a1 + 8);
      CGFloat v36 = (const void *)(*(void *)a1 + 8 * v11 + 8);
      CGPoint v97 = 0;
      uint64_t v98 = 0;
      float32x4x2_t v96 = 0;
      std::vector<PixelPosition>::__init_with_size[abi:ne180100]<std::__wrap_iter<PixelPosition const*>,std::__wrap_iter<PixelPosition const*>>(&v96, v36, v35, (v35 - (uint64_t)v36) >> 3);
      long long v93 = 0;
      CGPoint v94 = 0;
      uint64_t v95 = 0;
      __p = 0;
      long long v91 = 0;
      uint64_t v92 = 0;
      PolygonApproximateContour(&v99, &v93, a3);
      PolygonApproximateContour(&v96, &__p, a3);
      CGFloat v37 = *(void **)a2;
      *(void *)(a2 + 8) = *(void *)a2;
      if (v94 != v93)
      {
        uint64_t v38 = 0;
        uint64_t v39 = (void *)(a2 + 16);
        if ((unint64_t)((v94 - (unsigned char *)v93) >> 3) <= 1) {
          uint64_t v40 = 1;
        }
        else {
          uint64_t v40 = (v94 - (unsigned char *)v93) >> 3;
        }
        do
        {
          unint64_t v41 = v93;
          if ((unint64_t)v37 >= *v39)
          {
            uint64_t v42 = ((uint64_t)v37 - *(void *)a2) >> 3;
            if ((unint64_t)(v42 + 1) >> 61) {
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v43 = *v39 - *(void *)a2;
            uint64_t v44 = v43 >> 2;
            if (v43 >> 2 <= (unint64_t)(v42 + 1)) {
              uint64_t v44 = v42 + 1;
            }
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v45 = v44;
            }
            if (v45) {
              uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2 + 16, v45);
            }
            else {
              uint64_t v46 = 0;
            }
            uint64_t v47 = &v46[8 * v42];
            *(void *)uint64_t v47 = v41[v38];
            CGFloat v37 = v47 + 8;
            uint64_t v49 = *(void **)a2;
            unint64_t v48 = *(void **)(a2 + 8);
            if (v48 != *(void **)a2)
            {
              do
              {
                uint64_t v50 = *--v48;
                *((void *)v47 - 1) = v50;
                v47 -= 8;
              }
              while (v48 != v49);
              unint64_t v48 = *(void **)a2;
            }
            *(void *)a2 = v47;
            *(void *)(a2 + 8) = v37;
            *(void *)(a2 + 16) = &v46[8 * v45];
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            *v37++ = *((void *)v93 + v38);
          }
          *(void *)(a2 + 8) = v37;
          ++v38;
        }
        while (v38 != v40);
      }
      int64x2_t v51 = __p;
      if ((unint64_t)(v91 - (unsigned char *)__p) >= 9)
      {
        double v52 = (void *)(a2 + 16);
        if ((unint64_t)((v91 - (unsigned char *)__p) >> 3) <= 2) {
          uint64_t v53 = 2;
        }
        else {
          uint64_t v53 = (v91 - (unsigned char *)__p) >> 3;
        }
        uint64_t v54 = 1;
        do
        {
          double v55 = __p;
          if ((unint64_t)v37 >= *v52)
          {
            uint64_t v56 = ((uint64_t)v37 - *(void *)a2) >> 3;
            if ((unint64_t)(v56 + 1) >> 61) {
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v57 = *v52 - *(void *)a2;
            uint64_t v58 = v57 >> 2;
            if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
              uint64_t v58 = v56 + 1;
            }
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59) {
              int64x2_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2 + 16, v59);
            }
            else {
              int64x2_t v60 = 0;
            }
            uint64_t v61 = &v60[8 * v56];
            *(void *)uint64_t v61 = v55[v54];
            CGFloat v37 = v61 + 8;
            BOOL v63 = *(void **)a2;
            unint64_t v62 = *(void **)(a2 + 8);
            if (v62 != *(void **)a2)
            {
              do
              {
                uint64_t v64 = *--v62;
                *((void *)v61 - 1) = v64;
                v61 -= 8;
              }
              while (v62 != v63);
              unint64_t v62 = *(void **)a2;
            }
            *(void *)a2 = v61;
            *(void *)(a2 + 8) = v37;
            *(void *)(a2 + 16) = &v60[8 * v59];
            if (v62) {
              operator delete(v62);
            }
          }
          else
          {
            *v37++ = *((void *)__p + v54);
          }
          *(void *)(a2 + 8) = v37;
          ++v54;
        }
        while (v54 != v53);
        int64x2_t v51 = __p;
      }
      if (v51)
      {
        long long v91 = v51;
        operator delete(v51);
      }
      if (v93)
      {
        CGPoint v94 = v93;
        operator delete(v93);
      }
      if (v96)
      {
        CGPoint v97 = v96;
        operator delete(v96);
      }
      if (v99)
      {
        CGPoint v100 = v99;
        operator delete(v99);
      }
    }
  }
  else if (a2 != a1)
  {
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)a2, (char *)v6, v5, v8);
  }
}

void sub_1DD76F85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      BOOL v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    float v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  float v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    float v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *float v12 = &v9[v17];
  return result;
}

void *std::vector<PixelPosition>::__init_with_size[abi:ne180100]<std::__wrap_iter<PixelPosition const*>,std::__wrap_iter<PixelPosition const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD76FA2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1DD76FA94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<PixelPosition>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1DD76FBA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<PixelPosition>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::reverse_iterator<std::vector<PixelPosition>*>,std::reverse_iterator<std::vector<PixelPosition>*>,std::reverse_iterator<std::vector<PixelPosition>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::reverse_iterator<std::vector<PixelPosition>*>,std::reverse_iterator<std::vector<PixelPosition>*>,std::reverse_iterator<std::vector<PixelPosition>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::reverse_iterator<std::vector<PixelPosition>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::reverse_iterator<std::vector<PixelPosition>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD76FD68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,false>(uint64_t result, int32x2_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (int32x2_t *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          __int32 v24 = a2[-1].i32[0];
          BOOL v6 = v24 == v11->i32[0];
          BOOL v25 = v24 < v11->i32[0];
          if (v6) {
            BOOL v25 = a2[-1].i32[1] < v11->i32[1];
          }
          if (v25)
          {
            int32x2_t v26 = *v11;
            *unint64_t v11 = a2[-1];
            a2[-1] = v26;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v11, (int *)&v11[1], &a2[-1]);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v11, (int *)&v11[1], (int *)&v11[2], (int *)&a2[-1]);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v11, (int *)&v11[1], (int *)&v11[2], (int *)&v11[3], (int *)&a2[-1]);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,PixelPosition *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    size_t v17 = (int *)&v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v11, (int *)&v11[v15 >> 1], &a2[-1]);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)&v11[1], v17 - 2, &a2[-2]);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)&v11[2], (int *)&v11[v16 + 1], &a2[-3]);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(v17 - 2, v17, &v11[v16 + 1]);
      int32x2_t v18 = *v11;
      *unint64_t v11 = *(int32x2_t *)v17;
      *(int32x2_t *)size_t v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)&v11[v15 >> 1], (int *)v11, &a2[-1]);
      if (a5) {
        goto LABEL_16;
      }
    }
    __int32 v19 = v11[-1].i32[0];
    BOOL v6 = v19 == v11->i32[0];
    BOOL v20 = v19 < v11->i32[0];
    if (v6) {
      BOOL v20 = v11[-1].i32[1] < v11->i32[1];
    }
    if (!v20)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PixelPosition *,std::__less<void,void> &>((int *)v11, a2);
      unint64_t v11 = (int32x2_t *)result;
      goto LABEL_21;
    }
LABEL_16:
    float v21 = (int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PixelPosition *,std::__less<void,void> &>((uint64_t *)v11, (uint64_t *)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v11, v21);
    unint64_t v11 = (int32x2_t *)(v21 + 2);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(v21 + 2, (int *)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (int32x2_t *)v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_19:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,false>(v10, v21, a3, -v13, a5 & 1);
      unint64_t v11 = (int32x2_t *)(v21 + 2);
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v11, (int *)a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(v11, a2);
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int *result, int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        int v5 = v4[2];
        int v6 = v4[3];
        int v7 = *v4;
        int v8 = v4[1];
        unint64_t v4 = v2;
        BOOL v9 = v6 < v8;
        BOOL v10 = v5 == v7;
        BOOL v11 = v5 < v7;
        if (!v10) {
          BOOL v9 = v11;
        }
        if (v9)
        {
          uint64_t v12 = *(void *)v4;
          uint64_t v13 = HIDWORD(*(void *)v4);
          uint64_t v14 = v3;
          while (1)
          {
            unint64_t v15 = (char *)result + v14;
            *(void *)((char *)result + v14 + 8) = *(void *)((char *)result + v14);
            if (!v14) {
              break;
            }
            int v16 = *((_DWORD *)v15 - 2);
            BOOL v17 = *((_DWORD *)v15 - 1) > (int)v13;
            BOOL v10 = v16 == v12;
            BOOL v18 = v16 > (int)v12;
            if (!v10) {
              BOOL v17 = v18;
            }
            v14 -= 8;
            if (!v17)
            {
              __int32 v19 = (int *)((char *)result + v14 + 8);
              goto LABEL_14;
            }
          }
          __int32 v19 = result;
LABEL_14:
          *(void *)__int32 v19 = v12;
        }
        uint64_t v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    while (result + 2 != a2)
    {
      int v2 = result[2];
      int v3 = result[3];
      int v4 = *result;
      int v5 = result[1];
      result += 2;
      BOOL v6 = v3 < v5;
      BOOL v7 = v2 == v4;
      BOOL v8 = v2 < v4;
      if (!v7) {
        BOOL v6 = v8;
      }
      if (v6)
      {
        uint64_t v9 = *(void *)result;
        uint64_t v10 = HIDWORD(*(void *)result);
        BOOL v11 = result;
        do
        {
          uint64_t v12 = v11;
          uint64_t v13 = *--v11;
          *uint64_t v12 = v13;
          int v14 = *((_DWORD *)v12 - 4);
          BOOL v15 = *((_DWORD *)v12 - 3) > (int)v10;
          BOOL v7 = v14 == v9;
          BOOL v16 = v14 > (int)v9;
          if (!v7) {
            BOOL v15 = v16;
          }
        }
        while (v15);
        *BOOL v11 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int *a1, int *a2, _DWORD *a3)
{
  int v3 = *a2;
  int v4 = a2[1];
  BOOL v5 = *a2 < *a1;
  if (*a2 == *a1) {
    BOOL v5 = v4 < a1[1];
  }
  BOOL v6 = a3[1] < v4;
  BOOL v7 = *a3 == v3;
  BOOL v8 = *a3 < v3;
  if (!v7) {
    BOOL v6 = v8;
  }
  if (v5)
  {
    uint64_t v9 = *(void *)a1;
    if (v6)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v9;
      return 1;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v9;
    BOOL v13 = *a3 < (int)v9;
    if (*a3 == v9) {
      BOOL v13 = a3[1] < SHIDWORD(v9);
    }
    if (!v13) {
      return 1;
    }
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v9;
    return 2;
  }
  if (v6)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v10;
    BOOL v11 = *a2 < *a1;
    if (*a2 == *a1) {
      BOOL v11 = a2[1] < a1[1];
    }
    if (!v11) {
      return 1;
    }
    uint64_t v12 = *(void *)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v12;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PixelPosition *,std::__less<void,void> &>(int *a1, void *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = HIDWORD(*(void *)a1);
  int v4 = *((_DWORD *)a2 - 2);
  BOOL v5 = v4 == *(void *)a1;
  BOOL v6 = v4 > (int)*(void *)a1;
  if (v5) {
    BOOL v6 = *((_DWORD *)a2 - 1) > (int)v3;
  }
  if (v6)
  {
    BOOL v7 = a1;
    do
    {
      int v8 = v7[2];
      int v9 = v7[3];
      v7 += 2;
      BOOL v10 = v9 > (int)v3;
      BOOL v5 = v8 == v2;
      BOOL v11 = v8 > (int)v2;
      if (v5) {
        BOOL v11 = v10;
      }
    }
    while (!v11);
  }
  else
  {
    uint64_t v12 = a1 + 2;
    do
    {
      BOOL v7 = v12;
      if (v12 >= (int *)a2) {
        break;
      }
      int v13 = *v12;
      BOOL v14 = v7[1] > (int)v3;
      BOOL v5 = v13 == v2;
      BOOL v15 = v13 > (int)v2;
      if (!v5) {
        BOOL v14 = v15;
      }
      uint64_t v12 = v7 + 2;
    }
    while (!v14);
  }
  if (v7 < (int *)a2)
  {
    do
    {
      int v16 = *((_DWORD *)a2 - 2);
      int v17 = *((_DWORD *)a2-- - 1);
      BOOL v18 = v17 > (int)v3;
      BOOL v5 = v16 == v2;
      BOOL v19 = v16 > (int)v2;
      if (v5) {
        BOOL v19 = v18;
      }
    }
    while (v19);
  }
  while (v7 < (int *)a2)
  {
    uint64_t v20 = *(void *)v7;
    *(void *)BOOL v7 = *a2;
    *a2 = v20;
    do
    {
      int v21 = v7[2];
      int v22 = v7[3];
      v7 += 2;
      BOOL v23 = v22 > (int)v3;
      BOOL v5 = v21 == v2;
      BOOL v24 = v21 > (int)v2;
      if (v5) {
        BOOL v24 = v23;
      }
    }
    while (!v24);
    do
    {
      int v25 = *((_DWORD *)a2 - 2);
      int v26 = *((_DWORD *)a2-- - 1);
      BOOL v27 = v26 > (int)v3;
      BOOL v5 = v25 == v2;
      BOOL v28 = v25 > (int)v2;
      if (v5) {
        BOOL v28 = v27;
      }
    }
    while (v28);
  }
  if (v7 - 2 != a1) {
    *(void *)a1 = *((void *)v7 - 1);
  }
  *((void *)v7 - 1) = v2;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PixelPosition *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unint64_t v4 = HIDWORD(*a1);
  do
  {
    int v5 = a1[v2 + 1];
    BOOL v6 = SHIDWORD(a1[v2 + 1]) < (int)v4;
    BOOL v7 = v5 == v3;
    BOOL v8 = v5 < (int)v3;
    if (!v7) {
      BOOL v6 = v8;
    }
    ++v2;
  }
  while (v6);
  int v9 = &a1[v2];
  BOOL v10 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      int v15 = *((_DWORD *)a2 - 2);
      int v16 = *((_DWORD *)a2-- - 1);
      BOOL v17 = v16 < (int)v4;
      BOOL v7 = v15 == v3;
      BOOL v18 = v15 < (int)v3;
      if (v7) {
        BOOL v18 = v17;
      }
    }
    while (!v18);
  }
  else
  {
    do
    {
      int v11 = *((_DWORD *)a2 - 2);
      int v12 = *((_DWORD *)a2-- - 1);
      BOOL v13 = v12 < (int)v4;
      BOOL v7 = v11 == v3;
      BOOL v14 = v11 < (int)v3;
      if (v7) {
        BOOL v14 = v13;
      }
    }
    while (!v14);
  }
  if (v9 < a2)
  {
    unint64_t v19 = (unint64_t)v9;
    uint64_t v20 = a2;
    do
    {
      uint64_t v21 = *(void *)v19;
      *(void *)unint64_t v19 = *v20;
      *uint64_t v20 = v21;
      do
      {
        int v22 = *(_DWORD *)(v19 + 8);
        int v23 = *(_DWORD *)(v19 + 12);
        v19 += 8;
        BOOL v24 = v23 < (int)v4;
        BOOL v7 = v22 == v3;
        BOOL v25 = v22 < (int)v3;
        if (v7) {
          BOOL v25 = v24;
        }
      }
      while (v25);
      do
      {
        int v26 = *((_DWORD *)v20 - 2);
        int v27 = *((_DWORD *)v20-- - 1);
        BOOL v28 = v27 < (int)v4;
        BOOL v7 = v26 == v3;
        BOOL v29 = v26 < (int)v3;
        if (v7) {
          BOOL v29 = v28;
        }
      }
      while (!v29);
    }
    while (v19 < (unint64_t)v20);
    BOOL v10 = (uint64_t *)(v19 - 8);
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *BOOL v10 = v3;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 2);
      BOOL v7 = v6 == *a1;
      BOOL v8 = v6 < *a1;
      if (v7) {
        BOOL v8 = *(a2 - 1) < a1[1];
      }
      if (v8)
      {
        uint64_t v9 = *(void *)a1;
        *(void *)a1 = *((void *)a2 - 1);
        *((void *)a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      BOOL v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a1 + 2, a1 + 4);
      int v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    BOOL v14 = *v11 < *v10;
    if (*v11 == *v10) {
      BOOL v14 = v11[1] < v10[1];
    }
    if (v14)
    {
      uint64_t v15 = *(void *)v11;
      uint64_t v16 = HIDWORD(*(void *)v11);
      uint64_t v17 = v12;
      while (1)
      {
        BOOL v18 = (char *)a1 + v17;
        *(void *)((char *)a1 + v17 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)((char *)a1 + v17 + 16);
        if (v17 == -16) {
          break;
        }
        int v19 = *((_DWORD *)v18 + 2);
        BOOL v20 = *((_DWORD *)v18 + 3) > (int)v16;
        BOOL v7 = v19 == v15;
        BOOL v21 = v19 > (int)v15;
        if (!v7) {
          BOOL v20 = v21;
        }
        v17 -= 8;
        if (!v20)
        {
          int v22 = (int *)((char *)a1 + v17 + 24);
          goto LABEL_18;
        }
      }
      int v22 = a1;
LABEL_18:
      *(void *)int v22 = v15;
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    BOOL v10 = v11;
    v12 += 8;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a2, a3);
  BOOL v9 = *a4 < *a3;
  if (*a4 == *a3) {
    BOOL v9 = a4[1] < a3[1];
  }
  if (v9)
  {
    uint64_t v10 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v10;
    BOOL v11 = *a3 < *a2;
    if (*a3 == *a2) {
      BOOL v11 = a3[1] < a2[1];
    }
    if (v11)
    {
      uint64_t v12 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v12;
      BOOL v13 = *a2 < *a1;
      if (*a2 == *a1) {
        BOOL v13 = a2[1] < a1[1];
      }
      if (v13)
      {
        uint64_t v14 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a2, a3, a4);
  BOOL v11 = *a5 < *a4;
  if (*a5 == *a4) {
    BOOL v11 = a5[1] < a4[1];
  }
  if (v11)
  {
    uint64_t v12 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v12;
    BOOL v13 = *a4 < *a3;
    if (*a4 == *a3) {
      BOOL v13 = a4[1] < a3[1];
    }
    if (v13)
    {
      uint64_t v14 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v14;
      BOOL v15 = *a3 < *a2;
      if (*a3 == *a2) {
        BOOL v15 = a3[1] < a2[1];
      }
      if (v15)
      {
        uint64_t v16 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v16;
        BOOL v17 = *a2 < *a1;
        if (*a2 == *a1) {
          BOOL v17 = a2[1] < a1[1];
        }
        if (v17)
        {
          uint64_t v18 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v18;
        }
      }
    }
  }
  return result;
}

int32x2_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,PixelPosition *>(int32x2_t *a1, int32x2_t *a2, int32x2_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    BOOL v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        BOOL v15 = v14->i32[0] < a1->i32[0];
        if (v14->i32[0] == a1->i32[0]) {
          BOOL v15 = v14->i32[1] < a1->i32[1];
        }
        if (v15)
        {
          int32x2_t v16 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      BOOL v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v17 = (unint64_t)v8 >> 3;
      uint64_t v18 = a2 - 1;
      do
      {
        int32x2_t v19 = *a1;
        BOOL v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a4, v17);
        if (v18 == v20)
        {
          *BOOL v20 = v19;
        }
        else
        {
          *BOOL v20 = *v18;
          *uint64_t v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((uint64_t)a1, (uint64_t)&v20[1], a4, &v20[1] - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(uint64_t result, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (int32x2_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        __int32 v12 = v8->i32[0];
      }
      else
      {
        int32x2_t v10 = v8[1];
        int32x2_t v11 = vcgt_s32(v10, *v8);
        __int32 v12 = (__int32)*v8;
        __int8 v13 = v11.i8[4];
        if (v12 != v10.i32[0]) {
          __int8 v13 = v11.i8[0];
        }
        if (v13)
        {
          __int32 v12 = (__int32)v8[1];
          ++v8;
          uint64_t v7 = v9;
        }
      }
      BOOL v14 = v12 == a4->i32[0];
      BOOL v15 = v12 < a4->i32[0];
      if (v14) {
        BOOL v15 = v8->i32[1] < a4->i32[1];
      }
      if (!v15)
      {
        int32x2_t v16 = *a4;
        unint64_t v17 = HIDWORD(*(unint64_t *)a4);
        do
        {
          uint64_t v18 = a4;
          a4 = v8;
          *uint64_t v18 = *v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v19 = (2 * v7) | 1;
          uint64_t v8 = (int32x2_t *)(result + 8 * v19);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            int v22 = v8->i32[0];
            uint64_t v7 = v19;
          }
          else
          {
            int32x2_t v20 = v8[1];
            int32x2_t v21 = vcgt_s32(v20, *v8);
            int v22 = (int)*v8;
            __int8 v23 = v21.i8[4];
            if (v22 != v20.i32[0]) {
              __int8 v23 = v21.i8[0];
            }
            if (v23)
            {
              int v22 = (int)v8[1];
              ++v8;
            }
            else
            {
              uint64_t v7 = v19;
            }
          }
          BOOL v24 = v8->i32[1] < (int)v17;
          BOOL v14 = v22 == v16.i32[0];
          BOOL v25 = v22 < v16.i32[0];
          if (!v14) {
            BOOL v24 = v25;
          }
        }
        while (!v24);
        *a4 = v16;
      }
    }
  }
  return result;
}

int32x2_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[v3 + 1];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      int32x2_t v9 = v6[1];
      unsigned __int8 v10 = vceq_s32(*v6, v9).u8[0];
      int32x2_t v11 = vcgt_s32(v9, *v6);
      if (v10) {
        __int8 v12 = v11.i8[4];
      }
      else {
        __int8 v12 = v11.i8[0];
      }
      if (v12)
      {
        ++v6;
        uint64_t v7 = v8;
      }
    }
    *a1 = *v6;
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (int32x2_t *)(result + 8 * v4);
    int32x2_t v7 = *(int32x2_t *)(a2 - 8);
    uint64_t v6 = (int32x2_t *)(a2 - 8);
    int32x2_t v8 = vcgt_s32(v7, *v5);
    __int8 v9 = (vceq_s32(*v5, v7).u8[0] & 1) != 0 ? v8.i8[4] : v8.i8[0];
    if (v9)
    {
      int32x2_t v10 = *v6;
      unint64_t v11 = HIDWORD(*(unint64_t *)v6);
      do
      {
        __int8 v12 = v6;
        uint64_t v6 = v5;
        *__int8 v12 = *v5;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (int32x2_t *)(result + 8 * v4);
        BOOL v13 = v5->i32[0] < v10.i32[0];
        if (v5->i32[0] == v10.i32[0]) {
          BOOL v13 = v5->i32[1] < (int)v11;
        }
      }
      while (v13);
      *uint64_t v6 = v10;
    }
  }
  return result;
}

void *std::vector<std::vector<PixelPosition>>::__init_with_size[abi:ne180100]<std::vector<PixelPosition>*,std::vector<PixelPosition>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*,std::vector<PixelPosition>*,std::vector<PixelPosition>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DD770D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*,std::vector<PixelPosition>*,std::vector<PixelPosition>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      _WORD v4[2] = 0;
      std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1DD770E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      uint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      unint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

id *CRTextTokenPath::operator=(id *location, uint64_t a2)
{
  if (location != (id *)a2)
  {
    objc_storeStrong(location, *(id *)a2);
    location[1] = *(id *)(a2 + 8);
  }
  return location;
}

void CRTextTokenPath::CRTextTokenPath(CRTextTokenPath *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

void CRTextTokenPath::CRTextTokenPath(CRTextTokenPath *this, void *a2)
{
  *(void *)this = a2;
}

{
  *(void *)this = a2;
}

void CRTextTokenPath::CRTextTokenPath(CRTextTokenPath *this, NSIndexPath *a2, double a3)
{
  *(void *)this = a2;
  *((double *)this + 1) = a3;
}

{
  *(void *)this = a2;
  *((double *)this + 1) = a3;
}

double CRTextTokenPath::getScore(CRTextTokenPath *this)
{
  return *((double *)this + 1);
}

uint64_t operator==(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 8) == *(double *)(a2 + 8)) {
    return [*(id *)a1 isEqual:*(void *)a2];
  }
  else {
    return 0;
  }
}

BOOL operator<(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

void sub_1DD7710FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD771240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD771458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7716D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD771808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD771CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD7731D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  if (__p) {
    operator delete(__p);
  }
  if (a45) {
    operator delete(a45);
  }
  if (a49) {
    operator delete(a49);
  }
  if (a52) {
    operator delete(a52);
  }

  _Unwind_Resume(a1);
}

void std::vector<anonymous namespace'::FieldCandidateEntry>::reserve(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v4 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    uint64_t v5 = v11;
    if (v3 == (char *)*a1)
    {
      int32x2_t v8 = (char *)a1[1];
    }
    else
    {
      do
      {
        long long v6 = *((_OWORD *)v3 - 3);
        long long v7 = *((_OWORD *)v3 - 1);
        *((_OWORD *)v5 - 2) = *((_OWORD *)v3 - 2);
        *((_OWORD *)v5 - 1) = v7;
        *((_OWORD *)v5 - 3) = v6;
        v5 -= 48;
        v3 -= 48;
      }
      while (v3 != v4);
      int32x2_t v8 = (char *)*a1;
      uint64_t v3 = (char *)a1[1];
    }
    *a1 = v5;
    uint64_t v9 = a1[2];
    *(_OWORD *)(a1 + 1) = v12;
    *(void *)&long long v12 = v3;
    *((void *)&v12 + 1) = v9;
    uint64_t v10 = v8;
    unint64_t v11 = v8;
    if (v3 != v8) {
      *(void *)&long long v12 = &v8[(v3 - v8 - 48) % 0x30uLL];
    }
    if (v8) {
      operator delete(v8);
    }
  }
}

void anonymous namespace'::applyGeometryFiltering(void **a1, double **a2, double *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v6 = *a2;
  long long v7 = (long long *)a2[1];
  if (*a2 != (double *)v7)
  {
    do
    {
      double v8 = v6[4] / a3[1];
      if (v8 >= 0.005)
      {
        double v9 = v6[3] / *a3;
        if (v9 >= 0.005)
        {
          double v10 = v9 >= v8 ? v6[3] / *a3 : v6[4] / a3[1];
          double v11 = v8 >= v9 ? v6[3] / *a3 : v6[4] / a3[1];
          BOOL v12 = v10 <= v11 * 50.0 && v9 <= 1.0;
          if (v12 && v8 <= 0.3)
          {
            BOOL v13 = a1[1];
            unint64_t v14 = (unint64_t)a1[2];
            if ((unint64_t)v13 >= v14)
            {
              uint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (unsigned char *)*a1) >> 4);
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) > 0x555555555555555) {
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a1) >> 4);
              if (2 * v20 > v19) {
                unint64_t v19 = 2 * v20;
              }
              if (v20 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v21 = 0x555555555555555;
              }
              else {
                unint64_t v21 = v19;
              }
              int v22 = *(_OWORD **)&v35[16];
              long long v23 = *(_OWORD *)v6;
              long long v24 = *((_OWORD *)v6 + 2);
              *(_OWORD *)(*(void *)&v35[16] + 16) = *((_OWORD *)v6 + 1);
              void v22[2] = v24;
              *int v22 = v23;
              int v26 = (char *)*a1;
              BOOL v25 = (char *)a1[1];
              int v27 = *(char **)&v35[8];
              if (v25 == *a1)
              {
                float v30 = a1[1];
              }
              else
              {
                do
                {
                  long long v28 = *((_OWORD *)v25 - 3);
                  long long v29 = *((_OWORD *)v25 - 1);
                  *((_OWORD *)v27 - 2) = *((_OWORD *)v25 - 2);
                  *((_OWORD *)v27 - 1) = v29;
                  *((_OWORD *)v27 - 3) = v28;
                  v27 -= 48;
                  v25 -= 48;
                }
                while (v25 != v26);
                float v30 = *a1;
                BOOL v25 = (char *)a1[1];
              }
              unint64_t v17 = v22 + 3;
              *a1 = v27;
              a1[1] = v22 + 3;
              unint64_t v31 = (unint64_t)a1[2];
              a1[2] = (void *)v36;
              *(void *)&v35[16] = v25;
              unint64_t v36 = v31;
              *(void *)uint64_t v35 = v30;
              *(void *)&v35[8] = v30;
              if (v25 != v30) {
                *(void *)&v35[16] = &v25[-48 - 48 * ((v25 - v30 - 48) / 0x30uLL)];
              }
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              long long v15 = *(_OWORD *)v6;
              long long v16 = *((_OWORD *)v6 + 2);
              v13[1] = *((_OWORD *)v6 + 1);
              v13[2] = v16;
              *BOOL v13 = v15;
              unint64_t v17 = v13 + 3;
            }
            a1[1] = v17;
          }
        }
      }
      v6 += 6;
    }
    while (v6 != (double *)v7);
  }
  float v32 = CROSLogForCategory(6);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4);
    unint64_t v34 = v33 + 0x5555555555555555 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
    *(_DWORD *)uint64_t v35 = 136315650;
    *(void *)&v35[4] = "applyGeometryFiltering";
    *(_WORD *)&v35[12] = 2048;
    *(void *)&v35[14] = v34;
    *(_WORD *)&v35[22] = 2048;
    unint64_t v36 = v33;
    _os_log_impl(&dword_1DD733000, v32, OS_LOG_TYPE_DEBUG, "%s: Filtered %lu/%lu candidates based on geometrical rules.", v35, 0x20u);
  }
}

void sub_1DD773864(_Unwind_Exception *exception_object)
{
}

void std::vector<anonymous namespace'::FieldCandidateEntry>::insert<std::__wrap_iter<anonymous namespace'::FieldCandidateEntry*>,0>(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  if (a4 - __src < 1) {
    return;
  }
  unint64_t v4 = __src;
  uint64_t v6 = (a4 - __src) / 48;
  long long v7 = *(char **)a1;
  uint64_t v8 = (a2 - *(void *)a1) / 48;
  double v9 = (char *)(*(void *)a1 + 48 * v8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v11) >> 4)) < v6)
  {
    unint64_t v12 = v6 - 0x5555555555555555 * ((uint64_t)(v11 - (void)v7) >> 4);
    if (v12 > 0x555555555555555) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v7) >> 4);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v12) {
      uint64_t v14 = v12;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x555555555555555;
    }
    else {
      unint64_t v15 = v14;
    }
    long long v16 = v41;
    unint64_t v17 = &v41[48 * v6];
    uint64_t v18 = 48 * v6;
    do
    {
      long long v19 = *(_OWORD *)v4;
      long long v20 = *((_OWORD *)v4 + 2);
      v16[1] = *((_OWORD *)v4 + 1);
      v16[2] = v20;
      *long long v16 = v19;
      v16 += 3;
      v4 += 48;
      v18 -= 48;
    }
    while (v18);
    unint64_t v21 = v40;
    int v22 = *(char **)a1;
    if (*(char **)a1 == v9)
    {
      int v26 = v40;
    }
    else
    {
      long long v23 = v9;
      do
      {
        long long v24 = *((_OWORD *)v23 - 3);
        long long v25 = *((_OWORD *)v23 - 1);
        int v26 = v21 - 48;
        *((_OWORD *)v21 - 2) = *((_OWORD *)v23 - 2);
        *((_OWORD *)v21 - 1) = v25;
        *((_OWORD *)v21 - 3) = v24;
        v23 -= 48;
        v21 -= 48;
      }
      while (v23 != v22);
    }
    uint64_t v40 = v26;
    uint64_t v35 = *(unsigned char **)(a1 + 8);
    uint64_t v36 = v35 - v9;
    if (v35 != v9)
    {
      memmove(v17, v9, v35 - v9);
      int v26 = v40;
      double v9 = *(char **)(a1 + 8);
    }
    uint64_t v37 = *(char **)a1;
    *(void *)a1 = v26;
    *(void *)(a1 + 8) = &v17[v36];
    uint64_t v38 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42;
    unint64_t v41 = v9;
    uint64_t v42 = v38;
    uint64_t v39 = v37;
    uint64_t v40 = v37;
    if (v9 != v37) {
      unint64_t v41 = &v37[(v9 - v37 - 48) % 0x30uLL];
    }
    if (v37) {
      operator delete(v37);
    }
    return;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v9) >> 4)) >= v6)
  {
    int v27 = &v4[48 * v6];
    long long v29 = *(char **)(a1 + 8);
LABEL_21:
    float v30 = &v9[48 * v6];
    unint64_t v31 = (long long *)&v29[-48 * v6];
    float v32 = v29;
    if ((unint64_t)v31 < v11)
    {
      float v32 = v29;
      do
      {
        long long v33 = *v31;
        long long v34 = v31[2];
        *((_OWORD *)v32 + 1) = v31[1];
        *((_OWORD *)v32 + 2) = v34;
        *(_OWORD *)float v32 = v33;
        v32 += 48;
        v31 += 3;
      }
      while ((unint64_t)v31 < v11);
    }
    *(void *)(a1 + 8) = v32;
    if (v29 != v30) {
      memmove(&v9[48 * v6], v9, v29 - v30);
    }
    if (v27 != v4)
    {
      memmove(v9, v4, v27 - v4);
    }
    return;
  }
  int v27 = &v4[16 * ((uint64_t)(v11 - (void)v9) >> 4)];
  int64_t v28 = a4 - v27;
  if (a4 != v27) {
    memmove(*(void **)(a1 + 8), &v4[16 * ((uint64_t)(v11 - (void)v9) >> 4)], a4 - v27);
  }
  long long v29 = (char *)(v11 + v28);
  *(void *)(a1 + 8) = v11 + v28;
  if ((uint64_t)(v11 - (void)v9) >= 1) {
    goto LABEL_21;
  }
}

void anonymous namespace'::applyNonMaximaSuppression(void *a1, uint64_t *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a2 + 1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  buf[0] = 1;
  std::vector<BOOL>::vector(&__p, v5, buf);
  uint64_t v6 = *v4;
  uint64_t v7 = *a2;
  unint64_t v48 = a1;
  if (*v4 == *a2)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*v4 - *a2) >> 4);
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      if ((*(void *)((char *)__p + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8))
      {
        unint64_t v9 = v8 + 1;
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
        if (v8 + 1 < v10)
        {
          uint64_t v11 = v7 + 48 * v8;
          uint64_t v12 = 3 * v8;
          unint64_t v13 = (CGFloat *)(v7 + 16 * v12);
          uint64_t v14 = (CGFloat *)(v11 + 8);
          unint64_t v15 = v13 + 2;
          uint64_t v16 = 16 * v12;
          unint64_t v17 = v13 + 3;
          uint64_t v18 = v13 + 4;
          unint64_t v49 = v9;
          do
          {
            if ((*((void *)__p + (v9 >> 6)) & (1 << v9)) != 0)
            {
              uint64_t v19 = v7 + v16;
              v54.origin.double x = *v14;
              v54.origin.double y = *v15;
              v54.size.double width = *v17;
              v54.size.double height = *v18;
              CGRect v55 = CGRectIntersection(v54, *(CGRect *)(v7 + v16 + 56));
              double width = v55.size.width;
              double height = v55.size.height;
              v55.origin.double x = *v14;
              v55.origin.double y = *v15;
              v55.size.double width = *v17;
              v55.size.double height = *v18;
              CGRect v56 = CGRectUnion(v55, *(CGRect *)(v19 + 56));
              if (v56.size.width != 0.0
                && v56.size.height != 0.0
                && (width * height / (v56.size.width * v56.size.height) >= 0.074928
                 || width * height / fmin(*v17 * *v18, *(double *)(v19 + 72) * *(double *)(v19 + 80)) >= 0.358648))
              {
                *((void *)__p + (v9 >> 6)) &= ~(1 << v9);
              }
            }
            ++v9;
            uint64_t v7 = *a2;
            uint64_t v6 = a2[1];
            unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 4);
            v16 += 48;
          }
          while (v9 < v10);
          a1 = v48;
          unint64_t v9 = v49;
        }
      }
      else
      {
        unint64_t v9 = v8 + 1;
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
      }
      unint64_t v8 = v9;
    }
    while (v9 < v10);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v23 = *a2;
  uint64_t v22 = a2[1];
  if (v22 != *a2)
  {
    unint64_t v24 = 0;
    do
    {
      if ((*(void *)((char *)__p + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24))
      {
        long long v25 = (long long *)(v23 + 48 * v24);
        int v26 = (_OWORD *)a1[1];
        unint64_t v27 = a1[2];
        if ((unint64_t)v26 >= v27)
        {
          uint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26 - *a1) >> 4);
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) > 0x555555555555555) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *a1) >> 4);
          if (2 * v33 > v32) {
            unint64_t v32 = 2 * v33;
          }
          if (v33 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v34 = 0x555555555555555;
          }
          else {
            unint64_t v34 = v32;
          }
          uint64_t v35 = *(_OWORD **)&buf[16];
          long long v36 = *v25;
          long long v37 = v25[2];
          *(_OWORD *)(*(void *)&buf[16] + 16) = v25[1];
          v35[2] = v37;
          _OWORD *v35 = v36;
          uint64_t v39 = (char *)*a1;
          uint64_t v38 = (char *)a1[1];
          uint64_t v40 = *(void *)&buf[8];
          if (v38 == (char *)*a1)
          {
            uint64_t v43 = (unsigned char *)a1[1];
          }
          else
          {
            do
            {
              long long v41 = *((_OWORD *)v38 - 3);
              long long v42 = *((_OWORD *)v38 - 1);
              *(_OWORD *)(v40 - 32) = *((_OWORD *)v38 - 2);
              *(_OWORD *)(v40 - 16) = v42;
              *(_OWORD *)(v40 - 48) = v41;
              v40 -= 48;
              v38 -= 48;
            }
            while (v38 != v39);
            uint64_t v43 = (unsigned char *)*a1;
            uint64_t v38 = (char *)a1[1];
          }
          float v30 = v35 + 3;
          *a1 = v40;
          a1[1] = v35 + 3;
          unint64_t v44 = a1[2];
          a1[2] = v52;
          *(void *)&buf[16] = v38;
          unint64_t v52 = v44;
          *(void *)buf = v43;
          *(void *)&buf[8] = v43;
          if (v38 != v43) {
            *(void *)&buf[16] = &v38[-48 - 48 * ((v38 - v43 - 48) / 0x30uLL)];
          }
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          long long v28 = *v25;
          long long v29 = v25[2];
          v26[1] = v25[1];
          v26[2] = v29;
          _OWORD *v26 = v28;
          float v30 = v26 + 3;
        }
        a1[1] = v30;
        uint64_t v23 = *a2;
        uint64_t v22 = a2[1];
      }
      ++v24;
    }
    while (v24 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 4));
  }
  unint64_t v45 = CROSLogForCategory(6);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
    unint64_t v47 = v46 + 0x5555555555555555 * ((uint64_t)(a1[1] - *a1) >> 4);
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "applyNonMaximaSuppression";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v47;
    *(_WORD *)&buf[22] = 2048;
    unint64_t v52 = v46;
    _os_log_impl(&dword_1DD733000, v45, OS_LOG_TYPE_DEBUG, "%s: Filtered %lu/%lu candidates.", buf, 0x20u);
  }

  if (__p) {
    operator delete(__p);
  }
}

void sub_1DD773FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  unint64_t v13 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v13;
    operator delete(v13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<anonymous namespace'::FieldCandidateEntry>::emplace_back<float &,CGRect,unsigned long &>(char **a1, _DWORD *a2, _OWORD *a3, uint64_t *a4)
{
  unint64_t v8 = (unint64_t)a1[2];
  unint64_t v9 = (unint64_t)a1[1];
  if (v9 >= v8)
  {
    uint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 4);
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) > 0x555555555555555) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*a1) >> 4);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    unint64_t v17 = v29;
    uint64_t v18 = *a4;
    *(_DWORD *)long long v29 = *a2;
    long long v19 = a3[1];
    *(_OWORD *)(v17 + 8) = *a3;
    *(_OWORD *)(v17 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v19;
    *((void *)v17 + 5) = v18;
    uint64_t v12 = v17 + 48;
    unint64_t v21 = *a1;
    long long v20 = a1[1];
    uint64_t v22 = v28;
    if (v20 == *a1)
    {
      long long v25 = a1[1];
    }
    else
    {
      do
      {
        long long v23 = *((_OWORD *)v20 - 3);
        long long v24 = *((_OWORD *)v20 - 1);
        *((_OWORD *)v22 - 2) = *((_OWORD *)v20 - 2);
        *((_OWORD *)v22 - 1) = v24;
        *((_OWORD *)v22 - 3) = v23;
        v22 -= 48;
        v20 -= 48;
      }
      while (v20 != v21);
      long long v25 = *a1;
      long long v20 = a1[1];
    }
    *a1 = v22;
    a1[1] = v12;
    int v26 = a1[2];
    a1[2] = v30;
    long long v29 = v20;
    float v30 = v26;
    unint64_t v27 = v25;
    long long v28 = v25;
    if (v20 != v25) {
      long long v29 = &v25[(v20 - v25 - 48) % 0x30uLL];
    }
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    uint64_t v10 = *a4;
    *(_DWORD *)unint64_t v9 = *a2;
    long long v11 = a3[1];
    *(_OWORD *)(v9 + 8) = *a3;
    *(_OWORD *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
    *(void *)(v9 + 40) = v10;
    uint64_t v12 = (char *)(v9 + 48);
  }
  a1[1] = v12;
}

void *std::__split_buffer<anonymous namespace'::FieldCandidateEntry>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x555555555555556) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(48 * a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[48 * a2];
  return a1;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void *std::vector<CGRect>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGRect>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1DD774588(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGRect>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<anonymous namespace'::FieldCandidateEntry>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  unint64_t v1 = a1;
  unint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(48 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<anonymous namespace'::FieldCandidateEntry *>,std::__wrap_iter<anonymous namespace'::FieldCandidateEntry *>>(char *__src, char *a2, char *a3)
{
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 48 == a2)
    {
      long long v33 = *(_OWORD *)__src;
      long long v36 = *((_OWORD *)__src + 1);
      long long v38 = *((_OWORD *)__src + 2);
      int64_t v13 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      a3 = &__src[v13];
      *(_OWORD *)a3 = v33;
      *((_OWORD *)a3 + 1) = v36;
      *((_OWORD *)a3 + 2) = v38;
    }
    else if (a2 + 48 == a3)
    {
      long long v34 = *((_OWORD *)a3 - 3);
      long long v37 = *((_OWORD *)a3 - 2);
      long long v39 = *((_OWORD *)a3 - 1);
      size_t v14 = a3 - 48 - __src;
      if (v14) {
        memmove(__src + 48, __src, v14);
      }
      *(_OWORD *)__src = v34;
      *((_OWORD *)__src + 1) = v37;
      *((_OWORD *)__src + 2) = v39;
      return __src + 48;
    }
    else
    {
      unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 4);
      if (v4 == 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4))
      {
        unint64_t v5 = __src + 48;
        unint64_t v6 = a2 + 48;
        do
        {
          long long v7 = *((_OWORD *)v5 - 3);
          long long v8 = *((_OWORD *)v5 - 2);
          long long v9 = *((_OWORD *)v5 - 1);
          long long v11 = *((_OWORD *)v6 - 2);
          long long v10 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v5 - 3) = *((_OWORD *)v6 - 3);
          *((_OWORD *)v5 - 2) = v11;
          *((_OWORD *)v5 - 1) = v10;
          *((_OWORD *)v6 - 2) = v8;
          *((_OWORD *)v6 - 1) = v9;
          *((_OWORD *)v6 - 3) = v7;
          if (v5 == a2) {
            break;
          }
          v5 += 48;
          BOOL v12 = v6 == a3;
          v6 += 48;
        }
        while (!v12);
        return a2;
      }
      else
      {
        uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 4);
        do
        {
          uint64_t v17 = v16;
          unint64_t v16 = v15;
          uint64_t v15 = v17 % v15;
        }
        while (v15);
        if (v16)
        {
          uint64_t v18 = &__src[48 * v16];
          do
          {
            long long v19 = *((_OWORD *)v18 - 3);
            long long v20 = *((_OWORD *)v18 - 2);
            long long v21 = *((_OWORD *)v18 - 1);
            v18 -= 48;
            long long v35 = v19;
            long long v40 = v21;
            uint64_t v22 = &v18[16 * ((a2 - __src) >> 4)];
            long long v23 = v18;
            do
            {
              long long v24 = v22;
              long long v25 = *(_OWORD *)v22;
              long long v26 = *((_OWORD *)v22 + 2);
              *((_OWORD *)v23 + 1) = *((_OWORD *)v22 + 1);
              *((_OWORD *)v23 + 2) = v26;
              *(_OWORD *)long long v23 = v25;
              unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((a3 - v22) >> 4);
              v22 += 16 * ((a2 - __src) >> 4);
              BOOL v28 = __OFSUB__(v4, v27);
              uint64_t v30 = v4 - v27;
              char v29 = (v30 < 0) ^ v28;
              uint64_t v31 = &__src[48 * v30];
              if (!v29) {
                uint64_t v22 = v31;
              }
              long long v23 = v24;
            }
            while (v22 != v18);
            *((_OWORD *)v24 + 1) = v20;
            *((_OWORD *)v24 + 2) = v40;
            *(_OWORD *)long long v24 = v35;
          }
          while (v18 != __src);
        }
        return &__src[16 * ((a3 - a2) >> 4)];
      }
    }
  }
  return a3;
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRFormDetector detectFormFieldsInImage:document:outputCandidateResults:]::$_2 &,anonymous namespace'::FieldCandidateEntry *>(float *result, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  if (*a2 <= *result)
  {
    if (v4 > v3)
    {
      long long v10 = *(_OWORD *)a2;
      long long v11 = *((_OWORD *)a2 + 1);
      long long v12 = *((_OWORD *)a2 + 2);
      long long v14 = *((_OWORD *)a3 + 1);
      long long v13 = *((_OWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *((_OWORD *)a2 + 2) = v13;
      *((_OWORD *)a3 + 1) = v11;
      *((_OWORD *)a3 + 2) = v12;
      *(_OWORD *)a3 = v10;
      if (*a2 > *result)
      {
        long long v15 = *(_OWORD *)result;
        long long v16 = *((_OWORD *)result + 1);
        long long v17 = *((_OWORD *)result + 2);
        long long v19 = *((_OWORD *)a2 + 1);
        long long v18 = *((_OWORD *)a2 + 2);
        *(_OWORD *)uint64_t result = *(_OWORD *)a2;
        *((_OWORD *)result + 1) = v19;
        *((_OWORD *)result + 2) = v18;
        *((_OWORD *)a2 + 1) = v16;
        *((_OWORD *)a2 + 2) = v17;
        *(_OWORD *)a2 = v15;
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      long long v20 = *(_OWORD *)result;
      long long v21 = *((_OWORD *)result + 1);
      long long v22 = *((_OWORD *)result + 2);
      long long v24 = *((_OWORD *)a2 + 1);
      long long v23 = *((_OWORD *)a2 + 2);
      *(_OWORD *)uint64_t result = *(_OWORD *)a2;
      *((_OWORD *)result + 1) = v24;
      *((_OWORD *)result + 2) = v23;
      *((_OWORD *)a2 + 1) = v21;
      *((_OWORD *)a2 + 2) = v22;
      *(_OWORD *)a2 = v20;
      if (*a3 <= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      long long v6 = *((_OWORD *)a2 + 1);
      long long v7 = *((_OWORD *)a2 + 2);
      long long v26 = *((_OWORD *)a3 + 1);
      long long v25 = *((_OWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      *((_OWORD *)a2 + 2) = v25;
    }
    else
    {
      long long v5 = *(_OWORD *)result;
      long long v6 = *((_OWORD *)result + 1);
      long long v7 = *((_OWORD *)result + 2);
      long long v9 = *((_OWORD *)a3 + 1);
      long long v8 = *((_OWORD *)a3 + 2);
      *(_OWORD *)uint64_t result = *(_OWORD *)a3;
      *((_OWORD *)result + 1) = v9;
      *((_OWORD *)result + 2) = v8;
    }
    *((_OWORD *)a3 + 1) = v6;
    *((_OWORD *)a3 + 2) = v7;
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRFormDetector detectFormFieldsInImage:document:outputCandidateResults:]::$_2 &,anonymous namespace'::FieldCandidateEntry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (_OWORD *)(a2 - 48);
      if (*(float *)(a2 - 48) > *(float *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        long long v9 = *(_OWORD *)(a1 + 32);
        long long v11 = *(_OWORD *)(a2 - 32);
        long long v10 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v10;
        *(_OWORD *)(a2 - 32) = v8;
        *(_OWORD *)(a2 - 16) = v9;
        *long long v6 = v7;
      }
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      long long v21 = (float *)(a1 + 48);
      long long v22 = (float *)(a1 + 96);
      long long v23 = (float *)(a1 + 144);
      float v25 = *(float *)(a2 - 48);
      long long v24 = (_OWORD *)(a2 - 48);
      if (v25 <= *(float *)(a1 + 144)) {
        return 1;
      }
      long long v26 = *(_OWORD *)v23;
      long long v27 = *(_OWORD *)(a1 + 160);
      long long v28 = *(_OWORD *)(a1 + 176);
      long long v30 = v24[1];
      long long v29 = v24[2];
      *(_OWORD *)long long v23 = *v24;
      *(_OWORD *)(a1 + 160) = v30;
      *(_OWORD *)(a1 + 176) = v29;
      v24[1] = v27;
      void v24[2] = v28;
      *long long v24 = v26;
      if (*v23 <= *v22) {
        return 1;
      }
      long long v32 = *(_OWORD *)(a1 + 112);
      long long v31 = *(_OWORD *)(a1 + 128);
      long long v33 = *(_OWORD *)v22;
      long long v34 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)long long v22 = *(_OWORD *)v23;
      *(_OWORD *)(a1 + 112) = v34;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)long long v23 = v33;
      *(_OWORD *)(a1 + 160) = v32;
      *(_OWORD *)(a1 + 176) = v31;
      if (*v22 <= *v21) {
        return 1;
      }
      long long v36 = *(_OWORD *)(a1 + 64);
      long long v35 = *(_OWORD *)(a1 + 80);
      long long v37 = *(_OWORD *)v21;
      long long v38 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)long long v21 = *(_OWORD *)v22;
      *(_OWORD *)(a1 + 64) = v38;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)long long v22 = v37;
      *(_OWORD *)(a1 + 112) = v36;
      *(_OWORD *)(a1 + 128) = v35;
      if (*(float *)(a1 + 48) <= *(float *)a1) {
        return 1;
      }
      long long v40 = *(_OWORD *)(a1 + 16);
      long long v39 = *(_OWORD *)(a1 + 32);
      long long v41 = *(_OWORD *)a1;
      long long v42 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)a1 = *(_OWORD *)v21;
      *(_OWORD *)(a1 + 16) = v42;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)long long v21 = v41;
      *(_OWORD *)(a1 + 64) = v40;
      BOOL result = 1;
      *(_OWORD *)(a1 + 80) = v39;
      return result;
    default:
      long long v12 = (float *)(a1 + 96);
      uint64_t v13 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    float v16 = *(float *)v13;
    if (*(float *)v13 > *v12)
    {
      long long v43 = *(_OWORD *)(v13 + 4);
      *(_OWORD *)unint64_t v44 = *(_OWORD *)(v13 + 20);
      *(_OWORD *)&v44[12] = *(_OWORD *)(v13 + 32);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 112);
        *(_OWORD *)(v18 + 144) = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 160) = v19;
        *(_OWORD *)(v18 + 176) = *(_OWORD *)(a1 + v17 + 128);
        if (v17 == -96) {
          break;
        }
        v17 -= 48;
        if (v16 <= *(float *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(float *)uint64_t v20 = v16;
      *(_OWORD *)(v20 + 4) = v43;
      *(_OWORD *)(v20 + 20) = *(_OWORD *)v44;
      *(_OWORD *)(v20 + 32) = *(_OWORD *)&v44[12];
      if (++v15 == 8) {
        return v13 + 48 == a2;
      }
    }
    long long v12 = (float *)v13;
    v14 += 48;
    v13 += 48;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRFormDetector detectFormFieldsInImage:document:outputCandidateResults:]::$_2 &,anonymous namespace'::FieldCandidateEntry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u32[0] = *(_DWORD *)a4;
  if (*(float *)a4 > *(float *)a3)
  {
    __n128 result = *(__n128 *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    long long v10 = *(_OWORD *)(a3 + 32);
    long long v12 = *(_OWORD *)(a4 + 16);
    long long v11 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)(a4 + 16) = v9;
    *(_OWORD *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    result.n128_u32[0] = *(_DWORD *)a3;
    if (*(float *)a3 > *(float *)a2)
    {
      __n128 result = *(__n128 *)a2;
      long long v13 = *(_OWORD *)(a2 + 16);
      long long v14 = *(_OWORD *)(a2 + 32);
      long long v16 = *(_OWORD *)(a3 + 16);
      long long v15 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_OWORD *)(a2 + 32) = v15;
      *(_OWORD *)(a3 + 16) = v13;
      *(_OWORD *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      result.n128_u32[0] = *(_DWORD *)a2;
      if (*(float *)a2 > *(float *)a1)
      {
        __n128 result = *(__n128 *)a1;
        long long v17 = *(_OWORD *)(a1 + 16);
        long long v18 = *(_OWORD *)(a1 + 32);
        long long v20 = *(_OWORD *)(a2 + 16);
        long long v19 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_OWORD *)(a1 + 32) = v19;
        *(_OWORD *)(a2 + 16) = v17;
        *(_OWORD *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRFormDetector detectFormFieldsInImage:document:outputCandidateResults:]::$_3 &,anonymous namespace'::FieldCandidateEntry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (_OWORD *)(a2 - 48);
      if (*(float *)(a2 - 48) > *(float *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        long long v9 = *(_OWORD *)(a1 + 32);
        long long v11 = *(_OWORD *)(a2 - 32);
        long long v10 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v10;
        *(_OWORD *)(a2 - 32) = v8;
        *(_OWORD *)(a2 - 16) = v9;
        *long long v6 = v7;
      }
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      long long v21 = (float *)(a1 + 48);
      long long v22 = (float *)(a1 + 96);
      long long v23 = (float *)(a1 + 144);
      float v25 = *(float *)(a2 - 48);
      long long v24 = (_OWORD *)(a2 - 48);
      if (v25 <= *(float *)(a1 + 144)) {
        return 1;
      }
      long long v26 = *(_OWORD *)v23;
      long long v27 = *(_OWORD *)(a1 + 160);
      long long v28 = *(_OWORD *)(a1 + 176);
      long long v30 = v24[1];
      long long v29 = v24[2];
      *(_OWORD *)long long v23 = *v24;
      *(_OWORD *)(a1 + 160) = v30;
      *(_OWORD *)(a1 + 176) = v29;
      v24[1] = v27;
      void v24[2] = v28;
      *long long v24 = v26;
      if (*v23 <= *v22) {
        return 1;
      }
      long long v32 = *(_OWORD *)(a1 + 112);
      long long v31 = *(_OWORD *)(a1 + 128);
      long long v33 = *(_OWORD *)v22;
      long long v34 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)long long v22 = *(_OWORD *)v23;
      *(_OWORD *)(a1 + 112) = v34;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)long long v23 = v33;
      *(_OWORD *)(a1 + 160) = v32;
      *(_OWORD *)(a1 + 176) = v31;
      if (*v22 <= *v21) {
        return 1;
      }
      long long v36 = *(_OWORD *)(a1 + 64);
      long long v35 = *(_OWORD *)(a1 + 80);
      long long v37 = *(_OWORD *)v21;
      long long v38 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)long long v21 = *(_OWORD *)v22;
      *(_OWORD *)(a1 + 64) = v38;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)long long v22 = v37;
      *(_OWORD *)(a1 + 112) = v36;
      *(_OWORD *)(a1 + 128) = v35;
      if (*(float *)(a1 + 48) <= *(float *)a1) {
        return 1;
      }
      long long v40 = *(_OWORD *)(a1 + 16);
      long long v39 = *(_OWORD *)(a1 + 32);
      long long v41 = *(_OWORD *)a1;
      long long v42 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)a1 = *(_OWORD *)v21;
      *(_OWORD *)(a1 + 16) = v42;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)long long v21 = v41;
      *(_OWORD *)(a1 + 64) = v40;
      BOOL result = 1;
      *(_OWORD *)(a1 + 80) = v39;
      return result;
    default:
      long long v12 = (float *)(a1 + 96);
      uint64_t v13 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    float v16 = *(float *)v13;
    if (*(float *)v13 > *v12)
    {
      long long v43 = *(_OWORD *)(v13 + 4);
      *(_OWORD *)unint64_t v44 = *(_OWORD *)(v13 + 20);
      *(_OWORD *)&v44[12] = *(_OWORD *)(v13 + 32);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 112);
        *(_OWORD *)(v18 + 144) = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 160) = v19;
        *(_OWORD *)(v18 + 176) = *(_OWORD *)(a1 + v17 + 128);
        if (v17 == -96) {
          break;
        }
        v17 -= 48;
        if (v16 <= *(float *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(float *)uint64_t v20 = v16;
      *(_OWORD *)(v20 + 4) = v43;
      *(_OWORD *)(v20 + 20) = *(_OWORD *)v44;
      *(_OWORD *)(v20 + 32) = *(_OWORD *)&v44[12];
      if (++v15 == 8) {
        return v13 + 48 == a2;
      }
    }
    long long v12 = (float *)v13;
    v14 += 48;
    v13 += 48;
    if (v13 == a2) {
      return 1;
    }
  }
}

void sub_1DD777964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,void **a29)
{
  a29 = a27;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a29);

  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  float v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      long long v8 = v3;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::vector<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    int v15 = v12;
    float v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(&v15);
  }
}

void sub_1DD777D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  unint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    float v3 = v1;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<float>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void sub_1DD777FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77807C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7782A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD778374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77847C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7785A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7786E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD778878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD778A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD778E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1DD779150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7792F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<PixelPosition>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1DD7794A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD779534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77969C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1DD7797CC(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1DD77A980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  _Block_object_dispose(&a54, 8);
  _Unwind_Resume(a1);
}

void sub_1DD77AFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1DD77B1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77B3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, ...)
{
  va_start(va, a13);
  uint64_t v18 = v17;

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD77B4D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77BAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77BB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD77C2D0(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1DD77C4F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77C930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD77CAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD77D36C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void CRTableStructureRecognizerInputFeatures::freeImageBuffer(CRTableStructureRecognizerInputFeatures *this)
{
  data = this->var2.data;
  if (data)
  {
    free(data);
    this->var2.data = 0;
  }
}

void CRTableStructureRecognizerInputFeatures::~CRTableStructureRecognizerInputFeatures(CRTableStructureRecognizerInputFeatures *this)
{
  data = this->var2.data;
  if (data)
  {
    free(data);
    this->var2.data = 0;
  }
  var0 = this->var1.var0;
  if (var0)
  {
    this->var1.var1 = var0;
    operator delete(var0);
  }
  uint64_t v4 = this->var0.var0;
  if (this->var0.var0)
  {
    this->var0.var1 = v4;
    operator delete(v4);
  }
}

void sub_1DD77E548(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD77E6EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD77EA0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 104) = v2;
  _Unwind_Resume(a1);
}

void sub_1DD77EA14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 104) = v2;
  _Unwind_Resume(a1);
}

void sub_1DD77EC8C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void CRTableStructureRecognizerResultParsed::~CRTableStructureRecognizerResultParsed(CRTableStructureRecognizerResultParsed *this)
{
  std::vector<int>::pointer begin = this->merges.__begin_;
  if (begin)
  {
    this->merges.__end_ = begin;
    operator delete(begin);
  }
  uint64_t v3 = this->columnWidths.__begin_;
  if (v3)
  {
    this->columnWidths.__end_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = this->rowHeights.__begin_;
  if (v4)
  {
    this->rowHeights.__end_ = v4;
    operator delete(v4);
  }
}

void sub_1DD77EF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77F734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void sub_1DD77F90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77FA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77FD04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD77FEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7800E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD780EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, CRTableStructureRecognizerResultParsed *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, CRTableStructureRecognizerResultParsed *a20,CRTableStructureRecognizerInputFeatures *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,CRTableStructureRecognizerResultParsed *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CRTableStructureRecognizerResultParsed::~CRTableStructureRecognizerResultParsed((CRTableStructureRecognizerResultParsed *)&STACK[0x220]);
  CRTableStructureRecognizerInputFeatures::~CRTableStructureRecognizerInputFeatures((CRTableStructureRecognizerInputFeatures *)&a51);

  if (__pa)
  {
    a69 = __pa;
    operator delete(__pa);
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_1DD781DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  long long v40 = *(void **)(v38 - 256);
  if (v40)
  {
    *(void *)(v38 - 248) = v40;
    operator delete(v40);
  }

  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    uint64_t v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    std::__split_buffer<std::string>::pointer end = this->__end_;
    char v12 = v7;
    if (end != this->__begin_)
    {
      char v12 = v7;
      do
      {
        int v13 = *--end;
        *--char v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void sub_1DD7821B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD782A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  long long v33 = *(void **)(v31 - 160);
  if (v33)
  {
    *(void *)(v31 - 152) = v33;
    operator delete(v33);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a28) {
    operator delete(a28);
  }
  CRTableStructureRecognizerResultParsed::~CRTableStructureRecognizerResultParsed(v30);

  _Unwind_Resume(a1);
}

void sub_1DD783838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  _Unwind_Resume(a1);
}

void sub_1DD783FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  _Unwind_Resume(a1);
}

CRNormalizedQuad *transformRectWithHomography(CGRect a1, CGSize a2, simd_float3x3 a3)
{
  CGFloat width = a2.width;
  float x = a1.origin.x;
  *(float *)v11.i32 = a1.origin.y;
  float32x4_t v13 = (float32x4_t)vdupq_lane_s32(v11, 0);
  float32x4_t v14 = vmulq_n_f32((float32x4_t)a3.columns[0], x);
  float32x4_t v15 = vaddq_f32((float32x4_t)a3.columns[2], vmlaq_n_f32(v14, (float32x4_t)a3.columns[1], *(float *)v11.i32));
  if (v15.f32[2] == 0.0)
  {
    double v16 = a1.origin.x;
    double y = a1.origin.y;
  }
  else
  {
    double v16 = (float)(v15.f32[0] / v15.f32[2]);
    double y = (float)(v15.f32[1] / v15.f32[2]);
  }
  double v18 = a1.origin.x + a1.size.width;
  float v19 = v18;
  float32x4_t v20 = vmulq_n_f32((float32x4_t)a3.columns[0], v19);
  float32x4_t v22 = vaddq_f32((float32x4_t)a3.columns[2], vmlaq_f32(v20, v13, (float32x4_t)a3.columns[1]));
  double v21 = (float)(v22.f32[0] / v22.f32[2]);
  *(double *)v22.i64 = (float)(v22.f32[1] / v22.f32[2]);
  if (v22.f32[2] == 0.0) {
    double v23 = v18;
  }
  else {
    double v23 = v21;
  }
  if (v22.f32[2] == 0.0) {
    double v24 = a1.origin.y;
  }
  else {
    double v24 = *(double *)v22.i64;
  }
  double v25 = a1.origin.y + a1.size.height;
  *(float *)&a1.size.double height = v25;
  float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a1.size.height, 0);
  float32x4_t v28 = vaddq_f32((float32x4_t)a3.columns[2], vmlaq_n_f32(v20, (float32x4_t)a3.columns[1], *(float *)&a1.size.height));
  double v27 = (float)(v28.f32[0] / v28.f32[2]);
  *(double *)v28.i64 = (float)(v28.f32[1] / v28.f32[2]);
  if (v28.f32[2] == 0.0) {
    double v29 = v18;
  }
  else {
    double v29 = v27;
  }
  if (v28.f32[2] == 0.0) {
    double v30 = v25;
  }
  else {
    double v30 = *(double *)v28.i64;
  }
  float32x4_t v32 = vaddq_f32((float32x4_t)a3.columns[2], vmlaq_f32(v14, v26, (float32x4_t)a3.columns[1]));
  double v31 = (float)(v32.f32[0] / v32.f32[2]);
  *(double *)v32.i64 = (float)(v32.f32[1] / v32.f32[2]);
  if (v32.f32[2] == 0.0) {
    double v33 = a1.origin.x;
  }
  else {
    double v33 = v31;
  }
  if (v32.f32[2] == 0.0) {
    double v34 = v25;
  }
  else {
    double v34 = *(double *)v32.i64;
  }
  long long v35 = -[CRNormalizedQuad initWithNormalizedTopLeft:topRight:bottomRight:bottomLeft:size:]([CRNormalizedQuad alloc], "initWithNormalizedTopLeft:topRight:bottomRight:bottomLeft:size:", v16, y, v23, v24, v29, v30, v33, v34, *(void *)&width, *(void *)&a2.height);
  return v35;
}

void sub_1DD784384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD78473C(_Unwind_Exception *a1)
{
  int64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD7848C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRTableStructureColumn>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

char *std::vector<CRTableStructureRow>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTableStructureColumn>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::vector<CRTableStructureMerge>::__init_with_size[abi:ne180100]<CRTableStructureMerge*,CRTableStructureMerge*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CRTableStructureRow>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD7849B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CRTableStructureMerge>::__assign_with_size[abi:ne180100]<CRTableStructureMerge*,CRTableStructureMerge*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      BOOL v7[2] = 0;
    }
    if (a4 >> 59) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<CRTableStructureRow>::__vallocate[abi:ne180100](v7, v11);
    float32x4_t v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v12 = (void **)(result + 8);
  float32x4_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  double v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    float v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *char v12 = &v9[v17];
  return result;
}

void *std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DD784B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      _WORD v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1DD784C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 8);
    uint64_t v3 = **(void **)(a1 + 16);
    if (v3 != v2)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        int64_t v5 = v6;
        if (v6)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((char *)v5 != a3) {
        std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(a3, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::vector<CGRect>::__init_with_size[abi:ne180100]<CGRect*,CGRect*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CGRect>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD784D48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<_NSRange>::__init_with_size[abi:ne180100]<_NSRange*,_NSRange*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<_NSRange>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD784DC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<_NSRange>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

char *std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      BOOL v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<_NSRange>::__vallocate[abi:ne180100](v7, v11);
    float32x4_t v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    char v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v12 = (void **)(result + 8);
  float32x4_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  double v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    char v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    float v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *char v12 = &v9[v17];
  return result;
}

void **std::unique_ptr<CoreRecognition::EspressoModelWrapper>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreRecognition::EspressoModelWrapper::~EspressoModelWrapper(result);
    JUMPOUT(0x1E01BF140);
  }
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DD7850A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<_NSRange>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_NSRange>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1DD785120(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<unsigned long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DD7851CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void BreakPoint::BreakPoint(BreakPoint *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

uint64_t BreakPoint::BreakPoint(uint64_t a1, int a2, int a3, int a4, void *a5, void *a6, double a7)
{
  id v13 = a5;
  id v14 = a6;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
  *(double *)(a1 + 32) = a7;
  return a1;
}

{
  id v13;
  id v14;

  id v13 = a5;
  id v14 = a6;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
  *(double *)(a1 + 32) = a7;
  return a1;
}

BOOL BreakPoint::operator<(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return *(double *)(a1 + 32) < *(double *)(a2 + 32);
  }
  else {
    return *(_DWORD *)a1 < *(_DWORD *)a2;
  }
}

void Segmenter::Segmenter(Segmenter *this, NSArray *a2, CRImage *a3, NSString *a4, char a5, char a6, char a7, char a8, int a9)
{
  double v16 = a2;
  size_t v17 = a3;
  double v18 = a4;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = 0;
  float v19 = v16;
  *((void *)this + 5) = v19;
  float32x4_t v20 = v17;
  *((void *)this + 6) = v20;
  double v21 = v18;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 7) = v21;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((unsigned char *)this + 112) = a5;
  *((unsigned char *)this + 113) = a6;
  *((unsigned char *)this + 114) = a7;
  *((unsigned char *)this + 116) = a8;
  *((_DWORD *)this + 30) = a9;
  *((unsigned char *)this + 115) = 1;
  uint64_t v22 = [MEMORY[0x1E4F1CA48] array];
  double v23 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v22;

  uint64_t v24 = [MEMORY[0x1E4F1CA48] array];
  double v25 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v24;

  Segmenter::presegmentFeatures((id *)this);
  Segmenter::addSegmentationLayer((id *)this, 0, 0);
}

{
  Segmenter::Segmenter(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1DD785428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  double v16 = *(void **)(v10 + 88);
  if (v16)
  {
    *(void *)(v10 + 96) = v16;
    operator delete(v16);
  }
  size_t v17 = *v14;
  if (*v14)
  {
    *(void *)(v10 + 72) = v17;
    operator delete(v17);
  }

  a10 = (void **)v10;
  std::vector<std::vector<std::vector<BreakPoint>>>::__destroy_vector::operator()[abi:ne180100](&a10);

  _Unwind_Resume(a1);
}

void Segmenter::presegmentFeatures(id *this)
{
  uint64_t v1 = this;
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = [this[5] count];
  uint64_t v3 = *v1;
  uint64_t v4 = (char *)v1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*v1) >> 3);
  unint64_t v6 = v2 - v5;
  CGPoint v100 = v1;
  if (v2 <= v5)
  {
    if (v2 < v5)
    {
      float32x4_t v20 = &v3[24 * v2];
      while (v4 != v20)
      {
        v4 -= 24;
        CGPoint v105 = v4;
        std::vector<std::vector<BreakPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      }
      v1[1] = v20;
    }
  }
  else
  {
    uint64_t v7 = v1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      bzero(v4, 24 * ((24 * v6 - 24) / 0x18) + 24);
      v1[1] = &v4[24 * ((24 * v6 - 24) / 0x18) + 24];
    }
    else
    {
      if (v2 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= v2) {
        uint64_t v9 = v2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v1 + 2), v10);
      char v12 = &v11[24 * v5];
      id v14 = &v11[24 * v13];
      bzero(v12, 24 * ((24 * v6 - 24) / 0x18) + 24);
      unint64_t v15 = &v12[24 * ((24 * v6 - 24) / 0x18) + 24];
      double v16 = (char *)*v100;
      size_t v17 = (char *)v100[1];
      if (v17 == *v100)
      {
        *CGPoint v100 = v12;
        v100[1] = v15;
        v100[2] = v14;
        uint64_t v1 = v100;
      }
      else
      {
        do
        {
          *((void *)v12 - 3) = 0;
          *((void *)v12 - 2) = 0;
          v12 -= 24;
          *((void *)v12 + 2) = 0;
          long long v18 = *(_OWORD *)(v17 - 24);
          v17 -= 24;
          *(_OWORD *)char v12 = v18;
          *((void *)v12 + 2) = *((void *)v17 + 2);
          *(void *)size_t v17 = 0;
          *((void *)v17 + 1) = 0;
          *((void *)v17 + 2) = 0;
        }
        while (v17 != v16);
        size_t v17 = (char *)*v100;
        float v19 = (char *)v100[1];
        *CGPoint v100 = v12;
        v100[1] = v15;
        v100[2] = v14;
        uint64_t v1 = v100;
        while (v19 != v17)
        {
          v19 -= 24;
          CGPoint v105 = v19;
          std::vector<std::vector<BreakPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
        }
      }
      if (v17) {
        operator delete(v17);
      }
    }
  }
  uint64_t v98 = v1 + 8;
  std::vector<double>::resize((uint64_t)(v1 + 8), [v1[5] count]);
  CGPoint v97 = v1 + 11;
  std::vector<double>::resize((uint64_t)(v1 + 11), [v1[5] count]);
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  obunint64_t j = v1[5];
  uint64_t v21 = [obj countByEnumeratingWithState:&v107 objects:v112 count:16];
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v96 = *(void *)v108;
    do
    {
      uint64_t v23 = 0;
      uint64_t v99 = v21;
      do
      {
        if (*(void *)v108 != v96) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = *(CRTextFeature **)(*((void *)&v107 + 1) + 8 * v23);
        [(CRTextFeature *)v24 updateSizeHints];
        double v25 = [(CRTextFeature *)v24 subFeatures];
        std::vector<double>::vector(&v105, [v25 count]);

        for (unint64_t i = 0; ; ++i)
        {
          double v27 = [(CRTextFeature *)v24 subFeatures];
          BOOL v28 = i < [v27 count];

          if (!v28) {
            break;
          }
          double v29 = [(CRTextFeature *)v24 subFeatures];
          double v30 = [v29 objectAtIndexedSubscript:i];

          [v30 bounds];
          *((void *)v105 + i) = v31;
        }
        std::__sort<std::__less<double,double> &,double *>();
        uint64_t v32 = v106 - (unsigned char *)v105;
        if (v106 == v105)
        {
          double v34 = 0.0;
        }
        else
        {
          unint64_t v33 = (unint64_t)(v32 >> 3) >> 1;
          double v34 = *((double *)v105 + v33);
          if ((v32 & 8) == 0) {
            double v34 = (v34 + *((double *)v105 + v33 - 1)) * 0.5;
          }
        }
        long long v35 = [(CRTextFeature *)v24 subFeatures];
        std::vector<double>::vector(&v103, [v35 count]);

        for (unint64_t j = 0; ; ++j)
        {
          long long v37 = [(CRTextFeature *)v24 subFeatures];
          BOOL v38 = j < [v37 count];

          if (!v38) {
            break;
          }
          long long v39 = [(CRTextFeature *)v24 subFeatures];
          long long v40 = [v39 objectAtIndexedSubscript:j];

          [v40 bounds];
          *((void *)v103 + j) = v41;
        }
        std::__sort<std::__less<double,double> &,double *>();
        uint64_t v42 = v104 - (unsigned char *)v103;
        if (v104 == v103)
        {
          double v44 = 0.0;
        }
        else
        {
          unint64_t v43 = (unint64_t)(v42 >> 3) >> 1;
          double v44 = *((double *)v103 + v43);
          if ((v42 & 8) == 0) {
            double v44 = (v44 + *((double *)v103 + v43 - 1)) * 0.5;
          }
        }
        unint64_t v45 = [(CRTextFeature *)v24 subFeatures];
        BOOL v46 = (unint64_t)[v45 count] > 1;

        double v47 = 0.0;
        if (v46)
        {
          unint64_t v48 = [(CRTextFeature *)v24 subFeatures];
          std::vector<double>::vector(&__p, [v48 count] - 1);

          for (uint64_t k = 0; ; ++k)
          {
            uint64_t v50 = [(CRTextFeature *)v24 subFeatures];
            BOOL v51 = k + 1 < (unint64_t)[v50 count];

            if (!v51) {
              break;
            }
            unint64_t v52 = [(CRTextFeature *)v24 subFeatures];
            uint64_t v53 = [v52 objectAtIndexedSubscript:k];

            CGRect v54 = [(CRTextFeature *)v24 subFeatures];
            CGRect v55 = [v54 objectAtIndexedSubscript:k + 1];

            [v55 bounds];
            double v57 = v56;
            [v53 bounds];
            double v59 = v58;
            [v53 bounds];
            *((double *)__p + k) = v57 - (v59 + v60);
          }
          std::__sort<std::__less<double,double> &,double *>();
          uint64_t v61 = v102 - (unsigned char *)__p;
          if (v102 == __p)
          {
            double v63 = 0.0;
          }
          else
          {
            unint64_t v62 = (unint64_t)(v61 >> 3) >> 1;
            double v63 = *((double *)__p + v62);
            if ((v61 & 8) == 0) {
              double v63 = (v63 + *((double *)__p + v62 - 1)) * 0.5;
            }
          }
          unint64_t v64 = [v1[6] width];
          unint64_t v65 = [v1[6] height];
          unint64_t v66 = [v1[6] width];
          if (__p)
          {
            uint64_t v102 = __p;
            operator delete(__p);
          }
          double v47 = fmax(v63 * (double)v64, v44 * 0.136363636 * (double)v65) / (double)v66;
        }
        if (*((unsigned char *)v1 + 112))
        {
          uint64_t v67 = Segmenter::textPiecesAfterGeometricPresegmentationOfTextFeature((Segmenter *)v1, v24, (CRImage *)v1[6]);
        }
        else
        {
          if (*((unsigned char *)v1 + 113))
          {
            CGPoint v111 = v24;
            [MEMORY[0x1E4F1C978] arrayWithObjects:&v111 count:1];
          }
          else
          {
            [(CRTextFeature *)v24 wordFeatures];
          uint64_t v67 = };
        }
        uint64_t v68 = (void *)v67;
        [v100[3] addObject:v67];
        uint64_t v69 = (char *)*v100;
        unint64_t v70 = [v68 count];
        double v71 = &v69[24 * v22];
        uint64_t v72 = (char **)(v71 + 8);
        double v73 = (char *)*((void *)v71 + 1);
        double v74 = *(char **)v71;
        unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v73[-*(void *)v71] >> 3);
        BOOL v76 = v70 >= v75;
        unint64_t v77 = v70 - v75;
        if (v70 <= v75)
        {
          uint64_t v1 = v100;
          if (!v76)
          {
            CGPoint v94 = &v74[24 * v70];
            while (v73 != v94)
            {
              v73 -= 24;
              __p = v73;
              std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            }
            *uint64_t v72 = v94;
          }
        }
        else
        {
          unint64_t v78 = &v69[24 * v22];
          uint64_t v81 = *((void *)v78 + 2);
          uint64_t v80 = (char **)(v78 + 16);
          uint64_t v79 = v81;
          if (0xAAAAAAAAAAAAAAABLL * ((v81 - (uint64_t)v73) >> 3) >= v77)
          {
            bzero(v73, 24 * ((24 * v77 - 24) / 0x18) + 24);
            *uint64_t v72 = &v73[24 * ((24 * v77 - 24) / 0x18) + 24];
            uint64_t v1 = v100;
            goto LABEL_83;
          }
          if (v70 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (uint64_t)v74) >> 3);
          uint64_t v83 = 2 * v82;
          if (2 * v82 <= v70) {
            uint64_t v83 = v70;
          }
          if (v82 >= 0x555555555555555) {
            unint64_t v84 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v84 = v83;
          }
          unint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v80, v84);
          double v86 = &v85[24 * v75];
          long long v88 = &v85[24 * v87];
          bzero(v86, 24 * ((24 * v77 - 24) / 0x18) + 24);
          uint64_t v89 = &v86[24 * ((24 * v77 - 24) / 0x18) + 24];
          double v90 = *v72;
          long long v91 = *(char **)v71;
          if (*v72 == *(char **)v71)
          {
            *(void *)double v71 = v86;
            *uint64_t v72 = v89;
            char *v80 = v88;
LABEL_81:
            uint64_t v1 = v100;
            if (!v90) {
              goto LABEL_83;
            }
LABEL_82:
            operator delete(v90);
            goto LABEL_83;
          }
          do
          {
            *((void *)v86 - 3) = 0;
            *((void *)v86 - 2) = 0;
            v86 -= 24;
            *((void *)v86 + 2) = 0;
            long long v92 = *(_OWORD *)(v90 - 24);
            v90 -= 24;
            *(_OWORD *)double v86 = v92;
            *((void *)v86 + 2) = *((void *)v90 + 2);
            *(void *)double v90 = 0;
            *((void *)v90 + 1) = 0;
            *((void *)v90 + 2) = 0;
          }
          while (v90 != v91);
          double v90 = *(char **)v71;
          long long v93 = *v72;
          *(void *)double v71 = v86;
          *uint64_t v72 = v89;
          char *v80 = v88;
          if (v93 == v90) {
            goto LABEL_81;
          }
          uint64_t v1 = v100;
          do
          {
            v93 -= 24;
            __p = v93;
            std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          }
          while (v93 != v90);
          if (v90) {
            goto LABEL_82;
          }
        }
LABEL_83:
        *(double *)(*v98 + 8 * v22) = v34;
        *(double *)(*v97 + 8 * v22) = v47;

        if (v103)
        {
          vImage_Buffer v104 = v103;
          operator delete(v103);
        }
        if (v105)
        {
          vImage_Buffer v106 = v105;
          operator delete(v105);
        }
        ++v22;
        ++v23;
      }
      while (v23 != v99);
      uint64_t v21 = [obj countByEnumeratingWithState:&v107 objects:v112 count:16];
    }
    while (v21);
  }
}

void sub_1DD785D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  _Unwind_Resume(a1);
}

void Segmenter::addSegmentationLayer(id *this, int a2, int a3)
{
  if (a2 == 1)
  {
    Segmenter::addSegmentationLayerOfTypeFixed(this, a3);
  }
  else if (!a2)
  {
    Segmenter::addSegmentationLayerOfTypeNone(this);
  }
  if ([this[3] count])
  {
    unint64_t v5 = 0;
    do
    {
      for (unint64_t i = 0; ; ++i)
      {
        uint64_t v7 = [this[3] objectAtIndexedSubscript:v5];
        unint64_t v8 = [v7 count];

        if (i >= v8) {
          break;
        }
        uint64_t v9 = (unint64_t *)(*((void *)*this + 3 * v5) + 24 * i);
        unint64_t v10 = v9[1];
        unint64_t v11 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - *v9) >> 3));
        if (v10 == *v9) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = v11;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *,false>(*v9, v10, v12, 1);
        uint64_t v13 = (_DWORD *)*v9;
        id v14 = (_DWORD *)v9[1];
        if ((_DWORD *)*v9 != v14)
        {
          int v15 = 0;
          do
          {
            *uint64_t v13 = v15;
            v13 += 10;
            ++v15;
          }
          while (v13 != v14);
        }
      }
      ++v5;
    }
    while (v5 < [this[3] count]);
  }
  if (a2)
  {
    Segmenter::calculateSubRegions(this);
  }
  else
  {
    Segmenter::initSubRegionsWithInitialFeatures((Segmenter *)this);
  }
}

void sub_1DD786054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Segmenter::Segmenter(Segmenter *this)
{
  *((unsigned char *)this + 115) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
}

{
  *((unsigned char *)this + 115) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
}

void Segmenter::~Segmenter(Segmenter *this)
{
  unint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }

  uint64_t v4 = (void **)this;
  std::vector<std::vector<std::vector<BreakPoint>>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

double Segmenter::medianOfVectorDouble(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  if (!v3) {
    return 0.0;
  }
  unint64_t v4 = (unint64_t)(v3 >> 3) >> 1;
  double result = *(double *)(v2 + 8 * v4);
  if ((v3 & 8) == 0) {
    return (result + *(double *)(v2 + 8 * v4 - 8)) * 0.5;
  }
  return result;
}

id Segmenter::textPiecesAfterGeometricPresegmentationOfTextFeature(Segmenter *this, CRTextFeature *a2, CRImage *a3)
{
  v60[1] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a2;
  double v59 = a3;
  unint64_t v5 = [(CRTextFeature *)v4 subFeatures];
  unint64_t v6 = [v5 count];

  if (v6 > 5)
  {
    int v7 = *((_DWORD *)this + 30);
    if (v7) {
      double v8 = 1.5;
    }
    else {
      double v8 = 1.0;
    }
    if (v7) {
      double v9 = 1.0;
    }
    else {
      double v9 = 0.833333333;
    }
    id v55 = [MEMORY[0x1E4F1CA48] array];
    unint64_t v10 = (void *)MEMORY[0x1E4F1CA48];
    unint64_t v11 = [(CRTextFeature *)v4 subFeatures];
    double v56 = v4;
    uint64_t v12 = [v11 objectAtIndexedSubscript:0];
    double v58 = [v10 arrayWithObject:v12];

    for (uint64_t i = 0; ; ++i)
    {
      id v14 = [(CRTextFeature *)v4 subFeatures];
      unint64_t v15 = [v14 count];

      if (i + 1 >= v15) {
        break;
      }
      unint64_t v16 = [(CRImage *)v59 width];
      size_t v17 = [(CRTextFeature *)v4 subFeatures];
      long long v18 = [v17 objectAtIndexedSubscript:i + 1];
      [v18 bounds];
      double v20 = v19;
      uint64_t v21 = [(CRTextFeature *)v4 subFeatures];
      uint64_t v22 = [v21 objectAtIndexedSubscript:i];
      [v22 bounds];
      double v24 = v23;
      double v25 = [(CRTextFeature *)v4 subFeatures];
      float32x4_t v26 = [v25 objectAtIndexedSubscript:i];
      [v26 bounds];
      double v28 = v27;

      if (i + 1 <= 5) {
        uint64_t v29 = 5;
      }
      else {
        uint64_t v29 = i + 1;
      }
      unint64_t v4 = v56;
      double v30 = [(CRTextFeature *)v56 subFeatures];
      uint64_t v31 = [v30 count];
      NSUInteger v32 = v29 - 5;
      if (v31 >= i + 6) {
        uint64_t v33 = i + 6;
      }
      else {
        uint64_t v33 = v31;
      }

      NSUInteger v34 = v33 - v29 + 6;
      v62.NSUInteger location = v29 - 5;
      v62.NSUInteger length = v34;
      double v36 = fmax(Segmenter::medianInterSubfeatureSpacingForFeature(v35, v56, v62), 0.0);
      if (*((unsigned char *)this + 116))
      {
        long long v37 = [(CRTextFeature *)v56 subFeatures];
        BOOL v38 = [v37 objectAtIndexedSubscript:i + 1];
        if (Segmenter::isNarrowChar(this, v38, v59))
        {
          BOOL isNarrowChar = 1;
        }
        else
        {
          unint64_t v45 = [(CRTextFeature *)v56 subFeatures];
          BOOL v46 = [v45 objectAtIndexedSubscript:i];
          BOOL isNarrowChar = Segmenter::isNarrowChar(this, v46, v59);
        }
        unint64_t v4 = v56;

        double v47 = [(CRImage *)v59 width];
        v64.NSUInteger location = v32;
        v64.NSUInteger length = v34;
        double v41 = Segmenter::medianSubfeatureHeightForFeature(v47, v56, v64);
        if (isNarrowChar) {
          double v48 = v8;
        }
        else {
          double v48 = v9;
        }
        unint64_t v42 = [(CRImage *)v59 height];
        double v43 = v36 * (v48 * 3.0);
        double v44 = (double)(unint64_t)v47;
      }
      else
      {
        long long v40 = [(CRImage *)v59 width];
        v63.NSUInteger location = v29 - 5;
        v63.NSUInteger length = v33 - v29 + 6;
        double v41 = Segmenter::medianSubfeatureHeightForFeature(v40, v56, v63);
        unint64_t v42 = [(CRImage *)v59 height];
        double v43 = v36 * 3.0;
        double v44 = (double)(unint64_t)v40;
      }
      if ((v20 - (v24 + v28)) * (double)v16 > fmax(v43 * v44, v41 * 0.5 * (double)v42))
      {
        unint64_t v49 = [[CRTextFeature alloc] initWithSubfeatures:v58];
        [v55 addObject:v49];

        uint64_t v50 = [MEMORY[0x1E4F1CA48] array];

        double v58 = (void *)v50;
      }
      BOOL v51 = [(CRTextFeature *)v4 subFeatures];
      unint64_t v52 = [v51 objectAtIndexedSubscript:i + 1];
      [v58 addObject:v52];
    }
    uint64_t v53 = [[CRTextFeature alloc] initWithSubfeatures:v58];
    [v55 addObject:v53];
  }
  else
  {
    v60[0] = v4;
    id v55 = [MEMORY[0x1E4F1C978] arrayWithObjects:v60 count:1];
  }

  return v55;
}

void sub_1DD786630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void Segmenter::addSegmentationLayerOfTypeNone(id *this)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  obunint64_t j = this[3];
  uint64_t v1 = [obj countByEnumeratingWithState:&v86 objects:v96 count:16];
  if (v1)
  {
    uint64_t v74 = 0;
    uint64_t v69 = *(void *)v87;
    do
    {
      uint64_t v2 = 0;
      uint64_t v68 = v1;
      do
      {
        if (*(void *)v87 != v69) {
          objc_enumerationMutation(obj);
        }
        uint64_t v70 = v2;
        uint64_t v3 = *(void **)(*((void *)&v86 + 1) + 8 * v2);
        long long v82 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        id v71 = v3;
        uint64_t v4 = [v71 countByEnumeratingWithState:&v82 objects:v95 count:16];
        if (v4)
        {
          uint64_t v79 = 0;
          uint64_t v73 = *(void *)v83;
          do
          {
            uint64_t v80 = 0;
            uint64_t v75 = v4;
            do
            {
              if (*(void *)v83 != v73) {
                objc_enumerationMutation(v71);
              }
              unint64_t v5 = *(void **)(*((void *)&v82 + 1) + 8 * v80);
              uint64_t v6 = *((void *)*this + 3 * v74);
              int v7 = [v5 subFeatures];
              BOOL v76 = [v7 firstObject];

              [v76 bounds];
              uint64_t v9 = v8;
              id v11 = v76;
              unint64_t v10 = (uint64_t *)(v6 + 24 * v79);
              uint64_t v13 = (unint64_t *)(v10 + 1);
              unint64_t v12 = v10[1];
              unint64_t v15 = (unint64_t *)(v10 + 2);
              unint64_t v14 = v10[2];
              uint64_t v81 = v10;
              unint64_t v78 = v11;
              if (v12 >= v14)
              {
                unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *v10) >> 3);
                unint64_t v18 = v17 + 1;
                if (v17 + 1 > 0x666666666666666) {
                  std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - *v10) >> 3);
                if (2 * v19 > v18) {
                  unint64_t v18 = 2 * v19;
                }
                if (v19 >= 0x333333333333333) {
                  unint64_t v20 = 0x666666666666666;
                }
                else {
                  unint64_t v20 = v18;
                }
                CGPoint v94 = v10 + 2;
                uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(v10 + 2), v20);
                uint64_t v22 = &v21[40 * v17];
                double v90 = v21;
                long long v91 = v22;
                long long v93 = &v21[40 * v23];
                *(void *)uint64_t v22 = 0;
                *((_DWORD *)v22 + 2) = 0;
                *((void *)v22 + 2) = 0;
                *((void *)v22 + 3) = v78;
                *((void *)v22 + 4) = v9;
                long long v92 = v22 + 40;
                std::vector<BreakPoint>::__swap_out_circular_buffer(v10, &v90);
                unint64_t v16 = *v13;
                std::__split_buffer<BreakPoint>::~__split_buffer((uint64_t)&v90);
              }
              else
              {
                *(void *)unint64_t v12 = 0;
                *(_DWORD *)(v12 + 8) = 0;
                *(void *)(v12 + 16) = 0;
                *(void *)(v12 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
                unint64_t v16 = v12 + 40;
                *(void *)(v12 + 32) = v9;
              }
              *uint64_t v13 = v16;
              double v24 = [v5 subFeatures];
              double v25 = [v24 lastObject];

              float32x4_t v26 = [v5 subFeatures];
              int v27 = [v26 count];
              [v25 bounds];
              double v29 = v28;
              [v25 bounds];
              double v31 = v29 + v30;
              id v32 = v25;
              unint64_t v33 = *v13;
              unint64_t v77 = v32;
              if (*v13 >= *v15)
              {
                unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - *v10) >> 3);
                unint64_t v36 = v35 + 1;
                if (v35 + 1 > 0x666666666666666) {
                  std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
                }
                if (0x999999999999999ALL * ((uint64_t)(*v15 - *v10) >> 3) > v36) {
                  unint64_t v36 = 0x999999999999999ALL * ((uint64_t)(*v15 - *v10) >> 3);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v15 - *v10) >> 3) >= 0x333333333333333) {
                  unint64_t v37 = 0x666666666666666;
                }
                else {
                  unint64_t v37 = v36;
                }
                CGPoint v94 = v10 + 2;
                BOOL v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(v10 + 2), v37);
                long long v39 = &v38[40 * v35];
                double v90 = v38;
                long long v91 = v39;
                long long v93 = &v38[40 * v40];
                *((_DWORD *)v39 + 1) = 0;
                *((_DWORD *)v39 + 2) = 0;
                *(_DWORD *)long long v39 = v27;
                *((void *)v39 + 2) = v77;
                *((void *)v39 + 3) = 0;
                *((double *)v39 + 4) = v31;
                long long v92 = v39 + 40;
                std::vector<BreakPoint>::__swap_out_circular_buffer(v10, &v90);
                unint64_t v34 = *v13;
                std::__split_buffer<BreakPoint>::~__split_buffer((uint64_t)&v90);
              }
              else
              {
                *(_DWORD *)(v33 + 4) = 0;
                *(_DWORD *)(v33 + 8) = 0;
                *(_DWORD *)unint64_t v33 = v27;
                *(void *)(v33 + 16) = v32;
                *(void *)(v33 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                unint64_t v34 = v33 + 40;
                *(double *)(v33 + 32) = v31;
              }
              *uint64_t v13 = v34;

              double v41 = [v5 subFeatures];
              BOOL v42 = [v41 count] == 0;

              if (!v42)
              {
                for (uint64_t i = 1; ; ++i)
                {
                  double v44 = [v5 subFeatures];
                  BOOL v45 = [v44 count] - 1 > (unint64_t)(i - 1);

                  if (!v45) {
                    break;
                  }
                  BOOL v46 = [v5 subFeatures];
                  double v47 = [v46 objectAtIndexedSubscript:i - 1];

                  double v48 = [v5 subFeatures];
                  unint64_t v49 = [v48 objectAtIndexedSubscript:i];

                  [v47 bounds];
                  double v51 = v50;
                  [v47 bounds];
                  double v53 = v52;
                  [v49 bounds];
                  double v55 = (v51 + v53 + v54) * 0.5;
                  id v56 = v47;
                  id v57 = v49;
                  double v58 = v57;
                  unint64_t v59 = *v13;
                  if (*v13 >= *v15)
                  {
                    unint64_t v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - *v81) >> 3);
                    unint64_t v62 = v61 + 1;
                    if (v61 + 1 > 0x666666666666666) {
                      std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x999999999999999ALL * ((uint64_t)(*v15 - *v81) >> 3) > v62) {
                      unint64_t v62 = 0x999999999999999ALL * ((uint64_t)(*v15 - *v81) >> 3);
                    }
                    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v15 - *v81) >> 3) >= 0x333333333333333) {
                      unint64_t v63 = 0x666666666666666;
                    }
                    else {
                      unint64_t v63 = v62;
                    }
                    CGPoint v94 = (uint64_t *)(v13 + 1);
                    _NSRange v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(v13 + 1), v63);
                    unint64_t v65 = &v64[40 * v61];
                    double v90 = v64;
                    long long v91 = v65;
                    long long v93 = &v64[40 * v66];
                    *((_DWORD *)v65 + 1) = 0;
                    *((_DWORD *)v65 + 2) = 0;
                    *(_DWORD *)unint64_t v65 = i;
                    *((void *)v65 + 2) = v56;
                    *((void *)v65 + 3) = v58;
                    *((double *)v65 + 4) = v55;
                    long long v92 = v65 + 40;
                    std::vector<BreakPoint>::__swap_out_circular_buffer(v81, &v90);
                    unint64_t v60 = *v13;
                    std::__split_buffer<BreakPoint>::~__split_buffer((uint64_t)&v90);
                  }
                  else
                  {
                    *(_DWORD *)(v59 + 4) = 0;
                    *(_DWORD *)(v59 + 8) = 0;
                    *(_DWORD *)unint64_t v59 = i;
                    *(void *)(v59 + 16) = v56;
                    *(void *)(v59 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v57;
                    unint64_t v60 = v59 + 40;
                    *(double *)(v59 + 32) = v55;
                  }
                  *uint64_t v13 = v60;
                }
              }

              ++v79;
              ++v80;
            }
            while (v80 != v75);
            uint64_t v4 = [v71 countByEnumeratingWithState:&v82 objects:v95 count:16];
          }
          while (v4);
        }

        ++v74;
        uint64_t v2 = v70 + 1;
      }
      while (v70 + 1 != v68);
      uint64_t v1 = [obj countByEnumeratingWithState:&v86 objects:v96 count:16];
    }
    while (v1);
  }
}

void sub_1DD786DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void Segmenter::addSegmentationLayerOfTypeFixed(id *this, int a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 114))
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    obunint64_t j = this[3];
    uint64_t v3 = [obj countByEnumeratingWithState:&v69 objects:v75 count:16];
    if (v3)
    {
      uint64_t v56 = 0;
      uint64_t v50 = *(void *)v70;
      int v60 = a2 ^ 1;
      do
      {
        uint64_t v52 = 0;
        uint64_t v49 = v3;
        do
        {
          if (*(void *)v70 != v50) {
            objc_enumerationMutation(obj);
          }
          uint64_t v4 = *(void **)(*((void *)&v69 + 1) + 8 * v52);
          long long v65 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          id v53 = v4;
          uint64_t v5 = [v53 countByEnumeratingWithState:&v65 objects:v74 count:16];
          if (v5)
          {
            uint64_t v6 = 0;
            uint64_t v55 = *(void *)v66;
            do
            {
              uint64_t v7 = 0;
              uint64_t v54 = v5;
              do
              {
                if (*(void *)v66 != v55) {
                  objc_enumerationMutation(v53);
                }
                uint64_t v57 = v7;
                uint64_t v58 = v6;
                unint64_t v62 = *(void **)(*((void *)&v65 + 1) + 8 * v7);
                uint64_t v8 = *((void *)*this + 3 * v56) + 24 * v6;
                uint64_t v9 = (uint64_t *)(v8 + 8);
                _NSRange v64 = (uint64_t *)v8;
                unint64_t v10 = (void *)(v8 + 16);
                int v11 = 1;
                int v12 = 2;
                do
                {
                  int v59 = v12;
                  unint64_t v13 = 0;
                  int v14 = v11 + 1;
                  while (1)
                  {
                    unint64_t v15 = [v62 subFeatures];
                    BOOL v16 = [v15 count] > v13;

                    if (!v16) {
                      break;
                    }
                    id v17 = this[7];
                    unint64_t v18 = [v62 subFeatures];
                    unint64_t v19 = [v18 objectAtIndexedSubscript:v13];
                    unint64_t v20 = [v19 stringValueCandidates];
                    uint64_t v21 = [v20 objectAtIndexedSubscript:0];
                    int v22 = [v17 isEqualToString:v21];

                    uint64_t v23 = [v62 subFeatures];
                    double v24 = [v23 objectAtIndexedSubscript:v13];
                    double v25 = [v24 candidateProbs];
                    float32x4_t v26 = [v25 objectAtIndexedSubscript:0];
                    [v26 floatValue];
                    float v28 = v27;

                    if (v28 < 0.9) {
                      int v29 = 1;
                    }
                    else {
                      int v29 = v22;
                    }
                    if ((v29 | v60) == 1)
                    {
                      double v30 = objc_msgSend(v62, "subFeatures", v28);
                      double v31 = [v30 objectAtIndexedSubscript:v13];

                      [v31 bounds];
                      double v33 = v32;
                      unint64_t v34 = [this[6] width];
                      [v31 bounds];
                      double v35 = v33 / (double)v14;
                      if (v35 * (double)v34 >= v36 * 0.3 * (double)(unint64_t)[this[6] height])
                      {
                        int v37 = 0;
                        int64x2_t v63 = vdupq_n_s64((unint64_t)v31);
                        do
                        {
                          [v31 bounds];
                          double v39 = v38 + (double)(v37 + 1) * v35;
                          id v40 = v31;
                          uint64_t v41 = *v9;
                          if ((unint64_t)*v9 >= *v10)
                          {
                            unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((v41 - *v64) >> 3);
                            unint64_t v44 = v43 + 1;
                            if (v43 + 1 > 0x666666666666666) {
                              std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
                            }
                            if (0x999999999999999ALL * ((*v10 - *v64) >> 3) > v44) {
                              unint64_t v44 = 0x999999999999999ALL * ((*v10 - *v64) >> 3);
                            }
                            if (0xCCCCCCCCCCCCCCCDLL * ((*v10 - *v64) >> 3) >= 0x333333333333333) {
                              unint64_t v45 = 0x666666666666666;
                            }
                            else {
                              unint64_t v45 = v44;
                            }
                            v73[4] = v10;
                            BOOL v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)v10, v45);
                            double v47 = (int64x2_t *)&v46[40 * v43];
                            v73[0] = v46;
                            v73[1] = v47;
                            v73[3] = &v46[40 * v48];
                            v47->i32[0] = v13;
                            v47->i32[1] = 1;
                            v47->i32[2] = v14;
                            v47[1] = v63;
                            *(double *)v47[2].i64 = v39;
                            v73[2] = (char *)v47 + 40;
                            std::vector<BreakPoint>::__swap_out_circular_buffer(v64, v73);
                            uint64_t v42 = *v9;
                            std::__split_buffer<BreakPoint>::~__split_buffer((uint64_t)v73);
                          }
                          else
                          {
                            *(_DWORD *)uint64_t v41 = v13;
                            *(_DWORD *)(v41 + 4) = 1;
                            *(_DWORD *)(v41 + 8) = v14;
                            *(void *)(v41 + 16) = v40;
                            *(void *)(v41 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v40;
                            uint64_t v42 = v41 + 40;
                            *(double *)(v41 + 32) = v39;
                          }
                          *uint64_t v9 = v42;
                          ++v37;
                        }
                        while (v11 != v37);
                      }
                    }
                    ++v13;
                  }
                  int v12 = v59 + 1;
                  ++v11;
                }
                while (v59 != 4);
                uint64_t v6 = v58 + 1;
                uint64_t v7 = v57 + 1;
              }
              while (v57 + 1 != v54);
              uint64_t v5 = [v53 countByEnumeratingWithState:&v65 objects:v74 count:16];
            }
            while (v5);
          }

          ++v56;
          ++v52;
        }
        while (v52 != v49);
        uint64_t v3 = [obj countByEnumeratingWithState:&v69 objects:v75 count:16];
      }
      while (v3);
    }
  }
}

void sub_1DD7873DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void Segmenter::initSubRegionsWithInitialFeatures(Segmenter *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*((void *)this + 4);
  uint64_t v3 = objc_opt_new();
  [v2 addObject:v3];

  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  obuint64_t j = *((id *)this + 5);
  uint64_t v4 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v4)
  {
    uint64_t v23 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v29 != v23) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        uint64_t v7 = [v6 subFeatures];
        uint64_t v8 = [v7 countByEnumeratingWithState:&v24 objects:v32 count:16];
        if (v8)
        {
          uint64_t v9 = *(void *)v25;
          do
          {
            for (uint64_t j = 0; j != v8; ++j)
            {
              if (*(void *)v25 != v9) {
                objc_enumerationMutation(v7);
              }
              int v11 = *(void **)(*((void *)&v24 + 1) + 8 * j);
              [v11 bounds];
              CGFloat v13 = v12;
              CGFloat v15 = v14;
              CGFloat v17 = v16;
              CGFloat v19 = v18;
              unint64_t v20 = [v11 stringValueCandidates];
              uint64_t v21 = [v11 candidateProbs];
              Segmenter::addRegionToLayer((uint64_t)this, 0, v20, v21, v6, v13, v15, v17, v19);
            }
            uint64_t v8 = [v7 countByEnumeratingWithState:&v24 objects:v32 count:16];
          }
          while (v8);
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v4);
  }
}

void sub_1DD7876FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void Segmenter::calculateSubRegions(id *this)
{
  uint64_t v2 = [this[4] count];
  id v3 = this[4];
  uint64_t v4 = objc_opt_new();
  [v3 addObject:v4];

  if (this[1] != *this)
  {
    for (unint64_t i = 0; i < 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)this[1] - (unsigned char *)*this) >> 3); ++i)
    {
      if (*((unsigned char *)this + 114))
      {
        double v6 = *((double *)this[8] + i);
        double v7 = v6 + v6;
      }
      else
      {
        double v7 = -1.0;
      }
      uint64_t v8 = [this[5] objectAtIndex:i];
      uint64_t v9 = *this;
      uint64_t v10 = *((void *)*this + 3 * i);
      if (*((void *)*this + 3 * i + 1) == v10) {
        goto LABEL_29;
      }
      unint64_t v11 = 0;
      do
      {
        double v12 = (uint64_t *)(v10 + 24 * v11);
        uint64_t v13 = *v12;
        CGFloat v15 = v12 + 1;
        uint64_t v14 = v12[1];
        if (*v12 == v14) {
          goto LABEL_28;
        }
        double v16 = (int *)v12[1];
        do
        {
          uint64_t v17 = v13;
          v13 += 40;
          if ((int *)v13 == v16)
          {
            long long v24 = v16;
            goto LABEL_26;
          }
          double v18 = 1.79769313e308;
          CGFloat v19 = (int *)v13;
          while (*(_DWORD *)(v17 + 4) == 1 && v19[1] == 1 && v19[2] != *(_DWORD *)(v17 + 8))
          {
LABEL_22:
            v19 += 10;
            long long v24 = (int *)v14;
            if (v19 == v16) {
              goto LABEL_26;
            }
          }
          double v20 = Segmenter::imageRegionBetweenBreakpoints((double *)v17, v19, v12);
          if (v22 <= 0.0 || v23 <= 0.0) {
            goto LABEL_19;
          }
          if (v22 <= v18)
          {
            Segmenter::addRegionToLayer((uint64_t)this, v2, 0, 0, v8, v20, v21, v22, v23);
LABEL_19:
            if (!v19[2]) {
              double v18 = v7;
            }
            uint64_t v14 = *v15;
            double v16 = (int *)*v15;
            goto LABEL_22;
          }
          uint64_t v14 = *v15;
          long long v24 = (int *)*v15;
LABEL_26:
          double v16 = v24;
        }
        while ((int *)v13 != v24);
        uint64_t v9 = *this;
LABEL_28:
        ++v11;
        uint64_t v10 = v9[3 * i];
      }
      while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v9[3 * i + 1] - v10) >> 3));
LABEL_29:
    }
  }
}

void sub_1DD787970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double Segmenter::maxWidthForFeatureIndex(Segmenter *this, uint64_t a2)
{
  if (*((unsigned char *)this + 114)) {
    return *(double *)(*((void *)this + 8) + 8 * a2) + *(double *)(*((void *)this + 8) + 8 * a2);
  }
  else {
    return -1.0;
  }
}

double Segmenter::imageRegionBetweenBreakpoints(double *a1, int *a2, uint64_t *a3)
{
  double v6 = (void *)*((void *)a1 + 3);
  if (v6 == *((void **)a1 + 2))
  {
    double v8 = a1[4];
  }
  else
  {
    [v6 bounds];
    double v8 = v7;
  }
  unint64_t v9 = *(int *)a1;
  int v10 = *a2;
  if (v9 <= *a2)
  {
    uint64_t v11 = 40 * v9;
    double v12 = 2.22507386e-308;
    double v13 = 1.79769313e308;
    do
    {
      uint64_t v14 = *a3;
      if (v9 > *(int *)a1)
      {
        uint64_t v15 = v14 + v11;
        double v16 = *(void **)(v14 + v11 + 16);
        if (v16)
        {
          [v16 bounds];
          double v18 = v17;
          [*(id *)(v15 + 16) bounds];
          double v20 = v19;
          [*(id *)(v15 + 16) bounds];
          double v13 = fmin(v13, v18);
          double v12 = fmax(v12, v20 + v21);
          int v10 = *a2;
        }
      }
      unint64_t v22 = v10;
      if (v9 < v10)
      {
        uint64_t v23 = v14 + v11;
        long long v24 = *(void **)(v23 + 24);
        if (v24)
        {
          [v24 bounds];
          double v26 = v25;
          [*(id *)(v23 + 24) bounds];
          double v28 = v27;
          [*(id *)(v23 + 24) bounds];
          double v13 = fmin(v13, v26);
          double v12 = fmax(v12, v28 + v29);
          int v10 = *a2;
          unint64_t v22 = *a2;
        }
      }
      ++v9;
      v11 += 40;
    }
    while (v9 <= v22);
  }
  long long v30 = (void *)*((void *)a2 + 2);
  if (*((void **)a2 + 3) != v30)
  {
    [v30 bounds];
    [*((id *)a2 + 2) bounds];
  }
  return v8;
}

void Segmenter::addRegionToLayer(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  id v17 = a3;
  id v18 = a4;
  id v19 = a5;
  v41.origin.float x = a6;
  v41.origin.double y = a7;
  v41.size.CGFloat width = a8;
  v41.size.double height = a9;
  double v20 = NSStringFromRect(v41);
  if (a2)
  {
    uint64_t v21 = 0;
    while (1)
    {
      unint64_t v22 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v21];
      uint64_t v23 = [v22 objectForKey:v20];

      if (v23) {
        break;
      }
      if (a2 == ++v21) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    long long v24 = [CRTextFeature alloc];
    v40[0] = v20;
    double v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:v40 count:1];
    double v26 = [(CRTextFeature *)v24 initWithFeatureRect:v20 subFeatureRects:v25];

    if (v19)
    {
      [v19 baselineOrigin];
      double v28 = v27;
      double v30 = v29;
      [v19 toplineOrigin];
      double v32 = v31;
      double v34 = v33;
      [v19 baselineAngle];
      LODWORD(v36) = v35;
      -[CRTextFeature setBaselineOrigin:toplineOrigin:slope:](v26, "setBaselineOrigin:toplineOrigin:slope:", v28, v30, v32, v34, v36);
      [(CRTextFeature *)v26 updateSizeHints];
    }
    int v37 = [(CRTextFeature *)v26 subFeatures];
    double v38 = [v37 objectAtIndex:0];

    [v38 setStringValueCandidates:v17];
    [v38 setCandidateProbs:v18];
    double v39 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a2];
    [v39 setObject:v26 forKey:v20];
  }
}

void sub_1DD787D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Segmenter::textFeaturesForLayer(id *this, uint64_t a2)
{
  uint64_t v2 = [this[4] objectAtIndexedSubscript:a2];
  id v3 = [v2 allValues];

  return v3;
}

void sub_1DD787E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double Segmenter::medianCharSpacingForFeatureIndex(Segmenter *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 11);
  if (a2 >= (*((void *)this + 12) - v2) >> 3) {
    std::vector<double>::__throw_out_of_range[abi:ne180100]();
  }
  return *(double *)(v2 + 8 * a2);
}

uint64_t Segmenter::optimizeWordSegmentation(Segmenter *this)
{
  return *((unsigned __int8 *)this + 113);
}

BOOL Segmenter::isNarrowChar(Segmenter *this, CRTextFeature *a2, CRImage *a3)
{
  uint64_t v5 = a2;
  double v6 = a3;
  int v7 = *((_DWORD *)this + 30);
  [(CRTextFeature *)v5 bounds];
  double v9 = v8;
  unint64_t v10 = [(CRImage *)v6 width];
  [(CRTextFeature *)v5 bounds];
  double v12 = v11;
  unint64_t v13 = [(CRImage *)v6 height];
  double v14 = 0.4;
  if (v7 != 1) {
    double v14 = 0.5;
  }
  BOOL v15 = v9 * (double)v10 / (v12 * (double)v13) <= v14;

  return v15;
}

void sub_1DD787F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double Segmenter::medianInterSubfeatureSpacingForFeature(Segmenter *this, CRTextFeature *a2, _NSRange a3)
{
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  uint64_t v4 = a2;
  if (length)
  {
    std::vector<double>::vector(&v28, length);
    uint64_t v5 = 0;
    NSUInteger v6 = location + length;
    while (1)
    {
      int v7 = [(CRTextFeature *)v4 subFeatures];
      unint64_t v8 = [v7 count];
      NSUInteger v9 = location + v5;
      unint64_t v10 = location + v5 + 1;
      unint64_t v11 = v8 >= v6 ? v6 : v8;

      if (v10 >= v11) {
        break;
      }
      double v12 = [(CRTextFeature *)v4 subFeatures];
      unint64_t v13 = [v12 objectAtIndexedSubscript:v10];
      [v13 bounds];
      double v15 = v14;
      double v16 = [(CRTextFeature *)v4 subFeatures];
      id v17 = [v16 objectAtIndexedSubscript:v9];
      [v17 bounds];
      double v19 = v18;
      double v20 = [(CRTextFeature *)v4 subFeatures];
      uint64_t v21 = [v20 objectAtIndexedSubscript:v9];
      [v21 bounds];
      v28[v5] = v15 - (v19 + v22);

      ++v5;
    }
    std::__sort<std::__less<double,double> &,double *>();
    uint64_t v23 = (char *)v29 - (char *)v28;
    if (v29 != v28)
    {
      unint64_t v24 = (unint64_t)(v23 >> 3) >> 1;
      double v25 = v28[v24];
      if ((v23 & 8) == 0) {
        double v25 = (v25 + v28[v24 - 1]) * 0.5;
      }
      goto LABEL_13;
    }
    double v25 = 0.0;
    if (v29)
    {
LABEL_13:
      double v29 = v28;
      operator delete(v28);
    }
  }
  else
  {
    double v25 = 0.0;
  }

  return v25;
}

void sub_1DD7880E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

double Segmenter::medianSubfeatureHeightForFeature(Segmenter *this, CRTextFeature *a2, _NSRange a3)
{
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  uint64_t v5 = a2;
  std::vector<double>::vector(&v18, length);
  uint64_t v6 = 0;
  NSUInteger v7 = location + length;
  while (1)
  {
    unint64_t v8 = [(CRTextFeature *)v5 subFeatures];
    unint64_t v9 = [v8 count];
    NSUInteger v10 = v9 >= v7 ? v7 : v9;

    if (location + v6 >= v10) {
      break;
    }
    unint64_t v11 = [(CRTextFeature *)v5 subFeatures];
    double v12 = [v11 objectAtIndexedSubscript:location + v6];
    [v12 bounds];
    v18[v6] = v13;

    ++v6;
  }
  std::__sort<std::__less<double,double> &,double *>();
  uint64_t v14 = v19 - (unsigned char *)v18;
  if (v19 != (unsigned char *)v18)
  {
    unint64_t v15 = (unint64_t)(v14 >> 3) >> 1;
    double v16 = *(double *)&v18[v15];
    if ((v14 & 8) == 0) {
      double v16 = (v16 + *(double *)&v18[v15 - 1]) * 0.5;
    }
    goto LABEL_11;
  }
  double v16 = 0.0;
  if (v19)
  {
LABEL_11:
    double v19 = v18;
    operator delete(v18);
  }

  return v16;
}

void sub_1DD788298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id Segmenter::textFeatureForRegion(id *this, CGRect a2)
{
  id v3 = NSStringFromRect(a2);
  unint64_t v4 = 0;
  while (v4 < [this[4] count])
  {
    uint64_t v5 = [this[4] objectAtIndexedSubscript:v4];
    uint64_t v6 = [v5 objectForKey:v3];

    ++v4;
    if (v6) {
      goto LABEL_6;
    }
  }
  uint64_t v6 = 0;
LABEL_6:

  return v6;
}

void sub_1DD788384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<BreakPoint>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<BreakPoint>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<BreakPoint>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<BreakPoint>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    id v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<BreakPoint>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 40)
  {
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]()
{
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  NSUInteger v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      unint64_t v8 = *a1;
      NSUInteger v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[8 * v11];
    double v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    id v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v9 = a1;
  uint64_t v198 = (double *)(a1 + 80);
  uint64_t v199 = (double *)(a1 + 40);
  while (1)
  {
    uint64_t v10 = a2 - v9;
    uint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v9) >> 3);
    if (!(!v5 & v4))
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          int v84 = *(_DWORD *)(a2 - 40);
          unint64_t v83 = a2 - 40;
          BOOL v85 = v84 < *(_DWORD *)v9;
          if (v84 == *(_DWORD *)v9) {
            BOOL v85 = *(double *)(v83 + 32) < *(double *)(v9 + 32);
          }
          if (v85)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)v9, (uint64_t *)v83);
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)v9, (double *)(v9 + 40), a2 - 40);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)v9, (double *)(v9 + 40), v9 + 80, a2 - 40);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)v9, (double *)(v9 + 40), v9 + 80, v9 + 120, a2 - 40);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 959) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return;
      }
      int64_t v109 = (unint64_t)(v11 - 2) >> 1;
      int64_t v110 = v109;
      do
      {
        int64_t v111 = v110;
        if (v109 >= v110)
        {
          uint64_t v112 = (2 * v110) | 1;
          uint64_t v113 = v9 + 40 * v112;
          if (2 * v111 + 2 < v11)
          {
            int v116 = *(_DWORD *)v113;
            int v114 = *(_DWORD *)(v113 + 40);
            BOOL v115 = *(double *)(v9 + 40 * v112 + 32) < *(double *)(v113 + 72);
            if (*(_DWORD *)v113 != v114) {
              BOOL v115 = v116 < v114;
            }
            if (v115)
            {
              int v116 = *(_DWORD *)(v113 + 40);
              v113 += 40;
              uint64_t v112 = 2 * v111 + 2;
            }
          }
          else
          {
            int v116 = *(_DWORD *)v113;
          }
          uint64_t v117 = v9 + 40 * v111;
          int v118 = *(_DWORD *)v117;
          double v119 = *(double *)(v117 + 32);
          BOOL v5 = v116 == *(_DWORD *)v117;
          BOOL v120 = v116 < *(_DWORD *)v117;
          if (v5) {
            BOOL v120 = *(double *)(v113 + 32) < v119;
          }
          if (!v120)
          {
            uint64_t v121 = v9 + 40 * v111;
            uint64_t v200 = *(void *)(v121 + 16);
            uint64_t v202 = *(void *)(v117 + 4);
            uint64_t v204 = *(void *)(v121 + 24);
            *(void *)(v121 + 16) = 0;
            *(void *)(v121 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            do
            {
              uint64_t v122 = v117;
              uint64_t v117 = v113;
              uint64_t v123 = *(void *)v113;
              *(_DWORD *)(v122 + 8) = *(_DWORD *)(v117 + 8);
              *(void *)uint64_t v122 = v123;
              uint64_t v124 = *(void *)(v117 + 16);
              *(void *)(v117 + 16) = 0;
              CGRect v125 = *(void **)(v122 + 16);
              *(void *)(v122 + 16) = v124;

              uint64_t v126 = *(void *)(v117 + 24);
              *(void *)(v117 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              float v127 = *(void **)(v122 + 24);
              *(void *)(v122 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v126;

              *(void *)(v122 + 32) = *(void *)(v117 + 32);
              if (v109 < v112) {
                break;
              }
              uint64_t v128 = (2 * v112) | 1;
              uint64_t v113 = v9 + 40 * v128;
              if (2 * v112 + 2 < v11)
              {
                int v131 = *(_DWORD *)v113;
                int v129 = *(_DWORD *)(v113 + 40);
                BOOL v130 = *(double *)(v9 + 40 * v128 + 32) < *(double *)(v113 + 72);
                if (*(_DWORD *)v113 != v129) {
                  BOOL v130 = v131 < v129;
                }
                if (v130)
                {
                  int v131 = *(_DWORD *)(v113 + 40);
                  v113 += 40;
                  uint64_t v112 = 2 * v112 + 2;
                }
                else
                {
                  uint64_t v112 = (2 * v112) | 1;
                }
              }
              else
              {
                int v131 = *(_DWORD *)v113;
                uint64_t v112 = (2 * v112) | 1;
              }
              BOOL v132 = *(double *)(v113 + 32) < v119;
              if (v131 != v118) {
                BOOL v132 = v131 < v118;
              }
            }
            while (!v132);
            *(_DWORD *)uint64_t v117 = v118;
            *(void *)(v117 + 4) = v202;
            int v133 = *(void **)(v117 + 16);
            *(void *)(v117 + 16) = v200;

            std::vector<int>::pointer v134 = *(void **)(v117 + 24);
            *(void *)(v117 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v204;

            *(double *)(v117 + 32) = v119;
          }
        }
        int64_t v110 = v111 - 1;
      }
      while (v111);
      int64_t v135 = v10 / 0x28uLL;
      while (2)
      {
        if (v135 >= 2)
        {
          uint64_t v136 = 0;
          int v209 = *(_DWORD *)(v9 + 8);
          uint64_t v207 = *(void *)v9;
          uint64_t v138 = *(void *)(v9 + 16);
          uint64_t v137 = *(void *)(v9 + 24);
          *(void *)(v9 + 16) = 0;
          *(void *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          double v139 = *(double *)(v9 + 32);
          uint64_t v140 = v9;
          do
          {
            uint64_t v141 = v136 + 1;
            unint64_t v142 = v140 + 40 * (v136 + 1);
            uint64_t v143 = (2 * v136) | 1;
            uint64_t v144 = 2 * v136 + 2;
            if (v144 < v135)
            {
              int v145 = *(_DWORD *)(v142 + 40);
              BOOL v146 = *(double *)(v140 + 40 * v141 + 32) < *(double *)(v142 + 72);
              BOOL v5 = *(_DWORD *)v142 == v145;
              BOOL v147 = *(_DWORD *)v142 < v145;
              if (!v5) {
                BOOL v146 = v147;
              }
              if (v146)
              {
                v142 += 40;
                uint64_t v143 = v144;
              }
            }
            uint64_t v148 = *(void *)v142;
            *(_DWORD *)(v140 + 8) = *(_DWORD *)(v142 + 8);
            *(void *)uint64_t v140 = v148;
            uint64_t v149 = *(void *)(v142 + 16);
            *(void *)(v142 + 16) = 0;
            unint64_t v150 = *(void **)(v140 + 16);
            *(void *)(v140 + 16) = v149;

            uint64_t v151 = *(void *)(v142 + 24);
            *(void *)(v142 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            unint64_t v152 = *(void **)(v140 + 24);
            *(void *)(v140 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v151;

            *(void *)(v140 + 32) = *(void *)(v142 + 32);
            uint64_t v140 = v142;
            uint64_t v136 = v143;
          }
          while (v143 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
          unint64_t v153 = (uint64_t *)(a2 - 40);
          if (v142 == a2 - 40)
          {
            *(_DWORD *)(v142 + 8) = v209;
            *(void *)unint64_t v142 = v207;
            v177 = *(void **)(v142 + 16);
            *(void *)(v142 + 16) = v138;

            uint64_t v176 = *(void **)(v142 + 24);
            *(void *)(v142 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v137;
            goto LABEL_161;
          }
          uint64_t v154 = *v153;
          *(_DWORD *)(v142 + 8) = *(_DWORD *)(a2 - 32);
          *(void *)unint64_t v142 = v154;
          uint64_t v155 = *(void *)(a2 - 24);
          *(void *)(a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          float v156 = *(void **)(v142 + 16);
          *(void *)(v142 + 16) = v155;

          uint64_t v157 = *(void *)(a2 - 16);
          *(void *)(a2 - 16) = 0;
          uint64_t v158 = *(void **)(v142 + 24);
          *(void *)(v142 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v157;

          *(void *)(v142 + 32) = *(void *)(a2 - 8);
          *(_DWORD *)(a2 - 32) = v209;
          *unint64_t v153 = v207;
          uint64_t v159 = *(void **)(a2 - 24);
          *(void *)(a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v138;

          v160 = *(void **)(a2 - 16);
          *(void *)(a2 - 16) = v137;

          *(double *)(a2 - 8) = v139;
          uint64_t v161 = v142 - v9 + 40;
          if (v161 >= 41)
          {
            unint64_t v162 = (v161 / 0x28uLL - 2) >> 1;
            unint64_t v163 = v9 + 40 * v162;
            int v164 = *(_DWORD *)v142;
            double v139 = *(double *)(v142 + 32);
            BOOL v165 = *(_DWORD *)v163 < *(_DWORD *)v142;
            if (*(_DWORD *)v163 == *(_DWORD *)v142) {
              BOOL v165 = *(double *)(v163 + 32) < v139;
            }
            if (v165)
            {
              uint64_t v166 = *(void *)(v142 + 4);
              uint64_t v167 = *(void *)(v142 + 16);
              uint64_t v205 = *(void *)(v142 + 24);
              *(void *)(v142 + 16) = 0;
              *(void *)(v142 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              do
              {
                unint64_t v168 = v142;
                unint64_t v142 = v163;
                uint64_t v169 = *(void *)v163;
                *(_DWORD *)(v168 + 8) = *(_DWORD *)(v142 + 8);
                *(void *)unint64_t v168 = v169;
                uint64_t v170 = *(void *)(v142 + 16);
                *(void *)(v142 + 16) = 0;
                uint64_t v171 = *(void **)(v168 + 16);
                *(void *)(v168 + 16) = v170;

                uint64_t v172 = *(void *)(v142 + 24);
                *(void *)(v142 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                int v173 = *(void **)(v168 + 24);
                *(void *)(v168 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v172;

                *(void *)(v168 + 32) = *(void *)(v142 + 32);
                if (!v162) {
                  break;
                }
                unint64_t v162 = (v162 - 1) >> 1;
                unint64_t v163 = v9 + 40 * v162;
                BOOL v174 = *(_DWORD *)v163 < v164;
                if (*(_DWORD *)v163 == v164) {
                  BOOL v174 = *(double *)(v163 + 32) < v139;
                }
              }
              while (v174);
              *(_DWORD *)unint64_t v142 = v164;
              *(void *)(v142 + 4) = v166;
              v175 = *(void **)(v142 + 16);
              *(void *)(v142 + 16) = v167;

              uint64_t v176 = *(void **)(v142 + 24);
              *(void *)(v142 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v205;
LABEL_161:

              *(double *)(v142 + 32) = v139;
            }
          }
        }
        a2 -= 40;
        if ((unint64_t)v135-- <= 2) {
          return;
        }
        continue;
      }
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    unint64_t v13 = v9 + 40 * ((unint64_t)v11 >> 1);
    uint64_t v14 = a2 - 40;
    if ((unint64_t)v10 < 0x1401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)v13, (double *)v9, v14);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)v9, (double *)v13, v14);
      uint64_t v15 = v9 + 40 * v12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(v199, (double *)(v15 - 40), a2 - 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(v198, (double *)(v15 + 40), a2 - 120);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)(v15 - 40), (double *)v13, v15 + 40);
      int v208 = *(_DWORD *)(v9 + 8);
      uint64_t v206 = *(void *)v9;
      uint64_t v16 = *(void *)(v9 + 16);
      uint64_t v17 = *(void *)(v9 + 24);
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      uint64_t v18 = *(void *)(v9 + 32);
      int v19 = *(_DWORD *)(v13 + 8);
      *(void *)uint64_t v9 = *(void *)v13;
      *(_DWORD *)(v9 + 8) = v19;
      uint64_t v20 = *(void *)(v15 + 16);
      *(void *)(v15 + 16) = 0;
      uint64_t v21 = *(void **)(v9 + 16);
      *(void *)(v9 + 16) = v20;

      uint64_t v22 = *(void *)(v15 + 24);
      *(void *)(v15 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      uint64_t v23 = *(void **)(v9 + 24);
      *(void *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v22;

      *(void *)(v9 + 32) = *(void *)(v15 + 32);
      *(_DWORD *)(v13 + 8) = v208;
      *(void *)unint64_t v13 = v206;
      unint64_t v24 = *(void **)(v15 + 16);
      *(void *)(v15 + 16) = v16;

      double v25 = *(void **)(v15 + 24);
      *(void *)(v15 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v17;

      *(void *)(v15 + 32) = v18;
    }
    uint64_t v26 = a3 - 1;
    int v27 = *(_DWORD *)v9;
    uint64_t v203 = v26;
    if (a4)
    {
      double v28 = *(double *)(v9 + 32);
    }
    else
    {
      int v29 = *(_DWORD *)(v9 - 40);
      double v28 = *(double *)(v9 + 32);
      BOOL v5 = v29 == v27;
      BOOL v30 = v29 < v27;
      if (v5) {
        BOOL v30 = *(double *)(v9 - 8) < v28;
      }
      if (!v30)
      {
        uint64_t v57 = v26;
        uint64_t v58 = *(void *)(v9 + 4);
        uint64_t v60 = *(void *)(v9 + 16);
        uint64_t v59 = *(void *)(v9 + 24);
        *(void *)(v9 + 16) = 0;
        *(void *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        int v61 = *(_DWORD *)(a2 - 40);
        BOOL v5 = v27 == v61;
        BOOL v62 = v27 < v61;
        if (v5) {
          BOOL v62 = v28 < *(double *)(a2 - 8);
        }
        if (v62)
        {
          a1 = v9;
          do
          {
            int v63 = *(_DWORD *)(a1 + 40);
            a1 += 40;
            BOOL v64 = v27 < v63;
            if (v27 == v63) {
              BOOL v64 = v28 < *(double *)(a1 + 32);
            }
          }
          while (!v64);
        }
        else
        {
          long long v65 = (int *)(v9 + 40);
          do
          {
            a1 = (unint64_t)v65;
            if ((unint64_t)v65 >= a2) {
              break;
            }
            int v66 = *v65;
            BOOL v67 = v28 < *(double *)(a1 + 32);
            BOOL v5 = v27 == v66;
            BOOL v68 = v27 < v66;
            if (!v5) {
              BOOL v67 = v68;
            }
            long long v65 = (int *)(a1 + 40);
          }
          while (!v67);
        }
        unint64_t v69 = a2;
        if (a1 < a2)
        {
          unint64_t v69 = a2;
          do
          {
            int v70 = *(_DWORD *)(v69 - 40);
            v69 -= 40;
            BOOL v71 = v27 < v70;
            if (v27 == v70) {
              BOOL v71 = v28 < *(double *)(v69 + 32);
            }
          }
          while (v71);
        }
        while (a1 < v69)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)v69);
          do
          {
            int v72 = *(_DWORD *)(a1 + 40);
            a1 += 40;
            BOOL v73 = v27 < v72;
            if (v27 == v72) {
              BOOL v73 = v28 < *(double *)(a1 + 32);
            }
          }
          while (!v73);
          do
          {
            int v74 = *(_DWORD *)(v69 - 40);
            v69 -= 40;
            BOOL v75 = v27 < v74;
            if (v27 == v74) {
              BOOL v75 = v28 < *(double *)(v69 + 32);
            }
          }
          while (v75);
        }
        if (a1 - 40 != v9)
        {
          uint64_t v76 = *(void *)(a1 - 40);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(a1 - 32);
          *(void *)uint64_t v9 = v76;
          uint64_t v77 = *(void *)(a1 - 24);
          *(void *)(a1 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          unint64_t v78 = *(void **)(v9 + 16);
          *(void *)(v9 + 16) = v77;

          uint64_t v79 = *(void *)(a1 - 16);
          *(void *)(a1 - 16) = 0;
          uint64_t v80 = *(void **)(v9 + 24);
          *(void *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v79;

          *(void *)(v9 + 32) = *(void *)(a1 - 8);
        }
        *(_DWORD *)(a1 - 40) = v27;
        *(void *)(a1 - 36) = v58;
        uint64_t v81 = *(void **)(a1 - 24);
        *(void *)(a1 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v60;

        long long v82 = *(void **)(a1 - 16);
        *(void *)(a1 - 16) = v59;

        a4 = 0;
        *(double *)(a1 - 8) = v28;
        a3 = v57;
        goto LABEL_1;
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = *(void *)(v9 + 4);
    uint64_t v34 = *(void *)(v9 + 16);
    uint64_t v33 = *(void *)(v9 + 24);
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    do
    {
      int v35 = *(_DWORD *)(v9 + v31 + 40);
      BOOL v36 = *(double *)(v9 + v31 + 72) < v28;
      BOOL v5 = v35 == v27;
      BOOL v37 = v35 < v27;
      if (!v5) {
        BOOL v36 = v37;
      }
      v31 += 40;
    }
    while (v36);
    unint64_t v38 = v9 + v31;
    unint64_t v39 = a2;
    if (v31 == 40)
    {
      unint64_t v39 = a2;
      do
      {
        if (v38 >= v39) {
          break;
        }
        int v42 = *(_DWORD *)(v39 - 40);
        v39 -= 40;
        BOOL v43 = v42 < v27;
        if (v42 == v27) {
          BOOL v43 = *(double *)(v39 + 32) < v28;
        }
      }
      while (!v43);
    }
    else
    {
      do
      {
        int v40 = *(_DWORD *)(v39 - 40);
        v39 -= 40;
        BOOL v41 = v40 < v27;
        if (v40 == v27) {
          BOOL v41 = *(double *)(v39 + 32) < v28;
        }
      }
      while (!v41);
    }
    a1 = v38;
    if (v38 < v39)
    {
      unint64_t v44 = v39;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)v44);
        do
        {
          int v45 = *(_DWORD *)(a1 + 40);
          a1 += 40;
          BOOL v46 = v45 < v27;
          if (v45 == v27) {
            BOOL v46 = *(double *)(a1 + 32) < v28;
          }
        }
        while (v46);
        do
        {
          int v47 = *(_DWORD *)(v44 - 40);
          v44 -= 40;
          BOOL v48 = v47 < v27;
          if (v47 == v27) {
            BOOL v48 = *(double *)(v44 + 32) < v28;
          }
        }
        while (!v48);
      }
      while (a1 < v44);
    }
    if (a1 - 40 != v9)
    {
      uint64_t v49 = *(void *)(a1 - 40);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a1 - 32);
      *(void *)uint64_t v9 = v49;
      uint64_t v50 = *(void *)(a1 - 24);
      *(void *)(a1 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      double v51 = *(void **)(v9 + 16);
      *(void *)(v9 + 16) = v50;

      uint64_t v52 = *(void *)(a1 - 16);
      *(void *)(a1 - 16) = 0;
      id v53 = *(void **)(v9 + 24);
      *(void *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v52;

      *(void *)(v9 + 32) = *(void *)(a1 - 8);
    }
    *(_DWORD *)(a1 - 40) = v27;
    *(void *)(a1 - 36) = v32;
    uint64_t v54 = *(void **)(a1 - 24);
    *(void *)(a1 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v34;

    uint64_t v55 = *(void **)(a1 - 16);
    *(void *)(a1 - 16) = v33;

    *(double *)(a1 - 8) = v28;
    a3 = v203;
    if (v38 < v39) {
      goto LABEL_45;
    }
    BOOL v56 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(v9, a1 - 40);
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(a1, a2))
    {
      if (!v56)
      {
LABEL_45:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *,false>(v9, a1 - 40, v203, a4 & 1);
        a4 = 0;
      }
      goto LABEL_1;
    }
    a2 = a1 - 40;
    if (v56) {
      return;
    }
  }
  uint64_t v86 = v9 + 40;
  BOOL v88 = v9 == a2 || v86 == a2;
  if (a4)
  {
    if (!v88)
    {
      uint64_t v89 = 0;
      uint64_t v90 = v9;
      do
      {
        uint64_t v91 = v86;
        int v92 = *(_DWORD *)(v90 + 40);
        double v93 = *(double *)(v90 + 72);
        BOOL v94 = v92 < *(_DWORD *)v90;
        if (v92 == *(_DWORD *)v90) {
          BOOL v94 = v93 < *(double *)(v90 + 32);
        }
        if (v94)
        {
          uint64_t v95 = *(void *)(v90 + 44);
          uint64_t v97 = *(void *)(v90 + 56);
          uint64_t v96 = *(void *)(v90 + 64);
          uint64_t v98 = v89;
          *(void *)(v90 + 56) = 0;
          *(void *)(v90 + 64) = 0;
          while (1)
          {
            uint64_t v99 = v9 + v98;
            *(void *)(v99 + 40) = *(void *)(v9 + v98);
            *(_DWORD *)(v99 + 48) = *(_DWORD *)(v9 + v98 + 8);
            uint64_t v100 = *(void *)(v9 + v98 + 16);
            *(void *)(v99 + 16) = 0;
            uint64_t v101 = *(void **)(v9 + v98 + 56);
            *(void *)(v99 + 56) = v100;

            uint64_t v102 = *(void *)(v9 + v98 + 24);
            *(void *)(v99 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            uint64_t v103 = *(void **)(v9 + v98 + 64);
            *(void *)(v99 + 64) = v102;

            *(void *)(v99 + 72) = *(void *)(v99 + 32);
            if (!v98) {
              break;
            }
            int v104 = *(_DWORD *)(v99 - 40);
            BOOL v5 = v92 == v104;
            BOOL v105 = v92 < v104;
            if (v5) {
              BOOL v105 = v93 < *(double *)(v99 - 8);
            }
            v98 -= 40;
            if (!v105)
            {
              uint64_t v106 = v9 + v98 + 40;
              goto LABEL_111;
            }
          }
          uint64_t v106 = v9;
LABEL_111:
          *(_DWORD *)uint64_t v106 = v92;
          *(void *)(v106 + 4) = v95;
          long long v107 = *(void **)(v106 + 16);
          *(void *)(v106 + 16) = v97;

          long long v108 = *(void **)(v106 + 24);
          *(void *)(v106 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v96;

          *(double *)(v106 + 32) = v93;
        }
        uint64_t v86 = v91 + 40;
        v89 += 40;
        uint64_t v90 = v91;
      }
      while (v91 + 40 != a2);
    }
  }
  else if (!v88)
  {
    uint64_t v179 = (double *)(v9 + 72);
    do
    {
      uint64_t v180 = v86;
      int v181 = *(_DWORD *)(v9 + 40);
      double v182 = *(double *)(v9 + 72);
      BOOL v183 = v181 < *(_DWORD *)v9;
      if (v181 == *(_DWORD *)v9) {
        BOOL v183 = v182 < *(double *)(v9 + 32);
      }
      if (v183)
      {
        uint64_t v184 = *(void *)(v9 + 44);
        uint64_t v186 = *(void *)(v9 + 56);
        uint64_t v185 = *(void *)(v9 + 64);
        v187 = v179;
        *(void *)(v9 + 56) = 0;
        *(void *)(v9 + 64) = 0;
        do
        {
          std::vector<int>::pointer v188 = v187;
          *(v187 - 4) = *(v187 - 9);
          *((_DWORD *)v187 - 6) = *((_DWORD *)v187 - 16);
          uint64_t v189 = *((void *)v187 - 7);
          *(v187 - 7) = 0.0;
          v190 = (void *)*((void *)v187 - 2);
          *((void *)v187 - 2) = v189;

          uint64_t v191 = *((void *)v187 - 6);
          *(v187 - 6) = 0.0;
          std::vector<int>::pointer v192 = (void *)*((void *)v187 - 1);
          *((void *)v187 - 1) = v191;

          uint64_t v193 = *((void *)v187 - 5);
          v187 -= 5;
          *(void *)std::vector<int>::pointer v188 = v193;
          int v194 = *((_DWORD *)v188 - 28);
          BOOL v5 = v181 == v194;
          BOOL v195 = v181 < v194;
          if (v5) {
            BOOL v195 = v182 < *(v188 - 10);
          }
        }
        while (v195);
        *((_DWORD *)v187 - 8) = v181;
        *(void *)((char *)v187 - 28) = v184;
        int v196 = (void *)*((void *)v187 - 2);
        *((void *)v187 - 2) = v186;

        uint64_t v197 = (void *)*((void *)v187 - 1);
        *((void *)v187 - 1) = v185;

        double *v187 = v182;
      }
      uint64_t v86 = v180 + 40;
      v179 += 5;
      uint64_t v9 = v180;
    }
    while (v180 + 40 != a2);
  }
}

  uint64_t v11 = (uint64_t)a1;
  BOOL v56 = (NetworkEdge *)((char *)a1 + 160);
  uint64_t v57 = (NetworkEdge *)((char *)a1 + 80);
  uint64_t v55 = (NetworkEdge *)((char *)a1 - 80);
  unint64_t v12 = a2;
  while (1)
  {
    unint64_t v13 = (uint64_t)v12 - v11;
    uint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v12 - v11) >> 4);
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0:
        case 1:
          return;
        case 2:
          if ((*a3)((const NetworkEdge *)((char *)v12 - 80), (NetworkEdge *)v11)) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>((NetworkEdge *)v11, (uint64_t)v12 - 80);
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)v11, (NetworkEdge *)(v11 + 80), (uint64_t)v12 - 80, a3);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)v11, (NetworkEdge *)(v11 + 80), (NetworkEdge *)(v11 + 160), (uint64_t)v12 - 80, a3);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)v11, (NetworkEdge *)(v11 + 80), (NetworkEdge *)(v11 + 160), (NetworkEdge *)(v11 + 240), (uint64_t)v12 - 80, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 1919) {
      break;
    }
    a2 = v12;
    if (!a4)
    {
      if ((const NetworkEdge *)v11 != v12)
      {
        uint64_t v34 = (unint64_t)(v14 - 2) >> 1;
        uint64_t v58 = v34;
        do
        {
          int v35 = v34;
          if (v58 >= v34)
          {
            BOOL v36 = (2 * v34) | 1;
            BOOL v37 = v11 + 80 * v36;
            if (2 * v34 + 2 < v14 && (*a3)((NetworkEdge *)(v11 + 80 * v36), (NetworkEdge *)(v37 + 80)))
            {
              v37 += 80;
              BOOL v36 = 2 * v35 + 2;
            }
            unint64_t v38 = v11 + 80 * v35;
            if (((*a3)((NetworkEdge *)v37, (NetworkEdge *)v38) & 1) == 0)
            {
              NetworkEdge::NetworkEdge((NetworkEdge *)v64, (const NetworkEdge *)(v11 + 80 * v35));
              do
              {
                unint64_t v39 = v37;
                NetworkEdge::operator=(v38, v37);
                if (v58 < v36) {
                  break;
                }
                int v40 = (2 * v36) | 1;
                BOOL v37 = v11 + 80 * v40;
                BOOL v36 = 2 * v36 + 2;
                if (v36 < v14)
                {
                  if ((*a3)((NetworkEdge *)(v11 + 80 * v40), (NetworkEdge *)(v37 + 80))) {
                    v37 += 80;
                  }
                  else {
                    BOOL v36 = v40;
                  }
                }
                else
                {
                  BOOL v36 = v40;
                }
                unint64_t v38 = v39;
              }
              while (!(*a3)((NetworkEdge *)v37, (NetworkEdge *)v64));
              NetworkEdge::operator=(v39, (uint64_t)v64);
              if (__p)
              {
                int v66 = __p;
                operator delete(__p);
              }
            }
          }
          uint64_t v34 = v35 - 1;
        }
        while (v35);
        BOOL v41 = v13 / 0x50uLL;
        int v42 = a2;
        do
        {
          if (v41 >= 2)
          {
            uint64_t v60 = v42;
            NetworkEdge::NetworkEdge((NetworkEdge *)v61, (const NetworkEdge *)v11);
            BOOL v43 = 0;
            unint64_t v44 = v11;
            do
            {
              int v45 = (const NetworkEdge *)(v44 + 80 * v43 + 80);
              BOOL v46 = 2 * v43;
              BOOL v43 = (2 * v43) | 1;
              int v47 = v46 + 2;
              if (v46 + 2 < v41 && (*a3)(v45, (const NetworkEdge *)((char *)v45 + 80)))
              {
                int v45 = (const NetworkEdge *)((char *)v45 + 80);
                BOOL v43 = v47;
              }
              NetworkEdge::operator=(v44, (uint64_t)v45);
              unint64_t v44 = (uint64_t)v45;
            }
            while (v43 <= (uint64_t)((unint64_t)(v41 - 2) >> 1));
            int v42 = v60;
            if (v45 == (const NetworkEdge *)((char *)v60 - 80))
            {
              NetworkEdge::operator=((uint64_t)v45, (uint64_t)v61);
            }
            else
            {
              NetworkEdge::operator=((uint64_t)v45, (uint64_t)v60 - 80);
              NetworkEdge::operator=((uint64_t)v60 - 80, (uint64_t)v61);
              BOOL v48 = (uint64_t)v45 - v11 + 80;
              if (v48 >= 81)
              {
                uint64_t v49 = (v48 / 0x50uLL - 2) >> 1;
                uint64_t v50 = v11 + 80 * v49;
                if ((*a3)((NetworkEdge *)v50, v45))
                {
                  NetworkEdge::NetworkEdge((NetworkEdge *)v64, v45);
                  do
                  {
                    double v51 = v50;
                    NetworkEdge::operator=((uint64_t)v45, v50);
                    if (!v49) {
                      break;
                    }
                    uint64_t v49 = (v49 - 1) >> 1;
                    uint64_t v50 = v11 + 80 * v49;
                    int v45 = (const NetworkEdge *)v51;
                  }
                  while (((*a3)((NetworkEdge *)v50, (NetworkEdge *)v64) & 1) != 0);
                  NetworkEdge::operator=(v51, (uint64_t)v64);
                  if (__p)
                  {
                    int v66 = __p;
                    operator delete(__p);
                  }
                }
              }
            }
            if (v62)
            {
              int v63 = v62;
              operator delete(v62);
            }
          }
          int v42 = (const NetworkEdge *)((char *)v42 - 80);
        }
        while ((unint64_t)v41-- > 2);
      }
      return;
    }
    uint64_t v15 = (NetworkEdge *)(v11 + 80 * ((unint64_t)v14 >> 1));
    if ((unint64_t)v13 < 0x2801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(v15, (NetworkEdge *)v11, (uint64_t)v12 - 80, a3);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)v11, v15, (uint64_t)v12 - 80, a3);
      uint64_t v16 = v11 + 80 * ((unint64_t)v14 >> 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(v57, (NetworkEdge *)(v16 - 80), (uint64_t)v12 - 160, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(v56, (NetworkEdge *)(v16 + 80), (uint64_t)v12 - 240, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)(v16 - 80), v15, v16 + 80, a3);
      NetworkEdge::NetworkEdge((NetworkEdge *)v64, (const NetworkEdge *)v11);
      NetworkEdge::operator=(v11, (uint64_t)v15);
      NetworkEdge::operator=((uint64_t)v15, (uint64_t)v64);
      if (__p)
      {
        int v66 = __p;
        operator delete(__p);
      }
    }
    --a4;
    if ((a5 & 1) == 0 && ((*a3)(v55, (NetworkEdge *)v11) & 1) == 0)
    {
      NetworkEdge::NetworkEdge((NetworkEdge *)v64, (const NetworkEdge *)v11);
      if ((*a3)((NetworkEdge *)v64, (const NetworkEdge *)((char *)v12 - 80)))
      {
        a1 = (NetworkEdge *)v11;
        do
          a1 = (NetworkEdge *)((char *)a1 + 80);
        while (((*a3)((NetworkEdge *)v64, a1) & 1) == 0);
      }
      else
      {
        unint64_t v24 = (NetworkEdge *)(v11 + 80);
        do
        {
          a1 = v24;
          if (v24 >= v12) {
            break;
          }
          double v25 = (*a3)((NetworkEdge *)v64, v24);
          unint64_t v24 = (NetworkEdge *)((char *)a1 + 80);
        }
        while (!v25);
      }
      uint64_t v26 = (unint64_t)v12;
      if (a1 < v12)
      {
        uint64_t v26 = (unint64_t)v12;
        do
          v26 -= 80;
        while (((*a3)((NetworkEdge *)v64, (NetworkEdge *)v26) & 1) != 0);
      }
      while ((unint64_t)a1 < v26)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a1, v26);
        do
          a1 = (NetworkEdge *)((char *)a1 + 80);
        while (!(*a3)((NetworkEdge *)v64, a1));
        do
          v26 -= 80;
        while (((*a3)((NetworkEdge *)v64, (NetworkEdge *)v26) & 1) != 0);
      }
      if ((NetworkEdge *)((char *)a1 - 80) != (NetworkEdge *)v11) {
        NetworkEdge::operator=(v11, (uint64_t)a1 - 80);
      }
      NetworkEdge::operator=((uint64_t)a1 - 80, (uint64_t)v64);
      if (__p)
      {
        int v66 = __p;
        operator delete(__p);
      }
      a5 = 0;
      goto LABEL_1;
    }
    NetworkEdge::NetworkEdge((NetworkEdge *)v64, (const NetworkEdge *)v11);
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = (*a3)((NetworkEdge *)(v11 + v17 + 80), (NetworkEdge *)v64);
      v17 += 80;
    }
    while ((v18 & 1) != 0);
    int v19 = v11 + v17;
    uint64_t v20 = v12;
    if (v17 == 80)
    {
      uint64_t v20 = v12;
      do
      {
        if (v19 >= (unint64_t)v20) {
          break;
        }
        uint64_t v20 = (NetworkEdge *)((char *)v20 - 80);
      }
      while (((*a3)(v20, (NetworkEdge *)v64) & 1) == 0);
    }
    else
    {
      do
        uint64_t v20 = (NetworkEdge *)((char *)v20 - 80);
      while (!(*a3)(v20, (NetworkEdge *)v64));
    }
    if (v19 >= (unint64_t)v20)
    {
      unint64_t v12 = (const NetworkEdge *)(v19 - 80);
    }
    else
    {
      uint64_t v21 = (NetworkEdge *)(v11 + v17);
      uint64_t v22 = (unint64_t)v20;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(v21, v22);
        do
          uint64_t v21 = (NetworkEdge *)((char *)v21 + 80);
        while (((*a3)(v21, (NetworkEdge *)v64) & 1) != 0);
        do
          v22 -= 80;
        while (!(*a3)((NetworkEdge *)v22, (NetworkEdge *)v64));
      }
      while ((unint64_t)v21 < v22);
      unint64_t v12 = (NetworkEdge *)((char *)v21 - 80);
    }
    if (v12 != (const NetworkEdge *)v11) {
      NetworkEdge::operator=(v11, (uint64_t)v12);
    }
    NetworkEdge::operator=((uint64_t)v12, (uint64_t)v64);
    if (__p)
    {
      int v66 = __p;
      operator delete(__p);
    }
    if (v19 < (unint64_t)v20) {
      goto LABEL_38;
    }
    uint64_t v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(v11, v12, a3);
    a1 = (const NetworkEdge *)((char *)v12 + 80);
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((uint64_t)v12 + 80, a2, a3))
    {
      if (v23) {
        goto LABEL_1;
      }
LABEL_38:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*,false>(v11, v12, a3, a4, a5 & 1);
      a5 = 0;
      a1 = (const NetworkEdge *)((char *)v12 + 80);
      goto LABEL_1;
    }
    if (v23) {
      return;
    }
  }
  if (a5)
  {
    if ((const NetworkEdge *)v11 != v12)
    {
      int v27 = (const NetworkEdge *)(v11 + 80);
      if ((const NetworkEdge *)(v11 + 80) != v12)
      {
        double v28 = 0;
        int v29 = (const NetworkEdge *)v11;
        do
        {
          BOOL v30 = v29;
          int v29 = v27;
          if ((*a3)(v27, v30))
          {
            NetworkEdge::NetworkEdge((NetworkEdge *)v64, v29);
            uint64_t v31 = v28;
            while (1)
            {
              NetworkEdge::operator=(v11 + v31 + 80, v11 + v31);
              if (!v31) {
                break;
              }
              uint64_t v32 = (*a3)((NetworkEdge *)v64, (NetworkEdge *)(v11 + v31 - 80));
              v31 -= 80;
              if ((v32 & 1) == 0)
              {
                uint64_t v33 = v11 + v31 + 80;
                goto LABEL_75;
              }
            }
            uint64_t v33 = v11;
LABEL_75:
            NetworkEdge::operator=(v33, (uint64_t)v64);
            if (__p)
            {
              int v66 = __p;
              operator delete(__p);
            }
          }
          int v27 = (const NetworkEdge *)((char *)v29 + 80);
          v28 += 80;
        }
        while ((const NetworkEdge *)((char *)v29 + 80) != v12);
      }
    }
  }
  else if ((const NetworkEdge *)v11 != v12)
  {
    id v53 = (const NetworkEdge *)(v11 + 80);
    while (v53 != v12)
    {
      uint64_t v54 = v53;
      if ((*a3)(v53, (NetworkEdge *)v11))
      {
        NetworkEdge::NetworkEdge((NetworkEdge *)v64, v54);
        do
        {
          NetworkEdge::operator=(v11 + 80, v11);
          v11 -= 80;
        }
        while (((*a3)((NetworkEdge *)v64, (NetworkEdge *)v11) & 1) != 0);
        NetworkEdge::operator=(v11 + 80, (uint64_t)v64);
        if (__p)
        {
          int v66 = __p;
          operator delete(__p);
        }
      }
      id v53 = (const NetworkEdge *)((char *)v54 + 80);
      uint64_t v11 = (uint64_t)v54;
    }
  }
}

  uint64_t v11 = (uint64_t)a1;
  uint64_t v59 = (CRCHLatticePath *)((char *)a1 + 896);
  uint64_t v60 = (CRCHLatticePath *)((char *)a1 + 448);
  uint64_t v58 = (CRCHLatticePath *)((char *)a1 - 448);
  unint64_t v12 = a2;
  while (1)
  {
    unint64_t v13 = (uint64_t)v12 - v11;
    uint64_t v14 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v12 - v11) >> 6);
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0:
        case 1:
          return;
        case 2:
          if ((*a3)((const CRCHLatticePath *)((char *)v12 - 448), (CRCHLatticePath *)v11)) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>((CRCHLatticePath *)v11, (uint64_t)v12 - 448);
          }
          break;
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)v11, (CRCHLatticePath *)(v11 + 448), (uint64_t)v12 - 448, a3);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)v11, (CRCHLatticePath *)(v11 + 448), (CRCHLatticePath *)(v11 + 896), (uint64_t)v12 - 448, a3);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)v11, (CRCHLatticePath *)(v11 + 448), (CRCHLatticePath *)(v11 + 896), (CRCHLatticePath *)(v11 + 1344), (uint64_t)v12 - 448, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 10751) {
      break;
    }
    a2 = v12;
    if (!a4)
    {
      if ((const CRCHLatticePath *)v11 != v12)
      {
        BOOL v36 = (unint64_t)(v14 - 2) >> 1;
        int v61 = v36;
        do
        {
          BOOL v37 = v36;
          if (v61 >= v36)
          {
            unint64_t v38 = (2 * v36) | 1;
            unint64_t v39 = v11 + 448 * v38;
            if (2 * v36 + 2 < v14
              && (*a3)((CRCHLatticePath *)(v11 + 448 * v38), (CRCHLatticePath *)(v39 + 448)))
            {
              v39 += 448;
              unint64_t v38 = 2 * v37 + 2;
            }
            int v40 = v11 + 448 * v37;
            if (((*a3)((CRCHLatticePath *)v39, (CRCHLatticePath *)v40) & 1) == 0)
            {
              CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v65, (const CRCHLatticePath *)(v11 + 448 * v37));
              do
              {
                BOOL v41 = v39;
                CRCHLatticePath::operator=(v40, v39);
                if (v61 < v38) {
                  break;
                }
                int v42 = (2 * v38) | 1;
                unint64_t v39 = v11 + 448 * v42;
                unint64_t v38 = 2 * v38 + 2;
                if (v38 < v14)
                {
                  if ((*a3)((CRCHLatticePath *)(v11 + 448 * v42), (CRCHLatticePath *)(v39 + 448))) {
                    v39 += 448;
                  }
                  else {
                    unint64_t v38 = v42;
                  }
                }
                else
                {
                  unint64_t v38 = v42;
                }
                int v40 = v41;
              }
              while (!(*a3)((CRCHLatticePath *)v39, (CRCHLatticePath *)v65));
              CRCHLatticePath::operator=(v41, (uint64_t)v65);
              CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v65);
            }
          }
          BOOL v36 = v37 - 1;
        }
        while (v37);
        BOOL v43 = (((unint64_t)v13 >> 6) * (unsigned __int128)0x2492492492492493uLL) >> 64;
        unint64_t v44 = (uint64_t)a2;
        do
        {
          int v63 = v44;
          CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v64, (const CRCHLatticePath *)v11);
          int v45 = 0;
          BOOL v46 = v43 - 2;
          if (v43 < 2) {
            BOOL v46 = v43 - 1;
          }
          int v47 = v46 >> 1;
          BOOL v48 = v11;
          do
          {
            uint64_t v49 = (const CRCHLatticePath *)(v48 + 448 * v45 + 448);
            uint64_t v50 = 2 * v45;
            int v45 = (2 * v45) | 1;
            double v51 = v50 + 2;
            if (v50 + 2 < v43 && (*a3)(v49, (const CRCHLatticePath *)((char *)v49 + 448)))
            {
              uint64_t v49 = (const CRCHLatticePath *)((char *)v49 + 448);
              int v45 = v51;
            }
            CRCHLatticePath::operator=(v48, (uint64_t)v49);
            BOOL v48 = (uint64_t)v49;
          }
          while (v45 <= v47);
          unint64_t v44 = v63 - 448;
          if (v49 == (const CRCHLatticePath *)(v63 - 448))
          {
            CRCHLatticePath::operator=((uint64_t)v49, (uint64_t)v64);
          }
          else
          {
            CRCHLatticePath::operator=((uint64_t)v49, v63 - 448);
            CRCHLatticePath::operator=(v44, (uint64_t)v64);
            uint64_t v52 = (uint64_t)v49 - v11 + 448;
            if (v52 >= 449)
            {
              id v53 = (unint64_t)(((((unint64_t)v52 >> 6) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                     - 2) >> 1;
              uint64_t v54 = v11 + 448 * v53;
              if ((*a3)((CRCHLatticePath *)v54, v49))
              {
                CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v65, v49);
                do
                {
                  uint64_t v55 = v54;
                  CRCHLatticePath::operator=((uint64_t)v49, v54);
                  if (!v53) {
                    break;
                  }
                  id v53 = (v53 - 1) >> 1;
                  uint64_t v54 = v11 + 448 * v53;
                  uint64_t v49 = (const CRCHLatticePath *)v55;
                }
                while (((*a3)((CRCHLatticePath *)v54, (CRCHLatticePath *)v65) & 1) != 0);
                CRCHLatticePath::operator=(v55, (uint64_t)v65);
                CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v65);
              }
            }
          }
          CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v64);
        }
        while (v43-- > 2);
      }
      return;
    }
    uint64_t v15 = (CRCHLatticePath *)(v11 + 448 * ((unint64_t)v14 >> 1));
    if ((unint64_t)v13 <= 0xE000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(v15, (CRCHLatticePath *)v11, (uint64_t)v12 - 448, a3);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)v11, v15, (uint64_t)v12 - 448, a3);
      uint64_t v16 = v11 + 448 * ((unint64_t)v14 >> 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(v60, (CRCHLatticePath *)(v16 - 448), (uint64_t)v12 - 896, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(v59, (CRCHLatticePath *)(v16 + 448), (uint64_t)v12 - 1344, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)(v16 - 448), v15, v16 + 448, a3);
      CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v65, (const CRCHLatticePath *)v11);
      CRCHLatticePath::operator=(v11, (uint64_t)v15);
      CRCHLatticePath::operator=((uint64_t)v15, (uint64_t)v65);
      CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v65);
    }
    --a4;
    if ((a5 & 1) == 0 && ((*a3)(v58, (CRCHLatticePath *)v11) & 1) == 0)
    {
      CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v65, (const CRCHLatticePath *)v11);
      if ((*a3)((CRCHLatticePath *)v65, (const CRCHLatticePath *)((char *)v12 - 448)))
      {
        a1 = (CRCHLatticePath *)v11;
        do
          a1 = (CRCHLatticePath *)((char *)a1 + 448);
        while (((*a3)((CRCHLatticePath *)v65, a1) & 1) == 0);
      }
      else
      {
        unint64_t v24 = (CRCHLatticePath *)(v11 + 448);
        do
        {
          a1 = v24;
          if (v24 >= v12) {
            break;
          }
          double v25 = (*a3)((CRCHLatticePath *)v65, v24);
          unint64_t v24 = (CRCHLatticePath *)((char *)a1 + 448);
        }
        while (!v25);
      }
      uint64_t v26 = (unint64_t)v12;
      if (a1 < v12)
      {
        uint64_t v26 = (unint64_t)v12;
        do
          v26 -= 448;
        while (((*a3)((CRCHLatticePath *)v65, (CRCHLatticePath *)v26) & 1) != 0);
      }
      while ((unint64_t)a1 < v26)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a1, v26);
        do
          a1 = (CRCHLatticePath *)((char *)a1 + 448);
        while (!(*a3)((CRCHLatticePath *)v65, a1));
        do
          v26 -= 448;
        while (((*a3)((CRCHLatticePath *)v65, (CRCHLatticePath *)v26) & 1) != 0);
      }
      if ((CRCHLatticePath *)((char *)a1 - 448) != (CRCHLatticePath *)v11) {
        CRCHLatticePath::operator=(v11, (uint64_t)a1 - 448);
      }
      CRCHLatticePath::operator=((uint64_t)a1 - 448, (uint64_t)v65);
      CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v65);
      a5 = 0;
      goto LABEL_1;
    }
    CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v65, (const CRCHLatticePath *)v11);
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = (*a3)((CRCHLatticePath *)(v11 + v17 + 448), (CRCHLatticePath *)v65);
      v17 += 448;
    }
    while ((v18 & 1) != 0);
    int v19 = v11 + v17;
    uint64_t v20 = v12;
    if (v17 == 448)
    {
      uint64_t v20 = v12;
      do
      {
        if (v19 >= (unint64_t)v20) {
          break;
        }
        uint64_t v20 = (CRCHLatticePath *)((char *)v20 - 448);
      }
      while (((*a3)(v20, (CRCHLatticePath *)v65) & 1) == 0);
    }
    else
    {
      do
        uint64_t v20 = (CRCHLatticePath *)((char *)v20 - 448);
      while (!(*a3)(v20, (CRCHLatticePath *)v65));
    }
    if (v19 >= (unint64_t)v20)
    {
      unint64_t v12 = (const CRCHLatticePath *)(v19 - 448);
    }
    else
    {
      uint64_t v21 = (CRCHLatticePath *)(v11 + v17);
      uint64_t v22 = (unint64_t)v20;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(v21, v22);
        do
          uint64_t v21 = (CRCHLatticePath *)((char *)v21 + 448);
        while (((*a3)(v21, (CRCHLatticePath *)v65) & 1) != 0);
        do
          v22 -= 448;
        while (!(*a3)((CRCHLatticePath *)v22, (CRCHLatticePath *)v65));
      }
      while ((unint64_t)v21 < v22);
      unint64_t v12 = (CRCHLatticePath *)((char *)v21 - 448);
    }
    if (v12 != (const CRCHLatticePath *)v11) {
      CRCHLatticePath::operator=(v11, (uint64_t)v12);
    }
    CRCHLatticePath::operator=((uint64_t)v12, (uint64_t)v65);
    CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v65);
    if (v19 < (unint64_t)v20) {
      goto LABEL_34;
    }
    uint64_t v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(v11, v12, a3);
    a1 = (const CRCHLatticePath *)((char *)v12 + 448);
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((uint64_t)v12 + 448, a2, a3))
    {
      if (v23) {
        goto LABEL_1;
      }
LABEL_34:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*,false>(v11, v12, a3, a4, a5 & 1);
      a5 = 0;
      a1 = (const CRCHLatticePath *)((char *)v12 + 448);
      goto LABEL_1;
    }
    if (v23) {
      return;
    }
  }
  int v27 = (const CRCHLatticePath *)(v11 + 448);
  int v29 = (const CRCHLatticePath *)v11 == v12 || v27 == v12;
  if (a5)
  {
    if (!v29)
    {
      BOOL v30 = 0;
      uint64_t v31 = (const CRCHLatticePath *)v11;
      do
      {
        uint64_t v32 = v31;
        uint64_t v31 = v27;
        if ((*a3)(v27, v32))
        {
          CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v65, v31);
          uint64_t v33 = v30;
          while (1)
          {
            CRCHLatticePath::operator=(v11 + v33 + 448, v11 + v33);
            if (!v33) {
              break;
            }
            uint64_t v34 = (*a3)((CRCHLatticePath *)v65, (CRCHLatticePath *)(v11 + v33 - 448));
            v33 -= 448;
            if ((v34 & 1) == 0)
            {
              int v35 = v11 + v33 + 448;
              goto LABEL_74;
            }
          }
          int v35 = v11;
LABEL_74:
          CRCHLatticePath::operator=(v35, (uint64_t)v65);
          CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v65);
        }
        int v27 = (const CRCHLatticePath *)((char *)v31 + 448);
        v30 += 448;
      }
      while ((const CRCHLatticePath *)((char *)v31 + 448) != v12);
    }
  }
  else if (!v29)
  {
    do
    {
      uint64_t v57 = v27;
      if ((*a3)(v27, (CRCHLatticePath *)v11))
      {
        CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v65, v57);
        do
        {
          CRCHLatticePath::operator=(v11 + 448, v11);
          v11 -= 448;
        }
        while (((*a3)((CRCHLatticePath *)v65, (CRCHLatticePath *)v11) & 1) != 0);
        CRCHLatticePath::operator=(v11 + 448, (uint64_t)v65);
        CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v65);
      }
      int v27 = (const CRCHLatticePath *)((char *)v57 + 448);
      uint64_t v11 = (uint64_t)v57;
    }
    while ((const CRCHLatticePath *)((char *)v57 + 448) != v12);
  }
}

  uint64_t v10 = a2 - 2;
  uint64_t j = (unint64_t)a1;
  while (1)
  {
    a1 = (float *)j;
    unint64_t v12 = (uint64_t)a2 - j;
    unint64_t v13 = (uint64_t)((uint64_t)a2 - j) >> 3;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int v45 = *(a2 - 2);
          BOOL v46 = *(float *)j;
          if (v45 < *(float *)j || v46 >= v45 && *(a2 - 1) < *(float *)(j + 4))
          {
            *(float *)uint64_t j = v45;
            *(a2 - 2) = v46;
            int v47 = *(_DWORD *)(j + 4);
            *(float *)(j + 4) = *(a2 - 1);
            *((_DWORD *)a2 - 1) = v47;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)j, (float *)(j + 8), a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)j, j + 8, j + 16, (uint64_t)(a2 - 2));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)j, j + 8, j + 16, j + 24, (uint64_t)(a2 - 2));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 191)
    {
      BOOL v48 = (float *)(j + 8);
      uint64_t v50 = (float *)j == a2 || v48 == a2;
      if (a4)
      {
        if (v50) {
          return;
        }
        double v51 = 0;
        uint64_t v52 = j;
        while (2)
        {
          id v53 = (float *)v52;
          uint64_t v52 = (unint64_t)v48;
          uint64_t v54 = v53[2];
          uint64_t v55 = *v53;
          if (v54 < *v53)
          {
            BOOL v56 = v53[3];
            goto LABEL_111;
          }
          if (v55 >= v54)
          {
            BOOL v56 = v53[3];
            if (v56 < v53[1])
            {
LABEL_111:
              v53[2] = v55;
              v48[1] = v53[1];
              uint64_t v57 = (float *)j;
              if (v53 != (float *)j)
              {
                uint64_t v58 = v51;
                do
                {
                  uint64_t v59 = *(float *)(j + v58 - 8);
                  if (v54 >= v59)
                  {
                    if (v59 < v54)
                    {
                      uint64_t v57 = v53;
                      goto LABEL_120;
                    }
                    uint64_t v57 = (float *)(j + v58);
                    uint64_t v60 = *(float *)(j + v58 - 4);
                    if (v56 >= v60) {
                      goto LABEL_120;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(float *)(j + v58 - 4);
                  }
                  v53 -= 2;
                  int v61 = (float *)(j + v58);
                  char *v61 = v59;
                  v61[1] = v60;
                  v58 -= 8;
                }
                while (v58);
                uint64_t v57 = (float *)j;
              }
LABEL_120:
              *uint64_t v57 = v54;
              v57[1] = v56;
            }
          }
          BOOL v48 = (float *)(v52 + 8);
          v51 += 8;
          if ((float *)(v52 + 8) == a2) {
            return;
          }
          continue;
        }
      }
      if (v50) {
        return;
      }
      uint64_t v101 = j + 4;
      while (2)
      {
        uint64_t v102 = a1;
        a1 = v48;
        uint64_t v103 = v102[2];
        int v104 = *v102;
        if (v103 >= *v102)
        {
          if (v104 >= v103)
          {
            BOOL v105 = v102[3];
            if (v105 < v102[1]) {
              goto LABEL_186;
            }
          }
        }
        else
        {
          BOOL v105 = v102[3];
LABEL_186:
          for (uint64_t i = (float *)v101; ; i -= 2)
          {
            long long v107 = *i;
            i[1] = v104;
            i[2] = v107;
            int v104 = *(i - 3);
            if (v103 >= v104 && (v104 < v103 || v105 >= *(i - 2))) {
              break;
            }
          }
          *(i - 1) = v103;
          *uint64_t i = v105;
        }
        v48 += 2;
        v101 += 8;
        if (a1 + 2 == a2) {
          return;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = (float *)(j + 8 * (v13 >> 1));
    if ((unint64_t)v12 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(a1, &a1[2 * (v13 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(a1 + 2, v15 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(a1 + 4, &a1[2 * v14 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(v15 - 2, v15, &a1[2 * v14 + 2]);
      uint64_t v16 = *(void *)a1;
      *(void *)a1 = *(void *)v15;
      *(void *)uint64_t v15 = v16;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(&a1[2 * (v13 >> 1)], a1, a2 - 2);
    }
    --a3;
    uint64_t v17 = *a1;
    if ((a4 & 1) != 0 || (uint64_t v18 = *(a1 - 2), v18 < v17))
    {
LABEL_13:
      uint64_t v20 = 0;
      uint64_t v21 = a1[1];
      while (1)
      {
        uint64_t v22 = a1[v20 + 2];
        if (v22 >= v17 && (v17 < v22 || a1[v20 + 3] >= v21)) {
          break;
        }
        v20 += 2;
      }
      uint64_t v23 = (unint64_t)&a1[v20 + 2];
      if (v20 * 4)
      {
        unint64_t v24 = *v10;
        double v25 = a2 - 2;
        if (*v10 >= v17)
        {
          do
          {
            if (v17 >= v24 && v25[1] < v21) {
              break;
            }
            uint64_t v26 = *(v25 - 2);
            v25 -= 2;
            unint64_t v24 = v26;
          }
          while (v26 >= v17);
        }
      }
      else
      {
        double v25 = a2;
        if (v23 < (unint64_t)a2)
        {
          int v27 = *v10;
          double v25 = a2 - 2;
          if (*v10 >= v17)
          {
            double v25 = a2 - 2;
            do
            {
              if (v17 >= v27)
              {
                if (v23 >= (unint64_t)v25 || v25[1] < v21) {
                  break;
                }
              }
              else if (v23 >= (unint64_t)v25)
              {
                break;
              }
              double v28 = *(v25 - 2);
              v25 -= 2;
              int v27 = v28;
            }
            while (v28 >= v17);
          }
        }
      }
      if (v23 >= (unint64_t)v25)
      {
        uint64_t j = v23;
      }
      else
      {
        int v29 = *v25;
        uint64_t j = v23;
        BOOL v30 = v25;
        do
        {
          *(float *)uint64_t j = v29;
          *BOOL v30 = v22;
          uint64_t v31 = *(_DWORD *)(j + 4);
          *(float *)(j + 4) = v30[1];
          *((_DWORD *)v30 + 1) = v31;
          do
          {
            do
            {
              uint64_t v32 = *(float *)(j + 8);
              j += 8;
              uint64_t v22 = v32;
            }
            while (v32 < v17);
          }
          while (v17 >= v22 && *(float *)(j + 4) < v21);
          do
          {
            uint64_t v33 = *(v30 - 2);
            v30 -= 2;
            int v29 = v33;
          }
          while (v33 >= v17 && (v17 < v29 || v30[1] >= v21));
        }
        while (j < (unint64_t)v30);
      }
      if ((float *)(j - 8) != a1)
      {
        *a1 = *(float *)(j - 8);
        a1[1] = *(float *)(j - 4);
      }
      *(float *)(j - 8) = v17;
      *(float *)(j - 4) = v21;
      if (v23 < (unint64_t)v25) {
        goto LABEL_50;
      }
      uint64_t v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((uint64_t)a1, (float *)(j - 8));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(j, a2))
      {
        a2 = (float *)(j - 8);
        if (v34) {
          return;
        }
        goto LABEL_1;
      }
      if (!v34)
      {
LABEL_50:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *,false>(a1, j - 8, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v17 < v18)
      {
        int v19 = a1[1];
      }
      else
      {
        int v19 = a1[1];
        if (*(a1 - 1) < v19) {
          goto LABEL_13;
        }
      }
      int v35 = *v10;
      if (v17 >= *v10 && (v35 < v17 || v19 >= *(a2 - 1)))
      {
        for (uint64_t j = (unint64_t)(a1 + 2);
              j < (unint64_t)a2 && v17 >= *(float *)j && (*(float *)j < v17 || v19 >= *(float *)(j + 4));
      }
      else
      {
        uint64_t j = (unint64_t)a1;
        do
        {
          BOOL v36 = *(float *)(j + 8);
          j += 8;
          BOOL v37 = v36;
        }
        while (v17 >= v36 && (v37 < v17 || v19 >= *(float *)(j + 4)));
      }
      uint64_t k = a2;
      if (j < (unint64_t)a2)
      {
        for (uint64_t k = a2 - 2; v17 < v35 || v35 >= v17 && v19 < k[1]; k -= 2)
        {
          unint64_t v39 = *(k - 2);
          int v35 = v39;
        }
      }
      if (j < (unint64_t)k)
      {
        int v40 = *(float *)j;
        BOOL v41 = *k;
        do
        {
          *(float *)uint64_t j = v41;
          *uint64_t k = v40;
          int v42 = *(_DWORD *)(j + 4);
          *(float *)(j + 4) = k[1];
          *((_DWORD *)k + 1) = v42;
          do
          {
            BOOL v43 = *(float *)(j + 8);
            j += 8;
            int v40 = v43;
          }
          while (v17 >= v43 && (v40 < v17 || v19 >= *(float *)(j + 4)));
          do
          {
            do
            {
              unint64_t v44 = *(k - 2);
              k -= 2;
              BOOL v41 = v44;
            }
            while (v17 < v44);
          }
          while (v41 >= v17 && v19 < k[1]);
        }
        while (j < (unint64_t)k);
      }
      char v4 = j - 8 >= (unint64_t)a1;
      BOOL v5 = j - 8 == (void)a1;
      if ((float *)(j - 8) != a1)
      {
        *a1 = *(float *)(j - 8);
        a1[1] = *(float *)(j - 4);
      }
      a4 = 0;
      *(float *)(j - 8) = v17;
      *(float *)(j - 4) = v19;
    }
  }
  if ((float *)j != a2)
  {
    BOOL v62 = (v13 - 2) >> 1;
    int v63 = v62;
    while (2)
    {
      BOOL v64 = v63;
      if (v62 >= v63)
      {
        long long v65 = (2 * v63) | 1;
        int v66 = (float *)(j + 8 * v65);
        if (2 * v64 + 2 < (uint64_t)v13)
        {
          BOOL v67 = v66[2];
          if (*v66 < v67 || v67 >= *v66 && *(float *)(j + 8 * v65 + 4) < v66[3])
          {
            v66 += 2;
            long long v65 = 2 * v64 + 2;
          }
        }
        BOOL v68 = (float *)(j + 8 * v64);
        unint64_t v69 = *v66;
        int v70 = *v68;
        if (*v66 >= *v68)
        {
          if (v70 < v69)
          {
            BOOL v71 = v68[1];
            goto LABEL_135;
          }
          BOOL v71 = *(float *)(j + 8 * v64 + 4);
          if (v66[1] >= v71)
          {
LABEL_135:
            *BOOL v68 = v69;
            v68[1] = v66[1];
            if (v62 >= v65)
            {
              while (1)
              {
                BOOL v73 = 2 * v65;
                long long v65 = (2 * v65) | 1;
                int v72 = (float *)(j + 8 * v65);
                int v74 = v73 + 2;
                if (v74 < (uint64_t)v13)
                {
                  BOOL v75 = v72[2];
                  if (*v72 < v75 || v75 >= *v72 && *(float *)(j + 8 * v65 + 4) < v72[3])
                  {
                    v72 += 2;
                    long long v65 = v74;
                  }
                }
                uint64_t v76 = *v72;
                if (*v72 < v70 || v70 >= v76 && v72[1] < v71) {
                  break;
                }
                RectangleFinder *v66 = v76;
                v66[1] = v72[1];
                int v66 = v72;
                if (v62 < v65) {
                  goto LABEL_137;
                }
              }
            }
            int v72 = v66;
LABEL_137:
            *int v72 = v70;
            v72[1] = v71;
          }
        }
      }
      int v63 = v64 - 1;
      if (v64) {
        continue;
      }
      break;
    }
    uint64_t v77 = (unint64_t)v12 >> 3;
    while (2)
    {
      unint64_t v78 = 0;
      uint64_t v80 = *(float *)j;
      uint64_t v79 = *(_DWORD *)(j + 4);
      uint64_t v81 = v77 - 2;
      if (v77 < 2) {
        uint64_t v81 = v77 - 1;
      }
      long long v82 = v81 >> 1;
      unint64_t v83 = j;
      do
      {
        int v84 = (_DWORD *)v83;
        BOOL v85 = v78 + 1;
        v83 += 8 * (v78 + 1);
        uint64_t v86 = 2 * v78;
        unint64_t v78 = (2 * v78) | 1;
        long long v87 = v86 + 2;
        if (v87 < v77)
        {
          BOOL v88 = *(float *)(v83 + 8);
          if (*(float *)v83 < v88 || v88 >= *(float *)v83 && *(float *)&v84[2 * v85 + 1] < *(float *)(v83 + 12))
          {
            v83 += 8;
            unint64_t v78 = v87;
          }
        }
        *int v84 = *(_DWORD *)v83;
        v84[1] = *(_DWORD *)(v83 + 4);
      }
      while (v78 <= v82);
      if ((float *)v83 == a2 - 2)
      {
        *(float *)unint64_t v83 = v80;
        *(_DWORD *)(v83 + 4) = v79;
      }
      else
      {
        *(float *)unint64_t v83 = *(a2 - 2);
        *(float *)(v83 + 4) = *(a2 - 1);
        *(a2 - 2) = v80;
        *((_DWORD *)a2 - 1) = v79;
        uint64_t v89 = v83 - j + 8;
        if (v89 >= 9)
        {
          uint64_t v90 = ((unint64_t)v89 >> 3) - 2;
          uint64_t v91 = v90 >> 1;
          int v92 = (float *)(j + 8 * (v90 >> 1));
          double v93 = *v92;
          BOOL v94 = *(float *)v83;
          if (*v92 < *(float *)v83)
          {
            uint64_t v95 = *(float *)(v83 + 4);
            goto LABEL_166;
          }
          if (v94 >= v93)
          {
            uint64_t v95 = *(float *)(v83 + 4);
            if (*(float *)(j + 8 * v91 + 4) < v95)
            {
LABEL_166:
              *(float *)unint64_t v83 = v93;
              *(_DWORD *)(v83 + 4) = *(_DWORD *)(j + 8 * v91 + 4);
              if (v90 >= 2)
              {
                while (1)
                {
                  uint64_t v97 = v91 - 1;
                  uint64_t v91 = (v91 - 1) >> 1;
                  uint64_t v96 = (float *)(j + 8 * v91);
                  uint64_t v98 = *v96;
                  if (*v96 >= v94)
                  {
                    if (v94 < v98) {
                      break;
                    }
                    uint64_t v99 = *(float *)(j + 8 * v91 + 4);
                    if (v99 >= v95) {
                      break;
                    }
                  }
                  else
                  {
                    uint64_t v99 = v96[1];
                  }
                  char *v92 = v98;
                  v92[1] = v99;
                  int v92 = (float *)(j + 8 * v91);
                  if (v97 <= 1) {
                    goto LABEL_173;
                  }
                }
              }
              uint64_t v96 = v92;
LABEL_173:
              *uint64_t v96 = v94;
              v96[1] = v95;
            }
          }
        }
      }
      a2 -= 2;
      if (v77-- <= 2) {
        return;
      }
      continue;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v14 = *a1;
  int v15 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v6 = a1[4];
  uint64_t v7 = *a2;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *a1 = v7;
  uint64_t v8 = a2[2];
  a2[2] = 0;
  uint64_t v9 = (void *)a1[2];
  a1[2] = v8;

  uint64_t v10 = a2[3];
  a2[3] = 0;
  uint64_t v11 = (void *)a1[3];
  a1[3] = v10;

  a1[4] = a2[4];
  *a2 = v14;
  *((_DWORD *)a2 + 2) = v15;
  unint64_t v12 = (void *)a2[2];
  a2[2] = v4;

  unint64_t v13 = (void *)a2[3];
  a2[3] = v5;

  a2[4] = v6;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(double *a1, double *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  int v6 = *(_DWORD *)a2;
  double v7 = a2[4];
  BOOL v8 = *(_DWORD *)a2 < *(_DWORD *)a1;
  if (*(_DWORD *)a2 == *(_DWORD *)a1) {
    BOOL v8 = v7 < a1[4];
  }
  BOOL v9 = *(_DWORD *)a3 == v6;
  BOOL v10 = *(_DWORD *)a3 < v6;
  if (v9) {
    BOOL v10 = *(double *)(a3 + 32) < v7;
  }
  if (v8)
  {
    if (v10)
    {
LABEL_11:
      unint64_t v12 = (uint64_t *)a3;
LABEL_17:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, v12);
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)a2);
    BOOL v11 = *(_DWORD *)a3 < *(_DWORD *)a2;
    if (*(_DWORD *)a3 == *(_DWORD *)a2) {
      BOOL v11 = *(double *)(a3 + 32) < a2[4];
    }
    if (v11)
    {
      a1 = a2;
      goto LABEL_11;
    }
  }
  else if (v10)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a2, (uint64_t *)a3);
    BOOL v13 = *(_DWORD *)a2 < *(_DWORD *)v5;
    if (*(_DWORD *)a2 == *(_DWORD *)v5) {
      BOOL v13 = a2[4] < v5[4];
    }
    if (v13)
    {
      a1 = v5;
      unint64_t v12 = (uint64_t *)a2;
      goto LABEL_17;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = *(_DWORD *)(a2 - 40);
      BOOL v7 = v6 == *(_DWORD *)a1;
      BOOL v8 = v6 < *(_DWORD *)a1;
      if (v7) {
        BOOL v8 = *(double *)(a2 - 8) < *(double *)(a1 + 32);
      }
      if (v8)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)(a2 - 40));
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)a1, (double *)(a1 + 40), a2 - 40);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)a1, (double *)(a1 + 40), a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)a1, (double *)(a1 + 40), a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)a1, (double *)(a1 + 40), a1 + 80);
      uint64_t v10 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)v10;
    double v14 = *(double *)(v10 + 32);
    BOOL v15 = *(_DWORD *)v10 < *(_DWORD *)v9;
    if (*(_DWORD *)v10 == *(_DWORD *)v9) {
      BOOL v15 = v14 < *(double *)(v9 + 32);
    }
    if (v15)
    {
      uint64_t v16 = *(void *)(v10 + 4);
      uint64_t v17 = *(void *)(v10 + 24);
      uint64_t v29 = *(void *)(v10 + 16);
      uint64_t v18 = v11;
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      while (1)
      {
        uint64_t v19 = a1 + v18;
        *(void *)(v19 + 120) = *(void *)(a1 + v18 + 80);
        *(_DWORD *)(v19 + 128) = *(_DWORD *)(a1 + v18 + 88);
        uint64_t v20 = *(void *)(a1 + v18 + 96);
        *(void *)(v19 + 96) = 0;
        uint64_t v21 = *(void **)(a1 + v18 + 136);
        *(void *)(v19 + 136) = v20;

        uint64_t v22 = *(void *)(a1 + v18 + 104);
        *(void *)(v19 + 104) = 0;
        uint64_t v23 = *(void **)(a1 + v18 + 144);
        *(void *)(v19 + 144) = v22;

        *(void *)(v19 + 152) = *(void *)(v19 + 112);
        if (v18 == -80) {
          break;
        }
        int v24 = *(_DWORD *)(v19 + 40);
        BOOL v7 = v13 == v24;
        BOOL v25 = v13 < v24;
        if (v7) {
          BOOL v25 = v14 < *(double *)(v19 + 72);
        }
        v18 -= 40;
        if (!v25)
        {
          uint64_t v26 = a1 + v18 + 120;
          goto LABEL_18;
        }
      }
      uint64_t v26 = a1;
LABEL_18:
      *(_DWORD *)uint64_t v26 = v13;
      *(void *)(v26 + 4) = v16;
      int v27 = *(void **)(v26 + 16);
      *(void *)(v26 + 16) = v29;

      double v28 = *(void **)(v26 + 24);
      *(void *)(v26 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v17;

      *(double *)(v26 + 32) = v14;
      if (++v12 == 8) {
        return v10 + 40 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 40;
    v10 += 40;
    if (v10 == a2) {
      return 1;
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(double *a1, double *a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(a1, a2, a3);
  BOOL v8 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3) {
    BOOL v8 = *(double *)(a4 + 32) < *(double *)(a3 + 32);
  }
  if (v8)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a3, (uint64_t *)a4);
    BOOL v9 = *(_DWORD *)a3 < *(_DWORD *)a2;
    if (*(_DWORD *)a3 == *(_DWORD *)a2) {
      BOOL v9 = *(double *)(a3 + 32) < a2[4];
    }
    if (v9)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a2, (uint64_t *)a3);
      BOOL v10 = *(_DWORD *)a2 < *(_DWORD *)a1;
      if (*(_DWORD *)a2 == *(_DWORD *)a1) {
        BOOL v10 = a2[4] < a1[4];
      }
      if (v10)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(a1, a2, a3, a4);
  BOOL v10 = *(_DWORD *)a5 < *(_DWORD *)a4;
  if (*(_DWORD *)a5 == *(_DWORD *)a4) {
    BOOL v10 = *(double *)(a5 + 32) < *(double *)(a4 + 32);
  }
  if (v10)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a4, (uint64_t *)a5);
    BOOL v11 = *(_DWORD *)a4 < *(_DWORD *)a3;
    if (*(_DWORD *)a4 == *(_DWORD *)a3) {
      BOOL v11 = *(double *)(a4 + 32) < *(double *)(a3 + 32);
    }
    if (v11)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a3, (uint64_t *)a4);
      BOOL v12 = *(_DWORD *)a3 < *(_DWORD *)a2;
      if (*(_DWORD *)a3 == *(_DWORD *)a2) {
        BOOL v12 = *(double *)(a3 + 32) < a2[4];
      }
      if (v12)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a2, (uint64_t *)a3);
        BOOL v13 = *(_DWORD *)a2 < *(_DWORD *)a1;
        if (*(_DWORD *)a2 == *(_DWORD *)a1) {
          BOOL v13 = a2[4] < a1[4];
        }
        if (v13)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
}

uint64_t *std::vector<BreakPoint>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      uint64_t v8 = *(void *)(v2 + v5 - 40);
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 40) = v8;
      long long v9 = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v7 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v6 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  *BOOL result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__split_buffer<BreakPoint>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<double>::__throw_out_of_range[abi:ne180100]()
{
}

void sub_1DD789CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD789DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD789EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD789F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD78AD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1DD78C398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

double CRDetectorUtils::makeCenterPoint(CRDetectorUtils *this, CGPoint *a2)
{
  uint64_t v2 = 0;
  float32x2_t v3 = 0;
  do
  {
    float32x2_t v3 = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)((char *)this + v2), vcvtq_f64_f32(v3)));
    v2 += 16;
  }
  while (v2 != 64);
  __asm { FMOV            V1.2D, #0.25 }
  *(void *)&double result = *(_OWORD *)&vmulq_f64(vcvtq_f64_f32(v3), _Q1);
  return result;
}

float CRDetectorUtils::rectIntersectionOverUnion(CGRect *this, const CGRect *a2, const CGRect *a3)
{
  CGRect v6 = CGRectIntersection(*this, *a2);
  *(float *)&v6.origin.float x = v6.size.width * v6.size.height;
  *(float *)&v6.origin.double y = a2->size.width * a2->size.height
                         + this->size.width * this->size.height
                         - *(float *)&v6.origin.x;
  return *(float *)&v6.origin.x / *(float *)&v6.origin.y;
}

uint64_t CRDetectorUtils::convertPointToRect(uint64_t this, const CGPoint *a2)
{
  uint64_t v2 = 0;
  double v3 = 1.79769313e308;
  double v4 = 2.22507386e-308;
  double v5 = 2.22507386e-308;
  double v6 = 1.79769313e308;
  do
  {
    double v7 = *(double *)(this + v2);
    double v8 = *(double *)(this + v2 + 8);
    if (v7 >= v5) {
      double v5 = *(double *)(this + v2);
    }
    if (v7 <= v6) {
      double v6 = *(double *)(this + v2);
    }
    if (v8 >= v4) {
      double v4 = *(double *)(this + v2 + 8);
    }
    if (v8 <= v3) {
      double v3 = *(double *)(this + v2 + 8);
    }
    v2 += 16;
  }
  while (v2 != 64);
  return this;
}

void CRDetectorUtils::rotatePolygon(CRDetectorUtils *this, const CGPoint *a2, const CGPoint *a3, double a4, CGPoint *a5)
{
  float v8 = a4;
  __float2 v9 = __sincosf_stret(v8);
  uint64_t v10 = 0;
  double cosval = v9.__cosval;
  double sinval = v9.__sinval;
  do
  {
    double y = a2->y;
    double v14 = *(double *)((char *)this + v10 * 16) - a2->x;
    double v15 = *(double *)((char *)this + v10 * 16 + 8) - y;
    uint64_t v16 = (CGPoint *)&a3[v10];
    v16->float x = a2->x + v14 * cosval - v15 * sinval;
    v16->double y = y + v15 * cosval + v14 * sinval;
    ++v10;
  }
  while (v10 != 4);
}

void CRDetectorUtils::rotateContour(uint64_t *a1, double *a2, void *a3, double a4)
{
  float v7 = a4;
  __float2 v8 = __sincosf_stret(v7);
  uint64_t v9 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = (int *)(v9 + v10);
      double v13 = a2[1];
      float v14 = (float)(int)((double)*v12 - *a2);
      float v15 = (float)(int)((double)v12[1] - v13);
      *(void *)(*a3 + 8 * v11++) = (int)(*a2
                                                       + (float)((float)((float)-v8.__sinval * v15)
                                                               + (float)(v14 * v8.__cosval))) | ((unint64_t)(int)(v13 + (float)((float)(v8.__cosval * v15) + (float)(v14 * v8.__sinval))) << 32);
      uint64_t v9 = *a1;
      v10 += 8;
    }
    while (v11 < (a1[1] - *a1) >> 3);
  }
}

CGFloat CRDetectorUtils::rotatePointBasedOnCenter(CRDetectorUtils *this, const CGPoint *a2, const CGPoint *a3, double a4)
{
  float v6 = a4;
  __float2 v7 = __sincosf_stret(v6);
  return a2->x + (*(double *)this - a2->x) * v7.__cosval - (*((double *)this + 1) - a2->y) * v7.__sinval;
}

double CRDetectorUtils::smoothAngleForPointPairBetweenNeighbors(double *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  long double v18 = a2 - a4;
  long double v19 = a3 - a5;
  double v20 = *a1;
  double v21 = a1[1];
  double v23 = a1[2];
  double v22 = a1[3];
  long double __x = a6 - a8;
  long double v24 = a7 - a9;
  double v25 = atan2(v21 - v22, *a1 - v23);
  double v26 = atan2(v19, v18);
  long double v27 = ((atan2(v24, __x) - v26) * 0.5 - (v25 - v26)) * a10;
  double v28 = (v20 + v23) * 0.5;
  double v29 = (v21 + v22) * 0.5;
  *(float *)&long double v27 = v27;
  __float2 v30 = __sincosf_stret(*(float *)&v27);
  *a1 = v28 + (v20 - v28) * v30.__cosval - (v21 - v29) * v30.__sinval;
  a1[1] = v29 + (v21 - v29) * v30.__cosval + (v20 - v28) * v30.__sinval;
  double result = v29 + (v22 - v29) * v30.__cosval + (v23 - v28) * v30.__sinval;
  a1[2] = v28 + (v23 - v28) * v30.__cosval - (v22 - v29) * v30.__sinval;
  a1[3] = result;
  return result;
}

uint64_t CRDetectorUtils::computeConnectedComponents(CRDetectorUtils *this, float *a2, unint64_t a3, uint64_t a4, CRDetectorUtils::CRTextDetectorConnectedComponentResult *a5)
{
  long long v36 = 0u;
  memset(v35, 0, sizeof(v35));
  if (a3)
  {
    unint64_t v8 = 0;
    int v9 = 0;
    do
    {
      if (a2)
      {
        uint64_t v10 = 0;
        int v11 = v8 * a2;
        int v27 = v8 * a2;
        unint64_t v28 = v8;
        do
        {
          if (*((float *)this + (int)v10 + v11) >= 0.8
            && (!*(void *)(*(void *)a4 + 8 * ((void)v10 + *(void *)(a4 + 104) * v8)) || v9 == 0))
          {
            unint64_t v34 = __PAIR64__(v10, v8);
            std::deque<std::pair<int,int>>::push_back(v35, &v34);
            unint64_t v31 = ++v9;
            CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)a4, v8, (unint64_t)v10, v9);
            uint64_t v13 = *((void *)&v36 + 1);
            if (*((void *)&v36 + 1))
            {
              double v29 = v10;
              int v30 = v9;
              do
              {
                float v14 = (int *)(*(void *)(*((void *)&v35[0] + 1) + (((unint64_t)v36 >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * (v36 & 0x1FF));
                int v15 = *v14;
                int v16 = v14[1];
                *(void *)&long long v36 = v36 + 1;
                *((void *)&v36 + 1) = v13 - 1;
                if ((unint64_t)v36 > 0x3FF)
                {
                  operator delete(**((void ***)&v35[0] + 1));
                  *((void *)&v35[0] + 1) += 8;
                  *(void *)&long long v36 = v36 - 512;
                }
                for (uint64_t i = 0; i != 8; ++i)
                {
                  unint64_t v18 = dword_1DD8CE468[i] + (uint64_t)v15;
                  uint64_t v19 = dword_1DD8CE488[i];
                  unint64_t v20 = v19 + v16;
                  int v33 = v19 + v16;
                  LODWORD(v34) = v18;
                  if ((v18 & 0x80000000) == 0
                    && v18 < a3
                    && (v20 & 0x80000000) == 0
                    && v20 < (unint64_t)a2
                    && *((float *)this + (int)v20 + (int)v18 * (int)a2) >= 0.8
                    && !*(void *)(*(void *)a4 + 8 * (v20 + *(void *)(a4 + 104) * v18)))
                  {
                    std::deque<std::pair<int,int>>::emplace_back<int &,int &>(v35, &v34, &v33);
                    CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)a4, v18, v20, v31);
                  }
                }
                uint64_t v13 = *((void *)&v36 + 1);
              }
              while (*((void *)&v36 + 1));
              unint64_t v8 = v28;
              uint64_t v10 = v29;
              int v9 = v30;
              int v11 = v27;
            }
          }
          uint64_t v10 = (float *)((char *)v10 + 1);
        }
        while (v10 != a2);
      }
      ++v8;
    }
    while (v8 != a3);
  }
  if (*(unsigned char *)(a4 + 137))
  {
    double v21 = *(unint64_t **)(a4 + 8);
    uint64_t v22 = *(void *)(a4 + 16) - (void)v21;
    if (v22)
    {
      unint64_t v23 = v22 >> 3;
      long double v24 = *(float64x2_t **)(a4 + 56);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      do
      {
        unint64_t v25 = *v21++;
        *long double v24 = vdivq_f64(*v24, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v25), 0));
        ++v24;
        --v23;
      }
      while (v23);
    }
  }
  return std::deque<std::pair<int,int>>::~deque[abi:ne180100](v35);
}

void sub_1DD78E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel(CRDetectorUtils::CRTextDetectorConnectedComponentResult *this, unint64_t a2, unint64_t a3, unint64_t a4)
{
  *(void *)(*(void *)this + 8 * (a3 + *((void *)this + 13) * a2)) = a4;
  unint64_t v8 = a4 - *((int *)this + 30);
  uint64_t v10 = (uint64_t *)((char *)this + 8);
  uint64_t v9 = *((void *)this + 1);
  if (v8 >= (*((void *)this + 2) - v9) >> 3)
  {
    uint64_t v42 = 0;
    std::vector<unsigned long>::resize((uint64_t)this + 8, v8 + 1, &v42);
    uint64_t v9 = *v10;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = *(void *)(v9 + 8 * v8) + 1;
  }
  *(void *)(v9 + 8 * v8) = v11;
  uint64_t v12 = *((void *)this + 10);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 11) - v12) >> 3) <= v8)
  {
    std::vector<std::vector<CGPoint>>::resize((uint64_t *)this + 10, v8 + 1);
    uint64_t v12 = *((void *)this + 10);
  }
  uint64_t v13 = v12 + 24 * v8;
  double v14 = (double)a3;
  double v15 = (double)a2;
  uint64_t v17 = (double **)(v13 + 8);
  int v16 = *(double **)(v13 + 8);
  uint64_t v19 = (char **)(v13 + 16);
  unint64_t v18 = *(void *)(v13 + 16);
  if ((unint64_t)v16 >= v18)
  {
    double v21 = *(double **)v13;
    uint64_t v22 = ((uint64_t)v16 - *(void *)v13) >> 4;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v18 - (void)v21;
    if (v24 >> 3 > v23) {
      unint64_t v23 = v24 >> 3;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      double v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)v19, v25);
      int v16 = *v17;
      double v21 = *(double **)v13;
    }
    else
    {
      double v26 = 0;
    }
    int v27 = (double *)&v26[16 * v22];
    unint64_t v28 = &v26[16 * v25];
    double *v27 = v14;
    v27[1] = v15;
    unint64_t v20 = v27 + 2;
    if (v16 != v21)
    {
      do
      {
        *((_OWORD *)v27 - 1) = *((_OWORD *)v16 - 1);
        v27 -= 2;
        v16 -= 2;
      }
      while (v16 != v21);
      double v21 = *(double **)v13;
    }
    *(void *)uint64_t v13 = v27;
    *uint64_t v17 = v20;
    unsigned char *v19 = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *int v16 = v14;
    v16[1] = v15;
    unint64_t v20 = v16 + 2;
  }
  *uint64_t v17 = v20;
  ++*((void *)this + 16);
  if (*((unsigned char *)this + 136))
  {
    uint64_t v29 = *((void *)this + 4);
    if (v8 >= (*((void *)this + 5) - v29) >> 5)
    {
      std::vector<CRDetectorUtils::CRTextDetectorCCBoundary>::resize((uint64_t)this + 32, a4);
      int v35 = (int64x2_t *)(*((void *)this + 4) + 32 * v8);
      int64x2_t *v35 = vdupq_n_s64(a2);
      v35[1] = vdupq_n_s64(a3);
    }
    else
    {
      int v30 = (unint64_t *)(v29 + 32 * v8);
      unint64_t v31 = v30[2];
      unint64_t v32 = v30[3];
      if (v31 >= a3) {
        unint64_t v31 = a3;
      }
      if (v32 <= a3) {
        unint64_t v32 = a3;
      }
      v30[2] = v31;
      v30[3] = v32;
      unint64_t v33 = *v30;
      unint64_t v34 = v30[1];
      if (*v30 >= a2) {
        unint64_t v33 = a2;
      }
      if (v34 <= a2) {
        unint64_t v34 = a2;
      }
      *int v30 = v33;
      v30[1] = v34;
    }
  }
  if (*((unsigned char *)this + 137))
  {
    uint64_t v36 = *((void *)this + 7);
    uint64_t v37 = *((void *)this + 8);
    unint64_t v38 = (void *)((char *)this + 56);
    if (v8 >= (v37 - v36) >> 4)
    {
      std::vector<CGPoint>::resize((uint64_t)v38, a4);
      BOOL v41 = (double *)(*v38 + 16 * v8);
      double *v41 = v14;
      v41[1] = v15;
    }
    else
    {
      unint64_t v39 = (double *)(v36 + 16 * v8);
      double v40 = v39[1] + v15;
      *unint64_t v39 = *v39 + v14;
      v39[1] = v40;
    }
  }
}

uint64_t CRDetectorUtils::recomputeConnectedComponentsForLabelsInRect(uint64_t this, CRDetectorUtils::CRTextDetectorConnectedComponentResult *a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v7 = *(void *)(this + 16) - *(void *)(this + 8);
  unint64_t v8 = *(int *)(this + 120) + (v7 >> 3);
  if (v8 > (unint64_t)a2)
  {
    uint64_t v9 = a2;
    uint64_t v49 = (char *)a2 + a3;
    if ((unint64_t)a2 + a3 - 1 < v8)
    {
      uint64_t v12 = this;
      long long v53 = 0u;
      memset(v52, 0, sizeof(v52));
      uint64_t v42 = v7 >> 3;
      uint64_t v44 = (v7 >> 3) - 1;
      if (a6 <= a7)
      {
        uint64_t v47 = (v7 >> 3) - 1;
        unint64_t v15 = a6;
        do
        {
          if (a4 <= a5)
          {
            unint64_t v16 = a4;
            unint64_t v45 = v15;
            do
            {
              unint64_t v17 = *(void *)(*(void *)v12 + 8 * (v16 + *(void *)(v12 + 104) * v15));
              if (v17 >= (unint64_t)v9 && v17 < (unint64_t)v49)
              {
                unint64_t v51 = __PAIR64__(v16, v15);
                std::deque<std::pair<int,int>>::push_back(v52, &v51);
                unint64_t v46 = v16;
                CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)v12, v15, v16, ++v47 + *(int *)(v12 + 120));
                while (*((void *)&v53 + 1))
                {
                  uint64_t v19 = (int *)(*(void *)(*((void *)&v52[0] + 1)
                                          + (((unint64_t)v53 >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (v53 & 0x1FF));
                  int v20 = *v19;
                  int v21 = v19[1];
                  *(void *)&long long v53 = v53 + 1;
                  --*((void *)&v53 + 1);
                  if ((unint64_t)v53 > 0x3FF)
                  {
                    operator delete(**((void ***)&v52[0] + 1));
                    *((void *)&v52[0] + 1) += 8;
                    *(void *)&long long v53 = v53 - 512;
                  }
                  for (uint64_t i = 0; i != 8; ++i)
                  {
                    unint64_t v23 = dword_1DD8CE468[i] + (uint64_t)v20;
                    uint64_t v24 = dword_1DD8CE488[i];
                    unint64_t v25 = v24 + v21;
                    int v50 = v24 + v21;
                    LODWORD(v51) = v23;
                    if (v23 >= a6 && v23 <= a7 && v25 >= a4 && v25 <= a5)
                    {
                      unint64_t v29 = *(void *)(*(void *)v12 + 8 * (v25 + *(void *)(v12 + 104) * v23));
                      if (v29 >= (unint64_t)a2 && v29 < (unint64_t)v49)
                      {
                        std::deque<std::pair<int,int>>::emplace_back<int &,int &>(v52, &v51, &v50);
                        CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)v12, v23, v25, v47 + *(int *)(v12 + 120));
                      }
                    }
                  }
                }
                uint64_t v9 = a2;
                unint64_t v15 = v45;
                unint64_t v16 = v46;
              }
              ++v16;
            }
            while (v16 <= a5);
          }
          ++v15;
        }
        while (v15 <= a7);
      }
      uint64_t v31 = a3;
      if (v49 > (char *)v9)
      {
        uint64_t v32 = *(int *)(v12 + 120);
        unint64_t v33 = (void *)(24 * (void)v9 - 24 * (int)v32 + *(void *)(v12 + 80) + 8);
        unint64_t v34 = (void *)(*(void *)(v12 + 8) - 8 * v32 + 8 * (void)v9);
        do
        {
          *v34++ = 0;
          void *v33 = *(v33 - 1);
          v33 += 3;
          --v31;
        }
        while (v31);
      }
      if (*(unsigned char *)(v12 + 137))
      {
        uint64_t v35 = *(int *)(v12 + 120);
        uint64_t v36 = *(void *)(v12 + 8);
        uint64_t v37 = *(void *)(v12 + 16) - v36;
        if (v44 - v35 + 1 < (unint64_t)(v37 >> 3))
        {
          uint64_t v38 = (v37 >> 3) + v35 - v42;
          unint64_t v39 = (float64x2_t *)(*(void *)(v12 + 56) - 16 * v35 + 16 * v42);
          double v40 = (unint64_t *)(v36 - 8 * v35 + 8 * v42);
          do
          {
            unint64_t v41 = *v40++;
            *unint64_t v39 = vdivq_f64(*v39, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v41), 0));
            ++v39;
            --v38;
          }
          while (v38);
        }
      }
      return std::deque<std::pair<int,int>>::~deque[abi:ne180100](v52);
    }
  }
  return this;
}

void sub_1DD78EF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void CRDetectorUtils::growConnectedComponents(uint64_t a1, uint64_t *a2, int **a3, CRDetectorUtils::CRTextDetectorConnectedComponentResult *a4, void *a5, float a6)
{
  uint64_t v6 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v11 = *(void *)(a1 + 104);
    uint64_t v10 = *(void *)(a1 + 112);
    unint64_t v12 = v6 >> 3;
    std::vector<std::vector<PixelPosition>>::vector(v113, v6 >> 3);
    std::vector<std::vector<PixelPosition>>::vector(&v111, v12);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v105 = v10;
    uint64_t v15 = v11;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    do
    {
      std::vector<PixelPosition>::reserve((void **)(*(void *)v113 + v13), *(void *)(*(void *)(a1 + 8) + 8 * v14++));
      v13 += 24;
    }
    while (v12 != v14);
    if ((int)v10 >= 1)
    {
      int v16 = v11;
      unint64_t v17 = 0;
      do
      {
        if (v16 >= 1)
        {
          unint64_t v18 = 0;
          unint64_t v108 = v17 << 32;
          do
          {
            uint64_t v19 = *(void *)(*(void *)a1 + 8 * (v18 + *(void *)(a1 + 104) * v17));
            if (v19)
            {
              unint64_t v20 = v19 - *(int *)(a1 + 120);
              if ((*(void *)(*a5 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20))
              {
                int v21 = (unint64_t **)(*(void *)v113 + 24 * v20);
                uint64_t v22 = (void **)(v21 + 1);
                unint64_t v23 = v21[1];
                unint64_t v25 = v21 + 2;
                unint64_t v24 = (unint64_t)v21[2];
                if ((unint64_t)v23 >= v24)
                {
                  uint64_t v27 = v23 - *v21;
                  if ((unint64_t)(v27 + 1) >> 61) {
                    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v28 = v24 - (void)*v21;
                  uint64_t v29 = v28 >> 2;
                  if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
                    uint64_t v29 = v27 + 1;
                  }
                  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v30 = v29;
                  }
                  if (v30) {
                    uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v25, v30);
                  }
                  else {
                    uint64_t v31 = 0;
                  }
                  uint64_t v32 = (unint64_t *)&v31[8 * v27];
                  *uint64_t v32 = v18 | v108;
                  double v26 = v32 + 1;
                  unint64_t v33 = (char *)*v22;
                  unint64_t v34 = *v21;
                  if (*v22 != *v21)
                  {
                    do
                    {
                      unint64_t v35 = *((void *)v33 - 1);
                      v33 -= 8;
                      *--uint64_t v32 = v35;
                    }
                    while (v33 != (char *)v34);
                    unint64_t v33 = (char *)*v21;
                  }
                  *int v21 = v32;
                  *uint64_t v22 = v26;
                  *unint64_t v25 = &v31[8 * v30];
                  if (v33) {
                    operator delete(v33);
                  }
                }
                else
                {
                  *unint64_t v23 = v18 | v108;
                  double v26 = v23 + 1;
                }
                *uint64_t v22 = v26;
                CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel(a4, v17, v18, *(void *)(*(void *)a1 + 8 * (v18 + *(void *)(a1 + 104) * v17)));
              }
            }
            ++v18;
          }
          while (v18 != v15);
        }
        ++v17;
      }
      while (v17 != v105);
    }
    uint64_t v37 = *a3;
    uint64_t v36 = a3[1];
    uint64_t v38 = (uint64_t)(*a3 + 1);
    if (*a3 != v36 && v38 != (void)v36)
    {
      int v40 = *v37;
      unint64_t v41 = *a3 + 1;
      do
      {
        int v43 = *v41++;
        int v42 = v43;
        BOOL v44 = v40 < v43;
        if (v40 <= v43) {
          int v40 = v42;
        }
        if (v44) {
          uint64_t v37 = (int *)v38;
        }
        uint64_t v38 = (uint64_t)v41;
      }
      while (v41 != v36);
    }
    if (*v37 >= 1)
    {
      int v101 = 0;
      uint64_t v99 = v37;
      do
      {
        unint64_t v46 = v111;
        uint64_t v45 = (uint64_t)v112;
        if (v112 == v111)
        {
          unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * (v112 - v111);
          unint64_t v46 = v112;
        }
        else
        {
          unint64_t v47 = 0;
          do
          {
            unint64_t v109 = v47;
            if (*a3)[v47] >= v101 && ((*(void *)(*a5 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v47))
            {
              BOOL v48 = (unsigned int **)(*(void *)v113 + 24 * v47);
              uint64_t v49 = &v46[3 * v47];
              std::vector<PixelPosition>::reserve(v49, v48[1] - *v48);
              int v50 = *v48;
              uint64_t v103 = v48[1];
              if (*v48 != v103)
              {
                uint64_t v51 = *a2;
                double v52 = (double)(*((_DWORD *)a4 + 28) - 1);
                double v53 = (double)(*((_DWORD *)a4 + 26) - 1);
                uint64_t v54 = &v46[3 * v109];
                uint64_t v55 = v54 + 1;
                BOOL v56 = v54 + 2;
                do
                {
                  unint64_t v58 = (int)*v50;
                  unint64_t v57 = (int)v50[1];
                  int v104 = v50;
                  int v59 = (int)fmax((double)((int)v57 - 1), 0.0);
                  int v60 = (int)fmin(v52, (double)((int)v57 + 1));
                  if (v59 <= v60)
                  {
                    uint64_t v106 = *v50;
                    int64_t v61 = v59;
                    int64_t v62 = v60;
                    do
                    {
                      if (*(float *)(v51 + 4 * (v58 + a2[2] * v61)) >= a6
                        && *(void *)(*(void *)a4 + 8 * (v58 + *((void *)a4 + 13) * v61)) < (unint64_t)*((int *)a4 + 30))
                      {
                        int v63 = (char *)*v55;
                        if ((unint64_t)*v55 >= *v56)
                        {
                          uint64_t v65 = (v63 - (unsigned char *)*v49) >> 3;
                          if ((unint64_t)(v65 + 1) >> 61) {
LABEL_117:
                          }
                            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                          uint64_t v66 = *v56 - (void)*v49;
                          uint64_t v67 = v66 >> 2;
                          if (v66 >> 2 <= (unint64_t)(v65 + 1)) {
                            uint64_t v67 = v65 + 1;
                          }
                          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v68 = v67;
                          }
                          if (v68) {
                            unint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v56, v68);
                          }
                          else {
                            unint64_t v69 = 0;
                          }
                          int v70 = (int64_t *)&v69[8 * v65];
                          *int v70 = v106 | (v61 << 32);
                          BOOL v64 = v70 + 1;
                          BOOL v71 = (char *)*v55;
                          int v72 = (char *)*v49;
                          if (*v55 != *v49)
                          {
                            do
                            {
                              int64_t v73 = *((void *)v71 - 1);
                              v71 -= 8;
                              *--int v70 = v73;
                            }
                            while (v71 != v72);
                            BOOL v71 = (char *)*v49;
                          }
                          char *v49 = v70;
                          *uint64_t v55 = v64;
                          *BOOL v56 = &v69[8 * v68];
                          if (v71) {
                            operator delete(v71);
                          }
                        }
                        else
                        {
                          *(void *)int v63 = v106 | (v61 << 32);
                          BOOL v64 = v63 + 8;
                        }
                        *uint64_t v55 = v64;
                        CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel(a4, v61, v58, *((int *)a4 + 30) + (uint64_t)(int)v109);
                      }
                      v61 += 2;
                    }
                    while (v61 <= v62);
                  }
                  int v74 = (int)fmax((double)((int)v58 - 1), 0.0);
                  int v75 = (int)fmin(v53, (double)((int)v58 + 1));
                  if (v74 <= v75)
                  {
                    unint64_t v107 = v57 << 32;
                    int64_t v76 = v74;
                    int64_t v77 = v75;
                    do
                    {
                      if (*(float *)(v51 + 4 * (v76 + a2[2] * v57)) >= a6
                        && *(void *)(*(void *)a4 + 8 * (v76 + *((void *)a4 + 13) * v57)) < (unint64_t)*((int *)a4 + 30))
                      {
                        unint64_t v78 = (char *)*v55;
                        if ((unint64_t)*v55 >= *v56)
                        {
                          uint64_t v80 = (v78 - (unsigned char *)*v49) >> 3;
                          if ((unint64_t)(v80 + 1) >> 61) {
                            goto LABEL_117;
                          }
                          uint64_t v81 = *v56 - (void)*v49;
                          uint64_t v82 = v81 >> 2;
                          if (v81 >> 2 <= (unint64_t)(v80 + 1)) {
                            uint64_t v82 = v80 + 1;
                          }
                          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v83 = v82;
                          }
                          if (v83) {
                            int v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v56, v83);
                          }
                          else {
                            int v84 = 0;
                          }
                          BOOL v85 = (unint64_t *)&v84[8 * v80];
                          *BOOL v85 = v76 | v107;
                          uint64_t v79 = v85 + 1;
                          uint64_t v86 = (char *)*v55;
                          long long v87 = (char *)*v49;
                          if (*v55 != *v49)
                          {
                            do
                            {
                              unint64_t v88 = *((void *)v86 - 1);
                              v86 -= 8;
                              *--BOOL v85 = v88;
                            }
                            while (v86 != v87);
                            uint64_t v86 = (char *)*v49;
                          }
                          char *v49 = v85;
                          *uint64_t v55 = v79;
                          *BOOL v56 = &v84[8 * v83];
                          if (v86) {
                            operator delete(v86);
                          }
                        }
                        else
                        {
                          *(void *)unint64_t v78 = v76 | v107;
                          uint64_t v79 = v78 + 8;
                        }
                        *uint64_t v55 = v79;
                        CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel(a4, v57, v76, *((int *)a4 + 30) + (uint64_t)(int)v109);
                      }
                      v76 += 2;
                    }
                    while (v76 <= v77);
                  }
                  int v50 = v104 + 2;
                }
                while (v104 + 2 != v103);
              }
            }
            unint64_t v47 = v109 + 1;
            unint64_t v46 = v111;
            uint64_t v45 = (uint64_t)v112;
            unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * (v112 - v111);
          }
          while (v89 > v109 + 1);
          uint64_t v37 = v99;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v115 - *(void *)v113) >> 3) >= v89)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v114[-*(void *)v113] >> 3) >= v89)
          {
            BOOL v94 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>((uint64_t)v46, v45, *(char **)v113);
            uint64_t v95 = v114;
            if (v114 != v94)
            {
              uint64_t v96 = v114;
              do
              {
                uint64_t v98 = (void *)*((void *)v96 - 3);
                v96 -= 24;
                uint64_t v97 = v98;
                if (v98)
                {
                  *((void *)v95 - 2) = v97;
                  operator delete(v97);
                }
                uint64_t v95 = v96;
              }
              while (v96 != v94);
            }
            goto LABEL_107;
          }
          uint64_t v93 = (uint64_t)&v46[(uint64_t)&v114[-*(void *)v113] >> 3];
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>((uint64_t)v46, v93, *(char **)v113);
          int v92 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*,std::vector<PixelPosition>*,std::vector<PixelPosition>*>((uint64_t)&v115, v93, v45, v114);
        }
        else
        {
          std::vector<std::vector<PixelPosition>>::__vdeallocate((uint64_t *)v113);
          if (v89 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v90 = 0x5555555555555556 * ((v115 - *(void *)v113) >> 3);
          if (v90 <= v89) {
            unint64_t v90 = v89;
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v115 - *(void *)v113) >> 3) >= 0x555555555555555) {
            unint64_t v91 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v91 = v90;
          }
          std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](v113, v91);
          int v92 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*,std::vector<PixelPosition>*,std::vector<PixelPosition>*>((uint64_t)&v115, (uint64_t)v46, v45, v114);
        }
        BOOL v94 = v92;
LABEL_107:
        int v114 = v94;
        ++v101;
      }
      while (v101 < *v37);
    }
    int v116 = &v111;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    int64_t v111 = (void **)v113;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v111);
  }
}

void sub_1DD78F7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,char a22)
{
  a19 = (void **)&a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void std::vector<PixelPosition>::reserve(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void CRDetectorUtils::erodeConnectedComponentForLabel(CRDetectorUtils *this, CRDetectorUtils::CRTextDetectorConnectedComponentResult *a2, int *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v6 = this;
  __p = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v7 = *((int *)this + 30);
  uint64_t v8 = (char **)(*((void *)this + 4) + 32 * ((void)a2 - v7));
  uint64_t v9 = *v8;
  unint64_t v46 = v8[1];
  if (*v8 <= v46)
  {
    unint64_t v12 = 0;
    int v16 = v8[2];
    uint64_t v15 = v8[3];
    BOOL v44 = &v16[-(a5 >> 1)];
    double v52 = &v9[-(a4 >> 1)];
    uint64_t v17 = -(uint64_t)(a5 >> 1);
    uint64_t v18 = 4 * a5;
    uint64_t v45 = v16;
    int v50 = v15;
    while (1)
    {
      if (v16 > v15) {
        goto LABEL_46;
      }
      uint64_t v19 = v44;
      unint64_t v49 = (void)v9 << 32;
      do
      {
        if (!a4) {
          goto LABEL_45;
        }
        unint64_t v20 = *((void *)v6 + 13);
        if (*(CRDetectorUtils::CRTextDetectorConnectedComponentResult **)(*(void *)v6
                                                                         + 8 * (void)&v16[v20 * (void)v9]) != a2)
          goto LABEL_45;
        int v21 = 0;
        LOBYTE(v22) = 0;
        unint64_t v23 = *((void *)v6 + 14);
        unint64_t v24 = a3;
        uint64_t v25 = *(void *)v6 + 8 * (void)&v19[(void)v52 * v20];
        do
        {
          if (a5)
          {
            double v26 = &v9[(void)v21 - (a4 >> 1)];
            uint64_t v27 = v24;
            uint64_t v28 = v17;
            uint64_t v29 = (void *)v25;
            for (unint64_t i = a5; i; --i)
            {
              if (v22)
              {
                LOBYTE(v22) = 1;
              }
              else
              {
                int v22 = *v27;
                if (*v27)
                {
                  unint64_t v31 = (unint64_t)&v16[v28];
                  if (v26 == v9)
                  {
                    LOBYTE(v22) = 0;
                    if (v31 >= v20 || !v28 || (unint64_t)v26 >= v23) {
                      goto LABEL_22;
                    }
                  }
                  else
                  {
                    LOBYTE(v22) = 0;
                    if ((unint64_t)v26 >= v23 || v31 >= v20) {
                      goto LABEL_22;
                    }
                  }
                  LOBYTE(v22) = *v29 != (void)a2;
                }
              }
LABEL_22:
              ++v29;
              ++v28;
              ++v27;
            }
          }
          int v21 = (const unsigned int *)((char *)v21 + 1);
          v25 += 8 * v20;
          unint64_t v24 = (int *)((char *)v24 + v18);
        }
        while (v21 != (const unsigned int *)a4);
        if (v22)
        {
          if (v12 >= v55)
          {
            uint64_t v32 = (v12 - __p) >> 3;
            if ((unint64_t)(v32 + 1) >> 61) {
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v33 = (v55 - __p) >> 2;
            if (v33 <= v32 + 1) {
              unint64_t v33 = v32 + 1;
            }
            if ((unint64_t)(v55 - __p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34) {
              unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v55, v34);
            }
            else {
              unint64_t v35 = 0;
            }
            uint64_t v36 = &v35[8 * v32];
            *(void *)uint64_t v36 = v16 | v49;
            unint64_t v12 = v36 + 8;
            uint64_t v37 = v54;
            if (v54 == __p)
            {
              uint64_t v6 = this;
            }
            else
            {
              uint64_t v6 = this;
              do
              {
                uint64_t v38 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v36 - 1) = v38;
                v36 -= 8;
              }
              while (v37 != __p);
              uint64_t v37 = __p;
            }
            __p = v36;
            uint64_t v55 = &v35[8 * v34];
            if (v37)
            {
              BOOL v48 = v12;
              operator delete(v37);
              unint64_t v12 = v48;
            }
          }
          else
          {
            *(void *)unint64_t v12 = v16 | v49;
            v12 += 8;
          }
          uint64_t v54 = v12;
        }
        uint64_t v15 = v50;
LABEL_45:
        ++v16;
        ++v19;
      }
      while (v16 <= v15);
LABEL_46:
      ++v9;
      ++v52;
      int v16 = v45;
      if (v9 > v46)
      {
        uint64_t v11 = __p;
        LODWORD(v7) = *((_DWORD *)v6 + 30);
        if (__p == v12)
        {
          uint64_t v10 = v12;
        }
        else
        {
          uint64_t v39 = *(void *)v6;
          int v40 = __p;
          do
          {
            uint64_t v41 = *(int *)v40;
            uint64_t v42 = *((int *)v40 + 1);
            v40 += 8;
            *(void *)(v39 + 8 * (v41 + *((void *)v6 + 13) * v42)) = (int)v7 - 1;
          }
          while (v40 != v12);
          uint64_t v10 = v12;
          unint64_t v12 = __p;
        }
        goto LABEL_52;
      }
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = 0;
LABEL_52:
  uint64_t v43 = v10 - v11;
  *(void *)(*((void *)v6 + 1) + 8 * ((void)a2 - (int)v7)) -= v43 >> 3;
  *((void *)v6 + 16) -= v43 >> 3;
  if (v12) {
    operator delete(v12);
  }
}

void sub_1DD78FBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CRDetectorUtils::dilateConnectedComponentForLabel(CRDetectorUtils *this, CRDetectorUtils::CRTextDetectorConnectedComponentResult *a2, int *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v49 = 0;
  int v50 = 0;
  uint64_t v51 = 0;
  int64_t v5 = (uint64_t *)(*((void *)this + 4) + 32 * ((void)a2 - *((int *)this + 30)));
  uint64_t v6 = *v5;
  unint64_t v7 = *v5 - (a4 >> 1);
  unint64_t v44 = v5[1] + (a4 >> 1);
  if (v7 > v44) {
    return;
  }
  unint64_t v12 = 0;
  uint64_t v14 = v5 + 2;
  uint64_t v13 = v5[2];
  unint64_t v15 = a5 >> 1;
  unint64_t v16 = v13 - (a5 >> 1);
  unint64_t v17 = v14[1] + (a5 >> 1);
  unint64_t v40 = a4 >> 1;
  unint64_t v48 = 8 * v6 - 16 * (a4 >> 1);
  uint64_t v18 = 4 * a5;
  unint64_t v39 = v13 - 2 * (a5 >> 1);
  unint64_t v43 = v16;
  unint64_t v46 = v17;
  do
  {
    if (v16 > v17) {
      goto LABEL_44;
    }
    unint64_t v19 = v39;
    unint64_t v45 = v7 << 32;
    do
    {
      unint64_t v20 = *((void *)this + 14);
      if (v7 >= v20) {
        goto LABEL_43;
      }
      unint64_t v21 = *((void *)this + 13);
      if (v16 >= v21 || !a4 || *(void *)(*(void *)this + 8 * (v16 + v21 * v7)) != *((int *)this + 30) - 1) {
        goto LABEL_43;
      }
      int v22 = 0;
      LOBYTE(v23) = 0;
      unint64_t v24 = a3;
      unint64_t v25 = *(void *)this + v48 * v21;
      do
      {
        if (a5)
        {
          double v26 = (char *)v22 + v7 - v40;
          uint64_t v27 = v24;
          unint64_t v28 = v15;
          unint64_t v29 = v19;
          for (unint64_t i = a5; i; --i)
          {
            if (v23)
            {
              LOBYTE(v23) = 1;
            }
            else
            {
              int v23 = *v27;
              if (*v27)
              {
                if (v26 == (char *)v7)
                {
                  LOBYTE(v23) = 0;
                  if (v29 >= v21 || !v28) {
                    goto LABEL_22;
                  }
                }
                else
                {
                  LOBYTE(v23) = 0;
                  if ((unint64_t)v26 >= v20 || v29 >= v21) {
                    goto LABEL_22;
                  }
                }
                LOBYTE(v23) = *(void *)(v25 + 8 * v29) == (void)a2;
              }
            }
LABEL_22:
            ++v29;
            --v28;
            ++v27;
          }
        }
        int v22 = (const unsigned int *)((char *)v22 + 1);
        v25 += 8 * v21;
        unint64_t v24 = (int *)((char *)v24 + v18);
      }
      while (v22 != (const unsigned int *)a4);
      if (v23)
      {
        if (v12 >= (unint64_t *)v51)
        {
          uint64_t v41 = ((char *)v12 - v49) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v31 = (v51 - v49) >> 2;
          if (v31 <= v41 + 1) {
            unint64_t v31 = v41 + 1;
          }
          if ((unint64_t)(v51 - v49) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v31;
          }
          if (v32) {
            unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v51, v32);
          }
          else {
            unint64_t v33 = 0;
          }
          unint64_t v34 = (unint64_t *)&v33[8 * v41];
          unint64_t *v34 = v16 | v45;
          unint64_t v12 = v34 + 1;
          unint64_t v35 = v50;
          if (v50 != v49)
          {
            do
            {
              unint64_t v36 = *((void *)v35 - 1);
              v35 -= 8;
              *--unint64_t v34 = v36;
            }
            while (v35 != v49);
            unint64_t v35 = v49;
          }
          unint64_t v49 = (char *)v34;
          uint64_t v51 = &v33[8 * v32];
          if (v35)
          {
            uint64_t v42 = v12;
            operator delete(v35);
            unint64_t v12 = v42;
          }
        }
        else
        {
          *v12++ = v16 | v45;
        }
        int v50 = (char *)v12;
      }
      unint64_t v17 = v46;
LABEL_43:
      ++v16;
      ++v19;
    }
    while (v16 <= v17);
LABEL_44:
    ++v7;
    v48 += 8;
    unint64_t v16 = v43;
  }
  while (v7 <= v44);
  uint64_t v37 = (int *)v49;
  if (v49 != (char *)v12)
  {
    do
    {
      uint64_t v38 = (int *)v12;
      CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel(this, v37[1], *v37, (unint64_t)a2);
      v37 += 2;
      unint64_t v12 = (unint64_t *)v38;
    }
    while (v37 != v38);
    unint64_t v12 = (unint64_t *)v49;
  }
  if (v12) {
    operator delete(v12);
  }
}

void sub_1DD78FF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CRDetectorUtils::estimateVerticalIsthmusMergedLineCountInConnectedComponents(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (unint64_t *)(a1[4] + 32 * a2);
  unint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  unint64_t v6 = v3[2];
  unint64_t v7 = v3[3] - v6 + 1;
  if (v5 - *v3 + 1 < 3 || v7 < 4) {
    return 1;
  }
  unint64_t v10 = (unint64_t)fmin((double)v7, (double)a3);
  v34[0] = 0;
  v34[1] = 0;
  unint64_t v32 = 1;
  unint64_t v33 = (uint64_t *)v34;
  if (v10)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v30 = 1;
    do
    {
      unint64_t v31 = 0;
      if (v5 >= v4)
      {
        char v15 = 0;
        unint64_t v16 = 0;
        uint64_t v17 = *a1;
        uint64_t v18 = a1[13];
        uint64_t v19 = *((int *)a1 + 30) + a2;
        unint64_t v20 = v4;
        do
        {
          char v21 = (*(void *)(v17 + 8 * (v13 * v7 / v10 + v6 + v20 * v18)) == v19) & v15;
          if (*(void *)(v17 + 8 * (v13 * v7 / v10 + v6 + v20 * v18)) == v19 && (v15 & 1) == 0)
          {
            unint64_t v31 = ++v16;
            char v21 = 1;
          }
          ++v20;
          char v15 = v21;
        }
        while (v20 <= v5);
        if (v16 > 1)
        {
          int v22 = v34[0];
          if (!v34[0]) {
            goto LABEL_24;
          }
          int v23 = v34;
          do
          {
            unint64_t v24 = v22;
            unint64_t v25 = v23;
            unint64_t v26 = v22[4];
            uint64_t v27 = v22 + 1;
            if (v26 >= v16)
            {
              uint64_t v27 = v24;
              int v23 = (void **)v24;
            }
            int v22 = (void *)*v27;
          }
          while (v22);
          if (v23 == v34) {
            goto LABEL_24;
          }
          if (v26 < v16) {
            unint64_t v24 = v25;
          }
          if (v16 < v24[4])
          {
LABEL_24:
            unint64_t v35 = &v31;
            std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v33, &v31, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35)[5] = 0;
          }
          unint64_t v35 = &v31;
          unint64_t v28 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v33, &v31, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35);
          ++v28[5];
          unint64_t v35 = &v31;
          if (std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v33, &v31, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35)[5] > v14|| (unint64_t v35 = &v31, std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v33, &v31, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35)[5] == v14)&& (unint64_t v35 = &v31, std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v33, &v31, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35)[5] > v30))
          {
            unint64_t v35 = &v31;
            unint64_t v14 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v33, &v31, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35)[5];
            unint64_t v30 = v31;
            unint64_t v32 = v31;
          }
        }
      }
      ++v13;
    }
    while (v13 != v10);
  }
  unint64_t v35 = &v32;
  if ((double)v10 * 0.2 > (double)(unint64_t)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v33, &v32, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35)[5])unint64_t v9 = 1; {
  else
  }
    unint64_t v9 = v32;
  std::__tree<CRCHuint128>::destroy((uint64_t)&v33, v34[0]);
  return v9;
}

void sub_1DD79024C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

vImage_Error CRDetectorUtils::erodeImageMap@<X0>(const vImage_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v9[0] = __const__ZN15CRDetectorUtils13erodeImageMapEP13vImage_Buffer_kernel;
  v9[1] = unk_1DD8CE4B8;
  int v10 = 1065353216;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  unint64_t v5 = malloc_type_calloc(this->height * this->width, 4uLL, 0x100004052888210uLL);
  vImagePixelCount height = this->height;
  vImagePixelCount width = this->width;
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = height;
  *(void *)(a2 + 16) = width;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 4 * width;
  return vImageErode_PlanarF(this, (const vImage_Buffer *)a2, 0, 0, (const float *)v9, 3uLL, 3uLL, 8u);
}

vImage_Error CRDetectorUtils::dilateImageMap@<X0>(const vImage_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v9[0] = __const__ZN15CRDetectorUtils14dilateImageMapEP13vImage_Buffer_kernel;
  v9[1] = unk_1DD8CE4DC;
  int v10 = 1065353216;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  unint64_t v5 = malloc_type_calloc(this->height * this->width, 4uLL, 0x100004052888210uLL);
  vImagePixelCount height = this->height;
  vImagePixelCount width = this->width;
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = height;
  *(void *)(a2 + 16) = width;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 4 * width;
  return vImageDilate_PlanarF(this, (const vImage_Buffer *)a2, 0, 0, (const float *)v9, 3uLL, 3uLL, 8u);
}

void CRDetectorUtils::predictHoughGlobalAngle(CRDetectorUtils *this, const vImage_Buffer *a2)
{
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v2, *((void *)this + 2), *((void *)this + 1), 1, 0, 0);
}

void sub_1DD790674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  a46 = &unk_1F38ED520;
  cv::SmartPtr::release((cv::SmartPtr *)&a46);
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)(v46 - 192));
  _Unwind_Resume(a1);
}

void CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult(CRDetectorUtils::CRTextDetectorConnectedComponentResult *this)
{
  unint64_t v6 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  if (v5) {
    MEMORY[0x1E01BF110](v5, 0x1000C8000313F17);
  }
}

void CRDetectorUtils::sortQuadWithRotation(uint64_t a1, uint64_t a2, uint64_t a3, CGPoint *a4)
{
  unint64_t v4 = (_OWORD *)a1;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  CRDetectorUtils::rotatePolygon((CRDetectorUtils *)a1, (const CGPoint *)(a1 + 88), &v42, *(double *)(a1 + 104), a4);
  CGFloat x = v42.x;
  uint64_t v6 = v43;
  uint64_t v7 = v45;
  uint64_t v8 = v47;
  unint64_t v9 = (CGFloat *)operator new(0x20uLL);
  unint64_t v39 = v9 + 4;
  unint64_t v40 = v9 + 4;
  *unint64_t v9 = x;
  *((void *)v9 + 1) = v6;
  *((void *)v9 + 2) = v7;
  *((void *)v9 + 3) = v8;
  __p = v9;
  CGFloat y = v42.y;
  uint64_t v11 = v44;
  uint64_t v12 = v46;
  uint64_t v13 = v48;
  unint64_t v14 = (CGFloat *)operator new(0x20uLL);
  *unint64_t v14 = y;
  *((void *)v14 + 1) = v11;
  *((void *)v14 + 2) = v12;
  *((void *)v14 + 3) = v13;
  std::vector<int>::vector(&v37, 4uLL);
  std::vector<int>::pointer begin = v37.__begin_;
  std::__split_buffer<std::string>::pointer end = v37.__end_;
  if (v37.__begin_ != v37.__end_)
  {
    int v17 = 0;
    std::vector<int>::pointer v18 = v37.__begin_;
    do
      *v18++ = v17++;
    while (v18 != end);
  }
  unint64_t v19 = 126 - 2 * __clz(end - begin);
  *(void *)&v41[0] = &__p;
  if (end == begin) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  std::__introsort<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *,false>(begin, end, (uint64_t **)v41, v20, 1);
  std::vector<int>::vector(&v36, 4uLL);
  uint64_t v21 = 0;
  std::vector<int>::pointer v22 = v37.__begin_;
  uint64_t v23 = *v37.__begin_;
  double v24 = v14[v23];
  std::vector<int>::pointer v25 = v37.__begin_ + 1;
  double v26 = v14[v37.__begin_[1]];
  std::vector<int>::pointer v27 = v36.__begin_;
  if (v24 >= v26) {
    LODWORD(v23) = v37.__begin_[1];
  }
  *v36.__begin_ = v23;
  if (v24 >= v26) {
    std::vector<int>::pointer v28 = v22;
  }
  else {
    std::vector<int>::pointer v28 = v25;
  }
  v27[3] = *v28;
  uint64_t v31 = v22[3];
  unint64_t v29 = v22 + 3;
  int v30 = v31;
  double v32 = v14[*(v29 - 1)];
  double v33 = v14[v31];
  if (v32 < v33) {
    int v30 = *(v29 - 1);
  }
  v27[1] = v30;
  if (v32 >= v33) {
    --v29;
  }
  v27[2] = *v29;
  long long v34 = v4[1];
  v41[0] = *v4;
  v41[1] = v34;
  long long v35 = v4[3];
  _OWORD v41[2] = v4[2];
  v41[3] = v35;
  do
    *v4++ = v41[v27[v21++]];
  while (v21 != 4);
  v36.__end_ = v27;
  operator delete(v27);
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
  operator delete(v14);
  if (__p)
  {
    unint64_t v39 = __p;
    operator delete(__p);
  }
}

void sub_1DD790960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v17);
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void CRDetectorUtils::generateConvexHull(uint64_t a1@<X0>, char *a2@<X8>)
{
  __p = 0;
  unint64_t v57 = 0;
  uint64_t v58 = 0;
  std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v3 = (char *)v57 - (unsigned char *)__p;
  std::vector<PixelPosition>::vector(a2, ((char *)v57 - (unsigned char *)__p) >> 2);
  if (v3 < 0x19)
  {
    if (&__p == (void **)a2) {
      goto LABEL_73;
    }
    uint64_t v6 = (char *)__p;
    uint64_t v7 = v57;
    unint64_t v19 = ((char *)v57 - (unsigned char *)__p) >> 3;
LABEL_54:
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(a2, v6, (uint64_t)v7, v19);
    goto LABEL_73;
  }
  unint64_t v4 = 126 - 2 * __clz(((char *)v57 - (unsigned char *)__p) >> 3);
  if (v57 == __p) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,false>((uint64_t)__p, v57, (uint64_t)&v59, v5, 1);
  uint64_t v6 = (char *)__p;
  uint64_t v7 = v57;
  uint64_t v8 = (int32x2_t *)__p;
  if (__p == v57)
  {
LABEL_28:
    uint64_t v7 = v8;
  }
  else
  {
    unint64_t v9 = (int32x2_t *)((char *)__p - 8);
    do
    {
      if (&v9[2] == v57)
      {
        uint64_t v8 = v57;
        goto LABEL_28;
      }
      __int32 v11 = v9[1].i32[0];
      ++v9;
      v10.i32[0] = v11;
    }
    while (v11 != v9[1].i32[0] || v9->i32[1] != v9[1].i32[1]);
    uint64_t v13 = v9 + 2;
    if (&v9[2] != v57)
    {
      do
      {
        if (v10.i32[0] != v13->i32[0] || v9->i32[1] != v13->i32[1])
        {
          int32x2_t v10 = *v13;
          v9[1] = *v13;
          ++v9;
        }
        ++v13;
      }
      while (v13 != v7);
      uint64_t v7 = v57;
    }
    char v15 = v9 + 1;
    int64_t v16 = (char *)v7 - (char *)&v9[1];
    if (v16)
    {
      int v17 = (int32x2_t *)((char *)v15 + v16);
      int64_t v18 = (char *)v7 - (char *)v17;
      if (v7 != v17)
      {
        memmove(v15, v17, (char *)v7 - (char *)v17);
        uint64_t v6 = (char *)__p;
      }
      uint64_t v7 = (int32x2_t *)((char *)v15 + v18);
      unint64_t v57 = (int32x2_t *)((char *)v15 + v18);
    }
  }
  unint64_t v19 = ((char *)v7 - v6) >> 3;
  if ((unint64_t)((char *)v7 - v6) < 0x19)
  {
    if (&__p == (void **)a2) {
      goto LABEL_73;
    }
    goto LABEL_54;
  }
  int v20 = 0;
  uint64_t v21 = 0;
  if (v19 <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = ((char *)v7 - v6) >> 3;
  }
  do
  {
    uint64_t v23 = *(char **)a2;
    if (v20 >= 1) {
      int v24 = 1;
    }
    else {
      int v24 = v20;
    }
    uint64_t v25 = *((void *)__p + v21);
    double v26 = (uint64_t *)&v23[8 * v20 - 8];
    uint64_t v27 = v20 + 4294967294;
    while (1)
    {
      BOOL v28 = __OFSUB__(v20--, 1);
      if ((v20 < 0) ^ v28 | (v20 == 0)) {
        break;
      }
      int v29 = *(_DWORD *)&v23[8 * v27 + 4];
      uint64_t v30 = *v26--;
      int v31 = (HIDWORD(v25) - v29) * (v30 - *(_DWORD *)&v23[8 * v27])
          + (HIDWORD(v30) - v29) * (*(_DWORD *)&v23[8 * v27] - v25);
      --v27;
      if (v31 >= 1)
      {
        int v24 = v20 + 1;
        break;
      }
    }
    int v20 = v24 + 1;
    *(void *)&v23[8 * v24] = v25;
    ++v21;
  }
  while (v21 != v22);
  unint64_t v32 = v19 - 1;
  if (v19 == 1)
  {
    unint64_t v41 = v24;
  }
  else
  {
    int v33 = v24 + 1;
    do
    {
      long long v34 = (char *)__p + 8 * v19;
      unint64_t v19 = v32;
      long long v35 = *(char **)a2;
      uint64_t v36 = v33;
      if (v33 >= v20) {
        int v37 = v20;
      }
      else {
        int v37 = v33;
      }
      uint64_t v38 = *((void *)v34 - 2);
      int v39 = v33 + 1;
      while (v36 > v20)
      {
        unint64_t v40 = &v35[8 * v36--];
        --v39;
        if ((HIDWORD(v38) - *((_DWORD *)v40 - 3)) * (*((_DWORD *)v40 - 2) - *((_DWORD *)v40 - 4))
           + (*((_DWORD *)v40 - 1) - *((_DWORD *)v40 - 3)) * (*((_DWORD *)v40 - 4) - (int)v38) >= 1)
          goto LABEL_51;
      }
      int v39 = v37;
LABEL_51:
      int v33 = v39 + 1;
      *(void *)&v35[8 * v39] = v38;
      unint64_t v32 = v19 - 1;
    }
    while (v19 != 1);
    unint64_t v41 = v39;
  }
  std::vector<PixelPosition>::resize((uint64_t)a2, v41);
  CGPoint v42 = __p;
  unint64_t v43 = *((void *)a2 + 2);
  uint64_t v44 = (void *)*((void *)a2 + 1);
  if ((unint64_t)v44 >= v43)
  {
    uint64_t v46 = ((uint64_t)v44 - *(void *)a2) >> 3;
    if ((unint64_t)(v46 + 1) >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v47 = v43 - *(void *)a2;
    uint64_t v48 = v47 >> 2;
    if (v47 >> 2 <= (unint64_t)(v46 + 1)) {
      uint64_t v48 = v46 + 1;
    }
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v49) {
      int v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 16), v49);
    }
    else {
      int v50 = 0;
    }
    uint64_t v51 = &v50[8 * v46];
    double v52 = &v50[8 * v49];
    *(void *)uint64_t v51 = *v42;
    uint64_t v45 = v51 + 8;
    uint64_t v54 = *(char **)a2;
    double v53 = (char *)*((void *)a2 + 1);
    if (v53 != *(char **)a2)
    {
      do
      {
        uint64_t v55 = *((void *)v53 - 1);
        v53 -= 8;
        *((void *)v51 - 1) = v55;
        v51 -= 8;
      }
      while (v53 != v54);
      double v53 = *(char **)a2;
    }
    *(void *)a2 = v51;
    *((void *)a2 + 1) = v45;
    *((void *)a2 + 2) = v52;
    if (v53) {
      operator delete(v53);
    }
  }
  else
  {
    void *v44 = *(void *)__p;
    uint64_t v45 = v44 + 1;
  }
  *((void *)a2 + 1) = v45;
LABEL_73:
  if (__p)
  {
    unint64_t v57 = (int32x2_t *)__p;
    operator delete(__p);
  }
}

void sub_1DD790D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<PixelPosition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<PixelPosition>::__append((void **)a1, a2 - v2);
  }
}

uint64_t CRDetectorUtils::findRoot(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if (*(void *)(*a2 + 8 * a1) != a1)
  {
    uint64_t Root = CRDetectorUtils::findRoot();
    *(void *)(*a2 + 8 * v2) = Root;
    return Root;
  }
  return v2;
}

BOOL CRDetectorUtils::isContourInQuad(int **a1, CGFloat *a2, int a3, float a4)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5) {
    return 0;
  }
  long long v10 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&m.a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&m.c = v10;
  *(_OWORD *)&m.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  double v11 = 0.0;
  double v12 = 0.0;
  uint64_t v13 = v4;
  do
  {
    int v14 = *v13;
    int v15 = v13[1];
    v13 += 2;
    double v11 = v11 + (double)v14;
    double v12 = v12 + (double)v15;
  }
  while (v13 != v5);
  double v16 = (double)(unint64_t)(((char *)v5 - (char *)v4) >> 3);
  double v17 = v11 / v16;
  long long v18 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v37.a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v37.c = v18;
  *(_OWORD *)&v37.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  double v19 = v12 / v16;
  CGAffineTransformTranslate(&m, &v37, v11 / v16, v12 / v16);
  CGAffineTransform v35 = m;
  CGAffineTransformScale(&v36, &v35, (float)(1.0 - a4), (float)(1.0 - a4));
  CGAffineTransform m = v36;
  CGAffineTransform v34 = v36;
  CGAffineTransformTranslate(&v36, &v34, -v17, -v19);
  CGAffineTransform m = v36;
  Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, *a2, a2[1]);
  for (uint64_t i = 0; i != 6; i += 2)
    CGPathAddLineToPoint(Mutable, 0, a2[i + 2], a2[i + 3]);
  CGPathCloseSubpath(Mutable);
  int v24 = a1;
  uint64_t v22 = *a1;
  uint64_t v23 = v24[1];
  if (a3 >= (unint64_t)(((char *)v23 - (char *)v22) >> 3))
  {
    if (v22 == v23)
    {
      BOOL v28 = 1;
    }
    else
    {
      do
      {
        int v29 = *v22;
        int v30 = v22[1];
        v22 += 2;
        v40.CGFloat x = (double)v29;
        v40.CGFloat y = (double)v30;
        BOOL v31 = CGPathContainsPoint(Mutable, &m, v40, 0);
      }
      while (v31 && v22 != v23);
      BOOL v28 = v31;
    }
  }
  else
  {
    if (v22 == v23)
    {
      int v25 = 0;
    }
    else
    {
      int v25 = 0;
      do
      {
        int v26 = *v22;
        int v27 = v22[1];
        v22 += 2;
        v39.CGFloat x = (double)v26;
        v39.CGFloat y = (double)v27;
        v25 += CGPathContainsPoint(Mutable, &m, v39, 0);
      }
      while (v22 != v23);
    }
    BOOL v28 = v25 >= a3;
  }
  CGPathRelease(Mutable);
  return v28;
}

void CRDetectorUtils::writeImageBufferToFile(CRDetectorUtils *this, vImage_Buffer *a2, NSString *a3)
{
  uint64_t v5 = a2;
  unint64_t v4 = [[CRImage alloc] initWithFloatBuffer:*(void *)this width:*((void *)this + 2) height:*((void *)this + 1)];
  [(CRImage *)v4 writeToFile:v5];
}

void sub_1DD791074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CRDetectorUtils::writeVectorToFile(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  double v11 = a4;
  uint64_t v7 = malloc_type_calloc(a3 * a2, 4uLL, 0x100004052888210uLL);
  uint64_t v8 = v7;
  v12[0] = v7;
  v12[1] = a3;
  v12[2] = a2;
  void v12[3] = 4 * a2;
  uint64_t v9 = *(void *)(a1 + 8);
  long long v10 = (NSString *)(v9 - *(void *)a1);
  if (v9 != *(void *)a1) {
    memmove(v7, *(const void **)a1, (size_t)v10);
  }
  CRDetectorUtils::writeImageBufferToFile((CRDetectorUtils *)v12, v11, v10);
  free(v8);
}

void sub_1DD79113C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

float CRDetectorUtils::distPointToLine(CRDetectorUtils *this, const CGPoint *a2, const CGPoint *a3, const CGPoint *a4)
{
  double y = a2->y;
  double v5 = a3->y;
  float result = 0.0;
  if (a2->x != a3->x || y != v5) {
    return fabs((a3->x - a2->x) * (y - *((double *)this + 1)) - (a2->x - *(double *)this) * (v5 - y))
  }
         / sqrt((v5 - y) * (v5 - y) + (a3->x - a2->x) * (a3->x - a2->x));
  return result;
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<std::vector<CGPoint>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<CGPoint>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        long long v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<CRDetectorUtils::CRTextDetectorCCBoundary>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<CRDetectorUtils::CRTextDetectorCCBoundary>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<CGPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<CGPoint>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      double v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v14);
    }
    else {
      int v15 = 0;
    }
    long long v18 = &v15[8 * v12];
    double v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    uint64_t v21 = v18;
    do
    {
      *(void *)uint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    uint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void std::vector<std::vector<CGPoint>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    long long v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    double v17 = &v16[v14];
    std::vector<std::vector<CGPoint>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1DD791550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<CGPoint>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CGPoint>>,std::reverse_iterator<std::vector<CGPoint>*>,std::reverse_iterator<std::vector<CGPoint>*>,std::reverse_iterator<std::vector<CGPoint>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CGPoint>>,std::reverse_iterator<std::vector<CGPoint>*>,std::reverse_iterator<std::vector<CGPoint>*>,std::reverse_iterator<std::vector<CGPoint>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CGPoint>>,std::reverse_iterator<std::vector<CGPoint>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CGPoint>>,std::reverse_iterator<std::vector<CGPoint>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<CRDetectorUtils::CRTextDetectorCCBoundary>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = &v13[32 * v10];
    int v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    uint64_t v16 = &v14[32 * a2];
    long long v18 = (char *)*a1;
    double v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      double v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<CGPoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = &v13[16 * v10];
    int v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    long long v18 = (char *)*a1;
    double v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      double v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::deque<std::pair<int,int>>::emplace_back<int &,int &>(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1];
  if (v6 == v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v6 - v7) << 6) - 1;
  }
  uint64_t v9 = a1[5];
  unint64_t v10 = v9 + a1[4];
  if (v8 == v10)
  {
    std::deque<std::pair<int,int>>::__add_back_capacity(a1);
    uint64_t v9 = a1[5];
    uint64_t v7 = a1[1];
    unint64_t v10 = a1[4] + v9;
  }
  uint64_t v11 = (_DWORD *)(*(void *)(v7 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF));
  *uint64_t v11 = *a2;
  v11[1] = *a3;
  a1[5] = v9 + 1;
}

void std::deque<std::pair<int,int>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      CGAffineTransform v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      CGAffineTransform v35 = &v34[8 * (v33 >> 2)];
      CGAffineTransform v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CGAffineTransform v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      CGAffineTransform v35 = &v34[8 * (v46 >> 2)];
      CGAffineTransform v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  BOOL v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_back(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1DD791C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      int v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::pair<int,int>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult(CRDetectorUtils::CRTextDetectorConnectedComponentResult *this, uint64_t a2, uint64_t a3, int a4, char a5, char a6)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = a2;
  *((void *)this + 14) = a3;
  *((_DWORD *)this + 30) = a4;
  *((void *)this + 16) = 0;
  *((unsigned char *)this + 136) = a5;
  *((unsigned char *)this + 137) = a6;
  operator new[]();
}

void sub_1DD7922C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v12 = (void *)v10[7];
  if (v12)
  {
    v10[8] = (uint64_t)v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)v10[4];
  if (v13)
  {
    v10[5] = (uint64_t)v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)v10[1];
  if (v14)
  {
    v10[2] = (uint64_t)v14;
    operator delete(v14);
  }
  uint64_t v15 = *v10;
  *uint64_t v10 = 0;
  if (v15) {
    MEMORY[0x1E01BF110](v15, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<PixelPosition>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DD7923C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::deque<std::pair<int,int>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<int,int>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

int *std::__introsort<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *,false>(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unint64_t v11 = result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v45 = *(a2 - 1);
                uint64_t v46 = *v12;
                if (*(double *)(**a3 + 8 * v45) < *(double *)(**a3 + 8 * v46))
                {
                  *uint64_t v12 = v45;
                  *(a2 - 1) = v46;
                }
                break;
              case 3uLL:
                uint64_t v47 = **a3;
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v12, v12 + 1, a2 - 1, v47);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                uint64_t v48 = v12 + 2;
                uint64_t v49 = v12 + 3;
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                uint64_t v50 = *(a2 - 1);
                uint64_t v51 = v12[3];
                uint64_t v52 = **a3;
                if (*(double *)(v52 + 8 * v50) < *(double *)(v52 + 8 * v51))
                {
                  int *v49 = v50;
                  *(a2 - 1) = v51;
                  uint64_t v53 = *v49;
                  uint64_t v54 = *v48;
                  double v55 = *(double *)(v52 + 8 * v53);
                  if (v55 < *(double *)(v52 + 8 * v54))
                  {
                    *uint64_t v48 = v53;
                    int *v49 = v54;
                    uint64_t v56 = v12[1];
                    if (v55 < *(double *)(v52 + 8 * v56))
                    {
                      v12[1] = v53;
                      v12[2] = v56;
                      uint64_t v57 = *v12;
                      if (v55 < *(double *)(v52 + 8 * v57))
                      {
                        *uint64_t v12 = v53;
                        v12[1] = v57;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                uint64_t v58 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v59 = **a3;
                  uint64_t v60 = 4;
                  int64_t v61 = v12;
                  do
                  {
                    uint64_t v63 = *v61;
                    uint64_t v62 = v61[1];
                    int64_t v61 = v58;
                    double v64 = *(double *)(v59 + 8 * v62);
                    if (v64 < *(double *)(v59 + 8 * v63))
                    {
                      uint64_t v65 = v60;
                      do
                      {
                        *(int *)((char *)v12 + v65) = v63;
                        uint64_t v66 = v65 - 4;
                        if (v65 == 4)
                        {
                          uint64_t v67 = v12;
                          goto LABEL_80;
                        }
                        uint64_t v63 = *(int *)((char *)v12 + v65 - 8);
                        v65 -= 4;
                      }
                      while (v64 < *(double *)(v59 + 8 * v63));
                      uint64_t v67 = (int *)((char *)v12 + v66);
LABEL_80:
                      *uint64_t v67 = v62;
                    }
                    uint64_t v58 = v61 + 1;
                    v60 += 4;
                  }
                  while (v61 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              uint64_t v99 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v100 = **a3;
                do
                {
                  uint64_t v102 = *v11;
                  uint64_t v101 = v11[1];
                  unint64_t v11 = v99;
                  double v103 = *(double *)(v100 + 8 * v101);
                  if (v103 < *(double *)(v100 + 8 * v102))
                  {
                    do
                    {
                      *uint64_t v99 = v102;
                      uint64_t v102 = *(v99 - 2);
                      --v99;
                    }
                    while (v103 < *(double *)(v100 + 8 * v102));
                    *uint64_t v99 = v101;
                  }
                  uint64_t v99 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v68 = (v14 - 2) >> 1;
              unint64_t v69 = *a3;
              int64_t v70 = v68;
              do
              {
                int64_t v71 = v70;
                if (v68 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  int64_t v73 = &v12[v72];
                  uint64_t v74 = 2 * v70 + 2;
                  uint64_t v75 = *v69;
                  if (v74 < (uint64_t)v14 && *(double *)(v75 + 8 * *v73) < *(double *)(v75 + 8 * v73[1]))
                  {
                    ++v73;
                    uint64_t v72 = 2 * v71 + 2;
                  }
                  uint64_t result = &v12[v71];
                  uint64_t v76 = *v73;
                  uint64_t v77 = *result;
                  double v78 = *(double *)(v75 + 8 * v77);
                  if (*(double *)(v75 + 8 * v76) >= v78)
                  {
                    do
                    {
                      uint64_t v79 = v73;
                      *uint64_t result = v76;
                      if (v68 < v72) {
                        break;
                      }
                      uint64_t v80 = 2 * v72;
                      uint64_t v72 = (2 * v72) | 1;
                      int64_t v73 = &v12[v72];
                      uint64_t v81 = v80 + 2;
                      if (v81 < (uint64_t)v14 && *(double *)(v75 + 8 * *v73) < *(double *)(v75 + 8 * v73[1]))
                      {
                        ++v73;
                        uint64_t v72 = v81;
                      }
                      uint64_t v76 = *v73;
                      uint64_t result = v79;
                    }
                    while (*(double *)(v75 + 8 * v76) >= v78);
                    int *v79 = v77;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              uint64_t v82 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v83 = 0;
                int v84 = *v12;
                BOOL v85 = *a3;
                uint64_t v86 = v12;
                do
                {
                  long long v87 = v86;
                  v86 += v83 + 1;
                  uint64_t v88 = 2 * v83;
                  uint64_t v83 = (2 * v83) | 1;
                  uint64_t v89 = v88 + 2;
                  if (v89 < v82)
                  {
                    uint64_t result = (int *)v86[1];
                    if (*(double *)(*v85 + 8 * *v86) < *(double *)(*v85 + 8 * (void)result))
                    {
                      ++v86;
                      uint64_t v83 = v89;
                    }
                  }
                  *long long v87 = *v86;
                }
                while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
                if (v86 == --a2)
                {
                  *uint64_t v86 = v84;
                }
                else
                {
                  *uint64_t v86 = *a2;
                  *a2 = v84;
                  uint64_t v90 = (char *)v86 - (char *)v12 + 4;
                  if (v90 >= 5)
                  {
                    unint64_t v91 = (((unint64_t)v90 >> 2) - 2) >> 1;
                    int v92 = &v12[v91];
                    uint64_t v93 = *v92;
                    uint64_t v94 = *v86;
                    uint64_t v95 = *v85;
                    double v96 = *(double *)(v95 + 8 * v94);
                    if (*(double *)(v95 + 8 * v93) < v96)
                    {
                      do
                      {
                        uint64_t v97 = v92;
                        *uint64_t v86 = v93;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                        int v92 = &v12[v91];
                        uint64_t v93 = *v92;
                        uint64_t v86 = v97;
                      }
                      while (*(double *)(v95 + 8 * v93) < v96);
                      *uint64_t v97 = v94;
                    }
                  }
                }
              }
              while (v82-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          unint64_t v16 = &v12[v14 >> 1];
          uint64_t v17 = **a3;
          if ((unint64_t)v13 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v11, &v11[v14 >> 1], a2 - 1, v17);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v11 + 1, v16 - 1, a2 - 2, **a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v11 + 2, &v11[v15 + 1], a2 - 3, **a3);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v16 - 1, v16, &v11[v15 + 1], **a3);
            int v18 = *v11;
            *unint64_t v11 = *v16;
            *unint64_t v16 = v18;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(&v11[v14 >> 1], v11, a2 - 1, v17);
          }
          --a4;
          int v19 = *v11;
          uint64_t v20 = **a3;
          if (a5) {
            break;
          }
          double v21 = *(double *)(v20 + 8 * v19);
          if (*(double *)(v20 + 8 * *(v11 - 1)) < v21) {
            goto LABEL_13;
          }
          if (v21 >= *(double *)(v20 + 8 * *(a2 - 1)))
          {
            CGAffineTransform v37 = v11 + 1;
            do
            {
              uint64_t v12 = v37;
              if (v37 >= a2) {
                break;
              }
              ++v37;
            }
            while (v21 >= *(double *)(v20 + 8 * *v12));
          }
          else
          {
            uint64_t v12 = v11;
            do
            {
              uint64_t v36 = v12[1];
              ++v12;
            }
            while (v21 >= *(double *)(v20 + 8 * v36));
          }
          uint64_t v38 = a2;
          if (v12 < a2)
          {
            uint64_t v38 = a2;
            do
              uint64_t v39 = *--v38;
            while (v21 < *(double *)(v20 + 8 * v39));
          }
          if (v12 < v38)
          {
            int v40 = *v12;
            int v41 = *v38;
            do
            {
              *uint64_t v12 = v41;
              *uint64_t v38 = v40;
              do
              {
                uint64_t v42 = v12[1];
                ++v12;
                int v40 = v42;
              }
              while (v21 >= *(double *)(v20 + 8 * v42));
              do
              {
                uint64_t v43 = *--v38;
                int v41 = v43;
              }
              while (v21 < *(double *)(v20 + 8 * v43));
            }
            while (v12 < v38);
          }
          uint64_t v44 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *unint64_t v11 = *v44;
          }
          a5 = 0;
          int *v44 = v19;
        }
        double v21 = *(double *)(v20 + 8 * v19);
LABEL_13:
        uint64_t v22 = 0;
        do
          uint64_t v23 = v11[++v22];
        while (*(double *)(v20 + 8 * v23) < v21);
        uint64_t v24 = &v11[v22];
        unint64_t v25 = a2;
        if (v22 == 1)
        {
          unint64_t v25 = a2;
          do
          {
            if (v24 >= v25) {
              break;
            }
            uint64_t v27 = *--v25;
          }
          while (*(double *)(v20 + 8 * v27) >= v21);
        }
        else
        {
          do
            uint64_t v26 = *--v25;
          while (*(double *)(v20 + 8 * v26) >= v21);
        }
        if (v24 >= v25)
        {
          CGAffineTransform v34 = v24 - 1;
        }
        else
        {
          int v28 = *v25;
          int v29 = v23;
          long long v30 = &v11[v22];
          long long v31 = v25;
          do
          {
            *long long v30 = v28;
            *long long v31 = v29;
            do
            {
              uint64_t v32 = v30[1];
              ++v30;
              int v29 = v32;
            }
            while (*(double *)(v20 + 8 * v32) < v21);
            do
            {
              uint64_t v33 = *--v31;
              int v28 = v33;
            }
            while (*(double *)(v20 + 8 * v33) >= v21);
          }
          while (v30 < v31);
          CGAffineTransform v34 = v30 - 1;
        }
        if (v34 != v11) {
          *unint64_t v11 = *v34;
        }
        int *v34 = v19;
        if (v24 >= v25) {
          break;
        }
LABEL_34:
        uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *,false>(v11, v34, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v34 + 1;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v11, v34, a3);
      uint64_t v12 = v34 + 1;
      uint64_t result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v34 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_34;
      }
    }
    a2 = v34;
    if (!v35) {
      continue;
    }
    return result;
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  double v6 = *(double *)(a4 + 8 * v4);
  double v7 = *(double *)(a4 + 8 * v5);
  uint64_t v8 = *a3;
  double v9 = *(double *)(a4 + 8 * v8);
  if (v6 >= v7)
  {
    if (v9 < v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *a2;
      uint64_t v11 = *result;
      if (*(double *)(a4 + 8 * v10) < *(double *)(a4 + 8 * v11))
      {
        *uint64_t result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 >= v6)
    {
      *uint64_t result = v4;
      *a2 = v5;
      uint64_t v12 = *a3;
      if (*(double *)(a4 + 8 * v12) >= v7) {
        return result;
      }
      *a2 = v12;
    }
    else
    {
      *uint64_t result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(double *)(**a3 + 8 * v8) < *(double *)(**a3 + 8 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      double v21 = a1 + 2;
      uint64_t v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = **a3;
      if (*(double *)(v25 + 8 * v23) < *(double *)(v25 + 8 * v24))
      {
        *uint64_t v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        double v28 = *(double *)(v25 + 8 * v26);
        if (v28 < *(double *)(v25 + 8 * v27))
        {
          *double v21 = v26;
          *uint64_t v22 = v27;
          uint64_t v29 = a1[1];
          if (v28 < *(double *)(v25 + 8 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (v28 < *(double *)(v25 + 8 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(a1, a1 + 1, a1 + 2, **a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    double v17 = *(double *)(v13 + 8 * v15);
    if (v17 < *(double *)(v13 + 8 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(double *)(v13 + 8 * v16))
        {
          uint64_t v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *uint64_t v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(a1, a2, a3, **a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = **a5;
  if (*(double *)(v13 + 8 * v11) < *(double *)(v13 + 8 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(double *)(v13 + 8 * v14) < *(double *)(v13 + 8 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(double *)(v13 + 8 * v16) < *(double *)(v13 + 8 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

void *std::vector<PixelPosition>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DD7930D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<PixelPosition>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  double v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void sub_1DD793334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD79344C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD793564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD794690(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v1);
  _Unwind_Resume(a1);
}

void sub_1DD794A40(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  BOOL result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *BOOL result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          BOOL result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          BOOL result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        double v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    double v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = operator new(0x30uLL);
    v9[8] = *a3;
    *((void *)v9 + 5) = 0;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        double v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    double v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

void sub_1DD794EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD79502C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD795060()
{
}

void sub_1DD795068()
{
}

void sub_1DD79519C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7951D4()
{
}

void sub_1DD7951DC()
{
}

void sub_1DD7952A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD795600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id customHalfWidthToFullWidthMapping()
{
  if (qword_1EB58C9D8 != -1) {
    dispatch_once(&qword_1EB58C9D8, &__block_literal_global_10);
  }
  os_log_t v0 = (void *)qword_1EB58C9E0;
  return v0;
}

void __customHalfWidthToFullWidthMapping_block_invoke()
{
  os_log_t v0 = (void *)qword_1EB58C9E0;
  qword_1EB58C9E0 = (uint64_t)&unk_1F3935DC0;
}

id customRegexToIgnoreHalfWidthToFullWidthMapping()
{
  if (qword_1EB58C9E8 != -1) {
    dispatch_once(&qword_1EB58C9E8, &__block_literal_global_67);
  }
  os_log_t v0 = (void *)qword_1EB58C9F0;
  return v0;
}

void __customRegexToIgnoreHalfWidthToFullWidthMapping_block_invoke()
{
  objc_msgSend(MEMORY[0x1E4F28FD8], "regularExpressionWithPattern:options:error:", @"[a-zA-Z0-9]\\s*[!,:?;]\\s*[a-zA-Z0-9/]",
    0,
  uint64_t v0 = 0);
  uint64_t v1 = (void *)qword_1EB58C9F0;
  qword_1EB58C9F0 = v0;
}

id unicodeToNSString(int a1)
{
  if ((a1 - 0x10000) >> 20)
  {
    uint64_t v2 = 1;
    LOWORD(v1) = a1;
  }
  else
  {
    unsigned int v1 = ((a1 + 67043328) >> 10) - 10240;
    v5[1] = a1 & 0x3FF | 0xDC00;
    uint64_t v2 = 2;
  }
  v5[0] = v1;
  uint64_t v3 = [NSString stringWithCharacters:v5 length:v2];
  return v3;
}

double CRRoundCGRect(double a1)
{
  return round(a1);
}

id nms1DNonFilter(void *a1, float a2)
{
  id v3 = a1;
  uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
  if ((unint64_t)[v3 count] >= 2)
  {
    int v5 = [v3 count];
    int v6 = v5;
    if (v5 >= 3)
    {
      int v7 = v5 - 1;
      int v8 = 1;
      int v9 = 2;
      while (1)
      {
        uint64_t v10 = [v3 objectAtIndexedSubscript:v8];
        [v10 floatValue];
        float v12 = v11;
        uint64_t v13 = [v3 objectAtIndexedSubscript:v9];
        [v13 floatValue];
        float v15 = v14;

        if (v12 <= v15) {
          break;
        }
        uint64_t v16 = [v3 objectAtIndexedSubscript:v8];
        [v16 floatValue];
        float v18 = v17;
        uint64_t v19 = [v3 objectAtIndexedSubscript:v8 - 1];
        [v19 floatValue];
        float v21 = v20;

        if (v18 >= v21) {
          goto LABEL_6;
        }
LABEL_13:
        int v9 = v8 + 3;
        v8 += 2;
        if (v9 >= v6) {
          goto LABEL_14;
        }
      }
      if (v9 + 1 >= v6)
      {
        int v8 = v9;
        goto LABEL_13;
      }
      uint64_t v24 = v9 + 1;
      int v8 = v9;
      while (1)
      {
        uint64_t v25 = [v3 objectAtIndexedSubscript:v8];
        [v25 floatValue];
        float v27 = v26;
        double v28 = [v3 objectAtIndexedSubscript:v24];
        [v28 floatValue];
        float v30 = v29;

        if (v27 > v30) {
          break;
        }
        ++v24;
        if (v7 == ++v8) {
          goto LABEL_13;
        }
      }
LABEL_6:
      *(float *)&double v22 = (float)v8 / a2;
      uint64_t v23 = [NSNumber numberWithFloat:v22];
      [v4 addObject:v23];

      goto LABEL_13;
    }
  }
LABEL_14:

  return v4;
}

id maxPoint1D(void *a1, float a2)
{
  id v3 = a1;
  id v19 = [MEMORY[0x1E4F1CA48] array];
  if ((unint64_t)[v3 count] >= 2)
  {
    int v4 = [v3 count];
    if (v4 >= 1)
    {
      int v5 = 0;
      float v18 = v21;
      do
      {
        int v6 = objc_msgSend(v3, "objectAtIndexedSubscript:", v5, v18);
        [v6 floatValue];
        float v8 = v7;

        if (v8 <= 0.0)
        {
          int v10 = v5;
        }
        else
        {
          uint64_t v9 = 0;
          if (v5 + 1 > v4) {
            int v10 = v5 + 1;
          }
          else {
            int v10 = v4;
          }
          while (v5 + 1 + v9 < v4)
          {
            float v11 = objc_msgSend(v3, "objectAtIndexedSubscript:");
            [v11 floatValue];
            float v13 = v12;

            ++v9;
            if (v13 <= 0.0)
            {
              int v10 = v5 + v9;
              break;
            }
          }
          float v14 = objc_msgSend(v3, "subarrayWithRange:", v5, v10 - v5);
          uint64_t v25 = 0;
          float v26 = &v25;
          uint64_t v27 = 0x2020000000;
          uint64_t v28 = 0;
          v23[0] = 0;
          v23[1] = v23;
          v23[2] = 0x3032000000;
          v23[3] = __Block_byref_object_copy__5;
          v23[4] = __Block_byref_object_dispose__5;
          id v24 = [v14 objectAtIndexedSubscript:0];
          v20[0] = MEMORY[0x1E4F143A8];
          v20[1] = 3221225472;
          v21[0] = __maxPoint1D_block_invoke;
          v21[1] = &unk_1E6CDB388;
          v21[2] = v23;
          v21[3] = &v25;
          int v22 = v5;
          [v14 enumerateObjectsUsingBlock:v20];
          *(float *)&double v15 = (float)(unint64_t)v26[3] / a2;
          uint64_t v16 = [NSNumber numberWithFloat:v15];
          [v19 addObject:v16];

          _Block_object_dispose(v23, 8);
          _Block_object_dispose(&v25, 8);
        }
        int v5 = v10 + 1;
      }
      while (v10 + 1 < v4);
    }
  }

  return v19;
}

void sub_1DD797334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __maxPoint1D_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v9 = a2;
  [v9 floatValue];
  float v7 = v6;
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) floatValue];
  if (v7 > v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(int *)(a1 + 48) + a3;
  }
}

id smoothing1D(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)[v1 mutableCopy];
  id v3 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", &unk_1F393B110, &unk_1F393B120, &unk_1F393B110, &unk_1F393B100, 0);
  unint64_t v4 = [v1 count];
  if (v4 >= [v3 count])
  {
    int v6 = [v3 count];
    if (v6 >= 0) {
      int v7 = v6;
    }
    else {
      int v7 = v6 + 1;
    }
    if ([v1 count] - (v7 >> 1) > (unint64_t)(v7 >> 1))
    {
      int v8 = 0;
      uint64_t v9 = (uint64_t)v7 >> 1;
      unint64_t v10 = v9;
      do
      {
        uint64_t v11 = v8;
        if ([v3 count])
        {
          unint64_t v13 = 0;
          float v14 = 0.0;
          do
          {
            double v15 = [v1 objectAtIndexedSubscript:v11 + v13];
            [v15 floatValue];
            float v17 = v16;
            float v18 = [v3 objectAtIndexedSubscript:v13];
            [v18 floatValue];
            float v14 = v14 + (float)(v17 * v19);

            ++v13;
          }
          while ([v3 count] > v13);
        }
        else
        {
          float v14 = 0.0;
        }
        *(float *)&double v12 = v14;
        float v20 = [NSNumber numberWithFloat:v12];
        [v2 setObject:v20 atIndexedSubscript:v10];

        ++v10;
        uint64_t v21 = [v1 count];
        int v8 = v11 + 1;
      }
      while (v21 - v9 > v10);
    }
    id v5 = v2;
  }
  else
  {
    id v5 = (id)[v1 mutableCopy];
  }
  int v22 = v5;

  return v22;
}

id nms1D(void *a1, int a2, float a3)
{
  if (a2)
  {
    unint64_t v4 = nms1DNonFilter(a1, a3);
  }
  else
  {
    id v5 = smoothing1D(a1);
    unint64_t v4 = maxPoint1D(v5, a3);
  }
  return v4;
}

double rotatedPointAroundPoint(double a1, double a2, double a3, double a4, double a5)
{
  __double2 v9 = __sincos_stret(a5);
  float v10 = (a1 - a3) * v9.__cosval - (a2 - a4) * v9.__sinval;
  return a3 + v10;
}

void rotatePolygon(void *a1, double *a2, double a3, double a4, double a5)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  v24[0] = *a1;
  v24[1] = v7;
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  void v24[2] = a1[4];
  v24[3] = v10;
  v23[0] = v6;
  v23[1] = v8;
  v23[2] = v9;
  v23[3] = v11;
  float v12 = a5;
  __float2 v13 = __sincosf_stret(v12);
  uint64_t v14 = 0;
  float64x2_t v15 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0);
  float64x2_t v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
  float64x2_t v17 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v13.__sinval), 0);
  float64x2_t v18 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v13.__cosval), 0);
  do
  {
    float64x2_t v19 = vsubq_f64(*(float64x2_t *)&v24[v14], v15);
    float64x2_t v20 = vsubq_f64(*(float64x2_t *)&v23[v14], v16);
    v25.val[0] = vaddq_f64(v15, vcvtq_f64_f32(vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(vnegq_f64(v20), v13.__sinval), v18, v19))));
    v25.val[1] = vaddq_f64(v16, vcvtq_f64_f32(vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v20, v13.__cosval), v17, v19))));
    *(float64x2_t *)&v24[v14] = v25.val[0];
    *(float64x2_t *)&v23[v14] = v25.val[1];
    vst2q_f64(a2, v25);
    a2 += 4;
    v14 += 2;
  }
  while (v14 != 4);
}

double denormalizedPointForSize(double a1, double a2, double a3)
{
  return a1 * a3;
}

uint64_t denormalizedPolygonForSize(uint64_t result, uint64_t a2, float64x2_t a3, float64_t a4)
{
  uint64_t v4 = 0;
  a3.f64[1] = a4;
  do
  {
    *(float64x2_t *)(a2 + v4) = vmulq_f64(a3, *(float64x2_t *)(result + v4));
    v4 += 16;
  }
  while (v4 != 64);
  return result;
}

double normalizedPointForSize(double result, double a2, double a3, double a4)
{
  if (a4 != 0.0 && a3 != 0.0) {
    return result / a3;
  }
  return result;
}

double denormalizedRectForSize(double a1, double a2, double a3, double a4, double a5)
{
  return a1 * a5;
}

double normalizedRectForSize(double result, double a2, double a3, double a4, double a5, double a6)
{
  if (a6 != 0.0 && a5 != 0.0) {
    return result / a5;
  }
  return result;
}

double normalizedSizeForSize(double result, double a2, double a3, double a4)
{
  if (a4 != 0.0 && a3 != 0.0) {
    return result / a3;
  }
  return result;
}

BOOL pointEqualsPointWithAccuracy(double a1, double a2, double a3, double a4, double a5)
{
  BOOL v5 = vabdd_f64(a1, a3) <= a5;
  return vabdd_f64(a2, a4) <= a5 && v5;
}

BOOL sizeEqualsSizeWithAccuracy(double a1, double a2, double a3, double a4, double a5)
{
  BOOL v5 = vabdd_f64(a1, a3) <= a5;
  return vabdd_f64(a2, a4) <= a5 && v5;
}

BOOL rectEqualsRectWithAccuracy(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v17 = vabdd_f64(a4, a8);
  if (vabdd_f64(a3, a7) > a9 || v17 > a9) {
    return 0;
  }
  BOOL v20 = vabdd_f64(a1, a5) <= a9;
  return vabdd_f64(a2, a6) <= a9 && v20;
}

uint64_t deviceHasModernNeuralEngine()
{
  if (qword_1EB58CA80 != -1) {
    dispatch_once(&qword_1EB58CA80, &__block_literal_global_284);
  }
  return byte_1EB58C9D1;
}

void __deviceHasModernNeuralEngine_block_invoke()
{
  if (qword_1EB58CA78 != -1) {
    dispatch_once(&qword_1EB58CA78, &__block_literal_global_282);
  }
  if (_MergedGlobals_15) {
    byte_1EB58C9D1 = MGGetSInt64Answer() > 31;
  }
}

id unicodeArrayToNSStringArray(int *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  for (uint64_t i = [MEMORY[0x1E4F1CA48] arrayWithCapacity:a2];
  {
    int v6 = *a1++;
    int v5 = v6;
    if ((v6 - 0x10000) >> 20)
    {
      LOWORD(v7) = v5;
      uint64_t v8 = 1;
    }
    else
    {
      unsigned int v7 = ((v5 + 67043328) >> 10) - 10240;
      v12[1] = v5 & 0x3FF | 0xDC00;
      uint64_t v8 = 2;
    }
    v12[0] = v7;
    uint64_t v9 = [NSString stringWithCharacters:v12 length:v8];
    [i addObject:v9];
  }
  uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithArray:i];

  return v10;
}

id lmConfig()
{
  if (qword_1EB58CA90 != -1) {
    dispatch_once(&qword_1EB58CA90, &__block_literal_global_289);
  }
  uint64_t v0 = (void *)qword_1EB58CA88;
  return v0;
}

void __lmConfig_block_invoke()
{
  uint64_t v0 = getLMConfig();
  id v1 = (void *)qword_1EB58CA88;
  qword_1EB58CA88 = v0;
}

id confidenceThresholds()
{
  if (qword_1EB58CAA0 != -1) {
    dispatch_once(&qword_1EB58CAA0, &__block_literal_global_291);
  }
  uint64_t v0 = (void *)qword_1EB58CA98;
  return v0;
}

void __confidenceThresholds_block_invoke()
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = getConfidenceThresholds();
  uint64_t v39 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v0, "count"));
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  obuint64_t j = v0;
  uint64_t v40 = [obj countByEnumeratingWithState:&v59 objects:v65 count:16];
  if (v40)
  {
    uint64_t v38 = *(void *)v60;
    do
    {
      uint64_t v1 = 0;
      do
      {
        if (*(void *)v60 != v38) {
          objc_enumerationMutation(obj);
        }
        uint64_t v41 = v1;
        uint64_t v2 = *(void **)(*((void *)&v59 + 1) + 8 * v1);
        id v3 = (void *)MEMORY[0x1E4F1CA60];
        uint64_t v4 = objc_msgSend(obj, "objectForKeyedSubscript:", v2, v38);
        uint64_t v44 = objc_msgSend(v3, "dictionaryWithCapacity:", objc_msgSend(v4, "count"));

        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        uint64_t v49 = v2;
        id v42 = [obj objectForKeyedSubscript:v2];
        uint64_t v45 = [v42 countByEnumeratingWithState:&v55 objects:v64 count:16];
        if (v45)
        {
          uint64_t v43 = *(void *)v56;
          do
          {
            uint64_t v5 = 0;
            do
            {
              if (*(void *)v56 != v43) {
                objc_enumerationMutation(v42);
              }
              uint64_t v46 = v5;
              int v6 = *(void **)(*((void *)&v55 + 1) + 8 * v5);
              unsigned int v7 = (void *)MEMORY[0x1E4F1CA60];
              uint64_t v8 = [obj objectForKeyedSubscript:v49];
              uint64_t v9 = [v8 objectForKeyedSubscript:v6];
              uint64_t v50 = objc_msgSend(v7, "dictionaryWithCapacity:", objc_msgSend(v9, "count"));

              long long v53 = 0u;
              long long v54 = 0u;
              long long v51 = 0u;
              long long v52 = 0u;
              uint64_t v10 = [obj objectForKeyedSubscript:v49];
              uint64_t v11 = [v10 objectForKeyedSubscript:v6];

              uint64_t v12 = [v11 countByEnumeratingWithState:&v51 objects:v63 count:16];
              if (v12)
              {
                uint64_t v13 = v12;
                uint64_t v47 = *(void *)v52;
                do
                {
                  for (uint64_t i = 0; i != v13; ++i)
                  {
                    if (*(void *)v52 != v47) {
                      objc_enumerationMutation(v11);
                    }
                    uint64_t v15 = *(void *)(*((void *)&v51 + 1) + 8 * i);
                    float64x2_t v16 = [obj objectForKeyedSubscript:v49];
                    double v17 = [v16 objectForKeyedSubscript:v6];
                    float64x2_t v18 = [v17 objectForKeyedSubscript:v15];
                    float64x2_t v19 = [v18 objectForKeyedSubscript:@"medium"];
                    [v19 floatValue];
                    float v21 = v20 / 100.0;

                    int v22 = [obj objectForKeyedSubscript:v49];
                    uint64_t v23 = [v22 objectForKeyedSubscript:v6];
                    id v24 = [v23 objectForKeyedSubscript:v15];
                    float64x2x2_t v25 = [v24 objectForKeyedSubscript:@"high"];
                    [v25 floatValue];
                    float v27 = v26 / 100.0;

                    uint64_t v28 = [CRConfidenceThresholds alloc];
                    *(float *)&double v29 = v21;
                    *(float *)&double v30 = v27;
                    long long v31 = [(CRConfidenceThresholds *)v28 initWithMediumThreshold:v29 highThreshold:v30];
                    [v50 setObject:v31 forKeyedSubscript:v15];
                  }
                  uint64_t v13 = [v11 countByEnumeratingWithState:&v51 objects:v63 count:16];
                }
                while (v13);
              }

              uint64_t v32 = (void *)[v50 copy];
              uint64_t v33 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v6, "isEqualToString:", @"true"));
              [v44 setObject:v32 forKeyedSubscript:v33];

              uint64_t v5 = v46 + 1;
            }
            while (v46 + 1 != v45);
            uint64_t v45 = [v42 countByEnumeratingWithState:&v55 objects:v64 count:16];
          }
          while (v45);
        }

        CGAffineTransform v34 = (void *)[v44 copy];
        BOOL v35 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v49, "intValue"));
        [v39 setObject:v34 forKeyedSubscript:v35];

        uint64_t v1 = v41 + 1;
      }
      while (v41 + 1 != v40);
      uint64_t v40 = [obj countByEnumeratingWithState:&v59 objects:v65 count:16];
    }
    while (v40);
  }

  uint64_t v36 = [v39 copy];
  CGAffineTransform v37 = (void *)qword_1EB58CA98;
  qword_1EB58CA98 = v36;
}

id lineWrappingConfig()
{
  if (qword_1EB58CAB0 != -1) {
    dispatch_once(&qword_1EB58CAB0, &__block_literal_global_304);
  }
  uint64_t v0 = (void *)qword_1EB58CAA8;
  return v0;
}

void __lineWrappingConfig_block_invoke()
{
  uint64_t v0 = getLineWrappingConfig();
  uint64_t v1 = (void *)qword_1EB58CAA8;
  qword_1EB58CAA8 = v0;
}

id compressData(void *a1)
{
  id v1 = a1;
  size_t v2 = [v1 length] + 100;
  id v3 = (uint8_t *)malloc_type_malloc(v2, 0x65F7223uLL);
  id v4 = v1;
  uint64_t v5 = (const uint8_t *)[v4 bytes];
  size_t v6 = [v4 length];

  unsigned int v7 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v3, compression_encode_buffer(v3, v2, v5, v6, 0, COMPRESSION_LZFSE));
  free(v3);
  return v7;
}

id uncompressDataOfSize(void *a1, int64_t a2)
{
  if (a2 < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    id v3 = a1;
    id v4 = (uint8_t *)malloc_type_malloc(a2, 0xDC347E5DuLL);
    id v5 = v3;
    size_t v6 = (const uint8_t *)[v5 bytes];
    size_t v7 = [v5 length];

    uint64_t v8 = 0;
    if (compression_decode_buffer(v4, a2, v6, v7, 0, COMPRESSION_LZFSE) == a2)
    {
      uint64_t v8 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v4 length:a2];
    }
    free(v4);
  }
  return v8;
}

uint64_t characterCount(void *a1)
{
  id v1 = a1;
  uint64_t v6 = 0;
  size_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  uint64_t v2 = [v1 length];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _WORD v5[2] = __characterCount_block_invoke;
  v5[3] = &unk_1E6CDAAC0;
  v5[4] = &v6;
  objc_msgSend(v1, "enumerateSubstringsInRange:options:usingBlock:", 0, v2, 2, v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_1DD798358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __characterCount_block_invoke(uint64_t result)
{
  return result;
}

double normalizeProbabilityForLength(uint64_t a1, double result)
{
  if (a1) {
    return pow(result, 1.0 / (double)a1);
  }
  return result;
}

double boundedAngle(double result)
{
  if (result <= 3.14159265)
  {
    if (result > -3.14159265) {
      return result;
    }
    double v1 = 6.28318531;
  }
  else
  {
    double v1 = -6.28318531;
  }
  return result + v1;
}

double weightedAverageAngleFromEuclideanSpace(double a1, double a2, double a3, double a4)
{
  __double2 v7 = __sincos_stret(a1);
  __double2 v8 = __sincos_stret(a2);
  return atan2(v8.__sinval * a4 + v7.__sinval * a3, v8.__cosval * a4 + v7.__cosval * a3);
}

double distanceFromPointToPoint(double a1, double a2, double a3, double a4, double a5, double a6)
{
  if (a5 > 0.0 && a6 > 0.0)
  {
    a1 = a1 * a5;
    a2 = a2 * a6;
    a3 = a3 * a5;
    a4 = a4 * a6;
  }
  return sqrt((a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3));
}

double squaredDistanceFromPointToPoint(double a1, double a2, double a3, double a4, double a5, double a6)
{
  if (a5 > 0.0 && a6 > 0.0)
  {
    a1 = a1 * a5;
    a2 = a2 * a6;
    a3 = a3 * a5;
    a4 = a4 * a6;
  }
  return (a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3);
}

double squaredDistanceFromPointToLineDefinedByPoints(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a7 > 0.0 && a8 > 0.0)
  {
    a3 = a3 * a7;
    a4 = a4 * a8;
    a5 = a5 * a7;
    a6 = a6 * a8;
  }
  double v8 = a5 - a3;
  double v9 = v8 * (a4 - a2) - (a3 - a1) * (a6 - a4);
  return v9 * v9 / (v8 * v8 + (a6 - a4) * (a6 - a4));
}

BOOL arePointsClockwise(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return (a3 - a1) * (a6 - a2) > (a4 - a2) * (a5 - a1);
}

uint64_t doesLineSegmentIntersectLineSegment(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if ((a5 - a1) * (a8 - a2) > (a6 - a2) * (a7 - a1) == (a5 - a3) * (a8 - a4) > (a6 - a4) * (a7 - a3)) {
    return 0;
  }
  else {
    return ((a3 - a1) * (a6 - a2) > (a4 - a2) * (a5 - a1)) ^ ((a3 - a1) * (a8 - a2) > (a4 - a2) * (a7 - a1));
  }
}

double vectorMagnitude(double a1, double a2)
{
  return sqrt(a2 * a2 + a1 * a1);
}

double averageAngle(double a1, double a2)
{
  __double2 v3 = __sincos_stret(a1);
  __double2 v4 = __sincos_stret(a2);
  return atan2(v3.__sinval + v4.__sinval, v3.__cosval + v4.__cosval);
}

double weightedAverageAngle(double a1, double a2, double a3)
{
  double v3 = a1 - a2;
  if (v3 <= 3.14159265)
  {
    if (v3 > -3.14159265) {
      goto LABEL_6;
    }
    double v4 = 6.28318531;
  }
  else
  {
    double v4 = -6.28318531;
  }
  double v3 = v3 + v4;
LABEL_6:
  double result = v3 * a3 + a2;
  if (result <= 3.14159265)
  {
    if (result > -3.14159265) {
      return result;
    }
    double v6 = 6.28318531;
  }
  else
  {
    double v6 = -6.28318531;
  }
  return result + v6;
}

double angleBetweenPoints(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6 = *MEMORY[0x1E4F1DB30];
  if (*MEMORY[0x1E4F1DB30] > 0.0)
  {
    double v7 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    if (v7 > 0.0)
    {
      a1 = a1 * v6;
      a2 = a2 * v7;
      a3 = a3 * v6;
      a4 = a4 * v7;
      a5 = a5 * v6;
      a6 = a6 * v7;
    }
  }
  double v8 = sqrt((a4 - a6) * (a4 - a6) + (a3 - a5) * (a3 - a5));
  double v9 = sqrt((a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3));
  double v10 = sqrt((a6 - a2) * (a6 - a2) + (a5 - a1) * (a5 - a1));
  return acos((v8 * v8 + v9 * v9 - v10 * v10) / (v8 * (v9 + v9)));
}

uint64_t CIImageCoordinateFromCGPoint(double a1, double a2, double a3, double a4)
{
  return objc_msgSend(MEMORY[0x1E4F1E080], "vectorWithCGPoint:", a1 * a3, (1.0 - a2) * a4);
}

double applyHomography(void *a1, double a2, double a3)
{
  id v5 = a1;
  double v30 = [v5 objectAtIndexedSubscript:0];
  [v30 floatValue];
  double v7 = v6;
  double v29 = [v5 objectAtIndexedSubscript:1];
  [v29 floatValue];
  double v9 = a3 * v8 + a2 * v7;
  uint64_t v28 = [v5 objectAtIndexedSubscript:2];
  [v28 floatValue];
  double v11 = v9 + v10;
  uint64_t v12 = [v5 objectAtIndexedSubscript:6];
  [v12 floatValue];
  double v14 = v13;
  uint64_t v15 = [v5 objectAtIndexedSubscript:7];
  [v15 floatValue];
  double v17 = a3 * v16 + a2 * v14;
  float64x2_t v18 = [v5 objectAtIndexedSubscript:8];
  [v18 floatValue];
  double v20 = v11 / (v17 + v19);
  float v21 = [v5 objectAtIndexedSubscript:3];
  [v21 floatValue];
  int v22 = [v5 objectAtIndexedSubscript:4];
  [v22 floatValue];
  uint64_t v23 = [v5 objectAtIndexedSubscript:5];
  [v23 floatValue];
  id v24 = [v5 objectAtIndexedSubscript:6];
  [v24 floatValue];
  float64x2x2_t v25 = [v5 objectAtIndexedSubscript:7];
  [v25 floatValue];
  float v26 = [v5 objectAtIndexedSubscript:8];

  [v26 floatValue];
  return v20;
}

id computeHomography(uint64_t a1)
{
  v21[9] = *MEMORY[0x1E4F143B8];
  *(float32x2_t *)&long long v1 = computeHomographyMatrix(a1);
  long long v18 = v1;
  long long v19 = v2;
  long long v20 = v3;
  double v4 = objc_msgSend(NSNumber, "numberWithFloat:");
  v21[0] = v4;
  id v5 = [NSNumber numberWithFloat:*(double *)&v19];
  v21[1] = v5;
  float v6 = [NSNumber numberWithFloat:*(double *)&v20];
  v21[2] = v6;
  HIDWORD(v7) = DWORD1(v18);
  LODWORD(v7) = DWORD1(v18);
  float v8 = [NSNumber numberWithFloat:v7];
  v21[3] = v8;
  HIDWORD(v9) = DWORD1(v19);
  LODWORD(v9) = DWORD1(v19);
  float v10 = [NSNumber numberWithFloat:v9];
  void v21[4] = v10;
  HIDWORD(v11) = DWORD1(v20);
  LODWORD(v11) = DWORD1(v20);
  uint64_t v12 = [NSNumber numberWithFloat:v11];
  v21[5] = v12;
  float v13 = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v18), DWORD2(v18))));
  v21[6] = v13;
  double v14 = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v19), DWORD2(v19))));
  v21[7] = v14;
  uint64_t v15 = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v20), DWORD2(v20))));
  v21[8] = v15;
  float v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:9];

  return v16;
}

float32x2_t computeHomographyMatrix(uint64_t a1)
{
  long long v1 = (float64x2_t *)MEMORY[0x1F4188790](a1);
  uint64_t v2 = 0;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  double v4 = (double *)(v3 + 8);
  do
  {
    double v5 = *(v4 - 1);
    double v6 = *v4;
    double v7 = &v12[v2];
    *(_OWORD *)double v7 = 0uLL;
    *((void *)v7 + 2) = 0;
    float64x2_t v8 = *v1++;
    *(float64x2_t *)(v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = vnegq_f64(v8);
    *((void *)v7 + 5) = 0xBFF0000000000000;
    *((float64x2_t *)v7 + 3) = vmulq_n_f64(v8, v6);
    *((double *)v7 + 8) = v6;
    *(float64x2_t *)(v7 + 72) = v8;
    *(_OWORD *)(v7 + 88) = xmmword_1DD8CE3C0;
    *(_OWORD *)(v7 + 104) = 0uLL;
    double v9 = -v5;
    *(float64x2_t *)(v7 + 120) = vmulq_n_f64(v8, v9);
    *((double *)v7 + 17) = v9;
    v2 += 144;
    v4 += 2;
  }
  while (v2 != 576);
  dgeqrf_NEWLAPACK();
  dorgqr_NEWLAPACK();
  *(void *)&v10.f64[0] = v13;
  v10.f64[1] = *((float64_t *)&v14 + 1);
  return vcvt_f32_f64(vmulq_n_f64(v10, 1.0 / v15));
}

double applyHomographyMatrix(float32x4_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5)
{
  float v5 = a4;
  float v6 = a5;
  float32x4_t v7 = vaddq_f32(a3, vmlaq_n_f32(vmulq_n_f32(a1, v5), a2, v6));
  if (v7.f32[2] != 0.0) {
    return (float)(v7.f32[0] / v7.f32[2]);
  }
  return a4;
}

double applyHomographyMatrixWithDownscale(float32x4_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5, double a6)
{
  double v6 = a4 / a6;
  float v7 = v6;
  float v8 = a5 / a6;
  float32x4_t v9 = vaddq_f32(a3, vmlaq_n_f32(vmulq_n_f32(a1, v7), a2, v8));
  if (v9.f32[2] != 0.0) {
    double v6 = (float)(v9.f32[0] / v9.f32[2]);
  }
  return v6 * a6;
}

uint64_t checkIsZeroMatrix(int32x4_t a1, int32x4_t a2, int8x16_t a3)
{
  uint8x8_t v3 = (uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32((float32x4_t)vextq_s8((int8x16_t)vzip1q_s32(a1, a1), (int8x16_t)vuzp1q_s32(a1, a2), 0xCuLL)), (int16x8_t)vceqzq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), a3, 8uLL)))));
  v3.i8[0] = vmaxv_u8(v3);
  return (*(float *)&a3.i32[2] == 0.0) & ~v3.i32[0];
}

uint64_t CRTextRecognition::CRCTLD::order::TarjansSCC::unfolded_strongconnect(CRTextRecognition::CRCTLD::order::TarjansSCC *this, int a2)
{
  int v154 = a2;
  LODWORD(__p) = 0;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v151 = 0u;
  std::deque<std::pair<int,int>>::emplace_back<int &,int &>(&v151, &v154, &__p);
  uint64_t v3 = *((void *)&v153 + 1);
  if (!*((void *)&v153 + 1)) {
    return std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v151);
  }
  double v4 = (uint64_t *)((char *)this + 160);
  do
  {
    while (1)
    {
      uint64_t v5 = (((void)v152 - *((void *)&v151 + 1)) << 6) - 1;
      if ((void)v152 == *((void *)&v151 + 1)) {
        uint64_t v5 = 0;
      }
      uint64_t v6 = v3 - 1;
      uint64_t v7 = *(void *)(*(void *)(*((void *)&v151 + 1) + (((unint64_t)(v153 + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v153 + v6) & 0x1FF));
      *((void *)&v153 + 1) = v6;
      if ((unint64_t)(v5 - (v153 + v6)) >= 0x400)
      {
        operator delete(*(void **)(v152 - 8));
        *(void *)&long long v152 = v152 - 8;
      }
      unint64_t v8 = HIDWORD(v7);
      if (!HIDWORD(v7))
      {
        float32x4_t v9 = (char *)*((void *)this + 4);
        float64x2_t v10 = (char *)*((void *)this + 3);
        uint64_t v11 = v9 - v10;
        uint64_t v12 = 4 * (int)v7;
        *(_DWORD *)(*((void *)this + 8) + v12) = *((_DWORD *)this + 2);
        *(_DWORD *)(*((void *)this + 11) + v12) = (*((_DWORD *)this + 2))++;
        if (v9 == v10) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = ((v9 - v10) << 7) - 1;
        }
        unint64_t v15 = *((void *)this + 6);
        uint64_t v14 = *((void *)this + 7);
        unint64_t v16 = v14 + v15;
        if (v13 != v14 + v15) {
          goto LABEL_74;
        }
        if (v15 < 0x400)
        {
          double v29 = (char *)*((void *)this + 5);
          double v30 = (char *)*((void *)this + 2);
          if (v11 >> 3 >= (unint64_t)((v29 - v30) >> 3))
          {
            uint64_t v148 = v11 >> 3;
            if (v29 == v30) {
              unint64_t v33 = 1;
            }
            else {
              unint64_t v33 = (v29 - v30) >> 2;
            }
            CGAffineTransform v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v33);
            uint64_t v147 = v35;
            uint64_t v36 = operator new(0x1000uLL);
            CGAffineTransform v37 = &v34[8 * v148];
            uint64_t v38 = &v34[8 * v147];
            if (v148 == v147)
            {
              uint64_t v39 = 8 * v148;
              if (v11 < 1)
              {
                long long v55 = v36;
                uint64_t v56 = v39 >> 2;
                if (v9 == v10) {
                  unint64_t v57 = 1;
                }
                else {
                  unint64_t v57 = v56;
                }
                long long v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v57);
                CGAffineTransform v37 = &v59[8 * (v57 >> 2)];
                uint64_t v38 = &v59[8 * v58];
                if (v34)
                {
                  long long v60 = &v59[8 * v58];
                  operator delete(v34);
                  uint64_t v38 = v60;
                }
                CGAffineTransform v34 = v59;
                uint64_t v36 = v55;
              }
              else
              {
                uint64_t v40 = v39 >> 3;
                if (v40 >= -1) {
                  unint64_t v41 = v40 + 1;
                }
                else {
                  unint64_t v41 = v40 + 2;
                }
                v37 -= 8 * (v41 >> 1);
              }
            }
            *(void *)CGAffineTransform v37 = v36;
            long long v61 = v37 + 8;
            for (uint64_t i = *((void *)this + 4); i != *((void *)this + 3); i -= 8)
            {
              if (v37 == v34)
              {
                if (v61 >= v38)
                {
                  if (v38 == v34) {
                    unint64_t v67 = 1;
                  }
                  else {
                    unint64_t v67 = (v38 - v34) >> 2;
                  }
                  int64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v67);
                  int64_t v70 = v68;
                  CGAffineTransform v37 = &v68[(2 * v67 + 6) & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v71 = v61 - v34;
                  BOOL v42 = v61 == v34;
                  long long v61 = v37;
                  if (!v42)
                  {
                    long long v61 = &v37[v71 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v72 = 8 * (v71 >> 3);
                    int64_t v73 = v37;
                    uint64_t v74 = (uint64_t *)v34;
                    do
                    {
                      uint64_t v75 = *v74++;
                      *(void *)int64_t v73 = v75;
                      v73 += 8;
                      v72 -= 8;
                    }
                    while (v72);
                  }
                  uint64_t v38 = &v68[8 * v69];
                  if (v34)
                  {
                    uint64_t v76 = v34;
                    uint64_t v77 = &v70[8 * v69];
                    operator delete(v76);
                    uint64_t v38 = v77;
                  }
                  CGAffineTransform v34 = v70;
                }
                else
                {
                  uint64_t v63 = (v38 - v61) >> 3;
                  if (v63 >= -1) {
                    uint64_t v64 = v63 + 1;
                  }
                  else {
                    uint64_t v64 = v63 + 2;
                  }
                  uint64_t v65 = v64 >> 1;
                  CGAffineTransform v37 = &v34[8 * (v64 >> 1)];
                  uint64_t v66 = v34;
                  if (v61 != v34)
                  {
                    uint64_t v149 = v38;
                    memmove(v37, v34, v61 - v34);
                    uint64_t v38 = v149;
                    uint64_t v66 = v61;
                  }
                  long long v61 = &v66[8 * v65];
                }
              }
              uint64_t v78 = *(void *)(i - 8);
              *((void *)v37 - 1) = v78;
              v37 -= 8;
            }
            uint64_t v79 = (void *)*((void *)this + 2);
            *((void *)this + 2) = v34;
            *((void *)this + 3) = v37;
            *((void *)this + 4) = v61;
            *((void *)this + 5) = v38;
            double v4 = (uint64_t *)((char *)this + 160);
            if (v79) {
              operator delete(v79);
            }
            goto LABEL_73;
          }
          long long v31 = operator new(0x1000uLL);
          uint64_t v32 = v31;
          if (v29 != v9)
          {
            *(void *)float32x4_t v9 = v31;
            *((void *)this + 4) += 8;
            double v4 = (uint64_t *)((char *)this + 160);
LABEL_73:
            float64x2_t v10 = (char *)*((void *)this + 3);
            uint64_t v14 = *((void *)this + 7);
            unint64_t v16 = *((void *)this + 6) + v14;
LABEL_74:
            *(_DWORD *)(*(void *)&v10[(v16 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v16 & 0x3FF)) = v7;
            *((void *)this + 7) = v14 + 1;
            *(void *)(*((void *)this + 14) + (((unint64_t)(int)v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
            goto LABEL_75;
          }
          if (v10 == v30)
          {
            if (v9 == v10) {
              unint64_t v114 = 1;
            }
            else {
              unint64_t v114 = (v29 - v10) >> 2;
            }
            uint64_t v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v114);
            float64x2_t v10 = &v115[(2 * v114 + 6) & 0xFFFFFFFFFFFFFFF8];
            uint64_t v117 = (uint64_t *)*((void *)this + 3);
            int v118 = v10;
            uint64_t v119 = *((void *)this + 4) - (void)v117;
            double v4 = (uint64_t *)((char *)this + 160);
            if (v119)
            {
              int v118 = &v10[v119 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v120 = 8 * (v119 >> 3);
              uint64_t v121 = v10;
              do
              {
                uint64_t v122 = *v117++;
                *(void *)uint64_t v121 = v122;
                v121 += 8;
                v120 -= 8;
              }
              while (v120);
            }
            uint64_t v123 = (void *)*((void *)this + 2);
            *((void *)this + 2) = v115;
            *((void *)this + 3) = v10;
            *((void *)this + 4) = v118;
            *((void *)this + 5) = &v115[8 * v116];
            if (v123)
            {
              operator delete(v123);
              float64x2_t v10 = (char *)*((void *)this + 3);
            }
          }
          else
          {
            double v4 = (uint64_t *)((char *)this + 160);
          }
          *((void *)v10 - 1) = v32;
          uint64_t v124 = (char *)*((void *)this + 3);
          CGRect v125 = (char *)*((void *)this + 4);
          *((void *)this + 3) = v124 - 8;
          uint64_t v126 = *((void *)v124 - 1);
          *((void *)this + 3) = v124;
          if (v125 == *((char **)this + 5))
          {
            unint64_t v127 = *((void *)this + 2);
            uint64_t v128 = (uint64_t)&v124[-v127];
            if ((unint64_t)v124 <= v127)
            {
              uint64_t v134 = (uint64_t)&v125[-v127];
              BOOL v42 = v134 == 0;
              uint64_t v135 = v134 >> 2;
              if (v42) {
                unint64_t v136 = 1;
              }
              else {
                unint64_t v136 = v135;
              }
              uint64_t v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v136);
              double v139 = &v137[8 * (v136 >> 2)];
              uint64_t v140 = (uint64_t *)*((void *)this + 3);
              CGRect v125 = v139;
              uint64_t v141 = *((void *)this + 4) - (void)v140;
              double v4 = (uint64_t *)((char *)this + 160);
              if (v141)
              {
                CGRect v125 = &v139[v141 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v142 = 8 * (v141 >> 3);
                uint64_t v143 = &v137[8 * (v136 >> 2)];
                do
                {
                  uint64_t v144 = *v140++;
                  *(void *)uint64_t v143 = v144;
                  v143 += 8;
                  v142 -= 8;
                }
                while (v142);
              }
              int v145 = (void *)*((void *)this + 2);
              *((void *)this + 2) = v137;
              *((void *)this + 3) = v139;
              *((void *)this + 4) = v125;
              *((void *)this + 5) = &v137[8 * v138];
              if (v145)
              {
                operator delete(v145);
                CGRect v125 = (char *)*((void *)this + 4);
              }
            }
            else
            {
              uint64_t v129 = v128 >> 3;
              BOOL v23 = v128 >> 3 < -1;
              uint64_t v130 = (v128 >> 3) + 2;
              if (v23) {
                uint64_t v131 = v130;
              }
              else {
                uint64_t v131 = v129 + 1;
              }
              BOOL v132 = &v124[-8 * (v131 >> 1)];
              int64_t v133 = v125 - v124;
              if (v125 != v124)
              {
                memmove(&v124[-8 * (v131 >> 1)], v124, v125 - v124);
                uint64_t v124 = (char *)*((void *)this + 3);
              }
              CGRect v125 = &v132[v133];
              *((void *)this + 3) = &v124[-8 * (v131 >> 1)];
              *((void *)this + 4) = &v132[v133];
              double v4 = (uint64_t *)((char *)this + 160);
            }
          }
          *(void *)CGRect v125 = v126;
        }
        else
        {
          *((void *)this + 6) = v15 - 1024;
          uint64_t v19 = *(void *)v10;
          double v17 = v10 + 8;
          uint64_t v18 = v19;
          *((void *)this + 3) = v17;
          if (v9 == *((char **)this + 5))
          {
            unint64_t v20 = *((void *)this + 2);
            uint64_t v21 = (uint64_t)&v17[-v20];
            if ((unint64_t)v17 <= v20)
            {
              uint64_t v43 = (uint64_t)&v9[-v20];
              BOOL v42 = v43 == 0;
              uint64_t v44 = v43 >> 2;
              if (v42) {
                unint64_t v45 = 1;
              }
              else {
                unint64_t v45 = v44;
              }
              uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v45);
              uint64_t v48 = &v46[8 * (v45 >> 2)];
              uint64_t v49 = (uint64_t *)*((void *)this + 3);
              float32x4_t v9 = v48;
              uint64_t v50 = *((void *)this + 4) - (void)v49;
              double v4 = (uint64_t *)((char *)this + 160);
              if (v50)
              {
                float32x4_t v9 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v51 = 8 * (v50 >> 3);
                long long v52 = &v46[8 * (v45 >> 2)];
                do
                {
                  uint64_t v53 = *v49++;
                  *(void *)long long v52 = v53;
                  v52 += 8;
                  v51 -= 8;
                }
                while (v51);
              }
              long long v54 = (void *)*((void *)this + 2);
              *((void *)this + 2) = v46;
              *((void *)this + 3) = v48;
              *((void *)this + 4) = v9;
              *((void *)this + 5) = &v46[8 * v47];
              if (v54)
              {
                operator delete(v54);
                float32x4_t v9 = (char *)*((void *)this + 4);
              }
            }
            else
            {
              uint64_t v22 = v21 >> 3;
              BOOL v23 = v21 >> 3 < -1;
              uint64_t v24 = (v21 >> 3) + 2;
              if (v23) {
                uint64_t v25 = v24;
              }
              else {
                uint64_t v25 = v22 + 1;
              }
              float v26 = &v17[-8 * (v25 >> 1)];
              int64_t v27 = v9 - v17;
              if (v9 != v17)
              {
                memmove(&v17[-8 * (v25 >> 1)], v17, v9 - v17);
                float v26 = &v17[-8 * (v25 >> 1)];
                float32x4_t v9 = (char *)*((void *)this + 3);
              }
              uint64_t v28 = &v9[-8 * (v25 >> 1)];
              float32x4_t v9 = &v26[v27];
              *((void *)this + 3) = v28;
              *((void *)this + 4) = &v26[v27];
              double v4 = (uint64_t *)((char *)this + 160);
            }
          }
          *(void *)float32x4_t v9 = v18;
        }
        *((void *)this + 4) += 8;
        goto LABEL_73;
      }
LABEL_75:
      uint64_t v80 = *(void *)this;
      if (*(void *)this > v7 >> 32) {
        break;
      }
LABEL_84:
      if (*(_DWORD *)(*((void *)this + 11) + 4 * (int)v7) == *(_DWORD *)(*((void *)this + 8) + 4 * (int)v7))
      {
        __p = 0;
        float v156 = 0;
        uint64_t v157 = 0;
        do
        {
          unint64_t v87 = *((void *)this + 7) + *((void *)this + 6) - 1;
          int v88 = *(_DWORD *)(*(void *)(*((void *)this + 3) + ((v87 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v87 & 0x3FF));
          uint64_t v89 = v156;
          if (v156 >= v157)
          {
            unint64_t v91 = (char *)__p;
            uint64_t v92 = (v156 - (unsigned char *)__p) >> 2;
            unint64_t v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v94 = v157 - (unsigned char *)__p;
            if ((v157 - (unsigned char *)__p) >> 1 > v93) {
              unint64_t v93 = v94 >> 1;
            }
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v95 = v93;
            }
            if (v95)
            {
              double v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v157, v95);
              unint64_t v91 = (char *)__p;
              uint64_t v89 = v156;
            }
            else
            {
              double v96 = 0;
            }
            uint64_t v97 = &v96[4 * v92];
            *(_DWORD *)uint64_t v97 = v88;
            uint64_t v90 = v97 + 4;
            while (v89 != v91)
            {
              int v98 = *((_DWORD *)v89 - 1);
              v89 -= 4;
              *((_DWORD *)v97 - 1) = v98;
              v97 -= 4;
            }
            __p = v97;
            float v156 = v90;
            uint64_t v157 = &v96[4 * v95];
            if (v91) {
              operator delete(v91);
            }
          }
          else
          {
            *(_DWORD *)float v156 = v88;
            uint64_t v90 = v89 + 4;
          }
          uint64_t v100 = *((void *)this + 3);
          uint64_t v99 = *((void *)this + 4);
          float v156 = v90;
          if (v99 == v100) {
            uint64_t v101 = 0;
          }
          else {
            uint64_t v101 = ((v99 - v100) << 7) - 1;
          }
          uint64_t v102 = *((void *)this + 6);
          uint64_t v103 = *((void *)this + 7) - 1;
          *((void *)this + 7) = v103;
          if ((unint64_t)(v101 - (v103 + v102)) >= 0x800)
          {
            operator delete(*(void **)(v99 - 8));
            *((void *)this + 4) -= 8;
          }
          *(void *)(*((void *)this + 14) + (((unint64_t)v88 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v88);
        }
        while (v88 != v7);
        unint64_t v104 = *((void *)this + 21);
        if (v104 >= *((void *)this + 22))
        {
          uint64_t v105 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(v4, (uint64_t)&__p);
        }
        else
        {
          std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>((uint64_t)v4, (uint64_t)&__p);
          uint64_t v105 = v104 + 24;
        }
        *((void *)this + 21) = v105;
        if (__p)
        {
          float v156 = (char *)__p;
          operator delete(__p);
        }
      }
      uint64_t v3 = *((void *)&v153 + 1);
      if (*((void *)&v153 + 1))
      {
        uint64_t v106 = *(int *)(*(void *)(*((void *)&v151 + 1)
                                  + (((unint64_t)(*((void *)&v153 + 1) + v153 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*((void *)&v153 + 1) + v153 - 1) & 0x1FF));
        uint64_t v107 = *((void *)this + 11);
        int v108 = *(_DWORD *)(v107 + 4 * (int)v7);
        if (v108 >= *(_DWORD *)(v107 + 4 * v106)) {
          int v108 = *(_DWORD *)(v107 + 4 * v106);
        }
        *(_DWORD *)(v107 + 4 * v106) = v108;
        if (v3) {
          continue;
        }
      }
      return std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v151);
    }
    unint64_t v81 = v7 >> 32;
    uint64_t v82 = *(void *)(*((void *)this + 17) + 24 * (int)v7);
    while (1)
    {
      unint64_t v83 = v81 >> 6;
      uint64_t v84 = 1 << v81;
      if ((*(void *)(v82 + 8 * (v81 >> 6)) & (1 << v81)) != 0) {
        break;
      }
LABEL_83:
      LODWORD(v8) = v8 + 1;
      unint64_t v81 = (int)v8;
      if (v80 <= (int)v8) {
        goto LABEL_84;
      }
    }
    int v85 = *(_DWORD *)(*((void *)this + 8) + 4 * v81);
    if ((v85 & 0x80000000) == 0)
    {
      if ((*(void *)(*((void *)this + 14) + 8 * v83) & v84) != 0)
      {
        uint64_t v86 = *((void *)this + 11);
        if (v85 >= *(_DWORD *)(v86 + 4 * (int)v7)) {
          int v85 = *(_DWORD *)(v86 + 4 * (int)v7);
        }
        *(_DWORD *)(v86 + 4 * (int)v7) = v85;
      }
      goto LABEL_83;
    }
    uint64_t v109 = *((void *)&v151 + 1);
    LODWORD(__p) = v8;
    if ((void)v152 == *((void *)&v151 + 1)) {
      uint64_t v110 = 0;
    }
    else {
      uint64_t v110 = (((void)v152 - *((void *)&v151 + 1)) << 6) - 1;
    }
    uint64_t v111 = *((void *)&v153 + 1);
    unint64_t v112 = *((void *)&v153 + 1) + v153;
    if (v110 == *((void *)&v153 + 1) + (void)v153)
    {
      std::deque<std::pair<int,int>>::__add_back_capacity(&v151);
      uint64_t v111 = *((void *)&v153 + 1);
      uint64_t v109 = *((void *)&v151 + 1);
      unint64_t v112 = v153 + *((void *)&v153 + 1);
    }
    uint64_t v113 = (_DWORD *)(*(void *)(v109 + ((v112 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v112 & 0x1FF));
    *uint64_t v113 = v7;
    v113[1] = v8 + 1;
    *((void *)&v153 + 1) = v111 + 1;
    int v150 = 0;
    std::deque<std::pair<int,int>>::emplace_back<int &,int &>(&v151, &__p, &v150);
    uint64_t v3 = *((void *)&v153 + 1);
  }
  while (*((void *)&v153 + 1));
  return std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v151);
}

void sub_1DD7996F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  operator delete(v24);
  if (v23) {
    operator delete(v23);
  }
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::CTLDRegion(uint64_t a1, int a2, void *a3, float a4, float a5, float a6, float a7)
{
  id v13 = a3;
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = v13;
  *(float *)(a1 + 16) = a6;
  *(float *)(a1 + 20) = a7;
  *(float *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
  *(float *)(a1 + 28) = a5;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 48) = a5;
  *(double *)(a1 + 56) = a6;
  *(double *)(a1 + 64) = a4;
  *(double *)(a1 + 72) = a7;
  *(double *)(a1 + 80) = a5;
  *(double *)(a1 + 88) = a7;
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

{
  id v13;

  id v13 = a3;
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = v13;
  *(float *)(a1 + 16) = a6;
  *(float *)(a1 + 20) = a7;
  *(float *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
  *(float *)(a1 + 28) = a5;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 48) = a5;
  *(double *)(a1 + 56) = a6;
  *(double *)(a1 + 64) = a4;
  *(double *)(a1 + 72) = a7;
  *(double *)(a1 + 80) = a5;
  *(double *)(a1 + 88) = a7;
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::CTLDRegion(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, int a6, void *a7)
{
  id v13 = a7;
  *(_DWORD *)a1 = a6;
  *(void *)(a1 + 8) = v13;
  *(_OWORD *)(a1 + 32) = *a2;
  *(_OWORD *)(a1 + 48) = *a3;
  *(_OWORD *)(a1 + 64) = *a4;
  *(_OWORD *)(a1 + 80) = *a5;
  double v14 = *(double *)(a1 + 40);
  double v15 = *(double *)(a1 + 48);
  if (*(double *)(a1 + 56) < v14) {
    double v14 = *(double *)(a1 + 56);
  }
  float v16 = v14;
  double v17 = *(double *)(a1 + 64);
  double v18 = *(double *)(a1 + 72);
  if (v17 >= *(double *)(a1 + 32)) {
    double v19 = *(double *)(a1 + 32);
  }
  else {
    double v19 = *(double *)(a1 + 64);
  }
  double v20 = *(double *)(a1 + 80);
  double v21 = *(double *)(a1 + 88);
  if (v18 >= v21) {
    double v22 = *(double *)(a1 + 72);
  }
  else {
    double v22 = *(double *)(a1 + 88);
  }
  float v23 = v22;
  *(float *)(a1 + 16) = v16;
  *(float *)(a1 + 20) = v23;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  if (v15 < v20) {
    double v15 = v20;
  }
  float v25 = v15;
  float v24 = v19;
  *(float *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v24;
  *(float *)(a1 + 28) = v25;
  float v26 = 0.0;
  if (v21 != v18)
  {
    float v28 = v20 - v17;
    if (v28 == 0.0) {
      float v28 = 1.0;
    }
    float v27 = v21 - v18;
    float v26 = atanf(v27 / v28);
  }
  *(float *)(a1 + 96) = v26;
  return a1;
}

float CRTextRecognition::CRCTLD::CTLDRegion::height(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  return *((float *)this + 5) - *((float *)this + 4);
}

float CRTextRecognition::CRCTLD::CTLDRegion::width(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  return *((float *)this + 7) - *((float *)this + 6);
}

float CRTextRecognition::CRCTLD::CTLDRegion::area(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  return (float)(*((float *)this + 7) - *((float *)this + 6)) * (float)(*((float *)this + 5) - *((float *)this + 4));
}

double CRTextRecognition::CRCTLD::CTLDRegion::center(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  return (float)(*((float *)this + 6) + *((float *)this + 7)) * 0.5;
}

float CRTextRecognition::CRCTLD::CTLDRegion::getIntersectionArea(CRTextRecognition::CRCTLD::CTLDRegion *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2)
{
  float v2 = *((float *)a2 + 6);
  float v3 = *((float *)this + 7);
  float result = 0.0;
  if (v2 < v3)
  {
    float v5 = *((float *)a2 + 7);
    float v6 = *((float *)this + 6);
    if (v5 > v6)
    {
      float v7 = *((float *)a2 + 4);
      float v8 = *((float *)this + 5);
      if (v7 < v8)
      {
        float v9 = *((float *)a2 + 5);
        float v10 = *((float *)this + 4);
        if (v9 > v10)
        {
          if (v6 >= v2) {
            float v11 = *((float *)this + 6);
          }
          else {
            float v11 = *((float *)a2 + 6);
          }
          if (v10 >= v7) {
            float v12 = *((float *)this + 4);
          }
          else {
            float v12 = *((float *)a2 + 4);
          }
          if (v5 < v3) {
            float v3 = *((float *)a2 + 7);
          }
          if (v9 >= v8) {
            float v13 = *((float *)this + 5);
          }
          else {
            float v13 = *((float *)a2 + 5);
          }
          return (float)(v3 - v11) * (float)(v13 - v12);
        }
      }
    }
  }
  return result;
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::intersects(CRTextRecognition::CRCTLD::CTLDRegion *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2)
{
  return *((float *)a2 + 6) < *((float *)this + 7)
      && *((float *)a2 + 7) > *((float *)this + 6)
      && *((float *)a2 + 4) < *((float *)this + 5)
      && *((float *)a2 + 5) > *((float *)this + 4);
}

float CRTextRecognition::CRCTLD::CTLDRegion::rotate(CRTextRecognition::CRCTLD::CTLDRegion *this, float a2)
{
  v3.CGFloat x = (float)(*((float *)this + 6) + *((float *)this + 7)) * 0.5;
  v3.double y = (float)(*((float *)this + 4) + *((float *)this + 5)) * 0.5;
  return CRTextRecognition::CRCTLD::CTLDRegion::rotate(this, a2, v3);
}

float CRTextRecognition::CRCTLD::CTLDRegion::rotate(CRTextRecognition::CRCTLD::CTLDRegion *this, float a2, CGPoint a3)
{
  double y = a3.y;
  double x = a3.x;
  __float2 v7 = __sincosf_stret(a2);
  double v8 = *((double *)this + 4) - x;
  double v9 = *((double *)this + 5) - y;
  double v10 = x + v8 * v7.__cosval - v9 * v7.__sinval;
  double v11 = y + v9 * v7.__cosval + v8 * v7.__sinval;
  *((double *)this + 4) = v10;
  *((double *)this + 5) = v11;
  double v12 = *((double *)this + 6) - x;
  double v13 = *((double *)this + 7) - y;
  double v14 = x + v12 * v7.__cosval - v13 * v7.__sinval;
  double v15 = y + v13 * v7.__cosval + v12 * v7.__sinval;
  *((double *)this + 6) = v14;
  *((double *)this + 7) = v15;
  double v16 = *((double *)this + 8) - x;
  double v17 = *((double *)this + 9) - y;
  double v18 = x + v16 * v7.__cosval - v17 * v7.__sinval;
  double v19 = y + v17 * v7.__cosval + v16 * v7.__sinval;
  *((double *)this + 8) = v18;
  *((double *)this + 9) = v19;
  double v20 = *((double *)this + 10) - x;
  double v21 = *((double *)this + 11) - y;
  double v22 = x + v20 * v7.__cosval - v21 * v7.__sinval;
  double v23 = y + v21 * v7.__cosval + v20 * v7.__sinval;
  *((double *)this + 10) = v22;
  *((double *)this + 11) = v23;
  if (v18 >= v10) {
    double v24 = v10;
  }
  else {
    double v24 = v18;
  }
  float v25 = v24;
  if (v15 < v11) {
    double v11 = v15;
  }
  float v26 = v11;
  if (v14 >= v22) {
    double v27 = v14;
  }
  else {
    double v27 = x + v20 * v7.__cosval - v21 * v7.__sinval;
  }
  float v28 = v27;
  *((float *)this + 6) = v25;
  *((float *)this + 7) = v28;
  if (v19 >= v23) {
    double v23 = v19;
  }
  float v29 = v23;
  *((float *)this + 4) = v26;
  *((float *)this + 5) = v29;
  float result = *((float *)this + 24) + a2;
  *((float *)this + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  return result;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::updateBoundingBox(uint64_t this, float a2, float a3, float a4, float a5)
{
  *(float *)(this + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(float *)(this + 28) = a3;
  double v5 = a2;
  double v6 = *(double *)(this + 32);
  double v7 = *(double *)(this + 40);
  if (v6 < v5) {
    double v6 = v5;
  }
  if (v7 < a4) {
    double v7 = a4;
  }
  *(double *)(this + 32) = v6;
  *(double *)(this + 40) = v7;
  double v8 = a3;
  double v9 = *(double *)(this + 48);
  double v10 = *(double *)(this + 56);
  if (v9 > v8) {
    double v9 = v8;
  }
  if (v10 < a4) {
    double v10 = a4;
  }
  *(float *)(this + 16) = a4;
  *(float *)(this + 20) = a5;
  *(double *)(this + 48) = v9;
  *(double *)(this + 56) = v10;
  if (*(double *)(this + 64) >= v5) {
    double v5 = *(double *)(this + 64);
  }
  double v11 = a5;
  if (*(double *)(this + 72) <= a5) {
    double v12 = *(double *)(this + 72);
  }
  else {
    double v12 = a5;
  }
  *(double *)(this + 64) = v5;
  *(double *)(this + 72) = v12;
  double v13 = *(double *)(this + 80);
  if (v13 > v8) {
    double v13 = v8;
  }
  if (*(double *)(this + 88) <= v11) {
    double v14 = *(double *)(this + 88);
  }
  else {
    double v14 = v11;
  }
  *(double *)(this + 80) = v13;
  *(double *)(this + 88) = v14;
  return this;
}

void CRTextRecognition::CRCTLD::CTLDRegion::splitRegionIntoSubRectangles(float64x2_t *this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  int v5 = 0;
  float64x2_t v6 = vsubq_f64(this[3], this[2]);
  float64x2_t v7 = vsubq_f64(this[5], this[4]);
  float v8 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v7, v7).f64[1]), v7.f64[0], v7.f64[0]));
  int v9 = (int)(float)(v8 / a2);
  if (v9 >= 15) {
    int v9 = 15;
  }
  if (v9 <= 2) {
    int v10 = 2;
  }
  else {
    int v10 = v9;
  }
  float64x2_t v11 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v10), 0);
  float32x2_t v12 = vcvt_f32_f64(vdivq_f64(v6, v11));
  float32x2_t v13 = vcvt_f32_f64(vdivq_f64(v7, v11));
  a3[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  do
  {
    float64x2_t v14 = this[2];
    int v15 = v5 + 1;
    float64x2_t v39 = vaddq_f64(v14, vcvtq_f64_f32(vmul_n_f32(v12, (float)(v5 + 1))));
    float64x2_t v40 = vaddq_f64(v14, vcvtq_f64_f32(vmul_n_f32(v12, (float)v5)));
    float64x2_t v16 = this[4];
    float64x2_t v37 = vaddq_f64(v16, vcvtq_f64_f32(vmul_n_f32(v13, (float)(v5 + 1))));
    float64x2_t v38 = vaddq_f64(v16, vcvtq_f64_f32(vmul_n_f32(v13, (float)v5)));
    unint64_t v17 = a3[1];
    unint64_t v18 = a3[2];
    if (v17 >= v18)
    {
      uint64_t v20 = (uint64_t)(v17 - *a3) >> 7;
      if ((unint64_t)(v20 + 1) >> 57) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v21 = v18 - *a3;
      uint64_t v22 = v21 >> 6;
      if (v21 >> 6 <= (unint64_t)(v20 + 1)) {
        uint64_t v22 = v20 + 1;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFF80) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      _OWORD v41[4] = a3 + 2;
      if (v23) {
        double v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a3 + 2), v23);
      }
      else {
        double v24 = 0;
      }
      uint64_t v25 = (uint64_t)&v24[128 * v20];
      v41[0] = v24;
      v41[1] = v25;
      v41[3] = &v24[128 * v23];
      CRTextRecognition::CRCTLD::CTLDRegion::CTLDRegion(v25, &v40, &v39, &v38, &v37, LODWORD(this->f64[0]), 0);
      _OWORD v41[2] = v25 + 128;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a3, v41);
      uint64_t v19 = a3[1];
      std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)v41);
    }
    else
    {
      uint64_t v19 = CRTextRecognition::CRCTLD::CTLDRegion::CTLDRegion(v17, &v40, &v39, &v38, &v37, LODWORD(this->f64[0]), 0)
          + 128;
      a3[1] = v19;
    }
    a3[1] = v19;
    v42.double x = (float)(*(float *)(v19 - 104) + *(float *)(v19 - 100)) * 0.5;
    v42.double y = (float)(*(float *)(v19 - 112) + *(float *)(v19 - 108)) * 0.5;
    CRTextRecognition::CRCTLD::CTLDRegion::rotate((CRTextRecognition::CRCTLD::CTLDRegion *)(v19 - 128), -*(float *)this[6].f64, v42);
    if (v15 != 1)
    {
      uint64_t v26 = *a3;
      uint64_t v27 = a3[1] - *a3;
      uint64_t v28 = (v27 << 25) - 0x100000000;
      uint64_t v29 = *a3 + (v28 >> 25);
      float v31 = *(float *)(v29 + 16);
      double v30 = (float *)(v29 + 16);
      float v32 = v31;
      uint64_t v33 = (v27 << 25) - 0x200000000;
      float v34 = *(float *)(*a3 + (v33 >> 25) + 16);
      if (v31 >= v34)
      {
        float v34 = *(float *)(v26 + (v33 >> 32 << 7) + 20);
        if (v32 <= v34) {
          goto LABEL_25;
        }
LABEL_24:
        *double v30 = v34;
        goto LABEL_25;
      }
      uint64_t v35 = v26 + (v28 >> 32 << 7);
      float v36 = *(float *)(v35 + 20);
      double v30 = (float *)(v35 + 20);
      if (v36 < v34) {
        goto LABEL_24;
      }
    }
LABEL_25:
    int v5 = v15;
  }
  while (v15 != v10);
}

void sub_1DD799EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::containsPoint(CRTextRecognition::CRCTLD::CTLDRegion *this, const CGPoint *a2)
{
  if (a2->x >= *((float *)this + 6) && a2->x <= *((float *)this + 7) && (double y = a2->y, y >= *((float *)this + 4))) {
    return y <= *((float *)this + 5);
  }
  else {
    return 0;
  }
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::segmentIntersectsRegion(float *a1, CGPoint *a2)
{
  double x = a2[1].x;
  double v3 = a2->x;
  if (x >= a2->x) {
    double v4 = a2->x;
  }
  else {
    double v4 = a2[1].x;
  }
  double v5 = a1[7];
  if (v4 > v5) {
    return 0;
  }
  double v6 = v3 >= x ? a2->x : a2[1].x;
  double v7 = a1[6];
  if (v6 < v7) {
    return 0;
  }
  double y = a2[1].y;
  double v10 = a2->y;
  double v11 = y >= v10 ? a2->y : a2[1].y;
  double v12 = a1[5];
  if (v11 > v12) {
    return 0;
  }
  double v13 = v10 >= y ? a2->y : a2[1].y;
  double v14 = a1[4];
  if (v13 < v14) {
    return 0;
  }
  BOOL v19 = v10 > v12 || v3 > v5 || v3 < v7 || v10 < v14;
  if (!v19 || x <= v5 && x >= v7 && y <= v12 && y >= v14) {
    return 1;
  }
  uint64_t v20 = (double *)operator new(0x80uLL);
  uint64_t v21 = (char *)v20;
  uint64_t v22 = 0;
  *uint64_t v20 = v7;
  v20[1] = v14;
  void v20[2] = v5;
  v20[3] = v14;
  v20[4] = v7;
  v20[5] = v14;
  v20[6] = v7;
  v20[7] = v12;
  v20[8] = v5;
  v20[9] = v14;
  v20[10] = v5;
  v20[11] = v12;
  v20[12] = v7;
  v20[13] = v12;
  v20[14] = v5;
  v20[15] = v12;
  do
  {
    uint64_t v20 = (double *)CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersect((BOOL)v20, a2, (CGPoint *)&v21[v22]);
    int v15 = v20;
    if (v20) {
      break;
    }
    BOOL v23 = v22 == 96;
    v22 += 32;
  }
  while (!v23);
  operator delete(v21);
  return (uint64_t)v15;
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersect(BOOL a1, CGPoint *a2, CGPoint *a3)
{
  double v3 = a2 + 1;
  double x = a2[1].x;
  double y = a2[1].y;
  double v6 = a2->y;
  double v7 = a3->y;
  double v8 = x - a2->x;
  float v9 = (y - v6) * (a3->x - x) - v8 * (v7 - y);
  int v10 = 2 * (v9 < 0.0);
  if (v9 > 0.0) {
    int v10 = 1;
  }
  double v11 = a3 + 1;
  double v12 = a3[1].x;
  double v13 = a3[1].y;
  float v14 = (y - v6) * (v12 - x) - v8 * (v13 - y);
  if (v14 > 0.0) {
    int v15 = 1;
  }
  else {
    int v15 = 2 * (v14 < 0.0);
  }
  double v16 = v12 - a3->x;
  float v17 = (v13 - v7) * (a2->x - v12) - v16 * (v6 - v13);
  if (v17 > 0.0) {
    int v18 = 1;
  }
  else {
    int v18 = 2 * (v17 < 0.0);
  }
  float v19 = (v13 - v7) * (x - v12) - v16 * (y - v13);
  if (v19 > 0.0) {
    int v20 = 1;
  }
  else {
    int v20 = 2 * (v19 < 0.0);
  }
  BOOL v21 = v10 == v15 || v18 == v20;
  BOOL result = 1;
  if (v21
    && (v10
     || !(a1 = CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOnSegment((CRTextRecognition::CRCTLD::CTLDRegion *)a1, a2, a3, a2 + 1)))&& (v15|| !(a1 = CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOnSegment((CRTextRecognition::CRCTLD::CTLDRegion *)a1, a2, v11, v3)))&& (v18|| !(a1 = CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOnSegment((CRTextRecognition::CRCTLD::CTLDRegion *)a1, a3, a2, v11)))&& (v20|| !CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOnSegment((CRTextRecognition::CRCTLD::CTLDRegion *)a1,
           a3,
           v3,
           v11)))
  {
    return 0;
  }
  return result;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOrientation(CRTextRecognition::CRCTLD::CTLDRegion *this, const CGPoint *a2, const CGPoint *a3, const CGPoint *a4)
{
  float v4 = (a3->y - a2->y) * (a4->x - a3->x) - (a3->x - a2->x) * (a4->y - a3->y);
  if (v4 > 0.0) {
    return 1;
  }
  else {
    return 2 * (v4 < 0.0);
  }
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOnSegment(CRTextRecognition::CRCTLD::CTLDRegion *this, const CGPoint *a2, const CGPoint *a3, const CGPoint *a4)
{
  double x = a3->x;
  double v5 = a2->x;
  if (a2->x >= a4->x) {
    double v6 = a2->x;
  }
  else {
    double v6 = a4->x;
  }
  if (x > v6) {
    return 0;
  }
  if (a4->x < v5) {
    double v5 = a4->x;
  }
  if (x < v5) {
    return 0;
  }
  double y = a3->y;
  double v8 = a2->y;
  double v9 = a4->y;
  double v10 = v8 >= v9 ? a2->y : a4->y;
  if (y > v10) {
    return 0;
  }
  if (v9 < v8) {
    double v8 = a4->y;
  }
  return y >= v8;
}

float CRTextRecognition::CRCTLD::CTLDRegion::yPointOnSegment(float a1, uint64_t a2, double *a3)
{
  double v3 = a1;
  double v4 = *a3;
  if (*a3 >= v3) {
    return a3[1];
  }
  double v5 = a3[2];
  if (v5 <= v3) {
    return a3[3];
  }
  float v6 = v5 - v4;
  if (v6 <= 0.0)
  {
    return a3[1];
  }
  else
  {
    double v7 = a3[1];
    float v8 = a3[3] - v7;
    return v7 + (v3 - v4) / v6 * v8;
  }
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(uint64_t a1, double *a2, double *a3)
{
  double v5 = *a2;
  if (*a2 < *a3) {
    double v5 = *a3;
  }
  float v6 = v5;
  double v7 = a3[2];
  if (v7 >= a2[2]) {
    double v7 = a2[2];
  }
  float v8 = v7;
  if (v6 <= v8)
  {
    float v12 = CRTextRecognition::CRCTLD::CTLDRegion::yPointOnSegment(v6, a1, a2);
    if (v12 >= CRTextRecognition::CRCTLD::CTLDRegion::yPointOnSegment(v6, v13, a3)) {
      return 0;
    }
    float v15 = CRTextRecognition::CRCTLD::CTLDRegion::yPointOnSegment(v8, v14, a2);
    return v15 < CRTextRecognition::CRCTLD::CTLDRegion::yPointOnSegment(v8, v16, a3);
  }
  else
  {
    double v9 = a2[1];
    if (v9 < a2[3]) {
      double v9 = a2[3];
    }
    double v10 = a3[3];
    if (v10 >= a3[1]) {
      double v10 = a3[1];
    }
    return v9 < v10;
  }
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::pointIsAboveCenterline(CRTextRecognition::CRCTLD::CTLDRegion *this, const CGPoint *a2)
{
  double v2 = (*((double *)this + 6) + *((double *)this + 10)) * 0.5;
  double v3 = (*((double *)this + 7) + *((double *)this + 11)) * 0.5;
  float v4 = (v3 - (*((double *)this + 9) + *((double *)this + 5)) * 0.5) * (a2->x - v2)
     - (v2 - (*((double *)this + 8) + *((double *)this + 4)) * 0.5) * (a2->y - v3);
  return v4 > 0.0;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::operator<(uint64_t a1, uint64_t a2)
{
  float v4 = (float *)(a1 + 16);
  float v5 = *(float *)(a1 + 16);
  float v6 = *(float *)(a2 + 16);
  if (v5 == v6
    && *(float *)(a1 + 24) == *(float *)(a2 + 24)
    && *(float *)(a1 + 20) == *(float *)(a2 + 20)
    && *(float *)(a1 + 28) == *(float *)(a2 + 28))
  {
    return 0;
  }
  float v7 = *(float *)(a1 + 20);
  if (v7 < v6) {
    return 1;
  }
  float v9 = *(float *)(a2 + 20);
  if (v5 > v9) {
    return 0;
  }
  if (v9 >= v7) {
    float v10 = *(float *)(a1 + 20);
  }
  else {
    float v10 = *(float *)(a2 + 20);
  }
  if (v5 < v6) {
    float v4 = (float *)(a2 + 16);
  }
  float v11 = v10 - *v4;
  if (v11 <= 0.0)
  {
    if (*(float *)(a1 + 28) < *(float *)(a2 + 24)) {
      return 1;
    }
    if (*(float *)(a1 + 24) > *(float *)(a2 + 28)) {
      return 0;
    }
  }
  float v12 = v7 - v5;
  if ((float)(v7 - v5) == 0.0) {
    return *(float *)(a1 + 24) < *(float *)(a2 + 24);
  }
  float v13 = v9 - v6;
  if ((float)(v9 - v6) == 0.0) {
    return *(float *)(a1 + 24) < *(float *)(a2 + 24);
  }
  float v14 = *(float *)(a1 + 28) - *(float *)(a1 + 24);
  if (v14 == 0.0) {
    return *(float *)(a1 + 24) < *(float *)(a2 + 24);
  }
  float v16 = *(float *)(a2 + 24);
  float v15 = *(float *)(a2 + 28);
  if ((float)(v15 - v16) == 0.0) {
    return *(float *)(a1 + 24) < *(float *)(a2 + 24);
  }
  float v53 = v15 - v16;
  float v55 = *(float *)(a2 + 24);
  float v51 = *(float *)(a2 + 28);
  float v52 = *(float *)(a1 + 24);
  float v50 = *(float *)(a1 + 28);
  long long v17 = *(_OWORD *)(a1 + 80);
  CGPoint v62 = *(CGPoint *)(a1 + 64);
  long long v63 = v17;
  long long v18 = *(_OWORD *)(a2 + 48);
  long long v60 = *(_OWORD *)(a2 + 32);
  long long v61 = v18;
  BOOL IsAbove = CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(a1, &v62.x, (double *)&v60);
  if (IsAbove) {
    return 1;
  }
  long long v20 = *(_OWORD *)(a2 + 80);
  CGPoint v62 = *(CGPoint *)(a2 + 64);
  long long v63 = v20;
  long long v21 = *(_OWORD *)(a1 + 48);
  long long v60 = *(_OWORD *)(a1 + 32);
  long long v61 = v21;
  BOOL v22 = CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(IsAbove, &v62.x, (double *)&v60);
  if (v22) {
    return 0;
  }
  if (v13 >= v12) {
    float v23 = v7 - v5;
  }
  else {
    float v23 = v9 - v6;
  }
  float v24 = v11 / v23;
  float v25 = v50;
  if (v51 < v50) {
    float v25 = v51;
  }
  if (v52 >= v55) {
    uint64_t v26 = (float *)(a1 + 24);
  }
  else {
    uint64_t v26 = (float *)(a2 + 24);
  }
  float v27 = v25 - *v26;
  float v28 = v53;
  if (v53 >= v14) {
    float v28 = v14;
  }
  float v29 = v27 / v28;
  if (v29 > 0.5 && v29 >= v24)
  {
    float v31 = (long long *)(a1 + 64);
    float v32 = (long long *)(a1 + 80);
    uint64_t v33 = (long long *)(a2 + 64);
    float v34 = (long long *)(a2 + 80);
    long long v35 = *(_OWORD *)(a1 + 48);
    CGPoint v62 = *(CGPoint *)(a1 + 32);
    long long v63 = v35;
    long long v36 = *(_OWORD *)(a2 + 48);
    long long v60 = *(_OWORD *)(a2 + 32);
    long long v61 = v36;
    BOOL v37 = CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(v22, &v62.x, (double *)&v60);
    if (v37)
    {
      long long v38 = *v32;
      long long v58 = *v31;
      long long v59 = v38;
      long long v39 = *v34;
      long long v56 = *v33;
      long long v57 = v39;
      BOOL v37 = CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(v37, (double *)&v58, (double *)&v56);
      if (v37) {
        return 1;
      }
    }
    long long v40 = *(_OWORD *)(a2 + 48);
    CGPoint v62 = *(CGPoint *)(a2 + 32);
    long long v63 = v40;
    long long v41 = *(_OWORD *)(a1 + 48);
    long long v60 = *(_OWORD *)(a1 + 32);
    long long v61 = v41;
    BOOL v42 = CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(v37, &v62.x, (double *)&v60);
    if (v42)
    {
      long long v43 = *v34;
      long long v58 = *v33;
      long long v59 = v43;
      long long v44 = *v32;
      long long v56 = *v31;
      long long v57 = v44;
      if (CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(v42, (double *)&v58, (double *)&v56)) {
        return 0;
      }
    }
  }
  float IntersectionArea = CRTextRecognition::CRCTLD::CTLDRegion::getIntersectionArea((CRTextRecognition::CRCTLD::CTLDRegion *)a1, (const CRTextRecognition::CRCTLD::CTLDRegion *)a2);
  if ((float)(IntersectionArea / (float)(v13 * v53)) >= 0.95)
  {
    float v54 = v24;
    float v46 = IntersectionArea;
    v62.double x = (float)(v51 + v55) * 0.5;
    v62.double y = (float)(v6 + v9) * 0.5;
    BOOL IsAboveCenterline = CRTextRecognition::CRCTLD::CTLDRegion::pointIsAboveCenterline((CRTextRecognition::CRCTLD::CTLDRegion *)a1, &v62);
    float IntersectionArea = v46;
    float v24 = v54;
    if (IsAboveCenterline) {
      return 0;
    }
  }
  if ((float)(IntersectionArea / (float)(v12 * v14)) >= 0.95)
  {
    v62.double x = (float)(v50 + v52) * 0.5;
    v62.double y = (float)(v5 + v7) * 0.5;
    if (CRTextRecognition::CRCTLD::CTLDRegion::pointIsAboveCenterline((CRTextRecognition::CRCTLD::CTLDRegion *)a2, &v62))
    {
      return 1;
    }
  }
  if (v24 <= 0.5)
  {
    float v48 = v52;
    if (v5 < v6) {
      return 1;
    }
    goto LABEL_54;
  }
  float v48 = v52;
  if (v52 < v55) {
    return 1;
  }
  uint64_t result = v55 >= v52;
  if (v5 >= v6 && v55 >= v52)
  {
LABEL_54:
    uint64_t result = v6 >= v5;
    if (v6 < v5 || v48 < v55) {
      return result;
    }
    if (v55 >= v48)
    {
      BOOL v49 = v50 < v51;
      if (v7 < v9) {
        BOOL v49 = 1;
      }
      if (v7 <= v9) {
        return v49;
      }
      else {
        return v7 < v9;
      }
    }
    return 0;
  }
  return result;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::addMember(CRTextRecognition::CRCTLD::CTLDRegion *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2)
{
  uint64_t v4 = *((void *)this + 13);
  unint64_t v6 = *((void *)this + 14);
  float v5 = (uint64_t *)((char *)this + 104);
  uint64_t v7 = v6 - v4;
  if (v6 == v4)
  {
    *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
    int v17 = *((_DWORD *)a2 + 24);
  }
  else
  {
    float v8 = *((float *)a2 + 6);
    float v9 = *((float *)this + 7);
    if (v8 >= *((float *)this + 6)) {
      float v8 = *((float *)this + 6);
    }
    *((float *)this + 6) = v8;
    float v10 = *((float *)a2 + 7);
    if (v9 >= v10) {
      float v10 = v9;
    }
    *((float *)this + 7) = v10;
    float v11 = *((float *)a2 + 4);
    float v12 = *((float *)this + 5);
    if (v11 >= *((float *)this + 4)) {
      float v11 = *((float *)this + 4);
    }
    *((float *)this + 4) = v11;
    float v13 = *((float *)a2 + 5);
    if (v12 >= v13) {
      float v13 = v12;
    }
    *((float *)this + 5) = v13;
    double v14 = v8;
    double v15 = v11;
    *((double *)this + 4) = v14;
    *((double *)this + 5) = v15;
    double v16 = v10;
    *((double *)this + 6) = v16;
    *((double *)this + 7) = v15;
    *((double *)this + 8) = v14;
    *((double *)this + 9) = v13;
    *((double *)this + 10) = v16;
    *((double *)this + 11) = v13;
    int v17 = 0;
  }
  long long v18 = (char *)this + 120;
  unint64_t v19 = *((void *)this + 15);
  *((_DWORD *)this + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v17;
  if (v6 >= v19)
  {
    uint64_t v22 = v7 >> 7;
    unint64_t v23 = (v7 >> 7) + 1;
    if (v23 >> 57) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v19 - v4;
    if (v24 >> 6 > v23) {
      unint64_t v23 = v24 >> 6;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v25 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    float v31 = (char *)this + 120;
    if (v25) {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)v18, v25);
    }
    else {
      uint64_t v26 = 0;
    }
    float v27 = v26;
    float v28 = &v26[128 * v22];
    double v30 = &v26[128 * v25];
    std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>((uint64_t)v28, (uint64_t)a2);
    float v29 = v28 + 128;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(v5, &v27);
    unint64_t v21 = *((void *)this + 14);
    uint64_t result = std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v27);
  }
  else
  {
    uint64_t result = (uint64_t)std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v6, (uint64_t)a2);
    unint64_t v21 = v6 + 128;
    *((void *)this + 14) = v6 + 128;
  }
  *((void *)this + 14) = v21;
  return result;
}

void sub_1DD79AA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 112) = v11;
  _Unwind_Resume(exception_object);
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::isFlat(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  uint64_t v2 = *((void *)this + 13);
  uint64_t v1 = *((void *)this + 14);
  if (v2 == v1) {
    return 1;
  }
  uint64_t v3 = v2 + 128;
  do
  {
    uint64_t v4 = *(void *)(v3 - 24);
    uint64_t v5 = *(void *)(v3 - 16);
    BOOL result = v4 == v5;
    BOOL v7 = v4 != v5 || v3 == v1;
    v3 += 128;
  }
  while (!v7);
  return result;
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::isOrdered(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  uint64_t v1 = *((void *)this + 13);
  uint64_t v2 = *((void *)this + 14);
  if (v1 == v2) {
    return 1;
  }
  while (1)
  {
    uint64_t v3 = v1 + 128;
    if (v1 + 128 == v2) {
      break;
    }
    int v4 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v1 + 128, v1);
    uint64_t v1 = v3;
    if (v4) {
      return v3 == v2;
    }
  }
  uint64_t v3 = v2;
  return v3 == v2;
}

float CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getCharacterSize(uint64_t a1, double **a2)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 1.0;
  }
  uint64_t v90 = 0;
  uint64_t v4 = (char *)v3 - (char *)v2;
  if (v4 < 0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __p = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v90, v4 >> 7);
  uint64_t v89 = __p;
  uint64_t v90 = &__p[v6];
  BOOL v7 = *a2;
  float v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      double v9 = v7[6];
      double v10 = v7[7];
      double v11 = v7[4];
      double v12 = v7[5];
      float v13 = v9 - v11;
      float v14 = v10 - v12;
      float v15 = sqrtf((float)(v14 * v14) + (float)(v13 * v13));
      double v16 = v7[10];
      double v17 = v7[11];
      double v18 = v7[8];
      double v19 = v7[9];
      float v20 = v16 - v18;
      float v21 = v17 - v19;
      float v22 = (float)(v15 + sqrtf((float)(v21 * v21) + (float)(v20 * v20))) * 0.5;
      *(float *)&double v11 = v11 - v18;
      *(float *)&double v12 = v12 - v19;
      *(float *)&double v9 = v9 - v16;
      *(float *)&double v10 = v10 - v17;
      float v23 = (float)(sqrtf((float)(*(float *)&v10 * *(float *)&v10) + (float)(*(float *)&v9 * *(float *)&v9))
                  + sqrtf((float)(*(float *)&v12 * *(float *)&v12) + (float)(*(float *)&v11 * *(float *)&v11)))
          * 0.5;
      if (v23 >= v22) {
        float v24 = v22;
      }
      else {
        float v24 = v23;
      }
      if (v24 <= 0.0)
      {
        float v27 = CROSLogForCategory(0);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v28 = *((void *)v7 + 4);
          uint64_t v29 = *((void *)v7 + 5);
          uint64_t v30 = *((void *)v7 + 6);
          uint64_t v31 = *((void *)v7 + 7);
          uint64_t v32 = *((void *)v7 + 10);
          uint64_t v33 = *((void *)v7 + 11);
          uint64_t v34 = *((void *)v7 + 8);
          uint64_t v35 = *((void *)v7 + 9);
          *(_DWORD *)buf = 134219776;
          uint64_t v92 = v28;
          __int16 v93 = 2048;
          uint64_t v94 = v29;
          __int16 v95 = 2048;
          uint64_t v96 = v30;
          __int16 v97 = 2048;
          uint64_t v98 = v31;
          __int16 v99 = 2048;
          uint64_t v100 = v32;
          __int16 v101 = 2048;
          uint64_t v102 = v33;
          __int16 v103 = 2048;
          uint64_t v104 = v34;
          __int16 v105 = 2048;
          uint64_t v106 = v35;
          _os_log_impl(&dword_1DD733000, v27, OS_LOG_TYPE_DEBUG, "Got collapsed region: [tl=(%f, %f), tr=(%f, %f), br=(%f, %f), bl=(%f, %f)]", buf, 0x52u);
        }
      }
      else
      {
        unint64_t v25 = v89;
        if (v89 >= v90)
        {
          long long v36 = __p;
          uint64_t v37 = v89 - __p;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = (char *)v90 - (char *)__p;
          if (((char *)v90 - (char *)__p) >> 1 > v38) {
            unint64_t v38 = v39 >> 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            long long v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v90, v40);
            long long v36 = __p;
            unint64_t v25 = v89;
          }
          else
          {
            long long v41 = 0;
          }
          BOOL v42 = (float *)&v41[4 * v37];
          *BOOL v42 = v24;
          uint64_t v26 = v42 + 1;
          while (v25 != v36)
          {
            int v43 = *((_DWORD *)v25-- - 1);
            *((_DWORD *)v42-- - 1) = v43;
          }
          __p = v42;
          uint64_t v90 = (float *)&v41[4 * v40];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          *uint64_t v89 = v24;
          uint64_t v26 = v89 + 1;
        }
        uint64_t v89 = v26;
      }
      v7 += 16;
    }
    while (v7 != v8);
  }
  long long v44 = __p;
  unint64_t v45 = v89;
  if (__p == v89)
  {
    float v76 = 1.0;
    if (!__p) {
      return v76;
    }
  }
  else
  {
    unint64_t v46 = (unint64_t)(v89 - __p) >> 1;
    uint64_t v47 = &__p[v46];
    if (v47 != v89)
    {
      do
      {
        unint64_t v48 = v45 - v44;
        if (v48 < 2) {
          break;
        }
        if (v48 == 3)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v44, v44 + 1, v45 - 1);
          break;
        }
        if (v48 == 2)
        {
          float v77 = *(v45 - 1);
          float v78 = *v44;
          if (v77 < *v44)
          {
            float *v44 = v77;
            *(v45 - 1) = v78;
          }
          break;
        }
        if ((char *)v45 - (char *)v44 <= 31)
        {
          while (v44 != v45 - 1)
          {
            uint64_t v79 = v44++;
            if (v79 != v45 && v44 != v45)
            {
              float v80 = *v79;
              float v81 = *v79;
              uint64_t v82 = v44;
              unint64_t v83 = v79;
              uint64_t v84 = v44;
              do
              {
                float v85 = *v84++;
                float v86 = v85;
                if (v85 < v81)
                {
                  float v81 = v86;
                  unint64_t v83 = v82;
                }
                uint64_t v82 = v84;
              }
              while (v84 != v45);
              if (v83 != v79)
              {
                float *v79 = *v83;
                *unint64_t v83 = v80;
              }
            }
          }
          break;
        }
        BOOL v49 = &v44[v48 >> 1];
        float v50 = v45 - 1;
        int v51 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v44, v49, v45 - 1);
        float v52 = *v44;
        if (*v44 >= *v49)
        {
          float v53 = v45 - 1;
          while (--v53 != v44)
          {
            if (*v53 < *v49)
            {
              float *v44 = *v53;
              *float v53 = v52;
              ++v51;
              goto LABEL_41;
            }
          }
          uint64_t v65 = v44 + 1;
          if (v52 >= *v50)
          {
            while (v65 != v50)
            {
              float v66 = *v65;
              if (v52 < *v65)
              {
                *v65++ = *v50;
                float *v50 = v66;
                goto LABEL_73;
              }
              ++v65;
            }
            break;
          }
LABEL_73:
          if (v65 == v50) {
            break;
          }
          while (1)
          {
            float v70 = *v44;
            do
            {
              float v71 = *v65++;
              float v72 = v71;
            }
            while (v70 >= v71);
            int64_t v73 = v65 - 1;
            do
            {
              float v74 = *--v50;
              float v75 = v74;
            }
            while (v70 < v74);
            if (v73 >= v50) {
              break;
            }
            *int64_t v73 = v75;
            float *v50 = v72;
          }
          long long v44 = v65 - 1;
          if (v73 > v47) {
            break;
          }
        }
        else
        {
          float v53 = v45 - 1;
LABEL_41:
          float v54 = v44 + 1;
          if (v44 + 1 >= v53)
          {
            long long v59 = v44 + 1;
          }
          else
          {
            float v55 = v44 + 1;
            while (1)
            {
              float v56 = *v49;
              do
              {
                float v57 = *v55++;
                float v58 = v57;
              }
              while (v57 < v56);
              long long v59 = v55 - 1;
              do
              {
                float v60 = *--v53;
                float v61 = v60;
              }
              while (v60 >= v56);
              if (v59 >= v53) {
                break;
              }
              *long long v59 = v61;
              *float v53 = v58;
              ++v51;
              if (v59 == v49) {
                BOOL v49 = v53;
              }
            }
          }
          if (v59 != v49)
          {
            float v62 = *v59;
            if (*v49 < *v59)
            {
              *long long v59 = *v49;
              float *v49 = v62;
              ++v51;
            }
          }
          if (v59 == v47) {
            break;
          }
          if (!v51)
          {
            if (v59 <= v47)
            {
              unint64_t v67 = v59 + 1;
              while (v67 != v45)
              {
                float v69 = *(v67 - 1);
                float v68 = *v67++;
                if (v68 < v69) {
                  goto LABEL_57;
                }
              }
            }
            else
            {
              while (v54 != v59)
              {
                float v64 = *(v54 - 1);
                float v63 = *v54++;
                if (v63 < v64) {
                  goto LABEL_57;
                }
              }
            }
            break;
          }
LABEL_57:
          if (v59 <= v47) {
            long long v44 = v59 + 1;
          }
          else {
            unint64_t v45 = v59;
          }
        }
      }
      while (v45 != v47);
      long long v44 = __p;
    }
    float v76 = v44[v46];
  }
  operator delete(v44);
  return v76;
}

void sub_1DD79B09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getRegionQuality(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2)
{
  float v4 = powf(*((float *)a2 + 5) - *((float *)a2 + 4), *((float *)this + 10));
  return v4 * powf(*((float *)a2 + 7) - *((float *)a2 + 6), *((float *)this + 11));
}

float CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getInitialNodeWithObstacles@<S0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  float v8 = *(float *)(*a2 + 24);
  float v7 = *(float *)(*a2 + 28);
  float v9 = *(float *)(*a2 + 16);
  float v10 = *(float *)(*a2 + 20);
  *(void *)(a3 + 8) = 0;
  *(float *)(a3 + 16) = v9;
  *(float *)(a3 + 20) = v10;
  *(float *)(a3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
  *(float *)(a3 + 28) = v7;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 104) = 0;
  *(double *)(a3 + 32) = v8;
  *(double *)(a3 + 40) = v9;
  *(double *)(a3 + 48) = v7;
  *(double *)(a3 + 56) = v9;
  *(double *)(a3 + 64) = v8;
  *(double *)(a3 + 72) = v10;
  *(double *)(a3 + 80) = v7;
  *(double *)(a3 + 88) = v10;
  *(_DWORD *)(a3 + 96) = 0;
  *(void *)(a3 + 128) = 0;
  double v11 = (void *)(a3 + 128);
  *(_DWORD *)(a3 + 152) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(_DWORD *)a3 = *(_DWORD *)v5;
  if (v5 != v6)
  {
    double v12 = 0;
    float v13 = 0;
    do
    {
      float v14 = *(float *)(v5 + 24);
      float v15 = *(float *)(a3 + 28);
      if (v14 >= *(float *)(a3 + 24)) {
        float v14 = *(float *)(a3 + 24);
      }
      *(float *)(a3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
      float v16 = *(float *)(v5 + 28);
      if (v15 >= v16) {
        float v16 = v15;
      }
      *(float *)(a3 + 28) = v16;
      float v17 = *(float *)(v5 + 16);
      float v18 = *(float *)(a3 + 20);
      if (v17 >= *(float *)(a3 + 16)) {
        float v17 = *(float *)(a3 + 16);
      }
      *(float *)(a3 + 16) = v17;
      float v19 = *(float *)(v5 + 20);
      if (v18 >= v19) {
        float v19 = v18;
      }
      *(float *)(a3 + 20) = v19;
      unint64_t v20 = *(void *)(a3 + 144);
      if ((unint64_t)v13 >= v20)
      {
        uint64_t v22 = (v13 - v12) >> 4;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v20 - (void)v12;
        if (v24 >> 3 > v23) {
          unint64_t v23 = v24 >> 3;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v25);
        uint64_t v28 = &v26[16 * v22];
        *(void *)uint64_t v28 = v5;
        v28[8] = 0;
        uint64_t v29 = (unsigned char *)*v11;
        double v12 = v28;
        if (v13 != (unsigned char *)*v11)
        {
          do
          {
            uint64_t v30 = *((void *)v13 - 2);
            v13 -= 16;
            char v31 = v13[8];
            *((void *)v12 - 2) = v30;
            v12 -= 16;
            v12[8] = v31;
          }
          while (v13 != v29);
          float v13 = v29;
        }
        float v21 = v28 + 16;
        *(void *)(a3 + 128) = v12;
        *(void *)(a3 + 136) = v28 + 16;
        *(void *)(a3 + 144) = &v26[16 * v27];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)float v13 = v5;
        v13[8] = 0;
        float v21 = v13 + 16;
      }
      *(void *)(a3 + 136) = v21;
      v5 += 128;
      float v13 = v21;
    }
    while (v5 != v6);
    float v9 = *(float *)(a3 + 16);
    float v10 = *(float *)(a3 + 20);
    float v8 = *(float *)(a3 + 24);
    float v7 = *(float *)(a3 + 28);
  }
  float v32 = powf(v10 - v9, *(float *)(a1 + 40));
  float result = v32 * powf(v7 - v8, *(float *)(a1 + 44));
  *(float *)(a3 + 152) = result;
  return result;
}

void sub_1DD79B314(_Unwind_Exception *a1)
{
  CRTextRecognition::CRCTLD::CTLDNode::~CTLDNode(v1);
  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CTLDNode::~CTLDNode(CRTextRecognition::CRCTLD::CTLDNode *this)
{
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 104);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::findWhitespaceRegions(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v6 = a1;
  uint64_t v115 = 0;
  int64x2_t v114 = 0uLL;
  unint64_t v8 = *(int *)(a1 + 4);
  int v116 = *(_DWORD *)(a1 + 8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::reserve(a3, v8);
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getInitialNodeWithObstacles(v6, a2, (uint64_t)v109);
  uint64_t v92 = a3;
  CRTextRecognition::CRCTLD::CTLDPriorityQueue::push(&v114, (CRTextRecognition::CRCTLD::CTLDNode *)v109);
  float v9 = v107;
  uint64_t v91 = (uint64_t)(a3 + 2);
  uint64_t v93 = v6;
  do
  {
    uint64_t v10 = v114.i64[0];
    if (v114.i64[1] == v114.i64[0]) {
      break;
    }
    int v98 = *(_DWORD *)v114.i64[0];
    id v99 = *(id *)(v114.i64[0] + 8);
    long long v11 = *(_OWORD *)(v10 + 32);
    long long v100 = *(_OWORD *)(v10 + 16);
    long long v101 = v11;
    long long v12 = *(_OWORD *)(v10 + 48);
    long long v13 = *(_OWORD *)(v10 + 64);
    long long v14 = *(_OWORD *)(v10 + 80);
    int v105 = *(_DWORD *)(v10 + 96);
    long long v103 = v13;
    long long v104 = v14;
    long long v102 = v12;
    memset(v106, 0, sizeof(v106));
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v106, *(void *)(v10 + 104), *(void *)(v10 + 112), (uint64_t)(*(void *)(v10 + 112) - *(void *)(v10 + 104)) >> 7);
    *float v9 = 0;
    v9[1] = 0;
    _OWORD v9[2] = 0;
    std::vector<CRTextRecognition::CRCTLD::CTLDObstacle>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDObstacle*,CRTextRecognition::CRCTLD::CTLDObstacle*>(v9, *(const void **)(v10 + 128), *(void *)(v10 + 136), (uint64_t)(*(void *)(v10 + 136) - *(void *)(v10 + 128)) >> 4);
    int v108 = *(_DWORD *)(v10 + 152);
    uint64_t v15 = v114.i64[1];
    uint64_t v16 = v114.i64[0];
    if (v114.i64[1] - v114.i64[0] >= 161)
    {
      uint64_t v94 = v114.i64[1];
      uint64_t v17 = 0;
      LODWORD(v117) = *(_DWORD *)v114.i64[0];
      int64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((v114.i64[1] - v114.i64[0]) >> 5);
      float v19 = *(void **)(v114.i64[0] + 8);
      *(void *)(v114.i64[0] + 8) = 0;
      long long v20 = *(_OWORD *)(v16 + 32);
      long long v119 = *(_OWORD *)(v16 + 16);
      long long v120 = v20;
      long long v22 = *(_OWORD *)(v16 + 64);
      long long v21 = *(_OWORD *)(v16 + 80);
      long long v23 = *(_OWORD *)(v16 + 48);
      int v124 = *(_DWORD *)(v16 + 96);
      long long v122 = v22;
      long long v123 = v21;
      long long v121 = v23;
      long long v125 = *(_OWORD *)(v16 + 104);
      uint64_t v24 = *(void *)(v16 + 120);
      id v118 = v19;
      uint64_t v126 = v24;
      *(void *)(v16 + 104) = 0;
      *(void *)(v16 + 112) = 0;
      *(void *)(v16 + 120) = 0;
      *(_OWORD *)__p = *(_OWORD *)(v16 + 128);
      uint64_t v128 = *(void *)(v16 + 144);
      *(void *)(v16 + 128) = 0;
      *(void *)(v16 + 136) = 0;
      *(void *)(v16 + 144) = 0;
      uint64_t v25 = v16;
      float v129 = *(float *)(v16 + 152);
      do
      {
        uint64_t v26 = v25;
        uint64_t v27 = v17 + 1;
        v25 += 160 * (v17 + 1);
        uint64_t v28 = 2 * v17;
        uint64_t v17 = (2 * v17) | 1;
        int64_t v29 = v28 + 2;
        if (v29 < v18 && *(float *)(v26 + 160 * v27 + 152) < *(float *)(v25 + 312))
        {
          v25 += 160;
          uint64_t v17 = v29;
        }
        *(_DWORD *)uint64_t v26 = *(_DWORD *)v25;
        uint64_t v30 = *(void *)(v25 + 8);
        *(void *)(v25 + 8) = 0;
        char v31 = *(void **)(v26 + 8);
        *(void *)(v26 + 8) = v30;

        long long v32 = *(_OWORD *)(v25 + 32);
        *(_OWORD *)(v26 + 16) = *(_OWORD *)(v25 + 16);
        *(_OWORD *)(v26 + 32) = v32;
        long long v33 = *(_OWORD *)(v25 + 48);
        long long v34 = *(_OWORD *)(v25 + 64);
        long long v35 = *(_OWORD *)(v25 + 80);
        *(_DWORD *)(v26 + 96) = *(_DWORD *)(v25 + 96);
        *(_OWORD *)(v26 + 64) = v34;
        *(_OWORD *)(v26 + 80) = v35;
        *(_OWORD *)(v26 + 48) = v33;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v26 + 104));
        *(_OWORD *)(v26 + 104) = *(_OWORD *)(v25 + 104);
        *(void *)(v26 + 120) = *(void *)(v25 + 120);
        *(void *)(v25 + 104) = 0;
        *(void *)(v25 + 112) = 0;
        *(void *)(v25 + 120) = 0;
        std::vector<int>::__move_assign(v26 + 128, (__n128 *)(v25 + 128));
        *(_DWORD *)(v26 + 152) = *(_DWORD *)(v25 + 152);
      }
      while (v17 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
      long long v36 = (_OWORD *)(v25 + 16);
      if (v94 - 160 == v25)
      {
        *(_DWORD *)uint64_t v25 = v117;
        id v51 = v118;
        id v118 = 0;
        float v52 = *(void **)(v25 + 8);
        *(void *)(v25 + 8) = v51;

        long long v53 = v120;
        *long long v36 = v119;
        *(_OWORD *)(v25 + 32) = v53;
        long long v54 = v121;
        long long v55 = v122;
        long long v56 = v123;
        *(_DWORD *)(v25 + 96) = v124;
        *(_OWORD *)(v25 + 64) = v55;
        *(_OWORD *)(v25 + 80) = v56;
        *(_OWORD *)(v25 + 48) = v54;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v25 + 104));
        *(_OWORD *)(v25 + 104) = v125;
        *(void *)(v25 + 120) = v126;
        long long v125 = 0uLL;
        uint64_t v126 = 0;
        float v57 = *(void **)(v25 + 128);
        uint64_t v6 = v93;
        if (v57)
        {
          *(void *)(v25 + 136) = v57;
          operator delete(v57);
          *(void *)(v25 + 128) = 0;
          *(void *)(v25 + 136) = 0;
          *(void *)(v25 + 144) = 0;
        }
        *(_OWORD *)(v25 + 128) = *(_OWORD *)__p;
        *(void *)(v25 + 144) = v128;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v128 = 0;
        *(float *)(v25 + 152) = v129;
      }
      else
      {
        *(_DWORD *)uint64_t v25 = *(_DWORD *)(v94 - 160);
        uint64_t v37 = *(void *)(v94 - 152);
        *(void *)(v94 - 152) = 0;
        unint64_t v38 = *(void **)(v25 + 8);
        *(void *)(v25 + 8) = v37;

        long long v39 = *(_OWORD *)(v94 - 128);
        *long long v36 = *(_OWORD *)(v94 - 144);
        *(_OWORD *)(v25 + 32) = v39;
        long long v40 = *(_OWORD *)(v94 - 112);
        long long v41 = *(_OWORD *)(v94 - 96);
        long long v42 = *(_OWORD *)(v94 - 80);
        *(_DWORD *)(v25 + 96) = *(_DWORD *)(v94 - 64);
        *(_OWORD *)(v25 + 64) = v41;
        *(_OWORD *)(v25 + 80) = v42;
        *(_OWORD *)(v25 + 48) = v40;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v25 + 104));
        int v43 = (void *)(v94 - 56);
        *(_OWORD *)(v25 + 104) = *(_OWORD *)(v94 - 56);
        *(void *)(v25 + 120) = *(void *)(v94 - 40);
        *int v43 = 0;
        v43[1] = 0;
        v43[2] = 0;
        std::vector<int>::__move_assign(v25 + 128, (__n128 *)(v94 - 32));
        *(_DWORD *)(v25 + 152) = *(_DWORD *)(v94 - 8);
        *(_DWORD *)(v94 - 160) = v117;
        id v44 = v118;
        id v118 = 0;
        unint64_t v45 = *(void **)(v94 - 152);
        *(void *)(v94 - 152) = v44;

        long long v46 = v120;
        *(_OWORD *)(v94 - 144) = v119;
        *(_OWORD *)(v94 - 128) = v46;
        long long v47 = v121;
        long long v48 = v122;
        long long v49 = v123;
        *(_DWORD *)(v94 - 64) = v124;
        *(_OWORD *)(v94 - 96) = v48;
        *(_OWORD *)(v94 - 80) = v49;
        *(_OWORD *)(v94 - 112) = v47;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v94 - 56));
        *(_OWORD *)int v43 = v125;
        *(void *)(v94 - 40) = v126;
        long long v125 = 0uLL;
        uint64_t v126 = 0;
        float v50 = *(void **)(v94 - 32);
        uint64_t v6 = v93;
        if (v50)
        {
          *(void *)(v94 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v50;
          operator delete(v50);
        }
        *(_OWORD *)(v94 - 32) = *(_OWORD *)__p;
        *(void *)(v94 - 16) = v128;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v128 = 0;
        *(float *)(v94 - 8) = v129;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDNode *>>(v16, v25 + 160, 0xCCCCCCCCCCCCCCCDLL * ((v25 + 160 - v16) >> 5));
      }
      float v9 = v107;
      v97[0] = (void **)&v125;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v97);

      uint64_t v15 = v114.i64[1];
    }
    uint64_t v58 = v15 - 160;
    std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::destroy[abi:ne180100](v15 - 160);
    v114.i64[1] = v58;
    uint64_t isWhitespaceCandidate = CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::isWhitespaceCandidate((float *)v6, (CRTextRecognition::CRCTLD::CTLDRegion *)&v98);
    if (isWhitespaceCandidate)
    {
      if ((float)(*((float *)&v100 + 1) - *(float *)&v100) >= (float)(*(float *)(v6 + 16) * a4)
        && (float)(*((float *)&v100 + 3) - *((float *)&v100 + 2)) >= (float)(*(float *)(v6 + 12) * a4))
      {
        unint64_t v60 = v92[1];
        if (v60 >= v92[2])
        {
          uint64_t v61 = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>(v92, (uint64_t)&v98);
          float v62 = v92;
        }
        else
        {
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>(v91, v92[1], (uint64_t)&v98);
          uint64_t v61 = v60 + 128;
          float v62 = v92;
          v92[1] = v61;
        }
        v62[1] = v61;
        if (*(int *)(v6 + 4) <= (unint64_t)((v61 - *v62) >> 7))
        {
          char v71 = 1;
          goto LABEL_31;
        }
        uint64_t v73 = v114.i64[1];
        uint64_t v72 = v114.i64[0];
        if (v114.i64[0] != v114.i64[1])
        {
          float v74 = v9;
          uint64_t v75 = v61 - 128;
          do
          {
            if (*(float *)(v61 - 104) < *(float *)(v72 + 28)
              && *(float *)(v61 - 100) > *(float *)(v72 + 24)
              && *(float *)(v61 - 112) < *(float *)(v72 + 20)
              && *(float *)(v61 - 108) > *(float *)(v72 + 16))
            {
              unint64_t v77 = *(void *)(v72 + 136);
              unint64_t v76 = *(void *)(v72 + 144);
              if (v77 >= v76)
              {
                uint64_t v79 = *(void *)(v72 + 128);
                uint64_t v80 = (uint64_t)(v77 - v79) >> 4;
                unint64_t v81 = v80 + 1;
                if ((unint64_t)(v80 + 1) >> 60) {
                  std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v82 = v76 - v79;
                if (v82 >> 3 > v81) {
                  unint64_t v81 = v82 >> 3;
                }
                if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v83 = v81;
                }
                if (v83) {
                  unint64_t v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v83);
                }
                else {
                  uint64_t v84 = 0;
                }
                unint64_t v85 = v83 + 16 * v80;
                *(void *)unint64_t v85 = v75;
                *(unsigned char *)(v85 + 8) = 1;
                unint64_t v87 = *(unsigned char **)(v72 + 128);
                float v86 = *(unsigned char **)(v72 + 136);
                unint64_t v88 = v85;
                if (v86 != v87)
                {
                  do
                  {
                    uint64_t v89 = *((void *)v86 - 2);
                    v86 -= 16;
                    char v90 = v86[8];
                    *(void *)(v88 - 16) = v89;
                    v88 -= 16;
                    *(unsigned char *)(v88 + 8) = v90;
                  }
                  while (v86 != v87);
                  float v86 = *(unsigned char **)(v72 + 128);
                }
                unint64_t v78 = v85 + 16;
                *(void *)(v72 + 128) = v88;
                *(void *)(v72 + 136) = v85 + 16;
                *(void *)(v72 + 144) = v83 + 16 * v84;
                if (v86) {
                  operator delete(v86);
                }
              }
              else
              {
                *(void *)unint64_t v77 = v75;
                *(unsigned char *)(v77 + 8) = 1;
                unint64_t v78 = v77 + 16;
              }
              *(void *)(v72 + 136) = v78;
            }
            v72 += 160;
          }
          while (v72 != v73);
          char v71 = 0;
          float v9 = v74;
          goto LABEL_31;
        }
      }
    }
    else
    {
      float v63 = (const CRTextRecognition::CRCTLD::CTLDRegion *)CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::pickPivot(isWhitespaceCandidate, (uint64_t)&v98);
      CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getSubregions((const CRTextRecognition::CRCTLD::CTLDRegion *)&v98, v63, (uint64_t *)v97);
      uint64_t v65 = v97[0];
      float v64 = v97[1];
      while (v65 != v64)
      {
        float v66 = *((float *)v65 + 6);
        float v67 = *((float *)v65 + 7);
        float v68 = *((float *)v65 + 4);
        float v69 = *((float *)v65 + 5);
        LODWORD(v117) = -1;
        id v118 = 0;
        *(void *)&long long v119 = __PAIR64__(LODWORD(v69), LODWORD(v68));
        *((void *)&v119 + 1) = __PAIR64__(LODWORD(v67), LODWORD(v66));
        uint64_t v126 = 0;
        long long v125 = 0uLL;
        *(double *)&long long v120 = v66;
        *((double *)&v120 + 1) = v68;
        *(double *)&long long v121 = v67;
        *((double *)&v121 + 1) = v68;
        *(double *)&long long v122 = v66;
        *((double *)&v122 + 1) = v69;
        *(double *)&long long v123 = v67;
        *((double *)&v123 + 1) = v69;
        int v124 = 0;
        __p[0] = 0;
        __p[1] = 0;
        float v129 = 0.0;
        uint64_t v128 = 0;
        LODWORD(v117) = *(_DWORD *)v65;
        float v70 = powf(*((float *)v65 + 5) - *((float *)v65 + 4), *(float *)(v6 + 40));
        float v129 = v70 * powf(*((float *)v65 + 7) - *((float *)v65 + 6), *(float *)(v6 + 44));
        CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getIntersectingObstacles((float *)v65, (float ***)v9, &v95);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_OWORD *)__p = v95;
        uint64_t v128 = v96;
        CRTextRecognition::CRCTLD::CTLDPriorityQueue::push(&v114, (CRTextRecognition::CRCTLD::CTLDNode *)&v117);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(void *)&long long v95 = &v125;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);

        v65 += 16;
      }
      uint64_t v117 = (int64x2_t *)v97;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    }
    char v71 = 0;
LABEL_31:
    if (v107[0])
    {
      v107[1] = v107[0];
      operator delete(v107[0]);
    }
    uint64_t v117 = (int64x2_t *)v106;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  }
  while ((v71 & 1) == 0);
  if (v112)
  {
    uint64_t v113 = v112;
    operator delete(v112);
  }
  uint64_t v117 = (int64x2_t *)&v111;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);

  uint64_t v117 = &v114;
  std::vector<CRTextRecognition::CRCTLD::CTLDNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
}

void sub_1DD79BBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  CRTextRecognition::CRCTLD::CTLDNode::~CTLDNode((CRTextRecognition::CRCTLD::CTLDNode *)&a23);
  CRTextRecognition::CRCTLD::CTLDNode::~CTLDNode((CRTextRecognition::CRCTLD::CTLDNode *)&a43);
  a67 = a10;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&a67);
  a67 = (void **)&a63;
  std::vector<CRTextRecognition::CRCTLD::CTLDNode>::__destroy_vector::operator()[abi:ne180100](&a67);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 7)
  {
    if (a2 >> 57) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>(result, a2);
    v7[1] = v7[0] + v5;
    BOOL v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 7);
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1DD79BD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CTLDPriorityQueue::push(int64x2_t *this, CRTextRecognition::CRCTLD::CTLDNode *a2)
{
  uint64_t v4 = this[1].u32[2];
  unint64_t v5 = this->u64[1];
  if ((int)v4 >= 1 && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - this->i64[0]) >> 5) == v4)
  {
    v5 -= 160;
    std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::destroy[abi:ne180100](v5);
    this->i64[1] = v5;
  }
  unint64_t v6 = this[1].u64[0];
  if (v5 >= v6)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - this->i64[0]) >> 5);
    if (v8 + 1 > 0x199999999999999) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - this->i64[0]) >> 5);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v11 = 0x199999999999999;
    }
    else {
      unint64_t v11 = v10;
    }
    int64_t v29 = this + 1;
    if (v11)
    {
      if (v11 > 0x199999999999999) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v12 = (char *)operator new(160 * v11);
    }
    else
    {
      long long v12 = 0;
    }
    uint64_t v26 = v12;
    v27.i64[0] = (uint64_t)&v12[160 * v8];
    uint64_t v28 = &v12[160 * v11];
    std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDNode,CRTextRecognition::CRCTLD::CTLDNode&>(v27.i64[0], (uint64_t)a2);
    uint64_t v13 = v27.i64[0];
    uint64_t v7 = v27.i64[0] + 160;
    v27.i64[1] = v27.i64[0] + 160;
    uint64_t v15 = this->i64[0];
    unint64_t v14 = this->u64[1];
    if (v14 == this->i64[0])
    {
      int64x2_t v24 = vdupq_n_s64(v14);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = v14 + v16;
        uint64_t v18 = v13 + v16;
        *(_DWORD *)(v18 - 160) = *(_DWORD *)(v14 + v16 - 160);
        uint64_t v19 = *(void *)(v14 + v16 - 152);
        *(void *)(v17 - 152) = 0;
        *(void *)(v18 - 152) = v19;
        long long v20 = *(_OWORD *)(v14 + v16 - 128);
        *(_OWORD *)(v18 - 144) = *(_OWORD *)(v14 + v16 - 144);
        *(_OWORD *)(v18 - 128) = v20;
        long long v21 = *(_OWORD *)(v14 + v16 - 112);
        long long v22 = *(_OWORD *)(v14 + v16 - 96);
        long long v23 = *(_OWORD *)(v14 + v16 - 80);
        *(_DWORD *)(v18 - 64) = *(_DWORD *)(v14 + v16 - 64);
        *(_OWORD *)(v18 - 96) = v22;
        *(_OWORD *)(v18 - 80) = v23;
        *(void *)(v18 - 48) = 0;
        *(void *)(v18 - 40) = 0;
        *(_OWORD *)(v18 - 112) = v21;
        *(void *)(v18 - 56) = 0;
        *(_OWORD *)(v18 - 56) = *(_OWORD *)(v14 + v16 - 56);
        *(void *)(v18 - 40) = *(void *)(v14 + v16 - 40);
        *(void *)(v17 - 56) = 0;
        *(void *)(v17 - 48) = 0;
        *(void *)(v17 - 40) = 0;
        *(void *)(v18 - 32) = 0;
        *(void *)(v18 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        *(void *)(v18 - 16) = 0;
        *(_OWORD *)(v18 - 32) = *(_OWORD *)(v14 + v16 - 32);
        *(void *)(v18 - 16) = *(void *)(v14 + v16 - 16);
        *(void *)(v17 - 32) = 0;
        *(void *)(v17 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        *(void *)(v17 - 16) = 0;
        *(_DWORD *)(v18 - 8) = *(_DWORD *)(v14 + v16 - 8);
        v16 -= 160;
      }
      while (v14 + v16 != v15);
      int64x2_t v24 = *this;
      uint64_t v7 = v27.i64[1];
      v13 += v16;
    }
    this->i64[0] = v13;
    this->i64[1] = v7;
    int64x2_t v27 = v24;
    uint64_t v25 = (char *)this[1].i64[0];
    this[1].i64[0] = (uint64_t)v28;
    uint64_t v28 = v25;
    uint64_t v26 = (char *)v24.i64[0];
    std::__split_buffer<CRTextRecognition::CRCTLD::CTLDNode>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDNode,CRTextRecognition::CRCTLD::CTLDNode&>(v5, (uint64_t)a2);
    uint64_t v7 = v5 + 160;
    this->i64[1] = v5 + 160;
  }
  this->i64[1] = v7;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDNode *>>(this->i64[0], v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - this->i64[0]) >> 5));
}

void sub_1DD79BF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDNode>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::isWhitespaceCandidate(float *a1, CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  uint64_t v3 = *((void *)this + 16);
  uint64_t v2 = *((void *)this + 17);
  if (v2 == v3) {
    return 1;
  }
  float v6 = (float)(*((float *)this + 7) - *((float *)this + 6)) * (float)(*((float *)this + 5) - *((float *)this + 4));
  float v7 = 0.0;
  while (1)
  {
    unint64_t v8 = *(float **)v3;
    float IntersectionArea = CRTextRecognition::CRCTLD::CTLDRegion::getIntersectionArea(this, *(const CRTextRecognition::CRCTLD::CTLDRegion **)v3);
    if (*(unsigned char *)(v3 + 8)) {
      break;
    }
    if (IntersectionArea > 0.0) {
      return 0;
    }
    float v12 = *a1;
LABEL_11:
    float v7 = v7 + IntersectionArea;
    if (v7 > (float)(v6 * v12)) {
      return 0;
    }
    v3 += 16;
    if (v3 == v2) {
      return 1;
    }
  }
  float v10 = v8[5] - v8[4];
  if ((float)((float)(v8[7] - v8[6]) * v10) >= v6) {
    float v11 = v6;
  }
  else {
    float v11 = (float)(v8[7] - v8[6]) * v10;
  }
  float v12 = *a1;
  if (IntersectionArea <= (float)(*a1 * v11)) {
    goto LABEL_11;
  }
  return 0;
}

BOOL CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::filterWhitespaceCandidate(uint64_t a1, float *a2, float a3)
{
  return (float)(a2[5] - a2[4]) < (float)(*(float *)(a1 + 16) * a3)
      || (float)(a2[7] - a2[6]) < (float)(*(float *)(a1 + 12) * a3);
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::pickPivot(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 128);
  uint64_t v3 = *(void *)(a2 + 136);
  uint64_t v4 = v3 - v2;
  if (v3 == v2)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = v4 >> 4;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    float v8 = 3.4028e38;
    unint64_t v9 = *(float ***)(a2 + 128);
    do
    {
      float v10 = *v9;
      v9 += 2;
      float v11 = (float)((float)(v10[6] + v10[7]) * 0.5) - (float)((float)(*(float *)(a2 + 24) + *(float *)(a2 + 28)) * 0.5);
      float v12 = (float)((float)(v10[4] + v10[5]) * 0.5) - (float)((float)(*(float *)(a2 + 16) + *(float *)(a2 + 20)) * 0.5);
      float v13 = (float)(v12 * v12) + (float)(v11 * v11);
      if (v13 < v8)
      {
        uint64_t v6 = v5;
        float v8 = v13;
      }
      ++v5;
    }
    while (v7 != v5);
  }
  return *(void *)(v2 + 16 * v6);
}

unint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getSubregions@<X0>(const CRTextRecognition::CRCTLD::CTLDRegion *a1@<X1>, const CRTextRecognition::CRCTLD::CTLDRegion *a2@<X2>, uint64_t *a3@<X8>)
{
  unint64_t result = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  float v8 = (float *)((char *)a1 + 28);
  if (*((float *)a1 + 7) > *((float *)a2 + 7))
  {
    unint64_t result = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<float const&,float const&,float const&,float const&>(a3, (float *)a2 + 7, v8, (float *)a1 + 4, (float *)a1 + 5);
    a3[1] = result;
  }
  unint64_t v9 = (float *)((char *)a1 + 24);
  float v10 = *((float *)a1 + 6);
  float v11 = *((float *)a2 + 6);
  if (v10 < v11)
  {
    float v12 = (float *)((char *)a1 + 16);
    float v13 = (float *)((char *)a1 + 20);
    if (result >= a3[2])
    {
      unint64_t result = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<float const&,float const&,float const&,float const&>(a3, (float *)a1 + 6, (float *)a2 + 6, v12, v13);
    }
    else
    {
      float v14 = *v12;
      float v15 = *v13;
      *(_DWORD *)unint64_t result = -1;
      *(void *)(result + 8) = 0;
      *(float *)(result + 16) = v14;
      *(float *)(result + 20) = v15;
      *(float *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
      *(float *)(result + 28) = v11;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = 0;
      *(void *)(result + 104) = 0;
      double v16 = v10;
      double v17 = v14;
      *(double *)(result + 32) = v16;
      *(double *)(result + 40) = v17;
      double v18 = v11;
      *(double *)(result + 48) = v18;
      *(double *)(result + 56) = v17;
      *(double *)(result + 64) = v16;
      *(double *)(result + 72) = v15;
      *(double *)(result + 80) = v18;
      *(double *)(result + 88) = v15;
      *(_DWORD *)(result + 96) = 0;
      result += 128;
      a3[1] = result;
    }
    a3[1] = result;
  }
  float v19 = *((float *)a1 + 5);
  float v20 = *((float *)a2 + 5);
  if (v19 > v20)
  {
    if (result >= a3[2])
    {
      unint64_t result = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<float const&,float const&,float const&,float const&>(a3, (float *)a1 + 6, v8, (float *)a2 + 5, (float *)a1 + 5);
    }
    else
    {
      float v21 = *v9;
      float v22 = *v8;
      *(_DWORD *)unint64_t result = -1;
      *(void *)(result + 8) = 0;
      *(float *)(result + 16) = v20;
      *(float *)(result + 20) = v19;
      *(float *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v21;
      *(float *)(result + 28) = v22;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = 0;
      *(void *)(result + 104) = 0;
      double v23 = v21;
      double v24 = v20;
      *(double *)(result + 32) = v23;
      *(double *)(result + 40) = v24;
      double v25 = v22;
      *(double *)(result + 48) = v25;
      *(double *)(result + 56) = v24;
      double v26 = v19;
      *(double *)(result + 64) = v23;
      *(double *)(result + 72) = v26;
      *(double *)(result + 80) = v25;
      *(double *)(result + 88) = v26;
      *(_DWORD *)(result + 96) = 0;
      result += 128;
      a3[1] = result;
    }
    a3[1] = result;
  }
  float v28 = *((float *)a1 + 4);
  int64x2_t v27 = (float *)((char *)a1 + 16);
  float v29 = v28;
  float v31 = *((float *)a2 + 4);
  uint64_t v30 = (float *)((char *)a2 + 16);
  float v32 = v31;
  if (v29 < v31)
  {
    if (result >= a3[2])
    {
      unint64_t result = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<float const&,float const&,float const&,float const&>(a3, v9, v8, v27, v30);
    }
    else
    {
      float v33 = *v9;
      float v34 = *v8;
      *(_DWORD *)unint64_t result = -1;
      *(void *)(result + 8) = 0;
      *(float *)(result + 16) = v29;
      *(float *)(result + 20) = v32;
      *(float *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v33;
      *(float *)(result + 28) = v34;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = 0;
      *(void *)(result + 104) = 0;
      double v35 = v33;
      double v36 = v29;
      *(double *)(result + 32) = v35;
      *(double *)(result + 40) = v36;
      double v37 = v34;
      *(double *)(result + 48) = v37;
      *(double *)(result + 56) = v36;
      double v38 = v32;
      *(double *)(result + 64) = v35;
      *(double *)(result + 72) = v38;
      *(double *)(result + 80) = v37;
      *(double *)(result + 88) = v38;
      *(_DWORD *)(result + 96) = 0;
      result += 128;
      a3[1] = result;
    }
    a3[1] = result;
  }
  return result;
}

void sub_1DD79C374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getIntersectingObstacles(float *a1@<X1>, float ***a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unint64_t v7 = 0;
    do
    {
      float v8 = *v3;
      if (a1[6] < (*v3)[7] && a1[7] > v8[6] && a1[4] < v8[5] && a1[5] > v8[4])
      {
        unint64_t v9 = a3[2];
        if ((unint64_t)v7 >= v9)
        {
          float v11 = (unsigned char *)*a3;
          uint64_t v12 = (uint64_t)&v7[-*a3] >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v9 - (void)v11;
          if (v14 >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15) {
            unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v15);
          }
          else {
            uint64_t v16 = 0;
          }
          double v17 = (_OWORD *)(v15 + 16 * v12);
          *double v17 = *(_OWORD *)v3;
          double v18 = v17;
          if (v7 != v11)
          {
            do
            {
              uint64_t v19 = *((void *)v7 - 2);
              v7 -= 16;
              char v20 = v7[8];
              *((void *)v18-- - 2) = v19;
              *((unsigned char *)v18 + 8) = v20;
            }
            while (v7 != v11);
            unint64_t v7 = (unsigned char *)*a3;
          }
          float v10 = v17 + 1;
          *a3 = v18;
          a3[1] = v17 + 1;
          a3[2] = v15 + 16 * v16;
          if (v7) {
            operator delete(v7);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v7 = *(_OWORD *)v3;
          float v10 = v7 + 16;
        }
        a3[1] = v10;
        unint64_t v7 = v10;
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
}

void sub_1DD79C4FC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::findConstrainedBlockRegions(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, float **a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  id v14 = a6;
  float v62 = v14;
  uint64_t v16 = *a3;
  uint64_t v15 = a3[1];
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  float v64 = 0;
  *(void *)&long long v72 = &v64;
  BYTE8(v72) = 0;
  if (v15 == v16)
  {
    double v17 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vallocate[abi:ne180100](&v64, (v15 - v16) >> 7);
    __p[0] = v65;
    v75[0] = (void **)v65;
    v67[0] = &v66;
    v67[1] = v75;
    v67[2] = __p;
    LOBYTE(v67[3]) = 0;
    double v17 = v65;
    do
    {
      std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>((uint64_t)v17, v16);
      v16 += 128;
      double v17 = (char *)__p[0] + 128;
      __p[0] = (char *)__p[0] + 128;
    }
    while (v16 != v15);
    LOBYTE(v67[3]) = 1;
    id v14 = (id)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v67);
    uint64_t v65 = v17;
    uint64_t v18 = (uint64_t)v64;
  }
  unint64_t v60 = a2;
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions((uint64_t)v14, v18, (uint64_t)v17);
  long long v59 = a7;
  CRTextRecognition::CRCTLD::CTLDMFSet::CTLDMFSet((CRTextRecognition::CRCTLD::CTLDMFSet *)__p, (unint64_t)(v65 - v64) >> 7);
  uint64_t v19 = v64;
  char v20 = v65;
  if (v65 != v64)
  {
    uint64_t v21 = 0;
    int v22 = *(_DWORD *)(a1 + 32);
    int v23 = 1;
    uint64_t v24 = 128;
    do
    {
      unint64_t v25 = v21 + 1;
      int v26 = v22 + v21;
      uint64_t v27 = v20 - v19;
      if (v22 + (int)v21 >= (int)((unint64_t)(v20 - v19) >> 7)) {
        int v26 = (unint64_t)(v20 - v19) >> 7;
      }
      if ((uint64_t)v25 < v26)
      {
        uint64_t v28 = v24;
        int v29 = v23;
        do
        {
          int v30 = CRTextRecognition::CRCTLD::CTLDMFSet::find((CRTextRecognition::CRCTLD::CTLDMFSet *)__p, *(unsigned int *)&v19[128 * v21]);
          if (v30 != CRTextRecognition::CRCTLD::CTLDMFSet::find((CRTextRecognition::CRCTLD::CTLDMFSet *)__p, *(unsigned int *)&v64[v28])&& CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkRegionsInBlock(a1, (uint64_t)&v64[128 * v21], (uint64_t)&v64[v28], a4, a5, v62, a8))
          {
            CRTextRecognition::CRCTLD::CTLDMFSet::merge((CRTextRecognition::CRCTLD::CTLDMFSet *)__p, *(unsigned int *)&v64[128 * v21], *(unsigned int *)&v64[v28]);
          }
          int v22 = *(_DWORD *)(a1 + 32);
          int v31 = v22 + v21;
          uint64_t v19 = v64;
          char v20 = v65;
          uint64_t v27 = v65 - v64;
          if (v22 + (int)v21 >= (int)((unint64_t)(v65 - v64) >> 7)) {
            int v31 = (unint64_t)(v65 - v64) >> 7;
          }
          ++v29;
          v28 += 128;
        }
        while (v31 > v29);
      }
      ++v23;
      v24 += 128;
      ++v21;
    }
    while (v25 < v27 >> 7);
  }
  long long v72 = 0u;
  long long v73 = 0u;
  int v74 = 1065353216;
  uint64_t v32 = *v60;
  if (v60[1] == *v60)
  {
    long long v48 = a7;
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
  else
  {
    unint64_t v33 = 0;
    do
    {
      int v34 = CRTextRecognition::CRCTLD::CTLDMFSet::find((CRTextRecognition::CRCTLD::CTLDMFSet *)__p, *(unsigned int *)(v32 + (v33 << 7)));
      int v71 = v34;
      int v35 = v34;
      if (*((void *)&v72 + 1))
      {
        uint8x8_t v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v72 + 8));
        v36.i16[0] = vaddlv_u8(v36);
        if (v36.u32[0] > 1uLL)
        {
          unint64_t v37 = v34;
          if (*((void *)&v72 + 1) <= (unint64_t)v34) {
            unint64_t v37 = (unint64_t)v34 % *((void *)&v72 + 1);
          }
        }
        else
        {
          unint64_t v37 = (*((void *)&v72 + 1) - 1) & v34;
        }
        double v38 = *(uint64_t ***)(v72 + 8 * v37);
        if (v38)
        {
          for (uint64_t i = *v38; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v40 = i[1];
            if (v40 == v34)
            {
              if (*((_DWORD *)i + 4) == v34) {
                goto LABEL_40;
              }
            }
            else
            {
              if (v36.u32[0] > 1uLL)
              {
                if (v40 >= *((void *)&v72 + 1)) {
                  v40 %= *((void *)&v72 + 1);
                }
              }
              else
              {
                v40 &= *((void *)&v72 + 1) - 1;
              }
              if (v40 != v37) {
                break;
              }
            }
          }
        }
      }
      LODWORD(v67[0]) = -1;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      uint64_t v68 = 0;
      memset(&v67[1], 0, 92);
      long long v41 = std::__hash_table<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::__unordered_map_hasher<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&v72, v34, &v71);
      *((_DWORD *)v41 + 6) = v67[0];
      objc_storeStrong((id *)v41 + 4, (id)v67[1]);
      int v42 = v67[12];
      long long v44 = *(_OWORD *)&v67[8];
      long long v43 = *(_OWORD *)&v67[10];
      *(_OWORD *)(v41 + 72) = *(_OWORD *)&v67[6];
      *(_OWORD *)(v41 + 88) = v44;
      *(_OWORD *)(v41 + 104) = v43;
      *((_DWORD *)v41 + 30) = v42;
      long long v45 = *(_OWORD *)&v67[4];
      *(_OWORD *)(v41 + 40) = *(_OWORD *)&v67[2];
      *(_OWORD *)(v41 + 56) = v45;
      if (v41 + 24 != (char *)v67) {
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__assign_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((uint64_t *)v41 + 16, v68, v69, (v69 - v68) >> 7);
      }
      v75[0] = (void **)&v68;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v75);

LABEL_40:
      long long v46 = std::__hash_table<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::__unordered_map_hasher<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&v72, v35, &v71);
      CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)(v46 + 24), (const CRTextRecognition::CRCTLD::CTLDRegion *)(*v60 + (v33++ << 7)));
      uint64_t v32 = *v60;
    }
    while (v33 < (v60[1] - *v60) >> 7);
    long long v47 = (void *)v73;
    long long v48 = v59;
    v59[1] = 0;
    v59[2] = 0;
    *long long v59 = 0;
    if (v47)
    {
      unint64_t v49 = 0;
      float v50 = (unint64_t *)(v59 + 2);
      do
      {
        if (v49 >= *v50)
        {
          uint64_t v51 = (uint64_t)(v49 - *v59) >> 7;
          if ((unint64_t)(v51 + 1) >> 57) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = *v50 - *v59;
          uint64_t v53 = v52 >> 6;
          if (v52 >> 6 <= (unint64_t)(v51 + 1)) {
            uint64_t v53 = v51 + 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFF80) {
            unint64_t v54 = 0x1FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v53;
          }
          v67[4] = v59 + 2;
          if (v54) {
            long long v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(v59 + 2), v54);
          }
          else {
            long long v55 = 0;
          }
          v67[0] = v55;
          v67[1] = &v55[128 * v51];
          v67[2] = v67[1];
          v67[3] = &v55[128 * v54];
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v67[1], (uint64_t)(v47 + 3));
          v67[2] += 128;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(v59, v67);
          unint64_t v49 = v59[1];
          std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)v67);
        }
        else
        {
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v49, (uint64_t)(v47 + 3));
          v49 += 128;
          v59[1] = v49;
        }
        v59[1] = v49;
        long long v47 = (void *)*v47;
      }
      while (v47);
    }
  }
  uint64_t v56 = std::__hash_table<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::__unordered_map_hasher<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>>>::~__hash_table((uint64_t)&v72);
  uint64_t v57 = *v48;
  uint64_t v58 = v48[1];
  while (v57 != v58)
  {
    uint64_t v56 = CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v56, *(void *)(v57 + 104), *(void *)(v57 + 112));
    v57 += 128;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v67[0] = &v64;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);
}

void sub_1DD79CA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 160));

  _Unwind_Resume(a1);
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(uint64_t a1, uint64_t *a2)
{
  return CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(a1, *a2, a2[1]);
}

uint64_t CRTextRecognition::CRCTLD::CTLDMFSet::find(CRTextRecognition::CRCTLD::CTLDMFSet *this, uint64_t a2)
{
  uint64_t v2 = a2;
  int v3 = *(_DWORD *)(*(void *)this + 4 * (int)a2);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v5 = (int)v2;
    uint64_t v2 = CRTextRecognition::CRCTLD::CTLDMFSet::find(this, v3);
    *(_DWORD *)(*(void *)this + 4 * v5) = v2;
  }
  return v2;
}

BOOL CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkRegionsInBlock(uint64_t a1, uint64_t a2, uint64_t a3, float **a4, uint64_t a5, void *a6, float a7)
{
  id v12 = a6;
  unint64_t v13 = v12;
  if (!v12) {
    goto LABEL_5;
  }
  id v12 = (id)[v12 groupingConstraintForRegion1:*(void *)(a2 + 8) region2:*(void *)(a3 + 8)];
  if (v12 == (id)1) {
    goto LABEL_42;
  }
  if (v12 != (id)2)
  {
LABEL_5:
    if (CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkRegionsLayoutDirection((CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *)v12, (id *)a2, (id *)a3))
    {
      float v72 = a7;
      int v74 = v13;
      float v16 = *(float *)(a2 + 24);
      float v15 = *(float *)(a2 + 28);
      float v18 = *(float *)(a2 + 16);
      float v17 = *(float *)(a2 + 20);
      float v19 = *(float *)(a3 + 24);
      float v20 = *(float *)(a3 + 28);
      float v22 = *(float *)(a3 + 16);
      float v21 = *(float *)(a3 + 20);
      int v23 = (double *)operator new(0x20uLL);
      uint64_t v24 = (char *)v23;
      unint64_t v25 = (char *)(v23 + 4);
      *int v23 = (float)(v16 + v15) * 0.5;
      v23[1] = (float)(v18 + v17) * 0.5;
      v23[2] = (float)(v19 + v20) * 0.5;
      v23[3] = (float)(v22 + v21) * 0.5;
      if (v16 >= v19) {
        float v26 = v16;
      }
      else {
        float v26 = v19;
      }
      if (v20 >= v15) {
        float v27 = v15;
      }
      else {
        float v27 = v20;
      }
      long long v73 = a4;
      if ((float)(v27 - v26) <= 0.0
        || (v18 >= v22 ? (uint64_t v28 = (float64x2_t *)a3) : (uint64_t v28 = (float64x2_t *)a2),
            v18 >= v22 ? (int v29 = (float64x2_t *)a2) : (int v29 = (float64x2_t *)a3),
            int v30 = *(_DWORD *)(a1 + 36),
            v30 < 1))
      {
        int v35 = v23 + 4;
      }
      else
      {
        float64x2_t v31 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v30 + 1)), 0);
        float32x2_t v32 = vcvt_f32_f64(vdivq_f64(vsubq_f64(v28[5], v28[4]), v31));
        float32x2_t v33 = vcvt_f32_f64(vdivq_f64(vsubq_f64(v29[3], v29[2]), v31));
        int v34 = 1;
        int v35 = v23 + 4;
        do
        {
          float64x2_t v36 = vaddq_f64(v28[4], vcvtq_f64_f32(vmul_n_f32(v32, (float)v34)));
          float64x2_t v37 = vaddq_f64(v29[2], vcvtq_f64_f32(vmul_n_f32(v33, (float)v34)));
          if (v25 >= (char *)v35)
          {
            float64x2_t v75 = v37;
            float64x2_t v77 = v36;
            uint64_t v38 = (v25 - v24) >> 5;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 59) {
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            }
            if (((char *)v35 - v24) >> 4 > v39) {
              unint64_t v39 = ((char *)v35 - v24) >> 4;
            }
            if ((unint64_t)((char *)v35 - v24) >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v40 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v39;
            }
            if (v40) {
              unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTableStructureColumn>>(v40);
            }
            else {
              uint64_t v41 = 0;
            }
            int v42 = (float64x2_t *)(v40 + 32 * v38);
            *int v42 = v77;
            v42[1] = v75;
            if (v25 == v24)
            {
              long long v44 = (char *)(v40 + 32 * v38);
            }
            else
            {
              unint64_t v43 = v40 + 32 * v38;
              do
              {
                long long v44 = (char *)(v43 - 32);
                long long v45 = *((_OWORD *)v25 - 1);
                *(_OWORD *)(v43 - 32) = *((_OWORD *)v25 - 2);
                *(_OWORD *)(v43 - 16) = v45;
                v25 -= 32;
                v43 -= 32;
              }
              while (v25 != v24);
            }
            int v35 = (double *)(v40 + 32 * v41);
            unint64_t v25 = (char *)&v42[2];
            if (v24) {
              operator delete(v24);
            }
            uint64_t v24 = v44;
          }
          else
          {
            *(float64x2_t *)unint64_t v25 = v36;
            *((float64x2_t *)v25 + 1) = v37;
            v25 += 32;
          }
          BOOL v46 = v34++ < *(_DWORD *)(a1 + 36);
        }
        while (v46);
        float v22 = *(float *)(a3 + 16);
        float v21 = *(float *)(a3 + 20);
        float v18 = *(float *)(a2 + 16);
        float v17 = *(float *)(a2 + 20);
      }
      if (v18 >= v22) {
        float v47 = v18;
      }
      else {
        float v47 = v22;
      }
      if (v21 >= v17) {
        float v48 = v17;
      }
      else {
        float v48 = v21;
      }
      if ((float)(v48 - v47) > 0.0)
      {
        float v49 = *(float *)(a2 + 24);
        float v50 = *(float *)(a3 + 24);
        uint64_t v51 = (float64x2_t *)(v49 >= v50 ? a3 : a2);
        uint64_t v52 = (float64x2_t *)(v49 >= v50 ? a2 : a3);
        int v53 = *(_DWORD *)(a1 + 36);
        if (v53 >= 1)
        {
          float64x2_t v54 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v53 + 1)), 0);
          float32x2_t v55 = vcvt_f32_f64(vdivq_f64(vsubq_f64(v51[3], v51[5]), v54));
          float32x2_t v56 = vcvt_f32_f64(vdivq_f64(vsubq_f64(v52[2], v52[4]), v54));
          int v57 = 1;
          do
          {
            float64x2_t v58 = vaddq_f64(v51[5], vcvtq_f64_f32(vmul_n_f32(v55, (float)v57)));
            float64x2_t v59 = vaddq_f64(v52[4], vcvtq_f64_f32(vmul_n_f32(v56, (float)v57)));
            if (v25 >= (char *)v35)
            {
              float64x2_t v76 = v59;
              float64x2_t v78 = v58;
              uint64_t v60 = (v25 - v24) >> 5;
              unint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 59) {
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              }
              if (((char *)v35 - v24) >> 4 > v61) {
                unint64_t v61 = ((char *)v35 - v24) >> 4;
              }
              if ((unint64_t)((char *)v35 - v24) >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v62 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v61;
              }
              if (v62) {
                unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTableStructureColumn>>(v62);
              }
              else {
                uint64_t v63 = 0;
              }
              float v64 = (float64x2_t *)(v62 + 32 * v60);
              *float v64 = v78;
              v64[1] = v76;
              if (v25 == v24)
              {
                uint64_t v66 = (char *)(v62 + 32 * v60);
              }
              else
              {
                unint64_t v65 = v62 + 32 * v60;
                do
                {
                  uint64_t v66 = (char *)(v65 - 32);
                  long long v67 = *((_OWORD *)v25 - 1);
                  *(_OWORD *)(v65 - 32) = *((_OWORD *)v25 - 2);
                  *(_OWORD *)(v65 - 16) = v67;
                  v25 -= 32;
                  v65 -= 32;
                }
                while (v25 != v24);
              }
              int v35 = (double *)(v62 + 32 * v63);
              unint64_t v25 = (char *)&v64[2];
              if (v24) {
                operator delete(v24);
              }
              uint64_t v24 = v66;
            }
            else
            {
              *(float64x2_t *)unint64_t v25 = v58;
              *((float64x2_t *)v25 + 1) = v59;
              v25 += 32;
            }
            BOOL v46 = v57++ < *(_DWORD *)(a1 + 36);
          }
          while (v46);
        }
      }
      if (v24 == v25)
      {
        BOOL v14 = 0;
        if (!v24) {
          goto LABEL_91;
        }
      }
      else
      {
        uint64_t v68 = (CGPoint *)v24;
        while (1)
        {
          uint64_t v70 = *v73;
          uint64_t v69 = v73[1];
          BOOL v14 = *v73 == v69;
          if (*v73 == v69) {
            break;
          }
          while (!CRTextRecognition::CRCTLD::CTLDRegion::segmentIntersectsRegion(v70, v68)
               || (CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::skipWhitespaceDueToDirectionsSwapped(a1, a2, a3, v70, a5, v72) & 1) != 0)
          {
            v70 += 32;
            if (v70 == v69) {
              goto LABEL_88;
            }
          }
          v68 += 2;
          if (v68 == (CGPoint *)v25) {
            goto LABEL_89;
          }
        }
LABEL_88:
        BOOL v14 = 1;
LABEL_89:
        if (!v24) {
          goto LABEL_91;
        }
      }
      operator delete(v24);
LABEL_91:
      unint64_t v13 = v74;
      goto LABEL_92;
    }
LABEL_42:
    BOOL v14 = 0;
    goto LABEL_92;
  }
  BOOL v14 = 1;
LABEL_92:

  return v14;
}

void sub_1DD79D004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t CRTextRecognition::CRCTLD::CTLDMFSet::merge(CRTextRecognition::CRCTLD::CTLDMFSet *this, uint64_t a2, uint64_t a3)
{
  int v5 = CRTextRecognition::CRCTLD::CTLDMFSet::find(this, a2);
  uint64_t result = CRTextRecognition::CRCTLD::CTLDMFSet::find(this, a3);
  if (v5 != result) {
    *(_DWORD *)(*(void *)this + 4 * (int)result) = v5;
  }
  return result;
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = 0;
  long long v83 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v82, 0, sizeof(v82));
  *(_OWORD *)uint64_t v79 = 0u;
  long long v80 = 0u;
  *(_OWORD *)float64x2_t v78 = 0u;
  memset(v77, 0, sizeof(v77));
  int v76 = 0;
  std::vector<int>::size_type v74 = (a3 - a2) >> 7;
  std::vector<int>::size_type __sz = v74;
  __x[0] = -1;
  std::vector<int>::resize((std::vector<int> *)v78, v74, __x);
  __x[0] = -1;
  std::vector<int>::resize((std::vector<int> *)&v79[1], v74, __x);
  std::vector<int>::size_type v5 = v74;
  uint64_t v6 = __p[1];
  unint64_t v7 = v74 - (unint64_t)__p[1];
  if ((void *)v74 <= __p[1])
  {
    __p[1] = (void *)__sz;
  }
  else
  {
    if (*(void *)&v82[0] << 6 < v7 || __p[1] > (void *)((*(void *)&v82[0] << 6) - v7))
    {
      *(void *)long double __x = 0;
      int64x2_t v87 = 0uLL;
      if ((__sz & 0x8000000000000000) != 0) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = *(void *)&v82[0] << 7;
      if (*(void *)&v82[0] << 7 <= ((v74 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v10 = (v74 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (*(void *)&v82[0] << 6 <= 0x3FFFFFFFFFFFFFFEuLL) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve((char **)__x, v11);
      id v12 = __p[0];
      unint64_t v13 = __p[1];
      BOOL v14 = (char *)__p[1] + v7;
      v87.i64[0] = (uint64_t)__p[1] + v7;
      float v15 = *(unint64_t **)__x;
      if ((uint64_t)__p[1] < 1)
      {
        int v9 = 0;
        float v8 = *(unint64_t **)__x;
      }
      else
      {
        unint64_t v16 = (unint64_t)__p[1] >> 6;
        if (__p[1] >= (void *)0x40) {
          memmove(*(void **)__x, __p[0], 8 * v16);
        }
        float v8 = &v15[v16];
        int v9 = v13 & 0x3F;
        if ((v13 & 0x3F) != 0) {
          *float v8 = *v8 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v9) | v12[v16] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9);
        }
        id v12 = __p[0];
        unint64_t v13 = __p[1];
        float v15 = *(unint64_t **)__x;
        BOOL v14 = (char *)v87.i64[0];
      }
      __p[0] = v15;
      __p[1] = v14;
      *(void *)long double __x = v12;
      v87.i64[0] = (uint64_t)v13;
      uint64_t v17 = *(void *)&v82[0];
      *(void *)&v82[0] = v87.i64[1];
      v87.i64[1] = v17;
      if (v12)
      {
        float v18 = v12;
        int v19 = v9;
        operator delete(v18);
        int v9 = v19;
      }
    }
    else
    {
      float v8 = (unint64_t *)((char *)__p[0] + 8 * ((unint64_t)__p[1] >> 6));
      int v9 = (uint64_t)__p[1] & 0x3F;
      __p[1] = (void *)__sz;
    }
    if ((void *)v74 != v6)
    {
      *(void *)long double __x = v8;
      v87.i32[0] = v9;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)__x, v7);
    }
    std::vector<int>::size_type v5 = __sz;
  }
  uint64_t v20 = *((void *)&v82[0] + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v82[1] + 1) - *((void *)&v82[0] + 1)) >> 3) < v5)
  {
    if (v5 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = *(void *)&v82[1];
    uint64_t v89 = (char *)&v82[1] + 8;
    float v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<BOOL>>>(v5);
    int v23 = &v22[v21 - v20];
    *(void *)long double __x = v22;
    v87.i64[0] = (uint64_t)v23;
    unint64_t v25 = &v22[24 * v24];
    v87.i64[1] = (uint64_t)v23;
    unint64_t v88 = (unint64_t)v25;
    float v27 = (void *)*((void *)&v82[0] + 1);
    float v26 = *(void **)&v82[1];
    if (*(void *)&v82[1] == *((void *)&v82[0] + 1))
    {
      int64x2_t v30 = vdupq_n_s64(*(unint64_t *)&v82[1]);
      uint64_t v28 = &v22[v21 - v20];
    }
    else
    {
      uint64_t v28 = &v22[v21 - v20];
      do
      {
        uint64_t v29 = *(v26 - 3);
        v26 -= 3;
        *((void *)v28 - 3) = v29;
        v28 -= 24;
        *((void *)v28 + 1) = v26[1];
        *((void *)v28 + 2) = v26[2];
        void *v26 = 0;
        v26[1] = 0;
        v26[2] = 0;
      }
      while (v26 != v27);
      int64x2_t v30 = *(int64x2_t *)((char *)v82 + 8);
      int v23 = (char *)v87.i64[1];
      unint64_t v25 = (char *)v88;
    }
    *((void *)&v82[0] + 1) = v28;
    *(void *)&v82[1] = v23;
    int64x2_t v87 = v30;
    unint64_t v31 = *((void *)&v82[1] + 1);
    *((void *)&v82[1] + 1) = v25;
    unint64_t v88 = v31;
    *(void *)long double __x = v30.i64[0];
    std::__split_buffer<std::vector<BOOL>>::~__split_buffer((uint64_t)__x);
  }
  if (a2 != a3)
  {
    uint64_t v32 = 0;
    uint64_t v33 = a2;
    do
    {
      memset(v85, 0, sizeof(v85));
      std::vector<BOOL>::reserve((char **)v85, __sz);
      uint64_t v34 = v32;
      uint64_t v35 = a2;
      do
      {
        if (v34) {
          LOBYTE(__x[0]) = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v33, v35);
        }
        else {
          LOBYTE(__x[0]) = 0;
        }
        std::vector<BOOL>::push_back((uint64_t)v85, __x);
        v35 += 128;
        v34 -= 128;
      }
      while (v35 != a3);
      uint64_t v36 = *(void *)&v82[1];
      if (*(void *)&v82[1] >= *((void *)&v82[1] + 1))
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v82[1] - *((void *)&v82[0] + 1)) >> 3);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*((void *)&v82[1] + 1) - *((void *)&v82[0] + 1)) >> 3) > v39) {
          unint64_t v39 = 0x5555555555555556 * ((uint64_t)(*((void *)&v82[1] + 1) - *((void *)&v82[0] + 1)) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v82[1] + 1) - *((void *)&v82[0] + 1)) >> 3) >= 0x555555555555555) {
          unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v40 = v39;
        }
        uint64_t v89 = (char *)&v82[1] + 8;
        if (v40) {
          unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<BOOL>>>(v40);
        }
        else {
          uint64_t v41 = 0;
        }
        *(void *)long double __x = v40;
        v87.i64[0] = v40 + 24 * v38;
        v87.i64[1] = v87.i64[0];
        unint64_t v88 = v40 + 24 * v41;
        std::vector<BOOL>::vector(v87.i64[0], (uint64_t)v85);
        uint64_t v42 = v87.i64[0];
        uint64_t v37 = v87.i64[1] + 24;
        v87.i64[1] += 24;
        long long v44 = (void *)*((void *)&v82[0] + 1);
        unint64_t v43 = *(void **)&v82[1];
        if (*(void *)&v82[1] == *((void *)&v82[0] + 1))
        {
          int64x2_t v46 = vdupq_n_s64(*(unint64_t *)&v82[1]);
        }
        else
        {
          do
          {
            uint64_t v45 = *(v43 - 3);
            v43 -= 3;
            *(void *)(v42 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v45;
            v42 -= 24;
            *(void *)(v42 + 8) = v43[1];
            *(void *)(v42 + 16) = v43[2];
            *unint64_t v43 = 0;
            v43[1] = 0;
            v43[2] = 0;
          }
          while (v43 != v44);
          int64x2_t v46 = *(int64x2_t *)((char *)v82 + 8);
          uint64_t v37 = v87.i64[1];
        }
        *((void *)&v82[0] + 1) = v42;
        *(void *)&v82[1] = v37;
        int64x2_t v87 = v46;
        unint64_t v47 = *((void *)&v82[1] + 1);
        *((void *)&v82[1] + 1) = v88;
        unint64_t v88 = v47;
        *(void *)long double __x = v46.i64[0];
        std::__split_buffer<std::vector<BOOL>>::~__split_buffer((uint64_t)__x);
      }
      else
      {
        std::vector<BOOL>::vector(*(void **)&v82[1], (uint64_t)v85);
        uint64_t v37 = v36 + 24;
      }
      *(void *)&v82[1] = v37;
      if (v85[0]) {
        operator delete(v85[0]);
      }
      v33 += 128;
      v32 += 128;
    }
    while (v33 != a3);
  }
  int64_t v48 = __sz;
  if ((uint64_t)__sz >= 1)
  {
    int64_t v49 = 0;
    do
    {
      if ((*((_DWORD *)v78[0] + v49) & 0x80000000) != 0)
      {
        CRTextRecognition::CRCTLD::order::TarjansSCC::unfolded_strongconnect((CRTextRecognition::CRCTLD::order::TarjansSCC *)&__sz, v49);
        int64_t v48 = __sz;
      }
      ++v49;
    }
    while (v48 > v49);
  }
  *(void *)long double __x = 0;
  int64x2_t v87 = 0uLL;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::reserve((uint64_t *)__x, v74);
  uint64_t v51 = *((void *)&v83 + 1);
  if (*((void *)&v83 + 1) != (void)v83)
  {
    uint64_t v52 = *((void *)&v83 + 1);
    do
    {
      int v53 = (__n128 *)v87.i64[0];
      float64x2_t v54 = *(int **)(v52 - 24);
      float32x2_t v55 = *(int **)(v52 - 16);
      v52 -= 24;
      float32x2_t v56 = (__n128 *)v87.i64[0];
      int v57 = v54;
      if (v54 != v55)
      {
        do
        {
          if ((unint64_t)v56 >= v87.i64[1])
          {
            float32x2_t v56 = (__n128 *)std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t *)__x, a2 + ((uint64_t)*v54 << 7));
          }
          else
          {
            std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)&v87.i64[1], (uint64_t)v56, a2 + ((uint64_t)*v54 << 7));
            v56 += 8;
          }
          v87.i64[0] = (uint64_t)v56;
          ++v54;
        }
        while (v54 != v55);
        float64x2_t v54 = *(int **)(v51 - 24);
        int v57 = *(int **)(v51 - 16);
      }
      if ((unint64_t)((char *)v57 - (char *)v54) > 4)
      {
        if ((char *)v56 - (char *)v53 < 1)
        {
          float64x2_t v58 = 0;
          uint64_t v60 = 0;
        }
        else
        {
          float64x2_t v58 = std::get_temporary_buffer[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(((char *)v56 - (char *)v53) >> 7);
          uint64_t v60 = v59;
        }
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(v53, v56, ((char *)v56 - (char *)v53) >> 7, (uint64_t)v58, v60, v50);
        if (v58) {
          operator delete(v58);
        }
        if (v53 != v56)
        {
          uint64_t v61 = (uint64_t)v53;
          while (1)
          {
            uint64_t v62 = v61 + 128;
            if ((__n128 *)(v61 + 128) == v56) {
              break;
            }
            int v63 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v61 + 128, v61);
            uint64_t v61 = v62;
            if (v63)
            {
              CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>((int *)v53, v56, 0, v50);
              int v64 = CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)&v56[-8], (uint64_t)v53);
              if (&v56[-8] != v53 && v64)
              {
                float v65 = (float)((float)(v53[1].n128_f32[2] + v53[1].n128_f32[3]) * 0.5)
                    - (float)((float)(v56[-7].n128_f32[2] + v56[-7].n128_f32[3]) * 0.5);
                float v66 = (float)((float)(v53[1].n128_f32[0] + v53[1].n128_f32[1]) * 0.5)
                    - (float)((float)(v56[-7].n128_f32[0] + v56[-7].n128_f32[1]) * 0.5);
                v50.n128_f32[0] = (float)(v66 * v66) + (float)(v65 * v65);
                long long v67 = (float *)&v53[8];
                uint64_t v68 = (int *)v53;
                do
                {
                  float v69 = (float)((float)(*(v67 - 26) + *(v67 - 25)) * 0.5) - (float)((float)(v67[6] + v67[7]) * 0.5);
                  float v70 = (float)((float)(*(v67 - 28) + *(v67 - 27)) * 0.5) - (float)((float)(v67[4] + v67[5]) * 0.5);
                  float v71 = (float)(v70 * v70) + (float)(v69 * v69);
                  if (v50.n128_f32[0] < v71)
                  {
                    uint64_t v68 = (int *)v67;
                    v50.n128_f32[0] = v71;
                  }
                  BOOL v72 = v67 == (float *)&v56[-8];
                  v67 += 32;
                }
                while (!v72);
                BOOL v72 = v68 == (int *)v53 || v68 == (int *)v56;
                if (!v72) {
                  std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>((int *)v53, v68, (int *)v56);
                }
              }
              break;
            }
          }
        }
      }
      uint64_t v51 = v52;
    }
    while (v52 != (void)v83);
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(*(uint64_t **)__x, (uint64_t *)v87.i64[0], a2);
  v85[0] = (void **)__x;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v85);
  *(void *)long double __x = &v83;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  *(void *)long double __x = (char *)v82 + 8;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v79[1])
  {
    *(void **)&long long v80 = v79[1];
    operator delete(v79[1]);
  }
  if (v78[0])
  {
    v78[1] = v78[0];
    operator delete(v78[0]);
  }
  return std::deque<int>::~deque[abi:ne180100]((uint64_t)v77);
}

void sub_1DD79D7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<int>::size_type v5 = *(void **)(v3 - 144);
  if (v5) {
    operator delete(v5);
  }
  CRTextRecognition::CRCTLD::order::TarjansSCC::~TarjansSCC((CRTextRecognition::CRCTLD::order::TarjansSCC *)va);
  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::order::TarjansSCC::~TarjansSCC(CRTextRecognition::CRCTLD::order::TarjansSCC *this)
{
  std::vector<int>::size_type v5 = (void **)((char *)this + 160);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::vector<int>::size_type v5 = (void **)((char *)this + 136);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)this + 16);
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::filterWhitespacesForReadingOrder@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    float v13 = -INFINITY;
  }
  else
  {
    float32x2_t v8 = (float32x2_t)0xFF7FFFFF7F7FFFFFLL;
    do
    {
      int v9 = *(int **)(v6 + 104);
      while (v9 != *(int **)(v6 + 112))
      {
        uint64_t v10 = *v9;
        v9 += 32;
        v11.i32[0] = *(void *)(*a3 + (v10 << 7) + 16);
        v11.i32[1] = v8.i32[1];
        v12.i32[0] = v8.i32[0];
        v12.i32[1] = HIDWORD(*(void *)(*a3 + (v10 << 7) + 16));
        float32x2_t v8 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v12, v11), *(int8x8_t *)(*a3 + (v10 << 7) + 16), (int8x8_t)v8);
      }
      v6 += 128;
    }
    while (v6 != v7);
    LODWORD(v13) = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v8, 1), v8).u32[0];
  }
  float v14 = *(float *)(result + 28);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t v15 = *a4;
  uint64_t v16 = a4[1];
  if (*a4 != v16)
  {
    unint64_t v17 = 0;
    float v18 = v13 * v14;
    int v19 = (unint64_t *)(a5 + 2);
    do
    {
      if ((float)(*(float *)(v15 + 20) - *(float *)(v15 + 16)) > v18)
      {
        if (v17 >= *v19)
        {
          uint64_t v20 = (uint64_t)(v17 - *a5) >> 7;
          if ((unint64_t)(v20 + 1) >> 57) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = *v19 - *a5;
          uint64_t v22 = v21 >> 6;
          if (v21 >> 6 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFF80) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v29 = a5 + 2;
          if (v23) {
            uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a5 + 2), v23);
          }
          else {
            uint64_t v24 = 0;
          }
          unint64_t v25 = v24;
          float v26 = &v24[128 * v20];
          uint64_t v27 = (uint64_t)v26;
          uint64_t v28 = &v24[128 * v23];
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>((uint64_t)v26, v15);
          v27 += 128;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a5, &v25);
          unint64_t v17 = a5[1];
          uint64_t result = std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v25);
        }
        else
        {
          uint64_t result = (uint64_t)std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v17, v15);
          v17 += 128;
          a5[1] = v17;
        }
        a5[1] = v17;
      }
      v15 += 128;
    }
    while (v15 != v16);
  }
  return result;
}

void sub_1DD79DAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortBlocks(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *a1, uint64_t *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6)
{
  id v167 = a6;
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::filterWhitespacesForReadingOrder((uint64_t)a1, a2, a3, a4, (uint64_t *)&v171);
  uint64_t v10 = (uint64_t)v171;
  uint64_t v11 = (uint64_t)v172;
  if (v171 != v172)
  {
    float32x2_t v12 = v171;
    do
    {
      *float32x2_t v12 = -100;
      v12 += 32;
    }
    while (v12 != (_DWORD *)v11);
  }
  id v13 = v167;
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortBlocks(std::vector<CRTextRecognition::CRCTLD::CTLDRegion> &,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,CRLayoutDirection,objc_object  {objcproto14CRCTLDDelegate}*)::$_0::operator()(v10, v11, a2);
  uint64_t v14 = 0;
  LOBYTE(v170) = 0;
  while (1)
  {
    uint64_t k = v14;
    CRTextRecognition::CRCTLD::CTLDMFSet::CTLDMFSet((CRTextRecognition::CRCTLD::CTLDMFSet *)&v176, (unint64_t)(a2[1] - *a2) >> 7);
    if ((unint64_t)(a2[1] - *a2) < 0x81)
    {
      int v63 = 0;
      goto LABEL_136;
    }
    unsigned int v168 = v14;
    char v16 = 0;
    unint64_t v17 = 1;
    do
    {
      unint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = (float *)(*a2 + (v17 << 7));
        uint64_t v21 = (float *)(*a2 + v18);
        float IntersectionArea = CRTextRecognition::CRCTLD::CTLDRegion::getIntersectionArea((CRTextRecognition::CRCTLD::CTLDRegion *)v20, (const CRTextRecognition::CRCTLD::CTLDRegion *)v21);
        if (IntersectionArea > 0.0)
        {
          float v23 = (float)(v20[7] - v20[6]) * (float)(v20[5] - v20[4]);
          float v24 = v21[5] - v21[4];
          if ((float)((float)(v21[7] - v21[6]) * v24) < v23) {
            float v23 = (float)(v21[7] - v21[6]) * v24;
          }
          if ((float)(IntersectionArea / v23) > 0.5
            && CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkGroupsMergeConsistency(a1, v13, (const CRTextRecognition::CRCTLD::CTLDRegion *)v20, (const CRTextRecognition::CRCTLD::CTLDRegion *)v21))
          {
            CRTextRecognition::CRCTLD::CTLDMFSet::merge((CRTextRecognition::CRCTLD::CTLDMFSet *)&v176, v17, v19);
            char v16 = 1;
          }
        }
        ++v19;
        v18 += 128;
      }
      while (v17 != v19);
      ++v17;
      uint64_t v26 = *a2;
      uint64_t v25 = a2[1];
    }
    while (v17 < (v25 - *a2) >> 7);
    if ((v16 & 1) == 0)
    {
      int v63 = 0;
      uint64_t k = v168;
      goto LABEL_136;
    }
    *(_OWORD *)__p = 0u;
    long long v190 = 0u;
    LODWORD(v191) = 1065353216;
    if (v25 == v26)
    {
      v186[0] = 0;
      v186[1] = 0;
      *(void *)&long long v187 = 0;
      uint64_t k = v168;
      goto LABEL_133;
    }
    unint64_t v27 = 0;
    do
    {
      prime = (char *)CRTextRecognition::CRCTLD::CTLDMFSet::find((CRTextRecognition::CRCTLD::CTLDMFSet *)&v176, v27);
      int v29 = (int)prime;
      unint64_t v30 = (int)prime;
      unint64_t v31 = (unint64_t)__p[1];
      if (__p[1])
      {
        uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v32.i16[0] = vaddlv_u8(v32);
        if (v32.u32[0] > 1uLL)
        {
          unint64_t v18 = (int)prime;
          if (__p[1] <= (void *)(int)prime) {
            unint64_t v18 = (int)prime % (unint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v18 = ((unint64_t)__p[1] - 1) & (int)prime;
        }
        uint64_t v33 = (char **)*((void *)__p[0] + v18);
        if (v33)
        {
          for (uint64_t i = *v33; i; uint64_t i = *(char **)i)
          {
            unint64_t v35 = *((void *)i + 1);
            if (v35 == (int)prime)
            {
              if (*((_DWORD *)i + 4) == prime) {
                goto LABEL_91;
              }
            }
            else
            {
              if (v32.u32[0] > 1uLL)
              {
                if ((void *)v35 >= __p[1]) {
                  v35 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v35 &= (unint64_t)__p[1] - 1;
              }
              if (v35 != v18) {
                break;
              }
            }
          }
        }
      }
      prime = (char *)operator new(0x30uLL);
      uint64_t i = prime;
      *(void *)prime = 0;
      *((void *)prime + 1) = v30;
      *((_DWORD *)prime + 4) = v29;
      *((void *)prime + 4) = 0;
      *((void *)prime + 5) = 0;
      *((void *)prime + 3) = 0;
      float v36 = (float)(unint64_t)(*((void *)&v190 + 1) + 1);
      if (!v31 || (float)(*(float *)&v191 * (float)v31) < v36)
      {
        BOOL v37 = (v31 & (v31 - 1)) != 0;
        if (v31 < 3) {
          BOOL v37 = 1;
        }
        unint64_t v38 = v37 | (2 * v31);
        unint64_t v39 = vcvtps_u32_f32(v36 / *(float *)&v191);
        if (v38 <= v39) {
          size_t v40 = v39;
        }
        else {
          size_t v40 = v38;
        }
        if (v40 == 1)
        {
          size_t v40 = 2;
        }
        else if ((v40 & (v40 - 1)) != 0)
        {
          prime = (char *)std::__next_prime(v40);
          size_t v40 = (size_t)prime;
          unint64_t v31 = (unint64_t)__p[1];
        }
        if (v40 > v31) {
          goto LABEL_47;
        }
        if (v40 < v31)
        {
          prime = (char *)vcvtps_u32_f32((float)*((unint64_t *)&v190 + 1) / *(float *)&v191);
          if (v31 < 3 || (uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
          {
            prime = (char *)std::__next_prime((size_t)prime);
          }
          else
          {
            uint64_t v47 = 1 << -(char)__clz((unint64_t)(prime - 1));
            if ((unint64_t)prime >= 2) {
              prime = (char *)v47;
            }
          }
          if (v40 <= (unint64_t)prime) {
            size_t v40 = (size_t)prime;
          }
          if (v40 >= v31)
          {
            unint64_t v31 = (unint64_t)__p[1];
          }
          else
          {
            if (v40)
            {
LABEL_47:
              if (v40 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v41 = operator new(8 * v40);
              prime = (char *)__p[0];
              __p[0] = v41;
              if (prime) {
                operator delete(prime);
              }
              uint64_t v42 = 0;
              __p[1] = (void *)v40;
              do
                *((void *)__p[0] + v42++) = 0;
              while (v40 != v42);
              unint64_t v43 = (void **)v190;
              if ((void)v190)
              {
                size_t v44 = *(void *)(v190 + 8);
                uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
                v45.i16[0] = vaddlv_u8(v45);
                if (v45.u32[0] > 1uLL)
                {
                  if (v44 >= v40) {
                    v44 %= v40;
                  }
                }
                else
                {
                  v44 &= v40 - 1;
                }
                *((void *)__p[0] + v44) = &v190;
                for (j = *v43; j; size_t v44 = v49)
                {
                  size_t v49 = j[1];
                  if (v45.u32[0] > 1uLL)
                  {
                    if (v49 >= v40) {
                      v49 %= v40;
                    }
                  }
                  else
                  {
                    v49 &= v40 - 1;
                  }
                  if (v49 != v44)
                  {
                    if (!*((void *)__p[0] + v49))
                    {
                      *((void *)__p[0] + v49) = v43;
                      goto LABEL_72;
                    }
                    *unint64_t v43 = (void *)*j;
                    *uint64_t j = **((void **)__p[0] + v49);
                    **((void **)__p[0] + v49) = j;
                    uint64_t j = v43;
                  }
                  size_t v49 = v44;
LABEL_72:
                  unint64_t v43 = (void **)j;
                  uint64_t j = (void *)*j;
                }
              }
              unint64_t v31 = v40;
              goto LABEL_76;
            }
            prime = (char *)__p[0];
            __p[0] = 0;
            if (prime) {
              operator delete(prime);
            }
            unint64_t v31 = 0;
            __p[1] = 0;
          }
        }
LABEL_76:
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v31 <= v30) {
            unint64_t v18 = v30 % v31;
          }
          else {
            unint64_t v18 = v30;
          }
        }
        else
        {
          unint64_t v18 = (v31 - 1) & v30;
        }
      }
      __n128 v50 = __p[0];
      uint64_t v51 = (char **)*((void *)__p[0] + v18);
      if (v51)
      {
        *(void *)uint64_t i = *v51;
LABEL_89:
        *uint64_t v51 = i;
        goto LABEL_90;
      }
      *(void *)uint64_t i = v190;
      *(void *)&long long v190 = i;
      v50[v18] = &v190;
      if (*(void *)i)
      {
        unint64_t v52 = *(void *)(*(void *)i + 8);
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v52 >= v31) {
            v52 %= v31;
          }
        }
        else
        {
          v52 &= v31 - 1;
        }
        uint64_t v51 = (char **)((char *)__p[0] + 8 * v52);
        goto LABEL_89;
      }
LABEL_90:
      ++*((void *)&v190 + 1);
LABEL_91:
      unint64_t v53 = *((void *)i + 5);
      float64x2_t v54 = (char *)*((void *)i + 4);
      if ((unint64_t)v54 >= v53)
      {
        prime = (char *)*((void *)i + 3);
        uint64_t v56 = (v54 - prime) >> 2;
        if ((unint64_t)(v56 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v57 = v53 - (void)prime;
        unint64_t v58 = (uint64_t)(v53 - (void)prime) >> 1;
        if (v58 <= v56 + 1) {
          unint64_t v58 = v56 + 1;
        }
        if (v57 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v58;
        }
        if (v59)
        {
          uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(i + 40), v59);
          prime = (char *)*((void *)i + 3);
          float64x2_t v54 = (char *)*((void *)i + 4);
        }
        else
        {
          uint64_t v60 = 0;
        }
        uint64_t v61 = &v60[4 * v56];
        *(_DWORD *)uint64_t v61 = v27;
        float32x2_t v55 = v61 + 4;
        while (v54 != prime)
        {
          int v62 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *((_DWORD *)v61 - 1) = v62;
          v61 -= 4;
        }
        *((void *)i + 3) = v61;
        *((void *)i + 4) = v55;
        *((void *)i + 5) = &v60[4 * v59];
        if (prime) {
          operator delete(prime);
        }
      }
      else
      {
        *(_DWORD *)float64x2_t v54 = v27;
        float32x2_t v55 = v54 + 4;
      }
      *((void *)i + 4) = v55;
      ++v27;
    }
    while (v27 < (a2[1] - *a2) >> 7);
    int v64 = (int **)v190;
    v186[0] = 0;
    v186[1] = 0;
    *(void *)&long long v187 = 0;
    for (k = v168; v64; int v64 = (int **)*v64)
    {
      float v65 = (char *)v64[3];
      if ((char *)v64[4] - v65 == 4)
      {
        uint64_t v66 = *a2 + ((uint64_t)*(int *)v65 << 7);
        long long v67 = (char *)v186[1];
        if (v186[1] >= (void *)v187)
        {
          prime = (char *)std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t *)v186, v66);
        }
        else
        {
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)&v187, (uint64_t)v186[1], v66);
          prime = v67 + 128;
        }
        v186[1] = prime;
      }
      else
      {
        CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::mergeOverlappingGroups((uint64_t)prime, a2, v64 + 3, (uint64_t)v198);
        uint64_t v68 = (char *)v186[1];
        if (v186[1] >= (void *)v187)
        {
          std::vector<int>::size_type v74 = (void *)std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion>((uint64_t *)v186, (uint64_t)v198);
        }
        else
        {
          *(_DWORD *)v186[1] = v198[0];
          uint64_t v69 = v198[1];
          v198[1] = 0;
          *((void *)v68 + 1) = v69;
          long long v70 = *(_OWORD *)&v198[4];
          *((_OWORD *)v68 + 1) = *(_OWORD *)&v198[2];
          *((_OWORD *)v68 + 2) = v70;
          long long v71 = *(_OWORD *)&v198[6];
          long long v72 = *(_OWORD *)&v198[8];
          long long v73 = *(_OWORD *)&v198[10];
          *((_DWORD *)v68 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v198[12];
          *((_OWORD *)v68 + 4) = v72;
          *((_OWORD *)v68 + 5) = v73;
          *((_OWORD *)v68 + 3) = v71;
          *((void *)v68 + 13) = 0;
          *((void *)v68 + 14) = 0;
          *((void *)v68 + 15) = 0;
          *(_OWORD *)(v68 + 104) = v199;
          *((void *)v68 + 15) = v200;
          long long v199 = 0uLL;
          uint64_t v200 = 0;
          std::vector<int>::size_type v74 = v68 + 128;
        }
        v186[1] = v74;
        int v173 = (void **)&v199;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v173);
      }
    }
LABEL_133:
    if (v186 != (void **)a2) {
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__assign_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(a2, (uint64_t)v186[0], (uint64_t)v186[1], ((char *)v186[1] - (char *)v186[0]) >> 7);
    }
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortBlocks(std::vector<CRTextRecognition::CRCTLD::CTLDRegion> &,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,CRLayoutDirection,objc_object  {objcproto14CRCTLDDelegate}*)::$_0::operator()((uint64_t)v171, (uint64_t)v172, a2);
    v198[0] = v186;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
    std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::~__hash_table((uint64_t)__p);
    int v63 = 1;
LABEL_136:
    float64x2_t v75 = v176;
    if (v176)
    {
      id v177 = v176;
      operator delete(v176);
    }
    if ((_BYTE)v170) {
      int v76 = 1;
    }
    else {
      int v76 = v63;
    }
    int v170 = v76;
    uint64_t v14 = 1;
    if ((v63 & 1) == 0)
    {
      uint64_t v14 = k;
      if (*((unsigned char *)a1 + 48))
      {
        while (2)
        {
          LODWORD(v198[0]) = -1;
          uint64_t v200 = 0;
          long long v199 = 0uLL;
          memset(&v198[1], 0, 92);
          float64x2_t v77 = (const CRTextRecognition::CRCTLD::CTLDRegion *)*a2;
          float64x2_t v78 = (const CRTextRecognition::CRCTLD::CTLDRegion *)a2[1];
          while (v77 != v78)
          {
            CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)v198, v77);
            float64x2_t v77 = (const CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v77 + 128);
          }
          CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(a1, (const CRTextRecognition::CRCTLD::CTLDRegion *)v198, (uint64_t)__p);
          int v169 = v14;
          LODWORD(v198[0]) = __p[0];
          uint64_t v79 = __p[1];
          __p[1] = 0;
          long long v80 = (void *)v198[1];
          v198[1] = v79;

          *(_OWORD *)&v198[6] = v192;
          *(_OWORD *)&v198[8] = v193;
          *(_OWORD *)&v198[10] = v194;
          LODWORD(v198[12]) = v195;
          *(_OWORD *)&v198[2] = v190;
          *(_OWORD *)&v198[4] = v191;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)&v199);
          long long v199 = v196;
          uint64_t v200 = v197;
          uint64_t v197 = 0;
          long long v196 = 0uLL;
          uint64_t v176 = &v196;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);

          int v81 = 0;
          uint64_t v82 = (float *)*((void *)&v199 + 1);
          long long v83 = (float *)v199;
          if ((void)v199 == *((void *)&v199 + 1)) {
            goto LABEL_264;
          }
          for (CGAffineTransform m = (float *)(v199 + 128); ; m += 32)
          {
            if (m == v82) {
              goto LABEL_264;
            }
            float v86 = v83[6];
            float v85 = v83[7];
            float v88 = v83[38];
            float v87 = v83[39];
            if ((float)(v88 + v87) * 0.5 - (float)(v86 + v85) * 0.5 < 0.0)
            {
              float v89 = v83[4];
              float v90 = v83[5];
              float v91 = v83[36];
              float v92 = v83[37];
              if ((float)(v91 + v92) * 0.5 - (float)(v89 + v90) * 0.5 < 0.0) {
                break;
              }
            }
LABEL_260:
            int v81 = 0;
            v83 += 32;
            if (v83 == v82) {
              goto LABEL_264;
            }
          }
          if (v88 < v86) {
            float v86 = v83[38];
          }
          if (v85 < v87) {
            float v85 = v83[39];
          }
          LODWORD(__p[0]) = -1;
          __p[1] = 0;
          if (v91 >= v89) {
            float v93 = v89;
          }
          else {
            float v93 = v91;
          }
          if (v90 >= v92) {
            float v94 = v90;
          }
          else {
            float v94 = v92;
          }
          *(void *)&long long v190 = __PAIR64__(LODWORD(v94), LODWORD(v93));
          *((void *)&v190 + 1) = __PAIR64__(LODWORD(v85), LODWORD(v86));
          uint64_t v197 = 0;
          long long v196 = 0uLL;
          *(double *)&long long v191 = v86;
          *((double *)&v191 + 1) = v93;
          *(double *)&long long v192 = v85;
          *((double *)&v192 + 1) = v93;
          *(double *)&long long v193 = v86;
          *((double *)&v193 + 1) = v94;
          *(double *)&long long v194 = v85;
          *((double *)&v194 + 1) = v94;
          int v195 = 0;
          *(_OWORD *)uint64_t v186 = 0u;
          long long v187 = 0u;
          float v188 = 1.0;
          uint64_t v95 = *a2;
          if (a2[1] == *a2)
          {
LABEL_259:
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v186);
            uint64_t v176 = &v196;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);

            uint64_t v82 = (float *)*((void *)&v199 + 1);
            goto LABEL_260;
          }
          unint64_t v96 = 0;
LABEL_163:
          uint64_t v97 = v95 + (v96 << 7);
          if (*((float *)&v190 + 2) >= *(float *)(v97 + 28)) {
            goto LABEL_242;
          }
          if (*((float *)&v190 + 3) <= *(float *)(v97 + 24)) {
            goto LABEL_242;
          }
          uint64_t v98 = v95 + (v96 << 7);
          if (*(float *)&v190 >= *(float *)(v98 + 20) || *((float *)&v190 + 1) <= *(float *)(v98 + 16)) {
            goto LABEL_242;
          }
          unint64_t v99 = v187;
          if ((void)v187)
          {
            while ((CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkGroupsMergeConsistency(a1, v13, (const CRTextRecognition::CRCTLD::CTLDRegion *)(*a2 + (v96 << 7)), (const CRTextRecognition::CRCTLD::CTLDRegion *)(*a2 + ((uint64_t)*(int *)(v99 + 16) << 7))) & 1) != 0)
            {
              unint64_t v99 = *(void *)v99;
              if (!v99) {
                goto LABEL_170;
              }
            }
            goto LABEL_242;
          }
LABEL_170:
          unint64_t v100 = (unint64_t)v186[1];
          if (v186[1])
          {
            uint8x8_t v101 = (uint8x8_t)vcnt_s8((int8x8_t)v186[1]);
            v101.i16[0] = vaddlv_u8(v101);
            if (v101.u32[0] > 1uLL)
            {
              unint64_t v99 = v96;
              if (v186[1] <= (void *)v96) {
                unint64_t v99 = v96 % (unint64_t)v186[1];
              }
            }
            else
            {
              unint64_t v99 = ((unint64_t)v186[1] + 0x7FFFFFFF) & v96;
            }
            long long v102 = (uint64_t **)*((void *)v186[0] + v99);
            if (v102)
            {
              for (n = *v102; n; n = (uint64_t *)*n)
              {
                unint64_t v104 = n[1];
                if (v104 == v96)
                {
                  if (v96 == *((_DWORD *)n + 4)) {
                    goto LABEL_242;
                  }
                }
                else
                {
                  if (v101.u32[0] > 1uLL)
                  {
                    if ((void *)v104 >= v186[1]) {
                      v104 %= (unint64_t)v186[1];
                    }
                  }
                  else
                  {
                    v104 &= (unint64_t)v186[1] - 1;
                  }
                  if (v104 != v99) {
                    break;
                  }
                }
              }
            }
          }
          int v105 = operator new(0x18uLL);
          *int v105 = 0;
          v105[1] = v96;
          *((_DWORD *)v105 + 4) = v96;
          float v106 = (float)(unint64_t)(*((void *)&v187 + 1) + 1);
          if (!v100 || (float)(v188 * (float)v100) < v106)
          {
            BOOL v107 = (v100 & (v100 - 1)) != 0;
            if (v100 < 3) {
              BOOL v107 = 1;
            }
            unint64_t v108 = v107 | (2 * v100);
            unint64_t v109 = vcvtps_u32_f32(v106 / v188);
            if (v108 <= v109) {
              int8x8_t v110 = (int8x8_t)v109;
            }
            else {
              int8x8_t v110 = (int8x8_t)v108;
            }
            if (*(void *)&v110 == 1)
            {
              int8x8_t v110 = (int8x8_t)2;
            }
            else if ((*(void *)&v110 & (*(void *)&v110 - 1)) != 0)
            {
              int8x8_t v110 = (int8x8_t)std::__next_prime(*(void *)&v110);
              unint64_t v100 = (unint64_t)v186[1];
            }
            if (*(void *)&v110 <= v100)
            {
              if (*(void *)&v110 < v100)
              {
                unint64_t v117 = vcvtps_u32_f32((float)*((unint64_t *)&v187 + 1) / v188);
                if (v100 < 3
                  || (uint8x8_t v118 = (uint8x8_t)vcnt_s8((int8x8_t)v100), v118.i16[0] = vaddlv_u8(v118), v118.u32[0] > 1uLL))
                {
                  unint64_t v117 = std::__next_prime(v117);
                }
                else
                {
                  uint64_t v119 = 1 << -(char)__clz(v117 - 1);
                  if (v117 >= 2) {
                    unint64_t v117 = v119;
                  }
                }
                if (*(void *)&v110 <= v117) {
                  int8x8_t v110 = (int8x8_t)v117;
                }
                if (*(void *)&v110 >= v100)
                {
                  unint64_t v100 = (unint64_t)v186[1];
                }
                else
                {
                  if (v110) {
                    goto LABEL_198;
                  }
                  uint64_t v126 = v186[0];
                  v186[0] = 0;
                  if (v126) {
                    operator delete(v126);
                  }
                  unint64_t v100 = 0;
                  v186[1] = 0;
                }
              }
            }
            else
            {
LABEL_198:
              if (*(void *)&v110 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v111 = operator new(8 * *(void *)&v110);
              unint64_t v112 = v186[0];
              v186[0] = v111;
              if (v112) {
                operator delete(v112);
              }
              uint64_t v113 = 0;
              v186[1] = (void *)v110;
              do
                *((void *)v186[0] + v113++) = 0;
              while (*(void *)&v110 != v113);
              int64x2_t v114 = (void **)v187;
              if ((void)v187)
              {
                unint64_t v115 = *(void *)(v187 + 8);
                uint8x8_t v116 = (uint8x8_t)vcnt_s8(v110);
                v116.i16[0] = vaddlv_u8(v116);
                if (v116.u32[0] > 1uLL)
                {
                  if (v115 >= *(void *)&v110) {
                    v115 %= *(void *)&v110;
                  }
                }
                else
                {
                  v115 &= *(void *)&v110 - 1;
                }
                *((void *)v186[0] + v115) = &v187;
                for (iuint64_t i = *v114; ii; v115 = v121)
                {
                  unint64_t v121 = ii[1];
                  if (v116.u32[0] > 1uLL)
                  {
                    if (v121 >= *(void *)&v110) {
                      v121 %= *(void *)&v110;
                    }
                  }
                  else
                  {
                    v121 &= *(void *)&v110 - 1;
                  }
                  if (v121 != v115)
                  {
                    if (!*((void *)v186[0] + v121))
                    {
                      *((void *)v186[0] + v121) = v114;
                      goto LABEL_223;
                    }
                    *int64x2_t v114 = (void *)*ii;
                    *iuint64_t i = **((void **)v186[0] + v121);
                    **((void **)v186[0] + v121) = ii;
                    iuint64_t i = v114;
                  }
                  unint64_t v121 = v115;
LABEL_223:
                  int64x2_t v114 = (void **)ii;
                  iuint64_t i = (void *)*ii;
                }
              }
              unint64_t v100 = (unint64_t)v110;
            }
            if ((v100 & (v100 - 1)) != 0)
            {
              if (v100 <= v96) {
                unint64_t v99 = v96 % v100;
              }
              else {
                unint64_t v99 = v96;
              }
            }
            else
            {
              unint64_t v99 = (v100 + 0x7FFFFFFF) & v96;
            }
          }
          long long v122 = v186[0];
          long long v123 = (void *)*((void *)v186[0] + v99);
          if (v123)
          {
            *int v105 = *v123;
            goto LABEL_240;
          }
          *int v105 = v187;
          *(void *)&long long v187 = v105;
          v122[v99] = &v187;
          if (*v105)
          {
            unint64_t v124 = *(void *)(*v105 + 8);
            if ((v100 & (v100 - 1)) != 0)
            {
              if (v124 >= v100) {
                v124 %= v100;
              }
            }
            else
            {
              v124 &= v100 - 1;
            }
            long long v123 = (char *)v186[0] + 8 * v124;
LABEL_240:
            *long long v123 = v105;
          }
          ++*((void *)&v187 + 1);
LABEL_242:
          ++v96;
          uint64_t v95 = *a2;
          unint64_t v125 = (a2[1] - *a2) >> 7;
          if (v125 <= v96)
          {
            if (!*((void *)&v187 + 1)) {
              goto LABEL_259;
            }
            if (*((void *)&v187 + 1) == 1)
            {
              uint64_t v127 = *(int *)(v187 + 16);
              uint64_t v128 = v95 + (v127 << 7);
              uint64_t v129 = *(void *)(v128 + 104);
              uint64_t v130 = *(void *)(v128 + 112);
              while (v129 != v130)
              {
                if (*(void *)(v129 + 104) != *(void *)(v129 + 112))
                {
                  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(a1, (const CRTextRecognition::CRCTLD::CTLDRegion *)(v95 + (v127 << 7)), (uint64_t)&v176);
                  uint64_t v131 = *a2 + (v127 << 7);
                  *(_DWORD *)uint64_t v131 = v176;
                  id v132 = v177;
                  id v177 = 0;
                  int64_t v133 = *(void **)(v131 + 8);
                  *(void *)(v131 + 8) = v132;

                  long long v134 = v179;
                  *(_OWORD *)(v131 + 16) = v178;
                  *(_OWORD *)(v131 + 32) = v134;
                  long long v135 = v180;
                  long long v136 = v181;
                  long long v137 = v182;
                  *(_DWORD *)(v131 + 96) = v183;
                  *(_OWORD *)(v131 + 64) = v136;
                  *(_OWORD *)(v131 + 80) = v137;
                  *(_OWORD *)(v131 + 48) = v135;
                  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v131 + 104));
                  *(_OWORD *)(v131 + 104) = v184;
                  *(void *)(v131 + 120) = v185;
                  long long v184 = 0uLL;
                  uint64_t v185 = 0;
                  int v173 = (void **)&v184;
                  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v173);

                  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v138, *(void *)(*a2 + (v127 << 7) + 104), *(void *)(*a2 + (v127 << 7) + 112));
                  goto LABEL_263;
                }
                v129 += 128;
              }
              goto LABEL_259;
            }
            int v173 = 0;
            BOOL v174 = 0;
            unint64_t v175 = 0;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::reserve((uint64_t *)&v173, v125 - *((void *)&v187 + 1) + 1);
            CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::flatMergeGroups(a1, a2, (uint64_t)v186, (uint64_t)&v176);
            uint64_t v140 = v174;
            if ((unint64_t)v174 >= v175)
            {
              BOOL v146 = (_DWORD *)std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion>((uint64_t *)&v173, (uint64_t)&v176);
            }
            else
            {
              *BOOL v174 = v176;
              id v141 = v177;
              id v177 = 0;
              *((void *)v140 + 1) = v141;
              long long v142 = v179;
              *((_OWORD *)v140 + 1) = v178;
              *((_OWORD *)v140 + 2) = v142;
              long long v143 = v180;
              long long v144 = v181;
              long long v145 = v182;
              v140[24] = v183;
              *((_OWORD *)v140 + 4) = v144;
              *((_OWORD *)v140 + 5) = v145;
              *((_OWORD *)v140 + 3) = v143;
              *((void *)v140 + 13) = 0;
              *((void *)v140 + 14) = 0;
              *((void *)v140 + 15) = 0;
              *(_OWORD *)(v140 + 26) = v184;
              *((void *)v140 + 15) = v185;
              long long v184 = 0uLL;
              uint64_t v185 = 0;
              BOOL v146 = v140 + 32;
            }
            BOOL v174 = v146;
            uint64_t v201 = (void **)&v184;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v201);

            uint64_t v148 = *a2;
            uint64_t v149 = a2[1];
            if (v149 == *a2)
            {
              uint64_t v148 = a2[1];
            }
            else
            {
              unint64_t v150 = 0;
              do
              {
                if (v186[1])
                {
                  uint8x8_t v151 = (uint8x8_t)vcnt_s8((int8x8_t)v186[1]);
                  v151.i16[0] = vaddlv_u8(v151);
                  if (v151.u32[0] > 1uLL)
                  {
                    unint64_t v152 = v150;
                    if (v186[1] <= (void *)v150) {
                      unint64_t v152 = v150 % (unint64_t)v186[1];
                    }
                  }
                  else
                  {
                    unint64_t v152 = ((unint64_t)v186[1] + 0x7FFFFFFF) & v150;
                  }
                  long long v153 = (uint64_t **)*((void *)v186[0] + v152);
                  if (v153)
                  {
                    for (juint64_t j = *v153; jj; juint64_t j = (uint64_t *)*jj)
                    {
                      unint64_t v155 = jj[1];
                      if (v155 == v150)
                      {
                        if (v150 == *((_DWORD *)jj + 4)) {
                          goto LABEL_295;
                        }
                      }
                      else
                      {
                        if (v151.u32[0] > 1uLL)
                        {
                          if ((void *)v155 >= v186[1]) {
                            v155 %= (unint64_t)v186[1];
                          }
                        }
                        else
                        {
                          v155 &= (unint64_t)v186[1] - 1;
                        }
                        if (v155 != v152) {
                          break;
                        }
                      }
                    }
                  }
                }
                float v156 = v174;
                if ((unint64_t)v174 >= v175)
                {
                  uint64_t v147 = (_DWORD *)std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t *)&v173, v148 + (v150 << 7));
                }
                else
                {
                  std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)&v175, (uint64_t)v174, v148 + (v150 << 7));
                  uint64_t v147 = v156 + 32;
                }
                BOOL v174 = v147;
                uint64_t v148 = *a2;
                uint64_t v149 = a2[1];
LABEL_295:
                ++v150;
              }
              while (v150 < (v149 - v148) >> 7);
            }
            if (&v173 != (void ***)a2)
            {
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__assign_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(a2, (uint64_t)v173, (uint64_t)v174, ((char *)v174 - (char *)v173) >> 7);
              uint64_t v148 = *a2;
              uint64_t v149 = a2[1];
            }
            CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions((uint64_t)v147, v148, v149);
            uint64_t v176 = &v173;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
LABEL_263:
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v186);
            uint64_t v176 = &v196;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);

            int v81 = 1;
LABEL_264:
            __p[0] = &v199;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);

            if ((_BYTE)v170) {
              int v139 = 1;
            }
            else {
              int v139 = v81;
            }
            int v170 = v139;
            uint64_t v14 = v169 | v81;
            if (!v81 || !*((unsigned char *)a1 + 48)) {
              break;
            }
            continue;
          }
          goto LABEL_163;
        }
      }
      int v157 = v170;
      LOBYTE(v170) = 0;
      if (!v157) {
        break;
      }
    }
  }
  if (v14)
  {
    uint64_t v158 = *a2;
    uint64_t v159 = a2[1];
    if (*a2 != v159)
    {
      do
      {
        CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(a1, (const CRTextRecognition::CRCTLD::CTLDRegion *)v158, (uint64_t)v198);
        *(_DWORD *)uint64_t v158 = v198[0];
        uint64_t v160 = v198[1];
        v198[1] = 0;
        uint64_t v161 = *(void **)(v158 + 8);
        *(void *)(v158 + 8) = v160;

        long long v162 = *(_OWORD *)&v198[4];
        *(_OWORD *)(v158 + 16) = *(_OWORD *)&v198[2];
        *(_OWORD *)(v158 + 32) = v162;
        long long v163 = *(_OWORD *)&v198[6];
        long long v164 = *(_OWORD *)&v198[8];
        long long v165 = *(_OWORD *)&v198[10];
        *(_DWORD *)(v158 + 96) = v198[12];
        *(_OWORD *)(v158 + 64) = v164;
        *(_OWORD *)(v158 + 80) = v165;
        *(_OWORD *)(v158 + 48) = v163;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v158 + 104));
        *(_OWORD *)(v158 + 104) = v199;
        *(void *)(v158 + 120) = v200;
        long long v199 = 0uLL;
        uint64_t v200 = 0;
        __p[0] = &v199;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);

        v158 += 128;
      }
      while (v158 != v159);
    }
  }
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::repairOrder((uint64_t)v75, (int **)a2, a5);

  v198[0] = &v171;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
}

void sub_1DD79EDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  *(void *)(v51 - 248) = &a21;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 248));

  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortBlocks(std::vector<CRTextRecognition::CRCTLD::CTLDRegion> &,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,CRLayoutDirection,objc_object  {objcproto14CRCTLDDelegate}*)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 - a1 < 1) {
    goto LABEL_29;
  }
  uint64_t v4 = (uint64_t *)a1;
  uint64_t v5 = (a2 - a1) >> 7;
  uint64_t v7 = *a3;
  unint64_t v6 = a3[1];
  uint64_t v8 = v6 - *a3;
  uint64_t v9 = v8 >> 7;
  uint64_t v10 = *a3 + (v8 & 0xFFFFFFFFFFFFFF80);
  uint64_t v11 = a3[2];
  if (v5 > (uint64_t)(v11 - v6) >> 7)
  {
    unint64_t v12 = v9 + v5;
    if ((unint64_t)(v9 + v5) >> 57) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v11 - v7;
    if (v13 >> 6 > v12) {
      unint64_t v12 = v13 >> 6;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v66 = a3 + 2;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a3 + 2), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v39 = (uint64_t)&v15[128 * v9];
    int v63 = v15;
    *(void *)&long long v64 = v39;
    *((void *)&v64 + 1) = v39;
    float v65 = &v15[128 * v14];
    uint64_t v40 = v5 << 7;
    uint64_t v41 = v39 + (v5 << 7);
    do
    {
      std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)v66, v39, (uint64_t)v4);
      v39 += 128;
      v4 += 16;
      v40 -= 128;
    }
    while (v40);
    *((void *)&v64 + 1) = v41;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>((uint64_t)(a3 + 2), v10, v10, *a3, *a3, v64, v64);
    *(void *)&long long v64 = v42;
    uint64_t v43 = a3[1];
    uint64_t v44 = v41;
    uint64_t v69 = v41;
    uint64_t v70 = v41;
    v67[0] = a3 + 2;
    v67[1] = &v69;
    v67[2] = &v70;
    if (v43 != v10)
    {
      do
      {
        *(_DWORD *)uint64_t v44 = *(_DWORD *)v10;
        uint64_t v45 = *(void *)(v10 + 8);
        *(void *)(v10 + 8) = 0;
        *(void *)(v44 + 8) = v45;
        long long v46 = *(_OWORD *)(v10 + 32);
        *(_OWORD *)(v44 + 16) = *(_OWORD *)(v10 + 16);
        *(_OWORD *)(v44 + 32) = v46;
        long long v47 = *(_OWORD *)(v10 + 48);
        long long v48 = *(_OWORD *)(v10 + 64);
        long long v49 = *(_OWORD *)(v10 + 80);
        *(_DWORD *)(v44 + 96) = *(_DWORD *)(v10 + 96);
        *(_OWORD *)(v44 + 64) = v48;
        *(_OWORD *)(v44 + 80) = v49;
        *(_OWORD *)(v44 + 48) = v47;
        *(void *)(v44 + 112) = 0;
        *(void *)(v44 + 120) = 0;
        *(void *)(v44 + 104) = 0;
        *(_OWORD *)(v44 + 104) = *(_OWORD *)(v10 + 104);
        *(void *)(v44 + 120) = *(void *)(v10 + 120);
        *(void *)(v10 + 104) = 0;
        *(void *)(v10 + 112) = 0;
        *(void *)(v10 + 120) = 0;
        v44 += 128;
        v10 += 128;
      }
      while (v10 != v43);
      uint64_t v70 = v44;
    }
    char v68 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v67);
    long long v50 = *(_OWORD *)a3;
    uint64_t v51 = (uint64_t)v65;
    *a3 = v64;
    a3[1] = v44;
    long long v64 = v50;
    uint64_t v52 = a3[2];
    a3[2] = v51;
    float v65 = (char *)v52;
    int v63 = (char *)v50;
    a1 = std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v63);
    goto LABEL_29;
  }
  uint64_t v16 = (uint64_t)(v6 - v10) >> 7;
  if (v16 >= v5)
  {
    unint64_t v17 = (uint64_t *)(a1 + (v5 << 7));
    uint64_t v18 = a3[1];
    goto LABEL_15;
  }
  unint64_t v17 = (uint64_t *)(a1 + (v16 << 7));
  a1 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((uint64_t)(a3 + 2), (uint64_t)v17, a2, a3[1]);
  uint64_t v18 = a1;
  a3[1] = a1;
  if ((uint64_t)(v6 - v10) >= 1)
  {
LABEL_15:
    uint64_t v19 = v10 + (v5 << 7);
    unint64_t v20 = v18 - (v5 << 7);
    uint64_t v21 = v18;
    if (v20 < v6)
    {
      uint64_t v21 = v18;
      do
      {
        *(_DWORD *)uint64_t v21 = *(_DWORD *)v20;
        uint64_t v22 = *(void *)(v20 + 8);
        *(void *)(v20 + 8) = 0;
        *(void *)(v21 + 8) = v22;
        long long v23 = *(_OWORD *)(v20 + 32);
        *(_OWORD *)(v21 + 16) = *(_OWORD *)(v20 + 16);
        *(_OWORD *)(v21 + 32) = v23;
        long long v24 = *(_OWORD *)(v20 + 48);
        long long v25 = *(_OWORD *)(v20 + 64);
        long long v26 = *(_OWORD *)(v20 + 80);
        *(_DWORD *)(v21 + 96) = *(_DWORD *)(v20 + 96);
        *(_OWORD *)(v21 + 64) = v25;
        *(_OWORD *)(v21 + 80) = v26;
        *(_OWORD *)(v21 + 48) = v24;
        *(void *)(v21 + 112) = 0;
        *(void *)(v21 + 120) = 0;
        *(void *)(v21 + 104) = 0;
        *(_OWORD *)(v21 + 104) = *(_OWORD *)(v20 + 104);
        *(void *)(v21 + 120) = *(void *)(v20 + 120);
        *(void *)(v20 + 104) = 0;
        *(void *)(v20 + 112) = 0;
        *(void *)(v20 + 120) = 0;
        v21 += 128;
        v20 += 128;
      }
      while (v20 < v6);
    }
    a3[1] = v21;
    if (v18 != v19)
    {
      uint64_t v27 = 0;
      uint64_t v28 = (v18 - v19) >> 7;
      uint64_t v29 = v7 + (v9 << 7) + (v28 << 7);
      uint64_t v30 = -128 * v28;
      do
      {
        uint64_t v31 = v29 + v27;
        uint64_t v32 = v18 + v27;
        *(_DWORD *)(v32 - 128) = *(_DWORD *)(v29 + v27 - 128);
        uint64_t v33 = *(void *)(v29 + v27 - 120);
        *(void *)(v29 + v27 - 120) = 0;
        uint64_t v34 = *(void **)(v18 + v27 - 120);
        *(void *)(v32 - 120) = v33;

        long long v35 = *(_OWORD *)(v29 + v27 - 96);
        *(_OWORD *)(v32 - 112) = *(_OWORD *)(v29 + v27 - 112);
        *(_OWORD *)(v32 - 96) = v35;
        long long v36 = *(_OWORD *)(v29 + v27 - 80);
        long long v37 = *(_OWORD *)(v29 + v27 - 64);
        long long v38 = *(_OWORD *)(v29 + v27 - 48);
        *(_DWORD *)(v32 - 32) = *(_DWORD *)(v29 + v27 - 32);
        *(_OWORD *)(v32 - 64) = v37;
        *(_OWORD *)(v32 - 48) = v38;
        *(_OWORD *)(v32 - 80) = v36;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v18 + v27 - 24));
        *(_OWORD *)(v32 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v29 + v27 - 24);
        *(void *)(v32 - 8) = *(void *)(v29 + v27 - 8);
        *(void *)(v31 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        *(void *)(v31 - 16) = 0;
        *(void *)(v31 - 8) = 0;
        v27 -= 128;
      }
      while (v30 != v27);
    }
    a1 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(v4, v17, v10);
  }
LABEL_29:
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(a1, *a3, a3[1]);
  uint64_t v53 = *a3;
  uint64_t v54 = a3[1];
  while (v53 != v54)
  {
    if (*(_DWORD *)v53 == -100)
    {
      if (v53 != v54)
      {
        uint64_t v55 = v53 + 128;
        if (v53 + 128 != v54)
        {
          do
          {
            if (*(_DWORD *)v55 != -100)
            {
              *(_DWORD *)uint64_t v53 = *(_DWORD *)v55;
              uint64_t v56 = *(void *)(v55 + 8);
              *(void *)(v55 + 8) = 0;
              unint64_t v57 = *(void **)(v53 + 8);
              *(void *)(v53 + 8) = v56;

              long long v58 = *(_OWORD *)(v55 + 32);
              *(_OWORD *)(v53 + 16) = *(_OWORD *)(v55 + 16);
              *(_OWORD *)(v53 + 32) = v58;
              long long v59 = *(_OWORD *)(v55 + 48);
              long long v60 = *(_OWORD *)(v55 + 64);
              long long v61 = *(_OWORD *)(v55 + 80);
              *(_DWORD *)(v53 + 96) = *(_DWORD *)(v55 + 96);
              *(_OWORD *)(v53 + 64) = v60;
              *(_OWORD *)(v53 + 80) = v61;
              *(_OWORD *)(v53 + 48) = v59;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v53 + 104));
              *(_OWORD *)(v53 + 104) = *(_OWORD *)(v55 + 104);
              *(void *)(v53 + 120) = *(void *)(v55 + 120);
              *(void *)(v55 + 104) = 0;
              *(void *)(v55 + 112) = 0;
              *(void *)(v55 + 120) = 0;
              v53 += 128;
            }
            v55 += 128;
          }
          while (v55 != v54);
          uint64_t v54 = a3[1];
        }
      }
      if (v53 != v54)
      {
        uint64_t v62 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(v54, v54, v53);
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__base_destruct_at_end[abi:ne180100]((uint64_t)a3, v62);
      }
      return;
    }
    v53 += 128;
  }
}

void sub_1DD79F3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this@<X0>, const CRTextRecognition::CRCTLD::CTLDRegion *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (const CRTextRecognition::CRCTLD::CTLDRegion *)*((void *)a2 + 13);
  unint64_t v6 = (const CRTextRecognition::CRCTLD::CTLDRegion *)*((void *)a2 + 14);
  if (v5 == v6)
  {
LABEL_5:
    *(_DWORD *)a3 = *(_DWORD *)a2;
    id v9 = *((id *)a2 + 1);
    *(void *)(a3 + 104) = 0;
    long long v10 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a3 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a3 + 64) = v10;
    *(_OWORD *)(a3 + 80) = *((_OWORD *)a2 + 5);
    long long v11 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a3 + 16) = *((_OWORD *)a2 + 1);
    *(void *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 96) = *((_DWORD *)a2 + 24);
    *(_OWORD *)(a3 + 32) = v11;
    uint64_t v12 = *((void *)a2 + 13);
    uint64_t v13 = *((void *)a2 + 14);
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 120) = 0;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((void *)(a3 + 104), v12, v13, (v13 - v12) >> 7);
  }
  else
  {
    uint64_t v8 = (const CRTextRecognition::CRCTLD::CTLDRegion *)*((void *)a2 + 13);
    while (*((void *)v8 + 13) == *((void *)v8 + 14))
    {
      uint64_t v8 = (const CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v8 + 128);
      if (v8 == v6) {
        goto LABEL_5;
      }
    }
    *(_DWORD *)a3 = -1;
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 120) = 0;
    *(void *)(a3 + 104) = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 84) = 0u;
    do
    {
      if (*((void *)v5 + 14) == *((void *)v5 + 13))
      {
        CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)a3, v5);
      }
      else
      {
        CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(v16, this, v5);
        unint64_t v14 = (const CRTextRecognition::CRCTLD::CTLDRegion *)v17[0];
        uint64_t v15 = (const CRTextRecognition::CRCTLD::CTLDRegion *)v17[1];
        while (v14 != v15)
        {
          CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)a3, v14);
          unint64_t v14 = (const CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v14 + 128);
        }
        uint64_t v18 = (void **)v17;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v18);
      }
      uint64_t v5 = (const CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v5 + 128);
    }
    while (v5 != v6);
  }
}

void sub_1DD79F540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CTLDRegion::~CTLDRegion(id *this)
{
  uint64_t v2 = this + 13;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::repairOrder(uint64_t a1, int **a2, uint64_t a3)
{
  if (a3 != 5)
  {
    __p = 0;
    unint64_t v42 = 0;
    uint64_t v43 = 0;
    std::vector<BOOL>::reserve((char **)&__p, ((char *)a2[1] - (char *)*a2) >> 7);
    unint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    if (v5 == *a2)
    {
      unint64_t v6 = a2[1];
    }
    else
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = &v6[32 * v7];
        *uint64_t v8 = v7;
        if ([*((id *)v8 + 1) layoutDirection] == 5)
        {
          BOOL v9 = 1;
        }
        else
        {
          long long v10 = &v6[32 * v7];
          uint64_t v13 = *((void *)v10 + 13);
          uint64_t v12 = (uint64_t *)(v10 + 26);
          uint64_t v11 = v13;
          uint64_t v14 = v12[1];
          uint64_t v15 = v13;
          if (v13 == v14)
          {
LABEL_10:
            BOOL v9 = v15 != v11;
          }
          else
          {
            while ([*(id *)(v11 + 8) layoutDirection] == 5)
            {
              v11 += 128;
              if (v11 == v14)
              {
                uint64_t v15 = *v12;
                uint64_t v11 = v12[1];
                goto LABEL_10;
              }
            }
            BOOL v9 = 0;
          }
        }
        BOOL v44 = v9;
        std::vector<BOOL>::push_back((uint64_t)&__p, &v44);
        ++v7;
        unint64_t v6 = *a2;
        uint64_t v5 = a2[1];
      }
      while (v7 < ((char *)v5 - (char *)*a2) >> 7);
    }
    unint64_t v16 = v42;
    if (v42 >= 3)
    {
      unint64_t v17 = __p;
      uint64_t v18 = 2;
      unint64_t v19 = 1;
      do
      {
        unint64_t v20 = v19;
        unint64_t v19 = v18;
        unint64_t v21 = v20 >> 6;
        uint64_t v22 = 1 << v20;
        uint64_t v23 = v17[v20 >> 6];
        if (((1 << v20) & v23) == 0)
        {
          unint64_t v4 = *(void *)((char *)v17 + (((v20 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v4 >> (v20 - 1)) & 1) != 0
            && ((*(void *)((char *)v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
          {
            long long v24 = &v6[32 * v20];
            long long v25 = (float *)*((void *)v24 + 13);
            long long v26 = (float *)*((void *)v24 + 14);
            while (1)
            {
              if (v25 == v26)
              {
                uint64_t v28 = v22 | v23;
                goto LABEL_30;
              }
              float v27 = v25[7] - v25[6];
              if (v27 <= 0.0) {
                float v27 = 1.0;
              }
              if ((float)((float)(v25[5] - v25[4]) / v27) <= 3.0) {
                break;
              }
              v25 += 32;
            }
            uint64_t v28 = v23 & ~v22;
LABEL_30:
            v17[v21] = v28;
            unint64_t v16 = v42;
          }
        }
        uint64_t v18 = v19 + 1;
      }
      while (v19 + 1 < v16);
    }
    for (; v6 != v5; uint64_t v5 = a2[1])
    {
      uint64_t v29 = (char *)v6;
      if ((*(void *)((char *)__p + (((unint64_t)*v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v6))
      {
        while (((*(void *)((char *)__p + (((unint64_t)*(int *)v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)v29) & 1) != 0)
        {
          v29 += 128;
          if (v29 == (char *)v5)
          {
            uint64_t v29 = (char *)v5;
            break;
          }
        }
        if (v29 - (char *)v6 >= 256)
        {
          if (v6 == (int *)v29)
          {
            unint64_t v4 = CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v4, (uint64_t)v6, (uint64_t)v29);
          }
          else
          {
            double v30 = (float)(*((float *)v6 + 6) + *((float *)v6 + 7)) * 0.5;
            double v31 = (float)(*((float *)v6 + 4) + *((float *)v6 + 5)) * 0.5;
            uint64_t v32 = (CRTextRecognition::CRCTLD::CTLDRegion *)v6;
            do
            {
              v45.double x = v30;
              v45.double y = v31;
              CRTextRecognition::CRCTLD::CTLDRegion::rotate(v32, -1.5708, v45);
              uint64_t v32 = (CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v32 + 128);
            }
            while (v32 != (CRTextRecognition::CRCTLD::CTLDRegion *)v29);
            CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v33, (uint64_t)v6, (uint64_t)v29);
            uint64_t v34 = (CRTextRecognition::CRCTLD::CTLDRegion *)v6;
            do
            {
              v46.double x = v30;
              v46.double y = v31;
              CRTextRecognition::CRCTLD::CTLDRegion::rotate(v34, 1.5708, v46);
              uint64_t v34 = (CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v34 + 128);
            }
            while (v34 != (CRTextRecognition::CRCTLD::CTLDRegion *)v29);
          }
        }
        if (v6 != (int *)v29)
        {
          do
          {
            long long v36 = (float *)*((void *)v6 + 13);
            uint64_t v35 = *((void *)v6 + 14);
            if (v35 - (uint64_t)v36 >= 256)
            {
              if (v36 == (float *)v35)
              {
                unint64_t v4 = CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v4, *((void *)v6 + 13), *((void *)v6 + 14));
              }
              else
              {
                double v37 = (float)(v36[6] + v36[7]) * 0.5;
                double v38 = (float)(v36[4] + v36[5]) * 0.5;
                uint64_t v39 = (CRTextRecognition::CRCTLD::CTLDRegion *)*((void *)v6 + 13);
                do
                {
                  v47.double x = v37;
                  v47.double y = v38;
                  CRTextRecognition::CRCTLD::CTLDRegion::rotate(v39, -1.5708, v47);
                  uint64_t v39 = (CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v39 + 128);
                }
                while (v39 != (CRTextRecognition::CRCTLD::CTLDRegion *)v35);
                CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v40, (uint64_t)v36, v35);
                do
                {
                  v48.double x = v37;
                  v48.double y = v38;
                  CRTextRecognition::CRCTLD::CTLDRegion::rotate((CRTextRecognition::CRCTLD::CTLDRegion *)v36, 1.5708, v48);
                  v36 += 32;
                }
                while (v36 != (float *)v35);
              }
            }
            v6 += 32;
          }
          while (v6 != (int *)v29);
          unint64_t v6 = (int *)v29;
        }
      }
      else
      {
        while (((*(void *)((char *)__p + (((unint64_t)*v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v6) & 1) == 0)
        {
          v6 += 32;
          if (v6 == v5)
          {
            unint64_t v6 = v5;
            break;
          }
        }
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1DD79F99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::mergeOverlappingGroups(uint64_t a1@<X0>, void *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a4;
  uint64_t v5 = *a3;
  unint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    uint64_t v33 = 0;
    uint64_t v32 = 0;
    CGPoint v46 = 0;
    unint64_t v47 = 0;
    unint64_t v48 = 0;
  }
  else
  {
    int v7 = -1;
    float v8 = 0.0;
    BOOL v9 = *a3;
    do
    {
      uint64_t v11 = *v9++;
      int v10 = v11;
      uint64_t v12 = (float *)(*a2 + (v11 << 7));
      float v13 = v12[5] - v12[4];
      if ((float)((float)(v12[7] - v12[6]) * v13) > v8)
      {
        int v7 = v10;
        float v8 = (float)(v12[7] - v12[6]) * v13;
      }
    }
    while (v9 != v6);
    CGPoint v46 = 0;
    unint64_t v47 = 0;
    unint64_t v48 = 0;
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = *v5;
      if (v15 == v7)
      {
        uint64_t v16 = *a2 + ((uint64_t)v7 << 7);
        uint64_t v18 = *(void *)(v16 + 104);
        uint64_t v17 = *(void *)(v16 + 112);
        while (v18 != v17)
        {
          LODWORD(v37) = *(_DWORD *)v18;
          double v38 = (void **)*(id *)(v18 + 8);
          long long v19 = *(_OWORD *)(v18 + 32);
          long long v39 = *(_OWORD *)(v18 + 16);
          long long v40 = v19;
          long long v20 = *(_OWORD *)(v18 + 48);
          long long v21 = *(_OWORD *)(v18 + 64);
          long long v22 = *(_OWORD *)(v18 + 80);
          int v44 = *(_DWORD *)(v18 + 96);
          long long v42 = v21;
          long long v43 = v22;
          long long v41 = v20;
          memset(v45, 0, sizeof(v45));
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v45, *(void *)(v18 + 104), *(void *)(v18 + 112), (uint64_t)(*(void *)(v18 + 112) - *(void *)(v18 + 104)) >> 7);
          unint64_t v23 = v47;
          if (v47 >= v48)
          {
            uint64_t v24 = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t *)&v46, (uint64_t)&v37);
          }
          else
          {
            std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)&v48, v47, (uint64_t)&v37);
            uint64_t v24 = v23 + 128;
          }
          unint64_t v47 = v24;
          long long v49 = (void **)v45;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v49);

          v18 += 128;
        }
      }
      else
      {
        uint64_t v25 = *a2 + (v15 << 7);
        unint64_t v26 = v47;
        if (v47 >= v48)
        {
          uint64_t v28 = (uint64_t)(v47 - (void)v46) >> 7;
          if ((unint64_t)(v28 + 1) >> 57) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v29 = (uint64_t)(v48 - (void)v46) >> 6;
          if (v29 <= v28 + 1) {
            unint64_t v29 = v28 + 1;
          }
          if (v48 - (unint64_t)v46 >= 0x7FFFFFFFFFFFFF80) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          *(void *)&long long v40 = &v48;
          if (v30) {
            double v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)&v48, v30);
          }
          else {
            double v31 = 0;
          }
          double v37 = v31;
          double v38 = &v31[16 * v28];
          *(void *)&long long v39 = v38;
          *((void *)&v39 + 1) = &v31[16 * v30];
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>((uint64_t)v38, v25);
          *(void *)&long long v39 = v39 + 128;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer((uint64_t *)&v46, &v37);
          unint64_t v27 = v47;
          a1 = std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v37);
        }
        else
        {
          a1 = (uint64_t)std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v47, v25);
          unint64_t v27 = v26 + 128;
        }
        unint64_t v47 = v27;
      }
      ++v5;
      a2 = v14;
    }
    while (v5 != v6);
    uint64_t v32 = (uint64_t)v46;
    uint64_t v33 = v47;
    uint64_t v4 = a4;
  }
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(a1, v32, v33);
  *(_DWORD *)uint64_t v4 = -1;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 104) = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 84) = 0u;
  uint64_t v34 = v46;
  unint64_t v35 = v47;
  while (v34 != (const CRTextRecognition::CRCTLD::CTLDRegion *)v35)
  {
    CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)v4, v34);
    uint64_t v34 = (const CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v34 + 128);
  }
  double v37 = (void **)&v46;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v37);
}

void sub_1DD79FC9C(_Unwind_Exception *a1)
{
  *(void *)(v1 - 96) = v1 - 120;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::flatMergeGroups@<X0>(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = -1;
  *(void *)(a4 + 104) = 0;
  *(void *)(a4 + 112) = 0;
  *(void *)(a4 + 120) = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  int v7 = (uint64_t **)(a3 + 16);
  *(_OWORD *)(a4 + 84) = 0u;
  while (1)
  {
    int v7 = (uint64_t **)*v7;
    if (!v7) {
      break;
    }
    CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)a4, (const CRTextRecognition::CRCTLD::CTLDRegion *)(*a2 + ((uint64_t)*((int *)v7 + 4) << 7)));
  }
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(this, (const CRTextRecognition::CRCTLD::CTLDRegion *)a4, (uint64_t)&v14);
  *(_DWORD *)a4 = v14;
  id v8 = v15;
  id v15 = 0;
  BOOL v9 = *(void **)(a4 + 8);
  *(void *)(a4 + 8) = v8;

  long long v10 = v19;
  *(_OWORD *)(a4 + 48) = v18;
  *(_OWORD *)(a4 + 64) = v10;
  *(_OWORD *)(a4 + 80) = v20;
  *(_DWORD *)(a4 + 96) = v21;
  long long v11 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  *(_OWORD *)(a4 + 32) = v11;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a4 + 104));
  *(_OWORD *)(a4 + 104) = v22;
  *(void *)(a4 + 120) = v23;
  uint64_t v23 = 0;
  long long v22 = 0uLL;
  uint64_t v24 = (void **)&v22;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v24);

  return CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v12, *(void *)(a4 + 104), *(void *)(a4 + 112));
}

void sub_1DD79FE40(_Unwind_Exception *a1)
{
  CRTextRecognition::CRCTLD::CTLDRegion::~CTLDRegion(v1);
  _Unwind_Resume(a1);
}

float CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::distanceBetweenCenterOfRegions(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2, const CRTextRecognition::CRCTLD::CTLDRegion *a3)
{
  float v3 = (float)(*((float *)a2 + 4) + *((float *)a2 + 5)) * 0.5;
  float v4 = *((float *)a3 + 4) + *((float *)a3 + 5);
  float v5 = (float)((float)(*((float *)a2 + 6) + *((float *)a2 + 7)) * 0.5)
     - (float)((float)(*((float *)a3 + 6) + *((float *)a3 + 7)) * 0.5);
  return (float)((float)(v3 - (float)(v4 * 0.5)) * (float)(v3 - (float)(v4 * 0.5))) + (float)(v5 * v5);
}

BOOL CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkRegionsLayoutDirection(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this, id *a2, id *a3)
{
  if (![a2[1] layoutDirection]
    || ![a3[1] layoutDirection]
    || [a2[1] layoutDirection] != 5 && objc_msgSend(a3[1], "layoutDirection") != 5)
  {
    return 1;
  }
  uint64_t v5 = [a2[1] layoutDirection];
  return v5 == [a3[1] layoutDirection];
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::skipWhitespaceDueToDirectionsSwapped(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, float a6)
{
  uint64_t result = [*(id *)(a2 + 8) layoutDirection];
  if (result)
  {
    uint64_t v13 = [*(id *)(a3 + 8) layoutDirection];
    uint64_t result = 0;
    if (a5)
    {
      if (v13)
      {
        uint64_t v14 = [*(id *)(a2 + 8) layoutDirection];
        uint64_t result = (v14 == [*(id *)(a3 + 8) layoutDirection]
               && [*(id *)(a2 + 8) layoutDirection] != a5
               && [*(id *)(a2 + 8) layoutDirection] == 5
               || (unint64_t)([*(id *)(a2 + 8) layoutDirection] - 1) <= 1
               && (uint64_t v15 = [*(id *)(a3 + 8) layoutDirection], a5 == 5)
               && (unint64_t)(v15 - 1) <= 1)
              && ((float)(a4[7] - a4[6]) < (float)(*(float *)(a1 + 16) * a6)
               || (float)(a4[5] - a4[4]) < (float)(*(float *)(a1 + 12) * a6));
      }
    }
  }
  return result;
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkGroupsMergeConsistency(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *a1, void *a2, const CRTextRecognition::CRCTLD::CTLDRegion *a3, const CRTextRecognition::CRCTLD::CTLDRegion *a4)
{
  id v7 = a2;
  if (v7)
  {
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(a1, a3, (uint64_t)v16);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(a1, a4, (uint64_t)v14);
    uint64_t v8 = v18[0];
    uint64_t v9 = v18[1];
LABEL_3:
    if (v8 == v9)
    {
      uint64_t v12 = 1;
    }
    else
    {
      uint64_t v10 = v15[0];
      uint64_t v11 = v15[1];
      while (1)
      {
        if (v10 == v11)
        {
          v8 += 128;
          goto LABEL_3;
        }
        if ([v7 groupingConstraintForRegion1:*(void *)(v8 + 8) region2:*(void *)(v10 + 8)] == 1) {
          break;
        }
        v10 += 128;
      }
      uint64_t v12 = 0;
    }
    long long v19 = (void **)v15;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v19);

    v14[0] = (void **)v18;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v14);
  }
  else
  {
    uint64_t v12 = 1;
  }

  return v12;
}

void sub_1DD7A013C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  CRTextRecognition::CRCTLD::CTLDRegion::~CTLDRegion(&a26);

  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::preprocessTextRegions(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = a1;
    unint64_t v9 = 0;
    uint64_t v10 = (unint64_t *)(a3 + 2);
    do
    {
      uint64_t v11 = v5 + (v9 << 7);
      float v12 = *(float *)(v11 + 96);
      if (v12 == 0.0)
      {
        unint64_t v13 = a3[1];
        if (v13 >= a3[2])
        {
          uint64_t v14 = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>(a3, v11);
        }
        else
        {
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)(a3 + 2), a3[1], v11);
          uint64_t v14 = v13 + 128;
          a3[1] = v13 + 128;
        }
        a3[1] = v14;
      }
      else if (fabsf(v12) <= *(float *)(v8 + 24))
      {
        LODWORD(v37) = *(_DWORD *)v11;
        uint64_t v27 = v5 + (v9 << 7);
        double v38 = (void **)*(id *)(v27 + 8);
        long long v28 = *(_OWORD *)(v27 + 32);
        long long v39 = *(_OWORD *)(v27 + 16);
        long long v40 = v28;
        long long v29 = *(_OWORD *)(v27 + 48);
        long long v30 = *(_OWORD *)(v27 + 64);
        long long v31 = *(_OWORD *)(v27 + 80);
        int v44 = *(_DWORD *)(v27 + 96);
        long long v42 = v30;
        long long v43 = v31;
        long long v41 = v29;
        memset(v45, 0, 24);
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v45, *(void *)(v27 + 104), *(void *)(v27 + 112), (uint64_t)(*(void *)(v27 + 112) - *(void *)(v27 + 104)) >> 7);
        v46.double x = (float)(*((float *)&v39 + 2) + *((float *)&v39 + 3)) * 0.5;
        v46.double y = (float)(*(float *)&v39 + *((float *)&v39 + 1)) * 0.5;
        CRTextRecognition::CRCTLD::CTLDRegion::rotate((CRTextRecognition::CRCTLD::CTLDRegion *)&v37, -*(float *)(*a2 + (v9 << 7) + 96), v46);
        unint64_t v32 = a3[1];
        if (v32 >= a3[2])
        {
          uint64_t v33 = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>(a3, (uint64_t)&v37);
        }
        else
        {
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)(a3 + 2), a3[1], (uint64_t)&v37);
          uint64_t v33 = v32 + 128;
          a3[1] = v32 + 128;
        }
        a3[1] = v33;
        CRTextRecognition::CRCTLD::CTLDRegion::updateBoundingBox(*a2 + (v9 << 7), *((float *)&v39 + 2), *((float *)&v39 + 3), *(float *)&v39, *((float *)&v39 + 1));
        unint64_t v35 = (void **)v45;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v35);
      }
      else
      {
        CRTextRecognition::CRCTLD::CTLDRegion::splitRegionIntoSubRectangles((float64x2_t *)v11, *(float *)(v8 + 20) * a4, (uint64_t *)&v35);
        uint64_t v15 = (float *)v35;
        long long v16 = (float *)v36;
        if (v35 == v36)
        {
          float v20 = -3.4028e38;
          float v21 = 3.4028e38;
          float v18 = -3.4028e38;
          float v19 = 3.4028e38;
        }
        else
        {
          unint64_t v17 = a3[1];
          float v18 = -3.4028e38;
          float v19 = 3.4028e38;
          float v20 = -3.4028e38;
          float v21 = 3.4028e38;
          do
          {
            if (v17 >= *v10)
            {
              uint64_t v22 = (uint64_t)(v17 - *a3) >> 7;
              if ((unint64_t)(v22 + 1) >> 57) {
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v23 = *v10 - *a3;
              uint64_t v24 = v23 >> 6;
              if (v23 >> 6 <= (unint64_t)(v22 + 1)) {
                uint64_t v24 = v22 + 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFF80) {
                unint64_t v25 = 0x1FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v24;
              }
              *(void *)&long long v40 = a3 + 2;
              if (v25) {
                unint64_t v26 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a3 + 2), v25);
              }
              else {
                unint64_t v26 = 0;
              }
              double v37 = (void ***)v26;
              double v38 = &v26[16 * v22];
              *(void *)&long long v39 = v38;
              *((void *)&v39 + 1) = &v26[16 * v25];
              std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>((uint64_t)v38, (uint64_t)v15);
              *(void *)&long long v39 = v39 + 128;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a3, &v37);
              unint64_t v17 = a3[1];
              std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v37);
            }
            else
            {
              std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v17, (uint64_t)v15);
              v17 += 128;
              a3[1] = v17;
            }
            a3[1] = v17;
            if (v19 >= v15[4]) {
              float v19 = v15[4];
            }
            if (v21 >= v15[6]) {
              float v21 = v15[6];
            }
            if (v15[5] >= v20) {
              float v20 = v15[5];
            }
            if (v15[7] >= v18) {
              float v18 = v15[7];
            }
            v15 += 32;
          }
          while (v15 != v16);
        }
        CRTextRecognition::CRCTLD::CTLDRegion::updateBoundingBox(*a2 + (v9 << 7), v21, v18, v19, v20);
        double v37 = &v35;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
        uint64_t v8 = a1;
      }
      ++v9;
      uint64_t v5 = *a2;
    }
    while (v9 < (a2[1] - *a2) >> 7);
  }
}

void sub_1DD7A04E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  *(void *)(v2 + 8) = v3;
  CRTextRecognition::CRCTLD::CTLDRegion::~CTLDRegion((id *)va1);
  uint64_t v5 = (void **)v2;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

float CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::distanceBetweenGroups(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2, const CRTextRecognition::CRCTLD::CTLDRegion *a3)
{
  if (CRTextRecognition::CRCTLD::CTLDRegion::getIntersectionArea(a2, a3) > 0.0) {
    return 0.0;
  }
  float v6 = *((float *)a2 + 6);
  float v7 = *((float *)a2 + 7);
  float v9 = *((float *)a3 + 6);
  float v8 = *((float *)a3 + 7);
  float v10 = v6 - v8;
  BOOL v11 = v6 <= v8;
  float v12 = 0.0;
  if (!v11) {
    float v12 = (float)(v10 * v10) + 0.0;
  }
  if (v7 < v9) {
    float v12 = v12 + (float)((float)(v9 - v7) * (float)(v9 - v7));
  }
  float v13 = *((float *)a2 + 4);
  float v14 = *((float *)a2 + 5);
  float v16 = *((float *)a3 + 4);
  float v15 = *((float *)a3 + 5);
  BOOL v11 = v13 <= v15;
  float v17 = v12 + (float)((float)(v13 - v15) * (float)(v13 - v15));
  if (!v11) {
    float v12 = v17;
  }
  if (v14 < v16) {
    float v12 = v12 + (float)((float)(v16 - v14) * (float)(v16 - v14));
  }
  return sqrtf(v12);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    float v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    float v8 = *a1;
    int v9 = 0;
    float v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    float v4 = *a1;
    *a1 = v10;
    float v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_1DD7A06B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::groupRegions(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  id v9 = a4;
  float v10 = v9;
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  else
  {
    float CharacterSize = CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getCharacterSize((uint64_t)v9, (double **)a2);
    memset(v14, 0, sizeof(v14));
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v14, *(void *)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 7);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::preprocessTextRegions((uint64_t)a1, v14, (uint64_t *)v13, CharacterSize);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::findWhitespaceRegions((uint64_t)a1, v13, (uint64_t *)v12, CharacterSize);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::findConstrainedBlockRegions((uint64_t)a1, (uint64_t *)a2, v14, v12, a3, v10, a5, CharacterSize);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortBlocks(a1, a5, v14, (uint64_t *)v12, a3, v10);
    float v15 = v12;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    v12[0] = (float *)v13;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
    v13[0] = (void **)v14;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v13);
  }
}

void sub_1DD7A07F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void ***a18)
{
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = (void ***)&a9;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a9 = &a12;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a12 = (void **)&a15;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  *unint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1DD7A08B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    float v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    float v10 = 0;
  }
  long long v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  float v15 = v11;
  float v16 = &v10[24 * v9];
  *(void *)long long v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1DD7A09C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)(a1 + 104);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v3);
}

float std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDNode,CRTextRecognition::CRCTLD::CTLDNode&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(id *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  int v7 = *(_DWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v9 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((void *)(a1 + 104), *(void *)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 7);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<CRTextRecognition::CRCTLD::CTLDObstacle>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDObstacle*,CRTextRecognition::CRCTLD::CTLDObstacle*>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4);
  float result = *(float *)(a2 + 152);
  *(float *)(a1 + 152) = result;
  return result;
}

void sub_1DD7A0AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<CRTextRecognition::CRCTLD::CTLDNode>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::destroy[abi:ne180100](i - 160);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDNode *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    v45[2] = v6;
    void v45[3] = v5;
    v45[14] = v3;
    v45[15] = v4;
    unint64_t v8 = (unint64_t)(a3 - 2) >> 1;
    float v9 = *(float *)(a2 - 8);
    if (*(float *)(a1 + 160 * v8 + 152) < v9)
    {
      uint64_t v10 = a2 - 160;
      int v28 = *(_DWORD *)(a2 - 160);
      uint64_t v11 = *(void *)(a2 - 152);
      *(void *)(v10 + 8) = 0;
      uint64_t v27 = v11;
      long long v32 = *(_OWORD *)(a2 - 144);
      long long v33 = *(_OWORD *)(a2 - 128);
      int v37 = *(_DWORD *)(a2 - 64);
      long long v35 = *(_OWORD *)(a2 - 96);
      long long v36 = *(_OWORD *)(a2 - 80);
      long long v34 = *(_OWORD *)(a2 - 112);
      uint64_t v26 = *(void *)(a2 - 56);
      uint64_t v38 = v26;
      uint64_t v25 = *(void *)(a2 - 48);
      uint64_t v39 = v25;
      uint64_t v24 = *(void *)(a2 - 40);
      uint64_t v40 = v24;
      *(void *)(v10 + 112) = 0;
      *(void *)(v10 + 120) = 0;
      *(void *)(v10 + 104) = 0;
      long long v30 = *(void **)(a2 - 32);
      long long v41 = v30;
      uint64_t v31 = *(void *)(a2 - 24);
      uint64_t v42 = v31;
      uint64_t v29 = *(void *)(a2 - 16);
      uint64_t v43 = v29;
      *(void *)(v10 + 128) = 0;
      *(void *)(v10 + 136) = 0;
      *(void *)(v10 + 144) = 0;
      float v44 = v9;
      do
      {
        unint64_t v12 = v8;
        uint64_t v13 = v10;
        uint64_t v10 = a1 + 160 * v8;
        *(_DWORD *)uint64_t v13 = *(_DWORD *)v10;
        uint64_t v14 = *(void *)(v10 + 8);
        *(void *)(v10 + 8) = 0;
        float v15 = *(void **)(v13 + 8);
        *(void *)(v13 + 8) = v14;

        long long v16 = *(_OWORD *)(v10 + 32);
        *(_OWORD *)(v13 + 16) = *(_OWORD *)(v10 + 16);
        *(_OWORD *)(v13 + 32) = v16;
        long long v17 = *(_OWORD *)(v10 + 48);
        long long v18 = *(_OWORD *)(v10 + 64);
        long long v19 = *(_OWORD *)(v10 + 80);
        *(_DWORD *)(v13 + 96) = *(_DWORD *)(v10 + 96);
        *(_OWORD *)(v13 + 64) = v18;
        *(_OWORD *)(v13 + 80) = v19;
        *(_OWORD *)(v13 + 48) = v17;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v13 + 104));
        *(_OWORD *)(v13 + 104) = *(_OWORD *)(v10 + 104);
        *(void *)(v13 + 120) = *(void *)(v10 + 120);
        *(void *)(v10 + 104) = 0;
        *(void *)(v10 + 112) = 0;
        *(void *)(v10 + 120) = 0;
        float v20 = (void **)(v10 + 128);
        std::vector<int>::__move_assign(v13 + 128, (__n128 *)(v10 + 128));
        *(_DWORD *)(v13 + 152) = *(_DWORD *)(v10 + 152);
        if (!v12) {
          break;
        }
        unint64_t v8 = (v12 - 1) >> 1;
      }
      while (*(float *)(a1 + 160 * v8 + 152) < v9);
      *(_DWORD *)uint64_t v10 = v28;
      float v21 = *(void **)(v10 + 8);
      *(void *)(v10 + 8) = v27;

      *(_OWORD *)(v10 + 16) = v32;
      *(_OWORD *)(v10 + 32) = v33;
      *(_DWORD *)(v10 + 96) = v37;
      *(_OWORD *)(v10 + 64) = v35;
      *(_OWORD *)(v10 + 80) = v36;
      *(_OWORD *)(v10 + 48) = v34;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v10 + 104));
      *(void *)(v10 + 104) = v26;
      *(void *)(v10 + 112) = v25;
      *(void *)(v10 + 120) = v24;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v22 = *v20;
      if (*v20)
      {
        *(void *)(a1 + 160 * v12 + 136) = v22;
        operator delete(v22);
        *float v20 = 0;
        *(void *)(v10 + 136) = 0;
        *(void *)(v10 + 144) = 0;
      }
      *float v20 = v30;
      uint64_t v23 = a1 + 160 * v12;
      *(void *)(v23 + 136) = v31;
      *(void *)(v23 + 144) = v29;
      long long v41 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      *(float *)(v10 + 152) = v9;
      v45[0] = (void **)&v38;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v45);
    }
  }
}

void *std::vector<CRTextRecognition::CRCTLD::CTLDObstacle>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDObstacle*,CRTextRecognition::CRCTLD::CTLDObstacle*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v4 = result;
    if (a4 >> 60) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    float result = std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(a4);
    int v7 = result;
    *long long v4 = result;
    v4[1] = result;
    _WORD v4[2] = &result[2 * v8];
    uint64_t v9 = a3 - (void)a2;
    if (v9) {
      float result = memmove(result, a2, v9 - 7);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1DD7A0E54(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void std::vector<CRTextRecognition::CRCTLD::CTLDNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

CRTextRecognition::CRCTLD::CTLDMFSet *CRTextRecognition::CRCTLD::CTLDMFSet::CTLDMFSet(CRTextRecognition::CRCTLD::CTLDMFSet *this, int a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<int>::value_type __x = -1;
  std::vector<int>::vector(&v6, a2, &__x);
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  *(std::vector<int> *)this = v6;
  return this;
}

void sub_1DD7A0FA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::__unordered_map_hasher<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = a1 + 2;
  uint64_t v10 = (char *)operator new(0x98uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 6) = -1;
  *((void *)v10 + 17) = 0;
  *((void *)v10 + 18) = 0;
  *((void *)v10 + 16) = 0;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *(_OWORD *)(v10 + 108) = 0u;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = a1[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v19 = operator new(8 * *(void *)&prime);
          float v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          uint64_t v22 = (void *)*v12;
          if (*v12)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v23) = v12;
            int v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*a1 + 8 * v29))
                  {
                    *(void *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *uint64_t v22 = *v28;
                  *int v28 = **(void **)(*a1 + 8 * v29);
                  **(void **)(*a1 + 8 * v29) = v28;
                  int v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                uint64_t v22 = v28;
                int v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        long long v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v30 = *a1;
  uint64_t v31 = *(void **)(*a1 + 8 * v3);
  if (v31)
  {
    *(void *)uint64_t v10 = *v31;
LABEL_72:
    *uint64_t v31 = v10;
    goto LABEL_73;
  }
  *(void *)uint64_t v10 = *v12;
  *unint64_t v12 = v10;
  *(void *)(v30 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v32 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_1DD7A13BC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
    unint64_t v3 = a2 + 16;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__assign_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  if (a4 > (a1[2] - *a1) >> 7)
  {
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(a1);
    if (a4 >> 57) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = a1[2] - *a1;
    uint64_t v10 = v9 >> 6;
    if (v9 >> 6 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  unint64_t v13 = (a1[1] - *a1) >> 7;
  if (v13 < a4)
  {
    uint64_t v14 = a2 + (v13 << 7);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(a2, v14);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v8, v14, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  uint64_t v15 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(a2, a3);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, v15);
}

void sub_1DD7A155C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DD7A1564(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>(a1, v4, v6);
      v6 += 128;
      uint64_t v4 = v12 + 128;
      v12 += 128;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1DD7A1684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 8) = *(id *)(a3 + 8);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 64);
  long long v7 = *(_OWORD *)(a3 + 80);
  int v8 = *(_DWORD *)(a3 + 96);
  long long v9 = *(_OWORD *)(a3 + 16);
  long long v10 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 48) = v5;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  return std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((void *)(a2 + 104), *(void *)(a3 + 104), *(void *)(a3 + 112), (uint64_t)(*(void *)(a3 + 112) - *(void *)(a3 + 104)) >> 7);
}

void sub_1DD7A1714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::__allocator_destroy[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    v9[5] = v5;
    v9[6] = v6;
    uint64_t v8 = a3;
    do
    {
      v9[0] = (void **)(v8 - 24);
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v9);

      v8 -= 128;
    }
    while (v8 != a5);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    long long v5 = a1 + 14;
    do
    {
      long long v6 = v5 - 14;
      *(_DWORD *)a3 = *((_DWORD *)v5 - 28);
      objc_storeStrong((id *)(a3 + 8), (id)*(v5 - 13));
      long long v7 = *((_OWORD *)v5 - 5);
      *(_OWORD *)(a3 + 16) = *((_OWORD *)v5 - 6);
      *(_OWORD *)(a3 + 32) = v7;
      long long v8 = *((_OWORD *)v5 - 4);
      long long v9 = *((_OWORD *)v5 - 3);
      long long v10 = *((_OWORD *)v5 - 2);
      *(_DWORD *)(a3 + 96) = *((_DWORD *)v5 - 4);
      *(_OWORD *)(a3 + 64) = v9;
      *(_OWORD *)(a3 + 80) = v10;
      *(_OWORD *)(a3 + 48) = v8;
      if ((uint64_t *)a3 != v5 - 14) {
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__assign_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((uint64_t *)(a3 + 104), *(v5 - 1), *v5, (*v5 - *(v5 - 1)) >> 7);
      }
      a3 += 128;
      v5 += 16;
    }
    while (v6 + 16 != a2);
  }
  return a3;
}

void std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 128)
  {
    long long v5 = (void **)(i - 24);
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  *(void *)(a1 + 8) = a2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 7);
}

void *std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(id *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  int v7 = *(_DWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v9 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  return std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((void *)(a1 + 104), *(void *)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 7);
}

void sub_1DD7A19A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 128);
      a3 -= 128;
      *(_DWORD *)(v7 - 128) = v8;
      uint64_t v9 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(v7 - 120) = v9;
      long long v10 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v7 - 112) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v7 - 96) = v10;
      long long v11 = *(_OWORD *)(a3 + 48);
      long long v12 = *(_OWORD *)(a3 + 64);
      long long v13 = *(_OWORD *)(a3 + 80);
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 + 96);
      *(_OWORD *)(v7 - 64) = v12;
      *(_OWORD *)(v7 - 48) = v13;
      *(_OWORD *)(v7 - 80) = v11;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(_OWORD *)(v7 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a3 + 104);
      *(void *)(v7 - 8) = *(void *)(a3 + 120);
      *(void *)(a3 + 104) = 0;
      *(void *)(a3 + 112) = 0;
      *(void *)(a3 + 120) = 0;
      uint64_t v7 = *((void *)&v19 + 1) - 128;
      *((void *)&v19 + 1) -= 128;
    }
    while (a3 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>,std::reverse_iterator<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>,std::reverse_iterator<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = (void **)(i + 104);
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v6);

    uint64_t i = *(void *)(a2 + 32) + 128;
  }
}

uint64_t std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    uint64_t v5 = (void **)(i - 24);
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::__unordered_map_hasher<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (id *)*v2;
      uint64_t v6 = v2 + 16;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v6);

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(int *a1, __n128 *a2, int a3, __n128 a4)
{
  if (a1 != (int *)a2)
  {
    uint64_t v6 = (__n128 *)(a1 + 32);
    if (a1 + 32 != (int *)a2)
    {
      if (a3 <= 63)
      {
        uint64_t v7 = a1;
        do
        {
          if ((float)(*((float *)v7 + 5) - *((float *)v7 + 4)) < (float)(v6[1].n128_f32[1] - v6[1].n128_f32[0])) {
            uint64_t v7 = (int *)v6;
          }
          v6 += 8;
        }
        while (v6 != a2);
        int v8 = (__n128 *)(v7 + 4);
        a4.n128_f32[0] = *((float *)v7 + 5) - *((float *)v7 + 4);
        uint64_t v9 = (__n128 *)a1;
        do
        {
          float v10 = v9[1].n128_f32[1] - v9[1].n128_f32[0];
          if (v10 == 0.0)
          {
            if (a4.n128_f32[0] > 0.0) {
              goto LABEL_18;
            }
          }
          else if (a4.n128_f32[0] / v10 > 1.1)
          {
LABEL_18:
            LODWORD(v65) = *v7;
            unsigned __int32 v14 = v65;
            unint64_t v15 = *((void *)v7 + 1);
            *((void *)v7 + 1) = 0;
            __n128 v16 = *((__n128 *)v7 + 2);
            __n128 v67 = *v8;
            __n128 v68 = v16;
            __n128 v17 = *((__n128 *)v7 + 3);
            __n128 v18 = *((__n128 *)v7 + 4);
            __n128 v19 = *((__n128 *)v7 + 5);
            int v72 = v7[24];
            __n128 v70 = v18;
            __n128 v71 = v19;
            __n128 v69 = v17;
            unint64_t v62 = *((void *)v7 + 15);
            long long v61 = *(_OWORD *)(v7 + 26);
            *((void *)v7 + 14) = 0;
            *((void *)v7 + 15) = 0;
            *((void *)v7 + 13) = 0;
            float v20 = a2 - 8;
            uint64_t v21 = a2 - 7;
            *uint64_t v7 = a2[-8].n128_i32[0];
            unint64_t v22 = a2[-8].n128_u64[1];
            a2[-8].n128_u64[1] = 0;
            unint64_t v23 = (void *)*((void *)v7 + 1);
            *((void *)v7 + 1) = v22;

            __n128 v24 = a2[-6];
            *int v8 = a2[-7];
            *((__n128 *)v7 + 2) = v24;
            __n128 v25 = a2[-5];
            __n128 v26 = a2[-4];
            __n128 v27 = a2[-3];
            v7[24] = a2[-2].n128_i32[0];
            *((__n128 *)v7 + 4) = v26;
            *((__n128 *)v7 + 5) = v27;
            *((__n128 *)v7 + 3) = v25;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v7 + 13);
            int v28 = &a2[-2].n128_u64[1];
            *(__n128 *)(v7 + 26) = *(__n128 *)((char *)a2 - 24);
            *((void *)v7 + 15) = a2[-1].n128_u64[1];
            *int v28 = 0;
            v28[1] = 0;
            v28[2] = 0;
            v20->n128_u32[0] = v14;
            id v66 = 0;
            unint64_t v29 = (void *)a2[-8].n128_u64[1];
            a2[-8].n128_u64[1] = v15;

            __n128 v30 = v68;
            a2[-7] = v67;
            a2[-6] = v30;
            __n128 v31 = v69;
            __n128 v32 = v70;
            __n128 v33 = v71;
            a2[-2].n128_u32[0] = v72;
            a2[-4] = v32;
            a2[-3] = v33;
            a2[-5] = v31;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(&a2[-2].n128_i64[1]);
            *(_OWORD *)int v28 = v61;
            a2[-1].n128_u64[1] = v62;
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            uint64_t v75 = 0;
            v76[0] = (void **)&v73;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v76);

            float v65 = a2 - 8;
            if (v20 == (__n128 *)a1)
            {
              long long v35 = a1;
            }
            else
            {
              uint64_t v34 = (uint64_t)a1;
              long long v35 = a1;
              while ((CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)v35, (uint64_t)&a2[-8]) & 1) != 0)
              {
                v35 += 32;
                v34 += 128;
                if (v35 == (int *)v20)
                {
                  long long v35 = (int *)&a2[-8];
                  goto LABEL_38;
                }
              }
              long long v36 = (int *)&a2[-8];
              uint64_t v37 = (uint64_t)&a2[-16];
              uint64_t v38 = (uint64_t)&a2[-8] - v34;
              while (v35 != (int *)v37)
              {
                int v39 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v37, (uint64_t)&a2[-8]);
                v36 -= 32;
                v38 -= 128;
                v37 -= 128;
                if (v39)
                {
                  if (v38 < 257)
                  {
                    uint64_t v40 = 0;
                    uint64_t v42 = 0;
                  }
                  else
                  {
                    uint64_t v40 = std::get_temporary_buffer[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>((v38 >> 7) + 1);
                    uint64_t v42 = v41;
                  }
                  long long v35 = std::__stable_partition_impl<std::_ClassicAlgPolicy,void CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>,int)::{lambda(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> const&)#2} &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,long,std::pair<CRTextRecognition::CRCTLD::CTLDRegion *,long>>(v34, v36, (uint64_t *)&v65, (v38 >> 7) + 1, (unint64_t)v40, v42);
                  if (v40) {
                    operator delete(v40);
                  }
                  break;
                }
              }
            }
LABEL_38:
            LODWORD(v65) = a2[-8].n128_u32[0];
            int v43 = (int)v65;
            unint64_t v44 = a2[-8].n128_u64[1];
            a2[-8].n128_u64[1] = 0;
            __n128 v45 = a2[-6];
            __n128 v67 = *v21;
            __n128 v68 = v45;
            __n128 v46 = a2[-5];
            __n128 v47 = a2[-4];
            __n128 v48 = a2[-3];
            int v72 = a2[-2].n128_i32[0];
            __n128 v70 = v47;
            __n128 v71 = v48;
            __n128 v69 = v46;
            unint64_t v49 = a2[-1].n128_u64[1];
            long long v63 = *(long long *)((char *)&a2[-2] + 8);
            *int v28 = 0;
            a2[-1].n128_u64[0] = 0;
            a2[-1].n128_u64[1] = 0;
            a2[-8].n128_u32[0] = *v35;
            unint64_t v50 = *((void *)v35 + 1);
            *((void *)v35 + 1) = 0;
            uint64_t v51 = (void *)a2[-8].n128_u64[1];
            a2[-8].n128_u64[1] = v50;

            __n128 v52 = *((__n128 *)v35 + 2);
            *uint64_t v21 = *((__n128 *)v35 + 1);
            a2[-6] = v52;
            __n128 v53 = *((__n128 *)v35 + 3);
            __n128 v54 = *((__n128 *)v35 + 4);
            __n128 v55 = *((__n128 *)v35 + 5);
            a2[-2].n128_u32[0] = v35[24];
            a2[-4] = v54;
            a2[-3] = v55;
            a2[-5] = v53;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(&a2[-2].n128_i64[1]);
            *(__n128 *)((char *)a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(__n128 *)(v35 + 26);
            a2[-1].n128_u64[1] = *((void *)v35 + 15);
            *((void *)v35 + 13) = 0;
            *((void *)v35 + 14) = 0;
            *((void *)v35 + 15) = 0;
            int *v35 = v43;
            id v66 = 0;
            uint64_t v56 = (void *)*((void *)v35 + 1);
            *((void *)v35 + 1) = v44;

            __n128 v57 = v68;
            *((__n128 *)v35 + 1) = v67;
            *((__n128 *)v35 + 2) = v57;
            __n128 v58 = v69;
            __n128 v59 = v70;
            __n128 v60 = v71;
            unsigned char v35[24] = v72;
            *((__n128 *)v35 + 4) = v59;
            *((__n128 *)v35 + 5) = v60;
            *((__n128 *)v35 + 3) = v58;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v35 + 13);
            *(_OWORD *)(v35 + 26) = v63;
            *((void *)v35 + 15) = v49;
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            uint64_t v75 = 0;
            v76[0] = (void **)&v73;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v76);

            CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(a1, v35, (a3 + 1));
            CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(v35 + 32, a2, (a3 + 1));
            return;
          }
          v9 += 8;
        }
        while (v9 != a2);
        if ((char *)a2 - (char *)a1 >= 1) {
          goto LABEL_17;
        }
        uint64_t v11 = 0;
        uint64_t v13 = 0;
      }
      else if ((char *)a2 - (char *)a1 < 1)
      {
        uint64_t v11 = 0;
        uint64_t v13 = 0;
      }
      else
      {
LABEL_17:
        uint64_t v11 = std::get_temporary_buffer[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(((char *)a2 - (char *)a1) >> 7);
        uint64_t v13 = v12;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(a1, a2, ((char *)a2 - (char *)a1) >> 7, (uint64_t)v11, v13, a4);
      if (v11)
      {
        operator delete(v11);
      }
    }
  }
}

void sub_1DD7A2210(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(v1 << 7, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      if (a2[-7].n128_f32[2] < a1[1].n128_f32[2])
      {
        int v8 = (int *)&a2[-8];
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)a1, v8);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        unint64_t v15 = a1 + 8;
        if (&a1[8] != a2)
        {
          uint64_t v16 = 0;
          __n128 v17 = a1;
          do
          {
            __n128 v18 = v15;
            if (v17[9].n128_f32[2] < v17[1].n128_f32[2])
            {
              LODWORD(v72) = v15->n128_u32[0];
              __n128 v19 = (void *)v17[8].n128_u64[1];
              v17[8].n128_u64[1] = 0;
              id v73 = v19;
              __n128 v20 = v17[12];
              __n128 v76 = v17[11];
              __n128 v77 = v20;
              __n128 v78 = v17[13];
              unsigned __int32 v79 = v17[14].n128_u32[0];
              __n128 v21 = v17[10];
              __n128 v74 = v17[9];
              __n128 v75 = v21;
              long long v80 = *(long long *)((char *)&v17[14] + 8);
              unint64_t v81 = v17[15].n128_u64[1];
              v17[14].n128_u64[1] = 0;
              v17[15].n128_u64[0] = 0;
              uint64_t v22 = v16;
              v17[15].n128_u64[1] = 0;
              while (1)
              {
                unint64_t v23 = (char *)a1 + v22;
                *((_DWORD *)v23 + 32) = *(unsigned __int32 *)((char *)a1->n128_u32 + v22);
                uint64_t v24 = *(uint64_t *)((char *)&a1->n128_i64[1] + v22);
                *((void *)v23 + 1) = 0;
                __n128 v25 = *(void **)((char *)&a1[8].n128_u64[1] + v22);
                *((void *)v23 + 17) = v24;

                long long v26 = *(long long *)((char *)&a1[4] + v22);
                *((_OWORD *)v23 + 11) = *((_OWORD *)v23 + 3);
                *((_OWORD *)v23 + 12) = v26;
                *((_OWORD *)v23 + 13) = *((_OWORD *)v23 + 5);
                *((_DWORD *)v23 + 56) = *((_DWORD *)v23 + 24);
                long long v27 = *(long long *)((char *)&a1[2] + v22);
                *((_OWORD *)v23 + 9) = *((_OWORD *)v23 + 1);
                *((_OWORD *)v23 + 10) = v27;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)((char *)&a1[14].n128_i64[1]
                                                                                            + v22));
                *(_OWORD *)(v23 + 232) = *(_OWORD *)(v23 + 104);
                *((void *)v23 + 31) = *((void *)v23 + 15);
                *((void *)v23 + 14) = 0;
                *((void *)v23 + 15) = 0;
                *((void *)v23 + 13) = 0;
                if (!v22) {
                  break;
                }
                v22 -= 128;
                if (v74.n128_f32[2] >= *((float *)v23 - 26))
                {
                  uint64_t v28 = (uint64_t)&a1[8] + v22;
                  goto LABEL_21;
                }
              }
              uint64_t v28 = (uint64_t)a1;
LABEL_21:
              *(_DWORD *)uint64_t v28 = v72;
              id v29 = v73;
              id v73 = 0;
              __n128 v30 = *(void **)(v28 + 8);
              *(void *)(v28 + 8) = v29;

              __n128 v31 = v75;
              *((__n128 *)v23 + 1) = v74;
              *((__n128 *)v23 + 2) = v31;
              __n128 v32 = v76;
              __n128 v33 = v77;
              __n128 v34 = v78;
              *((_DWORD *)v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v79;
              *((__n128 *)v23 + 4) = v33;
              *((__n128 *)v23 + 5) = v34;
              *((__n128 *)v23 + 3) = v32;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v23 + 13);
              *((void *)v23 + 13) = v80;
              *(void *)(v28 + 112) = *((void *)&v80 + 1);
              *(void *)(v28 + 120) = v81;
              long long v80 = 0uLL;
              unint64_t v81 = 0;
              uint64_t v82 = (void **)&v80;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v82);
            }
            unint64_t v15 = v18 + 8;
            v16 += 128;
            __n128 v17 = v18;
          }
          while (&v18[8] != a2);
        }
      }
    }
    else
    {
      uint64_t v12 = a3 >> 1;
      uint64_t v13 = (uint64_t)&a1[8 * (a3 >> 1)];
      if ((uint64_t)a3 <= a5)
      {
        __n128 v35 = _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeE(a1, &a1[8 * (a3 >> 1)], a3 >> 1, a4, a6);
        uint64_t v36 = a4 + (v12 << 7);
        _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeE(&a1[8 * (a3 >> 1)], a2, a3 - v12, v36, v35);
        unint64_t v72 = a3;
        uint64_t v37 = &a1[7].n128_u64[1];
        uint64_t v38 = v36;
        uint64_t v39 = a4;
        uint64_t v40 = (void *)(a4 + (a3 << 7));
        while ((void *)v38 != v40)
        {
          uint64_t v41 = v37 - 13;
          if (*(float *)(v38 + 24) >= *(float *)(v39 + 24))
          {
            *((_DWORD *)v37 - 30) = *(_DWORD *)v39;
            unint64_t v48 = *(void *)(v39 + 8);
            *(void *)(v39 + 8) = 0;
            unint64_t v49 = (void *)*(v37 - 14);
            *(v37 - 14) = v48;

            long long v50 = *(_OWORD *)(v39 + 32);
            *(_OWORD *)uint64_t v41 = *(_OWORD *)(v39 + 16);
            *(_OWORD *)(v37 - 11) = v50;
            long long v51 = *(_OWORD *)(v39 + 48);
            long long v52 = *(_OWORD *)(v39 + 64);
            long long v53 = *(_OWORD *)(v39 + 80);
            *((_DWORD *)v37 - 6) = *(_DWORD *)(v39 + 96);
            *(_OWORD *)(v37 - 7) = v52;
            *(_OWORD *)(v37 - 5) = v53;
            *(_OWORD *)(v37 - 9) = v51;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v37 - 2);
            *((_OWORD *)v37 - 1) = *(_OWORD *)(v39 + 104);
            unint64_t *v37 = *(void *)(v39 + 120);
            *(void *)(v39 + 104) = 0;
            *(void *)(v39 + 112) = 0;
            *(void *)(v39 + 120) = 0;
            v39 += 128;
          }
          else
          {
            *((_DWORD *)v37 - 30) = *(_DWORD *)v38;
            unint64_t v42 = *(void *)(v38 + 8);
            *(void *)(v38 + 8) = 0;
            int v43 = (void *)*(v37 - 14);
            *(v37 - 14) = v42;

            long long v44 = *(_OWORD *)(v38 + 32);
            *(_OWORD *)uint64_t v41 = *(_OWORD *)(v38 + 16);
            *(_OWORD *)(v37 - 11) = v44;
            long long v45 = *(_OWORD *)(v38 + 48);
            long long v46 = *(_OWORD *)(v38 + 64);
            long long v47 = *(_OWORD *)(v38 + 80);
            *((_DWORD *)v37 - 6) = *(_DWORD *)(v38 + 96);
            *(_OWORD *)(v37 - 7) = v46;
            *(_OWORD *)(v37 - 5) = v47;
            *(_OWORD *)(v37 - 9) = v45;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v37 - 2);
            *((_OWORD *)v37 - 1) = *(_OWORD *)(v38 + 104);
            unint64_t *v37 = *(void *)(v38 + 120);
            *(void *)(v38 + 104) = 0;
            *(void *)(v38 + 112) = 0;
            *(void *)(v38 + 120) = 0;
            v38 += 128;
          }
          v37 += 16;
          if (v39 == v36)
          {
            if ((void *)v38 != v40)
            {
              unint64_t v54 = 0;
              do
              {
                __n128 v55 = (void *)(v38 + v54);
                uint64_t v56 = &v37[v54 / 8];
                *((_DWORD *)v56 - 30) = *(_DWORD *)(v38 + v54);
                unint64_t v57 = *(void *)(v38 + v54 + 8);
                *(void *)(v38 + v54 + 8) = 0;
                __n128 v58 = (void *)v37[v54 / 8 - 14];
                *(v56 - 14) = v57;

                long long v59 = *(_OWORD *)(v38 + v54 + 16);
                *(_OWORD *)(v56 - 11) = *(_OWORD *)(v38 + v54 + 32);
                *(_OWORD *)(v56 - 13) = v59;
                long long v60 = *(_OWORD *)(v38 + v54 + 48);
                long long v61 = *(_OWORD *)(v38 + v54 + 64);
                long long v62 = *(_OWORD *)(v38 + v54 + 80);
                *((_DWORD *)v56 - 6) = *(_DWORD *)(v38 + v54 + 96);
                *(_OWORD *)(v56 - 5) = v62;
                *(_OWORD *)(v56 - 7) = v61;
                *(_OWORD *)(v56 - 9) = v60;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)&v37[v54 / 8 - 2]);
                *((_OWORD *)v56 - 1) = *(_OWORD *)(v38 + v54 + 104);
                *uint64_t v56 = *(void *)(v38 + v54 + 120);
                v55[13] = 0;
                v55[14] = 0;
                v55[15] = 0;
                v54 += 128;
              }
              while (v55 + 16 != v40);
            }
            goto LABEL_37;
          }
        }
        if (v39 != v36)
        {
          unint64_t v63 = 0;
          do
          {
            long long v64 = (void *)(v39 + v63);
            float v65 = &v37[v63 / 8];
            *((_DWORD *)v65 - 30) = *(_DWORD *)(v39 + v63);
            unint64_t v66 = *(void *)(v39 + v63 + 8);
            *(void *)(v39 + v63 + 8) = 0;
            __n128 v67 = (void *)v37[v63 / 8 - 14];
            *(v65 - 14) = v66;

            long long v68 = *(_OWORD *)(v39 + v63 + 16);
            *(_OWORD *)(v65 - 11) = *(_OWORD *)(v39 + v63 + 32);
            *(_OWORD *)(v65 - 13) = v68;
            long long v69 = *(_OWORD *)(v39 + v63 + 48);
            long long v70 = *(_OWORD *)(v39 + v63 + 64);
            long long v71 = *(_OWORD *)(v39 + v63 + 80);
            *((_DWORD *)v65 - 6) = *(_DWORD *)(v39 + v63 + 96);
            *(_OWORD *)(v65 - 5) = v71;
            *(_OWORD *)(v65 - 7) = v70;
            *(_OWORD *)(v65 - 9) = v69;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)&v37[v63 / 8 - 2]);
            *((_OWORD *)v65 - 1) = *(_OWORD *)(v39 + v63 + 104);
            *float v65 = *(void *)(v39 + v63 + 120);
            v64[13] = 0;
            v64[14] = 0;
            v64[15] = 0;
            v63 += 128;
          }
          while (v64 + 16 != (void *)v36);
        }
LABEL_37:
        if (a4) {
          std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&v72, a4);
        }
      }
      else
      {
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(a1, &a1[8 * (a3 >> 1)], a3 >> 1, a4, a5);
        uint64_t v14 = a3 - v12;
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(v13, a2, v14, a4, a5);
        _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SI_OSD_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl((uint64_t)a1, v13, (uint64_t)a2, v12, v14, a4, a5);
      }
    }
  }
}

void sub_1DD7A27C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>(int *a1, int *a2)
{
  int v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  long long v18 = *((_OWORD *)a1 + 3);
  long long v19 = *((_OWORD *)a1 + 4);
  long long v20 = *((_OWORD *)a1 + 5);
  int v21 = a1[24];
  long long v16 = *((_OWORD *)a1 + 1);
  long long v17 = *((_OWORD *)a1 + 2);
  uint64_t v6 = *((void *)a1 + 15);
  uint64_t v7 = (uint64_t *)(a1 + 26);
  long long v15 = *(_OWORD *)(a1 + 26);
  *((void *)a1 + 13) = 0;
  *((void *)a1 + 14) = 0;
  *((void *)a1 + 15) = 0;
  *a1 = *a2;
  uint64_t v8 = *((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  uint64_t v9 = (void *)*((void *)a1 + 1);
  *((void *)a1 + 1) = v8;

  long long v10 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = v10;
  long long v11 = *((_OWORD *)a2 + 3);
  long long v12 = *((_OWORD *)a2 + 4);
  long long v13 = *((_OWORD *)a2 + 5);
  a1[24] = a2[24];
  *((_OWORD *)a1 + 4) = v12;
  *((_OWORD *)a1 + 5) = v13;
  *((_OWORD *)a1 + 3) = v11;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(v7);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + 26);
  *((void *)a1 + 15) = *((void *)a2 + 15);
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *a2 = v4;
  uint64_t v14 = (void *)*((void *)a2 + 1);
  *((void *)a2 + 1) = v5;

  *((_OWORD *)a2 + 3) = v18;
  *((_OWORD *)a2 + 4) = v19;
  *((_OWORD *)a2 + 5) = v20;
  a2[24] = v21;
  *((_OWORD *)a2 + 1) = v16;
  *((_OWORD *)a2 + 2) = v17;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)a2 + 13);
  *(_OWORD *)(a2 + 26) = v15;
  *((void *)a2 + 15) = v6;
  memset(v22, 0, sizeof(v22));
  unint64_t v23 = (void **)v22;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v23);
}

__n128 _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeE(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (a3)
  {
    uint64_t v8 = a1;
    if (a3 == 2)
    {
      long long v17 = (_OWORD *)(a4 + 16);
      long long v18 = (void *)(a4 + 104);
      if (a2[-7].n128_f32[2] >= a1[1].n128_f32[2])
      {
        *(_DWORD *)a4 = a1->n128_u32[0];
        uint64_t v59 = a1->n128_i64[1];
        a1->n128_u64[1] = 0;
        *(void *)(a4 + 8) = v59;
        __n128 v60 = a1[2];
        *long long v17 = a1[1];
        *(__n128 *)(a4 + 32) = v60;
        __n128 v61 = a1[3];
        __n128 v62 = a1[4];
        __n128 v63 = a1[5];
        *(_DWORD *)(a4 + 96) = a1[6].n128_u32[0];
        *(__n128 *)(a4 + 64) = v62;
        *(__n128 *)(a4 + 80) = v63;
        *(__n128 *)(a4 + 48) = v61;
        *(void *)(a4 + 112) = 0;
        *(void *)(a4 + 120) = 0;
        *long long v18 = 0;
        *(__n128 *)(a4 + 104) = *(__n128 *)((char *)a1 + 104);
        *(void *)(a4 + 120) = a1[7].n128_u64[1];
        a1[6].n128_u64[1] = 0;
        a1[7].n128_u64[0] = 0;
        a1[7].n128_u64[1] = 0;
        *(_DWORD *)(a4 + 128) = a2[-8].n128_u32[0];
        uint64_t v64 = a2[-8].n128_i64[1];
        a2[-8].n128_u64[1] = 0;
        *(void *)(a4 + 136) = v64;
        __n128 v65 = a2[-5];
        __n128 v66 = a2[-4];
        __n128 v67 = a2[-3];
        LODWORD(v64) = a2[-2].n128_u32[0];
        __n128 v68 = a2[-7];
        __n128 v69 = a2[-6];
        *(void *)(a4 + 248) = 0;
        long long v16 = (__n128 *)(a4 + 248);
        *(__n128 *)(a4 + 160) = v69;
        *(__n128 *)(a4 + 144) = v68;
        *(_DWORD *)(a4 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v64;
        *(__n128 *)(a4 + 208) = v67;
        *(__n128 *)(a4 + 192) = v66;
        *(__n128 *)(a4 + 176) = v65;
        *(void *)(a4 + 232) = 0;
        *(void *)(a4 + 240) = 0;
        uint64_t result = *(__n128 *)((char *)a2 - 24);
        *(__n128 *)(a4 + 232) = result;
        long long v26 = &a2[-1].n128_u64[1];
        __n128 v25 = &a2[-2].n128_u64[1];
        goto LABEL_23;
      }
      *(_DWORD *)a4 = a2[-8].n128_u32[0];
      uint64_t v19 = a2[-8].n128_i64[1];
      a2[-8].n128_u64[1] = 0;
      *(void *)(a4 + 8) = v19;
      __n128 v20 = a2[-6];
      *long long v17 = a2[-7];
      *(__n128 *)(a4 + 32) = v20;
      __n128 v21 = a2[-5];
      __n128 v22 = a2[-4];
      __n128 v23 = a2[-3];
      *(_DWORD *)(a4 + 96) = a2[-2].n128_u32[0];
      *(__n128 *)(a4 + 64) = v22;
      *(__n128 *)(a4 + 80) = v23;
      *(__n128 *)(a4 + 48) = v21;
      *(void *)(a4 + 112) = 0;
      *(void *)(a4 + 120) = 0;
      *long long v18 = 0;
      *(__n128 *)(a4 + 104) = *(__n128 *)((char *)a2 - 24);
      *(void *)(a4 + 120) = a2[-1].n128_u64[1];
      a2[-2].n128_u64[1] = 0;
      a2[-1].n128_u64[0] = 0;
      a2[-1].n128_u64[1] = 0;
      *(_DWORD *)(a4 + 128) = a1->n128_u32[0];
      uint64_t v24 = a1->n128_i64[1];
      a1->n128_u64[1] = 0;
      *(void *)(a4 + 136) = v24;
      __n128 v10 = a1[3];
      __n128 v11 = a1[4];
      __n128 v12 = a1[5];
      unsigned __int32 v13 = a1[6].n128_u32[0];
      __n128 v14 = a1[1];
      __n128 v15 = a1[2];
      *(void *)(a4 + 248) = 0;
      long long v16 = (__n128 *)(a4 + 248);
LABEL_7:
      *(__n128 *)((char *)v16 - 88) = v15;
      *(__n128 *)((char *)v16 - 104) = v14;
      v16[-2].n128_u32[2] = v13;
      *(__n128 *)((char *)v16 - 40) = v12;
      *(__n128 *)((char *)v16 - 56) = v11;
      *(__n128 *)((char *)v16 - 72) = v10;
      v16[-1].n128_u64[0] = 0;
      v16[-1].n128_u64[1] = 0;
      __n128 v25 = &a1[6].n128_u64[1];
      uint64_t result = *(__n128 *)((char *)a1 + 104);
      v16[-1] = result;
      long long v26 = &a1[7].n128_u64[1];
LABEL_23:
      v16->n128_u64[0] = *v26;
      *__n128 v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      return result;
    }
    if (a3 == 1)
    {
      *(_DWORD *)a4 = a1->n128_u32[0];
      uint64_t v9 = a1->n128_i64[1];
      a1->n128_u64[1] = 0;
      *(void *)(a4 + 8) = v9;
      __n128 v10 = a1[3];
      __n128 v11 = a1[4];
      __n128 v12 = a1[5];
      unsigned __int32 v13 = a1[6].n128_u32[0];
      __n128 v14 = a1[1];
      __n128 v15 = a1[2];
      *(void *)(a4 + 120) = 0;
      long long v16 = (__n128 *)(a4 + 120);
      goto LABEL_7;
    }
    if ((uint64_t)a3 > 8)
    {
      long long v70 = &a1[8 * (a3 >> 1)];
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(a1, v70, a3 >> 1, a4, a3 >> 1);
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(&v8[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), a4 + (a3 >> 1 << 7), a3 - (a3 >> 1));
      long long v71 = (__n128 *)(a4 + 120);
      unint64_t v72 = &v8[8 * (a3 >> 1)];
      while (v72 != a2)
      {
        id v73 = &v71[-7].n128_i8[8];
        __n128 v74 = v71 - 1;
        if (v72[1].n128_f32[2] >= v8[1].n128_f32[2])
        {
          v71[-8].n128_u32[2] = v8->n128_u32[0];
          unint64_t v80 = v8->n128_u64[1];
          v8->n128_u64[1] = 0;
          v71[-7].n128_u64[0] = v80;
          __n128 v81 = v8[2];
          *(__n128 *)id v73 = v8[1];
          *(__n128 *)((char *)v71 - 88) = v81;
          __n128 v82 = v8[3];
          __n128 v83 = v8[4];
          __n128 v84 = v8[5];
          v71[-2].n128_u32[2] = v8[6].n128_u32[0];
          *(__n128 *)((char *)v71 - 56) = v83;
          *(__n128 *)((char *)v71 - 40) = v84;
          *(__n128 *)((char *)v71 - 72) = v82;
          v71[-1].n128_u64[1] = 0;
          v71->n128_u64[0] = 0;
          v74->n128_u64[0] = 0;
          uint64_t result = *(__n128 *)((char *)v8 + 104);
          v71[-1] = result;
          v71->n128_u64[0] = v8[7].n128_u64[1];
          v8[6].n128_u64[1] = 0;
          v8[7].n128_u64[0] = 0;
          v8[7].n128_u64[1] = 0;
          v8 += 8;
        }
        else
        {
          v71[-8].n128_u32[2] = v72->n128_u32[0];
          unint64_t v75 = v72->n128_u64[1];
          v72->n128_u64[1] = 0;
          v71[-7].n128_u64[0] = v75;
          __n128 v76 = v72[2];
          *(__n128 *)id v73 = v72[1];
          *(__n128 *)((char *)v71 - 88) = v76;
          __n128 v77 = v72[3];
          __n128 v78 = v72[4];
          __n128 v79 = v72[5];
          v71[-2].n128_u32[2] = v72[6].n128_u32[0];
          *(__n128 *)((char *)v71 - 56) = v78;
          *(__n128 *)((char *)v71 - 40) = v79;
          *(__n128 *)((char *)v71 - 72) = v77;
          v71[-1].n128_u64[1] = 0;
          v71->n128_u64[0] = 0;
          v74->n128_u64[0] = 0;
          uint64_t result = *(__n128 *)((char *)v72 + 104);
          v71[-1] = result;
          v71->n128_u64[0] = v72[7].n128_u64[1];
          v72[6].n128_u64[1] = 0;
          v72[7].n128_u64[0] = 0;
          v72[7].n128_u64[1] = 0;
          v72 += 8;
        }
        v71 += 8;
        if (v8 == v70)
        {
          if (v72 != a2)
          {
            unint64_t v85 = 0;
            do
            {
              float v86 = &v72[v85];
              float v87 = &v71[v85];
              v87[-8].n128_u32[2] = v72[v85].n128_u32[0];
              unint64_t v88 = v72[v85].n128_u64[1];
              v86->n128_u64[1] = 0;
              v87[-7].n128_u64[0] = v88;
              __n128 v89 = v72[v85 + 1];
              *(__n128 *)((char *)v87 - 88) = v72[v85 + 2];
              *(__n128 *)((char *)v87 - 104) = v89;
              __n128 v90 = v72[v85 + 3];
              __n128 v91 = v72[v85 + 4];
              __n128 v92 = v72[v85 + 5];
              v87[-2].n128_u32[2] = v72[v85 + 6].n128_u32[0];
              *(__n128 *)((char *)v87 - 40) = v92;
              *(__n128 *)((char *)v87 - 56) = v91;
              *(__n128 *)((char *)v87 - 72) = v90;
              v87[-1].n128_u64[1] = 0;
              v87->n128_u64[0] = 0;
              v87[-1].n128_u64[0] = 0;
              uint64_t result = *(__n128 *)((char *)&v72[v85 + 6] + 8);
              v87[-1] = result;
              v87->n128_u64[0] = v72[v85 + 7].n128_u64[1];
              v86[6].n128_u64[1] = 0;
              v86[7].n128_u64[0] = 0;
              v86[7].n128_u64[1] = 0;
              v85 += 8;
            }
            while (&v86[8] != a2);
          }
          return result;
        }
      }
      if (v8 != v70)
      {
        unint64_t v93 = 0;
        do
        {
          float v94 = &v71[v93];
          uint64_t v95 = &v8[v93];
          v94[-8].n128_u32[2] = v8[v93].n128_u32[0];
          unint64_t v96 = v8[v93].n128_u64[1];
          v95->n128_u64[1] = 0;
          v94[-7].n128_u64[0] = v96;
          __n128 v97 = v8[v93 + 1];
          *(__n128 *)((char *)v94 - 88) = v8[v93 + 2];
          *(__n128 *)((char *)v94 - 104) = v97;
          __n128 v98 = v8[v93 + 3];
          __n128 v99 = v8[v93 + 4];
          __n128 v100 = v8[v93 + 5];
          v94[-2].n128_u32[2] = v8[v93 + 6].n128_u32[0];
          *(__n128 *)((char *)v94 - 40) = v100;
          *(__n128 *)((char *)v94 - 56) = v99;
          *(__n128 *)((char *)v94 - 72) = v98;
          v94[-1].n128_u64[1] = 0;
          v94->n128_u64[0] = 0;
          v94[-1].n128_u64[0] = 0;
          uint64_t result = *(__n128 *)((char *)&v8[v93 + 6] + 8);
          v94[-1] = result;
          v94->n128_u64[0] = v8[v93 + 7].n128_u64[1];
          v95[6].n128_u64[1] = 0;
          v95[7].n128_u64[0] = 0;
          v95[7].n128_u64[1] = 0;
          v93 += 8;
        }
        while (&v95[8] != v70);
      }
    }
    else if (a1 != a2)
    {
      *(_DWORD *)a4 = a1->n128_u32[0];
      uint64_t v27 = a1->n128_i64[1];
      a1->n128_u64[1] = 0;
      *(void *)(a4 + 8) = v27;
      __n128 v28 = a1[2];
      *(__n128 *)(a4 + 16) = a1[1];
      *(__n128 *)(a4 + 32) = v28;
      __n128 v29 = a1[3];
      __n128 v30 = a1[4];
      __n128 v31 = a1[5];
      *(_DWORD *)(a4 + 96) = a1[6].n128_u32[0];
      *(__n128 *)(a4 + 64) = v30;
      *(__n128 *)(a4 + 80) = v31;
      *(__n128 *)(a4 + 48) = v29;
      *(void *)(a4 + 112) = 0;
      *(void *)(a4 + 120) = 0;
      *(void *)(a4 + 104) = 0;
      uint64_t result = *(__n128 *)((char *)a1 + 104);
      *(__n128 *)(a4 + 104) = result;
      *(void *)(a4 + 120) = a1[7].n128_u64[1];
      a1[6].n128_u64[1] = 0;
      a1[7].n128_u64[0] = 0;
      a1[7].n128_u64[1] = 0;
      __n128 v32 = a1 + 8;
      if (&a1[8] != a2)
      {
        uint64_t v33 = 0;
        uint64_t v34 = a4;
        do
        {
          __n128 v35 = v32;
          uint64_t v36 = (_OWORD *)(v34 + 144);
          if (v8[9].n128_f32[2] >= *(float *)(v34 + 24))
          {
            *(_DWORD *)(v34 + 128) = v35->n128_u32[0];
            uint64_t v54 = v8[8].n128_i64[1];
            v8[8].n128_u64[1] = 0;
            *(void *)(v34 + 136) = v54;
            __n128 v55 = v8[10];
            *uint64_t v36 = v8[9];
            *(__n128 *)(v34 + 160) = v55;
            uint64_t result = v8[11];
            __n128 v56 = v8[12];
            __n128 v57 = v8[13];
            *(_DWORD *)(v34 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8[14].n128_u32[0];
            *(__n128 *)(v34 + 192) = v56;
            *(__n128 *)(v34 + 208) = v57;
            *(__n128 *)(v34 + 176) = result;
            *(void *)(v34 + 240) = 0;
            *(void *)(v34 + 248) = 0;
            *(void *)(v34 + 232) = 0;
            long long v58 = *(long long *)((char *)&v8[14] + 8);
            long long v52 = &v8[14].n128_u64[1];
            result.n128_u64[0] = v58;
            *(_OWORD *)(v34 + 232) = v58;
            *(void *)(v34 + 248) = v52[2];
          }
          else
          {
            *(_DWORD *)(v34 + 128) = *(_DWORD *)v34;
            uint64_t v37 = *(void *)(v34 + 8);
            *(void *)(v34 + 8) = 0;
            *(void *)(v34 + 136) = v37;
            long long v38 = *(_OWORD *)(v34 + 64);
            *(_OWORD *)(v34 + 176) = *(_OWORD *)(v34 + 48);
            *(_OWORD *)(v34 + 192) = v38;
            *(_OWORD *)(v34 + 208) = *(_OWORD *)(v34 + 80);
            *(_DWORD *)(v34 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v34 + 96);
            long long v39 = *(_OWORD *)(v34 + 32);
            *uint64_t v36 = *(_OWORD *)(v34 + 16);
            *(_OWORD *)(v34 + 160) = v39;
            *(_OWORD *)(v34 + 232) = *(_OWORD *)(v34 + 104);
            *(void *)(v34 + 248) = *(void *)(v34 + 120);
            *(void *)(v34 + 104) = 0;
            *(void *)(v34 + 112) = 0;
            uint64_t v40 = a4;
            *(void *)(v34 + 120) = 0;
            if (v34 != a4)
            {
              uint64_t v41 = v33;
              while (1)
              {
                uint64_t v40 = a4 + v41;
                if (v8[9].n128_f32[2] >= *(float *)(a4 + v41 - 104)) {
                  break;
                }
                *(_DWORD *)uint64_t v40 = *(_DWORD *)(v40 - 128);
                uint64_t v42 = *(void *)(v40 - 120);
                *(void *)(v40 - 120) = 0;
                int v43 = *(void **)(v40 + 8);
                *(void *)(v40 + 8) = v42;

                long long v44 = *(_OWORD *)(v40 - 64);
                *(_OWORD *)(v40 + 48) = *(_OWORD *)(v40 - 80);
                *(_OWORD *)(v40 + 64) = v44;
                *(_OWORD *)(v40 + 80) = *(_OWORD *)(v40 - 48);
                *(_DWORD *)(v40 + 96) = *(_DWORD *)(v40 - 32);
                long long v45 = *(_OWORD *)(v40 - 96);
                *(_OWORD *)(v40 + 16) = *(_OWORD *)(v40 - 112);
                *(_OWORD *)(v40 + 32) = v45;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v40 + 104));
                *(_OWORD *)(v40 + 104) = *(_OWORD *)(v40 - 24);
                *(void *)(v40 + 120) = *(void *)(v40 - 8);
                *(void *)(v40 - 16) = 0;
                *(void *)(v40 - 8) = 0;
                *(void *)(v40 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                v41 -= 128;
                if (!v41)
                {
                  uint64_t v40 = a4;
                  break;
                }
              }
            }
            *(_DWORD *)uint64_t v40 = v35->n128_u32[0];
            uint64_t v46 = v8[8].n128_i64[1];
            v8[8].n128_u64[1] = 0;
            long long v47 = *(void **)(v40 + 8);
            *(void *)(v40 + 8) = v46;

            __n128 v48 = v8[10];
            *(__n128 *)(v40 + 16) = v8[9];
            *(__n128 *)(v40 + 32) = v48;
            __n128 v49 = v8[11];
            __n128 v50 = v8[12];
            __n128 v51 = v8[13];
            *(_DWORD *)(v40 + 96) = v8[14].n128_u32[0];
            *(__n128 *)(v40 + 64) = v50;
            *(__n128 *)(v40 + 80) = v51;
            *(__n128 *)(v40 + 48) = v49;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v40 + 104));
            long long v53 = *(long long *)((char *)&v8[14] + 8);
            long long v52 = &v8[14].n128_u64[1];
            result.n128_u64[0] = v53;
            *(_OWORD *)(v40 + 104) = v53;
            *(void *)(v40 + 120) = v52[2];
          }
          v34 += 128;
          *long long v52 = 0;
          v52[1] = 0;
          _OWORD v52[2] = 0;
          __n128 v32 = v35 + 8;
          v33 += 128;
          uint64_t v8 = v35;
        }
        while (&v35[8] != a2);
      }
    }
  }
  return result;
}

void _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SI_OSD_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  uint64_t v8 = a5;
  while (a4 > a7 && v8 > a7)
  {
    if (!a4) {
      return;
    }
    uint64_t v12 = 0;
    uint64_t v13 = -a4;
    while (1)
    {
      uint64_t v14 = a1 + v12;
      if (*(float *)(a2 + 24) < *(float *)(a1 + v12 + 24)) {
        break;
      }
      v12 += 128;
      if (__CFADD__(v13++, 1)) {
        return;
      }
    }
    uint64_t v16 = -v13;
    uint64_t v95 = a6;
    if (-v13 >= v8)
    {
      if (v13 == -1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)(a1 + v12), (int *)a2);
        return;
      }
      if (v13 > 0) {
        uint64_t v16 = 1 - v13;
      }
      uint64_t v27 = v16 >> 1;
      uint64_t v20 = a1 + (v16 >> 1 << 7) + v12;
      if (a3 == a2)
      {
        uint64_t v19 = a3;
      }
      else
      {
        unint64_t v28 = (a3 - a2) >> 7;
        uint64_t v19 = a2;
        do
        {
          unint64_t v29 = v28 >> 1;
          unint64_t v30 = v19 + (v28 >> 1 << 7);
          float v31 = *(float *)(v30 + 24);
          uint64_t v32 = v30 + 128;
          v28 += ~(v28 >> 1);
          if (v31 < *(float *)(v20 + 24)) {
            uint64_t v19 = v32;
          }
          else {
            unint64_t v28 = v29;
          }
        }
        while (v28);
      }
      uint64_t v18 = (v19 - a2) >> 7;
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = v8 + 1;
      }
      uint64_t v18 = v17 >> 1;
      uint64_t v19 = a2 + (v17 >> 1 << 7);
      uint64_t v20 = a2;
      uint64_t v21 = a2 - a1 - v12;
      if (v21)
      {
        unint64_t v22 = v21 >> 7;
        uint64_t v20 = a1 + v12;
        do
        {
          unint64_t v23 = v22 >> 1;
          uint64_t v24 = v20 + (v22 >> 1 << 7);
          float v25 = *(float *)(v24 + 24);
          uint64_t v26 = v24 + 128;
          v22 += ~(v22 >> 1);
          if (*(float *)(v19 + 24) < v25) {
            unint64_t v22 = v23;
          }
          else {
            uint64_t v20 = v26;
          }
        }
        while (v22);
      }
      uint64_t v27 = (v20 - a1 - v12) >> 7;
    }
    if (v20 == a2)
    {
      uint64_t v37 = (int *)v19;
    }
    else if (v19 == a2)
    {
      uint64_t v37 = (int *)v20;
    }
    else
    {
      uint64_t v33 = a3;
      uint64_t v34 = a7;
      uint64_t v35 = v27;
      uint64_t v36 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>((int *)v20, (int *)a2, (int *)v19);
      uint64_t v27 = v35;
      a7 = v34;
      a3 = v33;
      uint64_t v37 = v36;
    }
    a4 = -(v27 + v13);
    uint64_t v38 = v8 - v18;
    if (v27 + v18 >= v8 - (v27 + v18) - v13)
    {
      uint64_t v42 = v19;
      uint64_t v43 = v27;
      a6 = v95;
      uint64_t v41 = a7;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SI_OSD_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl(v37, v42, a3, a4, v8 - v18, v95);
      a2 = v20;
      uint64_t v38 = v18;
      a4 = v43;
      a3 = (uint64_t)v37;
    }
    else
    {
      uint64_t v39 = v18;
      uint64_t v40 = a3;
      uint64_t v41 = a7;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SI_OSD_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl(v14, v20, v37, v27, v39, v95);
      a3 = v40;
      uint64_t v14 = (uint64_t)v37;
      a2 = v19;
      a6 = v95;
    }
    a1 = v14;
    uint64_t v8 = v38;
    a7 = v41;
    if (!v38) {
      return;
    }
  }
  if (a4 <= v8)
  {
    if (a1 != a2)
    {
      uint64_t v67 = 0;
      unint64_t v68 = 0;
      do
      {
        uint64_t v69 = a6 + v67;
        long long v70 = (void *)(a1 + v67);
        *(_DWORD *)uint64_t v69 = *(_DWORD *)(a1 + v67);
        uint64_t v71 = *(void *)(a1 + v67 + 8);
        v70[1] = 0;
        *(void *)(v69 + 8) = v71;
        long long v72 = *(_OWORD *)(a1 + v67 + 32);
        *(_OWORD *)(v69 + 16) = *(_OWORD *)(a1 + v67 + 16);
        *(_OWORD *)(v69 + 32) = v72;
        long long v73 = *(_OWORD *)(a1 + v67 + 48);
        long long v74 = *(_OWORD *)(a1 + v67 + 64);
        long long v75 = *(_OWORD *)(a1 + v67 + 80);
        *(_DWORD *)(v69 + 96) = *(_DWORD *)(a1 + v67 + 96);
        *(_OWORD *)(v69 + 64) = v74;
        *(_OWORD *)(v69 + 80) = v75;
        *(_OWORD *)(v69 + 48) = v73;
        *(void *)(v69 + 112) = 0;
        *(void *)(v69 + 120) = 0;
        *(void *)(v69 + 104) = 0;
        *(_OWORD *)(v69 + 104) = *(_OWORD *)(a1 + v67 + 104);
        *(void *)(v69 + 120) = *(void *)(a1 + v67 + 120);
        v70[13] = 0;
        v70[14] = 0;
        v70[15] = 0;
        ++v68;
        v67 += 128;
      }
      while (v70 + 16 != (void *)a2);
      unint64_t v96 = v68;
      if (v67)
      {
        uint64_t v76 = a6 + v67;
        uint64_t v77 = a6;
        while (a2 != a3)
        {
          uint64_t v78 = a3;
          __n128 v79 = (_OWORD *)(a1 + 16);
          if (*(float *)(a2 + 24) >= *(float *)(v77 + 24))
          {
            *(_DWORD *)a1 = *(_DWORD *)v77;
            uint64_t v87 = *(void *)(v77 + 8);
            *(void *)(v77 + 8) = 0;
            unint64_t v88 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v87;
            uint64_t v89 = a2;

            long long v90 = *(_OWORD *)(v77 + 32);
            _OWORD *v79 = *(_OWORD *)(v77 + 16);
            *(_OWORD *)(a1 + 32) = v90;
            long long v91 = *(_OWORD *)(v77 + 48);
            long long v92 = *(_OWORD *)(v77 + 64);
            long long v93 = *(_OWORD *)(v77 + 80);
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(v77 + 96);
            *(_OWORD *)(a1 + 64) = v92;
            *(_OWORD *)(a1 + 80) = v93;
            *(_OWORD *)(a1 + 48) = v91;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a1 + 104));
            a2 = v89;
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(v77 + 104);
            *(void *)(a1 + 120) = *(void *)(v77 + 120);
            *(void *)(v77 + 104) = 0;
            *(void *)(v77 + 112) = 0;
            *(void *)(v77 + 120) = 0;
            v77 += 128;
          }
          else
          {
            *(_DWORD *)a1 = *(_DWORD *)a2;
            uint64_t v80 = *(void *)(a2 + 8);
            *(void *)(a2 + 8) = 0;
            __n128 v81 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v80;
            uint64_t v82 = a2;

            long long v83 = *(_OWORD *)(v82 + 32);
            _OWORD *v79 = *(_OWORD *)(v82 + 16);
            *(_OWORD *)(a1 + 32) = v83;
            long long v84 = *(_OWORD *)(v82 + 48);
            long long v85 = *(_OWORD *)(v82 + 64);
            long long v86 = *(_OWORD *)(v82 + 80);
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(v82 + 96);
            *(_OWORD *)(a1 + 64) = v85;
            *(_OWORD *)(a1 + 80) = v86;
            *(_OWORD *)(a1 + 48) = v84;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a1 + 104));
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(v82 + 104);
            *(void *)(a1 + 120) = *(void *)(v82 + 120);
            *(void *)(v82 + 104) = 0;
            *(void *)(v82 + 112) = 0;
            *(void *)(v82 + 120) = 0;
            a2 = v82 + 128;
          }
          a1 += 128;
          a3 = v78;
          if (v76 == v77) {
            goto LABEL_73;
          }
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(v77, v76, a1);
      }
      goto LABEL_73;
    }
  }
  else if (a3 != a2)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      uint64_t v46 = a6 + v44;
      long long v47 = (void *)(a2 + v44);
      *(_DWORD *)uint64_t v46 = *(_DWORD *)(a2 + v44);
      uint64_t v48 = *(void *)(a2 + v44 + 8);
      v47[1] = 0;
      *(void *)(v46 + 8) = v48;
      long long v49 = *(_OWORD *)(a2 + v44 + 32);
      *(_OWORD *)(v46 + 16) = *(_OWORD *)(a2 + v44 + 16);
      *(_OWORD *)(v46 + 32) = v49;
      long long v50 = *(_OWORD *)(a2 + v44 + 48);
      long long v51 = *(_OWORD *)(a2 + v44 + 64);
      long long v52 = *(_OWORD *)(a2 + v44 + 80);
      *(_DWORD *)(v46 + 96) = *(_DWORD *)(a2 + v44 + 96);
      *(_OWORD *)(v46 + 64) = v51;
      *(_OWORD *)(v46 + 80) = v52;
      *(_OWORD *)(v46 + 48) = v50;
      *(void *)(v46 + 112) = 0;
      *(void *)(v46 + 120) = 0;
      *(void *)(v46 + 104) = 0;
      *(_OWORD *)(v46 + 104) = *(_OWORD *)(a2 + v44 + 104);
      *(void *)(v46 + 120) = *(void *)(a2 + v44 + 120);
      v47[13] = 0;
      v47[14] = 0;
      v47[15] = 0;
      ++v45;
      v44 += 128;
    }
    while (v47 + 16 != (void *)a3);
    unint64_t v96 = v45;
    if (v44)
    {
      uint64_t v53 = 0;
      uint64_t v54 = a6 + v44;
      uint64_t v94 = a6 + v44;
      while (a2 != a1)
      {
        if (*(float *)(v54 - 104) >= *(float *)(a2 - 104))
        {
          uint64_t v56 = a2;
          uint64_t v55 = v54;
          v54 -= 128;
        }
        else
        {
          uint64_t v55 = a2;
          uint64_t v56 = a2 - 128;
        }
        uint64_t v57 = a3 + v53;
        uint64_t v58 = a3 + v53 - 112;
        uint64_t v59 = (uint64_t *)(a3 + v53 - 24);
        *(_DWORD *)(v57 - 128) = *(_DWORD *)(v55 - 128);
        uint64_t v60 = *(void *)(v55 - 120);
        *(void *)(v55 - 120) = 0;
        __n128 v61 = *(void **)(a3 + v53 - 120);
        *(void *)(v57 - 120) = v60;
        uint64_t v62 = a3;

        long long v63 = *(_OWORD *)(v55 - 96);
        *(_OWORD *)uint64_t v58 = *(_OWORD *)(v55 - 112);
        *(_OWORD *)(v58 + 16) = v63;
        long long v64 = *(_OWORD *)(v55 - 80);
        long long v65 = *(_OWORD *)(v55 - 64);
        long long v66 = *(_OWORD *)(v55 - 48);
        *(_DWORD *)(v58 + 80) = *(_DWORD *)(v55 - 32);
        *(_OWORD *)(v58 + 48) = v65;
        *(_OWORD *)(v58 + 64) = v66;
        *(_OWORD *)(v58 + 32) = v64;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(v59);
        a3 = v62;
        *(_OWORD *)uint64_t v59 = *(_OWORD *)(v55 - 24);
        *(void *)(v57 - 8) = *(void *)(v55 - 8);
        *(void *)(v55 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        *(void *)(v55 - 16) = 0;
        *(void *)(v55 - 8) = 0;
        v53 -= 128;
        a2 = v56;
        if (v54 == a6) {
          goto LABEL_73;
        }
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>>(v97, v94, v54, a6, a6, a3, a3 + v53);
    }
    goto LABEL_73;
  }
  unint64_t v96 = 0;
LABEL_73:
  if (a6) {
    std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&v96, a6);
  }
}

void std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(unint64_t *a1, uint64_t a2)
{
  if (*a1)
  {
    unint64_t v3 = 0;
    int v4 = (void **)(a2 + 104);
    do
    {
      uint64_t v5 = v4;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v5);

      ++v3;
      v4 += 16;
    }
    while (v3 < *a1);
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      uint64_t v6 = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      uint64_t v7 = *(void **)(a3 + 8);
      *(void *)(a3 + 8) = v6;

      long long v8 = *(_OWORD *)(v5 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(a3 + 32) = v8;
      long long v9 = *(_OWORD *)(v5 + 48);
      long long v10 = *(_OWORD *)(v5 + 64);
      long long v11 = *(_OWORD *)(v5 + 80);
      *(_DWORD *)(a3 + 96) = *(_DWORD *)(v5 + 96);
      *(_OWORD *)(a3 + 64) = v10;
      *(_OWORD *)(a3 + 80) = v11;
      *(_OWORD *)(a3 + 48) = v9;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a3 + 104));
      *(_OWORD *)(a3 + 104) = *(_OWORD *)(v5 + 104);
      *(void *)(a3 + 120) = *(void *)(v5 + 120);
      *(void *)(v5 + 104) = 0;
      *(void *)(v5 + 112) = 0;
      *(void *)(v5 + 120) = 0;
      a3 += 128;
      v5 += 128;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = a3;
  if (a3 != a5)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v9 + v13;
      uint64_t v15 = a7 + v13;
      *(_DWORD *)(v15 - 128) = *(_DWORD *)(v9 + v13 - 128);
      uint64_t v16 = *(void *)(v9 + v13 - 120);
      *(void *)(v9 + v13 - 120) = 0;
      uint64_t v17 = *(void **)(a7 + v13 - 120);
      *(void *)(v15 - 120) = v16;

      long long v18 = *(_OWORD *)(v9 + v13 - 96);
      *(_OWORD *)(v15 - 112) = *(_OWORD *)(v9 + v13 - 112);
      *(_OWORD *)(v15 - 96) = v18;
      long long v19 = *(_OWORD *)(v9 + v13 - 80);
      long long v20 = *(_OWORD *)(v9 + v13 - 64);
      long long v21 = *(_OWORD *)(v9 + v13 - 48);
      *(_DWORD *)(v15 - 32) = *(_DWORD *)(v9 + v13 - 32);
      *(_OWORD *)(v15 - 64) = v20;
      *(_OWORD *)(v15 - 48) = v21;
      *(_OWORD *)(v15 - 80) = v19;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a7 + v13 - 24));
      *(_OWORD *)(v15 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v9 + v13 - 24);
      *(void *)(v15 - 8) = *(void *)(v9 + v13 - 8);
      *(void *)(v14 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      v13 -= 128;
    }
    while (v9 + v13 != a5);
    a7 += v13;
    uint64_t v9 = a5;
  }
  *a1 = a2;
  a1[1] = v9;
  a1[2] = a6;
  a1[3] = a7;
}

int *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(int *a1, int *a2, int *a3)
{
  int v4 = a2;
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>(a1, a2);
  uint64_t v6 = a1 + 32;
  for (uint64_t i = v4 + 32; i != a3; i += 32)
  {
    if (v6 == v4) {
      int v4 = i;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>(v6, i);
    v6 += 32;
  }
  if (v6 != v4)
  {
    long long v8 = v6;
    uint64_t v9 = v4;
    do
    {
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>(v8, v4);
        v8 += 32;
        v4 += 32;
        if (v4 == a3) {
          break;
        }
        if (v8 == v9) {
          uint64_t v9 = v4;
        }
      }
      int v4 = v9;
    }
    while (v8 != v9);
  }
  return v6;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(int *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      if (CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)&a2[-8], (uint64_t)a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>(a1, (int *)&a2[-8]);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != (int *)a2)
      {
        uint64_t v14 = (uint64_t)(a1 + 32);
        if (a1 + 32 != (int *)a2)
        {
          uint64_t v15 = 0;
          uint64_t v16 = (uint64_t)a1;
          do
          {
            uint64_t v17 = (_DWORD *)v14;
            if (CRTextRecognition::CRCTLD::CTLDRegion::operator<(v14, v16))
            {
              LODWORD(v71) = *v17;
              long long v18 = *(void **)(v16 + 136);
              *(void *)(v16 + 136) = 0;
              id v72 = v18;
              long long v19 = *(_OWORD *)(v16 + 192);
              long long v75 = *(_OWORD *)(v16 + 176);
              long long v76 = v19;
              long long v77 = *(_OWORD *)(v16 + 208);
              int v78 = *(_DWORD *)(v16 + 224);
              long long v20 = *(_OWORD *)(v16 + 160);
              long long v73 = *(_OWORD *)(v16 + 144);
              long long v74 = v20;
              long long v79 = *(_OWORD *)(v16 + 232);
              uint64_t v80 = *(void *)(v16 + 248);
              *(void *)(v16 + 232) = 0;
              *(void *)(v16 + 240) = 0;
              uint64_t v21 = v15;
              *(void *)(v16 + 248) = 0;
              while (1)
              {
                unint64_t v22 = (char *)a1 + v21;
                *((_DWORD *)v22 + 32) = *(int *)((char *)a1 + v21);
                uint64_t v23 = *(void *)((char *)a1 + v21 + 8);
                *((void *)v22 + 1) = 0;
                uint64_t v24 = *(void **)((char *)a1 + v21 + 136);
                *((void *)v22 + 17) = v23;

                long long v25 = *(_OWORD *)((char *)a1 + v21 + 64);
                *((_OWORD *)v22 + 11) = *((_OWORD *)v22 + 3);
                *((_OWORD *)v22 + 12) = v25;
                *((_OWORD *)v22 + 13) = *((_OWORD *)v22 + 5);
                *((_DWORD *)v22 + 56) = *((_DWORD *)v22 + 24);
                long long v26 = *(_OWORD *)((char *)a1 + v21 + 32);
                *((_OWORD *)v22 + 9) = *((_OWORD *)v22 + 1);
                *((_OWORD *)v22 + 10) = v26;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)((char *)a1 + v21 + 232));
                *(_OWORD *)(v22 + 232) = *(_OWORD *)(v22 + 104);
                *((void *)v22 + 31) = *((void *)v22 + 15);
                *((void *)v22 + 14) = 0;
                *((void *)v22 + 15) = 0;
                *((void *)v22 + 13) = 0;
                if (!v21) {
                  break;
                }
                v21 -= 128;
                if ((CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)&v71, (uint64_t)a1 + v21) & 1) == 0)
                {
                  uint64_t v27 = (uint64_t)a1 + v21 + 128;
                  goto LABEL_21;
                }
              }
              uint64_t v27 = (uint64_t)a1;
LABEL_21:
              *(_DWORD *)uint64_t v27 = v71;
              id v28 = v72;
              id v72 = 0;
              unint64_t v29 = *(void **)(v27 + 8);
              *(void *)(v27 + 8) = v28;

              long long v30 = v74;
              *((_OWORD *)v22 + 1) = v73;
              *((_OWORD *)v22 + 2) = v30;
              long long v31 = v75;
              long long v32 = v76;
              long long v33 = v77;
              *((_DWORD *)v22 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v78;
              *((_OWORD *)v22 + 4) = v32;
              *((_OWORD *)v22 + 5) = v33;
              *((_OWORD *)v22 + 3) = v31;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v22 + 13);
              *((void *)v22 + 13) = v79;
              *(void *)(v27 + 112) = *((void *)&v79 + 1);
              *(void *)(v27 + 120) = v80;
              long long v79 = 0uLL;
              uint64_t v80 = 0;
              __n128 v81 = (void **)&v79;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v81);
            }
            uint64_t v14 = (uint64_t)(v17 + 32);
            v15 += 128;
            uint64_t v16 = (uint64_t)v17;
          }
          while (v17 + 32 != (_DWORD *)a2);
        }
      }
    }
    else
    {
      uint64_t v11 = a3 >> 1;
      uint64_t v12 = (uint64_t)&a1[32 * (a3 >> 1)];
      if ((uint64_t)a3 <= a5)
      {
        __n128 v34 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>((uint64_t)a1, (__n128 *)&a1[32 * (a3 >> 1)], a3 >> 1, a4, a6);
        uint64_t v35 = a4 + (v11 << 7);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>((uint64_t)&a1[32 * (a3 >> 1)], a2, a3 - v11, v35, v34);
        unint64_t v71 = a3;
        uint64_t v36 = a1 + 30;
        uint64_t v37 = v35;
        uint64_t v38 = a4;
        uint64_t v39 = (void *)(a4 + (a3 << 7));
        while ((void *)v37 != v39)
        {
          uint64_t v40 = v36 - 13;
          if (CRTextRecognition::CRCTLD::CTLDRegion::operator<(v37, v38))
          {
            *((_DWORD *)v36 - 30) = *(_DWORD *)v37;
            uint64_t v41 = *(void *)(v37 + 8);
            *(void *)(v37 + 8) = 0;
            uint64_t v42 = (void *)*(v36 - 14);
            *(v36 - 14) = v41;

            long long v43 = *(_OWORD *)(v37 + 32);
            _OWORD *v40 = *(_OWORD *)(v37 + 16);
            *(_OWORD *)(v36 - 11) = v43;
            long long v44 = *(_OWORD *)(v37 + 48);
            long long v45 = *(_OWORD *)(v37 + 64);
            long long v46 = *(_OWORD *)(v37 + 80);
            *((_DWORD *)v36 - 6) = *(_DWORD *)(v37 + 96);
            *(_OWORD *)(v36 - 7) = v45;
            *(_OWORD *)(v36 - 5) = v46;
            *(_OWORD *)(v36 - 9) = v44;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(v36 - 2);
            *((_OWORD *)v36 - 1) = *(_OWORD *)(v37 + 104);
            *uint64_t v36 = *(void *)(v37 + 120);
            *(void *)(v37 + 104) = 0;
            *(void *)(v37 + 112) = 0;
            *(void *)(v37 + 120) = 0;
            v37 += 128;
          }
          else
          {
            *((_DWORD *)v36 - 30) = *(_DWORD *)v38;
            uint64_t v47 = *(void *)(v38 + 8);
            *(void *)(v38 + 8) = 0;
            uint64_t v48 = (void *)*(v36 - 14);
            *(v36 - 14) = v47;

            long long v49 = *(_OWORD *)(v38 + 32);
            _OWORD *v40 = *(_OWORD *)(v38 + 16);
            *(_OWORD *)(v36 - 11) = v49;
            long long v50 = *(_OWORD *)(v38 + 48);
            long long v51 = *(_OWORD *)(v38 + 64);
            long long v52 = *(_OWORD *)(v38 + 80);
            *((_DWORD *)v36 - 6) = *(_DWORD *)(v38 + 96);
            *(_OWORD *)(v36 - 7) = v51;
            *(_OWORD *)(v36 - 5) = v52;
            *(_OWORD *)(v36 - 9) = v50;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(v36 - 2);
            *((_OWORD *)v36 - 1) = *(_OWORD *)(v38 + 104);
            *uint64_t v36 = *(void *)(v38 + 120);
            *(void *)(v38 + 104) = 0;
            *(void *)(v38 + 112) = 0;
            *(void *)(v38 + 120) = 0;
            v38 += 128;
          }
          v36 += 16;
          if (v38 == v35)
          {
            if ((void *)v37 != v39)
            {
              unint64_t v53 = 0;
              do
              {
                uint64_t v54 = (void *)(v37 + v53);
                uint64_t v55 = &v36[v53 / 8];
                *((_DWORD *)v55 - 30) = *(_DWORD *)(v37 + v53);
                uint64_t v56 = *(void *)(v37 + v53 + 8);
                *(void *)(v37 + v53 + 8) = 0;
                uint64_t v57 = (void *)v36[v53 / 8 - 14];
                *(v55 - 14) = v56;

                long long v58 = *(_OWORD *)(v37 + v53 + 16);
                *(_OWORD *)(v55 - 11) = *(_OWORD *)(v37 + v53 + 32);
                *(_OWORD *)(v55 - 13) = v58;
                long long v59 = *(_OWORD *)(v37 + v53 + 48);
                long long v60 = *(_OWORD *)(v37 + v53 + 64);
                long long v61 = *(_OWORD *)(v37 + v53 + 80);
                *((_DWORD *)v55 - 6) = *(_DWORD *)(v37 + v53 + 96);
                *(_OWORD *)(v55 - 5) = v61;
                *(_OWORD *)(v55 - 7) = v60;
                *(_OWORD *)(v55 - 9) = v59;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(&v36[v53 / 8 - 2]);
                *((_OWORD *)v55 - 1) = *(_OWORD *)(v37 + v53 + 104);
                *uint64_t v55 = *(void *)(v37 + v53 + 120);
                v54[13] = 0;
                v54[14] = 0;
                v54[15] = 0;
                v53 += 128;
              }
              while (v54 + 16 != v39);
            }
            goto LABEL_37;
          }
        }
        if (v38 != v35)
        {
          unint64_t v62 = 0;
          do
          {
            long long v63 = (void *)(v38 + v62);
            long long v64 = &v36[v62 / 8];
            *((_DWORD *)v64 - 30) = *(_DWORD *)(v38 + v62);
            uint64_t v65 = *(void *)(v38 + v62 + 8);
            *(void *)(v38 + v62 + 8) = 0;
            long long v66 = (void *)v36[v62 / 8 - 14];
            *(v64 - 14) = v65;

            long long v67 = *(_OWORD *)(v38 + v62 + 16);
            *(_OWORD *)(v64 - 11) = *(_OWORD *)(v38 + v62 + 32);
            *(_OWORD *)(v64 - 13) = v67;
            long long v68 = *(_OWORD *)(v38 + v62 + 48);
            long long v69 = *(_OWORD *)(v38 + v62 + 64);
            long long v70 = *(_OWORD *)(v38 + v62 + 80);
            *((_DWORD *)v64 - 6) = *(_DWORD *)(v38 + v62 + 96);
            *(_OWORD *)(v64 - 5) = v70;
            *(_OWORD *)(v64 - 7) = v69;
            *(_OWORD *)(v64 - 9) = v68;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(&v36[v62 / 8 - 2]);
            *((_OWORD *)v64 - 1) = *(_OWORD *)(v38 + v62 + 104);
            *long long v64 = *(void *)(v38 + v62 + 120);
            v63[13] = 0;
            v63[14] = 0;
            v63[15] = 0;
            v62 += 128;
          }
          while (v63 + 16 != (void *)v35);
        }
LABEL_37:
        if (a4) {
          std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&v71, a4);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(a1, &a1[32 * (a3 >> 1)], a3 >> 1, a4, a5);
        uint64_t v13 = a3 - v11;
        std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v12, a2, v13, a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>((uint64_t)a1, v12, (int *)a2, v11, v13, a4, a5);
      }
    }
  }
}

void sub_1DD7A3D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (a3)
  {
    uint64_t v8 = a1;
    if (a3 == 2)
    {
      int v16 = CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)&a2[-8], a1);
      uint64_t v17 = (_OWORD *)(a4 + 16);
      long long v18 = (void *)(a4 + 104);
      if (!v16)
      {
        *(_DWORD *)a4 = *(_DWORD *)v8;
        uint64_t v61 = *(void *)(v8 + 8);
        *(void *)(v8 + 8) = 0;
        *(void *)(a4 + 8) = v61;
        long long v62 = *(_OWORD *)(v8 + 32);
        *uint64_t v17 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(a4 + 32) = v62;
        long long v63 = *(_OWORD *)(v8 + 48);
        long long v64 = *(_OWORD *)(v8 + 64);
        long long v65 = *(_OWORD *)(v8 + 80);
        *(_DWORD *)(a4 + 96) = *(_DWORD *)(v8 + 96);
        *(_OWORD *)(a4 + 64) = v64;
        *(_OWORD *)(a4 + 80) = v65;
        *(_OWORD *)(a4 + 48) = v63;
        *(void *)(a4 + 112) = 0;
        *(void *)(a4 + 120) = 0;
        *long long v18 = 0;
        *(_OWORD *)(a4 + 104) = *(_OWORD *)(v8 + 104);
        *(void *)(a4 + 120) = *(void *)(v8 + 120);
        *(void *)(v8 + 104) = 0;
        *(void *)(v8 + 112) = 0;
        *(void *)(v8 + 120) = 0;
        *(_DWORD *)(a4 + 128) = a2[-8].n128_u32[0];
        uint64_t v66 = a2[-8].n128_i64[1];
        a2[-8].n128_u64[1] = 0;
        *(void *)(a4 + 136) = v66;
        uint64_t result = a2[-5];
        __n128 v67 = a2[-4];
        __n128 v68 = a2[-3];
        LODWORD(v66) = a2[-2].n128_u32[0];
        __n128 v69 = a2[-7];
        __n128 v70 = a2[-6];
        *(void *)(a4 + 248) = 0;
        uint64_t v15 = (void *)(a4 + 248);
        *(__n128 *)(v15 - 11) = v70;
        *(__n128 *)(v15 - 13) = v69;
        *((_DWORD *)v15 - 6) = v66;
        *(__n128 *)(v15 - 5) = v68;
        *(__n128 *)(v15 - 7) = v67;
        *(__n128 *)(v15 - 9) = result;
        *(v15 - 2) = 0;
        *(v15 - 1) = 0;
        long long v72 = *(long long *)((char *)&a2[-2] + 8);
        unint64_t v71 = &a2[-2].n128_u64[1];
        result.n128_u64[0] = v72;
        *((_OWORD *)v15 - 1) = v72;
        uint64_t v27 = v71 + 2;
        long long v25 = v71;
        goto LABEL_23;
      }
      *(_DWORD *)a4 = a2[-8].n128_u32[0];
      uint64_t v19 = a2[-8].n128_i64[1];
      a2[-8].n128_u64[1] = 0;
      *(void *)(a4 + 8) = v19;
      __n128 v20 = a2[-6];
      *uint64_t v17 = a2[-7];
      *(__n128 *)(a4 + 32) = v20;
      __n128 v21 = a2[-5];
      __n128 v22 = a2[-4];
      __n128 v23 = a2[-3];
      *(_DWORD *)(a4 + 96) = a2[-2].n128_u32[0];
      *(__n128 *)(a4 + 64) = v22;
      *(__n128 *)(a4 + 80) = v23;
      *(__n128 *)(a4 + 48) = v21;
      *(void *)(a4 + 112) = 0;
      *(void *)(a4 + 120) = 0;
      *long long v18 = 0;
      *(__n128 *)(a4 + 104) = *(__n128 *)((char *)a2 - 24);
      *(void *)(a4 + 120) = a2[-1].n128_u64[1];
      a2[-2].n128_u64[1] = 0;
      a2[-1].n128_u64[0] = 0;
      a2[-1].n128_u64[1] = 0;
      *(_DWORD *)(a4 + 128) = *(_DWORD *)v8;
      uint64_t v24 = *(void *)(v8 + 8);
      *(void *)(v8 + 8) = 0;
      *(void *)(a4 + 136) = v24;
      uint64_t result = *(__n128 *)(v8 + 48);
      long long v10 = *(_OWORD *)(v8 + 64);
      long long v11 = *(_OWORD *)(v8 + 80);
      int v12 = *(_DWORD *)(v8 + 96);
      long long v13 = *(_OWORD *)(v8 + 16);
      long long v14 = *(_OWORD *)(v8 + 32);
      *(void *)(a4 + 248) = 0;
      uint64_t v15 = (void *)(a4 + 248);
LABEL_7:
      *(_OWORD *)(v15 - 11) = v14;
      *(_OWORD *)(v15 - 13) = v13;
      *((_DWORD *)v15 - 6) = v12;
      *(_OWORD *)(v15 - 5) = v11;
      *(_OWORD *)(v15 - 7) = v10;
      *(__n128 *)(v15 - 9) = result;
      *(v15 - 2) = 0;
      *(v15 - 1) = 0;
      long long v26 = *(_OWORD *)(v8 + 104);
      long long v25 = (unint64_t *)(v8 + 104);
      result.n128_u64[0] = v26;
      *((_OWORD *)v15 - 1) = v26;
      uint64_t v27 = v25 + 2;
LABEL_23:
      *uint64_t v15 = *v27;
      *long long v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      return result;
    }
    if (a3 == 1)
    {
      *(_DWORD *)a4 = *(_DWORD *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      *(void *)(a4 + 8) = v9;
      uint64_t result = *(__n128 *)(a1 + 48);
      long long v10 = *(_OWORD *)(a1 + 64);
      long long v11 = *(_OWORD *)(a1 + 80);
      int v12 = *(_DWORD *)(a1 + 96);
      long long v13 = *(_OWORD *)(a1 + 16);
      long long v14 = *(_OWORD *)(a1 + 32);
      *(void *)(a4 + 120) = 0;
      uint64_t v15 = (void *)(a4 + 120);
      goto LABEL_7;
    }
    if ((uint64_t)a3 > 8)
    {
      long long v73 = (void *)(a1 + (a3 >> 1 << 7));
      std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(a1, v73, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v8 + (a3 >> 1 << 7), a2, a3 - (a3 >> 1), a4 + (a3 >> 1 << 7), a3 - (a3 >> 1));
      long long v74 = (__n128 *)(a4 + 120);
      uint64_t v75 = (uint64_t)v73;
      while ((__n128 *)v75 != a2)
      {
        int v76 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v75, v8);
        long long v77 = &v74[-7].n128_i8[8];
        int v78 = v74 - 1;
        if (v76)
        {
          v74[-8].n128_u32[2] = *(_DWORD *)v75;
          unint64_t v79 = *(void *)(v75 + 8);
          *(void *)(v75 + 8) = 0;
          v74[-7].n128_u64[0] = v79;
          __n128 v80 = *(__n128 *)(v75 + 32);
          *(_OWORD *)long long v77 = *(_OWORD *)(v75 + 16);
          *(__n128 *)((char *)v74 - 88) = v80;
          __n128 v81 = *(__n128 *)(v75 + 48);
          __n128 v82 = *(__n128 *)(v75 + 64);
          __n128 v83 = *(__n128 *)(v75 + 80);
          v74[-2].n128_u32[2] = *(_DWORD *)(v75 + 96);
          *(__n128 *)((char *)v74 - 56) = v82;
          *(__n128 *)((char *)v74 - 40) = v83;
          *(__n128 *)((char *)v74 - 72) = v81;
          v74[-1].n128_u64[1] = 0;
          v74->n128_u64[0] = 0;
          v78->n128_u64[0] = 0;
          uint64_t result = *(__n128 *)(v75 + 104);
          v74[-1] = result;
          v74->n128_u64[0] = *(void *)(v75 + 120);
          *(void *)(v75 + 104) = 0;
          *(void *)(v75 + 112) = 0;
          *(void *)(v75 + 120) = 0;
          v75 += 128;
        }
        else
        {
          v74[-8].n128_u32[2] = *(_DWORD *)v8;
          unint64_t v84 = *(void *)(v8 + 8);
          *(void *)(v8 + 8) = 0;
          v74[-7].n128_u64[0] = v84;
          __n128 v85 = *(__n128 *)(v8 + 32);
          *(_OWORD *)long long v77 = *(_OWORD *)(v8 + 16);
          *(__n128 *)((char *)v74 - 88) = v85;
          __n128 v86 = *(__n128 *)(v8 + 48);
          __n128 v87 = *(__n128 *)(v8 + 64);
          __n128 v88 = *(__n128 *)(v8 + 80);
          v74[-2].n128_u32[2] = *(_DWORD *)(v8 + 96);
          *(__n128 *)((char *)v74 - 56) = v87;
          *(__n128 *)((char *)v74 - 40) = v88;
          *(__n128 *)((char *)v74 - 72) = v86;
          v74[-1].n128_u64[1] = 0;
          v74->n128_u64[0] = 0;
          v78->n128_u64[0] = 0;
          uint64_t result = *(__n128 *)(v8 + 104);
          v74[-1] = result;
          v74->n128_u64[0] = *(void *)(v8 + 120);
          *(void *)(v8 + 104) = 0;
          *(void *)(v8 + 112) = 0;
          *(void *)(v8 + 120) = 0;
          v8 += 128;
        }
        v74 += 8;
        if ((void *)v8 == v73)
        {
          if ((__n128 *)v75 != a2)
          {
            unint64_t v89 = 0;
            do
            {
              long long v90 = (void *)(v75 + v89);
              long long v91 = &v74[v89 / 0x10];
              v91[-8].n128_u32[2] = *(_DWORD *)(v75 + v89);
              unint64_t v92 = *(void *)(v75 + v89 + 8);
              v90[1] = 0;
              v91[-7].n128_u64[0] = v92;
              __n128 v93 = *(__n128 *)(v75 + v89 + 16);
              *(__n128 *)((char *)v91 - 88) = *(__n128 *)(v75 + v89 + 32);
              *(__n128 *)((char *)v91 - 104) = v93;
              __n128 v94 = *(__n128 *)(v75 + v89 + 48);
              __n128 v95 = *(__n128 *)(v75 + v89 + 64);
              __n128 v96 = *(__n128 *)(v75 + v89 + 80);
              v91[-2].n128_u32[2] = *(_DWORD *)(v75 + v89 + 96);
              *(__n128 *)((char *)v91 - 40) = v96;
              *(__n128 *)((char *)v91 - 56) = v95;
              *(__n128 *)((char *)v91 - 72) = v94;
              v91[-1].n128_u64[1] = 0;
              v91->n128_u64[0] = 0;
              v91[-1].n128_u64[0] = 0;
              uint64_t result = *(__n128 *)(v75 + v89 + 104);
              v91[-1] = result;
              v91->n128_u64[0] = *(void *)(v75 + v89 + 120);
              v90[13] = 0;
              v90[14] = 0;
              v90[15] = 0;
              v89 += 128;
            }
            while (v90 + 16 != (void *)a2);
          }
          return result;
        }
      }
      if ((void *)v8 != v73)
      {
        unint64_t v97 = 0;
        do
        {
          __n128 v98 = &v74[v97 / 0x10];
          __n128 v99 = (void *)(v8 + v97);
          v98[-8].n128_u32[2] = *(_DWORD *)(v8 + v97);
          unint64_t v100 = *(void *)(v8 + v97 + 8);
          v99[1] = 0;
          v98[-7].n128_u64[0] = v100;
          __n128 v101 = *(__n128 *)(v8 + v97 + 16);
          *(__n128 *)((char *)v98 - 88) = *(__n128 *)(v8 + v97 + 32);
          *(__n128 *)((char *)v98 - 104) = v101;
          __n128 v102 = *(__n128 *)(v8 + v97 + 48);
          __n128 v103 = *(__n128 *)(v8 + v97 + 64);
          __n128 v104 = *(__n128 *)(v8 + v97 + 80);
          v98[-2].n128_u32[2] = *(_DWORD *)(v8 + v97 + 96);
          *(__n128 *)((char *)v98 - 40) = v104;
          *(__n128 *)((char *)v98 - 56) = v103;
          *(__n128 *)((char *)v98 - 72) = v102;
          v98[-1].n128_u64[1] = 0;
          v98->n128_u64[0] = 0;
          v98[-1].n128_u64[0] = 0;
          uint64_t result = *(__n128 *)(v8 + v97 + 104);
          v98[-1] = result;
          v98->n128_u64[0] = *(void *)(v8 + v97 + 120);
          v99[13] = 0;
          v99[14] = 0;
          v99[15] = 0;
          v97 += 128;
        }
        while (v99 + 16 != v73);
      }
    }
    else if ((__n128 *)a1 != a2)
    {
      *(_DWORD *)a4 = *(_DWORD *)a1;
      uint64_t v28 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      *(void *)(a4 + 8) = v28;
      long long v29 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a4 + 32) = v29;
      long long v30 = *(_OWORD *)(a1 + 48);
      long long v31 = *(_OWORD *)(a1 + 64);
      long long v32 = *(_OWORD *)(a1 + 80);
      *(_DWORD *)(a4 + 96) = *(_DWORD *)(a1 + 96);
      *(_OWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 80) = v32;
      *(_OWORD *)(a4 + 48) = v30;
      *(void *)(a4 + 112) = 0;
      *(void *)(a4 + 120) = 0;
      *(void *)(a4 + 104) = 0;
      uint64_t result = *(__n128 *)(a1 + 104);
      *(__n128 *)(a4 + 104) = result;
      *(void *)(a4 + 120) = *(void *)(a1 + 120);
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      uint64_t v33 = a1 + 128;
      if ((__n128 *)(a1 + 128) != a2)
      {
        uint64_t v34 = 0;
        uint64_t v35 = a4;
        do
        {
          uint64_t v36 = (_DWORD *)v33;
          int v37 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v33, v35);
          uint64_t v38 = (_OWORD *)(v35 + 144);
          if (v37)
          {
            *(_DWORD *)(v35 + 128) = *(_DWORD *)v35;
            uint64_t v39 = *(void *)(v35 + 8);
            *(void *)(v35 + 8) = 0;
            *(void *)(v35 + 136) = v39;
            long long v40 = *(_OWORD *)(v35 + 64);
            *(_OWORD *)(v35 + 176) = *(_OWORD *)(v35 + 48);
            *(_OWORD *)(v35 + 192) = v40;
            *(_OWORD *)(v35 + 208) = *(_OWORD *)(v35 + 80);
            *(_DWORD *)(v35 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v35 + 96);
            long long v41 = *(_OWORD *)(v35 + 32);
            *uint64_t v38 = *(_OWORD *)(v35 + 16);
            *(_OWORD *)(v35 + 160) = v41;
            *(_OWORD *)(v35 + 232) = *(_OWORD *)(v35 + 104);
            *(void *)(v35 + 248) = *(void *)(v35 + 120);
            *(void *)(v35 + 104) = 0;
            *(void *)(v35 + 112) = 0;
            uint64_t v42 = a4;
            *(void *)(v35 + 120) = 0;
            if (v35 != a4)
            {
              uint64_t v43 = v34;
              while (1)
              {
                uint64_t v42 = a4 + v43;
                if (!CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)v36, a4 + v43 - 128)) {
                  break;
                }
                *(_DWORD *)uint64_t v42 = *(_DWORD *)(a4 + v43 - 128);
                uint64_t v44 = *(void *)(v42 - 120);
                *(void *)(v42 - 120) = 0;
                long long v45 = *(void **)(v42 + 8);
                *(void *)(v42 + 8) = v44;

                long long v46 = *(_OWORD *)(v42 - 64);
                *(_OWORD *)(v42 + 48) = *(_OWORD *)(v42 - 80);
                *(_OWORD *)(v42 + 64) = v46;
                *(_OWORD *)(v42 + 80) = *(_OWORD *)(v42 - 48);
                *(_DWORD *)(v42 + 96) = *(_DWORD *)(v42 - 32);
                long long v47 = *(_OWORD *)(v42 - 96);
                *(_OWORD *)(v42 + 16) = *(_OWORD *)(v42 - 112);
                *(_OWORD *)(v42 + 32) = v47;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v42 + 104));
                *(_OWORD *)(v42 + 104) = *(_OWORD *)(v42 - 24);
                *(void *)(v42 + 120) = *(void *)(v42 - 8);
                *(void *)(v42 - 16) = 0;
                *(void *)(v42 - 8) = 0;
                *(void *)(v42 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                v43 -= 128;
                if (!v43)
                {
                  uint64_t v42 = a4;
                  break;
                }
              }
            }
            *(_DWORD *)uint64_t v42 = *v36;
            uint64_t v48 = *(void *)(v8 + 136);
            *(void *)(v8 + 136) = 0;
            long long v49 = *(void **)(v42 + 8);
            *(void *)(v42 + 8) = v48;

            long long v50 = *(_OWORD *)(v8 + 160);
            *(_OWORD *)(v42 + 16) = *(_OWORD *)(v8 + 144);
            *(_OWORD *)(v42 + 32) = v50;
            long long v51 = *(_OWORD *)(v8 + 176);
            long long v52 = *(_OWORD *)(v8 + 192);
            long long v53 = *(_OWORD *)(v8 + 208);
            *(_DWORD *)(v42 + 96) = *(_DWORD *)(v8 + 224);
            *(_OWORD *)(v42 + 64) = v52;
            *(_OWORD *)(v42 + 80) = v53;
            *(_OWORD *)(v42 + 48) = v51;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v42 + 104));
            long long v55 = *(_OWORD *)(v8 + 232);
            uint64_t v54 = (void *)(v8 + 232);
            result.n128_u64[0] = v55;
            *(_OWORD *)(v42 + 104) = v55;
            *(void *)(v42 + 120) = v54[2];
          }
          else
          {
            *(_DWORD *)(v35 + 128) = *v36;
            uint64_t v56 = *(void *)(v8 + 136);
            *(void *)(v8 + 136) = 0;
            *(void *)(v35 + 136) = v56;
            long long v57 = *(_OWORD *)(v8 + 160);
            *uint64_t v38 = *(_OWORD *)(v8 + 144);
            *(_OWORD *)(v35 + 160) = v57;
            uint64_t result = *(__n128 *)(v8 + 176);
            long long v58 = *(_OWORD *)(v8 + 192);
            long long v59 = *(_OWORD *)(v8 + 208);
            *(_DWORD *)(v35 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v8 + 224);
            *(_OWORD *)(v35 + 192) = v58;
            *(_OWORD *)(v35 + 208) = v59;
            *(__n128 *)(v35 + 176) = result;
            *(void *)(v35 + 240) = 0;
            *(void *)(v35 + 248) = 0;
            *(void *)(v35 + 232) = 0;
            long long v60 = *(_OWORD *)(v8 + 232);
            uint64_t v54 = (void *)(v8 + 232);
            result.n128_u64[0] = v60;
            *(_OWORD *)(v35 + 232) = v60;
            *(void *)(v35 + 248) = v54[2];
          }
          v35 += 128;
          *uint64_t v54 = 0;
          v54[1] = 0;
          v54[2] = 0;
          uint64_t v33 = (uint64_t)(v36 + 32);
          v34 += 128;
          uint64_t v8 = (uint64_t)v36;
        }
        while (v36 + 32 != (_DWORD *)a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  uint64_t v9 = a5;
  while (a4 > a7 && v9 > a7)
  {
    if (!a4) {
      return;
    }
    uint64_t v14 = 0;
    uint64_t v15 = -a4;
    while (1)
    {
      uint64_t v16 = a1 + v14;
      if (CRTextRecognition::CRCTLD::CTLDRegion::operator<(a2, a1 + v14)) {
        break;
      }
      v14 += 128;
      if (__CFADD__(v15++, 1)) {
        return;
      }
    }
    uint64_t v18 = -v15;
    uint64_t v85 = a7;
    __n128 v87 = a3;
    uint64_t v84 = v9;
    if (-v15 >= v9)
    {
      if (v15 == -1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)(a1 + v14), (int *)a2);
        return;
      }
      if (v15 > 0) {
        uint64_t v18 = 1 - v15;
      }
      uint64_t v24 = v18 >> 1;
      __n128 v21 = (int *)(a1 + (v18 >> 1 << 7) + v14);
      if (a3 != (int *)a2)
      {
        uint64_t v82 = a6;
        unint64_t v25 = ((uint64_t)a3 - a2) >> 7;
        a3 = (int *)a2;
        do
        {
          uint64_t v26 = (uint64_t)&a3[32 * (v25 >> 1)];
          int v27 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v26, (uint64_t)v21);
          if (v27) {
            v25 += ~(v25 >> 1);
          }
          else {
            v25 >>= 1;
          }
          if (v27) {
            a3 = (int *)(v26 + 128);
          }
        }
        while (v25);
        a6 = v82;
      }
      uint64_t v20 = ((uint64_t)a3 - a2) >> 7;
    }
    else
    {
      if (v9 >= 0) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = v9 + 1;
      }
      uint64_t v20 = v19 >> 1;
      a3 = (int *)(a2 + (v19 >> 1 << 7));
      __n128 v21 = (int *)a2;
      uint64_t v22 = a2 - a1 - v14;
      if (v22)
      {
        uint64_t v81 = v19 >> 1;
        unint64_t v23 = v22 >> 7;
        __n128 v21 = (int *)(a1 + v14);
        do
        {
          if (CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)a3, (uint64_t)&v21[32 * (v23 >> 1)]))
          {
            v23 >>= 1;
          }
          else
          {
            v21 += 32 * (v23 >> 1) + 32;
            v23 += ~(v23 >> 1);
          }
        }
        while (v23);
        uint64_t v20 = v81;
      }
      uint64_t v24 = ((uint64_t)v21 - a1 - v14) >> 7;
    }
    if (v21 == (int *)a2)
    {
      long long v31 = a3;
    }
    else if (a3 == (int *)a2)
    {
      long long v31 = v21;
    }
    else
    {
      uint64_t v28 = (int *)a2;
      uint64_t v29 = v20;
      long long v30 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v21, v28, a3);
      uint64_t v20 = v29;
      long long v31 = v30;
    }
    a4 = -(v24 + v15);
    uint64_t v32 = v84 - v20;
    if (v24 + v20 >= v84 - (v24 + v20) - v15)
    {
      uint64_t v34 = a3;
      uint64_t v35 = v20;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v31, v34, v87, a4, v84 - v20, a6, v85);
      a2 = (uint64_t)v21;
      uint64_t v32 = v35;
      a4 = v24;
      a7 = v85;
      a3 = v31;
    }
    else
    {
      uint64_t v33 = v24;
      a7 = v85;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v16, v21, v31, v33, v20, a6, v85);
      uint64_t v16 = (uint64_t)v31;
      a2 = (uint64_t)a3;
      a3 = v87;
    }
    a1 = v16;
    uint64_t v9 = v32;
    if (!v32) {
      return;
    }
  }
  uint64_t v83 = a6;
  if (a4 <= v9)
  {
    if (a1 != a2)
    {
      uint64_t v57 = 0;
      unint64_t v58 = 0;
      do
      {
        uint64_t v59 = a6 + v57;
        long long v60 = (void *)(a1 + v57);
        *(_DWORD *)uint64_t v59 = *(_DWORD *)(a1 + v57);
        uint64_t v61 = *(void *)(a1 + v57 + 8);
        v60[1] = 0;
        *(void *)(v59 + 8) = v61;
        long long v62 = *(_OWORD *)(a1 + v57 + 32);
        *(_OWORD *)(v59 + 16) = *(_OWORD *)(a1 + v57 + 16);
        *(_OWORD *)(v59 + 32) = v62;
        long long v63 = *(_OWORD *)(a1 + v57 + 48);
        long long v64 = *(_OWORD *)(a1 + v57 + 64);
        long long v65 = *(_OWORD *)(a1 + v57 + 80);
        *(_DWORD *)(v59 + 96) = *(_DWORD *)(a1 + v57 + 96);
        *(_OWORD *)(v59 + 64) = v64;
        *(_OWORD *)(v59 + 80) = v65;
        *(_OWORD *)(v59 + 48) = v63;
        *(void *)(v59 + 112) = 0;
        *(void *)(v59 + 120) = 0;
        *(void *)(v59 + 104) = 0;
        *(_OWORD *)(v59 + 104) = *(_OWORD *)(a1 + v57 + 104);
        *(void *)(v59 + 120) = *(void *)(a1 + v57 + 120);
        v60[13] = 0;
        v60[14] = 0;
        v60[15] = 0;
        ++v58;
        v57 += 128;
      }
      while (v60 + 16 != (void *)a2);
      unint64_t v88 = v58;
      if (v57)
      {
        uint64_t v66 = a6;
        uint64_t v67 = a6 + v57;
        while ((int *)a2 != a3)
        {
          __n128 v68 = (_OWORD *)(a1 + 16);
          if (CRTextRecognition::CRCTLD::CTLDRegion::operator<(a2, v66))
          {
            *(_DWORD *)a1 = *(_DWORD *)a2;
            uint64_t v69 = *(void *)(a2 + 8);
            *(void *)(a2 + 8) = 0;
            __n128 v70 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v69;

            long long v71 = *(_OWORD *)(a2 + 32);
            *__n128 v68 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)(a1 + 32) = v71;
            long long v72 = *(_OWORD *)(a2 + 48);
            long long v73 = *(_OWORD *)(a2 + 64);
            long long v74 = *(_OWORD *)(a2 + 80);
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
            *(_OWORD *)(a1 + 64) = v73;
            *(_OWORD *)(a1 + 80) = v74;
            *(_OWORD *)(a1 + 48) = v72;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a1 + 104));
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
            *(void *)(a1 + 120) = *(void *)(a2 + 120);
            *(void *)(a2 + 104) = 0;
            *(void *)(a2 + 112) = 0;
            *(void *)(a2 + 120) = 0;
            a2 += 128;
          }
          else
          {
            *(_DWORD *)a1 = *(_DWORD *)v66;
            uint64_t v75 = *(void *)(v66 + 8);
            *(void *)(v66 + 8) = 0;
            int v76 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v75;

            long long v77 = *(_OWORD *)(v66 + 32);
            *__n128 v68 = *(_OWORD *)(v66 + 16);
            *(_OWORD *)(a1 + 32) = v77;
            long long v78 = *(_OWORD *)(v66 + 48);
            long long v79 = *(_OWORD *)(v66 + 64);
            long long v80 = *(_OWORD *)(v66 + 80);
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(v66 + 96);
            *(_OWORD *)(a1 + 64) = v79;
            *(_OWORD *)(a1 + 80) = v80;
            *(_OWORD *)(a1 + 48) = v78;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a1 + 104));
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(v66 + 104);
            *(void *)(a1 + 120) = *(void *)(v66 + 120);
            *(void *)(v66 + 104) = 0;
            *(void *)(v66 + 112) = 0;
            *(void *)(v66 + 120) = 0;
            v66 += 128;
          }
          a1 += 128;
          if (v67 == v66) {
            goto LABEL_78;
          }
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(v66, v67, a1);
      }
      goto LABEL_78;
    }
  }
  else if (a3 != (int *)a2)
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    do
    {
      uint64_t v38 = a6 + v36;
      uint64_t v39 = (void *)(a2 + v36);
      *(_DWORD *)uint64_t v38 = *(_DWORD *)(a2 + v36);
      uint64_t v40 = *(void *)(a2 + v36 + 8);
      v39[1] = 0;
      *(void *)(v38 + 8) = v40;
      long long v41 = *(_OWORD *)(a2 + v36 + 32);
      *(_OWORD *)(v38 + 16) = *(_OWORD *)(a2 + v36 + 16);
      *(_OWORD *)(v38 + 32) = v41;
      long long v42 = *(_OWORD *)(a2 + v36 + 48);
      long long v43 = *(_OWORD *)(a2 + v36 + 64);
      long long v44 = *(_OWORD *)(a2 + v36 + 80);
      *(_DWORD *)(v38 + 96) = *(_DWORD *)(a2 + v36 + 96);
      *(_OWORD *)(v38 + 64) = v43;
      *(_OWORD *)(v38 + 80) = v44;
      *(_OWORD *)(v38 + 48) = v42;
      *(void *)(v38 + 112) = 0;
      *(void *)(v38 + 120) = 0;
      *(void *)(v38 + 104) = 0;
      *(_OWORD *)(v38 + 104) = *(_OWORD *)(a2 + v36 + 104);
      *(void *)(v38 + 120) = *(void *)(a2 + v36 + 120);
      v39[13] = 0;
      v39[14] = 0;
      v39[15] = 0;
      ++v37;
      v36 += 128;
    }
    while (v39 + 16 != (void *)a3);
    unint64_t v88 = v37;
    if (v36)
    {
      uint64_t v45 = 0;
      uint64_t v46 = a6 + v36;
      uint64_t v86 = a6 + v36;
      while (a2 != a1)
      {
        int v47 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v46 - 128, a2 - 128);
        uint64_t v48 = a3;
        long long v49 = &a3[v45];
        if (v47) {
          uint64_t v50 = a2;
        }
        else {
          uint64_t v50 = v46;
        }
        if (v47) {
          a2 -= 128;
        }
        else {
          v46 -= 128;
        }
        *(v49 - 32) = *(_DWORD *)(v50 - 128);
        uint64_t v51 = *(void *)(v50 - 120);
        *(void *)(v50 - 120) = 0;
        long long v52 = (void *)*((void *)v49 - 15);
        *((void *)v49 - 15) = v51;

        long long v53 = *(_OWORD *)(v50 - 96);
        *((_OWORD *)v49 - 7) = *(_OWORD *)(v50 - 112);
        *((_OWORD *)v49 - 6) = v53;
        long long v54 = *(_OWORD *)(v50 - 80);
        long long v55 = *(_OWORD *)(v50 - 64);
        long long v56 = *(_OWORD *)(v50 - 48);
        *(v49 - 8) = *(_DWORD *)(v50 - 32);
        *((_OWORD *)v49 - 4) = v55;
        *((_OWORD *)v49 - 3) = v56;
        *((_OWORD *)v49 - 5) = v54;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v49 - 3);
        *(_OWORD *)(v49 - 6) = *(_OWORD *)(v50 - 24);
        *((void *)v49 - 1) = *(void *)(v50 - 8);
        a3 = v48;
        *(void *)(v50 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        *(void *)(v50 - 16) = 0;
        *(void *)(v50 - 8) = 0;
        v45 -= 32;
        if (v46 == v83) {
          goto LABEL_78;
        }
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>>(v89, v86, v46, v83, v83, (uint64_t)a3, (uint64_t)&a3[v45]);
    }
    goto LABEL_78;
  }
  unint64_t v88 = 0;
LABEL_78:
  if (v83) {
    std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&v88, v83);
  }
}

int *std::__stable_partition_impl<std::_ClassicAlgPolicy,void CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>,int)::{lambda(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> const&)#2} &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,long,std::pair<CRTextRecognition::CRCTLD::CTLDRegion *,long>>(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v8 = a1;
  if (a4 == 3)
  {
    long long v10 = (int *)(a1 + 128);
    if (!CRTextRecognition::CRCTLD::CTLDRegion::operator<(a1 + 128, *a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)(v8 + 128), a2);
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)v8, (int *)(v8 + 128));
      return v10;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)v8, (int *)(v8 + 128));
    a1 = v8 + 128;
    goto LABEL_6;
  }
  if (a4 == 2)
  {
LABEL_6:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)a1, a2);
    return a2;
  }
  if (a6 >= a4)
  {
    *(_DWORD *)a5 = *(_DWORD *)a1;
    uint64_t v18 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    *(void *)(a5 + 8) = v18;
    long long v19 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a5 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a5 + 32) = v19;
    long long v20 = *(_OWORD *)(a1 + 48);
    long long v21 = *(_OWORD *)(a1 + 64);
    long long v22 = *(_OWORD *)(a1 + 80);
    *(_DWORD *)(a5 + 96) = *(_DWORD *)(a1 + 96);
    *(_OWORD *)(a5 + 64) = v21;
    *(_OWORD *)(a5 + 80) = v22;
    *(_OWORD *)(a5 + 48) = v20;
    *(void *)(a5 + 112) = 0;
    *(void *)(a5 + 120) = 0;
    *(void *)(a5 + 104) = 0;
    *(_OWORD *)(a5 + 104) = *(_OWORD *)(a1 + 104);
    *(void *)(a5 + 120) = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    unint64_t v23 = a5 + 128;
    uint64_t v24 = a1 + 128;
    unint64_t v25 = 1;
    if ((int *)(a1 + 128) == a2)
    {
      uint64_t v39 = a1;
    }
    else
    {
      do
      {
        int v26 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v24, *a3);
        int v27 = *(_DWORD *)v24;
        if (v26)
        {
          *(_DWORD *)uint64_t v8 = v27;
          uint64_t v28 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          uint64_t v29 = *(void **)(v8 + 8);
          *(void *)(v8 + 8) = v28;

          long long v30 = *(_OWORD *)(v24 + 32);
          *(_OWORD *)(v8 + 16) = *(_OWORD *)(v24 + 16);
          *(_OWORD *)(v8 + 32) = v30;
          long long v31 = *(_OWORD *)(v24 + 48);
          long long v32 = *(_OWORD *)(v24 + 64);
          long long v33 = *(_OWORD *)(v24 + 80);
          *(_DWORD *)(v8 + 96) = *(_DWORD *)(v24 + 96);
          *(_OWORD *)(v8 + 64) = v32;
          *(_OWORD *)(v8 + 80) = v33;
          *(_OWORD *)(v8 + 48) = v31;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v8 + 104));
          *(_OWORD *)(v8 + 104) = *(_OWORD *)(v24 + 104);
          *(void *)(v8 + 120) = *(void *)(v24 + 120);
          *(void *)(v24 + 104) = 0;
          *(void *)(v24 + 112) = 0;
          *(void *)(v24 + 120) = 0;
          v8 += 128;
        }
        else
        {
          *(_DWORD *)unint64_t v23 = v27;
          uint64_t v34 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v23 + 8) = v34;
          long long v35 = *(_OWORD *)(v24 + 32);
          *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
          *(_OWORD *)(v23 + 32) = v35;
          long long v36 = *(_OWORD *)(v24 + 48);
          long long v37 = *(_OWORD *)(v24 + 64);
          long long v38 = *(_OWORD *)(v24 + 80);
          *(_DWORD *)(v23 + 96) = *(_DWORD *)(v24 + 96);
          *(_OWORD *)(v23 + 64) = v37;
          *(_OWORD *)(v23 + 80) = v38;
          *(_OWORD *)(v23 + 48) = v36;
          *(void *)(v23 + 112) = 0;
          *(void *)(v23 + 120) = 0;
          *(void *)(v23 + 104) = 0;
          *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
          *(void *)(v23 + 120) = *(void *)(v24 + 120);
          *(void *)(v24 + 104) = 0;
          *(void *)(v24 + 112) = 0;
          *(void *)(v24 + 120) = 0;
          ++v25;
          v23 += 128;
        }
        v24 += 128;
      }
      while ((int *)v24 != a2);
      uint64_t v39 = v24 - 128;
    }
    unint64_t v65 = v25;
    *(_DWORD *)uint64_t v8 = *a2;
    uint64_t v43 = *(void *)(v39 + 136);
    *(void *)(v39 + 136) = 0;
    long long v44 = *(void **)(v8 + 8);
    *(void *)(v8 + 8) = v43;

    long long v45 = *(_OWORD *)(v39 + 160);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v39 + 144);
    *(_OWORD *)(v8 + 32) = v45;
    long long v46 = *(_OWORD *)(v39 + 176);
    long long v47 = *(_OWORD *)(v39 + 192);
    long long v48 = *(_OWORD *)(v39 + 208);
    *(_DWORD *)(v8 + 96) = *(_DWORD *)(v39 + 224);
    *(_OWORD *)(v8 + 64) = v47;
    *(_OWORD *)(v8 + 80) = v48;
    *(_OWORD *)(v8 + 48) = v46;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v8 + 104));
    *(_OWORD *)(v8 + 104) = *(_OWORD *)(v39 + 232);
    *(void *)(v8 + 120) = *(void *)(v39 + 248);
    *(void *)(v39 + 232) = 0;
    *(void *)(v39 + 240) = 0;
    *(void *)(v39 + 248) = 0;
    long long v10 = (int *)(v8 + 128);
    if (v23 > a5)
    {
      unint64_t v49 = a5;
      uint64_t v50 = v8 + 128;
      do
      {
        *(_DWORD *)uint64_t v50 = *(_DWORD *)v49;
        uint64_t v51 = *(void *)(v49 + 8);
        *(void *)(v49 + 8) = 0;
        long long v52 = *(void **)(v50 + 8);
        *(void *)(v50 + 8) = v51;

        long long v53 = *(_OWORD *)(v49 + 32);
        *(_OWORD *)(v50 + 16) = *(_OWORD *)(v49 + 16);
        *(_OWORD *)(v50 + 32) = v53;
        long long v54 = *(_OWORD *)(v49 + 48);
        long long v55 = *(_OWORD *)(v49 + 64);
        long long v56 = *(_OWORD *)(v49 + 80);
        *(_DWORD *)(v50 + 96) = *(_DWORD *)(v49 + 96);
        *(_OWORD *)(v50 + 64) = v55;
        *(_OWORD *)(v50 + 80) = v56;
        *(_OWORD *)(v50 + 48) = v54;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v50 + 104));
        *(_OWORD *)(v50 + 104) = *(_OWORD *)(v49 + 104);
        *(void *)(v50 + 120) = *(void *)(v49 + 120);
        *(void *)(v49 + 104) = 0;
        *(void *)(v49 + 112) = 0;
        *(void *)(v49 + 120) = 0;
        v49 += 128;
        v50 += 128;
      }
      while (v49 < v23);
    }
    std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&v65, a5);
  }
  else
  {
    if (a4 >= 0) {
      uint64_t v13 = a4;
    }
    else {
      uint64_t v13 = a4 + 1;
    }
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = *a3;
    long long v64 = (int *)(a1 + (v13 >> 1 << 7));
    uint64_t v16 = (uint64_t)(v64 - 32);
    if (CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)(v64 - 32), *a3))
    {
      uint64_t v17 = v14;
LABEL_24:
      long long v63 = (int *)std::__stable_partition_impl<std::_ClassicAlgPolicy,void CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>,int)::{lambda(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> const&)#2} &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,long,std::pair<CRTextRecognition::CRCTLD::CTLDRegion *,long>>(v8, v16, a3, v17, a5, a6);
      uint64_t v15 = *a3;
    }
    else
    {
      uint64_t v40 = v14 << 7;
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v41 = v40 - 128;
        if (v40 == 128) {
          break;
        }
        --v17;
        int v42 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v8 + v40 - 256, v15);
        uint64_t v40 = v41;
        if (v42)
        {
          uint64_t v16 = v8 + v41 - 128;
          goto LABEL_24;
        }
      }
      long long v63 = (int *)v8;
    }
    uint64_t v57 = a4 - v14;
    if (CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)v64, v15))
    {
      long long v10 = a2 + 32;
      unint64_t v58 = (int *)(v8 + (v14 << 7));
      uint64_t v59 = (uint64_t)(v58 + 32);
      while ((int *)v59 != a2)
      {
        --v57;
        char v60 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v59, v15);
        v58 += 32;
        v59 += 128;
        if ((v60 & 1) == 0) {
          goto LABEL_37;
        }
      }
    }
    else
    {
      unint64_t v58 = v64;
LABEL_37:
      long long v10 = (int *)std::__stable_partition_impl<std::_ClassicAlgPolicy,void CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>,int)::{lambda(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> const&)#2} &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,long,std::pair<CRTextRecognition::CRCTLD::CTLDRegion *,long>>(v58, a2, a3, v57, a5, a6);
    }
    uint64_t v61 = v63;
    if (v63 != v64)
    {
      if (v64 != v10) {
        return std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v63, v64, v10);
      }
      return v61;
    }
  }
  return v10;
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (void *)*((void *)v4 - 3);
        v4 -= 24;
        uint64_t v6 = v7;
        if (v7) {
          operator delete(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<int>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 7;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 57) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 6 > v5) {
    unint64_t v5 = v8 >> 6;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v20[4] = a1 + 2;
  long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>(v7, v9);
  long long v11 = &v10[128 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v20[3] = &v10[128 * v12];
  *(_DWORD *)long long v11 = *(_DWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *((void *)v11 + 1) = v13;
  long long v14 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v11 + 2) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  long long v16 = *(_OWORD *)(a2 + 64);
  long long v17 = *(_OWORD *)(a2 + 80);
  *((_DWORD *)v11 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(a2 + 96);
  *((_OWORD *)v11 + 4) = v16;
  *((_OWORD *)v11 + 5) = v17;
  *((_OWORD *)v11 + 3) = v15;
  *((void *)v11 + 14) = 0;
  *((void *)v11 + 15) = 0;
  *((void *)v11 + 13) = 0;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(a2 + 104);
  *((void *)v11 + 15) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  void v20[2] = v11 + 128;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a1, v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_1DD7A509C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 3;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v6);

        v4 -= 16;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

void *std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DD7A52E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 7;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 57) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 6 > v4) {
    unint64_t v4 = v6 >> 6;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  long long v11 = v8;
  uint64_t v12 = &v8[128 * v3];
  long long v14 = &v8[128 * v7];
  std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 128;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1DD7A53DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::pointer begin = this->__begin_;
  std::vector<int>::pointer end = this->__end_;
  std::vector<int>::size_type v7 = end - this->__begin_;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    p_end_cap = &this->__end_cap_;
    value = this->__end_cap_.__value_;
    if (__sz - v7 <= value - end)
    {
      uint64_t v24 = &end[__sz - v7];
      std::vector<int>::size_type v25 = 4 * __sz - 4 * v7;
      do
      {
        *end++ = *__x;
        v25 -= 4;
      }
      while (v25);
      this->__end_ = v24;
    }
    else
    {
      if (__sz >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = (char *)value - (char *)begin;
      std::vector<int>::size_type v12 = ((char *)value - (char *)begin) >> 1;
      if (v12 <= __sz) {
        std::vector<int>::size_type v12 = __sz;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      long long v16 = (int *)&v14[4 * v7];
      long long v17 = (int *)&v14[4 * __sz];
      std::vector<int>::size_type v18 = 4 * __sz - 4 * v7;
      long long v19 = v16;
      do
      {
        *v19++ = *__x;
        v18 -= 4;
      }
      while (v18);
      long long v20 = (int *)&v14[4 * v15];
      std::vector<int>::pointer v21 = this->__begin_;
      for (std::vector<int>::pointer i = this->__end_; i != v21; --i)
      {
        int v23 = *(i - 1);
        *--long long v16 = v23;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v20;
      if (v21)
      {
        operator delete(v21);
      }
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<BOOL>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

uint64_t std::__split_buffer<std::vector<BOOL>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    float v5 = *(void **)(v2 - 24);
    v2 -= 24;
    unint64_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(void **)a2, 0, (void *)(*(void *)a2 + 8 * (*(void *)(a2 + 8) >> 6)), *(void *)(a2 + 8) & 0x3F, *(void *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (v6)
  {
    unint64_t v8 = v7 - 1;
    if (((v7 - 1) ^ (v6 - 1)) < 0x40) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v8 = v7 - 1;
  }
  unint64_t v9 = v8 >> 6;
  if (v7 >= 0x41) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0;
  }
  *(void *)(*a1 + 8 * v10) = 0;
LABEL_9:
  uint64_t v11 = *a1 + 8 * (v6 >> 6);
  int v12 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v11, (uint64_t)v13);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a2;
  unint64_t v7 = *(uint64_t **)a5;
  int v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || a2 != a4)
  {
    do
    {
      uint64_t v9 = 1 << v8;
      if ((*a1 >> a2)) {
        uint64_t v10 = *v7 | v9;
      }
      else {
        uint64_t v10 = *v7 & ~v9;
      }
      *unint64_t v7 = v10;
      BOOL v11 = v6 == 63;
      BOOL v12 = v6 == 63;
      uint64_t v6 = (a2 + 1);
      if (v11) {
        uint64_t v6 = 0;
      }
      if (v8 == 63)
      {
        int v8 = 0;
        *(void *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || v6 != a4);
    a1 = a3;
  }
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
}

uint64_t std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<float const&,float const&,float const&,float const&>(uint64_t *a1, float *a2, float *a3, float *a4, float *a5)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (a1[1] - *a1) >> 7;
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 57) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  uint64_t v14 = a1[2] - v6;
  if (v14 >> 6 > v8) {
    unint64_t v8 = v14 >> 6;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v8;
  }
  v28[4] = a1 + 2;
  long long v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>(v13, v15);
  long long v17 = &v16[128 * v7];
  v28[0] = v16;
  v28[1] = v17;
  v28[3] = &v16[128 * v18];
  float v19 = *a2;
  float v20 = *a3;
  float v21 = *a4;
  float v22 = *a5;
  *(_DWORD *)long long v17 = -1;
  *((void *)v17 + 1) = 0;
  *((float *)v17 + 4) = v21;
  *((float *)v17 + 5) = v22;
  *((float *)v17 + 6) = v19;
  *((float *)v17 + 7) = v20;
  *((void *)v17 + 14) = 0;
  *((void *)v17 + 15) = 0;
  *((void *)v17 + 13) = 0;
  double v23 = v19;
  double v24 = v21;
  *((double *)v17 + 4) = v23;
  *((double *)v17 + 5) = v24;
  double v25 = v20;
  *((double *)v17 + 6) = v25;
  *((double *)v17 + 7) = v24;
  *((double *)v17 + 8) = v23;
  *((double *)v17 + 9) = v22;
  *((double *)v17 + 10) = v25;
  *((double *)v17 + 11) = v22;
  *((_DWORD *)v17 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  v28[2] = v17 + 128;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a1, v28);
  uint64_t v26 = a1[1];
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)v28);
  return v26;
}

void sub_1DD7A5864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (v4)
  {
    unint64_t v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v6 = v5 - 1;
  }
  unint64_t v7 = v6 >> 6;
  if (v5 >= 0x41) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  *(void *)(*a1 + 8 * v8) = 0;
LABEL_9:
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)a3;
  int v11 = *(_DWORD *)(a3 + 8);
  uint64_t v12 = *a1 + 8 * (v4 >> 6);
  uint64_t v18 = *(void *)a2;
  int v19 = v9;
  uint64_t v16 = v10;
  int v17 = v11;
  uint64_t v14 = v12;
  int v15 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v18, &v16, &v14, (uint64_t)&v13);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = i;
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  int v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void sub_1DD7A6778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  while (1)
  {
    if (*((char *)v27 - 9) < 0) {
      operator delete(*(v27 - 4));
    }
    v27 -= 4;
    if (v27 == &a21)
    {
      if (a14 < 0) {
        operator delete(__p);
      }

      _Unwind_Resume(a1);
    }
  }
}

void sub_1DD7A6C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1DD7A6F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1DD7A707C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CRCastAsClass<CRFormField>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1DD7A7100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7A7940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  _Unwind_Resume(a1);
}

void sub_1DD7A7E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD7A8680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1DD7A8CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }

  if (a26) {
    operator delete(a26);
  }

  uint64_t v39 = *(void **)(v37 - 128);
  if (v39)
  {
    *(void *)(v37 - 120) = v39;
    operator delete(v39);
  }

  if (a29) {
    operator delete(a29);
  }

  objc_sync_exit(v32);
  _Unwind_Resume(a1);
}

void sub_1DD7A91D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(*(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy((char *)v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *,false>(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  uint64_t v10 = (float *)(a2 - 16);
  unint64_t j = v9;
  while (1)
  {
    unint64_t v9 = j;
    uint64_t v12 = a2 - j;
    unint64_t v13 = (uint64_t)(a2 - j) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v47 = *(float *)j;
          float v48 = *(float *)(a2 - 16);
          if (*(float *)j >= v48)
          {
            if (v48 < v47) {
              return result;
            }
            unint64_t v49 = *(void *)(j + 8);
            unint64_t v50 = *(void *)(a2 - 8);
            if (v49 >= v50) {
              return result;
            }
          }
          else
          {
            unint64_t v49 = *(void *)(j + 8);
            unint64_t v50 = *(void *)(a2 - 8);
          }
          *(float *)unint64_t j = v48;
          *(float *)(a2 - 16) = v47;
          *(void *)(j + 8) = v50;
          *(void *)(a2 - 8) = v49;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(j, j + 16, a2 - 16);
        case 4uLL:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(j, j + 16, j + 32, a2 - 16);
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(j, j + 16, j + 32, j + 48, a2 - 16);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 383)
    {
      unint64_t v51 = j + 16;
      BOOL v53 = j == a2 || v51 == a2;
      if (a4)
      {
        if (v53) {
          return result;
        }
        uint64_t v54 = 0;
        unint64_t v55 = j;
        while (2)
        {
          unint64_t v56 = v55;
          unint64_t v55 = v51;
          float v57 = *(float *)v56;
          float v58 = *(float *)(v56 + 16);
          if (*(float *)v56 < v58)
          {
            unint64_t v59 = *(void *)(v56 + 24);
            unint64_t v60 = *(void *)(v56 + 8);
            goto LABEL_113;
          }
          if (v58 >= v57)
          {
            unint64_t v60 = *(void *)(v56 + 8);
            unint64_t v59 = *(void *)(v56 + 24);
            if (v60 < v59)
            {
LABEL_113:
              *(float *)(v56 + 16) = v57;
              *(void *)(v55 + 8) = v60;
              unint64_t v61 = j;
              if (v56 != j)
              {
                uint64_t v62 = v54;
                do
                {
                  float v63 = *(float *)(j + v62 - 16);
                  if (v63 >= v58)
                  {
                    if (v58 < v63)
                    {
                      unint64_t v61 = v56;
                      goto LABEL_122;
                    }
                    unint64_t v61 = j + v62;
                    unint64_t v64 = *(void *)(j + v62 - 8);
                    if (v64 >= v59) {
                      goto LABEL_122;
                    }
                  }
                  else
                  {
                    unint64_t v64 = *(void *)(j + v62 - 8);
                  }
                  v56 -= 16;
                  uint64_t v65 = j + v62;
                  *(float *)uint64_t v65 = v63;
                  *(void *)(v65 + 8) = v64;
                  v62 -= 16;
                }
                while (v62);
                unint64_t v61 = j;
              }
LABEL_122:
              *(float *)unint64_t v61 = v58;
              *(void *)(v61 + 8) = v59;
            }
          }
          unint64_t v51 = v55 + 16;
          v54 += 16;
          if (v55 + 16 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v53) {
        return result;
      }
      unint64_t v109 = j + 8;
      while (2)
      {
        unint64_t v110 = v9;
        unint64_t v9 = v51;
        float v111 = *(float *)v110;
        float v112 = *(float *)(v110 + 16);
        if (*(float *)v110 >= v112)
        {
          if (v112 >= v111)
          {
            unint64_t v114 = *(void *)(v110 + 8);
            unint64_t v113 = *(void *)(v110 + 24);
            if (v114 < v113) {
              goto LABEL_193;
            }
          }
        }
        else
        {
          unint64_t v113 = *(void *)(v110 + 24);
LABEL_193:
          for (unint64_t i = v109; ; i -= 16)
          {
            *(float *)(i + 8) = v111;
            *(void *)(i + 16) = *(void *)i;
            float v111 = *(float *)(i - 24);
            if (v111 >= v112 && (v112 < v111 || *(void *)(i - 16) >= v113)) {
              break;
            }
          }
          *(float *)(i - 8) = v112;
          *(void *)unint64_t i = v113;
        }
        v51 += 16;
        v109 += 16;
        if (v9 + 16 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = j + 16 * (v13 >> 1);
    if ((unint64_t)v12 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v9, v9 + 16 * (v13 >> 1), a2 - 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v9 + 16, v15 - 16, a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v9 + 32, v9 + 16 + 16 * v14, a2 - 48);
      uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v15 - 16, v15, v9 + 16 + 16 * v14);
      float v16 = *(float *)v9;
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v15;
      *(float *)uint64_t v15 = v16;
      uint64_t v17 = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = *(void *)(v15 + 8);
      *(void *)(v15 + 8) = v17;
    }
    else
    {
      uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v9 + 16 * (v13 >> 1), v9, a2 - 16);
    }
    --a3;
    float v18 = *(float *)v9;
    if ((a4 & 1) != 0
      || (float v19 = *(float *)(v9 - 16), v18 < v19)
      || (unint64_t v20 = *(void *)(v9 + 8), v19 >= v18) && v20 < *(void *)(v9 - 8))
    {
      uint64_t v21 = 0;
      unint64_t v22 = *(void *)(v9 + 8);
      while (1)
      {
        float v23 = *(float *)(v9 + v21 + 16);
        if (v18 >= v23 && (v23 < v18 || v22 >= *(void *)(v9 + v21 + 24))) {
          break;
        }
        v21 += 16;
      }
      unint64_t v24 = v9 + v21 + 16;
      if (v21)
      {
        float v25 = *v10;
        unint64_t v26 = a2 - 16;
        if (v18 >= *v10)
        {
          do
          {
            if (v25 >= v18 && v22 < *(void *)(v26 + 8)) {
              break;
            }
            float v27 = *(float *)(v26 - 16);
            v26 -= 16;
            float v25 = v27;
          }
          while (v18 >= v27);
        }
      }
      else
      {
        unint64_t v26 = a2;
        if (v24 < a2)
        {
          float v28 = *v10;
          unint64_t v26 = a2 - 16;
          if (v18 >= *v10)
          {
            unint64_t v26 = a2 - 16;
            do
            {
              if (v28 >= v18)
              {
                if (v24 >= v26 || v22 < *(void *)(v26 + 8)) {
                  break;
                }
              }
              else if (v24 >= v26)
              {
                break;
              }
              float v29 = *(float *)(v26 - 16);
              v26 -= 16;
              float v28 = v29;
            }
            while (v18 >= v29);
          }
        }
      }
      if (v24 >= v26)
      {
        unint64_t j = v24;
      }
      else
      {
        float v30 = *(float *)v26;
        unint64_t j = v24;
        unint64_t v31 = v26;
        do
        {
          *(float *)unint64_t j = v30;
          *(float *)unint64_t v31 = v23;
          uint64_t v32 = *(void *)(j + 8);
          *(void *)(j + 8) = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = v32;
          do
          {
            do
            {
              float v33 = *(float *)(j + 16);
              j += 16;
              float v23 = v33;
            }
            while (v18 < v33);
          }
          while (v23 >= v18 && v22 < *(void *)(j + 8));
          do
          {
            float v34 = *(float *)(v31 - 16);
            v31 -= 16;
            float v30 = v34;
          }
          while (v18 >= v34 && (v30 < v18 || v22 >= *(void *)(v31 + 8)));
        }
        while (j < v31);
      }
      if (j - 16 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(j - 16);
        *(void *)(v9 + 8) = *(void *)(j - 8);
      }
      *(float *)(j - 16) = v18;
      *(void *)(j - 8) = v22;
      if (v24 < v26) {
        goto LABEL_51;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v9, j - 16);
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(j, a2);
      if (result)
      {
        a2 = j - 16;
        if (v35) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v35)
      {
LABEL_51:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *,false>(v9, j - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      float v36 = *v10;
      if (*v10 >= v18 && (v18 < v36 || *(void *)(a2 - 8) >= v20))
      {
        for (unint64_t j = v9 + 16; j < a2 && *(float *)j >= v18 && (v18 < *(float *)j || *(void *)(j + 8) >= v20); j += 16)
          ;
      }
      else
      {
        unint64_t j = v9;
        do
        {
          float v37 = *(float *)(j + 16);
          j += 16;
          float v38 = v37;
        }
        while (v37 >= v18 && (v18 < v38 || *(void *)(j + 8) >= v20));
      }
      unint64_t k = a2;
      if (j < a2)
      {
        for (unint64_t k = a2 - 16; v36 < v18 || v18 >= v36 && *(void *)(k + 8) < v20; k -= 16)
        {
          float v40 = *(float *)(k - 16);
          float v36 = v40;
        }
      }
      if (j < k)
      {
        float v41 = *(float *)j;
        float v42 = *(float *)k;
        do
        {
          *(float *)unint64_t j = v42;
          *(float *)unint64_t k = v41;
          float v43 = *(float *)(j + 16);
          j += 16;
          float v41 = v43;
          uint64_t v44 = *(void *)(j - 8);
          *(void *)(j - 8) = *(void *)(k + 8);
          *(void *)(k + 8) = v44;
          while (v41 >= v18 && (v18 < v41 || *(void *)(j + 8) >= v20))
          {
            float v45 = *(float *)(j + 16);
            j += 16;
            float v41 = v45;
          }
          do
          {
            do
            {
              float v46 = *(float *)(k - 16);
              k -= 16;
              float v42 = v46;
            }
            while (v46 < v18);
          }
          while (v18 >= v42 && *(void *)(k + 8) < v20);
        }
        while (j < k);
      }
      BOOL v4 = j - 16 >= v9;
      BOOL v5 = j - 16 == v9;
      if (j - 16 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(j - 16);
        *(void *)(v9 + 8) = *(void *)(j - 8);
      }
      a4 = 0;
      *(float *)(j - 16) = v18;
      *(void *)(j - 8) = v20;
    }
  }
  if (j != a2)
  {
    int64_t v66 = (v13 - 2) >> 1;
    int64_t v67 = v66;
    do
    {
      int64_t v68 = v67;
      if (v66 >= v67)
      {
        uint64_t v69 = (2 * v67) | 1;
        unint64_t v70 = j + 16 * v69;
        if (2 * v68 + 2 < (uint64_t)v13)
        {
          float v71 = *(float *)(v70 + 16);
          if (v71 < *(float *)v70 || *(float *)v70 >= v71 && *(void *)(v70 + 24) < *(void *)(v70 + 8))
          {
            v70 += 16;
            uint64_t v69 = 2 * v68 + 2;
          }
        }
        unint64_t v72 = j + 16 * v68;
        float v73 = *(float *)v72;
        float v74 = *(float *)v70;
        if (*(float *)v72 >= *(float *)v70)
        {
          unint64_t v75 = *(void *)(v72 + 8);
          unint64_t v76 = *(void *)(v70 + 8);
          if (v74 < v73 || v75 >= v76)
          {
            *(float *)unint64_t v72 = v74;
            *(void *)(v72 + 8) = v76;
            if (v66 >= v69)
            {
              while (1)
              {
                uint64_t v79 = 2 * v69;
                uint64_t v69 = (2 * v69) | 1;
                unint64_t v78 = j + 16 * v69;
                uint64_t v80 = v79 + 2;
                if (v80 < (uint64_t)v13)
                {
                  float v81 = *(float *)(v78 + 16);
                  if (v81 < *(float *)v78
                    || *(float *)v78 >= v81 && (uint64_t result = *(void *)(v78 + 24), result < *(void *)(v78 + 8)))
                  {
                    v78 += 16;
                    uint64_t v69 = v80;
                  }
                }
                float v82 = *(float *)v78;
                if (v73 < *(float *)v78) {
                  break;
                }
                unint64_t v83 = *(void *)(v78 + 8);
                if (v82 >= v73 && v75 < v83) {
                  break;
                }
                *(float *)unint64_t v70 = v82;
                *(void *)(v70 + 8) = v83;
                unint64_t v70 = v78;
                if (v66 < v69) {
                  goto LABEL_141;
                }
              }
            }
            unint64_t v78 = v70;
LABEL_141:
            *(float *)unint64_t v78 = v73;
            *(void *)(v78 + 8) = v75;
          }
        }
      }
      int64_t v67 = v68 - 1;
    }
    while (v68);
    uint64_t v85 = (unint64_t)v12 >> 4;
    while (2)
    {
      uint64_t v86 = 0;
      float v87 = *(float *)j;
      uint64_t v88 = *(void *)(j + 8);
      uint64_t v89 = v85 - 2;
      if (v85 < 2) {
        uint64_t v89 = v85 - 1;
      }
      uint64_t v90 = v89 >> 1;
      unint64_t v91 = j;
      do
      {
        unint64_t v92 = v91;
        v91 += 16 * v86 + 16;
        uint64_t v93 = 2 * v86;
        uint64_t v86 = (2 * v86) | 1;
        uint64_t v94 = v93 + 2;
        if (v94 < v85)
        {
          float v95 = *(float *)(v91 + 16);
          if (v95 < *(float *)v91
            || *(float *)v91 >= v95 && (uint64_t result = *(void *)(v91 + 8), *(void *)(v91 + 24) < result))
          {
            v91 += 16;
            uint64_t v86 = v94;
          }
        }
        *(_DWORD *)unint64_t v92 = *(_DWORD *)v91;
        *(void *)(v92 + 8) = *(void *)(v91 + 8);
      }
      while (v86 <= v90);
      if (v91 == a2 - 16)
      {
        *(float *)unint64_t v91 = v87;
        *(void *)(v91 + 8) = v88;
      }
      else
      {
        *(_DWORD *)unint64_t v91 = *(_DWORD *)(a2 - 16);
        *(void *)(v91 + 8) = *(void *)(a2 - 8);
        *(float *)(a2 - 16) = v87;
        *(void *)(a2 - 8) = v88;
        uint64_t v96 = v91 - j + 16;
        if (v96 >= 17)
        {
          unint64_t v97 = ((unint64_t)v96 >> 4) - 2;
          unint64_t v98 = v97 >> 1;
          unint64_t v99 = j + 16 * (v97 >> 1);
          float v100 = *(float *)v91;
          float v101 = *(float *)v99;
          if (*(float *)v91 < *(float *)v99)
          {
            unint64_t v102 = *(void *)(v91 + 8);
            unint64_t v103 = *(void *)(v99 + 8);
            goto LABEL_173;
          }
          if (v101 >= v100)
          {
            unint64_t v102 = *(void *)(v91 + 8);
            unint64_t v103 = *(void *)(v99 + 8);
            if (v102 < v103)
            {
LABEL_173:
              *(float *)unint64_t v91 = v101;
              *(void *)(v91 + 8) = v103;
              if (v97 >= 2)
              {
                while (1)
                {
                  unint64_t v105 = v98 - 1;
                  unint64_t v98 = (v98 - 1) >> 1;
                  unint64_t v104 = j + 16 * v98;
                  float v106 = *(float *)v104;
                  if (v100 >= *(float *)v104)
                  {
                    if (v106 < v100) {
                      break;
                    }
                    unint64_t v107 = *(void *)(v104 + 8);
                    if (v102 >= v107) {
                      break;
                    }
                  }
                  else
                  {
                    unint64_t v107 = *(void *)(v104 + 8);
                  }
                  *(float *)unint64_t v99 = v106;
                  *(void *)(v99 + 8) = v107;
                  unint64_t v99 = j + 16 * v98;
                  if (v105 <= 1) {
                    goto LABEL_180;
                  }
                }
              }
              unint64_t v104 = v99;
LABEL_180:
              *(float *)unint64_t v104 = v100;
              *(void *)(v104 + 8) = v102;
            }
          }
        }
      }
      a2 -= 16;
      if (v85-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)result;
  float v4 = *(float *)a2;
  if (*(float *)result >= *(float *)a2 && (v4 < v3 || *(void *)(result + 8) >= *(void *)(a2 + 8)))
  {
    float v8 = *(float *)a3;
    if (v4 >= *(float *)a3)
    {
      if (v8 < v4) {
        return result;
      }
      unint64_t v9 = *(void *)(a2 + 8);
      unint64_t v10 = *(void *)(a3 + 8);
      if (v9 >= v10) {
        return result;
      }
    }
    else
    {
      unint64_t v9 = *(void *)(a2 + 8);
      unint64_t v10 = *(void *)(a3 + 8);
    }
    *(float *)a2 = v8;
    *(float *)a3 = v4;
    *(void *)(a2 + 8) = v10;
    *(void *)(a3 + 8) = v9;
    float v11 = *(float *)result;
    float v12 = *(float *)a2;
    if (*(float *)result >= *(float *)a2)
    {
      if (v12 < v11) {
        return result;
      }
      unint64_t v13 = *(void *)(result + 8);
      unint64_t v14 = *(void *)(a2 + 8);
      if (v13 >= v14) {
        return result;
      }
    }
    else
    {
      unint64_t v13 = *(void *)(result + 8);
      unint64_t v14 = *(void *)(a2 + 8);
    }
    *(float *)uint64_t result = v12;
    *(float *)a2 = v11;
    *(void *)(result + 8) = v14;
    *(void *)(a2 + 8) = v13;
    return result;
  }
  float v5 = *(float *)a3;
  if (v4 < *(float *)a3)
  {
    unint64_t v6 = *(void *)(a3 + 8);
LABEL_6:
    *(float *)uint64_t result = v5;
    *(float *)a3 = v3;
    uint64_t v7 = *(void *)(result + 8);
    *(void *)(result + 8) = v6;
    *(void *)(a3 + 8) = v7;
    return result;
  }
  unint64_t v15 = *(void *)(a2 + 8);
  if (v5 >= v4)
  {
    unint64_t v6 = *(void *)(a3 + 8);
    if (v15 < v6) {
      goto LABEL_6;
    }
  }
  *(float *)uint64_t result = v4;
  *(float *)a2 = v3;
  unint64_t v16 = *(void *)(result + 8);
  *(void *)(result + 8) = v15;
  *(void *)(a2 + 8) = v16;
  float v17 = *(float *)a3;
  if (v3 < *(float *)a3)
  {
    unint64_t v18 = *(void *)(a3 + 8);
LABEL_23:
    *(float *)a2 = v17;
    *(float *)a3 = v3;
    *(void *)(a2 + 8) = v18;
    *(void *)(a3 + 8) = v16;
    return result;
  }
  if (v17 >= v3)
  {
    unint64_t v18 = *(void *)(a3 + 8);
    if (v16 < v18) {
      goto LABEL_23;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)a1;
      float v7 = *(float *)(a2 - 16);
      if (*(float *)a1 < v7)
      {
        unint64_t v8 = *(void *)(a1 + 8);
        unint64_t v9 = *(void *)(a2 - 8);
LABEL_30:
        *(float *)a1 = v7;
        *(float *)(a2 - 16) = v6;
        *(void *)(a1 + 8) = v9;
        *(void *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        unint64_t v8 = *(void *)(a1 + 8);
        unint64_t v9 = *(void *)(a2 - 8);
        if (v8 < v9) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a1 + 16, a1 + 32);
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  float v14 = *(float *)v10;
  float v15 = *(float *)v11;
  if (*(float *)v10 >= *(float *)v11)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    unint64_t v17 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(v11 + 8);
    if (v17 >= v16) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(v10 + 8);
  }
  *(float *)uint64_t v11 = v14;
  *(void *)(v11 + 8) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    float v21 = *(float *)(a1 + v19 + 16);
    if (v21 >= v15)
    {
      if (v15 < v21)
      {
        uint64_t v18 = a1 + v19 + 32;
        goto LABEL_20;
      }
      unint64_t v22 = *(void *)(a1 + v19 + 24);
      if (v22 >= v16)
      {
        uint64_t v18 = v10;
LABEL_20:
        *(float *)uint64_t v18 = v15;
        *(void *)(v18 + 8) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v22 = *(void *)(v20 + 24);
    }
    v10 -= 16;
    *(float *)(v20 + 32) = v21;
    *(void *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a2, a3);
  float v9 = *(float *)a3;
  float v10 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v10 < v9) {
      return result;
    }
    unint64_t v11 = *(void *)(a3 + 8);
    unint64_t v12 = *(void *)(a4 + 8);
    if (v11 >= v12) {
      return result;
    }
  }
  else
  {
    unint64_t v11 = *(void *)(a3 + 8);
    unint64_t v12 = *(void *)(a4 + 8);
  }
  *(float *)a3 = v10;
  *(float *)a4 = v9;
  *(void *)(a3 + 8) = v12;
  *(void *)(a4 + 8) = v11;
  float v13 = *(float *)a2;
  float v14 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v14 < v13) {
      return result;
    }
    unint64_t v15 = *(void *)(a2 + 8);
    unint64_t v16 = *(void *)(a3 + 8);
    if (v15 >= v16) {
      return result;
    }
  }
  else
  {
    unint64_t v15 = *(void *)(a2 + 8);
    unint64_t v16 = *(void *)(a3 + 8);
  }
  *(float *)a2 = v14;
  *(float *)a3 = v13;
  *(void *)(a2 + 8) = v16;
  *(void *)(a3 + 8) = v15;
  float v17 = *(float *)a1;
  float v18 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    unint64_t v19 = *(void *)(a1 + 8);
    unint64_t v20 = *(void *)(a2 + 8);
LABEL_15:
    *(float *)a1 = v18;
    *(float *)a2 = v17;
    *(void *)(a1 + 8) = v20;
    *(void *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    unint64_t v19 = *(void *)(a1 + 8);
    unint64_t v20 = *(void *)(a2 + 8);
    if (v19 < v20) {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a2, a3, a4);
  float v11 = *(float *)a4;
  float v12 = *(float *)a5;
  if (*(float *)a4 >= *(float *)a5)
  {
    if (v12 < v11) {
      return result;
    }
    unint64_t v13 = *(void *)(a4 + 8);
    unint64_t v14 = *(void *)(a5 + 8);
    if (v13 >= v14) {
      return result;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a4 + 8);
    unint64_t v14 = *(void *)(a5 + 8);
  }
  *(float *)a4 = v12;
  *(float *)a5 = v11;
  *(void *)(a4 + 8) = v14;
  *(void *)(a5 + 8) = v13;
  float v15 = *(float *)a3;
  float v16 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v16 < v15) {
      return result;
    }
    unint64_t v17 = *(void *)(a3 + 8);
    unint64_t v18 = *(void *)(a4 + 8);
    if (v17 >= v18) {
      return result;
    }
  }
  else
  {
    unint64_t v17 = *(void *)(a3 + 8);
    unint64_t v18 = *(void *)(a4 + 8);
  }
  *(float *)a3 = v16;
  *(float *)a4 = v15;
  *(void *)(a3 + 8) = v18;
  *(void *)(a4 + 8) = v17;
  float v19 = *(float *)a2;
  float v20 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v20 < v19) {
      return result;
    }
    unint64_t v21 = *(void *)(a2 + 8);
    unint64_t v22 = *(void *)(a3 + 8);
    if (v21 >= v22) {
      return result;
    }
  }
  else
  {
    unint64_t v21 = *(void *)(a2 + 8);
    unint64_t v22 = *(void *)(a3 + 8);
  }
  *(float *)a2 = v20;
  *(float *)a3 = v19;
  *(void *)(a2 + 8) = v22;
  *(void *)(a3 + 8) = v21;
  float v23 = *(float *)a1;
  float v24 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    unint64_t v25 = *(void *)(a1 + 8);
    unint64_t v26 = *(void *)(a2 + 8);
LABEL_9:
    *(float *)a1 = v24;
    *(float *)a2 = v23;
    *(void *)(a1 + 8) = v26;
    *(void *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    unint64_t v25 = *(void *)(a1 + 8);
    unint64_t v26 = *(void *)(a2 + 8);
    if (v25 < v26) {
      goto LABEL_9;
    }
  }
  return result;
}

void sub_1DD7ADB64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7ADCE0(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1DD7ADEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7AE0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7AE410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7AE6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1DD7AE7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7AED10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7AEFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *getJPHepburn()
{
  id v0 = &unk_1F393A0A0;
  return &unk_1F393A0A0;
}

void *getZhHansFN()
{
  id v0 = &unk_1F393AE10;
  return &unk_1F393AE10;
}

void *getZhHansLN()
{
  id v0 = &unk_1F393AE38;
  return &unk_1F393AE38;
}

void *getLMConfig()
{
  id v0 = &unk_1F393A078;
  return &unk_1F393A078;
}

void *getConfidenceThresholds()
{
  id v0 = &unk_1F3936180;
  return &unk_1F3936180;
}

void *getLineWrappingConfig()
{
  id v0 = &unk_1F393AD98;
  return &unk_1F393AD98;
}

void *getFormContentTypeMappings()
{
  id v0 = &unk_1F3935518;
  return &unk_1F3935518;
}

void *getFormContentTypes()
{
  id v0 = &unk_1F3935530;
  return &unk_1F3935530;
}

void *getNamePrefixes()
{
  id v0 = &unk_1F393ADE8;
  return &unk_1F393ADE8;
}

const __int16 *mult(const __int16 *result, int a2, int16x4_t *a3, int a4, int *a5, int a6)
{
  if ((a2 & 7) == 0) {
    return mult8(result, a2, a3, a4, a5, a6);
  }
  if (a6 >= 4)
  {
    unint64_t v6 = 0;
    do
    {
      if (a2 >= 1)
      {
        float v7 = &a5[v6];
        int32x4_t v8 = *(int32x4_t *)v7;
        float v9 = result;
        uint64_t v10 = a2;
        float v11 = a3;
        do
        {
          int16x4_t v12 = *v11++;
          int16x4_t v13 = vld1_dup_s16(v9++);
          int32x4_t v8 = vsraq_n_s32(v8, vmull_s16(v13, v12), 0xCuLL);
          --v10;
        }
        while (v10);
        a3 += (a2 - 1) + 1;
        *(int32x4_t *)float v7 = v8;
      }
      v6 += 4;
    }
    while (v6 <= (a6 - 4));
  }
  if (a2 >= 1)
  {
    if (a6 <= 0) {
      int v14 = -(-a6 & 3);
    }
    else {
      int v14 = a6 & 3;
    }
    uint64_t v15 = a2;
    while (v14 != 3)
    {
      if (v14 == 2)
      {
        int v16 = *result;
LABEL_20:
        int v18 = a3->i16[0];
        a3 = (int16x4_t *)((char *)a3 + 2);
        a5[a6 - 2] += (v16 * v18) >> 12;
        goto LABEL_21;
      }
      if (v14 == 1)
      {
        int v16 = *result;
LABEL_21:
        int v19 = a3->i16[0];
        a3 = (int16x4_t *)((char *)a3 + 2);
        a5[a6 - 1] += (v16 * v19) >> 12;
      }
      ++result;
      if (!--v15) {
        return result;
      }
    }
    int v16 = *result;
    int v17 = a3->i16[0];
    a3 = (int16x4_t *)((char *)a3 + 2);
    a5[a6 - 3] += (v17 * v16) >> 12;
    goto LABEL_20;
  }
  return result;
}

const __int16 *mult8(const __int16 *result, int a2, int16x4_t *a3, int a4, int *a5, int a6)
{
  if (a6 >= 4)
  {
    unint64_t v6 = 0;
    int v7 = a2 - 4;
    do
    {
      int32x4_t v8 = 0uLL;
      if (a2 >= 4)
      {
        int v9 = 0;
        uint64_t v10 = a3;
        float v11 = result;
        do
        {
          int16x4x4_t v18 = vld4_dup_s16(v11);
          v11 += 4;
          int32x4_t v8 = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(v8, vmull_s16(v18.val[0], *v10), 0xCuLL), vmull_s16(v18.val[1], (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v10->i8, *(int8x16_t *)v10->i8, 8uLL)), 0xCuLL), vmull_s16(v18.val[2], v10[2]), 0xCuLL), vmull_s16(v18.val[3], (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v10[2].i8, *(int8x16_t *)v10[2].i8, 8uLL)), 0xCuLL);
          v9 += 4;
          v10 += 4;
        }
        while (v9 <= v7);
        a3 += 4 * (v7 >> 2) + 4;
      }
      *(int32x4_t *)&a5[v6] = v8;
      v6 += 4;
    }
    while (v6 <= (a6 - 4));
  }
  if (a2 >= 1)
  {
    if (a6 <= 0) {
      int v12 = -(-a6 & 3);
    }
    else {
      int v12 = a6 & 3;
    }
    uint64_t v13 = a2;
    while (v12 != 3)
    {
      if (v12 == 2)
      {
        int v14 = *result;
LABEL_19:
        int v16 = a3->i16[0];
        a3 = (int16x4_t *)((char *)a3 + 2);
        a5[a6 - 2] += (v14 * v16) >> 12;
        goto LABEL_20;
      }
      if (v12 == 1)
      {
        int v14 = *result;
LABEL_20:
        int v17 = a3->i16[0];
        a3 = (int16x4_t *)((char *)a3 + 2);
        a5[a6 - 1] += (v14 * v17) >> 12;
      }
      ++result;
      if (!--v13) {
        return result;
      }
    }
    int v14 = *result;
    int v15 = a3->i16[0];
    a3 = (int16x4_t *)((char *)a3 + 2);
    a5[a6 - 3] += (v15 * v14) >> 12;
    goto LABEL_19;
  }
  return result;
}

uint64_t convolve(uint64_t result, int a2, int a3, __int16 *a4, int a5, int a6, int *a7, char a8)
{
  if (a3 >= a6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (a2 - a5 + 1);
    uint64_t v10 = (a3 - a6 + 1);
    uint64_t v11 = 2 * a2;
    do
    {
      if (((a2 - a5) & 0x80000000) == 0)
      {
        uint64_t v12 = 0;
        uint64_t v13 = result;
        do
        {
          if (a6 < 1)
          {
            int v15 = 0;
          }
          else
          {
            uint64_t v14 = 0;
            int v15 = 0;
            int v16 = a6 * a5 - 1;
            int v17 = (__int16 *)v13;
            do
            {
              int v18 = v16;
              int v19 = v17;
              uint64_t v20 = a5;
              if (a5 >= 1)
              {
                do
                {
                  int v21 = *v19++;
                  v15 += (v21 * a4[v18--]) >> a8;
                  --v20;
                }
                while (v20);
              }
              ++v14;
              int v17 = (__int16 *)((char *)v17 + v11);
              v16 -= a5;
            }
            while (v14 != a6);
          }
          a7[v12 + v8 * (int)v9] = v15;
          ++v12;
          v13 += 2;
        }
        while (v12 != v9);
      }
      ++v8;
      result += v11;
    }
    while (v8 != v10);
  }
  return result;
}

uint64_t convolves(uint64_t result, int a2, int a3, __int16 *a4, int a5, int a6, int *a7, char a8)
{
  if (a3 >= a6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (a2 - a5 + 1);
    uint64_t v10 = (a3 - a6 + 1);
    uint64_t v11 = 2 * a2;
    do
    {
      if (((a2 - a5) & 0x80000000) == 0)
      {
        uint64_t v12 = 0;
        uint64_t v13 = result;
        do
        {
          if (a6 < 1)
          {
            int v15 = 0;
          }
          else
          {
            uint64_t v14 = 0;
            int v15 = 0;
            int v16 = a6 * a5 - 1;
            int v17 = (__int16 *)v13;
            do
            {
              int v18 = v16;
              int v19 = v17;
              uint64_t v20 = a5;
              if (a5 >= 1)
              {
                do
                {
                  int v21 = *v19++;
                  v15 += (v21 * a4[v18--]) >> a8;
                  --v20;
                }
                while (v20);
              }
              ++v14;
              int v17 = (__int16 *)((char *)v17 + v11);
              v16 -= a5;
            }
            while (v14 != a6);
          }
          a7[v12 + v8 * (int)v9] += v15;
          ++v12;
          v13 += 2;
        }
        while (v12 != v9);
      }
      ++v8;
      result += v11;
    }
    while (v8 != v10);
  }
  return result;
}

uint64_t convolves5x5(uint64_t result, int a2, int a3, __int16 *a4, int a5, int *a6)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  int v6 = a2 - a5;
  int v7 = a2 - a5 + 1;
  if ((v7 & 3) != 0)
  {
    uint64_t v8 = 0;
    memset(v79, 0, 50);
    do
    {
      uint64_t v9 = (int16x4_t *)&v79[v8 * 2];
      *uint64_t v9 = vrev64_s16(*(int16x4_t *)&a4[v8 + 1]);
      v9[1].i16[0] = a4[v8];
      v8 += 5;
    }
    while (v8 != 25);
    for (uint64_t i = 40; i != 50; i += 2)
    {
      uint64_t v11 = &v79[i];
      __int16 v12 = *(_WORD *)&v79[i - 40];
      *(v11 - 20) = *(_WORD *)&v79[i];
      *uint64_t v11 = v12;
      __int16 v13 = *(_WORD *)&v79[i - 30];
      *(v11 - 15) = *(_WORD *)&v79[i - 10];
      *(v11 - 5) = v13;
    }
    if (a3 >= a5)
    {
      uint64_t v14 = 0;
      int16x8_t v15 = *(int16x8_t *)&v79[40];
      int16x8_t v16 = *(int16x8_t *)&v79[30];
      int16x8_t v17 = *(int16x8_t *)&v79[20];
      int16x8_t v18 = *(int16x8_t *)&v79[10];
      uint64_t v19 = 2 * a2;
      int16x8_t v20 = *(int16x8_t *)v79;
      do
      {
        if (v6 < 0)
        {
          uint64_t v21 = v14 + 1;
        }
        else
        {
          uint64_t v21 = v14 + 1;
          unint64_t v22 = (int *)((char *)a6 + 4 * v7 * v14);
          uint64_t v23 = (v6 + 1);
          float v24 = (int16x4_t *)(result + v19 * v14);
          do
          {
            int16x8_t v25 = *(int16x8_t *)&v24->i8[2 * a2];
            unint64_t v26 = (int16x8_t *)((char *)v24 + v19 + v19);
            int16x8_t v27 = *v26;
            float v28 = (int16x4_t *)&v26->i8[v19];
            int16x8_t v29 = *(int16x8_t *)&v28->i8[2 * a2];
            int32x4_t v30 = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vshrq_n_s32(vshlq_n_s32(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v25.i8), 5uLL), 0x10uLL), vshlq_n_s32(vmull_s16(*(int16x4_t *)v20.i8, *v24), 5uLL), 0x10uLL), vshlq_n_s32(vmull_s16(*(int16x4_t *)v17.i8, *(int16x4_t *)v27.i8), 5uLL), 0x10uLL), vshlq_n_s32(vmull_s16(*(int16x4_t *)v16.i8, *v28), 5uLL), 0x10uLL), vshlq_n_s32(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v29.i8), 5uLL), 0x10uLL);
            *v22++ += vpadalq_s32(vdupq_laneq_s64(vpaddlq_s32(v30), 1), v30).u32[0]
                    + vaddq_s32((int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmull_high_s16(v18, v25), 0xBuLL), (uint32x4_t)vmull_high_s16(v20, *(int16x8_t *)v24->i8), 0xBuLL), (uint32x4_t)vmull_high_s16(v17, v27), 0xBuLL), (uint32x4_t)vmull_high_s16(v16, *(int16x8_t *)v28->i8), 0xBuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vmull_high_s16(v15, v29), 0xBuLL) & __PAIR128__(0xFFE0FFFFFFE0FFFFLL, 0xFFE0FFFFFFE0FFFFLL))).i16[0];
            float v24 = (int16x4_t *)((char *)v24 + 2);
            --v23;
          }
          while (v23);
        }
        uint64_t v14 = v21;
      }
      while (v21 != a3 - a5 + 1);
    }
  }
  else
  {
    uint64_t v31 = 0;
    memset(v79, 0, 50);
    do
    {
      uint64_t v32 = (int16x4_t *)&v79[v31 * 2];
      *uint64_t v32 = vrev64_s16(*(int16x4_t *)&a4[v31 + 1]);
      v32[1].i16[0] = a4[v31];
      v31 += 5;
    }
    while (v31 != 25);
    for (uint64_t j = 40; j != 50; j += 2)
    {
      float v34 = &v79[j];
      __int16 v35 = *(_WORD *)&v79[j - 40];
      *(v34 - 20) = *(_WORD *)&v79[j];
      _WORD *v34 = v35;
      __int16 v36 = *(_WORD *)&v79[j - 30];
      *(v34 - 15) = *(_WORD *)&v79[j - 10];
      *(v34 - 5) = v36;
    }
    if (a3 >= a5)
    {
      uint64_t v37 = 0;
      int16x4_t v38 = *(int16x4_t *)&v79[8];
      int16x4_t v78 = *(int16x4_t *)v79;
      int16x4_t v39 = *(int16x4_t *)&v79[2];
      int16x4_t v40 = *(int16x4_t *)&v79[4];
      int16x4_t v41 = *(int16x4_t *)&v79[6];
      int16x4_t v42 = *(int16x4_t *)&v79[10];
      int16x4_t v43 = *(int16x4_t *)&v79[12];
      int16x4_t v44 = *(int16x4_t *)&v79[14];
      int16x4_t v45 = *(int16x4_t *)&v79[16];
      int16x4_t v46 = *(int16x4_t *)&v79[28];
      int16x4_t v47 = *(int16x4_t *)&v79[30];
      int16x4_t v72 = *(int16x4_t *)&v79[32];
      int16x4_t v73 = *(int16x4_t *)&v79[22];
      int16x4_t v71 = *(int16x4_t *)&v79[34];
      int16x4_t v70 = *(int16x4_t *)&v79[36];
      int16x4_t v69 = *(int16x4_t *)&v79[38];
      int16x4_t v68 = *(int16x4_t *)&v79[40];
      uint64_t v48 = 2 * a2;
      uint64_t v49 = 4 * v7;
      int16x4_t v50 = *(int16x4_t *)&v79[42];
      int16x4_t v76 = *(int16x4_t *)&v79[24];
      int16x4_t v77 = *(int16x4_t *)&v79[18];
      int16x4_t v75 = *(int16x4_t *)&v79[20];
      int16x4_t v74 = *(int16x4_t *)&v79[26];
      do
      {
        if (v6 < 0)
        {
          uint64_t v52 = v37 + 1;
        }
        else
        {
          uint64_t v51 = 0;
          uint64_t v52 = v37 + 1;
          BOOL v53 = (int16x4_t *)(result + v48 * v37);
          uint64_t v54 = (int32x4_t *)((char *)a6 + v49 * v37);
          do
          {
            int8x16_t v55 = *(int8x16_t *)v53->i8;
            int16x8_t v56 = *(int16x8_t *)&v53->i8[2 * a2];
            float v57 = (int16x4_t *)((char *)v53 + v48 + v48);
            int32x4_t v58 = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(*v54, vmull_lane_s16(*v53, v78, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v55, v55, 2uLL), v39, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v55, v55, 4uLL), v40, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v55, v55, 6uLL), v41, 0), 0xBuLL), vmull_high_lane_s16(*(int16x8_t *)v53->i8, v38, 0), 0xBuLL), vmull_lane_s16(*(int16x4_t *)v56.i8, v42, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 2uLL), v43, 0),
                        0xBuLL),
                      vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL), v44, 0),
                      0xBuLL),
                    vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 6uLL), v45, 0),
                    0xBuLL);
            int8x16_t v59 = *(int8x16_t *)v57->i8;
            int32x4_t v60 = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(v58, vmull_high_lane_s16(v56, v77, 0), 0xBuLL), vmull_lane_s16(*v57, v75, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 2uLL), v73, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 4uLL), v76, 0), 0xBuLL);
            int32x4_t v61 = vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 6uLL), v74, 0);
            int32x4_t v62 = vmull_high_lane_s16(*(int16x8_t *)v57->i8, v46, 0);
            float v63 = (int16x4_t *)((char *)v57 + v48);
            int32x4_t v64 = vsraq_n_s32(v60, v61, 0xBuLL);
            int8x16_t v65 = *(int8x16_t *)v63->i8;
            int32x4_t v66 = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(v64, v62, 0xBuLL), vmull_lane_s16(*v63, v47, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v65, v65, 2uLL), v72, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v65, v65, 4uLL), v71, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v65, v65, 6uLL), v70, 0), 0xBuLL);
            int16x8_t v67 = *(int16x8_t *)&v63->i8[2 * a2];
            *v54++ = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(v66, vmull_high_lane_s16(*(int16x8_t *)v63->i8, v69, 0), 0xBuLL), vmull_lane_s16(*(int16x4_t *)v67.i8, v68, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 2uLL), v50, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL), v50, 1), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 6uLL), v50, 2), 0xBuLL), vmull_high_lane_s16(v67, v50, 3), 0xBuLL);
            v51 += 4;
            ++v53;
          }
          while (v51 <= v6);
        }
        uint64_t v37 = v52;
      }
      while (v52 != a3 - a5 + 1);
    }
  }
  return result;
}

void sub_1DD7B0FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B1444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (v20) {
    operator delete(v20);
  }
  std::vector<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);

  _Unwind_Resume(a1);
}

void sub_1DD7B1678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B16B0()
{
}

void ___ZL16isValidLabelTextP8NSString_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@"〒$"];
  id v1 = (void *)_MergedGlobals_17;
  _MergedGlobals_17 = v0;

  uint64_t v2 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@"0123456789.０１２３４５６７８９０．"];
  float v3 = (void *)qword_1EB58CAD0;
  qword_1EB58CAD0 = v2;
}

uint64_t std::__split_buffer<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  if (a3 < 2) {
    return;
  }
  if (a3 == 2)
  {
    uint64_t v8 = a2 - 3;
    double v9 = *((double *)a2 - 3);
    if (v9 < *(double *)a1
      || *(double *)a1 >= v9
      && ((unint64_t v16 = *(a2 - 2), v17 = a1[1], v16 < v17) || v17 >= v16 && *(a2 - 1) < (unint64_t)a1[2]))
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100](a1, v8);
    }
    return;
  }
  unint64_t v10 = a3;
  if ((uint64_t)a3 <= 0)
  {
    if (a1 == a2) {
      return;
    }
    int16x8_t v18 = (double *)(a1 + 3);
    if (a1 + 3 == a2) {
      return;
    }
    uint64_t v19 = 0;
    int16x8_t v20 = (char *)a1;
    while (1)
    {
      uint64_t v21 = (uint64_t *)v20;
      int16x8_t v20 = (char *)v18;
      double v22 = *v18;
      double v23 = *(double *)v21;
      if (*v18 >= *(double *)v21)
      {
        if (v23 < v22) {
          goto LABEL_38;
        }
        unint64_t v24 = v21[4];
        unint64_t v25 = v21[1];
        if (v24 >= v25 && (v25 < v24 || v21[5] >= (unint64_t)v21[2])) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v24 = v21[4];
        unint64_t v25 = v21[1];
      }
      unint64_t v26 = v21[5];
      v21[5] = 0;
      *(double *)int16x8_t v20 = v23;
      *((void *)v20 + 1) = v25;
      uint64_t v27 = v21[2];
      v21[2] = 0;
      float v28 = (void *)*((void *)v20 + 2);
      *((void *)v20 + 2) = v27;

      if (v21 == a1)
      {
LABEL_36:
        uint64_t v21 = a1;
        goto LABEL_37;
      }
      uint64_t v29 = v19;
      while (1)
      {
        double v30 = *(double *)((char *)a1 + v29 - 24);
        if (v22 >= v30) {
          break;
        }
        unint64_t v31 = *(uint64_t *)((char *)a1 + v29 - 16);
LABEL_35:
        v21 -= 3;
        uint64_t v32 = (char *)a1 + v29;
        *(double *)uint64_t v32 = v30;
        uint64_t v33 = *(uint64_t *)((char *)a1 + v29 - 8);
        *((void *)v32 - 1) = 0;
        float v34 = *(void **)((char *)a1 + v29 + 16);
        *((void *)v32 + 1) = v31;
        *((void *)v32 + 2) = v33;

        v29 -= 24;
        if (!v29) {
          goto LABEL_36;
        }
      }
      if (v30 < v22) {
        goto LABEL_37;
      }
      unint64_t v31 = *(uint64_t *)((char *)a1 + v29 - 16);
      if (v24 < v31) {
        goto LABEL_35;
      }
      if (v31 < v24) {
        goto LABEL_37;
      }
      if (v26 < *(uint64_t *)((char *)a1 + v29 - 8)) {
        goto LABEL_35;
      }
      uint64_t v21 = (uint64_t *)((char *)a1 + v29);
LABEL_37:
      *(double *)uint64_t v21 = v22;
      __int16 v35 = (void *)v21[2];
      v21[1] = v24;
      v21[2] = v26;

LABEL_38:
      int16x8_t v18 = (double *)(v20 + 24);
      v19 += 24;
      if (v20 + 24 == (char *)a2) {
        return;
      }
    }
  }
  unint64_t v13 = a3 >> 1;
  uint64_t v14 = (unint64_t *)&a1[3 * (a3 >> 1)];
  unint64_t v15 = a3 >> 1;
  if ((uint64_t)v10 > a5)
  {
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(a1, v14, v15, a4, a5);
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(&a1[3 * (v10 >> 1)], a2, v10 - (v10 >> 1), a4, a5);
    std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(a1, &a1[3 * (v10 >> 1)], a2, v10 >> 1, v10 - (v10 >> 1), a4, a5);
    return;
  }
  __n128 v36 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>((uint64_t)a1, v14, v15, a4, a6);
  uint64_t v37 = a4 + 24 * v13;
  std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>((uint64_t)&a1[3 * (v10 >> 1)], (unint64_t *)a2, v10 - (v10 >> 1), v37, v36);
  uint64_t v38 = a4 + 24 * v10;
  int16x4_t v39 = (void **)(a1 + 2);
  uint64_t v40 = v37;
  uint64_t v41 = a4;
  while (v40 != v38)
  {
    double v42 = *(double *)v40;
    double v43 = *(double *)v41;
    if (*(double *)v40 >= *(double *)v41)
    {
      if (v43 < v42)
      {
        int16x4_t v47 = *(void **)(v41 + 8);
LABEL_48:
        *((double *)v39 - 2) = v43;
        *(v39 - 1) = v47;
        uint64_t v48 = *(void **)(v41 + 16);
        *(void *)(v41 + 16) = 0;
        uint64_t v49 = *v39;
        *int16x4_t v39 = v48;

        v41 += 24;
        goto LABEL_49;
      }
      int16x4_t v44 = *(void **)(v40 + 8);
      int16x4_t v47 = *(void **)(v41 + 8);
      if (v44 >= v47 && (v47 < v44 || *(void *)(v40 + 16) >= *(void *)(v41 + 16))) {
        goto LABEL_48;
      }
    }
    else
    {
      int16x4_t v44 = *(void **)(v40 + 8);
    }
    *((double *)v39 - 2) = v42;
    *(v39 - 1) = v44;
    int16x4_t v45 = *(void **)(v40 + 16);
    *(void *)(v40 + 16) = 0;
    int16x4_t v46 = *v39;
    *int16x4_t v39 = v45;

    v40 += 24;
LABEL_49:
    v39 += 3;
    if (v41 == v37)
    {
      if (v40 != v38)
      {
        unint64_t v55 = 0;
        do
        {
          unint64_t v56 = v40 + v55;
          float v57 = &v39[v55 / 8];
          *(v57 - 2) = *(void **)(v40 + v55);
          *(v57 - 1) = *(void **)(v40 + v55 + 8);
          int32x4_t v58 = *(void **)(v40 + v55 + 16);
          *(void *)(v40 + v55 + 16) = 0;
          int8x16_t v59 = v39[v55 / 8];
          *float v57 = v58;

          v55 += 24;
        }
        while (v56 + 24 != v38);
      }
      goto LABEL_62;
    }
  }
  if (v41 != v37)
  {
    unint64_t v50 = 0;
    do
    {
      unint64_t v51 = v41 + v50;
      uint64_t v52 = &v39[v50 / 8];
      *(v52 - 2) = *(void **)(v41 + v50);
      *(v52 - 1) = *(void **)(v41 + v50 + 8);
      BOOL v53 = *(void **)(v41 + v50 + 16);
      *(void *)(v41 + v50 + 16) = 0;
      uint64_t v54 = v39[v50 / 8];
      *uint64_t v52 = v53;

      v50 += 24;
    }
    while (v51 + 24 != v37);
  }
LABEL_62:
  if (a4)
  {
    int32x4_t v60 = (void **)(a4 + 16);
    do
    {
      int32x4_t v61 = *v60;
      v60 += 3;

      --v10;
    }
    while (v10);
  }
}

void sub_1DD7B1BB4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v4 = (void **)(v1 + 16);
    do
    {
      float v5 = *v4;
      v4 += 3;

      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (!a3) {
    return result;
  }
  float v5 = (double *)a4;
  uint64_t v8 = (double *)a1;
  if (a3 == 2)
  {
    double v11 = *((double *)a2 - 3);
    double v12 = *(double *)a1;
    if (v11 < *(double *)a1)
    {
      unint64_t v13 = *(a2 - 2);
LABEL_7:
      *(double *)a4 = v11;
      uint64_t v14 = *(a2 - 1);
      *(a2 - 1) = 0;
      *(void *)(a4 + 8) = v13;
      *(void *)(a4 + 16) = v14;
      double v9 = (unint64_t *)(a1 + 16);
      uint64_t result = *(__n128 *)a1;
      *(_OWORD *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)a1;
      unint64_t v10 = (unint64_t *)(a4 + 40);
      goto LABEL_36;
    }
    if (v12 >= v11)
    {
      unint64_t v13 = *(a2 - 2);
      unint64_t v37 = *(void *)(a1 + 8);
      if (v13 < v37 || v37 >= v13 && *(a2 - 1) < *(void *)(a1 + 16)) {
        goto LABEL_7;
      }
    }
    else
    {
      unint64_t v37 = *(void *)(a1 + 8);
    }
    *(double *)a4 = v12;
    uint64_t v38 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    *(void *)(a4 + 8) = v37;
    *(void *)(a4 + 16) = v38;
    uint64_t result = *(__n128 *)(a2 - 3);
    *(__n128 *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
    unint64_t v10 = (unint64_t *)(a4 + 40);
    double v9 = a2 - 1;
    goto LABEL_36;
  }
  if (a3 == 1)
  {
    double v9 = (unint64_t *)(a1 + 16);
    uint64_t result = *(__n128 *)a1;
    *(_OWORD *)a4 = *(_OWORD *)a1;
    unint64_t v10 = (unint64_t *)(a4 + 16);
LABEL_36:
    unint64_t v39 = *v9;
    *double v9 = 0;
    *unint64_t v10 = v39;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    uint64_t v40 = (double *)(a1 + 24 * (a3 >> 1));
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(a1, v40, a3 >> 1, a4, a3 >> 1);
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(&v8[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v5[3 * (a3 >> 1)], a3 - (a3 >> 1));
    uint64_t v41 = (unint64_t *)&v8[3 * (a3 >> 1)];
    while (1)
    {
      if (v41 == a2)
      {
        if (v8 != v40)
        {
          uint64_t v47 = 0;
          do
          {
            uint64_t v48 = (__n128 *)&v5[v47];
            uint64_t v49 = &v8[v47];
            uint64_t result = *(__n128 *)&v8[v47];
            *uint64_t v48 = result;
            unint64_t v50 = *(void *)&v8[v47 + 2];
            v49[2] = 0.0;
            v48[1].n128_u64[0] = v50;
            v47 += 3;
          }
          while (v49 + 3 != v40);
        }
        return result;
      }
      result.n128_u64[0] = *v41;
      double v42 = *v8;
      if (*(double *)v41 >= *v8)
      {
        if (v42 < result.n128_f64[0])
        {
          unint64_t v45 = *((void *)v8 + 1);
LABEL_45:
          *float v5 = v42;
          uint64_t v46 = *((void *)v8 + 2);
          v8[2] = 0.0;
          *((void *)v5 + 1) = v45;
          *((void *)v5 + 2) = v46;
          v8 += 3;
          goto LABEL_46;
        }
        unint64_t v43 = v41[1];
        unint64_t v45 = *((void *)v8 + 1);
        if (v43 >= v45 && (v45 < v43 || v41[2] >= *((void *)v8 + 2))) {
          goto LABEL_45;
        }
      }
      else
      {
        unint64_t v43 = v41[1];
      }
      *float v5 = result.n128_f64[0];
      unint64_t v44 = v41[2];
      _OWORD v41[2] = 0;
      *((void *)v5 + 1) = v43;
      *((void *)v5 + 2) = v44;
      v41 += 3;
LABEL_46:
      v5 += 3;
      if (v8 == v40)
      {
        if (v41 != a2)
        {
          uint64_t v51 = 0;
          do
          {
            uint64_t v52 = &v41[v51];
            BOOL v53 = (__n128 *)&v5[v51];
            uint64_t result = *(__n128 *)&v41[v51];
            *BOOL v53 = result;
            unint64_t v54 = v41[v51 + 2];
            _OWORD v52[2] = 0;
            v53[1].n128_u64[0] = v54;
            v51 += 3;
          }
          while (v52 + 3 != a2);
        }
        return result;
      }
    }
  }
  if ((unint64_t *)a1 == a2) {
    return result;
  }
  uint64_t result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a4 + 16) = v15;
  unint64_t v16 = (double *)(a1 + 24);
  if ((unint64_t *)(a1 + 24) == a2) {
    return result;
  }
  uint64_t v17 = 0;
  int16x8_t v18 = (double *)a4;
  uint64_t v19 = (double *)a4;
  do
  {
    int16x8_t v20 = v16;
    double v21 = *v19;
    v19 += 3;
    result.n128_f64[0] = v21;
    double v22 = *v16;
    if (*v16 >= v21)
    {
      unint64_t v24 = *((void *)v8 + 4);
      if (result.n128_f64[0] < v22
        || (unint64_t v23 = *((void *)v18 + 1), v24 >= v23) && (v23 < v24 || *((void *)v8 + 5) >= *((void *)v18 + 2)))
      {
        void v18[3] = v22;
        uint64_t v34 = *((void *)v8 + 5);
        v8[5] = 0.0;
        *((void *)v18 + 4) = v24;
        *((void *)v18 + 5) = v34;
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v23 = *((void *)v18 + 1);
    }
    void v18[3] = result.n128_f64[0];
    uint64_t v25 = *((void *)v18 + 2);
    v18[2] = 0.0;
    *((void *)v18 + 4) = v23;
    *((void *)v18 + 5) = v25;
    unint64_t v26 = v5;
    if (v18 == v5) {
      goto LABEL_30;
    }
    uint64_t v27 = v17;
    while (1)
    {
      double v28 = *(double *)((char *)v5 + v27 - 24);
      if (*v20 < v28)
      {
        unint64_t v29 = *(void *)((char *)v5 + v27 - 16);
        goto LABEL_26;
      }
      if (v28 < *v20) {
        goto LABEL_29;
      }
      unint64_t v30 = *((void *)v8 + 4);
      unint64_t v29 = *(void *)((char *)v5 + v27 - 16);
      if (v30 >= v29) {
        break;
      }
LABEL_26:
      v18 -= 3;
      unint64_t v31 = (char *)v5 + v27;
      *(double *)unint64_t v31 = v28;
      uint64_t v32 = *(void *)((char *)v5 + v27 - 8);
      *((void *)v31 - 1) = 0;
      uint64_t v33 = *(void **)((char *)v5 + v27 + 16);
      *((void *)v31 + 1) = v29;
      *((void *)v31 + 2) = v32;

      v27 -= 24;
      if (!v27)
      {
        unint64_t v26 = v5;
        goto LABEL_30;
      }
    }
    if (v29 >= v30)
    {
      unint64_t v26 = (double *)((char *)v5 + v27);
      if (*((void *)v8 + 5) >= *(void *)((char *)v5 + v27 - 8)) {
        goto LABEL_30;
      }
      goto LABEL_26;
    }
LABEL_29:
    unint64_t v26 = v18;
LABEL_30:
    double *v26 = *v20;
    v26[1] = v8[4];
    uint64_t v35 = *((void *)v8 + 5);
    v8[5] = 0.0;
    __n128 v36 = (void *)*((void *)v26 + 2);
    *((void *)v26 + 2) = v35;

LABEL_31:
    unint64_t v16 = v20 + 3;
    v17 += 24;
    int16x8_t v18 = v19;
    uint64_t v8 = v20;
  }
  while (v20 + 3 != (double *)a2);
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  uint64_t v7 = a6;
  uint64_t v8 = a5;
  uint64_t v98 = a7;
  while (a4 > a7 && v8 > a7)
  {
    if (!a4) {
      return;
    }
    unint64_t v13 = 0;
    double v14 = *(double *)a2;
    uint64_t v15 = -a4;
    while (1)
    {
      double v16 = *(double *)((char *)v13 + (void)a1);
      if (v14 < v16) {
        break;
      }
      if (v16 >= v14)
      {
        unint64_t v17 = a2[1];
        unint64_t v18 = *(uint64_t *)((char *)v13 + (void)a1 + 8);
        if (v17 < v18 || v18 >= v17 && (unint64_t)a2[2] < *(uint64_t *)((char *)v13 + (void)a1 + 16)) {
          break;
        }
      }
      v13 += 3;
      if (__CFADD__(v15++, 1)) {
        return;
      }
    }
    uint64_t v20 = -v15;
    unint64_t v97 = a3;
    if (-v15 >= v8)
    {
      if (v15 == -1)
      {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100]((uint64_t *)((char *)v13 + (void)a1), a2);
        return;
      }
      if (v15 > 0) {
        uint64_t v20 = 1 - v15;
      }
      uint64_t v33 = v20 >> 1;
      unint64_t v24 = (uint64_t *)((char *)&a1[3 * (v20 >> 1)] + (void)v13);
      if (a2 == a3)
      {
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
        double v45 = *(double *)v24;
        uint64_t v46 = (char *)&a1[3 * v33] + (void)v13;
        unint64_t v47 = *((void *)v46 + 1);
        unint64_t v48 = *((void *)v46 + 2);
        do
        {
          unint64_t v49 = v44 >> 1;
          unint64_t v50 = v22 + (v44 >> 1);
          uint64_t v51 = &a2[3 * v50];
          if (*(double *)v51 < v45
            || v45 >= *(double *)v51 && ((unint64_t v52 = v51[1], v52 < v47) || v47 >= v52 && v51[2] < v48))
          {
            uint64_t v22 = v50 + 1;
            unint64_t v49 = v44 + ~v49;
          }
          unint64_t v44 = v49;
        }
        while (v49);
      }
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((24 * v22) >> 3);
      unint64_t v23 = (uint64_t *)((char *)&a1[3 * v33] + (void)v13);
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v21 = v8;
      }
      else {
        uint64_t v21 = v8 + 1;
      }
      uint64_t v22 = v21 >> 1;
      unint64_t v23 = (uint64_t *)((char *)v13 + (void)a1);
      unint64_t v24 = (uint64_t *)((char *)v13 + (void)a1);
      if ((uint64_t *)((char *)a2 - (char *)a1) != v13)
      {
        uint64_t v25 = &a2[3 * v22];
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1 - (uint64_t)v13) >> 3);
        double v27 = *(double *)v25;
        unint64_t v28 = v25[1];
        unint64_t v29 = v25[2];
        unint64_t v24 = (uint64_t *)((char *)v13 + (void)a1);
        do
        {
          unint64_t v30 = v26 >> 1;
          unint64_t v31 = &v24[3 * (v26 >> 1)];
          if (v27 >= *(double *)v31)
          {
            if (*(double *)v31 < v27 || (unint64_t v32 = v31[1], v28 >= v32) && (v32 < v28 || v29 >= v31[2]))
            {
              unint64_t v24 = v31 + 3;
              unint64_t v30 = v26 + ~v30;
            }
          }
          unint64_t v26 = v30;
        }
        while (v30);
        unint64_t v23 = v24;
      }
      uint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)a1 - (uint64_t)v13) >> 3);
      unint64_t v34 = v22;
    }
    uint64_t v35 = &a2[3 * v22];
    float v95 = (uint64_t *)((char *)v13 + (void)a1);
    if (v24 == a2)
    {
      __n128 v36 = &a2[3 * v22];
    }
    else
    {
      __n128 v36 = v23;
      if (v22)
      {
        unint64_t v92 = v34;
        uint64_t v93 = v23;
        uint64_t v94 = v33;
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100](v24, a2);
        __n128 v36 = v24 + 3;
        if (v22 != 1)
        {
          unint64_t v37 = a2 + 3;
          uint64_t v38 = 24 * v22 - 24;
          do
          {
            if (v36 == a2) {
              a2 = v37;
            }
            std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100](v36, v37);
            v36 += 3;
            v37 += 3;
            v38 -= 24;
          }
          while (v38);
        }
        if (v36 != a2)
        {
          unint64_t v39 = v36;
          uint64_t v40 = a2;
          do
          {
            while (1)
            {
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100](v39, v40);
              v39 += 3;
              v40 += 3;
              if (v40 == v35) {
                break;
              }
              if (v39 == a2) {
                a2 = v40;
              }
            }
            uint64_t v40 = a2;
          }
          while (v39 != a2);
        }
        a7 = v98;
        unint64_t v23 = v93;
        uint64_t v33 = v94;
        unint64_t v34 = v92;
      }
    }
    a4 = -(v33 + v15);
    uint64_t v41 = v8 - v34;
    if ((uint64_t)(v33 + v34) >= (uint64_t)(v8 - (v33 + v34) - v15))
    {
      a2 = v23;
      uint64_t v7 = a6;
      uint64_t v42 = v33;
      unint64_t v43 = v34;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(v36, v35, v97, -(v33 + v15), v8 - v34, a6, a7);
      uint64_t v41 = v43;
      a4 = v42;
      a3 = v36;
      a1 = v95;
    }
    else
    {
      uint64_t v7 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>((char *)v13 + (void)a1, v23, v36, v33, v34, a6, a7);
      a1 = v36;
      a2 = v35;
      a3 = v97;
    }
    uint64_t v8 = v41;
    a7 = v98;
    if (!v41) {
      return;
    }
  }
  if (a4 > v8)
  {
    if (a3 == a2) {
      return;
    }
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    do
    {
      uint64_t v55 = v7 + v53 * 8;
      unint64_t v56 = &a2[v53];
      *(_OWORD *)uint64_t v55 = *(_OWORD *)&a2[v53];
      uint64_t v57 = a2[v53 + 2];
      v56[2] = 0;
      *(void *)(v55 + 16) = v57;
      ++v54;
      v53 += 3;
    }
    while (v56 + 3 != a3);
    if (!(v53 * 8)) {
      goto LABEL_111;
    }
    uint64_t v58 = v7 + v53 * 8;
    while (1)
    {
      if (a2 == a1)
      {
        unint64_t v81 = 0;
        do
        {
          float v82 = &a3[v81 / 8];
          *(v82 - 3) = *(void *)(v58 + v81 - 24);
          *(v82 - 2) = *(void *)(v58 + v81 - 16);
          uint64_t v83 = *(void *)(v58 + v81 - 8);
          *(void *)(v58 + v81 - 8) = 0;
          uint64_t v84 = (void *)a3[v81 / 8 - 1];
          *(v82 - 1) = v83;

          v81 -= 24;
        }
        while (v58 + v81 != v7);
        goto LABEL_111;
      }
      double v59 = *((double *)a2 - 3);
      double v60 = *(double *)(v58 - 24);
      if (v60 >= v59)
      {
        unint64_t v62 = *(void *)(v58 - 16);
        if (v59 < v60
          || (unint64_t v61 = *(a2 - 2), v62 >= v61) && (v61 < v62 || *(void *)(v58 - 8) >= (unint64_t)*(a2 - 1)))
        {
          *((double *)a3 - 3) = v60;
          *(a3 - 2) = v62;
          uint64_t v65 = *(void *)(v58 - 8);
          *(void *)(v58 - 8) = 0;
          int32x4_t v64 = (void *)*(a3 - 1);
          *(a3 - 1) = v65;
          v58 -= 24;
          goto LABEL_83;
        }
      }
      else
      {
        unint64_t v61 = *(a2 - 2);
      }
      *((double *)a3 - 3) = v59;
      *(a3 - 2) = v61;
      uint64_t v63 = *(a2 - 1);
      *(a2 - 1) = 0;
      int32x4_t v64 = (void *)*(a3 - 1);
      *(a3 - 1) = v63;
      a2 -= 3;
LABEL_83:

      a3 -= 3;
      if (v58 == v7) {
        goto LABEL_111;
      }
    }
  }
  if (a1 == a2) {
    return;
  }
  uint64_t v66 = 0;
  uint64_t v54 = 0;
  do
  {
    uint64_t v67 = v7 + v66 * 8;
    int16x4_t v68 = &a1[v66];
    *(_OWORD *)uint64_t v67 = *(_OWORD *)&a1[v66];
    uint64_t v69 = a1[v66 + 2];
    v68[2] = 0;
    *(void *)(v67 + 16) = v69;
    ++v54;
    v66 += 3;
  }
  while (v68 + 3 != a2);
  if (!(v66 * 8)) {
    goto LABEL_111;
  }
  uint64_t v70 = v7 + v66 * 8;
  uint64_t v71 = v7 + v66 * 8 - 24;
  uint64_t v72 = v7;
  while (a2 != a3)
  {
    double v73 = *(double *)a2;
    double v74 = *(double *)v72;
    if (*(double *)a2 >= *(double *)v72)
    {
      if (v74 < v73)
      {
        unint64_t v76 = *(void *)(v72 + 8);
LABEL_99:
        *(double *)a1 = v74;
        a1[1] = v76;
        uint64_t v79 = *(void *)(v72 + 16);
        *(void *)(v72 + 16) = 0;
        uint64_t v80 = (void *)a1[2];
        a1[2] = v79;

        v72 += 24;
        goto LABEL_100;
      }
      unint64_t v75 = a2[1];
      unint64_t v76 = *(void *)(v72 + 8);
      if (v75 >= v76 && (v76 < v75 || (unint64_t)a2[2] >= *(void *)(v72 + 16))) {
        goto LABEL_99;
      }
    }
    else
    {
      unint64_t v75 = a2[1];
    }
    *(double *)a1 = v73;
    a1[1] = v75;
    uint64_t v77 = a2[2];
    a2[2] = 0;
    int16x4_t v78 = (void *)a1[2];
    a1[2] = v77;

    a2 += 3;
LABEL_100:
    a1 += 3;
    if (v70 == v72) {
      goto LABEL_111;
    }
  }
  if (v70 != v72)
  {
    unint64_t v85 = 0;
    do
    {
      uint64_t v86 = &a1[v85 / 8];
      uint64_t v87 = v72 + v85;
      *uint64_t v86 = *(void *)(v72 + v85);
      v86[1] = *(void *)(v72 + v85 + 8);
      uint64_t v88 = *(void *)(v72 + v85 + 16);
      *(void *)(v72 + v85 + 16) = 0;
      uint64_t v89 = (void *)a1[v85 / 8 + 2];
      v86[2] = v88;

      v85 += 24;
    }
    while (v71 != v87);
  }
LABEL_111:
  if (v7)
  {
    uint64_t v90 = (void **)(v7 + 16);
    do
    {
      unint64_t v91 = *v90;
      v90 += 3;

      --v54;
    }
    while (v54);
  }
}

void std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  uint64_t v4 = a1[1];
  a1[1] = a2[1];
  a2[1] = v4;
  uint64_t v5 = a1[2];
  a1[2] = 0;
  uint64_t v6 = a2[2];
  a2[2] = 0;
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;

  uint64_t v8 = (void *)a2[2];
  a2[2] = v5;
}

void sub_1DD7B306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }

  _Unwind_Resume(a1);
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DD7B334C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DD7B33D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD7B3544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B38F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CRSignpostLog()
{
  if (CRSignpostLog_onceToken != -1) {
    dispatch_once(&CRSignpostLog_onceToken, &__block_literal_global_13);
  }
  return CRSignpostLog_signPostOSLog;
}

os_log_t __CRSignpostLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.CoreRecognition", "SignPosts");
  CRSignpostLog_signPostOSLog = (uint64_t)result;
  return result;
}

void sub_1DD7B3B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B3BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B3C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B3CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B3D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B3E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B3F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B40EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B4564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_1DD7B4728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B483C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B4A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD7B4AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B4D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD7B52C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD7B541C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B56AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a26, 8);
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__122(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__123(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1DD7B5850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B5A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 48) - *(void *)(a2 + 40));
}

void __destroy_helper_block_ea8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_1DD7B5BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD7B5CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B5D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B6010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  _Block_object_dispose(&a18, 8);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void sub_1DD7B6258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = (void *)(a1 + 48);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
}

void __destroy_helper_block_ea8_48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1DD7B6320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD7B67A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a31, 8);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a40, 8);

  _Block_object_dispose((const void *)(v48 - 248), 8);
  unint64_t v50 = *(void **)(v48 - 200);
  if (v50)
  {
    *(void *)(v48 - 192) = v50;
    operator delete(v50);
  }
  _Block_object_dispose((const void *)(v48 - 176), 8);
  _Block_object_dispose((const void *)(v48 - 144), 8);

  _Unwind_Resume(a1);
}

void sub_1DD7B6A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B6C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B6F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B7078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B73C0(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1DD7B74D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  double v11 = v10;

  a9.super_class = (Class)CRLineWrappingContext;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1DD7B7564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B75F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t consolidateWrapScores(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return a2;
  }
  if (!a2) {
    return a1;
  }
  uint64_t result = -10;
  if (a1 != -10 && a2 != -10)
  {
    BOOL v5 = __OFSUB__(a1, 1);
    if (a1 >= 1)
    {
      BOOL v5 = __OFSUB__(a2, 1);
      if (a2 >= 1)
      {
        if (a1 <= a2) {
          uint64_t v6 = a2;
        }
        else {
          uint64_t v6 = a1;
        }
        BOOL v7 = v6 == 2;
        uint64_t v8 = 10;
        uint64_t v9 = 6;
LABEL_20:
        if (v7) {
          return v9;
        }
        else {
          return v8;
        }
      }
    }
    if ((a2 & a1) < 0 != v5)
    {
      if (a1 >= a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = a1;
      }
      BOOL v7 = v11 == -2;
      uint64_t v8 = -10;
      uint64_t v9 = -6;
      goto LABEL_20;
    }
    uint64_t v10 = a2 + a1;
    if (!(a2 + a1)) {
      return 0;
    }
    if (v10 > 5) {
      return 6;
    }
    if (v10 > 1) {
      return 2;
    }
    if (v10 < -5) {
      return -6;
    }
    if (v10 < -1) {
      return -2;
    }
    double v12 = CROSLogForCategory(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = 134218240;
      uint64_t v14 = a1;
      __int16 v15 = 2048;
      uint64_t v16 = a2;
      _os_log_impl(&dword_1DD733000, v12, OS_LOG_TYPE_ERROR, "Error consolidating wrap scores %ld and %ld", (uint8_t *)&v13, 0x16u);
    }

    return a1;
  }
  return result;
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  BOOL v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *BOOL v7 = 0;
      v7[1] = 0;
      BOOL v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    double v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  double v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *double v12 = &v9[v17];
  return result;
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD7B7A04(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD7B7AC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD7B7CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B7DFC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DD7B81EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B848C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B89A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B8E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B91C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void sub_1DD7B9454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7B9E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a38) {
    operator delete(a38);
  }

  _Unwind_Resume(a1);
}

void sub_1DD7BA1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1DD7BA5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1DD7BAA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD7BAFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1DD7BB5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1DD7BB904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD7BBB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }

  _Unwind_Resume(a1);
}

void sub_1DD7BBD78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7BBEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7BC058(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1DD7BC1EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  unint64_t v6 = *(void *)(a4 + 8 * *a2);
  uint64_t v7 = *a3;
  unint64_t v8 = *(void *)(a4 + 8 * *a3);
  if (v6 >= *(void *)(a4 + 8 * *result))
  {
    if (v8 < v6)
    {
      *a2 = v7;
      *a3 = v4;
      uint64_t v9 = *result;
      if (*(void *)(a4 + 8 * *a2) < *(void *)(a4 + 8 * *result))
      {
        *uint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *uint64_t result = v4;
      *a2 = v5;
      if (*(void *)(a4 + 8 * *a3) >= *(void *)(a4 + 8 * v5)) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(void *)(**a3 + 8 * v8) < *(void *)(**a3 + 8 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:a2 - 1 toRanges:**a3];
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v20 = a1 + 1;
      uint64_t v21 = a1 + 2;
      uint64_t v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = **a3;
      if (*(void *)(v25 + 8 * v23) < *(void *)(v25 + 8 * v24))
      {
        *uint64_t v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        if (*(void *)(v25 + 8 * *v22) < *(void *)(v25 + 8 * *v21))
        {
          *uint64_t v21 = v26;
          *uint64_t v22 = v27;
          uint64_t v28 = *v20;
          if (*(void *)(v25 + 8 * v26) < *(void *)(v25 + 8 * *v20))
          {
            a1[1] = v26;
            a1[2] = v28;
            uint64_t v29 = *a1;
            if (*(void *)(v25 + 8 * v26) < *(void *)(v25 + 8 * *a1))
            {
              *a1 = v26;
              a1[1] = v29;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:a1 + 2 toRanges:**a3];
      unint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    if (*(void *)(v13 + 8 * *v11) < *(void *)(v13 + 8 * *v10))
    {
      uint64_t v17 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v17) = v16;
        uint64_t v18 = v17 - 8;
        if (v17 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (*(void *)(v13 + 8 * v15) >= *(void *)(v13 + 8 * v16))
        {
          uint64_t v19 = (uint64_t *)((char *)a1 + v18);
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      uint64_t *v19 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:a3 toRanges:**a5];
  uint64_t v11 = *a3;
  uint64_t v12 = **a5;
  if (*(void *)(v12 + 8 * *a4) < *(void *)(v12 + 8 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    if (*(void *)(v12 + 8 * *a3) < *(void *)(v12 + 8 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (*(void *)(v12 + 8 * *a2) < *(void *)(v12 + 8 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

void sub_1DD7BE0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<CRNormalizedQuad * {__strong}>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 1);
        v3 -= 8;
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

id *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRNormalizedQuad * {__strong}*,CRNormalizedQuad * {__strong}*,CRNormalizedQuad * {__strong}*>(void **a1, void **a2, id *location)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = *v5++;
      objc_storeStrong(location++, v6);
    }
    while (v5 != a2);
  }
  return location;
}

void sub_1DD7BF4A4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t CRCharacterNormalizer::normalizedCharacter(uint64_t a1)
{
  if (u_isWhitespace(a1)) {
    return 95;
  }
  uint64_t result = 57344;
  if ((a1 - 48) >= 0xA
    && (a1 - 188) >= 3
    && a1 != 8585
    && (a1 & 0xFFFFFFF0) != 0x2150)
  {
    if (u_charType(a1) == 20)
    {
      return 57345;
    }
    else if (u_charType(a1) == 21)
    {
      return 57346;
    }
    else if (a1 <= 0x3F && ((1 << a1) & 0x8C00502200000000) != 0)
    {
      return 57347;
    }
    else
    {
      int8_t v3 = u_charType(a1);
      uint64_t result = 57348;
      if (a1 != 63743 && ((1 << v3) & 0x3FF80000) == 0)
      {
        int v4 = 1 << u_charType(a1);
        uint64_t result = a1;
        if ((v4 & 0x3E) != 0)
        {
          LODWORD(result) = MEMORY[0x1E01C0040](a1);
          if ((result - 97) >= 0x1A) {
            return 57349;
          }
          else {
            return result;
          }
        }
      }
    }
  }
  return result;
}

void *CRCharacterNormalizer::CRCharacterNormalizer(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a3;
  result[9] = 0;
  result[10] = 0;
  return result;
}

{
  *uint64_t result = a3;
  result[9] = 0;
  result[10] = 0;
  return result;
}

void CRCharacterNormalizer::~CRCharacterNormalizer(CRCharacterNormalizer *this)
{
  char v11 = 0;
  uint64_t v2 = *((void *)this + 10);
  if (v2 == 2)
  {
    uint64_t v3 = *(void *)this;
    UChar32 v7 = *((_DWORD *)this + 2);
    uint64_t v8 = *((unsigned int *)this + 3);
    if (v7) {
      u_isWhitespace(v7);
    }
    uint64_t v4 = CRCharacterNormalizer::normalizedCharacter(v8);
    uint64_t v5 = (char *)this + 32;
    uint64_t v6 = (char *)this + 56;
  }
  else if (v2 == 1)
  {
    uint64_t v3 = *(void *)this;
    uint64_t v4 = CRCharacterNormalizer::normalizedCharacter(*((unsigned int *)this + 2));
    uint64_t v5 = (char *)this + 24;
    uint64_t v6 = (char *)this + 48;
  }
  else
  {
    if (v2 < 3) {
      return;
    }
    uint64_t v3 = *(void *)this;
    UChar32 v9 = *((_DWORD *)this + 3);
    uint64_t v10 = *((unsigned int *)this + 4);
    if (v9) {
      u_isWhitespace(v9);
    }
    uint64_t v4 = CRCharacterNormalizer::normalizedCharacter(v10);
    uint64_t v5 = (char *)this + 40;
    uint64_t v6 = (char *)this + 64;
  }
  (*(void (**)(uint64_t, uint64_t, void, void, char *))(v3 + 16))(v3, v4, *(void *)v5, *(void *)v6, &v11);
}

uint64_t CRCharacterNormalizer::push(CRCharacterNormalizer *this, unsigned int c)
{
  char v17 = 0;
  if (HIWORD(c)) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 1;
  }
  if ((unint64_t)(*((void *)this + 10) - 1) >= 2) {
    uint64_t v5 = 2;
  }
  else {
    uint64_t v5 = *((void *)this + 10) - 1;
  }
  uint64_t result = u_isWhitespace(c);
  if (result)
  {
    uint64_t v7 = *((void *)this + 10);
    if (v7 < 1) {
      goto LABEL_12;
    }
    uint64_t result = u_isWhitespace(*((_DWORD *)this + v5 + 2));
    if (result)
    {
      *((void *)this + v5 + 6) += v4;
      return result;
    }
  }
  uint64_t v7 = *((void *)this + 10);
LABEL_12:
  if (v7 == 1)
  {
    *((void *)this + 4) = *((void *)this + 6) + *((void *)this + 3);
    *((void *)this + 7) = v4;
    *((_DWORD *)this + 3) = c;
    uint64_t v8 = *(void *)this;
    uint64_t v9 = CRCharacterNormalizer::normalizedCharacter(*((unsigned int *)this + 2));
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(v8 + 16))(v8, v9, *((void *)this + 3), *((void *)this + 6), &v17);
    uint64_t v7 = *((void *)this + 10);
    goto LABEL_18;
  }
  if (v7)
  {
    if (v7 > 2)
    {
      uint64_t v10 = *((void *)this + 5);
      *((void *)this + 3) = *((void *)this + 4);
      *((void *)this + 4) = v10;
      uint64_t v11 = *((void *)this + 8);
      *((void *)this + 6) = *((void *)this + 7);
      *((void *)this + 7) = v11;
      UChar32 v12 = *((_DWORD *)this + 3);
      uint64_t v13 = *((unsigned int *)this + 4);
      *((_DWORD *)this + 2) = v12;
      *((_DWORD *)this + 3) = v13;
      goto LABEL_20;
    }
LABEL_18:
    if (v7 < 2) {
      goto LABEL_25;
    }
    uint64_t v10 = *((void *)this + 4);
    uint64_t v11 = *((void *)this + 7);
    UChar32 v12 = *((_DWORD *)this + 2);
    uint64_t v13 = *((unsigned int *)this + 3);
LABEL_20:
    *((void *)this + 5) = v11 + v10;
    *((void *)this + 8) = v4;
    *((_DWORD *)this + 4) = c;
    uint64_t v14 = *(void *)this;
    if (v12)
    {
      int isWhitespace = u_isWhitespace(v12);
      if (c)
      {
        if (!isWhitespace) {
          u_isWhitespace(c);
        }
      }
    }
    uint64_t v16 = CRCharacterNormalizer::normalizedCharacter(v13);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(v14 + 16))(v14, v16, *((void *)this + 4), *((void *)this + 7), &v17);
    uint64_t v7 = *((void *)this + 10);
    goto LABEL_25;
  }
  *((void *)this + 3) = *((void *)this + 9);
  *((void *)this + 6) = v4;
  *((_DWORD *)this + 2) = c;
LABEL_25:
  *((void *)this + 10) = v7 + 1;
  return result;
}

void sub_1DD7C2E30(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD7C2F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C3018(_Unwind_Exception *a1)
{
  MEMORY[0x1E01BF140](v2, 0x20C40960023A9);

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1DD7C30CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C3204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1DD7C32D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C34C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C353C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C368C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1DD7C36FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C3938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD7C3AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C3B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C3C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_1DD7C3D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  applesauce::CF::ObjectRef<CGPath *>::~ObjectRef((const void **)(v9 + 40));

  applesauce::CF::ObjectRef<CGPath *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_40c41_ZTSN10applesauce2CF9ObjectRefIP6CGPathEE(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3) {
    __n128 result = CFRetain(*(CFTypeRef *)(a2 + 40));
  }
  v2[5] = v3;
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSN10applesauce2CF9ObjectRefIP6CGPathEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

const void **applesauce::CF::ObjectRef<CGPath *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1DD7C3F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C3FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C40D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C4234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD7C43DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1DD7C47E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD7C4A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1DD7C4C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1DD7C4E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C4F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *__copy_helper_atomic_property_(void *result, CFTypeRef *a2)
{
  uint64_t v2 = result;
  CFTypeRef v3 = *a2;
  if (*a2) {
    __n128 result = CFRetain(*a2);
  }
  *uint64_t v2 = v3;
  return result;
}

void __assign_helper_atomic_property_(const void **a1, const void **a2)
{
  CFTypeRef v3 = *a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1DD7C5110(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD7C51E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C52E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD7C5408(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD7C54B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C5654(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD7C5708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C57A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C5884(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1DD7C599C(_Unwind_Exception *a1)
{
  applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef((const void **)(v2 - 32));

  _Unwind_Resume(a1);
}

void sub_1DD7C5A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C5B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C5B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C5C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C5D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1DD7C5DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef((const void **)va);

  _Unwind_Resume(a1);
}

void sub_1DD7C5EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C5F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C6050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C60F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C61BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C62B8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void *__copy_helper_atomic_property__127(void *result, CFTypeRef *a2)
{
  uint64_t v2 = result;
  CFTypeRef v3 = *a2;
  if (*a2) {
    __n128 result = CFRetain(*a2);
  }
  *uint64_t v2 = v3;
  return result;
}

void __assign_helper_atomic_property__128(const void **a1, const void **a2)
{
  CFTypeRef v3 = *a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void *std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<_NSRange>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DD7C64D8(_Unwind_Exception *exception_object)
{
  CFTypeRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CGPoint>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_NSRange>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1DD7C6550(_Unwind_Exception *exception_object)
{
  CFTypeRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CGPoint>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      uint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_1DD7C8298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C8724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C8934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C8BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C8D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C8EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void sub_1DD7C8F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C96A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  _Unwind_Resume(a1);
}

void sub_1DD7C9844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7CAD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

{
}

void sub_1DD7CB588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_1DD7CB910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1DD7CBC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD7CDA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void CRDetectorPolygonExtractor::CRDetectorPolygonExtractor(CRDetectorPolygonExtractor *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
}

void CRDetectorPolygonExtractor::CRDetectorPolygonExtractor(CRDetectorPolygonExtractor *this, int a2, int a3, int a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 7) = a2;
  *((_DWORD *)this + 8) = a3;
  *((_DWORD *)this + 9) = a4;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 7) = a2;
  *((_DWORD *)this + 8) = a3;
  *((_DWORD *)this + 9) = a4;
}

void CRDetectorPolygonExtractor::~CRDetectorPolygonExtractor(CRDetectorPolygonExtractor *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  CFTypeRef v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void CRDetectorPolygonExtractor::generateDensePolygonBar(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 28);
  uint64_t v38 = operator new(8uLL);
  *uint64_t v38 = v5;
  uint64_t v6 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v7 = 0;
    size_t v8 = (uint64_t **)(a3 + 8);
    do
    {
      uint64_t v9 = *v8;
      int v10 = *(_DWORD *)(v6 + 8 * v7);
      if (!*v8) {
        goto LABEL_13;
      }
      uint64_t v11 = (uint64_t *)(a3 + 8);
      do
      {
        int v12 = *((_DWORD *)v9 + 8);
        BOOL v13 = v12 < v10;
        if (v12 >= v10) {
          uint64_t v14 = (uint64_t **)v9;
        }
        else {
          uint64_t v14 = (uint64_t **)(v9 + 1);
        }
        if (!v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 == (uint64_t *)v8 || v10 < *((_DWORD *)v11 + 8))
      {
LABEL_13:
        int v39 = *(_DWORD *)(v6 + 8 * v7);
        __p[1] = 0;
        uint64_t v41 = 0;
        __p[0] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v38, (uint64_t)(v38 + 1), 2uLL);
        uint64_t v15 = *v8;
        uint64_t v16 = (uint64_t **)(a3 + 8);
        char v17 = (uint64_t **)(a3 + 8);
        if (*v8)
        {
          while (1)
          {
            while (1)
            {
              char v17 = (uint64_t **)v15;
              int v18 = *((_DWORD *)v15 + 8);
              if (v18 <= v39) {
                break;
              }
              uint64_t v15 = *v17;
              uint64_t v16 = v17;
              if (!*v17) {
                goto LABEL_20;
              }
            }
            if (v18 >= v39) {
              break;
            }
            uint64_t v15 = v17[1];
            if (!v15)
            {
              uint64_t v16 = v17 + 1;
              goto LABEL_20;
            }
          }
        }
        else
        {
LABEL_20:
          uint64_t v19 = (char *)operator new(0x40uLL);
          *((_DWORD *)v19 + 8) = v39;
          *(_OWORD *)(v19 + 40) = *(_OWORD *)__p;
          *((void *)v19 + 7) = v41;
          __p[1] = 0;
          uint64_t v41 = 0;
          __p[0] = 0;
          std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)a3, (uint64_t)v17, v16, (uint64_t *)v19);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        uint64_t v6 = *a2;
        int v10 = *(_DWORD *)(*a2 + 8 * v7);
      }
      uint64_t v20 = (_DWORD *)(v6 + 8 * v7);
      int v21 = v20[1];
      if (v21 < *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)a3, v10, v20)[5])
      {
        uint64_t v22 = (int *)(*a2 + 8 * v7);
        int v23 = v22[1];
        *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)a3, *v22, v22)[5] = v23;
      }
      uint64_t v24 = (int *)(*a2 + 8 * v7);
      int v25 = v24[1];
      if (v25 > *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)a3, *v24, v24)[5]+ 1))
      {
        uint64_t v26 = (int *)(*a2 + 8 * v7);
        int v27 = v26[1];
        *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)a3, *v26, v26)[5]+ 1) = v27;
      }
      ++v7;
      uint64_t v6 = *a2;
    }
    while (v7 < (a2[1] - *a2) >> 3);
  }
  uint64_t v28 = *(uint64_t **)a3;
  if (*(void *)a3 != a3 + 8)
  {
    do
    {
      uint64_t v29 = (int *)v28[5];
      int v31 = *v29;
      int v30 = v29[1];
      unint64_t v32 = (uint64_t *)v28[1];
      if (v30 == v31)
      {
        uint64_t v33 = v28;
        if (v32)
        {
          do
          {
            unint64_t v34 = v32;
            unint64_t v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            unint64_t v34 = (uint64_t *)v33[2];
            BOOL v35 = *v34 == (void)v33;
            uint64_t v33 = v34;
          }
          while (!v35);
        }
        if (*(uint64_t **)a3 == v28) {
          *(void *)a3 = v34;
        }
        __n128 v36 = *(uint64_t **)(a3 + 8);
        --*(void *)(a3 + 16);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v36, v28);
        unint64_t v37 = (void *)v28[5];
        if (v37)
        {
          v28[6] = (uint64_t)v37;
          operator delete(v37);
        }
        operator delete(v28);
      }
      else if (v32)
      {
        do
        {
          unint64_t v34 = v32;
          unint64_t v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          unint64_t v34 = (uint64_t *)v28[2];
          BOOL v35 = *v34 == (void)v28;
          uint64_t v28 = v34;
        }
        while (!v35);
      }
      uint64_t v28 = v34;
    }
    while (v34 != (uint64_t *)(a3 + 8));
  }
  operator delete(v38);
}

void sub_1DD7D3EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void CRDetectorPolygonExtractor::generatePivotCenters(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = *(_DWORD *)(a2[1] - 8) - *(_DWORD *)*a2;
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = (int)fmax((double)v7, (double)((v6 + 1) / *(_DWORD *)(a1 + 36)));
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v8)
  {
    std::vector<_NSRange>::__vallocate[abi:ne180100](a3, v8);
    uint64_t v9 = (void *)a3[1];
    int v10 = &v9[2 * v8];
    uint64_t v11 = 16 * v8;
    do
    {
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9 += 2;
      v11 -= 16;
    }
    while (v11);
    a3[1] = (uint64_t)v10;
    int v7 = *(_DWORD *)(a1 + 32);
  }
  if (v6 >= v7)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v28 = v29;
    CRDetectorPolygonExtractor::generateDensePolygonBar(a1, a2, (uint64_t)&v28);
    *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *(_DWORD *)(a1 + 40) = 0;
    int v12 = v28;
    if (v28 == v29) {
      goto LABEL_25;
    }
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    int v17 = *(_DWORD *)*a2;
    uint64_t v18 = *a3;
    while (1)
    {
      int v19 = *((_DWORD *)v12 + 8);
      if (v19 > v17 + (v16 + 1) * ((v6 + 1) / v8))
      {
        int v15 = 0;
        if (v14 >= 1)
        {
          *(float64x2_t *)(v18 + 16 * v16) = vdivq_f64(*(float64x2_t *)(v18 + 16 * v16), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v14), 0));
          ++v16;
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          ++v16;
        }
      }
      if (v16 == v8) {
        break;
      }
      uint64_t v20 = v12[5];
      int v21 = v20[1] - *v20;
      int v15 = (int)fmax((double)v15, (double)v21);
      int v13 = (int)fmax((double)v15, (double)v13);
      *(_DWORD *)(a1 + 40) = v13;
      if (v21 >= 1)
      {
        double v22 = (double)v19;
        int v23 = (double *)(v18 + 16 * v16);
        double v24 = v23[1];
        *int v23 = *v23 + v22;
        v23[1] = v24 + (double)(v20[1] + *v20) * 0.5;
        ++v14;
      }
      int v25 = v12[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = (void **)v25;
          int v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void **)v12[2];
          BOOL v27 = *v26 == v12;
          int v12 = v26;
        }
        while (!v27);
      }
      int v12 = v26;
      if (v26 == v29) {
        goto LABEL_24;
      }
    }
    int v16 = v8;
LABEL_24:
    if (v13 <= 3)
    {
LABEL_25:
      *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      if (v16 < v8 && v14 >= 1) {
        *(float64x2_t *)(v18 + 16 * v16) = vdivq_f64(*(float64x2_t *)(v18 + 16 * v16), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v14), 0));
      }
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29[0]);
  }
  else
  {
    *(unsigned char *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
}

void sub_1DD7D416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a11);
  int v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void CRDetectorPolygonExtractor::smoothPivotCenters(uint64_t a1, double **a2)
{
  int v2 = 0;
  CFTypeRef v3 = *a2;
  uint64_t v4 = ((char *)a2[1] - (char *)*a2) >> 4;
  unint64_t v5 = v4 - 2;
  uint64_t v6 = (uint64_t)(*a2 + 9);
  uint64_t v7 = v4 - 4;
  do
  {
    if (v5 >= 3)
    {
      double v8 = v3[1];
      double v9 = v3[3];
      double v10 = v3[5];
      uint64_t v11 = v7;
      int v12 = (double *)v6;
      double v13 = v3[7];
      do
      {
        double v14 = v9 * 12.0 + v8 * -3.0 + v10 * 17.0 + v13 * 12.0;
        double v10 = v13;
        double v13 = *v12;
        double v15 = v14 + *v12 * -3.0;
        double v8 = v9;
        double v9 = v15 / 35.0;
        *(v12 - 4) = v15 / 35.0;
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    ++v2;
  }
  while (v2 != 4);
}

void CRDetectorPolygonExtractor::generatePivotBars(uint64_t a1, double **a2)
{
  unint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v6 = ((char *)v4 - (char *)*a2) >> 4;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  std::vector<CGPoint>::resize(a1 + 56, v6);
  std::vector<CGPoint>::resize(a1 + 80, v6);
  if (v4 != v5)
  {
    uint64_t v7 = *a2;
    double v8 = (double)*(int *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 80);
    unint64_t v11 = v6 - 1;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    int v12 = (double *)(v10 + 8);
    double v13 = (double *)(v9 + 8);
    double v14 = v7 + 1;
    unint64_t v15 = v6;
    do
    {
      double v16 = *v14 + -v8 * 0.45;
      *(v13 - 1) = *(v14 - 1);
      *double v13 = v16;
      double v17 = *v14 + v8 * 0.65;
      *(v12 - 1) = *(v14 - 1);
      *int v12 = v17;
      v12 += 2;
      v13 += 2;
      v14 += 2;
      --v15;
    }
    while (v15);
    unint64_t v18 = 0;
    int v19 = (double *)(v9 + 8);
    uint64_t v20 = (double *)(v10 + 8);
    float v21 = 0.0;
    do
    {
      if (v11 > v18) {
        float v21 = atan2(-(v7[3] - v7[1]), v7[2] - *v7);
      }
      if (v18)
      {
        if (v11 == v18) {
          *(float *)(a1 + 48) = v21;
        }
      }
      else
      {
        *(float *)(a1 + 44) = v21;
      }
      __float2 v22 = __sincosf_stret(v21 * -0.0);
      double v23 = v7[1];
      double v24 = *(v19 - 1) - *v7;
      double v25 = *v19 - v23;
      *(v19 - 1) = *v7 + v24 * v22.__cosval - v25 * v22.__sinval;
      double *v19 = v23 + v25 * v22.__cosval + v24 * v22.__sinval;
      double v26 = *v7;
      double v27 = v7[1];
      v7 += 2;
      double v28 = *(v20 - 1) - v26;
      double v29 = *v20 - v27;
      ++v18;
      *(v20 - 1) = v26 + v28 * v22.__cosval - v29 * v22.__sinval;
      *uint64_t v20 = v27 + v29 * v22.__cosval + v28 * v22.__sinval;
      v19 += 2;
      v20 += 2;
    }
    while (v6 != v18);
  }
}

void CRDetectorPolygonExtractor::generateEdgePoints(uint64_t a1, uint64_t a2, double **a3)
{
  double v6 = (double)**(int **)a2;
  uint64_t v7 = *a3;
  double v8 = **a3 - v6;
  float v9 = *(float *)(a1 + 44);
  float v10 = tanf(v9);
  double v11 = (double)*(int *)(a1 + 40);
  double v12 = v7[1] + v8 * v10;
  double v13 = v12 - v11 * 0.45;
  __float2 v14 = __sincosf_stret(v9 * -0.0);
  v56[0] = (v6 - v6) * v14.__cosval - (v13 - v12) * v14.__sinval + v6;
  v56[1] = v12 + (v13 - v12) * v14.__cosval + (v6 - v6) * v14.__sinval;
  double v15 = v12 + v11 * 0.65 - v12;
  v55[0] = (v6 - v6) * v14.__cosval - v15 * v14.__sinval + v6;
  v55[1] = v12 + v15 * v14.__cosval + (v6 - v6) * v14.__sinval;
  double v16 = (double)*(int *)(*(void *)(a2 + 8) - 8) + v11 * 0.3;
  double v17 = a3[1];
  double v18 = *(v17 - 2) - v16;
  float v19 = *(float *)(a1 + 48);
  double v20 = *(v17 - 1) + v18 * tanf(v19);
  double v21 = v20 - v11 * 0.45;
  __float2 v22 = __sincosf_stret(v19 * -0.0);
  double v23 = v16 - v16;
  double cosval = v22.__cosval;
  double sinval = v22.__sinval;
  double v26 = v16 + (v16 - v16) * v22.__cosval - (v21 - v20) * v22.__sinval;
  double v27 = v20 + (v21 - v20) * v22.__cosval + (v16 - v16) * v22.__sinval;
  double v28 = (void **)(a1 + 56);
  std::vector<CGPoint>::insert(a1 + 56, *(char **)(a1 + 56), (char *)v56);
  double v29 = (void **)(a1 + 80);
  std::vector<CGPoint>::insert(a1 + 80, *(char **)(a1 + 80), (char *)v55);
  unint64_t v30 = *(void *)(a1 + 72);
  int v31 = *(double **)(a1 + 64);
  if ((unint64_t)v31 >= v30)
  {
    uint64_t v33 = (double *)*v28;
    uint64_t v34 = ((char *)v31 - (unsigned char *)*v28) >> 4;
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 60) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v36 = v30 - (void)v33;
    if (v36 >> 3 > v35) {
      unint64_t v35 = v36 >> 3;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37)
    {
      uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(a1 + 72, v37);
      uint64_t v33 = *(double **)(a1 + 56);
      int v31 = *(double **)(a1 + 64);
    }
    else
    {
      uint64_t v38 = 0;
    }
    int v39 = (double *)&v38[16 * v34];
    uint64_t v40 = &v38[16 * v37];
    *int v39 = v26;
    v39[1] = v27;
    unint64_t v32 = v39 + 2;
    if (v31 != v33)
    {
      do
      {
        *((_OWORD *)v39 - 1) = *((_OWORD *)v31 - 1);
        v39 -= 2;
        v31 -= 2;
      }
      while (v31 != v33);
      uint64_t v33 = (double *)*v28;
    }
    *(void *)(a1 + 56) = v39;
    *(void *)(a1 + 64) = v32;
    *(void *)(a1 + 72) = v40;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    *int v31 = v26;
    v31[1] = v27;
    unint64_t v32 = v31 + 2;
  }
  double v41 = v20 + v11 * 0.65 - v20;
  double v42 = v16 + v23 * cosval - v41 * sinval;
  double v43 = v20 + v41 * cosval + v23 * sinval;
  unint64_t v44 = *(void *)(a1 + 96);
  *(void *)(a1 + 64) = v32;
  double v45 = *(double **)(a1 + 88);
  if ((unint64_t)v45 >= v44)
  {
    unint64_t v47 = (double *)*v29;
    uint64_t v48 = ((char *)v45 - (unsigned char *)*v29) >> 4;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v50 = v44 - (void)v47;
    if (v50 >> 3 > v49) {
      unint64_t v49 = v50 >> 3;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51)
    {
      unint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(a1 + 96, v51);
      unint64_t v47 = *(double **)(a1 + 80);
      double v45 = *(double **)(a1 + 88);
    }
    else
    {
      unint64_t v52 = 0;
    }
    uint64_t v53 = (double *)&v52[16 * v48];
    uint64_t v54 = &v52[16 * v51];
    *uint64_t v53 = v42;
    v53[1] = v43;
    uint64_t v46 = v53 + 2;
    if (v45 != v47)
    {
      do
      {
        *((_OWORD *)v53 - 1) = *((_OWORD *)v45 - 1);
        v53 -= 2;
        v45 -= 2;
      }
      while (v45 != v47);
      unint64_t v47 = (double *)*v29;
    }
    *(void *)(a1 + 80) = v53;
    *(void *)(a1 + 88) = v46;
    *(void *)(a1 + 96) = v54;
    if (v47) {
      operator delete(v47);
    }
  }
  else
  {
    *double v45 = v42;
    v45[1] = v43;
    uint64_t v46 = v45 + 2;
  }
  *(void *)(a1 + 88) = v46;
}

void std::vector<CGPoint>::insert(uint64_t a1, char *__src, char *a3)
{
  CFTypeRef v3 = a3;
  double v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    double v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v14 >> 60) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 4;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 3 > v14) {
      unint64_t v14 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v29 = a1 + 16;
    if (v18) {
      float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(a1 + 16, v18);
    }
    else {
      float v19 = 0;
    }
    double v20 = &v19[16 * v16];
    __p = v19;
    double v26 = v20;
    double v27 = v20;
    double v28 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == __src) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 3;
        }
        double v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(v8, v22);
        double v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        double v26 = v20;
        double v28 = &v23[16 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 16 * (v21 >> 1);
        double v26 = v20;
      }
    }
    *(_OWORD *)double v20 = *(_OWORD *)v3;
    double v27 = v20 + 16;
    std::vector<CGPoint>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, __src);
    if (v27 != v26) {
      v27 += (v26 - v27 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(void *)(a1 + 8) = __src + 16;
  }
  else
  {
    float v9 = __src + 16;
    float v10 = v6 - 16;
    double v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    }
    if (__src <= v3) {
      v3 += 16 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_OWORD *)__src = *(_OWORD *)v3;
  }
}

void sub_1DD7D4930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double CRDetectorPolygonExtractor::smoothPivotAngles(CRDetectorPolygonExtractor *this)
{
  uint64_t v1 = *((void *)this + 7);
  uint64_t v2 = *((void *)this + 8) - v1;
  if ((unint64_t)v2 >= 0x30
    && v2 == *((void *)this + 11) - *((void *)this + 10)
    && (unint64_t)((v2 >> 4) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v4 = 1;
    uint64_t v5 = 40;
    do
    {
      double v6 = (double *)(v1 + v5);
      unint64_t v7 = (double *)(*((void *)this + 10) + v5);
      long long v9 = *(_OWORD *)(v6 - 3);
      long long v10 = *(_OWORD *)(v7 - 3);
      ++v4;
      CRDetectorUtils::smoothAngleForPointPairBetweenNeighbors((double *)&v9, *(v6 - 5), *(v6 - 4), *(v7 - 5), *(v7 - 4), *(v6 - 1), *v6, *(v7 - 1), *v7, 0.5);
      *(_OWORD *)(v6 - 3) = v9;
      double result = *(double *)&v10;
      *(_OWORD *)(*((void *)this + 10) + v5 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
      uint64_t v1 = *((void *)this + 7);
      v5 += 16;
    }
    while (((*((void *)this + 8) - v1) >> 4) - 1 > v4);
  }
  return result;
}

int32x2_t CRDetectorPolygonExtractor::composePivots(CRDetectorPolygonExtractor *this)
{
  uint64_t v2 = *((void *)this + 8) - *((void *)this + 7);
  uint64_t v3 = v2 >> 4;
  uint64_t v4 = (v2 >> 4) - 2;
  std::vector<PixelPosition>::resize((uint64_t)this, 2 * v4 + 4);
  uint64_t v5 = (double *)*((void *)this + 7);
  int v6 = (int)v5[1];
  unint64_t v7 = *(_DWORD **)this;
  *unint64_t v7 = (int)*v5;
  v7[1] = v6;
  if (v2 >= 33)
  {
    uint64_t v8 = 0;
    if (v4 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = (v2 >> 4) - 2;
    }
    do
    {
      double v10 = v5[2 * v8];
      int v11 = v7[2 * v8];
      if (v10 >= (double)v11)
      {
        long long v12 = &v5[2 * v8++];
        v7[2 * v8] = (int)v10;
        int v6 = (int)v12[1];
      }
      else
      {
        ++v8;
        v7[2 * v8] = v11;
      }
      v7[2 * v8 + 1] = v6;
    }
    while (v8 != v9);
  }
  float64x2_t v13 = *(float64x2_t *)&v5[2 * v3 - 2];
  unint64_t v14 = (float64x2_t *)*((void *)this + 10);
  *(int32x4_t *)&v7[2 * v3 - 2] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v13), (int32x4_t)vcvtq_s64_f64(v14[v3 - 1]));
  if (v2 >= 33)
  {
    uint64_t v15 = 0;
    if (v4 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = (v2 >> 4) - 2;
    }
    uint64_t v17 = &v7[2 * v3 + 2];
    f64 = v14[v3 - 3].f64;
    uint64_t v19 = v3 + 1;
    do
    {
      int v20 = *(v17 - 2);
      if (*f64 <= (double)v20)
      {
        *uint64_t v17 = (int)*f64;
        int v22 = (int)f64[1];
        uint64_t v21 = v19;
      }
      else
      {
        uint64_t v21 = v15 + v3 + 1;
        *uint64_t v17 = v20;
        int v22 = *(v17 - 1);
      }
      ++v15;
      v7[2 * v21 + 1] = v22;
      v17 += 2;
      f64 -= 2;
      ++v19;
      --v16;
    }
    while (v16);
  }
  int32x2_t result = vmovn_s64(vcvtq_s64_f64(*v14));
  *(int32x2_t *)&v7[4 * (v2 >> 4) - 2] = result;
  return result;
}

void CRDetectorPolygonExtractor::generatePivotsPolygon(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  int v6 = (uint64_t *)*a2;
  unint64_t v7 = (uint64_t *)a2[1];
  unint64_t v8 = 126 - 2 * __clz(v7 - v6);
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  std::__introsort<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*,false>(v6, v7, v9, 1);
  CRDetectorPolygonExtractor::generatePivotCenters(a1, a2, (uint64_t *)__p);
  if (*(unsigned char *)(a1 + 24))
  {
    CRDetectorPolygonExtractor::smoothPivotCenters(v10, (double **)__p);
    CRDetectorPolygonExtractor::generatePivotBars(a1, (double **)__p);
    CRDetectorPolygonExtractor::generateEdgePoints(a1, (uint64_t)a2, (double **)__p);
    CRDetectorPolygonExtractor::smoothPivotAngles((CRDetectorPolygonExtractor *)a1);
    CRDetectorPolygonExtractor::composePivots((CRDetectorPolygonExtractor *)a1);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(a3, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DD7D4CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x40uLL);
    v9[8] = *a3;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 5) = 0;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      int32x2_t result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      int32x2_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      *(unsigned char *)(v12 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      BOOL v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        int32x2_t result = v7;
      }
      unint64_t v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    int v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        int v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
        *((unsigned char *)v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        void v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *int v20 = (uint64_t)v7;
        BOOL v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      *((unsigned char *)v19 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      void v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *(unsigned char *)(v12 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    float64x2_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *float64x2_t v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      int32x2_t result = v7;
    }
    unint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  uint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *((unsigned char *)v7 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    uint64_t v22 = v15[1];
    *unint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    BOOL v7[2] = (uint64_t)v15;
    uint64_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *((unsigned char *)v16 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  void v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *uint64_t v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*((_DWORD *)a2 - 2) < *(_DWORD *)v10)
                {
                  uint64_t v39 = *v10;
                  *uint64_t v10 = *(a2 - 1);
                  *(a2 - 1) = v39;
                }
                break;
              case 3uLL:
                int32x2_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(v10, (int *)v10 + 2, (int *)a2 - 2);
                break;
              case 4uLL:
                int32x2_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(v10, (int *)v10 + 2, (int *)v10 + 4, a2 - 1);
                break;
              case 5uLL:
                uint64_t v40 = v10 + 2;
                double v41 = v10 + 3;
                int32x2_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(v10, (int *)v10 + 2, (int *)v10 + 4, v10 + 3);
                if (*((_DWORD *)a2 - 2) < *((_DWORD *)v10 + 6))
                {
                  uint64_t v42 = *v41;
                  uint64_t *v41 = *(a2 - 1);
                  *(a2 - 1) = v42;
                  if (*(_DWORD *)v41 < *(_DWORD *)v40)
                  {
                    uint64_t v43 = *v40;
                    uint64_t v44 = *v41;
                    uint64_t *v40 = *v41;
                    uint64_t *v41 = v43;
                    if (*((_DWORD *)v10 + 2) > (int)v44)
                    {
                      uint64_t v45 = v10[1];
                      v10[1] = v44;
                      v10[2] = v45;
                      if (*(_DWORD *)v10 > (int)v44)
                      {
                        uint64_t v46 = *v10;
                        *uint64_t v10 = v44;
                        v10[1] = v46;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unint64_t v47 = v10 + 1;
            BOOL v49 = v10 == a2 || v47 == a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v10;
                do
                {
                  int v52 = *((_DWORD *)v51 + 2);
                  int v53 = *(_DWORD *)v51;
                  unint64_t v51 = v47;
                  if (v52 < v53)
                  {
                    uint64_t v54 = *v47;
                    uint64_t v55 = v50;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v55 + 8) = *(uint64_t *)((char *)v10 + v55);
                      if (!v55) {
                        break;
                      }
                      int v56 = *(_DWORD *)((char *)v10 + v55 - 8);
                      v55 -= 8;
                      if (v56 <= (int)v54)
                      {
                        uint64_t v57 = (uint64_t *)((char *)v10 + v55 + 8);
                        goto LABEL_83;
                      }
                    }
                    uint64_t v57 = v10;
LABEL_83:
                    *uint64_t v57 = v54;
                  }
                  unint64_t v47 = v51 + 1;
                  v50 += 8;
                }
                while (v51 + 1 != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                int v84 = *((_DWORD *)v9 + 2);
                int v85 = *(_DWORD *)v9;
                uint64_t v9 = v47;
                if (v84 < v85)
                {
                  uint64_t v86 = *v47;
                  do
                  {
                    uint64_t v87 = v47;
                    uint64_t v88 = *--v47;
                    *uint64_t v87 = v88;
                  }
                  while (*((_DWORD *)v87 - 4) > (int)v86);
                  *unint64_t v47 = v86;
                }
                unint64_t v47 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v58 = (v12 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  unint64_t v62 = &v10[v61];
                  if (2 * v60 + 2 < (uint64_t)v12)
                  {
                    int v64 = *(_DWORD *)v62;
                    int v63 = *((_DWORD *)v62 + 2);
                    if (*(_DWORD *)v62 <= v63) {
                      int v64 = *((_DWORD *)v62 + 2);
                    }
                    if (*(_DWORD *)v62 < v63)
                    {
                      ++v62;
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  else
                  {
                    int v64 = *(_DWORD *)v62;
                  }
                  uint64_t v65 = &v10[v60];
                  if (v64 >= *(_DWORD *)v65)
                  {
                    uint64_t v66 = *v65;
                    do
                    {
                      uint64_t v67 = v65;
                      uint64_t v65 = v62;
                      *uint64_t v67 = *v62;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v68 = (2 * v61) | 1;
                      unint64_t v62 = &v10[v68];
                      uint64_t v61 = 2 * v61 + 2;
                      if (v61 < (uint64_t)v12)
                      {
                        int v70 = *(_DWORD *)v62;
                        int32x2_t result = v62 + 1;
                        int v69 = *((_DWORD *)v62 + 2);
                        if (*(_DWORD *)v62 <= v69) {
                          int v70 = *((_DWORD *)v62 + 2);
                        }
                        if (*(_DWORD *)v62 >= v69) {
                          uint64_t v61 = v68;
                        }
                        else {
                          ++v62;
                        }
                      }
                      else
                      {
                        int v70 = *(_DWORD *)v62;
                        uint64_t v61 = v68;
                      }
                    }
                    while (v70 >= (int)v66);
                    *uint64_t v65 = v66;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v71 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v72 = 0;
                uint64_t v73 = *v10;
                double v74 = v10;
                do
                {
                  unint64_t v75 = &v74[v72 + 1];
                  uint64_t v76 = (2 * v72) | 1;
                  uint64_t v77 = 2 * v72 + 2;
                  if (v77 < v71 && *(_DWORD *)v75 < *((_DWORD *)v75 + 2))
                  {
                    ++v75;
                    uint64_t v76 = v77;
                  }
                  *double v74 = *v75;
                  double v74 = v75;
                  uint64_t v72 = v76;
                }
                while (v76 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
                if (v75 == --a2)
                {
                  uint64_t *v75 = v73;
                }
                else
                {
                  uint64_t *v75 = *a2;
                  *a2 = v73;
                  uint64_t v78 = (char *)v75 - (char *)v10 + 8;
                  if (v78 >= 9)
                  {
                    unint64_t v79 = (((unint64_t)v78 >> 3) - 2) >> 1;
                    uint64_t v80 = &v10[v79];
                    if (*(_DWORD *)v80 < *(_DWORD *)v75)
                    {
                      uint64_t v81 = *v75;
                      do
                      {
                        float v82 = v75;
                        unint64_t v75 = v80;
                        *float v82 = *v80;
                        if (!v79) {
                          break;
                        }
                        unint64_t v79 = (v79 - 1) >> 1;
                        uint64_t v80 = &v10[v79];
                      }
                      while (*(_DWORD *)v80 < (int)v81);
                      uint64_t *v75 = v81;
                    }
                  }
                }
              }
              while (v71-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (int *)&v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(v9, (int *)&v9[v12 >> 1], (int *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(v9 + 1, v14 - 2, (int *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(v9 + 2, (int *)&v9[v13 + 1], (int *)a2 - 6);
            int32x2_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)v14 - 1, v14, (int *)&v9[v13 + 1]);
            uint64_t v15 = *v9;
            *uint64_t v9 = *(void *)v14;
            *(void *)uint64_t v14 = v15;
          }
          else
          {
            int32x2_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(&v9[v12 >> 1], (int *)v9, (int *)a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *((_DWORD *)v9 - 2) < *(_DWORD *)v9) {
            break;
          }
          uint64_t v30 = *v9;
          if (*((_DWORD *)a2 - 2) <= (int)*v9)
          {
            unint64_t v32 = v9 + 1;
            do
            {
              uint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (*(_DWORD *)v10 <= (int)v30);
          }
          else
          {
            uint64_t v10 = v9;
            do
              int v31 = *((_DWORD *)v10++ + 2);
            while (v31 <= (int)v30);
          }
          uint64_t v33 = a2;
          if (v10 < a2)
          {
            uint64_t v33 = a2;
            do
              int v34 = *((_DWORD *)v33-- - 2);
            while (v34 > (int)v30);
          }
          while (v10 < v33)
          {
            uint64_t v35 = *v10;
            *uint64_t v10 = *v33;
            uint64_t *v33 = v35;
            do
              int v36 = *((_DWORD *)v10++ + 2);
            while (v36 <= (int)v30);
            do
              int v37 = *((_DWORD *)v33-- - 2);
            while (v37 > (int)v30);
          }
          uint64_t v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *uint64_t v9 = *v38;
          }
          a4 = 0;
          *uint64_t v38 = v30;
        }
        uint64_t v16 = 0;
        uint64_t v17 = *v9;
        do
          int v18 = v9[++v16];
        while (v18 < (int)v17);
        uint64_t v19 = &v9[v16];
        int v20 = a2;
        if (v16 == 1)
        {
          int v20 = a2;
          do
          {
            if (v19 >= v20) {
              break;
            }
            int v22 = *((_DWORD *)v20-- - 2);
          }
          while (v22 >= (int)v17);
        }
        else
        {
          do
            int v21 = *((_DWORD *)v20-- - 2);
          while (v21 >= (int)v17);
        }
        if (v19 >= v20)
        {
          double v28 = v19 - 1;
        }
        else
        {
          uint64_t v23 = &v9[v16];
          uint64_t v24 = v20;
          do
          {
            uint64_t v25 = *v23;
            *uint64_t v23 = *v24;
            *uint64_t v24 = v25;
            do
              int v26 = *((_DWORD *)v23++ + 2);
            while (v26 < (int)v17);
            do
              int v27 = *((_DWORD *)v24-- - 2);
            while (v27 >= (int)v17);
          }
          while (v23 < v24);
          double v28 = v23 - 1;
        }
        if (v28 != v9) {
          *uint64_t v9 = *v28;
        }
        *double v28 = v17;
        if (v19 >= v20) {
          break;
        }
LABEL_33:
        int32x2_t result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*,false>(v9, v28, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v28 + 1;
      }
      BOOL v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t)v9, v28);
      uint64_t v10 = v28 + 1;
      int32x2_t result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t)(v28 + 1), a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_33;
      }
    }
    a2 = v28;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(uint64_t *result, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v4 < v3)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v6;
      if (*a2 < *(_DWORD *)result)
      {
        uint64_t v7 = *result;
        *int32x2_t result = *(void *)a2;
        *(void *)a2 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = *result;
    if (v4 >= v3)
    {
      *int32x2_t result = *(void *)a2;
      *(void *)a2 = v5;
      if (*a3 >= (int)v5) {
        return result;
      }
      *(void *)a2 = *(void *)a3;
    }
    else
    {
      *int32x2_t result = *(void *)a3;
    }
    *(void *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((_DWORD *)a2 - 2) < *(_DWORD *)a1)
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)a1, (int *)(a1 + 8), (int *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)a1, (int *)(a1 + 8), (int *)(a1 + 16), a2 - 1);
      return 1;
    case 5:
      uint64_t v15 = (uint64_t *)(a1 + 16);
      uint64_t v16 = (uint64_t *)(a1 + 24);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)a1, (int *)(a1 + 8), (int *)(a1 + 16), (void *)(a1 + 24));
      if (*((_DWORD *)a2 - 2) < *(_DWORD *)(a1 + 24))
      {
        uint64_t v17 = *v16;
        *uint64_t v16 = *(a2 - 1);
        *(a2 - 1) = v17;
        if (*(_DWORD *)v16 < *(_DWORD *)v15)
        {
          uint64_t v18 = *v15;
          uint64_t v19 = *v16;
          *uint64_t v15 = *v16;
          *uint64_t v16 = v18;
          if (*(_DWORD *)(a1 + 8) > (int)v19)
          {
            uint64_t v20 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v19;
            *(void *)(a1 + 16) = v20;
            if (*(_DWORD *)a1 > (int)v19)
            {
              uint64_t v21 = *(void *)a1;
              *(void *)a1 = v19;
              *(void *)(a1 + 8) = v21;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = (_DWORD *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)a1, (int *)(a1 + 8), (int *)(a1 + 16));
      int v8 = (void *)(a1 + 24);
      if ((void *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v8 < *v7)
    {
      uint64_t v11 = *v8;
      uint64_t v12 = v9;
      while (1)
      {
        *(void *)(a1 + v12 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a1 + v12 + 16);
        if (v12 == -16) {
          break;
        }
        int v13 = *(_DWORD *)(a1 + v12 + 8);
        v12 -= 8;
        if (v13 <= (int)v11)
        {
          uint64_t v14 = (void *)(a1 + v12 + 24);
          goto LABEL_13;
        }
      }
      uint64_t v14 = (void *)a1;
LABEL_13:
      *uint64_t v14 = v11;
      if (++v10 == 8) {
        return v8 + 1 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 8;
    if (++v8 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(uint64_t *a1, int *a2, int *a3, void *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(a1, a2, a3);
  if (*(_DWORD *)a4 < *a3)
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (*a2 < *(_DWORD *)a1)
      {
        uint64_t v11 = *a1;
        *a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

float EvaluateAccuracy@<S0>(id *a1@<X1>, CTCLayer *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(a3 + 16) = 0;
  int v6 = [a1[2] count];
  *(_DWORD *)(a3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  if (v6 > 0)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Evaluate accuracies %d samples: [%.2f%%]\r", v6, (float)((float)0 / (float)v6) * 100.0);
    uint64_t v7 = [a1[2] objectAtIndex:*(int *)*a1];
    characterCodes(v7, &v21);

    uint64_t v18 = 0;
    uint64_t v19 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v21, v22, (v22 - (uint64_t)v21) >> 2);
    CTCLayer::stringSequence2codeSequence((uint64_t)a2, (int **)&__p, (char **)&v20);
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
    id v8 = [a1[1] objectAtIndex:*(int *)*a1];
    CFStringRef v9 = CFStringCreateWithCString(0, (const char *)[v8 UTF8String], 0x8000100u);

    CGImageFromFile = localCreateCGImageFromFile(v9, 0);
    memset(v16, 0, sizeof(v16));
    newPlanar8BufferFromImage(CGImageFromFile, v16);
    operator new[]();
  }
  float v11 = (float)v6;
  fwrite("                                                   \r", 0x34uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  *(float *)a3 = 0.0 / v11;
  float64x2_t v12 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
  float64x2_t v13 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v11), 0);
  *(float32x2_t *)(a3 + 4) = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(vcvt_f32_s32(0)), v12), v13));
  *(float32x2_t *)(a3 + 12) = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(vcvt_f32_s32(0)), v12), v13));
  float result = 0.0 / v11;
  *(float *)(a3 + 20) = 0.0 / v11;
  return result;
}

void sub_1DD7D642C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v54 = *(void **)(v52 - 232);
  if (v54)
  {
    *(void *)(v52 - 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v54;
    operator delete(v54);
  }
  uint64_t v55 = *(void **)(v52 - 184);
  if (v55)
  {
    *(void *)(v52 - 176) = v55;
    operator delete(v55);
  }
  *(void *)(v52 - 184) = &a34;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 184));
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  _Unwind_Resume(a1);
}

void characterCodes(NSString *a1@<X0>, void *a2@<X8>)
{
  int v3 = a1;
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x4812000000;
  uint64_t v10 = __Block_byref_object_copy__12;
  float v11 = __Block_byref_object_dispose__12;
  float64x2_t v12 = &unk_1DD8FDA7A;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  __p = 0;
  uint64_t v4 = [(NSString *)v3 length];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  id v6[2] = ___Z14characterCodesP8NSString_block_invoke;
  v6[3] = &unk_1E6CDBA60;
  void v6[4] = &v7;
  -[NSString enumerateSubstringsInRange:options:usingBlock:](v3, "enumerateSubstringsInRange:options:usingBlock:", 0, v4, 2, v6);
  uint64_t v5 = v8;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2, (const void *)v5[6], v5[7], (v5[7] - v5[6]) >> 2);
  _Block_object_dispose(&v7, 8);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_1DD7D670C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

CGImageRef localCreateCGImageFromFile(const __CFString *a1, const __CFDictionary **a2)
{
  CFURLRef v3 = [MEMORY[0x1E4F1CB10] fileURLWithPath:a1];
  uint64_t v4 = CGImageSourceCreateWithURL(v3, 0);
  uint64_t v5 = v4;
  if (v4)
  {
    ImageAtIndedouble x = CGImageSourceCreateImageAtIndex(v4, 0, 0);
    if (a2) {
      *a2 = CGImageSourceCopyPropertiesAtIndex(v5, 0, 0);
    }
    CFRelease(v5);
  }
  else
  {
    ImageAtIndedouble x = 0;
  }

  return ImageAtIndex;
}

void sub_1DD7D67CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void newPlanar8BufferFromImage(CGImage *a1@<X0>, void *a2@<X8>)
{
  unint64_t Width = CGImageGetWidth(a1);
  unint64_t Height = CGImageGetHeight(a1);
  DeviceGradouble y = CGColorSpaceCreateDeviceGray();
  uint64_t v7 = malloc_type_malloc(Height * Width, 0x100004077774924uLL);
  id v8 = CGBitmapContextCreate(v7, Width, Height, 8uLL, Width, DeviceGray, 0);
  v10.size.vImagePixelCount width = (double)Width;
  v10.size.vImagePixelCount height = (double)Height;
  v10.origin.double x = 0.0;
  v10.origin.double y = 0.0;
  CGContextDrawImage(v8, v10, a1);
  *a2 = v7;
  a2[1] = Height;
  a2[2] = Width;
  a2[3] = Width;
  CGContextRelease(v8);
  CGColorSpaceRelease(DeviceGray);
}

__n128 __Block_byref_object_copy__12(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___Z14characterCodesP8NSString_block_invoke(uint64_t a1, void *a2)
{
  CFURLRef v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v19 = v3;
  int v5 = NSStringToUnicode(v3);
  int v6 = v5;
  unint64_t v7 = v4[8];
  id v8 = (char *)v4[7];
  if ((unint64_t)v8 >= v7)
  {
    CGRect v10 = (char *)v4[6];
    uint64_t v11 = (v8 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v7 - (void)v10;
    unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 1;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v4 + 8), v14);
      CGRect v10 = (char *)v4[6];
      id v8 = (char *)v4[7];
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    uint64_t v17 = &v15[4 * v14];
    *(_DWORD *)uint64_t v16 = v6;
    uint64_t v9 = v16 + 4;
    while (v8 != v10)
    {
      int v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    v4[6] = v16;
    v4[7] = v9;
    v4[8] = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)id v8 = v5;
    uint64_t v9 = v8 + 4;
  }
  v4[7] = v9;
}

void sub_1DD7D6A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t NSStringToUnicode(NSString *a1)
{
  uint64_t v1 = a1;
  if ([(NSString *)v1 length] == 1)
  {
    uint64_t v2 = [(NSString *)v1 characterAtIndex:0];
  }
  else if ([(NSString *)v1 length] == 2)
  {
    int v3 = [(NSString *)v1 characterAtIndex:0];
    uint64_t v2 = [(NSString *)v1 characterAtIndex:1] + (v3 << 10) - 56613888;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1DD7D6AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    int v3 = **(void ****)(a1 + 8);
    uint64_t v4 = **(void ****)(a1 + 16);
    while (v4 != v3)
    {
      v4 -= 3;
      int v5 = v4;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

void sub_1DD7D744C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD7D7574(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DD7D79C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7D8C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD7D96F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7DBA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::unicodeCategory(_anonymous_namespace_ *this, int a2)
{
  UChar32 v3 = (int)this;
  UBlockCode Code = ublock_getCode((UChar32)this);
  if (Code == UBLOCK_BASIC_LATIN)
  {
    if (u_ispunct(v3))
    {
      return 0;
    }
    else if (u_isdigit(v3))
    {
      return 1;
    }
    else if (u_isupper(v3))
    {
      return 2;
    }
    else if (u_islower(v3))
    {
      return 3;
    }
    else
    {
      return 4;
    }
  }
  else
  {
    if (!a2) {
      return 5;
    }
    if (Code > UBLOCK_HIRAGANA)
    {
      if (Code == UBLOCK_HANGUL_SYLLABLES) {
        return 9;
      }
      if (Code == UBLOCK_KATAKANA) {
        return 7;
      }
    }
    else
    {
      if (Code == UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION) {
        return 8;
      }
      if (Code == UBLOCK_HIRAGANA) {
        return 6;
      }
    }
    if ((Code & 0xFFFFFFF7) == 0x47) {
      return 10;
    }
    if (Code == UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS) {
      return 11;
    }
    else {
      return 5;
    }
  }
}

void sub_1DD7DBF78(_Unwind_Exception *a1)
{
  CGRect v10 = *(void **)v5;
  if (*(void *)v5)
  {
    *(void *)(v5 + 8) = v10;
    operator delete(v10);
  }

  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    CGRect v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1DD7DC12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7DC290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7DC4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD7DC580()
{
}

void sub_1DD7DC588()
{
}

void sub_1DD7DC6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = a1[1];
    unint64_t v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v10 = *a1 + 8 * (v4 >> 6);
        int v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t p2s@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = MEMORY[0x1E4FBA488] + 104;
  v19[0] = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v14 = MEMORY[0x1E4FBA488] + 64;
  unint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  v13[0] = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)v13 + *(void *)(v13[0] - 24)) = v6;
  v13[1] = 0;
  unint64_t v7 = (std::ios_base *)((char *)v13 + *(void *)(v13[0] - 24));
  std::ios_base::init(v7, v15);
  uint64_t v8 = MEMORY[0x1E4FBA488] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v9 = v5[5];
  uint64_t v14 = v5[4];
  *(uint64_t *)((char *)&v15[-1] + *(void *)(v14 - 24)) = v9;
  v13[0] = v5[1];
  *(uint64_t *)((char *)v13 + *(void *)(v13[0] - 24)) = v5[6];
  v19[0] = v3;
  v13[0] = v8;
  uint64_t v14 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v10 = MEMORY[0x1E4FBA470] + 16;
  v15[0] = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)__p = 0u;
  long long v17 = 0u;
  int v18 = 24;
  std::ostream::operator<<();
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (uint64_t)a1);
  v13[0] = *v5;
  uint64_t v11 = v5[9];
  *(uint64_t *)((char *)v13 + *(void *)(v13[0] - 24)) = v5[8];
  uint64_t v14 = v11;
  v15[0] = v10;
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E01BF0C0](v19);
}

void sub_1DD7DCB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  MEMORY[0x1E01BEFB0](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  unint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    unint64_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    uint64_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      uint64_t v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1DD7DCDC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1DD7DCD7CLL);
  }
  __cxa_rethrow();
}

void sub_1DD7DCE5C(_Unwind_Exception *a1)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E01BF0C0](a1 + 128);
  return a1;
}

double ul2s@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>((void *)a2, (char *)&str);
  do
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((a1 % 0xA) | 0x30, (const void **)a2, (uint64_t)&v6);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    BOOL v5 = a1 >= 0xA;
    a1 /= 0xAuLL;
  }
  while (v5);
  return result;
}

void sub_1DD7DD04C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v7 = (unsigned char *)result;
  }
  else {
    uint64_t v7 = *(unsigned char **)result;
  }
  *uint64_t v7 = a1;
  uint64_t v8 = v7 + 1;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  *((unsigned char *)v8 + v5) = 0;
  return result;
}

double i2s@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>((void *)a2, (char *)&str);
  if (a1 >= 0) {
    unsigned int v4 = a1;
  }
  else {
    unsigned int v4 = -a1;
  }
  do
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((v4 % 0xA) | 0x30, (const void **)a2, (uint64_t)&v7);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    double result = *(double *)&v7;
    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v8;
    BOOL v6 = v4 > 9;
    v4 /= 0xAu;
  }
  while (v6);
  if (a1 < 0)
  {
    std::operator+<char>();
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    double result = *(double *)&v7;
    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v8;
  }
  return result;
}

void sub_1DD7DD1DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void d2s(double a1@<D0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x40uLL, "%.10g", a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, __str);
  std::string::basic_string[abi:ne180100]<0>(a2, __str);
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1DD7DD290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t s2i(unsigned __int8 *a1)
{
  uint64_t v1 = *(unsigned __int8 **)a1;
  unint64_t v2 = *((void *)a1 + 1);
  if ((a1[23] & 0x80u) == 0)
  {
    uint64_t v1 = a1;
    unint64_t v2 = a1[23];
  }
  if (v2) {
    BOOL v3 = *v1 == 45;
  }
  else {
    BOOL v3 = 0;
  }
  BOOL v4 = v3;
  if (v2 <= v3)
  {
    int v6 = 0;
    int v9 = 0;
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    unint64_t v7 = v2 - v4;
    uint64_t v8 = &v1[v4];
    while (1)
    {
      int v9 = v6;
      int v11 = *v8++;
      int v10 = v11;
      if ((v11 - 58) < 0xFFFFFFF6 || v9 < v5) {
        break;
      }
      int v6 = v10 + 10 * v9 - 48;
      int v5 = v9;
      if (!--v7) {
        goto LABEL_16;
      }
    }
    int v6 = v9;
    int v9 = v5;
  }
LABEL_16:
  BOOL v13 = !v4;
  if (v4) {
    unsigned int v14 = 0x80000000;
  }
  else {
    unsigned int v14 = 0x7FFFFFFF;
  }
  if (v13) {
    unsigned int v15 = v6;
  }
  else {
    unsigned int v15 = -v6;
  }
  if (v6 >= v9) {
    return v15;
  }
  else {
    return v14;
  }
}

uint64_t sh2i(uint64_t a1)
{
  unint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) == 0) {
    unint64_t v2 = (unsigned char *)a1;
  }
  else {
    unint64_t v2 = *(unsigned char **)a1;
  }
  if ((v1 & 0x80u) != 0) {
    unint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1)
  {
    BOOL v3 = *v2 == 45;
    if (*v2 == 45)
    {
      if (v1 < 2)
      {
        unint64_t v4 = 1;
        LODWORD(v3) = 1;
        goto LABEL_19;
      }
      uint64_t v5 = 2;
    }
    else
    {
      uint64_t v5 = 1;
    }
    if (v2[v3] == 48 && (v2[v5] | 0x20) == 0x78)
    {
      unint64_t v4 = 2;
      if (*v2 == 45) {
        unint64_t v4 = 3;
      }
    }
    else
    {
      unint64_t v4 = *v2 == 45;
    }
  }
  else
  {
    LODWORD(v3) = 0;
    unint64_t v4 = 0;
  }
LABEL_19:
  if (v4 >= v1)
  {
    signed int v6 = 0;
LABEL_39:
    if (v3) {
      return -v6;
    }
    else {
      return v6;
    }
  }
  else
  {
    signed int v6 = 0;
    do
    {
      int v7 = (char)v2[v4];
      if ((v7 - 48) >= 0xA)
      {
        if ((v7 - 97) >= 6)
        {
          if ((v7 - 65) > 5) {
            goto LABEL_39;
          }
          int v8 = -55;
        }
        else
        {
          int v8 = -87;
        }
      }
      else
      {
        int v8 = -48;
      }
      signed int v9 = v7 + 16 * v6 + v8;
      ++v4;
      BOOL v10 = v9 < v6;
      if (v4 >= v1) {
        break;
      }
      signed int v6 = v9;
    }
    while (!v10);
    if (v3) {
      unsigned int v11 = 0x80000000;
    }
    else {
      unsigned int v11 = 0x7FFFFFFF;
    }
    if (v3) {
      unsigned int v12 = -v9;
    }
    else {
      unsigned int v12 = v9;
    }
    if (v10) {
      return v11;
    }
    else {
      return v12;
    }
  }
}

void w2i(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4 = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  std::string::size_type v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  std::string::size_type v7 = __str->__r_.__value_.__r.__words[0];
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  do
  {
    if ((v6 & 0x80u) == 0) {
      signed int v9 = __str;
    }
    else {
      signed int v9 = (std::string *)v7;
    }
    if ((v6 & 0x80u) == 0) {
      std::string::size_type v10 = v6;
    }
    else {
      std::string::size_type v10 = size;
    }
    std::string::size_type v11 = v10 - v4;
    if (v10 <= v4)
    {
      unint64_t v15 = -1;
    }
    else
    {
      unsigned int v12 = (char *)v9 + v4;
      BOOL v13 = (char *)v9 + v10;
      while (*v12 != 95)
      {
        ++v12;
        if (!--v11)
        {
          unsigned int v12 = v13;
          break;
        }
      }
      unint64_t v14 = v12 - (unsigned char *)v9;
      if (v12 == v13) {
        unint64_t v15 = -1;
      }
      else {
        unint64_t v15 = v14;
      }
    }
    if (v15 != v4)
    {
      std::string::basic_string(&__p, __str, v4, v15 - v4, (std::allocator<char> *)&v33);
      __int16 v16 = sh2i((uint64_t)&__p);
      __int16 v17 = v16;
      std::locale v19 = a2[1];
      unint64_t v18 = (unint64_t)a2[2];
      if ((unint64_t)v19 >= v18)
      {
        uint64_t v21 = *a2;
        uint64_t v22 = v19 - *a2;
        if (v22 <= -3) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v22 >> 1;
        unint64_t v24 = v18 - (void)v21;
        if (v24 <= (v22 >> 1) + 1) {
          unint64_t v25 = v23 + 1;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v24 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v26 = v25;
        }
        if (v26)
        {
          int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5, v26);
          uint64_t v21 = *a2;
          std::locale v19 = a2[1];
        }
        else
        {
          int v27 = 0;
        }
        double v28 = &v27[2 * v23];
        *(_WORD *)double v28 = v17;
        char v20 = v28 + 2;
        while (v19 != v21)
        {
          __int16 v29 = *((_WORD *)v19 - 1);
          v19 -= 2;
          *((_WORD *)v28 - 1) = v29;
          v28 -= 2;
        }
        *a2 = v28;
        a2[1] = v20;
        a2[2] = &v27[2 * v26];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(_WORD *)std::locale v19 = v16;
        char v20 = v19 + 2;
      }
      a2[1] = v20;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::size_type v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      std::string::size_type v7 = __str->__r_.__value_.__r.__words[0];
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if ((v6 & 0x80u) == 0) {
      uint64_t v30 = __str;
    }
    else {
      uint64_t v30 = (std::string *)v7;
    }
    if ((v6 & 0x80u) == 0) {
      std::string::size_type v31 = v6;
    }
    else {
      std::string::size_type v31 = size;
    }
    if (v31 <= v15) {
      break;
    }
    std::string::size_type v4 = v15;
    while (v30->__r_.__value_.__s.__data_[v4] == 95)
    {
      if (v31 == ++v4) {
        return;
      }
    }
  }
  while (v4 != -1);
}

void sub_1DD7DD660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __int16 v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void w2i(std::string *__str@<X0>, __int16 a2@<W1>, char **a3@<X8>)
{
  std::string::size_type v6 = 0;
  a3[2] = 0;
  uint64_t v7 = (uint64_t)(a3 + 2);
  *a3 = 0;
  a3[1] = 0;
  std::string::size_type v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  std::string::size_type v9 = __str->__r_.__value_.__r.__words[0];
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  do
  {
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v11 = __str;
    }
    else {
      std::string::size_type v11 = (std::string *)v9;
    }
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v12 = v8;
    }
    else {
      std::string::size_type v12 = size;
    }
    std::string::size_type v13 = v12 - v6;
    if (v12 <= v6)
    {
      unint64_t v17 = -1;
    }
    else
    {
      uint64_t v14 = (char *)v11 + v6;
      unint64_t v15 = (char *)v11 + v12;
      while (*v14 != 95)
      {
        ++v14;
        if (!--v13)
        {
          uint64_t v14 = v15;
          break;
        }
      }
      unint64_t v16 = v14 - (unsigned char *)v11;
      if (v14 == v15) {
        unint64_t v17 = -1;
      }
      else {
        unint64_t v17 = v16;
      }
    }
    if (v17 != v6)
    {
      std::string::basic_string(&__p, __str, v6, v17 - v6, (std::allocator<char> *)&v35);
      int v18 = sh2i((uint64_t)&__p);
      if (v18 < 0x10000) {
        __int16 v19 = v18;
      }
      else {
        __int16 v19 = a2;
      }
      uint64_t v21 = a3[1];
      unint64_t v20 = (unint64_t)a3[2];
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v23 = *a3;
        uint64_t v24 = v21 - *a3;
        if (v24 <= -3) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v25 = v24 >> 1;
        unint64_t v26 = v20 - (void)v23;
        if (v26 <= (v24 >> 1) + 1) {
          unint64_t v27 = v25 + 1;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v26 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v28 = v27;
        }
        if (v28)
        {
          __int16 v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v7, v28);
          uint64_t v23 = *a3;
          uint64_t v21 = a3[1];
        }
        else
        {
          __int16 v29 = 0;
        }
        uint64_t v30 = &v29[2 * v25];
        *(_WORD *)uint64_t v30 = v19;
        uint64_t v22 = v30 + 2;
        while (v21 != v23)
        {
          __int16 v31 = *((_WORD *)v21 - 1);
          v21 -= 2;
          *((_WORD *)v30 - 1) = v31;
          v30 -= 2;
        }
        *a3 = v30;
        a3[1] = v22;
        a3[2] = &v29[2 * v28];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(_WORD *)uint64_t v21 = v19;
        uint64_t v22 = v21 + 2;
      }
      a3[1] = v22;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::size_type v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = __str->__r_.__value_.__r.__words[0];
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if ((v8 & 0x80u) == 0) {
      unint64_t v32 = __str;
    }
    else {
      unint64_t v32 = (std::string *)v9;
    }
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v33 = v8;
    }
    else {
      std::string::size_type v33 = size;
    }
    if (v33 <= v17) {
      break;
    }
    std::string::size_type v6 = v17;
    while (v32->__r_.__value_.__s.__data_[v6] == 95)
    {
      if (v33 == ++v6) {
        return;
      }
    }
  }
  while (v6 != -1);
}

void sub_1DD7DD87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void w2int(uint64_t *a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  BOOL v3 = *((char *)a1 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  if (v4)
  {
    std::string::size_type v6 = 0;
    unint64_t v7 = 0;
    std::string::size_type v8 = a2 + 2;
    do
    {
      if (v3) {
        std::string::size_type v9 = (uint64_t *)*a1;
      }
      else {
        std::string::size_type v9 = a1;
      }
      int v10 = *((char *)v9 + v7);
      if ((unint64_t)v6 >= *v8)
      {
        std::string::size_type v12 = *a2;
        uint64_t v13 = (v6 - *a2) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v8 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v16);
          std::string::size_type v12 = *a2;
          std::string::size_type v6 = a2[1];
        }
        else
        {
          unint64_t v17 = 0;
        }
        int v18 = &v17[4 * v13];
        *(_DWORD *)int v18 = v10;
        std::string::size_type v11 = v18 + 4;
        while (v6 != v12)
        {
          int v19 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *a2 = v18;
        a2[1] = v11;
        a2[2] = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)std::string::size_type v6 = v10;
        std::string::size_type v11 = v6 + 4;
      }
      a2[1] = v11;
      ++v7;
      BOOL v3 = *((char *)a1 + 23) < 0;
      unint64_t v20 = a1[1];
      if (*((char *)a1 + 23) >= 0) {
        unint64_t v20 = *((unsigned __int8 *)a1 + 23);
      }
      std::string::size_type v6 = v11;
    }
    while (v20 > v7);
  }
}

void sub_1DD7DDA08(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void w2i32(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4 = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  std::string::size_type v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  std::string::size_type v7 = __str->__r_.__value_.__r.__words[0];
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  do
  {
    if ((v6 & 0x80u) == 0) {
      std::string::size_type v9 = __str;
    }
    else {
      std::string::size_type v9 = (std::string *)v7;
    }
    if ((v6 & 0x80u) == 0) {
      std::string::size_type v10 = v6;
    }
    else {
      std::string::size_type v10 = size;
    }
    std::string::size_type v11 = v10 - v4;
    if (v10 <= v4)
    {
      unint64_t v15 = -1;
    }
    else
    {
      std::string::size_type v12 = (char *)v9 + v4;
      uint64_t v13 = (char *)v9 + v10;
      while (*v12 != 95)
      {
        ++v12;
        if (!--v11)
        {
          std::string::size_type v12 = v13;
          break;
        }
      }
      unint64_t v14 = v12 - (unsigned char *)v9;
      if (v12 == v13) {
        unint64_t v15 = -1;
      }
      else {
        unint64_t v15 = v14;
      }
    }
    if (v15 != v4)
    {
      std::string::basic_string(&__p, __str, v4, v15 - v4, (std::allocator<char> *)&v32);
      int v16 = sh2i((uint64_t)&__p);
      int v17 = v16;
      int v19 = a2[1];
      unint64_t v18 = (unint64_t)a2[2];
      if ((unint64_t)v19 >= v18)
      {
        uint64_t v21 = *a2;
        uint64_t v22 = (v19 - *a2) >> 2;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v18 - (void)v21;
        if (v24 >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          unint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v5, v25);
          uint64_t v21 = *a2;
          int v19 = a2[1];
        }
        else
        {
          unint64_t v26 = 0;
        }
        unint64_t v27 = &v26[4 * v22];
        *(_DWORD *)unint64_t v27 = v17;
        unint64_t v20 = v27 + 4;
        while (v19 != v21)
        {
          int v28 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        *a2 = v27;
        a2[1] = v20;
        a2[2] = &v26[4 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(_DWORD *)int v19 = v16;
        unint64_t v20 = v19 + 4;
      }
      a2[1] = v20;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::size_type v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      std::string::size_type v7 = __str->__r_.__value_.__r.__words[0];
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if ((v6 & 0x80u) == 0) {
      __int16 v29 = __str;
    }
    else {
      __int16 v29 = (std::string *)v7;
    }
    if ((v6 & 0x80u) == 0) {
      std::string::size_type v30 = v6;
    }
    else {
      std::string::size_type v30 = size;
    }
    if (v30 <= v15) {
      break;
    }
    std::string::size_type v4 = v15;
    while (v29->__r_.__value_.__s.__data_[v4] == 95)
    {
      if (v30 == ++v4) {
        return;
      }
    }
  }
  while (v4 != -1);
}

void sub_1DD7DDC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  int v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void iv2s(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  void v20[2] = *MEMORY[0x1E4F143B8];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  if (a2 - 1 >= (unint64_t)(v6 >> 2))
  {
    if ((unint64_t)v6 < 4) {
      return;
    }
    uint64_t v3 = v6 >> 2;
  }
  uint64_t v7 = 0;
  do
  {
    if (v7)
    {
      int v8 = *(char *)(a3 + 23);
      if (v8 >= 0) {
        size_t v9 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v9 = *(void *)(a3 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v9 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = &v19;
      }
      else {
        std::string::size_type v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if (v9)
      {
        if (v8 >= 0) {
          std::string::size_type v11 = (const void *)a3;
        }
        else {
          std::string::size_type v11 = *(const void **)a3;
        }
        memmove(v10, v11, v9);
      }
      *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 95;
      i2sh(*(_DWORD *)(*(void *)a1 + 4 * v7), (uint64_t)__p);
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v12 = __p;
      }
      else {
        std::string::size_type v12 = (void **)__p[0];
      }
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v13 = v18;
      }
      else {
        std::string::size_type v13 = (std::string::size_type)__p[1];
      }
      uint64_t v14 = std::string::append(&v19, (const std::string::value_type *)v12, v13);
      std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
      v20[0] = v14->__r_.__value_.__l.__size_;
      *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v8 < 0) {
        operator delete(*(void **)a3);
      }
      *(void *)a3 = v15;
      *(void *)(a3 + 8) = v20[0];
      *(void *)(a3 + 15) = *(void *)((char *)v20 + 7);
      *(unsigned char *)(a3 + 23) = v16;
      if ((char)v18 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      i2sh(**(_DWORD **)a1, (uint64_t)&v19);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(std::string *)a3 = v19;
    }
    ++v7;
  }
  while (v3 != v7);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  void v20[3];

  uint64_t v3 = a2;
  void v20[2] = *MEMORY[0x1E4F143B8];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  if (a2 - 1 >= (unint64_t)(v6 >> 2))
  {
    if ((unint64_t)v6 < 4) {
      return;
    }
    uint64_t v3 = v6 >> 2;
  }
  uint64_t v7 = 0;
  do
  {
    if (v7)
    {
      int v8 = *(char *)(a3 + 23);
      if (v8 >= 0) {
        size_t v9 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v9 = *(void *)(a3 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v9 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = &v19;
      }
      else {
        std::string::size_type v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if (v9)
      {
        if (v8 >= 0) {
          std::string::size_type v11 = (const void *)a3;
        }
        else {
          std::string::size_type v11 = *(const void **)a3;
        }
        memmove(v10, v11, v9);
      }
      *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 95;
      i2sh(*(_DWORD *)(*(void *)a1 + 4 * v7), (uint64_t)__p);
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v12 = __p;
      }
      else {
        std::string::size_type v12 = (void **)__p[0];
      }
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v13 = v18;
      }
      else {
        std::string::size_type v13 = (std::string::size_type)__p[1];
      }
      uint64_t v14 = std::string::append(&v19, (const std::string::value_type *)v12, v13);
      std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
      v20[0] = v14->__r_.__value_.__l.__size_;
      *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v8 < 0) {
        operator delete(*(void **)a3);
      }
      *(void *)a3 = v15;
      *(void *)(a3 + 8) = v20[0];
      *(void *)(a3 + 15) = *(void *)((char *)v20 + 7);
      *(unsigned char *)(a3 + 23) = v16;
      if ((char)v18 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      i2sh(**(_DWORD **)a1, (uint64_t)&v19);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(std::string *)a3 = v19;
    }
    ++v7;
  }
  while (v3 != v7);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  void v20[3];

  uint64_t v3 = a2;
  void v20[2] = *MEMORY[0x1E4F143B8];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  if (a2 - 1 >= (unint64_t)(v6 >> 3))
  {
    if ((unint64_t)v6 < 8) {
      return;
    }
    uint64_t v3 = v6 >> 3;
  }
  uint64_t v7 = 0;
  do
  {
    if (v7)
    {
      int v8 = *(char *)(a3 + 23);
      if (v8 >= 0) {
        size_t v9 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v9 = *(void *)(a3 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v9 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = &v19;
      }
      else {
        std::string::size_type v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if (v9)
      {
        if (v8 >= 0) {
          std::string::size_type v11 = (const void *)a3;
        }
        else {
          std::string::size_type v11 = *(const void **)a3;
        }
        memmove(v10, v11, v9);
      }
      *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 95;
      ul2sh(*(void *)(*(void *)a1 + 8 * v7), (uint64_t)__p);
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v12 = __p;
      }
      else {
        std::string::size_type v12 = (void **)__p[0];
      }
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v13 = v18;
      }
      else {
        std::string::size_type v13 = (std::string::size_type)__p[1];
      }
      uint64_t v14 = std::string::append(&v19, (const std::string::value_type *)v12, v13);
      std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
      v20[0] = v14->__r_.__value_.__l.__size_;
      *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v8 < 0) {
        operator delete(*(void **)a3);
      }
      *(void *)a3 = v15;
      *(void *)(a3 + 8) = v20[0];
      *(void *)(a3 + 15) = *(void *)((char *)v20 + 7);
      *(unsigned char *)(a3 + 23) = v16;
      if ((char)v18 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      ul2sh(**(void **)a1, (uint64_t)&v19);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(std::string *)a3 = v19;
    }
    ++v7;
  }
  while (v3 != v7);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  void v20[3];

  uint64_t v3 = a2;
  void v20[2] = *MEMORY[0x1E4F143B8];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  if (a2 - 1 >= (unint64_t)(v6 >> 3))
  {
    if ((unint64_t)v6 < 8) {
      return;
    }
    uint64_t v3 = v6 >> 3;
  }
  uint64_t v7 = 0;
  do
  {
    if (v7)
    {
      int v8 = *(char *)(a3 + 23);
      if (v8 >= 0) {
        size_t v9 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v9 = *(void *)(a3 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v9 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = &v19;
      }
      else {
        std::string::size_type v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if (v9)
      {
        if (v8 >= 0) {
          std::string::size_type v11 = (const void *)a3;
        }
        else {
          std::string::size_type v11 = *(const void **)a3;
        }
        memmove(v10, v11, v9);
      }
      *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 95;
      ul2sh(*(void *)(*(void *)a1 + 8 * v7), (uint64_t)__p);
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v12 = __p;
      }
      else {
        std::string::size_type v12 = (void **)__p[0];
      }
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v13 = v18;
      }
      else {
        std::string::size_type v13 = (std::string::size_type)__p[1];
      }
      uint64_t v14 = std::string::append(&v19, (const std::string::value_type *)v12, v13);
      std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
      v20[0] = v14->__r_.__value_.__l.__size_;
      *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v8 < 0) {
        operator delete(*(void **)a3);
      }
      *(void *)a3 = v15;
      *(void *)(a3 + 8) = v20[0];
      *(void *)(a3 + 15) = *(void *)((char *)v20 + 7);
      *(unsigned char *)(a3 + 23) = v16;
      if ((char)v18 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      ul2sh(**(void **)a1, (uint64_t)&v19);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(std::string *)a3 = v19;
    }
    ++v7;
  }
  while (v3 != v7);
}

void sub_1DD7DDE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((*(unsigned char *)(v21 + 23) & 0x80) != 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

double i2sh@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>((void *)a2, (char *)&str);
  if (a1 >= 0) {
    unsigned int v4 = a1;
  }
  else {
    unsigned int v4 = -a1;
  }
  do
  {
    if ((v4 & 0xF) >= 0xA) {
      char v5 = (v4 & 0xF) + 87;
    }
    else {
      char v5 = v4 & 0xF | 0x30;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (const void **)a2, (uint64_t)&v8);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v8;
    *(void *)(a2 + 16) = v9;
    BOOL v6 = v4 > 0xF;
    v4 >>= 4;
  }
  while (v6);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  if (a1 < 0)
  {
    std::operator+<char>();
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    double result = *(double *)&v8;
    *(_OWORD *)a2 = v8;
    *(void *)(a2 + 16) = v9;
  }
  return result;
}

void sub_1DD7DDF78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD7DE17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((*(unsigned char *)(v21 + 23) & 0x80) != 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD7DE3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((*(unsigned char *)(v21 + 23) & 0x80) != 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

double ul2sh@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>((void *)a2, (char *)&str);
  do
  {
    if ((a1 & 0xF) >= 0xA) {
      char v4 = (a1 & 0xF) + 87;
    }
    else {
      char v4 = a1 & 0xF | 0x30;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (const void **)a2, (uint64_t)&v7);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v8;
    BOOL v5 = a1 > 0xF;
    a1 >>= 4;
  }
  while (v5);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  return result;
}

void sub_1DD7DE4C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD7DE6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((*(unsigned char *)(v21 + 23) & 0x80) != 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void iv2s(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      if (i)
      {
        int v7 = *(char *)(a3 + 23);
        if (v7 >= 0) {
          size_t v8 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          size_t v8 = *(void *)(a3 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v18, v8 + 1);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v9 = &v18;
        }
        else {
          uint64_t v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
        }
        if (v8)
        {
          if (v7 >= 0) {
            std::string::size_type v10 = (const void *)a3;
          }
          else {
            std::string::size_type v10 = *(const void **)a3;
          }
          memmove(v9, v10, v8);
        }
        *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 95;
        short2sh(a1[i], (uint64_t)__p);
        if ((v17 & 0x80u) == 0) {
          std::string::size_type v11 = __p;
        }
        else {
          std::string::size_type v11 = (void **)__p[0];
        }
        if ((v17 & 0x80u) == 0) {
          std::string::size_type v12 = v17;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)__p[1];
        }
        std::string::size_type v13 = std::string::append(&v18, (const std::string::value_type *)v11, v12);
        std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
        v19[0] = v13->__r_.__value_.__l.__size_;
        *(void *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
        char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (v7 < 0) {
          operator delete(*(void **)a3);
        }
        *(void *)a3 = v14;
        *(void *)(a3 + 8) = v19[0];
        *(void *)(a3 + 15) = *(void *)((char *)v19 + 7);
        *(unsigned char *)(a3 + 23) = v15;
        if ((char)v17 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        short2sh(*a1, (uint64_t)&v18);
        if (*(char *)(a3 + 23) < 0) {
          operator delete(*(void **)a3);
        }
        *(std::string *)a3 = v18;
      }
    }
  }
}

void sub_1DD7DE8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((*(unsigned char *)(v21 + 23) & 0x80) != 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

double short2sh@<D0>(unsigned __int16 a1@<W0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>((void *)a2, (char *)&str);
  do
  {
    if ((a1 & 0xFu) >= 0xA) {
      char v4 = (a1 & 0xF) + 87;
    }
    else {
      char v4 = a1 & 0xF | 0x30;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (const void **)a2, (uint64_t)&v7);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v8;
    unsigned int v5 = a1;
    a1 >>= 4;
  }
  while (v5 > 0xF);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  return result;
}

void sub_1DD7DE9F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

CVPixelBufferRef CRCreateIOSurfacePixelBufferFromPixelBuffer(__CVBuffer *a1)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  if (CVPixelBufferGetIOSurface(a1))
  {
    unint64_t v2 = CROSLogForCategory(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      LOWORD(pixelBuffer) = 0;
      _os_log_impl(&dword_1DD733000, v2, OS_LOG_TYPE_ERROR, "Avoid calling CRCreateIOSurfacePixelBufferFromPixelBuffer with a pixel buffer that is already backed by an IOSurface!", (uint8_t *)&pixelBuffer, 2u);
    }
  }
  uint64_t v13 = *MEMORY[0x1E4F24D20];
  v14[0] = MEMORY[0x1E4F1CC08];
  CFDictionaryRef v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
  CVPixelBufferLockBaseAddress(a1, 0);
  int Width = CVPixelBufferGetWidth(a1);
  int Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  CVPixelBufferRef pixelBuffer = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Width, Height, PixelFormatType, v3, &pixelBuffer);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  uint64_t v9 = CVPixelBufferGetBaseAddress(pixelBuffer);
  memcpy(v9, BaseAddress, Height * BytesPerRow);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferRef v10 = pixelBuffer;

  return v10;
}

id CRConvertFloat16BufferToFloat32Buffer(void *a1, void *a2, vImagePixelCount a3, void *a4)
{
  src.data = a1;
  src.vImagePixelCount height = 1;
  src.vImagePixelCount width = a3;
  src.size_t rowBytes = 2 * a3;
  v6.data = a2;
  v6.vImagePixelCount height = 1;
  v6.vImagePixelCount width = a3;
  v6.size_t rowBytes = 4 * a3;
  id result = (id)vImageConvert_Planar16FtoPlanarF(&src, &v6, 0);
  if (a4)
  {
    if (result)
    {
      id result = +[CRImageReader errorWithErrorCode:-8];
      *a4 = result;
    }
  }
  return result;
}

id CRConvertFloat32BufferToUInt8Buffer(void *a1, void *a2, vImagePixelCount a3, void *a4)
{
  src.data = a1;
  src.vImagePixelCount height = 1;
  src.vImagePixelCount width = a3;
  src.size_t rowBytes = 4 * a3;
  v6.data = a2;
  v6.vImagePixelCount height = 1;
  v6.vImagePixelCount width = a3;
  v6.size_t rowBytes = a3;
  id result = (id)vImageConvert_PlanarFtoPlanar8(&src, &v6, 1.0, 0.0, 0);
  if (a4)
  {
    if (result)
    {
      id result = +[CRImageReader errorWithErrorCode:-8];
      *a4 = result;
    }
  }
  return result;
}

void CRCropRectangleFromPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pixelTransferSessionOut);
  v14.origin.double x = a3;
  v14.origin.double y = a4;
  v14.size.vImagePixelCount width = a5;
  v14.size.vImagePixelCount height = a6;
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v14);
  VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F45170], DictionaryRepresentation);
  VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a1, a2);
  VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
  CFRelease(pixelTransferSessionOut);
  CFRelease(DictionaryRepresentation);
}

uint64_t CRCopyRectangleCropMemoryFromPixelBuffer(__CVBuffer *a1, char *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  unint64_t Width = (int)CVPixelBufferGetWidth(a1);
  int Height = CVPixelBufferGetHeight(a1);
  v29.size.vImagePixelCount width = (double)Width;
  v29.size.vImagePixelCount height = (double)(unint64_t)Height;
  v29.origin.double x = 0.0;
  v29.origin.double y = 0.0;
  v31.origin.double x = a4;
  v31.origin.double y = a5;
  v31.size.vImagePixelCount width = a6;
  v31.size.vImagePixelCount height = a7;
  CGRect v30 = CGRectIntersection(v29, v31);
  double x = v30.origin.x;
  double y = v30.origin.y;
  double v18 = v30.size.width;
  double v19 = v30.size.height;
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  CVPixelBufferLockBaseAddress(a1, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  if (v19 > 0.0)
  {
    size_t v22 = (unint64_t)v18 * a3;
    unint64_t v23 = &BaseAddress[(unint64_t)x * a3 + BytesPerRow * (unint64_t)y];
    unint64_t v24 = (unint64_t)a6 * a3;
    unint64_t v25 = 1;
    do
    {
      memcpy(a2, v23, v22);
      double v26 = (double)v25++;
      v23 += BytesPerRow;
      a2 += v24;
    }
    while (v19 > v26);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t CRImagePaddingValueForMode(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 == 3)
  {
    LOBYTE(v11) = -1;
  }
  else if (a1 == 2)
  {
    LOBYTE(v11) = 0x80;
  }
  else
  {
    if (a1) {
      goto LABEL_12;
    }
    unint64_t v5 = a4 - 1;
    unint64_t v6 = 0;
    if (a3)
    {
      long long v7 = a2;
      uint64_t v8 = a3;
      do
      {
        v6 += *v7 + (unint64_t)v7[v5 * a5];
        ++v7;
        --v8;
      }
      while (v8);
    }
    if (v5 >= 2)
    {
      uint64_t v9 = a4 - 2;
      CVPixelBufferRef v10 = &a2[a5];
      do
      {
        v6 += *v10 + (unint64_t)v10[a3 - 1];
        v10 += a5;
        --v9;
      }
      while (v9);
    }
    if (2 * (a4 + a3) == 4) {
LABEL_12:
    }
      LOBYTE(v11) = 0;
    else {
      return (v6 / (2 * (a4 + a3) - 4));
    }
  }
  return v11;
}

void sub_1DD7DF638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7DFF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char ***__p,uint64_t a28,uint64_t a29,char **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char *a49,uint64_t a50,uint64_t a51,char a52)
{
  std::string __p = &a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a30 = &a49;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a49 = &a52;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);

  _Unwind_Resume(a1);
}

CGImageRef createImageFromContour(uint64_t *a1, uint64_t a2)
{
  DeviceGradouble y = CGColorSpaceCreateDeviceGray();
  unint64_t v5 = CGBitmapContextCreate(*(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 8), 8uLL, *(void *)(a2 + 24), DeviceGray, 0);
  CGColorSpaceRelease(DeviceGray);
  Image = CGBitmapContextCreateImage(v5);
  CGContextRelease(v5);
  unint64_t Width = CGImageGetWidth(Image);
  unint64_t Height = CGImageGetHeight(Image);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CVPixelBufferRef v10 = malloc_type_malloc(4 * Width * Height, 0x76F10885uLL);
  uint64_t v11 = CGBitmapContextCreate(v10, Width, Height, 8uLL, 4 * Width, DeviceRGB, 5u);
  CGColorSpaceRelease(DeviceRGB);
  v31.size.vImagePixelCount width = (double)Width;
  v31.origin.double x = 0.0;
  v31.origin.double y = 0.0;
  v31.size.vImagePixelCount height = (double)Height;
  CGContextDrawImage(v11, v31, Image);
  CGImageRelease(Image);
  CGContextTranslateCTM(v11, 0.0, (double)Height);
  CGContextScaleCTM(v11, 1.0, -1.0);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1] - *a1;
  if (v13 >= 1)
  {
    uint64_t v14 = 0;
    int64_t v15 = v13 / 0x18uLL;
    if (v15 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v15;
    }
    do
    {
      if (*(void *)(v12 + 24 * v14 + 8) - *(void *)(v12 + 24 * v14) >= 9uLL)
      {
        float v17 = (double)rand() / 2147483650.0;
        float v18 = (double)rand() / 2147483650.0;
        float v19 = (double)rand() / 2147483650.0;
        CGFloat v20 = v17;
        CGFloat v21 = v18;
        CGFloat v22 = v19;
        CGContextSetRGBStrokeColor(v11, v20, v21, v19, 0.0);
        CGContextSetRGBFillColor(v11, v20, v21, v22, 0.0);
        CGContextSetLineWidth(v11, 1.0);
        CGContextBeginPath(v11);
        CGContextMoveToPoint(v11, (double)**(int **)(*a1 + 24 * v14), (double)*(int *)(*(void *)(*a1 + 24 * v14) + 4));
        CGContextSetRGBStrokeColor(v11, v20, v21, v22, 1.0);
        CGContextSetRGBFillColor(v11, v20, v21, v22, 1.0);
        CGContextSetLineWidth(v11, 1.0);
        uint64_t v23 = *(void *)(*a1 + 24 * v14);
        if ((unint64_t)(*(void *)(*a1 + 24 * v14 + 8) - v23) >= 9)
        {
          uint64_t v24 = 0;
          unint64_t v25 = 1;
          do
          {
            CGContextAddLineToPoint(v11, (double)*(int *)(v23 + v24 + 8), (double)*(int *)(v23 + v24 + 12));
            ++v25;
            uint64_t v23 = *(void *)(*a1 + 24 * v14);
            v24 += 8;
          }
          while (v25 < (*(void *)(*a1 + 24 * v14 + 8) - v23) >> 3);
        }
        CGContextStrokePath(v11);
        uint64_t v12 = *a1;
        uint64_t v26 = *(void *)(*a1 + 24 * v14);
        if (*(void *)(*a1 + 24 * v14 + 8) != v26)
        {
          uint64_t v27 = 0;
          unint64_t v28 = 0;
          do
          {
            v32.origin.double x = (double)*(int *)(v26 + v27);
            v32.origin.double y = (double)*(int *)(v26 + v27 + 4);
            v32.size.vImagePixelCount width = 3.0;
            v32.size.vImagePixelCount height = 3.0;
            CGContextFillRect(v11, v32);
            ++v28;
            uint64_t v12 = *a1;
            uint64_t v26 = *(void *)(*a1 + 24 * v14);
            v27 += 8;
          }
          while (v28 < (*(void *)(*a1 + 24 * v14 + 8) - v26) >> 3);
        }
      }
      ++v14;
    }
    while (v14 != v16);
  }
  CGImageRef v29 = CGBitmapContextCreateImage(v11);
  CGContextRelease(v11);
  free(v10);
  return v29;
}

float64x2_t boxForContour(int32x2_t *a1, int32x2_t *a2)
{
  uint64_t v2 = (char *)a2 - (char *)a1;
  if (a2 == a1)
  {
    return *(float64x2_t *)MEMORY[0x1E4F1DB20];
  }
  else
  {
    int32x2_t v3 = *a1;
    if ((unint64_t)v2 < 9)
    {
      int32x2_t v7 = *a1;
    }
    else
    {
      unint64_t v4 = v2 >> 3;
      if (v4 <= 2) {
        unint64_t v4 = 2;
      }
      unint64_t v5 = v4 - 1;
      unint64_t v6 = a1 + 1;
      int32x2_t v7 = *a1;
      do
      {
        v8.i64[0] = v7.i32[0];
        v8.i64[1] = v7.i32[1];
        float64x2_t v9 = vcvtq_f64_s64(v8);
        v8.i64[0] = v3.i32[0];
        v8.i64[1] = v3.i32[1];
        float64x2_t v10 = vcvtq_f64_s64(v8);
        uint64_t v11 = (uint64_t)*v6++;
        v8.i64[0] = (int)v11;
        v8.i64[1] = SHIDWORD(v11);
        float64x2_t v12 = vcvtq_f64_s64(v8);
        float64x2_t v13 = vmaxnmq_f64(v10, v12);
        int32x2_t v7 = vmovn_s64(vcvtq_s64_f64(vminnmq_f64(v9, v12)));
        int32x2_t v3 = vmovn_s64(vcvtq_s64_f64(v13));
        --v5;
      }
      while (v5);
    }
    v15.i64[0] = v7.i32[0];
    v15.i64[1] = v7.i32[1];
    return vcvtq_f64_s64(v15);
  }
}

void sub_1DD7E05A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CHOSLogForCategory(int a1)
{
  if (CHOSLogForCategory_onceToken != -1) {
    dispatch_once(&CHOSLogForCategory_onceToken, &__block_literal_global_22);
  }
  uint64_t v2 = (void *)CHOSLogForCategory_logObjects[a1];
  return v2;
}

void __CHOSLogForCategory_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.TextRecognition", "General");
  uint64_t v1 = (void *)CHOSLogForCategory_logObjects[0];
  CHOSLogForCategory_logObjects[0] = (uint64_t)v0;

  os_log_t v2 = os_log_create("com.apple.TextRecognition", "Recognizer");
  int32x2_t v3 = (void *)qword_1EAB68A88;
  qword_1EAB68A88 = (uint64_t)v2;

  os_log_t v4 = os_log_create("com.apple.TextRecognition", "RecognitionSession");
  unint64_t v5 = (void *)qword_1EAB68A90;
  qword_1EAB68A90 = (uint64_t)v4;

  os_log_t v6 = os_log_create("com.apple.TextRecognition", "StrokeGrouping");
  int32x2_t v7 = (void *)qword_1EAB68A98;
  qword_1EAB68A98 = (uint64_t)v6;
}

uint64_t utf16CheckIsWordSeparator(int a1)
{
  BOOL v1 = (a1 - 8208) < 6;
  if (a1 == 0x2000) {
    BOOL v1 = 1;
  }
  if (a1 == 45) {
    BOOL v1 = 1;
  }
  return a1 == 32 || v1;
}

BOOL utf16CheckIsDigit(int a1)
{
  return (a1 - 48) < 0xA || (a1 - 1632) < 0xA;
}

uint64_t utf16CheckIsLatin(int a1)
{
  BOOL v1 = (a1 & 0xFFFFFFDF) - 65 < 0x1A || (a1 - 248) < 0x158;
  if ((a1 - 192) < 0x17) {
    BOOL v1 = 1;
  }
  return (a1 - 216) < 0x1F || v1;
}

BOOL utf16CheckIsEnglishCapital(int a1)
{
  return (a1 - 65) < 0x1A;
}

BOOL utf16CheckIsCyrillic(int a1)
{
  return (a1 - 1024) < 0x130;
}

uint64_t utf16CheckIsCyrillicUkrainianOnly(int a1)
{
  uint64_t result = 1;
  if ((a1 - 1108) > 0x3D || ((1 << (a1 - 84)) & 0x300000000000000DLL) == 0)
  {
    unsigned int v3 = a1 - 1028;
    if (v3 > 3 || v3 == 1) {
      return 0;
    }
  }
  return result;
}

BOOL utf16CheckIsGreek(int a1)
{
  return (a1 - 880) < 0x90;
}

uint64_t utf16CheckIsHangul(__int16 a1)
{
  BOOL v1 = (unsigned __int16)(a1 - 12592) < 0x60u || (unsigned __int16)(a1 + 10320) < 0x50u;
  return (unsigned __int16)((unsigned __int16)(a1 + 21504) >> 4) < 0x2BBu
      || (a1 & 0xFFE0) == 43360
      || (a1 & 0xFF00) == 4352
      || v1;
}

BOOL utf16CheckIsHiragana(int a1)
{
  return (a1 - 12352) < 0x60;
}

BOOL utf16CheckIsKatakana(int a1)
{
  return (a1 - 12448) < 0x60;
}

BOOL utf16CheckIsCJKUnifiedIdiograph(int a1)
{
  return (a1 - 19968) >> 9 < 0x29 || (a1 - 13312) >> 6 < 0x67;
}

uint64_t utf16CheckIsArabic(__int16 a1)
{
  BOOL v1 = (unsigned __int16)(a1 - 1872) < 0x30u || (unsigned __int16)(a1 + 400) < 0x90u;
  unsigned int v2 = (a1 & 0xFF00) == 0x600 || v1;
  if ((unsigned __int16)(a1 - 2160) < 0x90u) {
    unsigned int v2 = 1;
  }
  if ((unsigned __int16)(a1 + 1200) >= 0x2B0u) {
    return v2;
  }
  else {
    return 1;
  }
}

BOOL utf16CheckIsArabicDiacritic(int a1)
{
  return (a1 - 1611) < 8;
}

void sub_1DD7E3A0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 + 704), 8);
  _Unwind_Resume(a1);
}

Class __getFTBipartiteMatcherClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EB58CC18)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    _WORD v4[2] = 3221225472;
    v4[3] = __FusionTrackerLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E6CDBB18;
    uint64_t v6 = 0;
    qword_1EB58CC18 = _sl_dlopen();
    unsigned int v2 = (void *)v4[0];
    if (!qword_1EB58CC18)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("FTBipartiteMatcher");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    unsigned int v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  _MergedGlobals_23 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __FusionTrackerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB58CC18 = result;
  return result;
}

void sub_1DD7E3F2C(_Unwind_Exception *a1)
{
  os_log_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD7E3FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E4040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E44EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void sub_1DD7E4B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E4D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E4F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E520C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E53E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E547C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E5710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E57CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRLanguageResources;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1DD7E5A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E5B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7E5E3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD7E5F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void sub_1DD7E6144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD7E6354(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void CHNeuralNetwork::SetFragIndeces(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  std::__tree<CRCHuint128>::destroy(a1 + 48, *(void **)(a1 + 56));
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 0;
  std::__tree<CRCHuint128>::destroy(a1 + 72, *(void **)(a1 + 80));
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;
  unsigned int v3 = *(int **)a1;
  os_log_t v4 = *(int **)(a1 + 8);
  while (v3 != v4)
  {
    int v5 = *v3++;
    int v6 = v5 / (*(_DWORD *)(*(void *)(a1 + 120) + 84) * *(_DWORD *)(*(void *)(a1 + 120) + 80));
    std::__tree<int>::__emplace_unique_key_args<int,int>((uint64_t *)(a1 + 48), v6, v6);
    int v7 = v5 % (*(_DWORD *)(*(void *)(a1 + 120) + 84) * *(_DWORD *)(*(void *)(a1 + 120) + 80));
    std::__tree<int>::__emplace_unique_key_args<int,int>((uint64_t *)(a1 + 72), v7, v7);
  }
}

void CHNeuralNetwork::InitializeFragments(CHNeuralNetwork *this)
{
  unsigned int v3 = (char *)this + 40;
  unint64_t v2 = *((void *)this + 5);
  os_log_t v4 = (char **)((char *)this + 24);
  int v5 = (void *)*((void *)this + 4);
  if ((unint64_t)v5 >= v2)
  {
    uint64_t v7 = ((char *)v5 - *v4) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v8 = v2 - (void)*v4;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 40, v10);
    }
    else {
      uint64_t v11 = 0;
    }
    float64x2_t v12 = &v11[8 * v7];
    float64x2_t v13 = &v11[8 * v10];
    *(void *)float64x2_t v12 = 0;
    int v6 = v12 + 8;
    int64x2_t v15 = (char *)*((void *)this + 3);
    uint64_t v14 = (char *)*((void *)this + 4);
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      uint64_t v14 = *v4;
    }
    *((void *)this + 3) = v12;
    *((void *)this + 4) = v6;
    *((void *)this + 5) = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *int v5 = 0;
    int v6 = v5 + 1;
  }
  *((void *)this + 4) = v6;
  unint64_t v17 = *((void *)this + 5);
  if ((unint64_t)v6 >= v17)
  {
    uint64_t v19 = ((char *)v6 - *v4) >> 3;
    if ((unint64_t)(v19 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v20 = v17 - (void)*v4;
    uint64_t v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
      uint64_t v21 = v19 + 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22) {
      uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v22);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = &v23[8 * v19];
    unint64_t v25 = &v23[8 * v22];
    *(void *)uint64_t v24 = 0x200000000;
    float v18 = v24 + 8;
    uint64_t v27 = (char *)*((void *)this + 3);
    uint64_t v26 = (char *)*((void *)this + 4);
    if (v26 != v27)
    {
      do
      {
        uint64_t v28 = *((void *)v26 - 1);
        v26 -= 8;
        *((void *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      uint64_t v26 = *v4;
    }
    *((void *)this + 3) = v24;
    *((void *)this + 4) = v18;
    *((void *)this + 5) = v25;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *int v6 = 0x200000000;
    float v18 = v6 + 1;
  }
  *((void *)this + 4) = v18;
  unint64_t v29 = *((void *)this + 5);
  if ((unint64_t)v18 >= v29)
  {
    uint64_t v31 = ((char *)v18 - *v4) >> 3;
    if ((unint64_t)(v31 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v32 = v29 - (void)*v4;
    uint64_t v33 = v32 >> 2;
    if (v32 >> 2 <= (unint64_t)(v31 + 1)) {
      uint64_t v33 = v31 + 1;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34) {
      char v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v34);
    }
    else {
      char v35 = 0;
    }
    int v36 = &v35[8 * v31];
    int v37 = &v35[8 * v34];
    *(void *)int v36 = 2;
    CGRect v30 = v36 + 8;
    uint64_t v39 = (char *)*((void *)this + 3);
    uint64_t v38 = (char *)*((void *)this + 4);
    if (v38 != v39)
    {
      do
      {
        uint64_t v40 = *((void *)v38 - 1);
        v38 -= 8;
        *((void *)v36 - 1) = v40;
        v36 -= 8;
      }
      while (v38 != v39);
      uint64_t v38 = *v4;
    }
    *((void *)this + 3) = v36;
    *((void *)this + 4) = v30;
    *((void *)this + 5) = v37;
    if (v38) {
      operator delete(v38);
    }
  }
  else
  {
    *float v18 = 2;
    CGRect v30 = v18 + 1;
  }
  *((void *)this + 4) = v30;
  unint64_t v41 = *((void *)this + 5);
  if ((unint64_t)v30 >= v41)
  {
    uint64_t v43 = ((char *)v30 - *v4) >> 3;
    if ((unint64_t)(v43 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v44 = v41 - (void)*v4;
    uint64_t v45 = v44 >> 2;
    if (v44 >> 2 <= (unint64_t)(v43 + 1)) {
      uint64_t v45 = v43 + 1;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v45;
    }
    if (v46) {
      unint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v46);
    }
    else {
      unint64_t v47 = 0;
    }
    uint64_t v48 = &v47[8 * v43];
    BOOL v49 = &v47[8 * v46];
    *(void *)uint64_t v48 = 0x200000002;
    uint64_t v42 = v48 + 8;
    unint64_t v51 = (char *)*((void *)this + 3);
    uint64_t v50 = (char *)*((void *)this + 4);
    if (v50 != v51)
    {
      do
      {
        uint64_t v52 = *((void *)v50 - 1);
        v50 -= 8;
        *((void *)v48 - 1) = v52;
        v48 -= 8;
      }
      while (v50 != v51);
      uint64_t v50 = *v4;
    }
    *((void *)this + 3) = v48;
    *((void *)this + 4) = v42;
    *((void *)this + 5) = v49;
    if (v50) {
      operator delete(v50);
    }
  }
  else
  {
    *CGRect v30 = 0x200000002;
    uint64_t v42 = v30 + 1;
  }
  *((void *)this + 4) = v42;
  unint64_t v53 = *((void *)this + 5);
  if ((unint64_t)v42 >= v53)
  {
    uint64_t v55 = ((char *)v42 - *v4) >> 3;
    if ((unint64_t)(v55 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v56 = v53 - (void)*v4;
    uint64_t v57 = v56 >> 2;
    if (v56 >> 2 <= (unint64_t)(v55 + 1)) {
      uint64_t v57 = v55 + 1;
    }
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v58 = v57;
    }
    if (v58) {
      int64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v58);
    }
    else {
      int64_t v59 = 0;
    }
    int64_t v60 = &v59[8 * v55];
    uint64_t v61 = &v59[8 * v58];
    *(void *)int64_t v60 = 0x100000000;
    uint64_t v54 = v60 + 8;
    int v63 = (char *)*((void *)this + 3);
    unint64_t v62 = (char *)*((void *)this + 4);
    if (v62 != v63)
    {
      do
      {
        uint64_t v64 = *((void *)v62 - 1);
        v62 -= 8;
        *((void *)v60 - 1) = v64;
        v60 -= 8;
      }
      while (v62 != v63);
      unint64_t v62 = *v4;
    }
    *((void *)this + 3) = v60;
    *((void *)this + 4) = v54;
    *((void *)this + 5) = v61;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *uint64_t v42 = 0x100000000;
    uint64_t v54 = v42 + 1;
  }
  *((void *)this + 4) = v54;
  unint64_t v65 = *((void *)this + 5);
  if ((unint64_t)v54 >= v65)
  {
    uint64_t v67 = ((char *)v54 - *v4) >> 3;
    if ((unint64_t)(v67 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v68 = v65 - (void)*v4;
    uint64_t v69 = v68 >> 2;
    if (v68 >> 2 <= (unint64_t)(v67 + 1)) {
      uint64_t v69 = v67 + 1;
    }
    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v70 = v69;
    }
    if (v70) {
      uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v70);
    }
    else {
      uint64_t v71 = 0;
    }
    uint64_t v72 = &v71[8 * v67];
    uint64_t v73 = &v71[8 * v70];
    *(void *)uint64_t v72 = 0x300000000;
    uint64_t v66 = v72 + 8;
    unint64_t v75 = (char *)*((void *)this + 3);
    double v74 = (char *)*((void *)this + 4);
    if (v74 != v75)
    {
      do
      {
        uint64_t v76 = *((void *)v74 - 1);
        v74 -= 8;
        *((void *)v72 - 1) = v76;
        v72 -= 8;
      }
      while (v74 != v75);
      double v74 = *v4;
    }
    *((void *)this + 3) = v72;
    *((void *)this + 4) = v66;
    *((void *)this + 5) = v73;
    if (v74) {
      operator delete(v74);
    }
  }
  else
  {
    *uint64_t v54 = 0x300000000;
    uint64_t v66 = v54 + 1;
  }
  *((void *)this + 4) = v66;
  unint64_t v77 = *((void *)this + 5);
  if ((unint64_t)v66 >= v77)
  {
    uint64_t v79 = ((char *)v66 - *v4) >> 3;
    if ((unint64_t)(v79 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v80 = v77 - (void)*v4;
    uint64_t v81 = v80 >> 2;
    if (v80 >> 2 <= (unint64_t)(v79 + 1)) {
      uint64_t v81 = v79 + 1;
    }
    if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v82 = v81;
    }
    if (v82) {
      uint64_t v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v82);
    }
    else {
      uint64_t v83 = 0;
    }
    int v84 = &v83[8 * v79];
    int v85 = &v83[8 * v82];
    *(void *)int v84 = 0x100000002;
    uint64_t v78 = v84 + 8;
    uint64_t v87 = (char *)*((void *)this + 3);
    uint64_t v86 = (char *)*((void *)this + 4);
    if (v86 != v87)
    {
      do
      {
        uint64_t v88 = *((void *)v86 - 1);
        v86 -= 8;
        *((void *)v84 - 1) = v88;
        v84 -= 8;
      }
      while (v86 != v87);
      uint64_t v86 = *v4;
    }
    *((void *)this + 3) = v84;
    *((void *)this + 4) = v78;
    *((void *)this + 5) = v85;
    if (v86) {
      operator delete(v86);
    }
  }
  else
  {
    void *v66 = 0x100000002;
    uint64_t v78 = v66 + 1;
  }
  *((void *)this + 4) = v78;
  unint64_t v89 = *((void *)this + 5);
  if ((unint64_t)v78 >= v89)
  {
    uint64_t v91 = ((char *)v78 - *v4) >> 3;
    if ((unint64_t)(v91 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v92 = v89 - (void)*v4;
    uint64_t v93 = v92 >> 2;
    if (v92 >> 2 <= (unint64_t)(v91 + 1)) {
      uint64_t v93 = v91 + 1;
    }
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v94 = v93;
    }
    if (v94) {
      float v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v94);
    }
    else {
      float v95 = 0;
    }
    uint64_t v96 = &v95[8 * v91];
    unint64_t v97 = &v95[8 * v94];
    *(void *)uint64_t v96 = 0x300000002;
    uint64_t v90 = v96 + 8;
    unint64_t v99 = (char *)*((void *)this + 3);
    uint64_t v98 = (char *)*((void *)this + 4);
    if (v98 != v99)
    {
      do
      {
        uint64_t v100 = *((void *)v98 - 1);
        v98 -= 8;
        *((void *)v96 - 1) = v100;
        v96 -= 8;
      }
      while (v98 != v99);
      uint64_t v98 = *v4;
    }
    *((void *)this + 3) = v96;
    *((void *)this + 4) = v90;
    *((void *)this + 5) = v97;
    if (v98) {
      operator delete(v98);
    }
  }
  else
  {
    *uint64_t v78 = 0x300000002;
    uint64_t v90 = v78 + 1;
  }
  *((void *)this + 4) = v90;
  unint64_t v101 = *((void *)this + 5);
  if ((unint64_t)v90 >= v101)
  {
    uint64_t v103 = ((char *)v90 - *v4) >> 3;
    if ((unint64_t)(v103 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v104 = v101 - (void)*v4;
    uint64_t v105 = v104 >> 2;
    if (v104 >> 2 <= (unint64_t)(v103 + 1)) {
      uint64_t v105 = v103 + 1;
    }
    if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v106 = v105;
    }
    if (v106) {
      unint64_t v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v106);
    }
    else {
      unint64_t v107 = 0;
    }
    unint64_t v108 = &v107[8 * v103];
    unint64_t v109 = &v107[8 * v106];
    *(void *)unint64_t v108 = 1;
    unint64_t v102 = v108 + 8;
    float v111 = (char *)*((void *)this + 3);
    unint64_t v110 = (char *)*((void *)this + 4);
    if (v110 != v111)
    {
      do
      {
        uint64_t v112 = *((void *)v110 - 1);
        v110 -= 8;
        *((void *)v108 - 1) = v112;
        v108 -= 8;
      }
      while (v110 != v111);
      unint64_t v110 = *v4;
    }
    *((void *)this + 3) = v108;
    *((void *)this + 4) = v102;
    *((void *)this + 5) = v109;
    if (v110) {
      operator delete(v110);
    }
  }
  else
  {
    *uint64_t v90 = 1;
    unint64_t v102 = v90 + 1;
  }
  *((void *)this + 4) = v102;
  unint64_t v113 = *((void *)this + 5);
  if ((unint64_t)v102 >= v113)
  {
    uint64_t v115 = ((char *)v102 - *v4) >> 3;
    if ((unint64_t)(v115 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v116 = v113 - (void)*v4;
    uint64_t v117 = v116 >> 2;
    if (v116 >> 2 <= (unint64_t)(v115 + 1)) {
      uint64_t v117 = v115 + 1;
    }
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v118 = v117;
    }
    if (v118) {
      uint64_t v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v118);
    }
    else {
      uint64_t v119 = 0;
    }
    long long v120 = &v119[8 * v115];
    unint64_t v121 = &v119[8 * v118];
    *(void *)long long v120 = 0x200000001;
    unint64_t v114 = v120 + 8;
    long long v123 = (char *)*((void *)this + 3);
    long long v122 = (char *)*((void *)this + 4);
    if (v122 != v123)
    {
      do
      {
        uint64_t v124 = *((void *)v122 - 1);
        v122 -= 8;
        *((void *)v120 - 1) = v124;
        v120 -= 8;
      }
      while (v122 != v123);
      long long v122 = *v4;
    }
    *((void *)this + 3) = v120;
    *((void *)this + 4) = v114;
    *((void *)this + 5) = v121;
    if (v122) {
      operator delete(v122);
    }
  }
  else
  {
    *unint64_t v102 = 0x200000001;
    unint64_t v114 = v102 + 1;
  }
  *((void *)this + 4) = v114;
  unint64_t v125 = *((void *)this + 5);
  if ((unint64_t)v114 >= v125)
  {
    uint64_t v127 = ((char *)v114 - *v4) >> 3;
    if ((unint64_t)(v127 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v128 = v125 - (void)*v4;
    uint64_t v129 = v128 >> 2;
    if (v128 >> 2 <= (unint64_t)(v127 + 1)) {
      uint64_t v129 = v127 + 1;
    }
    if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v130 = v129;
    }
    if (v130) {
      uint64_t v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v130);
    }
    else {
      uint64_t v131 = 0;
    }
    id v132 = &v131[8 * v127];
    int64_t v133 = &v131[8 * v130];
    *(void *)id v132 = 3;
    uint64_t v126 = v132 + 8;
    long long v135 = (char *)*((void *)this + 3);
    long long v134 = (char *)*((void *)this + 4);
    if (v134 != v135)
    {
      do
      {
        uint64_t v136 = *((void *)v134 - 1);
        v134 -= 8;
        *((void *)v132 - 1) = v136;
        v132 -= 8;
      }
      while (v134 != v135);
      long long v134 = *v4;
    }
    *((void *)this + 3) = v132;
    *((void *)this + 4) = v126;
    *((void *)this + 5) = v133;
    if (v134) {
      operator delete(v134);
    }
  }
  else
  {
    *unint64_t v114 = 3;
    uint64_t v126 = v114 + 1;
  }
  *((void *)this + 4) = v126;
  unint64_t v137 = *((void *)this + 5);
  if ((unint64_t)v126 >= v137)
  {
    uint64_t v139 = ((char *)v126 - *v4) >> 3;
    if ((unint64_t)(v139 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v140 = v137 - (void)*v4;
    uint64_t v141 = v140 >> 2;
    if (v140 >> 2 <= (unint64_t)(v139 + 1)) {
      uint64_t v141 = v139 + 1;
    }
    if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v142 = v141;
    }
    if (v142) {
      long long v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v142);
    }
    else {
      long long v143 = 0;
    }
    long long v144 = &v143[8 * v139];
    long long v145 = &v143[8 * v142];
    *(void *)long long v144 = 0x200000003;
    uint64_t v138 = v144 + 8;
    uint64_t v147 = (char *)*((void *)this + 3);
    BOOL v146 = (char *)*((void *)this + 4);
    if (v146 != v147)
    {
      do
      {
        uint64_t v148 = *((void *)v146 - 1);
        v146 -= 8;
        *((void *)v144 - 1) = v148;
        v144 -= 8;
      }
      while (v146 != v147);
      BOOL v146 = *v4;
    }
    *((void *)this + 3) = v144;
    *((void *)this + 4) = v138;
    *((void *)this + 5) = v145;
    if (v146) {
      operator delete(v146);
    }
  }
  else
  {
    *uint64_t v126 = 0x200000003;
    uint64_t v138 = v126 + 1;
  }
  *((void *)this + 4) = v138;
  unint64_t v149 = *((void *)this + 5);
  if ((unint64_t)v138 >= v149)
  {
    uint64_t v151 = ((char *)v138 - *v4) >> 3;
    if ((unint64_t)(v151 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v152 = v149 - (void)*v4;
    uint64_t v153 = v152 >> 2;
    if (v152 >> 2 <= (unint64_t)(v151 + 1)) {
      uint64_t v153 = v151 + 1;
    }
    if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v154 = v153;
    }
    if (v154) {
      unint64_t v155 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v154);
    }
    else {
      unint64_t v155 = 0;
    }
    float v156 = &v155[8 * v151];
    int v157 = &v155[8 * v154];
    *(void *)float v156 = 0x100000001;
    unint64_t v150 = v156 + 8;
    uint64_t v159 = (char *)*((void *)this + 3);
    uint64_t v158 = (char *)*((void *)this + 4);
    if (v158 != v159)
    {
      do
      {
        uint64_t v160 = *((void *)v158 - 1);
        v158 -= 8;
        *((void *)v156 - 1) = v160;
        v156 -= 8;
      }
      while (v158 != v159);
      uint64_t v158 = *v4;
    }
    *((void *)this + 3) = v156;
    *((void *)this + 4) = v150;
    *((void *)this + 5) = v157;
    if (v158) {
      operator delete(v158);
    }
  }
  else
  {
    *uint64_t v138 = 0x100000001;
    unint64_t v150 = v138 + 1;
  }
  *((void *)this + 4) = v150;
  unint64_t v161 = *((void *)this + 5);
  if ((unint64_t)v150 >= v161)
  {
    uint64_t v163 = ((char *)v150 - *v4) >> 3;
    if ((unint64_t)(v163 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v164 = v161 - (void)*v4;
    uint64_t v165 = v164 >> 2;
    if (v164 >> 2 <= (unint64_t)(v163 + 1)) {
      uint64_t v165 = v163 + 1;
    }
    if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v166 = v165;
    }
    if (v166) {
      id v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v166);
    }
    else {
      id v167 = 0;
    }
    unsigned int v168 = &v167[8 * v163];
    int v169 = &v167[8 * v166];
    *(void *)unsigned int v168 = 0x300000001;
    long long v162 = v168 + 8;
    uint64_t v171 = (char *)*((void *)this + 3);
    int v170 = (char *)*((void *)this + 4);
    if (v170 != v171)
    {
      do
      {
        uint64_t v172 = *((void *)v170 - 1);
        v170 -= 8;
        *((void *)v168 - 1) = v172;
        v168 -= 8;
      }
      while (v170 != v171);
      int v170 = *v4;
    }
    *((void *)this + 3) = v168;
    *((void *)this + 4) = v162;
    *((void *)this + 5) = v169;
    if (v170) {
      operator delete(v170);
    }
  }
  else
  {
    *unint64_t v150 = 0x300000001;
    long long v162 = v150 + 1;
  }
  *((void *)this + 4) = v162;
  unint64_t v173 = *((void *)this + 5);
  if ((unint64_t)v162 >= v173)
  {
    uint64_t v175 = ((char *)v162 - *v4) >> 3;
    if ((unint64_t)(v175 + 1) >> 61) {
      goto LABEL_258;
    }
    uint64_t v176 = v173 - (void)*v4;
    uint64_t v177 = v176 >> 2;
    if (v176 >> 2 <= (unint64_t)(v175 + 1)) {
      uint64_t v177 = v175 + 1;
    }
    if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v178 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v178 = v177;
    }
    if (v178) {
      long long v179 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v178);
    }
    else {
      long long v179 = 0;
    }
    long long v180 = &v179[8 * v175];
    long long v181 = &v179[8 * v178];
    *(void *)long long v180 = 0x100000003;
    BOOL v174 = v180 + 8;
    int v183 = (char *)*((void *)this + 3);
    long long v182 = (char *)*((void *)this + 4);
    if (v182 != v183)
    {
      do
      {
        uint64_t v184 = *((void *)v182 - 1);
        v182 -= 8;
        *((void *)v180 - 1) = v184;
        v180 -= 8;
      }
      while (v182 != v183);
      long long v182 = *v4;
    }
    *((void *)this + 3) = v180;
    *((void *)this + 4) = v174;
    *((void *)this + 5) = v181;
    if (v182) {
      operator delete(v182);
    }
  }
  else
  {
    *long long v162 = 0x100000003;
    BOOL v174 = v162 + 1;
  }
  *((void *)this + 4) = v174;
  unint64_t v185 = *((void *)this + 5);
  if ((unint64_t)v174 < v185)
  {
    *BOOL v174 = 0x300000003;
    uint64_t v186 = v174 + 1;
    goto LABEL_257;
  }
  uint64_t v187 = ((char *)v174 - *v4) >> 3;
  if ((unint64_t)(v187 + 1) >> 61) {
LABEL_258:
  }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  uint64_t v188 = v185 - (void)*v4;
  uint64_t v189 = v188 >> 2;
  if (v188 >> 2 <= (unint64_t)(v187 + 1)) {
    uint64_t v189 = v187 + 1;
  }
  if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v190 = v189;
  }
  if (v190) {
    long long v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v190);
  }
  else {
    long long v191 = 0;
  }
  long long v192 = &v191[8 * v187];
  long long v193 = &v191[8 * v190];
  *(void *)long long v192 = 0x300000003;
  uint64_t v186 = v192 + 8;
  int v195 = (char *)*((void *)this + 3);
  long long v194 = (char *)*((void *)this + 4);
  if (v194 != v195)
  {
    do
    {
      uint64_t v196 = *((void *)v194 - 1);
      v194 -= 8;
      *((void *)v192 - 1) = v196;
      v192 -= 8;
    }
    while (v194 != v195);
    long long v194 = *v4;
  }
  *((void *)this + 3) = v192;
  *((void *)this + 4) = v186;
  *((void *)this + 5) = v193;
  if (v194) {
    operator delete(v194);
  }
LABEL_257:
  *((void *)this + 4) = v186;
}

uint64_t CHNeuralNetwork::WriteBinaryModelToFile(int *a1, char *__filename)
{
  unint64_t v2 = __filename;
  if (__filename[23] < 0) {
    unint64_t v2 = *(const char **)__filename;
  }
  os_log_t v4 = fopen(v2, "w");
  fwrite(&BINARY_FILE_VERSION_MAJOR, 4uLL, 1uLL, v4);
  fwrite(&BINARY_FILE_VERSION_MINOR, 4uLL, 1uLL, v4);
  fwrite(&BINARY_FILE_VERSION_REVISON, 4uLL, 1uLL, v4);
  fwrite(a1 + 32, 4uLL, 1uLL, v4);
  fwrite(*((const void **)a1 + 21), 4uLL, a1[32], v4);
  fwrite(a1 + 25, 4uLL, 1uLL, v4);
  fwrite(a1 + 26, 4uLL, 1uLL, v4);
  fwrite(a1 + 28, 4uLL, 1uLL, v4);
  uint64_t __ptr = 0;
  if (a1[28] >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      HIDWORD(__ptr) = *(_DWORD *)(*((void *)a1 + 15) + 56 * v5);
      fwrite((char *)&__ptr + 4, 4uLL, 1uLL, v4);
      LODWORD(__ptr) = *(_DWORD *)(*((void *)a1 + 15) + 56 * v5 + 4);
      fwrite(&__ptr, 4uLL, 1uLL, v4);
      fwrite((const void *)(*((void *)a1 + 15) + 56 * v5 + 8), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((void *)a1 + 15) + 56 * v5 + 12), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((void *)a1 + 15) + 56 * v5 + 16), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((void *)a1 + 15) + 56 * v5 + 20), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((void *)a1 + 15) + 56 * v5 + 24), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((void *)a1 + 15) + 56 * v5 + 28), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((void *)a1 + 15) + 56 * v5 + 48), 4uLL, 1uLL, v4);
      if (SHIDWORD(__ptr) >= 1)
      {
        uint64_t v6 = 0;
        do
          Matrix<short>::writeMatrix(*(const void ***)(*(void *)(*((void *)a1 + 15) + 56 * v5 + 32) + 8 * v6++), v4);
        while (v6 < SHIDWORD(__ptr));
      }
      fwrite(*(const void **)(*((void *)a1 + 15) + 56 * v5++ + 40), 4uLL, (int)__ptr, v4);
    }
    while (v5 < a1[28]);
  }
  Matrix<short>::writeMatrixStrided(*((void **)a1 + 17), v4);
  fwrite(a1 + 33, 4uLL, 1uLL, v4);
  fwrite(*((const void **)a1 + 18), 2uLL, a1[33], v4);
  Matrix<short>::writeMatrixStrided(*((void **)a1 + 19), v4);
  Matrix<short>::writeMatrix(*((const void ***)a1 + 19), v4);
  fwrite(a1 + 32, 4uLL, 1uLL, v4);
  fwrite(*((const void **)a1 + 20), 2uLL, a1[32], v4);
  return fclose(v4);
}

size_t Matrix<short>::writeMatrix(const void **a1, FILE *__stream)
{
  fwrite(a1 + 17, 4uLL, 1uLL, __stream);
  fwrite((char *)a1 + 140, 4uLL, 1uLL, __stream);
  uint64_t v4 = MEMORY[0x1E01BF6C0](__stream);
  LODWORD(v5) = (v4 + 4) & 0x7F;
  if (v4 + 4 <= 0) {
    uint64_t v5 = -(-(v4 + 4) & 0x7F);
  }
  unsigned int __ptr = 128 - v5;
  fwrite(&__ptr, 4uLL, 1uLL, __stream);
  if (__ptr)
  {
    for (unsigned int i = 0; i < __ptr; ++i)
    {
      char v8 = 0;
      fwrite(&v8, 1uLL, 1uLL, __stream);
    }
  }
  return fwrite(a1[16], 2uLL, (*((_DWORD *)a1 + 35) * *((_DWORD *)a1 + 34)), __stream);
}

size_t Matrix<short>::writeMatrixStrided(void *a1, FILE *__stream)
{
  uint64_t v4 = (unsigned int *)(a1 + 17);
  fwrite(a1 + 17, 4uLL, 1uLL, __stream);
  uint64_t v5 = (unsigned int *)a1 + 35;
  fwrite((char *)a1 + 140, 4uLL, 1uLL, __stream);
  uint64_t v6 = MEMORY[0x1E01BF6C0](__stream);
  LODWORD(v7) = (v6 + 4) & 0x7F;
  if (v6 + 4 <= 0) {
    uint64_t v7 = -(-(v6 + 4) & 0x7F);
  }
  unsigned int __ptr = 128 - v7;
  size_t result = fwrite(&__ptr, 4uLL, 1uLL, __stream);
  if (__ptr)
  {
    for (unsigned int i = 0; i < __ptr; ++i)
    {
      char v23 = 0;
      size_t result = fwrite(&v23, 1uLL, 1uLL, __stream);
    }
  }
  unsigned int v10 = *v5;
  unsigned int v11 = *v4;
  if (*v5 >= 4)
  {
    int v12 = 0;
    int v13 = 4;
    int v14 = 3;
    int v15 = 2;
    int v16 = 1;
    unsigned int v17 = v11;
    do
    {
      if (v17)
      {
        unsigned int v18 = 0;
        unsigned int v11 = v17;
        do
        {
          fwrite((const void *)(a1[16] + 2 * (v18 + v12 * v11)), 2uLL, 1uLL, __stream);
          fwrite((const void *)(a1[16] + 2 * (v18 + v16 * *((_DWORD *)a1 + 34))), 2uLL, 1uLL, __stream);
          fwrite((const void *)(a1[16] + 2 * (v18 + v15 * *((_DWORD *)a1 + 34))), 2uLL, 1uLL, __stream);
          size_t result = fwrite((const void *)(a1[16] + 2 * (v18 + v14 * *((_DWORD *)a1 + 34))), 2uLL, 1uLL, __stream);
          ++v18;
          unsigned int v11 = *((_DWORD *)a1 + 34);
        }
        while (v18 < v11);
        unsigned int v10 = *v5;
        unsigned int v17 = *((_DWORD *)a1 + 34);
      }
      unsigned int v19 = v13 | 3;
      v13 += 4;
      v14 += 4;
      v15 += 4;
      v16 += 4;
      v12 += 4;
    }
    while (v19 < v10);
  }
  if (v11)
  {
    int v20 = 0;
    while (1)
    {
      unsigned int v21 = *v5;
      int v22 = *v5 & 3;
      if (v22 == 1) {
        goto LABEL_20;
      }
      if (v22 == 2) {
        goto LABEL_19;
      }
      if (v22 == 3) {
        break;
      }
LABEL_21:
      if (++v20 >= v11) {
        return result;
      }
    }
    fwrite((const void *)(a1[16] + 2 * (v20 + (v21 - 3) * v11)), 2uLL, 1uLL, __stream);
    unsigned int v11 = *((_DWORD *)a1 + 34);
    unsigned int v21 = *((_DWORD *)a1 + 35);
LABEL_19:
    fwrite((const void *)(a1[16] + 2 * (v20 + (v21 - 2) * v11)), 2uLL, 1uLL, __stream);
    unsigned int v11 = *((_DWORD *)a1 + 34);
    unsigned int v21 = *((_DWORD *)a1 + 35);
LABEL_20:
    size_t result = fwrite((const void *)(a1[16] + 2 * (v20 + (v21 - 1) * v11)), 2uLL, 1uLL, __stream);
    unsigned int v11 = *((_DWORD *)a1 + 34);
    goto LABEL_21;
  }
  return result;
}

uint64_t CHNeuralNetwork::InitializeFromBinaryFile(uint64_t a1, const char *a2)
{
  unint64_t v2 = a2;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2;
  if (a2[23] < 0) {
    uint64_t v4 = *(const char **)a2;
  }
  uint64_t v5 = fopen(v4, "r");
  *(unsigned char *)(a1 + 96) = 0;
  fread(__ptr, 4uLL, 3uLL, v5);
  if (__ptr[0] <= 2u && __ptr[1] < 4u)
  {
    fread((void *)(a1 + 128), 4uLL, 1uLL, v5);
    uint64_t v7 = malloc_type_malloc(4 * *(int *)(a1 + 128), 0x100004052888210uLL);
    *(void *)(a1 + 168) = v7;
    fread(v7, 4uLL, *(int *)(a1 + 128), v5);
    fread((void *)(a1 + 100), 4uLL, 1uLL, v5);
    fread((void *)(a1 + 104), 4uLL, 1uLL, v5);
    fread((void *)(a1 + 112), 4uLL, 1uLL, v5);
    is_mul_ok(*(int *)(a1 + 112), 0x38uLL);
    operator new[]();
  }
  if (v2[23] < 0) {
    unint64_t v2 = *(const char **)v2;
  }
  printf("Unsupported Model Version %s", v2);
  return fclose(v5);
}

void Matrix<short>::readMatrix(uint64_t a1, FILE *__stream)
{
  fread((void *)(a1 + 136), 4uLL, 1uLL, __stream);
  fread((void *)(a1 + 140), 4uLL, 1uLL, __stream);
  int __ptr = 0;
  fread(&__ptr, 4uLL, 1uLL, __stream);
  for (int i = __ptr; i; --i)
  {
    char v5 = 0;
    fread(&v5, 1uLL, 1uLL, __stream);
  }
  operator new[]();
}

void CHNeuralNetwork::CNNUnloadBinaryModel(CHNeuralNetwork *this)
{
  if (*((int *)this + 28) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *((void *)this + 15);
    do
    {
      if (*(int *)(v3 + 56 * v2) >= 1)
      {
        uint64_t v4 = 0;
        do
        {
          uint64_t v5 = *(void *)(v3 + 56 * v2 + 32);
          uint64_t v6 = *(void *)(v5 + 8 * v4);
          if (v6)
          {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
            uint64_t v5 = *(void *)(*((void *)this + 15) + 56 * v2 + 32);
          }
          *(void *)(v5 + 8 * v4++) = 0;
          uint64_t v3 = *((void *)this + 15);
        }
        while (v4 < *(int *)(v3 + 56 * v2));
      }
      uint64_t v7 = *(void *)(v3 + 56 * v2 + 32);
      if (v7)
      {
        MEMORY[0x1E01BF110](v7, 0x20C8093837F09);
        uint64_t v3 = *((void *)this + 15);
      }
      uint64_t v8 = *(void *)(v3 + 56 * v2 + 40);
      if (v8)
      {
        MEMORY[0x1E01BF110](v8, 0x1000C8052888210);
        uint64_t v3 = *((void *)this + 15);
      }
      *(void *)(v3 + 56 * v2++ + 32) = 0;
    }
    while (v2 < *((int *)this + 28));
  }
  if (!*((unsigned char *)this + 96))
  {
    uint64_t v9 = *((void *)this + 18);
    if (v9) {
      MEMORY[0x1E01BF140](v9, 0x1000C40BDFB0063);
    }
    uint64_t v10 = *((void *)this + 20);
    if (v10) {
      MEMORY[0x1E01BF140](v10, 0x1000C40BDFB0063);
    }
  }
  uint64_t v11 = *((void *)this + 17);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 19);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  int v13 = (void *)*((void *)this + 21);
  free(v13);
}

uint64_t CHNeuralNetwork::FeedForward@<X0>(uint64_t this@<X0>, int a2@<W2>, int a3@<W3>, void *a4@<X8>)
{
  STACK[0x7F8] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(this + 100) <= a2 && *(_DWORD *)(this + 104) <= a3) {
    operator new[]();
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return this;
}

void sub_1DD7E988C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 640) = *(void *)(v1 + 232);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 640));
  _Unwind_Resume(a1);
}

void *Matrix<int>::~Matrix(void *a1)
{
  *a1 = &unk_1F38ECF30;
  uint64_t v2 = a1[16];
  if (v2)
  {
    MEMORY[0x1E01BF110](v2, 0x1000C8052888210);
    a1[16] = 0;
  }
  return a1;
}

void *Matrix<short>::~Matrix(void *a1)
{
  *a1 = &unk_1F38ECF88;
  uint64_t v2 = a1[16];
  if (v2)
  {
    MEMORY[0x1E01BF110](v2, 0x1000C80BDFB0063);
    a1[16] = 0;
  }
  return a1;
}

void Matrix<int>::Initialize(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 128);
  if (v6) {
    MEMORY[0x1E01BF110](v6, 0x1000C8052888210);
  }
  *(_DWORD *)(a1 + 136) = a3;
  *(_DWORD *)(a1 + 140) = a2;
  operator new[]();
}

void Matrix<short>::Initialize(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 128);
  if (v6) {
    MEMORY[0x1E01BF110](v6, 0x1000C80BDFB0063);
  }
  *(_DWORD *)(a1 + 136) = a3;
  *(_DWORD *)(a1 + 140) = a2;
  operator new[]();
}

void Matrix<int>::MaxPool(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  switch(a5)
  {
    case 0:
      unsigned int v5 = *(_DWORD *)(a2 + 136);
      unsigned int v6 = *(_DWORD *)(a2 + 140);
      break;
    case 1:
      unsigned int v6 = *(_DWORD *)(a2 + 140);
      unsigned int v5 = *(_DWORD *)(a2 + 136) - 1;
      break;
    case 2:
      unsigned int v5 = *(_DWORD *)(a2 + 136);
      unsigned int v6 = *(_DWORD *)(a2 + 140) - 1;
      break;
    case 3:
      unsigned int v5 = *(_DWORD *)(a2 + 136) - 1;
      unsigned int v6 = *(_DWORD *)(a2 + 140) - 1;
      break;
    default:
      printf("value of fragment: %d unknown", a5);
      exit(0);
  }
  *(void *)a1 = &unk_1F38ECF30;
  *(_DWORD *)(a1 + 136) = v5 / a3;
  *(_DWORD *)(a1 + 140) = v6 / a4;
  operator new[]();
}

uint64_t *std::__tree<int>::__emplace_unique_key_args<int,int>(uint64_t *result, int a2, int a3)
{
  uint64_t v4 = (uint64_t **)result;
  unsigned int v6 = (uint64_t **)(result + 1);
  unsigned int v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        unsigned int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        unsigned int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void Matrix<short>::~Matrix(void *a1)
{
  *a1 = &unk_1F38ECF88;
  uint64_t v1 = a1[16];
  if (v1) {
    MEMORY[0x1E01BF110](v1, 0x1000C80BDFB0063);
  }
  JUMPOUT(0x1E01BF130);
}

void Matrix<short>::operator*(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 140);
  int v5 = *(_DWORD *)(a2 + 136);
  *(void *)a3 = &unk_1F38ECF88;
  *(_DWORD *)(a3 + 136) = v5;
  *(_DWORD *)(a3 + 140) = v4;
  operator new[]();
}

void Matrix<short>::operator*(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 140);
  *(void *)a2 = &unk_1F38ECF88;
  *(_DWORD *)(a2 + 136) = v4;
  *(_DWORD *)(a2 + 140) = v3;
  operator new[]();
}

void Matrix<short>::operator+(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 140);
  *(void *)a2 = &unk_1F38ECF88;
  *(_DWORD *)(a2 + 136) = v4;
  *(_DWORD *)(a2 + 140) = v3;
  operator new[]();
}

uint64_t Matrix<short>::operator+=(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 140);
  if (v2)
  {
    unsigned int v3 = 0;
    uint64_t v4 = *(unsigned int *)(result + 136);
    uint64_t v5 = *(void *)(a2 + 128);
    int v6 = *(_DWORD *)(a2 + 136);
    do
    {
      if (v4)
      {
        uint64_t v7 = *(void *)(result + 128);
        unsigned int v8 = v3;
        unsigned int v9 = v3;
        uint64_t v10 = v4;
        do
        {
          *(_WORD *)(v7 + 2 * v9) += *(_WORD *)(v5 + 2 * v8);
          v9 += v4;
          v8 += v6;
          --v10;
        }
        while (v10);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void Matrix<short>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4) {
    MEMORY[0x1E01BF110](v4, 0x1000C80BDFB0063);
  }
  int v5 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = v5;
  operator new[]();
}

uint64_t Matrix<short>::operator=(uint64_t a1, const void *a2)
{
  return a1;
}

BOOL Matrix<short>::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 136);
  if (v2 == *(_DWORD *)(a2 + 136) && (int v3 = *(_DWORD *)(a1 + 140), v3 == *(_DWORD *)(a2 + 140))) {
    return memcmp(*(const void **)(a1 + 128), *(const void **)(a2 + 128), 2 * (v3 * v2)) == 0;
  }
  else {
    return 0;
  }
}

void Matrix<int>::~Matrix(void *a1)
{
  *a1 = &unk_1F38ECF30;
  uint64_t v1 = a1[16];
  if (v1) {
    MEMORY[0x1E01BF110](v1, 0x1000C8052888210);
  }
  JUMPOUT(0x1E01BF130);
}

void Matrix<int>::operator*(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 140);
  int v5 = *(_DWORD *)(a2 + 136);
  *(void *)a3 = &unk_1F38ECF30;
  *(_DWORD *)(a3 + 136) = v5;
  *(_DWORD *)(a3 + 140) = v4;
  operator new[]();
}

void Matrix<int>::operator*(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 140);
  *(void *)a2 = &unk_1F38ECF30;
  *(_DWORD *)(a2 + 136) = v4;
  *(_DWORD *)(a2 + 140) = v3;
  operator new[]();
}

void Matrix<int>::operator+(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 140);
  *(void *)a2 = &unk_1F38ECF30;
  *(_DWORD *)(a2 + 136) = v4;
  *(_DWORD *)(a2 + 140) = v3;
  operator new[]();
}

uint64_t Matrix<int>::operator+=(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 140);
  if (v2)
  {
    unsigned int v3 = 0;
    uint64_t v4 = *(void *)(a2 + 128);
    unsigned int v5 = *(_DWORD *)(result + 136);
    do
    {
      if (v5)
      {
        unsigned int v6 = 0;
        uint64_t v7 = *(void *)(result + 128);
        do
        {
          *(_DWORD *)(v7 + 4 * (v3 + v6 * v5)) += *(_DWORD *)(v4 + 4 * (v3 + *(_DWORD *)(a2 + 136) * v6));
          ++v6;
          unsigned int v5 = *(_DWORD *)(result + 136);
        }
        while (v6 < v5);
        unsigned int v2 = *(_DWORD *)(result + 140);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void Matrix<int>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4) {
    MEMORY[0x1E01BF110](v4, 0x1000C8052888210);
  }
  int v5 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = v5;
  operator new[]();
}

uint64_t Matrix<int>::operator=(uint64_t a1, const void *a2)
{
  return a1;
}

BOOL Matrix<int>::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 136);
  if (v2 == *(_DWORD *)(a2 + 136) && (int v3 = *(_DWORD *)(a1 + 140), v3 == *(_DWORD *)(a2 + 140))) {
    return memcmp(*(const void **)(a1 + 128), *(const void **)(a2 + 128), 4 * (v3 * v2)) == 0;
  }
  else {
    return 0;
  }
}

void sub_1DD7EA804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EA840()
{
}

void sub_1DD7EA848()
{
}

void sub_1DD7EAB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v14 == 2)
  {
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::ContentTypeRefinementContext::shiftOneField(_anonymous_namespace_::ContentTypeRefinementContext *this)
{
  id v6 = *(id *)(*(void *)(*((void *)this + 1) + 8) + 16);
  objc_msgSend(*(id *)this, "addObject:");
  uint64_t v2 = *((void *)this + 1);
  uint64_t v4 = *(uint64_t **)(v2 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v5 = *v4;
  *(void *)(v5 + 8) = v4[1];
  *(void *)v4[1] = v5;
  *(void *)(v2 + 16) = v3 - 1;

  operator delete(v4);
}

void sub_1DD7EACAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::ContentTypeRefinementContext::shiftAndGroupFields(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (![v3 count])
  {

LABEL_26:
    int v20 = 0;
    goto LABEL_27;
  }
  uint64_t v4 = [v3 objectAtIndexedSubscript:0];
  uint64_t v5 = [v4 boundingQuad];

  for (unint64_t i = 0; i < [v3 count]; ++i)
  {
    uint64_t v7 = [v3 objectAtIndexedSubscript:i];
    if ([v7 fieldSource] != 1)
    {
      int v20 = 0;
      goto LABEL_16;
    }
    unsigned int v8 = [v3 objectAtIndexedSubscript:i];
    uint64_t v9 = [v8 fieldType];

    if (v9 != 1)
    {
      int v20 = 0;
      goto LABEL_17;
    }
    if (i)
    {
      uint64_t v10 = [v3 objectAtIndexedSubscript:i];
      uint64_t v11 = [v10 boundingQuad];
      uint64_t v12 = [v3 objectAtIndexedSubscript:i];
      int v13 = [v12 boundingQuad];
      [v13 baselineAngle];
      *(float *)&double v14 = v14;
      uint64_t v15 = [v5 unionWithNormalizedQuad:v11 baselineAngle:v14];

      uint64_t v5 = (void *)v15;
    }
  }
  int v16 = [v3 objectAtIndexedSubscript:0];
  uint64_t v17 = [v16 fieldSource];

  unsigned int v18 = [v3 objectAtIndexedSubscript:0];
  if ([v18 fieldSource] == 1)
  {
    unsigned int v19 = [v3 objectAtIndexedSubscript:0];
    uint64_t v7 = [v19 labelRegion];
  }
  else
  {
    uint64_t v7 = 0;
  }

  int v20 = [[CRFormFieldOutputRegion alloc] initWithQuad:v5 labelRegion:v7 subFields:v3 source:v17];
LABEL_16:

LABEL_17:
  if (!v20) {
    goto LABEL_26;
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v21 = v3;
  uint64_t v22 = [v21 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v26;
    do
    {
      uint64_t v24 = 0;
      do
      {
        if (*(void *)v26 != v23) {
          objc_enumerationMutation(v21);
        }
        uint64_t v29 = *(void *)(*((void *)&v25 + 1) + 8 * v24);
        std::list<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::remove(*(uint64_t **)(a1 + 8), &v29);
        ++v24;
      }
      while (v22 != v24);
      uint64_t v22 = [v21 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v22);
  }

  objc_msgSend(*(id *)a1, "addObject:", v20, (void)v25);
LABEL_27:
}

void sub_1DD7EAFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::ContentTypeRefinementContext::shiftFields(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v7 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v11 = *(void *)(*((void *)&v7 + 1) + 8 * v6);
        std::list<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::remove(*(uint64_t **)(a1 + 8), &v11);
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v7 objects:v12 count:16];
    }
    while (v4);
  }

  objc_msgSend(*(id *)a1, "addObjectsFromArray:", v3, (void)v7);
}

void sub_1DD7EB188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EB448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EB9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EBC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EBDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EC2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EC670(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  std::__list_imp<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DD7EC7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void std::list<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::remove(uint64_t *a1, void *a2)
{
  v12[0] = (uint64_t)v12;
  v12[1] = (uint64_t)v12;
  uint64_t v13 = 0;
  uint64_t v2 = (uint64_t *)a1[1];
  if (v2 != a1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (uint64_t *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v4 == a1)
        {
          BOOL v6 = 1;
LABEL_9:
          uint64_t v4 = a1;
        }
        else
        {
          while (1)
          {
            BOOL v6 = v4[2] == v5;
            if (v4[2] != v5) {
              break;
            }
            uint64_t v4 = (uint64_t *)v4[1];
            if (v4 == a1) {
              goto LABEL_9;
            }
          }
        }
        if (v2 != v4)
        {
          uint64_t v7 = *v4;
          if (v12 != a1)
          {
            uint64_t v8 = 1;
            if ((uint64_t *)v7 != v2)
            {
              long long v9 = v2;
              do
              {
                long long v9 = (uint64_t *)v9[1];
                ++v8;
              }
              while (v9 != (uint64_t *)v7);
            }
            a1[2] -= v8;
            v3 += v8;
            uint64_t v13 = v3;
          }
          uint64_t v10 = *v2;
          *(void *)(v10 + 8) = *(void *)(v7 + 8);
          **(void **)(v7 + 8) = v10;
          uint64_t v11 = v12[0];
          *(void *)(v12[0] + 8) = v2;
          *uint64_t v2 = v11;
          v12[0] = v7;
          *(void *)(v7 + 8) = v12;
        }
        if (!v6) {
          uint64_t v4 = (uint64_t *)v4[1];
        }
      }
      uint64_t v2 = v4;
    }
    while (v4 != a1);
  }
  std::__list_imp<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::clear(v12);
}

void std::__list_imp<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];

        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_1DD7ED858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7ED964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EDC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EDE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EDF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EE030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EE1A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EE5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EECA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EF254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EF394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EF4F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EF674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7EFE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id a45)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a40, 8);

  _Block_object_dispose((const void *)(v47 - 232), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void sub_1DD7F01BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7F0608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7F0748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD7F09A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD7F0CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD7F17C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NetworkEdge::serialize(NetworkEdge *this@<X0>, const CRCHNetwork *a2@<X1>, std::string *a3@<X8>)
{
  ul2s(*(void *)this, (uint64_t)&v46);
  BOOL v6 = std::string::insert(&v46, 0, "Edge (startNode,endNode)= (");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v47, ", ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((void *)this + 1), (uint64_t)v44);
  if ((v45 & 0x80u) == 0) {
    uint64_t v10 = v44;
  }
  else {
    uint64_t v10 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    std::string::size_type v11 = v45;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v44[1];
  }
  uint64_t v12 = std::string::append(&v48, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  double v14 = std::string::append(&v49, ") inSym=");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((void *)this + 2), (uint64_t)v42);
  if ((v43 & 0x80u) == 0) {
    int v16 = v42;
  }
  else {
    int v16 = (void **)v42[0];
  }
  if ((v43 & 0x80u) == 0) {
    std::string::size_type v17 = v43;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v42[1];
  }
  unsigned int v18 = std::string::append(&v50, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = std::string::append(&v51, " outSym= ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((void *)this + 3), (uint64_t)v40);
  if ((v41 & 0x80u) == 0) {
    uint64_t v22 = v40;
  }
  else {
    uint64_t v22 = (void **)v40[0];
  }
  if ((v41 & 0x80u) == 0) {
    std::string::size_type v23 = v41;
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v40[1];
  }
  uint64_t v24 = std::string::append(&v52, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  long long v26 = std::string::append(&v53, " ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  CRCHNetwork::getSymbol(&v39, (uint64_t)a2, *((void *)this + 3));
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v28 = &v39;
  }
  else {
    long long v28 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  CGRect v30 = std::string::append(&v54, (const std::string::value_type *)v28, size);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  uint64_t v32 = std::string::append(&v55, " weight = ");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  d2s(*((double *)this + 4), __p);
  if ((v38 & 0x80u) == 0) {
    unint64_t v34 = __p;
  }
  else {
    unint64_t v34 = (void **)__p[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v35 = v38;
  }
  else {
    std::string::size_type v35 = (std::string::size_type)__p[1];
  }
  int v36 = std::string::append(&v56, (const std::string::value_type *)v34, v35);
  *a3 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if ((char)v38 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if ((char)v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if ((char)v43 < 0) {
    operator delete(v42[0]);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
}

void sub_1DD7F1C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v71 - 57) < 0) {
    operator delete(*(void **)(v71 - 80));
  }
  if (*(char *)(v71 - 89) < 0) {
    operator delete(*(void **)(v71 - 112));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v71 - 121) < 0) {
    operator delete(*(void **)(v71 - 144));
  }
  if (*(char *)(v71 - 153) < 0) {
    operator delete(*(void **)(v71 - 176));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v71 - 185) < 0) {
    operator delete(*(void **)(v71 - 208));
  }
  if (*(char *)(v71 - 217) < 0) {
    operator delete(*(void **)(v71 - 240));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_1DD7F1D64()
{
}

void sub_1DD7F1D6C()
{
}

void sub_1DD7F1D74()
{
}

void sub_1DD7F1D7C()
{
}

void sub_1DD7F1D84()
{
}

void sub_1DD7F1D8C()
{
}

void sub_1DD7F1D94()
{
}

void CRCHNetwork::getSymbol(std::string *this, uint64_t a2, unint64_t a3)
{
  if (*(unsigned char *)(a2 + 192))
  {
    if (a3)
    {
      ul2sh(a3, (uint64_t)this);
      return;
    }
    uint64_t v3 = *(void *)(a2 + 144);
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 144) + 24 * a3;
  }
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)v3;
    this->__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
}

uint64_t CRCHNetwork::readOneEdge(uint64_t **this, char *a2, NetworkEdge *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  uint64_t v4 = MEMORY[0x1E4FBA488] + 104;
  v44[0] = MEMORY[0x1E4FBA488] + 104;
  uint64_t v5 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v36 = MEMORY[0x1E4FBA488] + 64;
  BOOL v6 = (uint64_t *)MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  v35[0] = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)v35 + *(void *)(v35[0] - 24)) = v7;
  v35[1] = 0;
  uint64_t v8 = (std::ios_base *)((char *)v35 + *(void *)(v35[0] - 24));
  std::ios_base::init(v8, v37);
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v6[5];
  uint64_t v36 = v6[4];
  *(void *)((char *)&v37[-1] + *(void *)(v36 - 24)) = v10;
  v35[0] = v6[1];
  *(uint64_t *)((char *)v35 + *(void *)(v35[0] - 24)) = v6[6];
  v44[0] = v4;
  v35[0] = v9;
  uint64_t v36 = v5;
  std::streambuf::basic_streambuf();
  uint64_t v11 = MEMORY[0x1E4FBA470] + 16;
  v37[0] = MEMORY[0x1E4FBA470] + 16;
  long long __p = 0u;
  long long v42 = 0u;
  int v43 = 24;
  std::string::operator=((std::string *)&__p, &__str);
  *((void *)&v42 + 1) = 0;
  if ((SBYTE7(v42) & 0x80u) == 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  if ((SBYTE7(v42) & 0x80u) == 0) {
    unint64_t v13 = BYTE7(v42);
  }
  else {
    unint64_t v13 = *((void *)&__p + 1);
  }
  if ((v43 & 8) != 0)
  {
    v38[0] = p_p;
    v38[1] = p_p;
    *((void *)&v42 + 1) = &p_p[v13];
    v38[2] = &p_p[v13];
  }
  if ((v43 & 0x10) != 0)
  {
    *((void *)&v42 + 1) = &p_p[v13];
    if ((SBYTE7(v42) & 0x80u) == 0) {
      std::string::size_type v14 = 22;
    }
    else {
      std::string::size_type v14 = (v42 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::string::resize((std::string *)&__p, v14, 0);
    uint64_t v15 = BYTE7(v42);
    if (SBYTE7(v42) < 0) {
      uint64_t v15 = *((void *)&__p + 1);
    }
    v38[3] = p_p;
    std::string v39 = p_p;
    uint64_t v40 = &p_p[v15];
    if ((v43 & 3) != 0)
    {
      if (v13 >> 31)
      {
        uint64_t v16 = ((v13 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v17 = 0x7FFFFFFF * ((v16 + ((v13 - 0x80000000 - v16) >> 1)) >> 30);
        p_p += v17 + 0x7FFFFFFF;
        unint64_t v13 = v13 - v17 - 0x7FFFFFFF;
        std::string v39 = p_p;
      }
      if (v13) {
        std::string v39 = &p_p[v13];
      }
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  MEMORY[0x1E01BEFB0](&__str, v35, 0);
  if (!__str.__r_.__value_.__s.__data_[0])
  {
    char v20 = 0;
    goto LABEL_29;
  }
  unsigned int v18 = *(void **)((char *)v38 + *(void *)(v35[0] - 24));
  long long v19 = (char *)v18[3];
  if (v19 == (char *)v18[4])
  {
    int v21 = (*(uint64_t (**)(void *))(*v18 + 80))(v18);
    char v20 = v21;
    if (v21 == -1)
    {
      char v20 = 0;
      int v22 = 6;
      goto LABEL_28;
    }
  }
  else
  {
    void v18[3] = v19 + 1;
    char v20 = *v19;
  }
  int v22 = 0;
LABEL_28:
  std::ios_base::clear((std::ios_base *)((char *)v35 + *(void *)(v35[0] - 24)), *(_DWORD *)((char *)&v37[1] + *(void *)(v35[0] - 24)) | v22);
LABEL_29:
  if ((*((unsigned char *)&v37[1] + *(void *)(v35[0] - 24)) & 5) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid empty FST line entry");
    __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  if (v20 == 70)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1E01BEFD0](v35, &__str);
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(this + 8, (unint64_t *)&__str, (uint64_t *)&__str);
    goto LABEL_34;
  }
  if (v20 == 73)
  {
    MEMORY[0x1E01BEFD0](v35, this + 4);
LABEL_34:
    uint64_t v23 = 0;
    goto LABEL_54;
  }
  double v33 = 0.0;
  MEMORY[0x1E01BEFD0](v35, a3);
  MEMORY[0x1E01BEFD0](v35, (char *)a3 + 8);
  memset(&__str, 0, sizeof(__str));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, (uint64_t)&__str);
  std::ios_base::clear((std::ios_base *)((char *)v35 + *(void *)(v35[0] - 24)), 0);
  *((void *)a3 + 2) = (int)sh2i((uint64_t)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    *__str.__r_.__value_.__l.__data_ = 0;
    __str.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    __str.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  }
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, (uint64_t)&__str);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (!*((unsigned char *)this + 192))
  {
    if (size)
    {
      uint64_t v25 = CRCHSymbolMap::store(this + 17, (long long *)&__str);
      goto LABEL_46;
    }
LABEL_45:
    uint64_t v25 = 0;
    goto LABEL_46;
  }
  if (!size) {
    goto LABEL_45;
  }
  uint64_t v25 = (int)sh2i((uint64_t)&__str);
LABEL_46:
  *((void *)a3 + 3) = v25;
  MEMORY[0x1E01BEFC0](v35, &v33);
  double v26 = v33;
  if ((*(_DWORD *)((unsigned char *)&v37[1] + *(void *)(v35[0] - 24)) & 5) != 0) {
    double v26 = 0.0;
  }
  *((double *)a3 + 4) = v26;
  unint64_t v32 = 0;
  MEMORY[0x1E01BEFD0](v35, &v32);
  if ((*(_DWORD *)((unsigned char *)&v37[1] + *(void *)(v35[0] - 24)) & 5) != 0) {
    unint64_t v27 = 0;
  }
  else {
    unint64_t v27 = (unint64_t)(double)v32;
  }
  *((void *)a3 + 5) = v27;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v23 = 1;
LABEL_54:
  v35[0] = *v6;
  uint64_t v28 = v6[9];
  *(uint64_t *)((char *)v35 + *(void *)(v35[0] - 24)) = v6[8];
  uint64_t v36 = v28;
  v37[0] = v11;
  if (SBYTE7(v42) < 0) {
    operator delete((void *)__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E01BF0C0](v44);
  return v23;
}

void sub_1DD7F25A4()
{
}

void sub_1DD7F2628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void CRCHNetwork::readDataFile(CRCHNetwork *this)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const char **)((char *)this + 8);
  int v3 = *((char *)this + 31);
  uint64_t v4 = (char *)this + 8;
  if (v3 < 0) {
    uint64_t v4 = *v2;
  }
  uint64_t v5 = fopen(v4, "rt");
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::string v55 = std::string::append(&v67, ")");
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    std::string::size_type v63 = v55->__r_.__value_.__r.__words[2];
    long long v62 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1E01BEF00](exception, &v62);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v6 = v5;
  fgets(v68, 2048, v5);
  long long __p = 0;
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  while (!feof(v6))
  {
    v68[0] = 0;
    if (!fgets(v68, 2048, v6)) {
      break;
    }
    if (CRCHNetwork::readOneEdge((uint64_t **)this, v68, (NetworkEdge *)&v62)) {
      CRCHNetwork::storeEntry(this, (const NetworkEdge *)&v62);
    }
  }
  uint64_t v7 = (NetworkEdge *)*((void *)this + 11);
  uint64_t v8 = (const NetworkEdge *)*((void *)this + 12);
  unint64_t v9 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 4));
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)compareEdge;
  if (v8 == v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*,false>(v7, v8, (uint64_t (**)(NetworkEdge *, NetworkEdge *))&v67, v10, 1);
  uint64_t v11 = *((void *)this + 11);
  uint64_t v12 = *((void *)this + 12);
  while (v11 != v12)
  {
    CRCHNetwork::storeIncomingEdgeEntry(this, v11);
    v11 += 80;
  }
  uint64_t v13 = *((void *)this + 14);
  std::string::size_type v14 = (uint64_t *)*((void *)this + 15);
  unint64_t v15 = 126 - 2 * __clz(((uint64_t)v14 - v13) >> 3);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)compareIncomingEdge;
  if (v14 == (uint64_t *)v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**,false>(v13, v14, &v67, v16, 1);
  v67.__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = (unint64_t)&v67.__r_.__value_.__l.__size_;
  unint64_t v17 = (unint64_t *)*((void *)this + 11);
  unsigned int v18 = (unint64_t *)*((void *)this + 12);
  if (v17 == v18)
  {
    unint64_t v20 = 0;
  }
  else
  {
    do
    {
      std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v67, v17, (uint64_t *)v17);
      long long v19 = v17 + 1;
      std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v67, v19, (uint64_t *)v19);
      unint64_t v17 = v19 + 9;
    }
    while (v17 != v18);
    unint64_t v20 = v67.__r_.__value_.__r.__words[2];
  }
  std::vector<CRCHNetworkNode>::resize((uint64_t)this + 40, v20);
  int v21 = (uint64_t *)*((void *)this + 11);
  int v22 = (uint64_t *)*((void *)this + 12);
  uint64_t v23 = *((void *)this + 5);
  if (v21 != v22)
  {
    uint64_t v24 = (uint64_t *)*((void *)this + 11);
    do
    {
      ++*(void *)(v23 + 56 * *v24);
      ++*(void *)(v23 + 56 * v24[1] + 8);
      v24 += 10;
    }
    while (v24 != v22);
  }
  uint64_t v25 = (CRCHNetwork *)*((void *)this + 8);
  if (v25 != (CRCHNetwork *)((char *)this + 72))
  {
    do
    {
      *(unsigned char *)(v23 + 56 * *((void *)v25 + 4) + 48) = 1;
      double v26 = (CRCHNetwork *)*((void *)v25 + 1);
      if (v26)
      {
        do
        {
          unint64_t v27 = v26;
          double v26 = *(CRCHNetwork **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          unint64_t v27 = (CRCHNetwork *)*((void *)v25 + 2);
          BOOL v28 = *(void *)v27 == (void)v25;
          uint64_t v25 = v27;
        }
        while (!v28);
      }
      uint64_t v25 = v27;
    }
    while (v27 != (CRCHNetwork *)((char *)this + 72));
  }
  uint64_t v29 = *v21;
  *(void *)(v23 + 56 * *v21 + 16) = 0;
  uint64_t v30 = *((void *)this + 6) - v23;
  if (v30)
  {
    unint64_t v31 = 0;
    unint64_t v32 = v30 / 56;
    if (v32 <= 1) {
      unint64_t v32 = 1;
    }
    uint64_t v33 = v23;
    do
    {
      *(void *)(v33 + 16) = v29;
      if (!*(void *)v33 && !*(unsigned char *)(v33 + 48))
      {
        unint64_t v38 = v31;
        std::string v39 = __cxa_allocate_exception(0x10uLL);
        ul2s(v38, (uint64_t)&v57);
        uint64_t v40 = std::string::insert(&v57, 0, "Node[");
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        long long v42 = std::string::append(&v58, "]");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        uint64_t v44 = std::string::append(&v59, "has out degree zero but is not marked as a final node");
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        std::string::size_type v61 = v44->__r_.__value_.__r.__words[2];
        long long v60 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1E01BEED0](v39, &v60);
        __cxa_throw(v39, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
      }
      v29 += *(void *)v33;
      ++v31;
      v33 += 56;
    }
    while (v32 != v31);
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    *(void *)(v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    uint64_t v36 = (void *)(v23 + 24);
    do
    {
      *uint64_t v36 = v35;
      uint64_t v37 = *(v36 - 2);
      if (!v37 && v34 != *((void *)this + 4))
      {
        unint64_t v46 = v34;
        std::string v47 = __cxa_allocate_exception(0x10uLL);
        ul2s(v46, (uint64_t)&v57);
        std::string v48 = std::string::insert(&v57, 0, "Node[");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::string v50 = std::string::append(&v58, "]");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        std::string v52 = std::string::append(&v59, "has in degree zero but is not marked as an initial node");
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        std::string::size_type v61 = v52->__r_.__value_.__r.__words[2];
        long long v60 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1E01BEED0](v47, &v60);
        __cxa_throw(v47, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
      }
      v36 += 7;
      v35 += v37;
      ++v34;
    }
    while (v32 != v34);
  }
  else
  {
    *(void *)(v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  fclose(v6);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v67, (void *)v67.__r_.__value_.__l.__size_);
  if (__p)
  {
    unint64_t v65 = __p;
    operator delete(__p);
  }
}

void sub_1DD7F2C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a55 < 0)
  {
    operator delete(a50);
    if ((v56 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v56)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v55);
  goto LABEL_8;
}

unint64_t CRCHNetwork::storeEntry(CRCHNetwork *this, const NetworkEdge *a2)
{
  unint64_t v3 = *((void *)this + 12);
  if (v3 >= *((void *)this + 13))
  {
    uint64_t v4 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)this + 11, a2);
  }
  else
  {
    NetworkEdge::NetworkEdge(*((NetworkEdge **)this + 12), a2);
    uint64_t v4 = v3 + 80;
    *((void *)this + 12) = v3 + 80;
  }
  *((void *)this + 12) = v4;
  return 0xCCCCCCCCCCCCCCCDLL * ((v4 - *((void *)this + 11)) >> 4) - 1;
}

void sub_1DD7F2E0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 96) = v2;
  _Unwind_Resume(a1);
}

BOOL compareEdge(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a1 != *a2) {
    return 0;
  }
  unint64_t v3 = a1[2];
  unint64_t v4 = a2[2];
  if (v3 < v4) {
    return 1;
  }
  return v3 == v4 && a1[1] < a2[1];
}

void CRCHNetwork::storeIncomingEdgeEntry(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[16];
  uint64_t v4 = (uint64_t)(a1 + 16);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    unint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = a2;
    uint64_t v8 = v16 + 8;
    long long v19 = (char *)a1[14];
    unsigned int v18 = (char *)a1[15];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*v9;
    }
    a1[14] = v16;
    a1[15] = v8;
    a1[16] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  a1[15] = v8;
}

BOOL compareIncomingEdge(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) < *(void *)(a2 + 8);
}

void std::vector<CRCHNetworkNode>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<CRCHNetworkNode>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 56 * a2;
  }
}

uint64_t CRCHNetwork::prepareNetwork(CRCHNetwork *this)
{
  unint64_t v2 = (NetworkEdge *)*((void *)this + 11);
  BOOL v3 = (const NetworkEdge *)*((void *)this + 12);
  unint64_t v4 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v3 - v2) >> 4));
  *(void *)&long long v43 = compareEdge;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*,false>(v2, v3, (uint64_t (**)(NetworkEdge *, NetworkEdge *))&v43, v5, 1);
  unint64_t v6 = (uint64_t *)*((void *)this + 14);
  *((void *)this + 15) = v6;
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    uint64_t v10 = (uint64_t)v6;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      CRCHNetwork::storeIncomingEdgeEntry(this, v7 + v8);
      ++v9;
      uint64_t v7 = *((void *)this + 11);
      v8 += 80;
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 12) - v7) >> 4));
    uint64_t v10 = *((void *)this + 14);
    unint64_t v6 = (uint64_t *)*((void *)this + 15);
  }
  unint64_t v11 = 126 - 2 * __clz(((uint64_t)v6 - v10) >> 3);
  *(void *)&long long v43 = compareIncomingEdge;
  if (v6 == (uint64_t *)v10) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**,false>(v10, v6, (uint64_t (**)(void))&v43, v12, 1);
  uint64_t v13 = *((void *)this + 14);
  unint64_t v14 = (uint64_t *)*((void *)this + 15);
  unint64_t v15 = 126 - 2 * __clz(((uint64_t)v14 - v13) >> 3);
  *(void *)&long long v43 = compareIncomingEdge;
  if (v14 == (uint64_t *)v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**,false>(v13, v14, (uint64_t (**)(void))&v43, v16, 1);
  unsigned int v18 = (char *)*((void *)this + 5);
  long long v19 = (char *)*((void *)this + 6);
  if (v18 != v19)
  {
    do
    {
      *(void *)unsigned int v18 = 0;
      *((void *)v18 + 1) = 0;
      v18 += 56;
    }
    while (v18 != v19);
    unsigned int v18 = (char *)*((void *)this + 5);
  }
  int v21 = (uint64_t *)*((void *)this + 11);
  uint64_t v20 = (uint64_t *)*((void *)this + 12);
  if (v21 == v20)
  {
    uint64_t v23 = (char *)*((void *)this + 6);
  }
  else
  {
    int v22 = (uint64_t *)*((void *)this + 11);
    do
    {
      ++*(void *)&v18[56 * *v22];
      ++*(void *)&v18[56 * v22[1] + 8];
      v22 += 10;
    }
    while (v22 != v20);
    uint64_t v23 = (char *)*((void *)this + 6);
    uint64_t v24 = *v21;
    *(void *)&v18[56 * v24 + 16] = 0;
    if (v18 != v23)
    {
      uint64_t v25 = v18;
      do
      {
        *((void *)v25 + 2) = v24;
        uint64_t v26 = *(void *)v25;
        v25 += 56;
        v24 += v26;
      }
      while (v25 != v23);
    }
    *((void *)v18 + 3) = 0;
  }
  int64_t v27 = v23 - v18;
  if (v23 != v18)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    unint64_t v30 = v27 / 56;
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    unint64_t v31 = v18 + 24;
    do
    {
      *unint64_t v31 = v29;
      uint64_t v32 = *(v31 - 2);
      if (!v32 && v28 != *((void *)this + 4))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        ul2s(v28, (uint64_t)&v40);
        unint64_t v34 = std::string::insert(&v40, 0, "Node[");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v41.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        uint64_t v36 = std::string::append(&v41, "]");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        unint64_t v38 = std::string::append(&v42, "has in degree zero but is not marked as an initial node");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        std::string::size_type v44 = v38->__r_.__value_.__r.__words[2];
        long long v43 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1E01BEED0](exception, &v43);
        __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
      }
      v31 += 7;
      v29 += v32;
      ++v28;
    }
    while (v30 != v28);
  }
  return result;
}

void sub_1DD7F32A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

void CRCHNetwork::trimDeadEdges(CRCHNetwork *this, CRCHNetwork *a2)
{
  unint64_t v4 = (void *)((char *)a2 + 72);
  std::__tree<CRCHuint128>::destroy((uint64_t)a2 + 64, *((void **)a2 + 9));
  *(v4 - 1) = v4;
  *unint64_t v4 = 0;
  v4[1] = 0;
  CRCHSymbolMap::operator=((uint64_t)(v4 + 8), (uint64_t)this + 136);
  uint64_t v5 = (uint64_t)(v4 - 4);
  std::vector<CRCHNetworkNode>::resize(v5, 0);
  int v56 = 0;
  std::string v57 = 0;
  unint64_t v58 = 0;
  std::string v54 = 0;
  unint64_t v55 = 0;
  long long v53 = (uint64_t *)&v54;
  long long v52 = 0u;
  memset(v51, 0, sizeof(v51));
  std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v49, (uint64_t)this + 64);
  unint64_t v6 = v49;
  if (v49 != v50)
  {
    do
    {
      std::deque<unsigned long>::push_back(v51, v6 + 4);
      uint64_t v7 = v6[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (void **)v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v6[2];
          BOOL v9 = *v8 == v6;
          unint64_t v6 = v8;
        }
        while (!v9);
      }
      unint64_t v6 = v8;
    }
    while (v8 != v50);
  }
  for (uint64_t i = *((void *)&v52 + 1); *((void *)&v52 + 1); uint64_t i = *((void *)&v52 + 1))
  {
    std::string v47 = 0;
    unint64_t v11 = *(uint64_t **)(*(void *)(*((void *)&v51[0] + 1) + (((unint64_t)v52 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v52 & 0x1FF));
    std::string v47 = v11;
    *(void *)&long long v52 = v52 + 1;
    *((void *)&v52 + 1) = i - 1;
    if ((unint64_t)v52 >= 0x400)
    {
      operator delete(**((void ***)&v51[0] + 1));
      *((void *)&v51[0] + 1) += 8;
      *(void *)&long long v52 = v52 - 512;
      unint64_t v11 = v47;
    }
    uint64_t v12 = v54;
    if (v54)
    {
      uint64_t v13 = &v54;
      do
      {
        unint64_t v14 = v12;
        unint64_t v15 = v13;
        unint64_t v16 = v12[4];
        unint64_t v17 = v12 + 1;
        if (v16 >= (unint64_t)v11)
        {
          unint64_t v17 = v14;
          uint64_t v13 = (void **)v14;
        }
        uint64_t v12 = (void *)*v17;
      }
      while (v12);
      if (v13 != &v54)
      {
        if (v16 < (unint64_t)v11) {
          unint64_t v14 = v15;
        }
        if ((unint64_t)v11 >= v14[4]) {
          continue;
        }
      }
    }
    uint64_t v18 = *((void *)this + 5);
    if (*(void *)(v18 + 56 * (void)v11 + 8))
    {
      unint64_t v19 = 0;
      do
      {
        uint64_t v20 = *(void ***)(*((void *)this + 14) + 8 * (*(void *)(v18 + 56 * (void)v11 + 24) + v19));
        int v21 = *v20;
        long long __p = *v20;
        int v22 = v57;
        if ((unint64_t)v57 >= v58)
        {
          uint64_t v23 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v56, (const NetworkEdge *)v20);
        }
        else
        {
          NetworkEdge::NetworkEdge(v57, (const NetworkEdge *)v20);
          uint64_t v23 = (NetworkEdge *)((char *)v22 + 80);
        }
        std::string v57 = v23;
        uint64_t v24 = v54;
        if (!v54) {
          goto LABEL_34;
        }
        uint64_t v25 = &v54;
        do
        {
          uint64_t v26 = v24;
          int64_t v27 = v25;
          unint64_t v28 = v24[4];
          int v29 = v24 + 1;
          if (v28 >= (unint64_t)v21)
          {
            int v29 = v26;
            uint64_t v25 = (void **)v26;
          }
          uint64_t v24 = (void *)*v29;
        }
        while (v24);
        if (v25 == &v54) {
          goto LABEL_34;
        }
        if (v28 < (unint64_t)v21) {
          uint64_t v26 = v27;
        }
        if ((unint64_t)v21 < v26[4]) {
LABEL_34:
        }
          std::deque<unsigned long>::push_back(v51, &__p);
        ++v19;
        unint64_t v11 = v47;
        uint64_t v18 = *((void *)this + 5);
      }
      while (v19 < *(void *)(v18 + 56 * (void)v47 + 8));
    }
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v53, (unint64_t *)&v47, (uint64_t *)&v47);
  }
  unint64_t v30 = v55;
  std::vector<CRCHNetworkNode>::resize(v5, v55);
  v48[0] = 0;
  v48[1] = 0;
  std::string v47 = (uint64_t *)v48;
  std::vector<unsigned long>::vector(&__p, v30);
  unint64_t v31 = v53;
  uint64_t v32 = __p;
  if (v53 != (uint64_t *)&v54)
  {
    uint64_t v33 = 0;
    do
    {
      v32[v33] = v31[4];
      unint64_t v34 = (uint64_t *)v31[1];
      if (v34)
      {
        do
        {
          long long v35 = v34;
          unint64_t v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          long long v35 = (uint64_t *)v31[2];
          BOOL v9 = *v35 == (void)v31;
          unint64_t v31 = v35;
        }
        while (!v9);
      }
      ++v33;
      unint64_t v31 = v35;
    }
    while (v35 != (uint64_t *)&v54);
  }
  if (v46 != (unsigned char *)v32)
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    do
    {
      std::string v59 = &v32[v36];
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v47, &v32[v36], (uint64_t)&std::piecewise_construct, &v59)[5] = v37++;
      uint64_t v32 = __p;
      ++v36;
    }
    while (v37 < (v46 - (unsigned char *)__p) >> 3);
  }
  unint64_t v38 = (uint64_t *)v56;
  long long v39 = v57;
  if (v56 != v57)
  {
    do
    {
      std::string v59 = v38;
      *unint64_t v38 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v47, (unint64_t *)v38, (uint64_t)&std::piecewise_construct, &v59)[5];
      std::string v40 = v38 + 1;
      std::string v59 = v40;
      uint64_t *v40 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v47, (unint64_t *)v40, (uint64_t)&std::piecewise_construct, &v59)[5];
      unint64_t v38 = v40 + 9;
    }
    while (v38 != (uint64_t *)v39);
  }
  std::string v41 = v49;
  if (v49 != v50)
  {
    do
    {
      std::string v59 = (uint64_t *)(v41 + 4);
      std::string v42 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v47, (unint64_t *)v41 + 4, (uint64_t)&std::piecewise_construct, &v59);
      CRCHNetwork::setFinal((uint64_t **)a2, v42[5]);
      long long v43 = v41[1];
      if (v43)
      {
        do
        {
          std::string::size_type v44 = (void **)v43;
          long long v43 = (void *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          std::string::size_type v44 = (void **)v41[2];
          BOOL v9 = *v44 == v41;
          std::string v41 = v44;
        }
        while (!v9);
      }
      std::string v41 = v44;
    }
    while (v44 != v50);
  }
  CRCHNetwork::insertEdges(a2, &v56);
  if (__p)
  {
    unint64_t v46 = __p;
    operator delete(__p);
  }
  std::__tree<CRCHuint128>::destroy((uint64_t)&v47, v48[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v49, v50[0]);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](v51);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v53, v54);
  *(void *)&v51[0] = &v56;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
}

void sub_1DD7F37E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<CRCHuint128>::destroy((uint64_t)&a13, a14);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a16, a17);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a19);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a25, a26);
  a19 = v26 - 120;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t CRCHSymbolMap::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = (void **)(a1 + 8);
  unint64_t v4 = *(std::string **)(a1 + 8);
  uint64_t v7 = *(long long **)(a2 + 8);
  unint64_t v6 = *(long long **)(a2 + 16);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
  uint64_t v9 = *(void *)(a1 + 24);
  if (0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v4) >> 3) >= v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v4) >> 3) >= v8)
    {
      unint64_t v17 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(*(std::string **)(a2 + 8), *(std::string **)(a2 + 16), v4);
      for (uint64_t i = *(std::string **)(a1 + 16); i != v17; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(i[-1].__r_.__value_.__l.__data_);
        }
      }
      *(void *)(a1 + 16) = v17;
      goto LABEL_21;
    }
    unint64_t v16 = (std::string *)((char *)v7 + 8 * ((uint64_t)(*(void *)(a1 + 16) - (void)v4) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(*(std::string **)(a2 + 8), v16, v4);
    unint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(a1 + 24, (long long *)v16, v6, *(std::string **)(a1 + 16));
  }
  else
  {
    if (v4)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 8));
      operator delete(*v5);
      uint64_t v9 = 0;
      *uint64_t v5 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_50;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v8) {
      uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_50:
    }
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a1 + 24, v12);
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v13;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &v13[v14];
    unint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(a1 + 24, v7, v6, v13);
  }
  *(void *)(a1 + 16) = v15;
LABEL_21:
  unint64_t v19 = *(void **)(a2 + 32);
  uint64_t v20 = (void *)(a2 + 40);
  if (*(void *)(a1 + 48))
  {
    uint64_t v21 = *(void *)(a1 + 40);
    int v22 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = a1 + 40;
    *(void *)(v21 + 16) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    if (v22[1]) {
      uint64_t v23 = (void *)v22[1];
    }
    else {
      uint64_t v23 = v22;
    }
    uint64_t v38 = a1 + 32;
    long long v39 = v23;
    std::string v40 = v23;
    if (!v23
      || (long long v39 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next((uint64_t)v23),
          v19 == v20))
    {
      int64_t v27 = v19;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v23 + 4), (const std::string *)(v19 + 4));
        v23[7] = v19[7];
        uint64_t v24 = v40;
        leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_leaf_high(a1 + 32, &v37, (const void **)v40 + 4);
        std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)(a1 + 32), v37, leaf_high, v24);
        uint64_t v23 = v39;
        std::string v40 = v39;
        if (v39) {
          long long v39 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next((uint64_t)v39);
        }
        uint64_t v26 = (void *)v19[1];
        if (v26)
        {
          do
          {
            int64_t v27 = v26;
            uint64_t v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            int64_t v27 = (void *)v19[2];
            BOOL v28 = *v27 == (void)v19;
            unint64_t v19 = v27;
          }
          while (!v28);
        }
        if (!v23) {
          break;
        }
        unint64_t v19 = v27;
      }
      while (v27 != v20);
    }
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v38);
    unint64_t v19 = v27;
  }
  if (v19 != v20)
  {
    do
    {
      int v29 = (char *)operator new(0x40uLL);
      unint64_t v30 = (uint64_t *)v29;
      long long v39 = (void *)(a1 + 40);
      LOBYTE(v40) = 0;
      unint64_t v31 = (const void **)(v29 + 32);
      if (*((char *)v19 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v29 + 32), (const std::string::value_type *)v19[4], v19[5]);
      }
      else
      {
        long long v32 = *((_OWORD *)v19 + 2);
        *((void *)v29 + 6) = v19[6];
        *(_OWORD *)unint64_t v31 = v32;
      }
      v30[7] = v19[7];
      uint64_t v33 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_leaf_high(a1 + 32, &v37, v31);
      std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)(a1 + 32), v37, v33, v30);
      unint64_t v34 = (void *)v19[1];
      if (v34)
      {
        do
        {
          long long v35 = v34;
          unint64_t v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          long long v35 = (void *)v19[2];
          BOOL v28 = *v35 == (void)v19;
          unint64_t v19 = v35;
        }
        while (!v28);
      }
      unint64_t v19 = v35;
    }
    while (v35 != v20);
  }
  return a1;
}

void sub_1DD7F3BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 16) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t *CRCHNetwork::setFinal(uint64_t **this, unint64_t a2)
{
  unint64_t v5 = a2;
  uint64_t result = std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(this + 8, &v5, (uint64_t *)&v5);
  unint64_t v4 = this[5];
  if (0x6DB6DB6DB6DB6DB7 * (this[6] - v4) >= v5) {
    LOBYTE(v4[7 * v5 + 6]) = 1;
  }
  return result;
}

uint64_t CRCHNetwork::insertEdges(CRCHNetwork *a1, const NetworkEdge **a2)
{
  CRCHNetwork::mergeEquivalentEdges((uint64_t)a1, (uint64_t)a2);
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  while (v4 != v5)
  {
    CRCHNetwork::storeEntry(a1, v4);
    unint64_t v4 = (const NetworkEdge *)((char *)v4 + 80);
  }
  return CRCHNetwork::prepareNetwork(a1);
}

uint64_t CRCHNetwork::findNextNonZeroOutDegree(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v9 = *(void **)(a3 + 8);
  uint64_t v7 = (void *)(a3 + 8);
  unint64_t v8 = v9;
  while (1)
  {
    uint64_t v10 = *(void *)(v6 + 56 * a6);
    if (!v10) {
      return -1;
    }
    a6 = *(void *)(*(void *)(a1 + 88) + 80 * (*(void *)(v6 + 56 * a6 + 16) + v10) + 8);
    if (!v8) {
      goto LABEL_14;
    }
    uint64_t v11 = v7;
    unint64_t v12 = v8;
    do
    {
      unint64_t v13 = v12[4];
      BOOL v14 = v13 >= a6;
      if (v13 >= a6) {
        unint64_t v15 = v12;
      }
      else {
        unint64_t v15 = v12 + 1;
      }
      if (v14) {
        uint64_t v11 = v12;
      }
      unint64_t v12 = (void *)*v15;
    }
    while (*v15);
    if (v11 == v7 || a6 < v11[4]) {
LABEL_14:
    }
      uint64_t v11 = v7;
    uint64_t v16 = v11[5];
    if (*(unsigned char *)(v6 + 56 * a6 + 48) || *(void *)(*a2 + 8 * v16)) {
      return v16;
    }
  }
}

uint64_t CRCHNetwork::pushWeightsFromEmptyEdges(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 48) - *(void *)(this + 40);
  if (v2)
  {
    uint64_t v4 = this;
    long long v30 = 0u;
    memset(v29, 0, sizeof(v29));
    std::vector<BOOL>::vector(&__p, 0x6DB6DB6DB6DB6DB7 * (v2 >> 3));
    unint64_t v27 = 0;
    std::deque<unsigned long>::push_back(v29, &v27);
    unint64_t v5 = __p;
    *(void *)__p |= 1uLL;
    uint64_t v6 = *((void *)&v30 + 1);
    if (!*((void *)&v30 + 1)) {
      goto LABEL_19;
    }
    do
    {
      uint64_t v7 = v6 - 1;
      uint64_t v8 = *(void *)(*(void *)(*((void *)&v29[0] + 1) + (((unint64_t)(v30 + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v30 + v7) & 0x1FF));
      *((void *)&v30 + 1) = v7;
      std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v29, 1);
      uint64_t v9 = *(void *)(v4 + 40);
      if (*(void *)(v9 + 56 * v8))
      {
        unint64_t v10 = 0;
        do
        {
          unint64_t v11 = *(void *)(v9 + 56 * v8 + 16) + v10;
          uint64_t v12 = *(void *)(v4 + 88);
          uint64_t v13 = v12 + 80 * v11;
          unint64_t v14 = *(void *)(v13 + 8);
          unint64_t v27 = v14;
          if (!*(void *)(v13 + 24))
          {
            if (!*(unsigned char *)(v9 + 56 * v14 + 48))
            {
              unint64_t v15 = (unint64_t *)(v9 + 56 * v14);
              if (*v15)
              {
                unint64_t v16 = 0;
                uint64_t v17 = v12 + 80 * v11;
                uint64_t v18 = (double *)(v17 + 32);
                unint64_t v19 = (void *)(v17 + 40);
                uint64_t v20 = (void *)(v9 + 56 * v14 + 16);
                do
                {
                  uint64_t v21 = v12 + 80 * (v16 + *v20);
                  *(double *)(v21 + 32) = *v18 + *(double *)(v21 + 32);
                  uint64_t v22 = *(void *)(v21 + 40);
                  uint64_t v23 = *v19 + v22;
                  if (a2) {
                    v22 += *v19;
                  }
                  *(void *)(v21 + 40) = v23;
                  *(void *)(v21 + 48) = v22;
                  ++v16;
                }
                while (*v15 > v16);
              }
              uint64_t v24 = v12 + 80 * v11;
              *(void *)(v24 + 40) = 0;
              *(void *)(v24 + 48) = 0;
            }
            *(void *)(v12 + 80 * v11 + 32) = 0;
          }
          unint64_t v25 = v14 >> 6;
          uint64_t v26 = 1 << v14;
          if ((*((void *)__p + (v14 >> 6)) & (1 << v14)) == 0)
          {
            std::deque<unsigned long>::push_back(v29, &v27);
            *((void *)__p + v25) |= v26;
          }
          ++v10;
          uint64_t v9 = *(void *)(v4 + 40);
        }
        while (v10 < *(void *)(v9 + 56 * v8));
      }
      uint64_t v6 = *((void *)&v30 + 1);
    }
    while (*((void *)&v30 + 1));
    unint64_t v5 = __p;
    if (__p) {
LABEL_19:
    }
      operator delete(v5);
    return std::deque<std::pair<int,int>>::~deque[abi:ne180100](v29);
  }
  return this;
}

void sub_1DD7F3FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

BOOL CRCHNetwork::checkSingleEmptyIncomingEdgeForNode(CRCHNetwork *this, uint64_t a2, unint64_t *a3)
{
  uint64_t v3 = *((void *)this + 5);
  uint64_t v4 = v3 + 56 * a2;
  unint64_t v7 = *(void *)(v4 + 8);
  unint64_t v5 = (unint64_t *)(v4 + 8);
  unint64_t v6 = v7;
  if (v7 < 2) {
    return 1;
  }
  unint64_t v9 = 0;
  unint64_t v10 = (void *)(v3 + 56 * a2 + 24);
  uint64_t v11 = *((void *)this + 14);
  do
  {
    if (!*(void *)(*(void *)(v11 + 8 * (v9 + *v10)) + 24))
    {
      ++*a3;
      unint64_t v6 = *v5;
    }
    ++v9;
  }
  while (v9 < v6);
  return *a3 == 0;
}

void CRCHNetwork::guaranteeSingleEmptyIncomingEdgePerNode(CRCHNetwork *this)
{
  uint64_t v1 = *((void *)this + 5);
  unint64_t v58 = (uint64_t *)((char *)this + 40);
  for (uint64_t i = *((void *)this + 6) - v1; i; uint64_t i = *((void *)this + 6) - v1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (unsigned __int128)(i * (__int128)0x4924924924924925) >> 64;
    unint64_t v5 = (v4 >> 4) + ((unint64_t)v4 >> 63);
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = (v4 >> 4) + ((unint64_t)v4 >> 63);
    }
    for (uint64_t j = (unsigned char *)(v1 + 48); ; j += 56)
    {
      if (!*j)
      {
        v60[0] = 0;
        if (!CRCHNetwork::checkSingleEmptyIncomingEdgeForNode(this, v3, v60)) {
          break;
        }
      }
      if (v6 == ++v3) {
        return;
      }
    }
    uint64_t v8 = v60[0] == *((void *)j - 5);
    uint64_t v9 = v60[0] - v8;
    if (v60[0] == v8) {
      break;
    }
    unint64_t v82 = 0;
    uint64_t v83 = 0;
    unint64_t v84 = 0;
    uint64_t v79 = &v79;
    uint64_t v80 = &v79;
    uint64_t v81 = 0;
    unint64_t v10 = operator new(0x18uLL);
    v10[1] = &v79;
    v10[2] = v3;
    *unint64_t v10 = &v79;
    uint64_t v79 = v10;
    uint64_t v80 = v10;
    uint64_t v81 = 1;
    unint64_t v57 = v9 + v5;
    if (v5 < v9 + v5)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = operator new(0x18uLL);
        v12[1] = &v79;
        uint64_t v12[2] = v5 + v11;
        *uint64_t v12 = v10;
        v10[1] = v12;
        uint64_t v13 = v11 + 2;
        ++v11;
        unint64_t v10 = v12;
        uint64_t v79 = v12;
        uint64_t v81 = v13;
      }
      while (v9 != v11);
    }
    v78[0] = 0;
    v78[1] = 0;
    unint64_t v77 = (uint64_t *)v78;
    v76[0] = 0;
    v76[1] = 0;
    unint64_t v75 = (uint64_t *)v76;
    long long v74 = 0u;
    memset(v73, 0, sizeof(v73));
    v72[0] = 0;
    v72[1] = 0;
    uint64_t v71 = (uint64_t *)v72;
    std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v69, (uint64_t)(v58 + 3));
    unint64_t v14 = v69;
    if (v69 != v70)
    {
      do
      {
        std::deque<unsigned long>::push_back(v73, v14 + 4);
        unint64_t v15 = v14[1];
        if (v15)
        {
          do
          {
            unint64_t v16 = (void **)v15;
            unint64_t v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            unint64_t v16 = (void **)v14[2];
            BOOL v17 = *v16 == v14;
            unint64_t v14 = v16;
          }
          while (!v17);
        }
        unint64_t v14 = v16;
      }
      while (v16 != v70);
    }
    while (*((void *)&v74 + 1))
    {
      unint64_t v68 = 0;
      unint64_t v18 = *(void *)(*(void *)(*((void *)&v73[0] + 1) + (((unint64_t)v74 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v74 & 0x1FF));
      unint64_t v68 = v18;
      *(void *)&long long v74 = v74 + 1;
      --*((void *)&v74 + 1);
      if ((unint64_t)v74 >= 0x400)
      {
        operator delete(**((void ***)&v73[0] + 1));
        *((void *)&v73[0] + 1) += 8;
        *(void *)&long long v74 = v74 - 512;
        unint64_t v18 = v68;
      }
      unint64_t v19 = v72[0];
      if (v72[0])
      {
        uint64_t v20 = v72;
        do
        {
          uint64_t v21 = v19;
          uint64_t v22 = v20;
          unint64_t v23 = v19[4];
          uint64_t v24 = v19 + 1;
          if (v23 >= v18)
          {
            uint64_t v24 = v21;
            uint64_t v20 = (void **)v21;
          }
          unint64_t v19 = (void *)*v24;
        }
        while (v19);
        if (v20 != v72)
        {
          if (v23 < v18) {
            uint64_t v21 = v22;
          }
          if (v18 >= v21[4]) {
            continue;
          }
        }
      }
      uint64_t v25 = *v58;
      if (*(void *)(*v58 + 56 * v18 + 8))
      {
        unint64_t v26 = 0;
        do
        {
          unint64_t v27 = *(const NetworkEdge **)(*((void *)this + 14) + 8 * (*(void *)(v25 + 56 * v18 + 24) + v26));
          uint64_t v28 = *((void *)this + 11);
          unint64_t v30 = *(void *)v27;
          uint64_t v29 = *((void *)v27 + 1);
          unint64_t v67 = *(void *)v27;
          if (v29 == v3)
          {
            uint64_t v31 = *(void *)(v28 + 16 * (((uint64_t)v27 - v28) >> 4) + 24);
            uint64_t v66 = 0;
            for (unint64_t k = v80; k != &v79; unint64_t k = (void *)k[1])
            {
              unint64_t v33 = k[2];
              v60[0] = v33;
              unint64_t v34 = v78[0];
              if (!v78[0]) {
                goto LABEL_47;
              }
              long long v35 = v78;
              do
              {
                uint64_t v36 = v34;
                uint64_t v37 = v35;
                unint64_t v38 = v34[4];
                long long v39 = v34 + 1;
                if (v38 >= v33)
                {
                  long long v39 = v36;
                  long long v35 = (void **)v36;
                }
                unint64_t v34 = (void *)*v39;
              }
              while (v34);
              if (v35 == v78) {
                goto LABEL_47;
              }
              if (v38 < v33) {
                uint64_t v36 = v37;
              }
              if (v33 < v36[4])
              {
LABEL_47:
                v85[0] = (uint64_t *)v60;
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v75, v60, (uint64_t)&std::piecewise_construct, v85)[5] = 0;
                *((unsigned char *)std::__tree<std::__value_type<unsigned long,BOOL>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,BOOL>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,BOOL>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v77, v60[0], (uint64_t **)v60)+ 40) = 0;
              }
              if (v31)
              {
                if (!*((unsigned char *)std::__tree<std::__value_type<unsigned long,BOOL>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,BOOL>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,BOOL>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v77, v60[0], (uint64_t **)v60)+ 40))goto LABEL_66; {
              }
                }
              else
              {
                v85[0] = (uint64_t *)v60;
                if (!std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v75, v60, (uint64_t)&std::piecewise_construct, v85)[5])
                {
LABEL_66:
                  uint64_t v66 = (uint64_t *)v60[0];
                  break;
                }
              }
            }
            NetworkEdge::NetworkEdge((NetworkEdge *)v60, v27);
            v60[1] = (unint64_t)v66;
            v85[0] = (uint64_t *)&v66;
            long long v45 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v75, (unint64_t *)&v66, (uint64_t)&std::piecewise_construct, v85);
            ++v45[5];
            if (!v31) {
              *((unsigned char *)std::__tree<std::__value_type<unsigned long,BOOL>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,BOOL>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,BOOL>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v77, (unint64_t)v66, &v66)+ 40) = 1;
            }
            unint64_t v46 = v83;
            if ((unint64_t)v83 >= v84)
            {
              std::string v47 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v82, (const NetworkEdge *)v60);
            }
            else
            {
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v60;
              *((_OWORD *)v46 + 1) = v61;
              *((void *)v46 + 4) = v62;
              *(_OWORD *)((char *)v46 + 40) = v63;
              *((void *)v46 + 8) = 0;
              *((void *)v46 + 9) = 0;
              *((void *)v46 + 7) = 0;
              std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)v46 + 7, __p, (uint64_t)v65, (v65 - (unsigned char *)__p) >> 3);
              std::string v47 = (NetworkEdge *)((char *)v46 + 80);
            }
            uint64_t v83 = v47;
            if (__p)
            {
              unint64_t v65 = __p;
              operator delete(__p);
            }
          }
          else if (v30 == v3)
          {
            for (CGAffineTransform m = v80; m != &v79; CGAffineTransform m = (void *)m[1])
            {
              NetworkEdge::NetworkEdge((NetworkEdge *)v60, v27);
              if (m[2] != *(void *)v27) {
                v60[0] = m[2];
              }
              std::string v41 = v83;
              if ((unint64_t)v83 >= v84)
              {
                std::string v42 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v82, (const NetworkEdge *)v60);
              }
              else
              {
                *(_OWORD *)uint64_t v83 = *(_OWORD *)v60;
                *((_OWORD *)v41 + 1) = v61;
                *((void *)v41 + 4) = v62;
                *(_OWORD *)((char *)v41 + 40) = v63;
                *((void *)v41 + 8) = 0;
                *((void *)v41 + 9) = 0;
                *((void *)v41 + 7) = 0;
                std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)v41 + 7, __p, (uint64_t)v65, (v65 - (unsigned char *)__p) >> 3);
                std::string v42 = (NetworkEdge *)((char *)v41 + 80);
              }
              uint64_t v83 = v42;
              if (__p)
              {
                unint64_t v65 = __p;
                operator delete(__p);
              }
            }
          }
          else
          {
            long long v43 = v83;
            if ((unint64_t)v83 >= v84)
            {
              std::string::size_type v44 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v82, v27);
            }
            else
            {
              NetworkEdge::NetworkEdge(v83, v27);
              std::string::size_type v44 = (NetworkEdge *)((char *)v43 + 80);
            }
            uint64_t v83 = v44;
          }
          std::string v48 = v72[0];
          if (!v72[0]) {
            goto LABEL_85;
          }
          long long v49 = v72;
          do
          {
            std::string v50 = v48;
            long long v51 = v49;
            unint64_t v52 = v48[4];
            long long v53 = v48 + 1;
            if (v52 >= v30)
            {
              long long v53 = v50;
              long long v49 = (void **)v50;
            }
            std::string v48 = (void *)*v53;
          }
          while (v48);
          if (v49 == v72) {
            goto LABEL_85;
          }
          if (v52 < v30) {
            std::string v50 = v51;
          }
          if (v30 < v50[4]) {
LABEL_85:
          }
            std::deque<unsigned long>::push_back(v73, &v67);
          ++v26;
          unint64_t v18 = v68;
          uint64_t v25 = *v58;
        }
        while (v26 < *(void *)(*v58 + 56 * v68 + 8));
      }
      std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v71, &v68, (uint64_t *)&v68);
    }
    std::vector<CRCHNetworkNode>::resize((uint64_t)v58, 0);
    std::vector<NetworkEdge>::resize(v58 + 6, 0);
    *((void *)this + 15) = *((void *)this + 14);
    std::vector<CRCHNetworkNode>::resize((uint64_t)v58, v57);
    CRCHNetwork::insertEdges(this, &v82);
    std::string v54 = v69;
    if (v69 != v70)
    {
      do
      {
        CRCHNetwork::setFinal((uint64_t **)this, (unint64_t)v54[4]);
        unint64_t v55 = v54[1];
        if (v55)
        {
          do
          {
            int v56 = (void **)v55;
            unint64_t v55 = (void *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            int v56 = (void **)v54[2];
            BOOL v17 = *v56 == v54;
            std::string v54 = v56;
          }
          while (!v17);
        }
        std::string v54 = v56;
      }
      while (v56 != v70);
    }
    std::__tree<CRCHuint128>::destroy((uint64_t)&v69, v70[0]);
    std::__tree<CRCHuint128>::destroy((uint64_t)&v71, v72[0]);
    std::deque<std::pair<int,int>>::~deque[abi:ne180100](v73);
    std::__tree<CRCHuint128>::destroy((uint64_t)&v75, v76[0]);
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v78[0]);
    std::__list_imp<unsigned long>::clear(&v79);
    v60[0] = (unint64_t)&v82;
    std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
    uint64_t v1 = *((void *)this + 5);
  }
}

void sub_1DD7F47B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,void *a35,uint64_t a36,uint64_t a37)
{
  std::__tree<CRCHuint128>::destroy((uint64_t)&a34, a35);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a37);
  std::__tree<CRCHuint128>::destroy(v37 - 200, *(void **)(v37 - 192));
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*(void **)(v37 - 168));
  std::__list_imp<unsigned long>::clear((void *)(v37 - 152));
  a17 = v37 - 128;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void std::vector<NetworkEdge>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      unint64_t v17 = v4 + 80 * a2;
      while (v5 != v17)
      {
        unint64_t v18 = *(void **)(v5 - 24);
        if (v18)
        {
          *(void *)(v5 - 16) = v18;
          operator delete(v18);
        }
        v5 -= 80;
      }
      a1[1] = v17;
    }
  }
  else
  {
    uint64_t v8 = (uint64_t)(a1 + 2);
    uint64_t v9 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v9 - v5) >> 4) >= v7)
    {
      uint64_t v19 = v5 + 80 * v7;
      uint64_t v20 = 80 * a2 - 80 * v6;
      uint64_t v21 = (void *)(v5 + 56);
      do
      {
        *uint64_t v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
        v21 += 10;
        v20 -= 80;
      }
      while (v20);
      a1[1] = v19;
    }
    else
    {
      if (a2 > 0x333333333333333) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v4) >> 4);
      uint64_t v11 = 2 * v10;
      if (2 * v10 <= a2) {
        uint64_t v11 = a2;
      }
      if (v10 >= 0x199999999999999) {
        unint64_t v12 = 0x333333333333333;
      }
      else {
        unint64_t v12 = v11;
      }
      unint64_t v26 = a1 + 2;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>(v8, v12);
      uint64_t v22 = v13;
      unint64_t v23 = &v13[80 * v6];
      uint64_t v25 = &v13[80 * v14];
      uint64_t v15 = 80 * a2 - 80 * v6;
      unint64_t v16 = v23 + 56;
      do
      {
        *unint64_t v16 = 0;
        v16[1] = 0;
        _OWORD v16[2] = 0;
        v16 += 10;
        v15 -= 80;
      }
      while (v15);
      uint64_t v24 = &v13[80 * a2];
      std::vector<NetworkEdge>::__swap_out_circular_buffer(a1, &v22);
      std::__split_buffer<NetworkEdge>::~__split_buffer((uint64_t)&v22);
    }
  }
}

void sub_1DD7F49F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<NetworkEdge>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void CRCHNetwork::removeEpsOutputEdges(CRCHNetwork *this, CRCHNetwork *a2, int a3)
{
  CRCHNetwork::guaranteeSingleEmptyIncomingEdgePerNode(this);
  int v137 = a3;
  CRCHNetwork::pushWeightsFromEmptyEdges((uint64_t)this, a3);
  long long v135 = a2;
  unint64_t v6 = (void *)*((void *)a2 + 9);
  a2 = (CRCHNetwork *)((char *)a2 + 72);
  unint64_t v7 = (uint64_t **)((char *)a2 - 8);
  std::__tree<CRCHuint128>::destroy((uint64_t)a2 - 8, v6);
  *((void *)a2 - 1) = a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v136 = a2;
  long long v134 = (void *)((char *)a2 - 32);
  std::vector<CRCHNetworkNode>::resize((uint64_t)a2 - 32, 0);
  uint64_t v165 = 0;
  unint64_t v166 = 0;
  unint64_t v167 = 0;
  uint64_t v9 = *((void *)this + 5);
  uint64_t v8 = *((void *)this + 6);
  uint64_t v163 = 0;
  uint64_t v164 = 0;
  v161[1] = 0;
  long long v162 = (uint64_t *)&v163;
  uint64_t v160 = (uint64_t *)v161;
  v161[0] = 0;
  std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v158, (uint64_t)this + 64);
  std::vector<unsigned long>::vector(v157, 0x6DB6DB6DB6DB6DB7 * ((v8 - v9) >> 3));
  long long v156 = 0u;
  memset(v155, 0, sizeof(v155));
  v154[0] = 0;
  v154[1] = 0;
  uint64_t v153 = (uint64_t *)v154;
  *(void *)&long long v142 = 0;
  std::deque<unsigned long>::push_back(v155, &v142);
  int64_t v133 = v7;
  uint64_t v10 = *((void *)&v156 + 1);
  if (*((void *)&v156 + 1))
  {
    unint64_t v11 = 0;
    do
    {
      v168[0] = 0;
      uint64_t v12 = v156;
      uint64_t v13 = *(uint64_t **)(*(void *)(v155[1] + (((unint64_t)v156 >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (v156 & 0x1FF));
      v168[0] = v13;
      *(void *)&long long v156 = v156 + 1;
      *((void *)&v156 + 1) = v10 - 1;
      if ((unint64_t)(v12 + 1) >= 0x400)
      {
        operator delete(*(void **)v155[1]);
        v155[1] += 8;
        *(void *)&long long v156 = v156 - 512;
        uint64_t v13 = v168[0];
      }
      uint64_t v14 = v154[0];
      if (!v154[0]) {
        goto LABEL_14;
      }
      uint64_t v15 = v154;
      do
      {
        unint64_t v16 = v14;
        unint64_t v17 = v15;
        unint64_t v18 = v14[4];
        uint64_t v19 = v14 + 1;
        if (v18 >= (unint64_t)v13)
        {
          uint64_t v19 = v16;
          uint64_t v15 = (void **)v16;
        }
        uint64_t v14 = (void *)*v19;
      }
      while (v14);
      if (v15 == v154) {
        goto LABEL_14;
      }
      if (v18 < (unint64_t)v13) {
        unint64_t v16 = v17;
      }
      if ((unint64_t)v13 < v16[4])
      {
LABEL_14:
        uint64_t v20 = *((void *)this + 5);
        if (*(void *)(v20 + 56 * (void)v13))
        {
          unint64_t v21 = 0;
          do
          {
            unint64_t v22 = *(void *)(v20 + 56 * (void)v13 + 16) + v21;
            uint64_t v23 = *((void *)this + 11);
            uint64_t v24 = (unint64_t *)(v23 + 80 * v22);
            unint64_t v152 = 0;
            unint64_t v25 = *v24;
            unint64_t v151 = 0;
            unint64_t v152 = v25;
            unint64_t v151 = v24[1];
            unint64_t v27 = v24[3];
            unint64_t v26 = v24 + 3;
            uint64_t v28 = v163;
            if (v27)
            {
              if (!v163) {
                goto LABEL_27;
              }
              uint64_t v29 = &v163;
              do
              {
                unint64_t v30 = v28;
                uint64_t v31 = v29;
                unint64_t v32 = v28[4];
                unint64_t v33 = v28 + 1;
                if (v32 >= v25)
                {
                  unint64_t v33 = v30;
                  uint64_t v29 = (void **)v30;
                }
                uint64_t v28 = (void *)*v33;
              }
              while (v28);
              if (v29 == &v163 || (v32 >= v25 ? (unint64_t v34 = v30) : (unint64_t v34 = v31), v25 < v34[4]))
              {
LABEL_27:
                uint64_t v138 = &v152;
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v162, &v152, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5] = v11++;
              }
              uint64_t v138 = &v152;
              uint64_t v35 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v162, &v152, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5];
              uint64_t v36 = v163;
              if (!v163) {
                goto LABEL_37;
              }
              uint64_t v37 = &v163;
              do
              {
                unint64_t v38 = v36;
                long long v39 = v37;
                unint64_t v40 = v36[4];
                std::string v41 = v36 + 1;
                if (v40 >= v151)
                {
                  std::string v41 = v38;
                  uint64_t v37 = (void **)v38;
                }
                uint64_t v36 = (void *)*v41;
              }
              while (v36);
              if (v37 == &v163) {
                goto LABEL_37;
              }
              if (v40 < v151) {
                unint64_t v38 = v39;
              }
              if (v151 < v38[4])
              {
LABEL_37:
                uint64_t v138 = &v151;
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v162, &v151, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5] = v11++;
              }
              uint64_t v138 = &v151;
              uint64_t v42 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v162, &v151, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5];
              ++*((void *)v157[0] + v35);
              long long __p = 0;
              unint64_t v149 = 0;
              uint64_t v150 = 0;
              *(void *)&long long v142 = v35;
              *((void *)&v142 + 1) = v42;
              uint64_t v43 = *((void *)this + 18) + 24 * *v26;
              int v44 = sh2i(v43);
              if (*(char *)(v43 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)v43, *(void *)(v43 + 8));
              }
              else
              {
                long long v45 = *(_OWORD *)v43;
                v141.__r_.__value_.__r.__words[2] = *(void *)(v43 + 16);
                *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v45;
              }
              uint64_t v59 = CRCHSymbolMap::store((void *)v135 + 17, (long long *)&v141);
              if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v141.__r_.__value_.__l.__data_);
              }
              uint64_t v60 = v44;
              if (!v137) {
                uint64_t v60 = v59;
              }
              uint64_t v143 = v60;
              uint64_t v144 = v59;
              long long v61 = (void *)(v23 + 80 * v22);
              uint64_t v62 = v61[4];
              uint64_t v145 = v62;
              uint64_t v63 = v61[5];
              uint64_t v146 = v63;
              uint64_t v64 = v61[6];
              uint64_t v147 = v64;
              unint64_t v65 = v166;
              if ((unint64_t)v166 >= v167)
              {
                uint64_t v66 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v165, (const NetworkEdge *)&v142);
              }
              else
              {
                *(_OWORD *)unint64_t v166 = v142;
                *((void *)v65 + 2) = v60;
                *((void *)v65 + 3) = v59;
                *((void *)v65 + 4) = v62;
                *((void *)v65 + 5) = v63;
                *((void *)v65 + 6) = v64;
                *((void *)v65 + 8) = 0;
                *((void *)v65 + 9) = 0;
                *((void *)v65 + 7) = 0;
                std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)v65 + 7, __p, (uint64_t)v149, (v149 - (unsigned char *)__p) >> 3);
                uint64_t v66 = (uint64_t)v65 + 80;
              }
              unint64_t v166 = (const NetworkEdge *)v66;
              if (__p)
              {
                unint64_t v149 = __p;
                operator delete(__p);
              }
            }
            else
            {
              if (!v163) {
                goto LABEL_50;
              }
              unint64_t v46 = &v163;
              do
              {
                std::string v47 = v28;
                std::string v48 = v46;
                unint64_t v49 = v28[4];
                std::string v50 = v28 + 1;
                if (v49 >= v25)
                {
                  std::string v50 = v47;
                  unint64_t v46 = (void **)v47;
                }
                uint64_t v28 = (void *)*v50;
              }
              while (v28);
              if (v46 == &v163 || (v49 >= v25 ? (long long v51 = v47) : (long long v51 = v48), v25 < v51[4]))
              {
LABEL_50:
                uint64_t v138 = &v152;
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v162, &v152, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5] = v11++;
              }
              uint64_t v138 = &v152;
              uint64_t v52 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v162, &v152, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5];
              long long v53 = v163;
              if (!v163) {
                goto LABEL_60;
              }
              std::string v54 = &v163;
              do
              {
                unint64_t v55 = v53;
                int v56 = v54;
                unint64_t v57 = v53[4];
                unint64_t v58 = v53 + 1;
                if (v57 >= v151)
                {
                  unint64_t v58 = v55;
                  std::string v54 = (void **)v55;
                }
                long long v53 = (void *)*v58;
              }
              while (v53);
              if (v54 == &v163) {
                goto LABEL_60;
              }
              if (v57 < v151) {
                unint64_t v55 = v56;
              }
              if (v151 < v55[4])
              {
LABEL_60:
                uint64_t v138 = &v151;
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v162, &v151, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5] = v52;
              }
            }
            unint64_t v67 = v154[0];
            if (!v154[0]) {
              goto LABEL_80;
            }
            unint64_t v68 = v154;
            do
            {
              uint64_t v69 = v67;
              unint64_t v70 = v68;
              unint64_t v71 = v67[4];
              uint64_t v72 = v67 + 1;
              if (v71 >= v151)
              {
                uint64_t v72 = v69;
                unint64_t v68 = (void **)v69;
              }
              unint64_t v67 = (void *)*v72;
            }
            while (v67);
            if (v68 == v154) {
              goto LABEL_80;
            }
            if (v71 < v151) {
              uint64_t v69 = v70;
            }
            if (v151 < v69[4]) {
LABEL_80:
            }
              std::deque<unsigned long>::push_back(v155, &v151);
            ++v21;
            uint64_t v13 = v168[0];
            uint64_t v20 = *((void *)this + 5);
          }
          while (v21 < *(void *)(v20 + 56 * (uint64_t)v168[0]));
        }
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v153, (unint64_t *)v168, (uint64_t *)v168);
      }
      uint64_t v10 = *((void *)&v156 + 1);
    }
    while (*((void *)&v156 + 1));
  }
  else
  {
    unint64_t v11 = 0;
  }
  if (v164)
  {
    *(void *)&long long v142 = 0;
    if (*((void *)this + 6) != *((void *)this + 5))
    {
      do
      {
        v168[0] = 0;
        uint64_t v138 = (unint64_t *)&v142;
        v168[0] = (uint64_t *)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v162, (unint64_t *)&v142, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5];
        uint64_t v73 = v142;
        uint64_t v138 = (unint64_t *)v168;
        std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v160, (unint64_t *)v168, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5] = v73;
        *(void *)&long long v142 = v142 + 1;
      }
      while ((unint64_t)v142 < 0x6DB6DB6DB6DB6DB7
                                     * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3));
    }
  }
  std::vector<CRCHNetworkNode>::resize((uint64_t)v134, v11);
  long long v74 = v158;
  if (v158 == (unint64_t *)v159)
  {
    unint64_t v80 = -1;
  }
  else
  {
    do
    {
      uint64_t v138 = v74 + 4;
      unint64_t v75 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v162, v74 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138);
      CRCHNetwork::setFinal((uint64_t **)v135, v75[5]);
      uint64_t v138 = v74 + 4;
      uint64_t v76 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v162, v74 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138);
      unint64_t v77 = (unint64_t *)v74[1];
      if (v77)
      {
        do
        {
          uint64_t v78 = v77;
          unint64_t v77 = (unint64_t *)*v77;
        }
        while (v77);
      }
      else
      {
        do
        {
          uint64_t v78 = (unint64_t *)v74[2];
          BOOL v79 = *v78 == (void)v74;
          long long v74 = v78;
        }
        while (!v79);
      }
      long long v74 = v78;
    }
    while (v78 != (unint64_t *)v159);
    unint64_t v80 = v76[5];
  }
  *((void *)&v142 + 1) = 0;
  uint64_t v143 = 0;
  *(void *)&long long v142 = (char *)&v142 + 8;
  v168[0] = 0;
  if (v11)
  {
    for (uint64_t i = 0; (unint64_t)i < v11; v168[0] = i)
    {
      if (!*((void *)v157[0] + i))
      {
        uint64_t v138 = (unint64_t *)v168;
        if (i == (uint64_t *)v80)
        {
          std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v142, (unint64_t *)v168, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5] = v80;
        }
        else
        {
          unint64_t v82 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v160, (unint64_t *)v168, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138);
          uint64_t NextNonZeroOutDegree = CRCHNetwork::findNextNonZeroOutDegree((uint64_t)this, v157, (uint64_t)&v162, v83, v84, v82[5]);
          uint64_t v138 = (unint64_t *)v168;
          std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v142, (unint64_t *)v168, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138)[5] = NextNonZeroOutDegree;
        }
      }
      uint64_t i = (uint64_t *)((char *)v168[0] + 1);
    }
  }
  uint64_t v86 = v165;
  uint64_t v87 = v166;
  if (v166 != v165)
  {
    unint64_t v88 = 0;
    do
    {
      unint64_t v89 = (void *)*((void *)&v142 + 1);
      if (*((void *)&v142 + 1))
      {
        uint64_t v90 = (char *)v86 + 80 * v88;
        unint64_t v93 = *((void *)v90 + 1);
        uint64_t v91 = (uint64_t **)(v90 + 8);
        unint64_t v92 = v93;
        unint64_t v94 = (long long *)((char *)&v142 + 8);
        do
        {
          float v95 = v89;
          uint64_t v96 = v94;
          unint64_t v97 = v89[4];
          uint64_t v98 = v89 + 1;
          if (v97 >= v92)
          {
            uint64_t v98 = v95;
            unint64_t v94 = v95;
          }
          unint64_t v89 = (void *)*v98;
        }
        while (v89);
        if (v94 != (long long *)((char *)&v142 + 8))
        {
          if (v97 < v92) {
            float v95 = v96;
          }
          if (v92 >= v95[4])
          {
            v168[0] = 0;
            v168[0] = *v91;
            uint64_t v138 = (unint64_t *)v168;
            unint64_t v99 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v142, (unint64_t *)v168, (uint64_t)&std::piecewise_construct, (uint64_t **)&v138);
            uint64_t v86 = v165;
            *((void *)v165 + 10 * v88 + 1) = v99[5];
            uint64_t v87 = v166;
          }
        }
      }
      ++v88;
    }
    while (v88 < 0xCCCCCCCCCCCCCCCDLL * ((v87 - v86) >> 4));
  }
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v138 = (unint64_t *)&v139;
  uint64_t v100 = (uint64_t *)operator new(0x30uLL);
  *uint64_t v100 = 0;
  v100[1] = 0;
  v100[4] = 0;
  v100[5] = 0;
  v100[2] = (uint64_t)&v139;
  uint64_t v138 = (unint64_t *)v100;
  uint64_t v139 = v100;
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v100, v100);
  ++v140;
  v100[5] = 0;
  if (v80 != -1)
  {
    std::__tree<unsigned long>::__erase_unique<unsigned long>(v133, v80);
    *(unsigned char *)(*v134 + 56 * v80 + 48) = 0;
  }
  std::__tree<CRCHuint128>::destroy((uint64_t)v133, *((void **)v135 + 9));
  *((void *)v135 + 9) = 0;
  *((void *)v135 + 10) = 0;
  *((void *)v135 + 8) = v136;
  unint64_t v101 = v165;
  if (v166 == v165)
  {
    unint64_t v104 = -1;
    int v103 = 1;
  }
  else
  {
    unint64_t v102 = 0;
    int v103 = 1;
    unint64_t v104 = -1;
    do
    {
      unint64_t v152 = 0;
      uint64_t v105 = (unint64_t *)((char *)v101 + 80 * v102);
      unint64_t v106 = *v105;
      unint64_t v151 = 0;
      unint64_t v152 = v106;
      unint64_t v151 = v105[1];
      unint64_t v107 = v139;
      if (!v139) {
        goto LABEL_132;
      }
      unint64_t v108 = &v139;
      unint64_t v109 = v139;
      do
      {
        unint64_t v110 = v109;
        float v111 = v108;
        unint64_t v112 = v109[4];
        if (v112 >= v106) {
          unint64_t v108 = (uint64_t **)v109;
        }
        else {
          ++v109;
        }
        unint64_t v109 = (uint64_t *)*v109;
      }
      while (v109);
      if (v108 == &v139) {
        goto LABEL_132;
      }
      if (v112 < v106) {
        unint64_t v110 = (uint64_t *)v111;
      }
      if (v106 < v110[4])
      {
LABEL_132:
        v168[0] = (uint64_t *)&v152;
        unint64_t v113 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v138, &v152, (uint64_t)&std::piecewise_construct, v168);
        uint64_t v114 = v103++;
        v113[5] = v114;
        unint64_t v107 = v139;
      }
      if (!v107) {
        goto LABEL_143;
      }
      uint64_t v115 = &v139;
      do
      {
        uint64_t v116 = v107;
        uint64_t v117 = v115;
        unint64_t v118 = v107[4];
        uint64_t v119 = (uint64_t **)(v107 + 1);
        if (v118 >= v151)
        {
          uint64_t v119 = (uint64_t **)v116;
          uint64_t v115 = (uint64_t **)v116;
        }
        unint64_t v107 = *v119;
      }
      while (v107);
      if (v115 == &v139 || (v118 >= v151 ? (long long v120 = v116) : (long long v120 = v117), v151 < v120[4]))
      {
LABEL_143:
        v168[0] = (uint64_t *)&v151;
        unint64_t v121 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v138, &v151, (uint64_t)&std::piecewise_construct, v168);
        uint64_t v122 = v103++;
        v121[5] = v122;
      }
      if (*((void *)v165 + 10 * v102 + 1) == v80)
      {
        v168[0] = (uint64_t *)&v151;
        long long v123 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v138, &v151, (uint64_t)&std::piecewise_construct, v168);
        uint64_t v124 = *(void **)v136;
        if (!*(void *)v136) {
          goto LABEL_156;
        }
        unint64_t v125 = v123[5];
        uint64_t v126 = v136;
        do
        {
          unint64_t v127 = v124[4];
          BOOL v128 = v127 >= v125;
          if (v127 >= v125) {
            uint64_t v129 = v124;
          }
          else {
            uint64_t v129 = v124 + 1;
          }
          if (v128) {
            uint64_t v126 = (CRCHNetwork *)v124;
          }
          uint64_t v124 = (void *)*v129;
        }
        while (*v129);
        if (v126 == v136 || v125 < *((void *)v126 + 4))
        {
LABEL_156:
          v168[0] = (uint64_t *)&v151;
          unint64_t v130 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v138, &v151, (uint64_t)&std::piecewise_construct, v168);
          CRCHNetwork::setFinal((uint64_t **)v135, v130[5]);
          v168[0] = (uint64_t *)&v151;
          unint64_t v104 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v138, &v151, (uint64_t)&std::piecewise_construct, v168)[5];
        }
      }
      v168[0] = (uint64_t *)&v152;
      uint64_t v131 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v138, &v152, (uint64_t)&std::piecewise_construct, v168);
      *((void *)v165 + 10 * v102) = v131[5];
      v168[0] = (uint64_t *)&v151;
      id v132 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v138, &v151, (uint64_t)&std::piecewise_construct, v168);
      unint64_t v101 = v165;
      *((void *)v165 + 10 * v102++ + 1) = v132[5];
    }
    while (v102 < 0xCCCCCCCCCCCCCCCDLL * ((v166 - v101) >> 4));
  }
  std::vector<CRCHNetworkNode>::resize((uint64_t)v134, v103);
  if (v104 != -1) {
    CRCHNetwork::setFinal((uint64_t **)v135, v104);
  }
  CRCHNetwork::insertEdges(v135, &v165);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v138, v139);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v142, *((void **)&v142 + 1));
  std::__tree<CRCHuint128>::destroy((uint64_t)&v153, v154[0]);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](v155);
  if (v157[0])
  {
    v157[1] = v157[0];
    operator delete(v157[0]);
  }
  std::__tree<CRCHuint128>::destroy((uint64_t)&v158, v159[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v160, v161[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v162, v163);
  *(void *)&long long v142 = &v165;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
}

void sub_1DD7F56E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,uint64_t a42)
{
  std::__tree<CRCHuint128>::destroy((uint64_t)&a16, a17);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a26, a27);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a39, a40);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a42);
  int v44 = *(void **)(v42 - 232);
  if (v44)
  {
    *(void *)(v42 - 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v44;
    operator delete(v44);
  }
  std::__tree<CRCHuint128>::destroy(v42 - 208, *(void **)(v42 - 200));
  std::__tree<CRCHuint128>::destroy(v42 - 184, *(void **)(v42 - 176));
  std::__tree<CRCHuint128>::destroy(v42 - 160, *(void **)(v42 - 152));
  a26 = v42 - 136;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void CRCHNetwork::mergeEquivalentEdges(uint64_t a1, uint64_t a2)
{
  v44[0] = 0;
  v44[1] = 0;
  unint64_t v42 = 0;
  uint64_t v43 = (uint64_t *)v44;
  unint64_t v40 = 0;
  std::string v41 = 0;
  uint64_t v3 = *(NetworkEdge **)a2;
  if (*(void *)(a2 + 8) != *(void *)a2)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = (int64x2_t *)((char *)v3 + 80 * v4);
      __int32 v6 = v5[1].i32[0];
      *(int32x2_t *)&long long v39 = vmovn_s64(*v5);
      DWORD2(v39) = v6;
      HIDWORD(v39) = v6;
      unint64_t v7 = v44[0];
      if (!v44[0]) {
        goto LABEL_13;
      }
      uint64_t v8 = v44;
      do
      {
        uint64_t v9 = v8;
        uint64_t v10 = (_DWORD *)v7 + 7;
        BOOL v11 = CRCHuint128::operator<((_DWORD *)v7 + 7, &v39);
        uint64_t v12 = v7 + 1;
        if (!v11)
        {
          uint64_t v12 = v7;
          uint64_t v8 = (void **)v7;
        }
        unint64_t v7 = (void *)*v12;
      }
      while (*v12);
      if (v8 == v44 || (!v11 ? (uint64_t v13 = v10) : (uint64_t v13 = (_DWORD *)v9 + 7), CRCHuint128::operator<(&v39, v13)))
      {
LABEL_13:
        *((_DWORD *)std::__tree<std::__value_type<CRCHuint128,int>,std::__map_value_compare<CRCHuint128,std::__value_type<CRCHuint128,int>,std::less<CRCHuint128>,true>,std::allocator<std::__value_type<CRCHuint128,int>>>::__emplace_unique_key_args<CRCHuint128,std::piecewise_construct_t const&,std::tuple<CRCHuint128 const&>,std::tuple<>>(&v43, &v39, &v39)+ 11) = v4;
        uint64_t v14 = (const NetworkEdge *)(*(void *)a2 + 80 * v4);
        uint64_t v15 = v41;
        if ((unint64_t)v41 >= v42)
        {
          unint64_t v16 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v40, v14);
        }
        else
        {
          NetworkEdge::NetworkEdge(v41, v14);
          unint64_t v16 = (NetworkEdge *)((char *)v15 + 80);
        }
        std::string v41 = v16;
      }
      else
      {
        int v17 = *((_DWORD *)v8 + 11);
        long long __p = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(&__p, *((const void **)v3 + 10 * v17 + 7), *((void *)v3 + 10 * v17 + 8), (uint64_t)(*((void *)v3 + 10 * v17 + 8) - *((void *)v3 + 10 * v17 + 7)) >> 3);
        unint64_t v18 = __p;
        unint64_t v19 = (v37 - (unsigned char *)__p) >> 3;
        if (v37 != __p
          && ((uint64_t v20 = *(void *)a2 + 80 * v4, v21 = *(void *)(v20 + 56), v22 = *(void *)(v20 + 64), v22 != v21)
            ? (BOOL v23 = v19 == (v22 - v21) >> 3)
            : (BOOL v23 = 0),
              v23))
        {
          uint64_t v25 = 0;
          uint64_t v24 = 0;
          if (v19 <= 1) {
            uint64_t v26 = 1;
          }
          else {
            uint64_t v26 = (v37 - (unsigned char *)__p) >> 3;
          }
          do
          {
            uint64_t v27 = 0;
            while (*(void *)((char *)__p + v27) != *(void *)(v21 + 8 * v25))
            {
              v27 += 8;
              if ((char *)__p + v27 == v37)
              {
                uint64_t v28 = (v37 - (unsigned char *)__p) >> 3;
                goto LABEL_33;
              }
            }
            uint64_t v28 = v27 >> 3;
LABEL_33:
            if ((char *)__p + 8 * v28 != v37) {
              ++v24;
            }
            ++v25;
          }
          while (v25 != v26);
        }
        else
        {
          uint64_t v24 = 0;
        }
        if (v24 == v19)
        {
          double v29 = *(double *)(*(void *)a2 + 80 * v4 + 32);
          unint64_t v30 = (double *)((char *)v3 + 80 * v17);
          double v32 = v30[4];
          uint64_t v31 = v30 + 4;
          if (v29 < v32) {
            *uint64_t v31 = v29;
          }
        }
        else
        {
          *((_DWORD *)std::__tree<std::__value_type<CRCHuint128,int>,std::__map_value_compare<CRCHuint128,std::__value_type<CRCHuint128,int>,std::less<CRCHuint128>,true>,std::allocator<std::__value_type<CRCHuint128,int>>>::__emplace_unique_key_args<CRCHuint128,std::piecewise_construct_t const&,std::tuple<CRCHuint128 const&>,std::tuple<>>(&v43, &v39, &v39)+ 11) = v4;
          unint64_t v33 = (const NetworkEdge *)(*(void *)a2 + 80 * v4);
          unint64_t v34 = v41;
          if ((unint64_t)v41 >= v42)
          {
            uint64_t v35 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v40, v33);
          }
          else
          {
            NetworkEdge::NetworkEdge(v41, v33);
            uint64_t v35 = (NetworkEdge *)((char *)v34 + 80);
          }
          std::string v41 = v35;
          unint64_t v18 = __p;
        }
        if (v18)
        {
          uint64_t v37 = v18;
          operator delete(v18);
        }
      }
      ++v4;
      uint64_t v3 = *(NetworkEdge **)a2;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4) > v4);
  }
  if (&v40 != (NetworkEdge **)a2) {
    std::vector<NetworkEdge>::__assign_with_size[abi:ne180100]<NetworkEdge*,NetworkEdge*>(a2, v40, v41, 0xCCCCCCCCCCCCCCCDLL * ((v41 - v40) >> 4));
  }
  long long __p = &v40;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v44[0]);
}

void sub_1DD7F5AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  long long __p = &a15;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a19);
  _Unwind_Resume(a1);
}

void CRCHNetwork::compose(CRCHNetwork *this, const CRCHNetwork *a2, CRCHNetwork *a3, char a4)
{
  uint64_t v8 = (char *)this + 40;
  std::vector<CRCHNetworkNode>::resize((uint64_t)this + 40, 0);
  std::__tree<CRCHuint128>::destroy((uint64_t)this + 64, *((void **)this + 9));
  *((void *)this + 8) = (char *)this + 72;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = 0;
  memset(v20, 0, sizeof(v20));
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  int v17 = (const NetworkEdge **)&v18;
  std::__tree<CRCHuint128>::destroy((uint64_t)this + 224, *((void **)this + 29));
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 30) = 0;
  *((void *)this + 29) = 0;
  v16[0] = 0;
  v16[1] = 0;
  v14[1] = 0;
  uint64_t v15 = v16;
  uint64_t v13 = v14;
  v14[0] = 0;
  CRCHNetwork::compose6((uint64_t)this, (unint64_t)a2, a3, *((void *)a2 + 4), *((void *)a3 + 4), (uint64_t)&v17, (uint64_t *)v20, (uint64_t *)&v15, (uint64_t)&v13, a4);
  std::vector<CRCHNetworkNode>::resize((uint64_t)v8, v19);
  CRCHNetwork::insertEdges(this, v20);
  uint64_t v9 = v13;
  if (v13 != v14)
  {
    do
    {
      CRCHNetwork::setFinal((uint64_t **)this, v9[4]);
      uint64_t v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          BOOL v11 = (void **)v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (void **)v9[2];
          BOOL v12 = *v11 == v9;
          uint64_t v9 = v11;
        }
        while (!v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != v14);
  }
  std::__tree<CRCHuint128>::destroy((uint64_t)&v13, v14[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v15, v16[0]);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v18);
  int v17 = v20;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_1DD7F5C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, char a14, void *a15, uint64_t a16, void **a17, void *a18)
{
  std::__tree<CRCHuint128>::destroy((uint64_t)&a11, a12);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a14, a15);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a18);
  a17 = (void **)(v18 - 72);
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t *CRCHNetwork::compose6(uint64_t a1, unint64_t a2, CRCHNetwork *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9, char a10)
{
  unint64_t v12 = a4;
  v46[0] = a4;
  v46[1] = a5;
  uint64_t result = std::__tree<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<CRCHNodeTuple<unsigned long,unsigned long>,std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::less<CRCHNodeTuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>>>::find<CRCHNodeTuple<unsigned long,unsigned long>>(a6, a4, a5);
  uint64_t v44 = a6;
  if ((uint64_t *)(a6 + 8) == result) {
    goto LABEL_14;
  }
  unint64_t v16 = result[6];
  if (v16 == -1) {
    goto LABEL_14;
  }
  int v17 = (void *)a8[1];
  if (!v17) {
    goto LABEL_14;
  }
  uint64_t v18 = a8 + 1;
  do
  {
    unint64_t v19 = v17[4];
    BOOL v20 = v19 >= v16;
    if (v19 >= v16) {
      uint64_t v21 = v17;
    }
    else {
      uint64_t v21 = v17 + 1;
    }
    if (v20) {
      uint64_t v18 = v17;
    }
    int v17 = (void *)*v21;
  }
  while (*v21);
  if (v18 == a8 + 1 || v16 < v18[4])
  {
LABEL_14:
    uint64_t v38 = (void *)(a6 + 8);
    uint64_t v45 = *(void *)(a6 + 16);
    std::string v41 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a6, v46, &v45);
    uint64_t v22 = *(void *)(a2 + 40);
    if (*(void *)(v22 + 56 * v12))
    {
      unint64_t v23 = 0;
      unint64_t v39 = v12;
      do
      {
        uint64_t v24 = *(void *)(a2 + 88) + 80 * (*(void *)(v22 + 56 * v12 + 16) + v23);
        unint64_t v26 = *(void *)(v24 + 8);
        unint64_t v25 = *(void *)(v24 + 16);
        uint64_t FirstEdgeGivenSymbol = CRCHNetwork::findFirstEdgeGivenSymbol(a3, a5, v25);
        unint64_t v28 = FirstEdgeGivenSymbol;
        if (!a5 && a10 && FirstEdgeGivenSymbol == -1)
        {
          if (!CRCHNetwork::addCWComposedCharacterEdge(a1, a2, (uint64_t)a3, v44, (uint64_t)v41, v26, 0, v24, 0, a9, a7, 1))
          {
            LOBYTE(v36) = 1;
            CRCHNetwork::compose6(a1, a2, a3, v26, 0, v44, a7, a8, a9, v36);
          }
        }
        else if (FirstEdgeGivenSymbol != -1)
        {
          for (uint64_t i = *((void *)a3 + 5); v28 < *(void *)(i + 56 * a5); uint64_t i = *((void *)a3 + 5))
          {
            unint64_t v30 = v28 + *(void *)(i + 56 * a5 + 16);
            uint64_t v31 = *((void *)a3 + 11);
            uint64_t v32 = v31 + 80 * v30;
            if (*(void *)(v32 + 16) != v25) {
              break;
            }
            unint64_t v33 = *(void *)(v32 + 8);
            if (!CRCHNetwork::addCWComposedCharacterEdge(a1, a2, (uint64_t)a3, v44, (uint64_t)v41, v26, v33, v24, v31 + 80 * v30, a9, a7, 0))
            {
              LOBYTE(v37) = a10;
              CRCHNetwork::compose6(a1, a2, a3, v26, v33, v44, a7, a8, a9, v37);
            }
            ++v28;
          }
        }
        ++v23;
        uint64_t v22 = *(void *)(a2 + 40);
        unint64_t v12 = v39;
      }
      while (*(void *)(v22 + 56 * v39) > v23);
    }
    unint64_t v34 = std::__tree<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<CRCHNodeTuple<unsigned long,unsigned long>,std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::less<CRCHNodeTuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>>>::find<CRCHNodeTuple<unsigned long,unsigned long>>(v44, v12, a5);
    if (v38 == v34) {
      unint64_t v35 = -1;
    }
    else {
      unint64_t v35 = v34[6];
    }
    return std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>(a8, v35, v35);
  }
  return result;
}

void CRCHNetwork::compose(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t **a5)
{
  uint64_t v18 = a1 + 40;
  std::vector<CRCHNetworkNode>::resize(a1 + 40, 0);
  std::__tree<CRCHuint128>::destroy(a1 + 64, *(void **)(a1 + 72));
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  memset(v28, 0, 24);
  unint64_t v26 = 0;
  unint64_t v27 = 0;
  uint64_t v9 = *(void **)(a1 + 232);
  unint64_t v25 = (const NetworkEdge **)&v26;
  std::__tree<CRCHuint128>::destroy(a1 + 224, v9);
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1 + 232;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  v21[1] = 0;
  uint64_t v22 = &v23;
  BOOL v20 = (uint64_t *)v21;
  v21[0] = 0;
  uint64_t RootCursor = LMLexiconGetRootCursor();
  uint64_t v11 = LMLexiconGetRootCursor();
  unint64_t v12 = (long long *)LMLexiconCursorHash();
  uint64_t v13 = LMLexiconCursorHash();
  CRCHNetwork::compose8(a1, a2, a3, a4, (uint64_t)v12, v12, v13, a5, *(void *)(a2 + 32), RootCursor, (unint64_t)v12, 0, (uint64_t)&v25, (uint64_t *)v28, (uint64_t *)&v22, &v20);
  if (a4) {
    CRCHNetwork::compose8(a1, a2, a4, a4, v13, v12, v13, a5, *(void *)(a2 + 32), v11, v13, 1, (uint64_t)&v25, (uint64_t *)v28, (uint64_t *)&v22, &v20);
  }
  std::__tree<CRCHuint128>::destroy((uint64_t)&v22, v23);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = &v23;
  std::__tree<CRCHuint128>::destroy(a1 + 224, *(void **)(a1 + 232));
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1 + 232;
  LMLexiconResetCursors();
  LMLexiconResetCursors();
  std::vector<CRCHNetworkNode>::resize(v18, v27);
  uint64_t v14 = v20;
  if (v20 != (uint64_t *)v21)
  {
    do
    {
      CRCHNetwork::setFinal((uint64_t **)a1, v14[4]);
      uint64_t v15 = (uint64_t *)v14[1];
      if (v15)
      {
        do
        {
          unint64_t v16 = v15;
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unint64_t v16 = (uint64_t *)v14[2];
          BOOL v17 = *v16 == (void)v14;
          uint64_t v14 = v16;
        }
        while (!v17);
      }
      uint64_t v14 = v16;
    }
    while (v16 != (uint64_t *)v21);
  }
  CRCHNetwork::insertEdges((CRCHNetwork *)a1, v28);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v20, v21[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v22, v23);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v26);
  unint64_t v25 = v28;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_1DD7F621C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *a23,uint64_t a24,char a25,void *a26)
{
  std::__tree<CRCHuint128>::destroy((uint64_t)&a22, a23);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a25, a26);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*(void **)(v26 - 128));
  *(void *)(v26 - 136) = v26 - 112;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 136));
  _Unwind_Resume(a1);
}

uint64_t *CRCHNetwork::compose8(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, long long *a6, uint64_t a7, uint64_t **a8, unint64_t a9, uint64_t a10, unint64_t a11, char a12, uint64_t a13, uint64_t *a14, uint64_t *a15, uint64_t **a16)
{
  unint64_t v16 = a6;
  uint64_t v19 = a13;
  unint64_t v20 = a11;
  unint64_t v21 = a9;
  BOOL v23 = a7 == a11 || a6 == (long long *)a11;
  BOOL v65 = v23;
  unint64_t v84 = a9;
  unint64_t v85 = a11;
  uint64_t result = std::__tree<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<CRCHNodeTuple<unsigned long,unsigned long>,std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::less<CRCHNodeTuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>>>::find<CRCHNodeTuple<unsigned long,unsigned long>>(a13, a9, a11);
  if ((uint64_t *)(a13 + 8) == result) {
    goto LABEL_20;
  }
  unint64_t v25 = result[6];
  if (v25 == -1) {
    goto LABEL_20;
  }
  uint64_t v26 = (void *)a15[1];
  if (!v26) {
    goto LABEL_20;
  }
  unint64_t v27 = a15 + 1;
  do
  {
    unint64_t v28 = v26[4];
    BOOL v29 = v28 >= v25;
    if (v28 >= v25) {
      unint64_t v30 = v26;
    }
    else {
      unint64_t v30 = v26 + 1;
    }
    if (v29) {
      unint64_t v27 = v26;
    }
    uint64_t v26 = (void *)*v30;
  }
  while (*v30);
  if (v27 == a15 + 1 || v25 < v27[4])
  {
LABEL_20:
    if (a12)
    {
      unint64_t v85 = (unint64_t)v16;
      unint64_t v20 = (unint64_t)v16;
    }
    unint64_t v58 = v20;
    uint64_t v83 = *(void *)(a13 + 16);
    unint64_t v71 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a13, &v84, &v83);
    uint64_t v31 = *(void *)(a2 + 40);
    if (*(void *)(v31 + 56 * a9))
    {
      unint64_t v32 = 0;
      uint64_t v63 = (void *)(a1 + 136);
      long long v61 = a8 + 1;
      if (a4) {
        BOOL v33 = a4 == a3;
      }
      else {
        BOOL v33 = 1;
      }
      char v34 = v33;
      char v59 = v34;
      unint64_t v68 = (unint64_t)v16;
      uint64_t v69 = a2;
      while (1)
      {
        uint64_t v35 = *(void *)(a2 + 88) + 80 * (v32 + *(void *)(v31 + 56 * v21 + 16));
        unint64_t v36 = *(void *)(v35 + 16);
        unint64_t v74 = *(void *)(v35 + 8);
        uint64_t v72 = (void *)v35;
        __int16 v82 = v36;
        uint64_t CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
        uint64_t v38 = CursorByAdvancingWithCharacters;
        int v70 = v36;
        if (v65) {
          break;
        }
        LODWORD(v73) = 0;
        int v66 = 0;
        unsigned int v40 = 0;
        int v41 = 0;
        if (CursorByAdvancingWithCharacters) {
          goto LABEL_44;
        }
LABEL_70:
        ++v32;
        uint64_t v31 = *(void *)(a2 + 40);
        unint64_t v16 = (long long *)v68;
        uint64_t v19 = a13;
        if (v32 >= *(void *)(v31 + 56 * v21)) {
          goto LABEL_71;
        }
      }
      ul2sh(v36, (uint64_t)&v80);
      uint64_t v73 = CRCHSymbolMap::store(v63, &v80);
      if (v38) {
        int TokenID = LMLexiconCursorFirstTokenID();
      }
      else {
        int TokenID = 0;
      }
      if (v61 == (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>((uint64_t)a8, (const void **)&v80))
      {
        v76[0] = &v80;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a8, (const void **)&v80, v76)+ 14) = TokenID;
      }
      v76[0] = (long long *)v74;
      v76[1] = v16;
      v79[0] = *(void *)(v19 + 16);
      unsigned int v40 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)v19, (unint64_t *)v76, v79);
      if (!CRCHNetwork::addCWComposedCharacterEdge(a1, a2, v19, (uint64_t)v71, v74, (unint64_t)v16, 1, v73, v72, a16, a14))
      {
        uint64_t RootCursor = LMLexiconGetRootCursor();
        LOBYTE(v57) = 0;
        CRCHNetwork::compose8(a1, a2, a3, a4, a5, v16, a7, a8, v74, RootCursor, v16, v57, v19, a14, a15, a16);
        if ((v59 & 1) == 0)
        {
          uint64_t v43 = LMLexiconGetRootCursor();
          LOBYTE(v57) = 1;
          CRCHNetwork::compose8(a1, a2, a4, a4, a7, v16, a7, a8, v74, v43, a7, v57, v19, a14, a15, a16);
        }
      }
      if (v81 < 0) {
        operator delete((void *)v80);
      }
      int v66 = v70;
      int v41 = (int)v71;
      if (!v38) {
        goto LABEL_70;
      }
LABEL_44:
      int v44 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 56 * v74 + 48);
      int HasChildren = LMLexiconCursorHasChildren();
      int HasEntries = LMLexiconCursorHasEntries();
      if (HasChildren)
      {
        unint64_t v47 = LMLexiconCursorHash();
        *(void *)&long long v80 = v74;
        *((void *)&v80 + 1) = v47;
        v76[0] = *(long long **)(a13 + 16);
        CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a13, (unint64_t *)&v80, (uint64_t *)v76);
        if (!CRCHNetwork::addCWComposedCharacterEdge(a1, v69, a13, (uint64_t)v71, v74, v47, 0, 0, v72, a16, a14))
        {
          LOBYTE(v57) = 0;
          CRCHNetwork::compose8(a1, v69, a3, a4, a5, v68, a7, a8, v74, v38, v47, v57, a13, a14, a15, a16);
        }
      }
      char v48 = HasEntries ^ 1;
      if (v44) {
        char v48 = 0;
      }
      a2 = v69;
      unint64_t v21 = a9;
      if ((v48 & 1) == 0)
      {
        uint64_t v49 = LMLexiconGetRootCursor();
        getStringFromCursor((uint64_t)&v80, a3);
        uint64_t v50 = CRCHSymbolMap::store(v63, &v80);
        v79[0] = v74;
        v79[1] = v68;
        uint64_t v78 = *(void *)(a13 + 16);
        unsigned int v51 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a13, (unint64_t *)v79, &v78);
        if (!(v41 | v40 | v66 | v73)
          || v41 != v71
          || v40 != v51
          || (v66 == v70 ? (BOOL v52 = v73 == v50) : (BOOL v52 = 0), !v52))
        {
          if (HasEntries) {
            int v53 = LMLexiconCursorFirstTokenID();
          }
          else {
            int v53 = 0;
          }
          getStringFromCursor((uint64_t)v76, a3);
          if (v61 == (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>((uint64_t)a8, (const void **)v76))
          {
            uint64_t v86 = v76;
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a8, (const void **)v76, (long long **)&v86)+ 14) = v53;
          }
          if (!CRCHNetwork::addCWComposedCharacterEdge(a1, v69, a13, (uint64_t)v71, v74, v68, 1, v50, v72, a16, a14))
          {
            LOBYTE(v57) = 0;
            CRCHNetwork::compose8(a1, v69, a3, a4, a5, v68, a7, a8, v74, v49, v68, v57, a13, a14, a15, a16);
            if ((v59 & 1) == 0)
            {
              uint64_t v54 = LMLexiconGetRootCursor();
              LOBYTE(v57) = 1;
              CRCHNetwork::compose8(a1, v69, a4, a4, a7, v68, a7, a8, v74, v54, a7, v57, a13, a14, a15, a16);
            }
          }
          if (v77 < 0) {
            operator delete(v76[0]);
          }
        }
        if (v81 < 0) {
          operator delete((void *)v80);
        }
        a2 = v69;
        unint64_t v21 = a9;
      }
      goto LABEL_70;
    }
LABEL_71:
    unint64_t v55 = std::__tree<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<CRCHNodeTuple<unsigned long,unsigned long>,std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::less<CRCHNodeTuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>>>::find<CRCHNodeTuple<unsigned long,unsigned long>>(v19, v21, v58);
    if ((void *)(a13 + 8) == v55) {
      unint64_t v56 = -1;
    }
    else {
      unint64_t v56 = v55[6];
    }
    return std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>(a15, v56, v56);
  }
  return result;
}

void sub_1DD7F6930(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  if (*(char *)(v1 - 129) < 0) {
    operator delete(*(void **)(v1 - 152));
  }
  _Unwind_Resume(exception_object);
}

uint64_t CRCHNetwork::findFirstEdgeGivenSymbol(CRCHNetwork *this, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v52 = a3;
  int v53 = (uint64_t *)a2;
  uint64_t v6 = *((void *)this + 5);
  unint64_t v7 = *(void *)(v6 + 56 * a2);
  if (v7 > 0xA)
  {
    uint64_t v9 = (uint64_t **)((char *)this + 208);
    uint64_t v8 = (void *)*((void *)this + 26);
    uint64_t v10 = (uint64_t **)((char *)this + 200);
    if (!v8) {
      goto LABEL_13;
    }
    uint64_t v11 = (uint64_t **)((char *)this + 208);
    do
    {
      unint64_t v12 = v8[4];
      BOOL v13 = v12 >= a2;
      if (v12 >= a2) {
        uint64_t v14 = v8;
      }
      else {
        uint64_t v14 = v8 + 1;
      }
      if (v13) {
        uint64_t v11 = (uint64_t **)v8;
      }
      uint64_t v8 = (void *)*v14;
    }
    while (*v14);
    if (v11 == v9 || (unint64_t)v11[4] > a2)
    {
LABEL_13:
      v51[0] = 0;
      v51[1] = 0;
      uint64_t v50 = v51;
      unint64_t v46 = (unint64_t *)a2;
      std::map<unsigned long,unsigned long>::map[abi:ne180100]((uint64_t)&v47, &v50);
      uint64_t v15 = (uint64_t *)v46;
      unint64_t v16 = *v9;
      BOOL v17 = (uint64_t **)((char *)this + 208);
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            BOOL v17 = (uint64_t **)v16;
            unint64_t v18 = v16[4];
            if (v18 <= (unint64_t)v46) {
              break;
            }
            unint64_t v16 = *v17;
            uint64_t v9 = v17;
            if (!*v17) {
              goto LABEL_20;
            }
          }
          if (v18 >= (unint64_t)v46) {
            break;
          }
          unint64_t v16 = v17[1];
          if (!v16)
          {
            uint64_t v9 = v17 + 1;
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        uint64_t v19 = (uint64_t *)operator new(0x40uLL);
        unint64_t v21 = v47;
        unint64_t v20 = v48;
        v19[6] = (uint64_t)v48;
        uint64_t v22 = v19 + 6;
        v19[4] = (uint64_t)v15;
        v19[5] = (uint64_t)v21;
        uint64_t v23 = v49;
        v19[7] = v49;
        if (v23)
        {
          void v20[2] = v22;
          unint64_t v47 = &v48;
          char v48 = 0;
          uint64_t v49 = 0;
        }
        else
        {
          v19[5] = (uint64_t)v22;
        }
        std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)this + 25, (uint64_t)v17, v9, v19);
        unint64_t v4 = (unint64_t)v53;
      }
      std::__tree<CRCHuint128>::destroy((uint64_t)&v47, v48);
      uint64_t v27 = *((void *)this + 5);
      if (*(void *)(v27 + 56 * v4))
      {
        unint64_t v28 = 0;
        uint64_t v29 = 0;
        do
        {
          uint64_t v30 = *(void *)(*((void *)this + 11) + 80 * (*(void *)(v27 + 56 * v4 + 16) + v28) + 16);
          if (v29 != v30)
          {
            uint64_t v31 = std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)this + 25, v4, (uint64_t *)&v53);
            unint64_t v32 = operator new(0x30uLL);
            v32[4] = v30;
            v32[5] = v28;
            BOOL v33 = (uint64_t **)(v31 + 6);
            char v34 = (uint64_t *)v31[6];
            if (v34)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v35 = (uint64_t **)v34;
                  unint64_t v36 = v34[4];
                  if (v36 <= v30) {
                    break;
                  }
                  char v34 = *v35;
                  BOOL v33 = v35;
                  if (!*v35) {
                    goto LABEL_40;
                  }
                }
                if (v36 >= v30) {
                  break;
                }
                char v34 = v35[1];
                if (!v34)
                {
                  BOOL v33 = v35 + 1;
                  goto LABEL_40;
                }
              }
              operator delete(v32);
            }
            else
            {
              uint64_t v35 = (uint64_t **)(v31 + 6);
LABEL_40:
              std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)v31 + 5, (uint64_t)v35, v33, v32);
              unint64_t v4 = (unint64_t)v53;
            }
            uint64_t v27 = *((void *)this + 5);
          }
          ++v28;
          uint64_t v29 = v30;
        }
        while (*(void *)(v27 + 56 * v4) > v28);
      }
      std::__tree<CRCHuint128>::destroy((uint64_t)&v50, v51[0]);
    }
    int v37 = std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)this + 25, v4, (uint64_t *)&v53);
    uint64_t v40 = v37[6];
    uint64_t v38 = v37 + 6;
    unint64_t v39 = (void *)v40;
    if (!v40) {
      goto LABEL_56;
    }
    int v41 = v38;
    do
    {
      unint64_t v42 = v39[4];
      BOOL v43 = v42 >= a3;
      if (v42 >= a3) {
        int v44 = v39;
      }
      else {
        int v44 = v39 + 1;
      }
      if (v43) {
        int v41 = v39;
      }
      unint64_t v39 = (void *)*v44;
    }
    while (*v44);
    if (v41 == v38 || v41[4] > a3) {
LABEL_56:
    }
      int v41 = v38;
    if (v41 != std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v10, v4, (uint64_t *)&v53)+ 6)
    {
      uint64_t v45 = std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v10, v4, (uint64_t *)&v53);
      unint64_t v46 = &v52;
      return std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)v45 + 5, &v52, (uint64_t)&std::piecewise_construct, (uint64_t **)&v46)[5];
    }
    return -1;
  }
  if (!v7) {
    return -1;
  }
  uint64_t result = 0;
  unint64_t v25 = (uint64_t *)(*((void *)this + 11) + 80 * *(void *)(v6 + 56 * a2 + 16) + 16);
  while (1)
  {
    uint64_t v26 = *v25;
    v25 += 10;
    if (v26 == a3) {
      break;
    }
    if (v7 == ++result) {
      return -1;
    }
  }
  return result;
}

void sub_1DD7F6CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, char a14, void *a15)
{
  std::__tree<CRCHuint128>::destroy(v15, a12);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

BOOL CRCHNetwork::addCWComposedCharacterEdge(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, char a12)
{
  v51[0] = a6;
  v51[1] = a7;
  uint64_t v50 = *(void *)(a4 + 16);
  uint64_t v19 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a4, v51, &v50);
  uint64_t v49 = v19;
  unint64_t v36 = a6;
  unint64_t v37 = a2;
  if (*(unsigned char *)(*(void *)(a2 + 40) + 56 * a6 + 48) && *(unsigned char *)(*(void *)(a3 + 40) + 56 * a7 + 48))
  {
    unint64_t v20 = *(void **)(a10 + 8);
    if (!v20) {
      goto LABEL_14;
    }
    unint64_t v21 = (void *)(a10 + 8);
    do
    {
      unint64_t v22 = v20[4];
      BOOL v23 = v22 >= (unint64_t)v19;
      if (v22 >= (unint64_t)v19) {
        uint64_t v24 = v20;
      }
      else {
        uint64_t v24 = v20 + 1;
      }
      if (v23) {
        unint64_t v21 = v20;
      }
      unint64_t v20 = (void *)*v24;
    }
    while (*v24);
    if (v21 == (void *)(a10 + 8) || (unint64_t)v19 < v21[4])
    {
LABEL_14:
      std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)a10, (unint64_t *)&v49, (uint64_t *)&v49);
      uint64_t v19 = v49;
    }
  }
  unint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v25 = a5;
  v41[0] = a5;
  v41[1] = v19;
  uint64_t v26 = *(void *)(a8 + 16);
  uint64_t v28 = *(void *)(a8 + 40);
  uint64_t v27 = *(void *)(a8 + 48);
  _OWORD v41[2] = v26;
  uint64_t v44 = v28;
  uint64_t v45 = v27;
  unint64_t v46 = 0;
  if (a12)
  {
    unint64_t v29 = v37;
    CRCHNetwork::getSymbol(&__p, v37, *(void *)(a8 + 24));
    uint64_t v30 = CRCHSymbolMap::store((void *)(a1 + 136), (long long *)&__p);
    uint64_t v42 = v30;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    double v31 = *(double *)(a8 + 32);
  }
  else
  {
    CRCHNetwork::getSymbol(&v39, a3, *(void *)(a9 + 24));
    uint64_t v30 = CRCHSymbolMap::store((void *)(a1 + 136), (long long *)&v39);
    uint64_t v42 = v30;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    double v31 = *(double *)(a9 + 32) + *(double *)(a8 + 32);
    unint64_t v29 = v37;
  }
  double v43 = v31;
  *(void *)&long long v38 = v25 | ((unint64_t)v19 << 32);
  *((void *)&v38 + 1) = v26 | ((unint64_t)v30 << 32);
  if (a1 + 232 == std::__tree<CRCHuint128>::find<CRCHuint128>(a1 + 224, &v38))
  {
    unint64_t v33 = a11[1];
    if (v33 >= a11[2])
    {
      uint64_t v34 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>(a11, (const NetworkEdge *)v41);
    }
    else
    {
      *(void *)unint64_t v33 = v25;
      *(void *)(v33 + 8) = v19;
      *(void *)(v33 + 16) = v26;
      *(void *)(v33 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v30;
      *(double *)(v33 + 32) = v31;
      *(void *)(v33 + 40) = v28;
      *(void *)(v33 + 48) = v27;
      *(void *)(v33 + 64) = 0;
      *(void *)(v33 + 72) = 0;
      *(void *)(v33 + 56) = 0;
      uint64_t v34 = v33 + 80;
      a11[1] = v33 + 80;
    }
    a11[1] = v34;
    std::__tree<CRCHuint128>::__emplace_unique_key_args<CRCHuint128,CRCHuint128 const&>((uint64_t **)(a1 + 224), &v38, &v38);
    int v32 = *(unsigned __int8 *)(*(void *)(v29 + 40) + 56 * v36 + 48);
    if (v46)
    {
      unint64_t v47 = v46;
      operator delete(v46);
    }
  }
  else
  {
    int v32 = *(unsigned __int8 *)(*(void *)(v29 + 40) + 56 * v36 + 48);
  }
  return v32 != 0;
}

void sub_1DD7F6FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *CRCHNodeTupleMap<unsigned long>::add(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  uint64_t v8 = a1 + 1;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint64_t v9 = a1 + 1;
    uint64_t v10 = a1[1];
    do
    {
      unint64_t v11 = v10[4];
      BOOL v13 = v11 == v5;
      BOOL v12 = v11 < v5;
      if (v13) {
        BOOL v12 = v10[5] < v6;
      }
      BOOL v13 = !v12;
      if (v12) {
        uint64_t v14 = (uint64_t **)(v10 + 1);
      }
      else {
        uint64_t v14 = (uint64_t **)v10;
      }
      if (v13) {
        uint64_t v9 = (uint64_t **)v10;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
    if (v9 != v8)
    {
      uint64_t v15 = v9[4];
      BOOL v13 = v15 == (uint64_t *)v5;
      BOOL v16 = (unint64_t)v15 > v5;
      if (v13) {
        BOOL v16 = (unint64_t)v9[5] > v6;
      }
      if (!v16) {
        return v9[6];
      }
    }
    uint64_t v17 = *a3;
    do
    {
      while (1)
      {
        unint64_t v18 = (uint64_t **)v7;
        unint64_t v19 = v7[4];
        unint64_t v20 = v18[5];
        BOOL v21 = (unint64_t)v20 > v6;
        if (v19 != v5) {
          BOOL v21 = v19 > v5;
        }
        if (!v21) {
          break;
        }
        unint64_t v7 = *v18;
        if (!*v18)
        {
          uint64_t v8 = v18;
          goto LABEL_29;
        }
      }
      BOOL v22 = (unint64_t)v20 < v6;
      BOOL v13 = v19 == v5;
      BOOL v23 = v19 < v5;
      if (v13) {
        BOOL v23 = v22;
      }
      if (!v23) {
        goto LABEL_33;
      }
      unint64_t v7 = v18[1];
    }
    while (v7);
    uint64_t v8 = v18 + 1;
  }
  else
  {
    uint64_t v17 = *a3;
    unint64_t v18 = a1 + 1;
  }
LABEL_29:
  uint64_t v24 = (uint64_t *)operator new(0x38uLL);
  v24[4] = v5;
  void v24[5] = v6;
  v24[6] = v17;
  *uint64_t v24 = 0;
  v24[1] = 0;
  void v24[2] = (uint64_t)v18;
  *uint64_t v8 = v24;
  uint64_t v25 = (uint64_t *)**a1;
  if (v25)
  {
    *a1 = v25;
    uint64_t v26 = *v8;
  }
  else
  {
    uint64_t v26 = v24;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  uint64_t v17 = *a3;
LABEL_33:
  *a3 = v17 + 1;
  return (uint64_t *)v17;
}

BOOL CRCHNetwork::addCWComposedCharacterEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, int a7, uint64_t a8, void *a9, uint64_t **a10, uint64_t *a11)
{
  v40[0] = a5;
  v40[1] = a6;
  uint64_t v39 = *(void *)(a3 + 16);
  uint64_t v17 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a3, v40, &v39);
  long long v38 = v17;
  uint64_t v32 = a2;
  if (*(unsigned char *)(*(void *)(a2 + 40) + 56 * a5 + 48)) {
    BOOL v18 = a7 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    if (a10[2])
    {
      uint64_t v17 = (uint64_t *)(*a10)[4];
      long long v38 = v17;
    }
    else
    {
      unint64_t v19 = a10[1];
      if (!v19) {
        goto LABEL_18;
      }
      unint64_t v20 = a10 + 1;
      do
      {
        unint64_t v21 = v19[4];
        BOOL v22 = v21 >= (unint64_t)v17;
        if (v21 >= (unint64_t)v17) {
          BOOL v23 = (uint64_t **)v19;
        }
        else {
          BOOL v23 = (uint64_t **)(v19 + 1);
        }
        if (v22) {
          unint64_t v20 = (uint64_t **)v19;
        }
        unint64_t v19 = *v23;
      }
      while (*v23);
      if (v20 == a10 + 1 || v17 < v20[4])
      {
LABEL_18:
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a10, (unint64_t *)&v38, (uint64_t *)&v38);
        uint64_t v17 = v38;
      }
    }
  }
  std::string __p = 0;
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  v34[0] = a4;
  v34[1] = v17;
  uint64_t v24 = a9[2];
  uint64_t v26 = a9[5];
  uint64_t v25 = a9[6];
  v34[5] = v26;
  v34[6] = v25;
  v34[2] = v24;
  v34[3] = a8;
  uint64_t v27 = a9[4];
  v34[4] = v27;
  *(void *)&long long v33 = a4 | ((unint64_t)v17 << 32);
  *((void *)&v33 + 1) = v24 | ((unint64_t)a8 << 32);
  if (a1 + 232 == std::__tree<CRCHuint128>::find<CRCHuint128>(a1 + 224, &v33))
  {
    unint64_t v29 = (void *)a11[1];
    if ((unint64_t)v29 >= a11[2])
    {
      uint64_t v30 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>(a11, (const NetworkEdge *)v34);
    }
    else
    {
      *unint64_t v29 = a4;
      v29[1] = v17;
      _OWORD v29[2] = v24;
      v29[3] = a8;
      v29[4] = v27;
      v29[5] = v26;
      v29[6] = v25;
      v29[8] = 0;
      v29[9] = 0;
      v29[7] = 0;
      uint64_t v30 = (uint64_t)(v29 + 10);
      a11[1] = (uint64_t)(v29 + 10);
    }
    a11[1] = v30;
    std::__tree<CRCHuint128>::__emplace_unique_key_args<CRCHuint128,CRCHuint128 const&>((uint64_t **)(a1 + 224), &v33, &v33);
    int v28 = *(unsigned __int8 *)(*(void *)(v32 + 40) + 56 * a5 + 48);
    if (__p)
    {
      unint64_t v36 = __p;
      operator delete(__p);
    }
  }
  else
  {
    int v28 = *(unsigned __int8 *)(*(void *)(v32 + 40) + 56 * a5 + 48);
  }
  return v28 != 0;
}

void sub_1DD7F737C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void getStringFromCursor(uint64_t a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v3 = LMLexiconCursorTraversedLength();
  v4[0] = 0;
  LMLexiconCursorGetTraversedCharacters();
  iv2s(v4, v3, a1);
}

void CRCHNetwork::expandForLM(uint64_t **a1, void *a2, int a3, char **a4)
{
  uint64_t v8 = a1 + 9;
  std::__tree<CRCHuint128>::destroy((uint64_t)(a1 + 8), a1[9]);
  *(v8 - 1) = v8;
  *uint64_t v8 = 0;
  uint64_t v9 = (uint64_t)(v8 - 4);
  v8[1] = 0;
  std::vector<CRCHNetworkNode>::resize((uint64_t)(v8 - 4), 0);
  if (a3 < 2) {
    return;
  }
  std::vector<CRCHNetworkNode>::resize((uint64_t)(v8 - 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
  CRCHSymbolMap::operator=((uint64_t)(a1 + 17), (uint64_t)(a2 + 17));
  int v60 = a3;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  int v10 = 1;
  do
  {
    CRCHLMHistory::push(&v60, 0);
    ++v10;
  }
  while (a3 != v10);
  uint64_t v12 = a2[5];
  uint64_t v11 = a2[6];
  unint64_t v58 = 0;
  char v59 = 0;
  int v57 = 0;
  v55.__begin_ = (std::vector<int>::pointer)&v57;
  LOBYTE(v55.__end_) = 0;
  uint64_t v13 = v11 - v12;
  if (v13)
  {
    unint64_t v14 = v13 / 56;
    if ((unint64_t)(v13 / 56) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<BOOL>>>(v14);
    int v57 = v15;
    char v59 = &v15[24 * v16];
    uint64_t v17 = 24 * v14;
    BOOL v18 = v15 + 8;
    do
    {
      *BOOL v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    unint64_t v58 = &v15[24 * v14];
  }
  unint64_t v56 = 0;
  uint64_t v19 = a2[4];
  if (v60 == 2)
  {
    unint64_t v20 = v19 & 0xFFFFF | ((HIDWORD(v61) & 0xFFFFFLL) << 20);
  }
  else
  {
    unint64_t v20 = 0;
    if (v60 == 3) {
      unint64_t v20 = v19 & 0xFFFFF | ((unint64_t)(HIDWORD(v61) & 0xFFFFF) << 20) | ((unint64_t)(v62 & 0xFFFFF) << 40);
    }
  }
  unint64_t v21 = &v57[24 * v19];
  BOOL v22 = (void *)*((void *)v21 + 1);
  if (!v22) {
    goto LABEL_24;
  }
  BOOL v23 = v21 + 8;
  do
  {
    unint64_t v24 = v22[4];
    BOOL v25 = v24 >= v20;
    if (v24 >= v20) {
      uint64_t v26 = v22;
    }
    else {
      uint64_t v26 = v22 + 1;
    }
    if (v25) {
      BOOL v23 = (char *)v22;
    }
    BOOL v22 = (void *)*v26;
  }
  while (*v26);
  if (v23 == v21 + 8 || v20 < *((void *)v23 + 4))
  {
LABEL_24:
    std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((uint64_t **)v21, v20, v20, 0);
    unint64_t v56 = 1;
  }
  std::vector<int>::vector(&v55, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
  std::vector<int>::vector(&v54, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
  std::vector<int>::vector(&v53, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
  CRCHNetwork::storeAllLMContextDFS2((uint64_t)a1, (uint64_t)a2, a2[4], &v57, (int *)&v56, &v53, &v55, &v54, a3);
  uint64_t v27 = v57;
  int v28 = v58;
  if (v57 == v58)
  {
    unint64_t v29 = 0;
    double v31 = a4 + 1;
    uint64_t v34 = a4;
    long long v33 = *a4;
    unint64_t v35 = (a4[1] - *a4) >> 3;
LABEL_42:
    if (v35 > v29) {
      *double v31 = &v33[8 * v29];
    }
    uint64_t v45 = v34;
    goto LABEL_45;
  }
  uint64_t v52 = v9;
  unint64_t v29 = 0;
  uint64_t v30 = (uint64_t)v57;
  do
  {
    v29 += *(void *)(v30 + 16);
    v30 += 24;
  }
  while ((char *)v30 != v58);
  double v31 = a4 + 1;
  uint64_t v32 = a4[1];
  long long v33 = *a4;
  uint64_t v34 = a4;
  unint64_t v35 = (v32 - *a4) >> 3;
  if (v29 <= v35)
  {
    uint64_t v9 = v52;
    goto LABEL_42;
  }
  unint64_t v36 = v29 - v35;
  unsigned int v51 = v34;
  uint64_t v37 = v34[2];
  if (v29 - v35 <= (v37 - v32) >> 3)
  {
    bzero(v32, 8 * v36);
    *double v31 = &v32[8 * v36];
    uint64_t v45 = v51;
    uint64_t v9 = v52;
  }
  else
  {
    if (v29 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v38 = v37 - v33;
    if (v38 >> 2 > v29) {
      unint64_t v29 = v38 >> 2;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v29;
    }
    if (v39 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v40 = (char *)operator new(8 * v39);
    int v41 = &v40[8 * v35];
    uint64_t v42 = &v40[8 * v39];
    bzero(v41, 8 * v36);
    double v43 = &v41[8 * v36];
    while (v32 != v33)
    {
      uint64_t v44 = *((void *)v32 - 1);
      v32 -= 8;
      *((void *)v41 - 1) = v44;
      v41 -= 8;
    }
    uint64_t v45 = v51;
    uint64_t v9 = v52;
    *unsigned int v51 = v41;
    v51[1] = v43;
    _OWORD v51[2] = v42;
    if (v33)
    {
      operator delete(v33);
      uint64_t v27 = v57;
      int v28 = v58;
    }
  }
LABEL_45:
  if (v27 != v28)
  {
    unint64_t v46 = *v45;
    do
    {
      unint64_t v47 = *(char **)v27;
      if (*(char **)v27 != v27 + 8)
      {
        do
        {
          *(void *)&v46[8 * *((void *)v47 + 5)] = (*((void *)v47 + 4) >> 20) & 0xFFFFFFFFFFLL;
          uint64_t v48 = (char *)*((void *)v47 + 1);
          if (v48)
          {
            do
            {
              uint64_t v49 = v48;
              uint64_t v48 = *(char **)v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              uint64_t v49 = (char *)*((void *)v47 + 2);
              BOOL v50 = *(void *)v49 == (void)v47;
              unint64_t v47 = v49;
            }
            while (!v50);
          }
          unint64_t v47 = v49;
        }
        while (v49 != v27 + 8);
      }
      v27 += 24;
    }
    while (v27 != v28);
  }
  std::vector<CRCHNetworkNode>::resize(v9, v56);
  CRCHNetwork::buildNewGraphFromLMContexts(a1, a2, (uint64_t *)&v57, a3);
  if (v53.__begin_)
  {
    v53.__end_ = v53.__begin_;
    operator delete(v53.__begin_);
  }
  if (v54.__begin_)
  {
    v54.__end_ = v54.__begin_;
    operator delete(v54.__begin_);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  v55.__begin_ = (std::vector<int>::pointer)&v57;
  std::vector<std::map<unsigned long long,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
}

void sub_1DD7F78F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  a18 = &a22;
  std::vector<std::map<unsigned long long,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

int *CRCHLMHistory::push(int *this, int a2)
{
  int v2 = *this;
  uint64_t v3 = this[1];
  if (v3 < *this - 1)
  {
    this[v3 + 2] = a2;
    int v4 = v3 + 1;
LABEL_8:
    this[1] = v4;
    return this;
  }
  if (!v3)
  {
    int v4 = 1;
    this[2] = a2;
    goto LABEL_8;
  }
  uint64_t v5 = &this[(v3 - 1)];
  int v6 = v5[2];
  _WORD v5[2] = a2;
  if (v2 == 4)
  {
    this[2] = this[3];
    this[3] = v6;
  }
  else if (v2 == 3)
  {
    this[2] = v6;
  }
  return this;
}

uint64_t CRCHNetwork::storeAllLMContextDFS2(uint64_t result, uint64_t a2, uint64_t a3, void *a4, int *a5, void *a6, void *a7, void *a8, int a9)
{
  if (*(int *)(*a6 + 4 * a3) <= 0)
  {
    long long v45 = 0u;
    memset(v44, 0, sizeof(v44));
    int v10 = (void *)(*a4 + 24 * a3);
    uint64_t v11 = (void *)*v10;
    uint64_t v30 = v10 + 1;
    uint64_t v31 = result;
    if ((void *)*v10 == v10 + 1) {
      return std::deque<std::pair<int,int>>::~deque[abi:ne180100](v44);
    }
    uint64_t v29 = 56 * a3;
    for (char i = 1; ; char i = 0)
    {
      uint64_t v16 = *(void *)(a2 + 40);
      if (!*(void *)(v16 + v29))
      {
        *(_DWORD *)(*a6 + 4 * a3) = 1;
        goto LABEL_43;
      }
      unint64_t v17 = 0;
      uint64_t v32 = (v11[4] >> 40) & 0xFFFFFLL;
      do
      {
        NetworkEdge::NetworkEdge((NetworkEdge *)v39, (const NetworkEdge *)(*(void *)(a2 + 88) + 80 * (v17 + *(void *)(v16 + 56 * a3 + 16))));
        int v36 = a9;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        if (a9 == 3) {
          CRCHLMHistory::push(&v36, v32);
        }
        CRCHLMHistory::push(&v36, v41);
        if (*(unsigned char *)(*(void *)(a2 + 40) + 56 * v40[0] + 48))
        {
          if (v36 == 2 || v36 == 3)
          {
            unint64_t v18 = v40[0] & 0xFFFFF;
            goto LABEL_17;
          }
LABEL_15:
          unint64_t v18 = 0;
          goto LABEL_17;
        }
        if (v36 != 2)
        {
          if (v36 == 3)
          {
            unint64_t v18 = v40[0] & 0xFFFFF | ((unint64_t)(HIDWORD(v37) & 0xFFFFF) << 20) | ((unint64_t)(v38 & 0xFFFFF) << 40);
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        unint64_t v18 = v40[0] & 0xFFFFF | ((HIDWORD(v37) & 0xFFFFFLL) << 20);
LABEL_17:
        if (std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((uint64_t **)(*a4 + 24 * v40[0]), v18, v18, *a5))++*(void *)a5; {
        uint64_t v19 = v40[0];
        }
        int v20 = *(_DWORD *)(*a8 + 4 * v40[0]);
        if (i) {
          *(_DWORD *)(*a8 + 4 * v40[0]) = ++v20;
        }
        if (*(void *)(*(void *)(a2 + 40) + 56 * v19 + 8) == v20)
        {
          *(_DWORD *)(*a7 + 4 * v19) = 1;
          std::deque<unsigned long>::push_back(v44, v40);
        }
        if (__p)
        {
          double v43 = __p;
          operator delete(__p);
        }
        ++v17;
        uint64_t v16 = *(void *)(a2 + 40);
      }
      while (v17 < *(void *)(v16 + 56 * a3));
      uint64_t v21 = *((void *)&v45 + 1);
      *(_DWORD *)(*a6 + 4 * a3) = 1;
      if (v21)
      {
        do
        {
          uint64_t v22 = v21 - 1;
          uint64_t v23 = *(void *)(*(void *)(*((void *)&v44[0] + 1)
                                      + (((unint64_t)(v45 + v22) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v45 + v22) & 0x1FF));
          *((void *)&v45 + 1) = v22;
          std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v44, 1);
          uint64_t v24 = *(void *)(a2 + 40);
          if (!*(unsigned char *)(v24 + 56 * v23 + 48) && !*(_DWORD *)(*a6 + 4 * v23))
          {
            CRCHNetwork::storeAllLMContextDFS2(v31, a2, v23, a4, a5, a6, a7, a8, a9);
            uint64_t v24 = *(void *)(a2 + 40);
          }
          if (*(void *)(v24 + 56 * a3))
          {
            uint64_t v25 = 0;
            while (1)
            {
              NetworkEdge::NetworkEdge((NetworkEdge *)v39, (const NetworkEdge *)(*(void *)(a2 + 88) + 80 * (v25 + *(void *)(v24 + 56 * a3 + 16))));
              uint64_t v24 = *(void *)(a2 + 40);
              if (!*(unsigned char *)(v24 + 56 * v40[0] + 48)
                && !*(_DWORD *)(*a6 + 4 * v40[0])
                && *(int *)(*a7 + 4 * v40[0]) >= 1)
              {
                break;
              }
              if (__p)
              {
                double v43 = __p;
                operator delete(__p);
                uint64_t v24 = *(void *)(a2 + 40);
              }
              if (*(void *)(v24 + 56 * a3) <= (unint64_t)++v25) {
                goto LABEL_38;
              }
            }
            std::deque<unsigned long>::push_back(v44, v40);
            if (__p)
            {
              double v43 = __p;
              operator delete(__p);
            }
          }
LABEL_38:
          uint64_t v21 = *((void *)&v45 + 1);
        }
        while (*((void *)&v45 + 1));
      }
LABEL_43:
      uint64_t v26 = (void *)v11[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v11[2];
          BOOL v28 = *v27 == (void)v11;
          uint64_t v11 = v27;
        }
        while (!v28);
      }
      uint64_t v11 = v27;
      if (v27 == v30) {
        return std::deque<std::pair<int,int>>::~deque[abi:ne180100](v44);
      }
    }
  }
  return result;
}

void sub_1DD7F7DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::pair<int,int>>::~deque[abi:ne180100]((void *)(v31 - 144));
  _Unwind_Resume(a1);
}

void CRCHNetwork::buildNewGraphFromLMContexts(uint64_t **a1, void *a2, uint64_t *a3, int a4)
{
  std::vector<int> v55 = 0;
  unint64_t v56 = 0;
  unint64_t v57 = 0;
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[6];
  if (v5 != v4)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (void *)(*a3 + 24 * v7);
      uint64_t v9 = (void *)*v8;
      uint64_t v40 = v8 + 1;
      if ((void *)*v8 != v8 + 1)
      {
        do
        {
          if (*(void *)(v4 + 56 * v7))
          {
            unint64_t v10 = 0;
            unint64_t v11 = v9[4];
            do
            {
              NetworkEdge::NetworkEdge((NetworkEdge *)&v47, (const NetworkEdge *)(a2[11] + 80 * (*(void *)(v4 + 56 * v7 + 16) + v10)));
              int v44 = a4;
              uint64_t v45 = 0;
              uint64_t v46 = 0;
              if (a4 == 3) {
                CRCHLMHistory::push(&v44, (v11 >> 40) & 0xFFFFF);
              }
              uint64_t v12 = *(void *)v50;
              CRCHLMHistory::push(&v44, v50[0]);
              unint64_t v13 = v48;
              if (*(unsigned char *)(a2[5] + 56 * v48 + 48))
              {
                if (v44 == 3) {
                  unint64_t v14 = v48 & 0xFFFFF;
                }
                else {
                  unint64_t v14 = 0;
                }
                if (v44 == 2) {
                  unint64_t v15 = v48 & 0xFFFFF;
                }
                else {
                  unint64_t v15 = v14;
                }
              }
              else if (v44 == 2)
              {
                unint64_t v15 = v48 & 0xFFFFF | ((HIDWORD(v45) & 0xFFFFFLL) << 20);
              }
              else if (v44 == 3)
              {
                unint64_t v15 = v48 & 0xFFFFF | ((unint64_t)(HIDWORD(v45) & 0xFFFFF) << 20) | ((unint64_t)(v46 & 0xFFFFF) << 40);
              }
              else
              {
                unint64_t v15 = 0;
              }
              uint64_t v16 = *a3;
              uint64_t v17 = *a3 + 24 * v47;
              int v20 = *(void **)(v17 + 8);
              uint64_t v18 = v17 + 8;
              uint64_t v19 = v20;
              if (!v20) {
                goto LABEL_26;
              }
              uint64_t v21 = (void *)v18;
              do
              {
                unint64_t v22 = v19[4];
                BOOL v23 = v22 >= v11;
                if (v22 >= v11) {
                  uint64_t v24 = v19;
                }
                else {
                  uint64_t v24 = v19 + 1;
                }
                if (v23) {
                  uint64_t v21 = v19;
                }
                uint64_t v19 = (void *)*v24;
              }
              while (*v24);
              if (v21 != (void *)v18 && v21[4] <= v11) {
                uint64_t v25 = v21[5];
              }
              else {
LABEL_26:
              }
                uint64_t v25 = -1;
              uint64_t v47 = v25;
              uint64_t v26 = v16 + 24 * v48;
              uint64_t v29 = *(void **)(v26 + 8);
              uint64_t v27 = (void *)(v26 + 8);
              BOOL v28 = v29;
              if (!v29) {
                goto LABEL_38;
              }
              uint64_t v30 = v27;
              do
              {
                unint64_t v31 = v28[4];
                BOOL v32 = v31 >= v15;
                if (v31 >= v15) {
                  long long v33 = v28;
                }
                else {
                  long long v33 = v28 + 1;
                }
                if (v32) {
                  uint64_t v30 = v28;
                }
                BOOL v28 = (void *)*v33;
              }
              while (*v33);
              if (v30 != v27 && v30[4] <= v15) {
                unint64_t v34 = v30[5];
              }
              else {
LABEL_38:
              }
                unint64_t v34 = -1;
              unint64_t v48 = v34;
              unint64_t v35 = v56;
              if ((unint64_t)v56 >= v57)
              {
                uint64_t v36 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v55, (const NetworkEdge *)&v47);
              }
              else
              {
                *unint64_t v56 = v25;
                v35[1] = v34;
                uint64_t v35[2] = v49;
                v35[3] = v12;
                v35[4] = v51;
                *(_OWORD *)(v35 + 5) = v52;
                v35[8] = 0;
                v35[9] = 0;
                v35[7] = 0;
                std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(v35 + 7, __p, (uint64_t)v54, (v54 - (unsigned char *)__p) >> 3);
                uint64_t v36 = (uint64_t)(v35 + 10);
              }
              unint64_t v56 = (void *)v36;
              if (*(unsigned char *)(a2[5] + 56 * v13 + 48)) {
                CRCHNetwork::setFinal(a1, v48);
              }
              if (__p)
              {
                std::vector<int> v54 = __p;
                operator delete(__p);
              }
              ++v10;
              uint64_t v4 = a2[5];
            }
            while (*(void *)(v4 + 56 * v7) > v10);
          }
          uint64_t v37 = (void *)v9[1];
          if (v37)
          {
            do
            {
              uint64_t v38 = v37;
              uint64_t v37 = (void *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              uint64_t v38 = (void *)v9[2];
              BOOL v39 = *v38 == (void)v9;
              uint64_t v9 = v38;
            }
            while (!v39);
          }
          uint64_t v9 = v38;
        }
        while (v38 != v40);
        uint64_t v5 = a2[6];
      }
      ++v7;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3) > v7);
  }
  CRCHNetwork::insertEdges((CRCHNetwork *)a1, &v55);
  uint64_t v47 = (uint64_t)&v55;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
}

void sub_1DD7F8128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  a17 = v25 - 112;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void CRCHNetwork::storeAllLMContextDFSR(uint64_t a1, void *a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9 = *(void *)(a2[8] + 32);
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3);
  uint64_t v12 = *a3;
  unint64_t v11 = a3[1];
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a3) >> 3);
  unint64_t v14 = v10 - v13;
  if (v10 > v13)
  {
    unint64_t v15 = a3[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v11) >> 3) >= v14)
    {
      uint64_t v38 = &v11[24 * v14];
      uint64_t v39 = 0x4924924924924928 * ((uint64_t)(a2[6] - a2[5]) >> 3) - 8 * ((v11 - *a3) >> 3);
      uint64_t v40 = v11 + 8;
      do
      {
        void *v40 = 0;
        v40[1] = 0;
        *(v40 - 1) = v40;
        v40 += 3;
        v39 -= 24;
      }
      while (v39);
      a3[1] = v38;
      goto LABEL_30;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v12) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v10) {
      uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3);
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<BOOL>>>(v18);
    uint64_t v21 = &v19[24 * v13];
    unint64_t v22 = &v19[24 * v10];
    BOOL v23 = v21 + 8;
    uint64_t v24 = 24 * v10 - 24 * v13;
    do
    {
      *BOOL v23 = 0;
      v23[1] = 0;
      *(v23 - 1) = v23;
      v23 += 3;
      v24 -= 24;
    }
    while (v24);
    uint64_t v25 = &v19[24 * v20];
    uint64_t v26 = *a3;
    uint64_t v27 = a3[1];
    if (v27 == *a3)
    {
      *a3 = v21;
      a3[1] = v22;
      a3[2] = v25;
      if (!v27) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = &v21[v28];
        *((void *)v29 - 3) = *(void *)&v27[v28 - 24];
        uint64_t v30 = &v27[v28 - 16];
        uint64_t v31 = *(void *)v30;
        *(void *)&v21[v28 - 16] = *(void *)v30;
        uint64_t v32 = (uint64_t)&v21[v28 - 16];
        uint64_t v33 = *(void *)&v27[v28 - 8];
        *((void *)v29 - 1) = v33;
        if (v33)
        {
          *(void *)(v31 + 16) = v32;
          *(void *)&v27[v28 - 24] = v30;
          *(void *)uint64_t v30 = 0;
          *(void *)&v27[v28 - 8] = 0;
        }
        else
        {
          *((void *)v29 - 3) = v32;
        }
        v28 -= 24;
      }
      while (&v27[v28] != v26);
      uint64_t v27 = *a3;
      unint64_t v34 = a3[1];
      *a3 = &v21[v28];
      a3[1] = v22;
      a3[2] = v25;
      if (v34 != v27)
      {
        do
        {
          unint64_t v35 = v34 - 24;
          std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*((void **)v34 - 2));
          unint64_t v34 = v35;
        }
        while (v35 != v27);
      }
      if (!v27) {
        goto LABEL_30;
      }
    }
    operator delete(v27);
    goto LABEL_30;
  }
  if (v10 < v13)
  {
    uint64_t v36 = &v12[0x4924924924924928 * ((uint64_t)(a2[6] - a2[5]) >> 3)];
    if (v11 != v36)
    {
      do
      {
        uint64_t v37 = v11 - 24;
        std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*((void **)v11 - 2));
        unint64_t v11 = v37;
      }
      while (v37 != v36);
    }
    a3[1] = v36;
  }
LABEL_30:
  int v79 = a7;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  if (a7 >= 2)
  {
    int v41 = a7 - 1;
    do
    {
      CRCHLMHistory::push(&v79, 0);
      --v41;
    }
    while (v41);
    a7 = v79;
  }
  uint64_t v42 = a3;
  if (a7 == 2)
  {
    unint64_t v43 = v9 & 0xFFFFF | ((HIDWORD(v80) & 0xFFFFFLL) << 20);
  }
  else if (a7 == 3)
  {
    unint64_t v43 = v9 & 0xFFFFF | ((unint64_t)(HIDWORD(v80) & 0xFFFFF) << 20) | ((unint64_t)(v81 & 0xFFFFF) << 40);
  }
  else
  {
    unint64_t v43 = 0;
  }
  uint64_t v44 = (uint64_t)&(*a3)[24 * v9];
  uint64_t v47 = *(void **)(v44 + 8);
  uint64_t v45 = v44 + 8;
  uint64_t v46 = v47;
  if (!v47) {
    goto LABEL_50;
  }
  unint64_t v48 = (void *)v45;
  do
  {
    unint64_t v49 = v46[4];
    BOOL v50 = v49 >= v43;
    if (v49 >= v43) {
      uint64_t v51 = v46;
    }
    else {
      uint64_t v51 = v46 + 1;
    }
    if (v50) {
      unint64_t v48 = v46;
    }
    uint64_t v46 = (void *)*v51;
  }
  while (*v51);
  if (v48 != (void *)v45 && v43 >= v48[4])
  {
    uint64_t v52 = 0;
  }
  else
  {
LABEL_50:
    std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((uint64_t **)&(*a3)[24 * v9], v43, v43, 0);
    uint64_t v52 = 1;
  }
  uint64_t v53 = a2[5];
  if (*(void *)(v53 + 56 * v9 + 8))
  {
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0xFFFFF;
    do
    {
      uint64_t v64 = v54;
      NetworkEdge::NetworkEdge((NetworkEdge *)v75, *(const NetworkEdge **)(a2[14] + 8 * (*(void *)(v53 + 56 * v9 + 24) + v54)));
      uint64_t v56 = v75[0];
      uint64_t v57 = a2[5];
      if (!*(void *)(v57 + 56 * v75[0] + 8)) {
        goto LABEL_63;
      }
      uint64_t v58 = v9;
      unint64_t v59 = 0;
      do
      {
        NetworkEdge::NetworkEdge((NetworkEdge *)&v69, *(const NetworkEdge **)(a2[14] + 8 * (v59 + *(void *)(v57 + 56 * v56 + 24))));
        int v66 = 2;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        CRCHLMHistory::push(&v66, v72);
        CRCHLMHistory::push(&v66, v76);
        if (v66 == 2)
        {
          unint64_t v60 = v55 & 0xFFFFFF00000FFFFFLL | ((HIDWORD(v67) & 0xFFFFFLL) << 20);
        }
        else
        {
          unint64_t v60 = 0;
          if (v66 == 3) {
            unint64_t v60 = ((unint64_t)(HIDWORD(v67) & 0xFFFFF) << 20) | ((unint64_t)(v68 & 0xFFFFF) << 40) | v55;
          }
        }
        char v61 = std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((uint64_t **)&(*v42)[24 * v58], v60, v60, v52);
        if (__p)
        {
          unint64_t v74 = __p;
          operator delete(__p);
        }
        v52 += v61 & 1;
        ++v59;
        uint64_t v57 = a2[5];
        unint64_t v62 = *(void *)(v57 + 56 * v56 + 8);
        uint64_t v42 = a3;
      }
      while (v59 < v62);
      uint64_t v9 = v58;
      if (!v62)
      {
LABEL_63:
        int v69 = 2;
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        CRCHLMHistory::push(&v69, 0);
        CRCHLMHistory::push(&v69, v76);
        if (v69 == 2)
        {
          unint64_t v63 = v55 & 0xFFFFFF00000FFFFFLL | ((HIDWORD(v70) & 0xFFFFFLL) << 20);
        }
        else
        {
          unint64_t v63 = 0;
          if (v69 == 3) {
            unint64_t v63 = ((unint64_t)(HIDWORD(v70) & 0xFFFFF) << 20) | ((unint64_t)(v71 & 0xFFFFF) << 40) | v55;
          }
        }
        v52 += std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((uint64_t **)&(*v42)[24 * v9], v63, v63, v52) & 1;
      }
      if (v77)
      {
        uint64_t v78 = v77;
        operator delete(v77);
      }
      uint64_t v54 = v64 + 1;
      uint64_t v53 = a2[5];
    }
    while ((unint64_t)(v64 + 1) < *(void *)(v53 + 56 * v9 + 8));
  }
}

void sub_1DD7F868C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v27 = *(void **)(v25 + 56);
  if (v27)
  {
    *(void *)(v25 + 64) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CRCHNetwork::getEntryFromOldToNew(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = *a2 + 24 * a3;
  unint64_t v7 = *(void **)(v4 + 8);
  uint64_t v5 = v4 + 8;
  int v6 = v7;
  if (!v7) {
    return -1;
  }
  uint64_t v8 = (void *)v5;
  do
  {
    unint64_t v9 = v6[4];
    BOOL v10 = v9 >= a4;
    if (v9 >= a4) {
      unint64_t v11 = v6;
    }
    else {
      unint64_t v11 = v6 + 1;
    }
    if (v10) {
      uint64_t v8 = v6;
    }
    int v6 = (void *)*v11;
  }
  while (*v11);
  if (v8 != (void *)v5 && v8[4] <= a4) {
    return v8[5];
  }
  else {
    return -1;
  }
}

uint64_t CRCHNetwork::rescoreWithCharacterLM(uint64_t result, uint64_t a2, void *a3, int a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(result + 88);
  if (*(void *)(result + 96) != v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *(void *)(*a3 + 8 * *(void *)(v4 + v7));
      if ((v9 & 0xFFFFF) != 0)
      {
        CRCHNetwork::getSymbol(&__p, v6, v9 & 0xFFFFF);
        int v10 = sh2i((uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        int v10 = 9218;
      }
      uint64_t v11 = v9 & 0xFFFFF00000;
      if ((v9 & 0xFFFFF00000) != 0)
      {
        CRCHNetwork::getSymbol(&__p, v6, (v9 >> 20) & 0xFFFFF);
        int v12 = sh2i((uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        int v12 = 9218;
      }
      CRCHNetwork::getSymbol(&__p, v6, *(void *)(v4 + v7 + 24));
      sh2i((uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (a4 == 3) {
        __p.__r_.__value_.__r.__words[0] = __PAIR64__(v12, v10);
      }
      else {
        LODWORD(__p.__r_.__value_.__l.__data_) = v10;
      }
      uint64_t result = LMLanguageModelConditionalProbability();
      double v14 = v13 / 20.0;
      if (v11) {
        double v15 = 2.0;
      }
      else {
        double v15 = 0.8;
      }
      *(double *)(v4 + v7 + 32) = 1.0 - *(double *)(v4 + v7 + 32) + v15 * v14 + 0.0;
      ++v8;
      uint64_t v4 = *(void *)(v6 + 88);
      v7 += 80;
    }
    while (v8 < 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v6 + 96) - v4) >> 4));
  }
  return result;
}

uint64_t *CRCHNetwork::makeFinalNodeTheLastNode(CRCHNetwork *this)
{
  uint64_t v3 = *((void *)this + 8);
  uint64_t result = (uint64_t *)((char *)this + 64);
  uint64_t v4 = *(result - 3);
  unint64_t v5 = *(void *)(v3 + 32);
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((*(result - 2) - v4) >> 3) - 1;
  if (v5 != v6)
  {
    uint64_t v7 = *((void *)this + 11);
    uint64_t v8 = *((void *)this + 12) - v7;
    if (v8)
    {
      unint64_t v9 = v8 / 80;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      int v10 = (unint64_t *)(v7 + 8);
      do
      {
        uint64_t v11 = *(v10 - 1);
        unint64_t v12 = v6;
        if (v11 == v5 || (unint64_t v12 = v5, v11 == v6)) {
          *(v10 - 1) = v12;
        }
        unint64_t v13 = v6;
        if (*v10 == v5 || (unint64_t v13 = v5, *v10 == v6)) {
          *int v10 = v13;
        }
        v10 += 10;
        --v9;
      }
      while (v9);
    }
    uint64_t v14 = 56 * v5;
    double v15 = (long long *)(v4 + 56 * v5);
    unint64_t v16 = (long long *)(v4 + 56 * v6);
    long long v17 = *v15;
    long long v18 = v15[1];
    long long v20 = v16[1];
    long long v19 = v16[2];
    long long v21 = *v16;
    *((unsigned char *)v15 + 48) = *((unsigned char *)v16 + 48);
    v15[1] = v20;
    v15[2] = v19;
    *double v15 = v21;
    unint64_t v22 = (_OWORD *)(*((void *)this + 5) + 56 * v6);
    *unint64_t v22 = v17;
    v22[1] = v18;
    std::__tree<unsigned long>::__erase_unique<unsigned long>((uint64_t **)result, v5);
    *(unsigned char *)(*((void *)this + 5) + v14 + 48) = 0;
    return CRCHNetwork::setFinal((uint64_t **)this, v6);
  }
  return result;
}

void CRCHNetwork::unionNetwork(CRCHNetwork *this, const CRCHNetwork *a2, const CRCHNetwork *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *((void *)a2 + 5);
  uint64_t v6 = *((void *)a2 + 6);
  uint64_t v9 = *((void *)a3 + 5);
  uint64_t v8 = *((void *)a3 + 6);
  std::set<unsigned long>::set[abi:ne180100](v37, (uint64_t)a2 + 64);
  uint64_t v28 = (char *)a3 + 64;
  std::set<unsigned long>::set[abi:ne180100](v36, (uint64_t)a3 + 64);
  uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3);
  std::vector<CRCHNetworkNode>::resize((uint64_t)this + 40, v10 + 0x6DB6DB6DB6DB6DB7 * ((v8 - v9) >> 3) - 2);
  CRCHSymbolMap::operator=((uint64_t)this + 136, (uint64_t)a2 + 136);
  uint64_t v11 = *((void *)a2 + 11);
  if (*((void *)a2 + 12) != v11)
  {
    uint64_t v12 = 0;
    unsigned int v13 = 1;
    do
    {
      CRCHNetwork::storeEntry(this, (const NetworkEdge *)(v11 + 80 * v12));
      uint64_t v12 = v13;
      uint64_t v11 = *((void *)a2 + 11);
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*((void *)a2 + 12) - v11) >> 4) > v13++);
  }
  uint64_t v15 = *((void *)a3 + 11);
  if (*((void *)a3 + 12) != v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    while (1)
    {
      NetworkEdge::NetworkEdge((NetworkEdge *)&v30, (const NetworkEdge *)(v15 + v16));
      unint64_t v18 = v30;
      unint64_t v19 = *(void *)(v36[0] + 32);
      if (v30 == v19)
      {
        unint64_t v30 = *(void *)(v37[0] + 32);
        unint64_t v19 = v18;
      }
      else if (v30 != *((void *)a3 + 4))
      {
        long long v20 = std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v38, (uint64_t)v28);
        unint64_t v21 = *(void *)(v38.__r_.__value_.__r.__words[0] + 32);
        std::__tree<CRCHuint128>::destroy((uint64_t)v20, (void *)v38.__r_.__value_.__l.__size_);
        uint64_t v22 = -2;
        if (v18 <= v21) {
          uint64_t v22 = -1;
        }
        v30 += v22 + v10;
        unint64_t v19 = *(void *)(v36[0] + 32);
      }
      unint64_t v23 = v31;
      if (v31 == v19) {
        break;
      }
      if (v31 != *((void *)a3 + 4))
      {
        uint64_t v25 = std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v38, (uint64_t)v28);
        unint64_t v26 = *(void *)(v38.__r_.__value_.__r.__words[0] + 32);
        std::__tree<CRCHuint128>::destroy((uint64_t)v25, (void *)v38.__r_.__value_.__l.__size_);
        uint64_t v27 = -2;
        if (v23 <= v26) {
          uint64_t v27 = -1;
        }
        uint64_t v24 = v27 + v10 + v31;
        goto LABEL_18;
      }
LABEL_19:
      snprintf(__str, 0x13uLL, "0x%zx", v32);
      std::string::basic_string[abi:ne180100]<0>(&v38, __str);
      CRCHSymbolMap::store((void *)this + 17, (long long *)&v38);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      CRCHNetwork::getSymbol(&v38, (uint64_t)a3, v33);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v29, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
      }
      else {
        std::string v29 = v38;
      }
      unint64_t v33 = CRCHSymbolMap::store((void *)this + 17, (long long *)&v29);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      CRCHNetwork::storeEntry(this, (const NetworkEdge *)&v30);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (__p)
      {
        unint64_t v35 = __p;
        operator delete(__p);
      }
      ++v17;
      uint64_t v15 = *((void *)a3 + 11);
      v16 += 80;
      if (v17 >= 0xCCCCCCCCCCCCCCCDLL * ((*((void *)a3 + 12) - v15) >> 4)) {
        goto LABEL_31;
      }
    }
    uint64_t v24 = *(void *)(v37[0] + 32);
LABEL_18:
    uint64_t v31 = v24;
    goto LABEL_19;
  }
LABEL_31:
  CRCHNetwork::setFinal((uint64_t **)this, *(void *)(v37[0] + 32));
  CRCHNetwork::prepareNetwork(this);
  std::__tree<CRCHuint128>::destroy((uint64_t)v36, (void *)v36[1]);
  std::__tree<CRCHuint128>::destroy((uint64_t)v37, (void *)v37[1]);
}

void sub_1DD7F8DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30,char a31,void *a32)
{
}

uint64_t CRCHNetwork::guaranteeThatEdgesAreNonNegative(CRCHNetwork *this)
{
  uint64_t v1 = *((void *)this + 11);
  uint64_t v2 = *((void *)this + 12) - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 80;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    uint64_t v4 = (double *)(v1 + 32);
    char v5 = 1;
    do
    {
      if (*v4 < 0.000000999999997)
      {
        char v5 = 0;
        *uint64_t v4 = 0.000000999999997;
      }
      v4 += 10;
      --v3;
    }
    while (v3);
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

void CRCHNetwork::convertAllEdgesToScores(CRCHNetwork *this)
{
  uint64_t v1 = *((void *)this + 11);
  uint64_t v2 = *((void *)this + 12) - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 80;
    if (v3 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v3;
    }
    char v5 = (double *)(v1 + 32);
    do
    {
      long double v6 = 2.22044605e-16;
      if (*v5 >= 2.22044605e-16)
      {
        long double v6 = *v5;
        if (*v5 > 1.0) {
          long double v6 = 1.0;
        }
      }
      *char v5 = -log10(v6);
      v5 += 10;
      --v4;
    }
    while (v4);
  }
}

void CRCHNetwork::applyInsertionPenalty(CRCHNetwork *this, float a2)
{
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)this + 12) != v2)
  {
    unint64_t v4 = 0;
    double v5 = a2;
    do
    {
      CRCHNetwork::getSymbol(&__p, (uint64_t)this, *(void *)(v2 + 80 * v4 + 24));
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v8 = 0;
        do
        {
          int v9 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          if (v9 == 95) {
            ++v8;
          }
          --size;
        }
        while (size);
        unint64_t v10 = v8 + 1;
      }
      else
      {
        unint64_t v10 = 1;
      }
      double v11 = v5 * (double)v10;
      uint64_t v2 = *((void *)this + 11);
      *(double *)(v2 + 80 * v4 + 32) = fmax(*(double *)(v2 + 80 * v4 + 32) + v11, 0.000001);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v2 = *((void *)this + 11);
      }
      ++v4;
    }
    while (v4 < 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 12) - v2) >> 4));
  }
}

uint64_t CRCHNetwork::applyDiscount(uint64_t this, float a2)
{
  uint64_t v2 = *(uint64_t **)(this + 40);
  uint64_t v3 = *v2;
  if (*v2)
  {
    double v4 = a2;
    double v5 = (double *)(*(void *)(this + 88) + 80 * v2[2] + 32);
    do
    {
      *double v5 = fmax(*v5 + v4, 0.000001);
      v5 += 10;
      --v3;
    }
    while (v3);
  }
  return this;
}

void CRCHNetwork::composeTrimAndSimplify(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t **a5, CRCHNetwork *a6, int a7)
{
  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v14);
  CRCHNetwork::compose((uint64_t)v14, a2, a3, a4, a5);
  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v13);
  CRCHNetwork::trimDeadEdges((CRCHNetwork *)v14, (CRCHNetwork *)v13);
  CRCHNetwork::removeEpsOutputEdges((CRCHNetwork *)v13, a6, a7);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)v13);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)v14);
}

void sub_1DD7F9148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

void CRCHNetwork::composeTrimAndSimplify(CRCHNetwork *this, const CRCHNetwork *a2, CRCHNetwork *a3, CRCHNetwork *a4, int a5, char a6)
{
  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v12);
  CRCHNetwork::compose((CRCHNetwork *)v12, a2, a3, a6);
  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v11);
  CRCHNetwork::trimDeadEdges((CRCHNetwork *)v12, (CRCHNetwork *)v11);
  CRCHNetwork::removeEpsOutputEdges((CRCHNetwork *)v11, a4, a5);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)v11);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)v12);
}

void sub_1DD7F9208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

void CRCHNetwork::rescoreWithWordLMVector()
{
}

void sub_1DD7F9C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,char a29,void *a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
}

void CRCHNetwork::scoreCandidateLatticeWithWordLM(int a1, uint64_t a2, int a3, int a4, void *a5, void *a6, int a7, int a8, uint64_t a9, uint64_t **a10, std::vector<int> *a11, uint64_t a12, void *a13, void *a14)
{
  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v26);
  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v25);
  v24[0] = 0;
  v24[1] = 0;
  unint64_t v23 = v24;
  CRCHNetwork::composeTrimAndSimplify(v17, a2, a5, a6, &v23, (CRCHNetwork *)v26, 0);
  LMLexiconResetCursors();
  LMLexiconResetCursors();
  if (v28 != v27)
  {
    unint64_t v18 = (v28 - v27) / 80;
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    unint64_t v19 = (double *)(v27 + 32);
    do
    {
      if (*v19 < 0.000000999999997) {
        double *v19 = 0.000000999999997;
      }
      v19 += 10;
      --v18;
    }
    while (v18);
  }
  memset(__p, 0, sizeof(__p));
  CRCHNetwork::expandForLM(a10, v26, 2, (char **)__p);
  std::set<int>::set[abi:ne180100]((uint64_t)v21, a13);
  std::set<int>::set[abi:ne180100]((uint64_t)v20, a14);
  CRCHNetwork::rescoreWithWordLMVector();
}

void sub_1DD7FAB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__tree<CRCHuint128>::destroy(v70, (void *)a52);
  std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(v69, (void *)a49);
  CRCHSymbolMap::~CRCHSymbolMap(v68);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  *(void *)(v71 - 112) = &a34;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)(v71 - 112));
  std::__tree<CRCHuint128>::destroy((uint64_t)&a31, (void *)a32);
  if (a28) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a62) {
    operator delete(a62);
  }
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy((char *)a66);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)&a68);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

void CRCHNetwork::buildWordIDMap(uint64_t a1, uint64_t a2, std::vector<int> *this)
{
  std::vector<int>::resize(this, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 4));
  uint64_t v6 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) != v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 24;
    do
    {
      CRCHNetwork::getSymbol(&__str, a1, *(void *)(v6 + v8));
      w2i32(&__str, (char **)&v14);
      std::string __p = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v14, (uint64_t)v15, (v15 - (unsigned char *)v14) >> 2);
      int v9 = isWordValid(a2, (uint64_t *)&__p);
      if (__p)
      {
        uint64_t v12 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        uint64_t v15 = v14;
        operator delete(v14);
      }
      this->__begin_[v7] = v9;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      ++v7;
      uint64_t v6 = *(void *)(a1 + 88);
      v8 += 80;
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 96) - v6) >> 4));
  }
}

void sub_1DD7FAD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

BOOL CRCHNetwork::pathsCoincide(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = (void *)a2[8];
  uint64_t v4 = a2[9] - (void)v3;
  double v5 = (void *)a3[8];
  if ((uint64_t)(a3[9] - (void)v5) >> 3 >= (unint64_t)(v4 >> 3)) {
    unint64_t v6 = v4 >> 3;
  }
  else {
    unint64_t v6 = (uint64_t)(a3[9] - (void)v5) >> 3;
  }
  if (!v6) {
    return 1;
  }
  if (*v3 != *v5) {
    return 0;
  }
  unint64_t v7 = (void *)a2[11];
  uint64_t v8 = (void *)a3[11];
  if (*v7 != *v8) {
    return 0;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v6 == v9) {
      break;
    }
    if (v3[v9] != v5[v9]) {
      break;
    }
    ++v9;
  }
  while (v7[v10] == v8[v10]);
  return v10 >= v6;
}

void CRCHNetwork::minPath(CRCHLatticePath **a1@<X1>, CRCHLatticePath *a2@<X8>)
{
  uint64_t v4 = *a1;
  double v5 = a1[1];
  unint64_t v6 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 6));
  uint64_t v9 = MinCompareEdgePaths;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*,false>(v4, v5, (uint64_t (**)(CRCHLatticePath *, CRCHLatticePath *))&v9, v7, 1);
  uint64_t v8 = *a1;
  CRCHLatticePath::CRCHLatticePath(a2, v8);
}

BOOL MinCompareEdgePaths(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 112) < *(double *)(a2 + 112);
}

void CRCHNetwork::bestPath(CRCHNetwork *this)
{
  uint64_t v1 = *((void *)this + 6) - *((void *)this + 5);
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * (v1 >> 3);
  if (v1)
  {
    if (v2 >> 59) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v3 = operator new(0xB6DB6DB6DB6DB6E0 * (v1 >> 3));
    uint64_t v4 = v3;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0x41CFFFFFFFC00000;
      _WORD v4[2] = -1;
      v4[3] = -1;
      v4 += 4;
    }
    while (v4 != &v3[4 * v2]);
  }
  operator new[]();
}

void sub_1DD7FB62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CRCHLatticePath *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  CRCHLatticePath::~CRCHLatticePath(a9);
  if (a19) {
    MEMORY[0x1E01BF110](a19 - 16, 0x1020C805730B0C9);
  }
  if (v19) {
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::insert(char **a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = *a1;
  double v5 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v15 = ((v5 - v6) >> 3) + 1;
    if (v15 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v7 >> 3;
    uint64_t v18 = v9 - (void)v6;
    if (v18 >> 2 > v15) {
      unint64_t v15 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v15;
    }
    if (v19) {
      long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v19);
    }
    else {
      long long v20 = 0;
    }
    unint64_t v21 = &v20[8 * v17];
    uint64_t v22 = &v20[8 * v19];
    if (v17 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = v7 >> 2;
        }
        uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10, v24);
        unint64_t v21 = &v25[8 * (v24 >> 2)];
        uint64_t v22 = &v25[8 * v26];
        if (v20)
        {
          uint64_t v27 = &v25[8 * v26];
          operator delete(v20);
          uint64_t v22 = v27;
        }
      }
      else
      {
        unint64_t v23 = v17 + 2;
        if (v17 >= -1) {
          unint64_t v23 = v17 + 1;
        }
        v21 -= 8 * (v23 >> 1);
      }
    }
    *(void *)unint64_t v21 = *(void *)v3;
    uint64_t v28 = v21 + 8;
    std::string v29 = *a1;
    if (*a1 != v8)
    {
      unint64_t v30 = v8;
      do
      {
        uint64_t v31 = *((void *)v30 - 1);
        v30 -= 8;
        *((void *)v21 - 1) = v31;
        v21 -= 8;
      }
      while (v30 != v29);
    }
    size_t v32 = a1[1];
    int64_t v33 = v32 - v8;
    if (v32 != v8)
    {
      unint64_t v34 = v8;
      size_t v35 = v32 - v8;
      uint64_t v36 = v22;
      memmove(v28, v34, v35);
      uint64_t v22 = v36;
    }
    uint64_t v37 = *a1;
    *a1 = v21;
    a1[1] = &v28[v33];
    a1[2] = v22;
    if (v37)
    {
      operator delete(v37);
    }
  }
  else if (v8 == v5)
  {
    *(void *)uint64_t v8 = *(void *)a3;
    a1[1] = v8 + 8;
  }
  else
  {
    double v11 = v8 + 8;
    uint64_t v12 = v5 - 8;
    uint64_t v13 = a1[1];
    while (v12 < v5)
    {
      uint64_t v14 = *(void *)v12;
      v12 += 8;
      *(void *)uint64_t v13 = v14;
      v13 += 8;
    }
    a1[1] = v13;
    if (v5 != v11) {
      memmove(&v5[-8 * ((v5 - v11) >> 3)], v8, v5 - v11);
    }
    if (v8 <= v3) {
      v3 += 8 * (a1[1] > v3);
    }
    *(void *)uint64_t v8 = *(void *)v3;
  }
}

void sub_1DD7FB8C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CRCHNetwork::getTotalNumberOfStrokes(CRCHNetwork *this, unint64_t a2, unint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unint64_t v36 = a3;
  unint64_t v37 = a2;
  v35[0] = 0;
  v35[1] = 0;
  uint64_t v33 = 0;
  unint64_t v34 = (uint64_t *)v35;
  uint64_t v31 = &v31;
  std::string __p = &v31;
  *(void *)buf = &v36;
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v34, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[5] = 0;
  double v5 = operator new(0x18uLL);
  unint64_t v6 = v36;
  uint64_t v7 = v31;
  v5[1] = &v31;
  _WORD v5[2] = v6;
  *double v5 = v7;
  v7[1] = v5;
  BOOL v8 = __CFADD__(v33, 1);
  uint64_t v9 = v33 + 1;
  uint64_t v31 = v5;
  ++v33;
  if (v8)
  {
LABEL_16:
    *(void *)buf = &v37;
    uint64_t v24 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v34, &v37, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[5];
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v10 = (void **)__p;
    unint64_t v30 = *((void *)__p + 2);
    uint64_t v11 = *(void *)__p;
    *(void *)(v11 + 8) = *((void *)__p + 1);
    *v10[1] = v11;
    uint64_t v33 = v9 - 1;
    operator delete(v10);
    unint64_t v12 = v30;
    if (v30)
    {
      if (v30 != a2)
      {
        uint64_t v13 = *((void *)this + 5);
        if (*(void *)(v13 + 56 * v30 + 8)) {
          break;
        }
      }
    }
LABEL_15:
    uint64_t v9 = v33;
    if (!v33) {
      goto LABEL_16;
    }
  }
  unint64_t v14 = 0;
  while (2)
  {
    unint64_t v15 = *(unint64_t **)(*((void *)this + 14) + 8 * (*(void *)(v13 + 56 * v12 + 24) + v14));
    unint64_t v16 = v15[5];
    *(void *)buf = &v30;
    uint64_t v17 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v34, &v30, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[5]+ v16;
    uint64_t v18 = v35[0];
    if (!v35[0])
    {
LABEL_12:
      *(void *)buf = v15;
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v34, v15, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[5] = v17;
      unint64_t v21 = operator new(0x18uLL);
      unint64_t v22 = *v15;
      v21[1] = &v31;
      v21[2] = v22;
      unint64_t v23 = v31;
      *unint64_t v21 = v31;
      v23[1] = v21;
      uint64_t v31 = v21;
      ++v33;
      goto LABEL_14;
    }
    unint64_t v19 = *v15;
    while (1)
    {
      unint64_t v20 = v18[4];
      if (v19 >= v20) {
        break;
      }
LABEL_11:
      uint64_t v18 = (void *)*v18;
      if (!v18) {
        goto LABEL_12;
      }
    }
    if (v20 < v19)
    {
      ++v18;
      goto LABEL_11;
    }
    *(void *)buf = v15;
    if (std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v34, v15, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[5] == v17)
    {
LABEL_14:
      ++v14;
      unint64_t v12 = v30;
      uint64_t v13 = *((void *)this + 5);
      if (v14 >= *(void *)(v13 + 56 * v30 + 8)) {
        goto LABEL_15;
      }
      continue;
    }
    break;
  }
  uint64_t v25 = CHOSLogForCategory(1);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    unint64_t v26 = *v15;
    unint64_t v27 = v36;
    std::string v38 = v15;
    uint64_t v28 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v34, v15, (uint64_t)&std::piecewise_construct, (uint64_t **)&v38)[5];
    *(_DWORD *)buf = 134218752;
    *(void *)&uint8_t buf[4] = v26;
    __int16 v40 = 2048;
    unint64_t v41 = v27;
    __int16 v42 = 2048;
    uint64_t v43 = v28;
    __int16 v44 = 2048;
    uint64_t v45 = v17;
    _os_log_impl(&dword_1DD733000, v25, OS_LOG_TYPE_ERROR, "found paths with incompatible number of strokes covered from %zu to %zu: previous value %lu, value for new path %zu \n", buf, 0x2Au);
  }

  uint64_t v24 = 0;
LABEL_20:
  std::__list_imp<unsigned long>::clear(&v31);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v34, v35[0]);
  return v24;
}

void sub_1DD7FBC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
  std::__list_imp<unsigned long>::clear(&a11);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void CRCHNetwork::kBestPaths(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  unint64_t v41 = a2;
  a5;
  a6;
  uint64_t v33 = a10;
  a11;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v32 = a3;
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v38 = 0;
  uint64_t v39 = v40;
  unint64_t v36 = &v36;
  unint64_t v37 = &v36;
  unint64_t v15 = operator new(0x18uLL);
  v15[1] = &v36;
  v15[2] = a2;
  *unint64_t v15 = &v36;
  unint64_t v36 = v15;
  unint64_t v37 = v15;
  uint64_t v38 = 1;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v39, (unint64_t)a2, &v41)[5] = 0;
  uint64_t v16 = v38;
  if (!v38) {
LABEL_15:
  }
    CRCHFixedHeap<double,LatticePathPtr>::CRCHFixedHeap((uint64_t)v35, v32);
LABEL_2:
  uint64_t v17 = (void **)v37;
  uint64_t v18 = v37[1];
  unint64_t v34 = (void *)v37[2];
  unint64_t v19 = (unint64_t)v34;
  unint64_t v20 = (void *)*v37;
  v20[1] = v18;
  *v17[1] = v20;
  uint64_t v38 = v16 - 1;
  operator delete(v17);
  uint64_t v21 = *(void *)(a1 + 40);
  if (!*(void *)(v21 + 56 * v19 + 8)) {
    goto LABEL_14;
  }
  unint64_t v22 = 0;
LABEL_4:
  unint64_t v23 = *(uint64_t ***)(*(void *)(a1 + 112) + 8 * (*(void *)(v21 + 56 * v19 + 24) + v22));
  double v24 = *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v39, v19, (uint64_t **)&v34)+ 5);
  double v25 = v24 + v33[2](v33, v23);
  unint64_t v26 = (void *)v40[0];
  unint64_t v27 = *v23;
  if (!v40[0]) {
    goto LABEL_12;
  }
  while (1)
  {
    unint64_t v28 = v26[4];
    if ((unint64_t)v27 >= v28)
    {
      if (v28 >= (unint64_t)v27)
      {
        if (v25 < *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v39, (unint64_t)v27, v23)+ 5))
        {
          unint64_t v27 = *v23;
LABEL_12:
          *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v39, (unint64_t)v27, v23)+ 5) = v25;
          std::string v29 = operator new(0x18uLL);
          unint64_t v30 = *v23;
          v29[1] = &v36;
          _OWORD v29[2] = v30;
          uint64_t v31 = v36;
          *std::string v29 = v36;
          v31[1] = v29;
          unint64_t v36 = v29;
          ++v38;
        }
        ++v22;
        uint64_t v21 = *(void *)(a1 + 40);
        if (v22 >= *(void *)(v21 + 56 * v19 + 8))
        {
LABEL_14:
          uint64_t v16 = v38;
          if (!v38) {
            goto LABEL_15;
          }
          goto LABEL_2;
        }
        goto LABEL_4;
      }
      ++v26;
    }
    unint64_t v26 = (void *)*v26;
    if (!v26) {
      goto LABEL_12;
    }
  }
}

void sub_1DD7FD16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p)
{
  if (v38) {
    operator delete(v38);
  }
  std::__list_imp<unsigned long>::clear(&STACK[0x2D8]);
  if (STACK[0x308]) {
    MEMORY[0x1E01BF110](STACK[0x308] - 16, 0x1020C805730B0C9);
  }
  std::__list_imp<unsigned long>::clear((void *)(v39 - 232));
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*(void **)(v39 - 200));
  std::string __p = a21;
  std::vector<CRCHLatticePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1DD7FD284(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    unint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1DD7FD2A4()
{
}

void sub_1DD7FD2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a38) {
    JUMPOUT(0x1DD7FD358);
  }
  JUMPOUT(0x1DD7FD35CLL);
}

void sub_1DD7FD2E0()
{
  MEMORY[0x1E01BF140](v0, 0x10F0C4093C2D19BLL);
  JUMPOUT(0x1DD7FD35CLL);
}

void sub_1DD7FD328()
{
}

void sub_1DD7FD348()
{
}

uint64_t insertPathInHeap(uint64_t a1, unint64_t a2, double a3)
{
  if (*(void *)(a1 + 16) != *(void *)(a1 + 8))
  {
    return CRCHFixedHeap<double,LatticePathPtr>::insert((unsigned __int8 *)a1, a2, a3);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    double v5 = *(CRCHLatticePath **)(*(void *)(a1 + 24) + 16 * v4 + 8);
    uint64_t result = CRCHFixedHeap<double,LatticePathPtr>::insert((unsigned __int8 *)a1, a2, a3);
    if (result)
    {
      if (v5)
      {
        uint64_t v7 = v5;
        goto LABEL_12;
      }
      return result;
    }
  }
  else
  {
    uint64_t result = CRCHFixedHeap<double,LatticePathPtr>::insert((unsigned __int8 *)a1, a2, a3);
    if (result) {
      return result;
    }
  }
  if (a2)
  {
    uint64_t v7 = (CRCHLatticePath *)a2;
LABEL_12:
    CRCHLatticePath::~CRCHLatticePath(v7);
    JUMPOUT(0x1E01BF140);
  }
  return result;
}

uint64_t std::function<void ()(std::vector<unsigned long> const&,double,double,double,double,double,double)>::operator()(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v13 = a4;
  double v14 = a3;
  double v11 = a6;
  double v12 = a5;
  double v9 = a8;
  double v10 = a7;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, double *, double *, double *, double *))(*(void *)a1 + 48))(a1, a2, &v14, &v13, &v12, &v11, &v10, &v9);
}

void *CRCHLatticePath::getEdgePathInNetwork(void *this, void *a2)
{
  uint64_t v2 = a2[12] - a2[11];
  if ((unint64_t)v2 < 9)
  {
    *this = 0;
    this[1] = 0;
    this[2] = 0;
  }
  else
  {
    this = std::vector<unsigned long>::vector(this, (v2 >> 3) - 1);
    uint64_t v4 = (uint64_t *)a2[8];
    uint64_t v5 = ((uint64_t)(a2[9] - (void)v4) >> 3) - 1;
    if ((uint64_t)(a2[9] - (void)v4) >> 3 != 1)
    {
      uint64_t v6 = *(void *)(a2[7] + 40);
      uint64_t v7 = (void *)*this;
      BOOL v8 = (uint64_t *)(a2[11] + 8);
      do
      {
        uint64_t v10 = *v4++;
        uint64_t v9 = v10;
        uint64_t v11 = *v8++;
        *v7++ = *(void *)(v6 + 56 * v9 + 16) + v11;
        --v5;
      }
      while (v5);
    }
  }
  return this;
}

void CRCHLatticePath::addEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, unsigned __int8 a8, double a9, unsigned __int8 a10, unint64_t a11, char a12)
{
  id v123 = a5;
  uint64_t v124 = a6;
  unint64_t v125 = a7;
  unint64_t v19 = *(uint64_t **)(a1 + 56);
  uint64_t v20 = *v19;
  double v21 = log10(*(long double *)(*v19 + 96));
  double v22 = log10(*(long double *)(v20 + 104));
  if (a12) {
    CRCHLatticePath::updateWordSegmentationScoreAtNode((CRCHLatticePath *)a1, a2, 0);
  }
  double v23 = v125[2](v125, a1);
  *(double *)(a1 + 112) = v23;
  if (v23 > a9) {
    goto LABEL_142;
  }
  unint64_t v24 = *(void *)(a1 + 80);
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v26 = *(void *)(*(void *)(v25 + 40) + 56 * a2 + 16) + a3;
  uint64_t v27 = *(void *)(v25 + 88);
  uint64_t v28 = v27 + 80 * v26;
  uint64_t v29 = *(void *)(v28 + 8);
  long long v120 = (void *)(v28 + 8);
  unint64_t v30 = *(char **)(a1 + 72);
  if ((unint64_t)v30 >= v24)
  {
    uint64_t v32 = *(char **)(a1 + 64);
    uint64_t v33 = (v30 - v32) >> 3;
    if ((unint64_t)(v33 + 1) >> 61) {
      goto LABEL_144;
    }
    unint64_t v34 = v24 - (void)v32;
    unint64_t v35 = (uint64_t)(v24 - (void)v32) >> 2;
    if (v35 <= v33 + 1) {
      unint64_t v35 = v33 + 1;
    }
    if (v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36)
    {
      unint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 80, v36);
      uint64_t v32 = *(char **)(a1 + 64);
      unint64_t v30 = *(char **)(a1 + 72);
    }
    else
    {
      unint64_t v37 = 0;
    }
    uint64_t v38 = &v37[8 * v33];
    uint64_t v39 = &v37[8 * v36];
    *(void *)uint64_t v38 = v29;
    uint64_t v31 = v38 + 8;
    while (v30 != v32)
    {
      uint64_t v40 = *((void *)v30 - 1);
      v30 -= 8;
      *((void *)v38 - 1) = v40;
      v38 -= 8;
    }
    *(void *)(a1 + 64) = v38;
    *(void *)(a1 + 72) = v31;
    *(void *)(a1 + 80) = v39;
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    *(void *)unint64_t v30 = v29;
    uint64_t v31 = v30 + 8;
  }
  unint64_t v41 = *(void *)(a1 + 104);
  *(void *)(a1 + 72) = v31;
  __int16 v42 = *(char **)(a1 + 96);
  if ((unint64_t)v42 < v41)
  {
    *(void *)__int16 v42 = a3;
    uint64_t v43 = v42 + 8;
    goto LABEL_36;
  }
  __int16 v44 = *(char **)(a1 + 88);
  uint64_t v45 = (v42 - v44) >> 3;
  if ((unint64_t)(v45 + 1) >> 61) {
LABEL_144:
  }
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  unint64_t v46 = v41 - (void)v44;
  unint64_t v47 = (uint64_t)(v41 - (void)v44) >> 2;
  if (v47 <= v45 + 1) {
    unint64_t v47 = v45 + 1;
  }
  if (v46 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v48 = v47;
  }
  if (v48)
  {
    unint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 104, v48);
    __int16 v44 = *(char **)(a1 + 88);
    __int16 v42 = *(char **)(a1 + 96);
  }
  else
  {
    unint64_t v49 = 0;
  }
  BOOL v50 = &v49[8 * v45];
  uint64_t v51 = &v49[8 * v48];
  *(void *)BOOL v50 = a3;
  uint64_t v43 = v50 + 8;
  while (v42 != v44)
  {
    uint64_t v52 = *((void *)v42 - 1);
    v42 -= 8;
    *((void *)v50 - 1) = v52;
    v50 -= 8;
  }
  *(void *)(a1 + 88) = v50;
  *(void *)(a1 + 96) = v43;
  *(void *)(a1 + 104) = v51;
  if (v44) {
    operator delete(v44);
  }
LABEL_36:
  *(void *)(a1 + 96) = v43;
  double v53 = *(double *)(a1 + 144);
  *(double *)(a1 + 144) = v53 + v124[2](v124, v27 + 80 * v26);
  uint64_t v122 = (unint64_t *)(v27 + 80 * v26 + 40);
  *(void *)(a1 + 208) += *v122;
  double v54 = v125[2](v125, a1);
  *(double *)(a1 + 112) = v54;
  if (v54 <= a9)
  {
    uint64_t v119 = v27;
    unsigned __int8 v116 = a8;
    if (a11)
    {
      uint64_t v55 = v27 + 80 * v26;
      uint64_t v56 = *(void *)(v55 + 56);
      uint64_t v57 = *(void *)(v55 + 64);
      uint64_t v58 = (void *)(v55 + 56);
      uint64_t v59 = v57 - v56;
      if (v59)
      {
        unint64_t v115 = a11;
        uint64_t v117 = v26;
        uint64_t v60 = 0;
        char v61 = 0;
        unint64_t v62 = v59 >> 3;
        unint64_t v63 = (void **)(a1 + 248);
        uint64_t v64 = (void *)(a1 + 264);
        if (v62 <= 1) {
          uint64_t v65 = 1;
        }
        else {
          uint64_t v65 = v62;
        }
        int v66 = *(void **)(a1 + 256);
        do
        {
          uint64_t v67 = *(void *)(*v58 + 8 * v60);
          uint64_t v68 = *v63;
          uint64_t v69 = v66;
          if (*v63 != v66)
          {
            uint64_t v69 = *v63;
            while (*v69 != v67)
            {
              if (++v69 == v66)
              {
                uint64_t v69 = v66;
                break;
              }
            }
          }
          BOOL v70 = v69 != v66;
          if ((unint64_t)v66 >= *v64)
          {
            uint64_t v71 = ((char *)v66 - v68) >> 3;
            unint64_t v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 61) {
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v73 = *v64 - (void)v68;
            if (v73 >> 2 > v72) {
              unint64_t v72 = v73 >> 2;
            }
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v74 = v72;
            }
            if (v74)
            {
              unint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 264, v74);
              uint64_t v68 = *(unsigned char **)(a1 + 248);
              int v66 = *(void **)(a1 + 256);
            }
            else
            {
              unint64_t v75 = 0;
            }
            unsigned int v76 = &v75[8 * v71];
            *(void *)unsigned int v76 = v67;
            char v77 = v76 + 8;
            while (v66 != (void *)v68)
            {
              uint64_t v78 = *--v66;
              *((void *)v76 - 1) = v78;
              v76 -= 8;
            }
            *(void *)(a1 + 248) = v76;
            *(void *)(a1 + 256) = v77;
            *(void *)(a1 + 264) = &v75[8 * v74];
            if (v68) {
              operator delete(v68);
            }
            int v66 = v77;
          }
          else
          {
            *v66++ = v67;
          }
          v61 |= v70;
          *(void *)(a1 + 256) = v66;
          ++v60;
        }
        while (v60 != v65);
        uint64_t v26 = v117;
        if ((v61 & 1) != 0 || a11 < ((char *)v66 - (unsigned char *)*v63) >> 3) {
          *(double *)(a1 + 144) = a9 + 1.0 + *(double *)(a1 + 144);
        }
      }
    }
    double v79 = v125[2](v125, a1);
    *(double *)(a1 + 112) = v79;
    if (v79 <= a9)
    {
      CRCHNetwork::getSymbol(&__p, *(void *)(a1 + 56), *(void *)(v119 + 80 * v26 + 24));
      w2i32(&__p, (char **)&v127);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v80 = (v128 - (unsigned char *)v127) >> 2;
      if (!a10) {
        uint64_t v80 = 1;
      }
      uint64_t v118 = v80;
      if (v80)
      {
        uint64_t v81 = 0;
        double v82 = 0.0;
        double v83 = 0.0;
        do
        {
          uint64_t v84 = *((unsigned int *)v127 + v81);
          __int16 v85 = +[CRCHCharacterSetRules characterType:](CRCHCharacterSetRules, "characterType:", v84, v115);
          if (((v116 ^ 1 | a10) & 1) == 0)
          {
            unint64_t v86 = *v122;
            uint64_t v87 = v86
                - +[CRCHCharacterSetRules expectedMaxStrokeCount:(unsigned __int16)v84];
            if ((int)v87 >= 1) {
              *(double *)(a1 + 160) = *(double *)(a1 + 160) + (double)(*v122 * v87);
            }
            uint64_t v88 = +[CRCHCharacterSetRules expectedMinStrokeCount:(unsigned __int16)v84]- *v122;
            double v89 = *(double *)(a1 + 160);
            if ((int)v88 >= 1)
            {
              double v89 = v89 + (double)(*v122 * v88);
              *(double *)(a1 + 160) = v89;
            }
            double v90 = *(double *)(**(void **)(a1 + 56) + 64);
            if (v89 > v90) {
              *(double *)(a1 + 160) = v90;
            }
            double v91 = v125[2](v125, a1);
            *(double *)(a1 + 112) = v91;
            if (v91 > a9) {
              break;
            }
          }
          unint64_t v92 = CH_unicodeToNSString(v84);
          uint64_t v93 = *(void *)(a1 + 232);
          if (v93)
          {
            uint64_t v94 = +[CRCHPatternNetwork cursorByAdvancingWithString:v92 fromCursor:v93 inNetwork:v123];
            float v95 = *(void **)(a1 + 232);
            *(void *)(a1 + 232) = v94;
          }
          BOOL v96 = (v85 & 0x13) == 0;
          unint64_t v97 = *(const void **)(a1 + 224);
          if (v97)
          {
            uint64_t v98 = LXCursorCreateByAdvancing();
            CFRelease(v97);
            *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v98;
            if (v98)
            {
              uint64_t v99 = *(void *)(a1 + 216);
              BOOL v100 = v99 == 0;
              BOOL v101 = v99 != 0;
              if (v100) {
                double v82 = -v21;
              }
              BOOL v96 = (v85 & 0x13) == 0 && v101;
            }
          }
          else
          {
            uint64_t v98 = 0;
          }
          if (!*(void *)(a1 + 232) && !v98 && *(_DWORD *)(*(void *)a1 + 4 * *(void *)(a1 + 16) - 4) != 1)
          {
            *(void *)(a1 + 192) = *(void *)(**(void **)(a1 + 56) + 64);
            unint64_t v106 = *(const void **)(a1 + 216);
            if (v106)
            {
              CFRelease(v106);
              *(void *)(a1 + 216) = 0;
            }
          }
          double v102 = v125[2](v125, a1);
          *(double *)(a1 + 112) = v102;
          if (v102 > a9) {
            goto LABEL_139;
          }
          int v103 = *(const void **)(a1 + 216);
          if (v103)
          {
            uint64_t v104 = LXCursorCreateByAdvancing();
            CFRelease(v103);
            *(void *)(a1 + 216) = v104;
            if (v104)
            {
              LXCursorConditionalProbability();
              if (v105 < 0.0) {
                double v82 = -v105;
              }
            }
            else
            {
              double v82 = -*(double *)(**(void **)(a1 + 56) + 64);
            }
          }
          if (v96) {
            double v82 = -v22;
          }
          if ((v85 & 0x1000) == 0)
          {
            uint64_t v107 = *(void *)(a1 + 272);
            uint64_t v108 = *(void *)(a1 + 16);
            uint64_t v109 = *(void *)(a1 + 40);
            if (v107 == 0x7FFFFFFFFFFFFFFFLL)
            {
              uint64_t v107 = v108 - v109;
              *(void *)(a1 + 272) = v108 - v109;
            }
            *(void *)(a1 + 280) = v108 - (v109 + v107) + 1;
          }
          double v110 = v82 > 0.0 || *(void *)(a1 + 216) || *(void *)(a1 + 224)
               ? *(double *)(a1 + 128) + v82 * (double)*v122
               : *(double *)(**(void **)(a1 + 56) + 64) + *(double *)(a1 + 128);
          *(double *)(a1 + 128) = v110;
          double v111 = v125[2](v125, a1);
          *(double *)(a1 + 112) = v111;
          if (v111 > a9) {
            goto LABEL_139;
          }
          if (a4)
          {
            if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 40) + 56 * *v120 + 48)
              && (*(void *)(a1 + 216) || *(void *)(a1 + 224))
              && (v85 & 0x20) != 0
              && !LXCursorIsRoot())
            {
              if (*(void *)(a1 + 216))
              {
                LXCursorTerminationProbability();
                if (fabs(v113) == INFINITY) {
                  double v83 = v22;
                }
                else {
                  double v83 = v113;
                }
              }
              if (*(void *)(a1 + 224)) {
                double v83 = v21;
              }
            }
            else
            {
              double v83 = v22;
              if (!v96)
              {
                if (*(void *)(a1 + 216) || (double v83 = v21, !*(void *)(a1 + 224)))
                {
                  CRCharacterNormalizer::normalizedCharacter(v84);
                  LMLanguageModelConditionalProbability();
                  double v83 = v112;
                }
              }
            }
            *(double *)(a1 + 176) = *(double *)(a1 + 176) - v83 * (double)*v122;
            double v114 = v125[2](v125, a1);
            *(double *)(a1 + 112) = v114;
            if (v114 > a9)
            {
LABEL_139:

              break;
            }
          }
          CRCHLatticePath::expandPathStringWithCharacter((CRCHLatticePath *)a1, v84);

          ++v81;
        }
        while (v118 != v81);
      }
      if (v127)
      {
        BOOL v128 = v127;
        operator delete(v127);
      }
    }
  }
LABEL_142:
}

void sub_1DD7FDE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CRCHLatticePath::addWordAtNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, int a7, int a8, char a9, char a10)
{
  id v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = *(uint64_t **)(a1 + 56);
  uint64_t v18 = *v17;
  double v19 = log10(*(long double *)(*v17 + 72));
  v20.n128_f64[0] = log10(*(long double *)(v18 + 80));
  if (a7)
  {
    double v21 = v20.n128_f64[0];
    if (!*(void *)(a1 + 224)) {
      goto LABEL_5;
    }
    if (LXCursorHasChildren())
    {
      if (!*(void *)(a1 + 224))
      {
LABEL_5:
        if (*(void *)(a1 + 216))
        {
          if (LXCursorHasEntries())
          {
            LXCursorTerminationProbability();
            double v19 = v20.n128_f64[0];
          }
          else
          {
            double v19 = v21;
          }
        }
      }
    }
    else
    {
      double v19 = 0.0;
    }
    v20.n128_f64[0] = *(double *)(a1 + 128) - v19;
    *(void *)(a1 + 128) = v20.n128_u64[0];
  }
  if (a9) {
    v20.n128_f64[0] = CRCHLatticePath::updateWordSegmentationScoreAtNode((CRCHLatticePath *)a1, a2, 1);
  }
  if (a10)
  {
    uint64_t v22 = *(void *)(a1 + 232);
    BOOL v23 = +[CRCHPatternNetwork isFinalCursor:inNetwork:](CRCHPatternNetwork, "isFinalCursor:inNetwork:", v22, v15, v20.n128_f64[0]);
    if (v22) {
      char v24 = v23;
    }
    else {
      char v24 = 1;
    }
    double v25 = 0.0;
    if ((v24 & 1) == 0) {
      double v25 = *(double *)(**(void **)(a1 + 56) + 64);
    }
    v20.n128_f64[0] = v25 + *(double *)(a1 + 192);
    *(void *)(a1 + 192) = v20.n128_u64[0];
  }
  *(double *)(a1 + 112) = v16[2](v16, a1, v20);
  id v85 = v15;
  uint64_t v26 = *(uint64_t **)(a1 + 288);
  uint64_t v27 = *(uint64_t **)(a1 + 296);
  uint64_t v28 = (char *)v27 - (char *)v26;
  if (v27 == v26)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *(void *)(a1 + 16) - *(void *)(a1 + 40);
    uint64_t v32 = ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3) - 1;
    uint64_t v31 = 1;
  }
  else
  {
    uint64_t v29 = *(v27 - 2) + *(v27 - 1) + 1;
    uint64_t v30 = *(void *)(a1 + 16) - *(void *)(a1 + 40) - v29;
    uint64_t v31 = *(void *)(*(void *)(a1 + 320) - 8) + *(void *)(*(void *)(a1 + 320) - 16);
    uint64_t v32 = ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3) - v31;
  }
  unint64_t v33 = *(void *)(a1 + 304);
  if ((unint64_t)v27 >= v33)
  {
    uint64_t v35 = v28 >> 4;
    unint64_t v36 = (v28 >> 4) + 1;
    if (v36 >> 60) {
      goto LABEL_103;
    }
    uint64_t v37 = v33 - (void)v26;
    if (v37 >> 3 > v36) {
      unint64_t v36 = v37 >> 3;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(a1 + 304, v38);
      uint64_t v26 = *(uint64_t **)(a1 + 288);
      uint64_t v27 = *(uint64_t **)(a1 + 296);
    }
    else
    {
      uint64_t v39 = 0;
    }
    uint64_t v40 = (uint64_t *)&v39[16 * v35];
    unint64_t v41 = &v39[16 * v38];
    uint64_t *v40 = v29;
    v40[1] = v30;
    unint64_t v34 = v40 + 2;
    if (v27 != v26)
    {
      do
      {
        *((_OWORD *)v40 - 1) = *((_OWORD *)v27 - 1);
        v40 -= 2;
        v27 -= 2;
      }
      while (v27 != v26);
      uint64_t v26 = *(uint64_t **)(a1 + 288);
    }
    *(void *)(a1 + 288) = v40;
    *(void *)(a1 + 296) = v34;
    *(void *)(a1 + 304) = v41;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    uint64_t *v27 = v29;
    v27[1] = v30;
    unint64_t v34 = v27 + 2;
  }
  *(void *)(a1 + 296) = v34;
  uint64_t v43 = *(uint64_t **)(a1 + 320);
  unint64_t v42 = *(void *)(a1 + 328);
  if ((unint64_t)v43 < v42)
  {
    *uint64_t v43 = v31;
    v43[1] = v32;
    __int16 v44 = v43 + 2;
    goto LABEL_55;
  }
  uint64_t v45 = *(uint64_t **)(a1 + 312);
  uint64_t v46 = ((char *)v43 - (char *)v45) >> 4;
  unint64_t v47 = v46 + 1;
  if ((unint64_t)(v46 + 1) >> 60) {
LABEL_103:
  }
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  uint64_t v48 = v42 - (void)v45;
  if (v48 >> 3 > v47) {
    unint64_t v47 = v48 >> 3;
  }
  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v49 = v47;
  }
  if (v49)
  {
    BOOL v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(a1 + 328, v49);
    uint64_t v45 = *(uint64_t **)(a1 + 312);
    uint64_t v43 = *(uint64_t **)(a1 + 320);
  }
  else
  {
    BOOL v50 = 0;
  }
  uint64_t v51 = (uint64_t *)&v50[16 * v46];
  uint64_t v52 = &v50[16 * v49];
  *uint64_t v51 = v31;
  v51[1] = v32;
  __int16 v44 = v51 + 2;
  if (v43 != v45)
  {
    do
    {
      *((_OWORD *)v51 - 1) = *((_OWORD *)v43 - 1);
      v51 -= 2;
      v43 -= 2;
    }
    while (v43 != v45);
    uint64_t v45 = *(uint64_t **)(a1 + 312);
  }
  *(void *)(a1 + 312) = v51;
  *(void *)(a1 + 320) = v44;
  *(void *)(a1 + 328) = v52;
  if (v45) {
    operator delete(v45);
  }
LABEL_55:
  *(void *)(a1 + 320) = v44;
  double v53 = *(double **)(a1 + 344);
  unint64_t v54 = *(void *)(a1 + 352);
  double v55 = *(double *)(a1 + 144) / (double)*(unint64_t *)(a1 + 208);
  if ((unint64_t)v53 >= v54)
  {
    uint64_t v57 = *(double **)(a1 + 336);
    uint64_t v58 = v53 - v57;
    if ((unint64_t)(v58 + 1) >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v59 = v54 - (void)v57;
    unint64_t v60 = (uint64_t)(v54 - (void)v57) >> 2;
    if (v60 <= v58 + 1) {
      unint64_t v60 = v58 + 1;
    }
    if (v59 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v61 = v60;
    }
    if (v61)
    {
      unint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 352, v61);
      uint64_t v57 = *(double **)(a1 + 336);
      double v53 = *(double **)(a1 + 344);
    }
    else
    {
      unint64_t v62 = 0;
    }
    unint64_t v63 = (double *)&v62[8 * v58];
    uint64_t v64 = &v62[8 * v61];
    *unint64_t v63 = v55;
    uint64_t v56 = v63 + 1;
    while (v53 != v57)
    {
      uint64_t v65 = *((void *)v53-- - 1);
      *((void *)v63-- - 1) = v65;
    }
    *(void *)(a1 + 336) = v63;
    *(void *)(a1 + 344) = v56;
    *(void *)(a1 + 352) = v64;
    if (v57) {
      operator delete(v57);
    }
  }
  else
  {
    *double v53 = v55;
    uint64_t v56 = v53 + 1;
  }
  *(void *)(a1 + 344) = v56;
  uint64_t v66 = *(void *)(a1 + 224);
  if (*(void *)(a1 + 216))
  {
    int HasEntries = LXCursorHasEntries();
    BOOL v68 = HasEntries != 0;
    if (!HasEntries && v66) {
      goto LABEL_76;
    }
  }
  else
  {
    if (v66)
    {
LABEL_76:
      BOOL v68 = LXCursorHasEntries() != 0;
      goto LABEL_78;
    }
    BOOL v68 = 0;
  }
LABEL_78:
  BOOL v87 = v68;
  BOOL v86 = *(void *)(a1 + 232) != 0;
  std::vector<BOOL>::push_back(a1 + 384, &v87);
  std::vector<BOOL>::push_back(a1 + 408, &v86);
  *(double *)(a1 + 168) = *(double *)(a1 + 168) + *(double *)(a1 + 176);
  *(double *)(a1 + 152) = *(double *)(a1 + 152) + *(double *)(a1 + 160);
  *(double *)(a1 + 120) = *(double *)(a1 + 120) + *(double *)(a1 + 128);
  *(double *)(a1 + 184) = *(double *)(a1 + 184) + *(double *)(a1 + 192);
  *(double *)(a1 + 136) = *(double *)(a1 + 136) + *(double *)(a1 + 144);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 208) = 0;
  if (a8)
  {
    uint64_t v69 = *(const void **)(a1 + 216);
    if (v69)
    {
      CFRelease(v69);
      *(void *)(a1 + 216) = 0;
    }
    *(void *)(a1 + 216) = LXLexiconCreateRootCursor();
    BOOL v70 = *(const void **)(a1 + 224);
    if (v70)
    {
      CFRelease(v70);
      *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
    *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = LXLexiconCreateRootCursor();
    uint64_t v71 = +[CRCHPatternNetwork rootCursorForContentType:*(unsigned int *)(a1 + 240) inNetwork:v85];
    unint64_t v72 = *(void **)(a1 + 232);
    *(void *)(a1 + 232) = v71;

    CRCHLatticePath::expandPathStringWithCharacter((CRCHLatticePath *)a1, 32);
  }
  uint64_t v73 = *(char **)(a1 + 368);
  unint64_t v74 = *(void *)(a1 + 376);
  if ((unint64_t)v73 >= v74)
  {
    unsigned int v76 = *(char **)(a1 + 360);
    uint64_t v77 = (v73 - v76) >> 3;
    if ((unint64_t)(v77 + 1) >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v78 = v74 - (void)v76;
    unint64_t v79 = (uint64_t)(v74 - (void)v76) >> 2;
    if (v79 <= v77 + 1) {
      unint64_t v79 = v77 + 1;
    }
    if (v78 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v80 = v79;
    }
    if (v80)
    {
      uint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 376, v80);
      unsigned int v76 = *(char **)(a1 + 360);
      uint64_t v73 = *(char **)(a1 + 368);
    }
    else
    {
      uint64_t v81 = 0;
    }
    double v82 = &v81[8 * v77];
    double v83 = &v81[8 * v80];
    *(void *)double v82 = *(void *)(a1 + 112);
    unint64_t v75 = v82 + 8;
    while (v73 != v76)
    {
      uint64_t v84 = *((void *)v73 - 1);
      v73 -= 8;
      *((void *)v82 - 1) = v84;
      v82 -= 8;
    }
    *(void *)(a1 + 360) = v82;
    *(void *)(a1 + 368) = v75;
    *(void *)(a1 + 376) = v83;
    if (v76) {
      operator delete(v76);
    }
  }
  else
  {
    *(void *)uint64_t v73 = *(void *)(a1 + 112);
    unint64_t v75 = v73 + 8;
  }
  *(void *)(a1 + 368) = v75;
}

void sub_1DD7FE548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

BOOL MinCompareEdgePathsPtr(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(void *)a1 + 112) < *(double *)(*(void *)a2 + 112);
}

uint64_t CRCHNetwork::deserialize(CRCHNetwork *this, const char *__filename)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = fopen(__filename, "rb");
  fread(__ptr, 4uLL, 3uLL, v4);
  if (__ptr[0] <= 1u && __ptr[1] < 3u)
  {
    uint64_t v27 = 0;
    fread((char *)&v27 + 4, 4uLL, 1uLL, v4);
    unint64_t v7 = SHIDWORD(v27);
    std::vector<NetworkEdge>::resize((uint64_t *)this + 11, SHIDWORD(v27));
    uint64_t v8 = *((void *)this + 14);
    uint64_t v9 = (char *)*((void *)this + 15);
    unint64_t v10 = (uint64_t)&v9[-v8] >> 3;
    if (v7 <= v10)
    {
      if (v7 >= v10) {
        goto LABEL_26;
      }
      char v24 = (char *)(v8 + 8 * v7);
    }
    else
    {
      unint64_t v11 = v7 - v10;
      uint64_t v12 = *((void *)this + 16);
      if (v7 - v10 > (v12 - (uint64_t)v9) >> 3)
      {
        if ((v7 & 0x80000000) != 0) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v12 - v8;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= v7) {
          uint64_t v14 = v7;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 128, v15);
        uint64_t v17 = &v16[8 * v10];
        double v19 = &v16[8 * v18];
        bzero(v17, 8 * v11);
        __n128 v20 = &v17[8 * v11];
        uint64_t v22 = (char *)*((void *)this + 14);
        double v21 = (char *)*((void *)this + 15);
        if (v21 != v22)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v17 - 1) = v23;
            v17 -= 8;
          }
          while (v21 != v22);
          double v21 = (char *)*((void *)this + 14);
        }
        *((void *)this + 14) = v17;
        *((void *)this + 15) = v20;
        *((void *)this + 16) = v19;
        if (v21) {
          operator delete(v21);
        }
LABEL_26:
        fread(&v27, 4uLL, 1uLL, v4);
        std::vector<CRCHNetworkNode>::resize((uint64_t)this + 40, (int)v27);
        HIDWORD(v26) = 0;
        fread((char *)&v26 + 4, 4uLL, 1uLL, v4);
        operator new[]();
      }
      bzero(v9, 8 * v11);
      char v24 = &v9[8 * v11];
    }
    *((void *)this + 15) = v24;
    goto LABEL_26;
  }
  uint64_t v6 = CHOSLogForCategory(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = __filename;
    _os_log_impl(&dword_1DD733000, v6, OS_LOG_TYPE_ERROR, "Unsupported Network Version %s", buf, 0xCu);
  }

  return fclose(v4);
}

void sub_1DD7FEB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CRCHNetwork::serialize(CRCHNetwork *this, const char *__filename)
{
  uint64_t v3 = fopen(__filename, "wb");
  fwrite(&NETWORK_BINARY_FILE_VERSION_MAJOR, 4uLL, 1uLL, v3);
  fwrite(&NETWORK_BINARY_FILE_VERSION_MINOR, 4uLL, 1uLL, v3);
  fwrite(&NETWORK_BINARY_FILE_VERSION_REVISON, 4uLL, 1uLL, v3);
  uint64_t __ptr = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 4);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  uint64_t __ptr = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  uint64_t __ptr = *((void *)this + 10);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  uint64_t v4 = (CRCHNetwork *)*((void *)this + 8);
  if (v4 != (CRCHNetwork *)((char *)this + 72))
  {
    do
    {
      uint64_t __ptr = *((void *)v4 + 4);
      fwrite(&__ptr, 4uLL, 1uLL, v3);
      uint64_t v5 = (CRCHNetwork *)*((void *)v4 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(CRCHNetwork **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (CRCHNetwork *)*((void *)v4 + 2);
          BOOL v7 = *(void *)v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != (CRCHNetwork *)((char *)this + 72));
  }
  uint64_t __ptr = *((unsigned __int8 *)this + 192);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  uint64_t v8 = *((void *)this + 11);
  if (*((void *)this + 12) != v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      unint64_t v11 = (int32x4_t *)(v8 + v9);
      int32x4_t v33 = vuzp1q_s32(*v11, v11[1]);
      uint64_t v34 = v11[2].i64[0];
      fwrite(&v33, 0x18uLL, 1uLL, v3);
      ++v10;
      uint64_t v8 = *((void *)this + 11);
      uint64_t v12 = *((void *)this + 12);
      v9 += 80;
    }
    while (v10 < 0xCCCCCCCCCCCCCCCDLL * ((v12 - v8) >> 4));
    if (v12 != v8)
    {
      unint64_t v13 = 0;
      do
      {
        v33.i32[0] = (*(void *)(*((void *)this + 14) + 8 * v13) - v8) / 0x50;
        fwrite(&v33, 4uLL, 1uLL, v3);
        ++v13;
        uint64_t v8 = *((void *)this + 11);
      }
      while (v13 < 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 12) - v8) >> 4));
    }
  }
  uint64_t v14 = *((void *)this + 5);
  if (*((void *)this + 6) != v14)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 48;
    do
    {
      uint64_t v17 = (unsigned __int8 *)(v14 + v16);
      fwrite((const void *)(v14 + v16 - 48), 4uLL, 1uLL, v3);
      fwrite(v17 - 40, 4uLL, 1uLL, v3);
      fwrite(v17 - 32, 4uLL, 1uLL, v3);
      fwrite(v17 - 24, 4uLL, 1uLL, v3);
      v33.i16[0] = *v17;
      fwrite(&v33, 2uLL, 1uLL, v3);
      ++v15;
      uint64_t v14 = *((void *)this + 5);
      v16 += 56;
    }
    while (v15 < 0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 6) - v14) >> 3));
  }
  uint64_t __ptr = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 3);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  uint64_t v19 = *((void *)this + 18);
  uint64_t v18 = *((void *)this + 19);
  uint64_t v20 = v18 - v19;
  if (v18 == v19)
  {
    uint64_t v21 = 0;
  }
  else
  {
    LODWORD(v21) = 0;
    unint64_t v22 = v20 / 24;
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    uint64_t v23 = (char *)(v19 + 23);
    do
    {
      if (*v23 < 0) {
        uint64_t v24 = *(void *)(v23 - 15);
      }
      else {
        LODWORD(v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *v23;
      }
      LODWORD(v21) = v21 + v24 + 1;
      v23 += 24;
      --v22;
    }
    while (v22);
    uint64_t v21 = (int)v21;
  }
  uint64_t __ptr = v21;
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  uint64_t v25 = *((void *)this + 18);
  if (*((void *)this + 19) != v25)
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    do
    {
      uint64_t v28 = (char *)(v25 + v26);
      if (v28[23] < 0)
      {
        uint64_t v30 = *(char **)v28;
        size_t v29 = *((void *)v28 + 1);
      }
      else
      {
        size_t v29 = v28[23];
        uint64_t v30 = v28;
      }
      fwrite(v30, v29, 1uLL, v3);
      v33.i8[0] = 0;
      fwrite(&v33, 1uLL, 1uLL, v3);
      ++v27;
      uint64_t v25 = *((void *)this + 18);
      v26 += 24;
    }
    while (v27 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v25) >> 3));
  }
  return fclose(v3);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1DD7FF084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
  }
  return a1;
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
      std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return this;
}

void *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::set<unsigned long>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1DD7FF264(_Unwind_Exception *a1)
{
  std::__tree<CRCHuint128>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<unsigned long>::__find_equal<unsigned long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *std::__list_imp<unsigned long>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::__tree<unsigned long>::__erase_unique<unsigned long>(uint64_t **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v5 = v4;
    unint64_t v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        BOOL v9 = (uint64_t **)v6;
      }
      else {
        BOOL v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      unint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v5;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

uint64_t std::map<unsigned long,unsigned long>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      unint64_t v6 = v5[4];
      uint64_t v7 = *(void *)(a1 + 8);
      BOOL v8 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      BOOL v9 = *(void **)(a1 + 8);
      uint64_t v10 = v3;
      if (v7)
      {
        do
        {
          BOOL v8 = v9;
          BOOL v9 = (void *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          uint64_t v10 = v8;
        }
        while (v11);
      }
      if (v8[4] < v6)
      {
LABEL_8:
        if (v7) {
          uint64_t v12 = (uint64_t **)v8;
        }
        else {
          uint64_t v12 = (uint64_t **)v3;
        }
        if (v7) {
          BOOL v13 = (uint64_t **)(v8 + 1);
        }
        else {
          BOOL v13 = (uint64_t **)v3;
        }
        if (*v13) {
          goto LABEL_25;
        }
      }
      else
      {
        BOOL v13 = (uint64_t **)v3;
        uint64_t v12 = (uint64_t **)v3;
        if (v7)
        {
          BOOL v14 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v14;
              unint64_t v15 = v14[4];
              if (v15 <= v6) {
                break;
              }
              BOOL v14 = *v12;
              BOOL v13 = v12;
              if (!*v12) {
                goto LABEL_24;
              }
            }
            if (v15 >= v6) {
              goto LABEL_25;
            }
            BOOL v14 = v12[1];
            if (!v14)
            {
              BOOL v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      uint64_t v16 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v16 + 2) = *((_OWORD *)v5 + 2);
      std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v16);
LABEL_25:
      uint64_t v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          unint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unint64_t v18 = (void *)v5[2];
          BOOL v11 = *v18 == (void)v5;
          uint64_t v5 = v18;
        }
        while (!v11);
      }
      uint64_t v5 = v18;
    }
    while (v18 != v4);
  }
  return a1;
}

void sub_1DD7FF7DC(_Unwind_Exception *a1)
{
  std::__tree<CRCHuint128>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void CRCHNetwork::CRCHNetwork(CRCHNetwork *this)
{
  *(void *)this = &latticePresets;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  uint64_t v2 = (void **)((char *)this + 40);
  *((void *)this + 9) = 0;
  *((void *)this + 8) = (char *)this + 72;
  *((void *)this + 10) = 0;
  *(_OWORD *)((char *)this + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
  *((void *)this + 7) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  CRCHSymbolMap::CRCHSymbolMap((CRCHNetwork *)((char *)this + 136));
  *((void *)this + 26) = 0;
  *((void *)this + 25) = (char *)this + 208;
  *((unsigned char *)this + 192) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 30) = 0;
  unint64_t v3 = *((void *)this + 6);
  unint64_t v4 = *((void *)this + 7);
  if (v3 >= v4)
  {
    uint64_t v19 = v2;
    unint64_t v6 = *v2;
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3 - (void)*v2) >> 3);
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > 0x492492492492492) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (void)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x249249249249249) {
      unint64_t v10 = 0x492492492492492;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10) {
      BOOL v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHNetworkNode>>((uint64_t)this + 56, v10);
    }
    else {
      BOOL v11 = 0;
    }
    uint64_t v12 = &v11[56 * v7];
    BOOL v13 = &v11[56 * v10];
    v12[32] = 0;
    *(_OWORD *)uint64_t v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((void *)v12 + 5) = 0;
    v12[48] = 0;
    uint64_t v5 = v12 + 56;
    unint64_t v15 = (char *)*((void *)this + 5);
    BOOL v14 = (char *)*((void *)this + 6);
    if (v14 != v15)
    {
      do
      {
        long long v16 = *(_OWORD *)(v14 - 56);
        long long v17 = *(_OWORD *)(v14 - 40);
        long long v18 = *(_OWORD *)(v14 - 24);
        *(v12 - 8) = *(v14 - 8);
        *(_OWORD *)(v12 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
        *(_OWORD *)(v12 - 40) = v17;
        *(_OWORD *)(v12 - 56) = v16;
        v12 -= 56;
        v14 -= 56;
      }
      while (v14 != v15);
      BOOL v14 = (char *)*v19;
    }
    *((void *)this + 5) = v12;
    *((void *)this + 6) = v5;
    *((void *)this + 7) = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(unsigned char *)(v3 + 32) = 0;
    *(_OWORD *)unint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(void *)(v3 + 40) = 0;
    *(unsigned char *)(v3 + 48) = 0;
    uint64_t v5 = (char *)(v3 + 56);
  }
  *((void *)this + 6) = v5;
  *(unsigned char *)(*((void *)this + 5) + 48) = 1;
}

void sub_1DD7FFA10(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, ...)
{
  va_start(va, a4);
  uint64_t v12 = v8;
  std::__tree<CRCHuint128>::destroy(v12, *v9);
  std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(v7, *v11);
  CRCHSymbolMap::~CRCHSymbolMap(v6);
  BOOL v14 = *(void **)(v4 + 112);
  if (v14)
  {
    *(void *)(v4 + 120) = v14;
    operator delete(v14);
  }
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<CRCHuint128>::destroy(v5, *v10);
  unint64_t v15 = *a3;
  if (*a3)
  {
    *(void *)(v4 + 48) = v15;
    operator delete(v15);
  }
  if (*(char *)(v4 + 31) < 0) {
    operator delete(*a4);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHNetworkNode>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t isWordValid(uint64_t a1, uint64_t *a2)
{
  LMLexiconGetRootCursor();
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  while (v4 != v3)
  {
    uint64_t CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
    if (!CursorByAdvancingWithCharacters) {
      goto LABEL_8;
    }
    v4 += 4;
  }
  if (LMLexiconCursorHasEntries()) {
    uint64_t CursorByAdvancingWithCharacters = LMLexiconCursorFirstTokenID();
  }
  else {
    uint64_t CursorByAdvancingWithCharacters = 0xFFFFFFFFLL;
  }
LABEL_8:
  LMLexiconResetCursors();
  return CursorByAdvancingWithCharacters;
}

uint64_t std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

BOOL CRCHuint128::operator<(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    int v2 = -1;
  }
  else {
    int v2 = *a1 > *a2;
  }
  unsigned int v3 = a1[2];
  unsigned int v4 = a2[2];
  BOOL v5 = v3 >= v4;
  int v6 = v3 > v4;
  if (!v5) {
    int v6 = -1;
  }
  if (v2 == -1) {
    return 1;
  }
  if (v2) {
    return 0;
  }
  unsigned int v7 = a1[1];
  unsigned int v8 = a2[1];
  BOOL v5 = v7 >= v8;
  int v9 = v7 > v8;
  if (!v5) {
    int v9 = -1;
  }
  if (v9 == -1) {
    return 1;
  }
  if (v9) {
    return 0;
  }
  if (v6 == -1) {
    return 1;
  }
  return !v6 && a1[3] < a2[3];
}

void CRCHLatticePath::CRCHLatticePath(CRCHLatticePath *this, const CRCHLatticePath *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 8, *((const void **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3);
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 11, *((const void **)a2 + 11), *((void *)a2 + 12), (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_OWORD *)this + 12) = *((_OWORD *)a2 + 12);
  *((void *)this + 26) = *((void *)a2 + 26);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 216);
  id v4 = *((id *)a2 + 29);
  int v5 = *((_DWORD *)a2 + 60);
  *((void *)this + 31) = 0;
  *((void *)this + 29) = v4;
  *((_DWORD *)this + 60) = v5;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)this + 31, *((const void **)a2 + 31), *((void *)a2 + 32), (uint64_t)(*((void *)a2 + 32) - *((void *)a2 + 31)) >> 3);
  *((_OWORD *)this + 17) = *((_OWORD *)a2 + 17);
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 36) = 0;
  std::vector<_NSRange>::__init_with_size[abi:ne180100]<_NSRange*,_NSRange*>((void *)this + 36, *((const void **)a2 + 36), *((void *)a2 + 37), (uint64_t)(*((void *)a2 + 37) - *((void *)a2 + 36)) >> 4);
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  std::vector<_NSRange>::__init_with_size[abi:ne180100]<_NSRange*,_NSRange*>((void *)this + 39, *((const void **)a2 + 39), *((void *)a2 + 40), (uint64_t)(*((void *)a2 + 40) - *((void *)a2 + 39)) >> 4);
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)this + 42, *((const void **)a2 + 42), *((void *)a2 + 43), (uint64_t)(*((void *)a2 + 43) - *((void *)a2 + 42)) >> 3);
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)this + 45, *((const void **)a2 + 45), *((void *)a2 + 46), (uint64_t)(*((void *)a2 + 46) - *((void *)a2 + 45)) >> 3);
  std::vector<BOOL>::vector((void *)this + 48, (uint64_t)a2 + 384);
  std::vector<BOOL>::vector((void *)this + 51, (uint64_t)a2 + 408);
  *((_OWORD *)this + 27) = xmmword_1DD8CE830;
  if (*(void *)a2 && *((void *)a2 + 1))
  {
    int v6 = malloc_type_malloc(4 * *((void *)this + 3), 0x100004052888210uLL);
    *(void *)this = v6;
    *((_OWORD *)this + 17) = *((_OWORD *)a2 + 17);
    memcpy(v6, *(const void **)a2, 4 * *((void *)this + 3));
    unsigned int v7 = malloc_type_malloc(4 * *((void *)this + 3), 0x100004052888210uLL);
    *((void *)this + 1) = v7;
    memcpy(v7, *((const void **)a2 + 1), 4 * *((void *)this + 3));
    unsigned int v8 = (const void *)*((void *)this + 28);
    if (v8) {
      CFRetain(v8);
    }
    int v9 = (const void *)*((void *)this + 27);
    if (v9) {
      CFRetain(v9);
    }
  }
}

void sub_1DD7FFED8(_Unwind_Exception *a1)
{
  if (*v8) {
    operator delete(*v8);
  }
  unint64_t v10 = *v7;
  if (*v7)
  {
    *(void *)(v1 + 368) = v10;
    operator delete(v10);
  }
  BOOL v11 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 344) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 320) = v12;
    operator delete(v12);
  }
  BOOL v13 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 296) = v13;
    operator delete(v13);
  }
  BOOL v14 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 256) = v14;
    operator delete(v14);
  }

  unint64_t v15 = *(void **)(v1 + 88);
  if (v15)
  {
    *(void *)(v1 + 96) = v15;
    operator delete(v15);
  }
  long long v16 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t CRCHLatticePath::CRCHLatticePath(uint64_t a1, uint64_t a2, const void *a3, const void *a4, void *a5, int a6)
{
  id v27 = a5;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = a2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 240) = a6;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = xmmword_1DD8CE830;
  uint64_t v13 = *(void *)(a2 + 248);
  unint64_t v12 = *(void *)(a2 + 256);
  *(void *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 48) = v12 == 0;
  if (v12 <= **(void **)a2 - 1) {
    uint64_t v14 = **(void **)a2 - 1;
  }
  else {
    uint64_t v14 = v12;
  }
  *(void *)a1 = malloc_type_malloc(4 * v14 + 16, 0x100004052888210uLL);
  unint64_t v15 = malloc_type_malloc(4 * (*(void *)(a1 + 440) + v14), 0x100004052888210uLL);
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  *(void *)(a1 + 8) = v15;
  *(void *)(a1 + 40) = 0;
  unint64_t v18 = ***(void ***)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 32);
  if (v18 > v19 + 1)
  {
    unint64_t v16 = v18 + ~v19;
    *(void *)(a1 + 40) = v16;
    if (v16)
    {
      uint64_t v20 = *(_DWORD **)a1;
      unint64_t v21 = v18 + ~v19;
      do
      {
        *v20++ = 1;
        *v15++ = 1;
        --v21;
      }
      while (v21);
      uint64_t v17 = v16;
    }
    else
    {
      uint64_t v17 = 0;
    }
  }
  *(_OWORD *)(a1 + 272) = xmmword_1DD8CE840;
  if (v14 != v16)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 4 * v17;
    do
    {
      uint64_t v24 = *(unsigned int *)(v13 + 4 * v22);
      *(_DWORD *)(*(void *)a1 + v23) = v24;
      *(_DWORD *)(*(void *)(a1 + 8) + v23) = CRCharacterNormalizer::normalizedCharacter(v24);
      if ((+[CRCHCharacterSetRules characterType:*(unsigned int *)(v13 + 4 * v22)] & 0x1000) != 0)
      {
        ++v22;
      }
      else
      {
        if (*(void *)(a1 + 272) == 0x7FFFFFFFFFFFFFFFLL) {
          *(void *)(a1 + 272) = v22;
        }
        *(void *)(a1 + 280) = ++v22;
      }
      v23 += 4;
    }
    while (v14 - *(void *)(a1 + 40) > v22);
  }
  objc_storeStrong((id *)(a1 + 232), a5);
  uint64_t v25 = *(void *)(a1 + 440) + v14;
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v25;
  *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
  if (a4) {
    CFRetain(a4);
  }
  *(void *)(a1 + 216) = a3;
  if (a3) {
    CFRetain(a3);
  }

  return a1;
}

void sub_1DD800240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = *(void **)(v14 + 408);
  if (v17) {
    operator delete(v17);
  }
  unint64_t v18 = *(void **)(v14 + 384);
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(v14 + 360);
  if (v19)
  {
    *(void *)(v14 + 368) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(v14 + 336);
  if (v20)
  {
    *(void *)(v14 + 344) = v20;
    operator delete(v20);
  }
  unint64_t v21 = *(void **)(v14 + 312);
  if (v21)
  {
    *(void *)(v14 + 320) = v21;
    operator delete(v21);
  }
  unint64_t v22 = *a10;
  if (*a10)
  {
    *(void *)(v14 + 296) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *v15;
  if (*v15)
  {
    *(void *)(v14 + 256) = v23;
    operator delete(v23);
  }

  uint64_t v24 = *(void **)(v14 + 88);
  if (v24)
  {
    *(void *)(v14 + 96) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *a11;
  if (*a11)
  {
    *(void *)(v14 + 72) = v25;
    operator delete(v25);
  }

  _Unwind_Resume(a1);
}

uint64_t CRCHFixedHeap<double,LatticePathPtr>::insert(unsigned __int8 *a1, unint64_t a2, double a3)
{
  uint64_t v3 = *((void *)a1 + 2);
  if (a1[1]) {
    BOOL v4 = (unint64_t)(v3 - 1) > 0xFFFFFFFFFFFFFFFDLL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = 0;
    int v6 = (double *)(*((void *)a1 + 3) + 24);
    while (*(v6 - 1) != a3 || *(void *)v6 != a2)
    {
      --v5;
      v6 += 2;
      if (-v3 == v5) {
        goto LABEL_11;
      }
    }
    if (v5 != 2) {
      return 0;
    }
  }
LABEL_11:
  if (v3 != *((void *)a1 + 1))
  {
    unsigned int v7 = (unint64_t *)*((void *)a1 + 3);
    unint64_t v8 = v3 + 1;
    *((void *)a1 + 2) = v8;
    BOOL v11 = (double *)&v7[2 * v8];
    int v12 = *a1;
    BOOL v10 = *a1 == 0;
    *BOOL v11 = a3;
    *((void *)v11 + 1) = a2;
    if (v12) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  unsigned int v7 = (unint64_t *)*((void *)a1 + 3);
  unint64_t v8 = *((void *)a1 + 4);
  int v9 = (double *)&v7[2 * v8];
  if (!*a1)
  {
    if (*v9 >= a3) {
      return 0;
    }
    *int v9 = a3;
    *((void *)v9 + 1) = a2;
    a2 = v7[2 * v8 + 1];
    BOOL v10 = 1;
LABEL_19:
    unint64_t v13 = 0x41DFFFFFFFC00000;
    goto LABEL_20;
  }
  if (*v9 > a3)
  {
    BOOL v10 = 0;
    *int v9 = a3;
    *((void *)v9 + 1) = a2;
    a2 = v7[2 * v8 + 1];
LABEL_16:
    unint64_t v13 = 0xC1E0000000000000;
LABEL_20:
    *unsigned int v7 = v13;
    v7[1] = 0;
    while (1)
    {
      unint64_t v14 = v8;
      v8 >>= 1;
      double v15 = *(double *)&v7[2 * v8];
      if (v10)
      {
        if (v15 > a3) {
          goto LABEL_27;
        }
      }
      else if (v15 < a3)
      {
LABEL_27:
        uint64_t v17 = (double *)&v7[2 * v14];
        *uint64_t v17 = a3;
        *((void *)v17 + 1) = a2;
        CRCHFixedHeap<double,LatticePathPtr>::updateWorstKV(a1);
        return 1;
      }
      if (v14 != v8)
      {
        unint64_t v16 = (double *)&v7[2 * v14];
        *unint64_t v16 = v15;
        *((void *)v16 + 1) = v7[2 * v8 + 1];
      }
    }
  }
  return 0;
}

void *CRCHFixedHeap<double,LatticePathPtr>::updateWorstKV(void *result)
{
  unint64_t v1 = result[2];
  result[4] = v1;
  if (v1)
  {
    unint64_t v2 = v1 - 1;
    if (v1 - 1 > v1 >> 1)
    {
      unint64_t v3 = v1 >> 1;
      int v4 = *(unsigned __int8 *)result;
      uint64_t v5 = result[3];
      for (uint64_t i = (double *)(v5 + 16 * v1 - 16); ; i -= 2)
      {
        double v7 = *i;
        if (!v4) {
          break;
        }
        if (v7 > *(double *)(v5 + 16 * v1)) {
          goto LABEL_6;
        }
LABEL_7:
        if (--v2 <= v3) {
          return result;
        }
      }
      if (v7 >= *(double *)(v5 + 16 * v1)) {
        goto LABEL_7;
      }
LABEL_6:
      result[4] = v2;
      unint64_t v1 = v2;
      goto LABEL_7;
    }
  }
  return result;
}

double CRCHLatticePath::updateWordSegmentationScoreAtNode(CRCHLatticePath *this, uint64_t a2, int a3)
{
  int v4 = (void *)*((void *)this + 7);
  double result = *(double *)(v4[5] + 56 * a2 + 40);
  if (a3)
  {
    uint64_t v6 = *v4;
    double v7 = *(double *)(*v4 + 88);
    if (result >= v7)
    {
      double v9 = *((double *)this + 25);
    }
    else
    {
      double v8 = exp(v7 - result) + -1.0;
      if (fabs(v8) == INFINITY) {
        double v8 = 1.79769313e308;
      }
      double v9 = v8 + *((double *)this + 25);
    }
    double v11 = *(double *)(v6 + 56);
LABEL_13:
    double result = v9 + v11;
    *((double *)this + 25) = result;
    return result;
  }
  if (*((double *)this + 18) != 0.0)
  {
    double v10 = *(double *)(*v4 + 112);
    if (result > v10)
    {
      double v9 = exp(result - v10) + -1.0;
      if (fabs(v9) == INFINITY) {
        double v9 = 1.79769313e308;
      }
      double v11 = *((double *)this + 25);
      goto LABEL_13;
    }
  }
  return result;
}

void CRCHLatticePath::expandPathStringWithCharacter(CRCHLatticePath *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *(void **)this;
  if (v4 != *((void *)this + 3)) {
    goto LABEL_13;
  }
  uint64_t v6 = ***((void ***)this + 7) - 1;
  uint64_t v7 = v6 + (v4 - v6) * *((void *)this + 54);
  *((void *)this + 3) = v7;
  uint64_t v5 = malloc_type_realloc(v5, 4 * v7, 0x100004052888210uLL);
  double v8 = malloc_type_realloc(*((void **)this + 1), 4 * *((void *)this + 3), 0x100004052888210uLL);
  double v9 = v8;
  if (v5) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    *(void *)this = v5;
    *((void *)this + 1) = v8;
    uint64_t v4 = *((void *)this + 2);
LABEL_13:
    *((void *)this + 2) = v4 + 1;
    *((_DWORD *)v5 + v4) = a2;
    *(_DWORD *)(*((void *)this + 1) + 4 * *((void *)this + 2) - 4) = CRCharacterNormalizer::normalizedCharacter(a2);
    return;
  }
  double v11 = CHOSLogForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v12 = 0;
    _os_log_impl(&dword_1DD733000, v11, OS_LOG_TYPE_ERROR, "Error: unable to reallocate memory for path expansion.", v12, 2u);
  }

  if (v9) {
    free(v9);
  }
  if (v5) {
    free(v5);
  }
}

void std::vector<CRCHNetworkNode>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v6[-v7] >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = (void *)(v7 + 56 * a2);
      uint64_t v14 = 56 * a2;
      double v15 = (unsigned char *)(v7 + 48);
      do
      {
        *((void *)v15 - 1) = 0;
        *double v15 = 0;
        *((_OWORD *)v15 - 3) = 0uLL;
        *((_OWORD *)v15 - 2) = 0uLL;
        *(v15 - 16) = 0;
        v15 += 56;
        v14 -= 56;
      }
      while (v14);
    }
    else
    {
      unint64_t v13 = *(void **)(v4 - 8);
    }
    a1[1] = v13;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (uint64_t)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHNetworkNode>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    unint64_t v16 = &v12[56 * v8];
    uint64_t v17 = 56 * a2;
    unint64_t v18 = &v16[56 * a2];
    uint64_t v19 = v16 + 48;
    do
    {
      *((void *)v19 - 1) = 0;
      unsigned char *v19 = 0;
      *((_OWORD *)v19 - 3) = 0uLL;
      *((_OWORD *)v19 - 2) = 0uLL;
      *(v19 - 16) = 0;
      v19 += 56;
      v17 -= 56;
    }
    while (v17);
    uint64_t v20 = &v12[56 * v11];
    unint64_t v22 = (char *)*a1;
    unint64_t v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        long long v23 = *(_OWORD *)(v21 - 56);
        long long v24 = *(_OWORD *)(v21 - 40);
        long long v25 = *(_OWORD *)(v21 - 24);
        *(v16 - 8) = *(v21 - 8);
        *(_OWORD *)(v16 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v25;
        *(_OWORD *)(v16 - 40) = v24;
        *(_OWORD *)(v16 - 56) = v23;
        v16 -= 56;
        v21 -= 56;
      }
      while (v21 != v22);
      unint64_t v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = v20;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>(uint64_t *a1, const NetworkEdge *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = (NetworkEdge *)&v10[80 * v4];
  unint64_t v16 = &v10[80 * v9];
  NetworkEdge::NetworkEdge(v14, a2);
  double v15 = (char *)v14 + 80;
  std::vector<NetworkEdge>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<NetworkEdge>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1DD800A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<NetworkEdge>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<NetworkEdge>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>,std::reverse_iterator<NetworkEdge*>,std::reverse_iterator<NetworkEdge*>>((uint64_t)(a1 + 2), a1[1], (const NetworkEdge *)a1[1], *a1, (const NetworkEdge *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>,std::reverse_iterator<NetworkEdge*>,std::reverse_iterator<NetworkEdge*>>(uint64_t a1, uint64_t a2, const NetworkEdge *a3, uint64_t a4, const NetworkEdge *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (const NetworkEdge *)((char *)v9 - 80);
      NetworkEdge::NetworkEdge((NetworkEdge *)(v7 - 80), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 80;
      *((void *)&v15 + 1) -= 80;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1DD800BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 56);
    if (v3)
    {
      *(void *)(v1 + 64) = v3;
      operator delete(v3);
    }
    v1 += 80;
  }
}

uint64_t std::__split_buffer<NetworkEdge>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<NetworkEdge>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 80;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 80;
    }
  }
}

void std::deque<unsigned long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_front((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_back(&v54, &v53);
  id v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_front((uint64_t)&v54, v27);
  }
  size_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1DD80106C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*,false>(NetworkEdge *a1, const NetworkEdge *a2, uint64_t (**a3)(NetworkEdge *, NetworkEdge *), uint64_t a4, char a5)
{
void sub_1DD8019D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(NetworkEdge *a1, uint64_t a2)
{
  NetworkEdge::NetworkEdge((NetworkEdge *)v4, a1);
  NetworkEdge::operator=((uint64_t)a1, a2);
  NetworkEdge::operator=(a2, (uint64_t)v4);
  if (__p)
  {
    char v6 = __p;
    operator delete(__p);
  }
}

void sub_1DD801AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(NetworkEdge *a1, NetworkEdge *a2, uint64_t a3, uint64_t (**a4)(NetworkEdge *, NetworkEdge *))
{
  char v8 = (*a4)(a2, a1);
  int v9 = (*a4)((NetworkEdge *)a3, a2);
  if (v8)
  {
    if (v9)
    {
      uint64_t v10 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a1, (uint64_t)a2);
      if (!(*a4)((NetworkEdge *)a3, a2)) {
        return;
      }
      uint64_t v10 = a2;
    }
    uint64_t v11 = a3;
  }
  else
  {
    if (!v9) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a2, a3);
    if (!(*a4)(a2, a1)) {
      return;
    }
    uint64_t v10 = a1;
    uint64_t v11 = (uint64_t)a2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(v10, v11);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(uint64_t a1, const NetworkEdge *a2, uint64_t (**a3)(NetworkEdge *, NetworkEdge *))
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((*a3)((const NetworkEdge *)((char *)a2 - 80), (NetworkEdge *)a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>((NetworkEdge *)a1, (uint64_t)a2 - 80);
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)a1, (NetworkEdge *)(a1 + 80), (uint64_t)a2 - 80, a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)a1, (NetworkEdge *)(a1 + 80), (NetworkEdge *)(a1 + 160), (uint64_t)a2 - 80, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)a1, (NetworkEdge *)(a1 + 80), (NetworkEdge *)(a1 + 160), (NetworkEdge *)(a1 + 240), (uint64_t)a2 - 80, a3);
      return 1;
    default:
      char v8 = (NetworkEdge *)(a1 + 160);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)a1, (NetworkEdge *)(a1 + 80), a1 + 160, a3);
      int v9 = (const NetworkEdge *)(a1 + 240);
      if ((const NetworkEdge *)(a1 + 240) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v9, v8))
    {
      NetworkEdge::NetworkEdge((NetworkEdge *)v15, v9);
      uint64_t v12 = v10;
      while (1)
      {
        NetworkEdge::operator=(a1 + v12 + 240, a1 + v12 + 160);
        if (v12 == -160) {
          break;
        }
        char v13 = (*a3)((NetworkEdge *)v15, (NetworkEdge *)(a1 + v12 + 80));
        v12 -= 80;
        if ((v13 & 1) == 0)
        {
          uint64_t v14 = a1 + v12 + 240;
          goto LABEL_12;
        }
      }
      uint64_t v14 = a1;
LABEL_12:
      NetworkEdge::operator=(v14, (uint64_t)v15);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      if (++v11 == 8) {
        return (const NetworkEdge *)((char *)v9 + 80) == a2;
      }
    }
    char v8 = v9;
    v10 += 80;
    int v9 = (const NetworkEdge *)((char *)v9 + 80);
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_1DD801DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NetworkEdge::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 56), *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  return a1;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(NetworkEdge *a1, NetworkEdge *a2, NetworkEdge *a3, uint64_t a4, uint64_t (**a5)(NetworkEdge *, NetworkEdge *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(a1, a2, (uint64_t)a3, a5);
  if ((*a5)((NetworkEdge *)a4, a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a3, a4);
    if ((*a5)(a3, a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a2, (uint64_t)a3);
      if ((*a5)(a2, a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a1, (uint64_t)a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(NetworkEdge *a1, NetworkEdge *a2, NetworkEdge *a3, NetworkEdge *a4, uint64_t a5, uint64_t (**a6)(NetworkEdge *, NetworkEdge *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*a6)((NetworkEdge *)a5, a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a4, a5);
    if ((*a6)(a4, a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a3, (uint64_t)a4);
      if ((*a6)(a3, a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a2, (uint64_t)a3);
        if ((*a6)(a2, a1))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a1, (uint64_t)a2);
        }
      }
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(void), uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
  while (2)
  {
    int v11 = a2 - 1;
    uint64_t v84 = a2 - 2;
    BOOL v87 = a2;
    double v82 = a2 - 3;
    uint64_t v12 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v10 = v12;
          char v13 = v87;
          uint64_t v14 = (char *)v87 - (char *)v12;
          uint64_t v15 = v87 - v12;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                BOOL result = ((uint64_t (*)(void, uint64_t))*a3)(*(v87 - 1), *v10);
                if (result)
                {
                  uint64_t v42 = *v10;
                  *uint64_t v10 = *(v87 - 1);
                  *(v87 - 1) = v42;
                }
                break;
              case 3:
                BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v10, v10 + 1, v11, a3);
                break;
              case 4:
                BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v10, v10 + 1, v10 + 2, v11, a3);
                break;
              case 5:
                BOOL result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            uint64_t v43 = v10 + 1;
            BOOL v45 = v10 == v87 || v43 == v87;
            if (a5)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                uint64_t v47 = v10;
                do
                {
                  uint64_t v49 = *v47;
                  uint64_t v48 = v47[1];
                  uint64_t v47 = v43;
                  BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = *v47;
                    uint64_t v51 = v46;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v51 + 8) = *(uint64_t *)((char *)v10 + v51);
                      if (!v51) {
                        break;
                      }
                      BOOL result = ((uint64_t (*)(uint64_t, void))*a3)(v50, *(uint64_t *)((char *)v10 + v51 - 8));
                      v51 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v52 = (uint64_t *)((char *)v10 + v51 + 8);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v52 = v10;
LABEL_81:
                    *uint64_t v52 = v50;
                  }
                  uint64_t v43 = v47 + 1;
                  v46 += 8;
                }
                while (v47 + 1 != v87);
              }
            }
            else if (!v45)
            {
              do
              {
                uint64_t v77 = *v10;
                uint64_t v76 = v10[1];
                uint64_t v10 = v43;
                BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v76, v77);
                if (result)
                {
                  uint64_t v78 = *v10;
                  unint64_t v79 = v10;
                  do
                  {
                    unint64_t v80 = v79;
                    uint64_t v81 = *--v79;
                    uint64_t *v80 = v81;
                    BOOL result = ((uint64_t (*)(uint64_t, void))*a3)(v78, *(v80 - 2));
                  }
                  while ((result & 1) != 0);
                  uint64_t *v79 = v78;
                }
                uint64_t v43 = v10 + 1;
              }
              while (v10 + 1 != v87);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != v87)
            {
              int64_t v53 = (unint64_t)(v15 - 2) >> 1;
              int64_t v85 = v53;
              do
              {
                int64_t v54 = v53;
                if (v85 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  uint64_t v56 = &v10[v55];
                  if (2 * v53 + 2 < v15 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v56, v56[1]))
                  {
                    ++v56;
                    uint64_t v55 = 2 * v54 + 2;
                  }
                  uint64_t v57 = &v10[v54];
                  BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v56, *v57);
                  if ((result & 1) == 0)
                  {
                    int64_t v83 = v54;
                    uint64_t v58 = *v57;
                    do
                    {
                      unint64_t v59 = v56;
                      *uint64_t v57 = *v56;
                      if (v85 < v55) {
                        break;
                      }
                      uint64_t v60 = (2 * v55) | 1;
                      uint64_t v56 = &v10[v60];
                      if (2 * v55 + 2 < v15 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v56, v56[1]))
                      {
                        ++v56;
                        uint64_t v60 = 2 * v55 + 2;
                      }
                      BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v56, v58);
                      uint64_t v57 = v59;
                      uint64_t v55 = v60;
                    }
                    while (!result);
                    *unint64_t v59 = v58;
                    char v13 = v87;
                    int64_t v54 = v83;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v61 = (unint64_t)v14 >> 3;
              do
              {
                unint64_t v62 = v13;
                uint64_t v63 = 0;
                uint64_t v64 = v61 - 2;
                uint64_t v86 = *v10;
                if (v61 < 2) {
                  uint64_t v64 = v61 - 1;
                }
                uint64_t v65 = v64 >> 1;
                uint64_t v66 = v10;
                do
                {
                  uint64_t v67 = &v66[v63 + 1];
                  uint64_t v68 = (2 * v63) | 1;
                  uint64_t v69 = 2 * v63 + 2;
                  if (v69 < v61)
                  {
                    BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v66[v63 + 1], v66[v63 + 2]);
                    if (result)
                    {
                      ++v67;
                      uint64_t v68 = v69;
                    }
                  }
                  uint64_t *v66 = *v67;
                  uint64_t v66 = v67;
                  uint64_t v63 = v68;
                }
                while (v68 <= v65);
                char v13 = v62 - 1;
                if (v67 == v62 - 1)
                {
                  *uint64_t v67 = v86;
                }
                else
                {
                  *uint64_t v67 = *v13;
                  *char v13 = v86;
                  uint64_t v70 = (char *)v67 - (char *)v10 + 8;
                  if (v70 >= 9)
                  {
                    unint64_t v71 = (((unint64_t)v70 >> 3) - 2) >> 1;
                    unint64_t v72 = &v10[v71];
                    BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v72, *v67);
                    if (result)
                    {
                      uint64_t v73 = *v67;
                      do
                      {
                        unint64_t v74 = v72;
                        *uint64_t v67 = *v72;
                        if (!v71) {
                          break;
                        }
                        unint64_t v71 = (v71 - 1) >> 1;
                        unint64_t v72 = &v10[v71];
                        BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v72, v73);
                        uint64_t v67 = v74;
                      }
                      while ((result & 1) != 0);
                      *unint64_t v74 = v73;
                    }
                  }
                }
              }
              while (v61-- > 2);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          uint64_t v17 = &v10[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v17, v10, v11, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v10, v17, v11, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v10 + 1, v17 - 1, v84, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v10 + 2, &v10[v16 + 1], v82, a3);
            char v13 = v87;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v17 - 1, v17, &v10[v16 + 1], a3);
            uint64_t v18 = *v10;
            *uint64_t v10 = *v17;
            *uint64_t v17 = v18;
          }
          --a4;
          if (a5 & 1) != 0 || (((uint64_t (*)(void, uint64_t))*a3)(*(v10 - 1), *v10)) {
            break;
          }
          uint64_t v33 = *v10;
          BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v10, *v11);
          if (result)
          {
            uint64_t v12 = v10;
            do
            {
              uint64_t v34 = v12[1];
              ++v12;
              BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v34);
            }
            while ((result & 1) == 0);
          }
          else
          {
            int64_t v35 = v10 + 1;
            do
            {
              uint64_t v12 = v35;
              if (v35 >= v87) {
                break;
              }
              ++v35;
              BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, *v12);
            }
            while (!result);
          }
          uint64_t v36 = v87;
          if (v12 < v87)
          {
            uint64_t v36 = v87;
            do
            {
              uint64_t v37 = *--v36;
              BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v37);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v36)
          {
            uint64_t v38 = *v12;
            *uint64_t v12 = *v36;
            *uint64_t v36 = v38;
            do
            {
              uint64_t v39 = v12[1];
              ++v12;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v33, v39));
            do
            {
              uint64_t v40 = *--v36;
              BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v40);
            }
            while ((result & 1) != 0);
          }
          int64_t v41 = v12 - 1;
          BOOL v5 = v12 - 1 >= v10;
          BOOL v6 = v12 - 1 == v10;
          if (v12 - 1 != v10) {
            *uint64_t v10 = *v41;
          }
          a5 = 0;
          uint64_t *v41 = v33;
        }
        uint64_t v19 = 0;
        uint64_t v20 = *v10;
        do
          char v21 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[++v19], v20);
        while ((v21 & 1) != 0);
        unint64_t v22 = &v10[v19];
        BOOL v23 = v13;
        if (v19 == 1)
        {
          BOOL v23 = v13;
          do
          {
            if (v22 >= v23) {
              break;
            }
            uint64_t v25 = *--v23;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v25, v20) & 1) == 0);
        }
        else
        {
          do
            uint64_t v24 = *--v23;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v24, v20));
        }
        if (v22 >= v23)
        {
          uint64_t v31 = v22 - 1;
        }
        else
        {
          unint64_t v26 = &v10[v19];
          id v27 = v23;
          do
          {
            uint64_t v28 = *v26;
            uint64_t *v26 = *v27;
            uint64_t *v27 = v28;
            do
            {
              uint64_t v29 = v26[1];
              ++v26;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v20) & 1) != 0);
            do
              uint64_t v30 = *--v27;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v30, v20));
          }
          while (v26 < v27);
          uint64_t v31 = v26 - 1;
        }
        if (v31 != v10) {
          *uint64_t v10 = *v31;
        }
        *uint64_t v31 = v20;
        if (v22 >= v23) {
          break;
        }
LABEL_33:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**,false>(v10, v31, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v31 + 1;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v10, v31, a3);
      uint64_t v12 = v31 + 1;
      BOOL result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v31 + 1, v87, a3);
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_33;
      }
    }
    a2 = v31;
    if (!v32) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(void *a1, void *a2, void *a3, uint64_t (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t result = (*a4)(*a3);
      if (result)
      {
        uint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
    if (result)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(void *a1, void *a2, uint64_t (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          unint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    int v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(void))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t (**a6)(void))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned long,BOOL>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,BOOL>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,BOOL>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        BOOL v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      BOOL v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    int v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    *((unsigned char *)v7 + 40) = 0;
    *int v7 = 0;
    v7[1] = 0;
    BOOL v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

char *std::__tree<std::__value_type<CRCHuint128,int>,std::__map_value_compare<CRCHuint128,std::__value_type<CRCHuint128,int>,std::less<CRCHuint128>,true>,std::allocator<std::__value_type<CRCHuint128,int>>>::__emplace_unique_key_args<CRCHuint128,std::piecewise_construct_t const&,std::tuple<CRCHuint128 const&>,std::tuple<>>(uint64_t **a1, _DWORD *a2, _OWORD *a3)
{
  uint64_t v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (char *)v5;
        int v9 = (_DWORD *)v5 + 7;
        if (!CRCHuint128::operator<(a2, (_DWORD *)v5 + 7)) {
          break;
        }
        BOOL v5 = *(uint64_t **)v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_9;
        }
      }
      if (!CRCHuint128::operator<(v9, a2)) {
        break;
      }
      BOOL v5 = (uint64_t *)*((void *)v8 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v8 = (char *)(a1 + 1);
LABEL_9:
    uint64_t v10 = v8;
    unint64_t v8 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v8 + 28) = *a3;
    *((_DWORD *)v8 + 11) = 0;
    *(void *)unint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *uint64_t v6 = (uint64_t *)v8;
    uint64_t v11 = (uint64_t *)**a1;
    uint64_t v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

void std::vector<NetworkEdge>::__assign_with_size[abi:ne180100]<NetworkEdge*,NetworkEdge*>(uint64_t a1, NetworkEdge *a2, NetworkEdge *a3, unint64_t a4)
{
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)a1) >> 4) < a4)
  {
    if (v10)
    {
      std::vector<NetworkEdge>::__clear[abi:ne180100]((uint64_t *)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x333333333333333) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x199999999999999) {
      unint64_t v13 = 0x333333333333333;
    }
    else {
      unint64_t v13 = v12;
    }
    std::vector<NetworkEdge>::__vallocate[abi:ne180100]((void *)a1, v13);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NetworkEdge>,NetworkEdge*,NetworkEdge*,NetworkEdge*>(v9, a2, a3, *(NetworkEdge **)(a1 + 8));
    goto LABEL_13;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 8) - v10) >> 4) < a4)
  {
    uint64_t v15 = (NetworkEdge *)((char *)a2 + 16 * ((*(void *)(a1 + 8) - v10) >> 4));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NetworkEdge *,NetworkEdge *,NetworkEdge *,0>((uint64_t)a2, (uint64_t)v15, v10);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NetworkEdge>,NetworkEdge*,NetworkEdge*,NetworkEdge*>(v9, v15, a3, *(NetworkEdge **)(a1 + 8));
LABEL_13:
    *(void *)(a1 + 8) = v14;
    return;
  }
  uint64_t v16 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NetworkEdge *,NetworkEdge *,NetworkEdge *,0>((uint64_t)a2, (uint64_t)a3, v10);
  for (uint64_t i = *(void *)(a1 + 8); i != v16; i -= 80)
  {
    uint64_t v18 = *(void **)(i - 24);
    if (v18)
    {
      *(void *)(i - 16) = v18;
      operator delete(v18);
    }
  }
  *(void *)(a1 + 8) = v16;
}

void sub_1DD802F4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DD802F54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<NetworkEdge>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

NetworkEdge *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NetworkEdge>,NetworkEdge*,NetworkEdge*,NetworkEdge*>(uint64_t a1, NetworkEdge *a2, NetworkEdge *a3, NetworkEdge *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  unint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      NetworkEdge::NetworkEdge(v4, v6);
      uint64_t v6 = (const NetworkEdge *)((char *)v6 + 80);
      uint64_t v4 = (NetworkEdge *)((char *)v11 + 80);
      unint64_t v11 = (NetworkEdge *)((char *)v11 + 80);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,NetworkEdge*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1DD803040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,NetworkEdge*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,NetworkEdge*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,NetworkEdge*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(void *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 80;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NetworkEdge *,NetworkEdge *,NetworkEdge *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      NetworkEdge::operator=(a3, v5);
      v5 += 80;
      a3 += 80;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    char v9 = (uint64_t *)operator new(0x40uLL);
    uint64_t v10 = *a3;
    v9[7] = 0;
    v9[6] = 0;
    v9[4] = v10;
    v9[5] = (uint64_t)(v9 + 6);
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t std::__tree<CRCHuint128>::find<CRCHuint128>(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    BOOL v6 = CRCHuint128::operator<((_DWORD *)(v3 + 28), a2);
    int v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      int v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || CRCHuint128::operator<(a2, (_DWORD *)(v5 + 28))) {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<CRCHuint128>::__emplace_unique_key_args<CRCHuint128,CRCHuint128 const&>(uint64_t **a1, _DWORD *a2, _OWORD *a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        char v9 = (_DWORD *)v5 + 7;
        if (!CRCHuint128::operator<(a2, (_DWORD *)v5 + 7)) {
          break;
        }
        uint64_t v5 = *v8;
        BOOL v6 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      uint64_t result = (uint64_t *)CRCHuint128::operator<(v9, a2);
      if (!result) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        BOOL v6 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_9:
    unint64_t v11 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v11 + 28) = *a3;
    return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v11);
  }
  return result;
}

void *std::__tree<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<CRCHNodeTuple<unsigned long,unsigned long>,std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::less<CRCHNodeTuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>>>::find<CRCHNodeTuple<unsigned long,unsigned long>>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  BOOL v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v9 = v7 == a2;
    BOOL v8 = v7 < a2;
    if (v9) {
      BOOL v8 = v4[5] < a3;
    }
    BOOL v9 = !v8;
    if (v8) {
      uint64_t v10 = v4 + 1;
    }
    else {
      uint64_t v10 = v4;
    }
    if (v9) {
      BOOL v6 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }
  while (*v10);
  if (v6 == v3) {
    return v3;
  }
  unint64_t v11 = v6[4];
  BOOL v9 = v11 == a2;
  BOOL v12 = v11 > a2;
  if (v9) {
    BOOL v12 = v6[5] > a3;
  }
  if (v12) {
    return v3;
  }
  return v6;
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  BOOL v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    BOOL v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    unint64_t v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = *a3;
    unint64_t v11 = (uint64_t *)operator new(0x40uLL);
    BOOL v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      v11[6] = *((void *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *((_DWORD *)v11 + 14) = 0;
    *unint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *BOOL v6 = v11;
    uint64_t v14 = (uint64_t *)**a1;
    uint64_t v15 = v11;
    if (v14)
    {
      *a1 = v14;
      uint64_t v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      unint64_t v8 = (uint64_t **)v5;
      BOOL v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      BOOL v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2)) {
      break;
    }
    BOOL v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  unint64_t v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_1DD803574(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::map<unsigned long long,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 24;
        std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>(uint64_t **a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8 = a1 + 1;
  unint64_t v7 = a1[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v7;
        unint64_t v10 = v7[4];
        if (v10 <= a2) {
          break;
        }
        unint64_t v7 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= a2) {
        return 0;
      }
      unint64_t v7 = v9[1];
      if (!v7)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_9:
    unint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = a3;
    v11[5] = a4;
    *unint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *unint64_t v8 = v11;
    BOOL v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      long long v13 = *v8;
    }
    else
    {
      long long v13 = v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

uint64_t std::set<int>::set[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    BOOL v6 = 0;
    unint64_t v7 = (uint64_t *)(a1 + 8);
    while (1)
    {
      int v8 = *((_DWORD *)v5 + 7);
      BOOL v9 = v3;
      if (v7 == v3) {
        goto LABEL_9;
      }
      unint64_t v10 = v6;
      unint64_t v11 = v3;
      if (v6)
      {
        do
        {
          BOOL v9 = v10;
          unint64_t v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          unint64_t v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 7) < v8)
      {
LABEL_9:
        if (v6) {
          long long v13 = (uint64_t **)v9;
        }
        else {
          long long v13 = (uint64_t **)v3;
        }
        if (v6) {
          uint64_t v14 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v14 = (uint64_t **)v3;
        }
        if (!*v14)
        {
LABEL_25:
          uint64_t v17 = (uint64_t *)operator new(0x20uLL);
          *((_DWORD *)v17 + 7) = v8;
          std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v13, v14, v17);
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v3;
        long long v13 = (uint64_t **)v3;
        if (!v6) {
          goto LABEL_25;
        }
        uint64_t v15 = v6;
        while (1)
        {
          while (1)
          {
            long long v13 = (uint64_t **)v15;
            int v16 = *((_DWORD *)v15 + 7);
            if (v16 <= v8) {
              break;
            }
            uint64_t v15 = *v13;
            uint64_t v14 = v13;
            if (!*v13) {
              goto LABEL_25;
            }
          }
          if (v16 >= v8) {
            break;
          }
          uint64_t v15 = v13[1];
          if (!v15)
          {
            uint64_t v14 = v13 + 1;
            goto LABEL_25;
          }
        }
      }
      uint64_t v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v5[2];
          BOOL v12 = *v19 == (void)v5;
          uint64_t v5 = v19;
        }
        while (!v12);
      }
      if (v19 == v4) {
        return a1;
      }
      unint64_t v7 = *(uint64_t **)a1;
      BOOL v6 = *(uint64_t **)(a1 + 8);
      uint64_t v5 = v19;
    }
  }
  return a1;
}

void sub_1DD803850(_Unwind_Exception *a1)
{
  std::__tree<CRCHuint128>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::vector<int>::pointer end = this->__end_;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    int v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*,false>(CRCHLatticePath *a1, const CRCHLatticePath *a2, uint64_t (**a3)(CRCHLatticePath *, CRCHLatticePath *), uint64_t a4, char a5)
{
void sub_1DD8041FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)&a70);
  _Unwind_Resume(a1);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(CRCHLatticePath *a1, uint64_t a2)
{
  CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v4, a1);
  CRCHLatticePath::operator=((uint64_t)a1, a2);
  CRCHLatticePath::operator=(a2, (uint64_t)v4);
  CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v4);
}

void sub_1DD804300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(CRCHLatticePath *a1, CRCHLatticePath *a2, uint64_t a3, uint64_t (**a4)(CRCHLatticePath *, CRCHLatticePath *))
{
  char v8 = (*a4)(a2, a1);
  int v9 = (*a4)((CRCHLatticePath *)a3, a2);
  if (v8)
  {
    if (v9)
    {
      unint64_t v10 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a1, (uint64_t)a2);
      if (!(*a4)((CRCHLatticePath *)a3, a2)) {
        return;
      }
      unint64_t v10 = a2;
    }
    uint64_t v11 = a3;
  }
  else
  {
    if (!v9) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a2, a3);
    if (!(*a4)(a2, a1)) {
      return;
    }
    unint64_t v10 = a1;
    uint64_t v11 = (uint64_t)a2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(v10, v11);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(uint64_t a1, const CRCHLatticePath *a2, uint64_t (**a3)(CRCHLatticePath *, CRCHLatticePath *))
{
  BOOL v6 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - a1) >> 6))
  {
    case 0:
    case 1:
      return v6;
    case 2:
      if ((*a3)((const CRCHLatticePath *)((char *)a2 - 448), (CRCHLatticePath *)a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>((CRCHLatticePath *)a1, (uint64_t)a2 - 448);
      }
      return v6;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)a1, (CRCHLatticePath *)(a1 + 448), (uint64_t)a2 - 448, a3);
      return v6;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)a1, (CRCHLatticePath *)(a1 + 448), (CRCHLatticePath *)(a1 + 896), (uint64_t)a2 - 448, a3);
      return v6;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)a1, (CRCHLatticePath *)(a1 + 448), (CRCHLatticePath *)(a1 + 896), (CRCHLatticePath *)(a1 + 1344), (uint64_t)a2 - 448, a3);
      return v6;
    default:
      unint64_t v7 = (CRCHLatticePath *)(a1 + 896);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)a1, (CRCHLatticePath *)(a1 + 448), a1 + 896, a3);
      char v8 = (const CRCHLatticePath *)(a1 + 1344);
      if ((const CRCHLatticePath *)(a1 + 1344) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    unint64_t v7 = v8;
    v9 += 448;
    char v8 = (const CRCHLatticePath *)((char *)v8 + 448);
    if (v8 == a2) {
      return 1;
    }
  }
  CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v15, v8);
  uint64_t v11 = v9;
  while (1)
  {
    CRCHLatticePath::operator=(a1 + v11 + 1344, a1 + v11 + 896);
    if (v11 == -896) {
      break;
    }
    char v12 = (*a3)((CRCHLatticePath *)v15, (CRCHLatticePath *)(a1 + v11 + 448));
    v11 -= 448;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = a1 + v11 + 1344;
      goto LABEL_12;
    }
  }
  uint64_t v13 = a1;
LABEL_12:
  CRCHLatticePath::operator=(v13, (uint64_t)v15);
  if (++v10 != 8)
  {
    CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v15);
    goto LABEL_14;
  }
  BOOL v6 = (const CRCHLatticePath *)((char *)v8 + 448) == a2;
  CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v15);
  return v6;
}

void sub_1DD8045F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CRCHLatticePath::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      free(v4);
      *(void *)a1 = 0;
    }
    if (*(void *)a2)
    {
      char v5 = malloc_type_malloc(4 * *(void *)(a2 + 16), 0x100004052888210uLL);
      *(void *)a1 = v5;
      memcpy(v5, *(const void **)a2, 4 * *(void *)(a2 + 24));
    }
    BOOL v6 = *(void **)(a1 + 8);
    if (v6)
    {
      free(v6);
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)(a2 + 8))
    {
      unint64_t v7 = malloc_type_malloc(4 * *(void *)(a2 + 16), 0x100004052888210uLL);
      *(void *)(a1 + 8) = v7;
      memcpy(v7, *(const void **)(a2 + 8), 4 * *(void *)(a2 + 24));
    }
    char v8 = *(char **)(a2 + 64);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 64), v8, *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - (void)v8) >> 3);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 88), *(char **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    objc_storeStrong((id *)(a1 + 232), *(id *)(a2 + 232));
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>((char *)(a1 + 288), *(char **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 4);
    std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>((char *)(a1 + 312), *(char **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 4);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 336), *(char **)(a2 + 336), *(void *)(a2 + 344), (uint64_t)(*(void *)(a2 + 344) - *(void *)(a2 + 336)) >> 3);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 360), *(char **)(a2 + 360), *(void *)(a2 + 368), (uint64_t)(*(void *)(a2 + 368) - *(void *)(a2 + 360)) >> 3);
    std::vector<BOOL>::operator=((void **)(a1 + 384), a2 + 384);
    std::vector<BOOL>::operator=((void **)(a1 + 408), a2 + 408);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 248), *(char **)(a2 + 248), *(void *)(a2 + 256), (uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 3);
  }
  return a1;
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        char v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      BOOL v6 = *(void **)(a2 + 8);
    }
    else
    {
      BOOL v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(CRCHLatticePath *a1, CRCHLatticePath *a2, CRCHLatticePath *a3, uint64_t a4, uint64_t (**a5)(CRCHLatticePath *, CRCHLatticePath *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(a1, a2, (uint64_t)a3, a5);
  if ((*a5)((CRCHLatticePath *)a4, a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a3, a4);
    if ((*a5)(a3, a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a2, (uint64_t)a3);
      if ((*a5)(a2, a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a1, (uint64_t)a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(CRCHLatticePath *a1, CRCHLatticePath *a2, CRCHLatticePath *a3, CRCHLatticePath *a4, uint64_t a5, uint64_t (**a6)(CRCHLatticePath *, CRCHLatticePath *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*a6)((CRCHLatticePath *)a5, a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a4, a5);
    if ((*a6)(a4, a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a3, (uint64_t)a4);
      if ((*a6)(a3, a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a2, (uint64_t)a3);
        if ((*a6)(a2, a1))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a1, (uint64_t)a2);
        }
      }
    }
  }
}

uint64_t CRCHFixedHeap<double,NodePairPtr>::upheap(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2 + 16 * a3;
  double v4 = *(double *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  double v6 = -2147483650.0;
  if (!(_BYTE)result) {
    double v6 = 2147483650.0;
  }
  *(double *)a2 = v6;
  *(void *)(a2 + 8) = 0;
  while (1)
  {
    unint64_t v7 = a3;
    a3 >>= 1;
    double v8 = *(double *)(a2 + 16 * a3);
    if (!(_BYTE)result) {
      break;
    }
    if (v4 > v8) {
      goto LABEL_10;
    }
LABEL_8:
    if (v7 != a3)
    {
      uint64_t v9 = a2 + 16 * v7;
      *(double *)uint64_t v9 = v8;
      *(void *)(v9 + 8) = *(void *)(a2 + 16 * a3 + 8);
    }
  }
  if (v4 >= v8) {
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v10 = a2 + 16 * v7;
  *(double *)uint64_t v10 = v4;
  *(void *)(v10 + 8) = v5;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  double v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        double v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        double v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    unint64_t v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    void v7[5] = 0;
    *unint64_t v7 = 0;
    v7[1] = 0;
    BOOL v7[2] = v9;
    *double v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void CRCHFixedHeap<double,LatticePathPtr>::CRCHFixedHeap(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = 1;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  operator new[]();
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1E01BF140);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
  while (2)
  {
    char v12 = a2 - 1;
    uint64_t v70 = a2;
    unint64_t v72 = a2 - 2;
    uint64_t v69 = a2 - 3;
    uint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t result = (*a3)(v12, v11);
                if (result)
                {
                  uint64_t v31 = *v11;
                  if (v11 != v12) {
                    *uint64_t v11 = *v12;
                  }
                  *char v12 = v31;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v11, v11 + 1, v12, a3);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v11, v11 + 1, v11 + 2, v12, a3);
                break;
              case 5uLL:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v11, v11 + 1, v11 + 2, v11 + 3, v12, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            BOOL v32 = v11 + 1;
            BOOL v34 = v11 == a2 || v32 == a2;
            if (a5)
            {
              if (!v34)
              {
                uint64_t v35 = 0;
                int64_t v36 = v11;
                do
                {
                  int64_t v37 = v36;
                  int64_t v36 = v32;
                  uint64_t result = (*a3)(v32, v37);
                  if (result)
                  {
                    uint64_t v74 = *v36;
                    uint64_t v38 = v35;
                    while (1)
                    {
                      *(uint64_t *)((char *)v11 + v38 + 8) = *(uint64_t *)((char *)v11 + v38);
                      if (!v38) {
                        break;
                      }
                      v38 -= 8;
                      uint64_t result = (*a3)(&v74, (uint64_t *)((char *)v11 + v38));
                      if ((result & 1) == 0)
                      {
                        uint64_t v39 = (uint64_t *)((char *)v11 + v38 + 8);
                        goto LABEL_87;
                      }
                    }
                    uint64_t v39 = v11;
LABEL_87:
                    a2 = v70;
                    if (v39 != &v74) {
                      *uint64_t v39 = v74;
                    }
                  }
                  BOOL v32 = v36 + 1;
                  v35 += 8;
                }
                while (v36 + 1 != a2);
              }
            }
            else if (!v34)
            {
              do
              {
                uint64_t v65 = v11;
                uint64_t v11 = v32;
                uint64_t result = (*a3)(v32, v65);
                if (result)
                {
                  uint64_t v74 = *v11;
                  uint64_t v66 = v11;
                  do
                  {
                    uint64_t v67 = v66;
                    uint64_t v68 = *--v66;
                    *uint64_t v67 = v68;
                    uint64_t result = (*a3)(&v74, v67 - 2);
                  }
                  while ((result & 1) != 0);
                  if (v66 != &v74) {
                    uint64_t *v66 = v74;
                  }
                }
                BOOL v32 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v40 = (v15 - 2) >> 1;
              int64_t v73 = v40;
              do
              {
                int64_t v41 = v40;
                if (v73 >= v40)
                {
                  uint64_t v42 = (2 * v40) | 1;
                  uint64_t v43 = &v11[v42];
                  if (2 * v40 + 2 < (uint64_t)v15 && (*a3)(&v11[v42], v43 + 1))
                  {
                    ++v43;
                    uint64_t v42 = 2 * v41 + 2;
                  }
                  uint64_t v44 = &v11[v41];
                  uint64_t result = (*a3)(v43, v44);
                  a2 = v70;
                  if ((result & 1) == 0)
                  {
                    uint64_t v74 = *v44;
                    do
                    {
                      uint64_t v45 = v43;
                      if (v44 != v43) {
                        uint64_t *v44 = *v43;
                      }
                      if (v73 < v42) {
                        break;
                      }
                      uint64_t v46 = (2 * v42) | 1;
                      uint64_t v43 = &v11[v46];
                      uint64_t v47 = 2 * v42 + 2;
                      if (v47 < (uint64_t)v15 && (*a3)(&v11[v46], v43 + 1))
                      {
                        ++v43;
                        uint64_t v46 = v47;
                      }
                      uint64_t result = (*a3)(v43, &v74);
                      uint64_t v44 = v45;
                      uint64_t v42 = v46;
                    }
                    while (!result);
                    if (v45 != &v74) {
                      *uint64_t v45 = v74;
                    }
                    a2 = v70;
                  }
                }
                int64_t v40 = v41 - 1;
              }
              while (v41);
              uint64_t v48 = (unint64_t)v14 >> 3;
              do
              {
                uint64_t v49 = a2;
                uint64_t v50 = 0;
                uint64_t v51 = v48 - 2;
                uint64_t v71 = *v11;
                if (v48 < 2) {
                  uint64_t v51 = v48 - 1;
                }
                uint64_t v52 = v51 >> 1;
                unint64_t v53 = v11;
                do
                {
                  uint64_t v54 = &v53[v50 + 1];
                  uint64_t v55 = 2 * v50;
                  uint64_t v50 = (2 * v50) | 1;
                  uint64_t v56 = v55 + 2;
                  if (v55 + 2 < v48)
                  {
                    uint64_t result = (*a3)(v54, v54 + 1);
                    if (result)
                    {
                      ++v54;
                      uint64_t v50 = v56;
                    }
                  }
                  if (v53 != v54) {
                    *unint64_t v53 = *v54;
                  }
                  unint64_t v53 = v54;
                }
                while (v50 <= v52);
                uint64_t v57 = v49 - 1;
                if (v54 == v57)
                {
                  uint64_t v58 = v57;
                  uint64_t v60 = v48 - 1;
                  *uint64_t v54 = v71;
                }
                else
                {
                  *uint64_t v54 = *v57;
                  uint64_t v58 = v57;
                  *uint64_t v57 = v71;
                  uint64_t v59 = (char *)v54 - (char *)v11 + 8;
                  uint64_t v60 = v48 - 1;
                  if (v59 >= 9)
                  {
                    unint64_t v61 = (((unint64_t)v59 >> 3) - 2) >> 1;
                    unint64_t v62 = &v11[v61];
                    uint64_t result = (*a3)(v62, v54);
                    if (result)
                    {
                      uint64_t v74 = *v54;
                      do
                      {
                        uint64_t v63 = v62;
                        if (v54 != v62) {
                          *uint64_t v54 = *v62;
                        }
                        if (!v61) {
                          break;
                        }
                        unint64_t v61 = (v61 - 1) >> 1;
                        unint64_t v62 = &v11[v61];
                        uint64_t result = (*a3)(v62, &v74);
                        uint64_t v54 = v63;
                      }
                      while ((result & 1) != 0);
                      if (v63 != &v74) {
                        *uint64_t v63 = v74;
                      }
                    }
                  }
                }
                BOOL v64 = v48 <= 2;
                uint64_t v48 = v60;
                a2 = v58;
              }
              while (!v64);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = &v11[v15 >> 1];
          if ((unint64_t)v14 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v11, &v11[v15 >> 1], v12, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v11 + 1, v17 - 1, v72, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v11 + 2, &v11[v16 + 1], v69, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v17 - 1, v17, &v11[v16 + 1], a3);
            uint64_t v18 = *v11;
            *uint64_t v11 = *v17;
            *uint64_t v17 = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(&v11[v15 >> 1], v11, v12, a3);
          }
          --a4;
          if (a5 & 1) != 0 || ((*a3)(v11 - 1, v11)) {
            break;
          }
          uint64_t v74 = *v11;
          uint64_t result = (*a3)(&v74, v12);
          if (result)
          {
            uint64_t v13 = v11;
            a2 = v70;
            do
              uint64_t result = (*a3)(&v74, ++v13);
            while ((result & 1) == 0);
          }
          else
          {
            id v27 = v11 + 1;
            a2 = v70;
            do
            {
              uint64_t v13 = v27;
              if (v27 >= v70) {
                break;
              }
              uint64_t result = (*a3)(&v74, v27);
              id v27 = v13 + 1;
            }
            while (!result);
          }
          uint64_t v28 = a2;
          if (v13 < a2)
          {
            uint64_t v28 = a2;
            do
              uint64_t result = (*a3)(&v74, --v28);
            while ((result & 1) != 0);
          }
          while (v13 < v28)
          {
            uint64_t v29 = *v13;
            *uint64_t v13 = *v28;
            *uint64_t v28 = v29;
            do
              ++v13;
            while (!(*a3)(&v74, v13));
            do
              uint64_t result = (*a3)(&v74, --v28);
            while ((result & 1) != 0);
          }
          uint64_t v30 = v13 - 1;
          if (v13 - 1 != v11) {
            *uint64_t v11 = *v30;
          }
          BOOL v5 = v30 >= &v74;
          BOOL v6 = v30 == &v74;
          if (v30 != &v74) {
            *uint64_t v30 = v74;
          }
          a5 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v74 = *v11;
        do
          ++v19;
        while (((*a3)(&v11[v19], &v74) & 1) != 0);
        uint64_t v20 = &v11[v19];
        char v21 = v70;
        BOOL v6 = v19 == 1;
        a2 = v70;
        if (v6)
        {
          char v21 = v70;
          do
          {
            if (v20 >= v21) {
              break;
            }
            --v21;
          }
          while (((*a3)(v21, &v74) & 1) == 0);
        }
        else
        {
          do
            --v21;
          while (!(*a3)(v21, &v74));
        }
        if (v20 < v21)
        {
          unint64_t v22 = v20;
          char v23 = v21;
          do
          {
            uint64_t v24 = *v22;
            *unint64_t v22 = *v23;
            *char v23 = v24;
            do
              ++v22;
            while (((*a3)(v22, &v74) & 1) != 0);
            do
              --v23;
            while (!(*a3)(v23, &v74));
          }
          while (v22 < v23);
          int v25 = v22 - 1;
        }
        else
        {
          int v25 = v20 - 1;
        }
        if (v25 != v11) {
          *uint64_t v11 = *v25;
        }
        if (v25 != &v74) {
          *int v25 = v74;
        }
        if (v20 >= v21) {
          break;
        }
LABEL_35:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*,false>(v11, v25, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v25 + 1;
      }
      BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v11, v25, a3);
      uint64_t v13 = v25 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v25 + 1, v70, a3);
      if (result) {
        break;
      }
      if (!v26) {
        goto LABEL_35;
      }
    }
    a2 = v25;
    if (!v26) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  BOOL v6 = a2;
  unint64_t v7 = a1;
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, v6);
  if (v8)
  {
    uint64_t v10 = *v7;
    if (result)
    {
      BOOL v6 = a3;
      if (v7 == a3)
      {
LABEL_5:
        *BOOL v6 = v10;
        return result;
      }
LABEL_4:
      *unint64_t v7 = *a3;
      BOOL v6 = a3;
      goto LABEL_5;
    }
    if (v7 != v6) {
      *unint64_t v7 = *v6;
    }
    *BOOL v6 = v10;
    uint64_t result = (*a4)(a3, v6);
    if (result)
    {
      uint64_t v10 = *v6;
      unint64_t v7 = v6;
      if (v6 == a3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (result)
  {
    uint64_t v11 = *v6;
    if (v6 != a3) {
      *BOOL v6 = *a3;
    }
    *a3 = v11;
    uint64_t result = (*a4)(v6, v7);
    if (result)
    {
      uint64_t v10 = *v7;
      a3 = v6;
      if (v7 == v6) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        uint64_t v9 = *a1;
        if (v8 != a1) {
          *a1 = *v8;
        }
        *char v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      uint64_t v17 = *v11;
      uint64_t v14 = v12;
      while (1)
      {
        unint64_t v15 = (uint64_t *)((char *)a1 + v14);
        *(uint64_t *)((char *)a1 + v14 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(uint64_t *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          unint64_t v16 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_14;
        }
      }
      unint64_t v16 = a1;
LABEL_14:
      if (v16 != &v17) {
        *unint64_t v16 = v17;
      }
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    if (a3 != a4) {
      *a3 = *a4;
    }
    *a4 = v11;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v12 = *a2;
      if (a2 != a3) {
        *a2 = *a3;
      }
      *a3 = v12;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v13 = *a1;
        if (a1 != a2) {
          *a1 = *a2;
        }
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    if (a4 != a5) {
      *a4 = *a5;
    }
    *a5 = v13;
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      uint64_t v14 = *a3;
      if (a3 != a4) {
        *a3 = *a4;
      }
      *a4 = v14;
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        uint64_t v15 = *a2;
        if (a2 != a3) {
          *a2 = *a3;
        }
        *a3 = v15;
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          uint64_t v16 = *a1;
          if (a1 != a2) {
            *a1 = *a2;
          }
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

double *CRCHFixedHeap<double,LatticePathPtr>::remove(double *result, void *a2)
{
  unint64_t v3 = a2[2];
  uint64_t v2 = (double *)a2[3];
  if (!v3)
  {
    result[1] = 0.0;
    *uint64_t result = *v2;
    if (v2 != result) {
      result[1] = v2[1];
    }
    return result;
  }
  result[1] = 0.0;
  double v4 = v2[2];
  *uint64_t result = v4;
  if (v2 + 2 != result) {
    result[1] = v2[3];
  }
  unint64_t v5 = v3 - 1;
  a2[2] = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v6 = *((void *)v2 + 3);
    goto LABEL_9;
  }
  unint64_t v7 = &v2[2 * v3];
  double v4 = *v7;
  v2[2] = *v7;
  uint64_t v6 = *((void *)v7 + 1);
  *((void *)v2 + 3) = v6;
  if (v3 >= 3)
  {
    int v10 = *(unsigned __int8 *)a2;
    uint64_t v8 = 1;
    while (1)
    {
      unint64_t v11 = 2 * v8;
      if (2 * v8 >= v5)
      {
        if (!v10) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = (double *)(16 * (v11 | 1));
        double v12 = *(double *)((char *)result + (void)v2);
        double v13 = v2[4 * v8];
        if (!v10)
        {
          if (v12 > v13) {
            v11 |= 1uLL;
          }
LABEL_23:
          double v14 = v2[2 * v11];
          if (v14 <= v4) {
            goto LABEL_10;
          }
          goto LABEL_24;
        }
        if (v12 < v13) {
          v11 |= 1uLL;
        }
      }
      double v14 = v2[2 * v11];
      if (v14 >= v4) {
        goto LABEL_10;
      }
LABEL_24:
      if (v8 != v11)
      {
        uint64_t v15 = &v2[2 * v8];
        *uint64_t v15 = v14;
        v15[1] = v2[2 * v11 + 1];
      }
      uint64_t v8 = v11;
      if (v11 > v5 >> 1)
      {
        uint64_t v8 = v11;
        goto LABEL_10;
      }
    }
  }
LABEL_9:
  uint64_t v8 = 1;
LABEL_10:
  uint64_t v9 = &v2[2 * v8];
  *uint64_t v9 = v4;
  *((void *)v9 + 1) = v6;
  if (a2[4] == v3) {
    return (double *)CRCHFixedHeap<double,LatticePathPtr>::updateWorstKV(a2);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHLatticePath>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x92492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(448 * a2);
}

uint64_t std::__split_buffer<CRCHLatticePath>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 448;
    CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)(i - 448));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1DD805D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD805F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD806CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD806EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD807008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD8070C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD80723C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD807F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD8085C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1DD8089B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Unwind_Resume(a1);
}

void sub_1DD808C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD808FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD809244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80978C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8099C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD809AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD809C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD809E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD809EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80A1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD80A28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80A408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1DD80A4D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_atomic_property__0(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
}

char *__assign_helper_atomic_property__0(char *result, uint64_t a2)
{
  if (result != (char *)a2) {
    return std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void *CoreRecognition::EspressoModelWrapper::EspressoModelWrapper(void *this)
{
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

void CoreRecognition::EspressoModelWrapper::~EspressoModelWrapper(void **this)
{
  if ((CoreRecognition::EspressoModelWrapper::resetEspressoState((CoreRecognition::EspressoModelWrapper *)this) & 1) == 0)
  {
    uint64_t v2 = CROSLogForCategory(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_1DD733000, v2, OS_LOG_TYPE_FAULT, "EspressoModelWrapper::~EspressoModelWrapper Error destroying model", v3, 2u);
    }
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
}

uint64_t CoreRecognition::EspressoModelWrapper::resetEspressoState(CoreRecognition::EspressoModelWrapper *this)
{
  if (*((void *)this + 2))
  {
    if (espresso_plan_destroy())
    {
      uint64_t v2 = CROSLogForCategory(0);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        __int16 v7 = 0;
        uint64_t v3 = "EspressoModelWrapper::resetEspressoState Error destroying plan";
        double v4 = (uint8_t *)&v7;
LABEL_10:
        _os_log_impl(&dword_1DD733000, v2, OS_LOG_TYPE_ERROR, v3, v4, 2u);
        goto LABEL_11;
      }
      goto LABEL_11;
    }
    *((void *)this + 2) = 0;
  }
  if (*((void *)this + 1))
  {
    if (espresso_context_destroy())
    {
      uint64_t v2 = CROSLogForCategory(0);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        __int16 v6 = 0;
        uint64_t v3 = "EspressoModelWrapper::resetEspressoState Error destroying context";
        double v4 = (uint8_t *)&v6;
        goto LABEL_10;
      }
LABEL_11:

      return 0;
    }
    *((void *)this + 1) = 0;
  }
  return 1;
}

uint64_t CoreRecognition::EspressoModelWrapper::createContext(_DWORD *a1, void *a2)
{
  id v3 = a2;
  if (v3 && *a1 == 5) {
    espresso_device_id_for_metal_device();
  }
  uint64_t context = espresso_create_context();

  return context;
}

void sub_1DD80AC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::EspressoModelWrapper::initialize(int *a1, uint64_t a2, int a3, void *a4)
{
  int v6 = 65552;
  id v7 = a4;
  *a1 = a3;
  if (a3 == 10007 || a3 == 5)
  {
LABEL_5:
    a1[1] = v6;
    uint64_t Context = CoreRecognition::EspressoModelWrapper::createContext(a1, v7);
    *((void *)a1 + 1) = Context;
    if (Context) {
      goto LABEL_6;
    }
    int v13 = *a1;
    if (*a1 == 10007)
    {
      double v14 = CROSLogForCategory(0);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DD733000, v14, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::initialize Cannot create ANE context, fallback to MPS", buf, 2u);
      }

      *a1 = 5;
      uint64_t v15 = CoreRecognition::EspressoModelWrapper::createContext(a1, v7);
      *((void *)a1 + 1) = v15;
      if (v15) {
        goto LABEL_6;
      }
      int v13 = *a1;
    }
    if (v13 != 5) {
      goto LABEL_19;
    }
    uint64_t v16 = CROSLogForCategory(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_1DD733000, v16, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::initialize Cannot create MPS context, fallback to CPU", v28, 2u);
    }

    *(void *)a1 = 0x1002000000000;
    uint64_t v17 = CoreRecognition::EspressoModelWrapper::createContext(a1, v7);
    *((void *)a1 + 1) = v17;
    if (!v17)
    {
LABEL_19:
      uint64_t v18 = CROSLogForCategory(0);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        __int16 v27 = 0;
        uint64_t v19 = "EspressoModelWrapper::initialize Error creating context";
        uint64_t v20 = (uint8_t *)&v27;
LABEL_23:
        _os_log_impl(&dword_1DD733000, v18, OS_LOG_TYPE_ERROR, v19, v20, 2u);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
LABEL_6:
    uint64_t plan = espresso_create_plan();
    *((void *)a1 + 2) = plan;
    if (!plan)
    {
      char v21 = CROSLogForCategory(0);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)BOOL v26 = 0;
        _os_log_impl(&dword_1DD733000, v21, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::initialize Error creating plan", v26, 2u);
      }

      CoreRecognition::EspressoModelWrapper::resetEspressoState((CoreRecognition::EspressoModelWrapper *)a1);
      goto LABEL_33;
    }
    if (espresso_plan_add_network())
    {
      int v10 = CROSLogForCategory(0);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
LABEL_32:

        CoreRecognition::EspressoModelWrapper::resetEspressoState((CoreRecognition::EspressoModelWrapper *)a1);
        goto LABEL_33;
      }
      __int16 v25 = 0;
      unint64_t v11 = "EspressoModelWrapper::initialize Error loading model";
      double v12 = (uint8_t *)&v25;
    }
    else
    {
      if (!espresso_plan_build())
      {
        MEMORY[0x1E01BEF50](a1 + 10, "");
        uint64_t v22 = 1;
        goto LABEL_34;
      }
      int v10 = CROSLogForCategory(0);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_32;
      }
      __int16 v24 = 0;
      unint64_t v11 = "EspressoModelWrapper::initialize Error building plan";
      double v12 = (uint8_t *)&v24;
    }
    _os_log_impl(&dword_1DD733000, v10, OS_LOG_TYPE_ERROR, v11, v12, 2u);
    goto LABEL_32;
  }
  if (!a3)
  {
    int v6 = 65568;
    goto LABEL_5;
  }
  uint64_t v18 = CROSLogForCategory(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v30 = 0;
    uint64_t v19 = "EspressoModelWrapper::initialize Unexpected computeEngine";
    uint64_t v20 = v30;
    goto LABEL_23;
  }
LABEL_24:

LABEL_33:
  uint64_t v22 = 0;
LABEL_34:

  return v22;
}

void sub_1DD80AF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::EspressoModelWrapper::bindInput(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  if (espresso_buffer_pack_tensor_shape())
  {
    id v3 = CROSLogForCategory(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v6 = 0;
      double v4 = "EspressoModelWrapper::setInput Error setting input buffer shape";
LABEL_7:
      _os_log_impl(&dword_1DD733000, v3, OS_LOG_TYPE_ERROR, v4, v6, 2u);
    }
  }
  else
  {
    *(void *)&long long v7 = a2;
    LODWORD(v17) = 65568;
    if (!espresso_network_bind_buffer()) {
      return 1;
    }
    id v3 = CROSLogForCategory(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v6 = 0;
      double v4 = "EspressoModelWrapper::setInput Error binding input buffer";
      goto LABEL_7;
    }
  }

  return 0;
}

uint64_t CoreRecognition::EspressoModelWrapper::bindOutput(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    int v7 = 0;
    espresso_blob_is_dynamic();
  }
  if (!espresso_network_bind_buffer()) {
    return 1;
  }
  double v4 = CROSLogForCategory(0);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v6 = 0;
    _os_log_impl(&dword_1DD733000, v4, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::bindOutput Error binding output buffer", v6, 2u);
  }

  return 0;
}

uint64_t CoreRecognition::EspressoModelWrapper::selectConfiguration(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = a2;
  double v4 = (std::string *)(a1 + 40);
  char v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (*(char *)(a1 + 63) < 0)
  {
    int v7 = *(const void **)(a1 + 40);
    size_t v6 = *(void *)(a1 + 48);
  }
  else
  {
    size_t v6 = *(unsigned __int8 *)(a1 + 63);
    int v7 = (const void *)(a1 + 40);
  }
  if (v5 >= 0) {
    size_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = a2->__r_.__value_.__l.__size_;
  }
  if (v5 < 0) {
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (size >= v6) {
    size_t v9 = v6;
  }
  else {
    size_t v9 = size;
  }
  if (memcmp(v7, a2, v9) || size != v6)
  {
    if (espresso_plan_get_phase() == 1 && espresso_plan_build_clean())
    {
      long long v11 = CROSLogForCategory(0);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        __int16 v17 = 0;
        long long v12 = "EspressoModelWrapper::selectConfiguration Error cleaning current plan";
        long long v13 = (uint8_t *)&v17;
LABEL_26:
        _os_log_impl(&dword_1DD733000, v11, OS_LOG_TYPE_ERROR, v12, v13, 2u);
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    if (espresso_network_select_configuration())
    {
      long long v11 = CROSLogForCategory(0);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        __int16 v16 = 0;
        long long v12 = "EspressoModelWrapper::selectConfiguration Error selecting configuration";
        long long v13 = (uint8_t *)&v16;
        goto LABEL_26;
      }
LABEL_27:

      return 0;
    }
    if (espresso_plan_build())
    {
      long long v11 = CROSLogForCategory(0);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        __int16 v15 = 0;
        long long v12 = "EspressoModelWrapper::selectConfiguration Error building Espresso plan";
        long long v13 = (uint8_t *)&v15;
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    std::string::operator=(v4, v2);
  }
  return 1;
}

BOOL CoreRecognition::EspressoModelWrapper::execute(CoreRecognition::EspressoModelWrapper *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v1 = espresso_plan_execute_sync();
  if (v1)
  {
    uint64_t error_info = espresso_plan_get_error_info();
    uint64_t v4 = v3;
    char v5 = CROSLogForCategory(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315650;
      uint64_t v8 = v4;
      __int16 v9 = 1024;
      int v10 = HIDWORD(error_info);
      __int16 v11 = 1024;
      int v12 = error_info;
      _os_log_impl(&dword_1DD733000, v5, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::execute Error executing model: %s (status=%d plan_status=%d)", (uint8_t *)&v7, 0x18u);
    }
  }
  return v1 == 0;
}

void sub_1DD80B71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80BF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,void *a32)
{
  _Unwind_Resume(a1);
}

void sub_1DD80C318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD80C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,id a52)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);

  _Block_object_dispose((const void *)(v55 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void sub_1DD80CBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80CDAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80CF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80CFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD80D4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13, void *a14, uint64_t a15, uint64_t a16)
{
  _Unwind_Resume(a1);
}

void sub_1DD80DCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(uint64_t result, double *a2, double *a3)
{
  if (a3 != a2)
  {
    uint64_t v3 = a3;
    char v5 = (double *)result;
    do
    {
      unint64_t v6 = v3 - v5;
      if (v6 < 2) {
        break;
      }
      if (v6 == 3)
      {
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(v5, v5 + 1, v3 - 1);
      }
      if (v6 == 2)
      {
        double v33 = *(v3 - 1);
        double v34 = *v5;
        if (v33 < *v5)
        {
          *char v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 63)
      {
        while (v5 != v3 - 1)
        {
          uint64_t v35 = v5++;
          if (v35 != v3 && v5 != v3)
          {
            double v36 = *v35;
            double v37 = *v35;
            uint64_t v38 = v5;
            uint64_t v39 = v35;
            int64_t v40 = v5;
            do
            {
              double v41 = *v40++;
              double v42 = v41;
              if (v41 < v37)
              {
                double v37 = v42;
                uint64_t v39 = v38;
              }
              uint64_t v38 = v40;
            }
            while (v40 != v3);
            if (v39 != v35)
            {
              double *v35 = *v39;
              *uint64_t v39 = v36;
            }
          }
        }
        return result;
      }
      int v7 = &v5[v6 >> 1];
      uint64_t v8 = v3 - 1;
      uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(v5, v7, v3 - 1);
      double v9 = *v5;
      if (*v5 >= *v7)
      {
        int v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            *char v5 = *v10;
            *int v10 = v9;
            uint64_t result = (result + 1);
            goto LABEL_13;
          }
        }
        uint64_t v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            double v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *uint64_t v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8) {
          return result;
        }
        while (1)
        {
          double v27 = *v5;
          do
          {
            double v28 = *v22++;
            double v29 = v28;
          }
          while (v27 >= v28);
          uint64_t v30 = v22 - 1;
          do
          {
            double v31 = *--v8;
            double v32 = v31;
          }
          while (v27 < v31);
          if (v30 >= v8) {
            break;
          }
          *uint64_t v30 = v32;
          *uint64_t v8 = v29;
        }
        char v5 = v22 - 1;
        if (v30 > a2) {
          return result;
        }
      }
      else
      {
        int v10 = v3 - 1;
LABEL_13:
        __int16 v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          __int16 v16 = v5 + 1;
        }
        else
        {
          int v12 = v5 + 1;
          while (1)
          {
            double v13 = *v7;
            do
            {
              double v14 = *v12++;
              double v15 = v14;
            }
            while (v14 < v13);
            __int16 v16 = v12 - 1;
            do
            {
              double v17 = *--v10;
              double v18 = v17;
            }
            while (v17 >= v13);
            if (v16 >= v10) {
              break;
            }
            *__int16 v16 = v18;
            *int v10 = v15;
            uint64_t result = (result + 1);
            if (v16 == v7) {
              int v7 = v10;
            }
          }
        }
        if (v16 != v7)
        {
          double v19 = *v16;
          if (*v7 < *v16)
          {
            *__int16 v16 = *v7;
            *int v7 = v19;
            uint64_t result = (result + 1);
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!result)
        {
          if (v16 <= a2)
          {
            __int16 v24 = v16 + 1;
            while (v24 != v3)
            {
              double v26 = *(v24 - 1);
              double v25 = *v24++;
              if (v25 < v26) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v11 != v16)
            {
              double v21 = *(v11 - 1);
              double v20 = *v11++;
              if (v20 < v21) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          char v5 = v16 + 1;
        }
        else {
          uint64_t v3 = v16;
        }
      }
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = *a1;
  double v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    double v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

void sub_1DD80E378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80E900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80EA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD80EAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80EB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80EB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80EBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80EC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80EC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80ECDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80ED70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD80EFFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1DD80F9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,void *a51,void *a52)
{
  _Block_object_dispose((const void *)(v55 - 176), 8);
  _Block_object_dispose((const void *)(v55 - 256), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void sub_1DD80FE2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD810040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD810234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8105C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD810840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1DD810A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD810B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD810C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD810CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD81115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  objc_destroyWeak((id *)(v15 - 96));
  _Unwind_Resume(a1);
}

void sub_1DD811768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1DD811A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD811F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1DD81221C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id -[CREngineAccurate _blockFromGroup:engineResult:titleRegion:canWrapToNextBlock:](CREngineAccurate *self, SEL a2, id a3, id a4, id *a5, BOOL a6)
{
  BOOL v6 = a6;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v25 = a3;
  id v26 = a4;
  double v9 = objc_opt_new();
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int v10 = [v25 subregions];
  BOOL v24 = v6;
  __int16 v11 = v10;
  uint64_t v12 = [v10 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v29 != v13) {
          objc_enumerationMutation(v11);
        }
        uint64_t v15 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        int v16 = [v15 conformsToProtocol:&unk_1F39415E8];
        id v17 = v15;
        double v18 = v17;
        if (v16)
        {
          double v19 = +[CROutputRegion outputRegionFromTextRegion:confidenceThresholdProvider:injectSpaceCharacter:](CROutputRegion, "outputRegionFromTextRegion:confidenceThresholdProvider:injectSpaceCharacter:", v17, self, [v17 whitespaceInjected] ^ 1);
          if (a5)
          {
            double v20 = [v26 titleRegion];
            BOOL v21 = v18 == v20;

            if (v21) {
              *a5 = v19;
            }
          }
          [v9 addObject:v19];
        }
        else
        {
          double v19 = +[CRLineOutputRegion lineWithDetectedRegion:v17];
          [v9 addObject:v19];
        }
      }
      int v10 = v11;
      uint64_t v12 = [v11 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v12);
  }

  uint64_t v22 = +[CRBlockOutputRegion blockWithGroupRegion:children:confidenceThresholdProvider:canWrapToNextBlock:]((uint64_t)CRBlockOutputRegion, v25, v9, (uint64_t)self, v24);

  return v22;
}

void sub_1DD812494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1DD812920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1DD812E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD8134A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  std::__tree<CRCHuint128>::destroy((uint64_t)&a21, a22);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }

  _Unwind_Resume(a1);
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    double v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1DD813824(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD817524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD8182D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8189D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  _Unwind_Resume(a1);
}

void sub_1DD818D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD818E20(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD818F10(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD819000(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD8190F0(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD819378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1DD81954C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD819678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD819810(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_1DD819930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __int16 v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1DD819A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD819D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD819E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD819F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD81A1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD81A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1DD81AF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1DD81B28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD81B3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD81B48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD81B978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1DD81BD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD81BE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD8215E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1DD821E50(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void DataHandler::readLines(DataHandler *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [NSString stringWithContentsOfFile:*((void *)this + 3) encoding:4 error:0];
  double v3 = [MEMORY[0x1E4F28B88] newlineCharacterSet];
  double v4 = [v2 componentsSeparatedByCharactersInSet:v3];

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v13;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8 * v8);
        int v10 = objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager", (void)v12);
        int v11 = [v10 fileExistsAtPath:v9];

        if (v11) {
          [*((id *)this + 1) addObject:v9];
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

void sub_1DD824DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DataHandler::parseLabels(DataHandler *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = [NSString stringWithContentsOfFile:*((void *)this + 3) encoding:4 error:0];
  uint64_t v2 = [MEMORY[0x1E4F28B88] newlineCharacterSet];
  double v3 = [v17 componentsSeparatedByCharactersInSet:v2];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  obuint64_t j = v3;
  uint64_t v4 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v20;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v20 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v19 + 1) + 8 * v6);
        uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
        int v9 = [v8 fileExistsAtPath:v7];

        if (v9)
        {
          int v10 = [v7 stringByDeletingPathExtension];
          int v11 = [v10 lastPathComponent];
          long long v12 = [v11 componentsSeparatedByString:@"_"];

          if ([v12 count] == 1)
          {
            long long v13 = [v10 lastPathComponent];
            uint64_t v14 = [v13 componentsSeparatedByString:@"-"];

            long long v12 = (void *)v14;
          }
          if ([v12 count] == 2)
          {
            uint64_t v15 = 1;
          }
          else
          {
            if ([v12 count] != 4)
            {
              NSLog(&cfstr_CouldnTParseTh.isa, v7);
              exit(-1);
            }
            uint64_t v15 = 3;
          }
          int v16 = [v12 objectAtIndex:v15];
          [*((id *)this + 2) addObject:v16];
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v4);
  }
}

void sub_1DD825084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void DataHandler::parseLabels(id *this, NSString *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = a2;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v31 = this;
  obuint64_t j = this[1];
  double v3 = 0;
  uint64_t v4 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v35;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v35 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v34 + 1) + 8 * v6);
        uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
        int v9 = [v8 fileExistsAtPath:v7];

        if (v9)
        {
          int v10 = [v7 stringByDeletingPathExtension];
          int v11 = (void *)MEMORY[0x1E4F1C9E8];
          long long v12 = [NSString stringWithFormat:@"%@.plist", v10];
          long long v13 = [v11 dictionaryWithContentsOfFile:v12];

          if (v13)
          {
            if ([(NSString *)v33 isEqualToString:@"identificationNumber"])
            {
              uint64_t v14 = [v13 objectForKey:@"illegibleIdentificationNumber"];
              BOOL v15 = v14 == 0;

              if (v15)
              {
                uint64_t v16 = [v13 objectForKey:v33];

                double v3 = (void *)v16;
              }
            }
            if ([(NSString *)v33 isEqualToString:@"cardholderName"])
            {
              uint64_t v17 = [v13 objectForKey:@"illegibleCardholderName"];
              BOOL v18 = v17 == 0;

              if (v18)
              {
                long long v19 = [v13 objectForKey:v33];
                long long v20 = [v19 uppercaseString];

                double v3 = v20;
                if (![v20 length]) {
                  NSLog(&cfstr_File_0.isa, v7);
                }
              }
            }
            if ([(NSString *)v33 isEqualToString:@"expiration"]
              && ([v13 objectForKey:@"illegibleExpiration"],
                  double v27 = objc_claimAutoreleasedReturnValue(),
                  BOOL v28 = v27 == 0,
                  v27,
                  v28))
            {
              long long v29 = [v13 objectForKey:v33];
              id v26 = [v29 uppercaseString];

              if (![v26 length]) {
                NSLog(&cfstr_File_0.isa, v7);
              }
            }
            else
            {
              id v26 = v3;
            }
            goto LABEL_28;
          }
          long long v21 = [v10 lastPathComponent];
          long long v22 = [v21 componentsSeparatedByString:@"_"];

          if ([v22 count] == 1)
          {
            double v23 = [v10 lastPathComponent];
            uint64_t v24 = [v23 componentsSeparatedByString:@"-"];

            long long v22 = (void *)v24;
          }
          if ([v22 count] == 2)
          {
            uint64_t v25 = 1;
            goto LABEL_21;
          }
          if ([v22 count] == 4)
          {
            uint64_t v25 = 3;
LABEL_21:
            id v26 = [v22 objectAtIndex:v25];
          }
          else
          {
            id v26 = v3;
          }

LABEL_28:
          if (!v26)
          {
            NSLog(&cfstr_CouldnTParseTh.isa, v7);
            exit(-1);
          }
          [v31[2] addObject:v26];

          double v3 = v26;
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v30 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
      uint64_t v4 = v30;
    }
    while (v30);
  }
}

void sub_1DD825518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t DataHandler::shuffleIndices(uint64_t this, int a2)
{
  uint64_t v2 = (void *)this;
  if (!*(void *)this)
  {
    [*(id *)(this + 8) count];
    operator new[]();
  }
  if (a2)
  {
    this = [*(id *)(this + 8) count];
    int v3 = this;
    if ((int)this >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 4 * this;
      do
      {
        this = rand();
        *(_DWORD *)(*v2 + v4) = (int)this % v3;
        v4 += 4;
      }
      while (v5 != v4);
    }
  }
  return this;
}

void sub_1DD82A9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD82BE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD82C140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }

  _Unwind_Resume(a1);
}

uint64_t nms::PyramidNMS<unsigned short,double,unsigned char>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  memcpy((void *)(a1 + 984), (const void *)(a2 + 984), 0x148uLL);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 200, a2 + 200);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 248, a2 + 248);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 296, a2 + 296);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 344, a2 + 344);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 392, a2 + 392);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 440, a2 + 440);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 488, a2 + 488);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 536, a2 + 536);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 584, a2 + 584);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 632, a2 + 632);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 680, a2 + 680);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 728, a2 + 728);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 776, a2 + 776);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 824, a2 + 824);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 872, a2 + 872);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 920, a2 + 920);
  std::deque<std::valarray<BOOL>>::__move_assign(a1 + 56, a2 + 56);
  std::deque<std::valarray<BOOL>>::__move_assign(a1 + 104, a2 + 104);
  std::deque<std::valarray<BOOL>>::__move_assign(a1 + 152, a2 + 152);
  return a1;
}

void sub_1DD82C604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 std::deque<nms::RectForest<unsigned short,double>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 20 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  if (v7 != a1[5] + v8) {
    goto LABEL_38;
  }
  BOOL v9 = v8 >= 0x14;
  unint64_t v10 = v8 - 20;
  if (v9)
  {
    a1[4] = v10;
    uint64_t v13 = *(void *)v4;
    int v11 = v4 + 8;
    uint64_t v12 = v13;
    a1[1] = v11;
    if (v5 == (char *)a1[3])
    {
      uint64_t v14 = (uint64_t)&v11[-*a1];
      if ((unint64_t)v11 <= *a1)
      {
        if (v5 == (char *)*a1) {
          unint64_t v40 = 1;
        }
        else {
          unint64_t v40 = (uint64_t)&v5[-*a1] >> 2;
        }
        double v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v40);
        uint64_t v43 = &v41[8 * (v40 >> 2)];
        uint64_t v44 = (uint64_t *)a1[1];
        uint64_t v5 = v43;
        uint64_t v45 = a1[2] - (void)v44;
        if (v45)
        {
          uint64_t v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v46 = 8 * (v45 >> 3);
          uint64_t v47 = &v41[8 * (v40 >> 2)];
          do
          {
            uint64_t v48 = *v44++;
            *(void *)uint64_t v47 = v48;
            v47 += 8;
            v46 -= 8;
          }
          while (v46);
        }
        uint64_t v49 = (char *)*a1;
        *a1 = v41;
        a1[1] = v43;
        a1[2] = v5;
        a1[3] = &v41[8 * v42];
        if (v49)
        {
          operator delete(v49);
          uint64_t v5 = (char *)a1[2];
        }
      }
      else
      {
        uint64_t v15 = v14 >> 3;
        BOOL v16 = v14 >> 3 < -1;
        uint64_t v17 = (v14 >> 3) + 2;
        if (v16) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = v15 + 1;
        }
        uint64_t v19 = -(v18 >> 1);
        uint64_t v20 = v18 >> 1;
        long long v21 = &v11[-8 * v20];
        int64_t v22 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v20], v11, v5 - v11);
          uint64_t v5 = (char *)a1[1];
        }
        double v23 = &v5[8 * v19];
        uint64_t v5 = &v21[v22];
        a1[1] = v23;
        a1[2] = &v21[v22];
      }
    }
    *(void *)uint64_t v5 = v12;
  }
  else
  {
    uint64_t v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >= v26 >> 3)
    {
      uint64_t v29 = v26 >> 2;
      if (v24 == v25) {
        unint64_t v30 = 1;
      }
      else {
        unint64_t v30 = v29;
      }
      long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v30);
      uint64_t v33 = v32;
      long long v34 = operator new(0xFA0uLL);
      long long v35 = &v31[8 * v6];
      long long v36 = &v31[8 * v33];
      if (v6 == v33)
      {
        uint64_t v37 = 8 * v6;
        if (v5 - v4 < 1)
        {
          uint64_t v78 = v34;
          uint64_t v79 = v37 >> 2;
          if (v5 == v4) {
            unint64_t v80 = 1;
          }
          else {
            unint64_t v80 = v79;
          }
          uint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v80);
          long long v35 = &v81[8 * (v80 >> 2)];
          long long v36 = &v81[8 * v82];
          if (v31) {
            operator delete(v31);
          }
          long long v31 = v81;
          long long v34 = v78;
        }
        else
        {
          uint64_t v38 = v37 >> 3;
          if (v38 >= -1) {
            unint64_t v39 = v38 + 1;
          }
          else {
            unint64_t v39 = v38 + 2;
          }
          v35 -= 8 * (v39 >> 1);
        }
      }
      *(void *)long long v35 = v34;
      uint64_t v5 = v35 + 8;
      for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
      {
        if (v35 == v31)
        {
          if (v5 >= v36)
          {
            if (v36 == v31) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = (v36 - v31) >> 2;
            }
            double v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v88);
            double v91 = v89;
            long long v35 = &v89[(2 * v88 + 6) & 0xFFFFFFFFFFFFFFF8];
            uint64_t v93 = v5 - v31;
            BOOL v92 = v5 == v31;
            uint64_t v5 = v35;
            if (!v92)
            {
              uint64_t v5 = &v35[v93 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v94 = 8 * (v93 >> 3);
              float v95 = v35;
              BOOL v96 = v31;
              do
              {
                uint64_t v97 = *(void *)v96;
                v96 += 8;
                *(void *)float v95 = v97;
                v95 += 8;
                v94 -= 8;
              }
              while (v94);
            }
            long long v36 = &v89[8 * v90];
            if (v31) {
              operator delete(v31);
            }
            long long v31 = v91;
          }
          else
          {
            uint64_t v84 = (v36 - v5) >> 3;
            if (v84 >= -1) {
              uint64_t v85 = v84 + 1;
            }
            else {
              uint64_t v85 = v84 + 2;
            }
            uint64_t v86 = v85 >> 1;
            long long v35 = &v31[8 * (v85 >> 1)];
            BOOL v87 = v31;
            if (v5 != v31)
            {
              memmove(v35, v31, v5 - v31);
              BOOL v87 = v5;
            }
            uint64_t v5 = &v87[8 * v86];
          }
        }
        uint64_t v98 = *(void *)(i - 8);
        *((void *)v35 - 1) = v98;
        v35 -= 8;
      }
      uint64_t v99 = (char *)*a1;
      *a1 = v31;
      a1[1] = v35;
      a1[2] = v5;
      a1[3] = v36;
      if (v99)
      {
        operator delete(v99);
        uint64_t v5 = (char *)a1[2];
      }
      goto LABEL_37;
    }
    double v27 = operator new(0xFA0uLL);
    BOOL v28 = v27;
    if (v24 == v5)
    {
      if (v4 == v25)
      {
        if (v5 == v4) {
          unint64_t v56 = 1;
        }
        else {
          unint64_t v56 = (v24 - v4) >> 2;
        }
        uint64_t v57 = 2 * v56;
        uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v56);
        uint64_t v4 = &v58[(v57 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v60 = (uint64_t *)a1[1];
        unint64_t v61 = v4;
        uint64_t v62 = a1[2] - (void)v60;
        if (v62)
        {
          unint64_t v61 = &v4[v62 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v63 = 8 * (v62 >> 3);
          BOOL v64 = &v58[(v57 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            uint64_t v65 = *v60++;
            *(void *)BOOL v64 = v65;
            v64 += 8;
            v63 -= 8;
          }
          while (v63);
        }
        uint64_t v66 = (char *)*a1;
        *a1 = v58;
        a1[1] = v4;
        a1[2] = v61;
        a1[3] = &v58[8 * v59];
        if (v66)
        {
          operator delete(v66);
          uint64_t v4 = (char *)a1[1];
        }
      }
      *((void *)v4 - 1) = v28;
      uint64_t v67 = (char *)a1[1];
      uint64_t v68 = (char *)a1[2];
      a1[1] = v67 - 8;
      uint64_t v69 = *((void *)v67 - 1);
      a1[1] = v67;
      if (v68 == (char *)a1[3])
      {
        uint64_t v70 = (uint64_t)&v67[-*a1];
        if ((unint64_t)v67 <= *a1)
        {
          if (v68 == (char *)*a1) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (uint64_t)&v68[-*a1] >> 2;
          }
          BOOL v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v100);
          int v103 = &v101[8 * (v100 >> 2)];
          uint64_t v104 = (uint64_t *)a1[1];
          uint64_t v68 = v103;
          uint64_t v105 = a1[2] - (void)v104;
          if (v105)
          {
            uint64_t v68 = &v103[v105 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v106 = 8 * (v105 >> 3);
            uint64_t v107 = &v101[8 * (v100 >> 2)];
            do
            {
              uint64_t v108 = *v104++;
              *(void *)uint64_t v107 = v108;
              v107 += 8;
              v106 -= 8;
            }
            while (v106);
          }
          uint64_t v109 = (char *)*a1;
          *a1 = v101;
          a1[1] = v103;
          a1[2] = v68;
          a1[3] = &v101[8 * v102];
          if (v109)
          {
            operator delete(v109);
            uint64_t v68 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v71 = v70 >> 3;
          BOOL v16 = v70 >> 3 < -1;
          uint64_t v72 = (v70 >> 3) + 2;
          if (v16) {
            uint64_t v73 = v72;
          }
          else {
            uint64_t v73 = v71 + 1;
          }
          uint64_t v74 = -(v73 >> 1);
          uint64_t v75 = v73 >> 1;
          uint64_t v76 = &v67[-8 * v75];
          int64_t v77 = v68 - v67;
          if (v68 != v67)
          {
            memmove(&v67[-8 * v75], v67, v68 - v67);
            uint64_t v67 = (char *)a1[1];
          }
          uint64_t v68 = &v76[v77];
          a1[1] = &v67[8 * v74];
          a1[2] = &v76[v77];
        }
      }
      *(void *)uint64_t v68 = v69;
    }
    else
    {
      *(void *)uint64_t v5 = v27;
    }
  }
  uint64_t v5 = (char *)(a1[2] + 8);
  a1[2] = v5;
LABEL_37:
  uint64_t v4 = (char *)a1[1];
LABEL_38:
  if (v5 == v4)
  {
    unint64_t v51 = 0;
  }
  else
  {
    unint64_t v50 = a1[5] + a1[4];
    unint64_t v51 = *(void *)&v4[8 * (v50 / 0x14)] + 200 * (v50 % 0x14);
  }
  *(void *)unint64_t v51 = &unk_1F38ED560;
  *(_OWORD *)(v51 + 64) = 0u;
  uint64_t v52 = (__n128 *)(v51 + 64);
  *(void *)(v51 + 192) = 0;
  *(void *)(v51 + 184) = 0;
  *(_OWORD *)(v51 + 96) = 0u;
  *(_OWORD *)(v51 + 112) = 0u;
  *(_OWORD *)(v51 + 144) = 0u;
  *(_OWORD *)(v51 + 160) = 0u;
  *(_OWORD *)(v51 + 128) = 0u;
  *(void *)(v51 + 176) = v51 + 184;
  *(_OWORD *)(v51 + 80) = 0u;
  std::deque<std::valarray<double>>::__move_assign(v51 + 80, a2 + 80);
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::__move_assign(v51 + 128, a2 + 128);
  *(void *)(v51 + 8) = *(void *)(a2 + 8);
  std::__tree<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::__map_value_compare<nms::ForestLevelType,std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::less<nms::ForestLevelType>,true>,std::allocator<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>>>::__move_assign((void *)(v51 + 176), (void *)(a2 + 176));
  long long v53 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v51 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v51 + 32) = v53;
  *(_OWORD *)(v51 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v54 = *(void **)(v51 + 64);
  if (v54)
  {
    if (*(void **)(v51 + 72) != v54) {
      *(void *)(v51 + 72) = v54;
    }
    operator delete(v54);
    v52->n128_u64[0] = 0;
    *(void *)(v51 + 72) = 0;
  }
  __n128 result = *(__n128 *)(a2 + 64);
  *uint64_t v52 = result;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  ++a1[5];
  return result;
}

void sub_1DD82CBD0(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t nms::RectForest<unsigned short,double>::RectForest(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 64) = 0u;
  v290 = (void *)(a1 + 64);
  *(_OWORD *)(a1 + 80) = 0u;
  char v294 = (void *)(a1 + 80);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  int v3 = (uint64_t **)(a1 + 176);
  *(_OWORD *)(a1 + 128) = 0u;
  v293 = (void *)(a1 + 128);
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)a1 = &unk_1F38ED560;
  *(void *)(a1 + 8) = 0;
  *(void *)&long long v296 = 0;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 176), 0, (uint64_t **)&v296)[5] = (uint64_t *)5;
  *(void *)&long long v296 = 1;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, 1uLL, (uint64_t **)&v296)[5] = (uint64_t *)5;
  *(void *)&long long v296 = 2;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, 2uLL, (uint64_t **)&v296)[5] = (uint64_t *)9;
  *(void *)&long long v296 = 3;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, 3uLL, (uint64_t **)&v296)[5] = (uint64_t *)8;
  *(void *)&long long v296 = 4;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, 4uLL, (uint64_t **)&v296)[5] = (uint64_t *)8;
  unint64_t v4 = *(void *)(a1 + 120);
  int v291 = v3;
  if (v4 > 4)
  {
    if (v4 != 5)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      uint64_t v25 = *(void *)(a1 + 88);
      uint64_t v26 = *(void *)(a1 + 96);
      double v27 = (char *)(v25 + 8 * (v24 >> 8));
      uint64_t v28 = *(void *)v27;
      uint64_t v29 = v26 == v25 ? 0 : *(void *)v27 + 16 * v24;
      uint64_t v30 = v29 - v28;
      uint64_t v31 = (v29 - v28) >> 4;
      if (v30 < -79)
      {
        unsigned __int8 v32 = ~(-6 - v31);
        uint64_t v33 = &v27[-8 * ((unint64_t)(250 - v31) >> 8)];
      }
      else
      {
        unsigned __int8 v32 = v31 + 5;
        uint64_t v33 = &v27[8 * ((unint64_t)(v31 + 5) >> 8)];
      }
      uint64_t v56 = *(void *)v33;
      uint64_t v57 = *(void *)v33 + 16 * v32;
      unsigned __int8 v58 = v24 + v4;
      uint64_t v59 = (char *)(v25 + 8 * ((v24 + v4) >> 8));
      uint64_t v60 = v26 == v25 ? 0 : *(void *)v59 + 16 * v58;
      if (v57 != v60)
      {
        uint64_t v61 = 32 * (v59 - v33) - ((v57 - v56) >> 4) + ((v60 - *(void *)v59) >> 4);
        if (v61 >= 1)
        {
          uint64_t v62 = ((v57 - v56) >> 4) - v31 + 32 * (v33 - v27);
          if (v57 == v29) {
            uint64_t v63 = 0;
          }
          else {
            uint64_t v63 = v62;
          }
          BOOL v64 = std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100](v27, v29, v63);
          if (v65 != v60)
          {
            uint64_t v66 = v64;
            uint64_t v67 = v65;
            do
            {
              std::allocator<std::valarray<double>>::destroy[abi:ne180100](v67);
              v67 += 16;
              if (v67 - *v66 == 4096)
              {
                uint64_t v68 = v66[1];
                ++v66;
                uint64_t v67 = v68;
              }
            }
            while (v67 != v60);
            unint64_t v4 = *(void *)(a1 + 120);
          }
          *(void *)(a1 + 120) = v4 - v61;
          while ((std::deque<std::valarray<unsigned char>>::__maybe_remove_back_spare[abi:ne180100](v294, 1) & 1) != 0)
            ;
        }
      }
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 88);
    unint64_t v6 = *(char **)(a1 + 96);
    uint64_t v7 = v6 - v5;
    if (v6 == v5) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 32 * (v6 - v5) - 1;
    }
    uint64_t v9 = 5 - v4;
    unint64_t v10 = *(void *)(a1 + 112);
    unint64_t v11 = v10 + v4;
    unint64_t v12 = v8 - (v10 + v4);
    BOOL v13 = 5 - v4 >= v12;
    unint64_t v14 = 5 - v4 - v12;
    if (v14 != 0 && v13)
    {
      if (v6 == v5) {
        unint64_t v15 = v14 + 1;
      }
      else {
        unint64_t v15 = v14;
      }
      if ((_BYTE)v15) {
        unint64_t v16 = (v15 >> 8) + 1;
      }
      else {
        unint64_t v16 = v15 >> 8;
      }
      if (v16 >= v10 >> 8) {
        unint64_t v17 = v10 >> 8;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v16 <= v10 >> 8)
      {
        for (*(void *)(a1 + 112) = v10 - (v17 << 8); v17; --v17)
        {
          long long v34 = *(void **)(a1 + 88);
          uint64_t v37 = *v34;
          long long v35 = (char *)(v34 + 1);
          uint64_t v36 = v37;
          *(void *)(a1 + 88) = v35;
          if (v6 == *(char **)(a1 + 104))
          {
            uint64_t v38 = (uint64_t)&v35[-*v294];
            if ((unint64_t)v35 <= *v294)
            {
              if (v6 == (char *)*v294) {
                unint64_t v46 = 1;
              }
              else {
                unint64_t v46 = (uint64_t)&v6[-*v294] >> 2;
              }
              uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v46);
              uint64_t v49 = &v47[8 * (v46 >> 2)];
              unint64_t v50 = *(uint64_t **)(a1 + 88);
              unint64_t v6 = v49;
              uint64_t v51 = *(void *)(a1 + 96) - (void)v50;
              if (v51)
              {
                unint64_t v6 = &v49[v51 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v52 = 8 * (v51 >> 3);
                long long v53 = &v47[8 * (v46 >> 2)];
                do
                {
                  uint64_t v54 = *v50++;
                  *(void *)long long v53 = v54;
                  v53 += 8;
                  v52 -= 8;
                }
                while (v52);
              }
              uint64_t v55 = *(void **)(a1 + 80);
              *(void *)(a1 + 80) = v47;
              *(void *)(a1 + 88) = v49;
              *(void *)(a1 + 96) = v6;
              *(void *)(a1 + 104) = &v47[8 * v48];
              if (v55)
              {
                operator delete(v55);
                unint64_t v6 = *(char **)(a1 + 96);
              }
            }
            else
            {
              uint64_t v39 = v38 >> 3;
              BOOL v40 = v38 >> 3 < -1;
              uint64_t v41 = (v38 >> 3) + 2;
              if (v40) {
                uint64_t v42 = v41;
              }
              else {
                uint64_t v42 = v39 + 1;
              }
              uint64_t v43 = &v35[-8 * (v42 >> 1)];
              int64_t v44 = v6 - v35;
              if (v6 != v35)
              {
                memmove(&v35[-8 * (v42 >> 1)], v35, v6 - v35);
                unint64_t v6 = *(char **)(a1 + 88);
              }
              uint64_t v45 = &v6[-8 * (v42 >> 1)];
              unint64_t v6 = &v43[v44];
              *(void *)(a1 + 88) = v45;
              *(void *)(a1 + 96) = &v43[v44];
            }
          }
          *(void *)unint64_t v6 = v36;
          unint64_t v6 = (char *)(*(void *)(a1 + 96) + 8);
          *(void *)(a1 + 96) = v6;
        }
      }
      else
      {
        unint64_t v18 = v16 - v17;
        uint64_t v19 = *(void *)(a1 + 104) - *(void *)(a1 + 80);
        if (v16 - v17 <= (v19 >> 3) - (v7 >> 3))
        {
          if (v18)
          {
            while (*(void *)(a1 + 104) != *(void *)(a1 + 96))
            {
              *(void *)&long long v296 = operator new(0x1000uLL);
              std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(v294, &v296);
              --v16;
              if (!--v18)
              {
                unint64_t v6 = *(char **)(a1 + 96);
                goto LABEL_104;
              }
            }
            for (uint64_t i = 0; i != v18; ++i)
            {
              *(void *)&long long v296 = operator new(0x1000uLL);
              std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)v294, &v296);
              unint64_t v6 = *(char **)(a1 + 96);
              if (&v6[-*(void *)(a1 + 88)] == (char *)8) {
                uint64_t v91 = 255;
              }
              else {
                uint64_t v91 = 256;
              }
              uint64_t v92 = v91 + *(void *)(a1 + 112);
              *(void *)(a1 + 112) = v92;
            }
            unint64_t v17 = v16;
          }
          else
          {
LABEL_104:
            uint64_t v92 = *(void *)(a1 + 112);
          }
          for (*(void *)(a1 + 112) = v92 - (v17 << 8); v17; --v17)
          {
            uint64_t v93 = *(void **)(a1 + 88);
            uint64_t v96 = *v93;
            uint64_t v94 = (char *)(v93 + 1);
            uint64_t v95 = v96;
            *(void *)(a1 + 88) = v94;
            if (v6 == *(char **)(a1 + 104))
            {
              uint64_t v97 = (uint64_t)&v94[-*v294];
              if ((unint64_t)v94 <= *v294)
              {
                if (v6 == (char *)*v294) {
                  unint64_t v104 = 1;
                }
                else {
                  unint64_t v104 = (uint64_t)&v6[-*v294] >> 2;
                }
                uint64_t v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v104);
                uint64_t v107 = &v105[8 * (v104 >> 2)];
                uint64_t v108 = *(uint64_t **)(a1 + 88);
                unint64_t v6 = v107;
                uint64_t v109 = *(void *)(a1 + 96) - (void)v108;
                if (v109)
                {
                  unint64_t v6 = &v107[v109 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v110 = 8 * (v109 >> 3);
                  double v111 = &v105[8 * (v104 >> 2)];
                  do
                  {
                    uint64_t v112 = *v108++;
                    *(void *)double v111 = v112;
                    v111 += 8;
                    v110 -= 8;
                  }
                  while (v110);
                }
                double v113 = *(void **)(a1 + 80);
                *(void *)(a1 + 80) = v105;
                *(void *)(a1 + 88) = v107;
                *(void *)(a1 + 96) = v6;
                *(void *)(a1 + 104) = &v105[8 * v106];
                if (v113)
                {
                  operator delete(v113);
                  unint64_t v6 = *(char **)(a1 + 96);
                }
              }
              else
              {
                uint64_t v98 = v97 >> 3;
                BOOL v40 = v97 >> 3 < -1;
                uint64_t v99 = (v97 >> 3) + 2;
                if (v40) {
                  uint64_t v100 = v99;
                }
                else {
                  uint64_t v100 = v98 + 1;
                }
                BOOL v101 = &v94[-8 * (v100 >> 1)];
                int64_t v102 = v6 - v94;
                if (v6 != v94)
                {
                  memmove(&v94[-8 * (v100 >> 1)], v94, v6 - v94);
                  unint64_t v6 = *(char **)(a1 + 88);
                }
                int v103 = &v6[-8 * (v100 >> 1)];
                unint64_t v6 = &v101[v102];
                *(void *)(a1 + 88) = v103;
                *(void *)(a1 + 96) = &v101[v102];
              }
            }
            *(void *)unint64_t v6 = v95;
            unint64_t v6 = (char *)(*(void *)(a1 + 96) + 8);
            *(void *)(a1 + 96) = v6;
          }
        }
        else
        {
          uint64_t v20 = v7 >> 3;
          unint64_t v21 = v18 + (v7 >> 3);
          if (v19 >> 2 <= v21) {
            unint64_t v22 = v21;
          }
          else {
            unint64_t v22 = v19 >> 2;
          }
          uint64_t v298 = a1 + 104;
          if (v22) {
            unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v69 = v17 << 8;
          *(void *)&long long v296 = v22;
          *((void *)&v296 + 1) = v22 + 8 * (v20 - v17);
          *(void *)&long long v297 = *((void *)&v296 + 1);
          *((void *)&v297 + 1) = v22 + 8 * v23;
          do
          {
            int v295 = operator new(0x1000uLL);
            std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v296, &v295);
            --v18;
          }
          while (v18);
          if (v17)
          {
            uint64_t v70 = *(void **)(a1 + 88);
            uint64_t v71 = (char *)v297;
            do
            {
              if (v71 == *((char **)&v297 + 1))
              {
                uint64_t v72 = (char *)*((void *)&v296 + 1);
                uint64_t v73 = (void *)v296;
                if (*((void *)&v296 + 1) <= (unint64_t)v296)
                {
                  if (v71 == (char *)v296) {
                    unint64_t v79 = 1;
                  }
                  else {
                    unint64_t v79 = (uint64_t)&v71[-v296] >> 2;
                  }
                  unint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v79);
                  uint64_t v83 = v71 - v72;
                  BOOL v82 = v71 == v72;
                  uint64_t v71 = &v80[8 * (v79 >> 2)];
                  if (!v82)
                  {
                    uint64_t v71 = &v80[8 * (v79 >> 2) + (v83 & 0xFFFFFFFFFFFFFFF8)];
                    uint64_t v84 = 8 * (v83 >> 3);
                    uint64_t v85 = &v80[8 * (v79 >> 2)];
                    do
                    {
                      uint64_t v86 = *(void *)v72;
                      v72 += 8;
                      *(void *)uint64_t v85 = v86;
                      v85 += 8;
                      v84 -= 8;
                    }
                    while (v84);
                  }
                  *(void *)&long long v296 = v80;
                  *((void *)&v296 + 1) = &v80[8 * (v79 >> 2)];
                  *(void *)&long long v297 = v71;
                  *((void *)&v297 + 1) = &v80[8 * v81];
                  if (v73) {
                    operator delete(v73);
                  }
                }
                else
                {
                  uint64_t v74 = (uint64_t)(*((void *)&v296 + 1) - v296) >> 3;
                  if (v74 >= -1) {
                    uint64_t v75 = v74 + 1;
                  }
                  else {
                    uint64_t v75 = v74 + 2;
                  }
                  uint64_t v76 = *((void *)&v296 + 1) - 8 * (v75 >> 1);
                  int64_t v77 = &v71[-*((void *)&v296 + 1)];
                  if (v71 != *((char **)&v296 + 1))
                  {
                    memmove((void *)(*((void *)&v296 + 1) - 8 * (v75 >> 1)), *((const void **)&v296 + 1), (size_t)&v71[-*((void *)&v296 + 1)]);
                    uint64_t v71 = v72;
                  }
                  uint64_t v78 = &v71[-8 * (v75 >> 1)];
                  uint64_t v71 = &v77[v76];
                  *((void *)&v296 + 1) = v78;
                  *(void *)&long long v297 = &v77[v76];
                }
              }
              *(void *)uint64_t v71 = *v70;
              uint64_t v71 = (char *)(v297 + 8);
              *(void *)&long long v297 = v297 + 8;
              uint64_t v70 = (void *)(*(void *)(a1 + 88) + 8);
              *(void *)(a1 + 88) = v70;
              --v17;
            }
            while (v17);
          }
          for (uint64_t j = *(void **)(a1 + 96);
                j != *(void **)(a1 + 88);
                std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v296, j))
          {
            --j;
          }
          unint64_t v88 = *(void **)(a1 + 80);
          long long v89 = v297;
          *(_OWORD *)(a1 + 80) = v296;
          *(_OWORD *)(a1 + 96) = v89;
          *(void *)(a1 + 112) -= v69;
          if (v88)
          {
            operator delete(v88);
            unint64_t v6 = *(char **)(a1 + 96);
          }
          else
          {
            unint64_t v6 = (char *)v89;
          }
        }
      }
      unint64_t v4 = *(void *)(a1 + 120);
      uint64_t v5 = *(char **)(a1 + 88);
      unint64_t v11 = *(void *)(a1 + 112) + v4;
    }
    double v114 = &v5[8 * (v11 >> 8)];
    if (v6 == v5) {
      unint64_t v115 = 0;
    }
    else {
      unint64_t v115 = (char *)(*(void *)v114 + 16 * v11);
    }
    unsigned __int8 v116 = (char *)std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100](v114, (uint64_t)v115, v9);
    if (v115 != v117)
    {
      uint64_t v118 = v116;
      uint64_t v119 = (uint64_t)v117;
      do
      {
        if (v114 == v118) {
          uint64_t v120 = v119;
        }
        else {
          uint64_t v120 = *(void *)v114 + 4096;
        }
        if (v115 == (char *)v120)
        {
          uint64_t v122 = v115;
        }
        else
        {
          size_t v121 = (v120 - (void)v115) & 0xFFFFFFFFFFFFFFF0;
          bzero(v115, v121);
          uint64_t v122 = &v115[v121];
          unint64_t v4 = *(void *)(a1 + 120);
        }
        v4 += (v122 - v115) >> 4;
        *(void *)(a1 + 120) = v4;
        if (v114 == v118) {
          break;
        }
        id v123 = (char *)*((void *)v114 + 1);
        v114 += 8;
        unint64_t v115 = v123;
      }
      while (v123 != (char *)v119);
    }
  }
  unint64_t v124 = *(void *)(a1 + 168);
  if (v124 > 5)
  {
    if (v124 != 6)
    {
      unint64_t v143 = *(void *)(a1 + 160);
      uint64_t v144 = *(void *)(a1 + 136);
      uint64_t v145 = *(void *)(a1 + 144);
      uint64_t v146 = (uint64_t *)(v144 + 8 * (v143 / 0x55));
      uint64_t v147 = *v146;
      unint64_t v148 = *v146 + 48 * (v143 % 0x55);
      if (v145 == v144) {
        unint64_t v148 = 0;
      }
      uint64_t v149 = v148 - v147;
      unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - v147) >> 4);
      if (v149 < -287)
      {
        unint64_t v176 = 78 - v150;
        unint64_t v152 = &v146[-(v176 / 0x55)];
        uint64_t v153 = *v152;
        unint64_t v154 = *v152 + 48 * (85 * (v176 / 0x55) - v176) + 4032;
      }
      else
      {
        unint64_t v151 = v150 + 6;
        unint64_t v152 = &v146[v151 / 0x55];
        uint64_t v153 = *v152;
        unint64_t v154 = *v152 + 48 * (v151 % 0x55);
      }
      uint64_t v177 = (void *)(v144 + 8 * ((v143 + v124) / 0x55));
      if (v145 == v144) {
        unint64_t v178 = 0;
      }
      else {
        unint64_t v178 = *v177 + 48 * ((v143 + v124) % 0x55);
      }
      if (v154 != v178)
      {
        uint64_t v179 = (uint64_t)(v154 - v153) >> 4;
        uint64_t v180 = 85 * (v177 - v152) + 0x5555555555555555 * v179 - 0x5555555555555555 * ((uint64_t)(v178 - *v177) >> 4);
        if (v180 >= 1)
        {
          uint64_t v181 = v147 + 48 * (v143 % 0x55);
          if (v145 == v144) {
            uint64_t v182 = 0;
          }
          else {
            uint64_t v182 = v181;
          }
          uint64_t v183 = 85 * (v152 - v146) - 0x5555555555555555 * v179 + 0x5555555555555555 * ((v182 - v147) >> 4);
          if (v154 == v182) {
            uint64_t v184 = 0;
          }
          else {
            uint64_t v184 = v183;
          }
          *(void *)&long long v296 = v146;
          *((void *)&v296 + 1) = v182;
          std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v296, v184);
          unint64_t v185 = (void *)*((void *)&v296 + 1);
          if (*((void *)&v296 + 1) != v178)
          {
            uint64_t v186 = (void *)v296;
            do
            {
              unint64_t v185 = (void *)(std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v185) + 48);
              if ((void *)((char *)v185 - *v186) == (void *)4080)
              {
                uint64_t v187 = (void *)v186[1];
                ++v186;
                unint64_t v185 = v187;
              }
            }
            while (v185 != (void *)v178);
            unint64_t v124 = *(void *)(a1 + 168);
          }
          *(void *)(a1 + 168) = v124 - v180;
          while ((std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__maybe_remove_back_spare[abi:ne180100](v293, 1) & 1) != 0);
        }
      }
    }
  }
  else
  {
    unint64_t v125 = *(char **)(a1 + 136);
    uint64_t v126 = *(char **)(a1 + 144);
    uint64_t v127 = (v126 - v125) >> 3;
    if (v126 == v125) {
      uint64_t v128 = 0;
    }
    else {
      uint64_t v128 = 85 * v127 - 1;
    }
    uint64_t v129 = 6 - v124;
    unint64_t v130 = *(void *)(a1 + 160);
    unint64_t v131 = v130 + v124;
    unint64_t v132 = v128 - (v130 + v124);
    BOOL v13 = 6 - v124 >= v132;
    unint64_t v133 = 6 - v124 - v132;
    if (v133 != 0 && v13)
    {
      uint64_t v289 = 6 - v124;
      if (v126 == v125) {
        unint64_t v134 = v133 + 1;
      }
      else {
        unint64_t v134 = v133;
      }
      if (v134 % 0x55) {
        unint64_t v135 = v134 / 0x55 + 1;
      }
      else {
        unint64_t v135 = v134 / 0x55;
      }
      if (v135 >= v130 / 0x55) {
        unint64_t v136 = v130 / 0x55;
      }
      else {
        unint64_t v136 = v135;
      }
      if (v135 <= v130 / 0x55)
      {
        for (*(void *)(a1 + 160) = v130 - 85 * v136; v136; --v136)
        {
          unint64_t v155 = *(void **)(a1 + 136);
          uint64_t v158 = *v155;
          long long v156 = (char *)(v155 + 1);
          uint64_t v157 = v158;
          *(void *)(a1 + 136) = v156;
          if (v126 == *(char **)(a1 + 152))
          {
            uint64_t v159 = (uint64_t)&v156[-*v293];
            if ((unint64_t)v156 <= *v293)
            {
              if (v126 == (char *)*v293) {
                unint64_t v166 = 1;
              }
              else {
                unint64_t v166 = (uint64_t)&v126[-*v293] >> 2;
              }
              unint64_t v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v166);
              int v169 = &v167[8 * (v166 >> 2)];
              int v170 = *(uint64_t **)(a1 + 136);
              uint64_t v126 = v169;
              uint64_t v171 = *(void *)(a1 + 144) - (void)v170;
              if (v171)
              {
                uint64_t v126 = &v169[v171 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v172 = 8 * (v171 >> 3);
                unint64_t v173 = &v167[8 * (v166 >> 2)];
                do
                {
                  uint64_t v174 = *v170++;
                  *(void *)unint64_t v173 = v174;
                  v173 += 8;
                  v172 -= 8;
                }
                while (v172);
              }
              uint64_t v175 = *(void **)(a1 + 128);
              *(void *)(a1 + 128) = v167;
              *(void *)(a1 + 136) = v169;
              *(void *)(a1 + 144) = v126;
              *(void *)(a1 + 152) = &v167[8 * v168];
              if (v175)
              {
                operator delete(v175);
                uint64_t v126 = *(char **)(a1 + 144);
              }
            }
            else
            {
              uint64_t v160 = v159 >> 3;
              BOOL v40 = v159 >> 3 < -1;
              uint64_t v161 = (v159 >> 3) + 2;
              if (v40) {
                uint64_t v162 = v161;
              }
              else {
                uint64_t v162 = v160 + 1;
              }
              uint64_t v163 = &v156[-8 * (v162 >> 1)];
              int64_t v164 = v126 - v156;
              if (v126 != v156)
              {
                memmove(&v156[-8 * (v162 >> 1)], v156, v126 - v156);
                uint64_t v126 = *(char **)(a1 + 136);
              }
              uint64_t v165 = &v126[-8 * (v162 >> 1)];
              uint64_t v126 = &v163[v164];
              *(void *)(a1 + 136) = v165;
              *(void *)(a1 + 144) = &v163[v164];
            }
          }
          *(void *)uint64_t v126 = v157;
          uint64_t v126 = (char *)(*(void *)(a1 + 144) + 8);
          *(void *)(a1 + 144) = v126;
        }
      }
      else
      {
        unint64_t v137 = v135 - v136;
        uint64_t v138 = *(void *)(a1 + 152) - *(void *)(a1 + 128);
        if (v135 - v136 <= (v138 >> 3) - v127)
        {
          while (1)
          {
            if (!v137)
            {
              unint64_t v135 = v136;
              goto LABEL_294;
            }
            if (*(char **)(a1 + 152) == v126) {
              break;
            }
            *(void *)uint64_t v126 = operator new(0xFF0uLL);
            uint64_t v126 = (char *)(*(void *)(a1 + 144) + 8);
            *(void *)(a1 + 144) = v126;
            --v135;
            --v137;
          }
          do
          {
            v235 = operator new(0xFF0uLL);
            float v236 = *(char **)(a1 + 136);
            if (v236 == *(char **)(a1 + 128))
            {
              unint64_t v238 = *(void *)(a1 + 152);
              if ((unint64_t)v126 >= v238)
              {
                uint64_t v243 = v238 - (void)v236;
                BOOL v82 = v243 == 0;
                uint64_t v244 = v243 >> 2;
                if (v82) {
                  unint64_t v245 = 1;
                }
                else {
                  unint64_t v245 = v244;
                }
                uint64_t v246 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v245);
                unint64_t v237 = &v246[(2 * v245 + 6) & 0xFFFFFFFFFFFFFFF8];
                std::vector<int>::pointer v248 = *(uint64_t **)(a1 + 136);
                v249 = v237;
                uint64_t v250 = *(void *)(a1 + 144) - (void)v248;
                if (v250)
                {
                  v249 = &v237[v250 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v251 = 8 * (v250 >> 3);
                  unint64_t v252 = &v246[(2 * v245 + 6) & 0xFFFFFFFFFFFFFFF8];
                  do
                  {
                    uint64_t v253 = *v248++;
                    *(void *)unint64_t v252 = v253;
                    v252 += 8;
                    v251 -= 8;
                  }
                  while (v251);
                }
                unint64_t v254 = *(void **)(a1 + 128);
                *(void *)(a1 + 128) = v246;
                *(void *)(a1 + 136) = v237;
                *(void *)(a1 + 144) = v249;
                *(void *)(a1 + 152) = &v246[8 * v247];
                if (v254)
                {
                  operator delete(v254);
                  unint64_t v237 = *(char **)(a1 + 136);
                }
              }
              else
              {
                uint64_t v239 = (uint64_t)(v238 - (void)v126) >> 3;
                if (v239 >= -1) {
                  uint64_t v240 = v239 + 1;
                }
                else {
                  uint64_t v240 = v239 + 2;
                }
                uint64_t v241 = v240 >> 1;
                v242 = &v126[8 * (v240 >> 1)];
                unint64_t v237 = &v242[-(v126 - v236)];
                if (v126 != v236)
                {
                  memmove(&v242[-(v126 - v236)], v236, v126 - v236);
                  uint64_t v126 = *(char **)(a1 + 144);
                }
                *(void *)(a1 + 136) = v237;
                *(void *)(a1 + 144) = &v126[8 * v241];
              }
            }
            else
            {
              unint64_t v237 = *(char **)(a1 + 136);
            }
            *((void *)v237 - 1) = v235;
            uint64_t v126 = *(char **)(a1 + 144);
            uint64_t v255 = *(void *)(a1 + 136) - 8;
            *(void *)(a1 + 136) = v255;
            if (&v126[-v255] == (char *)8) {
              uint64_t v256 = 84;
            }
            else {
              uint64_t v256 = 85;
            }
            unint64_t v130 = v256 + *(void *)(a1 + 160);
            *(void *)(a1 + 160) = v130;
            --v137;
          }
          while (v137);
LABEL_294:
          for (*(void *)(a1 + 160) = v130 - 85 * v135; v135; --v135)
          {
            int v257 = *(void **)(a1 + 136);
            uint64_t v260 = *v257;
            int v258 = (char *)(v257 + 1);
            uint64_t v259 = v260;
            *(void *)(a1 + 136) = v258;
            if (v126 == *(char **)(a1 + 152))
            {
              uint64_t v261 = (uint64_t)&v258[-*v293];
              if ((unint64_t)v258 <= *v293)
              {
                if (v126 == (char *)*v293) {
                  unint64_t v268 = 1;
                }
                else {
                  unint64_t v268 = (uint64_t)&v126[-*v293] >> 2;
                }
                v269 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v268);
                uint64_t v271 = &v269[8 * (v268 >> 2)];
                std::vector<int>::pointer v272 = *(uint64_t **)(a1 + 136);
                uint64_t v126 = v271;
                uint64_t v273 = *(void *)(a1 + 144) - (void)v272;
                if (v273)
                {
                  uint64_t v126 = &v271[v273 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v274 = 8 * (v273 >> 3);
                  int64_t v275 = &v269[8 * (v268 >> 2)];
                  do
                  {
                    uint64_t v276 = *v272++;
                    *(void *)int64_t v275 = v276;
                    v275 += 8;
                    v274 -= 8;
                  }
                  while (v274);
                }
                int64_t v277 = *(void **)(a1 + 128);
                *(void *)(a1 + 128) = v269;
                *(void *)(a1 + 136) = v271;
                *(void *)(a1 + 144) = v126;
                *(void *)(a1 + 152) = &v269[8 * v270];
                if (v277)
                {
                  operator delete(v277);
                  uint64_t v126 = *(char **)(a1 + 144);
                }
              }
              else
              {
                uint64_t v262 = v261 >> 3;
                BOOL v40 = v261 >> 3 < -1;
                uint64_t v263 = (v261 >> 3) + 2;
                if (v40) {
                  uint64_t v264 = v263;
                }
                else {
                  uint64_t v264 = v262 + 1;
                }
                unint64_t v265 = &v258[-8 * (v264 >> 1)];
                int64_t v266 = v126 - v258;
                if (v126 != v258)
                {
                  memmove(&v258[-8 * (v264 >> 1)], v258, v126 - v258);
                  uint64_t v126 = *(char **)(a1 + 136);
                }
                unint64_t v267 = &v126[-8 * (v264 >> 1)];
                uint64_t v126 = &v265[v266];
                *(void *)(a1 + 136) = v267;
                *(void *)(a1 + 144) = &v265[v266];
              }
            }
            *(void *)uint64_t v126 = v259;
            uint64_t v126 = (char *)(*(void *)(a1 + 144) + 8);
            *(void *)(a1 + 144) = v126;
          }
        }
        else
        {
          unint64_t v139 = v138 >> 2;
          if (v139 <= v137 + v127) {
            unint64_t v140 = v137 + v127;
          }
          else {
            unint64_t v140 = v139;
          }
          if (v140)
          {
            long long v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v140);
          }
          else
          {
            long long v142 = 0;
            uint64_t v141 = 0;
          }
          uint64_t v288 = -85 * v136;
          uint64_t v188 = &v142[8 * (v127 - v136)];
          uint64_t v189 = &v142[8 * v141];
          unint64_t v190 = v188;
          do
          {
            long long v191 = operator new(0xFF0uLL);
            if (v188 == v189)
            {
              if (v190 <= v142)
              {
                if (v188 == v142) {
                  unint64_t v196 = 1;
                }
                else {
                  unint64_t v196 = (v188 - v142) >> 2;
                }
                uint64_t v198 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v196);
                long long v199 = v142;
                uint64_t v200 = &v198[8 * (v196 >> 2)];
                long long v192 = v200;
                uint64_t v201 = v188 - v190;
                if (v188 != v190)
                {
                  long long v192 = &v200[v201 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v202 = 8 * (v201 >> 3);
                  uint64_t v203 = v200;
                  do
                  {
                    uint64_t v204 = *(void *)v190;
                    v190 += 8;
                    *(void *)uint64_t v203 = v204;
                    v203 += 8;
                    v202 -= 8;
                  }
                  while (v202);
                }
                uint64_t v189 = &v198[8 * v197];
                if (v199) {
                  operator delete(v199);
                }
                unint64_t v190 = v200;
                long long v142 = v198;
              }
              else
              {
                uint64_t v193 = (v190 - v142) >> 3;
                if (v193 >= -1) {
                  uint64_t v194 = v193 + 1;
                }
                else {
                  uint64_t v194 = v193 + 2;
                }
                int v195 = v188;
                if (v188 != v190)
                {
                  memmove(&v190[-8 * (v194 >> 1)], v190, v188 - v190);
                  int v195 = v190;
                }
                long long v192 = &v188[-8 * (v194 >> 1)];
                unint64_t v190 = &v195[-8 * (v194 >> 1)];
                uint64_t v189 = v188;
              }
            }
            else
            {
              long long v192 = v188;
            }
            *(void *)long long v192 = v191;
            uint64_t v188 = v192 + 8;
            --v137;
          }
          while (v137);
          uint64_t v205 = *(void **)(a1 + 136);
          if (v136)
          {
            do
            {
              if (v188 == v189)
              {
                if (v190 <= v142)
                {
                  if (v188 == v142) {
                    unint64_t v211 = 1;
                  }
                  else {
                    unint64_t v211 = (v188 - v142) >> 2;
                  }
                  v212 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v211);
                  v214 = v212;
                  uint64_t v207 = &v212[8 * (v211 >> 2)];
                  uint64_t v206 = v207;
                  uint64_t v215 = v188 - v190;
                  if (v188 != v190)
                  {
                    uint64_t v206 = &v207[v215 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v216 = 8 * (v215 >> 3);
                    v217 = v207;
                    do
                    {
                      uint64_t v218 = *(void *)v190;
                      v190 += 8;
                      *(void *)v217 = v218;
                      v217 += 8;
                      v216 -= 8;
                    }
                    while (v216);
                  }
                  uint64_t v188 = &v212[8 * v213];
                  if (v142) {
                    operator delete(v142);
                  }
                  long long v142 = v214;
                }
                else
                {
                  uint64_t v208 = (v190 - v142) >> 3;
                  if (v208 >= -1) {
                    uint64_t v209 = v208 + 1;
                  }
                  else {
                    uint64_t v209 = v208 + 2;
                  }
                  int v210 = v188;
                  if (v188 != v190)
                  {
                    memmove(&v190[-8 * (v209 >> 1)], v190, v188 - v190);
                    int v210 = v190;
                  }
                  uint64_t v206 = &v188[-8 * (v209 >> 1)];
                  uint64_t v207 = &v210[-8 * (v209 >> 1)];
                }
              }
              else
              {
                uint64_t v206 = v188;
                uint64_t v207 = v190;
                uint64_t v188 = v189;
              }
              uint64_t v189 = v188;
              *(void *)uint64_t v206 = *v205;
              uint64_t v126 = v206 + 8;
              uint64_t v205 = (void *)(*(void *)(a1 + 136) + 8);
              *(void *)(a1 + 136) = v205;
              uint64_t v188 = v126;
              unint64_t v190 = v207;
              --v136;
            }
            while (v136);
          }
          else
          {
            uint64_t v126 = v192 + 8;
            uint64_t v207 = v190;
          }
          uint64_t v219 = *(void **)(a1 + 144);
          if (v219 != v205)
          {
            do
            {
              if (v207 == v142)
              {
                if (v126 >= v189)
                {
                  if (v189 == v142) {
                    unint64_t v224 = 1;
                  }
                  else {
                    unint64_t v224 = (v189 - v142) >> 2;
                  }
                  unint64_t v225 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v224);
                  v227 = v225;
                  uint64_t v207 = &v225[(2 * v224 + 6) & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v228 = v126 - v142;
                  BOOL v82 = v126 == v142;
                  uint64_t v126 = v207;
                  if (!v82)
                  {
                    uint64_t v126 = &v207[v228 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v229 = 8 * (v228 >> 3);
                    v230 = v207;
                    v231 = v142;
                    do
                    {
                      uint64_t v232 = *(void *)v231;
                      v231 += 8;
                      *(void *)v230 = v232;
                      v230 += 8;
                      v229 -= 8;
                    }
                    while (v229);
                  }
                  uint64_t v189 = &v225[8 * v226];
                  if (v142) {
                    operator delete(v142);
                  }
                  long long v142 = v227;
                }
                else
                {
                  uint64_t v220 = (v189 - v126) >> 3;
                  if (v220 >= -1) {
                    uint64_t v221 = v220 + 1;
                  }
                  else {
                    uint64_t v221 = v220 + 2;
                  }
                  uint64_t v222 = v221 >> 1;
                  uint64_t v207 = &v142[8 * (v221 >> 1)];
                  int64_t v223 = v142;
                  if (v126 != v142)
                  {
                    memmove(v207, v142, v126 - v142);
                    int64_t v223 = v126;
                  }
                  uint64_t v126 = &v223[8 * v222];
                }
              }
              uint64_t v233 = *--v219;
              *((void *)v207 - 1) = v233;
              v207 -= 8;
            }
            while (v219 != *(void **)(a1 + 136));
          }
          v234 = *(void **)(a1 + 128);
          *(void *)(a1 + 128) = v142;
          *(void *)(a1 + 136) = v207;
          *(void *)(a1 + 144) = v126;
          *(void *)(a1 + 152) = v189;
          *(void *)(a1 + 160) += v288;
          if (v234)
          {
            operator delete(v234);
            uint64_t v126 = *(char **)(a1 + 144);
          }
        }
      }
      unint64_t v124 = *(void *)(a1 + 168);
      unint64_t v125 = *(char **)(a1 + 136);
      unint64_t v131 = *(void *)(a1 + 160) + v124;
      uint64_t v129 = v289;
    }
    unint64_t v278 = &v125[8 * (v131 / 0x55)];
    if (v126 == v125) {
      v279 = 0;
    }
    else {
      v279 = (char *)(*(void *)v278 + 48 * (v131 % 0x55));
    }
    *(void *)&long long v296 = &v125[8 * (v131 / 0x55)];
    *((void *)&v296 + 1) = v279;
    std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v296, v129);
    uint64_t v280 = *((void *)&v296 + 1);
    if (v279 != *((char **)&v296 + 1))
    {
      int v281 = (char *)v296;
      do
      {
        if (v278 == v281) {
          uint64_t v282 = v280;
        }
        else {
          uint64_t v282 = *(void *)v278 + 4080;
        }
        if (v279 == (char *)v282)
        {
          v284 = v279;
        }
        else
        {
          size_t v283 = 48 * ((v282 - (uint64_t)v279 - 48) / 0x30uLL) + 48;
          bzero(v279, v283);
          v284 = &v279[v283];
          unint64_t v124 = *(void *)(a1 + 168);
        }
        v124 -= 0x5555555555555555 * ((v284 - v279) >> 4);
        *(void *)(a1 + 168) = v124;
        if (v278 == v281) {
          break;
        }
        uint64_t v285 = (char *)*((void *)v278 + 1);
        v278 += 8;
        v279 = v285;
      }
      while (v285 != (char *)v280);
    }
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  unint64_t v286 = *(void **)(a1 + 64);
  if (v286)
  {
    if (*(void **)(a1 + 72) != v286) {
      *(void *)(a1 + 72) = v286;
    }
    operator delete(v286);
    void *v290 = 0;
    v290[1] = 0;
  }
  if (!a2)
  {
    *(void *)(a1 + 8) = 0;
    *(void *)&long long v296 = 0;
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v291, 0, (uint64_t **)&v296)[5] = (uint64_t *)5;
    *(void *)&long long v296 = 1;
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v291, 1uLL, (uint64_t **)&v296)[5] = (uint64_t *)5;
    *(void *)&long long v296 = 2;
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v291, 2uLL, (uint64_t **)&v296)[5] = (uint64_t *)9;
    *(void *)&long long v296 = 3;
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v291, 3uLL, (uint64_t **)&v296)[5] = (uint64_t *)8;
    *(void *)&long long v296 = 4;
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v291, 4uLL, (uint64_t **)&v296)[5] = (uint64_t *)8;
  }
  return a1;
}