void sub_1DD82DEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*(void **)(v19 + 184));
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::~deque[abi:ne180100](a14);
  std::deque<std::valarray<double>>::~deque[abi:ne180100](a15);
  nms::QuantizedScoreMap::~QuantizedScoreMap((nms::QuantizedScoreMap *)(v19 + 48));
  _Unwind_Resume(a1);
}

void sub_1DD82E30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1DD82FF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  nms::RectForest<unsigned short,double>::~RectForest((uint64_t)&a71);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100]((void *)(v71 - 192));
  nms::RectForest<unsigned short,double>::~RectForest((uint64_t)&a40);
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)&a65);
  nms::RectForest<unsigned short,double>::~RectForest((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_1DD8302A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::valarray<double>::resize(uint64_t a1, unint64_t a2, double a3)
{
  v6 = *(unsigned char **)a1;
  if (v6)
  {
    v7 = *(unsigned char **)(a1 + 8);
    if (v7 != v6) {
      *(void *)(a1 + 8) = &v7[(v6 - v7 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v8 = (double *)operator new(8 * a2);
    *(void *)a1 = v8;
    do
    {
      *v8++ = a3;
      --a2;
    }
    while (a2);
    *(void *)(a1 + 8) = v8;
  }
}

void sub_1DD831008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::deque<std::pair<unsigned short,unsigned short>>::resize(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[5];
  unint64_t v4 = a2 - v3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      unint64_t v12 = a1[4];
      uint64_t v14 = a1[1];
      uint64_t v13 = a1[2];
      v15 = (void *)(v14 + 8 * (v12 >> 10));
      if (v13 == v14)
      {
        v16 = (char *)std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v15, 0, a2);
        uint64_t v19 = 0;
        v18 = (char *)(v14 + 8 * ((v12 + v3) >> 10));
      }
      else
      {
        v16 = (char *)std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v15, *v15 + 4 * (v12 & 0x3FF), a2);
        v18 = (char *)(v14 + 8 * ((v12 + v3) >> 10));
        uint64_t v19 = *(void *)v18 + 4 * ((v12 + v3) & 0x3FF);
      }
      if (v19 != v17)
      {
        uint64_t v28 = ((v19 - *(void *)v18) >> 2) + ((v18 - v16) << 7) - ((v17 - *(void *)v16) >> 2);
        if (v28 >= 1)
        {
          a1[5] = v3 - v28;
          while (std::deque<std::pair<unsigned short,unsigned short>>::__maybe_remove_back_spare[abi:ne180100](a1))
            ;
        }
      }
    }
  }
  else
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
    if (v6 == v5) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = ((v6 - v5) << 7) - 1;
    }
    unint64_t v8 = a1[4] + v3;
    unint64_t v9 = v7 - v8;
    if (v4 > v9)
    {
      std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(a1, v4 - v9);
      unint64_t v3 = a1[5];
      uint64_t v5 = a1[1];
      uint64_t v6 = a1[2];
      unint64_t v8 = a1[4] + v3;
    }
    v10 = (void *)(v5 + 8 * (v8 >> 10));
    if (v6 == v5) {
      v11 = 0;
    }
    else {
      v11 = (char *)(*v10 + 4 * (v8 & 0x3FF));
    }
    v20 = std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v10, (uint64_t)v11, v4);
    if (v11 != v21)
    {
      v22 = v20;
      uint64_t v23 = (uint64_t)v21;
      do
      {
        if (v10 == v22) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = *v10 + 4096;
        }
        if (v11 == (char *)v24)
        {
          v26 = v11;
        }
        else
        {
          size_t v25 = (v24 - (void)v11) & 0xFFFFFFFFFFFFFFFCLL;
          bzero(v11, v25);
          v26 = &v11[v25];
        }
        v3 += (v26 - v11) >> 2;
        if (v10 == v22) {
          break;
        }
        v27 = (char *)v10[1];
        ++v10;
        v11 = v27;
      }
      while (v27 != (char *)v23);
      a1[5] = v3;
    }
  }
}

void *std::map<nms::ForestLevelType,nms::RepresentationDimType>::at(void *a1, unint64_t a2)
{
  if (!a1) {
LABEL_7:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unint64_t v2 = a1[4];
      if (v2 <= a2) {
        break;
      }
      a1 = (void *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (void *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

uint64_t std::valarray<double>::~valarray(uint64_t a1)
{
  unint64_t v2 = *(unsigned char **)a1;
  if (v2)
  {
    unint64_t v3 = *(unsigned char **)(a1 + 8);
    if (v3 != v2) {
      *(void *)(a1 + 8) = &v3[(v2 - v3 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1DD8314BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD831598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8320EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22)
{
  _Unwind_Resume(a1);
}

void sub_1DD8323B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD83256C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD832734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *nms::PyramidNMS<unsigned short,double,unsigned char>::~PyramidNMS(void *a1)
{
  *a1 = &unk_1F38ED540;
  unint64_t v2 = (void **)a1[26];
  unint64_t v3 = (void **)a1[27];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 30;
    unint64_t v3 = (void **)a1[26];
  }
  else
  {
    unint64_t v4 = a1 + 30;
    unint64_t v5 = a1[29];
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[30] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 240) + v5);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)v8;
        if (*(void *)v8)
        {
          if (*(void **)(v8 + 8) != v10) {
            *(void *)(v8 + 8) = v10;
          }
          operator delete(v10);
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      unint64_t v2 = (void **)a1[26];
      unint64_t v3 = (void **)a1[27];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v13 = a1[27];
      unint64_t v2 = (void **)(a1[26] + 8);
      a1[26] = v2;
      unint64_t v12 = v13 - (void)v2;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 128;
  }
  else
  {
    if (v12 >> 3 != 2) {
      goto LABEL_19;
    }
    uint64_t v14 = 256;
  }
  a1[29] = v14;
LABEL_19:
  v15 = (void **)a1[32];
  v16 = (void **)a1[33];
  if (v16 == v15)
  {
    v20 = a1 + 36;
    v16 = (void **)a1[32];
  }
  else
  {
    unint64_t v17 = a1[35];
    v18 = &v15[v17 / 0x55];
    uint64_t v19 = (uint64_t)*v18 + 48 * (v17 % 0x55);
    v20 = a1 + 36;
    unint64_t v21 = (unint64_t)v15[(a1[36] + v17) / 0x55] + 48 * ((a1[36] + v17) % 0x55);
    if (v19 != v21)
    {
      do
      {
        uint64_t v19 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v19) + 48;
        if (v19 - (void)*v18 == 4080)
        {
          uint64_t v22 = (uint64_t)v18[1];
          ++v18;
          uint64_t v19 = v22;
        }
      }
      while (v19 != v21);
      v15 = (void **)a1[32];
      v16 = (void **)a1[33];
    }
  }
  void *v20 = 0;
  unint64_t v23 = (char *)v16 - (char *)v15;
  if (v23 >= 0x11)
  {
    do
    {
      operator delete(*v15);
      uint64_t v24 = a1[33];
      v15 = (void **)(a1[32] + 8);
      a1[32] = v15;
      unint64_t v23 = v24 - (void)v15;
    }
    while (v23 > 0x10);
  }
  if (v23 >> 3 == 1)
  {
    uint64_t v25 = 42;
  }
  else
  {
    if (v23 >> 3 != 2) {
      goto LABEL_33;
    }
    uint64_t v25 = 85;
  }
  a1[35] = v25;
LABEL_33:
  v26 = (void **)a1[38];
  v27 = (void **)a1[39];
  if (v27 == v26)
  {
    v32 = a1 + 42;
    v27 = (void **)a1[38];
  }
  else
  {
    unint64_t v28 = a1[41];
    v29 = &v26[v28 >> 8];
    uint64_t v30 = (uint64_t)*v29;
    uint64_t v31 = (uint64_t)*v29 + 16 * v28;
    v32 = a1 + 42;
    uint64_t v33 = *(uint64_t *)((char *)v26 + (((a1[42] + v28) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a1 + 336) + v28);
    if (v31 != v33)
    {
      do
      {
        v34 = *(void **)v31;
        if (*(void *)v31)
        {
          if (*(void **)(v31 + 8) != v34) {
            *(void *)(v31 + 8) = v34;
          }
          operator delete(v34);
          *(void *)uint64_t v31 = 0;
          *(void *)(v31 + 8) = 0;
          uint64_t v30 = (uint64_t)*v29;
        }
        v31 += 16;
        if (v31 - v30 == 4096)
        {
          uint64_t v35 = (uint64_t)v29[1];
          ++v29;
          uint64_t v30 = v35;
          uint64_t v31 = v35;
        }
      }
      while (v31 != v33);
      v26 = (void **)a1[38];
      v27 = (void **)a1[39];
    }
  }
  void *v32 = 0;
  unint64_t v36 = (char *)v27 - (char *)v26;
  if ((unint64_t)((char *)v27 - (char *)v26) >= 0x11)
  {
    do
    {
      operator delete(*v26);
      uint64_t v37 = a1[39];
      v26 = (void **)(a1[38] + 8);
      a1[38] = v26;
      unint64_t v36 = v37 - (void)v26;
    }
    while (v36 > 0x10);
  }
  if (v36 >> 3 == 1)
  {
    uint64_t v38 = 128;
  }
  else
  {
    if (v36 >> 3 != 2) {
      goto LABEL_51;
    }
    uint64_t v38 = 256;
  }
  a1[41] = v38;
LABEL_51:
  v39 = (void **)a1[44];
  v40 = (void **)a1[45];
  if (v40 == v39)
  {
    v44 = a1 + 48;
    v40 = (void **)a1[44];
  }
  else
  {
    unint64_t v41 = a1[47];
    v42 = &v39[v41 / 0x55];
    uint64_t v43 = (uint64_t)*v42 + 48 * (v41 % 0x55);
    v44 = a1 + 48;
    unint64_t v45 = (unint64_t)v39[(a1[48] + v41) / 0x55] + 48 * ((a1[48] + v41) % 0x55);
    if (v43 != v45)
    {
      do
      {
        uint64_t v43 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v43) + 48;
        if (v43 - (void)*v42 == 4080)
        {
          uint64_t v46 = (uint64_t)v42[1];
          ++v42;
          uint64_t v43 = v46;
        }
      }
      while (v43 != v45);
      v39 = (void **)a1[44];
      v40 = (void **)a1[45];
    }
  }
  void *v44 = 0;
  unint64_t v47 = (char *)v40 - (char *)v39;
  if (v47 >= 0x11)
  {
    do
    {
      operator delete(*v39);
      uint64_t v48 = a1[45];
      v39 = (void **)(a1[44] + 8);
      a1[44] = v39;
      unint64_t v47 = v48 - (void)v39;
    }
    while (v47 > 0x10);
  }
  if (v47 >> 3 == 1)
  {
    uint64_t v49 = 42;
  }
  else
  {
    if (v47 >> 3 != 2) {
      goto LABEL_65;
    }
    uint64_t v49 = 85;
  }
  a1[47] = v49;
LABEL_65:
  v50 = (void **)a1[50];
  v51 = (void **)a1[51];
  if (v51 == v50)
  {
    v56 = a1 + 54;
    v51 = (void **)a1[50];
  }
  else
  {
    unint64_t v52 = a1[53];
    v53 = &v50[v52 >> 8];
    uint64_t v54 = (uint64_t)*v53;
    uint64_t v55 = (uint64_t)*v53 + 16 * v52;
    v56 = a1 + 54;
    uint64_t v57 = *(uint64_t *)((char *)v50 + (((a1[54] + v52) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a1 + 432) + v52);
    if (v55 != v57)
    {
      do
      {
        v58 = *(void **)v55;
        if (*(void *)v55)
        {
          if (*(void **)(v55 + 8) != v58) {
            *(void *)(v55 + 8) = v58;
          }
          operator delete(v58);
          *(void *)uint64_t v55 = 0;
          *(void *)(v55 + 8) = 0;
          uint64_t v54 = (uint64_t)*v53;
        }
        v55 += 16;
        if (v55 - v54 == 4096)
        {
          uint64_t v59 = (uint64_t)v53[1];
          ++v53;
          uint64_t v54 = v59;
          uint64_t v55 = v59;
        }
      }
      while (v55 != v57);
      v50 = (void **)a1[50];
      v51 = (void **)a1[51];
    }
  }
  void *v56 = 0;
  unint64_t v60 = (char *)v51 - (char *)v50;
  if ((unint64_t)((char *)v51 - (char *)v50) >= 0x11)
  {
    do
    {
      operator delete(*v50);
      uint64_t v61 = a1[51];
      v50 = (void **)(a1[50] + 8);
      a1[50] = v50;
      unint64_t v60 = v61 - (void)v50;
    }
    while (v60 > 0x10);
  }
  if (v60 >> 3 == 1)
  {
    uint64_t v62 = 128;
  }
  else
  {
    if (v60 >> 3 != 2) {
      goto LABEL_83;
    }
    uint64_t v62 = 256;
  }
  a1[53] = v62;
LABEL_83:
  v63 = (void **)a1[56];
  v64 = (void **)a1[57];
  if (v64 == v63)
  {
    v68 = a1 + 60;
    v64 = (void **)a1[56];
  }
  else
  {
    unint64_t v65 = a1[59];
    v66 = &v63[v65 / 0x55];
    uint64_t v67 = (uint64_t)*v66 + 48 * (v65 % 0x55);
    v68 = a1 + 60;
    unint64_t v69 = (unint64_t)v63[(a1[60] + v65) / 0x55] + 48 * ((a1[60] + v65) % 0x55);
    if (v67 != v69)
    {
      do
      {
        uint64_t v67 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v67) + 48;
        if (v67 - (void)*v66 == 4080)
        {
          uint64_t v70 = (uint64_t)v66[1];
          ++v66;
          uint64_t v67 = v70;
        }
      }
      while (v67 != v69);
      v63 = (void **)a1[56];
      v64 = (void **)a1[57];
    }
  }
  void *v68 = 0;
  unint64_t v71 = (char *)v64 - (char *)v63;
  if (v71 >= 0x11)
  {
    do
    {
      operator delete(*v63);
      uint64_t v72 = a1[57];
      v63 = (void **)(a1[56] + 8);
      a1[56] = v63;
      unint64_t v71 = v72 - (void)v63;
    }
    while (v71 > 0x10);
  }
  if (v71 >> 3 == 1)
  {
    uint64_t v73 = 42;
  }
  else
  {
    if (v71 >> 3 != 2) {
      goto LABEL_97;
    }
    uint64_t v73 = 85;
  }
  a1[59] = v73;
LABEL_97:
  v74 = (void **)a1[62];
  v75 = (void **)a1[63];
  if (v75 == v74)
  {
    v80 = a1 + 66;
    v75 = (void **)a1[62];
  }
  else
  {
    unint64_t v76 = a1[65];
    v77 = &v74[v76 >> 8];
    uint64_t v78 = (uint64_t)*v77;
    uint64_t v79 = (uint64_t)*v77 + 16 * v76;
    v80 = a1 + 66;
    uint64_t v81 = *(uint64_t *)((char *)v74 + (((a1[66] + v76) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a1 + 528) + v76);
    if (v79 != v81)
    {
      do
      {
        v82 = *(void **)v79;
        if (*(void *)v79)
        {
          if (*(void **)(v79 + 8) != v82) {
            *(void *)(v79 + 8) = v82;
          }
          operator delete(v82);
          *(void *)uint64_t v79 = 0;
          *(void *)(v79 + 8) = 0;
          uint64_t v78 = (uint64_t)*v77;
        }
        v79 += 16;
        if (v79 - v78 == 4096)
        {
          uint64_t v83 = (uint64_t)v77[1];
          ++v77;
          uint64_t v78 = v83;
          uint64_t v79 = v83;
        }
      }
      while (v79 != v81);
      v74 = (void **)a1[62];
      v75 = (void **)a1[63];
    }
  }
  void *v80 = 0;
  unint64_t v84 = (char *)v75 - (char *)v74;
  if ((unint64_t)((char *)v75 - (char *)v74) >= 0x11)
  {
    do
    {
      operator delete(*v74);
      uint64_t v85 = a1[63];
      v74 = (void **)(a1[62] + 8);
      a1[62] = v74;
      unint64_t v84 = v85 - (void)v74;
    }
    while (v84 > 0x10);
  }
  if (v84 >> 3 == 1)
  {
    uint64_t v86 = 128;
  }
  else
  {
    if (v84 >> 3 != 2) {
      goto LABEL_115;
    }
    uint64_t v86 = 256;
  }
  a1[65] = v86;
LABEL_115:
  v87 = (void **)a1[68];
  v88 = (void **)a1[69];
  if (v88 == v87)
  {
    v92 = a1 + 72;
    v88 = (void **)a1[68];
  }
  else
  {
    unint64_t v89 = a1[71];
    v90 = &v87[v89 / 0x55];
    uint64_t v91 = (uint64_t)*v90 + 48 * (v89 % 0x55);
    v92 = a1 + 72;
    unint64_t v93 = (unint64_t)v87[(a1[72] + v89) / 0x55] + 48 * ((a1[72] + v89) % 0x55);
    if (v91 != v93)
    {
      do
      {
        uint64_t v91 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v91) + 48;
        if (v91 - (void)*v90 == 4080)
        {
          uint64_t v94 = (uint64_t)v90[1];
          ++v90;
          uint64_t v91 = v94;
        }
      }
      while (v91 != v93);
      v88 = (void **)a1[69];
      v87 = (void **)a1[68];
    }
  }
  void *v92 = 0;
  unint64_t v95 = (char *)v88 - (char *)v87;
  if (v95 >= 0x11)
  {
    do
    {
      operator delete(*v87);
      v87 = (void **)(a1[68] + 8);
      a1[68] = v87;
      unint64_t v95 = a1[69] - (void)v87;
    }
    while (v95 > 0x10);
  }
  if (v95 >> 3 == 1)
  {
    uint64_t v96 = 42;
  }
  else
  {
    if (v95 >> 3 != 2) {
      goto LABEL_129;
    }
    uint64_t v96 = 85;
  }
  a1[71] = v96;
LABEL_129:
  v97 = (void **)a1[74];
  v98 = (void **)a1[75];
  if (v98 == v97)
  {
    v103 = a1 + 78;
    v98 = (void **)a1[74];
  }
  else
  {
    unint64_t v99 = a1[77];
    v100 = &v97[v99 >> 8];
    uint64_t v101 = (uint64_t)*v100;
    uint64_t v102 = (uint64_t)*v100 + 16 * v99;
    v103 = a1 + 78;
    uint64_t v104 = *(uint64_t *)((char *)v97 + (((a1[78] + v99) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((unsigned char *)a1 + 624) + v99);
    if (v102 != v104)
    {
      do
      {
        v105 = *(void **)v102;
        if (*(void *)v102)
        {
          if (*(void **)(v102 + 8) != v105) {
            *(void *)(v102 + 8) = v105;
          }
          operator delete(v105);
          *(void *)uint64_t v102 = 0;
          *(void *)(v102 + 8) = 0;
          uint64_t v101 = (uint64_t)*v100;
        }
        v102 += 16;
        if (v102 - v101 == 4096)
        {
          uint64_t v106 = (uint64_t)v100[1];
          ++v100;
          uint64_t v101 = v106;
          uint64_t v102 = v106;
        }
      }
      while (v102 != v104);
      v98 = (void **)a1[75];
      v97 = (void **)a1[74];
    }
  }
  void *v103 = 0;
  unint64_t v107 = (char *)v98 - (char *)v97;
  if ((unint64_t)((char *)v98 - (char *)v97) >= 0x11)
  {
    do
    {
      operator delete(*v97);
      v97 = (void **)(a1[74] + 8);
      a1[74] = v97;
      unint64_t v107 = a1[75] - (void)v97;
    }
    while (v107 > 0x10);
  }
  if (v107 >> 3 == 1)
  {
    uint64_t v108 = 128;
  }
  else
  {
    if (v107 >> 3 != 2) {
      goto LABEL_147;
    }
    uint64_t v108 = 256;
  }
  a1[77] = v108;
LABEL_147:
  v109 = (void **)a1[80];
  v110 = (void **)a1[81];
  if (v110 == v109)
  {
    v114 = a1 + 84;
    v110 = (void **)a1[80];
  }
  else
  {
    unint64_t v111 = a1[83];
    v112 = &v109[v111 / 0x55];
    uint64_t v113 = (uint64_t)*v112 + 48 * (v111 % 0x55);
    v114 = a1 + 84;
    unint64_t v115 = (unint64_t)v109[(a1[84] + v111) / 0x55] + 48 * ((a1[84] + v111) % 0x55);
    if (v113 != v115)
    {
      do
      {
        uint64_t v113 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v113) + 48;
        if (v113 - (void)*v112 == 4080)
        {
          uint64_t v116 = (uint64_t)v112[1];
          ++v112;
          uint64_t v113 = v116;
        }
      }
      while (v113 != v115);
      v110 = (void **)a1[81];
      v109 = (void **)a1[80];
    }
  }
  void *v114 = 0;
  unint64_t v117 = (char *)v110 - (char *)v109;
  if (v117 >= 0x11)
  {
    do
    {
      operator delete(*v109);
      v109 = (void **)(a1[80] + 8);
      a1[80] = v109;
      unint64_t v117 = a1[81] - (void)v109;
    }
    while (v117 > 0x10);
  }
  if (v117 >> 3 == 1)
  {
    uint64_t v118 = 42;
  }
  else
  {
    if (v117 >> 3 != 2) {
      goto LABEL_161;
    }
    uint64_t v118 = 85;
  }
  a1[83] = v118;
LABEL_161:
  v119 = (void **)a1[86];
  v120 = (void **)a1[87];
  if (v120 == v119)
  {
    v125 = a1 + 90;
    v120 = (void **)a1[86];
  }
  else
  {
    unint64_t v121 = a1[89];
    v122 = &v119[v121 >> 8];
    uint64_t v123 = (uint64_t)*v122;
    uint64_t v124 = (uint64_t)*v122 + 16 * v121;
    v125 = a1 + 90;
    uint64_t v126 = *(uint64_t *)((char *)v119 + (((a1[90] + v121) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((unsigned char *)a1 + 720) + v121);
    if (v124 != v126)
    {
      do
      {
        v127 = *(void **)v124;
        if (*(void *)v124)
        {
          if (*(void **)(v124 + 8) != v127) {
            *(void *)(v124 + 8) = v127;
          }
          operator delete(v127);
          *(void *)uint64_t v124 = 0;
          *(void *)(v124 + 8) = 0;
          uint64_t v123 = (uint64_t)*v122;
        }
        v124 += 16;
        if (v124 - v123 == 4096)
        {
          uint64_t v128 = (uint64_t)v122[1];
          ++v122;
          uint64_t v123 = v128;
          uint64_t v124 = v128;
        }
      }
      while (v124 != v126);
      v120 = (void **)a1[87];
      v119 = (void **)a1[86];
    }
  }
  void *v125 = 0;
  unint64_t v129 = (char *)v120 - (char *)v119;
  if ((unint64_t)((char *)v120 - (char *)v119) >= 0x11)
  {
    do
    {
      operator delete(*v119);
      v119 = (void **)(a1[86] + 8);
      a1[86] = v119;
      unint64_t v129 = a1[87] - (void)v119;
    }
    while (v129 > 0x10);
  }
  if (v129 >> 3 == 1)
  {
    uint64_t v130 = 128;
  }
  else
  {
    if (v129 >> 3 != 2) {
      goto LABEL_179;
    }
    uint64_t v130 = 256;
  }
  a1[89] = v130;
LABEL_179:
  v131 = (void **)a1[92];
  v132 = (void **)a1[93];
  if (v132 == v131)
  {
    v136 = a1 + 96;
    v132 = (void **)a1[92];
  }
  else
  {
    unint64_t v133 = a1[95];
    v134 = &v131[v133 / 0x55];
    uint64_t v135 = (uint64_t)*v134 + 48 * (v133 % 0x55);
    v136 = a1 + 96;
    unint64_t v137 = (unint64_t)v131[(a1[96] + v133) / 0x55] + 48 * ((a1[96] + v133) % 0x55);
    if (v135 != v137)
    {
      do
      {
        uint64_t v135 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v135) + 48;
        if (v135 - (void)*v134 == 4080)
        {
          uint64_t v138 = (uint64_t)v134[1];
          ++v134;
          uint64_t v135 = v138;
        }
      }
      while (v135 != v137);
      v132 = (void **)a1[93];
      v131 = (void **)a1[92];
    }
  }
  void *v136 = 0;
  unint64_t v139 = (char *)v132 - (char *)v131;
  if (v139 >= 0x11)
  {
    do
    {
      operator delete(*v131);
      v131 = (void **)(a1[92] + 8);
      a1[92] = v131;
      unint64_t v139 = a1[93] - (void)v131;
    }
    while (v139 > 0x10);
  }
  if (v139 >> 3 == 1)
  {
    uint64_t v140 = 42;
  }
  else
  {
    if (v139 >> 3 != 2) {
      goto LABEL_193;
    }
    uint64_t v140 = 85;
  }
  a1[95] = v140;
LABEL_193:
  v141 = (void **)a1[98];
  v142 = (void **)a1[99];
  if (v142 == v141)
  {
    v147 = a1 + 102;
    v142 = (void **)a1[98];
  }
  else
  {
    unint64_t v143 = a1[101];
    v144 = &v141[v143 >> 8];
    uint64_t v145 = (uint64_t)*v144;
    uint64_t v146 = (uint64_t)*v144 + 16 * v143;
    v147 = a1 + 102;
    uint64_t v148 = *(uint64_t *)((char *)v141 + (((a1[102] + v143) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((unsigned char *)a1 + 816) + v143);
    if (v146 != v148)
    {
      do
      {
        v149 = *(void **)v146;
        if (*(void *)v146)
        {
          if (*(void **)(v146 + 8) != v149) {
            *(void *)(v146 + 8) = v149;
          }
          operator delete(v149);
          *(void *)uint64_t v146 = 0;
          *(void *)(v146 + 8) = 0;
          uint64_t v145 = (uint64_t)*v144;
        }
        v146 += 16;
        if (v146 - v145 == 4096)
        {
          uint64_t v150 = (uint64_t)v144[1];
          ++v144;
          uint64_t v145 = v150;
          uint64_t v146 = v150;
        }
      }
      while (v146 != v148);
      v142 = (void **)a1[99];
      v141 = (void **)a1[98];
    }
  }
  void *v147 = 0;
  unint64_t v151 = (char *)v142 - (char *)v141;
  if ((unint64_t)((char *)v142 - (char *)v141) >= 0x11)
  {
    do
    {
      operator delete(*v141);
      v141 = (void **)(a1[98] + 8);
      a1[98] = v141;
      unint64_t v151 = a1[99] - (void)v141;
    }
    while (v151 > 0x10);
  }
  if (v151 >> 3 == 1)
  {
    uint64_t v152 = 128;
  }
  else
  {
    if (v151 >> 3 != 2) {
      goto LABEL_211;
    }
    uint64_t v152 = 256;
  }
  a1[101] = v152;
LABEL_211:
  v153 = (void **)a1[104];
  v154 = (void **)a1[105];
  if (v154 == v153)
  {
    v158 = a1 + 108;
    v154 = (void **)a1[104];
  }
  else
  {
    unint64_t v155 = a1[107];
    v156 = &v153[v155 / 0x55];
    uint64_t v157 = (uint64_t)*v156 + 48 * (v155 % 0x55);
    v158 = a1 + 108;
    unint64_t v159 = (unint64_t)v153[(a1[108] + v155) / 0x55] + 48 * ((a1[108] + v155) % 0x55);
    if (v157 != v159)
    {
      do
      {
        uint64_t v157 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v157) + 48;
        if (v157 - (void)*v156 == 4080)
        {
          uint64_t v160 = (uint64_t)v156[1];
          ++v156;
          uint64_t v157 = v160;
        }
      }
      while (v157 != v159);
      v154 = (void **)a1[105];
      v153 = (void **)a1[104];
    }
  }
  void *v158 = 0;
  unint64_t v161 = (char *)v154 - (char *)v153;
  if (v161 >= 0x11)
  {
    do
    {
      operator delete(*v153);
      v153 = (void **)(a1[104] + 8);
      a1[104] = v153;
      unint64_t v161 = a1[105] - (void)v153;
    }
    while (v161 > 0x10);
  }
  if (v161 >> 3 == 1)
  {
    uint64_t v162 = 42;
  }
  else
  {
    if (v161 >> 3 != 2) {
      goto LABEL_225;
    }
    uint64_t v162 = 85;
  }
  a1[107] = v162;
LABEL_225:
  v163 = (void **)a1[110];
  v164 = (void **)a1[111];
  if (v164 == v163)
  {
    v169 = a1 + 114;
    v164 = (void **)a1[110];
  }
  else
  {
    unint64_t v165 = a1[113];
    v166 = &v163[v165 >> 8];
    uint64_t v167 = (uint64_t)*v166;
    uint64_t v168 = (uint64_t)*v166 + 16 * v165;
    v169 = a1 + 114;
    uint64_t v170 = *(uint64_t *)((char *)v163 + (((a1[114] + v165) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((unsigned char *)a1 + 912) + v165);
    if (v168 != v170)
    {
      do
      {
        v171 = *(void **)v168;
        if (*(void *)v168)
        {
          if (*(void **)(v168 + 8) != v171) {
            *(void *)(v168 + 8) = v171;
          }
          operator delete(v171);
          *(void *)uint64_t v168 = 0;
          *(void *)(v168 + 8) = 0;
          uint64_t v167 = (uint64_t)*v166;
        }
        v168 += 16;
        if (v168 - v167 == 4096)
        {
          uint64_t v172 = (uint64_t)v166[1];
          ++v166;
          uint64_t v167 = v172;
          uint64_t v168 = v172;
        }
      }
      while (v168 != v170);
      v164 = (void **)a1[111];
      v163 = (void **)a1[110];
    }
  }
  void *v169 = 0;
  unint64_t v173 = (char *)v164 - (char *)v163;
  if ((unint64_t)((char *)v164 - (char *)v163) >= 0x11)
  {
    do
    {
      operator delete(*v163);
      v163 = (void **)(a1[110] + 8);
      a1[110] = v163;
      unint64_t v173 = a1[111] - (void)v163;
    }
    while (v173 > 0x10);
  }
  if (v173 >> 3 == 1)
  {
    uint64_t v174 = 128;
  }
  else
  {
    if (v173 >> 3 != 2) {
      goto LABEL_243;
    }
    uint64_t v174 = 256;
  }
  a1[113] = v174;
LABEL_243:
  v175 = (void **)a1[116];
  v176 = (void **)a1[117];
  if (v176 == v175)
  {
    v180 = a1 + 120;
    v176 = (void **)a1[116];
  }
  else
  {
    unint64_t v177 = a1[119];
    v178 = &v175[v177 / 0x55];
    uint64_t v179 = (uint64_t)*v178 + 48 * (v177 % 0x55);
    v180 = a1 + 120;
    unint64_t v181 = (unint64_t)v175[(a1[120] + v177) / 0x55] + 48 * ((a1[120] + v177) % 0x55);
    if (v179 != v181)
    {
      do
      {
        uint64_t v179 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v179) + 48;
        if (v179 - (void)*v178 == 4080)
        {
          uint64_t v182 = (uint64_t)v178[1];
          ++v178;
          uint64_t v179 = v182;
        }
      }
      while (v179 != v181);
      v176 = (void **)a1[117];
      v175 = (void **)a1[116];
    }
  }
  void *v180 = 0;
  unint64_t v183 = (char *)v176 - (char *)v175;
  if (v183 >= 0x11)
  {
    do
    {
      operator delete(*v175);
      v175 = (void **)(a1[116] + 8);
      a1[116] = v175;
      unint64_t v183 = a1[117] - (void)v175;
    }
    while (v183 > 0x10);
  }
  if (v183 >> 3 == 1)
  {
    uint64_t v184 = 42;
  }
  else
  {
    if (v183 >> 3 != 2) {
      goto LABEL_257;
    }
    uint64_t v184 = 85;
  }
  a1[119] = v184;
LABEL_257:
  v185 = (void **)a1[8];
  v186 = (void **)a1[9];
  if (v186 == v185)
  {
    v187 = a1 + 12;
    v186 = (void **)a1[8];
  }
  else
  {
    v187 = a1 + 12;
    unint64_t v188 = a1[11];
    v189 = &v185[v188 >> 8];
    uint64_t v190 = (uint64_t)*v189;
    uint64_t v191 = (uint64_t)*v189 + 16 * v188;
    uint64_t v192 = *(uint64_t *)((char *)v185 + (((a1[12] + v188) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((unsigned char *)a1 + 96) + v188);
    if (v191 != v192)
    {
      do
      {
        v193 = *(void **)v191;
        if (*(void *)v191)
        {
          if (*(void **)(v191 + 8) != v193) {
            *(void *)(v191 + 8) = v193;
          }
          operator delete(v193);
          *(void *)uint64_t v191 = 0;
          *(void *)(v191 + 8) = 0;
          uint64_t v190 = (uint64_t)*v189;
        }
        v191 += 16;
        if (v191 - v190 == 4096)
        {
          uint64_t v194 = (uint64_t)v189[1];
          ++v189;
          uint64_t v190 = v194;
          uint64_t v191 = v194;
        }
      }
      while (v191 != v192);
      v185 = (void **)a1[8];
      v186 = (void **)a1[9];
    }
  }
  void *v187 = 0;
  unint64_t v195 = (char *)v186 - (char *)v185;
  if ((unint64_t)((char *)v186 - (char *)v185) >= 0x11)
  {
    do
    {
      operator delete(*v185);
      uint64_t v196 = a1[9];
      v185 = (void **)(a1[8] + 8);
      a1[8] = v185;
      unint64_t v195 = v196 - (void)v185;
    }
    while (v195 > 0x10);
  }
  if (v195 >> 3 == 1)
  {
    uint64_t v197 = 128;
  }
  else
  {
    if (v195 >> 3 != 2) {
      goto LABEL_275;
    }
    uint64_t v197 = 256;
  }
  a1[11] = v197;
LABEL_275:
  v198 = (void **)a1[14];
  v199 = (void **)a1[15];
  if (v199 == v198)
  {
    v200 = a1 + 18;
    v199 = (void **)a1[14];
  }
  else
  {
    v200 = a1 + 18;
    unint64_t v201 = a1[17];
    v202 = &v198[v201 >> 8];
    uint64_t v203 = (uint64_t)*v202;
    uint64_t v204 = (uint64_t)*v202 + 16 * v201;
    uint64_t v205 = *(uint64_t *)((char *)v198 + (((a1[18] + v201) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((unsigned char *)a1 + 144) + v201);
    if (v204 != v205)
    {
      do
      {
        v206 = *(void **)v204;
        if (*(void *)v204)
        {
          if (*(void **)(v204 + 8) != v206) {
            *(void *)(v204 + 8) = v206;
          }
          operator delete(v206);
          *(void *)uint64_t v204 = 0;
          *(void *)(v204 + 8) = 0;
          uint64_t v203 = (uint64_t)*v202;
        }
        v204 += 16;
        if (v204 - v203 == 4096)
        {
          uint64_t v207 = (uint64_t)v202[1];
          ++v202;
          uint64_t v203 = v207;
          uint64_t v204 = v207;
        }
      }
      while (v204 != v205);
      v198 = (void **)a1[14];
      v199 = (void **)a1[15];
    }
  }
  void *v200 = 0;
  unint64_t v208 = (char *)v199 - (char *)v198;
  if ((unint64_t)((char *)v199 - (char *)v198) >= 0x11)
  {
    do
    {
      operator delete(*v198);
      uint64_t v209 = a1[15];
      v198 = (void **)(a1[14] + 8);
      a1[14] = v198;
      unint64_t v208 = v209 - (void)v198;
    }
    while (v208 > 0x10);
  }
  if (v208 >> 3 == 1)
  {
    uint64_t v210 = 128;
  }
  else
  {
    if (v208 >> 3 != 2) {
      goto LABEL_293;
    }
    uint64_t v210 = 256;
  }
  a1[17] = v210;
LABEL_293:
  v211 = (void **)a1[20];
  v212 = (void **)a1[21];
  if (v212 == v211)
  {
    v213 = a1 + 24;
    v212 = (void **)a1[20];
  }
  else
  {
    v213 = a1 + 24;
    unint64_t v214 = a1[23];
    v215 = &v211[v214 >> 8];
    uint64_t v216 = (uint64_t)*v215;
    uint64_t v217 = (uint64_t)*v215 + 16 * v214;
    uint64_t v218 = *(uint64_t *)((char *)v211 + (((a1[24] + v214) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((unsigned char *)a1 + 192) + v214);
    if (v217 != v218)
    {
      do
      {
        v219 = *(void **)v217;
        if (*(void *)v217)
        {
          if (*(void **)(v217 + 8) != v219) {
            *(void *)(v217 + 8) = v219;
          }
          operator delete(v219);
          *(void *)uint64_t v217 = 0;
          *(void *)(v217 + 8) = 0;
          uint64_t v216 = (uint64_t)*v215;
        }
        v217 += 16;
        if (v217 - v216 == 4096)
        {
          uint64_t v220 = (uint64_t)v215[1];
          ++v215;
          uint64_t v216 = v220;
          uint64_t v217 = v220;
        }
      }
      while (v217 != v218);
      v211 = (void **)a1[20];
      v212 = (void **)a1[21];
    }
  }
  void *v213 = 0;
  unint64_t v221 = (char *)v212 - (char *)v211;
  if ((unint64_t)((char *)v212 - (char *)v211) >= 0x11)
  {
    do
    {
      operator delete(*v211);
      uint64_t v222 = a1[21];
      v211 = (void **)(a1[20] + 8);
      a1[20] = v211;
      unint64_t v221 = v222 - (void)v211;
    }
    while (v221 > 0x10);
  }
  if (v221 >> 3 == 1)
  {
    uint64_t v223 = 128;
  }
  else
  {
    if (v221 >> 3 != 2) {
      goto LABEL_311;
    }
    uint64_t v223 = 256;
  }
  a1[23] = v223;
LABEL_311:
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 25));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 31));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 37));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 43));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 49));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 55));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 61));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 67));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 73));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 79));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 85));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 91));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 97));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 103));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 109));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 115));
  std::deque<std::valarray<BOOL>>::shrink_to_fit((uint64_t)(a1 + 7));
  std::deque<std::valarray<BOOL>>::shrink_to_fit((uint64_t)(a1 + 13));
  std::deque<std::valarray<BOOL>>::shrink_to_fit((uint64_t)(a1 + 19));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 115));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 109));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 103));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 97));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 91));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 85));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 79));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 73));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 67));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 61));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 55));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 49));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 43));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 37));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 31));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 25));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 19));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 13));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 7));
  v224 = (void **)a1[2];
  v225 = (void **)a1[3];
  a1[6] = 0;
  unint64_t v226 = (char *)v225 - (char *)v224;
  if ((unint64_t)((char *)v225 - (char *)v224) >= 0x11)
  {
    do
    {
      operator delete(*v224);
      v225 = (void **)a1[3];
      v224 = (void **)(a1[2] + 8);
      a1[2] = v224;
      unint64_t v226 = (char *)v225 - (char *)v224;
    }
    while ((unint64_t)((char *)v225 - (char *)v224) > 0x10);
  }
  unint64_t v227 = v226 >> 3;
  if (v227 == 1)
  {
    uint64_t v228 = 2048;
    goto LABEL_317;
  }
  if (v227 == 2)
  {
    uint64_t v228 = 4096;
LABEL_317:
    a1[5] = v228;
  }
  if (v224 != v225)
  {
    do
    {
      v229 = *v224++;
      operator delete(v229);
    }
    while (v224 != v225);
    uint64_t v231 = a1[2];
    uint64_t v230 = a1[3];
    if (v230 != v231) {
      a1[3] = v230 + ((v231 - v230 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  v232 = (void *)a1[1];
  if (v232) {
    operator delete(v232);
  }
  return a1;
}

void nms::PyramidNMS<unsigned short,double,unsigned char>::~PyramidNMS(void *a1)
{
  nms::PyramidNMS<unsigned short,double,unsigned char>::~PyramidNMS(a1);
  JUMPOUT(0x1E01BF140);
}

void std::deque<std::valarray<unsigned char>>::shrink_to_fit(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (*(void *)(a1 + 32) >= 0x100uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(void *)(a1 + 8) += 8;
      *(void *)(a1 + 32) -= 256;
    }
    std::deque<std::valarray<unsigned char>>::__maybe_remove_back_spare[abi:ne180100]((void *)a1, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    for (uint64_t i = *(void *)(a1 + 16); i != v3; *(void *)(a1 + 16) = i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t i = *(void *)(a1 + 16) - 8;
    }
    *(void *)(a1 + 32) = 0;
  }
  std::__split_buffer<std::valarray<unsigned char> *,std::allocator<std::valarray<unsigned char> *>>::shrink_to_fit((void **)a1);
}

void std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (*(void *)(a1 + 32) >= 0x55uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(void *)(a1 + 8) += 8;
      *(void *)(a1 + 32) -= 85;
    }
    std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__maybe_remove_back_spare[abi:ne180100]((void *)a1, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    for (uint64_t i = *(void *)(a1 + 16); i != v3; *(void *)(a1 + 16) = i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t i = *(void *)(a1 + 16) - 8;
    }
    *(void *)(a1 + 32) = 0;
  }
  std::__split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *,std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>>::shrink_to_fit((void **)a1);
}

void std::deque<std::valarray<BOOL>>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    unint64_t v3 = *(void *)(a1 + 32);
    unint64_t v4 = *(void ***)(a1 + 8);
    if (v3 >= 0x100)
    {
      operator delete(*v4);
      unint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      uint64_t v2 = *(void *)(a1 + 40);
      unint64_t v3 = *(void *)(a1 + 32) - 256;
      *(void *)(a1 + 32) = v3;
    }
    unint64_t v5 = *(void ***)(a1 + 16);
    if (v5 == v4) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 32 * ((char *)v5 - (char *)v4) - 1;
    }
    if (v6 - (v2 + v3) >= 0x100)
    {
      operator delete(*(v5 - 1));
      *(void *)(a1 + 16) -= 8;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    for (uint64_t i = *(void *)(a1 + 16); i != v8; *(void *)(a1 + 16) = i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t i = *(void *)(a1 + 16) - 8;
    }
    *(void *)(a1 + 32) = 0;
  }
  std::__split_buffer<std::valarray<BOOL> *,std::allocator<std::valarray<BOOL> *>>::shrink_to_fit((void **)a1);
}

uint64_t std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x55];
    uint64_t v7 = (uint64_t)*v6 + 48 * (v5 % 0x55);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x55] + 48 * ((*(void *)(a1 + 40) + v5) % 0x55);
    if (v7 != v8)
    {
      do
      {
        uint64_t v7 = std::deque<std::deque<unsigned short>>::~deque[abi:ne180100](v7) + 48;
        if (v7 - (void)*v6 == 4080)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *unint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 85;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::deque<std::deque<unsigned short>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x55];
    uint64_t v7 = (char *)*v6 + 48 * (v5 % 0x55);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x55] + 48 * ((*(void *)(a1 + 40) + v5) % 0x55);
    if (v7 != (char *)v8)
    {
      do
      {
        uint64_t v7 = (char *)(std::deque<unsigned short>::~deque[abi:ne180100](v7) + 48);
        if (v7 - (unsigned char *)*v6 == 4080)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *unint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 85;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::deque<unsigned short>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 1024;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 2048;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::valarray<BOOL>::~valarray[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    if (*(void **)(a1 + 8) != v2) {
      *(void *)(a1 + 8) = v2;
    }
    operator delete(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t std::deque<std::valarray<unsigned char>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 32 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100) {
    a2 = 1;
  }
  if (v5 < 0x200) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__split_buffer<std::valarray<unsigned char> *,std::allocator<std::valarray<unsigned char> *>>::shrink_to_fit(void **a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  uint64_t v4 = (unsigned char *)a1[3] - (unsigned char *)*a1;
  unint64_t v5 = (v2 - v3) >> 3;
  if (v5 >= v4 >> 3) {
    return;
  }
  if (v2 == v3)
  {
    uint64_t v9 = 0;
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
  int v7 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v9 = &v6[8 * v8];
  uint64_t v10 = v2 - v7;
  if (v2 == v7)
  {
LABEL_8:
    uint64_t v13 = v2;
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * (v10 >> 3);
  do
  {
    *(void *)&v6[v11] = *(void *)&v7[v11];
    v11 += 8;
  }
  while (v12 != v11);
  uint64_t v2 = a1[1];
  uint64_t v13 = a1[2];
LABEL_9:
  int64_t v14 = v13 - v2;
  uint64_t v15 = *a1;
  *a1 = v6;
  a1[1] = v6;
  a1[2] = &v6[v14];
  a1[3] = v9;
  if (v15)
  {
    operator delete(v15);
  }
}

uint64_t std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 85 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x55) {
    a2 = 1;
  }
  if (v5 < 0xAA) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *,std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>>::shrink_to_fit(void **a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  uint64_t v4 = (unsigned char *)a1[3] - (unsigned char *)*a1;
  unint64_t v5 = (v2 - v3) >> 3;
  if (v5 >= v4 >> 3) {
    return;
  }
  if (v2 == v3)
  {
    uint64_t v9 = 0;
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
  int v7 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v9 = &v6[8 * v8];
  uint64_t v10 = v2 - v7;
  if (v2 == v7)
  {
LABEL_8:
    uint64_t v13 = v2;
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * (v10 >> 3);
  do
  {
    *(void *)&v6[v11] = *(void *)&v7[v11];
    v11 += 8;
  }
  while (v12 != v11);
  uint64_t v2 = a1[1];
  uint64_t v13 = a1[2];
LABEL_9:
  int64_t v14 = v13 - v2;
  uint64_t v15 = *a1;
  *a1 = v6;
  a1[1] = v6;
  a1[2] = &v6[v14];
  a1[3] = v9;
  if (v15)
  {
    operator delete(v15);
  }
}

void std::__split_buffer<std::valarray<BOOL> *,std::allocator<std::valarray<BOOL> *>>::shrink_to_fit(void **a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  uint64_t v4 = (unsigned char *)a1[3] - (unsigned char *)*a1;
  unint64_t v5 = (v2 - v3) >> 3;
  if (v5 >= v4 >> 3) {
    return;
  }
  if (v2 == v3)
  {
    uint64_t v9 = 0;
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
  int v7 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v9 = &v6[8 * v8];
  uint64_t v10 = v2 - v7;
  if (v2 == v7)
  {
LABEL_8:
    uint64_t v13 = v2;
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * (v10 >> 3);
  do
  {
    *(void *)&v6[v11] = *(void *)&v7[v11];
    v11 += 8;
  }
  while (v12 != v11);
  uint64_t v2 = a1[1];
  uint64_t v13 = a1[2];
LABEL_9:
  int64_t v14 = v13 - v2;
  uint64_t v15 = *a1;
  *a1 = v6;
  a1[1] = v6;
  a1[2] = &v6[v14];
  a1[3] = v9;
  if (v15)
  {
    operator delete(v15);
  }
}

uint64_t std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x55];
    uint64_t v7 = (uint64_t)*v6 + 48 * (v5 % 0x55);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x55] + 48 * ((*(void *)(a1 + 40) + v5) % 0x55);
    if (v7 != v8)
    {
      do
      {
        uint64_t v7 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v7) + 48;
        if (v7 - (void)*v6 == 4080)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 85;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *(void **)v8;
        if (*(void *)v8)
        {
          if (*(void **)(v8 + 8) != v10) {
            *(void *)(v8 + 8) = v10;
          }
          operator delete(v10);
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 256;
LABEL_18:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double std::deque<std::valarray<unsigned char>>::__move_assign(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  unint64_t v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    uint64_t v6 = (void *)(a1 + 40);
    unint64_t v5 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v6 = (void *)(a1 + 40);
    unint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = &v4[v7 >> 8];
    uint64_t v9 = (uint64_t)*v8;
    uint64_t v10 = (uint64_t)*v8 + 16 * v7;
    uint64_t v11 = *(uint64_t *)((char *)v4 + (((*(void *)(a1 + 40) + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(unsigned char *)(a1 + 40) + v7);
    if (v10 != v11)
    {
      do
      {
        unint64_t v12 = *(void **)v10;
        if (*(void *)v10)
        {
          if (*(void **)(v10 + 8) != v12) {
            *(void *)(v10 + 8) = v12;
          }
          operator delete(v12);
          *(void *)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0;
          uint64_t v9 = (uint64_t)*v8;
        }
        v10 += 16;
        if (v10 - v9 == 4096)
        {
          uint64_t v13 = (uint64_t)v8[1];
          ++v8;
          uint64_t v9 = v13;
          uint64_t v10 = v13;
        }
      }
      while (v10 != v11);
      uint64_t v4 = *(void ***)(a1 + 8);
      unint64_t v5 = *(void ***)(a1 + 16);
    }
  }
  void *v6 = 0;
  unint64_t v14 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v14 = v15 - (void)v4;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 128;
  }
  else
  {
    if (v14 >> 3 != 2) {
      goto LABEL_19;
    }
    uint64_t v16 = 256;
  }
  *(void *)(a1 + 32) = v16;
LABEL_19:
  std::deque<std::valarray<unsigned char>>::shrink_to_fit(a1);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 != v18) {
    *(void *)(a1 + 16) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::__split_buffer<std::valarray<unsigned char> *,std::allocator<std::valarray<unsigned char> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v19 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a1 + 32) = v19;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

double std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  unint64_t v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    uint64_t v6 = (void *)(a1 + 40);
    unint64_t v5 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v6 = (void *)(a1 + 40);
    unint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = &v4[v7 / 0x55];
    uint64_t v9 = (uint64_t)*v8 + 48 * (v7 % 0x55);
    unint64_t v10 = (unint64_t)v4[(*(void *)(a1 + 40) + v7) / 0x55] + 48 * ((*(void *)(a1 + 40) + v7) % 0x55);
    if (v9 != v10)
    {
      do
      {
        uint64_t v9 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v9) + 48;
        if (v9 - (void)*v8 == 4080)
        {
          uint64_t v11 = (uint64_t)v8[1];
          ++v8;
          uint64_t v9 = v11;
        }
      }
      while (v9 != v10);
      uint64_t v4 = *(void ***)(a1 + 8);
      unint64_t v5 = *(void ***)(a1 + 16);
    }
  }
  void *v6 = 0;
  unint64_t v12 = (char *)v5 - (char *)v4;
  if (v12 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v12 = v13 - (void)v4;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 42;
  }
  else
  {
    if (v12 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v14 = 85;
  }
  *(void *)(a1 + 32) = v14;
LABEL_15:
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit(a1);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15 != v16) {
    *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::__split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *,std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v17 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a1 + 32) = v17;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

double std::deque<std::valarray<BOOL>>::__move_assign(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  unint64_t v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    uint64_t v6 = (void *)(a1 + 40);
    unint64_t v5 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v6 = (void *)(a1 + 40);
    unint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = &v4[v7 >> 8];
    uint64_t v9 = (uint64_t)*v8;
    uint64_t v10 = (uint64_t)*v8 + 16 * v7;
    uint64_t v11 = *(uint64_t *)((char *)v4 + (((*(void *)(a1 + 40) + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(unsigned char *)(a1 + 40) + v7);
    if (v10 != v11)
    {
      do
      {
        unint64_t v12 = *(void **)v10;
        if (*(void *)v10)
        {
          if (*(void **)(v10 + 8) != v12) {
            *(void *)(v10 + 8) = v12;
          }
          operator delete(v12);
          *(void *)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0;
          uint64_t v9 = (uint64_t)*v8;
        }
        v10 += 16;
        if (v10 - v9 == 4096)
        {
          uint64_t v13 = (uint64_t)v8[1];
          ++v8;
          uint64_t v9 = v13;
          uint64_t v10 = v13;
        }
      }
      while (v10 != v11);
      uint64_t v4 = *(void ***)(a1 + 8);
      unint64_t v5 = *(void ***)(a1 + 16);
    }
  }
  void *v6 = 0;
  unint64_t v14 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v14 = v15 - (void)v4;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 128;
  }
  else
  {
    if (v14 >> 3 != 2) {
      goto LABEL_19;
    }
    uint64_t v16 = 256;
  }
  *(void *)(a1 + 32) = v16;
LABEL_19:
  std::deque<std::valarray<BOOL>>::shrink_to_fit(a1);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 != v18) {
    *(void *)(a1 + 16) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::__split_buffer<std::valarray<BOOL> *,std::allocator<std::valarray<BOOL> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v19 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a1 + 32) = v19;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void nms::QuantizedScoreMap::~QuantizedScoreMap(nms::QuantizedScoreMap *this)
{
  uint64_t v3 = (void *)((char *)this + 16);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    if ((void *)v3[1] != v2) {
      *((void *)this + 3) = v2;
    }
    operator delete(v2);
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
}

void nms::RectForest<unsigned short,double>::~RectForest(uint64_t a1)
{
  nms::RectForest<unsigned short,double>::~RectForest(a1);
  JUMPOUT(0x1E01BF140);
}

void *std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 + ((a2 - *result) >> 4);
    if (v3 < 1) {
      result -= (unint64_t)(255 - v3) >> 8;
    }
    else {
      result += (unint64_t)v3 >> 8;
    }
  }
  return result;
}

void std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        unint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)unint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::allocator<std::valarray<double>>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (v2)
  {
    uint64_t v3 = *(unsigned char **)(a1 + 8);
    if (v3 != v2) {
      *(void *)(a1 + 8) = &v3[(v2 - v3 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer((uint64_t)a1);
}

void *std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(void *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 84 - v3;
      uint64_t v6 = &v2[-(v5 / 0x55)];
      *double result = v6;
      unint64_t v4 = *v6 + 48 * (85 * (v5 / 0x55) - v5) + 4032;
    }
    else
    {
      *double result = &v2[v3 / 0x55];
      unint64_t v4 = v2[v3 / 0x55] + 48 * (v3 % 0x55);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x55];
    uint64_t v7 = (char *)*v6 + 48 * (v5 % 0x55);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x55] + 48 * ((*(void *)(a1 + 40) + v5) % 0x55);
    if (v7 != (char *)v8)
    {
      do
      {
        uint64_t v7 = (char *)(std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v7) + 48);
        if (v7 - (unsigned char *)*v6 == 4080)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *unint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 85;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::deque<std::valarray<double>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    unint64_t v5 = &v2[v4 >> 8];
    uint64_t v6 = (uint64_t)*v5 + 16 * v4;
    uint64_t v7 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v4);
    if (v6 != v7)
    {
      do
      {
        std::allocator<std::valarray<double>>::destroy[abi:ne180100](v6);
        v6 += 16;
        if (v6 - (void)*v5 == 4096)
        {
          uint64_t v8 = (uint64_t)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != v7);
      uint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 128;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    uint64_t v11 = 256;
LABEL_14:
    *(void *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 != v14) {
      *(void *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t nms::RectForest<unsigned short,double>::~RectForest(uint64_t a1)
{
  *(void *)a1 = &unk_1F38ED560;
  uint64_t v2 = *(void ***)(a1 + 88);
  unint64_t v3 = *(void ***)(a1 + 96);
  if (v3 == v2)
  {
    unint64_t v3 = *(void ***)(a1 + 88);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 112);
    unint64_t v5 = &v2[v4 >> 8];
    uint64_t v6 = (uint64_t)*v5 + 16 * v4;
    uint64_t v7 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 120) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 120) + v4);
    if (v6 != v7)
    {
      do
      {
        std::allocator<std::valarray<double>>::destroy[abi:ne180100](v6);
        v6 += 16;
        if (v6 - (void)*v5 == 4096)
        {
          uint64_t v8 = (uint64_t)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != v7);
      uint64_t v2 = *(void ***)(a1 + 88);
      unint64_t v3 = *(void ***)(a1 + 96);
    }
  }
  *(void *)(a1 + 120) = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v10 = *(void *)(a1 + 96);
      uint64_t v2 = (void **)(*(void *)(a1 + 88) + 8);
      *(void *)(a1 + 88) = v2;
      unint64_t v9 = v10 - (void)v2;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 128;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v11 = 256;
  }
  *(void *)(a1 + 112) = v11;
LABEL_15:
  std::deque<std::valarray<double>>::shrink_to_fit(a1 + 80);
  uint64_t v12 = *(void ***)(a1 + 136);
  uint64_t v13 = *(void ***)(a1 + 144);
  if (v13 == v12)
  {
    uint64_t v14 = (void *)(a1 + 168);
    uint64_t v13 = *(void ***)(a1 + 136);
  }
  else
  {
    uint64_t v14 = (void *)(a1 + 168);
    unint64_t v15 = *(void *)(a1 + 160);
    unint64_t v16 = &v12[v15 / 0x55];
    uint64_t v17 = (char *)*v16 + 48 * (v15 % 0x55);
    unint64_t v18 = (unint64_t)v12[(*(void *)(a1 + 168) + v15) / 0x55] + 48 * ((*(void *)(a1 + 168) + v15) % 0x55);
    if (v17 != (char *)v18)
    {
      do
      {
        uint64_t v17 = (char *)(std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v17) + 48);
        if (v17 - (unsigned char *)*v16 == 4080)
        {
          uint64_t v19 = (char *)v16[1];
          ++v16;
          uint64_t v17 = v19;
        }
      }
      while (v17 != (char *)v18);
      uint64_t v12 = *(void ***)(a1 + 136);
      uint64_t v13 = *(void ***)(a1 + 144);
    }
  }
  *uint64_t v14 = 0;
  unint64_t v20 = (char *)v13 - (char *)v12;
  if (v20 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v21 = *(void *)(a1 + 144);
      uint64_t v12 = (void **)(*(void *)(a1 + 136) + 8);
      *(void *)(a1 + 136) = v12;
      unint64_t v20 = v21 - (void)v12;
    }
    while (v20 > 0x10);
  }
  if (v20 >> 3 == 1)
  {
    uint64_t v22 = 42;
  }
  else
  {
    if (v20 >> 3 != 2) {
      goto LABEL_29;
    }
    uint64_t v22 = 85;
  }
  *(void *)(a1 + 160) = v22;
LABEL_29:
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::shrink_to_fit(a1 + 128);
  unint64_t v23 = *(void **)(a1 + 16);
  if (v23)
  {
    free(v23);
    *(void *)(a1 + 16) = 0;
  }
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*(void **)(a1 + 184));
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::~deque[abi:ne180100](a1 + 128);
  std::deque<std::valarray<double>>::~deque[abi:ne180100](a1 + 80);
  uint64_t v24 = *(void **)(a1 + 64);
  if (v24)
  {
    if (*(void **)(a1 + 72) != v24) {
      *(void *)(a1 + 72) = v24;
    }
    operator delete(v24);
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  return a1;
}

void std::deque<std::valarray<double>>::shrink_to_fit(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (*(void *)(a1 + 32) >= 0x100uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(void *)(a1 + 8) += 8;
      *(void *)(a1 + 32) -= 256;
    }
    std::deque<std::valarray<unsigned char>>::__maybe_remove_back_spare[abi:ne180100]((void *)a1, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    for (uint64_t i = *(void *)(a1 + 16); i != v3; *(void *)(a1 + 16) = i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t i = *(void *)(a1 + 16) - 8;
    }
    *(void *)(a1 + 32) = 0;
  }
  std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::shrink_to_fit((void **)a1);
}

void std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::shrink_to_fit(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (*(void *)(a1 + 32) >= 0x55uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(void *)(a1 + 8) += 8;
      *(void *)(a1 + 32) -= 85;
    }
    std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__maybe_remove_back_spare[abi:ne180100]((void *)a1, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    for (uint64_t i = *(void *)(a1 + 16); i != v3; *(void *)(a1 + 16) = i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t i = *(void *)(a1 + 16) - 8;
    }
    *(void *)(a1 + 32) = 0;
  }
  std::__split_buffer<std::deque<std::pair<unsigned short,unsigned short>> *,std::allocator<std::deque<std::pair<unsigned short,unsigned short>> *>>::shrink_to_fit((void **)a1);
}

void std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::shrink_to_fit(void **a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  uint64_t v4 = (unsigned char *)a1[3] - (unsigned char *)*a1;
  unint64_t v5 = (v2 - v3) >> 3;
  if (v5 >= v4 >> 3) {
    return;
  }
  if (v2 == v3)
  {
    unint64_t v9 = 0;
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
  uint64_t v7 = a1[1];
  uint64_t v2 = a1[2];
  unint64_t v9 = &v6[8 * v8];
  uint64_t v10 = v2 - v7;
  if (v2 == v7)
  {
LABEL_8:
    uint64_t v13 = v2;
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * (v10 >> 3);
  do
  {
    *(void *)&v6[v11] = *(void *)&v7[v11];
    v11 += 8;
  }
  while (v12 != v11);
  uint64_t v2 = a1[1];
  uint64_t v13 = a1[2];
LABEL_9:
  int64_t v14 = v13 - v2;
  unint64_t v15 = *a1;
  *a1 = v6;
  a1[1] = v6;
  a1[2] = &v6[v14];
  a1[3] = v9;
  if (v15)
  {
    operator delete(v15);
  }
}

void std::__split_buffer<std::deque<std::pair<unsigned short,unsigned short>> *,std::allocator<std::deque<std::pair<unsigned short,unsigned short>> *>>::shrink_to_fit(void **a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  uint64_t v4 = (unsigned char *)a1[3] - (unsigned char *)*a1;
  unint64_t v5 = (v2 - v3) >> 3;
  if (v5 >= v4 >> 3) {
    return;
  }
  if (v2 == v3)
  {
    unint64_t v9 = 0;
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
  uint64_t v7 = a1[1];
  uint64_t v2 = a1[2];
  unint64_t v9 = &v6[8 * v8];
  uint64_t v10 = v2 - v7;
  if (v2 == v7)
  {
LABEL_8:
    uint64_t v13 = v2;
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * (v10 >> 3);
  do
  {
    *(void *)&v6[v11] = *(void *)&v7[v11];
    v11 += 8;
  }
  while (v12 != v11);
  uint64_t v2 = a1[1];
  uint64_t v13 = a1[2];
LABEL_9:
  int64_t v14 = v13 - v2;
  unint64_t v15 = *a1;
  *a1 = v6;
  a1[1] = v6;
  a1[2] = &v6[v14];
  a1[3] = v9;
  if (v15)
  {
    operator delete(v15);
  }
}

double std::deque<std::valarray<double>>::__move_assign(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  unint64_t v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    unint64_t v5 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = &v4[v6 >> 8];
    uint64_t v8 = (uint64_t)*v7 + 16 * v6;
    uint64_t v9 = *(uint64_t *)((char *)v4 + (((*(void *)(a1 + 40) + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v6);
    if (v8 != v9)
    {
      do
      {
        std::allocator<std::valarray<double>>::destroy[abi:ne180100](v8);
        v8 += 16;
        if (v8 - (void)*v7 == 4096)
        {
          uint64_t v10 = (uint64_t)v7[1];
          ++v7;
          uint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v4 = *(void ***)(a1 + 8);
      unint64_t v5 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  unint64_t v11 = (char *)v5 - (char *)v4;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v11 = v12 - (void)v4;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 128;
  }
  else
  {
    if (v11 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v13 = 256;
  }
  *(void *)(a1 + 32) = v13;
LABEL_15:
  std::deque<std::valarray<double>>::shrink_to_fit(a1);
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14 != v15) {
    *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v16 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a1 + 32) = v16;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

double std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::__move_assign(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  unint64_t v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    unint64_t v6 = (void *)(a1 + 40);
    unint64_t v5 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v6 = (void *)(a1 + 40);
    unint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = &v4[v7 / 0x55];
    uint64_t v9 = (char *)*v8 + 48 * (v7 % 0x55);
    unint64_t v10 = (unint64_t)v4[(*(void *)(a1 + 40) + v7) / 0x55] + 48 * ((*(void *)(a1 + 40) + v7) % 0x55);
    if (v9 != (char *)v10)
    {
      do
      {
        uint64_t v9 = (char *)(std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v9) + 48);
        if (v9 - (unsigned char *)*v8 == 4080)
        {
          unint64_t v11 = (char *)v8[1];
          ++v8;
          uint64_t v9 = v11;
        }
      }
      while (v9 != (char *)v10);
      uint64_t v4 = *(void ***)(a1 + 8);
      unint64_t v5 = *(void ***)(a1 + 16);
    }
  }
  void *v6 = 0;
  unint64_t v12 = (char *)v5 - (char *)v4;
  if (v12 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v12 = v13 - (void)v4;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 42;
  }
  else
  {
    if (v12 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v14 = 85;
  }
  *(void *)(a1 + 32) = v14;
LABEL_15:
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::shrink_to_fit(a1);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15 != v16) {
    *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::__split_buffer<std::deque<std::pair<unsigned short,unsigned short>> *,std::allocator<std::deque<std::pair<unsigned short,unsigned short>> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v17 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a1 + 32) = v17;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void std::__tree<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::__map_value_compare<nms::ForestLevelType,std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::less<nms::ForestLevelType>,true>,std::allocator<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>>>::__move_assign(void *a1, void *a2)
{
  uint64_t v4 = a1 + 1;
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((void *)a1[1]);
  *a1 = *a2;
  unint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *unint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *a1 = v4;
  }
}

void std::valarray<unsigned char>::resize(uint64_t a1, size_t __sz)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    if (*(void **)(a1 + 8) != v4) {
      *(void *)(a1 + 8) = v4;
    }
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  if (__sz)
  {
    unint64_t v5 = operator new(__sz);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v5;
    do
    {
      *unint64_t v5 = 0;
      unint64_t v5 = (unsigned char *)(*(void *)(a1 + 8) + 1);
      *(void *)(a1 + 8) = v5;
      --__sz;
    }
    while (__sz);
  }
}

void *std::__val_expr<std::_BinaryOp<std::less<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(void *result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  *double result = 0;
  result[1] = 0;
  int64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = result;
    double result = operator new(a3 - a2);
    void *v7 = result;
    v7[1] = result;
    unsigned int v8 = *a4;
    do
    {
      unsigned int v9 = *v6++;
      *(unsigned char *)double result = v9 < v8;
      double result = (void *)((char *)result + 1);
      --v4;
    }
    while (v4);
    v7[1] = result;
  }
  return result;
}

void sub_1DD835D84(_Unwind_Exception *a1)
{
  std::valarray<BOOL>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::mask_array<unsigned char>::mask_array[abi:ne180100](void *a1, unsigned __int8 **a2, uint64_t a3)
{
  *a1 = a3;
  unint64_t v5 = a1 + 1;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    unint64_t v10 = 0;
    *unint64_t v5 = 0;
    a1[2] = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unsigned int v9 = *v6++;
      v8 += v9;
    }
    while (v6 != v7);
    *unint64_t v5 = 0;
    a1[2] = 0;
    if (v8)
    {
      if (v8 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v10 = (char *)operator new(8 * v8);
      a1[1] = v10;
      bzero(v10, 8 * v8);
      a1[2] = &v10[8 * v8];
    }
    else
    {
      unint64_t v10 = 0;
    }
  }
  unint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  unint64_t v13 = v12 - *a2;
  if (v12 != *a2)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    do
    {
      if (v11[v14]) {
        *(void *)&v10[8 * v15++] = v14;
      }
      ++v14;
    }
    while (v13 != v14);
  }
  return a1;
}

uint64_t std::deque<unsigned char>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t nms::PyramidNMS<unsigned short,double,unsigned char>::computeRectRelationships(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = a1;
  uint64_t v860 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void **)(a1 + 968);
  unint64_t v6 = v4[4];
  uint64_t v5 = v4[5];
  uint64_t v7 = v4[1];
  unint64_t v8 = *(void *)(v7 + 8 * ((v5 + v6 - 1) / 0x14)) + 200 * ((v5 + v6 - 1) % 0x14);
  unint64_t v11 = *(void **)(v8 + 184);
  unint64_t v9 = v8 + 184;
  unint64_t v10 = v11;
  if (v11)
  {
    unint64_t v12 = v10;
    do
    {
      unint64_t v13 = v12;
      unint64_t v12 = (void *)*v12;
    }
    while (v12);
    if (v13 == (void *)v9 || v13[4]) {
      uint64_t v14 = 9;
    }
    else {
      uint64_t v14 = v13[5];
    }
    uint64_t v794 = v14;
    do
    {
      uint64_t v16 = v10;
      unint64_t v10 = (void *)*v10;
    }
    while (v10);
    if (v16 == (void *)v9 || v16[4])
    {
LABEL_13:
      uint64_t v15 = 0;
    }
    else
    {
      switch(v16[5])
      {
        case 0:
        case 1:
          uint64_t v15 = 4;
          break;
        case 2:
          uint64_t v15 = 8;
          break;
        case 3:
        case 4:
          uint64_t v15 = 2;
          break;
        case 5:
          uint64_t v15 = 5;
          break;
        case 6:
          uint64_t v15 = 9;
          break;
        case 7:
          uint64_t v15 = 3;
          break;
        case 8:
          uint64_t v15 = 14;
          break;
        default:
          goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v794 = 9;
  }
  double v17 = *(double *)(a1 + 1232);
  double v18 = *(double *)(a1 + 1240);
  double v19 = *(double *)(a1 + 1248);
  double v20 = *(double *)(a1 + 1256);
  double v780 = *(double *)(a1 + 1264);
  double v768 = *(double *)(a1 + 1272);
  double v21 = *(double *)(a1 + 1280);
  double v22 = *(double *)(a1 + 1288);
  double v23 = *(double *)(a1 + 1296);
  double v24 = *(double *)(a1 + 1304);
  if (v4) {
    unint64_t v25 = v4[5];
  }
  else {
    unint64_t v25 = 0;
  }
  unint64_t v783 = v25;
  long long v836 = 0u;
  long long v834 = 0u;
  memset(v835, 0, sizeof(v835));
  *(_OWORD *)__p = 0u;
  long long v833 = 0u;
  float64x2_t v830 = 0u;
  long long v831 = 0u;
  *(_OWORD *)v829 = 0u;
  if (v4[2] != v7)
  {
    unint64_t v26 = *(void *)(v7 + 8 * (v6 / 0x14)) + 200 * (v6 % 0x14);
    unint64_t v27 = *(void *)(v7 + 8 * ((v5 + v6) / 0x14)) + 200 * ((v5 + v6) % 0x14);
    if (v26 != v27)
    {
      unint64_t v28 = (void *)(v7 + 8 * (v6 / 0x14));
      if (v794 == 5) {
        uint64_t v29 = 5;
      }
      else {
        uint64_t v29 = 0;
      }
      if (v794) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 4;
      }
      uint64_t v796 = v15;
      unint64_t v799 = v27;
      unint64_t v802 = v30;
      while (1)
      {
        v805 = v28;
        uint64_t v31 = (char *)v833;
        v32 = (char *)__p[1];
        unint64_t v812 = *(void *)(v26 + 112);
        uint64_t v809 = *(void *)(*(void *)(v26 + 88) + ((v812 >> 5) & 0x7FFFFFFFFFFFFF8));
        uint64_t v33 = v833 - (unint64_t)__p[1];
        unint64_t v34 = (void *)v833 == __p[1] ? 0 : (((void)v833 - (unint64_t)__p[1]) << 6) - 1;
        unint64_t v35 = *((void *)&v834 + 1) + v834;
        if (v34 == *((void *)&v834 + 1) + (void)v834) {
          break;
        }
LABEL_93:
        *(void *)(*(void *)&v32[(v35 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v35 & 0x1FF)) = v809
                                                                                           + 16
                                                                                           * v812;
        uint64_t v90 = (*((void *)&v834 + 1))++;
        if (v802) {
          unint64_t v91 = ((uint64_t)(*(void *)(*(void *)(*(void *)((char *)__p[1]
        }
                                                             + (((unint64_t)(v834 + v90) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                 + 8 * ((v834 + v90) & 0x1FF))
                                     + 8)
                         - **(void **)(*(void *)((char *)__p[1]
                                                   + (((unint64_t)(v834 + v90) >> 6) & 0x3FFFFFFFFFFFFF8))
                                       + 8 * ((v834 + v90) & 0x1FF))) >> 3)
              / v802;
        else {
          unint64_t v91 = 0;
        }
        v823[0] = (void *)v91;
        std::deque<unsigned long>::push_back(v835, v823);
        uint64_t v92 = *(void *)(*(void *)(*((void *)&v835[0] + 1)
                                    + (((unint64_t)(*((void *)&v836 + 1) + v836 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((void *)&v836 + 1) + v836 - 1) & 0x1FF));
        v823[1] = *(void **)(*(void *)((char *)__p[1]
                                       + (((unint64_t)(*((void *)&v834 + 1) + v834 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((*((void *)&v834 + 1) + v834 - 1) & 0x1FF));
        *(void *)&long long v824 = 2;
        *((void *)&v824 + 1) = v92;
        *(void *)&long long v825 = v15;
        *((void **)&v825 + 1) = v823[1];
        uint64_t v826 = 3;
        uint64_t v827 = v92;
        uint64_t v828 = v15;
        std::__val_expr<std::_BinaryOp<std::multiplies<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::operator std::valarray<double>((double *)&v855, (uint64_t)v823);
        unint64_t v93 = *(char **)&v830.f64[0];
        uint64_t v94 = (char *)v829[1];
        uint64_t v95 = *(void *)&v830.f64[0] - (unint64_t)v829[1];
        if (*(void **)&v830.f64[0] == v829[1]) {
          unint64_t v96 = 0;
        }
        else {
          unint64_t v96 = 32 * (*(void *)&v830.f64[0] - (unint64_t)v829[1]) - 1;
        }
        uint64_t v97 = *((void *)&v831 + 1);
        unint64_t v98 = *((void *)&v831 + 1) + v831;
        if (v96 != *((void *)&v831 + 1) + (void)v831) {
          goto LABEL_132;
        }
        if ((unint64_t)v831 >= 0x100)
        {
          *(void *)&long long v831 = v831 - 256;
          unint64_t v99 = (char *)v829[1] + 8;
          uint64_t v100 = *(void *)v829[1];
          v829[1] = (char *)v829[1] + 8;
          if (*(void *)&v830.f64[0] != *(void *)&v830.f64[1]) {
            goto LABEL_130;
          }
          uint64_t v101 = v99 - (char *)v829[0];
          if (v99 > v829[0])
          {
            uint64_t v102 = v101 >> 3;
            BOOL v530 = v101 >> 3 < -1;
            uint64_t v103 = (v101 >> 3) + 2;
            if (v530) {
              uint64_t v104 = v103;
            }
            else {
              uint64_t v104 = v102 + 1;
            }
            v105 = &v99[-8 * (v104 >> 1)];
            uint64_t v106 = *(void *)&v830.f64[0] - (void)v99;
            if (*(char **)&v830.f64[0] != v99)
            {
              memmove(&v99[-8 * (v104 >> 1)], v99, *(void *)&v830.f64[0] - (void)v99);
              unint64_t v93 = (char *)v829[1];
            }
            unint64_t v107 = &v93[-8 * (v104 >> 1)];
            unint64_t v93 = &v105[v106];
            goto LABEL_109;
          }
          if (*(void **)&v830.f64[0] == v829[0]) {
            unint64_t v113 = 1;
          }
          else {
            unint64_t v113 = (uint64_t)(*(void *)&v830.f64[0] - (unint64_t)v829[0]) >> 2;
          }
          v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v113);
          uint64_t v116 = &v114[8 * (v113 >> 2)];
          unint64_t v117 = (uint64_t *)v829[1];
          unint64_t v93 = v116;
          uint64_t v118 = *(void *)&v830.f64[0] - (unint64_t)v829[1];
          if (*(void **)&v830.f64[0] != v829[1])
          {
            unint64_t v93 = &v116[v118 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v119 = 8 * (v118 >> 3);
            v120 = &v114[8 * (v113 >> 2)];
            do
            {
              uint64_t v121 = *v117++;
              *(void *)v120 = v121;
              v120 += 8;
              v119 -= 8;
            }
            while (v119);
          }
          goto LABEL_127;
        }
        uint64_t v108 = v95 >> 3;
        if (v95 >> 3 >= (unint64_t)((uint64_t)(*(void *)&v830.f64[1] - (unint64_t)v829[0]) >> 3))
        {
          if (*(void **)&v830.f64[1] == v829[0]) {
            unint64_t v109 = 1;
          }
          else {
            unint64_t v109 = (uint64_t)(*(void *)&v830.f64[1] - (unint64_t)v829[0]) >> 2;
          }
          unint64_t v858 = (unint64_t)&v830.f64[1];
          *(void *)&v856.f64[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v109);
          *(void *)&v856.f64[1] = *(void *)&v856.f64[0] + 8 * v108;
          v857.f64[0] = v856.f64[1];
          *(void *)&v857.f64[1] = *(void *)&v856.f64[0] + 8 * v110;
          v853 = (float64x2_t *)operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v856, &v853);
          for (float64_t i = v830.f64[0];
                *(void **)&i != v829[1];
                std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v856, *(void **)&i))
          {
            *(void *)&i -= 8;
          }
          v112 = v829[0];
          *(float64x2_t *)v829 = v856;
          float64x2_t v830 = v857;
          if (v112) {
            operator delete(v112);
          }
          goto LABEL_131;
        }
        if (*(void *)&v830.f64[1] == *(void *)&v830.f64[0])
        {
          *(void *)&v856.f64[0] = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)v829, &v856);
          unint64_t v93 = *(char **)&v830.f64[0];
          uint64_t v123 = (char *)v829[1] + 8;
          uint64_t v100 = *(void *)v829[1];
          v829[1] = (char *)v829[1] + 8;
          if (*(void *)&v830.f64[0] != *(void *)&v830.f64[1]) {
            goto LABEL_130;
          }
          uint64_t v143 = v123 - (char *)v829[0];
          if (v123 > v829[0])
          {
            uint64_t v144 = v143 >> 3;
            BOOL v530 = v143 >> 3 < -1;
            uint64_t v145 = (v143 >> 3) + 2;
            if (v530) {
              uint64_t v146 = v145;
            }
            else {
              uint64_t v146 = v144 + 1;
            }
            v147 = &v123[-8 * (v146 >> 1)];
            uint64_t v148 = *(void *)&v830.f64[0] - (void)v123;
            if (*(char **)&v830.f64[0] != v123)
            {
              memmove(&v123[-8 * (v146 >> 1)], v123, *(void *)&v830.f64[0] - (void)v123);
              uint64_t v123 = (char *)v829[1];
            }
            unint64_t v93 = &v147[v148];
            unint64_t v107 = &v123[-8 * (v146 >> 1)];
LABEL_109:
            v829[1] = v107;
            *(void *)&v830.f64[0] = v93;
            uint64_t v3 = a1;
LABEL_130:
            *(void *)unint64_t v93 = v100;
            *(void *)&v830.f64[0] += 8;
            goto LABEL_131;
          }
          if (*(void **)&v830.f64[0] == v829[0]) {
            unint64_t v158 = 1;
          }
          else {
            unint64_t v158 = (uint64_t)(*(void *)&v830.f64[0] - (unint64_t)v829[0]) >> 2;
          }
          v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v158);
          uint64_t v116 = &v114[8 * (v158 >> 2)];
          unint64_t v159 = (uint64_t *)v829[1];
          unint64_t v93 = v116;
          uint64_t v160 = *(void *)&v830.f64[0] - (unint64_t)v829[1];
          if (*(void **)&v830.f64[0] != v829[1])
          {
            unint64_t v93 = &v116[v160 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v161 = 8 * (v160 >> 3);
            uint64_t v162 = &v114[8 * (v158 >> 2)];
            do
            {
              uint64_t v163 = *v159++;
              *(void *)uint64_t v162 = v163;
              v162 += 8;
              v161 -= 8;
            }
            while (v161);
          }
LABEL_127:
          v122 = v829[0];
          v829[0] = v114;
          v829[1] = v116;
          *(void *)&v830.f64[0] = v93;
          *(void *)&v830.f64[1] = &v114[8 * v115];
          if (v122)
          {
            operator delete(v122);
            unint64_t v93 = *(char **)&v830.f64[0];
          }
          goto LABEL_130;
        }
        *(void *)&v856.f64[0] = operator new(0x1000uLL);
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(v829, &v856);
LABEL_131:
        uint64_t v94 = (char *)v829[1];
        uint64_t v97 = *((void *)&v831 + 1);
        unint64_t v98 = *((void *)&v831 + 1) + v831;
LABEL_132:
        *(_OWORD *)(*(void *)&v94[(v98 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v98) = v855;
        *((void *)&v831 + 1) = v97 + 1;
        v26 += 200;
        unint64_t v28 = v805;
        if (v26 - *v805 == 4000)
        {
          unint64_t v28 = v805 + 1;
          unint64_t v26 = v805[1];
        }
        if (v26 == v27) {
          goto LABEL_175;
        }
      }
      if ((unint64_t)v834 < 0x200)
      {
        uint64_t v45 = v33 >> 3;
        uint64_t v46 = (char *)*((void *)&v833 + 1);
        unint64_t v47 = (char *)__p[0];
        if (v33 >> 3 >= (unint64_t)((uint64_t)(*((void *)&v833 + 1) - (unint64_t)__p[0]) >> 3))
        {
          if (*((void **)&v833 + 1) == __p[0]) {
            unint64_t v50 = 1;
          }
          else {
            unint64_t v50 = (uint64_t)(*((void *)&v833 + 1) - (unint64_t)__p[0]) >> 2;
          }
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v50);
          uint64_t v53 = v52;
          uint64_t v54 = operator new(0x1000uLL);
          uint64_t v55 = &v51[8 * v45];
          v56 = &v51[8 * v53];
          if (v45 == v53)
          {
            uint64_t v57 = 8 * v45;
            uint64_t v15 = v796;
            if (v33 < 1)
            {
              uint64_t v69 = v57 >> 2;
              if (v31 == v32) {
                unint64_t v70 = 1;
              }
              else {
                unint64_t v70 = v69;
              }
              unint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v70);
              uint64_t v55 = &v71[8 * (v70 >> 2)];
              v56 = &v71[8 * v72];
              if (v51) {
                operator delete(v51);
              }
              v51 = v71;
            }
            else
            {
              uint64_t v58 = v57 >> 3;
              if (v58 >= -1) {
                unint64_t v59 = v58 + 1;
              }
              else {
                unint64_t v59 = v58 + 2;
              }
              v55 -= 8 * (v59 >> 1);
            }
          }
          else
          {
            uint64_t v15 = v796;
          }
          *(void *)uint64_t v55 = v54;
          uint64_t v73 = v55 + 8;
          for (j = (char *)v833; j != __p[1]; j -= 8)
          {
            if (v55 == v51)
            {
              if (v73 >= v56)
              {
                if (v56 == v51) {
                  unint64_t v79 = 1;
                }
                else {
                  unint64_t v79 = (v56 - v51) >> 2;
                }
                v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v79);
                v82 = v80;
                uint64_t v55 = &v80[(2 * v79 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v83 = v73 - v51;
                BOOL v248 = v73 == v51;
                uint64_t v73 = v55;
                if (!v248)
                {
                  uint64_t v73 = &v55[v83 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v84 = 8 * (v83 >> 3);
                  uint64_t v85 = v55;
                  uint64_t v86 = (uint64_t *)v51;
                  do
                  {
                    uint64_t v87 = *v86++;
                    *(void *)uint64_t v85 = v87;
                    v85 += 8;
                    v84 -= 8;
                  }
                  while (v84);
                }
                v56 = &v80[8 * v81];
                if (v51) {
                  operator delete(v51);
                }
                v51 = v82;
              }
              else
              {
                uint64_t v75 = (v56 - v73) >> 3;
                if (v75 >= -1) {
                  uint64_t v76 = v75 + 1;
                }
                else {
                  uint64_t v76 = v75 + 2;
                }
                uint64_t v77 = v76 >> 1;
                uint64_t v55 = &v51[8 * (v76 >> 1)];
                uint64_t v78 = v51;
                if (v73 != v51)
                {
                  memmove(v55, v51, v73 - v51);
                  uint64_t v78 = v73;
                }
                uint64_t v73 = &v78[8 * v77];
              }
            }
            uint64_t v88 = *((void *)j - 1);
            *((void *)v55 - 1) = v88;
            v55 -= 8;
          }
          unint64_t v89 = __p[0];
          __p[0] = v51;
          __p[1] = v55;
          *(void *)&long long v833 = v73;
          *((void *)&v833 + 1) = v56;
          unint64_t v27 = v799;
          if (v89) {
            operator delete(v89);
          }
          goto LABEL_92;
        }
        uint64_t v48 = operator new(0x1000uLL);
        uint64_t v49 = v48;
        if (v46 != v31)
        {
          *(void *)uint64_t v31 = v48;
          *(void *)&long long v833 = v833 + 8;
          uint64_t v15 = v796;
          unint64_t v27 = v799;
LABEL_92:
          v32 = (char *)__p[1];
          unint64_t v35 = *((void *)&v834 + 1) + v834;
          uint64_t v3 = a1;
          goto LABEL_93;
        }
        uint64_t v15 = v796;
        if (v32 == v47)
        {
          if (v31 == v32) {
            unint64_t v124 = 1;
          }
          else {
            unint64_t v124 = (v46 - v32) >> 2;
          }
          v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v124);
          v32 = &v125[(2 * v124 + 6) & 0xFFFFFFFFFFFFFFF8];
          v127 = (uint64_t *)__p[1];
          uint64_t v128 = v32;
          uint64_t v129 = v833 - (unint64_t)__p[1];
          uint64_t v15 = v796;
          unint64_t v27 = v799;
          if ((void *)v833 != __p[1])
          {
            uint64_t v128 = &v32[v129 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v130 = 8 * (v129 >> 3);
            v131 = v32;
            do
            {
              uint64_t v132 = *v127++;
              *(void *)v131 = v132;
              v131 += 8;
              v130 -= 8;
            }
            while (v130);
          }
          unint64_t v133 = __p[0];
          __p[0] = v125;
          __p[1] = v32;
          *(void *)&long long v833 = v128;
          *((void *)&v833 + 1) = &v125[8 * v126];
          if (v133)
          {
            operator delete(v133);
            v32 = (char *)__p[1];
          }
        }
        else
        {
          unint64_t v27 = v799;
        }
        *((void *)v32 - 1) = v49;
        v134 = (char *)__p[1];
        uint64_t v135 = (char *)v833;
        __p[1] = (char *)__p[1] - 8;
        uint64_t v136 = *(void *)__p[1];
        __p[1] = v134;
        if ((void)v833 == *((void *)&v833 + 1))
        {
          uint64_t v137 = v134 - (char *)__p[0];
          if (v134 <= __p[0])
          {
            if ((void *)v833 == __p[0]) {
              unint64_t v149 = 1;
            }
            else {
              unint64_t v149 = (uint64_t)(v833 - (unint64_t)__p[0]) >> 2;
            }
            uint64_t v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v149);
            uint64_t v152 = (uint64_t *)__p[1];
            uint64_t v135 = &v150[8 * (v149 >> 2)];
            uint64_t v153 = v833 - (unint64_t)__p[1];
            uint64_t v15 = v796;
            unint64_t v27 = v799;
            if ((void *)v833 != __p[1])
            {
              uint64_t v135 = &v150[8 * (v149 >> 2) + (v153 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v154 = 8 * (v153 >> 3);
              unint64_t v155 = &v150[8 * (v149 >> 2)];
              do
              {
                uint64_t v156 = *v152++;
                *(void *)unint64_t v155 = v156;
                v155 += 8;
                v154 -= 8;
              }
              while (v154);
            }
            uint64_t v157 = __p[0];
            __p[0] = v150;
            __p[1] = &v150[8 * (v149 >> 2)];
            *(void *)&long long v833 = v135;
            *((void *)&v833 + 1) = &v150[8 * v151];
            if (v157)
            {
              operator delete(v157);
              uint64_t v135 = (char *)v833;
            }
          }
          else
          {
            uint64_t v138 = v137 >> 3;
            BOOL v530 = v137 >> 3 < -1;
            uint64_t v139 = (v137 >> 3) + 2;
            if (v530) {
              uint64_t v140 = v139;
            }
            else {
              uint64_t v140 = v138 + 1;
            }
            v141 = &v134[-8 * (v140 >> 1)];
            uint64_t v142 = v833 - (void)v134;
            if ((char *)v833 != v134)
            {
              memmove(&v134[-8 * (v140 >> 1)], v134, v833 - (void)v134);
              v134 = (char *)__p[1];
            }
            uint64_t v135 = &v141[v142];
            *(void *)&long long v833 = &v141[v142];
            __p[1] = &v134[-8 * (v140 >> 1)];
          }
        }
        *(void *)uint64_t v135 = v136;
      }
      else
      {
        *(void *)&long long v834 = v834 - 512;
        uint64_t v37 = (char *)__p[1] + 8;
        uint64_t v36 = *(void *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((void)v833 == *((void *)&v833 + 1))
        {
          uint64_t v38 = v37 - (char *)__p[0];
          if (v37 <= __p[0])
          {
            if ((void *)v833 == __p[0]) {
              unint64_t v60 = 1;
            }
            else {
              unint64_t v60 = (uint64_t)(v833 - (unint64_t)__p[0]) >> 2;
            }
            uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v60);
            v63 = (uint64_t *)__p[1];
            uint64_t v31 = &v61[8 * (v60 >> 2)];
            uint64_t v64 = v833 - (unint64_t)__p[1];
            uint64_t v15 = v796;
            unint64_t v27 = v799;
            if ((void *)v833 != __p[1])
            {
              uint64_t v31 = &v61[8 * (v60 >> 2) + (v64 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v65 = 8 * (v64 >> 3);
              v66 = &v61[8 * (v60 >> 2)];
              do
              {
                uint64_t v67 = *v63++;
                *(void *)v66 = v67;
                v66 += 8;
                v65 -= 8;
              }
              while (v65);
            }
            v68 = __p[0];
            __p[0] = v61;
            __p[1] = &v61[8 * (v60 >> 2)];
            *(void *)&long long v833 = v31;
            *((void *)&v833 + 1) = &v61[8 * v62];
            if (v68)
            {
              operator delete(v68);
              uint64_t v31 = (char *)v833;
            }
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            BOOL v530 = v38 >> 3 < -1;
            uint64_t v40 = (v38 >> 3) + 2;
            if (v530) {
              uint64_t v41 = v40;
            }
            else {
              uint64_t v41 = v39 + 1;
            }
            v42 = &v37[-8 * (v41 >> 1)];
            uint64_t v43 = v833 - (void)v37;
            if ((char *)v833 != v37)
            {
              memmove(&v37[-8 * (v41 >> 1)], v37, v833 - (void)v37);
              uint64_t v31 = (char *)__p[1];
            }
            v44 = &v31[-8 * (v41 >> 1)];
            uint64_t v31 = &v42[v43];
            *(void *)&long long v833 = &v42[v43];
            __p[1] = v44;
            unint64_t v27 = v799;
          }
        }
        *(void *)uint64_t v31 = v36;
      }
      *(void *)&long long v833 = v833 + 8;
      goto LABEL_92;
    }
  }
LABEL_175:
  unint64_t v164 = v783;
  if (a2[5] == v783)
  {
    unint64_t v165 = 0;
    if (v783)
    {
      while (1)
      {
        uint64_t v166 = a2[4];
        if (*(void *)(*(void *)(a2[1] + (((v166 + v165) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v166 + v165)
                       + 8)
           - *(void *)(*(void *)(a2[1] + (((v166 + v165) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v166 + v165)) != *(void *)(*(void *)(*((void *)&v835[0] + 1)
                                                                                         + ((((unint64_t)v836
                                                                                            + v165) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                             + 8 * ((v836 + v165) & 0x1FF)))
          break;
        if (v783 == ++v165)
        {
          unint64_t v165 = v783;
          break;
        }
      }
    }
    unint64_t v164 = v783;
    BOOL v767 = v165 == v783;
  }
  else
  {
    BOOL v767 = 0;
  }
  unint64_t v167 = v164;
  std::deque<std::valarray<unsigned char>>::resize((void *)(v3 + 584), v164);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::resize((void *)(v3 + 632), v167);
  unint64_t v168 = v167;
  if (v167)
  {
    uint64_t v169 = 0;
    do
    {
      size_t v170 = *(void *)(*(void *)(*((void *)&v835[0] + 1)
                                   + (((unint64_t)(v836 + v169) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v836 + v169) & 0x1FF));
      std::valarray<unsigned char>::resize(*(void *)(*(void *)(a1 + 592)+ (((unint64_t)(*(void *)(a1 + 616) + v169) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(unsigned char *)(a1 + 616) + v169), v170);
      std::deque<std::deque<std::deque<unsigned short>>>::resize((void *)(*(void *)(*(void *)(a1 + 640) + 8 * ((*(void *)(a1 + 664) + v169) / 0x55uLL))+ 48 * ((*(void *)(a1 + 664) + v169) % 0x55uLL)), v783);
      uint64_t v171 = 0;
      do
      {
        unint64_t v172 = *(void *)(*(void *)(a1 + 640) + 8 * ((*(void *)(a1 + 664) + v169) / 0x55uLL))
             + 48 * ((*(void *)(a1 + 664) + v169) % 0x55uLL);
        std::deque<std::deque<unsigned short>>::resize((void *)(*(void *)(*(void *)(v172 + 8) + 8 * ((v171 + *(void *)(v172 + 32)) / 0x55uLL))+ 48 * ((v171 + *(void *)(v172 + 32)) % 0x55uLL)), v170);
        ++v171;
      }
      while (v783 != v171);
      ++v169;
      unint64_t v168 = v783;
    }
    while (v169 != v783);
  }
  unint64_t v173 = v168;
  std::deque<std::valarray<unsigned char>>::resize((void *)(a1 + 680), v168);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::resize((void *)(a1 + 728), v173);
  unint64_t v174 = v173;
  if (v173)
  {
    uint64_t v175 = 0;
    do
    {
      size_t v176 = *(void *)(*(void *)(*((void *)&v835[0] + 1)
                                   + (((unint64_t)(v836 + v175) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v836 + v175) & 0x1FF));
      std::valarray<unsigned char>::resize(*(void *)(*(void *)(a1 + 688)+ (((unint64_t)(*(void *)(a1 + 712) + v175) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(unsigned char *)(a1 + 712) + v175), v176);
      std::deque<std::deque<std::deque<unsigned short>>>::resize((void *)(*(void *)(*(void *)(a1 + 736) + 8 * ((*(void *)(a1 + 760) + v175) / 0x55uLL))+ 48 * ((*(void *)(a1 + 760) + v175) % 0x55uLL)), v783);
      uint64_t v177 = 0;
      do
      {
        unint64_t v178 = *(void *)(*(void *)(a1 + 736) + 8 * ((*(void *)(a1 + 760) + v175) / 0x55uLL))
             + 48 * ((*(void *)(a1 + 760) + v175) % 0x55uLL);
        std::deque<std::deque<unsigned short>>::resize((void *)(*(void *)(*(void *)(v178 + 8) + 8 * ((v177 + *(void *)(v178 + 32)) / 0x55uLL))+ 48 * ((v177 + *(void *)(v178 + 32)) % 0x55uLL)), v176);
        ++v177;
      }
      while (v783 != v177);
      ++v175;
      unint64_t v174 = v783;
    }
    while (v175 != v783);
  }
  unint64_t v179 = v174;
  std::deque<std::valarray<unsigned char>>::resize((void *)(a1 + 776), v174);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::resize((void *)(a1 + 824), v179);
  unint64_t v180 = v179;
  if (v179)
  {
    uint64_t v181 = 0;
    do
    {
      size_t v182 = *(void *)(*(void *)(*((void *)&v835[0] + 1)
                                   + (((unint64_t)(v836 + v181) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v836 + v181) & 0x1FF));
      std::valarray<unsigned char>::resize(*(void *)(*(void *)(a1 + 784)+ (((unint64_t)(*(void *)(a1 + 808) + v181) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(unsigned char *)(a1 + 808) + v181), v182);
      std::deque<std::deque<std::deque<unsigned short>>>::resize((void *)(*(void *)(*(void *)(a1 + 832) + 8 * ((*(void *)(a1 + 856) + v181) / 0x55uLL))+ 48 * ((*(void *)(a1 + 856) + v181) % 0x55uLL)), v783);
      uint64_t v183 = 0;
      do
      {
        unint64_t v184 = *(void *)(*(void *)(a1 + 832) + 8 * ((*(void *)(a1 + 856) + v181) / 0x55uLL))
             + 48 * ((*(void *)(a1 + 856) + v181) % 0x55uLL);
        std::deque<std::deque<unsigned short>>::resize((void *)(*(void *)(*(void *)(v184 + 8) + 8 * ((v183 + *(void *)(v184 + 32)) / 0x55uLL))+ 48 * ((v183 + *(void *)(v184 + 32)) % 0x55uLL)), v182);
        ++v183;
      }
      while (v783 != v183);
      ++v181;
      unint64_t v180 = v783;
    }
    while (v181 != v783);
  }
  v185 = (void *)v180;
  std::deque<std::valarray<unsigned char>>::resize((void *)(a1 + 872), v180);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::resize((void *)(a1 + 920), (unint64_t)v185);
  if (v185)
  {
    uint64_t v186 = 0;
    do
    {
      size_t v187 = *(void *)(*(void *)(*((void *)&v835[0] + 1)
                                   + (((unint64_t)(v836 + v186) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v836 + v186) & 0x1FF));
      std::valarray<unsigned char>::resize(*(void *)(*(void *)(a1 + 880)+ (((unint64_t)(*(void *)(a1 + 904) + v186) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(unsigned char *)(a1 + 904) + v186), v187);
      std::deque<std::deque<std::deque<unsigned short>>>::resize((void *)(*(void *)(*(void *)(a1 + 928) + 8 * ((*(void *)(a1 + 952) + v186) / 0x55uLL))+ 48 * ((*(void *)(a1 + 952) + v186) % 0x55uLL)), v783);
      uint64_t v188 = 0;
      do
      {
        unint64_t v189 = *(void *)(*(void *)(a1 + 928) + 8 * ((*(void *)(a1 + 952) + v186) / 0x55uLL))
             + 48 * ((*(void *)(a1 + 952) + v186) % 0x55uLL);
        std::deque<std::deque<unsigned short>>::resize((void *)(*(void *)(*(void *)(v189 + 8) + 8 * ((v188 + *(void *)(v189 + 32)) / 0x55uLL))+ 48 * ((v188 + *(void *)(v189 + 32)) % 0x55uLL)), v187);
        ++v188;
      }
      while (v783 != v188);
      ++v186;
    }
    while (v186 != v783);
    v765 = 0;
    uint64_t v190 = 0;
    unint64_t v191 = 0;
    uint64_t v758 = a3 ^ 1u;
    *(double *)&v821 = 0.0;
    double v822 = 0.0;
    if (v794 == 5) {
      uint64_t v192 = 5;
    }
    else {
      uint64_t v192 = 0;
    }
    v819 = 0;
    uint64_t v820 = 0;
    if (v794) {
      unint64_t v193 = v192;
    }
    else {
      unint64_t v193 = 4;
    }
    v817 = 0;
    v818 = 0;
    uint64_t v194 = a1;
    unint64_t v781 = v193;
    do
    {
      if (*(unsigned char *)(*(void *)(*(void *)(v194 + 16) + (((*(void *)(v194 + 40) + v191) >> 9) & 0x7FFFFFFFFFFFF8))
                    + ((*(void *)(v194 + 40) + v191) & 0xFFF)))
      {
        unint64_t v195 = v191 + v758;
        unint64_t v196 = v783;
        if (v191 + v758 < v783)
        {
          uint64_t v760 = *(void *)(*(void *)(*((void *)&v835[0] + 1)
                                       + ((((unint64_t)v836 + v191) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v836 + v191) & 0x1FF));
          unint64_t v782 = (unsigned __int16)v191;
          unint64_t v786 = v191;
          while (!*(unsigned char *)(*(void *)(*(void *)(v194 + 16)
                                        + (((*(void *)(v194 + 40) + v195) >> 9) & 0x7FFFFFFFFFFFF8))
                            + ((*(void *)(v194 + 40) + v195) & 0xFFF))
               || !v760)
          {
LABEL_852:
            ++v195;
            unint64_t v196 = v783;
            if (v195 >= v783) {
              goto LABEL_855;
            }
          }
          unint64_t v803 = 0;
          unint64_t v766 = *(void *)(*(void *)(*((void *)&v835[0] + 1)
                                       + ((((unint64_t)v836 + v195) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v836 + v195) & 0x1FF));
          unint64_t v784 = (unsigned __int16)v195;
          unint64_t v789 = v195;
          while (1)
          {
            if (v767
              && !*(unsigned char *)(*(void *)(*(void *)(a2[1] + (((a2[4] + v191) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*((unsigned char *)a2 + 32) + v191))
                           + v803))
            {
              goto LABEL_721;
            }
            if (!v193) {
              break;
            }
            v823[0] = *(void **)(*(void *)((char *)__p[1]
                                           + ((((unint64_t)v834 + v191) >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * ((v834 + v191) & 0x1FF));
            v823[1] = (void *)(v803 * v193);
            *(void *)&long long v824 = v193;
            *((void *)&v824 + 1) = 1;
            std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v856, (uint64_t)v823);
            if (v190) {
              goto LABEL_219;
            }
LABEL_220:
            uint64_t v190 = *(double **)&v856.f64[0];
            uint64_t v197 = *(uint64_t **)(*(void *)((char *)__p[1]
                                           + ((((unint64_t)v834 + v195) >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * ((v834 + v195) & 0x1FF));
            v816[0] = 0;
            v816[1] = 0;
            float64_t v778 = v856.f64[0];
            if (v193)
            {
              uint64_t v198 = v197[1] - *v197;
              if (v193 <= v198 >> 3 && ((uint64_t)(*(void *)&v856.f64[1] - *(void *)&v856.f64[0]) >> 3) / v193 == 1)
              {
                double v199 = *(double *)(*(void *)&v856.f64[0] + 8);
                double v846 = **(double **)&v856.f64[0];
                double v200 = *(double *)(*(void *)&v856.f64[0] + 16);
                double v201 = *(double *)(*(void *)&v856.f64[0] + 24);
                double v838 = 0.0;
                double v837 = 0.0;
                double v845 = v199;
                double v844 = v846 + v200;
                double v843 = v199 + v201;
                v823[0] = v197;
                v823[1] = 0;
                unint64_t v202 = (v198 >> 3) / v193;
                *(void *)&long long v824 = v202;
                *((void *)&v824 + 1) = v193;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v856, (uint64_t)v823);
                v823[0] = v197;
                v823[1] = (void *)1;
                *(void *)&long long v824 = v202;
                *((void *)&v824 + 1) = v193;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v855, (uint64_t)v823);
                v823[0] = v197;
                v823[1] = (void *)2;
                *(void *)&long long v824 = v202;
                *((void *)&v824 + 1) = v193;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v851, (uint64_t)v823);
                std::__val_expr<std::_BinaryOp<std::plus<double>,std::valarray<double>,std::valarray<double>>>::operator std::valarray<double>((double *)&v853, *(double **)&v856.f64[0], *(double **)&v856.f64[1], (double **)&v851);
                if (v851)
                {
                  if (v852 != v851) {
                    v852 += ((unsigned char *)v851 - v852 + 7) & 0xFFFFFFFFFFFFFFF8;
                  }
                  operator delete(v851);
                }
                v823[0] = v197;
                v823[1] = (void *)3;
                *(void *)&long long v824 = v202;
                *((void *)&v824 + 1) = v193;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v849, (uint64_t)v823);
                std::__val_expr<std::_BinaryOp<std::plus<double>,std::valarray<double>,std::valarray<double>>>::operator std::valarray<double>((double *)&v851, (double *)v855, *((double **)&v855 + 1), (double **)&v849);
                if (v849)
                {
                  if (v850 != v849) {
                    v850 += ((unsigned char *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                  }
                  operator delete(v849);
                }
                v823[1] = &v846;
                *(void *)&long long v824 = (v854 - (char *)v853) >> 3;
                *((void *)&v824 + 1) = &v853;
                std::__val_expr<std::_BinaryOp<std::less<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(&v849, (uint64_t)v823);
                v823[1] = &v845;
                *(void *)&long long v824 = (v852 - (unsigned char *)v851) >> 3;
                *((void *)&v824 + 1) = &v851;
                std::__val_expr<std::_BinaryOp<std::less<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(&v847, (uint64_t)v823);
                v823[1] = &v844;
                *(void *)&long long v824 = (uint64_t)(*(void *)&v856.f64[1] - *(void *)&v856.f64[0]) >> 3;
                *((void *)&v824 + 1) = &v856;
                std::__val_expr<std::_BinaryOp<std::greater<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(&v841, (uint64_t)v823);
                v823[1] = &v843;
                *(void *)&long long v824 = (uint64_t)(*((void *)&v855 + 1) - v855) >> 3;
                *((void *)&v824 + 1) = &v855;
                std::__val_expr<std::_BinaryOp<std::greater<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(&v839, (uint64_t)v823);
                int64_t v203 = v850 - (unsigned char *)v849;
                if (v850 == v849)
                {
                  double v206 = 0.0;
                  uint64_t v205 = v839;
                  if (v839) {
                    goto LABEL_724;
                  }
                }
                else
                {
                  std::valarray<BOOL>::resize((uint64_t)&v837, v850 - (unsigned char *)v849);
                  uint64_t v204 = 0;
                  uint64_t v205 = v839;
                  double v206 = v837;
                  uint64_t v207 = v849;
                  unint64_t v208 = v847;
                  uint64_t v209 = v841;
                  do
                  {
                    *(unsigned char *)(*(void *)&v206 + v204) = v208[v204] & v207[v204] & v209[v204] & v205[v204];
                    ++v204;
                  }
                  while (v203 != v204);
LABEL_724:
                  if (v840 != v205) {
                    v840 = v205;
                  }
                  operator delete(v205);
                }
                if (v841)
                {
                  if (v842 != v841) {
                    v842 = v841;
                  }
                  operator delete(v841);
                }
                if (v847)
                {
                  if (v848 != v847) {
                    v848 = v847;
                  }
                  operator delete(v847);
                }
                if (v849)
                {
                  if (v850 != v849) {
                    v850 = v849;
                  }
                  operator delete(v849);
                }
                if (v851)
                {
                  if (v852 != v851) {
                    v852 += ((unsigned char *)v851 - v852 + 7) & 0xFFFFFFFFFFFFFFF8;
                  }
                  operator delete(v851);
                }
                if (v853)
                {
                  if (v854 != (char *)v853) {
                    v854 += ((char *)v853 - v854 + 7) & 0xFFFFFFFFFFFFFFF8;
                  }
                  operator delete(v853);
                }
                if ((void)v855)
                {
                  if (*((void *)&v855 + 1) != (void)v855) {
                    *((void *)&v855 + 1) += (v855 - *((void *)&v855 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                  }
                  operator delete((void *)v855);
                }
                if (*(void *)&v856.f64[0])
                {
                  if (*(void *)&v856.f64[1] != *(void *)&v856.f64[0]) {
                    *(void *)&v856.f64[1] += (*(void *)&v856.f64[0] - *(void *)&v856.f64[1] + 7) & 0xFFFFFFFFFFFFFFF8;
                  }
                  operator delete(*(void **)&v856.f64[0]);
                }
                if (*(double *)&v821 != 0.0)
                {
                  if (*(void **)&v822 != v821) {
                    double v822 = *(double *)&v821;
                  }
                  operator delete(v821);
                }
                double v577 = v838;
                *(double *)&v821 = v206;
                double v822 = v838;
                unint64_t v578 = ((v197[1] - *v197) >> 3) / v193;
                if (v578 != *(void *)&v838 - *(void *)&v206)
                {
                  v581 = 0;
                  v582 = 0;
                  uint64_t v190 = *(double **)&v778;
                  unint64_t v191 = v786;
                  unint64_t v195 = v789;
                  goto LABEL_802;
                }
                if (v578 * v193)
                {
                  v579 = (unsigned __int8 *)operator new(v578 * v193);
                  bzero(v579, v578 * v193);
                  v580 = &v579[v578 * v193];
                }
                else
                {
                  v579 = 0;
                  v580 = 0;
                }
                uint64_t v583 = 0;
                if (v578 <= 1) {
                  uint64_t v584 = 1;
                }
                else {
                  uint64_t v584 = v578;
                }
                uint64_t v190 = *(double **)&v778;
                do
                {
                  if (*(void *)&v577 != *(void *)&v206)
                  {
                    v585 = (char *)&v579[v583];
                    double v586 = v206;
                    uint64_t v587 = v584;
                    do
                    {
                      char v588 = **(unsigned char **)&v586;
                      ++*(void *)&v586;
                      char *v585 = v588;
                      v585 += v193;
                      --v587;
                    }
                    while (v587);
                  }
                  ++v583;
                }
                while (v583 != v193);
                if (v579 == v580)
                {
                  v581 = 0;
                  v582 = 0;
                  uint64_t v194 = a1;
                  unint64_t v191 = v786;
                  unint64_t v195 = v789;
                  if (!v579) {
                    goto LABEL_802;
                  }
                }
                else
                {
                  unint64_t v589 = 0;
                  v590 = v579;
                  unint64_t v191 = v786;
                  unint64_t v195 = v789;
                  do
                  {
                    unsigned int v591 = *v590++;
                    v589 += v591;
                  }
                  while (v590 != v580);
                  if (v589)
                  {
                    if (v589 >> 61) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    size_t v592 = 8 * v589;
                    v593 = (char *)operator new(8 * v589);
                    bzero(v593, v592);
                    unint64_t v589 = (unint64_t)&v593[v592];
                  }
                  else
                  {
                    v593 = 0;
                  }
                  uint64_t v594 = 0;
                  uint64_t v595 = 0;
                  uint64_t v596 = v580 - v579;
                  if ((unint64_t)(v580 - v579) <= 1) {
                    uint64_t v596 = 1;
                  }
                  do
                  {
                    if (v579[v594]) {
                      *(void *)&v593[8 * v595++] = v594;
                    }
                    ++v594;
                  }
                  while (v596 != v594);
                  unint64_t v597 = v589 - (void)v593;
                  if ((char *)v589 == v593)
                  {
                    v598 = 0;
                    v600 = 0;
                    if (v593) {
                      goto LABEL_789;
                    }
                  }
                  else
                  {
                    if ((v597 & 0x8000000000000000) != 0) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    v598 = (char *)operator new(v589 - (void)v593);
                    size_t v599 = ((v597 - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
                    memcpy(v598, v593, v599);
                    v600 = &v598[v599];
                    if (v593) {
LABEL_789:
                    }
                      operator delete(v593);
                  }
                  uint64_t v601 = v600 - v598;
                  if (v600 == v598)
                  {
                    uint64_t v194 = a1;
                    if (v598) {
                      operator delete(v598);
                    }
                    v581 = 0;
                    v582 = 0;
                    uint64_t v190 = *(double **)&v778;
                  }
                  else
                  {
                    if (v601 < 0) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    v602 = (char *)operator new(v600 - v598);
                    v582 = v602;
                    uint64_t v603 = 0;
                    uint64_t v604 = v601 >> 3;
                    uint64_t v605 = *v197;
                    do
                    {
                      *(void *)&v602[v603] = *(void *)(v605 + 8 * *(void *)&v598[v603]);
                      v603 += 8;
                      --v604;
                    }
                    while (v604);
                    operator delete(v598);
                    v581 = &v582[v603];
                    uint64_t v194 = a1;
                    uint64_t v190 = *(double **)&v778;
                    if (!v579)
                    {
LABEL_802:
                      double v606 = v190[1];
                      double v837 = *v190;
                      double v607 = v190[2];
                      double v608 = v190[3];
                      double v846 = v606;
                      double v845 = v837 + v607;
                      double v844 = v606 + v608;
                      unint64_t v609 = ((v581 - v582) >> 3) / v193;
                      v823[0] = v582;
                      v823[1] = (void *)v609;
                      *(void *)&long long v824 = v193;
                      std::valarray<double>::valarray(&v856, (uint64_t)v823);
                      v823[0] = v582 + 8;
                      v823[1] = (void *)v609;
                      *(void *)&long long v824 = v193;
                      std::valarray<double>::valarray(&v855, (uint64_t)v823);
                      v823[0] = v582 + 16;
                      v823[1] = (void *)v609;
                      *(void *)&long long v824 = v193;
                      std::valarray<double>::valarray(&v851, (uint64_t)v823);
                      std::__val_expr<std::_BinaryOp<std::plus<double>,std::valarray<double>,std::valarray<double>>>::operator std::valarray<double>((double *)&v853, *(double **)&v856.f64[0], *(double **)&v856.f64[1], (double **)&v851);
                      if (v851)
                      {
                        if (v852 != v851) {
                          v852 += ((unsigned char *)v851 - v852 + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        operator delete(v851);
                      }
                      v823[0] = v582 + 24;
                      v823[1] = (void *)v609;
                      *(void *)&long long v824 = v193;
                      std::valarray<double>::valarray(&v849, (uint64_t)v823);
                      std::__val_expr<std::_BinaryOp<std::plus<double>,std::valarray<double>,std::valarray<double>>>::operator std::valarray<double>((double *)&v851, (double *)v855, *((double **)&v855 + 1), (double **)&v849);
                      if (v849)
                      {
                        if (v850 != v849) {
                          v850 += ((unsigned char *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        operator delete(v849);
                      }
                      nms::max<double>((uint64_t *)&v849, &v837, (uint64_t)&v856);
                      nms::max<double>((uint64_t *)&v847, &v846, (uint64_t)&v855);
                      nms::min<double>((uint64_t *)&v841, &v845, (uint64_t)&v853);
                      nms::min<double>((uint64_t *)&v839, &v844, (uint64_t)&v851);
                      std::valarray<double>::resize((uint64_t)v816, v202, 0.0);
                      std::mask_array<unsigned char>::mask_array[abi:ne180100](v823, (unsigned __int8 **)&v821, v816[0]);
                      v610 = v823[1];
                      uint64_t v611 = v824;
                      if ((void *)v824 == v823[1])
                      {
                        if ((void)v824) {
                          goto LABEL_817;
                        }
                      }
                      else
                      {
                        unint64_t v612 = (uint64_t)(v824 - (unint64_t)v823[1]) >> 3;
                        v613 = (double *)v841;
                        v614 = (double *)v849;
                        v615 = (double *)v839;
                        v616 = (double *)v847;
                        v617 = (double *)v823[0];
                        if (v612 <= 1) {
                          unint64_t v612 = 1;
                        }
                        v618 = (uint64_t *)v823[1];
                        do
                        {
                          double v619 = *v613++;
                          double v620 = v619;
                          double v621 = *v614++;
                          double v622 = v620 - v621;
                          double v623 = *v615++;
                          double v624 = v623;
                          double v625 = *v616++;
                          double v626 = v622 * (v624 - v625);
                          uint64_t v627 = *v618++;
                          v617[v627] = v626;
                          --v612;
                        }
                        while (v612);
                        *(void *)&long long v824 = v611 + (((unint64_t)v610 - v611 + 7) & 0xFFFFFFFFFFFFFFF8);
LABEL_817:
                        operator delete(v610);
                      }
                      if (v582) {
                        operator delete(v582);
                      }
                      if (v839)
                      {
                        if (v840 != v839) {
                          v840 += ((unsigned char *)v839 - v840 + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        operator delete(v839);
                      }
                      if (v841)
                      {
                        if (v842 != v841) {
                          v842 += ((unsigned char *)v841 - v842 + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        operator delete(v841);
                      }
                      if (v847)
                      {
                        if (v848 != v847) {
                          v848 += ((unsigned char *)v847 - v848 + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        operator delete(v847);
                      }
                      if (v849)
                      {
                        if (v850 != v849) {
                          v850 += ((unsigned char *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        operator delete(v849);
                      }
                      if (v851)
                      {
                        if (v852 != v851) {
                          v852 += ((unsigned char *)v851 - v852 + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        operator delete(v851);
                      }
                      if (v853)
                      {
                        if (v854 != (char *)v853) {
                          v854 += ((char *)v853 - v854 + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        operator delete(v853);
                      }
                      if ((void)v855)
                      {
                        if (*((void *)&v855 + 1) != (void)v855) {
                          *((void *)&v855 + 1) += (v855 - *((void *)&v855 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        operator delete((void *)v855);
                      }
                      if (*(void *)&v856.f64[0])
                      {
                        if (*(void *)&v856.f64[1] != *(void *)&v856.f64[0]) {
                          *(void *)&v856.f64[1] += (*(void *)&v856.f64[0] - *(void *)&v856.f64[1] + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                        operator delete(*(void **)&v856.f64[0]);
                      }
                      goto LABEL_237;
                    }
                  }
                }
                operator delete(v579);
                goto LABEL_802;
              }
            }
            if (*(double *)&v821 != 0.0)
            {
              operator delete(v821);
              *(double *)&v821 = 0.0;
              double v822 = 0.0;
            }
LABEL_237:
            if (v765) {
              operator delete(v765);
            }
            uint64_t v210 = v816[0];
            v765 = (void *)v816[0];
            std::valarray<double>::resize((uint64_t)&v819, v766, 0.0);
            std::mask_array<unsigned char>::mask_array[abi:ne180100](v823, (unsigned __int8 **)&v821, v210);
            std::valarray<double>::valarray(&v841, (uint64_t *)v823);
            if (v823[1])
            {
              if ((void *)v824 != v823[1]) {
                *(void *)&long long v824 = v824 + (((unint64_t)v823[1] - v824 + 7) & 0xFFFFFFFFFFFFFFF8);
              }
              operator delete(v823[1]);
            }
            std::mask_array<unsigned char>::mask_array[abi:ne180100](v823, (unsigned __int8 **)&v821, *(void *)(*(void *)((char *)v829[1] + ((((unint64_t)v831 + v195) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (v831 + v195)));
            std::valarray<double>::valarray(&v839, (uint64_t *)v823);
            if (v823[1])
            {
              if ((void *)v824 != v823[1]) {
                *(void *)&long long v824 = v824 + (((unint64_t)v823[1] - v824 + 7) & 0xFFFFFFFFFFFFFFF8);
              }
              operator delete(v823[1]);
            }
            uint64_t v211 = *(void *)(*(void *)((char *)v829[1]
                                         + ((((unint64_t)v831 + v191) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v831 + v191));
            v212 = v819;
            std::mask_array<unsigned char>::mask_array[abi:ne180100](v823, (unsigned __int8 **)&v821, (uint64_t)v819);
            v213 = v823[1];
            uint64_t v214 = v824;
            if ((void *)v824 == v823[1])
            {
              if (!(void)v824) {
                goto LABEL_257;
              }
            }
            else
            {
              unint64_t v215 = (uint64_t)(v824 - (unint64_t)v823[1]) >> 3;
              uint64_t v216 = (double *)v841;
              uint64_t v217 = (double *)v839;
              uint64_t v218 = (double *)v823[0];
              if (v215 <= 1) {
                unint64_t v215 = 1;
              }
              v219 = (uint64_t *)v823[1];
              do
              {
                double v220 = *v217++;
                double v221 = *(double *)(v211 + 8 * v803) + v220;
                double v222 = *v216++;
                double v223 = v222 / (v221 - v222);
                uint64_t v224 = *v219++;
                v218[v224] = v223;
                --v215;
              }
              while (v215);
              *(void *)&long long v824 = v214 + (((unint64_t)v213 - v214 + 7) & 0xFFFFFFFFFFFFFFF8);
            }
            operator delete(v213);
LABEL_257:
            std::valarray<double>::resize((uint64_t)&v817, v766, 0.0);
            nms::min<double>((uint64_t *)&v856, (double *)(*(void *)(*(void *)((char *)v829[1]+ ((((unint64_t)v831 + v191) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (v831 + v191))+ 8 * v803), (uint64_t)&v839);
            v225 = (double *)v817;
            std::mask_array<unsigned char>::mask_array[abi:ne180100](v823, (unsigned __int8 **)&v821, (uint64_t)v817);
            unint64_t v226 = v823[1];
            uint64_t v227 = v824;
            if ((void *)v824 == v823[1])
            {
              if (!(void)v824) {
                goto LABEL_265;
              }
            }
            else
            {
              unint64_t v228 = (uint64_t)(v824 - (unint64_t)v823[1]) >> 3;
              v229 = (double *)v841;
              uint64_t v230 = *(double **)&v856.f64[0];
              uint64_t v231 = (double *)v823[0];
              if (v228 <= 1) {
                unint64_t v228 = 1;
              }
              v232 = (uint64_t *)v823[1];
              do
              {
                double v233 = *v229++;
                double v234 = v233;
                double v235 = *v230++;
                double v236 = v234 / v235;
                uint64_t v237 = *v232++;
                v231[v237] = v236;
                --v228;
              }
              while (v228);
              *(void *)&long long v824 = v227 + (((unint64_t)v226 - v227 + 7) & 0xFFFFFFFFFFFFFFF8);
            }
            operator delete(v226);
LABEL_265:
            if (*(void *)&v856.f64[0])
            {
              if (*(void *)&v856.f64[1] != *(void *)&v856.f64[0]) {
                *(void *)&v856.f64[1] += (*(void *)&v856.f64[0] - *(void *)&v856.f64[1] + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              operator delete(*(void **)&v856.f64[0]);
            }
            v238 = v821;
            double v239 = v822;
            BOOL v240 = v767;
            if (v821 == *(void **)&v822) {
              BOOL v240 = 0;
            }
            if (v240)
            {
              v241 = *(char **)(*(void *)(a2[1] + (((a2[4] + v195) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*((unsigned char *)a2 + 32) + v195));
              v242 = v821;
              do
              {
                char v243 = *v241++;
                *v242++ &= v243;
              }
              while (v242 != *(unsigned char **)&v239);
            }
            long long v824 = 0u;
            long long v825 = 0u;
            *(_OWORD *)v823 = 0u;
            long long v855 = 0uLL;
            uint64_t v244 = *(void *)&v239 - (void)v238;
            if (*(unsigned char **)&v239 == v238)
            {
              v246 = 0;
            }
            else
            {
              v245 = (char *)operator new(*(void *)&v239 - (void)v238);
              v246 = v245;
              uint64_t v247 = 0;
              *(void *)&long long v855 = v245;
              do
              {
                BOOL v248 = v212[v247] <= v17 || v238[v247] == 0;
                char v249 = !v248;
                if (v225[v247] <= v18) {
                  char v249 = 0;
                }
                v245[v247++] = v249;
              }
              while (v244 != v247);
              *((void *)&v855 + 1) = &v245[v247];
            }
            nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&v856, (uint64_t)&v855);
            unint64_t v250 = v858;
            uint64_t v251 = *(void *)&v856.f64[1];
            float64_t v252 = v857.f64[0];
            if (v786 == v195)
            {
              v253 = (char *)(*(void *)&v856.f64[1] + 8 * (v858 >> 11));
              if (*(void *)&v857.f64[0] == *(void *)&v856.f64[1]) {
                uint64_t v254 = 0;
              }
              else {
                uint64_t v254 = *(void *)v253 + 2 * (v858 & 0x7FF);
              }
LABEL_291:
              v255 = (unsigned __int16 *)v254;
              while (1)
              {
                uint64_t v256 = *(void *)&v252 == v251
                     ? 0
                     : *(void *)(v251 + 8 * ((v859 + v858) >> 11)) + 2 * ((v859 + v858) & 0x7FF);
                if (v255 == (unsigned __int16 *)v256) {
                  break;
                }
                if (v803 >= *v255)
                {
                  v253 = (char *)std::deque<unsigned short>::erase((int64x2_t *)&v856, v253, v254);
                  uint64_t v254 = v258;
                  uint64_t v251 = *(void *)&v856.f64[1];
                  float64_t v252 = v857.f64[0];
                  goto LABEL_291;
                }
                ++v255;
                v254 += 2;
                if (*(void *)v253 + 4096 == v254)
                {
                  uint64_t v257 = *((void *)v253 + 1);
                  v253 += 8;
                  uint64_t v254 = v257;
                  goto LABEL_291;
                }
              }
              unint64_t v250 = v858;
            }
            v259 = (uint64_t *)(v251 + 8 * (v250 >> 11));
            if (*(void *)&v252 == v251)
            {
              v260 = 0;
              v262 = 0;
              v261 = (uint64_t *)(*(void *)&v252 + 8 * ((v859 + v250) >> 11));
            }
            else
            {
              v260 = (_WORD *)(*v259 + 2 * (v250 & 0x7FF));
              v261 = (uint64_t *)(v251 + 8 * ((v859 + v250) >> 11));
              v262 = (_WORD *)(*v261 + 2 * ((v859 + v250) & 0x7FF));
            }
            v853 = (float64x2_t *)v823;
            std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::back_insert_iterator<std::deque<unsigned short>>>>(v259, v260, v261, v262, (void **)&v853);
            v263 = *(void ***)&v856.f64[1];
            uint64_t v859 = 0;
            unint64_t v264 = *(void *)&v857.f64[0] - *(void *)&v856.f64[1];
            if (*(void *)&v857.f64[0] - *(void *)&v856.f64[1] >= 0x11uLL)
            {
              do
              {
                operator delete(*v263);
                v263 = (void **)(*(void *)&v856.f64[1] + 8);
                *(void *)&v856.f64[1] = v263;
                unint64_t v264 = *(void *)&v857.f64[0] - (void)v263;
              }
              while (*(void *)&v857.f64[0] - (void)v263 > 0x10uLL);
            }
            if (v264 >> 3 == 1)
            {
              uint64_t v265 = 1024;
            }
            else
            {
              if (v264 >> 3 != 2) {
                goto LABEL_311;
              }
              uint64_t v265 = 2048;
            }
            unint64_t v858 = v265;
LABEL_311:
            std::deque<unsigned short>::~deque[abi:ne180100](&v856);
            if (v246) {
              operator delete(v246);
            }
            long long v855 = 0uLL;
            if (*(unsigned char **)&v239 == v238)
            {
              v267 = 0;
            }
            else
            {
              v266 = (char *)operator new(*(void *)&v239 - (void)v238);
              v267 = v266;
              uint64_t v268 = 0;
              *(void *)&long long v855 = v266;
              do
              {
                BOOL v270 = v212[v268] <= v19 && v238[v268] != 0;
                if (v225[v268] <= v20) {
                  BOOL v270 = 0;
                }
                v266[v268++] = v270;
              }
              while (v244 != v268);
              *((void *)&v855 + 1) = &v266[v268];
            }
            nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&v856, (uint64_t)&v855);
            unint64_t v271 = v858;
            uint64_t v272 = *(void *)&v856.f64[1];
            float64_t v273 = v857.f64[0];
            if (v786 == v195)
            {
              v274 = (char *)(*(void *)&v856.f64[1] + 8 * (v858 >> 11));
              if (*(void *)&v857.f64[0] == *(void *)&v856.f64[1]) {
                uint64_t v275 = 0;
              }
              else {
                uint64_t v275 = *(void *)v274 + 2 * (v858 & 0x7FF);
              }
LABEL_330:
              v276 = (unsigned __int16 *)v275;
              while (1)
              {
                uint64_t v277 = *(void *)&v273 == v272
                     ? 0
                     : *(void *)(v272 + 8 * ((v859 + v858) >> 11)) + 2 * ((v859 + v858) & 0x7FF);
                if (v276 == (unsigned __int16 *)v277) {
                  break;
                }
                if (v803 >= *v276)
                {
                  v274 = (char *)std::deque<unsigned short>::erase((int64x2_t *)&v856, v274, v275);
                  uint64_t v275 = v279;
                  uint64_t v272 = *(void *)&v856.f64[1];
                  float64_t v273 = v857.f64[0];
                  goto LABEL_330;
                }
                ++v276;
                v275 += 2;
                if (*(void *)v274 + 4096 == v275)
                {
                  uint64_t v278 = *((void *)v274 + 1);
                  v274 += 8;
                  uint64_t v275 = v278;
                  goto LABEL_330;
                }
              }
              unint64_t v271 = v858;
            }
            v280 = (uint64_t *)(v272 + 8 * (v271 >> 11));
            if (*(void *)&v273 == v272)
            {
              v281 = 0;
              v283 = 0;
              v282 = (uint64_t *)(*(void *)&v273 + 8 * ((v859 + v271) >> 11));
            }
            else
            {
              v281 = (_WORD *)(*v280 + 2 * (v271 & 0x7FF));
              v282 = (uint64_t *)(v272 + 8 * ((v859 + v271) >> 11));
              v283 = (_WORD *)(*v282 + 2 * ((v859 + v271) & 0x7FF));
            }
            v853 = (float64x2_t *)v823;
            std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::back_insert_iterator<std::deque<unsigned short>>>>(v280, v281, v282, v283, (void **)&v853);
            v284 = *(void ***)&v856.f64[1];
            uint64_t v859 = 0;
            unint64_t v285 = *(void *)&v857.f64[0] - *(void *)&v856.f64[1];
            if (*(void *)&v857.f64[0] - *(void *)&v856.f64[1] >= 0x11uLL)
            {
              do
              {
                operator delete(*v284);
                v284 = (void **)(*(void *)&v856.f64[1] + 8);
                *(void *)&v856.f64[1] = v284;
                unint64_t v285 = *(void *)&v857.f64[0] - (void)v284;
              }
              while (*(void *)&v857.f64[0] - (void)v284 > 0x10uLL);
            }
            if (v285 >> 3 == 1)
            {
              uint64_t v286 = 1024;
            }
            else
            {
              if (v285 >> 3 != 2) {
                goto LABEL_350;
              }
              uint64_t v286 = 2048;
            }
            unint64_t v858 = v286;
LABEL_350:
            std::deque<unsigned short>::~deque[abi:ne180100](&v856);
            if (v267) {
              operator delete(v267);
            }
            long long v855 = 0uLL;
            if (*(unsigned char **)&v239 == v238)
            {
              v288 = 0;
              unint64_t v191 = v786;
            }
            else
            {
              v287 = (char *)operator new(*(void *)&v239 - (void)v238);
              v288 = v287;
              uint64_t v289 = 0;
              *(void *)&long long v855 = v287;
              unint64_t v191 = v786;
              do
              {
                double v290 = v212[v289];
                BOOL v291 = v290 <= v22;
                if (v290 <= v21 || v238[v289] == 0) {
                  BOOL v291 = 0;
                }
                double v293 = v225[v289];
                if (v293 <= v23) {
                  BOOL v291 = 0;
                }
                if (v293 > v24) {
                  BOOL v291 = 0;
                }
                v287[v289++] = v291;
              }
              while (v244 != v289);
              *((void *)&v855 + 1) = &v287[v289];
            }
            nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&v856, (uint64_t)&v855);
            unint64_t v294 = v858;
            uint64_t v295 = *(void *)&v856.f64[1];
            float64_t v296 = v857.f64[0];
            if (v191 == v195)
            {
              v297 = (char *)(*(void *)&v856.f64[1] + 8 * (v858 >> 11));
              if (*(void *)&v857.f64[0] == *(void *)&v856.f64[1]) {
                uint64_t v298 = 0;
              }
              else {
                uint64_t v298 = *(void *)v297 + 2 * (v858 & 0x7FF);
              }
LABEL_370:
              v299 = (unsigned __int16 *)v298;
              while (1)
              {
                uint64_t v300 = *(void *)&v296 == v295
                     ? 0
                     : *(void *)(v295 + 8 * ((v859 + v858) >> 11)) + 2 * ((v859 + v858) & 0x7FF);
                if (v299 == (unsigned __int16 *)v300) {
                  break;
                }
                if (v803 >= *v299)
                {
                  v297 = (char *)std::deque<unsigned short>::erase((int64x2_t *)&v856, v297, v298);
                  uint64_t v298 = v302;
                  uint64_t v295 = *(void *)&v856.f64[1];
                  float64_t v296 = v857.f64[0];
                  goto LABEL_370;
                }
                ++v299;
                v298 += 2;
                if (*(void *)v297 + 4096 == v298)
                {
                  uint64_t v301 = *((void *)v297 + 1);
                  v297 += 8;
                  uint64_t v298 = v301;
                  goto LABEL_370;
                }
              }
              unint64_t v294 = v858;
            }
            v303 = (uint64_t *)(v295 + 8 * (v294 >> 11));
            if (*(void *)&v296 == v295)
            {
              v304 = 0;
              v306 = 0;
              v305 = (uint64_t *)(*(void *)&v296 + 8 * ((v859 + v294) >> 11));
            }
            else
            {
              v304 = (_WORD *)(*v303 + 2 * (v294 & 0x7FF));
              v305 = (uint64_t *)(v295 + 8 * ((v859 + v294) >> 11));
              v306 = (_WORD *)(*v305 + 2 * ((v859 + v294) & 0x7FF));
            }
            v853 = (float64x2_t *)v823;
            std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::back_insert_iterator<std::deque<unsigned short>>>>(v303, v304, v305, v306, (void **)&v853);
            v307 = *(void ***)&v856.f64[1];
            uint64_t v859 = 0;
            unint64_t v308 = *(void *)&v857.f64[0] - *(void *)&v856.f64[1];
            if (*(void *)&v857.f64[0] - *(void *)&v856.f64[1] >= 0x11uLL)
            {
              do
              {
                operator delete(*v307);
                v307 = (void **)(*(void *)&v856.f64[1] + 8);
                *(void *)&v856.f64[1] = v307;
                unint64_t v308 = *(void *)&v857.f64[0] - (void)v307;
              }
              while (*(void *)&v857.f64[0] - (void)v307 > 0x10uLL);
            }
            if (v308 >> 3 == 1)
            {
              uint64_t v309 = 1024;
              goto LABEL_389;
            }
            if (v308 >> 3 == 2)
            {
              uint64_t v309 = 2048;
LABEL_389:
              unint64_t v858 = v309;
            }
            std::deque<unsigned short>::~deque[abi:ne180100](&v856);
            if (v288) {
              operator delete(v288);
            }
            if (*((void *)&v825 + 1))
            {
              double v838 = 0.0;
              double v837 = 0.0;
              if ((void *)v824 != v823[1])
              {
                v310 = (char *)v823[1] + 8 * ((unint64_t)v825 >> 11);
                v311 = (_WORD *)(*v310 + 2 * (v825 & 0x7FF));
                uint64_t v785 = *(void *)((char *)v823[1]
                                 + ((((void)v825 + *((void *)&v825 + 1)) >> 8) & 0xFFFFFFFFFFFFF8))
                     + 2 * ((v825 + *((void *)&v825 + 1)) & 0x7FF);
                if (v311 != (_WORD *)v785)
                {
                  v312 = 0;
                  v793 = 0;
                  while (1)
                  {
                    v791 = v311;
                    v792 = v310;
                    LOWORD(v816[0]) = 0;
                    uint64_t v313 = (unsigned __int16)*v311;
                    LOWORD(v816[0]) = *v311;
                    if (v312)
                    {
                      operator delete(v312);
                      v793 = 0;
                      uint64_t v313 = LOWORD(v816[0]);
                    }
                    std::valarray<double>::resize((uint64_t)&v837, 5uLL, 0.0);
                    v314 = *(void **)(a1 + 968);
                    unint64_t v315 = v314[5];
                    if (v315 <= v782 || v315 <= v784) {
                      std::__throw_out_of_range[abi:ne180100]("deque");
                    }
                    uint64_t v316 = v314[4];
                    uint64_t v317 = v314[1];
                    uint64_t v318 = *(void *)(v317 + 8 * ((v316 + v782) / 0x14));
                    uint64_t v319 = v316 + v784;
                    unint64_t v320 = (v316 + v784) / 0x14;
                    uint64_t v321 = *(void *)(v317 + 8 * v320);
                    unint64_t v322 = (v316 + v782) % 0x14;
                    uint64_t v323 = v318 + 200 * v322;
                    uint64_t v326 = *(void *)(v323 + 184);
                    v325 = (void *)(v323 + 184);
                    uint64_t v324 = v326;
                    v327 = v325;
                    v328 = (void *)v326;
                    if (v326)
                    {
                      do
                      {
                        uint64_t v329 = v328[4];
                        BOOL v330 = v329 == 0;
                        if (v329) {
                          v331 = v328;
                        }
                        else {
                          v331 = v328 + 1;
                        }
                        if (!v330) {
                          v327 = v328;
                        }
                        v328 = (void *)*v331;
                      }
                      while (*v331);
                      uint64_t v332 = v327 == v325 || v327[4] > 1uLL ? 9 : v327[5];
                      do
                      {
                        v333 = (void *)v324;
                        uint64_t v324 = *(void *)v324;
                      }
                      while (v324);
                      if (v333 == v325 || v333[4])
                      {
LABEL_415:
                        uint64_t v324 = 0;
                      }
                      else
                      {
                        switch(v333[5])
                        {
                          case 0:
                          case 1:
                            uint64_t v324 = 4;
                            break;
                          case 2:
                            uint64_t v324 = 8;
                            break;
                          case 3:
                          case 4:
                            uint64_t v324 = 2;
                            break;
                          case 5:
                            uint64_t v324 = 5;
                            break;
                          case 6:
                            uint64_t v324 = 9;
                            break;
                          case 7:
                            uint64_t v324 = 3;
                            break;
                          case 8:
                            uint64_t v324 = 14;
                            break;
                          default:
                            goto LABEL_415;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v332 = 9;
                    }
                    unint64_t v795 = v322;
                    uint64_t v334 = v318 + 200 * v322;
                    uint64_t v336 = *(void *)(v334 + 88);
                    v335 = (void *)(v334 + 88);
                    v813 = v335 + 3;
                    *(void *)&v856.f64[0] = *(void *)(v336 + ((v335[3] >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * v335[3];
                    *(void *)&v856.f64[1] = v324 * (unint64_t)(unsigned __int16)v803;
                    *(void *)&v857.f64[0] = v324;
                    *(void *)&v857.f64[1] = 1;
                    std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v855, (uint64_t)&v856);
                    uint64_t v790 = v318;
                    uint64_t v337 = v319 - 20 * v320;
                    uint64_t v338 = v321 + 200 * v337;
                    v341 = *(void **)(v338 + 184);
                    v340 = (void *)(v338 + 184);
                    v339 = v341;
                    if (v341)
                    {
                      do
                      {
                        v342 = v339;
                        v339 = (void *)*v339;
                      }
                      while (v339);
                      uint64_t v343 = a1;
                      if (v342 == v340 || v342[4] || (unint64_t v344 = v342[5], v344 > 8)) {
                        float64_t v345 = 0.0;
                      }
                      else {
                        float64_t v345 = dbl_1DD8CEC20[v344];
                      }
                    }
                    else
                    {
                      float64_t v345 = 0.0;
                      uint64_t v343 = a1;
                    }
                    uint64_t v346 = v321 + 200 * v337;
                    v810 = (void *)(v346 + 88);
                    v806 = (void *)(v346 + 112);
                    *(void *)&v856.f64[0] = *(void *)(*(void *)(v346 + 88)
                                                        + ((*(void *)(v346 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * *(void *)(v346 + 112);
                    *(void *)&v856.f64[1] = *(void *)&v345 * v313;
                    v857.f64[0] = v345;
                    *(void *)&v857.f64[1] = 1;
                    std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v853, (uint64_t)&v856);
                    v347 = v793;
                    if (v793 == (unsigned __int8 *)32)
                    {
                      v312 = 0;
                    }
                    else
                    {
                      float64x2_t v348 = vaddq_f64(*(float64x2_t *)v855, *(float64x2_t *)(v855 + 16));
                      float64x2_t v349 = vaddq_f64(*v853, v853[1]);
                      float64x2_t v856 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)v855, *v853), *(int8x16_t *)v853, *(int8x16_t *)v855);
                      float64x2_t v857 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v349, v348), (int8x16_t)v349, (int8x16_t)v348), v856);
                      std::valarray<double>::valarray(&v851, (uint64_t *)&v856, 4uLL);
                      v312 = v851;
                      v347 = v852;
                    }
                    v793 = v347;
                    double v350 = *(double *)v325;
                    if (!*v325) {
                      break;
                    }
                    v351 = v325;
                    v352 = (void *)*v325;
                    do
                    {
                      unint64_t v353 = v352[4];
                      BOOL v354 = v353 >= 4;
                      if (v353 >= 4) {
                        v355 = v352;
                      }
                      else {
                        v355 = v352 + 1;
                      }
                      if (v354) {
                        v351 = v352;
                      }
                      v352 = (void *)*v355;
                    }
                    while (*v355);
                    if (v351 == v325 || v351[4] > 4uLL) {
                      break;
                    }
                    unint64_t v421 = v351[5];
                    BOOL v530 = v421 > 8;
                    uint64_t v422 = (1 << v421) & 0x144;
                    if (v530 || v422 == 0) {
                      break;
                    }
                    v357 = (void *)*v340;
                    if (!*v340)
                    {
                      BOOL v356 = 0;
                      goto LABEL_439;
                    }
                    v424 = v340;
                    do
                    {
                      unint64_t v425 = v357[4];
                      BOOL v426 = v425 >= 4;
                      if (v425 >= 4) {
                        v427 = v357;
                      }
                      else {
                        v427 = v357 + 1;
                      }
                      if (v426) {
                        v424 = v357;
                      }
                      v357 = (void *)*v427;
                    }
                    while (*v427);
                    if (v424 == v340
                      || v424[4] > 4uLL
                      || ((unint64_t v428 = v424[5], v530 = v428 > 8, v429 = (1 << v428) & 0x144, !v530)
                        ? (BOOL v430 = v429 == 0)
                        : (BOOL v430 = 1),
                          v430 || *(void *)(v790 + 200 * v795 + 72) == *(void *)(v790 + 200 * v795 + 64)))
                    {
                      BOOL v356 = 0;
                      LODWORD(v357) = 0;
                      goto LABEL_439;
                    }
                    LODWORD(v357) = 0;
                    uint64_t v431 = *(void *)(v321 + 200 * v337 + 64);
                    uint64_t v432 = *(void *)(v321 + 200 * v337 + 72);
                    BOOL v248 = v432 == v431;
                    BOOL v356 = v432 != v431;
                    uint64_t v358 = 5;
                    if (v248) {
                      uint64_t v358 = 6;
                    }
LABEL_440:
                    if (v332 == 5 || !v332)
                    {
                      if (v357)
                      {
                        if (v350 != 0.0)
                        {
                          double v359 = v325;
                          do
                          {
                            uint64_t v360 = *(void *)(*(void *)&v350 + 32);
                            BOOL v361 = v360 == 0;
                            if (v360) {
                              v362 = *(double **)&v350;
                            }
                            else {
                              v362 = (double *)(*(void *)&v350 + 8);
                            }
                            if (!v361) {
                              double v359 = *(void **)&v350;
                            }
                            double v350 = *v362;
                          }
                          while (*(void *)v362);
                          if (v359 == v325 || v359[4] > 1uLL || (unint64_t v363 = v359[5], v363 > 8)) {
                            double v350 = 0.0;
                          }
                          else {
                            double v350 = dbl_1DD8CEC20[v363];
                          }
                        }
                        unint64_t v433 = *(void *)(*(void *)(v790 + 200 * v795 + 136)
                                         + 8 * (*(void *)(v790 + 200 * v795 + 160) / 0x55uLL))
                             + 48 * (*(void *)(v790 + 200 * v795 + 160) % 0x55uLL);
                        v434 = (unsigned __int16 *)(*(void *)(*(void *)(v433 + 8)
                                                              + (((*(void *)(v433 + 32)
                                                                 + (unint64_t)(unsigned __int16)v803) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                  + 4 * ((*(void *)(v433 + 32) + (unsigned __int16)v803) & 0x3FFLL));
                        unint64_t v435 = *(void *)(*(void *)(v321 + 200 * v337 + 136)
                                         + 8 * (*(void *)(v321 + 200 * v337 + 160) / 0x55uLL))
                             + 48 * (*(void *)(v321 + 200 * v337 + 160) % 0x55uLL);
                        unint64_t v436 = *(void *)(v435 + 32) + v313;
                        uint64_t v437 = *(void *)(*(void *)(v435 + 8) + ((v436 >> 7) & 0x1FFFFFFFFFFFFF8));
                        uint64_t v438 = *v434;
                        uint64_t v439 = v434[1] - v438 + 1;
                        *(void *)&v856.f64[0] = *(void *)(*v335
                                                            + (((unint64_t)(*v813 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                + 16 * (*(unsigned char *)v813 + 1);
                        *(void *)&v856.f64[1] = *(void *)&v350 * v438;
                        *(void *)&v857.f64[0] = *(void *)&v350 * v439;
                        *(void *)&v857.f64[1] = 1;
                        std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v851, (uint64_t)&v856);
                        v440 = (void *)*v340;
                        if (!*v340) {
                          goto LABEL_563;
                        }
                        v441 = v340;
                        do
                        {
                          uint64_t v442 = v440[4];
                          BOOL v443 = v442 == 0;
                          if (v442) {
                            v444 = v440;
                          }
                          else {
                            v444 = v440 + 1;
                          }
                          if (!v443) {
                            v441 = v440;
                          }
                          v440 = (void *)*v444;
                        }
                        while (*v444);
                        if (v441 == v340 || v441[4] > 1uLL || (unint64_t v445 = v441[5], v445 > 8)) {
LABEL_563:
                        }
                          double v446 = 0.0;
                        else {
                          double v446 = dbl_1DD8CEC20[v445];
                        }
                        uint64_t v447 = *(unsigned __int16 *)(v437 + 4 * (v436 & 0x3FF));
                        uint64_t v448 = *(unsigned __int16 *)(v437 + 4 * (v436 & 0x3FF) + 2) - v447 + 1;
                        *(void *)&v856.f64[0] = *(void *)(*v810
                                                            + (((unint64_t)(*v806 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                + 16 * (*(unsigned char *)v806 + 1);
                        *(void *)&v856.f64[1] = *(void *)&v446 * v447;
                        *(void *)&v857.f64[0] = *(void *)&v446 * v448;
                        *(void *)&v857.f64[1] = 1;
                        std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v849, (uint64_t)&v856);
                        uint64_t v343 = a1;
                        unint64_t v449 = *(void *)(a1 + 1072);
                        unint64_t v450 = v449 * v449;
                        float64x2_t v856 = 0uLL;
                        if (v449 * v449)
                        {
                          if (v450 >> 61) {
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          }
                          size_t v451 = 8 * v450;
                          v452 = (char *)operator new(8 * v450);
                          *(void *)&v856.f64[0] = v452;
                          bzero(v452, v451);
                          v453 = &v452[v451];
                          *(void *)&v856.f64[1] = &v452[v451];
                          uint64_t v190 = *(double **)&v778;
                        }
                        else
                        {
                          v452 = 0;
                          v453 = 0;
                        }
                        nms::rasterizeRects<double>((double **)&v851, (double *)v312, &v856, v449, 1, v332);
                        nms::rasterizeRects<double>((double **)&v849, (double *)v312, &v856, v449, 2, v332);
                        if (v452 == v453)
                        {
                          uint64_t v457 = 0;
                          uint64_t v454 = 0;
                          unint64_t v460 = 0;
                        }
                        else
                        {
                          uint64_t v454 = 0;
                          v455 = v452;
                          do
                          {
                            uint64_t v456 = *(void *)v455;
                            v455 += 8;
                            if (v456 == 1) {
                              ++v454;
                            }
                          }
                          while (v455 != v453);
                          uint64_t v457 = 0;
                          v458 = v452;
                          do
                          {
                            uint64_t v459 = *(void *)v458;
                            v458 += 8;
                            if (v459 == 2) {
                              ++v457;
                            }
                          }
                          while (v458 != v453);
                          unint64_t v460 = 0;
                          v461 = v452;
                          do
                          {
                            uint64_t v462 = *(void *)v461;
                            v461 += 8;
                            if (v462 == 3) {
                              ++v460;
                            }
                          }
                          while (v461 != v453);
                        }
                        double v463 = (double)v460;
                        unint64_t v464 = v460 + v457;
                        double v465 = (double)v460 / (double)(v464 + v454);
                        v466 = *(double **)&v837;
                        unint64_t v467 = v460 + v454;
                        if (v464 >= v467) {
                          unint64_t v468 = v467;
                        }
                        else {
                          unint64_t v468 = v464;
                        }
                        **(double **)&double v837 = v465;
                        v466[1] = v463 / (double)v468;
                        double v469 = (double)v467;
                        uint64_t v470 = (v453 - v452) >> 3;
                        v466[2] = v469 / (double)(unint64_t)v470;
                        v466[3] = (double)v464 / (double)(unint64_t)v470;
                        if (v452) {
                          operator delete(v452);
                        }
                        if (v849)
                        {
                          if (v850 != v849) {
                            v850 += ((unsigned char *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                          }
                          operator delete(v849);
                        }
                        v471 = v851;
                        if (!v851) {
                          goto LABEL_647;
                        }
                        if (v852 != v851) {
                          v852 += ((unsigned char *)v851 - v852 + 7) & 0xFFFFFFFFFFFFFFF8;
                        }
                      }
                      else
                      {
                        if (!v356) {
                          goto LABEL_647;
                        }
                        v776 = v312;
                        v364 = (void *)(v790 + 200 * v795);
                        unint64_t v365 = v364[20];
                        uint64_t v366 = v364[17];
                        unint64_t v367 = *(void *)(v366 + 8 * (v365 / 0x55)) + 48 * (v365 % 0x55);
                        unint64_t v368 = *(void *)(v367 + 32) + (unsigned __int16)v803;
                        uint64_t v800 = *(void *)(*(void *)(v367 + 8) + ((v368 >> 7) & 0x1FFFFFFFFFFFFF8));
                        uint64_t v763 = v337;
                        uint64_t v764 = v321;
                        uint64_t v369 = v321 + 200 * v337;
                        unint64_t v370 = *(void *)(v369 + 160);
                        uint64_t v762 = v369;
                        uint64_t v371 = *(void *)(v369 + 136);
                        unint64_t v372 = *(void *)(v371 + 8 * (v370 / 0x55)) + 48 * (v370 % 0x55);
                        unint64_t v773 = *(void *)(v372 + 32) + v313;
                        uint64_t v775 = *(void *)(*(void *)(v372 + 8) + ((v773 >> 7) & 0x1FFFFFFFFFFFFF8));
                        if (v358 == 5) {
                          unint64_t v373 = 4;
                        }
                        else {
                          unint64_t v373 = 5;
                        }
                        uint64_t v374 = v365 + v358;
                        unint64_t v375 = (v365 + v358) / 0x55;
                        uint64_t v376 = *(void *)(v366 + 8 * v375);
                        uint64_t v772 = v370 + v358;
                        unint64_t v771 = (v370 + v358) / 0x55;
                        uint64_t v777 = *(void *)(v371 + 8 * v771);
                        uint64_t v378 = v364[6];
                        v377 = v364 + 6;
                        size_t v379 = v377[1] * v378;
                        v852 = 0;
                        v851 = 0;
                        std::valarray<unsigned char>::resize((uint64_t)&v851, v379);
                        v380 = (unsigned __int16 *)(v800 + 4 * (v368 & 0x3FF));
                        uint64_t v769 = v374 - 85 * v375;
                        uint64_t v770 = v376;
                        uint64_t v801 = v376 + 48 * v769;
                        unint64_t v381 = *v380;
                        v761 = v380;
                        unsigned __int16 v382 = v380[1];
                        v787 = v380 + 1;
                        if (v381 <= v382)
                        {
                          v797 = (void *)(v376 + 48 * v769 + 32);
                          do
                          {
                            v383 = (unsigned __int16 *)(*(void *)(*(void *)(v801 + 8)
                                                                  + (((*v797 + v381) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                      + 4 * ((*v797 + v381) & 0x3FF));
                            unint64_t v384 = *v383;
                            unsigned int v386 = v383[1];
                            v385 = v383 + 1;
                            if (v384 <= v386)
                            {
                              do
                              {
                                v387 = (void *)*v325;
                                if (!*v325) {
                                  goto LABEL_475;
                                }
                                v388 = v325;
                                do
                                {
                                  unint64_t v389 = v387[4];
                                  BOOL v390 = v389 >= v373;
                                  if (v389 >= v373) {
                                    v391 = v387;
                                  }
                                  else {
                                    v391 = v387 + 1;
                                  }
                                  if (v390) {
                                    v388 = v387;
                                  }
                                  v387 = (void *)*v391;
                                }
                                while (*v391);
                                if (v388 == v325 || v388[4] > v373 || (unint64_t v392 = v388[5], v392 > 8)) {
LABEL_475:
                                }
                                  float64_t v393 = 0.0;
                                else {
                                  float64_t v393 = dbl_1DD8CEC20[v392];
                                }
                                *(void *)&v856.f64[0] = *(void *)(*v335
                                                                    + (((*v813 + v373) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                        + 16 * (*(unsigned char *)v813 + v373);
                                *(void *)&v856.f64[1] = *(void *)&v393 * v384;
                                v857.f64[0] = v393;
                                *(void *)&v857.f64[1] = 1;
                                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v849, (uint64_t)&v856);
                                nms::rasterizeQuadByQuantizedScoreMap<double>((double **)&v849, &v851, (void *)(v790 + 200 * v795 + 64), *v377, v377[1], 1u, 0);
                                if (v849)
                                {
                                  if (v850 != v849) {
                                    v850 += ((unsigned char *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                                  }
                                  operator delete(v849);
                                }
                                BOOL v354 = v384++ >= *v385;
                              }
                              while (!v354);
                              unsigned __int16 v382 = *v787;
                            }
                            BOOL v354 = v381++ >= v382;
                          }
                          while (!v354);
                        }
                        uint64_t v788 = v772 - 85 * v771;
                        uint64_t v798 = v777 + 48 * v788;
                        v774 = (unsigned __int16 *)(v775 + 4 * (v773 & 0x3FF));
                        unint64_t v394 = *v774;
                        unsigned __int16 v395 = v774[1];
                        if (v394 <= v395)
                        {
                          uint64_t v396 = v764 + 200 * v763;
                          v397 = (void *)(v396 + 64);
                          v398 = (unint64_t *)(v396 + 56);
                          do
                          {
                            v399 = (unsigned __int16 *)(*(void *)(*(void *)(v798 + 8)
                                                                  + (((*(void *)(v777 + 48 * v788 + 32) + v394) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                      + 4 * ((*(void *)(v777 + 48 * v788 + 32) + v394) & 0x3FF));
                            unint64_t v400 = *v399;
                            unsigned int v402 = v399[1];
                            v401 = v399 + 1;
                            if (v400 <= v402)
                            {
                              do
                              {
                                v403 = (void *)*v340;
                                if (!*v340) {
                                  goto LABEL_501;
                                }
                                v404 = v340;
                                do
                                {
                                  unint64_t v405 = v403[4];
                                  BOOL v406 = v405 >= v373;
                                  if (v405 >= v373) {
                                    v407 = v403;
                                  }
                                  else {
                                    v407 = v403 + 1;
                                  }
                                  if (v406) {
                                    v404 = v403;
                                  }
                                  v403 = (void *)*v407;
                                }
                                while (*v407);
                                if (v404 == v340 || v404[4] > v373 || (unint64_t v408 = v404[5], v408 > 8)) {
LABEL_501:
                                }
                                  float64_t v409 = 0.0;
                                else {
                                  float64_t v409 = dbl_1DD8CEC20[v408];
                                }
                                *(void *)&v856.f64[0] = *(void *)(*v810
                                                                    + (((*v806 + v373) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                        + 16 * (*(unsigned char *)v806 + v373);
                                *(void *)&v856.f64[1] = *(void *)&v409 * v400;
                                v857.f64[0] = v409;
                                *(void *)&v857.f64[1] = 1;
                                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v849, (uint64_t)&v856);
                                nms::rasterizeQuadByQuantizedScoreMap<double>((double **)&v849, &v851, v397, *(void *)(v762 + 48), *v398, 2u, 0);
                                if (v849)
                                {
                                  if (v850 != v849) {
                                    v850 += ((unsigned char *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                                  }
                                  operator delete(v849);
                                }
                                BOOL v354 = v400++ >= *v401;
                              }
                              while (!v354);
                              unsigned __int16 v395 = v774[1];
                            }
                            BOOL v354 = v394++ >= v395;
                          }
                          while (!v354);
                        }
                        v410 = v851;
                        v411 = v852;
                        if (v851 == v852)
                        {
                          uint64_t v415 = 0;
                          uint64_t v412 = 0;
                          unint64_t v418 = 0;
                          uint64_t v343 = a1;
                          uint64_t v190 = *(double **)&v778;
                          v312 = v776;
                        }
                        else
                        {
                          uint64_t v412 = 0;
                          v413 = (unsigned __int8 *)v851;
                          uint64_t v343 = a1;
                          uint64_t v190 = *(double **)&v778;
                          v312 = v776;
                          do
                          {
                            int v414 = *v413++;
                            if (v414 == 1) {
                              ++v412;
                            }
                          }
                          while (v413 != v852);
                          uint64_t v415 = 0;
                          v416 = (unsigned __int8 *)v851;
                          do
                          {
                            int v417 = *v416++;
                            if (v417 == 2) {
                              ++v415;
                            }
                          }
                          while (v416 != v852);
                          unint64_t v418 = 0;
                          v419 = (unsigned __int8 *)v851;
                          do
                          {
                            int v420 = *v419++;
                            if (v420 == 3) {
                              ++v418;
                            }
                          }
                          while (v419 != v852);
                        }
                        double v472 = (double)v418;
                        unint64_t v473 = v418 + v415;
                        double v474 = (double)v418 / (double)(v473 + v412);
                        v475 = *(double **)&v837;
                        unint64_t v476 = v418 + v412;
                        if (v473 >= v476) {
                          unint64_t v477 = v476;
                        }
                        else {
                          unint64_t v477 = v473;
                        }
                        **(double **)&double v837 = v474;
                        v475[1] = v472 / (double)v477;
                        unint64_t v478 = v411 - v410;
                        v475[2] = (double)v476 / (double)v478;
                        v475[3] = (double)v473 / (double)v478;
                        if (*(double *)(v343 + 1056) > 0.0)
                        {
                          v479 = (void *)*v325;
                          if (!*v325) {
                            goto LABEL_615;
                          }
                          v480 = v325;
                          do
                          {
                            unint64_t v481 = v479[4];
                            BOOL v482 = v481 >= v373;
                            if (v481 >= v373) {
                              v483 = v479;
                            }
                            else {
                              v483 = v479 + 1;
                            }
                            if (v482) {
                              v480 = v479;
                            }
                            v479 = (void *)*v483;
                          }
                          while (*v483);
                          if (v480 == v325)
                          {
LABEL_615:
                            float64_t v486 = 0.0;
                            uint64_t v484 = v770;
                          }
                          else
                          {
                            uint64_t v484 = v770;
                            if (v480[4] > v373 || (unint64_t v485 = v480[5], v485 > 8)) {
                              float64_t v486 = 0.0;
                            }
                            else {
                              float64_t v486 = dbl_1DD8CEC20[v485];
                            }
                          }
                          unint64_t v487 = *(void *)(v484 + 48 * v769 + 32) + *v761;
                          uint64_t v488 = *(void *)&v486
                               * *(unsigned __int16 *)(*(void *)(*(void *)(v801 + 8)
                                                                 + ((v487 >> 7) & 0x1FFFFFFFFFFFFF8))
                                                     + 4 * (v487 & 0x3FF));
                          *(void *)&v856.f64[0] = *(void *)(*v335 + (((*v813 + v373) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                  + 16 * (*(unsigned char *)v813 + v373);
                          *(void *)&v856.f64[1] = v488;
                          v857.f64[0] = v486;
                          *(void *)&v857.f64[1] = 1;
                          std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v849, (uint64_t)&v856);
                          v489 = (void *)*v340;
                          if (!*v340) {
                            goto LABEL_631;
                          }
                          v490 = v340;
                          do
                          {
                            unint64_t v491 = v489[4];
                            BOOL v492 = v491 >= v373;
                            if (v491 >= v373) {
                              v493 = v489;
                            }
                            else {
                              v493 = v489 + 1;
                            }
                            if (v492) {
                              v490 = v489;
                            }
                            v489 = (void *)*v493;
                          }
                          while (*v493);
                          if (v490 == v340)
                          {
LABEL_631:
                            float64_t v496 = 0.0;
                            v494 = v774;
                          }
                          else
                          {
                            v494 = v774;
                            if (v490[4] > v373 || (unint64_t v495 = v490[5], v495 > 8)) {
                              float64_t v496 = 0.0;
                            }
                            else {
                              float64_t v496 = dbl_1DD8CEC20[v495];
                            }
                          }
                          unint64_t v497 = *(void *)(v777 + 48 * v788 + 32) + *v494;
                          uint64_t v498 = *(void *)&v496
                               * *(unsigned __int16 *)(*(void *)(*(void *)(v798 + 8)
                                                                 + ((v497 >> 7) & 0x1FFFFFFFFFFFFF8))
                                                     + 4 * (v497 & 0x3FF));
                          *(void *)&v856.f64[0] = *(void *)(*v810 + (((*v806 + v373) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                  + 16 * (*(unsigned char *)v806 + v373);
                          *(void *)&v856.f64[1] = v498;
                          v857.f64[0] = v496;
                          *(void *)&v857.f64[1] = 1;
                          std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v847, (uint64_t)&v856);
                          float64x2_t v499 = vsubq_f64(*(float64x2_t *)v849, *((float64x2_t *)v849 + 3));
                          int64x2_t v500 = (int64x2_t)vmulq_f64(v499, v499);
                          v501 = v847;
                          v502 = v848;
                          float64x2_t v503 = vsubq_f64(*(float64x2_t *)v847, *((float64x2_t *)v847 + 3));
                          int64x2_t v504 = (int64x2_t)vmulq_f64(v503, v503);
                          float64x2_t v505 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v500, v504), (float64x2_t)vzip2q_s64(v500, v504)));
                          if (v505.f64[1] >= v505.f64[0]) {
                            double v506 = v505.f64[0];
                          }
                          else {
                            double v506 = v505.f64[1];
                          }
                          if (v505.f64[0] < v505.f64[1]) {
                            v505.f64[0] = v505.f64[1];
                          }
                          v475[4] = v506 / v505.f64[0];
                          if (v502 != v501) {
                            v848 = &v502[(v501 - v502 + 7) & 0xFFFFFFFFFFFFFFF8];
                          }
                          operator delete(v501);
                          if (v849)
                          {
                            if (v850 != v849) {
                              v850 += ((unsigned char *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                            }
                            operator delete(v849);
                          }
                        }
                        if (!v410) {
                          goto LABEL_647;
                        }
                        v471 = v410;
                      }
                      operator delete(v471);
                    }
LABEL_647:
                    unint64_t v191 = v786;
                    if (v853)
                    {
                      if (v854 != (char *)v853) {
                        v854 += ((char *)v853 - v854 + 7) & 0xFFFFFFFFFFFFFFF8;
                      }
                      operator delete(v853);
                    }
                    if ((void)v855)
                    {
                      if (*((void *)&v855 + 1) != (void)v855) {
                        *((void *)&v855 + 1) += (v855 - *((void *)&v855 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                      }
                      operator delete((void *)v855);
                    }
                    v507 = *(double **)&v837;
                    double v508 = **(double **)&v837;
                    if (**(double **)&v837 <= v17 || *(double *)(*(void *)&v837 + 8) <= v18)
                    {
                      if (v508 <= v19
                        && *(double *)(*(void *)&v837 + 8) > v20
                        && (double v517 = *(double *)(*(void *)&v837 + 24), *(double *)(*(void *)&v837 + 16) >= v517))
                      {
                        if (v508 < *(double *)(v343 + 1080) && v517 < *(double *)(v343 + 1088))
                        {
                          v541 = *(void **)(v343 + 968);
                          if (v541[5] <= v786) {
LABEL_974:
                          }
                            std::__throw_out_of_range[abi:ne180100]("deque");
                          unint64_t v542 = v541[4] + v786;
                          uint64_t v543 = *(void *)(v541[1] + 8 * (v542 / 0x14));
                          unint64_t v544 = v542 % 0x14;
                          uint64_t v545 = v543 + 200 * v544;
                          v548 = *(void **)(v545 + 184);
                          v546 = (void *)(v545 + 184);
                          v547 = v548;
                          if (!v548) {
                            goto LABEL_691;
                          }
                          do
                          {
                            v549 = v547;
                            v547 = (void *)*v547;
                          }
                          while (v547);
                          if (v549 == v546 || v549[4] || (unint64_t v550 = v549[5], v550 > 8)) {
LABEL_691:
                          }
                            double v551 = 0.0;
                          else {
                            double v551 = dbl_1DD8CEC20[v550];
                          }
                          v552 = (void *)(*(void *)(*(void *)(v543 + 200 * v544 + 88)
                                                      + ((*(void *)(v543 + 200 * v544 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(void *)(v543 + 200 * v544 + 112));
                          unint64_t v553 = *(void *)&v551 * v803 + 4;
                          v555 = v552;
                          uint64_t v554 = *v552;
                          if (v553 < (v555[1] - v554) >> 3) {
                            *(void *)(v554 + 8 * v553) = 0;
                          }
                        }
                        double v556 = *(double *)(v343 + 1056);
                        if (v556 <= 0.0 || v507[4] <= v556)
                        {
                          uint64_t v557 = *(void *)(*(void *)(*(void *)(v343 + 688)
                                                       + (((*(void *)(v343 + 712) + v786) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*(unsigned char *)(v343 + 712) + v786));
                          ++*(unsigned char *)(v557 + v803);
                          unint64_t v558 = *(void *)(*(void *)(v343 + 736) + 8 * ((*(void *)(v343 + 760) + v786) / 0x55))
                               + 48 * ((*(void *)(v343 + 760) + v786) % 0x55);
                          unint64_t v559 = *(void *)(*(void *)(v558 + 8) + 8 * ((*(void *)(v558 + 32) + v789) / 0x55))
                               + 48 * ((*(void *)(v558 + 32) + v789) % 0x55);
                          std::deque<unsigned short>::push_back((void *)(*(void *)(*(void *)(v559 + 8) + 8 * ((*(void *)(v559 + 32) + v803) / 0x55))+ 48 * ((*(void *)(v559 + 32) + v803) % 0x55)), v816);
                          uint64_t v560 = LOWORD(v816[0]);
                          uint64_t v561 = *(void *)(*(void *)(*(void *)(a1 + 784)
                                                       + (((*(void *)(a1 + 808) + v789) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*(unsigned char *)(a1 + 808) + v789));
                          ++*(unsigned char *)(v561 + LOWORD(v816[0]));
                          unint64_t v562 = *(void *)(*(void *)(a1 + 832) + 8 * ((*(void *)(a1 + 856) + v789) / 0x55))
                               + 48 * ((*(void *)(a1 + 856) + v789) % 0x55);
                          unint64_t v563 = *(void *)(*(void *)(v562 + 8) + 8 * ((*(void *)(v562 + 32) + v786) / 0x55))
                               + 48 * ((*(void *)(v562 + 32) + v786) % 0x55);
                          v564 = (void *)(*(void *)(*(void *)(v563 + 8)
                                                      + 8 * ((*(void *)(v563 + 32) + v560) / 0x55uLL))
                                          + 48 * ((*(void *)(v563 + 32) + v560) % 0x55uLL));
                          LOWORD(v856.f64[0]) = v803;
                          std::deque<unsigned short>::push_back(v564, &v856);
                        }
                      }
                      else if (v508 > v780 {
                             || *(double *)(*(void *)&v837 + 8) <= v768
                      }
                             || (double v518 = *(double *)(*(void *)&v837 + 16),
                                 v518 >= *(double *)(*(void *)&v837 + 24)))
                      {
                        BOOL v530 = v508 <= v21 || v508 > v22;
                        if (!v530)
                        {
                          double v531 = *(double *)(*(void *)&v837 + 8);
                          if (v531 > v23 && v531 <= v24)
                          {
                            uint64_t v533 = *(void *)(*(void *)(*(void *)(v343 + 880)
                                                         + (((*(void *)(v343 + 904) + v786) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (*(unsigned char *)(v343 + 904) + v786));
                            ++*(unsigned char *)(v533 + v803);
                            unint64_t v534 = *(void *)(*(void *)(v343 + 928) + 8 * ((*(void *)(v343 + 952) + v786) / 0x55))
                                 + 48 * ((*(void *)(v343 + 952) + v786) % 0x55);
                            unint64_t v535 = *(void *)(*(void *)(v534 + 8) + 8 * ((*(void *)(v534 + 32) + v789) / 0x55))
                                 + 48 * ((*(void *)(v534 + 32) + v789) % 0x55);
                            std::deque<unsigned short>::push_back((void *)(*(void *)(*(void *)(v535 + 8) + 8* ((*(void *)(v535 + 32) + v803)/ 0x55))+ 48 * ((*(void *)(v535 + 32) + v803) % 0x55)), v816);
                            uint64_t v536 = LOWORD(v816[0]);
                            uint64_t v537 = *(void *)(*(void *)(*(void *)(a1 + 880)
                                                         + (((*(void *)(a1 + 904) + v789) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (*(unsigned char *)(a1 + 904) + v789));
                            ++*(unsigned char *)(v537 + LOWORD(v816[0]));
                            unint64_t v538 = *(void *)(*(void *)(a1 + 928) + 8 * ((*(void *)(a1 + 952) + v789) / 0x55))
                                 + 48 * ((*(void *)(a1 + 952) + v789) % 0x55);
                            unint64_t v539 = *(void *)(*(void *)(v538 + 8) + 8 * ((*(void *)(v538 + 32) + v786) / 0x55))
                                 + 48 * ((*(void *)(v538 + 32) + v786) % 0x55);
                            v540 = (void *)(*(void *)(*(void *)(v539 + 8)
                                                        + 8 * ((*(void *)(v539 + 32) + v536) / 0x55uLL))
                                            + 48 * ((*(void *)(v539 + 32) + v536) % 0x55uLL));
                            LOWORD(v856.f64[0]) = v803;
                            std::deque<unsigned short>::push_back(v540, &v856);
                          }
                        }
                      }
                      else
                      {
                        if (v508 < *(double *)(v343 + 1080) && v518 < *(double *)(v343 + 1088))
                        {
                          v519 = *(void **)(v343 + 968);
                          if (v519[5] <= v786) {
                            goto LABEL_974;
                          }
                          unint64_t v520 = v519[4] + v786;
                          uint64_t v521 = *(void *)(v519[1] + 8 * (v520 / 0x14));
                          unint64_t v522 = v520 % 0x14;
                          uint64_t v523 = v521 + 200 * v522;
                          v526 = *(void **)(v523 + 184);
                          v524 = (void *)(v523 + 184);
                          v525 = v526;
                          if (!v526) {
                            goto LABEL_697;
                          }
                          do
                          {
                            v527 = v525;
                            v525 = (void *)*v525;
                          }
                          while (v525);
                          if (v527 == v524 || v527[4] || (unint64_t v528 = v527[5], v528 > 8)) {
LABEL_697:
                          }
                            double v529 = 0.0;
                          else {
                            double v529 = dbl_1DD8CEC20[v528];
                          }
                          v565 = (void *)(*(void *)(*(void *)(v521 + 200 * v522 + 88)
                                                      + ((*(void *)(v521 + 200 * v522 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(void *)(v521 + 200 * v522 + 112));
                          unint64_t v566 = *(void *)&v529 * v803 + 4;
                          v568 = v565;
                          uint64_t v567 = *v565;
                          if (v566 < (v568[1] - v567) >> 3) {
                            *(void *)(v567 + 8 * v566) = 0;
                          }
                        }
                        uint64_t v569 = *(void *)(*(void *)(*(void *)(v343 + 784)
                                                     + (((*(void *)(v343 + 808) + v786) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*(unsigned char *)(v343 + 808) + v786));
                        ++*(unsigned char *)(v569 + v803);
                        unint64_t v570 = *(void *)(*(void *)(v343 + 832) + 8 * ((*(void *)(v343 + 856) + v786) / 0x55))
                             + 48 * ((*(void *)(v343 + 856) + v786) % 0x55);
                        unint64_t v571 = *(void *)(*(void *)(v570 + 8) + 8 * ((*(void *)(v570 + 32) + v789) / 0x55))
                             + 48 * ((*(void *)(v570 + 32) + v789) % 0x55);
                        std::deque<unsigned short>::push_back((void *)(*(void *)(*(void *)(v571 + 8) + 8 * ((*(void *)(v571 + 32) + v803) / 0x55))+ 48 * ((*(void *)(v571 + 32) + v803) % 0x55)), v816);
                        uint64_t v572 = LOWORD(v816[0]);
                        uint64_t v573 = *(void *)(*(void *)(*(void *)(a1 + 688)
                                                     + (((*(void *)(a1 + 712) + v789) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*(unsigned char *)(a1 + 712) + v789));
                        ++*(unsigned char *)(v573 + LOWORD(v816[0]));
                        unint64_t v574 = *(void *)(*(void *)(a1 + 736) + 8 * ((*(void *)(a1 + 760) + v789) / 0x55))
                             + 48 * ((*(void *)(a1 + 760) + v789) % 0x55);
                        unint64_t v575 = *(void *)(*(void *)(v574 + 8) + 8 * ((*(void *)(v574 + 32) + v786) / 0x55))
                             + 48 * ((*(void *)(v574 + 32) + v786) % 0x55);
                        v576 = (void *)(*(void *)(*(void *)(v575 + 8)
                                                    + 8 * ((*(void *)(v575 + 32) + v572) / 0x55uLL))
                                        + 48 * ((*(void *)(v575 + 32) + v572) % 0x55uLL));
                        LOWORD(v856.f64[0]) = v803;
                        std::deque<unsigned short>::push_back(v576, &v856);
                      }
                    }
                    else
                    {
                      uint64_t v509 = *(void *)(*(void *)(*(void *)(v343 + 592)
                                                   + (((*(void *)(v343 + 616) + v786) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(unsigned char *)(v343 + 616) + v786));
                      ++*(unsigned char *)(v509 + v803);
                      unint64_t v510 = *(void *)(*(void *)(v343 + 640) + 8 * ((*(void *)(v343 + 664) + v786) / 0x55))
                           + 48 * ((*(void *)(v343 + 664) + v786) % 0x55);
                      unint64_t v511 = *(void *)(*(void *)(v510 + 8) + 8 * ((*(void *)(v510 + 32) + v789) / 0x55))
                           + 48 * ((*(void *)(v510 + 32) + v789) % 0x55);
                      std::deque<unsigned short>::push_back((void *)(*(void *)(*(void *)(v511 + 8) + 8 * ((*(void *)(v511 + 32) + v803) / 0x55))+ 48 * ((*(void *)(v511 + 32) + v803) % 0x55)), v816);
                      uint64_t v512 = LOWORD(v816[0]);
                      uint64_t v513 = *(void *)(*(void *)(*(void *)(a1 + 592)
                                                   + (((*(void *)(a1 + 616) + v789) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(unsigned char *)(a1 + 616) + v789));
                      ++*(unsigned char *)(v513 + LOWORD(v816[0]));
                      unint64_t v514 = *(void *)(*(void *)(a1 + 640) + 8 * ((*(void *)(a1 + 664) + v789) / 0x55))
                           + 48 * ((*(void *)(a1 + 664) + v789) % 0x55);
                      unint64_t v515 = *(void *)(*(void *)(v514 + 8) + 8 * ((*(void *)(v514 + 32) + v786) / 0x55))
                           + 48 * ((*(void *)(v514 + 32) + v786) % 0x55);
                      v516 = (void *)(*(void *)(*(void *)(v515 + 8)
                                                  + 8 * ((*(void *)(v515 + 32) + v512) / 0x55uLL))
                                      + 48 * ((*(void *)(v515 + 32) + v512) % 0x55uLL));
                      LOWORD(v856.f64[0]) = v803;
                      std::deque<unsigned short>::push_back(v516, &v856);
                    }
                    v310 = v792;
                    v311 = v791 + 1;
                    if ((_WORD *)((char *)v791 - *v792 + 2) == (_WORD *)4096)
                    {
                      v310 = v792 + 1;
                      v311 = (_WORD *)v792[1];
                    }
                    unint64_t v193 = v781;
                    if (v311 == (_WORD *)v785)
                    {
                      if (v312) {
                        operator delete(v312);
                      }
                      operator delete(v507);
                      uint64_t v194 = a1;
                      unint64_t v195 = v789;
                      goto LABEL_713;
                    }
                  }
                  BOOL v356 = 0;
                  LODWORD(v357) = 1;
LABEL_439:
                  uint64_t v358 = 6;
                  goto LABEL_440;
                }
              }
            }
LABEL_713:
            std::deque<unsigned short>::~deque[abi:ne180100](v823);
            if (v839)
            {
              if (v840 != v839) {
                v840 += ((unsigned char *)v839 - v840 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              operator delete(v839);
            }
            if (v841)
            {
              if (v842 != v841) {
                v842 += ((unsigned char *)v841 - v842 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              operator delete(v841);
            }
LABEL_721:
            if (++v803 == v760) {
              goto LABEL_852;
            }
          }
          float64x2_t v856 = 0uLL;
          if (!v190) {
            goto LABEL_220;
          }
LABEL_219:
          operator delete(v190);
          goto LABEL_220;
        }
      }
      else
      {
        unint64_t v196 = v783;
      }
LABEL_855:
      ++v191;
    }
    while (v191 != v196);
    v779 = v190;
    if (v783 >= 2 && (a3 & 1) == 0)
    {
      for (uint64_t k = 1; k != v783; ++k)
      {
        uint64_t v629 = 0;
        uint64_t v811 = *(void *)(*(void *)(*((void *)&v835[0] + 1)
                                     + (((unint64_t)(v836 + k) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v836 + k) & 0x1FF));
        do
        {
          if (v811)
          {
            uint64_t v630 = 0;
            while (2)
            {
              unint64_t v631 = *(void *)(*(void *)(a1 + 640) + 8 * ((*(void *)(a1 + 664) + k) / 0x55uLL))
                   + 48 * ((*(void *)(a1 + 664) + k) % 0x55uLL);
              unint64_t v632 = *(void *)(*(void *)(v631 + 8) + 8 * ((*(void *)(v631 + 32) + v629) / 0x55uLL))
                   + 48 * ((*(void *)(v631 + 32) + v629) % 0x55uLL);
              unint64_t v633 = *(void *)(*(void *)(v632 + 8) + 8 * ((*(void *)(v632 + 32) + v630) / 0x55uLL))
                   + 48 * ((*(void *)(v632 + 32) + v630) % 0x55uLL);
              uint64_t v635 = *(void *)(v633 + 40);
              v634 = (void *)(v633 + 40);
              if (!v635) {
                goto LABEL_946;
              }
              unint64_t v636 = *(void *)(*(void *)(a1 + 736) + 8 * ((*(void *)(a1 + 760) + k) / 0x55uLL))
                   + 48 * ((*(void *)(a1 + 760) + k) % 0x55uLL);
              unint64_t v637 = *(void *)(*(void *)(v636 + 8) + 8 * ((*(void *)(v636 + 32) + v629) / 0x55uLL))
                   + 48 * ((*(void *)(v636 + 32) + v629) % 0x55uLL);
              unint64_t v638 = *(void *)(v637 + 32) + v630;
              uint64_t v639 = *(void *)(*(void *)(v637 + 8) + 8 * (v638 / 0x55));
              unint64_t v640 = v638 % 0x55;
              uint64_t v641 = v639 + 48 * v640;
              uint64_t v644 = *(void *)(v641 + 40);
              v643 = (uint64_t *)(v641 + 40);
              uint64_t v642 = v644;
              v814 = v634;
              if (v644)
              {
                v807 = v643;
                v645 = (void *)(v639 + 48 * v640);
                v646 = v645 + 4;
                uint64_t v647 = v645[1];
                if (v645[2] != v647)
                {
                  v648 = (void *)(v647 + 8 * (*v646 >> 11));
                  v649 = (unsigned __int16 *)(*v648 + 2 * (*v646 & 0x7FFLL));
                  uint64_t v650 = *(void *)(v647 + (((unint64_t)(*v646 + v642) >> 8) & 0xFFFFFFFFFFFFF8))
                       + 2 * ((*v646 + v642) & 0x7FF);
                  if (v649 != (unsigned __int16 *)v650)
                  {
                    do
                    {
                      uint64_t v651 = *v649;
                      uint64_t v652 = *(void *)(*(void *)(*(void *)(a1 + 784)
                                                   + (((unint64_t)(*(void *)(a1 + 808) + v629) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(unsigned char *)(a1 + 808) + v629));
                      --*(unsigned char *)(v652 + v651);
                      unint64_t v653 = *(void *)(*(void *)(a1 + 832) + 8 * ((*(void *)(a1 + 856) + v629) / 0x55uLL))
                           + 48 * ((*(void *)(a1 + 856) + v629) % 0x55uLL);
                      unint64_t v654 = *(void *)(*(void *)(v653 + 8) + 8 * ((*(void *)(v653 + 32) + k) / 0x55uLL))
                           + 48 * ((*(void *)(v653 + 32) + k) % 0x55uLL);
                      unint64_t v655 = *(void *)(v654 + 32) + v651;
                      uint64_t v656 = *(void *)(*(void *)(v654 + 8) + 8 * (v655 / 0x55));
                      unint64_t v657 = v655 % 0x55;
                      v658 = (int64x2_t *)(v656 + 48 * (v655 % 0x55));
                      unint64_t v659 = v658[2].u64[0];
                      uint64_t v660 = v658->i64[1];
                      uint64_t v661 = v658[1].i64[0];
                      unint64_t v662 = v660 + 8 * (v659 >> 11);
                      if (v661 == v660) {
                        uint64_t v663 = 0;
                      }
                      else {
                        uint64_t v663 = *(void *)v662 + 2 * (v658[2].i64[0] & 0x7FF);
                      }
                      v664 = (void *)(v656 + 48 * v657 + 40);
LABEL_870:
                      v665 = (unsigned __int16 *)v663;
                      while (1)
                      {
                        uint64_t v666 = v661 == v660
                             ? 0
                             : *(void *)(v660 + (((*v664 + v659) >> 8) & 0xFFFFFFFFFFFFF8))
                             + 2 * ((*v664 + v659) & 0x7FF);
                        if (v665 == (unsigned __int16 *)v666) {
                          break;
                        }
                        if (v630 == *v665)
                        {
                          std::deque<unsigned short>::erase(v658, (char *)v662, v663);
                          break;
                        }
                        ++v665;
                        v663 += 2;
                        if (*(void *)v662 + 4096 == v663)
                        {
                          uint64_t v667 = *(void *)(v662 + 8);
                          v662 += 8;
                          uint64_t v663 = v667;
                          goto LABEL_870;
                        }
                      }
                      if ((unsigned __int16 *)((char *)++v649 - *v648) == (unsigned __int16 *)4096)
                      {
                        v668 = (unsigned __int16 *)v648[1];
                        ++v648;
                        v649 = v668;
                      }
                    }
                    while (v649 != (unsigned __int16 *)v650);
                    uint64_t v642 = *v807;
                  }
                }
                uint64_t v669 = *(void *)(*(void *)(*(void *)(a1 + 688)
                                             + (((unint64_t)(*(void *)(a1 + 712) + k) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(a1 + 712) + k));
                *(unsigned char *)(v669 + v630) -= v642;
                v670 = (void **)v645[1];
                uint64_t v671 = v645[2];
                uint64_t *v807 = 0;
                unint64_t v672 = v671 - (void)v670;
                if (v672 >= 0x11)
                {
                  do
                  {
                    operator delete(*v670);
                    uint64_t v673 = v645[2];
                    v670 = (void **)(v645[1] + 8);
                    v645[1] = v670;
                    unint64_t v672 = v673 - (void)v670;
                  }
                  while (v672 > 0x10);
                }
                if (v672 >> 3 == 1)
                {
                  uint64_t v674 = 1024;
                  v634 = v814;
LABEL_889:
                  v645[4] = v674;
                }
                else
                {
                  v634 = v814;
                  if (v672 >> 3 == 2)
                  {
                    uint64_t v674 = 2048;
                    goto LABEL_889;
                  }
                }
              }
              if (!*v634) {
                goto LABEL_946;
              }
              unint64_t v675 = *(void *)(*(void *)(a1 + 832) + 8 * ((*(void *)(a1 + 856) + k) / 0x55uLL))
                   + 48 * ((*(void *)(a1 + 856) + k) % 0x55uLL);
              unint64_t v676 = *(void *)(*(void *)(v675 + 8) + 8 * ((*(void *)(v675 + 32) + v629) / 0x55uLL))
                   + 48 * ((*(void *)(v675 + 32) + v629) % 0x55uLL);
              unint64_t v677 = *(void *)(v676 + 32) + v630;
              uint64_t v678 = *(void *)(*(void *)(v676 + 8) + 8 * (v677 / 0x55));
              unint64_t v679 = v677 % 0x55;
              uint64_t v680 = v678 + 48 * v679;
              uint64_t v683 = *(void *)(v680 + 40);
              v682 = (uint64_t *)(v680 + 40);
              uint64_t v681 = v683;
              if (v683)
              {
                v808 = v682;
                v684 = (void *)(v678 + 48 * v679);
                v685 = v684 + 4;
                uint64_t v686 = v684[1];
                if (v684[2] != v686)
                {
                  v687 = (void *)(v686 + 8 * (*v685 >> 11));
                  v688 = (unsigned __int16 *)(*v687 + 2 * (*v685 & 0x7FFLL));
                  uint64_t v689 = *(void *)(v686 + (((unint64_t)(*v685 + v681) >> 8) & 0xFFFFFFFFFFFFF8))
                       + 2 * ((*v685 + v681) & 0x7FF);
                  if (v688 != (unsigned __int16 *)v689)
                  {
                    do
                    {
                      uint64_t v690 = *v688;
                      uint64_t v691 = *(void *)(*(void *)(*(void *)(a1 + 688)
                                                   + (((unint64_t)(*(void *)(a1 + 712) + v629) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(unsigned char *)(a1 + 712) + v629));
                      --*(unsigned char *)(v691 + v690);
                      unint64_t v692 = *(void *)(*(void *)(a1 + 736) + 8 * ((*(void *)(a1 + 760) + v629) / 0x55uLL))
                           + 48 * ((*(void *)(a1 + 760) + v629) % 0x55uLL);
                      unint64_t v693 = *(void *)(*(void *)(v692 + 8) + 8 * ((*(void *)(v692 + 32) + k) / 0x55uLL))
                           + 48 * ((*(void *)(v692 + 32) + k) % 0x55uLL);
                      unint64_t v694 = *(void *)(v693 + 32) + v690;
                      uint64_t v695 = *(void *)(*(void *)(v693 + 8) + 8 * (v694 / 0x55));
                      unint64_t v696 = v694 % 0x55;
                      v697 = (int64x2_t *)(v695 + 48 * (v694 % 0x55));
                      unint64_t v698 = v697[2].u64[0];
                      uint64_t v699 = v697->i64[1];
                      uint64_t v700 = v697[1].i64[0];
                      unint64_t v701 = v699 + 8 * (v698 >> 11);
                      if (v700 == v699) {
                        uint64_t v702 = 0;
                      }
                      else {
                        uint64_t v702 = *(void *)v701 + 2 * (v697[2].i64[0] & 0x7FF);
                      }
                      v703 = (void *)(v695 + 48 * v696 + 40);
LABEL_898:
                      v704 = (unsigned __int16 *)v702;
                      while (1)
                      {
                        uint64_t v705 = v700 == v699
                             ? 0
                             : *(void *)(v699 + (((*v703 + v698) >> 8) & 0xFFFFFFFFFFFFF8))
                             + 2 * ((*v703 + v698) & 0x7FF);
                        if (v704 == (unsigned __int16 *)v705) {
                          break;
                        }
                        if (v630 == *v704)
                        {
                          std::deque<unsigned short>::erase(v697, (char *)v701, v702);
                          break;
                        }
                        ++v704;
                        v702 += 2;
                        if (*(void *)v701 + 4096 == v702)
                        {
                          uint64_t v706 = *(void *)(v701 + 8);
                          v701 += 8;
                          uint64_t v702 = v706;
                          goto LABEL_898;
                        }
                      }
                      if ((unsigned __int16 *)((char *)++v688 - *v687) == (unsigned __int16 *)4096)
                      {
                        v707 = (unsigned __int16 *)v687[1];
                        ++v687;
                        v688 = v707;
                      }
                    }
                    while (v688 != (unsigned __int16 *)v689);
                    uint64_t v681 = *v808;
                  }
                }
                uint64_t v708 = *(void *)(*(void *)(*(void *)(a1 + 784)
                                             + (((unint64_t)(*(void *)(a1 + 808) + k) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(a1 + 808) + k));
                *(unsigned char *)(v708 + v630) -= v681;
                v709 = (void **)v684[1];
                uint64_t v710 = v684[2];
                uint64_t *v808 = 0;
                unint64_t v711 = v710 - (void)v709;
                if (v711 >= 0x11)
                {
                  do
                  {
                    operator delete(*v709);
                    uint64_t v712 = v684[2];
                    v709 = (void **)(v684[1] + 8);
                    v684[1] = v709;
                    unint64_t v711 = v712 - (void)v709;
                  }
                  while (v711 > 0x10);
                }
                if (v711 >> 3 == 1)
                {
                  uint64_t v713 = 1024;
                  v634 = v814;
LABEL_917:
                  v684[4] = v713;
                }
                else
                {
                  v634 = v814;
                  if (v711 >> 3 == 2)
                  {
                    uint64_t v713 = 2048;
                    goto LABEL_917;
                  }
                }
              }
              if (!*v634) {
                goto LABEL_946;
              }
              unint64_t v714 = *(void *)(*(void *)(a1 + 928) + 8 * ((*(void *)(a1 + 952) + k) / 0x55uLL))
                   + 48 * ((*(void *)(a1 + 952) + k) % 0x55uLL);
              unint64_t v715 = *(void *)(*(void *)(v714 + 8) + 8 * ((*(void *)(v714 + 32) + v629) / 0x55uLL))
                   + 48 * ((*(void *)(v714 + 32) + v629) % 0x55uLL);
              unint64_t v716 = *(void *)(v715 + 32) + v630;
              uint64_t v717 = *(void *)(*(void *)(v715 + 8) + 8 * (v716 / 0x55));
              unint64_t v718 = v716 % 0x55;
              uint64_t v719 = v717 + 48 * v718;
              uint64_t v722 = *(void *)(v719 + 40);
              v721 = (uint64_t *)(v719 + 40);
              uint64_t v720 = v722;
              if (!v722) {
                goto LABEL_946;
              }
              v815 = v721;
              uint64_t v723 = v717 + 48 * v718;
              v724 = (void *)(v723 + 32);
              uint64_t v725 = *(void *)(v723 + 8);
              if (*(void *)(v723 + 16) != v725)
              {
                v726 = (void *)(v725 + 8 * (*v724 >> 11));
                v727 = (unsigned __int16 *)(*v726 + 2 * (*v724 & 0x7FFLL));
                uint64_t v728 = *(void *)(v725 + (((unint64_t)(*v724 + v720) >> 8) & 0xFFFFFFFFFFFFF8))
                     + 2 * ((*v724 + v720) & 0x7FF);
                if (v727 != (unsigned __int16 *)v728)
                {
                  do
                  {
                    uint64_t v729 = *v727;
                    uint64_t v730 = *(void *)(*(void *)(*(void *)(a1 + 688)
                                                 + (((unint64_t)(*(void *)(a1 + 712) + v629) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(unsigned char *)(a1 + 712) + v629));
                    --*(unsigned char *)(v730 + v729);
                    unint64_t v731 = *(void *)(*(void *)(a1 + 928) + 8 * ((*(void *)(a1 + 952) + v629) / 0x55uLL))
                         + 48 * ((*(void *)(a1 + 952) + v629) % 0x55uLL);
                    unint64_t v732 = *(void *)(*(void *)(v731 + 8) + 8 * ((*(void *)(v731 + 32) + k) / 0x55uLL))
                         + 48 * ((*(void *)(v731 + 32) + k) % 0x55uLL);
                    unint64_t v733 = *(void *)(v732 + 32) + v729;
                    uint64_t v734 = *(void *)(*(void *)(v732 + 8) + 8 * (v733 / 0x55));
                    unint64_t v735 = v733 % 0x55;
                    v736 = (int64x2_t *)(v734 + 48 * (v733 % 0x55));
                    unint64_t v737 = v736[2].u64[0];
                    uint64_t v738 = v736->i64[1];
                    uint64_t v739 = v736[1].i64[0];
                    unint64_t v740 = v738 + 8 * (v737 >> 11);
                    if (v739 == v738) {
                      uint64_t v741 = 0;
                    }
                    else {
                      uint64_t v741 = *(void *)v740 + 2 * (v736[2].i64[0] & 0x7FF);
                    }
                    v742 = (void *)(v734 + 48 * v735 + 40);
LABEL_926:
                    v743 = (unsigned __int16 *)v741;
                    while (1)
                    {
                      uint64_t v744 = v739 == v738
                           ? 0
                           : *(void *)(v738 + (((*v742 + v737) >> 8) & 0xFFFFFFFFFFFFF8))
                           + 2 * ((*v742 + v737) & 0x7FF);
                      if (v743 == (unsigned __int16 *)v744) {
                        break;
                      }
                      if (v630 == *v743)
                      {
                        std::deque<unsigned short>::erase(v736, (char *)v740, v741);
                        break;
                      }
                      ++v743;
                      v741 += 2;
                      if (*(void *)v740 + 4096 == v741)
                      {
                        uint64_t v745 = *(void *)(v740 + 8);
                        v740 += 8;
                        uint64_t v741 = v745;
                        goto LABEL_926;
                      }
                    }
                    if ((unsigned __int16 *)((char *)++v727 - *v726) == (unsigned __int16 *)4096)
                    {
                      v746 = (unsigned __int16 *)v726[1];
                      ++v726;
                      v727 = v746;
                    }
                  }
                  while (v727 != (unsigned __int16 *)v728);
                  uint64_t v720 = *v815;
                }
              }
              uint64_t v747 = *(void *)(*(void *)(*(void *)(a1 + 880)
                                           + (((unint64_t)(*(void *)(a1 + 904) + k) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(a1 + 904) + k));
              *(unsigned char *)(v747 + v630) -= v720;
              v748 = *(void ***)(v723 + 8);
              uint64_t v749 = *(void *)(v723 + 16);
              uint64_t *v815 = 0;
              unint64_t v750 = v749 - (void)v748;
              if (v750 >= 0x11)
              {
                do
                {
                  operator delete(*v748);
                  uint64_t v751 = *(void *)(v723 + 16);
                  v748 = (void **)(*(void *)(v723 + 8) + 8);
                  *(void *)(v723 + 8) = v748;
                  unint64_t v750 = v751 - (void)v748;
                }
                while (v750 > 0x10);
              }
              unint64_t v752 = v750 >> 3;
              if (v750 >> 3 == 1)
              {
                uint64_t v754 = 1024;
                v753 = (uint64_t *)(v723 + 32);
                goto LABEL_945;
              }
              v753 = (uint64_t *)(v723 + 32);
              if (v752 == 2)
              {
                uint64_t v754 = 2048;
LABEL_945:
                uint64_t *v753 = v754;
              }
LABEL_946:
              if (++v630 == v811) {
                break;
              }
              continue;
            }
          }
          ++v629;
        }
        while (v629 != k);
      }
    }
    v755 = v779;
    v185 = v765;
    if (v817)
    {
      if (v818 != v817) {
        v818 += ((unsigned char *)v817 - v818 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      operator delete(v817);
    }
    if (v819) {
      operator delete(v819);
    }
  }
  else
  {
    v755 = 0;
    *(double *)&v821 = 0.0;
    double v822 = 0.0;
    v819 = 0;
    uint64_t v820 = 0;
  }
  if (v185) {
    operator delete(v185);
  }
  if (*(double *)&v821 != 0.0) {
    operator delete(v821);
  }
  if (v755) {
    operator delete(v755);
  }
  std::deque<std::valarray<double>>::~deque[abi:ne180100]((uint64_t)v829);
  std::deque<std::reference_wrapper<std::valarray<double> const>>::~deque[abi:ne180100]((uint64_t)__p);
  return std::deque<std::pair<int,int>>::~deque[abi:ne180100](v835);
}

void sub_1DD83A670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,void *a55,uint64_t a56,void *a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  operator delete(v72);
  if (v71) {
    operator delete(v71);
  }
  std::deque<std::valarray<double>>::~deque[abi:ne180100]((uint64_t)&a71);
  std::deque<std::reference_wrapper<std::valarray<double> const>>::~deque[abi:ne180100]((uint64_t)&STACK[0x220]);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&STACK[0x250]);
  _Unwind_Resume(a1);
}

void nms::PyramidNMS<unsigned short,double,unsigned char>::performNMSAtOneLevel(uint64_t a1)
{
  uint64_t v1124 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void ***)(a1 + 64);
  uint64_t v3 = *(void ***)(a1 + 72);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 96);
    uint64_t v3 = *(void ***)(a1 + 64);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 96);
    unint64_t v5 = *(void *)(a1 + 88);
    unint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 96) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 96) + v5);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *(void **)v8;
        if (*(void *)v8)
        {
          if (*(void **)(v8 + 8) != v10) {
            *(void *)(v8 + 8) = v10;
          }
          operator delete(v10);
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 64);
      uint64_t v3 = *(void ***)(a1 + 72);
    }
  }
  v1084 = (void *)(a1 + 56);
  *unint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v13 = *(void *)(a1 + 72);
      uint64_t v2 = (void **)(*(void *)(a1 + 64) + 8);
      *(void *)(a1 + 64) = v2;
      unint64_t v12 = v13 - (void)v2;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 128;
  }
  else
  {
    if (v12 >> 3 != 2) {
      goto LABEL_19;
    }
    uint64_t v14 = 256;
  }
  *(void *)(a1 + 88) = v14;
LABEL_19:
  std::deque<std::valarray<BOOL>>::shrink_to_fit((uint64_t)v1084);
  uint64_t v15 = *(void ***)(a1 + 112);
  uint64_t v16 = *(void ***)(a1 + 120);
  if (v16 == v15)
  {
    double v17 = (void *)(a1 + 144);
    uint64_t v16 = *(void ***)(a1 + 112);
  }
  else
  {
    double v17 = (void *)(a1 + 144);
    unint64_t v18 = *(void *)(a1 + 136);
    double v19 = &v15[v18 >> 8];
    uint64_t v20 = (uint64_t)*v19;
    uint64_t v21 = (uint64_t)*v19 + 16 * v18;
    uint64_t v22 = *(uint64_t *)((char *)v15 + (((*(void *)(a1 + 144) + v18) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(unsigned char *)(a1 + 144) + v18);
    if (v21 != v22)
    {
      do
      {
        double v23 = *(void **)v21;
        if (*(void *)v21)
        {
          if (*(void **)(v21 + 8) != v23) {
            *(void *)(v21 + 8) = v23;
          }
          operator delete(v23);
          *(void *)uint64_t v21 = 0;
          *(void *)(v21 + 8) = 0;
          uint64_t v20 = (uint64_t)*v19;
        }
        v21 += 16;
        if (v21 - v20 == 4096)
        {
          uint64_t v24 = (uint64_t)v19[1];
          ++v19;
          uint64_t v20 = v24;
          uint64_t v21 = v24;
        }
      }
      while (v21 != v22);
      uint64_t v15 = *(void ***)(a1 + 112);
      uint64_t v16 = *(void ***)(a1 + 120);
    }
  }
  v1024 = (void *)(a1 + 104);
  *double v17 = 0;
  unint64_t v25 = (char *)v16 - (char *)v15;
  if ((unint64_t)((char *)v16 - (char *)v15) >= 0x11)
  {
    do
    {
      operator delete(*v15);
      uint64_t v26 = *(void *)(a1 + 120);
      uint64_t v15 = (void **)(*(void *)(a1 + 112) + 8);
      *(void *)(a1 + 112) = v15;
      unint64_t v25 = v26 - (void)v15;
    }
    while (v25 > 0x10);
  }
  if (v25 >> 3 == 1)
  {
    uint64_t v27 = 128;
  }
  else
  {
    if (v25 >> 3 != 2) {
      goto LABEL_37;
    }
    uint64_t v27 = 256;
  }
  *(void *)(a1 + 136) = v27;
LABEL_37:
  std::deque<std::valarray<BOOL>>::shrink_to_fit((uint64_t)v1024);
  unint64_t v28 = *(void ***)(a1 + 160);
  uint64_t v29 = *(void ***)(a1 + 168);
  if (v29 == v28)
  {
    uint64_t v30 = (void *)(a1 + 192);
    uint64_t v29 = *(void ***)(a1 + 160);
  }
  else
  {
    uint64_t v30 = (void *)(a1 + 192);
    unint64_t v31 = *(void *)(a1 + 184);
    v32 = &v28[v31 >> 8];
    uint64_t v33 = (uint64_t)*v32;
    uint64_t v34 = (uint64_t)*v32 + 16 * v31;
    uint64_t v35 = *(uint64_t *)((char *)v28 + (((*(void *)(a1 + 192) + v31) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(unsigned char *)(a1 + 192) + v31);
    if (v34 != v35)
    {
      do
      {
        uint64_t v36 = *(void **)v34;
        if (*(void *)v34)
        {
          if (*(void **)(v34 + 8) != v36) {
            *(void *)(v34 + 8) = v36;
          }
          operator delete(v36);
          *(void *)uint64_t v34 = 0;
          *(void *)(v34 + 8) = 0;
          uint64_t v33 = (uint64_t)*v32;
        }
        v34 += 16;
        if (v34 - v33 == 4096)
        {
          uint64_t v37 = (uint64_t)v32[1];
          ++v32;
          uint64_t v33 = v37;
          uint64_t v34 = v37;
        }
      }
      while (v34 != v35);
      unint64_t v28 = *(void ***)(a1 + 160);
      uint64_t v29 = *(void ***)(a1 + 168);
    }
  }
  *uint64_t v30 = 0;
  unint64_t v38 = (char *)v29 - (char *)v28;
  if ((unint64_t)((char *)v29 - (char *)v28) >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v39 = *(void *)(a1 + 168);
      unint64_t v28 = (void **)(*(void *)(a1 + 160) + 8);
      *(void *)(a1 + 160) = v28;
      unint64_t v38 = v39 - (void)v28;
    }
    while (v38 > 0x10);
  }
  if (v38 >> 3 == 1)
  {
    uint64_t v40 = 128;
    goto LABEL_54;
  }
  if (v38 >> 3 == 2)
  {
    uint64_t v40 = 256;
LABEL_54:
    *(void *)(a1 + 184) = v40;
  }
  std::deque<std::valarray<BOOL>>::shrink_to_fit(a1 + 152);
  unint64_t v41 = *(void *)(a1 + 968);
  if (!v41) {
    goto LABEL_90;
  }
  uint64_t v42 = *(void *)(v41 + 40);
  if (!v42) {
    goto LABEL_89;
  }
  for (unint64_t i = 0; i != v42; ++i)
  {
    v44 = *(void **)(a1 + 968);
    if (v44[5] <= i) {
      std::__throw_out_of_range[abi:ne180100]("deque");
    }
    unint64_t v45 = v44[4] + i;
    uint64_t v46 = *(void *)(v44[1] + 8 * (v45 / 0x14));
    unint64_t v47 = v45 % 0x14;
    if (*(void *)(v46 + 200 * v47 + 120))
    {
      uint64_t v48 = v46 + 200 * v47;
      v51 = *(void **)(v48 + 184);
      uint64_t v49 = (void *)(v48 + 184);
      unint64_t v50 = v51;
      unint64_t v52 = *(v49 - 9);
      unint64_t v53 = (uint64_t)(*(void *)(*(void *)(*(v49 - 12) + ((v52 >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * v52
                                + 8)
                    - *(void *)(*(void *)(*(v49 - 12) + ((v52 >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * v52)) >> 3;
      if (!v51) {
        goto LABEL_67;
      }
      do
      {
        uint64_t v54 = v50;
        unint64_t v50 = (void *)*v50;
      }
      while (v50);
      if (v54 == v49 || v54[4] || (unint64_t v55 = v54[5], v55 >= 9))
      {
LABEL_67:
        double v56 = 0.0;
LABEL_68:
        size_t v57 = v53 / *(void *)&v56;
        uint64_t v58 = operator new(v53 / *(void *)&v56);
        __src.n128_u64[0] = (unint64_t)v58;
        bzero(v58, v57);
        char v59 = 0;
        __src.n128_u64[1] = (unint64_t)v58 + v57;
        goto LABEL_71;
      }
      double v56 = dbl_1DD8CEC20[v55];
      __n128 __src = 0uLL;
      if (*(void *)&v56 <= v53) {
        goto LABEL_68;
      }
      size_t v57 = 0;
    }
    else
    {
      size_t v57 = 0;
      __n128 __src = 0uLL;
    }
    char v59 = 1;
LABEL_71:
    std::deque<std::valarray<BOOL>>::push_back(v1084, &__src);
    if (__src.n128_u64[0]) {
      operator delete((void *)__src.n128_u64[0]);
    }
    __n128 __src = 0uLL;
    if ((v59 & 1) == 0)
    {
      unint64_t v60 = operator new(v57);
      __src.n128_u64[0] = (unint64_t)v60;
      bzero(v60, v57);
      __src.n128_u64[1] = (unint64_t)v60 + v57;
    }
    std::deque<std::valarray<BOOL>>::push_back(v1024, &__src);
    if (__src.n128_u64[0]) {
      operator delete((void *)__src.n128_u64[0]);
    }
    __n128 __src = 0uLL;
    if ((v59 & 1) == 0)
    {
      uint64_t v61 = operator new(v57);
      __src.n128_u64[0] = (unint64_t)v61;
      bzero(v61, v57);
      __src.n128_u64[1] = (unint64_t)v61 + v57;
    }
    std::deque<std::valarray<BOOL>>::push_back((void *)(a1 + 152), &__src);
    if (__src.n128_u64[0]) {
      operator delete((void *)__src.n128_u64[0]);
    }
  }
  if (v42 == 2 && *(unsigned char *)(a1 + 1048))
  {
    uint64_t v62 = (unsigned __int8 **)(*(void *)(*(void *)(a1 + 592)
                                         + (((unint64_t)(*(void *)(a1 + 616) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(a1 + 616) + 1));
    uint64_t v64 = *v62;
    v63 = v62[1];
    unint64_t v65 = *(void *)(a1 + 712) + 1;
    uint64_t v66 = *(void *)(*(void *)(a1 + 688) + ((v65 >> 5) & 0x7FFFFFFFFFFFFF8));
    unint64_t v67 = *(void *)(a1 + 808) + 1;
    uint64_t v68 = *(void *)(*(void *)(a1 + 784) + ((v67 >> 5) & 0x7FFFFFFFFFFFFF8));
    unint64_t v69 = *(void *)(a1 + 904) + 1;
    uint64_t v70 = *(void *)(*(void *)(a1 + 880) + ((v69 >> 5) & 0x7FFFFFFFFFFFFF8));
    unint64_t v71 = (BOOL **)(*(void *)(*(void *)(a1 + 112)
                              + (((unint64_t)(*(void *)(a1 + 136) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (*(unsigned char *)(a1 + 136) + 1));
    uint64_t v72 = v63 - *v62;
    uint64_t v73 = *v71;
    if (v71[1] - *v71 != v72)
    {
      uint64_t v1079 = *(void *)(a1 + 712) + 1;
      char v1085 = *(unsigned char *)(a1 + 904) + 1;
      std::valarray<BOOL>::resize(*(void *)(*(void *)(a1 + 112)+ (((unint64_t)(*(void *)(a1 + 136) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(unsigned char *)(a1 + 136) + 1), v63 - *v62);
      LOBYTE(v65) = v1079;
      LOBYTE(v69) = v1085;
      uint64_t v73 = *v71;
    }
    if (v63 != v64)
    {
      v74 = *v62;
      uint64_t v75 = *(unsigned __int8 **)(v66 + 16 * v65);
      uint64_t v76 = *(unsigned __int8 **)(v68 + 16 * v67);
      uint64_t v77 = *(unsigned __int8 **)(v70 + 16 * v69);
      do
      {
        int v79 = *v74++;
        int v78 = v79;
        int v80 = *v75++;
        int v81 = v80 | v78;
        int v83 = *v76++;
        int v82 = v83;
        int v84 = *v77++;
        *v73++ = (v81 | v82 | v84) == 0;
        --v72;
      }
      while (v72);
    }
  }
LABEL_89:
  unint64_t v41 = *(void *)(a1 + 968);
LABEL_90:
  if (!*(unsigned char *)(a1 + 1097)) {
    goto LABEL_518;
  }
  if (v41)
  {
    uint64_t v1029 = *(void *)(v41 + 40);
    if (v1029)
    {
      unint64_t v85 = 0;
      while (1)
      {
        uint64_t v86 = *(void **)(a1 + 968);
        if (v86[5] <= v85) {
          std::__throw_out_of_range[abi:ne180100]("deque");
        }
        unint64_t v87 = v86[4] + v85;
        uint64_t v88 = *(void *)(v86[1] + 8 * (v87 / 0x14));
        unint64_t v89 = v87 % 0x14;
        uint64_t v90 = v88 + 200 * (v87 % 0x14);
        unint64_t v91 = *(void **)(v90 + 184);
        v1040 = (void *)(v90 + 184);
        if (!v91) {
          goto LABEL_99;
        }
        do
        {
          uint64_t v92 = v91;
          unint64_t v91 = (void *)*v91;
        }
        while (v91);
        if (v92 == v1040 || v92[4]) {
          goto LABEL_99;
        }
        uint64_t v379 = v92[5];
        if (v379 == 5)
        {
          int v1042 = 1;
          uint64_t v93 = 4;
          goto LABEL_100;
        }
        if (v379 == 8 || v379 == 6)
        {
          int v1042 = 1;
          uint64_t v93 = 8;
        }
        else
        {
LABEL_99:
          int v1042 = 0;
          uint64_t v93 = -1;
        }
LABEL_100:
        uint64_t v1036 = v93;
        unint64_t v1044 = v85;
        uint64_t v94 = (uint64_t *)(*(void *)(*(void *)(a1 + 112)
                                    + (((*(void *)(a1 + 136) + v85) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (*(void *)(a1 + 136) + v85));
        uint64_t v96 = *v94;
        uint64_t v95 = v94[1];
        __n128 __src = 0uLL;
        uint64_t v97 = v95 - v96;
        if (v95 == v96)
        {
          unint64_t v99 = 0;
        }
        else
        {
          unint64_t v98 = operator new(v95 - v96);
          unint64_t v99 = v98;
          uint64_t v100 = 0;
          __src.n128_u64[0] = (unint64_t)v98;
          do
          {
            *((unsigned char *)v98 + v100) = *(unsigned char *)(v96 + v100) ^ 1;
            ++v100;
          }
          while (v97 != v100);
          __src.n128_u64[1] = (unint64_t)v98 + v100;
        }
        nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)v1115, (uint64_t)&__src);
        unint64_t v101 = v1044;
        if (v99) {
          operator delete(v99);
        }
        if ((void *)v1116 != v1115[1])
        {
          uint64_t v102 = (char *)v1115[1] + 8 * ((unint64_t)v1117 >> 11);
          uint64_t v103 = (unsigned __int16 *)(*v102 + 2 * (v1117 & 0x7FF));
          uint64_t v1059 = *(void *)((char *)v1115[1] + (((*((void *)&v1117 + 1) + (void)v1117) >> 8) & 0xFFFFFFFFFFFFF8))
                + 2 * ((*((void *)&v1117 + 1) + v1117) & 0x7FF);
          if (v103 != (unsigned __int16 *)v1059)
          {
            uint64_t v104 = v88 + 200 * v89;
            unint64_t v105 = (unsigned __int16)v1044;
            v1032 = (void *)(v104 + 88);
            v1034 = (void *)(v104 + 112);
            double v106 = (double)(unsigned __int16)v1044;
            while (1)
            {
              uint64_t v107 = *v103;
              if (v101 == 1)
              {
                uint64_t v108 = *(void **)(a1 + 968);
                if (v108[5] <= 1uLL) {
                  std::__throw_out_of_range[abi:ne180100]("deque");
                }
                unint64_t v109 = v108[4] + 1;
                uint64_t v110 = *(void *)(v108[1] + 8 * (v109 / 0x14));
                unint64_t v111 = v109 % 0x14;
                uint64_t v112 = v110 + 200 * v111;
                uint64_t v115 = *(void **)(v112 + 184);
                unint64_t v113 = (void *)(v112 + 184);
                v114 = v115;
                if (!v115) {
                  goto LABEL_125;
                }
                uint64_t v116 = v113;
                do
                {
                  unint64_t v117 = v114[4];
                  BOOL v118 = v117 >= 3;
                  if (v117 >= 3) {
                    uint64_t v119 = v114;
                  }
                  else {
                    uint64_t v119 = v114 + 1;
                  }
                  if (v118) {
                    uint64_t v116 = v114;
                  }
                  v114 = (void *)*v119;
                }
                while (*v119);
                if (v116 == v113 || v116[4] > 3uLL || (unint64_t v120 = v116[5], v120 > 8)) {
LABEL_125:
                }
                  double v121 = 0.0;
                else {
                  double v121 = dbl_1DD8CEC20[v120];
                }
                unint64_t v122 = *(void *)(*(void *)(v110 + 200 * v111 + 136)
                                 + 8 * ((*(void *)(v110 + 200 * v111 + 160) + 4) / 0x55uLL))
                     + 48 * ((*(void *)(v110 + 200 * v111 + 160) + 4) % 0x55uLL);
                uint64_t v123 = *(void *)(*(void *)(v110 + 200 * v111 + 88)
                                 + (((unint64_t)(*(void *)(v110 + 200 * v111 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*(unsigned char *)(v110 + 200 * v111 + 112) + 3);
                unint64_t v124 = *(void *)&v121
                     * *(unsigned __int16 *)(*(void *)(*(void *)(v122 + 8)
                                                       + (((unint64_t)(*(void *)(v122 + 32) + v107) >> 7) & 0x1FFFFFFFFFFFFF8))
                                           + 4 * ((*(void *)(v122 + 32) + v107) & 0x3FF));
                __src.n128_u64[0] = v123;
                __src.n128_u64[1] = v124;
                *(double *)&long long v1119 = v121;
                *((void *)&v1119 + 1) = 1;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v1112, (uint64_t)&__src);
                float64x2_t v125 = *(float64x2_t *)v1112[0];
                if (v1112[1] != v1112[0]) {
                  v1112[1] = (char *)v1112[1] + (((char *)v1112[0] - (char *)v1112[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                }
                double v126 = *(double *)(a1 + 1120);
                float64x2_t v127 = vsubq_f64(v125, *((float64x2_t *)v1112[0] + 3));
                double v128 = sqrt(vaddvq_f64(vmulq_f64(v127, v127)));
                operator delete(v1112[0]);
                if (v128 <= v126)
                {
                  uint64_t v162 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                               + (((unint64_t)(*(void *)(a1 + 136) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(unsigned char *)(a1 + 136) + 1));
                  if (!*(unsigned char *)(v162 + v107)
                    || (uint64_t v163 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                     + (((unint64_t)(*(void *)(a1 + 88) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*(unsigned char *)(a1 + 88) + 1)),
                        *(unsigned char *)(v163 + v107)))
                  {
                    nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, 1u, v107);
                    uint64_t v163 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                 + (((unint64_t)(*(void *)(a1 + 88) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(unsigned char *)(a1 + 88) + 1));
                    uint64_t v162 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                                 + (((unint64_t)(*(void *)(a1 + 136) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(unsigned char *)(a1 + 136) + 1));
                  }
                  *(unsigned char *)(v163 + v107) = 0;
                  *(unsigned char *)(v162 + v107) = 1;
                  unint64_t v164 = *(void *)(a1 + 184) + 1;
                  goto LABEL_494;
                }
              }
              uint64_t v129 = *(void *)(a1 + 992);
              uint64_t v1080 = v107;
              if (v129 == 1)
              {
                v1048 = v103;
                v1055 = v102;
                v1103[0] = 0;
                v1103[1] = 0;
                std::valarray<double>::resize((uint64_t)v1103, 5uLL, 0.0);
                unint64_t v149 = *(void **)(a1 + 968);
                if (v149[5] <= (unint64_t)(unsigned __int16)v1044) {
                  std::__throw_out_of_range[abi:ne180100]("deque");
                }
                unint64_t v150 = v149[4] + (unsigned __int16)v1044;
                uint64_t v151 = *(void *)(v149[1] + 8 * (v150 / 0x14));
                unint64_t v152 = v150 % 0x14;
                uint64_t v153 = v151 + 200 * (v150 % 0x14);
                uint64_t v156 = *(void **)(v153 + 184);
                unint64_t v155 = (void *)(v153 + 184);
                uint64_t v154 = v156;
                if (!v156) {
                  goto LABEL_156;
                }
                uint64_t v157 = v154;
                do
                {
                  unint64_t v158 = v157;
                  uint64_t v157 = (void *)*v157;
                }
                while (v157);
                if (v158 == v155 || v158[4] || (unint64_t v159 = v158[5] - 5, v159 > 3))
                {
LABEL_156:
                  uint64_t v160 = -1;
                  if (!v154) {
                    goto LABEL_163;
                  }
                }
                else
                {
                  uint64_t v160 = qword_1DD8CEC00[v159];
                  if (!v154) {
                    goto LABEL_163;
                  }
                }
                unint64_t v165 = v154;
                do
                {
                  uint64_t v166 = v165;
                  unint64_t v165 = (void *)*v165;
                }
                while (v165);
                if (v166 == v155 || v166[4] || (unint64_t v167 = v166[5], v167 > 8)) {
LABEL_163:
                }
                  double v168 = 0.0;
                else {
                  double v168 = dbl_1DD8CEC20[v167];
                }
                uint64_t v169 = (double *)v1103[0];
                uint64_t v170 = v151 + 200 * v152;
                uint64_t v172 = *(void *)(v170 + 88);
                uint64_t v171 = (void *)(v170 + 88);
                v1086 = v171 + 3;
                unint64_t v173 = (void *)(*(void *)(v172 + ((v171[3] >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * v171[3]);
                unint64_t v174 = v160 + *(void *)&v168 * v107;
                if (v174 < (uint64_t)(v173[1] - *v173) >> 3) {
                  *(void *)v1103[0] = *(void *)(*v173 + 8 * v174);
                }
                v1045 = v169;
                uint64_t v1038 = v151;
                uint64_t v175 = v151 + 200 * v152;
                uint64_t v177 = *(void *)(v175 + 136);
                size_t v176 = (void *)(v175 + 136);
                unint64_t v178 = *(void *)(v177 + 8 * (v176[3] / 0x55uLL)) + 48 * (v176[3] % 0x55uLL);
                unint64_t v179 = *(void *)(v178 + 32) + v107;
                uint64_t v180 = *(void *)(*(void *)(v178 + 8) + ((v179 >> 7) & 0x1FFFFFFFFFFFFF8));
                unint64_t v1062 = v152;
                if (!v154) {
                  goto LABEL_176;
                }
                uint64_t v181 = v155;
                do
                {
                  uint64_t v182 = v154[4];
                  BOOL v183 = v182 == 0;
                  if (v182) {
                    unint64_t v184 = v154;
                  }
                  else {
                    unint64_t v184 = v154 + 1;
                  }
                  if (!v183) {
                    uint64_t v181 = v154;
                  }
                  uint64_t v154 = (void *)*v184;
                }
                while (*v184);
                if (v181 != v155 && v181[4] <= 1uLL) {
                  uint64_t v185 = v181[5];
                }
                else {
LABEL_176:
                }
                  uint64_t v185 = 9;
                uint64_t v186 = (unsigned __int16 *)(v180 + 4 * (v179 & 0x3FF));
                uint64_t v187 = *v186;
                uint64_t v188 = v186[1];
                v1052 = v186 + 1;
                unint64_t v189 = (void *)*v155;
                if (!*v155) {
                  goto LABEL_189;
                }
                uint64_t v190 = v155;
                do
                {
                  uint64_t v191 = v189[4];
                  BOOL v192 = v191 == 0;
                  if (v191) {
                    unint64_t v193 = v189;
                  }
                  else {
                    unint64_t v193 = v189 + 1;
                  }
                  if (!v192) {
                    uint64_t v190 = v189;
                  }
                  unint64_t v189 = (void *)*v193;
                }
                while (*v193);
                if (v190 == v155 || v190[4] > 1uLL || (unint64_t v194 = v190[5], v194 > 8)) {
LABEL_189:
                }
                  double v195 = 0.0;
                else {
                  double v195 = dbl_1DD8CEC20[v194];
                }
                __src.n128_u64[0] = *(void *)(*v171 + (((unint64_t)(*v1086 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                  + 16 * (*(unsigned char *)v1086 + 1);
                __src.n128_u64[1] = *(void *)&v195 * v187;
                *(void *)&long long v1119 = *(void *)&v195 * (v188 - v187 + 1);
                *((void *)&v1119 + 1) = 1;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v1112, (uint64_t)&__src);
                if (v185 == 5) {
                  unint64_t v197 = 5;
                }
                else {
                  unint64_t v197 = 0;
                }
                if (!v185) {
                  unint64_t v197 = 4;
                }
                if (v197) {
                  unint64_t v198 = (((char *)v1112[1] - (char *)v1112[0]) >> 3) / v197;
                }
                else {
                  unint64_t v198 = 0;
                }
                unint64_t v202 = (void *)*v155;
                if (!*v155) {
                  goto LABEL_210;
                }
                int64_t v203 = v155;
                do
                {
                  unint64_t v204 = v202[4];
                  BOOL v205 = v204 >= 4;
                  if (v204 >= 4) {
                    double v206 = v202;
                  }
                  else {
                    double v206 = v202 + 1;
                  }
                  if (v205) {
                    int64_t v203 = v202;
                  }
                  unint64_t v202 = (void *)*v206;
                }
                while (*v206);
                if (v203 == v155
                  || v203[4] > 4uLL
                  || ((unint64_t v270 = v203[5], v304 = v270 > 8, v271 = (1 << v270) & 0x144, !v304)
                    ? (BOOL v272 = v271 == 0)
                    : (BOOL v272 = 1),
                      v272))
                {
LABEL_210:
                  int v207 = 0;
                  uint64_t v208 = 6;
                }
                else
                {
                  int v207 = 1;
                  uint64_t v208 = 5;
                }
                if ((v185 == 5 || !v185) && v207)
                {
                  unint64_t v1030 = v198;
                  unint64_t v209 = v176[3] + v208;
                  uint64_t v210 = *(void *)(*v176 + 8 * (v209 / 0x55));
                  uint64_t v211 = v1038 + 200 * v1062;
                  uint64_t v213 = *(void *)(v211 + 48);
                  v212 = (size_t *)(v211 + 48);
                  size_t v214 = v212[1] * v213;
                  v1109[0] = 0;
                  v1109[1] = 0;
                  std::valarray<unsigned char>::resize((uint64_t)v1109, v214);
                  unint64_t v215 = *v186;
                  unsigned int v216 = (unsigned __int16)*v1052;
                  if (v215 <= v216)
                  {
                    unint64_t v217 = 0;
                    uint64_t v273 = v210 + 48 * (v209 % 0x55);
                    v1070 = (void *)(v273 + 8);
                    v1075 = (void *)(v273 + 32);
                    v274 = (void *)(v1038 + 200 * v1062 + 64);
                    double v218 = 0.0;
                    do
                    {
                      uint64_t v275 = (unsigned __int16 *)(*(void *)(*v1070 + (((*v1075 + v215) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                + 4 * ((*v1075 + v215) & 0x3FF));
                      unint64_t v276 = *v275;
                      unsigned int v278 = v275[1];
                      uint64_t v277 = v275 + 1;
                      if (v276 <= v278)
                      {
                        unint64_t v1065 = v215;
                        do
                        {
                          uint64_t v279 = (void *)*v155;
                          if (!*v155) {
                            goto LABEL_297;
                          }
                          v280 = v155;
                          do
                          {
                            unint64_t v281 = v279[4];
                            BOOL v282 = v281 >= 4;
                            if (v281 >= 4) {
                              v283 = v279;
                            }
                            else {
                              v283 = v279 + 1;
                            }
                            if (v282) {
                              v280 = v279;
                            }
                            uint64_t v279 = (void *)*v283;
                          }
                          while (*v283);
                          if (v280 == v155 || v280[4] > 4uLL || (unint64_t v284 = v280[5], v284 > 8)) {
LABEL_297:
                          }
                            double v285 = 0.0;
                          else {
                            double v285 = dbl_1DD8CEC20[v284];
                          }
                          __src.n128_u64[0] = *(void *)(*v171
                                                        + (((unint64_t)(*v1086 + 4) >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * (*(unsigned char *)v1086 + 4);
                          __src.n128_u64[1] = *(void *)&v285 * v276;
                          *(double *)&long long v1119 = v285;
                          *((void *)&v1119 + 1) = 1;
                          std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(__p, (uint64_t)&__src);
                          *(double *)&uint64_t v286 = COERCE_DOUBLE(nms::rasterizeQuadByQuantizedScoreMap<double>((double **)__p, v1109, v274, *v212, v212[1], 0, *(unsigned char *)(a1 + 1008)));
                          unint64_t v217 = v287;
                          if (__p[0])
                          {
                            if (__p[1] != __p[0]) {
                              __p[1] = (char *)__p[1] + (((char *)__p[0] - (char *)__p[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                            }
                            operator delete(__p[0]);
                          }
                          BOOL v118 = v276++ >= *v277;
                        }
                        while (!v118);
                        double v218 = *(double *)&v286;
                        LOWORD(v216) = *v1052;
                        uint64_t v107 = v1080;
                        unint64_t v215 = v1065;
                      }
                      BOOL v118 = v215++ >= (unsigned __int16)v216;
                    }
                    while (!v118);
                  }
                  else
                  {
                    unint64_t v217 = 0;
                    double v218 = 0.0;
                  }
                  if (v1109[0]) {
                    operator delete(v1109[0]);
                  }
                  unint64_t v101 = v1044;
                  v219 = v1045;
                  double v220 = *v1045;
                  v1045[1] = *v1045;
                  double v221 = v1045 + 1;
                  uint64_t v103 = v1048;
                  unint64_t v105 = (unsigned __int16)v1044;
                  if (v217)
                  {
                    double v222 = v218 / (double)v217 / 255.0 * v220;
                    *double v221 = v222;
                    unint64_t v198 = v1030;
                    goto LABEL_311;
                  }
                  unint64_t v198 = v1030;
                }
                else
                {
                  v219 = v1045;
                  uint64_t v103 = v1048;
                  double v220 = *v1045;
                  v1045[1] = *v1045;
                  double v221 = v1045 + 1;
                  unint64_t v105 = (unsigned __int16)v1044;
                }
                unint64_t v217 = 0;
                LOBYTE(v196) = *(unsigned char *)(a1 + 1008);
                double v222 = v220 * ((double)v196 / 255.0);
                *double v221 = v222;
LABEL_311:
                v219[2] = v222;
                if (*(unsigned char *)(a1 + 1024))
                {
                  unint64_t v288 = *(void *)(a1 + 1040);
                  if (v288)
                  {
                    double v289 = (double)v288;
                    if ((double)v288 < (double)v198) {
                      double v289 = (double)v198;
                    }
                  }
                  else
                  {
                    double v289 = (double)v198;
                  }
                  double v222 = v222 * v289;
                  v219[2] = v222;
                }
                v219[3] = v222;
                if (*(unsigned char *)(a1 + 1009))
                {
                  uint64_t v290 = *(void *)(a1 + 968);
                  if (v290) {
                    double v291 = (double)*(unint64_t *)(v290 + 40);
                  }
                  else {
                    double v291 = 0.0;
                  }
                  double v222 = v222 * (1.0 - v106 / v291);
                  v219[3] = v222;
                }
                v219[4] = v222;
                if (*(unsigned char *)(a1 + 1010) && v217) {
                  v219[4] = v222 * (double)v217;
                }
                uint64_t v102 = v1055;
                if (v1112[0])
                {
                  if (v1112[1] != v1112[0]) {
                    v1112[1] = (char *)v1112[1] + (((char *)v1112[0] - (char *)v1112[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                  }
                  operator delete(v1112[0]);
                }
                double v161 = *((double *)v1103[1] - 1);
                operator delete(v219);
                goto LABEL_482;
              }
              if (!v129) {
                break;
              }
              double v161 = 2.22507386e-308;
LABEL_482:
              if (v161 > *(double *)(a1 + 1000))
              {
                if (v1042)
                {
                  uint64_t v369 = (void *)*v1040;
                  if (!*v1040) {
                    goto LABEL_499;
                  }
                  do
                  {
                    unint64_t v370 = v369;
                    uint64_t v369 = (void *)*v369;
                  }
                  while (v369);
                  if (v370 == v1040 || v370[4] || (unint64_t v371 = v370[5], v371 > 8)) {
LABEL_499:
                  }
                    double v372 = 0.0;
                  else {
                    double v372 = dbl_1DD8CEC20[v371];
                  }
                  uint64_t v376 = (*v1034 >> 5) & 0x7FFFFFFFFFFFFF8;
                  unint64_t v377 = v1036 + *(void *)&v372 * v107;
                  uint64_t v378 = *(void *)(*(void *)(*v1032 + v376) + 16 * *v1034);
                  if (v377 < (*(void *)(*(void *)(*v1032 + v376) + 16 * *v1034 + 8) - v378) >> 3) {
                    *(double *)(v378 + 8 * v377) = v161;
                  }
                }
                goto LABEL_495;
              }
              uint64_t v373 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                           + (((*(void *)(a1 + 136) + v105) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(a1 + 136) + v105));
              if (!*(unsigned char *)(v373 + v107)
                || (uint64_t v374 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                 + (((*(void *)(a1 + 88) + v105) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(unsigned char *)(a1 + 88) + v105)),
                    *(unsigned char *)(v374 + v107)))
              {
                nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, (unsigned __int16)v101, v107);
                uint64_t v374 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                             + (((*(void *)(a1 + 88) + v105) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(a1 + 88) + v105));
                uint64_t v373 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                             + (((*(void *)(a1 + 136) + v105) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(a1 + 136) + v105));
              }
              *(unsigned char *)(v374 + v107) = 0;
              *(unsigned char *)(v373 + v107) = 1;
              unint64_t v164 = *(void *)(a1 + 184) + v105;
LABEL_494:
              *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160) + ((v164 >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * v164)
                       + v107) = 0;
LABEL_495:
              if ((unsigned __int16 *)((char *)++v103 - *v102) == (unsigned __int16 *)4096)
              {
                unint64_t v375 = (unsigned __int16 *)v102[1];
                ++v102;
                uint64_t v103 = v375;
              }
              if (v103 == (unsigned __int16 *)v1059) {
                goto LABEL_511;
              }
            }
            v1091 = 0;
            uint64_t v1092 = 0;
            uint64_t v130 = *(void **)(a1 + 968);
            if (v130[5] <= v105) {
              std::__throw_out_of_range[abi:ne180100]("deque");
            }
            unint64_t v131 = v130[4] + v105;
            uint64_t v132 = *(void *)(v130[1] + 8 * (v131 / 0x14));
            unint64_t v133 = v131 % 0x14;
            uint64_t v134 = v132 + 200 * v133;
            uint64_t v137 = *(void **)(v134 + 184);
            uint64_t v136 = (void *)(v134 + 184);
            uint64_t v135 = v137;
            unint64_t v138 = *(void *)(*(v136 - 6) + 8 * (*(v136 - 3) / 0x55uLL)) + 48 * (*(v136 - 3) % 0x55uLL);
            unint64_t v139 = *(void *)(v138 + 32) + v107;
            uint64_t v140 = *(void *)(*(void *)(v138 + 8) + ((v139 >> 7) & 0x1FFFFFFFFFFFFF8));
            uint64_t v141 = v139 & 0x3FF;
            uint64_t v142 = (unsigned __int16 *)(v140 + 4 * v141);
            uint64_t v143 = v136;
            uint64_t v144 = v137;
            if (v137)
            {
              do
              {
                uint64_t v145 = v144[4];
                BOOL v146 = v145 == 0;
                if (v145) {
                  v147 = v144;
                }
                else {
                  v147 = v144 + 1;
                }
                if (!v146) {
                  uint64_t v143 = v144;
                }
                uint64_t v144 = (void *)*v147;
              }
              while (*v147);
              if (v143 == v136 || v143[4] > 1uLL) {
                uint64_t v148 = 9;
              }
              else {
                uint64_t v148 = v143[5];
              }
              unsigned int v200 = *v142;
              int v223 = *(unsigned __int16 *)(v140 + 4 * v141 + 2);
              uint64_t v224 = v136;
              do
              {
                uint64_t v225 = v135[4];
                BOOL v226 = v225 == 0;
                if (v225) {
                  uint64_t v227 = v135;
                }
                else {
                  uint64_t v227 = v135 + 1;
                }
                if (!v226) {
                  uint64_t v224 = v135;
                }
                uint64_t v135 = (void *)*v227;
              }
              while (*v227);
              unsigned int v201 = v223 - v200;
              if (v224 == v136 || v224[4] > 1uLL)
              {
LABEL_228:
                uint64_t v199 = 0;
              }
              else
              {
                switch(v224[5])
                {
                  case 0:
                  case 1:
                    uint64_t v199 = 4;
                    break;
                  case 2:
                    uint64_t v199 = 8;
                    break;
                  case 3:
                  case 4:
                    uint64_t v199 = 2;
                    break;
                  case 5:
                    uint64_t v199 = 5;
                    break;
                  case 6:
                    uint64_t v199 = 9;
                    break;
                  case 7:
                    uint64_t v199 = 3;
                    break;
                  case 8:
                    uint64_t v199 = 14;
                    break;
                  default:
                    goto LABEL_228;
                }
              }
            }
            else
            {
              uint64_t v199 = 0;
              unsigned int v200 = *v142;
              unsigned int v201 = v142[1] - v200;
              uint64_t v148 = 9;
            }
            uint64_t v228 = v132 + 200 * v133;
            v1074 = (void *)(v228 + 88);
            v1069 = (void *)(v228 + 112);
            __src.n128_u64[0] = *(void *)(*(void *)(v228 + 88)
                                          + (((unint64_t)(*(void *)(v228 + 112) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*(void *)(v228 + 112) + 1);
            __src.n128_u64[1] = v199 * (unint64_t)v200;
            *(void *)&long long v1119 = v199 + (int)v199 * (uint64_t)(int)v201;
            *((void *)&v1119 + 1) = 1;
            std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v1103, (uint64_t)&__src);
            v1087 = v136;
            v229 = v103;
            if (v148)
            {
              if (v148 == 5)
              {
                unint64_t v230 = 5;
                goto LABEL_233;
              }
              unint64_t v230 = 0;
              unint64_t v232 = 0;
              uint64_t v231 = (double *)v1103[0];
            }
            else
            {
              unint64_t v230 = 4;
LABEL_233:
              uint64_t v231 = (double *)v1103[0];
              unint64_t v232 = (((char *)v1103[1] - (char *)v1103[0]) >> 3) / v230;
            }
            v1100[0] = 0;
            v1100[1] = 0;
            if (v148 == 5) {
              uint64_t v233 = 5;
            }
            else {
              uint64_t v233 = 0;
            }
            if (v148) {
              unint64_t v234 = v233;
            }
            else {
              unint64_t v234 = 4;
            }
            if (v234)
            {
              unint64_t v235 = (((char *)v1103[1] - (char *)v231) >> 3) / v234;
              if (v235 >= 2)
              {
                double v236 = v102;
                unint64_t v237 = v235 - 1;
                if ((v235 - 1) >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v238 = (double *)operator new(8 * v237);
                double v239 = v238;
                uint64_t v240 = 0;
                v241 = v231 + 2;
                unint64_t v1063 = v234;
                uint64_t v242 = 8 * v234;
                do
                {
                  v238[v240++] = *(v241 - 2) + *v241;
                  v241 = (double *)((char *)v241 + v242);
                }
                while (v237 != v240);
                std::valarray<double>::resize((uint64_t)v1100, v237, 0.0);
                uint64_t v243 = 0;
                uint64_t v244 = (double *)v1100[0];
                v245 = (double *)((char *)v1103[0] + v242);
                do
                {
                  v244[v243] = *v245 - v239[v243];
                  v245 = (double *)((char *)v245 + v242);
                  ++v243;
                }
                while (v237 != v243);
                operator delete(v239);
                uint64_t v231 = (double *)v1103[0];
                uint64_t v102 = v236;
                unint64_t v234 = v1063;
              }
            }
            __src.n128_u64[0] = (unint64_t)(v231 + 2);
            __src.n128_u64[1] = v232;
            unint64_t v1064 = v232;
            *(void *)&long long v1119 = v230;
            std::valarray<double>::valarray(v1097, (uint64_t)&__src);
            v1056 = v102;
            v246 = (double *)v1097[0];
            int64_t v247 = (char *)v1097[1] - (char *)v1097[0];
            uint64_t v103 = v229;
            if (v1097[1] == v1097[0])
            {
              unint64_t v250 = 0;
              uint64_t v107 = v1080;
            }
            else
            {
              uint64_t v248 = v247 >> 3;
              char v249 = (unsigned __int8 *)operator new(v247 >> 3);
              uint64_t v107 = v1080;
              unint64_t v250 = v249;
              uint64_t v251 = 0;
              do
              {
                uint64_t v252 = v251;
                v249[v251] = fabs(v246[v251]) <= 2.22044605e-16;
                ++v251;
              }
              while (v248 != v251);
              if (v252 != -1)
              {
                uint64_t v253 = 0;
                uint64_t v254 = 0;
                uint64_t v255 = v252 + 1;
                uint64_t v256 = (void **)v1087;
                do
                  v254 += v249[v253++];
                while (v255 != v253);
                if (v254)
                {
                  uint64_t v257 = 0;
                  int v258 = 0;
                  goto LABEL_464;
                }
LABEL_259:
                std::valarray<double>::resize((uint64_t)&v1091, 4uLL, 0.0);
                v259 = *v256;
                if (!*v256) {
                  goto LABEL_265;
                }
                do
                {
                  v260 = v259;
                  v259 = (void *)*v259;
                }
                while (v259);
                if (v260 == v256 || v260[4] || (unint64_t v261 = v260[5], v261 > 8)) {
LABEL_265:
                }
                  double v262 = 0.0;
                else {
                  double v262 = dbl_1DD8CEC20[v261];
                }
                __src.n128_u64[0] = *(void *)(*v1074 + ((*v1069 >> 5) & 0x7FFFFFFFFFFFFF8))
                                  + 16 * *v1069;
                __src.n128_u64[1] = *(void *)&v262 * v107;
                *(double *)&long long v1119 = v262;
                *((void *)&v1119 + 1) = 1;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v1093, (uint64_t)&__src);
                v263 = v1093;
                unint64_t v264 = v1094;
                if ((((char *)v1094 - (char *)v1093) & 0xFFFFFFFFFFFFFFF0) != 0x20)
                {
                  double v269 = 2.22507386e-308;
                  goto LABEL_440;
                }
                v1049 = v103;
                unint64_t v265 = *(void *)(a1 + 1072);
                std::valarray<double>::valarray(__p, &v1093);
                v266 = (double *)__p[0];
                v267 = (double *)__p[1];
                if ((((char *)__p[1] - (char *)__p[0]) & 0xFFFFFFFFFFFFFFF0) != 0x20)
                {
                  v1112[0] = 0;
                  v1112[1] = 0;
                  if (v234)
                  {
                    unint64_t v268 = (((char *)v1103[1] - (char *)v1103[0]) >> 3) / v234;
                    if (v268)
                    {
                      if (v268 == 1)
                      {
                        std::valarray<double>::__assign_range((uint64_t)v1112, (unsigned char *)v1103[0], (unsigned char *)v1103[1]);
                      }
                      else
                      {
                        double v292 = *(double *)v1103[0];
                        uint64_t v293 = 8 * v234;
                        uint64_t v294 = 1;
                        uint64_t v295 = (double *)((char *)v1103[0] + 8 * v234);
                        do
                        {
                          if (*v295 < v292) {
                            double v292 = *v295;
                          }
                          ++v294;
                          uint64_t v295 = (double *)((char *)v295 + v293);
                        }
                        while (v268 != v294);
                        double v296 = *((double *)v1103[0] + 1);
                        unint64_t v297 = v268 - 1;
                        uint64_t v298 = (double *)((char *)v1103[0] + v293 + 8);
                        do
                        {
                          if (*v298 < v296) {
                            double v296 = *v298;
                          }
                          uint64_t v298 = (double *)((char *)v298 + v293);
                          --v297;
                        }
                        while (v297);
                        __src.n128_u64[1] = (unint64_t)v1103;
                        *(void *)&long long v1119 = 0;
                        *((void *)&v1119 + 1) = (((char *)v1103[1] - (char *)v1103[0]) >> 3) / v234;
                        *(void *)&long long v1120 = v234;
                        *((void *)&v1120 + 1) = v1103;
                        uint64_t v1121 = 2;
                        unint64_t v1122 = *((void *)&v1119 + 1);
                        unint64_t v1123 = v234;
                        double v299 = std::__val_expr<std::_BinaryOp<std::plus<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::max[abi:ne180100]((uint64_t)&__src);
                        __src.n128_u64[1] = (unint64_t)v1103;
                        *(void *)&long long v1119 = 1;
                        *((void *)&v1119 + 1) = v268;
                        *(void *)&long long v1120 = v234;
                        *((void *)&v1120 + 1) = v1103;
                        uint64_t v1121 = 3;
                        unint64_t v1122 = v268;
                        unint64_t v1123 = v234;
                        double v300 = std::__val_expr<std::_BinaryOp<std::plus<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::max[abi:ne180100]((uint64_t)&__src);
                        __src.n128_f64[0] = v292;
                        __src.n128_f64[1] = v296;
                        *(double *)&long long v1119 = v299 - v292;
                        *((double *)&v1119 + 1) = v300 - v296;
                        std::valarray<double>::__assign_range((uint64_t)v1112, &__src, &v1120);
                      }
                    }
                  }
                  if (__p[0])
                  {
                    if (__p[1] != __p[0]) {
                      __p[1] = (char *)__p[1] + (((char *)__p[0] - (char *)__p[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                    }
                    operator delete(__p[0]);
                  }
                  v266 = (double *)v1112[0];
                  v267 = (double *)v1112[1];
                  __p[0] = v1112[0];
                  __p[1] = v1112[1];
                }
                double v302 = v266[2];
                double v301 = v266[3];
                double v303 = fabs(v301);
                BOOL v304 = fabs(v302) > 2.22044605e-16 && v303 > 2.22044605e-16;
                if (!v304)
                {
                  double v269 = 2.22507386e-308;
                  goto LABEL_436;
                }
                v1046 = v250;
                double v306 = *v266;
                double v305 = v266[1];
                v307 = (double *)v1103[0];
                size_t v308 = (char *)v1103[1] - (char *)v1103[0];
                if (v234) {
                  unint64_t v309 = (((char *)v1103[1] - (char *)v1103[0]) >> 3) / v234;
                }
                else {
                  unint64_t v309 = 0;
                }
                v1112[0] = 0;
                v1112[1] = 0;
                if (v1103[1] == v1103[0])
                {
                  v310 = 0;
                  if (!v309) {
                    goto LABEL_363;
                  }
                }
                else
                {
                  if ((v308 & 0x8000000000000000) != 0) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  v310 = (double *)operator new((char *)v1103[1] - (char *)v1103[0]);
                  v1112[0] = v310;
                  bzero(v310, v308);
                  v1112[1] = (char *)v310 + v308;
                  if (!v309)
                  {
LABEL_363:
                    __src.n128_u64[0] = (unint64_t)v310;
                    __src.n128_u64[1] = v309;
                    *(void *)&long long v1119 = 4;
                    std::valarray<double>::valarray(v1109, (uint64_t)&__src);
                    uint64_t v318 = v1109[0];
                    if (v309)
                    {
                      uint64_t v319 = (double *)((char *)v1112[0] + 16);
                      unint64_t v320 = (double *)((char *)v1103[0] + 16);
                      uint64_t v321 = (double *)v1109[0];
                      unint64_t v322 = v309;
                      do
                      {
                        double v323 = *v321++;
                        *uint64_t v319 = v323 + *v320 / v302;
                        v319 += 4;
                        v320 += v234;
                        --v322;
                      }
                      while (v322);
LABEL_368:
                      if (v1109[1] != v318) {
                        v1109[1] = (char *)v1109[1] + ((v318 - (char *)v1109[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      }
                      operator delete(v318);
                    }
                    else if (v1109[0])
                    {
                      goto LABEL_368;
                    }
                    __src.n128_u64[0] = (unint64_t)v1112[0] + 8;
                    __src.n128_u64[1] = v309;
                    *(void *)&long long v1119 = 4;
                    std::valarray<double>::valarray(v1109, (uint64_t)&__src);
                    uint64_t v324 = v1109[0];
                    if (v309)
                    {
                      v325 = (double *)((char *)v1112[0] + 24);
                      uint64_t v326 = (double *)((char *)v1103[0] + 24);
                      v327 = (double *)v1109[0];
                      unint64_t v328 = v309;
                      do
                      {
                        double v329 = *v327++;
                        double *v325 = v329 + *v326 / v301;
                        v325 += 4;
                        v326 += v234;
                        --v328;
                      }
                      while (v328);
LABEL_376:
                      if (v1109[1] != v324) {
                        v1109[1] = (char *)v1109[1] + ((v324 - (char *)v1109[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      }
                      operator delete(v324);
                    }
                    else if (v1109[0])
                    {
                      goto LABEL_376;
                    }
                    BOOL v330 = (double *)v1112[0];
                    v331 = (double *)v1112[1];
                    if (v1112[0] != v1112[1])
                    {
                      uint64_t v332 = (double *)v1112[0];
                      do
                      {
                        *uint64_t v332 = *v332 * (double)v265;
                        ++v332;
                      }
                      while (v332 != v331);
                    }
                    std::valarray<double>::apply(&__src, v330, v331, nms::intersectionPenalizedUnionOfRects<double>(std::valarray<double> const&,std::valarray<double>&,unsigned long,nms::RepresentationDimType)::{lambda(double)#1}::__invoke);
                    if (v1112[0]) {
                      operator delete(v1112[0]);
                    }
                    *(__n128 *)v1112 = __src;
                    uint64_t v1096 = 0;
                    nms::max<double>((uint64_t *)v1109, (double *)&v1096, (uint64_t)v1112);
                    double v1095 = (double)v265;
                    nms::min<double>((uint64_t *)&__src, &v1095, (uint64_t)v1109);
                    if (v1112[0]) {
                      operator delete(v1112[0]);
                    }
                    *(__n128 *)v1112 = __src;
                    __n128 __src = 0uLL;
                    if (v1109[0])
                    {
                      if (v1109[1] != v1109[0]) {
                        v1109[1] = (char *)v1109[1] + (((char *)v1109[0] - (char *)v1109[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      }
                      operator delete(v1109[0]);
                    }
                    unint64_t v333 = v265 * v265;
                    if (v265 * v265)
                    {
                      if (v333 >> 61) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      size_t v334 = 8 * v333;
                      v335 = (char *)operator new(8 * v333);
                      bzero(v335, v334);
                      uint64_t v336 = &v335[v334];
                      if (v309)
                      {
LABEL_393:
                        uint64_t v337 = 0;
                        uint64_t v338 = 0;
                        while (1)
                        {
                          __src.n128_u64[0] = (unint64_t)v1112;
                          __src.n128_u64[1] = 4 * v337;
                          long long v1119 = xmmword_1DD8CEB40;
                          std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v1109, (uint64_t)&__src);
                          if (v338) {
                            operator delete(v338);
                          }
                          uint64_t v338 = (double *)v1109[0];
                          unint64_t v339 = (unint64_t)*((double *)v1109[0] + 1);
                          unint64_t v340 = (unint64_t)*((double *)v1109[0] + 3);
                          if (v339 < v340) {
                            break;
                          }
LABEL_409:
                          if (++v337 == v309) {
                            goto LABEL_413;
                          }
                        }
                        while (2)
                        {
                          double v341 = *v338;
                          double v342 = v338[2] - *v338;
                          if ((unint64_t)v342 >= v265) {
                            unint64_t v343 = v265;
                          }
                          else {
                            unint64_t v343 = (unint64_t)v342;
                          }
                          __n128 __src = 0uLL;
                          std::valarray<unsigned long>::resize();
                          unint64_t v344 = (void *)__src.n128_u64[0];
                          if (v343)
                          {
                            float64_t v345 = &v335[8 * (unint64_t)(v341 + (double)(v339 * v265))];
                            uint64_t v346 = (uint64_t *)__src.n128_u64[0];
                            do
                            {
                              uint64_t v347 = *v346++;
                              *(void *)v345 += v347;
                              v345 += 8;
                              --v343;
                            }
                            while (v343);
LABEL_405:
                            if ((void *)__src.n128_u64[1] != v344) {
                              __src.n128_u64[1] += ((unint64_t)v344 - __src.n128_u64[1] + 7) & 0xFFFFFFFFFFFFFFF8;
                            }
                            operator delete(v344);
                          }
                          else if (__src.n128_u64[0])
                          {
                            goto LABEL_405;
                          }
                          if (++v339 == v340) {
                            goto LABEL_409;
                          }
                          continue;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v336 = 0;
                      v335 = 0;
                      if (v309) {
                        goto LABEL_393;
                      }
                    }
                    uint64_t v338 = 0;
LABEL_413:
                    if (v335 == v336)
                    {
                      double v358 = 0.0;
                      unint64_t v250 = v1046;
                      if (v338) {
                        goto LABEL_427;
                      }
                    }
                    else
                    {
                      uint64_t v348 = 0;
                      float64x2_t v349 = v335;
                      unint64_t v250 = v1046;
                      do
                      {
                        uint64_t v350 = *(void *)v349;
                        v349 += 8;
                        if (v350) {
                          ++v348;
                        }
                      }
                      while (v349 != v336);
                      uint64_t v351 = 0;
                      v352 = v335;
                      do
                      {
                        uint64_t v353 = *(void *)v352;
                        v352 += 8;
                        if (v353 == 1) {
                          ++v351;
                        }
                      }
                      while (v352 != v336);
                      uint64_t v354 = 0;
                      v355 = (unint64_t *)v335;
                      do
                      {
                        unint64_t v357 = *v355++;
                        unint64_t v356 = v357;
                        if (v357 <= 1) {
                          unint64_t v356 = 0;
                        }
                        v354 += v356;
                      }
                      while (v355 != (unint64_t *)v336);
                      double v358 = (double)(unint64_t)(2 * v348 - v351 - v354);
                      if (v338) {
LABEL_427:
                      }
                        operator delete(v338);
                    }
                    if (v335) {
                      operator delete(v335);
                    }
                    uint64_t v107 = v1080;
                    if (v1112[0])
                    {
                      if (v1112[1] != v1112[0]) {
                        v1112[1] = (char *)v1112[1] + (((char *)v1112[0] - (char *)v1112[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      }
                      operator delete(v1112[0]);
                    }
                    double v269 = v358 / (double)(unint64_t)((v336 - v335) >> 3);
                    v266 = (double *)__p[0];
                    if (__p[0])
                    {
                      v267 = (double *)__p[1];
LABEL_436:
                      uint64_t v103 = v1049;
                      if (v267 != v266) {
                        __p[1] = (char *)v267 + (((char *)v266 - (char *)v267 + 7) & 0xFFFFFFFFFFFFFFF8);
                      }
                      operator delete(v266);
                    }
                    else
                    {
                      uint64_t v103 = v1049;
                    }
                    v263 = v1093;
                    unint64_t v264 = v1094;
LABEL_440:
                    double v359 = (double *)v1091;
                    *(double *)v1091 = v269;
                    if (v263)
                    {
                      if (v264 != v263) {
                        v1094 = (uint64_t *)((char *)v264 + (((char *)v263 - (char *)v264 + 7) & 0xFFFFFFFFFFFFFFF8));
                      }
                      operator delete(v263);
                    }
                    double v360 = *v359;
                    int v361 = *(unsigned __int8 *)(a1 + 1024);
                    v359[1] = *v359;
                    if (v361)
                    {
                      unint64_t v362 = *(void *)(a1 + 1032);
                      double v363 = (double)v1064;
                      if (v362 && v363 >= (double)v362) {
                        double v363 = (double)v362;
                      }
                      double v360 = v360 * v363;
                      v359[1] = v360;
                    }
                    v359[2] = v360;
                    if (*(unsigned char *)(a1 + 1009))
                    {
                      unint64_t v364 = *(void *)(a1 + 968);
                      if (v364) {
                        unint64_t v364 = *(void *)(v364 + 40);
                      }
                      double v360 = v360 * (1.0 - v106 / (double)v364);
                      v359[2] = v360;
                    }
                    v359[3] = v360;
                    if (*(unsigned char *)(a1 + 1010))
                    {
                      unint64_t v365 = (void *)*v1087;
                      if (!*v1087) {
                        goto LABEL_460;
                      }
                      do
                      {
                        uint64_t v366 = v365;
                        unint64_t v365 = (void *)*v365;
                      }
                      while (v365);
                      if (v366 == v1087 || v366[4] || (unint64_t v367 = v366[5], v367 > 8)) {
LABEL_460:
                      }
                        double v368 = 0.0;
                      else {
                        double v368 = dbl_1DD8CEC20[v367];
                      }
                      __src.n128_u64[0] = *(void *)(*v1074 + ((*v1069 >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *v1069;
                      __src.n128_u64[1] = *(void *)&v368 * v107;
                      *(double *)&long long v1119 = v368;
                      *((void *)&v1119 + 1) = 1;
                      std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v1112, (uint64_t)&__src);
                      uint64_t v257 = v1112[0];
                      v359[3] = v359[3] * (*((double *)v1112[0] + 2) * *((double *)v1112[0] + 3));
                    }
                    else
                    {
                      uint64_t v257 = 0;
                    }
                    int v258 = 1;
                    if (v250) {
LABEL_464:
                    }
                      operator delete(v250);
                    uint64_t v102 = v1056;
                    if (v1097[0])
                    {
                      if (v1097[1] != v1097[0]) {
                        v1097[1] = (char *)v1097[1] + (((char *)v1097[0] - (char *)v1097[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      }
                      operator delete(v1097[0]);
                    }
                    if (v1100[0]) {
                      operator delete(v1100[0]);
                    }
                    if (v1103[0])
                    {
                      if (v1103[1] != v1103[0]) {
                        v1103[1] = (char *)v1103[1] + (((char *)v1103[0] - (char *)v1103[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      }
                      operator delete(v1103[0]);
                    }
                    if (v258)
                    {
                      double v161 = *(double *)(v1092 - 8);
                      goto LABEL_478;
                    }
                    double v161 = 2.22507386e-308;
                    if (v1091) {
LABEL_478:
                    }
                      operator delete(v1091);
                    unint64_t v105 = (unsigned __int16)v1044;
                    if (v257) {
                      operator delete(v257);
                    }
                    unint64_t v101 = v1044;
                    goto LABEL_482;
                  }
                }
                uint64_t v311 = 8 * v234;
                v312 = v307;
                unint64_t v313 = v309;
                v314 = v310;
                do
                {
                  double *v314 = (*v312 - v306) / v302;
                  v314 += 4;
                  v312 = (double *)((char *)v312 + v311);
                  --v313;
                }
                while (v313);
                unint64_t v315 = v310 + 1;
                uint64_t v316 = v307 + 1;
                unint64_t v317 = v309;
                do
                {
                  *unint64_t v315 = (*v316 - v305) / v301;
                  v315 += 4;
                  uint64_t v316 = (double *)((char *)v316 + v311);
                  --v317;
                }
                while (v317);
                goto LABEL_363;
              }
            }
            uint64_t v256 = (void **)v1087;
            goto LABEL_259;
          }
        }
LABEL_511:
        std::deque<unsigned short>::~deque[abi:ne180100](v1115);
        unint64_t v85 = v101 + 1;
        if (v85 == v1029)
        {
          unint64_t v41 = *(void *)(a1 + 968);
          break;
        }
      }
    }
LABEL_518:
    v1039 = (unsigned char *)(a1 + 1098);
    if (*(unsigned char *)(a1 + 1098))
    {
      if (v41)
      {
        unint64_t v1037 = *(void *)(v41 + 40);
        if (v1037)
        {
          unint64_t v380 = 0;
          unsigned __int16 v1026 = 0;
          while (1)
          {
            unint64_t v381 = *(void **)(a1 + 968);
            if (v381[5] <= v380) {
              std::__throw_out_of_range[abi:ne180100]("deque");
            }
            unint64_t v382 = v381[4] + v380;
            uint64_t v383 = *(void *)(v381[1] + 8 * (v382 / 0x14));
            unint64_t v384 = v382 % 0x14;
            uint64_t v385 = v383 + 200 * (v382 % 0x14);
            unsigned int v386 = *(void **)(v385 + 184);
            v1043 = (void *)(v385 + 184);
            if (!v386) {
              goto LABEL_529;
            }
            do
            {
              v387 = v386;
              unsigned int v386 = (void *)*v386;
            }
            while (v386);
            if (v387 == v1043 || v387[4] || (unint64_t v388 = v387[5] - 5, v388 > 3)) {
LABEL_529:
            }
              uint64_t v389 = -1;
            else {
              uint64_t v389 = qword_1DD8CEC00[v388];
            }
            uint64_t v1041 = v389;
            BOOL v390 = (unsigned __int8 **)(*(void *)(*(void *)(a1 + 592)
                                                  + (((*(void *)(a1 + 616) + v380) >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * (*(unsigned char *)(a1 + 616) + v380));
            LOBYTE(v1109[0]) = 0;
            unint64_t v391 = v380;
            std::__val_expr<std::_BinaryOp<std::greater<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(v1112, *v390, v390[1], (unsigned __int8 *)v1109);
            unint64_t v1031 = v391;
            std::__val_expr<std::_BinaryOp<std::bit_and<BOOL>,std::valarray<BOOL>,std::__val_expr<std::_UnaryOp<std::logical_not<BOOL>,std::valarray<BOOL> const&>>>>::operator std::valarray<BOOL>(v1115, (char *)v1112[0], (unsigned char *)v1112[1], (char **)(*(void *)(*(void *)(a1 + 112) + (((*(void *)(a1 + 136) + v391) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(unsigned char *)(a1 + 136) + v391)));
            nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&__src, (uint64_t)v1115);
            if (v1115[0])
            {
              if (v1115[1] != v1115[0]) {
                v1115[1] = v1115[0];
              }
              operator delete(v1115[0]);
              v1115[1] = 0;
              v1115[0] = 0;
            }
            if (v1112[0])
            {
              if (v1112[1] != v1112[0]) {
                v1112[1] = v1112[0];
              }
              operator delete(v1112[0]);
            }
            long long v1116 = 0u;
            long long v1117 = 0u;
            *(_OWORD *)v1115 = 0u;
            LODWORD(v1112[0]) = 0;
            if ((void)v1119 != __src.n128_u64[1])
            {
              unint64_t v392 = (void *)(__src.n128_u64[1] + 8 * ((unint64_t)v1120 >> 11));
              float64_t v393 = (unsigned __int16 *)(*v392 + 2 * (v1120 & 0x7FF));
              uint64_t v1025 = *(void *)(__src.n128_u64[1]
                                + (((*((void *)&v1120 + 1) + (void)v1120) >> 8) & 0xFFFFFFFFFFFFF8))
                    + 2 * ((*((void *)&v1120 + 1) + v1120) & 0x7FF);
              if (v393 != (unsigned __int16 *)v1025) {
                break;
              }
            }
LABEL_649:
            std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1115);
            std::deque<unsigned short>::~deque[abi:ne180100](&__src);
            unint64_t v380 = ++v1026;
            if (v1037 <= v1026)
            {
              unint64_t v41 = *(void *)(a1 + 968);
              goto LABEL_652;
            }
          }
          unint64_t v394 = (void *)(v383 + 200 * v384);
          v1033 = v394 + 11;
          v1035 = v394 + 14;
          v1071 = v394 + 17;
          v1076 = v394 + 20;
          double v395 = 0.0;
          double v396 = 0.0;
          while (2)
          {
            uint64_t v1047 = *v393;
            v397 = (void **)v1115[1];
            v398 = (void **)v1116;
            *((void *)&v1117 + 1) = 0;
            unint64_t v399 = v1116 - (unint64_t)v1115[1];
            if ((unint64_t)v1116 - (unint64_t)v1115[1] >= 0x11)
            {
              do
              {
                operator delete(*v397);
                v398 = (void **)v1116;
                v397 = (void **)((char *)v1115[1] + 8);
                v1115[1] = v397;
                unint64_t v399 = v1116 - (void)v397;
              }
              while ((void)v1116 - (void)v397 > 0x10uLL);
            }
            unint64_t v400 = v399 >> 3;
            if (v400 == 1)
            {
              uint64_t v401 = 512;
LABEL_547:
              *(void *)&long long v1117 = v401;
            }
            else if (v400 == 2)
            {
              uint64_t v401 = 1024;
              goto LABEL_547;
            }
            unsigned int v402 = (void *)*v1043;
            if (!*v1043) {
              goto LABEL_554;
            }
            do
            {
              v403 = v402;
              unsigned int v402 = (void *)*v402;
            }
            while (v402);
            if (v403 == v1043 || v403[4] || (unint64_t v404 = v403[5], v404 > 8)) {
LABEL_554:
            }
              double v405 = 0.0;
            else {
              double v405 = dbl_1DD8CEC20[v404];
            }
            v1027 = v393;
            v1028 = v392;
            unint64_t v406 = v1041 + *(void *)&v405 * v1047;
            uint64_t v407 = *(void *)(*(void *)(*v1033 + ((*v1035 >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * *v1035);
            if (v406 < (*(void *)(*(void *)(*v1033 + ((*v1035 >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * *v1035
                                   + 8)
                       - v407) >> 3)
              double v395 = *(double *)(v407 + 8 * v406);
            LOWORD(v1112[0]) = v1026;
            unsigned __int16 v1066 = v1047;
            unsigned __int16 v408 = v1026;
            unsigned __int16 v1060 = v1026;
            unsigned __int16 v409 = v1026;
            WORD1(v1112[0]) = v1047;
            unsigned __int16 v1088 = v1026;
            LOWORD(v1109[0]) = v1026;
            unsigned __int16 v1081 = v1047;
            unint64_t v410 = v1026;
            if (v1037 > v1026)
            {
              while (1)
              {
                v411 = *(void **)(a1 + 968);
                if (v411[5] <= v410) {
                  std::__throw_out_of_range[abi:ne180100]("deque");
                }
                unint64_t v412 = v411[4] + v410;
                uint64_t v413 = *(void *)(v411[1] + 8 * (v412 / 0x14));
                unint64_t v414 = v412 % 0x14;
                uint64_t v415 = v413 + 200 * v414;
                unint64_t v418 = *(void **)(v415 + 184);
                int v417 = (void **)(v415 + 184);
                v416 = v418;
                if (v418)
                {
                  do
                  {
                    v419 = v416;
                    v416 = (void *)*v416;
                  }
                  while (v416);
                  if (v419 == v417 || v419[4] || (unint64_t v420 = v419[5] - 5, v420 > 3)) {
                    uint64_t v421 = -1;
                  }
                  else {
                    uint64_t v421 = qword_1DD8CEC00[v420];
                  }
                  uint64_t v1057 = v421;
                  unint64_t v422 = v1031;
                }
                else
                {
                  uint64_t v1057 = -1;
                  unint64_t v422 = v1031;
                }
                unint64_t v423 = *(void *)(*(void *)(a1 + 640) + 8 * ((*(void *)(a1 + 664) + v422) / 0x55))
                     + 48 * ((*(void *)(a1 + 664) + v422) % 0x55);
                unint64_t v424 = *(void *)(v423 + 32) + v410;
                uint64_t v425 = *(void *)(*(void *)(v423 + 8) + 8 * (v424 / 0x55));
                if (*(void *)(v425 + 48 * (v424 % 0x55) + 40))
                {
                  uint64_t v426 = v425 + 48 * (v424 % 0x55);
                  unint64_t v427 = *(void *)(v426 + 32) + v1047;
                  uint64_t v428 = *(void *)(*(void *)(v426 + 8) + 8 * (v427 / 0x55));
                  unint64_t v429 = v427 % 0x55;
                  BOOL v430 = (void *)(v428 + 48 * v429);
                  uint64_t v431 = v430[1];
                  if (v430[2] != v431)
                  {
                    unint64_t v432 = v430[4];
                    unint64_t v433 = (void *)(v431 + 8 * (v432 >> 11));
                    v434 = (_WORD *)(*v433 + 2 * (v432 & 0x7FF));
                    v1050 = (void *)(v428 + 48 * v429 + 40);
                    uint64_t v435 = *(void *)(v431 + (((*v1050 + v432) >> 8) & 0xFFFFFFFFFFFFF8))
                         + 2 * ((*v1050 + v432) & 0x7FF);
                    if (v434 != (_WORD *)v435) {
                      break;
                    }
                  }
                }
LABEL_633:
                LOWORD(v1109[0]) = ++v409;
                unint64_t v410 = v409;
                if (v1037 <= v409)
                {
                  v397 = (void **)v1115[1];
                  v398 = (void **)v1116;
                  unsigned __int16 v408 = v1060;
                  goto LABEL_635;
                }
              }
              unint64_t v436 = (void *)(v413 + 200 * v414);
              uint64_t v437 = v436 + 20;
              uint64_t v438 = v436 + 17;
              v1051 = v436 + 11;
              v1053 = v436 + 14;
              unsigned __int16 v439 = v1081;
              while (2)
              {
                LOWORD(__p[0]) = 0;
                uint64_t v440 = (unsigned __int16)*v434;
                LOWORD(__p[0]) = *v434;
                unint64_t v441 = *(void *)(a1 + 1104);
                if (v441 < 2) {
                  goto LABEL_577;
                }
                uint64_t v442 = *(void *)(*v1071 + 8 * (*v1076 / 0x55uLL));
                BOOL v443 = (unsigned __int16 *)(*(void *)(*(void *)(v442 + 48 * (*v1076 % 0x55uLL) + 8)
                                                      + (((*(void *)(v442 + 48 * (*v1076 % 0x55uLL) + 32)
                                                         + (unint64_t)v439) >> 7) & 0x1FFFFFFFFFFFFF8))
                                          + 4 * ((*(void *)(v442 + 48 * (*v1076 % 0x55uLL) + 32) + v439) & 0x3FFLL));
                unint64_t v444 = v443[1] - (unint64_t)*v443 + 1;
                unint64_t v445 = *(void *)(*v438 + 8 * (*v437 / 0x55uLL)) + 48 * (*v437 % 0x55uLL);
                double v446 = (unsigned __int16 *)(*(void *)(*(void *)(v445 + 8)
                                                      + (((unint64_t)(*(void *)(v445 + 32) + v440) >> 7) & 0x1FFFFFFFFFFFFF8))
                                          + 4 * ((*(void *)(v445 + 32) + v440) & 0x3FF));
                unint64_t v447 = v446[1] - (unint64_t)*v446;
                unint64_t v448 = v447 + 1;
                unint64_t v449 = v444 <= v447 + 1 ? v447 + 1 : v444;
                if (v449 <= v441)
                {
                  if (v444 >= v448)
                  {
                    if (v444 <= v448) {
                      goto LABEL_577;
                    }
                    std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(v1115, v1112);
                    if (v395 < v396) {
                      double v395 = v396;
                    }
                    double v463 = *v417;
                    if (!*v417) {
                      goto LABEL_621;
                    }
                    do
                    {
                      unint64_t v464 = v463;
                      double v463 = (void *)*v463;
                    }
                    while (v463);
                    if (v464 == v417 || v464[4] || (unint64_t v465 = v464[5], v465 > 8)) {
LABEL_621:
                    }
                      double v466 = 0.0;
                    else {
                      double v466 = dbl_1DD8CEC20[v465];
                    }
                    uint64_t v473 = (*v1053 >> 5) & 0x7FFFFFFFFFFFFF8;
                    unint64_t v474 = v1041 + *(void *)&v466 * v440;
                    uint64_t v475 = *(void *)(*(void *)(*v1051 + v473) + 16 * *v1053);
                    if (v474 < (*(void *)(*(void *)(*v1051 + v473) + 16 * *v1053 + 8) - v475) >> 3) {
                      *(double *)(v475 + 8 * v474) = v395;
                    }
                    unsigned __int16 v1066 = v440;
                    LOWORD(v1112[0]) = v409;
                    WORD1(v1112[0]) = v440;
                    unsigned __int16 v1060 = v409;
                    unsigned __int16 v1088 = v409;
                    unsigned __int16 v1081 = v440;
                    unsigned __int16 v439 = v440;
                  }
                  else
                  {
                    std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(v1115, v1109, __p);
                    if (v395 < v396) {
                      double v395 = v396;
                    }
                    uint64_t v456 = (void *)*v1043;
                    if (!*v1043) {
                      goto LABEL_610;
                    }
                    do
                    {
                      uint64_t v457 = v456;
                      uint64_t v456 = (void *)*v456;
                    }
                    while (v456);
                    if (v457 == v1043 || v457[4] || (unint64_t v458 = v457[5], v458 > 8)) {
LABEL_610:
                    }
                      double v459 = 0.0;
                    else {
                      double v459 = dbl_1DD8CEC20[v458];
                    }
                    unint64_t v467 = v1041 + *(void *)&v459 * v1047;
                    uint64_t v468 = *(void *)(*(void *)(*v1033 + ((*v1035 >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * *v1035);
                    if (v467 < (*(void *)(*(void *)(*v1033 + ((*v1035 >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * *v1035
                                           + 8)
                               - v468) >> 3)
                      *(double *)(v468 + 8 * v467) = v395;
                  }
                }
                else
                {
LABEL_577:
                  double v450 = 0.0;
                  if (!*(unsigned char *)(a1 + 1113))
                  {
                    if (*(unsigned char *)(a1 + 1112) && (*v1050 == 1 ? (BOOL v451 = v1026 + v409 == 1) : (BOOL v451 = 0), v451))
                    {
                      if (!nms::PyramidNMS<unsigned short,double,unsigned char>::isQuadSizeEqualOrLarger(*(void **)(a1 + 968), v1088, v439, v409, v440))
                      {
                        double v469 = *v417;
                        if (!*v417) {
                          goto LABEL_625;
                        }
                        do
                        {
                          uint64_t v470 = v469;
                          double v469 = (void *)*v469;
                        }
                        while (v469);
                        if (v470 == v417 || v470[4] || (unint64_t v471 = v470[5], v471 > 8)) {
LABEL_625:
                        }
                          double v472 = 0.0;
                        else {
                          double v472 = dbl_1DD8CEC20[v471];
                        }
                        uint64_t v476 = (*v1053 >> 5) & 0x7FFFFFFFFFFFFF8;
                        unint64_t v461 = v1057 + *(void *)&v472 * v440;
                        uint64_t v462 = *(void *)(*(void *)(*v1051 + v476) + 16 * *v1053);
                        double v395 = 0.0;
                        double v450 = v396;
                        if (v461 < (*(void *)(*(void *)(*v1051 + v476) + 16 * *v1053 + 8) - v462) >> 3) {
LABEL_600:
                        }
                          double v450 = *(double *)(v462 + 8 * v461);
                      }
                    }
                    else
                    {
                      v452 = *v417;
                      if (!*v417) {
                        goto LABEL_598;
                      }
                      do
                      {
                        v453 = v452;
                        v452 = (void *)*v452;
                      }
                      while (v452);
                      if (v453 == v417 || v453[4] || (unint64_t v454 = v453[5], v454 > 8)) {
LABEL_598:
                      }
                        double v455 = 0.0;
                      else {
                        double v455 = dbl_1DD8CEC20[v454];
                      }
                      uint64_t v460 = (*v1053 >> 5) & 0x7FFFFFFFFFFFFF8;
                      unint64_t v461 = v1057 + *(void *)&v455 * v440;
                      uint64_t v462 = *(void *)(*(void *)(*v1051 + v460) + 16 * *v1053);
                      if (v461 < (*(void *)(*(void *)(*v1051 + v460) + 16 * *v1053 + 8) - v462) >> 3) {
                        goto LABEL_600;
                      }
                      double v450 = v396;
                    }
                  }
                  if (v450 <= v395)
                  {
                    std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(v1115, v1109, __p);
                    double v396 = v450;
                  }
                  else
                  {
                    std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(v1115, v1112);
                    LOWORD(v1112[0]) = v409;
                    unsigned __int16 v1066 = v440;
                    unsigned __int16 v1060 = v409;
                    unsigned __int16 v1088 = v409;
                    WORD1(v1112[0]) = v440;
                    unsigned __int16 v1081 = v440;
                    unsigned __int16 v439 = v440;
                    double v396 = v450;
                    double v395 = v450;
                  }
                }
                if ((_WORD *)((char *)++v434 - *v433) == (_WORD *)4096)
                {
                  unint64_t v477 = (_WORD *)v433[1];
                  ++v433;
                  v434 = v477;
                }
                if (v434 == (_WORD *)v435) {
                  goto LABEL_633;
                }
                continue;
              }
            }
LABEL_635:
            if (v398 == v397)
            {
              uint64_t v482 = *(void *)(a1 + 136);
              uint64_t v483 = *(void *)(a1 + 112);
            }
            else
            {
              unint64_t v478 = &v397[(unint64_t)v1117 >> 10];
              v479 = (char *)*v478;
              v480 = (unsigned __int16 *)((char *)*v478 + 4 * (v1117 & 0x3FF));
              uint64_t v481 = *(uint64_t *)((char *)v397 + (((*((void *)&v1117 + 1) + (void)v1117) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((*((void *)&v1117 + 1) + v1117) & 0x3FF);
              uint64_t v482 = *(void *)(a1 + 136);
              uint64_t v483 = *(void *)(a1 + 112);
              while (v480 != (unsigned __int16 *)v481)
              {
                uint64_t v484 = *v480;
                uint64_t v485 = v480[1];
                uint64_t v486 = *(void *)(*(void *)(v483 + (((unint64_t)(v482 + v484) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v482 + v484));
                if (!*(unsigned char *)(v486 + v485)
                  || (uint64_t v487 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                   + (((unint64_t)(*(void *)(a1 + 88) + v484) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(unsigned char *)(a1 + 88) + v484)),
                      *(unsigned char *)(v487 + v485)))
                {
                  nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, *v480, v480[1]);
                  uint64_t v482 = *(void *)(a1 + 136);
                  uint64_t v483 = *(void *)(a1 + 112);
                  uint64_t v487 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                               + (((unint64_t)(*(void *)(a1 + 88) + v484) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(unsigned char *)(a1 + 88) + v484));
                  uint64_t v486 = *(void *)(*(void *)(v483 + (((unint64_t)(v482 + v484) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v482 + v484));
                  v479 = (char *)*v478;
                }
                *(unsigned char *)(v487 + v485) = 0;
                *(unsigned char *)(v486 + v485) = 1;
                *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                 + (((unint64_t)(*(void *)(a1 + 184) + v484) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(unsigned char *)(a1 + 184) + v484))
                         + v485) = 0;
                v480 += 2;
                if ((char *)v480 - v479 == 4096)
                {
                  uint64_t v488 = (unsigned __int16 *)v478[1];
                  ++v478;
                  v479 = (char *)v488;
                  v480 = v488;
                }
              }
            }
            uint64_t v489 = *(void *)(*(void *)(v483 + (((v482 + (unint64_t)v408) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v482 + v408));
            if (!(*(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 688)
                                                              + (((*(void *)(a1 + 712) + (unint64_t)v408) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                  + 16 * (*(unsigned char *)(a1 + 712) + v408))
                                      + v1066) | *(unsigned __int8 *)(v489 + v1066) | *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 784) + (((*(void *)(a1 + 808) + (unint64_t)v408) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (*(unsigned char *)(a1 + 808) + v408)) + v1066) | *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 880) + (((*(void *)(a1 + 904) + (unint64_t)v408) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (*(unsigned char *)(a1 + 904) + v408)) + v1066)))
            {
              *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 64)
                                               + (((*(void *)(a1 + 88) + (unint64_t)v408) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(unsigned char *)(a1 + 88) + v408))
                       + v1066) = 1;
              *(unsigned char *)(v489 + v1066) = 0;
              *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                               + (((*(void *)(a1 + 184) + (unint64_t)v408) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(unsigned char *)(a1 + 184) + v408))
                       + v1066) = 0;
            }
            unint64_t v392 = v1028;
            float64_t v393 = v1027 + 1;
            if ((unsigned __int16 *)((char *)v1027 - *v1028 + 2) == (unsigned __int16 *)4096)
            {
              unint64_t v392 = v1028 + 1;
              float64_t v393 = (unsigned __int16 *)v1028[1];
            }
            if (v393 == (unsigned __int16 *)v1025) {
              goto LABEL_649;
            }
            continue;
          }
        }
      }
    }
  }
  else
  {
    v1039 = (unsigned char *)(a1 + 1098);
  }
LABEL_652:
  if (*(unsigned char *)(a1 + 1099))
  {
    long long v1119 = 0u;
    long long v1120 = 0u;
    __n128 __src = 0u;
    if (v41)
    {
      unint64_t v490 = *(void *)(v41 + 40);
      LOWORD(__p[0]) = 0;
      if (v490)
      {
        unsigned __int16 v491 = 0;
        uint64_t v492 = 0;
        do
        {
          v493 = (unsigned __int8 **)(*(void *)(*(void *)(a1 + 688)
                                                + (((unint64_t)(*(void *)(a1 + 712) + v492) >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * (*(unsigned char *)(a1 + 712) + v492));
          LOBYTE(v1103[0]) = 0;
          std::__val_expr<std::_BinaryOp<std::greater<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(v1109, *v493, v493[1], (unsigned __int8 *)v1103);
          v494 = (uint64_t *)(*(void *)(*(void *)(a1 + 784)
                                       + (((*(void *)(a1 + 808) + (unint64_t)v491) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (*(unsigned char *)(a1 + 808) + v491));
          uint64_t v496 = *v494;
          uint64_t v495 = v494[1];
          uint64_t v497 = v495 - v496;
          if (v495 == v496)
          {
            float64x2_t v499 = 0;
          }
          else
          {
            uint64_t v498 = operator new(v495 - v496);
            float64x2_t v499 = v498;
            uint64_t v500 = 0;
            do
            {
              v498[v500] = *(unsigned char *)(v496 + v500) == 0;
              ++v500;
            }
            while (v497 != v500);
          }
          unint64_t v501 = *(void *)(a1 + 136) + v491;
          uint64_t v502 = *(void *)(*(void *)(a1 + 112) + ((v501 >> 5) & 0x7FFFFFFFFFFFFF8));
          v1112[0] = 0;
          v1112[1] = 0;
          float64x2_t v503 = v1109[0];
          int64_t v504 = (char *)v1109[1] - (char *)v1109[0];
          if (v1109[1] == v1109[0])
          {
            double v506 = 0;
          }
          else
          {
            float64x2_t v505 = (char *)operator new((char *)v1109[1] - (char *)v1109[0]);
            double v506 = v505;
            uint64_t v507 = 0;
            v1112[0] = v505;
            uint64_t v508 = *(void *)(v502 + 16 * v501);
            do
            {
              v505[v507] = v499[v507] & v503[v507] & ~*(unsigned char *)(v508 + v507);
              ++v507;
            }
            while (v504 != v507);
            v1112[1] = &v505[v507];
          }
          nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)v1115, (uint64_t)v1112);
          if (v506) {
            operator delete(v506);
          }
          if (v499) {
            operator delete(v499);
          }
          if (v1109[0])
          {
            if (v1109[1] != v1109[0]) {
              v1109[1] = v1109[0];
            }
            operator delete(v1109[0]);
          }
          if ((void *)v1116 != v1115[1])
          {
            uint64_t v509 = (char *)v1115[1] + 8 * ((unint64_t)v1117 >> 11);
            unint64_t v510 = (_WORD *)(*v509 + 2 * (v1117 & 0x7FF));
            uint64_t v511 = *(void *)((char *)v1115[1] + (((*((void *)&v1117 + 1) + (void)v1117) >> 8) & 0xFFFFFFFFFFFFF8))
                 + 2 * ((*((void *)&v1117 + 1) + v1117) & 0x7FF);
            while (v510 != (_WORD *)v511)
            {
              LOWORD(v1112[0]) = 0;
              LOWORD(v1112[0]) = *v510;
              std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(&__src, __p, v1112);
              if ((_WORD *)((char *)++v510 - *v509) == (_WORD *)4096)
              {
                uint64_t v512 = (_WORD *)v509[1];
                ++v509;
                unint64_t v510 = v512;
              }
            }
          }
          std::deque<unsigned short>::~deque[abi:ne180100](v1115);
          LOWORD(__p[0]) = ++v491;
          uint64_t v492 = v491;
        }
        while (v490 > v491);
        uint64_t v513 = *((void *)&v1120 + 1);
        if (*((void *)&v1120 + 1))
        {
          while (1)
          {
            unint64_t v514 = (unsigned __int16 *)(*(void *)(__src.n128_u64[1]
                                                  + (((unint64_t)v1120 >> 7) & 0x1FFFFFFFFFFFFF8))
                                      + 4 * (v1120 & 0x3FF));
            uint64_t v515 = *v514;
            uint64_t v516 = v514[1];
            *(void *)&long long v1120 = v1120 + 1;
            *((void *)&v1120 + 1) = v513 - 1;
            if ((unint64_t)v1120 >= 0x800)
            {
              operator delete(*(void **)__src.n128_u64[1]);
              __src.n128_u64[1] += 8;
              *(void *)&long long v1120 = v1120 - 1024;
            }
            if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 112)
                                                   + (((unint64_t)(*(void *)(a1 + 136) + v515) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(unsigned char *)(a1 + 136) + v515))
                           + v516))
              break;
LABEL_776:
            uint64_t v513 = *((void *)&v1120 + 1);
            if (!*((void *)&v1120 + 1)) {
              goto LABEL_777;
            }
          }
          long long v1116 = 0u;
          long long v1117 = 0u;
          *(_OWORD *)v1115 = 0u;
          nms::PyramidNMS<unsigned short,double,unsigned char>::getContainedDatums((void *)a1, v515, v516, v1115);
          double v517 = (char *)v1115[1] + 8 * ((unint64_t)v1117 >> 10);
          if ((void *)v1116 == v1115[1])
          {
            double v518 = 0;
            uint64_t v520 = 0;
            v519 = (char *)v1115[1] + 8 * ((*((void *)&v1117 + 1) + (void)v1117) >> 10);
          }
          else
          {
            double v518 = (int *)(*(void *)v517 + 4 * (v1117 & 0x3FF));
            v519 = (char *)v1115[1] + 8 * ((*((void *)&v1117 + 1) + (void)v1117) >> 10);
            uint64_t v520 = *(void *)v519 + 4 * ((WORD4(v1117) + (_WORD)v1117) & 0x3FF);
          }
          long long v1113 = 0u;
          long long v1114 = 0u;
          *(_OWORD *)v1112 = 0u;
          if ((int *)v520 == v518)
          {
            v525 = 0;
            uint64_t v524 = 0;
            uint64_t v523 = 0;
          }
          else
          {
            uint64_t v521 = ((v520 - *(void *)v519) >> 2) + ((v519 - v517) << 7);
            uint64_t v522 = (uint64_t)v518 - *(void *)v517;
            uint64_t v523 = v521 - (v522 >> 2);
            if (v521 == v522 >> 2)
            {
              v525 = 0;
              uint64_t v524 = 0;
            }
            else
            {
              std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(v1112, v521 - (v522 >> 2));
              uint64_t v524 = *((void *)&v1114 + 1);
              v525 = (char *)v1112[1] + 8 * (((void)v1114 + *((void *)&v1114 + 1)) >> 10);
              if ((void *)v1113 != v1112[1])
              {
                uint64_t v526 = *v525 + 4 * (((_WORD)v1114 + WORD4(v1114)) & 0x3FF);
LABEL_694:
                v527 = std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v525, v526, v523);
                while (v526 != v528)
                {
                  double v529 = (_DWORD *)(v525 == v527 ? v528 : *v525 + 4096);
                  if ((_DWORD *)v526 == v529)
                  {
                    double v529 = (_DWORD *)v526;
                  }
                  else
                  {
                    BOOL v530 = (_DWORD *)v526;
                    do
                    {
                      int v531 = *v518++;
                      *v530++ = v531;
                      if ((int *)((char *)v518 - *(void *)v517) == (int *)4096)
                      {
                        v532 = (int *)*((void *)v517 + 1);
                        v517 += 8;
                        double v518 = v532;
                      }
                    }
                    while (v530 != v529);
                    uint64_t v524 = *((void *)&v1114 + 1);
                  }
                  v524 += ((uint64_t)v529 - v526) >> 2;
                  *((void *)&v1114 + 1) = v524;
                  if (v525 == v527) {
                    break;
                  }
                  uint64_t v533 = v525[1];
                  ++v525;
                  uint64_t v526 = v533;
                }
                long long v1110 = 0u;
                long long v1111 = 0u;
                long long v1108 = 0u;
                *(_OWORD *)v1109 = 0u;
                *(_OWORD *)__p = 0u;
                long long v1107 = 0u;
                nms::PyramidNMS<unsigned short,double,unsigned char>::processContainmentOfOneDatum(a1, v515, v516, v1112, __p, v1109);
                uint64_t v534 = *(void *)(a1 + 136);
                uint64_t v535 = *(void *)(a1 + 112);
                uint64_t v536 = *(void *)(*(void *)(v535 + (((unint64_t)(v534 + v515) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v534 + v515));
                uint64_t v537 = *(void *)(a1 + 184);
                uint64_t v538 = *(void *)(a1 + 160);
                if (*(unsigned char *)(v536 + v516))
                {
                  int v539 = 1;
LABEL_748:
                  uint64_t v565 = *(void *)(*(void *)(v538 + (((unint64_t)(v537 + v515) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v537 + v515));
                  int v566 = *(unsigned __int8 *)(v565 + v516) | v539;
                  uint64_t v567 = *(void *)(a1 + 88);
                  uint64_t v568 = *(void *)(a1 + 64);
                  uint64_t v569 = *(void *)(*(void *)(v568 + (((unint64_t)(v567 + v515) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v567 + v515));
                  v566 ^= 1u;
                  *(unsigned char *)(v569 + v516) = v566;
                  if (v566)
                  {
                    *(unsigned char *)(v569 + v516) = 1;
                    *(unsigned char *)(v536 + v516) = 0;
                    *(unsigned char *)(v565 + v516) = 0;
                    if ((void *)v1116 != v1115[1])
                    {
                      unint64_t v570 = (unsigned __int16 **)((char *)v1115[1] + 8 * ((unint64_t)v1117 >> 10));
                      unint64_t v571 = *v570;
                      uint64_t v572 = &(*v570)[2 * (v1117 & 0x3FF)];
                      uint64_t v573 = *(void *)((char *)v1115[1]
                                       + (((*((void *)&v1117 + 1) + (void)v1117) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * ((*((void *)&v1117 + 1) + v1117) & 0x3FF);
                      while (v572 != (unsigned __int16 *)v573)
                      {
                        uint64_t v574 = *v572;
                        uint64_t v575 = v572[1];
                        if ((void *)v1110 == v1109[1]) {
                          goto LABEL_761;
                        }
                        v576 = (unsigned __int16 **)((char *)v1109[1] + 8 * ((unint64_t)v1111 >> 10));
                        double v577 = *v576;
                        unint64_t v578 = &(*v576)[2 * (v1111 & 0x3FF)];
                        uint64_t v579 = *(void *)((char *)v1109[1]
                                         + (((*((void *)&v1111 + 1) + (void)v1111) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((*((void *)&v1111 + 1) + v1111) & 0x3FF);
                        if (v578 != (unsigned __int16 *)v579)
                        {
                          while (__PAIR64__(v578[1], *v578) != __PAIR64__(v575, v574))
                          {
                            v578 += 2;
                            if ((char *)v578 - (char *)v577 == 4096)
                            {
                              v580 = v576[1];
                              ++v576;
                              double v577 = v580;
                              unint64_t v578 = v580;
                            }
                            if (v578 == (unsigned __int16 *)v579) {
                              goto LABEL_761;
                            }
                          }
                        }
                        if (v578 == (unsigned __int16 *)v579)
                        {
LABEL_761:
                          uint64_t v583 = *(void *)(*(void *)(v535
                                                       + (((unint64_t)(v534 + v574) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (v534 + v574));
                          if (!*(unsigned char *)(v583 + v575)
                            || (uint64_t v584 = *(void *)(*(void *)(v568
                                                             + (((unint64_t)(v567 + v574) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (v567 + v574)),
                                *(unsigned char *)(v584 + v575)))
                          {
                            nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, *v572, v572[1]);
                            uint64_t v567 = *(void *)(a1 + 88);
                            uint64_t v568 = *(void *)(a1 + 64);
                            uint64_t v534 = *(void *)(a1 + 136);
                            uint64_t v535 = *(void *)(a1 + 112);
                            uint64_t v584 = *(void *)(*(void *)(v568
                                                         + (((unint64_t)(v567 + v574) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v567 + v574));
                            uint64_t v583 = *(void *)(*(void *)(v535
                                                         + (((unint64_t)(v534 + v574) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v534 + v574));
                            uint64_t v537 = *(void *)(a1 + 184);
                            uint64_t v538 = *(void *)(a1 + 160);
                            unint64_t v571 = *v570;
                          }
                          char v582 = 0;
                          *(unsigned char *)(v584 + v575) = 0;
                          *(unsigned char *)(v583 + v575) = 1;
                          unint64_t v581 = v537 + v574;
                        }
                        else
                        {
                          *(unsigned char *)(*(void *)(*(void *)(v568
                                                           + (((unint64_t)(v567 + v574) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v567 + v574))
                                   + v575) = 0;
                          *(unsigned char *)(*(void *)(*(void *)(v535
                                                           + (((unint64_t)(v534 + v574) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v534 + v574))
                                   + v575) = 0;
                          unint64_t v581 = v537 + v574;
                          char v582 = 1;
                        }
                        *(unsigned char *)(*(void *)(*(void *)(v538 + ((v581 >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * v581)
                                 + v575) = v582;
                        v572 += 2;
                        if ((char *)v572 - (char *)v571 == 4096)
                        {
                          v585 = v570[1];
                          ++v570;
                          unint64_t v571 = v585;
                          uint64_t v572 = v585;
                        }
                      }
                    }
                  }
                  else if (*(unsigned char *)(v536 + v516) && (void *)v1116 != v1115[1])
                  {
                    double v586 = (char *)v1115[1] + 8 * ((unint64_t)v1117 >> 10);
                    uint64_t v587 = (unsigned __int16 *)(*v586 + 4 * (v1117 & 0x3FF));
                    uint64_t v588 = *(void *)((char *)v1115[1]
                                     + (((*((void *)&v1117 + 1) + (void)v1117) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((*((void *)&v1117 + 1) + v1117) & 0x3FF);
                    while (v587 != (unsigned __int16 *)v588)
                    {
                      nms::PyramidNMS<unsigned short,double,unsigned char>::computeConstitutedIndices((uint64_t)v1103, (void *)a1, *v587, v587[1], v1024);
                      if (!*((void *)&v1105 + 1)) {
                        std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(&__src, v587);
                      }
                      std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1103);
                      v587 += 2;
                      if ((unsigned __int16 *)((char *)v587 - *v586) == (unsigned __int16 *)4096)
                      {
                        unint64_t v589 = (unsigned __int16 *)v586[1];
                        ++v586;
                        uint64_t v587 = v589;
                      }
                    }
                  }
                  std::deque<std::pair<int,int>>::~deque[abi:ne180100](__p);
                  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1109);
                  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1112);
                  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1115);
                  goto LABEL_776;
                }
                if (*(unsigned char *)(*(void *)(*(void *)(v538
                                                      + (((unint64_t)(v537 + v515) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * (v537 + v515))
                              + v516))
                {
                  int v539 = 0;
                  goto LABEL_748;
                }
                int v539 = *(unsigned __int8 *)(a1 + 1128);
                if (!*(unsigned char *)(a1 + 1128)) {
                  goto LABEL_748;
                }
                long long v1104 = 0u;
                long long v1105 = 0u;
                *(_OWORD *)v1103 = 0u;
                if (nms::PyramidNMS<unsigned short,double,unsigned char>::getOverlappingDatums((void *)a1, v515, v516, v1103, 0))
                {
                  v540 = (void **)__p[1];
                  *((void *)&v1108 + 1) = 0;
                  unint64_t v541 = v1107 - (unint64_t)__p[1];
                  if ((unint64_t)v1107 - (unint64_t)__p[1] >= 0x11)
                  {
                    do
                    {
                      operator delete(*v540);
                      v540 = (void **)((char *)__p[1] + 8);
                      __p[1] = v540;
                      unint64_t v541 = v1107 - (void)v540;
                    }
                    while ((void)v1107 - (void)v540 > 0x10uLL);
                  }
                  if (v541 >> 3 == 1)
                  {
                    uint64_t v542 = 256;
LABEL_720:
                    *(void *)&long long v1108 = v542;
                  }
                  else if (v541 >> 3 == 2)
                  {
                    uint64_t v542 = 512;
                    goto LABEL_720;
                  }
                  if ((void *)v1104 != v1103[1])
                  {
                    uint64_t v543 = (char *)v1103[1] + 8 * ((unint64_t)v1105 >> 10);
                    unint64_t v544 = (unsigned __int16 *)(*v543 + 4 * (v1105 & 0x3FF));
                    uint64_t v545 = *(void *)((char *)v1103[1]
                                     + (((*((void *)&v1105 + 1) + (void)v1105) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((*((void *)&v1105 + 1) + v1105) & 0x3FF);
                    while (v544 != (unsigned __int16 *)v545)
                    {
                      v1100[0] = (void *)(*v544 ^ (16 * v544[1]));
                      std::deque<unsigned long>::push_back(__p, v1100);
                      v544 += 2;
                      if ((unsigned __int16 *)((char *)v544 - *v543) == (unsigned __int16 *)4096)
                      {
                        v546 = (unsigned __int16 *)v543[1];
                        ++v543;
                        unint64_t v544 = v546;
                      }
                    }
                  }
                  v547 = (void **)v1112[1];
                  v548 = (void **)v1113;
                  *((void *)&v1114 + 1) = 0;
                  unint64_t v549 = v1113 - (unint64_t)v1112[1];
                  if ((unint64_t)v1113 - (unint64_t)v1112[1] >= 0x11)
                  {
                    do
                    {
                      operator delete(*v547);
                      v548 = (void **)v1113;
                      v547 = (void **)((char *)v1112[1] + 8);
                      v1112[1] = v547;
                      unint64_t v549 = v1113 - (void)v547;
                    }
                    while ((void)v1113 - (void)v547 > 0x10uLL);
                  }
                  unint64_t v550 = v549 >> 3;
                  if (v550 == 1)
                  {
                    uint64_t v551 = 512;
LABEL_732:
                    *(void *)&long long v1114 = v551;
                  }
                  else
                  {
                    if (v550 == 2)
                    {
                      uint64_t v551 = 1024;
                      goto LABEL_732;
                    }
                    uint64_t v551 = v1114;
                  }
                  unint64_t v552 = *((void *)&v1114 + 1) + v551;
                  unint64_t v553 = (char *)&v547[v552 >> 10];
                  if (v548 == v547) {
                    uint64_t v554 = 0;
                  }
                  else {
                    uint64_t v554 = *(void *)v553 + 4 * (v552 & 0x3FF);
                  }
                  v555 = (uint64_t *)((char *)v1115[1] + 8 * ((unint64_t)v1117 >> 10));
                  if ((void *)v1116 == v1115[1])
                  {
                    double v556 = 0;
                    unint64_t v558 = 0;
                    uint64_t v557 = (uint64_t *)((char *)v1115[1] + 8 * ((*((void *)&v1117 + 1) + (void)v1117) >> 10));
                  }
                  else
                  {
                    double v556 = (int *)(*v555 + 4 * (v1117 & 0x3FF));
                    uint64_t v557 = (uint64_t *)((char *)v1115[1] + 8 * ((*((void *)&v1117 + 1) + (void)v1117) >> 10));
                    unint64_t v558 = (int *)(*v557 + 4 * ((*((void *)&v1117 + 1) + v1117) & 0x3FF));
                  }
                  std::deque<std::pair<unsigned short,unsigned short>>::insert<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>((int64x2_t *)v1112, v553, v554, v555, v556, v557, v558);
                  unint64_t v559 = (char *)v1112[1] + 8 * (((void)v1114 + *((void *)&v1114 + 1)) >> 10);
                  if ((void *)v1113 == v1112[1]) {
                    uint64_t v560 = 0;
                  }
                  else {
                    uint64_t v560 = *(void *)v559 + 4 * (((_WORD)v1114 + WORD4(v1114)) & 0x3FF);
                  }
                  uint64_t v561 = (uint64_t *)((char *)v1103[1] + 8 * ((unint64_t)v1105 >> 10));
                  if ((void *)v1104 == v1103[1])
                  {
                    unint64_t v562 = 0;
                    v564 = 0;
                    unint64_t v563 = (uint64_t *)((char *)v1103[1] + 8 * ((*((void *)&v1105 + 1) + (void)v1105) >> 10));
                  }
                  else
                  {
                    unint64_t v562 = (int *)(*v561 + 4 * (v1105 & 0x3FF));
                    unint64_t v563 = (uint64_t *)((char *)v1103[1] + 8 * ((*((void *)&v1105 + 1) + (void)v1105) >> 10));
                    v564 = (int *)(*v563 + 4 * ((*((void *)&v1105 + 1) + v1105) & 0x3FF));
                  }
                  std::deque<std::pair<unsigned short,unsigned short>>::insert<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>((int64x2_t *)v1112, v559, v560, v561, v562, v563, v564);
                  nms::PyramidNMS<unsigned short,double,unsigned char>::processContainmentOfOneDatum(a1, v515, v516, v1112, __p, v1109);
                }
                std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1103);
                uint64_t v534 = *(void *)(a1 + 136);
                uint64_t v535 = *(void *)(a1 + 112);
                uint64_t v537 = *(void *)(a1 + 184);
                uint64_t v538 = *(void *)(a1 + 160);
                uint64_t v536 = *(void *)(*(void *)(v535 + (((unint64_t)(v534 + v515) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v534 + v515));
                int v539 = *(unsigned __int8 *)(v536 + v516);
                goto LABEL_748;
              }
            }
          }
          uint64_t v526 = 0;
          goto LABEL_694;
        }
      }
    }
LABEL_777:
    std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&__src);
    unint64_t v41 = *(void *)(a1 + 968);
  }
  if (!*(unsigned char *)(a1 + 1100)) {
    goto LABEL_994;
  }
  if (!v41)
  {
    unint64_t v590 = 0;
    uint64_t v613 = 0;
    unint64_t v612 = 0;
    long long v1119 = 0u;
    long long v1120 = 0u;
    __n128 __src = 0u;
LABEL_804:
    char v1072 = 1;
    goto LABEL_805;
  }
  unint64_t v590 = *(void *)(v41 + 40);
  long long v1119 = 0u;
  long long v1120 = 0u;
  __n128 __src = 0u;
  LOWORD(v1109[0]) = 0;
  if (!v590)
  {
    uint64_t v613 = 0;
    unint64_t v612 = 0;
    unint64_t v41 = 0;
    goto LABEL_804;
  }
  int v591 = 0;
  uint64_t v592 = 0;
  do
  {
    v593 = (uint64_t *)(*(void *)(*(void *)(a1 + 880)
                                 + (((unint64_t)(*(void *)(a1 + 904) + v592) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*(unsigned char *)(a1 + 904) + v592));
    unint64_t v594 = *(void *)(a1 + 136) + v592;
    uint64_t v595 = *(void *)(*(void *)(a1 + 112) + ((v594 >> 5) & 0x7FFFFFFFFFFFFF8));
    uint64_t v596 = *v593;
    unint64_t v597 = *(void *)(a1 + 88) + v592;
    uint64_t v598 = *(void *)(*(void *)(a1 + 64) + ((v597 >> 5) & 0x7FFFFFFFFFFFFF8));
    v1112[0] = 0;
    v1112[1] = 0;
    uint64_t v599 = v593[1];
    uint64_t v600 = v599 - v596;
    if (v599 == v596)
    {
      v602 = 0;
    }
    else
    {
      uint64_t v601 = (char *)operator new(v599 - v596);
      v602 = v601;
      uint64_t v603 = 0;
      v1112[0] = v601;
      uint64_t v604 = *(void *)(v595 + 16 * v594);
      uint64_t v605 = *(void *)(v598 + 16 * v597);
      do
      {
        if (*(unsigned char *)(v596 + v603)) {
          BOOL v606 = (*(unsigned __int8 *)(v605 + v603) | *(unsigned __int8 *)(v604 + v603)) == 0;
        }
        else {
          BOOL v606 = 0;
        }
        char v607 = v606;
        v601[v603++] = v607;
      }
      while (v600 != v603);
      v1112[1] = &v601[v603];
    }
    nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)v1115, (uint64_t)v1112);
    if (v602) {
      operator delete(v602);
    }
    if ((void *)v1116 != v1115[1])
    {
      double v608 = (char *)v1115[1] + 8 * ((unint64_t)v1117 >> 11);
      unint64_t v609 = (_WORD *)(*v608 + 2 * (v1117 & 0x7FF));
      uint64_t v610 = *(void *)((char *)v1115[1] + (((*((void *)&v1117 + 1) + (void)v1117) >> 8) & 0xFFFFFFFFFFFFF8))
           + 2 * ((*((void *)&v1117 + 1) + v1117) & 0x7FF);
      while (v609 != (_WORD *)v610)
      {
        LOWORD(v1112[0]) = 0;
        LOWORD(v1112[0]) = *v609;
        std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(&__src, v1109, v1112);
        if ((_WORD *)((char *)++v609 - *v608) == (_WORD *)4096)
        {
          uint64_t v611 = (_WORD *)v608[1];
          ++v608;
          unint64_t v609 = v611;
        }
      }
    }
    std::deque<unsigned short>::~deque[abi:ne180100](v1115);
    LOWORD(v1109[0]) = ++v591;
    uint64_t v592 = (unsigned __int16)v591;
  }
  while (v590 > (unsigned __int16)v591);
  char v1072 = 0;
  unint64_t v612 = v1120;
  unint64_t v41 = __src.n128_u64[1];
  uint64_t v613 = v1119;
LABEL_805:
  long long v1116 = 0u;
  long long v1117 = 0u;
  long long v1114 = 0u;
  *(_OWORD *)v1115 = 0u;
  *(_OWORD *)v1112 = 0u;
  long long v1113 = 0u;
  long long v1110 = 0u;
  long long v1111 = 0u;
  long long v1108 = 0u;
  *(_OWORD *)v1109 = 0u;
  *(_OWORD *)__p = 0u;
  long long v1107 = 0u;
  if (v613 == v41)
  {
    long long v1104 = 0uLL;
    long long v1105 = 0uLL;
    long long v1102 = 0uLL;
    *(_OWORD *)v1103 = 0uLL;
    *(_OWORD *)v1100 = 0uLL;
    long long v1101 = 0uLL;
    goto LABEL_993;
  }
  unint64_t v614 = v612 >> 10;
  v615 = (void *)(v41 + 8 * (v612 >> 10));
  v616 = (unsigned __int16 *)(*v615 + 4 * (v612 & 0x3FF));
  uint64_t v617 = *(void *)(v41 + (((*((void *)&v1120 + 1) + v612) >> 7) & 0x1FFFFFFFFFFFFF8))
       + 4 * ((*((void *)&v1120 + 1) + v612) & 0x3FF);
  unint64_t v1082 = v590;
  if (v616 != (unsigned __int16 *)v617)
  {
    while (2)
    {
      unint64_t v618 = *v616;
      uint64_t v619 = v616[1];
      if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                            + (((*(void *)(a1 + 184) + v618) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (*(unsigned char *)(a1 + 184) + v618))
                    + v619))
      {
        double v620 = *(void **)(a1 + 968);
        if (v620[5] <= v618) {
          std::__throw_out_of_range[abi:ne180100]("deque");
        }
        unint64_t v621 = v620[4] + v618;
        uint64_t v622 = *(void *)(v620[1] + 8 * (v621 / 0x14));
        unint64_t v623 = v621 % 0x14;
        uint64_t v624 = v622 + 200 * v623;
        uint64_t v627 = *(void **)(v624 + 184);
        double v625 = (void *)(v624 + 184);
        double v626 = v627;
        if (!v627) {
          goto LABEL_817;
        }
        v628 = v626;
        do
        {
          uint64_t v629 = v628;
          v628 = (void *)*v628;
        }
        while (v628);
        if (v629 == v625 || v629[4] || (unint64_t v630 = v629[5] - 5, v630 > 3))
        {
LABEL_817:
          uint64_t v631 = -1;
          if (!v626) {
            goto LABEL_823;
          }
        }
        else
        {
          uint64_t v631 = qword_1DD8CEC00[v630];
          if (!v626) {
            goto LABEL_823;
          }
        }
        do
        {
          unint64_t v632 = v626;
          double v626 = (void *)*v626;
        }
        while (v626);
        if (v632 == v625 || v632[4] || (unint64_t v633 = v632[5], v633 > 8)) {
LABEL_823:
        }
          double v634 = 0.0;
        else {
          double v634 = dbl_1DD8CEC20[v633];
        }
        uint64_t v635 = (void *)(*(void *)(*(void *)(v622 + 200 * v623 + 88)
                                    + ((*(void *)(v622 + 200 * v623 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(void *)(v622 + 200 * v623 + 112));
        unint64_t v636 = v631 + *(void *)&v634 * v619;
        unint64_t v638 = v635;
        uint64_t v637 = *v635;
        double v639 = 0.0;
        if (v636 < (v638[1] - v637) >> 3) {
          double v639 = *(double *)(v637 + 8 * v636);
        }
        unint64_t v640 = (void **)v1112[1];
        *((void *)&v1114 + 1) = 0;
        unint64_t v641 = v1113 - (unint64_t)v1112[1];
        if ((unint64_t)v1113 - (unint64_t)v1112[1] >= 0x11)
        {
          do
          {
            operator delete(*v640);
            unint64_t v640 = (void **)((char *)v1112[1] + 8);
            v1112[1] = v640;
            unint64_t v641 = v1113 - (void)v640;
          }
          while ((void)v1113 - (void)v640 > 0x10uLL);
        }
        if (v641 >> 3 == 1)
        {
          uint64_t v642 = 512;
LABEL_832:
          *(void *)&long long v1114 = v642;
        }
        else if (v641 >> 3 == 2)
        {
          uint64_t v642 = 1024;
          goto LABEL_832;
        }
        v643 = (void **)v1109[1];
        *((void *)&v1111 + 1) = 0;
        unint64_t v644 = v1110 - (unint64_t)v1109[1];
        if ((unint64_t)v1110 - (unint64_t)v1109[1] >= 0x11)
        {
          do
          {
            operator delete(*v643);
            v643 = (void **)((char *)v1109[1] + 8);
            v1109[1] = v643;
            unint64_t v644 = v1110 - (void)v643;
          }
          while ((void)v1110 - (void)v643 > 0x10uLL);
        }
        if (v644 >> 3 == 1)
        {
          uint64_t v645 = 512;
LABEL_839:
          *(void *)&long long v1111 = v645;
        }
        else if (v644 >> 3 == 2)
        {
          uint64_t v645 = 1024;
          goto LABEL_839;
        }
        v646 = (void **)__p[1];
        *((void *)&v1108 + 1) = 0;
        unint64_t v647 = v1107 - (unint64_t)__p[1];
        if ((unint64_t)v1107 - (unint64_t)__p[1] >= 0x11)
        {
          do
          {
            operator delete(*v646);
            v646 = (void **)((char *)__p[1] + 8);
            __p[1] = v646;
            unint64_t v647 = v1107 - (void)v646;
          }
          while ((void)v1107 - (void)v646 > 0x10uLL);
        }
        if (v647 >> 3 == 1)
        {
          uint64_t v648 = 512;
LABEL_846:
          *(void *)&long long v1108 = v648;
        }
        else if (v647 >> 3 == 2)
        {
          uint64_t v648 = 1024;
          goto LABEL_846;
        }
        int ContainedDatums = nms::PyramidNMS<unsigned short,double,unsigned char>::getContainedDatums((void *)a1, v618, v619, v1109);
        if (ContainedDatums | nms::PyramidNMS<unsigned short,double,unsigned char>::getOverlappingDatums((void *)a1, v618, v619, __p, 1))
        {
          uint64_t v650 = (char *)v1112[1] + 8 * (((void)v1114 + *((void *)&v1114 + 1)) >> 10);
          if ((void *)v1113 == v1112[1]) {
            uint64_t v651 = 0;
          }
          else {
            uint64_t v651 = *(void *)v650 + 4 * (((_WORD)v1114 + WORD4(v1114)) & 0x3FF);
          }
          uint64_t v652 = (uint64_t *)((char *)v1109[1] + 8 * ((unint64_t)v1111 >> 10));
          if ((void *)v1110 == v1109[1])
          {
            unint64_t v653 = 0;
            unint64_t v655 = 0;
            unint64_t v654 = (uint64_t *)((char *)v1109[1] + 8 * ((*((void *)&v1111 + 1) + (void)v1111) >> 10));
          }
          else
          {
            unint64_t v653 = (int *)(*v652 + 4 * (v1111 & 0x3FF));
            unint64_t v654 = (uint64_t *)((char *)v1109[1] + 8 * ((*((void *)&v1111 + 1) + (void)v1111) >> 10));
            unint64_t v655 = (int *)(*v654 + 4 * ((*((void *)&v1111 + 1) + v1111) & 0x3FF));
          }
          std::deque<std::pair<unsigned short,unsigned short>>::insert<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>((int64x2_t *)v1112, v650, v651, v652, v653, v654, v655);
          uint64_t v656 = (char *)v1112[1] + 8 * (((void)v1114 + *((void *)&v1114 + 1)) >> 10);
          if ((void *)v1113 == v1112[1]) {
            uint64_t v657 = 0;
          }
          else {
            uint64_t v657 = *(void *)v656 + 4 * (((_WORD)v1114 + WORD4(v1114)) & 0x3FF);
          }
          v658 = (uint64_t *)((char *)__p[1] + 8 * ((unint64_t)v1108 >> 10));
          if ((void *)v1107 == __p[1])
          {
            unint64_t v659 = 0;
            uint64_t v661 = 0;
            uint64_t v660 = (uint64_t *)((char *)__p[1] + 8 * ((*((void *)&v1108 + 1) + (void)v1108) >> 10));
          }
          else
          {
            unint64_t v659 = (int *)(*v658 + 4 * (v1108 & 0x3FF));
            uint64_t v660 = (uint64_t *)((char *)__p[1] + 8 * ((*((void *)&v1108 + 1) + (void)v1108) >> 10));
            uint64_t v661 = (int *)(*v660 + 4 * ((*((void *)&v1108 + 1) + v1108) & 0x3FF));
          }
          std::deque<std::pair<unsigned short,unsigned short>>::insert<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>((int64x2_t *)v1112, v656, v657, v658, v659, v660, v661);
          if (nms::PyramidNMS<unsigned short,double,unsigned char>::computeAggregatedScore(a1, v1112) <= v639)
          {
            if ((void *)v1113 != v1112[1])
            {
              v664 = (unsigned __int16 **)((char *)v1112[1] + 8 * ((unint64_t)v1114 >> 10));
              v665 = *v664;
              uint64_t v666 = &(*v664)[2 * (v1114 & 0x3FF)];
              uint64_t v667 = *(void *)((char *)v1112[1]
                               + (((*((void *)&v1114 + 1) + (void)v1114) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((*((void *)&v1114 + 1) + v1114) & 0x3FF);
              if (v666 != (unsigned __int16 *)v667)
              {
                uint64_t v668 = *(void *)(a1 + 136);
                uint64_t v669 = *(void *)(a1 + 112);
                do
                {
                  uint64_t v670 = *v666;
                  uint64_t v671 = v666[1];
                  uint64_t v672 = *(void *)(*(void *)(v669 + (((unint64_t)(v668 + v670) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v668 + v670));
                  if (!*(unsigned char *)(v672 + v671)
                    || (uint64_t v673 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                     + (((unint64_t)(*(void *)(a1 + 88) + v670) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*(unsigned char *)(a1 + 88) + v670)),
                        *(unsigned char *)(v673 + v671)))
                  {
                    nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, *v666, v666[1]);
                    uint64_t v668 = *(void *)(a1 + 136);
                    uint64_t v669 = *(void *)(a1 + 112);
                    uint64_t v673 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                 + (((unint64_t)(*(void *)(a1 + 88) + v670) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(unsigned char *)(a1 + 88) + v670));
                    uint64_t v672 = *(void *)(*(void *)(v669 + (((unint64_t)(v668 + v670) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (v668 + v670));
                    v665 = *v664;
                  }
                  *(unsigned char *)(v673 + v671) = 0;
                  *(unsigned char *)(v672 + v671) = 1;
                  *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                   + (((unint64_t)(*(void *)(a1 + 184) + v670) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(unsigned char *)(a1 + 184) + v670))
                           + v671) = 0;
                  v666 += 2;
                  if ((char *)v666 - (char *)v665 == 4096)
                  {
                    uint64_t v674 = v664[1];
                    ++v664;
                    v665 = v674;
                    uint64_t v666 = v674;
                  }
                }
                while (v666 != (unsigned __int16 *)v667);
              }
            }
          }
          else
          {
            uint64_t v662 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                         + (((*(void *)(a1 + 136) + v618) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(a1 + 136) + v618));
            if (!*(unsigned char *)(v662 + v619)
              || (uint64_t v663 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                               + (((*(void *)(a1 + 88) + v618) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(unsigned char *)(a1 + 88) + v618)),
                  *(unsigned char *)(v663 + v619)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, v618, v619);
              uint64_t v663 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                           + (((*(void *)(a1 + 88) + v618) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(a1 + 88) + v618));
              uint64_t v662 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                           + (((*(void *)(a1 + 136) + v618) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(a1 + 136) + v618));
            }
            *(unsigned char *)(v663 + v619) = 0;
            *(unsigned char *)(v662 + v619) = 1;
            *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                             + (((*(void *)(a1 + 184) + v618) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(a1 + 184) + v618))
                     + v619) = 0;
          }
        }
      }
      v616 += 2;
      if ((unsigned __int16 *)((char *)v616 - *v615) == (unsigned __int16 *)4096)
      {
        unint64_t v675 = (unsigned __int16 *)v615[1];
        ++v615;
        v616 = v675;
      }
      if (v616 == (unsigned __int16 *)v617)
      {
        unint64_t v612 = v1120;
        unint64_t v41 = __src.n128_u64[1];
        uint64_t v613 = v1119;
        unint64_t v614 = (unint64_t)v1120 >> 10;
        break;
      }
      continue;
    }
  }
  long long v1104 = 0u;
  long long v1105 = 0u;
  long long v1102 = 0u;
  *(_OWORD *)v1103 = 0u;
  *(_OWORD *)v1100 = 0u;
  long long v1101 = 0u;
  if (v613 == v41) {
    goto LABEL_993;
  }
  unint64_t v676 = (unsigned __int16 **)(v41 + 8 * v614);
  unint64_t v677 = *v676;
  uint64_t v678 = &(*v676)[2 * (v612 & 0x3FF)];
  unint64_t v679 = *((void *)&v1120 + 1) + v612;
  uint64_t v680 = *(void *)(v41 + ((v679 >> 7) & 0x1FFFFFFFFFFFFF8));
  uint64_t v681 = (unsigned __int16 *)(v680 + 4 * (v679 & 0x3FF));
  if (v678 == v681) {
    goto LABEL_993;
  }
  v1067 = (unsigned __int16 *)(v680 + 4 * (v679 & 0x3FF));
  while (2)
  {
    unint64_t v682 = *v678;
    uint64_t v683 = v678[1];
    if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 64)
                                          + (((*(void *)(a1 + 88) + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*(unsigned char *)(a1 + 88) + v682))
                  + v683))
      goto LABEL_988;
    uint64_t v684 = *(void *)(a1 + 136);
    uint64_t v685 = *(void *)(a1 + 112);
    if (*(unsigned char *)(*(void *)(*(void *)(v685 + (((v684 + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (v684 + v682))
                  + v683))
      goto LABEL_988;
    uint64_t v686 = *(void **)(a1 + 968);
    if (v686[5] <= v682) {
      std::__throw_out_of_range[abi:ne180100]("deque");
    }
    unint64_t v687 = v686[4] + v682;
    uint64_t v688 = *(void *)(v686[1] + 8 * (v687 / 0x14));
    unint64_t v689 = v687 % 0x14;
    uint64_t v690 = v688 + 200 * v689;
    unint64_t v693 = *(void **)(v690 + 184);
    uint64_t v691 = (void *)(v690 + 184);
    unint64_t v692 = v693;
    if (!v693) {
      goto LABEL_891;
    }
    unint64_t v694 = v692;
    do
    {
      uint64_t v695 = v694;
      unint64_t v694 = (void *)*v694;
    }
    while (v694);
    if (v695 == v691 || v695[4] || (unint64_t v696 = v695[5] - 5, v696 > 3)) {
LABEL_891:
    }
      uint64_t v697 = -1;
    else {
      uint64_t v697 = qword_1DD8CEC00[v696];
    }
    uint64_t v1089 = v697;
    if (!v692) {
      goto LABEL_898;
    }
    do
    {
      unint64_t v698 = v692;
      unint64_t v692 = (void *)*v692;
    }
    while (v692);
    if (v698 == v691 || v698[4] || (unint64_t v699 = v698[5], v699 > 8)) {
LABEL_898:
    }
      double v700 = 0.0;
    else {
      double v700 = dbl_1DD8CEC20[v699];
    }
    unint64_t v701 = (void *)(*(void *)(*(void *)(v688 + 200 * v689 + 88)
                                + ((*(void *)(v688 + 200 * v689 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * *(void *)(v688 + 200 * v689 + 112));
    unint64_t v702 = v1089 + *(void *)&v700 * v683;
    v704 = v701;
    uint64_t v703 = *v701;
    double v705 = 0.0;
    if (v702 < (v704[1] - v703) >> 3) {
      double v705 = *(double *)(v703 + 8 * v702);
    }
    long long v1098 = 0u;
    long long v1099 = 0u;
    *(_OWORD *)v1097 = 0u;
    LOWORD(v1093) = 0;
    if (v1072)
    {
      uint64_t v706 = 0;
      goto LABEL_954;
    }
    unsigned __int16 v707 = 0;
    uint64_t v708 = 0;
    uint64_t v706 = 0;
    while (2)
    {
      unint64_t v709 = *(void *)(*(void *)(a1 + 928) + 8 * ((*(void *)(a1 + 952) + v682) / 0x55))
           + 48 * ((*(void *)(a1 + 952) + v682) % 0x55);
      unint64_t v710 = *(void *)(*(void *)(v709 + 8) + 8 * ((*(void *)(v709 + 32) + v708) / 0x55uLL))
           + 48 * ((*(void *)(v709 + 32) + v708) % 0x55uLL);
      unint64_t v711 = *(void *)(v710 + 32) + v683;
      uint64_t v712 = *(void *)(*(void *)(v710 + 8) + 8 * (v711 / 0x55));
      unint64_t v713 = v711 % 0x55;
      uint64_t v714 = v712 + 48 * (v711 % 0x55);
      if (*(double *)(a1 + 1224) == 0.0) {
        goto LABEL_916;
      }
      if (v682 || v707 != 1)
      {
        if (v682 == 1 && !v707 && *(void *)(v712 + 48 * v713 + 40) == 1)
        {
          uint64_t v715 = *(unsigned __int16 *)(*(void *)(*(void *)(v714 + 8)
                                                 + ((*(void *)(v712 + 48 * v713 + 32) >> 8) & 0xFFFFFFFFFFFFF8))
                                     + 2 * (*(void *)(v712 + 48 * v713 + 32) & 0x7FFLL));
          uint64_t v716 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                       + (((unint64_t)(*(void *)(a1 + 136) + v708) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (*(unsigned char *)(a1 + 136) + v708));
          if (!*(unsigned char *)(v716 + v715)
            || (uint64_t v717 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                             + (((unint64_t)(*(void *)(a1 + 88) + v708) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(a1 + 88) + v708)),
                *(unsigned char *)(v717 + v715)))
          {
            nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, 0, v715);
            uint64_t v717 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                         + (((unint64_t)(*(void *)(a1 + 88) + v708) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(a1 + 88) + v708));
            uint64_t v716 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                         + (((unint64_t)(*(void *)(a1 + 136) + v708) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(a1 + 136) + v708));
          }
          *(unsigned char *)(v717 + v715) = 0;
          *(unsigned char *)(v716 + v715) = 1;
          *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                           + (((unint64_t)(*(void *)(a1 + 184) + v708) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(a1 + 184) + v708))
                   + v715) = 0;
LABEL_946:
          LOWORD(v1093) = ++v707;
          uint64_t v708 = v707;
          if (v1082 <= v707)
          {
            uint64_t v684 = *(void *)(a1 + 136);
            uint64_t v685 = *(void *)(a1 + 112);
            uint64_t v681 = v1067;
            goto LABEL_954;
          }
          continue;
        }
LABEL_916:
        uint64_t v718 = v712 + 48 * v713;
        unint64_t v721 = *(void *)(v718 + 32);
        uint64_t v720 = (uint64_t *)(v718 + 32);
        unint64_t v719 = v721;
        uint64_t v722 = *(void *)(v714 + 8);
        if (*(void *)(v714 + 16) == v722)
        {
          v727 = (void *)(v712 + 48 * v713 + 40);
        }
        else
        {
          uint64_t v723 = (unsigned __int16 **)(v722 + 8 * (v719 >> 11));
          v724 = *v723;
          uint64_t v725 = &(*v723)[v719 & 0x7FF];
          uint64_t v726 = v712 + 48 * v713;
          uint64_t v728 = *(void *)(v726 + 40);
          v727 = (void *)(v726 + 40);
          uint64_t v729 = *(void *)(v722 + (((v728 + v719) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v728 + v719) & 0x7FF);
          if (v725 != (unsigned __int16 *)v729)
          {
            uint64_t v730 = *(void *)(a1 + 88);
            uint64_t v731 = *(void *)(a1 + 64);
            while (!*(unsigned char *)(*(void *)(*(void *)(v731
                                                      + (((v730 + (unint64_t)v707) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * (v730 + v707))
                              + *v725))
            {
              if ((char *)++v725 - (char *)v724 == 4096)
              {
                unint64_t v732 = v723[1];
                ++v723;
                v724 = v732;
                uint64_t v725 = v732;
              }
              if (v725 == (unsigned __int16 *)v729) {
                goto LABEL_929;
              }
            }
            uint64_t v733 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                         + (((*(void *)(a1 + 136) + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(a1 + 136) + v682));
            if (!*(unsigned char *)(v733 + v683)
              || (uint64_t v734 = *(void *)(*(void *)(v731 + (((v730 + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v730 + v682)),
                  *(unsigned char *)(v734 + v683)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, v682, v683);
              uint64_t v734 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                           + (((*(void *)(a1 + 88) + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(a1 + 88) + v682));
              uint64_t v733 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                           + (((*(void *)(a1 + 136) + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(a1 + 136) + v682));
            }
            *(unsigned char *)(v734 + v683) = 0;
            *(unsigned char *)(v733 + v683) = 1;
            *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                             + (((*(void *)(a1 + 184) + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(a1 + 184) + v682))
                     + v683) = 0;
          }
        }
LABEL_929:
        uint64_t v684 = *(void *)(a1 + 136);
        uint64_t v685 = *(void *)(a1 + 112);
        if (*(unsigned char *)(*(void *)(*(void *)(v685 + (((v684 + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                                  + 16 * (v684 + v682))
                      + v683))
        {
          uint64_t v681 = v1067;
          goto LABEL_954;
        }
        uint64_t v735 = *(void *)(v714 + 8);
        if (*(void *)(v714 + 16) != v735)
        {
          uint64_t v736 = *v720;
          unint64_t v737 = (char **)(v735 + 8 * ((unint64_t)*v720 >> 11));
          uint64_t v738 = *v737;
          uint64_t v739 = &(*v737)[2 * (*v720 & 0x7FF)];
          uint64_t v740 = *(void *)(v735 + (((unint64_t)(*v727 + v736) >> 8) & 0xFFFFFFFFFFFFF8))
               + 2 * ((*v727 + v736) & 0x7FF);
          while (v739 != (char *)v740)
          {
            LOWORD(v1091) = 0;
            int v741 = *(unsigned __int16 *)v739;
            LOWORD(v1091) = *(_WORD *)v739;
            if ((void)v1119 == __src.n128_u64[1]) {
              goto LABEL_943;
            }
            v742 = (unsigned __int16 **)(__src.n128_u64[1] + 8 * ((unint64_t)v1120 >> 10));
            v743 = *v742;
            uint64_t v744 = &(*v742)[2 * (v1120 & 0x3FF)];
            uint64_t v745 = *(void *)(__src.n128_u64[1]
                             + (((*((void *)&v1120 + 1) + (void)v1120) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((*((void *)&v1120 + 1) + v1120) & 0x3FF);
            if (v744 != (unsigned __int16 *)v745)
            {
              while (*v744 != v707 || v744[1] != v741)
              {
                v744 += 2;
                if ((char *)v744 - (char *)v743 == 4096)
                {
                  v746 = v742[1];
                  ++v742;
                  v743 = v746;
                  uint64_t v744 = v746;
                }
                if (v744 == (unsigned __int16 *)v745) {
                  goto LABEL_943;
                }
              }
            }
            if (v744 == (unsigned __int16 *)v745)
            {
LABEL_943:
              ++v706;
            }
            else
            {
              std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(v1097, &v1093, &v1091);
              uint64_t v738 = *v737;
            }
            v739 += 2;
            if (v739 - v738 == 4096)
            {
              uint64_t v747 = v737[1];
              ++v737;
              uint64_t v738 = v747;
              uint64_t v739 = v747;
            }
          }
        }
        goto LABEL_946;
      }
      break;
    }
    if (*(void *)(v712 + 48 * v713 + 40) != 1) {
      goto LABEL_916;
    }
    uint64_t v684 = *(void *)(a1 + 136);
    uint64_t v685 = *(void *)(a1 + 112);
    uint64_t v748 = *(void *)(*(void *)(v685 + (((v684 + v682) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v684);
    if (*(unsigned char *)(v748 + v683)
      && (uint64_t v749 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                       + (((*(void *)(a1 + 88) + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * *(unsigned __int8 *)(a1 + 88)),
          !*(unsigned char *)(v749 + v683)))
    {
      uint64_t v681 = v1067;
    }
    else
    {
      nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, 0, v683);
      uint64_t v681 = v1067;
      uint64_t v684 = *(void *)(a1 + 136);
      uint64_t v685 = *(void *)(a1 + 112);
      uint64_t v749 = *(void *)(*(void *)(*(void *)(a1 + 64) + (((*(void *)(a1 + 88) + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(unsigned __int8 *)(a1 + 88));
      uint64_t v748 = *(void *)(*(void *)(v685 + (((v684 + v682) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v684);
    }
    *(unsigned char *)(v749 + v683) = 0;
    *(unsigned char *)(v748 + v683) = 1;
    *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                     + (((*(void *)(a1 + 184) + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * *(unsigned __int8 *)(a1 + 184))
             + v683) = 0;
LABEL_954:
    uint64_t v750 = *(void *)(*(void *)(v685 + (((v684 + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v684 + v682));
    if (*(unsigned char *)(v750 + v683)) {
      BOOL v751 = 0;
    }
    else {
      BOOL v751 = v706 == 0;
    }
    if (v751)
    {
      if ((void *)v1098 == v1097[1]
        || (unint64_t v752 = (char *)v1097[1] + 8 * ((unint64_t)v1099 >> 10),
            v753 = (unsigned __int16 *)(*v752 + 4 * (v1099 & 0x3FF)),
            uint64_t v1077 = *(void *)((char *)v1097[1]
                              + (((*((void *)&v1099 + 1) + (void)v1099) >> 7) & 0x1FFFFFFFFFFFFF8))
                  + 4 * ((*((void *)&v1099 + 1) + v1099) & 0x3FF),
            v753 == (unsigned __int16 *)v1077))
      {
        uint64_t v775 = *(void *)(a1 + 88);
        uint64_t v776 = *(void *)(a1 + 64);
        uint64_t v778 = *(void *)(a1 + 184);
        uint64_t v783 = *(void *)(a1 + 160);
      }
      else
      {
        unsigned __int16 v754 = v682;
        unsigned __int16 v755 = v683;
        do
        {
          unint64_t v756 = *v753;
          v757 = *(void **)(a1 + 968);
          if (v757[5] <= v756) {
            std::__throw_out_of_range[abi:ne180100]("deque");
          }
          unint64_t v758 = v757[4] + v756;
          uint64_t v759 = *(void *)(v757[1] + 8 * (v758 / 0x14));
          unint64_t v760 = v758 % 0x14;
          uint64_t v761 = v759 + 200 * v760;
          uint64_t v764 = *(void **)(v761 + 184);
          uint64_t v762 = (void *)(v761 + 184);
          uint64_t v763 = v764;
          if (!v764) {
            goto LABEL_969;
          }
          do
          {
            v765 = v763;
            uint64_t v763 = (void *)*v763;
          }
          while (v763);
          if (v765 == v762 || v765[4] || (unint64_t v766 = v765[5], v766 > 8)) {
LABEL_969:
          }
            double v767 = 0.0;
          else {
            double v767 = dbl_1DD8CEC20[v766];
          }
          uint64_t v768 = v753[1];
          uint64_t v769 = (void *)(*(void *)(*(void *)(v759 + 200 * v760 + 88)
                                      + ((*(void *)(v759 + 200 * v760 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * *(void *)(v759 + 200 * v760 + 112));
          unint64_t v770 = v1089 + *(void *)&v767 * v768;
          uint64_t v772 = v769;
          uint64_t v771 = *v769;
          double v773 = 0.0;
          if (v770 < (v772[1] - v771) >> 3) {
            double v773 = *(double *)(v771 + 8 * v770);
          }
          if (v773 >= v705)
          {
            uint64_t v780 = v755;
            uint64_t v781 = *(void *)(*(void *)(v685 + (((v684 + (unint64_t)v754) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v684 + v754));
            if (!*(unsigned char *)(v781 + v755)
              || (uint64_t v775 = *(void *)(a1 + 88),
                  uint64_t v776 = *(void *)(a1 + 64),
                  uint64_t v782 = *(void *)(*(void *)(v776 + (((v775 + (unint64_t)v754) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v775 + v754)),
                  *(unsigned char *)(v782 + v755)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, v754, v755);
              uint64_t v775 = *(void *)(a1 + 88);
              uint64_t v776 = *(void *)(a1 + 64);
              uint64_t v684 = *(void *)(a1 + 136);
              uint64_t v685 = *(void *)(a1 + 112);
              uint64_t v782 = *(void *)(*(void *)(v776 + (((v775 + (unint64_t)v754) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (v775 + v754));
              uint64_t v781 = *(void *)(*(void *)(v685 + (((v684 + (unint64_t)v754) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (v684 + v754));
              LOWORD(v756) = *v753;
              LOWORD(v768) = v753[1];
            }
            *(unsigned char *)(v782 + v755) = 0;
            *(unsigned char *)(v781 + v755) = 1;
            unsigned __int16 v755 = v768;
            uint64_t v778 = *(void *)(a1 + 184);
            unint64_t v779 = v778 + v754;
            uint64_t v768 = v780;
            unsigned __int16 v754 = v756;
            double v705 = v773;
          }
          else
          {
            uint64_t v774 = *(void *)(*(void *)(v685 + (((v684 + v756) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v684 + v756));
            if (!*(unsigned char *)(v774 + v768)
              || (uint64_t v775 = *(void *)(a1 + 88),
                  uint64_t v776 = *(void *)(a1 + 64),
                  uint64_t v777 = *(void *)(*(void *)(v776 + (((v775 + v756) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v775 + v756)),
                  *(unsigned char *)(v777 + v768)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, *v753, v753[1]);
              uint64_t v775 = *(void *)(a1 + 88);
              uint64_t v776 = *(void *)(a1 + 64);
              uint64_t v684 = *(void *)(a1 + 136);
              uint64_t v685 = *(void *)(a1 + 112);
              uint64_t v777 = *(void *)(*(void *)(v776 + (((v775 + v756) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (v775 + v756));
              uint64_t v774 = *(void *)(*(void *)(v685 + (((v684 + v756) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (v684 + v756));
            }
            *(unsigned char *)(v777 + v768) = 0;
            *(unsigned char *)(v774 + v768) = 1;
            uint64_t v778 = *(void *)(a1 + 184);
            unint64_t v779 = v778 + v756;
          }
          uint64_t v783 = *(void *)(a1 + 160);
          *(unsigned char *)(*(void *)(*(void *)(v783 + ((v779 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v779)
                   + v768) = 0;
          v753 += 2;
          if ((unsigned __int16 *)((char *)v753 - *v752) == (unsigned __int16 *)4096)
          {
            unint64_t v784 = (unsigned __int16 *)v752[1];
            ++v752;
            v753 = v784;
          }
        }
        while (v753 != (unsigned __int16 *)v1077);
        unint64_t v682 = v754;
        uint64_t v683 = v755;
        uint64_t v750 = *(void *)(*(void *)(v685 + (((v684 + (unint64_t)v754) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (v684 + v754));
        uint64_t v681 = v1067;
      }
      *(unsigned char *)(*(void *)(*(void *)(v776 + (((v775 + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (v775 + v682))
               + v683) = 1;
      *(unsigned char *)(v750 + v683) = 0;
      *(unsigned char *)(*(void *)(*(void *)(v783 + (((v778 + v682) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (v778 + v682))
               + v683) = 0;
    }
    std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1097);
    unint64_t v677 = *v676;
LABEL_988:
    v678 += 2;
    if ((char *)v678 - (char *)v677 == 4096)
    {
      uint64_t v785 = v676[1];
      ++v676;
      unint64_t v677 = v785;
      uint64_t v678 = v785;
    }
    if (v678 != v681) {
      continue;
    }
    break;
  }
LABEL_993:
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1100);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](v1103);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](__p);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1109);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1112);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](v1115);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&__src);
  unint64_t v41 = *(void *)(a1 + 968);
LABEL_994:
  if (*(unsigned char *)(a1 + 1101))
  {
    if (v41)
    {
      unint64_t v786 = *(void *)(v41 + 40);
      if (v786)
      {
        unint64_t v787 = 0;
        unsigned __int16 v1068 = 0;
        unint64_t v1073 = *(void *)(v41 + 40);
        do
        {
          uint64_t v788 = *(void **)(a1 + 968);
          if (v788[5] <= v787) {
            std::__throw_out_of_range[abi:ne180100]("deque");
          }
          unint64_t v789 = v788[4] + v787;
          uint64_t v790 = *(void *)(v788[1] + 8 * (v789 / 0x14));
          unint64_t v791 = v789 % 0x14;
          uint64_t v792 = v790 + 200 * (v789 % 0x14);
          v793 = *(void **)(v792 + 184);
          v1090 = (void *)(v792 + 184);
          if (!v793) {
            goto LABEL_1005;
          }
          do
          {
            uint64_t v794 = v793;
            v793 = (void *)*v793;
          }
          while (v793);
          if (v794 == v1090 || v794[4] || (unint64_t v795 = v794[5] - 5, v795 > 3)) {
LABEL_1005:
          }
            uint64_t v796 = -1;
          else {
            uint64_t v796 = qword_1DD8CEC00[v795];
          }
          v797 = (char **)(*(void *)(*(void *)(a1 + 160)
                                     + (((*(void *)(a1 + 184) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (*(unsigned char *)(a1 + 184) + v787));
          std::__val_expr<std::_BinaryOp<std::bit_and<BOOL>,std::valarray<BOOL>,std::__val_expr<std::_UnaryOp<std::logical_not<BOOL>,std::valarray<BOOL> const&>>>>::operator std::valarray<BOOL>(v1115, *v797, v797[1], (char **)(*(void *)(*(void *)(a1 + 64) + (((*(void *)(a1 + 88) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(unsigned char *)(a1 + 88) + v787)));
          nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&__src, (uint64_t)v1115);
          if (v1115[0])
          {
            if (v1115[1] != v1115[0]) {
              v1115[1] = v1115[0];
            }
            operator delete(v1115[0]);
          }
          if ((void)v1119 != __src.n128_u64[1])
          {
            uint64_t v798 = (void *)(__src.n128_u64[1] + 8 * ((unint64_t)v1120 >> 11));
            unint64_t v799 = (unsigned __int16 *)(*v798 + 2 * (v1120 & 0x7FF));
            uint64_t v1054 = *(void *)(__src.n128_u64[1]
                              + (((*((void *)&v1120 + 1) + (void)v1120) >> 8) & 0xFFFFFFFFFFFFF8))
                  + 2 * ((*((void *)&v1120 + 1) + v1120) & 0x7FF);
            if (v799 != (unsigned __int16 *)v1054)
            {
              uint64_t v800 = v790 + 200 * v791;
              v1078 = (void *)(v800 + 88);
              v1083 = (void *)(v800 + 112);
              do
              {
                uint64_t v801 = (void *)*v1090;
                if (!*v1090) {
                  goto LABEL_1019;
                }
                do
                {
                  unint64_t v802 = v801;
                  uint64_t v801 = (void *)*v801;
                }
                while (v801);
                if (v802 == v1090 || v802[4] || (unint64_t v803 = v802[5], v803 > 8)) {
LABEL_1019:
                }
                  double v804 = 0.0;
                else {
                  double v804 = dbl_1DD8CEC20[v803];
                }
                v1058 = v799;
                v1061 = v798;
                uint64_t v805 = *v799;
                uint64_t v806 = (*v1083 >> 5) & 0x7FFFFFFFFFFFFF8;
                unint64_t v807 = v796 + *(void *)&v804 * v805;
                uint64_t v808 = *(void *)(*(void *)(*v1078 + v806) + 16 * *v1083);
                double v809 = 0.0;
                if (v807 < (*(void *)(*(void *)(*v1078 + v806) + 16 * *v1083 + 8) - v808) >> 3) {
                  double v809 = *(double *)(v808 + 8 * v807);
                }
                unint64_t v810 = 0;
                int v811 = 0;
                while (1)
                {
                  if (*v1039 && *(void *)(a1 + 672))
                  {
                    unint64_t v812 = *(void *)(*(void *)(a1 + 640) + 8 * ((*(void *)(a1 + 664) + v787) / 0x55))
                         + 48 * ((*(void *)(a1 + 664) + v787) % 0x55);
                    unint64_t v813 = *(void *)(*(void *)(v812 + 8) + 8 * ((*(void *)(v812 + 32) + v810) / 0x55))
                         + 48 * ((*(void *)(v812 + 32) + v810) % 0x55);
                    unint64_t v814 = *(void *)(v813 + 32) + v805;
                    uint64_t v815 = *(void *)(*(void *)(v813 + 8) + 8 * (v814 / 0x55));
                    unint64_t v816 = v814 % 0x55;
                    v817 = (void *)(v815 + 48 * v816);
                    uint64_t v818 = v817[1];
                    if (v817[2] == v818)
                    {
                      uint64_t v825 = *(void *)(a1 + 136);
                      uint64_t v826 = *(void *)(a1 + 112);
                    }
                    else
                    {
                      unint64_t v819 = v817[4];
                      uint64_t v820 = (unsigned __int16 **)(v818 + 8 * (v819 >> 11));
                      v821 = *v820;
                      unint64_t v822 = *(void *)(v815 + 48 * v816 + 40) + v819;
                      v823 = &(*v820)[v819 & 0x7FF];
                      uint64_t v824 = *(void *)(v818 + ((v822 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v822 & 0x7FF);
                      uint64_t v825 = *(void *)(a1 + 136);
                      uint64_t v826 = *(void *)(a1 + 112);
                      if (v823 != (unsigned __int16 *)v824)
                      {
                        uint64_t v827 = *(void *)(a1 + 88);
                        uint64_t v828 = *(void *)(a1 + 64);
                        while (1)
                        {
                          uint64_t v829 = *v823;
                          if (*(unsigned char *)(*(void *)(*(void *)(v828 + (((v827 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                    + 16 * (v827 + v810))
                                        + v829))
                          {
                            uint64_t v846 = *(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v825 + v787));
                            if (!*(unsigned char *)(v846 + v805)) {
                              goto LABEL_1051;
                            }
                            uint64_t v847 = *(void *)(*(void *)(v828 + (((v827 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v827 + v787));
                            if (*(unsigned char *)(v847 + v805)) {
                              goto LABEL_1051;
                            }
                            goto LABEL_1052;
                          }
                          if (!*(unsigned char *)(*(void *)(*(void *)(v826 + 8 * ((v825 + v810) >> 8))
                                                     + 16 * (v825 + v810))
                                         + v829))
                          {
                            float64x2_t v830 = *(void **)(a1 + 968);
                            if (v830[5] <= v810) {
                              std::__throw_out_of_range[abi:ne180100]("deque");
                            }
                            unint64_t v831 = v830[4] + v810;
                            uint64_t v832 = *(void *)(v830[1] + 8 * (v831 / 0x14));
                            unint64_t v833 = v831 % 0x14;
                            uint64_t v834 = v832 + 200 * v833;
                            double v837 = *(void **)(v834 + 184);
                            v835 = (void *)(v834 + 184);
                            long long v836 = v837;
                            if (!v837) {
                              goto LABEL_1037;
                            }
                            do
                            {
                              double v838 = v836;
                              long long v836 = (void *)*v836;
                            }
                            while (v836);
                            if (v838 == v835 || v838[4] || (unint64_t v839 = v838[5], v839 > 8)) {
LABEL_1037:
                            }
                              double v840 = 0.0;
                            else {
                              double v840 = dbl_1DD8CEC20[v839];
                            }
                            unint64_t v841 = v796 + *(void *)&v840 * v829;
                            double v843 = (uint64_t *)(*(void *)(*(void *)(v832 + 200 * v833 + 88)
                                                         + ((*(void *)(v832 + 200 * v833 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * *(void *)(v832 + 200 * v833 + 112));
                            uint64_t v842 = *v843;
                            double v844 = 0.0;
                            if (v841 < (v843[1] - *v843) >> 3) {
                              double v844 = *(double *)(v842 + 8 * v841);
                            }
                            if (v844 >= v809) {
                              break;
                            }
                          }
                          if ((char *)++v823 - (char *)v821 == 4096)
                          {
                            double v845 = v820[1];
                            ++v820;
                            v821 = v845;
                            v823 = v845;
                          }
                          if (v823 == (unsigned __int16 *)v824) {
                            goto LABEL_1053;
                          }
                        }
                        uint64_t v846 = *(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (v825 + v787));
                        if (!*(unsigned char *)(v846 + v805)
                          || (uint64_t v847 = *(void *)(*(void *)(v828 + (((v827 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v827 + v787)),
                              *(unsigned char *)(v847 + v805)))
                        {
LABEL_1051:
                          nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, v1068, v805);
                          uint64_t v825 = *(void *)(a1 + 136);
                          uint64_t v826 = *(void *)(a1 + 112);
                          uint64_t v847 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                       + (((*(void *)(a1 + 88) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*(unsigned char *)(a1 + 88) + v787));
                          uint64_t v846 = *(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (v825 + v787));
                        }
LABEL_1052:
                        *(unsigned char *)(v847 + v805) = 0;
                        *(unsigned char *)(v846 + v805) = 1;
                        *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                         + (((*(void *)(a1 + 184) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (*(unsigned char *)(a1 + 184) + v787))
                                 + v805) = 0;
                      }
                    }
LABEL_1053:
                    if (*(unsigned char *)(a1 + 1096)
                      && !*(unsigned char *)(*(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v825 + v787))
                                   + v805))
                    {
                      std::deque<unsigned short>::deque((uint64_t)v1115, v817);
                      if ((void *)v1116 != v1115[1])
                      {
                        v848 = (unsigned __int16 **)((char *)v1115[1] + 8 * ((unint64_t)v1117 >> 11));
                        v849 = *v848;
                        v850 = &(*v848)[v1117 & 0x7FF];
                        uint64_t v851 = *(void *)((char *)v1115[1]
                                         + (((*((void *)&v1117 + 1) + (void)v1117) >> 8) & 0xFFFFFFFFFFFFF8))
                             + 2 * ((*((void *)&v1117 + 1) + v1117) & 0x7FF);
                        if (v850 != (unsigned __int16 *)v851)
                        {
                          uint64_t v852 = *(void *)(a1 + 136);
                          uint64_t v853 = *(void *)(a1 + 112);
                          do
                          {
                            uint64_t v854 = *v850;
                            uint64_t v855 = *(void *)(*(void *)(v853 + (((v852 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v852 + v810));
                            if (!*(unsigned char *)(v855 + v854)
                              || (uint64_t v856 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                               + (((*(void *)(a1 + 88) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (*(unsigned char *)(a1 + 88) + v810)),
                                  *(unsigned char *)(v856 + v854)))
                            {
                              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, (unsigned __int16)v811, *v850);
                              uint64_t v852 = *(void *)(a1 + 136);
                              uint64_t v853 = *(void *)(a1 + 112);
                              uint64_t v856 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                           + (((*(void *)(a1 + 88) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (*(unsigned char *)(a1 + 88) + v810));
                              uint64_t v855 = *(void *)(*(void *)(v853 + (((v852 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v852 + v810));
                              v849 = *v848;
                            }
                            *(unsigned char *)(v856 + v854) = 0;
                            *(unsigned char *)(v855 + v854) = 1;
                            *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                             + (((*(void *)(a1 + 184) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (*(unsigned char *)(a1 + 184) + v810))
                                     + v854) = 0;
                            if ((char *)++v850 - (char *)v849 == 4096)
                            {
                              float64x2_t v857 = v848[1];
                              ++v848;
                              v849 = v857;
                              v850 = v857;
                            }
                          }
                          while (v850 != (unsigned __int16 *)v851);
                        }
                      }
                      std::deque<unsigned short>::~deque[abi:ne180100](v1115);
                      uint64_t v825 = *(void *)(a1 + 136);
                      uint64_t v826 = *(void *)(a1 + 112);
                      unint64_t v786 = v1073;
                    }
                    if (*(unsigned char *)(*(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * (v825 + v787))
                                  + v805))
                      break;
                  }
                  if (*(unsigned char *)(a1 + 1099))
                  {
                    if (!*(void *)(a1 + 768)) {
                      goto LABEL_1253;
                    }
                    unint64_t v858 = *(void *)(*(void *)(a1 + 736) + 8 * ((*(void *)(a1 + 760) + v787) / 0x55))
                         + 48 * ((*(void *)(a1 + 760) + v787) % 0x55);
                    unint64_t v859 = *(void *)(*(void *)(v858 + 8) + 8 * ((*(void *)(v858 + 32) + v810) / 0x55))
                         + 48 * ((*(void *)(v858 + 32) + v810) % 0x55);
                    unint64_t v860 = *(void *)(v859 + 32) + v805;
                    uint64_t v861 = *(void *)(*(void *)(v859 + 8) + 8 * (v860 / 0x55));
                    unint64_t v862 = v860 % 0x55;
                    v863 = (void *)(v861 + 48 * v862);
                    uint64_t v864 = v863[1];
                    if (v863[2] == v864)
                    {
                      uint64_t v825 = *(void *)(a1 + 136);
                      uint64_t v826 = *(void *)(a1 + 112);
                    }
                    else
                    {
                      unint64_t v865 = v863[4];
                      v866 = (unsigned __int16 **)(v864 + 8 * (v865 >> 11));
                      v867 = *v866;
                      unint64_t v868 = *(void *)(v861 + 48 * v862 + 40) + v865;
                      v869 = &(*v866)[v865 & 0x7FF];
                      uint64_t v870 = *(void *)(v864 + ((v868 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v868 & 0x7FF);
                      uint64_t v825 = *(void *)(a1 + 136);
                      uint64_t v826 = *(void *)(a1 + 112);
                      if (v869 != (unsigned __int16 *)v870)
                      {
                        uint64_t v871 = *(void *)(a1 + 88);
                        uint64_t v872 = *(void *)(a1 + 64);
                        while (1)
                        {
                          uint64_t v873 = *v869;
                          if (*(unsigned char *)(*(void *)(*(void *)(v872 + (((v871 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                    + 16 * (v871 + v810))
                                        + v873))
                          {
                            uint64_t v890 = *(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v825 + v787));
                            if (!*(unsigned char *)(v890 + v805)) {
                              goto LABEL_1094;
                            }
                            uint64_t v891 = *(void *)(*(void *)(v872 + (((v871 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v871 + v787));
                            if (*(unsigned char *)(v891 + v805)) {
                              goto LABEL_1094;
                            }
                            goto LABEL_1095;
                          }
                          if (!*(unsigned char *)(*(void *)(*(void *)(v826 + 8 * ((v825 + v810) >> 8))
                                                     + 16 * (v825 + v810))
                                         + v873))
                          {
                            v874 = *(void **)(a1 + 968);
                            if (v874[5] <= v810) {
                              std::__throw_out_of_range[abi:ne180100]("deque");
                            }
                            unint64_t v875 = v874[4] + v810;
                            uint64_t v876 = *(void *)(v874[1] + 8 * (v875 / 0x14));
                            unint64_t v877 = v875 % 0x14;
                            uint64_t v878 = v876 + 200 * v877;
                            v881 = *(void **)(v878 + 184);
                            v879 = (void *)(v878 + 184);
                            v880 = v881;
                            if (!v881) {
                              goto LABEL_1080;
                            }
                            do
                            {
                              v882 = v880;
                              v880 = (void *)*v880;
                            }
                            while (v880);
                            if (v882 == v879 || v882[4] || (unint64_t v883 = v882[5], v883 > 8)) {
LABEL_1080:
                            }
                              double v884 = 0.0;
                            else {
                              double v884 = dbl_1DD8CEC20[v883];
                            }
                            unint64_t v885 = v796 + *(void *)&v884 * v873;
                            v887 = (uint64_t *)(*(void *)(*(void *)(v876 + 200 * v877 + 88)
                                                         + ((*(void *)(v876 + 200 * v877 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * *(void *)(v876 + 200 * v877 + 112));
                            uint64_t v886 = *v887;
                            double v888 = 0.0;
                            if (v885 < (v887[1] - *v887) >> 3) {
                              double v888 = *(double *)(v886 + 8 * v885);
                            }
                            if (v888 >= v809) {
                              break;
                            }
                          }
                          if ((char *)++v869 - (char *)v867 == 4096)
                          {
                            v889 = v866[1];
                            ++v866;
                            v867 = v889;
                            v869 = v889;
                          }
                          if (v869 == (unsigned __int16 *)v870) {
                            goto LABEL_1096;
                          }
                        }
                        uint64_t v890 = *(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (v825 + v787));
                        if (!*(unsigned char *)(v890 + v805)
                          || (uint64_t v891 = *(void *)(*(void *)(v872 + (((v871 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v871 + v787)),
                              *(unsigned char *)(v891 + v805)))
                        {
LABEL_1094:
                          nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, v1068, v805);
                          uint64_t v825 = *(void *)(a1 + 136);
                          uint64_t v826 = *(void *)(a1 + 112);
                          uint64_t v891 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                       + (((*(void *)(a1 + 88) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*(unsigned char *)(a1 + 88) + v787));
                          uint64_t v890 = *(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (v825 + v787));
                        }
LABEL_1095:
                        *(unsigned char *)(v891 + v805) = 0;
                        *(unsigned char *)(v890 + v805) = 1;
                        *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                         + (((*(void *)(a1 + 184) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (*(unsigned char *)(a1 + 184) + v787))
                                 + v805) = 0;
                      }
                    }
LABEL_1096:
                    if (*(unsigned char *)(a1 + 1096)
                      && !*(unsigned char *)(*(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v825 + v787))
                                   + v805))
                    {
                      std::deque<unsigned short>::deque((uint64_t)v1115, v863);
                      if ((void *)v1116 != v1115[1])
                      {
                        v892 = (unsigned __int16 **)((char *)v1115[1] + 8 * ((unint64_t)v1117 >> 11));
                        v893 = *v892;
                        v894 = &(*v892)[v1117 & 0x7FF];
                        uint64_t v895 = *(void *)((char *)v1115[1]
                                         + (((*((void *)&v1117 + 1) + (void)v1117) >> 8) & 0xFFFFFFFFFFFFF8))
                             + 2 * ((*((void *)&v1117 + 1) + v1117) & 0x7FF);
                        if (v894 != (unsigned __int16 *)v895)
                        {
                          uint64_t v896 = *(void *)(a1 + 136);
                          uint64_t v897 = *(void *)(a1 + 112);
                          do
                          {
                            uint64_t v898 = *v894;
                            uint64_t v899 = *(void *)(*(void *)(v897 + (((v896 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v896 + v810));
                            if (!*(unsigned char *)(v899 + v898)
                              || (uint64_t v900 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                               + (((*(void *)(a1 + 88) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (*(unsigned char *)(a1 + 88) + v810)),
                                  *(unsigned char *)(v900 + v898)))
                            {
                              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, (unsigned __int16)v811, *v894);
                              uint64_t v896 = *(void *)(a1 + 136);
                              uint64_t v897 = *(void *)(a1 + 112);
                              uint64_t v900 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                           + (((*(void *)(a1 + 88) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (*(unsigned char *)(a1 + 88) + v810));
                              uint64_t v899 = *(void *)(*(void *)(v897 + (((v896 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v896 + v810));
                              v893 = *v892;
                            }
                            *(unsigned char *)(v900 + v898) = 0;
                            *(unsigned char *)(v899 + v898) = 1;
                            *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                             + (((*(void *)(a1 + 184) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (*(unsigned char *)(a1 + 184) + v810))
                                     + v898) = 0;
                            if ((char *)++v894 - (char *)v893 == 4096)
                            {
                              v901 = v892[1];
                              ++v892;
                              v893 = v901;
                              v894 = v901;
                            }
                          }
                          while (v894 != (unsigned __int16 *)v895);
                        }
                      }
                      std::deque<unsigned short>::~deque[abi:ne180100](v1115);
                      uint64_t v825 = *(void *)(a1 + 136);
                      uint64_t v826 = *(void *)(a1 + 112);
                      unint64_t v786 = v1073;
                    }
                    if (*(unsigned char *)(*(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * (v825 + v787))
                                  + v805))
                      break;
                    if (*(unsigned char *)(a1 + 1099))
                    {
LABEL_1253:
                      if (*(void *)(a1 + 864))
                      {
                        unint64_t v902 = *(void *)(*(void *)(a1 + 832) + 8 * ((*(void *)(a1 + 856) + v787) / 0x55))
                             + 48 * ((*(void *)(a1 + 856) + v787) % 0x55);
                        unint64_t v903 = *(void *)(*(void *)(v902 + 8) + 8 * ((*(void *)(v902 + 32) + v810) / 0x55))
                             + 48 * ((*(void *)(v902 + 32) + v810) % 0x55);
                        unint64_t v904 = *(void *)(v903 + 32) + v805;
                        uint64_t v905 = *(void *)(*(void *)(v903 + 8) + 8 * (v904 / 0x55));
                        unint64_t v906 = v904 % 0x55;
                        v907 = (void *)(v905 + 48 * v906);
                        uint64_t v908 = v907[1];
                        if (v907[2] == v908)
                        {
                          uint64_t v825 = *(void *)(a1 + 136);
                          uint64_t v826 = *(void *)(a1 + 112);
                        }
                        else
                        {
                          unint64_t v909 = v907[4];
                          v910 = (unsigned __int16 **)(v908 + 8 * (v909 >> 11));
                          v911 = *v910;
                          unint64_t v912 = *(void *)(v905 + 48 * v906 + 40) + v909;
                          v913 = &(*v910)[v909 & 0x7FF];
                          uint64_t v914 = *(void *)(v908 + ((v912 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v912 & 0x7FF);
                          uint64_t v825 = *(void *)(a1 + 136);
                          uint64_t v826 = *(void *)(a1 + 112);
                          if (v913 != (unsigned __int16 *)v914)
                          {
                            uint64_t v915 = *(void *)(a1 + 88);
                            uint64_t v916 = *(void *)(a1 + 64);
                            while (1)
                            {
                              uint64_t v917 = *v913;
                              if (*(unsigned char *)(*(void *)(*(void *)(v916 + (((v915 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                        + 16 * (v915 + v810))
                                            + v917))
                              {
                                uint64_t v934 = *(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (v825 + v787));
                                if (!*(unsigned char *)(v934 + v805)) {
                                  goto LABEL_1137;
                                }
                                uint64_t v935 = *(void *)(*(void *)(v916 + (((v915 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (v915 + v787));
                                if (*(unsigned char *)(v935 + v805)) {
                                  goto LABEL_1137;
                                }
                                goto LABEL_1138;
                              }
                              if (!*(unsigned char *)(*(void *)(*(void *)(v826 + 8 * ((v825 + v810) >> 8))
                                                         + 16 * (v825 + v810))
                                             + v917))
                              {
                                v918 = *(void **)(a1 + 968);
                                if (v918[5] <= v810) {
                                  std::__throw_out_of_range[abi:ne180100]("deque");
                                }
                                unint64_t v919 = v918[4] + v810;
                                uint64_t v920 = *(void *)(v918[1] + 8 * (v919 / 0x14));
                                unint64_t v921 = v919 % 0x14;
                                uint64_t v922 = v920 + 200 * v921;
                                v925 = *(void **)(v922 + 184);
                                v923 = (void *)(v922 + 184);
                                v924 = v925;
                                if (!v925) {
                                  goto LABEL_1123;
                                }
                                do
                                {
                                  v926 = v924;
                                  v924 = (void *)*v924;
                                }
                                while (v924);
                                if (v926 == v923 || v926[4] || (unint64_t v927 = v926[5], v927 > 8)) {
LABEL_1123:
                                }
                                  double v928 = 0.0;
                                else {
                                  double v928 = dbl_1DD8CEC20[v927];
                                }
                                unint64_t v929 = v796 + *(void *)&v928 * v917;
                                v931 = (uint64_t *)(*(void *)(*(void *)(v920 + 200 * v921 + 88)
                                                             + ((*(void *)(v920 + 200 * v921 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * *(void *)(v920 + 200 * v921 + 112));
                                uint64_t v930 = *v931;
                                double v932 = 0.0;
                                if (v929 < (v931[1] - *v931) >> 3) {
                                  double v932 = *(double *)(v930 + 8 * v929);
                                }
                                if (v932 >= v809) {
                                  break;
                                }
                              }
                              if ((char *)++v913 - (char *)v911 == 4096)
                              {
                                v933 = v910[1];
                                ++v910;
                                v911 = v933;
                                v913 = v933;
                              }
                              if (v913 == (unsigned __int16 *)v914) {
                                goto LABEL_1139;
                              }
                            }
                            uint64_t v934 = *(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v825 + v787));
                            if (!*(unsigned char *)(v934 + v805)
                              || (uint64_t v935 = *(void *)(*(void *)(v916 + (((v915 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (v915 + v787)),
                                  *(unsigned char *)(v935 + v805)))
                            {
LABEL_1137:
                              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, v1068, v805);
                              uint64_t v825 = *(void *)(a1 + 136);
                              uint64_t v826 = *(void *)(a1 + 112);
                              uint64_t v935 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                           + (((*(void *)(a1 + 88) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (*(unsigned char *)(a1 + 88) + v787));
                              uint64_t v934 = *(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v825 + v787));
                            }
LABEL_1138:
                            *(unsigned char *)(v935 + v805) = 0;
                            *(unsigned char *)(v934 + v805) = 1;
                            *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                             + (((*(void *)(a1 + 184) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (*(unsigned char *)(a1 + 184) + v787))
                                     + v805) = 0;
                          }
                        }
LABEL_1139:
                        if (*(unsigned char *)(a1 + 1096)
                          && !*(unsigned char *)(*(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (v825 + v787))
                                       + v805))
                        {
                          std::deque<unsigned short>::deque((uint64_t)v1115, v907);
                          if ((void *)v1116 != v1115[1])
                          {
                            v936 = (unsigned __int16 **)((char *)v1115[1] + 8 * ((unint64_t)v1117 >> 11));
                            v937 = *v936;
                            v938 = &(*v936)[v1117 & 0x7FF];
                            uint64_t v939 = *(void *)((char *)v1115[1]
                                             + (((*((void *)&v1117 + 1) + (void)v1117) >> 8) & 0xFFFFFFFFFFFFF8))
                                 + 2 * ((*((void *)&v1117 + 1) + v1117) & 0x7FF);
                            if (v938 != (unsigned __int16 *)v939)
                            {
                              uint64_t v940 = *(void *)(a1 + 136);
                              uint64_t v941 = *(void *)(a1 + 112);
                              do
                              {
                                uint64_t v942 = *v938;
                                uint64_t v943 = *(void *)(*(void *)(v941 + (((v940 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (v940 + v810));
                                if (!*(unsigned char *)(v943 + v942)
                                  || (uint64_t v944 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                                   + (((*(void *)(a1 + 88) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                       + 16 * (*(unsigned char *)(a1 + 88) + v810)),
                                      *(unsigned char *)(v944 + v942)))
                                {
                                  nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, (unsigned __int16)v811, *v938);
                                  uint64_t v940 = *(void *)(a1 + 136);
                                  uint64_t v941 = *(void *)(a1 + 112);
                                  uint64_t v944 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                               + (((*(void *)(a1 + 88) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (*(unsigned char *)(a1 + 88) + v810));
                                  uint64_t v943 = *(void *)(*(void *)(v941 + (((v940 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (v940 + v810));
                                  v937 = *v936;
                                }
                                *(unsigned char *)(v944 + v942) = 0;
                                *(unsigned char *)(v943 + v942) = 1;
                                *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                                 + (((*(void *)(a1 + 184) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                     + 16 * (*(unsigned char *)(a1 + 184) + v810))
                                         + v942) = 0;
                                if ((char *)++v938 - (char *)v937 == 4096)
                                {
                                  v945 = v936[1];
                                  ++v936;
                                  v937 = v945;
                                  v938 = v945;
                                }
                              }
                              while (v938 != (unsigned __int16 *)v939);
                            }
                          }
                          std::deque<unsigned short>::~deque[abi:ne180100](v1115);
                          uint64_t v825 = *(void *)(a1 + 136);
                          uint64_t v826 = *(void *)(a1 + 112);
                          unint64_t v786 = v1073;
                        }
                        if (*(unsigned char *)(*(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                  + 16 * (v825 + v787))
                                      + v805))
                          break;
                      }
                    }
                  }
                  if (*(unsigned char *)(a1 + 1100) && *(void *)(a1 + 960))
                  {
                    unint64_t v946 = *(void *)(*(void *)(a1 + 928) + 8 * ((*(void *)(a1 + 952) + v787) / 0x55))
                         + 48 * ((*(void *)(a1 + 952) + v787) % 0x55);
                    unint64_t v947 = *(void *)(*(void *)(v946 + 8) + 8 * ((*(void *)(v946 + 32) + v810) / 0x55))
                         + 48 * ((*(void *)(v946 + 32) + v810) % 0x55);
                    unint64_t v948 = *(void *)(v947 + 32) + v805;
                    uint64_t v949 = *(void *)(*(void *)(v947 + 8) + 8 * (v948 / 0x55));
                    unint64_t v950 = v948 % 0x55;
                    v951 = (void *)(v949 + 48 * (v948 % 0x55));
                    uint64_t v952 = v951[1];
                    if (v951[2] != v952)
                    {
                      unint64_t v953 = v951[4];
                      v954 = (unsigned __int16 **)(v952 + 8 * (v953 >> 11));
                      v955 = *v954;
                      v956 = &(*v954)[v953 & 0x7FF];
                      unint64_t v957 = *(void *)(v949 + 48 * v950 + 40) + v953;
                      uint64_t v958 = *(void *)(v952 + ((v957 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v957 & 0x7FF);
                      if (v956 != (unsigned __int16 *)v958)
                      {
                        uint64_t v959 = *(void *)(a1 + 88);
                        uint64_t v960 = *(void *)(a1 + 64);
                        uint64_t v961 = *(void *)(a1 + 136);
                        uint64_t v962 = *(void *)(a1 + 112);
                        while (1)
                        {
                          uint64_t v963 = *v956;
                          if (*(unsigned char *)(*(void *)(*(void *)(v960 + (((v959 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                    + 16 * (v959 + v810))
                                        + v963))
                          {
                            uint64_t v988 = *(void *)(*(void *)(v962 + (((v961 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v961 + v787));
                            if (!*(unsigned char *)(v988 + v805)) {
                              goto LABEL_1190;
                            }
                            uint64_t v989 = *(void *)(*(void *)(v960 + (((v959 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v959 + v787));
                            if (*(unsigned char *)(v989 + v805)) {
                              goto LABEL_1190;
                            }
                            goto LABEL_1191;
                          }
                          if (!*(unsigned char *)(*(void *)(*(void *)(v962 + 8 * ((v961 + v810) >> 8))
                                                     + 16 * (v961 + v810))
                                         + v963))
                          {
                            v964 = *(void **)(a1 + 968);
                            if (v964[5] <= v810) {
                              std::__throw_out_of_range[abi:ne180100]("deque");
                            }
                            v965 = (void *)*v1090;
                            if (!*v1090) {
                              goto LABEL_1166;
                            }
                            do
                            {
                              v966 = v965;
                              v965 = (void *)*v965;
                            }
                            while (v965);
                            if (v966 == v1090 || v966[4] || (unint64_t v967 = v966[5], v967 > 8)) {
LABEL_1166:
                            }
                              double v968 = 0.0;
                            else {
                              double v968 = dbl_1DD8CEC20[v967];
                            }
                            uint64_t v969 = (*v1083 >> 5) & 0x7FFFFFFFFFFFFF8;
                            unint64_t v970 = v796 + *(void *)&v968 * v805;
                            uint64_t v971 = *(void *)(*(void *)(*v1078 + v969) + 16 * *v1083);
                            double v972 = 0.0;
                            if (v970 < (*(void *)(*(void *)(*v1078 + v969) + 16 * *v1083 + 8)
                                       - v971) >> 3)
                              double v972 = *(double *)(v971 + 8 * v970);
                            unint64_t v973 = v964[4] + v810;
                            uint64_t v974 = *(void *)(v964[1] + 8 * (v973 / 0x14));
                            unint64_t v975 = v973 % 0x14;
                            uint64_t v976 = v974 + 200 * v975;
                            v979 = *(void **)(v976 + 184);
                            v977 = (void *)(v976 + 184);
                            v978 = v979;
                            if (!v979) {
                              goto LABEL_1175;
                            }
                            do
                            {
                              v980 = v978;
                              v978 = (void *)*v978;
                            }
                            while (v978);
                            if (v980 == v977 || v980[4] || (unint64_t v981 = v980[5], v981 > 8)) {
LABEL_1175:
                            }
                              double v982 = 0.0;
                            else {
                              double v982 = dbl_1DD8CEC20[v981];
                            }
                            unint64_t v983 = v796 + *(void *)&v982 * v963;
                            v985 = (uint64_t *)(*(void *)(*(void *)(v974 + 200 * v975 + 88)
                                                         + ((*(void *)(v974 + 200 * v975 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * *(void *)(v974 + 200 * v975 + 112));
                            uint64_t v984 = *v985;
                            double v986 = 0.0;
                            if (v983 < (v985[1] - *v985) >> 3) {
                              double v986 = *(double *)(v984 + 8 * v983);
                            }
                            if (v986 >= v972) {
                              break;
                            }
                          }
                          if ((char *)++v956 - (char *)v955 == 4096)
                          {
                            v987 = v954[1];
                            ++v954;
                            v955 = v987;
                            v956 = v987;
                          }
                          if (v956 == (unsigned __int16 *)v958) {
                            goto LABEL_1192;
                          }
                        }
                        uint64_t v988 = *(void *)(*(void *)(v962 + (((v961 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (v961 + v787));
                        if (!*(unsigned char *)(v988 + v805)
                          || (uint64_t v989 = *(void *)(*(void *)(v960 + (((v959 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v959 + v787)),
                              *(unsigned char *)(v989 + v805)))
                        {
LABEL_1190:
                          nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, v1068, v805);
                          uint64_t v989 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                       + (((*(void *)(a1 + 88) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*(unsigned char *)(a1 + 88) + v787));
                          uint64_t v988 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                                       + 8 * ((*(void *)(a1 + 136) + v787) >> 8))
                                           + 16 * (*(unsigned char *)(a1 + 136) + v787));
                        }
LABEL_1191:
                        *(unsigned char *)(v989 + v805) = 0;
                        *(unsigned char *)(v988 + v805) = 1;
                        *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                         + (((*(void *)(a1 + 184) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (*(unsigned char *)(a1 + 184) + v787))
                                 + v805) = 0;
                      }
                    }
LABEL_1192:
                    uint64_t v825 = *(void *)(a1 + 136);
                    uint64_t v826 = *(void *)(a1 + 112);
                    if (*(unsigned char *)(a1 + 1096)
                      && !*(unsigned char *)(*(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v825 + v787))
                                   + v805))
                    {
                      std::deque<unsigned short>::deque((uint64_t)v1115, v951);
                      if ((void *)v1116 != v1115[1])
                      {
                        v990 = (unsigned __int16 **)((char *)v1115[1] + 8 * ((unint64_t)v1117 >> 11));
                        v991 = *v990;
                        v992 = &(*v990)[v1117 & 0x7FF];
                        uint64_t v993 = *(void *)((char *)v1115[1]
                                         + (((*((void *)&v1117 + 1) + (void)v1117) >> 8) & 0xFFFFFFFFFFFFF8))
                             + 2 * ((*((void *)&v1117 + 1) + v1117) & 0x7FF);
                        if (v992 != (unsigned __int16 *)v993)
                        {
                          uint64_t v994 = *(void *)(a1 + 136);
                          uint64_t v995 = *(void *)(a1 + 112);
                          do
                          {
                            uint64_t v996 = *v992;
                            uint64_t v997 = *(void *)(*(void *)(v995 + (((v994 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v994 + v810));
                            if (!*(unsigned char *)(v997 + v996)
                              || (uint64_t v998 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                               + (((*(void *)(a1 + 88) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (*(unsigned char *)(a1 + 88) + v810)),
                                  *(unsigned char *)(v998 + v996)))
                            {
                              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)a1, (unsigned __int16)v811, *v992);
                              uint64_t v994 = *(void *)(a1 + 136);
                              uint64_t v995 = *(void *)(a1 + 112);
                              uint64_t v998 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                           + (((*(void *)(a1 + 88) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (*(unsigned char *)(a1 + 88) + v810));
                              uint64_t v997 = *(void *)(*(void *)(v995 + (((v994 + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v994 + v810));
                              v991 = *v990;
                            }
                            *(unsigned char *)(v998 + v996) = 0;
                            *(unsigned char *)(v997 + v996) = 1;
                            *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                             + (((*(void *)(a1 + 184) + v810) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (*(unsigned char *)(a1 + 184) + v810))
                                     + v996) = 0;
                            if ((char *)++v992 - (char *)v991 == 4096)
                            {
                              v999 = v990[1];
                              ++v990;
                              v991 = v999;
                              v992 = v999;
                            }
                          }
                          while (v992 != (unsigned __int16 *)v993);
                        }
                      }
                      std::deque<unsigned short>::~deque[abi:ne180100](v1115);
                      uint64_t v825 = *(void *)(a1 + 136);
                      uint64_t v826 = *(void *)(a1 + 112);
                      unint64_t v786 = v1073;
                    }
                    unint64_t v810 = (unsigned __int16)++v811;
                    if (*(unsigned char *)(*(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * (v825 + v787))
                                  + v805))
                      BOOL v1000 = 0;
                    else {
                      BOOL v1000 = v786 > (unsigned __int16)v811;
                    }
                    if (!v1000) {
                      break;
                    }
                  }
                  else
                  {
                    unint64_t v810 = (unsigned __int16)++v811;
                    if (v786 <= (unsigned __int16)v811)
                    {
                      uint64_t v825 = *(void *)(a1 + 136);
                      uint64_t v826 = *(void *)(a1 + 112);
                      break;
                    }
                  }
                }
                uint64_t v1001 = *(void *)(*(void *)(v826 + (((v825 + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                  + 16 * (v825 + v787));
                if (!*(unsigned char *)(v1001 + v805))
                {
                  *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 64)
                                                   + (((*(void *)(a1 + 88) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(unsigned char *)(a1 + 88) + v787))
                           + v805) = 1;
                  *(unsigned char *)(v1001 + v805) = 0;
                  *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 160)
                                                   + (((*(void *)(a1 + 184) + v787) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(unsigned char *)(a1 + 184) + v787))
                           + v805) = 0;
                }
                uint64_t v798 = v1061;
                unint64_t v799 = v1058 + 1;
                if ((unsigned __int16 *)((char *)v1058 - *v1061 + 2) == (unsigned __int16 *)4096)
                {
                  uint64_t v798 = v1061 + 1;
                  unint64_t v799 = (unsigned __int16 *)v1061[1];
                }
              }
              while (v799 != (unsigned __int16 *)v1054);
            }
          }
          std::deque<unsigned short>::~deque[abi:ne180100](&__src);
          unint64_t v787 = ++v1068;
        }
        while (v786 > v1068);
        unint64_t v41 = *(void *)(a1 + 968);
        goto LABEL_1215;
      }
LABEL_1216:
      unint64_t v1002 = *(void *)(v41 + 40);
      if (v1002)
      {
        uint64_t v1003 = 0;
        int v1004 = 0;
        do
        {
          unint64_t v1005 = *(void *)(a1 + 136) + v1003;
          uint64_t v1006 = *(void *)(*(void *)(a1 + 112) + ((v1005 >> 5) & 0x7FFFFFFFFFFFFF8));
          v1007 = (uint64_t *)(*(void *)(*(void *)(a1 + 64)
                                        + (((unint64_t)(*(void *)(a1 + 88) + v1003) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (*(unsigned char *)(a1 + 88) + v1003));
          uint64_t v1009 = *v1007;
          uint64_t v1008 = v1007[1];
          v1115[1] = 0;
          v1115[0] = 0;
          uint64_t v1010 = v1008 - v1009;
          if (v1008 == v1009)
          {
            v1012 = 0;
          }
          else
          {
            v1011 = (char *)operator new(v1008 - v1009);
            v1012 = v1011;
            uint64_t v1013 = 0;
            v1115[0] = v1011;
            uint64_t v1014 = *(void *)(v1006 + 16 * v1005);
            do
            {
              v1011[v1013] = (*(unsigned char *)(v1009 + v1013) ^ 1) & ~*(unsigned char *)(v1014 + v1013);
              ++v1013;
            }
            while (v1010 != v1013);
            v1115[1] = &v1011[v1013];
          }
          nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&__src, (uint64_t)v1115);
          if (v1012) {
            operator delete(v1012);
          }
          if ((void)v1119 != __src.n128_u64[1])
          {
            v1015 = (unsigned __int16 **)(__src.n128_u64[1] + 8 * ((unint64_t)v1120 >> 11));
            v1016 = *v1015;
            v1017 = &(*v1015)[v1120 & 0x7FF];
            uint64_t v1018 = *(void *)(__src.n128_u64[1]
                              + (((*((void *)&v1120 + 1) + (void)v1120) >> 8) & 0xFFFFFFFFFFFFF8))
                  + 2 * ((*((void *)&v1120 + 1) + v1120) & 0x7FF);
            if (v1017 != (unsigned __int16 *)v1018)
            {
              uint64_t v1019 = *(void *)(*(void *)(*(void *)(a1 + 64)
                                            + (((unint64_t)(*(void *)(a1 + 88) + v1003) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (*(unsigned char *)(a1 + 88) + v1003));
              uint64_t v1020 = *(void *)(*(void *)(*(void *)(a1 + 112)
                                            + (((unint64_t)(*(void *)(a1 + 136) + v1003) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (*(unsigned char *)(a1 + 136) + v1003));
              uint64_t v1021 = *(void *)(*(void *)(*(void *)(a1 + 160)
                                            + (((unint64_t)(*(void *)(a1 + 184) + v1003) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (*(unsigned char *)(a1 + 184) + v1003));
              do
              {
                unsigned int v1022 = *v1017++;
                *(unsigned char *)(v1019 + v1022) = 1;
                *(unsigned char *)(v1020 + v1022) = 0;
                *(unsigned char *)(v1021 + v1022) = 0;
                if ((char *)v1017 - (char *)v1016 == 4096)
                {
                  v1023 = v1015[1];
                  ++v1015;
                  v1016 = v1023;
                  v1017 = v1023;
                }
              }
              while (v1017 != (unsigned __int16 *)v1018);
            }
          }
          std::deque<unsigned short>::~deque[abi:ne180100](&__src);
          uint64_t v1003 = (unsigned __int16)++v1004;
        }
        while (v1002 > (unsigned __int16)v1004);
      }
    }
  }
  else
  {
LABEL_1215:
    if (v41) {
      goto LABEL_1216;
    }
  }
}

void sub_1DD841550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&a41);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&a47);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a53);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&a59);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&a65);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&__p);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&STACK[0x220]);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100]((void *)(v71 - 240));
  _Unwind_Resume(a1);
}

uint64_t nms::RectForest<unsigned short,double>::operator=(uint64_t a1, uint64_t a2)
{
  std::deque<std::valarray<double>>::__move_assign(a1 + 80, a2 + 80);
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::__move_assign(a1 + 128, a2 + 128);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  std::__tree<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::__map_value_compare<nms::ForestLevelType,std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::less<nms::ForestLevelType>,true>,std::allocator<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>>>::__move_assign((void *)(a1 + 176), (void *)(a2 + 176));
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

double *std::__val_expr<std::_BinaryOp<std::multiplies<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::operator std::valarray<double>(double *result, uint64_t a2)
{
  *double result = 0.0;
  result[1] = 0.0;
  unint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    uint64_t v3 = result;
    if (v2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    double result = (double *)operator new(8 * v2);
    *uint64_t v3 = result;
    v3[1] = result;
    uint64_t v5 = *(void *)(a2 + 32);
    unint64_t v6 = (double *)(**(void **)(a2 + 40) + 8 * *(void *)(a2 + 48));
    uint64_t v7 = 8 * *(void *)(a2 + 64);
    uint64_t v8 = (double *)(**(void **)(a2 + 8) + 8 * *(void *)(a2 + 16));
    do
    {
      *result++ = *v8 * *v6;
      unint64_t v6 = (double *)((char *)v6 + v7);
      v8 += v5;
      --v2;
    }
    while (v2);
    v3[1] = result;
  }
  return result;
}

void sub_1DD841C1C(_Unwind_Exception *a1)
{
  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::valarray<unsigned char>>::resize(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[5];
  unint64_t v4 = a2 - v3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      unint64_t v25 = a1[4];
      uint64_t v26 = a1[1];
      uint64_t v27 = a1[2];
      unint64_t v28 = (char *)(v26 + 8 * (v25 >> 8));
      if (v27 == v26)
      {
        uint64_t v29 = (char *)std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100]((void *)(v26 + 8 * (v25 >> 8)), 0, a2);
        uint64_t v32 = 0;
        unint64_t v31 = (char *)(v26 + 8 * ((v25 + v3) >> 8));
      }
      else
      {
        uint64_t v29 = (char *)std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100]((void *)(v26 + 8 * (v25 >> 8)), *(void *)v28 + 16 * v25, a2);
        unint64_t v31 = (char *)(v26 + 8 * ((v25 + v3) >> 8));
        uint64_t v32 = *(void *)v31 + 16 * (v25 + v3);
      }
      if (v32 != v30)
      {
        uint64_t v55 = v30 - *(void *)v29;
        uint64_t v56 = ((v32 - *(void *)v31) >> 4) + 32 * (v31 - v29) - (v55 >> 4);
        if (v56 >= 1)
        {
          if (v27 == v26) {
            uint64_t v57 = 0;
          }
          else {
            uint64_t v57 = *(void *)v28 + 16 * v25;
          }
          if (v57 == v30) {
            uint64_t v58 = 0;
          }
          else {
            uint64_t v58 = (v55 >> 4) + 32 * (v29 - v28) - ((v57 - *(void *)v28) >> 4);
          }
          char v59 = std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100]((void *)(v26 + 8 * (v25 >> 8)), v57, v58);
          if (v60 != v32)
          {
            uint64_t v61 = v59;
            uint64_t v62 = v60;
            do
            {
              v63 = *(void **)v62;
              if (*(void *)v62)
              {
                if (*(void **)(v62 + 8) != v63) {
                  *(void *)(v62 + 8) = v63;
                }
                operator delete(v63);
                *(void *)uint64_t v62 = 0;
                *(void *)(v62 + 8) = 0;
              }
              v62 += 16;
              if (v62 - *v61 == 4096)
              {
                uint64_t v64 = v61[1];
                ++v61;
                uint64_t v62 = v64;
              }
            }
            while (v62 != v32);
            unint64_t v3 = a1[5];
          }
          a1[5] = v3 - v56;
          while ((std::deque<std::valarray<unsigned char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0)
            ;
        }
      }
    }
  }
  else
  {
    uint64_t v5 = (char *)a1[1];
    unint64_t v6 = (char *)a1[2];
    uint64_t v7 = v6 - v5;
    if (v6 == v5) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 32 * (v6 - v5) - 1;
    }
    unint64_t v9 = a1[4];
    unint64_t v10 = v9 + v3;
    unint64_t v11 = v8 - (v9 + v3);
    BOOL v12 = v4 >= v11;
    unint64_t v13 = v4 - v11;
    if (v13 != 0 && v12)
    {
      if (v6 == v5) {
        unint64_t v14 = v13 + 1;
      }
      else {
        unint64_t v14 = v13;
      }
      if ((_BYTE)v14) {
        unint64_t v15 = (v14 >> 8) + 1;
      }
      else {
        unint64_t v15 = v14 >> 8;
      }
      if (v15 >= v9 >> 8) {
        unint64_t v16 = v9 >> 8;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v15 <= v9 >> 8)
      {
        for (a1[4] = v9 - (v16 << 8); v16; --v16)
        {
          uint64_t v33 = (void *)a1[1];
          uint64_t v36 = *v33;
          uint64_t v34 = (char *)(v33 + 1);
          uint64_t v35 = v36;
          a1[1] = v34;
          if (v6 == (char *)a1[3])
          {
            uint64_t v37 = (uint64_t)&v34[-*a1];
            if ((unint64_t)v34 <= *a1)
            {
              if (v6 == (char *)*a1) {
                unint64_t v45 = 1;
              }
              else {
                unint64_t v45 = (uint64_t)&v6[-*a1] >> 2;
              }
              uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v45);
              uint64_t v48 = &v46[8 * (v45 >> 2)];
              uint64_t v49 = (uint64_t *)a1[1];
              unint64_t v6 = v48;
              uint64_t v50 = a1[2] - (void)v49;
              if (v50)
              {
                unint64_t v6 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v51 = 8 * (v50 >> 3);
                unint64_t v52 = &v46[8 * (v45 >> 2)];
                do
                {
                  uint64_t v53 = *v49++;
                  *(void *)unint64_t v52 = v53;
                  v52 += 8;
                  v51 -= 8;
                }
                while (v51);
              }
              uint64_t v54 = (char *)*a1;
              *a1 = v46;
              a1[1] = v48;
              a1[2] = v6;
              a1[3] = &v46[8 * v47];
              if (v54)
              {
                operator delete(v54);
                unint64_t v6 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v38 = v37 >> 3;
              BOOL v39 = v37 >> 3 < -1;
              uint64_t v40 = (v37 >> 3) + 2;
              if (v39) {
                uint64_t v41 = v40;
              }
              else {
                uint64_t v41 = v38 + 1;
              }
              uint64_t v42 = &v34[-8 * (v41 >> 1)];
              int64_t v43 = v6 - v34;
              if (v6 != v34)
              {
                memmove(&v34[-8 * (v41 >> 1)], v34, v6 - v34);
                unint64_t v6 = (char *)a1[1];
              }
              v44 = &v6[-8 * (v41 >> 1)];
              unint64_t v6 = &v42[v43];
              a1[1] = v44;
              a1[2] = &v42[v43];
            }
          }
          *(void *)unint64_t v6 = v35;
          unint64_t v6 = (char *)(a1[2] + 8);
          a1[2] = v6;
        }
      }
      else
      {
        unint64_t v17 = v15 - v16;
        uint64_t v18 = a1[3] - *a1;
        if (v15 - v16 <= (v18 >> 3) - (v7 >> 3))
        {
          while (1)
          {
            if (!v17)
            {
              unint64_t v15 = v16;
              goto LABEL_157;
            }
            if ((char *)a1[3] == v6) {
              break;
            }
            *(void *)unint64_t v6 = operator new(0x1000uLL);
            unint64_t v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
            --v15;
            --v17;
          }
          do
          {
            uint64_t v115 = operator new(0x1000uLL);
            uint64_t v116 = (char *)a1[1];
            if (v116 == (char *)*a1)
            {
              unint64_t v118 = a1[3];
              if ((unint64_t)v6 >= v118)
              {
                uint64_t v123 = v118 - (void)v116;
                BOOL v107 = v123 == 0;
                uint64_t v124 = v123 >> 2;
                if (v107) {
                  unint64_t v125 = 1;
                }
                else {
                  unint64_t v125 = v124;
                }
                uint64_t v126 = 2 * v125;
                float64x2_t v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v125);
                unint64_t v117 = &v127[(v126 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v129 = (uint64_t *)a1[1];
                uint64_t v130 = v117;
                uint64_t v131 = a1[2] - (void)v129;
                if (v131)
                {
                  uint64_t v130 = &v117[v131 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v132 = 8 * (v131 >> 3);
                  unint64_t v133 = v117;
                  do
                  {
                    uint64_t v134 = *v129++;
                    *(void *)unint64_t v133 = v134;
                    v133 += 8;
                    v132 -= 8;
                  }
                  while (v132);
                }
                uint64_t v135 = (char *)*a1;
                *a1 = v127;
                a1[1] = v117;
                a1[2] = v130;
                a1[3] = &v127[8 * v128];
                if (v135)
                {
                  operator delete(v135);
                  unint64_t v117 = (char *)a1[1];
                }
              }
              else
              {
                uint64_t v119 = (uint64_t)(v118 - (void)v6) >> 3;
                if (v119 >= -1) {
                  uint64_t v120 = v119 + 1;
                }
                else {
                  uint64_t v120 = v119 + 2;
                }
                uint64_t v121 = v120 >> 1;
                unint64_t v122 = &v6[8 * (v120 >> 1)];
                unint64_t v117 = &v122[-(v6 - v116)];
                if (v6 != v116)
                {
                  memmove(&v122[-(v6 - v116)], v116, v6 - v116);
                  unint64_t v6 = (char *)a1[2];
                }
                a1[1] = v117;
                a1[2] = &v6[8 * v121];
              }
            }
            else
            {
              unint64_t v117 = (char *)a1[1];
            }
            *((void *)v117 - 1) = v115;
            unint64_t v6 = (char *)a1[2];
            uint64_t v136 = a1[1] - 8;
            a1[1] = v136;
            if (&v6[-v136] == (char *)8) {
              uint64_t v137 = 255;
            }
            else {
              uint64_t v137 = 256;
            }
            unint64_t v9 = v137 + a1[4];
            a1[4] = v9;
            --v17;
          }
          while (v17);
LABEL_157:
          for (a1[4] = v9 - (v15 << 8); v15; --v15)
          {
            unint64_t v138 = (void *)a1[1];
            uint64_t v141 = *v138;
            unint64_t v139 = (char *)(v138 + 1);
            uint64_t v140 = v141;
            a1[1] = v139;
            if (v6 == (char *)a1[3])
            {
              uint64_t v142 = (uint64_t)&v139[-*a1];
              if ((unint64_t)v139 <= *a1)
              {
                if (v6 == (char *)*a1) {
                  unint64_t v149 = 1;
                }
                else {
                  unint64_t v149 = (uint64_t)&v6[-*a1] >> 2;
                }
                unint64_t v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v149);
                unint64_t v152 = &v150[8 * (v149 >> 2)];
                uint64_t v153 = (uint64_t *)a1[1];
                unint64_t v6 = v152;
                uint64_t v154 = a1[2] - (void)v153;
                if (v154)
                {
                  unint64_t v6 = &v152[v154 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v155 = 8 * (v154 >> 3);
                  uint64_t v156 = &v150[8 * (v149 >> 2)];
                  do
                  {
                    uint64_t v157 = *v153++;
                    *(void *)uint64_t v156 = v157;
                    v156 += 8;
                    v155 -= 8;
                  }
                  while (v155);
                }
                unint64_t v158 = (char *)*a1;
                *a1 = v150;
                a1[1] = v152;
                a1[2] = v6;
                a1[3] = &v150[8 * v151];
                if (v158)
                {
                  operator delete(v158);
                  unint64_t v6 = (char *)a1[2];
                }
              }
              else
              {
                uint64_t v143 = v142 >> 3;
                BOOL v39 = v142 >> 3 < -1;
                uint64_t v144 = (v142 >> 3) + 2;
                if (v39) {
                  uint64_t v145 = v144;
                }
                else {
                  uint64_t v145 = v143 + 1;
                }
                BOOL v146 = &v139[-8 * (v145 >> 1)];
                int64_t v147 = v6 - v139;
                if (v6 != v139)
                {
                  memmove(&v139[-8 * (v145 >> 1)], v139, v6 - v139);
                  unint64_t v6 = (char *)a1[1];
                }
                uint64_t v148 = &v6[-8 * (v145 >> 1)];
                unint64_t v6 = &v146[v147];
                a1[1] = v148;
                a1[2] = &v146[v147];
              }
            }
            *(void *)unint64_t v6 = v140;
            unint64_t v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
          }
        }
        else
        {
          uint64_t v19 = v7 >> 3;
          unint64_t v20 = v18 >> 2;
          if (v20 <= v17 + v19) {
            unint64_t v21 = v17 + v19;
          }
          else {
            unint64_t v21 = v20;
          }
          unint64_t v22 = v19 - v16;
          unint64_t v170 = v4;
          if (v21)
          {
            uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v21);
          }
          else
          {
            uint64_t v24 = 0;
            uint64_t v23 = 0;
          }
          unint64_t v169 = v16 << 8;
          unint64_t v65 = &v24[8 * v22];
          uint64_t v66 = &v24[8 * v23];
          unint64_t v67 = v65;
          do
          {
            uint64_t v68 = operator new(0x1000uLL);
            if (v65 == v66)
            {
              if (v67 <= v24)
              {
                if (v65 == v24) {
                  unint64_t v74 = 1;
                }
                else {
                  unint64_t v74 = (v65 - v24) >> 2;
                }
                uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v74);
                uint64_t v77 = v24;
                int v78 = &v76[8 * (v74 >> 2)];
                unint64_t v69 = v78;
                uint64_t v79 = v65 - v67;
                if (v65 != v67)
                {
                  unint64_t v69 = &v78[v79 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v80 = 8 * (v79 >> 3);
                  int v81 = &v76[8 * (v74 >> 2)];
                  do
                  {
                    uint64_t v82 = *(void *)v67;
                    v67 += 8;
                    *(void *)int v81 = v82;
                    v81 += 8;
                    v80 -= 8;
                  }
                  while (v80);
                }
                uint64_t v66 = &v76[8 * v75];
                if (v77) {
                  operator delete(v77);
                }
                unint64_t v67 = v78;
                uint64_t v24 = v76;
              }
              else
              {
                uint64_t v70 = (v67 - v24) >> 3;
                if (v70 >= -1) {
                  uint64_t v71 = v70 + 1;
                }
                else {
                  uint64_t v71 = v70 + 2;
                }
                uint64_t v72 = v65;
                if (v65 != v67)
                {
                  memmove(&v67[-8 * (v71 >> 1)], v67, v65 - v67);
                  uint64_t v72 = v67;
                }
                uint64_t v73 = -(v71 >> 1);
                unint64_t v69 = &v65[-8 * (v71 >> 1)];
                unint64_t v67 = &v72[8 * v73];
                uint64_t v66 = v65;
              }
            }
            else
            {
              unint64_t v69 = v65;
            }
            *(void *)unint64_t v69 = v68;
            unint64_t v65 = v69 + 8;
            --v17;
          }
          while (v17);
          int v83 = (void *)a1[1];
          if (v16)
          {
            do
            {
              if (v65 == v66)
              {
                if (v67 <= v24)
                {
                  if (v65 == v24) {
                    unint64_t v90 = 1;
                  }
                  else {
                    unint64_t v90 = (v65 - v24) >> 2;
                  }
                  unint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v90);
                  uint64_t v93 = v91;
                  unint64_t v85 = &v91[8 * (v90 >> 2)];
                  int v84 = v85;
                  uint64_t v94 = v65 - v67;
                  if (v65 != v67)
                  {
                    int v84 = &v85[v94 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v95 = 8 * (v94 >> 3);
                    uint64_t v96 = v85;
                    do
                    {
                      uint64_t v97 = *(void *)v67;
                      v67 += 8;
                      *(void *)uint64_t v96 = v97;
                      v96 += 8;
                      v95 -= 8;
                    }
                    while (v95);
                  }
                  unint64_t v65 = &v91[8 * v92];
                  if (v24) {
                    operator delete(v24);
                  }
                  uint64_t v24 = v93;
                }
                else
                {
                  uint64_t v86 = v24;
                  uint64_t v87 = (v67 - v24) >> 3;
                  if (v87 >= -1) {
                    uint64_t v88 = v87 + 1;
                  }
                  else {
                    uint64_t v88 = v87 + 2;
                  }
                  unint64_t v89 = v65;
                  if (v65 != v67)
                  {
                    memmove(&v67[-8 * (v88 >> 1)], v67, v65 - v67);
                    unint64_t v89 = v67;
                  }
                  int v84 = &v65[-8 * (v88 >> 1)];
                  unint64_t v85 = &v89[-8 * (v88 >> 1)];
                  uint64_t v24 = v86;
                }
              }
              else
              {
                int v84 = v65;
                unint64_t v85 = v67;
                unint64_t v65 = v66;
              }
              uint64_t v66 = v65;
              *(void *)int v84 = *v83;
              unint64_t v6 = v84 + 8;
              int v83 = (void *)(a1[1] + 8);
              a1[1] = v83;
              unint64_t v65 = v6;
              unint64_t v67 = v85;
              --v16;
            }
            while (v16);
          }
          else
          {
            unint64_t v6 = v65;
            unint64_t v85 = v67;
          }
          unint64_t v98 = (void *)a1[2];
          if (v98 != v83)
          {
            do
            {
              if (v85 == v24)
              {
                if (v6 >= v66)
                {
                  if (v66 == v24) {
                    unint64_t v103 = 1;
                  }
                  else {
                    unint64_t v103 = (v66 - v24) >> 2;
                  }
                  uint64_t v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v103);
                  double v106 = v104;
                  unint64_t v85 = &v104[(2 * v103 + 6) & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v108 = v6 - v24;
                  BOOL v107 = v6 == v24;
                  unint64_t v6 = v85;
                  if (!v107)
                  {
                    unint64_t v6 = &v85[v108 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v109 = 8 * (v108 >> 3);
                    uint64_t v110 = &v104[(2 * v103 + 6) & 0xFFFFFFFFFFFFFFF8];
                    unint64_t v111 = v24;
                    do
                    {
                      uint64_t v112 = *(void *)v111;
                      v111 += 8;
                      *(void *)uint64_t v110 = v112;
                      v110 += 8;
                      v109 -= 8;
                    }
                    while (v109);
                  }
                  uint64_t v66 = &v104[8 * v105];
                  if (v24) {
                    operator delete(v24);
                  }
                  uint64_t v24 = v106;
                }
                else
                {
                  uint64_t v99 = (v66 - v6) >> 3;
                  if (v99 >= -1) {
                    uint64_t v100 = v99 + 1;
                  }
                  else {
                    uint64_t v100 = v99 + 2;
                  }
                  uint64_t v101 = v100 >> 1;
                  unint64_t v85 = &v24[8 * (v100 >> 1)];
                  uint64_t v102 = v24;
                  if (v6 != v24)
                  {
                    memmove(v85, v24, v6 - v24);
                    uint64_t v102 = v6;
                  }
                  unint64_t v6 = &v102[8 * v101];
                }
              }
              uint64_t v113 = *--v98;
              *((void *)v85 - 1) = v113;
              v85 -= 8;
            }
            while (v98 != (void *)a1[1]);
          }
          v114 = (char *)*a1;
          *a1 = v24;
          a1[1] = v85;
          a1[2] = v6;
          a1[3] = v66;
          unint64_t v4 = v170;
          a1[4] -= v169;
          if (v114)
          {
            operator delete(v114);
            unint64_t v6 = (char *)a1[2];
          }
        }
      }
      unint64_t v3 = a1[5];
      uint64_t v5 = (char *)a1[1];
      unint64_t v10 = a1[4] + v3;
    }
    unint64_t v159 = &v5[8 * (v10 >> 8)];
    if (v6 == v5) {
      uint64_t v160 = 0;
    }
    else {
      uint64_t v160 = (char *)(*(void *)v159 + 16 * v10);
    }
    double v161 = (char *)std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100](v159, (uint64_t)v160, v4);
    if (v160 != v162)
    {
      uint64_t v163 = v161;
      uint64_t v164 = (uint64_t)v162;
      do
      {
        if (v159 == v163) {
          uint64_t v165 = v164;
        }
        else {
          uint64_t v165 = *(void *)v159 + 4096;
        }
        if (v160 == (char *)v165)
        {
          unint64_t v167 = v160;
        }
        else
        {
          size_t v166 = (v165 - (void)v160) & 0xFFFFFFFFFFFFFFF0;
          bzero(v160, v166);
          unint64_t v167 = &v160[v166];
          unint64_t v3 = a1[5];
        }
        v3 += (v167 - v160) >> 4;
        a1[5] = v3;
        if (v159 == v163) {
          break;
        }
        double v168 = (char *)*((void *)v159 + 1);
        v159 += 8;
        uint64_t v160 = v168;
      }
      while (v168 != (char *)v164);
    }
  }
}

void sub_1DD8425A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::resize(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[5];
  unint64_t v4 = a2 - v3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      unint64_t v23 = a1[4];
      uint64_t v24 = a1[1];
      uint64_t v25 = a1[2];
      uint64_t v26 = (char *)(v24 + 8 * (v23 / 0x55));
      unint64_t v27 = v25 == v24 ? 0 : *(void *)v26 + 48 * (v23 % 0x55);
      uint64_t v165 = (char *)(v24 + 8 * (v23 / 0x55));
      size_t v166 = (char *)v27;
      std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v165, a2);
      uint64_t v50 = (char *)(v24 + 8 * ((v23 + v3) / 0x55));
      unint64_t v51 = v25 == v24 ? 0 : *(void *)v50 + 48 * ((v23 + v3) % 0x55);
      if ((char *)v51 != v166)
      {
        uint64_t v52 = 85 * ((v50 - v165) >> 3) - 0x5555555555555555 * ((uint64_t)(v51 - *(void *)v50) >> 4);
        uint64_t v53 = (uint64_t)&v166[-*(void *)v165] >> 4;
        uint64_t v54 = v52 + 0x5555555555555555 * v53;
        if (v54 >= 1)
        {
          if (v25 == v24) {
            unint64_t v55 = 0;
          }
          else {
            unint64_t v55 = *(void *)v26 + 48 * (v23 % 0x55);
          }
          if (v166 == (char *)v55) {
            uint64_t v56 = 0;
          }
          else {
            uint64_t v56 = 85 * ((v165 - v26) >> 3)
          }
                - 0x5555555555555555 * v53
                + 0x5555555555555555 * ((uint64_t)(v55 - *(void *)v26) >> 4);
          uint64_t v165 = (char *)(v24 + 8 * (v23 / 0x55));
          size_t v166 = (char *)v55;
          std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v165, v56);
          uint64_t v57 = (uint64_t)v166;
          if (v166 != (char *)v51)
          {
            uint64_t v58 = v165;
            do
            {
              uint64_t v57 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v57) + 48;
              if (v57 - *(void *)v58 == 4080)
              {
                uint64_t v59 = *((void *)v58 + 1);
                v58 += 8;
                uint64_t v57 = v59;
              }
            }
            while (v57 != v51);
            unint64_t v3 = a1[5];
          }
          a1[5] = v3 - v54;
          while ((std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0);
        }
      }
    }
  }
  else
  {
    uint64_t v5 = (char *)a1[1];
    unint64_t v6 = (char *)a1[2];
    uint64_t v7 = (v6 - v5) >> 3;
    if (v6 == v5) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 85 * v7 - 1;
    }
    unint64_t v9 = a1[4];
    unint64_t v10 = v9 + v3;
    unint64_t v11 = v8 - (v9 + v3);
    BOOL v12 = v4 >= v11;
    unint64_t v13 = v4 - v11;
    if (v13 != 0 && v12)
    {
      if (v6 == v5) {
        unint64_t v14 = v13 + 1;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14 % 0x55) {
        unint64_t v15 = v14 / 0x55 + 1;
      }
      else {
        unint64_t v15 = v14 / 0x55;
      }
      if (v15 >= v9 / 0x55) {
        unint64_t v16 = v9 / 0x55;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v15 <= v9 / 0x55)
      {
        for (a1[4] = v9 - 85 * v16; v16; --v16)
        {
          unint64_t v28 = (void *)a1[1];
          uint64_t v31 = *v28;
          uint64_t v29 = (char *)(v28 + 1);
          uint64_t v30 = v31;
          a1[1] = v29;
          if (v6 == (char *)a1[3])
          {
            uint64_t v32 = (uint64_t)&v29[-*a1];
            if ((unint64_t)v29 <= *a1)
            {
              if (v6 == (char *)*a1) {
                unint64_t v40 = 1;
              }
              else {
                unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
              }
              uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v40);
              int64_t v43 = &v41[8 * (v40 >> 2)];
              v44 = (uint64_t *)a1[1];
              unint64_t v6 = v43;
              uint64_t v45 = a1[2] - (void)v44;
              if (v45)
              {
                unint64_t v6 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v46 = 8 * (v45 >> 3);
                uint64_t v47 = &v41[8 * (v40 >> 2)];
                do
                {
                  uint64_t v48 = *v44++;
                  *(void *)uint64_t v47 = v48;
                  v47 += 8;
                  v46 -= 8;
                }
                while (v46);
              }
              uint64_t v49 = (char *)*a1;
              *a1 = v41;
              a1[1] = v43;
              a1[2] = v6;
              a1[3] = &v41[8 * v42];
              if (v49)
              {
                operator delete(v49);
                unint64_t v6 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v33 = v32 >> 3;
              BOOL v34 = v32 >> 3 < -1;
              uint64_t v35 = (v32 >> 3) + 2;
              if (v34) {
                uint64_t v36 = v35;
              }
              else {
                uint64_t v36 = v33 + 1;
              }
              uint64_t v37 = &v29[-8 * (v36 >> 1)];
              int64_t v38 = v6 - v29;
              if (v6 != v29)
              {
                memmove(&v29[-8 * (v36 >> 1)], v29, v6 - v29);
                unint64_t v6 = (char *)a1[1];
              }
              BOOL v39 = &v6[-8 * (v36 >> 1)];
              unint64_t v6 = &v37[v38];
              a1[1] = v39;
              a1[2] = &v37[v38];
            }
          }
          *(void *)unint64_t v6 = v30;
          unint64_t v6 = (char *)(a1[2] + 8);
          a1[2] = v6;
        }
      }
      else
      {
        unint64_t v17 = v15 - v16;
        uint64_t v18 = a1[3] - *a1;
        if (v15 - v16 <= (v18 >> 3) - v7)
        {
          while (1)
          {
            if (!v17)
            {
              unint64_t v15 = v16;
              goto LABEL_156;
            }
            if ((char *)a1[3] == v6) {
              break;
            }
            *(void *)unint64_t v6 = operator new(0xFF0uLL);
            unint64_t v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
            --v15;
            --v17;
          }
          do
          {
            unint64_t v111 = operator new(0xFF0uLL);
            uint64_t v112 = (char *)a1[1];
            if (v112 == (char *)*a1)
            {
              unint64_t v114 = a1[3];
              if ((unint64_t)v6 >= v114)
              {
                uint64_t v119 = v114 - (void)v112;
                BOOL v103 = v119 == 0;
                uint64_t v120 = v119 >> 2;
                if (v103) {
                  unint64_t v121 = 1;
                }
                else {
                  unint64_t v121 = v120;
                }
                uint64_t v122 = 2 * v121;
                uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v121);
                uint64_t v113 = &v123[(v122 + 6) & 0xFFFFFFFFFFFFFFF8];
                unint64_t v125 = (uint64_t *)a1[1];
                uint64_t v126 = v113;
                uint64_t v127 = a1[2] - (void)v125;
                if (v127)
                {
                  uint64_t v126 = &v113[v127 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v128 = 8 * (v127 >> 3);
                  uint64_t v129 = v113;
                  do
                  {
                    uint64_t v130 = *v125++;
                    *(void *)uint64_t v129 = v130;
                    v129 += 8;
                    v128 -= 8;
                  }
                  while (v128);
                }
                uint64_t v131 = (char *)*a1;
                *a1 = v123;
                a1[1] = v113;
                a1[2] = v126;
                a1[3] = &v123[8 * v124];
                if (v131)
                {
                  operator delete(v131);
                  uint64_t v113 = (char *)a1[1];
                }
              }
              else
              {
                uint64_t v115 = (uint64_t)(v114 - (void)v6) >> 3;
                if (v115 >= -1) {
                  uint64_t v116 = v115 + 1;
                }
                else {
                  uint64_t v116 = v115 + 2;
                }
                uint64_t v117 = v116 >> 1;
                unint64_t v118 = &v6[8 * (v116 >> 1)];
                uint64_t v113 = &v118[-(v6 - v112)];
                if (v6 != v112)
                {
                  memmove(&v118[-(v6 - v112)], v112, v6 - v112);
                  unint64_t v6 = (char *)a1[2];
                }
                a1[1] = v113;
                a1[2] = &v6[8 * v117];
              }
            }
            else
            {
              uint64_t v113 = (char *)a1[1];
            }
            *((void *)v113 - 1) = v111;
            unint64_t v6 = (char *)a1[2];
            uint64_t v132 = a1[1] - 8;
            a1[1] = v132;
            if (&v6[-v132] == (char *)8) {
              uint64_t v133 = 84;
            }
            else {
              uint64_t v133 = 85;
            }
            unint64_t v9 = v133 + a1[4];
            a1[4] = v9;
            --v17;
          }
          while (v17);
LABEL_156:
          for (a1[4] = v9 - 85 * v15; v15; --v15)
          {
            uint64_t v134 = (void *)a1[1];
            uint64_t v137 = *v134;
            uint64_t v135 = (char *)(v134 + 1);
            uint64_t v136 = v137;
            a1[1] = v135;
            if (v6 == (char *)a1[3])
            {
              uint64_t v138 = (uint64_t)&v135[-*a1];
              if ((unint64_t)v135 <= *a1)
              {
                if (v6 == (char *)*a1) {
                  unint64_t v145 = 1;
                }
                else {
                  unint64_t v145 = (uint64_t)&v6[-*a1] >> 2;
                }
                BOOL v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v145);
                uint64_t v148 = &v146[8 * (v145 >> 2)];
                unint64_t v149 = (uint64_t *)a1[1];
                unint64_t v6 = v148;
                uint64_t v150 = a1[2] - (void)v149;
                if (v150)
                {
                  unint64_t v6 = &v148[v150 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v151 = 8 * (v150 >> 3);
                  unint64_t v152 = &v146[8 * (v145 >> 2)];
                  do
                  {
                    uint64_t v153 = *v149++;
                    *(void *)unint64_t v152 = v153;
                    v152 += 8;
                    v151 -= 8;
                  }
                  while (v151);
                }
                uint64_t v154 = (char *)*a1;
                *a1 = v146;
                a1[1] = v148;
                a1[2] = v6;
                a1[3] = &v146[8 * v147];
                if (v154)
                {
                  operator delete(v154);
                  unint64_t v6 = (char *)a1[2];
                }
              }
              else
              {
                uint64_t v139 = v138 >> 3;
                BOOL v34 = v138 >> 3 < -1;
                uint64_t v140 = (v138 >> 3) + 2;
                if (v34) {
                  uint64_t v141 = v140;
                }
                else {
                  uint64_t v141 = v139 + 1;
                }
                uint64_t v142 = &v135[-8 * (v141 >> 1)];
                int64_t v143 = v6 - v135;
                if (v6 != v135)
                {
                  memmove(&v135[-8 * (v141 >> 1)], v135, v6 - v135);
                  unint64_t v6 = (char *)a1[1];
                }
                uint64_t v144 = &v6[-8 * (v141 >> 1)];
                unint64_t v6 = &v142[v143];
                a1[1] = v144;
                a1[2] = &v142[v143];
              }
            }
            *(void *)unint64_t v6 = v136;
            unint64_t v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
          }
        }
        else
        {
          unint64_t v19 = v18 >> 2;
          if (v19 <= v17 + v7) {
            unint64_t v20 = (char *)(v17 + v7);
          }
          else {
            unint64_t v20 = (char *)v19;
          }
          unint64_t v21 = v7 - v16;
          unint64_t v164 = a2 - v3;
          if (v20) {
            unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>((unint64_t)v20);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v163 = -85 * v16;
          uint64_t v60 = &v20[8 * v21];
          uint64_t v61 = &v20[8 * v22];
          uint64_t v62 = v60;
          v63 = v20;
          do
          {
            uint64_t v64 = operator new(0xFF0uLL);
            if (v60 == v61)
            {
              if (v62 <= v63)
              {
                if (v60 == v63) {
                  unint64_t v70 = 1;
                }
                else {
                  unint64_t v70 = (v60 - v63) >> 2;
                }
                uint64_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v70);
                uint64_t v73 = v63;
                unint64_t v74 = &v72[8 * (v70 >> 2)];
                unint64_t v65 = v74;
                uint64_t v75 = v60 - v62;
                if (v60 != v62)
                {
                  unint64_t v65 = &v74[v75 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v76 = 8 * (v75 >> 3);
                  uint64_t v77 = &v72[8 * (v70 >> 2)];
                  do
                  {
                    uint64_t v78 = *(void *)v62;
                    v62 += 8;
                    *(void *)uint64_t v77 = v78;
                    v77 += 8;
                    v76 -= 8;
                  }
                  while (v76);
                }
                uint64_t v61 = &v72[8 * v71];
                if (v73) {
                  operator delete(v73);
                }
                uint64_t v62 = v74;
                v63 = v72;
              }
              else
              {
                uint64_t v66 = (v62 - v63) >> 3;
                if (v66 >= -1) {
                  uint64_t v67 = v66 + 1;
                }
                else {
                  uint64_t v67 = v66 + 2;
                }
                uint64_t v68 = v60;
                if (v60 != v62)
                {
                  memmove(&v62[-8 * (v67 >> 1)], v62, v60 - v62);
                  uint64_t v68 = v62;
                }
                uint64_t v69 = -(v67 >> 1);
                unint64_t v65 = &v60[-8 * (v67 >> 1)];
                uint64_t v62 = &v68[8 * v69];
                uint64_t v61 = v60;
              }
            }
            else
            {
              unint64_t v65 = v60;
            }
            *(void *)unint64_t v65 = v64;
            uint64_t v60 = v65 + 8;
            --v17;
          }
          while (v17);
          uint64_t v79 = (void *)a1[1];
          if (v16)
          {
            do
            {
              if (v60 == v61)
              {
                if (v62 <= v63)
                {
                  if (v60 == v63) {
                    unint64_t v86 = 1;
                  }
                  else {
                    unint64_t v86 = (v60 - v63) >> 2;
                  }
                  uint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v86);
                  unint64_t v89 = v87;
                  int v81 = &v87[8 * (v86 >> 2)];
                  uint64_t v80 = v81;
                  uint64_t v90 = v60 - v62;
                  if (v60 != v62)
                  {
                    uint64_t v80 = &v81[v90 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v91 = 8 * (v90 >> 3);
                    uint64_t v92 = v81;
                    do
                    {
                      uint64_t v93 = *(void *)v62;
                      v62 += 8;
                      *(void *)uint64_t v92 = v93;
                      v92 += 8;
                      v91 -= 8;
                    }
                    while (v91);
                  }
                  uint64_t v60 = &v87[8 * v88];
                  if (v63) {
                    operator delete(v63);
                  }
                  v63 = v89;
                }
                else
                {
                  uint64_t v82 = v63;
                  uint64_t v83 = (v62 - v63) >> 3;
                  if (v83 >= -1) {
                    uint64_t v84 = v83 + 1;
                  }
                  else {
                    uint64_t v84 = v83 + 2;
                  }
                  unint64_t v85 = v60;
                  if (v60 != v62)
                  {
                    memmove(&v62[-8 * (v84 >> 1)], v62, v60 - v62);
                    unint64_t v85 = v62;
                  }
                  uint64_t v80 = &v60[-8 * (v84 >> 1)];
                  int v81 = &v85[-8 * (v84 >> 1)];
                  v63 = v82;
                }
              }
              else
              {
                uint64_t v80 = v60;
                int v81 = v62;
                uint64_t v60 = v61;
              }
              uint64_t v61 = v60;
              *(void *)uint64_t v80 = *v79;
              unint64_t v6 = v80 + 8;
              uint64_t v79 = (void *)(a1[1] + 8);
              a1[1] = v79;
              uint64_t v60 = v6;
              uint64_t v62 = v81;
              --v16;
            }
            while (v16);
          }
          else
          {
            unint64_t v6 = v60;
            int v81 = v62;
          }
          uint64_t v94 = (void *)a1[2];
          if (v94 != v79)
          {
            do
            {
              if (v81 == v63)
              {
                if (v6 >= v61)
                {
                  if (v61 == v63) {
                    unint64_t v99 = 1;
                  }
                  else {
                    unint64_t v99 = (v61 - v63) >> 2;
                  }
                  uint64_t v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v99);
                  uint64_t v102 = v100;
                  int v81 = &v100[(2 * v99 + 6) & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v104 = v6 - v63;
                  BOOL v103 = v6 == v63;
                  unint64_t v6 = v81;
                  if (!v103)
                  {
                    unint64_t v6 = &v81[v104 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v105 = 8 * (v104 >> 3);
                    double v106 = &v100[(2 * v99 + 6) & 0xFFFFFFFFFFFFFFF8];
                    BOOL v107 = v63;
                    do
                    {
                      uint64_t v108 = *(void *)v107;
                      v107 += 8;
                      *(void *)double v106 = v108;
                      v106 += 8;
                      v105 -= 8;
                    }
                    while (v105);
                  }
                  uint64_t v61 = &v100[8 * v101];
                  if (v63) {
                    operator delete(v63);
                  }
                  v63 = v102;
                }
                else
                {
                  uint64_t v95 = (v61 - v6) >> 3;
                  if (v95 >= -1) {
                    uint64_t v96 = v95 + 1;
                  }
                  else {
                    uint64_t v96 = v95 + 2;
                  }
                  uint64_t v97 = v96 >> 1;
                  int v81 = &v63[8 * (v96 >> 1)];
                  unint64_t v98 = v63;
                  if (v6 != v63)
                  {
                    memmove(v81, v63, v6 - v63);
                    unint64_t v98 = v6;
                  }
                  unint64_t v6 = &v98[8 * v97];
                }
              }
              uint64_t v109 = *--v94;
              *((void *)v81 - 1) = v109;
              v81 -= 8;
            }
            while (v94 != (void *)a1[1]);
          }
          uint64_t v110 = (char *)*a1;
          *a1 = v63;
          a1[1] = v81;
          a1[2] = v6;
          a1[3] = v61;
          unint64_t v4 = v164;
          a1[4] += v163;
          if (v110)
          {
            operator delete(v110);
            unint64_t v6 = (char *)a1[2];
          }
        }
      }
      unint64_t v3 = a1[5];
      uint64_t v5 = (char *)a1[1];
      unint64_t v10 = a1[4] + v3;
    }
    uint64_t v155 = &v5[8 * (v10 / 0x55)];
    if (v6 == v5) {
      uint64_t v156 = 0;
    }
    else {
      uint64_t v156 = (char *)(*(void *)v155 + 48 * (v10 % 0x55));
    }
    uint64_t v165 = &v5[8 * (v10 / 0x55)];
    size_t v166 = v156;
    std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v165, v4);
    uint64_t v157 = (uint64_t)v166;
    if (v156 != v166)
    {
      unint64_t v158 = v165;
      do
      {
        if (v155 == v158) {
          uint64_t v159 = v157;
        }
        else {
          uint64_t v159 = *(void *)v155 + 4080;
        }
        if (v156 == (char *)v159)
        {
          double v161 = v156;
        }
        else
        {
          size_t v160 = 48 * ((v159 - (uint64_t)v156 - 48) / 0x30uLL) + 48;
          bzero(v156, v160);
          double v161 = &v156[v160];
          unint64_t v3 = a1[5];
        }
        v3 -= 0x5555555555555555 * ((v161 - v156) >> 4);
        a1[5] = v3;
        if (v155 == v158) {
          break;
        }
        uint64_t v162 = (char *)*((void *)v155 + 1);
        v155 += 8;
        uint64_t v156 = v162;
      }
      while (v162 != (char *)v157);
    }
  }
}

void sub_1DD843004(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::deque<std::deque<unsigned short>>>::resize(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[5];
  unint64_t v4 = a2 - v3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      unint64_t v23 = a1[4];
      uint64_t v25 = a1[1];
      uint64_t v24 = a1[2];
      uint64_t v26 = (char *)(v25 + 8 * (v23 / 0x55));
      unint64_t v27 = v24 == v25 ? 0 : *(void *)v26 + 48 * (v23 % 0x55);
      double v168 = (char *)(v25 + 8 * (v23 / 0x55));
      unint64_t v169 = (char *)v27;
      std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, a2);
      uint64_t v50 = (char *)(v25 + 8 * ((v23 + v3) / 0x55));
      unint64_t v51 = v24 == v25 ? 0 : *(void *)v50 + 48 * ((v23 + v3) % 0x55);
      if ((char *)v51 != v169)
      {
        uint64_t v52 = 85 * ((v50 - v168) >> 3) - 0x5555555555555555 * ((uint64_t)(v51 - *(void *)v50) >> 4);
        uint64_t v53 = (uint64_t)&v169[-*(void *)v168] >> 4;
        uint64_t v54 = v52 + 0x5555555555555555 * v53;
        if (v54 >= 1)
        {
          if (v24 == v25) {
            unint64_t v55 = 0;
          }
          else {
            unint64_t v55 = *(void *)v26 + 48 * (v23 % 0x55);
          }
          if (v169 == (char *)v55) {
            uint64_t v56 = 0;
          }
          else {
            uint64_t v56 = 85 * ((v168 - v26) >> 3)
          }
                - 0x5555555555555555 * v53
                + 0x5555555555555555 * ((uint64_t)(v55 - *(void *)v26) >> 4);
          double v168 = (char *)(v25 + 8 * (v23 / 0x55));
          unint64_t v169 = (char *)v55;
          std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, v56);
          uint64_t v57 = (uint64_t)v169;
          if (v169 != (char *)v51)
          {
            uint64_t v58 = v168;
            do
            {
              uint64_t v57 = std::deque<std::deque<unsigned short>>::~deque[abi:ne180100](v57) + 48;
              if (v57 - *(void *)v58 == 4080)
              {
                uint64_t v59 = *((void *)v58 + 1);
                v58 += 8;
                uint64_t v57 = v59;
              }
            }
            while (v57 != v51);
            uint64_t v25 = a1[1];
            uint64_t v24 = a1[2];
            unint64_t v23 = a1[4];
            unint64_t v3 = a1[5];
          }
          uint64_t v60 = 85 * ((v24 - v25) >> 3) - 1;
          if (v24 == v25) {
            uint64_t v60 = 0;
          }
          a1[5] = v3 - v54;
          if (v60 - (v3 - v54 + v23) >= 0xAA)
          {
            do
            {
              operator delete(*(void **)(v24 - 8));
              uint64_t v61 = a1[1];
              uint64_t v24 = a1[2] - 8;
              uint64_t v62 = 85 * ((v24 - v61) >> 3) - 1;
              a1[2] = v24;
              if (v24 == v61) {
                uint64_t v62 = 0;
              }
            }
            while ((unint64_t)(v62 - (a1[5] + a1[4])) > 0xA9);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v5 = (char *)a1[1];
    unint64_t v6 = (char *)a1[2];
    uint64_t v7 = (v6 - v5) >> 3;
    if (v6 == v5) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 85 * v7 - 1;
    }
    unint64_t v9 = a1[4];
    unint64_t v10 = v9 + v3;
    unint64_t v11 = v8 - (v9 + v3);
    BOOL v12 = v4 >= v11;
    unint64_t v13 = v4 - v11;
    if (v13 != 0 && v12)
    {
      if (v6 == v5) {
        unint64_t v14 = v13 + 1;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14 % 0x55) {
        unint64_t v15 = v14 / 0x55 + 1;
      }
      else {
        unint64_t v15 = v14 / 0x55;
      }
      if (v15 >= v9 / 0x55) {
        unint64_t v16 = v9 / 0x55;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v15 <= v9 / 0x55)
      {
        for (a1[4] = v9 - 85 * v16; v16; --v16)
        {
          unint64_t v28 = (void *)a1[1];
          uint64_t v31 = *v28;
          uint64_t v29 = (char *)(v28 + 1);
          uint64_t v30 = v31;
          a1[1] = v29;
          if (v6 == (char *)a1[3])
          {
            uint64_t v32 = (uint64_t)&v29[-*a1];
            if ((unint64_t)v29 <= *a1)
            {
              if (v6 == (char *)*a1) {
                unint64_t v40 = 1;
              }
              else {
                unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
              }
              uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v40);
              int64_t v43 = &v41[8 * (v40 >> 2)];
              v44 = (uint64_t *)a1[1];
              unint64_t v6 = v43;
              uint64_t v45 = a1[2] - (void)v44;
              if (v45)
              {
                unint64_t v6 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v46 = 8 * (v45 >> 3);
                uint64_t v47 = &v41[8 * (v40 >> 2)];
                do
                {
                  uint64_t v48 = *v44++;
                  *(void *)uint64_t v47 = v48;
                  v47 += 8;
                  v46 -= 8;
                }
                while (v46);
              }
              uint64_t v49 = (char *)*a1;
              *a1 = v41;
              a1[1] = v43;
              a1[2] = v6;
              a1[3] = &v41[8 * v42];
              if (v49)
              {
                operator delete(v49);
                unint64_t v6 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v33 = v32 >> 3;
              BOOL v34 = v32 >> 3 < -1;
              uint64_t v35 = (v32 >> 3) + 2;
              if (v34) {
                uint64_t v36 = v35;
              }
              else {
                uint64_t v36 = v33 + 1;
              }
              uint64_t v37 = &v29[-8 * (v36 >> 1)];
              int64_t v38 = v6 - v29;
              if (v6 != v29)
              {
                memmove(&v29[-8 * (v36 >> 1)], v29, v6 - v29);
                unint64_t v6 = (char *)a1[1];
              }
              BOOL v39 = &v6[-8 * (v36 >> 1)];
              unint64_t v6 = &v37[v38];
              a1[1] = v39;
              a1[2] = &v37[v38];
            }
          }
          *(void *)unint64_t v6 = v30;
          unint64_t v6 = (char *)(a1[2] + 8);
          a1[2] = v6;
        }
      }
      else
      {
        unint64_t v17 = v15 - v16;
        uint64_t v18 = a1[3] - *a1;
        if (v15 - v16 <= (v18 >> 3) - v7)
        {
          while (1)
          {
            if (!v17)
            {
              unint64_t v15 = v16;
              goto LABEL_160;
            }
            if ((char *)a1[3] == v6) {
              break;
            }
            *(void *)unint64_t v6 = operator new(0xFF0uLL);
            unint64_t v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
            --v15;
            --v17;
          }
          do
          {
            unint64_t v114 = operator new(0xFF0uLL);
            uint64_t v115 = (char *)a1[1];
            if (v115 == (char *)*a1)
            {
              unint64_t v117 = a1[3];
              if ((unint64_t)v6 >= v117)
              {
                uint64_t v122 = v117 - (void)v115;
                BOOL v106 = v122 == 0;
                uint64_t v123 = v122 >> 2;
                if (v106) {
                  unint64_t v124 = 1;
                }
                else {
                  unint64_t v124 = v123;
                }
                uint64_t v125 = 2 * v124;
                uint64_t v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v124);
                uint64_t v116 = &v126[(v125 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v128 = (uint64_t *)a1[1];
                uint64_t v129 = v116;
                uint64_t v130 = a1[2] - (void)v128;
                if (v130)
                {
                  uint64_t v129 = &v116[v130 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v131 = 8 * (v130 >> 3);
                  uint64_t v132 = v116;
                  do
                  {
                    uint64_t v133 = *v128++;
                    *(void *)uint64_t v132 = v133;
                    v132 += 8;
                    v131 -= 8;
                  }
                  while (v131);
                }
                uint64_t v134 = (char *)*a1;
                *a1 = v126;
                a1[1] = v116;
                a1[2] = v129;
                a1[3] = &v126[8 * v127];
                if (v134)
                {
                  operator delete(v134);
                  uint64_t v116 = (char *)a1[1];
                }
              }
              else
              {
                uint64_t v118 = (uint64_t)(v117 - (void)v6) >> 3;
                if (v118 >= -1) {
                  uint64_t v119 = v118 + 1;
                }
                else {
                  uint64_t v119 = v118 + 2;
                }
                uint64_t v120 = v119 >> 1;
                unint64_t v121 = &v6[8 * (v119 >> 1)];
                uint64_t v116 = &v121[-(v6 - v115)];
                if (v6 != v115)
                {
                  memmove(&v121[-(v6 - v115)], v115, v6 - v115);
                  unint64_t v6 = (char *)a1[2];
                }
                a1[1] = v116;
                a1[2] = &v6[8 * v120];
              }
            }
            else
            {
              uint64_t v116 = (char *)a1[1];
            }
            *((void *)v116 - 1) = v114;
            unint64_t v6 = (char *)a1[2];
            uint64_t v135 = a1[1] - 8;
            a1[1] = v135;
            if (&v6[-v135] == (char *)8) {
              uint64_t v136 = 84;
            }
            else {
              uint64_t v136 = 85;
            }
            unint64_t v9 = v136 + a1[4];
            a1[4] = v9;
            --v17;
          }
          while (v17);
LABEL_160:
          for (a1[4] = v9 - 85 * v15; v15; --v15)
          {
            uint64_t v137 = (void *)a1[1];
            uint64_t v140 = *v137;
            uint64_t v138 = (char *)(v137 + 1);
            uint64_t v139 = v140;
            a1[1] = v138;
            if (v6 == (char *)a1[3])
            {
              uint64_t v141 = (uint64_t)&v138[-*a1];
              if ((unint64_t)v138 <= *a1)
              {
                if (v6 == (char *)*a1) {
                  unint64_t v148 = 1;
                }
                else {
                  unint64_t v148 = (uint64_t)&v6[-*a1] >> 2;
                }
                unint64_t v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v148);
                uint64_t v151 = &v149[8 * (v148 >> 2)];
                unint64_t v152 = (uint64_t *)a1[1];
                unint64_t v6 = v151;
                uint64_t v153 = a1[2] - (void)v152;
                if (v153)
                {
                  unint64_t v6 = &v151[v153 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v154 = 8 * (v153 >> 3);
                  uint64_t v155 = &v149[8 * (v148 >> 2)];
                  do
                  {
                    uint64_t v156 = *v152++;
                    *(void *)uint64_t v155 = v156;
                    v155 += 8;
                    v154 -= 8;
                  }
                  while (v154);
                }
                uint64_t v157 = (char *)*a1;
                *a1 = v149;
                a1[1] = v151;
                a1[2] = v6;
                a1[3] = &v149[8 * v150];
                if (v157)
                {
                  operator delete(v157);
                  unint64_t v6 = (char *)a1[2];
                }
              }
              else
              {
                uint64_t v142 = v141 >> 3;
                BOOL v34 = v141 >> 3 < -1;
                uint64_t v143 = (v141 >> 3) + 2;
                if (v34) {
                  uint64_t v144 = v143;
                }
                else {
                  uint64_t v144 = v142 + 1;
                }
                unint64_t v145 = &v138[-8 * (v144 >> 1)];
                int64_t v146 = v6 - v138;
                if (v6 != v138)
                {
                  memmove(&v138[-8 * (v144 >> 1)], v138, v6 - v138);
                  unint64_t v6 = (char *)a1[1];
                }
                uint64_t v147 = &v6[-8 * (v144 >> 1)];
                unint64_t v6 = &v145[v146];
                a1[1] = v147;
                a1[2] = &v145[v146];
              }
            }
            *(void *)unint64_t v6 = v139;
            unint64_t v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
          }
        }
        else
        {
          unint64_t v19 = v18 >> 2;
          if (v19 <= v17 + v7) {
            unint64_t v20 = (char *)(v17 + v7);
          }
          else {
            unint64_t v20 = (char *)v19;
          }
          unint64_t v21 = v7 - v16;
          unint64_t v167 = a2 - v3;
          if (v20) {
            unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>((unint64_t)v20);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v166 = -85 * v16;
          v63 = &v20[8 * v21];
          uint64_t v64 = &v20[8 * v22];
          unint64_t v65 = v63;
          uint64_t v66 = v20;
          do
          {
            uint64_t v67 = operator new(0xFF0uLL);
            if (v63 == v64)
            {
              if (v65 <= v66)
              {
                if (v63 == v66) {
                  unint64_t v73 = 1;
                }
                else {
                  unint64_t v73 = (v63 - v66) >> 2;
                }
                uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v73);
                uint64_t v76 = v66;
                uint64_t v77 = &v75[8 * (v73 >> 2)];
                uint64_t v68 = v77;
                uint64_t v78 = v63 - v65;
                if (v63 != v65)
                {
                  uint64_t v68 = &v77[v78 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v79 = 8 * (v78 >> 3);
                  uint64_t v80 = &v75[8 * (v73 >> 2)];
                  do
                  {
                    uint64_t v81 = *(void *)v65;
                    v65 += 8;
                    *(void *)uint64_t v80 = v81;
                    v80 += 8;
                    v79 -= 8;
                  }
                  while (v79);
                }
                uint64_t v64 = &v75[8 * v74];
                if (v76) {
                  operator delete(v76);
                }
                unint64_t v65 = v77;
                uint64_t v66 = v75;
              }
              else
              {
                uint64_t v69 = (v65 - v66) >> 3;
                if (v69 >= -1) {
                  uint64_t v70 = v69 + 1;
                }
                else {
                  uint64_t v70 = v69 + 2;
                }
                uint64_t v71 = v63;
                if (v63 != v65)
                {
                  memmove(&v65[-8 * (v70 >> 1)], v65, v63 - v65);
                  uint64_t v71 = v65;
                }
                uint64_t v72 = -(v70 >> 1);
                uint64_t v68 = &v63[-8 * (v70 >> 1)];
                unint64_t v65 = &v71[8 * v72];
                uint64_t v64 = v63;
              }
            }
            else
            {
              uint64_t v68 = v63;
            }
            *(void *)uint64_t v68 = v67;
            v63 = v68 + 8;
            --v17;
          }
          while (v17);
          uint64_t v82 = (void *)a1[1];
          if (v16)
          {
            do
            {
              if (v63 == v64)
              {
                if (v65 <= v66)
                {
                  if (v63 == v66) {
                    unint64_t v89 = 1;
                  }
                  else {
                    unint64_t v89 = (v63 - v66) >> 2;
                  }
                  uint64_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v89);
                  uint64_t v92 = v90;
                  uint64_t v84 = &v90[8 * (v89 >> 2)];
                  uint64_t v83 = v84;
                  uint64_t v93 = v63 - v65;
                  if (v63 != v65)
                  {
                    uint64_t v83 = &v84[v93 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v94 = 8 * (v93 >> 3);
                    uint64_t v95 = v84;
                    do
                    {
                      uint64_t v96 = *(void *)v65;
                      v65 += 8;
                      *(void *)uint64_t v95 = v96;
                      v95 += 8;
                      v94 -= 8;
                    }
                    while (v94);
                  }
                  v63 = &v90[8 * v91];
                  if (v66) {
                    operator delete(v66);
                  }
                  uint64_t v66 = v92;
                }
                else
                {
                  unint64_t v85 = v66;
                  uint64_t v86 = (v65 - v66) >> 3;
                  if (v86 >= -1) {
                    uint64_t v87 = v86 + 1;
                  }
                  else {
                    uint64_t v87 = v86 + 2;
                  }
                  uint64_t v88 = v63;
                  if (v63 != v65)
                  {
                    memmove(&v65[-8 * (v87 >> 1)], v65, v63 - v65);
                    uint64_t v88 = v65;
                  }
                  uint64_t v83 = &v63[-8 * (v87 >> 1)];
                  uint64_t v84 = &v88[-8 * (v87 >> 1)];
                  uint64_t v66 = v85;
                }
              }
              else
              {
                uint64_t v83 = v63;
                uint64_t v84 = v65;
                v63 = v64;
              }
              uint64_t v64 = v63;
              *(void *)uint64_t v83 = *v82;
              unint64_t v6 = v83 + 8;
              uint64_t v82 = (void *)(a1[1] + 8);
              a1[1] = v82;
              v63 = v6;
              unint64_t v65 = v84;
              --v16;
            }
            while (v16);
          }
          else
          {
            unint64_t v6 = v63;
            uint64_t v84 = v65;
          }
          uint64_t v97 = (void *)a1[2];
          if (v97 != v82)
          {
            do
            {
              if (v84 == v66)
              {
                if (v6 >= v64)
                {
                  if (v64 == v66) {
                    unint64_t v102 = 1;
                  }
                  else {
                    unint64_t v102 = (v64 - v66) >> 2;
                  }
                  BOOL v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v102);
                  uint64_t v105 = v103;
                  uint64_t v84 = &v103[(2 * v102 + 6) & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v107 = v6 - v66;
                  BOOL v106 = v6 == v66;
                  unint64_t v6 = v84;
                  if (!v106)
                  {
                    unint64_t v6 = &v84[v107 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v108 = 8 * (v107 >> 3);
                    uint64_t v109 = &v103[(2 * v102 + 6) & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v110 = v66;
                    do
                    {
                      uint64_t v111 = *(void *)v110;
                      v110 += 8;
                      *(void *)uint64_t v109 = v111;
                      v109 += 8;
                      v108 -= 8;
                    }
                    while (v108);
                  }
                  uint64_t v64 = &v103[8 * v104];
                  if (v66) {
                    operator delete(v66);
                  }
                  uint64_t v66 = v105;
                }
                else
                {
                  uint64_t v98 = (v64 - v6) >> 3;
                  if (v98 >= -1) {
                    uint64_t v99 = v98 + 1;
                  }
                  else {
                    uint64_t v99 = v98 + 2;
                  }
                  uint64_t v100 = v99 >> 1;
                  uint64_t v84 = &v66[8 * (v99 >> 1)];
                  uint64_t v101 = v66;
                  if (v6 != v66)
                  {
                    memmove(v84, v66, v6 - v66);
                    uint64_t v101 = v6;
                  }
                  unint64_t v6 = &v101[8 * v100];
                }
              }
              uint64_t v112 = *--v97;
              *((void *)v84 - 1) = v112;
              v84 -= 8;
            }
            while (v97 != (void *)a1[1]);
          }
          uint64_t v113 = (char *)*a1;
          *a1 = v66;
          a1[1] = v84;
          a1[2] = v6;
          a1[3] = v64;
          unint64_t v4 = v167;
          a1[4] += v166;
          if (v113)
          {
            operator delete(v113);
            unint64_t v6 = (char *)a1[2];
          }
        }
      }
      unint64_t v3 = a1[5];
      uint64_t v5 = (char *)a1[1];
      unint64_t v10 = a1[4] + v3;
    }
    unint64_t v158 = &v5[8 * (v10 / 0x55)];
    if (v6 == v5) {
      uint64_t v159 = 0;
    }
    else {
      uint64_t v159 = (char *)(*(void *)v158 + 48 * (v10 % 0x55));
    }
    double v168 = &v5[8 * (v10 / 0x55)];
    unint64_t v169 = v159;
    std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, v4);
    uint64_t v160 = (uint64_t)v169;
    if (v159 != v169)
    {
      double v161 = v168;
      do
      {
        if (v158 == v161) {
          uint64_t v162 = v160;
        }
        else {
          uint64_t v162 = *(void *)v158 + 4080;
        }
        if (v159 == (char *)v162)
        {
          unint64_t v164 = v159;
        }
        else
        {
          size_t v163 = 48 * ((v162 - (uint64_t)v159 - 48) / 0x30uLL) + 48;
          bzero(v159, v163);
          unint64_t v164 = &v159[v163];
          unint64_t v3 = a1[5];
        }
        v3 -= 0x5555555555555555 * ((v164 - v159) >> 4);
        a1[5] = v3;
        if (v158 == v161) {
          break;
        }
        uint64_t v165 = (char *)*((void *)v158 + 1);
        v158 += 8;
        uint64_t v159 = v165;
      }
      while (v165 != (char *)v160);
    }
  }
}

void sub_1DD843AC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::deque<unsigned short>>::resize(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[5];
  unint64_t v4 = a2 - v3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      unint64_t v23 = a1[4];
      uint64_t v25 = a1[1];
      uint64_t v24 = a1[2];
      uint64_t v26 = (char *)(v25 + 8 * (v23 / 0x55));
      unint64_t v27 = v24 == v25 ? 0 : *(void *)v26 + 48 * (v23 % 0x55);
      double v168 = (char *)(v25 + 8 * (v23 / 0x55));
      unint64_t v169 = (char *)v27;
      std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, a2);
      uint64_t v50 = (char *)(v25 + 8 * ((v23 + v3) / 0x55));
      unint64_t v51 = v24 == v25 ? 0 : *(void *)v50 + 48 * ((v23 + v3) % 0x55);
      if ((char *)v51 != v169)
      {
        uint64_t v52 = 85 * ((v50 - v168) >> 3) - 0x5555555555555555 * ((uint64_t)(v51 - *(void *)v50) >> 4);
        uint64_t v53 = (uint64_t)&v169[-*(void *)v168] >> 4;
        uint64_t v54 = v52 + 0x5555555555555555 * v53;
        if (v54 >= 1)
        {
          if (v24 == v25) {
            unint64_t v55 = 0;
          }
          else {
            unint64_t v55 = *(void *)v26 + 48 * (v23 % 0x55);
          }
          if (v169 == (char *)v55) {
            uint64_t v56 = 0;
          }
          else {
            uint64_t v56 = 85 * ((v168 - v26) >> 3)
          }
                - 0x5555555555555555 * v53
                + 0x5555555555555555 * ((uint64_t)(v55 - *(void *)v26) >> 4);
          double v168 = (char *)(v25 + 8 * (v23 / 0x55));
          unint64_t v169 = (char *)v55;
          std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, v56);
          uint64_t v57 = v169;
          if (v169 != (char *)v51)
          {
            uint64_t v58 = v168;
            do
            {
              uint64_t v57 = (void *)(std::deque<unsigned short>::~deque[abi:ne180100](v57) + 48);
              if ((void *)((char *)v57 - *(void *)v58) == (void *)4080)
              {
                uint64_t v59 = (void *)*((void *)v58 + 1);
                v58 += 8;
                uint64_t v57 = v59;
              }
            }
            while (v57 != (void *)v51);
            uint64_t v25 = a1[1];
            uint64_t v24 = a1[2];
            unint64_t v23 = a1[4];
            unint64_t v3 = a1[5];
          }
          uint64_t v60 = 85 * ((v24 - v25) >> 3) - 1;
          if (v24 == v25) {
            uint64_t v60 = 0;
          }
          a1[5] = v3 - v54;
          if (v60 - (v3 - v54 + v23) >= 0xAA)
          {
            do
            {
              operator delete(*(void **)(v24 - 8));
              uint64_t v61 = a1[1];
              uint64_t v24 = a1[2] - 8;
              uint64_t v62 = 85 * ((v24 - v61) >> 3) - 1;
              a1[2] = v24;
              if (v24 == v61) {
                uint64_t v62 = 0;
              }
            }
            while ((unint64_t)(v62 - (a1[5] + a1[4])) > 0xA9);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v5 = (char *)a1[1];
    unint64_t v6 = (char *)a1[2];
    uint64_t v7 = (v6 - v5) >> 3;
    if (v6 == v5) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 85 * v7 - 1;
    }
    unint64_t v9 = a1[4];
    unint64_t v10 = v9 + v3;
    unint64_t v11 = v8 - (v9 + v3);
    BOOL v12 = v4 >= v11;
    unint64_t v13 = v4 - v11;
    if (v13 != 0 && v12)
    {
      if (v6 == v5) {
        unint64_t v14 = v13 + 1;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14 % 0x55) {
        unint64_t v15 = v14 / 0x55 + 1;
      }
      else {
        unint64_t v15 = v14 / 0x55;
      }
      if (v15 >= v9 / 0x55) {
        unint64_t v16 = v9 / 0x55;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v15 <= v9 / 0x55)
      {
        for (a1[4] = v9 - 85 * v16; v16; --v16)
        {
          unint64_t v28 = (void *)a1[1];
          uint64_t v31 = *v28;
          uint64_t v29 = (char *)(v28 + 1);
          uint64_t v30 = v31;
          a1[1] = v29;
          if (v6 == (char *)a1[3])
          {
            uint64_t v32 = (uint64_t)&v29[-*a1];
            if ((unint64_t)v29 <= *a1)
            {
              if (v6 == (char *)*a1) {
                unint64_t v40 = 1;
              }
              else {
                unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
              }
              uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v40);
              int64_t v43 = &v41[8 * (v40 >> 2)];
              v44 = (uint64_t *)a1[1];
              unint64_t v6 = v43;
              uint64_t v45 = a1[2] - (void)v44;
              if (v45)
              {
                unint64_t v6 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v46 = 8 * (v45 >> 3);
                uint64_t v47 = &v41[8 * (v40 >> 2)];
                do
                {
                  uint64_t v48 = *v44++;
                  *(void *)uint64_t v47 = v48;
                  v47 += 8;
                  v46 -= 8;
                }
                while (v46);
              }
              uint64_t v49 = (char *)*a1;
              *a1 = v41;
              a1[1] = v43;
              a1[2] = v6;
              a1[3] = &v41[8 * v42];
              if (v49)
              {
                operator delete(v49);
                unint64_t v6 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v33 = v32 >> 3;
              BOOL v34 = v32 >> 3 < -1;
              uint64_t v35 = (v32 >> 3) + 2;
              if (v34) {
                uint64_t v36 = v35;
              }
              else {
                uint64_t v36 = v33 + 1;
              }
              uint64_t v37 = &v29[-8 * (v36 >> 1)];
              int64_t v38 = v6 - v29;
              if (v6 != v29)
              {
                memmove(&v29[-8 * (v36 >> 1)], v29, v6 - v29);
                unint64_t v6 = (char *)a1[1];
              }
              BOOL v39 = &v6[-8 * (v36 >> 1)];
              unint64_t v6 = &v37[v38];
              a1[1] = v39;
              a1[2] = &v37[v38];
            }
          }
          *(void *)unint64_t v6 = v30;
          unint64_t v6 = (char *)(a1[2] + 8);
          a1[2] = v6;
        }
      }
      else
      {
        unint64_t v17 = v15 - v16;
        uint64_t v18 = a1[3] - *a1;
        if (v15 - v16 <= (v18 >> 3) - v7)
        {
          while (1)
          {
            if (!v17)
            {
              unint64_t v15 = v16;
              goto LABEL_160;
            }
            if ((char *)a1[3] == v6) {
              break;
            }
            *(void *)unint64_t v6 = operator new(0xFF0uLL);
            unint64_t v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
            --v15;
            --v17;
          }
          do
          {
            unint64_t v114 = operator new(0xFF0uLL);
            uint64_t v115 = (char *)a1[1];
            if (v115 == (char *)*a1)
            {
              unint64_t v117 = a1[3];
              if ((unint64_t)v6 >= v117)
              {
                uint64_t v122 = v117 - (void)v115;
                BOOL v106 = v122 == 0;
                uint64_t v123 = v122 >> 2;
                if (v106) {
                  unint64_t v124 = 1;
                }
                else {
                  unint64_t v124 = v123;
                }
                uint64_t v125 = 2 * v124;
                uint64_t v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v124);
                uint64_t v116 = &v126[(v125 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v128 = (uint64_t *)a1[1];
                uint64_t v129 = v116;
                uint64_t v130 = a1[2] - (void)v128;
                if (v130)
                {
                  uint64_t v129 = &v116[v130 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v131 = 8 * (v130 >> 3);
                  uint64_t v132 = v116;
                  do
                  {
                    uint64_t v133 = *v128++;
                    *(void *)uint64_t v132 = v133;
                    v132 += 8;
                    v131 -= 8;
                  }
                  while (v131);
                }
                uint64_t v134 = (char *)*a1;
                *a1 = v126;
                a1[1] = v116;
                a1[2] = v129;
                a1[3] = &v126[8 * v127];
                if (v134)
                {
                  operator delete(v134);
                  uint64_t v116 = (char *)a1[1];
                }
              }
              else
              {
                uint64_t v118 = (uint64_t)(v117 - (void)v6) >> 3;
                if (v118 >= -1) {
                  uint64_t v119 = v118 + 1;
                }
                else {
                  uint64_t v119 = v118 + 2;
                }
                uint64_t v120 = v119 >> 1;
                unint64_t v121 = &v6[8 * (v119 >> 1)];
                uint64_t v116 = &v121[-(v6 - v115)];
                if (v6 != v115)
                {
                  memmove(&v121[-(v6 - v115)], v115, v6 - v115);
                  unint64_t v6 = (char *)a1[2];
                }
                a1[1] = v116;
                a1[2] = &v6[8 * v120];
              }
            }
            else
            {
              uint64_t v116 = (char *)a1[1];
            }
            *((void *)v116 - 1) = v114;
            unint64_t v6 = (char *)a1[2];
            uint64_t v135 = a1[1] - 8;
            a1[1] = v135;
            if (&v6[-v135] == (char *)8) {
              uint64_t v136 = 84;
            }
            else {
              uint64_t v136 = 85;
            }
            unint64_t v9 = v136 + a1[4];
            a1[4] = v9;
            --v17;
          }
          while (v17);
LABEL_160:
          for (a1[4] = v9 - 85 * v15; v15; --v15)
          {
            uint64_t v137 = (void *)a1[1];
            uint64_t v140 = *v137;
            uint64_t v138 = (char *)(v137 + 1);
            uint64_t v139 = v140;
            a1[1] = v138;
            if (v6 == (char *)a1[3])
            {
              uint64_t v141 = (uint64_t)&v138[-*a1];
              if ((unint64_t)v138 <= *a1)
              {
                if (v6 == (char *)*a1) {
                  unint64_t v148 = 1;
                }
                else {
                  unint64_t v148 = (uint64_t)&v6[-*a1] >> 2;
                }
                unint64_t v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v148);
                uint64_t v151 = &v149[8 * (v148 >> 2)];
                unint64_t v152 = (uint64_t *)a1[1];
                unint64_t v6 = v151;
                uint64_t v153 = a1[2] - (void)v152;
                if (v153)
                {
                  unint64_t v6 = &v151[v153 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v154 = 8 * (v153 >> 3);
                  uint64_t v155 = &v149[8 * (v148 >> 2)];
                  do
                  {
                    uint64_t v156 = *v152++;
                    *(void *)uint64_t v155 = v156;
                    v155 += 8;
                    v154 -= 8;
                  }
                  while (v154);
                }
                uint64_t v157 = (char *)*a1;
                *a1 = v149;
                a1[1] = v151;
                a1[2] = v6;
                a1[3] = &v149[8 * v150];
                if (v157)
                {
                  operator delete(v157);
                  unint64_t v6 = (char *)a1[2];
                }
              }
              else
              {
                uint64_t v142 = v141 >> 3;
                BOOL v34 = v141 >> 3 < -1;
                uint64_t v143 = (v141 >> 3) + 2;
                if (v34) {
                  uint64_t v144 = v143;
                }
                else {
                  uint64_t v144 = v142 + 1;
                }
                unint64_t v145 = &v138[-8 * (v144 >> 1)];
                int64_t v146 = v6 - v138;
                if (v6 != v138)
                {
                  memmove(&v138[-8 * (v144 >> 1)], v138, v6 - v138);
                  unint64_t v6 = (char *)a1[1];
                }
                uint64_t v147 = &v6[-8 * (v144 >> 1)];
                unint64_t v6 = &v145[v146];
                a1[1] = v147;
                a1[2] = &v145[v146];
              }
            }
            *(void *)unint64_t v6 = v139;
            unint64_t v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
          }
        }
        else
        {
          unint64_t v19 = v18 >> 2;
          if (v19 <= v17 + v7) {
            unint64_t v20 = (char *)(v17 + v7);
          }
          else {
            unint64_t v20 = (char *)v19;
          }
          unint64_t v21 = v7 - v16;
          unint64_t v167 = a2 - v3;
          if (v20) {
            unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>((unint64_t)v20);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v166 = -85 * v16;
          v63 = &v20[8 * v21];
          uint64_t v64 = &v20[8 * v22];
          unint64_t v65 = v63;
          uint64_t v66 = v20;
          do
          {
            uint64_t v67 = operator new(0xFF0uLL);
            if (v63 == v64)
            {
              if (v65 <= v66)
              {
                if (v63 == v66) {
                  unint64_t v73 = 1;
                }
                else {
                  unint64_t v73 = (v63 - v66) >> 2;
                }
                uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v73);
                uint64_t v76 = v66;
                uint64_t v77 = &v75[8 * (v73 >> 2)];
                uint64_t v68 = v77;
                uint64_t v78 = v63 - v65;
                if (v63 != v65)
                {
                  uint64_t v68 = &v77[v78 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v79 = 8 * (v78 >> 3);
                  uint64_t v80 = &v75[8 * (v73 >> 2)];
                  do
                  {
                    uint64_t v81 = *(void *)v65;
                    v65 += 8;
                    *(void *)uint64_t v80 = v81;
                    v80 += 8;
                    v79 -= 8;
                  }
                  while (v79);
                }
                uint64_t v64 = &v75[8 * v74];
                if (v76) {
                  operator delete(v76);
                }
                unint64_t v65 = v77;
                uint64_t v66 = v75;
              }
              else
              {
                uint64_t v69 = (v65 - v66) >> 3;
                if (v69 >= -1) {
                  uint64_t v70 = v69 + 1;
                }
                else {
                  uint64_t v70 = v69 + 2;
                }
                uint64_t v71 = v63;
                if (v63 != v65)
                {
                  memmove(&v65[-8 * (v70 >> 1)], v65, v63 - v65);
                  uint64_t v71 = v65;
                }
                uint64_t v72 = -(v70 >> 1);
                uint64_t v68 = &v63[-8 * (v70 >> 1)];
                unint64_t v65 = &v71[8 * v72];
                uint64_t v64 = v63;
              }
            }
            else
            {
              uint64_t v68 = v63;
            }
            *(void *)uint64_t v68 = v67;
            v63 = v68 + 8;
            --v17;
          }
          while (v17);
          uint64_t v82 = (void *)a1[1];
          if (v16)
          {
            do
            {
              if (v63 == v64)
              {
                if (v65 <= v66)
                {
                  if (v63 == v66) {
                    unint64_t v89 = 1;
                  }
                  else {
                    unint64_t v89 = (v63 - v66) >> 2;
                  }
                  uint64_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v89);
                  uint64_t v92 = v90;
                  uint64_t v84 = &v90[8 * (v89 >> 2)];
                  uint64_t v83 = v84;
                  uint64_t v93 = v63 - v65;
                  if (v63 != v65)
                  {
                    uint64_t v83 = &v84[v93 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v94 = 8 * (v93 >> 3);
                    uint64_t v95 = v84;
                    do
                    {
                      uint64_t v96 = *(void *)v65;
                      v65 += 8;
                      *(void *)uint64_t v95 = v96;
                      v95 += 8;
                      v94 -= 8;
                    }
                    while (v94);
                  }
                  v63 = &v90[8 * v91];
                  if (v66) {
                    operator delete(v66);
                  }
                  uint64_t v66 = v92;
                }
                else
                {
                  unint64_t v85 = v66;
                  uint64_t v86 = (v65 - v66) >> 3;
                  if (v86 >= -1) {
                    uint64_t v87 = v86 + 1;
                  }
                  else {
                    uint64_t v87 = v86 + 2;
                  }
                  uint64_t v88 = v63;
                  if (v63 != v65)
                  {
                    memmove(&v65[-8 * (v87 >> 1)], v65, v63 - v65);
                    uint64_t v88 = v65;
                  }
                  uint64_t v83 = &v63[-8 * (v87 >> 1)];
                  uint64_t v84 = &v88[-8 * (v87 >> 1)];
                  uint64_t v66 = v85;
                }
              }
              else
              {
                uint64_t v83 = v63;
                uint64_t v84 = v65;
                v63 = v64;
              }
              uint64_t v64 = v63;
              *(void *)uint64_t v83 = *v82;
              unint64_t v6 = v83 + 8;
              uint64_t v82 = (void *)(a1[1] + 8);
              a1[1] = v82;
              v63 = v6;
              unint64_t v65 = v84;
              --v16;
            }
            while (v16);
          }
          else
          {
            unint64_t v6 = v63;
            uint64_t v84 = v65;
          }
          uint64_t v97 = (void *)a1[2];
          if (v97 != v82)
          {
            do
            {
              if (v84 == v66)
              {
                if (v6 >= v64)
                {
                  if (v64 == v66) {
                    unint64_t v102 = 1;
                  }
                  else {
                    unint64_t v102 = (v64 - v66) >> 2;
                  }
                  BOOL v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v102);
                  uint64_t v105 = v103;
                  uint64_t v84 = &v103[(2 * v102 + 6) & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v107 = v6 - v66;
                  BOOL v106 = v6 == v66;
                  unint64_t v6 = v84;
                  if (!v106)
                  {
                    unint64_t v6 = &v84[v107 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v108 = 8 * (v107 >> 3);
                    uint64_t v109 = &v103[(2 * v102 + 6) & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v110 = v66;
                    do
                    {
                      uint64_t v111 = *(void *)v110;
                      v110 += 8;
                      *(void *)uint64_t v109 = v111;
                      v109 += 8;
                      v108 -= 8;
                    }
                    while (v108);
                  }
                  uint64_t v64 = &v103[8 * v104];
                  if (v66) {
                    operator delete(v66);
                  }
                  uint64_t v66 = v105;
                }
                else
                {
                  uint64_t v98 = (v64 - v6) >> 3;
                  if (v98 >= -1) {
                    uint64_t v99 = v98 + 1;
                  }
                  else {
                    uint64_t v99 = v98 + 2;
                  }
                  uint64_t v100 = v99 >> 1;
                  uint64_t v84 = &v66[8 * (v99 >> 1)];
                  uint64_t v101 = v66;
                  if (v6 != v66)
                  {
                    memmove(v84, v66, v6 - v66);
                    uint64_t v101 = v6;
                  }
                  unint64_t v6 = &v101[8 * v100];
                }
              }
              uint64_t v112 = *--v97;
              *((void *)v84 - 1) = v112;
              v84 -= 8;
            }
            while (v97 != (void *)a1[1]);
          }
          uint64_t v113 = (char *)*a1;
          *a1 = v66;
          a1[1] = v84;
          a1[2] = v6;
          a1[3] = v64;
          unint64_t v4 = v167;
          a1[4] += v166;
          if (v113)
          {
            operator delete(v113);
            unint64_t v6 = (char *)a1[2];
          }
        }
      }
      unint64_t v3 = a1[5];
      uint64_t v5 = (char *)a1[1];
      unint64_t v10 = a1[4] + v3;
    }
    unint64_t v158 = &v5[8 * (v10 / 0x55)];
    if (v6 == v5) {
      uint64_t v159 = 0;
    }
    else {
      uint64_t v159 = (char *)(*(void *)v158 + 48 * (v10 % 0x55));
    }
    double v168 = &v5[8 * (v10 / 0x55)];
    unint64_t v169 = v159;
    std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, v4);
    uint64_t v160 = (uint64_t)v169;
    if (v159 != v169)
    {
      double v161 = v168;
      do
      {
        if (v158 == v161) {
          uint64_t v162 = v160;
        }
        else {
          uint64_t v162 = *(void *)v158 + 4080;
        }
        if (v159 == (char *)v162)
        {
          unint64_t v164 = v159;
        }
        else
        {
          size_t v163 = 48 * ((v162 - (uint64_t)v159 - 48) / 0x30uLL) + 48;
          bzero(v159, v163);
          unint64_t v164 = &v159[v163];
          unint64_t v3 = a1[5];
        }
        v3 -= 0x5555555555555555 * ((v164 - v159) >> 4);
        a1[5] = v3;
        if (v158 == v161) {
          break;
        }
        uint64_t v165 = (char *)*((void *)v158 + 1);
        v158 += 8;
        uint64_t v159 = v165;
      }
      while (v165 != (char *)v160);
    }
  }
}

void sub_1DD844584(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void nms::min<double>(uint64_t *a1, double *a2, uint64_t a3)
{
  std::valarray<double>::valarray(a1, (uint64_t **)a3);
  uint64_t v7 = *(uint64_t **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  uint64_t v8 = v6 - (void)v7;
  if (v8)
  {
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (unsigned __int8 *)operator new(v8 >> 3);
    unint64_t v11 = v10;
    uint64_t v12 = 0;
    unint64_t v20 = v10;
    double v13 = *a2;
    do
    {
      v10[v12] = *(double *)&v7[v12] > v13;
      ++v12;
    }
    while (v9 != v12);
    unint64_t v21 = &v10[v12];
  }
  else
  {
    unint64_t v11 = 0;
  }
  std::mask_array<unsigned char>::mask_array[abi:ne180100](&v22, &v20, *a1);
  unint64_t v14 = v23;
  unint64_t v15 = v24;
  if (v24 == v23)
  {
    if (!v24) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v16 = (v24 - v23) >> 3;
    uint64_t v17 = v22;
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    uint64_t v18 = (uint64_t *)v23;
    do
    {
      uint64_t v19 = *v18++;
      *(double *)(v17 + 8 * v19) = *a2;
      --v16;
    }
    while (v16);
    uint64_t v24 = &v15[(v14 - v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  operator delete(v14);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
LABEL_14:
  if (v11) {
    operator delete(v11);
  }
}

void sub_1DD8446EC(_Unwind_Exception *a1)
{
  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

void nms::BOOLeanMaskToIndices<unsigned short>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (v4)
  {
    if (v4 < 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v5 = 2 * v4;
    uint64_t v6 = operator new(2 * v4);
    bzero(v6, v5);
    uint64_t v7 = 0;
    do
    {
      *((_WORD *)v6 + v7) = v7;
      ++v7;
      v5 -= 2;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::mask_array<unsigned char>::mask_array[abi:ne180100](&v8, (unsigned __int8 **)a2, (uint64_t)v6);
  std::valarray<unsigned short>::valarray(&v11, &v8);
  if (__p)
  {
    if (v10 != __p) {
      v10 += ((unsigned char *)__p - v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    operator delete(__p);
  }
  std::deque<unsigned short>::deque<unsigned short *,0>(a1, (__int16 *)v11, v12);
  if (v11)
  {
    if (v12 != v11) {
      uint64_t v12 = (_WORD *)((char *)v12 + (((unsigned char *)v11 - (unsigned char *)v12 + 1) & 0xFFFFFFFFFFFFFFFELL));
    }
    operator delete(v11);
  }
  if (v6) {
    operator delete(v6);
  }
}

{
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  unsigned char *v10;
  void *v11;
  _WORD *v12;

  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (v4)
  {
    if (v4 < 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v5 = 2 * v4;
    uint64_t v6 = operator new(2 * v4);
    bzero(v6, v5);
    uint64_t v7 = 0;
    do
    {
      *((_WORD *)v6 + v7) = v7;
      ++v7;
      v5 -= 2;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::mask_array<unsigned char>::mask_array[abi:ne180100](&v8, (unsigned __int8 **)a2, (uint64_t)v6);
  std::valarray<unsigned short>::valarray(&v11, &v8);
  if (__p)
  {
    if (v10 != __p) {
      v10 += ((unsigned char *)__p - v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    operator delete(__p);
  }
  std::deque<unsigned short>::deque<unsigned short *,0>(a1, (__int16 *)v11, v12);
  if (v11)
  {
    if (v12 != v11) {
      uint64_t v12 = (_WORD *)((char *)v12 + (((unsigned char *)v11 - (unsigned char *)v12 + 1) & 0xFFFFFFFFFFFFFFFELL));
    }
    operator delete(v11);
  }
  if (v6) {
    operator delete(v6);
  }
}

void sub_1DD84481C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *std::deque<unsigned short>::erase(int64x2_t *a1, char *a2, uint64_t a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  uint64_t v6 = a1[1].i64[0];
  uint64_t v7 = (char *)(v5 + 8 * (v4 >> 11));
  if (v6 == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)v7 + 2 * (a1[2].i64[0] & 0x7FF);
  }
  if (v8 == a3) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = ((a3 - *(void *)a2) >> 1) + ((a2 - v7) << 8) - ((v8 - *(void *)v7) >> 1);
  }
  unint64_t v10 = (char **)std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((void *)(v5 + 8 * (v4 >> 11)), v8, v9);
  uint64_t v12 = v10;
  double v13 = v11;
  uint64_t v14 = a1[2].i64[1];
  uint64_t v15 = v11 - *v10;
  uint64_t v16 = v15 >> 1;
  if (v9 <= (unint64_t)(v14 - 1) >> 1)
  {
    if (v15 < -1)
    {
      uint64_t v19 = &v10[-((unint64_t)(2046 - v16) >> 11)];
      unint64_t v20 = &(*v19)[2 * (~(2046 - (_WORD)v16) & 0x7FF)];
    }
    else
    {
      uint64_t v19 = &v10[(unint64_t)(v16 + 1) >> 11];
      unint64_t v20 = &(*v19)[2 * (((_WORD)v16 + 1) & 0x7FF)];
    }
    if (v7 == (char *)v10)
    {
      uint64_t v37 = (char *)v8;
      uint64_t v36 = v13;
    }
    else
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v55, *v10, v11, v19, v20);
      uint64_t v26 = v56;
      unint64_t v27 = v57;
      unint64_t v28 = (char *)(v12 - 1);
      if (v12 - 1 != (char **)v7)
      {
        uint64_t v29 = *v56;
        do
        {
          uint64_t v30 = *(unsigned char **)v28;
          uint64_t v31 = (char *)(*(void *)v28 + 4096);
          while (1)
          {
            uint64_t v32 = v27 - v29;
            if ((v31 - v30) >> 1 >= v32 >> 1) {
              uint64_t v33 = v32 >> 1;
            }
            else {
              uint64_t v33 = (v31 - v30) >> 1;
            }
            v31 -= 2 * v33;
            v27 -= 2 * v33;
            if (v33) {
              memmove(v27, v31, 2 * v33);
            }
            if (v31 == v30) {
              break;
            }
            BOOL v34 = *--v26;
            uint64_t v29 = v34;
            unint64_t v27 = v34 + 4096;
          }
          uint64_t v29 = *v26;
          if (*v26 + 4096 == v27)
          {
            uint64_t v35 = v26[1];
            ++v26;
            uint64_t v29 = v35;
            unint64_t v27 = v35;
          }
          v28 -= 8;
        }
        while (v28 != v7);
      }
      uint64_t v36 = (char *)(*(void *)v7 + 4096);
      uint64_t v37 = (char *)v8;
      uint64_t v19 = v26;
      unint64_t v20 = v27;
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v55, v37, v36, v19, v20);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1DD8CEB50);
    std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
  }
  else
  {
    if (v15 < -1)
    {
      unint64_t v21 = 2046 - v16;
      __int16 v17 = ~(_WORD)v21;
      uint64_t v18 = &v10[-(v21 >> 11)];
    }
    else
    {
      __int16 v17 = v16 + 1;
      uint64_t v18 = &v10[(unint64_t)(v16 + 1) >> 11];
    }
    uint64_t v22 = &(*v18)[2 * (v17 & 0x7FF)];
    unint64_t v23 = v14 + v4;
    uint64_t v24 = (char **)(v5 + 8 * (v23 >> 11));
    if (v6 == v5) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = (uint64_t)&(*v24)[2 * (v23 & 0x7FF)];
    }
    if (v18 == v24)
    {
      uint64_t v47 = (unsigned char *)v25;
      uint64_t v48 = (void **)v10;
      uint64_t v49 = v13;
    }
    else
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned short *,unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v55, v22, *v18 + 4096, (void **)v10, v13);
      int64_t v38 = (void **)v56;
      BOOL v39 = v57;
      unint64_t v40 = v18 + 1;
      if (v18 + 1 != v24)
      {
        uint64_t v54 = v25;
        uint64_t v41 = *v56;
        do
        {
          uint64_t v42 = 0;
          int64_t v43 = *v40;
          for (++v38; ; ++v38)
          {
            uint64_t v44 = v41 - v39 + 4096;
            if ((4096 - 2 * v42) >> 1 >= v44 >> 1) {
              uint64_t v45 = v44 >> 1;
            }
            else {
              uint64_t v45 = (4096 - 2 * v42) >> 1;
            }
            if (v45) {
              memmove(v39, &v43[2 * v42], 2 * v45);
            }
            v42 += v45;
            if (v42 == 2048) {
              break;
            }
            uint64_t v46 = (char *)*v38;
            uint64_t v41 = v46;
            BOOL v39 = v46;
          }
          v39 += 2 * v45;
          uint64_t v41 = (char *)*(v38 - 1);
          if (v41 + 4096 == v39)
          {
            uint64_t v41 = (char *)*v38;
            BOOL v39 = (char *)*v38;
          }
          else
          {
            --v38;
          }
          ++v40;
        }
        while (v40 != v24);
        uint64_t v25 = v54;
      }
      uint64_t v22 = *v24;
      uint64_t v47 = (unsigned char *)v25;
      uint64_t v48 = v38;
      uint64_t v49 = v39;
    }
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned short *,unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v55, v22, v47, v48, v49);
    --a1[2].i64[1];
    std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
  }
  uint64_t v50 = a1->i64[1];
  unint64_t v51 = (void *)(v50 + 8 * ((unint64_t)a1[2].i64[0] >> 11));
  if (a1[1].i64[0] == v50) {
    uint64_t v52 = 0;
  }
  else {
    uint64_t v52 = *v51 + 2 * (a1[2].i64[0] & 0x7FF);
  }
  return std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](v51, v52, v9);
}

void std::deque<unsigned short>::push_back(void *a1, _WORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 8) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned short>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_WORD *)(*(void *)(v5 + ((v8 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v8 & 0x7FF)) = *a2;
  a1[5] = v7 + 1;
}

void *std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(void *result, uint64_t a2)
{
  *double result = 0;
  result[1] = 0;
  unint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    unint64_t v3 = result;
    if (v2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    double result = operator new(8 * v2);
    *unint64_t v3 = result;
    v3[1] = result;
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v6 = (void *)(**(void **)a2 + 8 * *(void *)(a2 + 8));
    do
    {
      *result++ = *v6;
      v6 += v5;
      --v2;
    }
    while (v2);
    v3[1] = result;
  }
  return result;
}

void sub_1DD844D4C(_Unwind_Exception *a1)
{
  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

void std::valarray<BOOL>::resize(uint64_t a1, size_t __sz)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    if (*(void **)(a1 + 8) != v4) {
      *(void *)(a1 + 8) = v4;
    }
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  if (__sz)
  {
    uint64_t v5 = (char *)operator new(__sz);
    *(void *)a1 = v5;
    bzero(v5, __sz);
    *(void *)(a1 + 8) = &v5[__sz];
  }
}

double *std::__val_expr<std::_BinaryOp<std::plus<double>,std::valarray<double>,std::valarray<double>>>::operator std::valarray<double>(double *result, double *a2, double *a3, double **a4)
{
  *double result = 0.0;
  result[1] = 0.0;
  uint64_t v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    uint64_t v5 = result;
    if (v4 < 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = a2;
    double result = (double *)operator new((char *)a3 - (char *)a2);
    uint64_t v8 = v4 >> 3;
    *uint64_t v5 = result;
    v5[1] = result;
    unint64_t v9 = *a4;
    do
    {
      double v10 = *v7++;
      double v11 = v10;
      double v12 = *v9++;
      *result++ = v11 + v12;
      --v8;
    }
    while (v8);
    v5[1] = result;
  }
  return result;
}

void sub_1DD844E48(_Unwind_Exception *a1)
{
  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

void nms::max<double>(uint64_t *a1, double *a2, uint64_t a3)
{
  std::valarray<double>::valarray(a1, (uint64_t **)a3);
  uint64_t v7 = *(uint64_t **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  uint64_t v8 = v6 - (void)v7;
  if (v8)
  {
    uint64_t v9 = v8 >> 3;
    double v10 = (unsigned __int8 *)operator new(v8 >> 3);
    double v11 = v10;
    uint64_t v12 = 0;
    unint64_t v20 = v10;
    double v13 = *a2;
    do
    {
      v10[v12] = *(double *)&v7[v12] < v13;
      ++v12;
    }
    while (v9 != v12);
    unint64_t v21 = &v10[v12];
  }
  else
  {
    double v11 = 0;
  }
  std::mask_array<unsigned char>::mask_array[abi:ne180100](&v22, &v20, *a1);
  uint64_t v14 = v23;
  uint64_t v15 = v24;
  if (v24 == v23)
  {
    if (!v24) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v16 = (v24 - v23) >> 3;
    uint64_t v17 = v22;
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    uint64_t v18 = (uint64_t *)v23;
    do
    {
      uint64_t v19 = *v18++;
      *(double *)(v17 + 8 * v19) = *a2;
      --v16;
    }
    while (v16);
    uint64_t v24 = &v15[(v14 - v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  operator delete(v14);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
LABEL_14:
  if (v11) {
    operator delete(v11);
  }
}

void sub_1DD844F78(_Unwind_Exception *a1)
{
  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

void *std::__val_expr<std::_BinaryOp<std::less<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(void *result, uint64_t a2)
{
  *double result = 0;
  result[1] = 0;
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v4 = result;
    double result = operator new(*(void *)(a2 + 16));
    *uint64_t v4 = result;
    v4[1] = result;
    uint64_t v5 = **(double ***)(a2 + 24);
    double v6 = **(double **)(a2 + 8);
    do
    {
      double v7 = *v5++;
      *(unsigned char *)double result = v6 < v7;
      double result = (void *)((char *)result + 1);
      --v2;
    }
    while (v2);
    v4[1] = result;
  }
  return result;
}

void sub_1DD845010(_Unwind_Exception *a1)
{
  std::valarray<BOOL>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__val_expr<std::_BinaryOp<std::greater<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(void *result, uint64_t a2)
{
  *double result = 0;
  result[1] = 0;
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v4 = result;
    double result = operator new(*(void *)(a2 + 16));
    *uint64_t v4 = result;
    v4[1] = result;
    uint64_t v5 = **(double ***)(a2 + 24);
    double v6 = **(double **)(a2 + 8);
    do
    {
      double v7 = *v5++;
      *(unsigned char *)double result = v6 > v7;
      double result = (void *)((char *)result + 1);
      --v2;
    }
    while (v2);
    v4[1] = result;
  }
  return result;
}

void sub_1DD845094(_Unwind_Exception *a1)
{
  std::valarray<BOOL>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::valarray<double>::valarray(void *a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  unint64_t v3 = a2[1];
  size_t v4 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    double v6 = (char *)operator new(v4);
    *a1 = v6;
    a1[1] = v6;
    double v7 = *a2;
    if (*a2 != a2[1])
    {
      uint64_t v8 = v6 + 8;
      do
      {
        uint64_t v9 = *v7++;
        *((void *)v8 - 1) = v9;
        a1[1] = v8;
        v8 += 8;
      }
      while (v7 != a2[1]);
    }
  }
  return a1;
}

void *std::valarray<double>::valarray(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  size_t v4 = (char *)a2[1];
  unint64_t v3 = (char *)a2[2];
  size_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    double v7 = operator new(v5);
    *a1 = v7;
    uint64_t v8 = *a2;
    do
    {
      uint64_t v9 = *(void *)v4;
      v4 += 8;
      *v7++ = *(void *)(v8 + 8 * v9);
    }
    while (v4 != v3);
    a1[1] = v7;
  }
  return a1;
}

void *std::valarray<unsigned short>::valarray(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  size_t v4 = (char *)a2[1];
  unint64_t v3 = (char *)a2[2];
  unint64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    double v7 = operator new(v5 >> 2);
    *a1 = v7;
    uint64_t v8 = *a2;
    do
    {
      uint64_t v9 = *(void *)v4;
      v4 += 8;
      *v7++ = *(_WORD *)(v8 + 2 * v9);
    }
    while (v4 != v3);
    a1[1] = v7;
  }
  return a1;
}

uint64_t std::deque<unsigned short>::deque<unsigned short *,0>(uint64_t a1, __int16 *a2, _WORD *a3)
{
  unint64_t v3 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v5 = a3 - a2;
  if (a3 == a2)
  {
    uint64_t v9 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    std::deque<unsigned short>::__add_back_capacity((void *)a1, a3 - a2);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = *(void *)(a1 + 32) + v6;
    uint64_t v9 = (void *)(v7 + 8 * (v8 >> 11));
    if (*(void *)(a1 + 16) != v7)
    {
      uint64_t v10 = *v9 + 2 * (v8 & 0x7FF);
      goto LABEL_6;
    }
  }
  uint64_t v10 = 0;
LABEL_6:
  double v11 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](v9, v10, v5);
  if (v10 != v12)
  {
    do
    {
      if (v9 == v11) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = *v9 + 4096;
      }
      if (v10 == v13)
      {
        uint64_t v13 = v10;
      }
      else
      {
        uint64_t v14 = (_WORD *)v10;
        do
        {
          __int16 v15 = *v3++;
          *v14++ = v15;
        }
        while (v14 != (_WORD *)v13);
      }
      v6 += (v13 - v10) >> 1;
      if (v9 == v11) {
        break;
      }
      uint64_t v16 = v9[1];
      ++v9;
      uint64_t v10 = v16;
    }
    while (v16 != v12);
    *(void *)(a1 + 40) = v6;
  }
  return a1;
}

void sub_1DD845300(_Unwind_Exception *a1)
{
  std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void std::deque<unsigned short>::__add_back_capacity(void *a1, unint64_t a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x7FF) != 0) {
    unint64_t v6 = (v5 >> 11) + 1;
  }
  else {
    unint64_t v6 = v5 >> 11;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 11) {
    unint64_t v8 = v7 >> 11;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 11)
  {
    for (a1[4] = v7 - (v8 << 11); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          unint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            unint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            unint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            unint64_t v3 = (char *)a1[1];
          }
          unint64_t v27 = &v3[-8 * (v24 >> 1)];
          unint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)unint64_t v3 = v18;
      unint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          *(void *)&long long v85 = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(a1, &v85);
          --v6;
          if (!--v9) {
            goto LABEL_73;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          *(void *)&long long v85 = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v85);
          if (a1[2] - a1[1] == 8) {
            uint64_t v60 = 2047;
          }
          else {
            uint64_t v60 = 2048;
          }
          uint64_t v61 = v60 + a1[4];
          a1[4] = v61;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_73:
        uint64_t v61 = a1[4];
      }
      a1[4] = v61 - (v8 << 11);
      if (v8)
      {
        uint64_t v62 = (char *)a1[2];
        do
        {
          v63 = (void *)a1[1];
          uint64_t v66 = *v63;
          uint64_t v64 = (char *)(v63 + 1);
          uint64_t v65 = v66;
          a1[1] = v64;
          if (v62 == (char *)a1[3])
          {
            uint64_t v67 = (uint64_t)&v64[-*a1];
            if ((unint64_t)v64 <= *a1)
            {
              if (v62 == (char *)*a1) {
                unint64_t v74 = 1;
              }
              else {
                unint64_t v74 = (uint64_t)&v62[-*a1] >> 2;
              }
              uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v74);
              uint64_t v77 = &v75[8 * (v74 >> 2)];
              uint64_t v78 = (uint64_t *)a1[1];
              uint64_t v62 = v77;
              uint64_t v79 = a1[2] - (void)v78;
              if (v79)
              {
                uint64_t v62 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v80 = 8 * (v79 >> 3);
                uint64_t v81 = &v75[8 * (v74 >> 2)];
                do
                {
                  uint64_t v82 = *v78++;
                  *(void *)uint64_t v81 = v82;
                  v81 += 8;
                  v80 -= 8;
                }
                while (v80);
              }
              uint64_t v83 = (char *)*a1;
              *a1 = v75;
              a1[1] = v77;
              a1[2] = v62;
              a1[3] = &v75[8 * v76];
              if (v83)
              {
                operator delete(v83);
                uint64_t v62 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v68 = v67 >> 3;
              BOOL v22 = v67 >> 3 < -1;
              uint64_t v69 = (v67 >> 3) + 2;
              if (v22) {
                uint64_t v70 = v69;
              }
              else {
                uint64_t v70 = v68 + 1;
              }
              uint64_t v71 = &v64[-8 * (v70 >> 1)];
              int64_t v72 = v62 - v64;
              if (v62 != v64)
              {
                memmove(&v64[-8 * (v70 >> 1)], v64, v62 - v64);
                uint64_t v62 = (char *)a1[1];
              }
              unint64_t v73 = &v62[-8 * (v70 >> 1)];
              uint64_t v62 = &v71[v72];
              a1[1] = v73;
              a1[2] = &v71[v72];
            }
          }
          *(void *)uint64_t v62 = v65;
          uint64_t v62 = (char *)(a1[2] + 8);
          a1[2] = v62;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        uint64_t v13 = (char *)(v9 + v11);
      }
      else {
        uint64_t v13 = (char *)v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v87 = a1 + 3;
      if (v13) {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>((unint64_t)v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 11;
      *(void *)&long long v85 = v13;
      *((void *)&v85 + 1) = &v13[8 * v14];
      *(void *)&long long v86 = *((void *)&v85 + 1);
      *((void *)&v86 + 1) = &v13[8 * v15];
      do
      {
        uint64_t v84 = operator new(0x1000uLL);
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v85, &v84);
        --v9;
      }
      while (v9);
      if (v8)
      {
        BOOL v39 = (void *)a1[1];
        unint64_t v40 = (char *)v86;
        do
        {
          if (v40 == *((char **)&v86 + 1))
          {
            uint64_t v41 = (char *)*((void *)&v85 + 1);
            uint64_t v42 = (void *)v85;
            if (*((void *)&v85 + 1) <= (unint64_t)v85)
            {
              if (v40 == (char *)v85) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (uint64_t)&v40[-v85] >> 2;
              }
              uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v48);
              uint64_t v52 = v40 - v41;
              BOOL v51 = v40 == v41;
              unint64_t v40 = &v49[8 * (v48 >> 2)];
              if (!v51)
              {
                unint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *(void *)v41;
                  v41 += 8;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              *(void *)&long long v85 = v49;
              *((void *)&v85 + 1) = &v49[8 * (v48 >> 2)];
              *(void *)&long long v86 = v40;
              *((void *)&v86 + 1) = &v49[8 * v50];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              uint64_t v43 = (uint64_t)(*((void *)&v85 + 1) - v85) >> 3;
              if (v43 >= -1) {
                uint64_t v44 = v43 + 1;
              }
              else {
                uint64_t v44 = v43 + 2;
              }
              uint64_t v45 = *((void *)&v85 + 1) - 8 * (v44 >> 1);
              uint64_t v46 = &v40[-*((void *)&v85 + 1)];
              if (v40 != *((char **)&v85 + 1))
              {
                memmove((void *)(*((void *)&v85 + 1) - 8 * (v44 >> 1)), *((const void **)&v85 + 1), (size_t)&v40[-*((void *)&v85 + 1)]);
                unint64_t v40 = v41;
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              unint64_t v40 = &v46[v45];
              *((void *)&v85 + 1) = v47;
              *(void *)&long long v86 = &v46[v45];
            }
          }
          *(void *)unint64_t v40 = *v39;
          unint64_t v40 = (char *)(v86 + 8);
          *(void *)&long long v86 = v86 + 8;
          BOOL v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      for (j = (void *)a1[2];
            j != (void *)a1[1];
            std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v85, j))
      {
        --j;
      }
      uint64_t v57 = (char *)*a1;
      long long v58 = v86;
      *(_OWORD *)a1 = v85;
      *((_OWORD *)a1 + 1) = v58;
      a1[4] -= v38;
      if (v57) {
        operator delete(v57);
      }
    }
  }
}

void sub_1DD8457E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 + ((a2 - *result) >> 1);
    if (v3 < 1) {
      result -= (unint64_t)(2047 - v3) >> 11;
    }
    else {
      result += (unint64_t)v3 >> 11;
    }
  }
  return result;
}

void std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 < 0x800) {
    a2 = 1;
  }
  if (v3 > 0xFFF || (a2 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 2048;
  }
}

uint64_t std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 8) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x800) {
    a2 = 1;
  }
  if (v5 < 0x1000) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(void *result, char *a2, char *a3, void *a4, char *a5)
{
  unint64_t v6 = a4;
  unint64_t v8 = result;
  if (a2 == a3)
  {
    unint64_t v9 = a2;
  }
  else
  {
    unint64_t v9 = a3;
    uint64_t v10 = *a4;
    uint64_t v11 = a3;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 1 >= v12 >> 1) {
        uint64_t v13 = v12 >> 1;
      }
      else {
        uint64_t v13 = (v11 - a2) >> 1;
      }
      v11 -= 2 * v13;
      a5 -= 2 * v13;
      if (v13) {
        double result = memmove(a5, v11, 2 * v13);
      }
      if (v11 == a2) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  void *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned short *,unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(void *result, unsigned char *__src, unsigned char *a3, void **a4, char *__dst)
{
  unint64_t v6 = a4;
  unint64_t v8 = result;
  if (__src != a3)
  {
    unint64_t v9 = __src;
    unint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 1 >= v11 >> 1 ? v11 >> 1 : (a3 - v9) >> 1;
      if (v12) {
        double result = memmove(__dst, v9, 2 * v12);
      }
      v9 += 2 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 2 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  void *v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

void std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::back_insert_iterator<std::deque<unsigned short>>>>(uint64_t *a1, _WORD *a2, uint64_t *a3, _WORD *a4, void **a5)
{
  int v7 = a2;
  unint64_t v8 = *a5;
  if (a1 == a3)
  {
    while (v7 != a4)
      std::deque<unsigned short>::push_back(v8, v7++);
  }
  else
  {
    uint64_t v11 = *a1 + 4096;
    if ((_WORD *)v11 != a2)
    {
      do
        std::deque<unsigned short>::push_back(v8, v7++);
      while (v7 != (_WORD *)v11);
    }
    *a5 = v8;
    for (uint64_t i = a1 + 1; i != a3; ++i)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *i;
      do
      {
        std::deque<unsigned short>::push_back(v8, (_WORD *)(v14 + v13));
        v13 += 2;
      }
      while (v13 != 4096);
      *a5 = v8;
    }
    for (j = (_WORD *)*a3; j != a4; ++j)
      std::deque<unsigned short>::push_back(v8, j);
  }
  *a5 = v8;
}

void nms::rasterizeRects<double>(double **a1, double *a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  double v7 = a2[2];
  double v6 = a2[3];
  if (a6 == 5) {
    uint64_t v8 = 5;
  }
  else {
    uint64_t v8 = 0;
  }
  if (a6) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 4;
  }
  double v10 = fabs(v6);
  if (fabs(v7) <= 2.22044605e-16 || v10 <= 2.22044605e-16) {
    return;
  }
  if (!v9)
  {
    unint64_t v19 = 0;
    uint64_t v21 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
LABEL_20:
    char v22 = 1;
    goto LABEL_26;
  }
  double v16 = *a2;
  double v15 = a2[1];
  uint64_t v17 = *a1;
  unint64_t v18 = a1[1] - *a1;
  unint64_t v19 = v18 / v9;
  unint64_t v20 = 4 * (v18 / v9);
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v21 = (char *)operator new(32 * v19);
    uint64_t v60 = v21;
    bzero(v21, 32 * v19);
    uint64_t v61 = (double *)&v21[32 * v19];
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (v9 > v18)
  {
    unint64_t v19 = 0;
    goto LABEL_20;
  }
  uint64_t v23 = 8 * v9;
  uint64_t v24 = v17;
  unint64_t v25 = v18 / v9;
  int64_t v26 = (double *)v21;
  do
  {
    double *v26 = (*v24 - v16) / v7;
    v26 += 4;
    uint64_t v24 = (double *)((char *)v24 + v23);
    --v25;
  }
  while (v25);
  unint64_t v27 = v17 + 1;
  uint64_t v28 = 8;
  unint64_t v29 = v18 / v9;
  do
  {
    *(double *)&v21[v28] = (*v27 - v15) / v6;
    unint64_t v27 = (double *)((char *)v27 + v23);
    v28 += 32;
    --v29;
  }
  while (v29);
  char v22 = 0;
LABEL_26:
  uint64_t v62 = v21;
  uint64_t v63 = v19;
  *(void *)&long long v64 = 4;
  std::valarray<double>::valarray(&__p, (uint64_t)&v62);
  uint64_t v30 = __p;
  if (v22)
  {
    if (!__p) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v31 = (double *)((char *)v60 + 16);
    uint64_t v32 = *a1 + 2;
    uint64_t v33 = (double *)__p;
    unint64_t v34 = v19;
    do
    {
      double v35 = *v33++;
      *uint64_t v31 = v35 + *v32 / v7;
      v31 += 4;
      v32 += v9;
      --v34;
    }
    while (v34);
  }
  if (v59 != v30) {
    v59 += (v30 - v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  operator delete(v30);
LABEL_34:
  uint64_t v62 = (char *)v60 + 8;
  uint64_t v63 = v19;
  *(void *)&long long v64 = 4;
  std::valarray<double>::valarray(&__p, (uint64_t)&v62);
  uint64_t v36 = __p;
  if (v22)
  {
    if (!__p) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v37 = (double *)((char *)v60 + 24);
    uint64_t v38 = *a1 + 3;
    BOOL v39 = (double *)__p;
    unint64_t v40 = v19;
    do
    {
      double v41 = *v39++;
      *uint64_t v37 = v41 + *v38 / v6;
      v37 += 4;
      v38 += v9;
      --v40;
    }
    while (v40);
  }
  if (v59 != v36) {
    v59 += (v36 - v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  operator delete(v36);
LABEL_42:
  uint64_t v42 = (double *)v60;
  uint64_t v43 = v61;
  if (v60 != v61)
  {
    uint64_t v44 = (double *)v60;
    do
    {
      double *v44 = *v44 * (double)a4;
      ++v44;
    }
    while (v44 != v43);
  }
  std::valarray<double>::apply(&v62, v42, v43, nms::rasterizeRects<double>(std::valarray<double> const&,std::valarray<double>&,std::valarray<unsigned long> &,unsigned long,unsigned long,nms::RepresentationDimType)::{lambda(double)#1}::__invoke);
  if (v60)
  {
    if (v61 != v60) {
      uint64_t v61 = (double *)((char *)v61 + (((unsigned char *)v60 - (unsigned char *)v61 + 7) & 0xFFFFFFFFFFFFFFF8));
    }
    operator delete(v60);
    uint64_t v61 = 0;
  }
  uint64_t v60 = v62;
  uint64_t v61 = (double *)v63;
  uint64_t v57 = 0;
  nms::max<double>((uint64_t *)&__p, (double *)&v57, (uint64_t)&v60);
  double v56 = (double)a4;
  nms::min<double>((uint64_t *)&v62, &v56, (uint64_t)&__p);
  if (v60)
  {
    if (v61 != v60) {
      uint64_t v61 = (double *)((char *)v61 + (((unsigned char *)v60 - (unsigned char *)v61 + 7) & 0xFFFFFFFFFFFFFFF8));
    }
    operator delete(v60);
    uint64_t v61 = 0;
  }
  uint64_t v60 = v62;
  uint64_t v61 = (double *)v63;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  if (__p)
  {
    if (v59 != __p) {
      v59 += ((unsigned char *)__p - v59 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    operator delete(__p);
  }
  if (v19)
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    do
    {
      uint64_t v62 = &v60;
      uint64_t v63 = 4 * v45;
      long long v64 = xmmword_1DD8CEB40;
      std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&__p, (uint64_t)&v62);
      if (v46) {
        operator delete(v46);
      }
      uint64_t v46 = (double *)__p;
      unint64_t v47 = (unint64_t)*((double *)__p + 1);
      unint64_t v48 = (unint64_t)*((double *)__p + 3);
      if (v47 < v48)
      {
        while (1)
        {
          double v49 = *v46;
          double v50 = v46[2] - *v46;
          unint64_t v51 = (unint64_t)v50 >= a4 ? a4 : (unint64_t)v50;
          uint64_t v62 = 0;
          uint64_t v63 = 0;
          std::valarray<unsigned long>::resize();
          uint64_t v52 = v62;
          if (v51) {
            break;
          }
          if (v62) {
            goto LABEL_70;
          }
LABEL_73:
          if (++v47 == v48) {
            goto LABEL_74;
          }
        }
        uint64_t v53 = (void *)(*a3 + 8 * (unint64_t)(v49 + (double)(v47 * a4)));
        uint64_t v54 = (uint64_t *)v62;
        do
        {
          uint64_t v55 = *v54++;
          *v53++ += v55;
          --v51;
        }
        while (v51);
LABEL_70:
        if ((void *)v63 != v52) {
          v63 += ((unint64_t)v52 - v63 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        operator delete(v52);
        goto LABEL_73;
      }
LABEL_74:
      ++v45;
    }
    while (v45 != v19);
    if (v46) {
      operator delete(v46);
    }
  }
  if (v60)
  {
    if (v61 != v60) {
      uint64_t v61 = (double *)((char *)v61 + (((unsigned char *)v60 - (unsigned char *)v61 + 7) & 0xFFFFFFFFFFFFFFF8));
    }
    operator delete(v60);
  }
}

void sub_1DD84609C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nms::rasterizeQuadByQuantizedScoreMap<double>(double **a1, void *a2, void *a3, size_t __sz, unint64_t a5, unsigned int a6, unsigned __int8 a7)
{
  v251[0] = a7;
  char v249 = 0;
  uint64_t v250 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v249, __sz);
  int64_t v247 = 0;
  uint64_t v248 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v247, __sz);
  v245 = 0;
  uint64_t v246 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v245, __sz);
  uint64_t v243 = 0;
  uint64_t v244 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v243, __sz);
  v241 = 0;
  uint64_t v242 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v241, __sz);
  double v239 = 0;
  uint64_t v240 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v239, __sz);
  unint64_t v237 = 0;
  uint64_t v238 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v237, __sz);
  unint64_t v223 = a5;
  unint64_t v235 = 0;
  double v236 = 0;
  std::valarray<double>::resize((uint64_t)&v235, __sz, 0.0);
  uint64_t v11 = (double *)v235;
  uint64_t v12 = v236;
  double v13 = (double)__sz;
  if (v235 != v236)
  {
    double v14 = 0.0;
    double v15 = (double *)v235;
    do
    {
      *v15++ = v14;
      double v14 = v14 + 1.0;
    }
    while (v15 != v12);
    double v16 = v11;
    do
    {
      double *v16 = *v16 / v13;
      ++v16;
    }
    while (v16 != v12);
  }
  v234[0] = 0;
  v234[1] = 0;
  std::valarray<double>::resize((uint64_t)v234, __sz, -1.0);
  v233[0] = 0;
  v233[1] = 0;
  std::valarray<double>::resize((uint64_t)v233, __sz, -1.0);
  v232[0] = 0;
  v232[1] = 0;
  std::valarray<double>::resize((uint64_t)v232, __sz, -1.0);
  v231[0] = 0;
  v231[1] = 0;
  std::valarray<double>::resize((uint64_t)v231, __sz, -1.0);
  unint64_t v18 = v247;
  uint64_t v17 = v248;
  uint64_t v19 = v248 - v247;
  if (v248 - v247 >= 1) {
    bzero(v247, v248 - v247);
  }
  uint64_t v20 = v246 - (void)v245;
  if (v246 - (uint64_t)v245 >= 1) {
    bzero(v245, v246 - (void)v245);
  }
  double v21 = (*a1)[1];
  double v22 = (*a1)[7];
  if (v21 != v22)
  {
    uint64_t v23 = v12 - v11;
    if (v19 != v23) {
      std::valarray<BOOL>::resize((uint64_t)&v247, v12 - v11);
    }
    if (v11 != v12)
    {
      uint64_t v24 = (BOOL *)v247;
      if (v22 >= v21) {
        double v25 = v21;
      }
      else {
        double v25 = v22;
      }
      int64_t v26 = v11;
      uint64_t v27 = v12 - v11;
      do
      {
        double v28 = *v26++;
        *v24++ = v28 >= v25;
        --v27;
      }
      while (v27);
    }
    if (v20 != v23) {
      std::valarray<BOOL>::resize((uint64_t)&v245, v12 - v11);
    }
    if (v11 != v12)
    {
      unint64_t v29 = (BOOL *)v245;
      if (v21 >= v22) {
        double v30 = v21;
      }
      else {
        double v30 = v22;
      }
      uint64_t v31 = v11;
      do
      {
        double v32 = *v31++;
        *v29++ = v32 < v30;
        --v23;
      }
      while (v23);
    }
    unint64_t v18 = v247;
    uint64_t v17 = v248;
    uint64_t v19 = v248 - v247;
    if (v244 - v243 != v248 - v247) {
      std::valarray<BOOL>::resize((uint64_t)&v243, v248 - v247);
    }
    if (v17 != v18)
    {
      uint64_t v33 = v243;
      unint64_t v34 = (char *)v245;
      double v35 = v18;
      uint64_t v36 = v17 - v18;
      do
      {
        char v38 = *v35++;
        char v37 = v38;
        char v39 = *v34++;
        *v33++ = v39 & v37;
        --v36;
      }
      while (v36);
    }
    double v40 = **a1;
    double v41 = (*a1)[6];
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, &v243, (uint64_t)v11);
    std::valarray<double>::valarray(&v229, &v226);
    if (__p)
    {
      if (v228 != __p) {
        v228 += ((unsigned char *)__p - v228 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      operator delete(__p);
    }
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, &v243, (uint64_t)v234[0]);
    uint64_t v42 = __p;
    uint64_t v43 = v228;
    if (v228 == __p)
    {
      if (!v228) {
        goto LABEL_44;
      }
    }
    else
    {
      double v44 = fmax(v40, 0.0);
      double v45 = fmax(v41, 0.0) - v44;
      unint64_t v46 = (v228 - (unsigned char *)__p) >> 3;
      unint64_t v47 = (double *)v229;
      uint64_t v48 = v226;
      if (v46 <= 1) {
        unint64_t v46 = 1;
      }
      double v49 = (uint64_t *)__p;
      do
      {
        double v50 = *v47++;
        double v51 = v44 + v45 * (v50 - v21) / (v22 - v21);
        uint64_t v52 = *v49++;
        *(double *)(v48 + 8 * v52) = v51;
        --v46;
      }
      while (v46);
      uint64_t v228 = &v43[(v42 - v43 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v42);
LABEL_44:
    if (v229)
    {
      if (v230 != v229) {
        unint64_t v230 = (double *)((char *)v230 + (((unsigned char *)v229 - (unsigned char *)v230 + 7) & 0xFFFFFFFFFFFFFFF8));
      }
      operator delete(v229);
    }
  }
  if (v19 >= 1) {
    bzero(v18, v17 - v18);
  }
  uint64_t v53 = v246 - (void)v245;
  if (v246 - (uint64_t)v245 >= 1) {
    bzero(v245, v246 - (void)v245);
  }
  double v54 = (*a1)[1];
  double v55 = (*a1)[3];
  if (v54 != v55)
  {
    uint64_t v56 = v12 - v11;
    if (v19 != v56) {
      std::valarray<BOOL>::resize((uint64_t)&v247, v12 - v11);
    }
    if (v11 != v12)
    {
      uint64_t v57 = (BOOL *)v247;
      if (v55 >= v54) {
        double v58 = v54;
      }
      else {
        double v58 = v55;
      }
      uint64_t v59 = v11;
      uint64_t v60 = v12 - v11;
      do
      {
        double v61 = *v59++;
        *v57++ = v61 >= v58;
        --v60;
      }
      while (v60);
    }
    if (v53 != v56) {
      std::valarray<BOOL>::resize((uint64_t)&v245, v12 - v11);
    }
    if (v11 != v12)
    {
      uint64_t v62 = (BOOL *)v245;
      if (v54 >= v55) {
        double v63 = v54;
      }
      else {
        double v63 = v55;
      }
      long long v64 = v11;
      do
      {
        double v65 = *v64++;
        *v62++ = v65 < v63;
        --v56;
      }
      while (v56);
    }
    unint64_t v18 = v247;
    uint64_t v17 = v248;
    uint64_t v19 = v248 - v247;
    if (v242 - (void)v241 != v248 - v247) {
      std::valarray<BOOL>::resize((uint64_t)&v241, v248 - v247);
    }
    if (v17 != v18)
    {
      uint64_t v66 = v241;
      uint64_t v67 = (char *)v245;
      uint64_t v68 = v18;
      uint64_t v69 = v17 - v18;
      do
      {
        char v71 = *v68++;
        char v70 = v71;
        char v72 = *v67++;
        *v66++ = v72 & v70;
        --v69;
      }
      while (v69);
    }
    double v73 = **a1;
    double v74 = (*a1)[2];
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v241, (uint64_t)v11);
    std::valarray<double>::valarray(&v229, &v226);
    if (__p)
    {
      if (v228 != __p) {
        v228 += ((unsigned char *)__p - v228 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      operator delete(__p);
    }
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v241, (uint64_t)v233[0]);
    uint64_t v75 = __p;
    uint64_t v76 = v228;
    if (v228 == __p)
    {
      if (!v228) {
        goto LABEL_86;
      }
    }
    else
    {
      double v77 = fmax(v73, 0.0);
      double v78 = fmax(v74, 0.0) - v77;
      unint64_t v79 = (v228 - (unsigned char *)__p) >> 3;
      uint64_t v80 = (double *)v229;
      uint64_t v81 = v226;
      if (v79 <= 1) {
        unint64_t v79 = 1;
      }
      uint64_t v82 = (uint64_t *)__p;
      do
      {
        double v83 = *v80++;
        double v84 = v77 + v78 * (v83 - v54) / (v55 - v54);
        uint64_t v85 = *v82++;
        *(double *)(v81 + 8 * v85) = v84;
        --v79;
      }
      while (v79);
      uint64_t v228 = &v76[(v75 - v76 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v75);
LABEL_86:
    if (v229)
    {
      if (v230 != v229) {
        unint64_t v230 = (double *)((char *)v230 + (((unsigned char *)v229 - (unsigned char *)v230 + 7) & 0xFFFFFFFFFFFFFFF8));
      }
      operator delete(v229);
    }
  }
  if (v19 >= 1) {
    bzero(v18, v17 - v18);
  }
  uint64_t v86 = v246 - (void)v245;
  if (v246 - (uint64_t)v245 >= 1) {
    bzero(v245, v246 - (void)v245);
  }
  double v87 = (*a1)[3];
  double v88 = (*a1)[5];
  if (v87 != v88)
  {
    uint64_t v89 = v12 - v11;
    if (v19 != v89) {
      std::valarray<BOOL>::resize((uint64_t)&v247, v12 - v11);
    }
    if (v11 != v12)
    {
      uint64_t v90 = (BOOL *)v247;
      if (v88 >= v87) {
        double v91 = v87;
      }
      else {
        double v91 = v88;
      }
      uint64_t v92 = v11;
      uint64_t v93 = v12 - v11;
      do
      {
        double v94 = *v92++;
        *v90++ = v94 >= v91;
        --v93;
      }
      while (v93);
    }
    if (v86 != v89) {
      std::valarray<BOOL>::resize((uint64_t)&v245, v12 - v11);
    }
    if (v11 != v12)
    {
      uint64_t v95 = (BOOL *)v245;
      if (v87 >= v88) {
        double v96 = v87;
      }
      else {
        double v96 = v88;
      }
      uint64_t v97 = v11;
      do
      {
        double v98 = *v97++;
        *v95++ = v98 < v96;
        --v89;
      }
      while (v89);
    }
    unint64_t v18 = v247;
    uint64_t v17 = v248;
    uint64_t v19 = v248 - v247;
    if (v240 - (void)v239 != v248 - v247) {
      std::valarray<BOOL>::resize((uint64_t)&v239, v248 - v247);
    }
    if (v17 != v18)
    {
      uint64_t v99 = v239;
      uint64_t v100 = (char *)v245;
      uint64_t v101 = v18;
      uint64_t v102 = v17 - v18;
      do
      {
        char v104 = *v101++;
        char v103 = v104;
        char v105 = *v100++;
        *v99++ = v105 & v103;
        --v102;
      }
      while (v102);
    }
    double v106 = (*a1)[2];
    double v107 = (*a1)[4];
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v239, (uint64_t)v11);
    std::valarray<double>::valarray(&v229, &v226);
    if (__p)
    {
      if (v228 != __p) {
        v228 += ((unsigned char *)__p - v228 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      operator delete(__p);
    }
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v239, (uint64_t)v232[0]);
    uint64_t v108 = __p;
    uint64_t v109 = v228;
    if (v228 == __p)
    {
      if (!v228) {
        goto LABEL_128;
      }
    }
    else
    {
      double v110 = fmax(v106, 0.0);
      double v111 = fmax(v107, 0.0) - v110;
      unint64_t v112 = (v228 - (unsigned char *)__p) >> 3;
      uint64_t v113 = (double *)v229;
      uint64_t v114 = v226;
      if (v112 <= 1) {
        unint64_t v112 = 1;
      }
      uint64_t v115 = (uint64_t *)__p;
      do
      {
        double v116 = *v113++;
        double v117 = v110 + v111 * (v116 - v87) / (v88 - v87);
        uint64_t v118 = *v115++;
        *(double *)(v114 + 8 * v118) = v117;
        --v112;
      }
      while (v112);
      uint64_t v228 = &v109[(v108 - v109 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v108);
LABEL_128:
    if (v229)
    {
      if (v230 != v229) {
        unint64_t v230 = (double *)((char *)v230 + (((unsigned char *)v229 - (unsigned char *)v230 + 7) & 0xFFFFFFFFFFFFFFF8));
      }
      operator delete(v229);
    }
  }
  if (v19 >= 1) {
    bzero(v18, v17 - v18);
  }
  uint64_t v119 = v246 - (void)v245;
  if (v246 - (uint64_t)v245 >= 1) {
    bzero(v245, v246 - (void)v245);
  }
  double v120 = (*a1)[5];
  double v121 = (*a1)[7];
  if (v120 != v121)
  {
    uint64_t v122 = v12 - v11;
    if (v19 != v122) {
      std::valarray<BOOL>::resize((uint64_t)&v247, v12 - v11);
    }
    if (v11 != v12)
    {
      uint64_t v123 = (BOOL *)v247;
      if (v121 >= v120) {
        double v124 = v120;
      }
      else {
        double v124 = v121;
      }
      uint64_t v125 = v11;
      uint64_t v126 = v12 - v11;
      do
      {
        double v127 = *v125++;
        *v123++ = v127 >= v124;
        --v126;
      }
      while (v126);
    }
    if (v119 != v122) {
      std::valarray<BOOL>::resize((uint64_t)&v245, v12 - v11);
    }
    if (v11 != v12)
    {
      uint64_t v128 = (BOOL *)v245;
      if (v120 >= v121) {
        double v129 = v120;
      }
      else {
        double v129 = v121;
      }
      uint64_t v130 = v11;
      do
      {
        double v131 = *v130++;
        *v128++ = v131 < v129;
        --v122;
      }
      while (v122);
    }
    uint64_t v132 = v247;
    uint64_t v133 = v248;
    uint64_t v134 = v248 - v247;
    if (v238 - (void)v237 != v248 - v247) {
      std::valarray<BOOL>::resize((uint64_t)&v237, v248 - v247);
    }
    if (v133 != v132)
    {
      uint64_t v135 = v237;
      uint64_t v136 = (char *)v245;
      do
      {
        char v138 = *v132++;
        char v137 = v138;
        char v139 = *v136++;
        *v135++ = v139 & v137;
        --v134;
      }
      while (v134);
    }
    double v140 = (*a1)[4];
    double v141 = (*a1)[6];
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v237, (uint64_t)v11);
    std::valarray<double>::valarray(&v229, &v226);
    if (__p)
    {
      if (v228 != __p) {
        v228 += ((unsigned char *)__p - v228 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      operator delete(__p);
    }
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v237, (uint64_t)v231[0]);
    uint64_t v142 = __p;
    uint64_t v143 = v228;
    if (v228 == __p)
    {
      if (!v228) {
        goto LABEL_170;
      }
    }
    else
    {
      double v144 = fmax(v140, 0.0);
      double v145 = fmax(v141, 0.0) - v144;
      unint64_t v146 = (v228 - (unsigned char *)__p) >> 3;
      uint64_t v147 = (double *)v229;
      uint64_t v148 = v226;
      if (v146 <= 1) {
        unint64_t v146 = 1;
      }
      unint64_t v149 = (uint64_t *)__p;
      do
      {
        double v150 = *v147++;
        double v151 = v144 + v145 * (v150 - v120) / (v121 - v120);
        uint64_t v152 = *v149++;
        *(double *)(v148 + 8 * v152) = v151;
        --v146;
      }
      while (v146);
      uint64_t v228 = &v143[(v142 - v143 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v142);
LABEL_170:
    if (v229)
    {
      if (v230 != v229) {
        unint64_t v230 = (double *)((char *)v230 + (((unsigned char *)v229 - (unsigned char *)v230 + 7) & 0xFFFFFFFFFFFFFFF8));
      }
      operator delete(v229);
    }
  }
  uint64_t v153 = v243;
  uint64_t v154 = v244;
  uint64_t v155 = v244 - v243;
  if (v250 - (void)v249 != v244 - v243) {
    std::valarray<BOOL>::resize((uint64_t)&v249, v244 - v243);
  }
  if (v154 != v153)
  {
    uint64_t v156 = v249;
    uint64_t v157 = (char *)v237;
    unint64_t v158 = (char *)v239;
    do
    {
      char v160 = *v153++;
      char v159 = v160;
      char v161 = *v157++;
      char v162 = v161 | v159;
      char v163 = *v158++;
      *v156++ = v162 | v163;
      --v155;
    }
    while (v155);
  }
  std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, &v249, (uint64_t)v11);
  std::valarray<double>::valarray(&v229, &v226);
  if (__p)
  {
    if (v228 != __p) {
      v228 += ((unsigned char *)__p - v228 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    operator delete(__p);
  }
  unint64_t v164 = (double *)v229;
  uint64_t v165 = v230;
  if (v229 != v230)
  {
    uint64_t v166 = (double *)v229;
    do
    {
      *uint64_t v166 = v13 * *v166;
      ++v166;
    }
    while (v166 != v165);
    unint64_t v167 = 0;
    uint64_t v168 = 0;
    double v169 = (double)v223;
    double v170 = 0.0;
    uint64_t v171 = v164;
    while (1)
    {
      double v172 = v171[v167];
      unint64_t v173 = vcvtad_u64_f64(v172);
      double v174 = *((double *)v234[0] + v173);
      double v175 = 1.79769313e308;
      if (v174 < 0.0 || (double v175 = fmin(v174, 1.79769313e308), v174 <= 0.0)) {
        double v174 = 0.0;
      }
      double v176 = *((double *)v233[0] + v173);
      if (v176 < 0.0) {
        goto LABEL_194;
      }
      if (v176 < v175) {
        double v175 = *((double *)v233[0] + v173);
      }
      if (v176 <= v174) {
LABEL_194:
      }
        double v176 = v174;
      double v177 = *((double *)v232[0] + v173);
      if (v177 < 0.0) {
        goto LABEL_199;
      }
      if (v177 < v175) {
        double v175 = *((double *)v232[0] + v173);
      }
      if (v177 <= v176) {
LABEL_199:
      }
        double v177 = v176;
      double v178 = *((double *)v231[0] + v173);
      if (v178 < 0.0) {
        goto LABEL_204;
      }
      if (v178 < v175) {
        double v175 = *((double *)v231[0] + v173);
      }
      if (v178 <= v177) {
LABEL_204:
      }
        double v178 = v177;
      unint64_t v179 = vcvtad_u64_f64(v175 * v169);
      double v180 = (double)(unint64_t)round(v175 * v169) + v169 * ((double)(unint64_t)round(v172) + -1.0);
      unint64_t v181 = v173 ? (unint64_t)v180 : v179;
      size_t v182 = vcvtad_u64_f64((v178 - v175) * v169);
      if (v182)
      {
        BOOL v183 = (unsigned __int8 *)operator new(v182);
        unint64_t v184 = v183;
        uint64_t v185 = 0;
        unint64_t v186 = *a3 + v181;
        do
        {
          v183[v185] = *(unsigned char *)(v186 + v185);
          ++v185;
        }
        while (v182 != v185);
        uint64_t v187 = &v183[v185];
        if (a6)
        {
LABEL_212:
          std::__val_expr<std::_BinaryOp<std::less<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(&v224, v184, v187, v251);
          std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v224, (uint64_t)v184);
          uint64_t v188 = v228;
          if (v228 == __p)
          {
            uint64_t v191 = v228;
            if (!v228) {
              goto LABEL_229;
            }
          }
          else
          {
            uint64_t v189 = 0;
            unint64_t v190 = (v228 - (unsigned char *)__p) >> 3;
            if (v190 <= 1) {
              unint64_t v190 = 1;
            }
            do
              *(unsigned char *)(v226 + *((void *)__p + v189++)) = 0;
            while (v190 != v189);
            uint64_t v191 = __p;
            uint64_t v188 = v228;
            if (!__p)
            {
LABEL_229:
              if (v224)
              {
                if (v225 != v224) {
                  uint64_t v225 = (char *)v224;
                }
                operator delete(v224);
              }
              uint64_t v224 = 0;
              uint64_t v225 = 0;
              if (v187 == v184)
              {
                unint64_t v197 = 0;
              }
              else
              {
                unint64_t v196 = (char *)operator new(v187 - v184);
                unint64_t v197 = v196;
                uint64_t v198 = 0;
                uint64_t v224 = v196;
                unsigned int v199 = v251[0];
                do
                {
                  v196[v198] = v184[v198] >= v199;
                  ++v198;
                }
                while (v187 - v184 != v198);
                uint64_t v225 = &v196[v198];
              }
              std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v224, (uint64_t)v184);
              unsigned int v200 = v228;
              if (v228 == __p)
              {
                int64_t v203 = v228;
                if (!v228) {
                  goto LABEL_248;
                }
              }
              else
              {
                uint64_t v201 = 0;
                unint64_t v202 = (v228 - (unsigned char *)__p) >> 3;
                if (v202 <= 1) {
                  unint64_t v202 = 1;
                }
                do
                  *(unsigned char *)(v226 + *((void *)__p + v201++)) = 1;
                while (v202 != v201);
                int64_t v203 = __p;
                unsigned int v200 = v228;
                if (!__p)
                {
LABEL_248:
                  if (v197) {
                    operator delete(v197);
                  }
                  if (v182)
                  {
                    unint64_t v204 = (unsigned char *)(*a2 + v181);
                    BOOL v205 = v184;
                    do
                    {
                      char v206 = *v205++;
                      *v204++ += v206 * a6;
                      --v182;
                    }
                    while (v182);
                  }
                  if (v187 == v184)
                  {
                    uint64_t v207 = 0;
                  }
                  else
                  {
                    uint64_t v207 = 0;
                    uint64_t v208 = v184;
                    do
                    {
                      if (*v208++) {
                        ++v207;
                      }
                    }
                    while (v208 != v187);
                  }
                  double v210 = (double)(v207 * (unint64_t)a6);
                  if (!v184) {
                    goto LABEL_284;
                  }
                  goto LABEL_283;
                }
              }
              if (v200 != v203) {
                uint64_t v228 = &v200[(v203 - v200 + 7) & 0xFFFFFFFFFFFFFFF8];
              }
              operator delete(v203);
              __p = 0;
              uint64_t v228 = 0;
              goto LABEL_248;
            }
          }
          if (v188 != v191) {
            uint64_t v228 = &v188[(v191 - v188 + 7) & 0xFFFFFFFFFFFFFFF8];
          }
          operator delete(v191);
          __p = 0;
          uint64_t v228 = 0;
          goto LABEL_229;
        }
      }
      else
      {
        unint64_t v184 = 0;
        uint64_t v187 = 0;
        if (a6) {
          goto LABEL_212;
        }
      }
      std::__val_expr<std::_BinaryOp<std::less<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(&v224, v184, v187, v251);
      std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v224, (uint64_t)v184);
      BOOL v192 = v228;
      if (v228 == __p) {
        break;
      }
      uint64_t v193 = 0;
      unint64_t v194 = (v228 - (unsigned char *)__p) >> 3;
      if (v194 <= 1) {
        unint64_t v194 = 1;
      }
      do
        *(unsigned char *)(v226 + *((void *)__p + v193++)) = 0;
      while (v194 != v193);
      double v195 = __p;
      BOOL v192 = v228;
      if (__p) {
        goto LABEL_263;
      }
LABEL_266:
      if (v224)
      {
        if (v225 != v224) {
          uint64_t v225 = (char *)v224;
        }
        operator delete(v224);
      }
      if (v182)
      {
        uint64_t v211 = (unsigned char *)(*a2 + v181);
        v212 = v184;
        do
        {
          char v213 = *v212++;
          *v211++ += v213;
          --v182;
        }
        while (v182);
      }
      unint64_t v214 = v187 - v184;
      if (v187 == v184)
      {
        uint64_t v207 = 0;
        double v210 = 0.0;
        if (!v184) {
          goto LABEL_284;
        }
      }
      else
      {
        if (v214 <= 1) {
          unint64_t v214 = 1;
        }
        double v210 = 0.0;
        unint64_t v215 = v184;
        do
        {
          unsigned int v216 = *v215++;
          double v210 = v210 + (double)v216;
          --v214;
        }
        while (v214);
        uint64_t v207 = 0;
        unint64_t v217 = v184;
        do
        {
          if (*v217++) {
            ++v207;
          }
        }
        while (v217 != v187);
        if (!v184) {
          goto LABEL_284;
        }
      }
LABEL_283:
      operator delete(v184);
LABEL_284:
      v168 += v207;
      double v170 = v170 + v210;
      ++v167;
      uint64_t v171 = (double *)v229;
      unint64_t v164 = v230;
      if (v167 >= ((char *)v230 - (unsigned char *)v229) >> 3)
      {
        double v219 = v170;
        if (!v229) {
          goto LABEL_294;
        }
        goto LABEL_291;
      }
    }
    double v195 = v228;
    if (!v228) {
      goto LABEL_266;
    }
LABEL_263:
    if (v192 != v195) {
      uint64_t v228 = &v192[(v195 - v192 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v195);
    __p = 0;
    uint64_t v228 = 0;
    goto LABEL_266;
  }
  double v219 = 0.0;
  uint64_t v171 = (double *)v229;
  if (!v229) {
    goto LABEL_294;
  }
LABEL_291:
  if (v164 != v171) {
    unint64_t v230 = (double *)((char *)v164 + (((char *)v171 - (char *)v164 + 7) & 0xFFFFFFFFFFFFFFF8));
  }
  operator delete(v171);
LABEL_294:
  if (v231[0]) {
    operator delete(v231[0]);
  }
  if (v232[0]) {
    operator delete(v232[0]);
  }
  if (v233[0]) {
    operator delete(v233[0]);
  }
  if (v234[0]) {
    operator delete(v234[0]);
  }
  if (v235) {
    operator delete(v235);
  }
  if (v237) {
    operator delete(v237);
  }
  if (v239) {
    operator delete(v239);
  }
  if (v241) {
    operator delete(v241);
  }
  if (v243) {
    operator delete(v243);
  }
  if (v245) {
    operator delete(v245);
  }
  if (v247) {
    operator delete(v247);
  }
  if (v249) {
    operator delete(v249);
  }
  return *(void *)&v219;
}

void sub_1DD8471D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,void *a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a35) {
    operator delete(a35);
  }
  char v37 = *(void **)(v35 - 208);
  if (v37) {
    operator delete(v37);
  }
  char v38 = *(void **)(v35 - 192);
  if (v38) {
    operator delete(v38);
  }
  char v39 = *(void **)(v35 - 176);
  if (v39) {
    operator delete(v39);
  }
  double v40 = *(void **)(v35 - 160);
  if (v40) {
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void *std::valarray<double>::valarray(void *a1, uint64_t *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    unint64_t v4 = a3;
    if (a3 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    double v6 = operator new(8 * a3);
    *a1 = v6;
    do
    {
      uint64_t v7 = *a2++;
      *v6++ = v7;
      --v4;
    }
    while (v4);
    a1[1] = v6;
  }
  return a1;
}

void std::valarray<double>::apply(void *a1, double *a2, double *a3, double (*a4)(double))
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if (v4 < 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = a2;
    uint64_t v8 = (char *)operator new((char *)a3 - (char *)a2);
    uint64_t v9 = v4 >> 3;
    *a1 = v8;
    a1[1] = v8;
    double v10 = (double *)(v8 + 8);
    do
    {
      *(v10 - 1) = a4(*v7);
      a1[1] = v10;
      ++v7;
      ++v10;
      --v9;
    }
    while (v9);
  }
}

void sub_1DD8474CC(_Unwind_Exception *a1)
{
  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

double nms::rasterizeRects<double>(std::valarray<double> const&,std::valarray<double>&,std::valarray<unsigned long> &,unsigned long,unsigned long,nms::RepresentationDimType)::{lambda(double)#1}::__invoke(double a1)
{
  return round(a1);
}

void std::deque<unsigned short>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x800;
  unint64_t v4 = v2 - 2048;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    double v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(void *)double v6 = v8;
      a1[2] += 8;
      return;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v28 = 1;
      }
      else {
        unint64_t v28 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v28);
      double v30 = &v29[8 * (v28 >> 2)];
      double v32 = &v29[8 * v31];
      uint64_t v33 = (uint64_t *)a1[1];
      double v6 = v30;
      uint64_t v34 = a1[2] - (void)v33;
      if (v34)
      {
        double v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v35 = 8 * (v34 >> 3);
        uint64_t v36 = &v29[8 * (v28 >> 2)];
        do
        {
          uint64_t v37 = *v33++;
          *(void *)uint64_t v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    double v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  uint64_t v19 = a1[2];
  unint64_t v20 = (v19 - a1[1]) >> 3;
  uint64_t v21 = a1[3];
  uint64_t v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(void *)&long long v49 = operator new(0x1000uLL);
      std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(a1, &v49);
      return;
    }
    *(void *)&long long v49 = operator new(0x1000uLL);
    std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v49);
    char v39 = (void *)a1[1];
    double v6 = (char *)a1[2];
    uint64_t v40 = *v39;
    uint64_t v7 = (char *)(v39 + 1);
    uint64_t v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_31;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v41);
      double v30 = &v29[8 * (v41 >> 2)];
      double v32 = &v29[8 * v42];
      uint64_t v43 = (uint64_t *)a1[1];
      double v6 = v30;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        double v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        unint64_t v46 = &v29[8 * (v41 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)unint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      char v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        double v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = v22 >> 2;
  }
  double v51 = a1 + 3;
  *(void *)&long long v49 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v23);
  *((void *)&v49 + 1) = v49 + 8 * v20;
  *(void *)&long long v50 = *((void *)&v49 + 1);
  *((void *)&v50 + 1) = v49 + 8 * v24;
  uint64_t v48 = operator new(0x1000uLL);
  std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v49, &v48);
  for (uint64_t i = (void *)a1[2];
        i != (void *)a1[1];
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v49, i))
  {
    --i;
  }
  int64_t v26 = (char *)*a1;
  long long v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26) {
    operator delete(v26);
  }
}

void sub_1DD847774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::reference_wrapper<std::valarray<double> const>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::deque<std::valarray<BOOL>>::push_back(void *a1, __n128 *a2)
{
  unint64_t v4 = (char *)a1[1];
  unint64_t v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 32 * (v5 - v4) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x100)
    {
      uint64_t v23 = v6 >> 3;
      uint64_t v24 = (char *)a1[3];
      double v25 = (char *)*a1;
      uint64_t v26 = (uint64_t)&v24[-*a1];
      if (v6 >> 3 >= (unint64_t)(v26 >> 3))
      {
        uint64_t v29 = v26 >> 2;
        if (v24 == v25) {
          unint64_t v30 = 1;
        }
        else {
          unint64_t v30 = v29;
        }
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v30);
        uint64_t v33 = v32;
        uint64_t v34 = operator new(0x1000uLL);
        uint64_t v35 = &v31[8 * v23];
        uint64_t v36 = &v31[8 * v33];
        if (v23 == v33)
        {
          uint64_t v37 = 8 * v23;
          if (v6 < 1)
          {
            double v73 = v34;
            uint64_t v74 = v37 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v75);
            uint64_t v35 = &v76[8 * (v75 >> 2)];
            uint64_t v36 = &v76[8 * v77];
            if (v31) {
              operator delete(v31);
            }
            uint64_t v31 = v76;
            uint64_t v34 = v73;
          }
          else
          {
            uint64_t v38 = v37 >> 3;
            if (v38 >= -1) {
              unint64_t v39 = v38 + 1;
            }
            else {
              unint64_t v39 = v38 + 2;
            }
            v35 -= 8 * (v39 >> 1);
          }
        }
        *(void *)uint64_t v35 = v34;
        double v78 = v35 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v35 == v31)
          {
            if (v78 >= v36)
            {
              if (v36 == v31) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v36 - v31) >> 2;
              }
              uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v84);
              double v87 = v85;
              uint64_t v35 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v31;
              BOOL v88 = v78 == v31;
              double v78 = v35;
              if (!v88)
              {
                double v78 = &v35[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                double v91 = v35;
                uint64_t v92 = (uint64_t *)v31;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)double v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              uint64_t v36 = &v85[8 * v86];
              if (v31) {
                operator delete(v31);
              }
              uint64_t v31 = v87;
            }
            else
            {
              uint64_t v80 = (v36 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              uint64_t v35 = &v31[8 * (v81 >> 1)];
              double v83 = v31;
              if (v78 != v31)
              {
                memmove(v35, v31, v78 - v31);
                double v83 = v78;
              }
              double v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v35 - 1) = v94;
          v35 -= 8;
        }
        uint64_t v95 = (char *)*a1;
        *a1 = v31;
        a1[1] = v35;
        a1[2] = v78;
        a1[3] = v36;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      long long v27 = operator new(0x1000uLL);
      unint64_t v28 = v27;
      if (v24 == v5)
      {
        if (v4 == v25)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v24 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v51);
          unint64_t v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          double v55 = (uint64_t *)a1[1];
          uint64_t v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            uint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)uint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          double v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            unint64_t v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v28;
        uint64_t v62 = (char *)a1[1];
        double v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            uint64_t v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v96);
            uint64_t v99 = &v97[8 * (v96 >> 2)];
            uint64_t v100 = (uint64_t *)a1[1];
            double v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              double v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              char v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)char v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            char v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              double v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            char v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            double v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)double v63 = v64;
      }
      else
      {
        *(void *)unint64_t v5 = v27;
      }
    }
    else
    {
      a1[4] = v8 - 256;
      uint64_t v12 = *(void *)v4;
      uint64_t v10 = v4 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v40 = 1;
          }
          else {
            unint64_t v40 = (uint64_t)&v5[-*a1] >> 2;
          }
          unint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v40);
          uint64_t v43 = &v41[8 * (v40 >> 2)];
          uint64_t v44 = (uint64_t *)a1[1];
          unint64_t v5 = v43;
          uint64_t v45 = a1[2] - (void)v44;
          if (v45)
          {
            unint64_t v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v46 = 8 * (v45 >> 3);
            uint64_t v47 = &v41[8 * (v40 >> 2)];
            do
            {
              uint64_t v48 = *v44++;
              *(void *)uint64_t v47 = v48;
              v47 += 8;
              v46 -= 8;
            }
            while (v46);
          }
          long long v49 = (char *)*a1;
          *a1 = v41;
          a1[1] = v43;
          a1[2] = v5;
          a1[3] = &v41[8 * v42];
          if (v49)
          {
            operator delete(v49);
            unint64_t v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            unint64_t v5 = (char *)a1[1];
          }
          uint64_t v22 = &v5[8 * v18];
          unint64_t v5 = &v20[v21];
          a1[1] = v22;
          a1[2] = &v20[v21];
        }
      }
      *(void *)unint64_t v5 = v11;
    }
    a1[2] += 8;
LABEL_36:
    unint64_t v4 = (char *)a1[1];
    unint64_t v9 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)&v4[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void sub_1DD847D34(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1DD847E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum(void *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1[121];
  if (!v3) {
    return;
  }
  uint64_t v151 = *(void *)(v3 + 40);
  if (!v151) {
    return;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  do
  {
    unint64_t v9 = *(void *)(a1[80] + 8 * ((a1[83] + v7) / 0x55uLL)) + 48 * ((a1[83] + v7) % 0x55uLL);
    unint64_t v10 = *(void *)(*(void *)(v9 + 8) + 8 * ((*(void *)(v9 + 32) + v6) / 0x55uLL))
        + 48 * ((*(void *)(v9 + 32) + v6) % 0x55uLL);
    unint64_t v11 = *(void *)(v10 + 32) + v8;
    uint64_t v12 = *(void *)(*(void *)(v10 + 8) + 8 * (v11 / 0x55));
    unint64_t v13 = v11 % 0x55;
    uint64_t v14 = v12 + 48 * (v11 % 0x55);
    uint64_t v16 = (void *)(v14 + 40);
    uint64_t v15 = *(void *)(v14 + 40);
    uint64_t v153 = v12;
    unint64_t v152 = v11 % 0x55;
    if (!v15) {
      goto LABEL_43;
    }
    uint64_t v17 = (uint64_t *)(v12 + 48 * v13 + 32);
    uint64_t v18 = *(void ***)(v14 + 8);
    uint64_t v19 = *(void ***)(v14 + 16);
    uint64_t v148 = v17;
    if (v19 == v18)
    {
      uint64_t v19 = *(void ***)(v14 + 8);
      goto LABEL_35;
    }
    unint64_t v20 = &v18[(unint64_t)*v17 >> 11];
    int64_t v21 = (unsigned __int16 *)((char *)*v20 + 2 * (*v17 & 0x7FF));
    uint64_t v155 = *(uint64_t *)((char *)v18 + (((unint64_t)(*v17 + v15) >> 8) & 0xFFFFFFFFFFFFF8))
         + 2 * ((*v17 + v15) & 0x7FF);
    if (v21 == (unsigned __int16 *)v155) {
      goto LABEL_33;
    }
    do
    {
      uint64_t v22 = *(void *)(*(void *)(a1[74] + (((unint64_t)(a1[77] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((unsigned char *)a1 + 616) + v7));
      uint64_t v23 = *v21;
      --*(unsigned char *)(v22 + v8);
      uint64_t v24 = *(void *)(*(void *)(a1[74] + (((unint64_t)(a1[77] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((unsigned char *)a1 + 616) + v6));
      --*(unsigned char *)(v24 + v23);
      unint64_t v25 = *(void *)(a1[80] + 8 * ((a1[83] + v6) / 0x55uLL)) + 48 * ((a1[83] + v6) % 0x55uLL);
      unint64_t v26 = *(void *)(*(void *)(v25 + 8) + 8 * ((*(void *)(v25 + 32) + v7) / 0x55uLL))
          + 48 * ((*(void *)(v25 + 32) + v7) % 0x55uLL);
      unint64_t v27 = *(void *)(*(void *)(v26 + 8) + 8 * ((*(void *)(v26 + 32) + v23) / 0x55uLL))
          + 48 * ((*(void *)(v26 + 32) + v23) % 0x55uLL);
      uint64_t v28 = *(void *)(v27 + 40);
      uint64_t v29 = *(void ***)(v27 + 8);
      unint64_t v30 = (uint64_t *)(v27 + 32);
      if (v28 == 1)
      {
        uint64_t v31 = *(void *)(v27 + 16);
        *(void *)(v27 + 40) = 0;
        unint64_t v32 = v31 - (void)v29;
        if ((unint64_t)(v31 - (void)v29) >= 0x11)
        {
          do
          {
            operator delete(*v29);
            uint64_t v33 = *(void *)(v27 + 16);
            uint64_t v29 = (void **)(*(void *)(v27 + 8) + 8);
            *(void *)(v27 + 8) = v29;
            unint64_t v32 = v33 - (void)v29;
          }
          while (v32 > 0x10);
        }
        if (v32 >> 3 == 1)
        {
          uint64_t v34 = 1024;
        }
        else
        {
          if (v32 >> 3 != 2)
          {
LABEL_28:
            std::deque<unsigned short>::shrink_to_fit((void **)v27);
            goto LABEL_29;
          }
          uint64_t v34 = 2048;
        }
        *unint64_t v30 = v34;
        goto LABEL_28;
      }
      uint64_t v35 = &v29[(unint64_t)*v30 >> 11];
      uint64_t v36 = *(void ***)(v27 + 16);
      if (v36 == v29) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = (uint64_t)*v35 + 2 * (*v30 & 0x7FF);
      }
      unint64_t v38 = *v30 + v28;
      unint64_t v39 = v38 >> 11;
      uint64_t v40 = v38 & 0x7FF;
LABEL_17:
      unint64_t v41 = (unsigned __int16 *)v37;
      while (1)
      {
        uint64_t v42 = v36 == v29 ? 0 : (uint64_t)v29[v39] + 2 * v40;
        if (v41 == (unsigned __int16 *)v42) {
          break;
        }
        if (*v41 == a3)
        {
          std::deque<unsigned short>::erase((int64x2_t *)v27, (char *)v35, v37);
          break;
        }
        ++v41;
        v37 += 2;
        if ((char *)*v35 + 4096 == (void *)v37)
        {
          uint64_t v43 = (uint64_t)v35[1];
          ++v35;
          uint64_t v37 = v43;
          goto LABEL_17;
        }
      }
LABEL_29:
      if ((char *)++v21 - (unsigned char *)*v20 == 4096)
      {
        uint64_t v44 = (unsigned __int16 *)v20[1];
        ++v20;
        int64_t v21 = v44;
      }
    }
    while (v21 != (unsigned __int16 *)v155);
    uint64_t v18 = *(void ***)(v14 + 8);
    uint64_t v19 = *(void ***)(v14 + 16);
LABEL_33:
    uint64_t v12 = v153;
    uint64_t v16 = (void *)(v14 + 40);
    unint64_t v13 = v152;
LABEL_35:
    void *v16 = 0;
    unint64_t v45 = (char *)v19 - (char *)v18;
    if (v45 >= 0x11)
    {
      do
      {
        operator delete(*v18);
        uint64_t v46 = *(void *)(v14 + 16);
        uint64_t v18 = (void **)(*(void *)(v14 + 8) + 8);
        *(void *)(v14 + 8) = v18;
        unint64_t v45 = v46 - (void)v18;
      }
      while (v45 > 0x10);
    }
    if (v45 >> 3 == 1)
    {
      uint64_t v47 = 1024;
LABEL_41:
      *uint64_t v148 = v47;
    }
    else if (v45 >> 3 == 2)
    {
      uint64_t v47 = 2048;
      goto LABEL_41;
    }
    std::deque<unsigned short>::shrink_to_fit((void **)v14);
LABEL_43:
    unint64_t v48 = *(void *)(a1[92] + 8 * ((a1[95] + v7) / 0x55uLL)) + 48 * ((a1[95] + v7) % 0x55uLL);
    unint64_t v49 = *(void *)(*(void *)(v48 + 8) + 8 * ((*(void *)(v48 + 32) + v6) / 0x55uLL))
        + 48 * ((*(void *)(v48 + 32) + v6) % 0x55uLL);
    std::deque<unsigned short>::operator=((void *)v14, (void *)(*(void *)(*(void *)(v49 + 8) + 8 * ((*(void *)(v49 + 32) + v8) / 0x55uLL))+ 48 * ((*(void *)(v49 + 32) + v8) % 0x55uLL)));
    if (!*v16) {
      goto LABEL_82;
    }
    long long v50 = (uint64_t *)(v12 + 48 * v13 + 32);
    unint64_t v51 = *(void ***)(v14 + 8);
    uint64_t v52 = *(void ***)(v14 + 16);
    unint64_t v149 = v50;
    if (v52 == v51)
    {
      uint64_t v52 = *(void ***)(v14 + 8);
      goto LABEL_74;
    }
    uint64_t v53 = &v51[(unint64_t)*v50 >> 11];
    uint64_t v54 = (unsigned __int16 *)((char *)*v53 + 2 * (*v50 & 0x7FF));
    uint64_t v156 = *(uint64_t *)((char *)v51 + (((unint64_t)(*v50 + *v16) >> 8) & 0xFFFFFFFFFFFFF8))
         + 2 * ((*v50 + *v16) & 0x7FF);
    if (v54 == (unsigned __int16 *)v156) {
      goto LABEL_72;
    }
    while (2)
    {
      uint64_t v55 = *(void *)(*(void *)(a1[86] + (((unint64_t)(a1[89] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((unsigned char *)a1 + 712) + v7));
      uint64_t v56 = *v54;
      --*(unsigned char *)(v55 + v8);
      uint64_t v57 = *(void *)(*(void *)(a1[98] + (((unint64_t)(a1[101] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((unsigned char *)a1 + 808) + v6));
      --*(unsigned char *)(v57 + v56);
      unint64_t v58 = *(void *)(a1[104] + 8 * ((a1[107] + v6) / 0x55uLL)) + 48 * ((a1[107] + v6) % 0x55uLL);
      unint64_t v59 = *(void *)(*(void *)(v58 + 8) + 8 * ((*(void *)(v58 + 32) + v7) / 0x55uLL))
          + 48 * ((*(void *)(v58 + 32) + v7) % 0x55uLL);
      unint64_t v60 = *(void *)(*(void *)(v59 + 8) + 8 * ((*(void *)(v59 + 32) + v56) / 0x55uLL))
          + 48 * ((*(void *)(v59 + 32) + v56) % 0x55uLL);
      uint64_t v61 = *(void *)(v60 + 40);
      uint64_t v62 = *(void ***)(v60 + 8);
      double v63 = (uint64_t *)(v60 + 32);
      if (v61 == 1)
      {
        uint64_t v64 = *(void *)(v60 + 16);
        *(void *)(v60 + 40) = 0;
        unint64_t v65 = v64 - (void)v62;
        if ((unint64_t)(v64 - (void)v62) >= 0x11)
        {
          do
          {
            operator delete(*v62);
            uint64_t v66 = *(void *)(v60 + 16);
            uint64_t v62 = (void **)(*(void *)(v60 + 8) + 8);
            *(void *)(v60 + 8) = v62;
            unint64_t v65 = v66 - (void)v62;
          }
          while (v65 > 0x10);
        }
        if (v65 >> 3 == 1)
        {
          uint64_t v67 = 1024;
LABEL_66:
          uint64_t *v63 = v67;
        }
        else if (v65 >> 3 == 2)
        {
          uint64_t v67 = 2048;
          goto LABEL_66;
        }
        std::deque<unsigned short>::shrink_to_fit((void **)v60);
      }
      else
      {
        uint64_t v68 = &v62[(unint64_t)*v63 >> 11];
        uint64_t v69 = *(void ***)(v60 + 16);
        if (v69 == v62) {
          uint64_t v70 = 0;
        }
        else {
          uint64_t v70 = (uint64_t)*v68 + 2 * (*v63 & 0x7FF);
        }
        unint64_t v71 = *v63 + v61;
        unint64_t v72 = v71 >> 11;
        uint64_t v73 = v71 & 0x7FF;
LABEL_56:
        uint64_t v74 = (unsigned __int16 *)v70;
        while (1)
        {
          uint64_t v75 = v69 == v62 ? 0 : (uint64_t)v62[v72] + 2 * v73;
          if (v74 == (unsigned __int16 *)v75) {
            break;
          }
          if (*v74 == a3)
          {
            std::deque<unsigned short>::erase((int64x2_t *)v60, (char *)v68, v70);
            break;
          }
          ++v74;
          v70 += 2;
          if ((char *)*v68 + 4096 == (void *)v70)
          {
            uint64_t v76 = (uint64_t)v68[1];
            ++v68;
            uint64_t v70 = v76;
            goto LABEL_56;
          }
        }
      }
      if ((char *)++v54 - (unsigned char *)*v53 == 4096)
      {
        uint64_t v77 = (unsigned __int16 *)v53[1];
        ++v53;
        uint64_t v54 = v77;
      }
      if (v54 != (unsigned __int16 *)v156) {
        continue;
      }
      break;
    }
    unint64_t v51 = *(void ***)(v14 + 8);
    uint64_t v52 = *(void ***)(v14 + 16);
LABEL_72:
    uint64_t v12 = v153;
    uint64_t v16 = (void *)(v14 + 40);
    unint64_t v13 = v152;
LABEL_74:
    void *v16 = 0;
    unint64_t v78 = (char *)v52 - (char *)v51;
    if (v78 >= 0x11)
    {
      do
      {
        operator delete(*v51);
        uint64_t v79 = *(void *)(v14 + 16);
        unint64_t v51 = (void **)(*(void *)(v14 + 8) + 8);
        *(void *)(v14 + 8) = v51;
        unint64_t v78 = v79 - (void)v51;
      }
      while (v78 > 0x10);
    }
    if (v78 >> 3 == 1)
    {
      uint64_t v80 = 1024;
LABEL_80:
      uint64_t *v149 = v80;
    }
    else if (v78 >> 3 == 2)
    {
      uint64_t v80 = 2048;
      goto LABEL_80;
    }
    std::deque<unsigned short>::shrink_to_fit((void **)v14);
LABEL_82:
    unint64_t v81 = *(void *)(a1[104] + 8 * ((a1[107] + v7) / 0x55uLL)) + 48 * ((a1[107] + v7) % 0x55uLL);
    unint64_t v82 = *(void *)(*(void *)(v81 + 8) + 8 * ((*(void *)(v81 + 32) + v6) / 0x55uLL))
        + 48 * ((*(void *)(v81 + 32) + v6) % 0x55uLL);
    std::deque<unsigned short>::operator=((void *)v14, (void *)(*(void *)(*(void *)(v82 + 8) + 8 * ((*(void *)(v82 + 32) + v8) / 0x55uLL))+ 48 * ((*(void *)(v82 + 32) + v8) % 0x55uLL)));
    if (!*v16) {
      goto LABEL_121;
    }
    double v83 = (uint64_t *)(v12 + 48 * v13 + 32);
    unint64_t v84 = *(void ***)(v14 + 8);
    uint64_t v85 = *(void ***)(v14 + 16);
    double v150 = v83;
    if (v85 == v84)
    {
      uint64_t v85 = *(void ***)(v14 + 8);
      goto LABEL_113;
    }
    uint64_t v86 = &v84[(unint64_t)*v83 >> 11];
    double v87 = (unsigned __int16 *)((char *)*v86 + 2 * (*v83 & 0x7FF));
    uint64_t v157 = *(uint64_t *)((char *)v84 + (((unint64_t)(*v83 + *v16) >> 8) & 0xFFFFFFFFFFFFF8))
         + 2 * ((*v83 + *v16) & 0x7FF);
    if (v87 == (unsigned __int16 *)v157) {
      goto LABEL_111;
    }
    while (2)
    {
      uint64_t v88 = *(void *)(*(void *)(a1[98] + (((unint64_t)(a1[101] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((unsigned char *)a1 + 808) + v7));
      uint64_t v89 = *v87;
      --*(unsigned char *)(v88 + v8);
      uint64_t v90 = *(void *)(*(void *)(a1[86] + (((unint64_t)(a1[89] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((unsigned char *)a1 + 712) + v6));
      --*(unsigned char *)(v90 + v89);
      unint64_t v91 = *(void *)(a1[92] + 8 * ((a1[95] + v6) / 0x55uLL)) + 48 * ((a1[95] + v6) % 0x55uLL);
      unint64_t v92 = *(void *)(*(void *)(v91 + 8) + 8 * ((*(void *)(v91 + 32) + v7) / 0x55uLL))
          + 48 * ((*(void *)(v91 + 32) + v7) % 0x55uLL);
      unint64_t v93 = *(void *)(*(void *)(v92 + 8) + 8 * ((*(void *)(v92 + 32) + v89) / 0x55uLL))
          + 48 * ((*(void *)(v92 + 32) + v89) % 0x55uLL);
      uint64_t v94 = *(void *)(v93 + 40);
      uint64_t v95 = *(void ***)(v93 + 8);
      unint64_t v96 = (uint64_t *)(v93 + 32);
      if (v94 == 1)
      {
        uint64_t v97 = *(void *)(v93 + 16);
        *(void *)(v93 + 40) = 0;
        unint64_t v98 = v97 - (void)v95;
        if ((unint64_t)(v97 - (void)v95) >= 0x11)
        {
          do
          {
            operator delete(*v95);
            uint64_t v99 = *(void *)(v93 + 16);
            uint64_t v95 = (void **)(*(void *)(v93 + 8) + 8);
            *(void *)(v93 + 8) = v95;
            unint64_t v98 = v99 - (void)v95;
          }
          while (v98 > 0x10);
        }
        if (v98 >> 3 == 1)
        {
          uint64_t v100 = 1024;
LABEL_105:
          *unint64_t v96 = v100;
        }
        else if (v98 >> 3 == 2)
        {
          uint64_t v100 = 2048;
          goto LABEL_105;
        }
        std::deque<unsigned short>::shrink_to_fit((void **)v93);
      }
      else
      {
        uint64_t v101 = &v95[(unint64_t)*v96 >> 11];
        uint64_t v102 = *(void ***)(v93 + 16);
        if (v102 == v95) {
          uint64_t v103 = 0;
        }
        else {
          uint64_t v103 = (uint64_t)*v101 + 2 * (*v96 & 0x7FF);
        }
        unint64_t v104 = *v96 + v94;
        unint64_t v105 = v104 >> 11;
        uint64_t v106 = v104 & 0x7FF;
LABEL_95:
        double v107 = (unsigned __int16 *)v103;
        while (1)
        {
          uint64_t v108 = v102 == v95 ? 0 : (uint64_t)v95[v105] + 2 * v106;
          if (v107 == (unsigned __int16 *)v108) {
            break;
          }
          if (*v107 == a3)
          {
            std::deque<unsigned short>::erase((int64x2_t *)v93, (char *)v101, v103);
            break;
          }
          ++v107;
          v103 += 2;
          if ((char *)*v101 + 4096 == (void *)v103)
          {
            uint64_t v109 = (uint64_t)v101[1];
            ++v101;
            uint64_t v103 = v109;
            goto LABEL_95;
          }
        }
      }
      if ((char *)++v87 - (unsigned char *)*v86 == 4096)
      {
        double v110 = (unsigned __int16 *)v86[1];
        ++v86;
        double v87 = v110;
      }
      if (v87 != (unsigned __int16 *)v157) {
        continue;
      }
      break;
    }
    unint64_t v84 = *(void ***)(v14 + 8);
    uint64_t v85 = *(void ***)(v14 + 16);
LABEL_111:
    uint64_t v12 = v153;
    uint64_t v16 = (void *)(v14 + 40);
    unint64_t v13 = v152;
LABEL_113:
    void *v16 = 0;
    unint64_t v111 = (char *)v85 - (char *)v84;
    if (v111 >= 0x11)
    {
      do
      {
        operator delete(*v84);
        uint64_t v112 = *(void *)(v14 + 16);
        unint64_t v84 = (void **)(*(void *)(v14 + 8) + 8);
        *(void *)(v14 + 8) = v84;
        unint64_t v111 = v112 - (void)v84;
      }
      while (v111 > 0x10);
    }
    if (v111 >> 3 == 1)
    {
      uint64_t v113 = 1024;
LABEL_119:
      *double v150 = v113;
    }
    else if (v111 >> 3 == 2)
    {
      uint64_t v113 = 2048;
      goto LABEL_119;
    }
    std::deque<unsigned short>::shrink_to_fit((void **)v14);
LABEL_121:
    unint64_t v114 = *(void *)(a1[116] + 8 * ((a1[119] + v7) / 0x55uLL)) + 48 * ((a1[119] + v7) % 0x55uLL);
    unint64_t v115 = *(void *)(*(void *)(v114 + 8) + 8 * ((*(void *)(v114 + 32) + v6) / 0x55uLL))
         + 48 * ((*(void *)(v114 + 32) + v6) % 0x55uLL);
    std::deque<unsigned short>::operator=((void *)v14, (void *)(*(void *)(*(void *)(v115 + 8) + 8 * ((*(void *)(v115 + 32) + v8) / 0x55uLL))+ 48 * ((*(void *)(v115 + 32) + v8) % 0x55uLL)));
    if (!*v16) {
      goto LABEL_160;
    }
    double v116 = (uint64_t *)(v12 + 48 * v13 + 32);
    double v117 = *(void ***)(v14 + 8);
    uint64_t v118 = *(void ***)(v14 + 16);
    if (v118 == v117)
    {
      uint64_t v118 = *(void ***)(v14 + 8);
      goto LABEL_152;
    }
    uint64_t v154 = v116;
    uint64_t v119 = *v116;
    double v120 = &v117[(unint64_t)*v116 >> 11];
    double v121 = (unsigned __int16 *)((char *)*v120 + 2 * (v119 & 0x7FF));
    uint64_t v158 = *(uint64_t *)((char *)v117 + (((unint64_t)(v119 + *v16) >> 8) & 0xFFFFFFFFFFFFF8))
         + 2 * ((v119 + *v16) & 0x7FF);
    if (v121 == (unsigned __int16 *)v158) {
      goto LABEL_150;
    }
    while (2)
    {
      uint64_t v122 = *(void *)(*(void *)(a1[110] + (((unint64_t)(a1[113] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*((unsigned char *)a1 + 904) + v7));
      uint64_t v123 = *v121;
      --*(unsigned char *)(v122 + v8);
      uint64_t v124 = *(void *)(*(void *)(a1[110] + (((unint64_t)(a1[113] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*((unsigned char *)a1 + 904) + v6));
      --*(unsigned char *)(v124 + v123);
      unint64_t v125 = *(void *)(a1[116] + 8 * ((a1[119] + v6) / 0x55uLL)) + 48 * ((a1[119] + v6) % 0x55uLL);
      unint64_t v126 = *(void *)(*(void *)(v125 + 8) + 8 * ((*(void *)(v125 + 32) + v7) / 0x55uLL))
           + 48 * ((*(void *)(v125 + 32) + v7) % 0x55uLL);
      unint64_t v127 = *(void *)(*(void *)(v126 + 8) + 8 * ((*(void *)(v126 + 32) + v123) / 0x55uLL))
           + 48 * ((*(void *)(v126 + 32) + v123) % 0x55uLL);
      uint64_t v128 = *(void *)(v127 + 40);
      double v129 = *(void ***)(v127 + 8);
      uint64_t v130 = (uint64_t *)(v127 + 32);
      if (v128 == 1)
      {
        uint64_t v131 = *(void *)(v127 + 16);
        *(void *)(v127 + 40) = 0;
        unint64_t v132 = v131 - (void)v129;
        if ((unint64_t)(v131 - (void)v129) >= 0x11)
        {
          do
          {
            operator delete(*v129);
            uint64_t v133 = *(void *)(v127 + 16);
            double v129 = (void **)(*(void *)(v127 + 8) + 8);
            *(void *)(v127 + 8) = v129;
            unint64_t v132 = v133 - (void)v129;
          }
          while (v132 > 0x10);
        }
        if (v132 >> 3 == 1)
        {
          uint64_t v134 = 1024;
LABEL_144:
          *uint64_t v130 = v134;
        }
        else if (v132 >> 3 == 2)
        {
          uint64_t v134 = 2048;
          goto LABEL_144;
        }
        std::deque<unsigned short>::shrink_to_fit((void **)v127);
      }
      else
      {
        uint64_t v135 = &v129[(unint64_t)*v130 >> 11];
        uint64_t v136 = *(void ***)(v127 + 16);
        if (v136 == v129) {
          uint64_t v137 = 0;
        }
        else {
          uint64_t v137 = (uint64_t)*v135 + 2 * (*v130 & 0x7FF);
        }
        unint64_t v138 = *v130 + v128;
        unint64_t v139 = v138 >> 11;
        uint64_t v140 = v138 & 0x7FF;
LABEL_134:
        double v141 = (unsigned __int16 *)v137;
        while (1)
        {
          uint64_t v142 = v136 == v129 ? 0 : (uint64_t)v129[v139] + 2 * v140;
          if (v141 == (unsigned __int16 *)v142) {
            break;
          }
          if (*v141 == a3)
          {
            std::deque<unsigned short>::erase((int64x2_t *)v127, (char *)v135, v137);
            break;
          }
          ++v141;
          v137 += 2;
          if ((char *)*v135 + 4096 == (void *)v137)
          {
            uint64_t v143 = (uint64_t)v135[1];
            ++v135;
            uint64_t v137 = v143;
            goto LABEL_134;
          }
        }
      }
      if ((char *)++v121 - (unsigned char *)*v120 == 4096)
      {
        double v144 = (unsigned __int16 *)v120[1];
        ++v120;
        double v121 = v144;
      }
      if (v121 != (unsigned __int16 *)v158) {
        continue;
      }
      break;
    }
    double v117 = *(void ***)(v14 + 8);
    uint64_t v118 = *(void ***)(v14 + 16);
LABEL_150:
    double v116 = v154;
    uint64_t v16 = (void *)(v14 + 40);
LABEL_152:
    void *v16 = 0;
    unint64_t v145 = (char *)v118 - (char *)v117;
    if (v145 >= 0x11)
    {
      do
      {
        operator delete(*v117);
        uint64_t v146 = *(void *)(v14 + 16);
        double v117 = (void **)(*(void *)(v14 + 8) + 8);
        *(void *)(v14 + 8) = v117;
        unint64_t v145 = v146 - (void)v117;
      }
      while (v145 > 0x10);
    }
    if (v145 >> 3 == 1)
    {
      uint64_t v147 = 1024;
LABEL_158:
      *double v116 = v147;
    }
    else if (v145 >> 3 == 2)
    {
      uint64_t v147 = 2048;
      goto LABEL_158;
    }
    std::deque<unsigned short>::shrink_to_fit((void **)v14);
LABEL_160:
    ++v6;
  }
  while (v6 != v151);
}

void std::deque<unsigned short>::shrink_to_fit(void **a1)
{
  if (a1[5])
  {
    std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v2 = (uint64_t)a1[2];
  }
  else
  {
    uint64_t v3 = (uint64_t)a1[2];
    if ((void *)v3 != a1[1])
    {
      do
      {
        operator delete(*(void **)(v3 - 8));
        unint64_t v4 = a1[1];
        uint64_t v3 = (uint64_t)a1[2] - 8;
        a1[2] = (void *)v3;
      }
      while ((void *)v3 != v4);
    }
    a1[4] = 0;
    uint64_t v2 = v3;
  }
  unint64_t v5 = (v2 - v3) >> 3;
  if (v5 < ((unsigned char *)a1[3] - (unsigned char *)*a1) >> 3)
  {
    if (v2 == v3)
    {
      unint64_t v9 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
      uint64_t v7 = (char *)a1[1];
      uint64_t v2 = (uint64_t)a1[2];
      unint64_t v9 = &v6[8 * v8];
      uint64_t v10 = v2 - (void)v7;
      if ((char *)v2 != v7)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 8 * (v10 >> 3);
        do
        {
          *(void *)&v6[v11] = *(void *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        uint64_t v2 = (uint64_t)a1[1];
        unint64_t v13 = a1[2];
LABEL_14:
        uint64_t v14 = (uint64_t)v13 - v2;
        uint64_t v15 = *a1;
        *a1 = v6;
        a1[1] = v6;
        a1[2] = &v6[v14];
        a1[3] = v9;
        if (v15)
        {
          operator delete(v15);
        }
        return;
      }
    }
    unint64_t v13 = (void *)v2;
    goto LABEL_14;
  }
}

void *std::deque<unsigned short>::operator=(void *a1, void *a2)
{
  if (a1 == a2) {
    return a1;
  }
  unint64_t v3 = a2[4];
  uint64_t v4 = a2[1];
  unint64_t v5 = (char *)(v4 + 8 * (v3 >> 11));
  if (a2[2] == v4)
  {
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = (char *)(v4 + 8 * ((a2[5] + v3) >> 11));
  }
  else
  {
    uint64_t v6 = (unsigned char *)(*(void *)v5 + 2 * (a2[4] & 0x7FFLL));
    unint64_t v7 = a2[5] + v3;
    uint64_t v8 = (char *)(v4 + 8 * (v7 >> 11));
    uint64_t v9 = *(void *)v8 + 2 * (v7 & 0x7FF);
  }
  if ((unsigned char *)v9 == v6)
  {
    unint64_t v10 = 0;
    uint64_t v12 = a1 + 5;
  }
  else
  {
    unint64_t v10 = ((v9 - *(void *)v8) >> 1) + ((v8 - v5) << 8) - ((uint64_t)&v6[-*(void *)v5] >> 1);
    uint64_t v12 = a1 + 5;
    unint64_t v11 = a1[5];
    if (v11 < v10)
    {
      uint64_t v14 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](v5, (uint64_t)v6, v11);
      uint64_t v15 = v13;
      uint64_t v16 = a1[1];
      if (a1[2] == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(void *)(v16 + 8 * (a1[4] >> 11)) + 2 * (a1[4] & 0x7FFLL);
      }
      unint64_t v30 = (char *)(v16 + 8 * (a1[4] >> 11));
      uint64_t v31 = v17;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>>((uint64_t *)v5, v6, v14, v13, (uint64_t)&v30);
      std::deque<unsigned short>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>>(a1, (char **)v14, v15, v10 - a1[5]);
      return a1;
    }
  }
  uint64_t v18 = a1[1];
  uint64_t v19 = (char *)(v18 + 8 * (a1[4] >> 11));
  if (a1[2] == v18) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)v19 + 2 * (a1[4] & 0x7FFLL);
  }
  int64_t v21 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](v5, (uint64_t)v6, v10);
  unint64_t v30 = v19;
  uint64_t v31 = v20;
  std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>>((uint64_t *)v5, v6, v21, v22, (uint64_t)&v30);
  uint64_t v23 = a1[5];
  unint64_t v24 = a1[4] + v23;
  uint64_t v25 = a1[1];
  unint64_t v26 = (char *)(v25 + 8 * (v24 >> 11));
  if (a1[2] == v25) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = *(void *)v26 + 2 * (v24 & 0x7FF);
  }
  if (v27 != v31)
  {
    uint64_t v28 = ((v27 - *(void *)v26) >> 1) + ((v26 - v30) << 8) - ((v31 - *(void *)v30) >> 1);
    if (v28 >= 1)
    {
      *uint64_t v12 = v23 - v28;
      while ((std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0)
        ;
    }
  }
  return a1;
}

void *std::deque<unsigned short>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>>(void *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 8) - 1;
  }
  uint64_t v11 = a1[5];
  unint64_t v12 = v11 + a1[4];
  unint64_t v13 = v10 - v12;
  if (a4 > v13)
  {
    std::deque<unsigned short>::__add_back_capacity(a1, a4 - v13);
    uint64_t v11 = a1[5];
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v12 = a1[4] + v11;
  }
  uint64_t v14 = (void *)(v8 + 8 * (v12 >> 11));
  if (v9 == v8) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *v14 + 2 * (v12 & 0x7FF);
  }
  __n128 result = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](v14, v15, a4);
  if (v15 != v17)
  {
    do
    {
      if (v14 == result) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = *v14 + 4096;
      }
      if (v15 == v18)
      {
        uint64_t v18 = v15;
      }
      else
      {
        uint64_t v19 = *a2;
        uint64_t v20 = (_WORD *)v15;
        do
        {
          __int16 v21 = *(_WORD *)a3;
          a3 += 2;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            uint64_t v22 = a2[1];
            ++a2;
            uint64_t v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_WORD *)v18);
      }
      v11 += (v18 - v15) >> 1;
      if (v14 == result) {
        break;
      }
      uint64_t v23 = v14[1];
      ++v14;
      uint64_t v15 = v23;
    }
    while (v23 != v17);
    a1[5] = v11;
  }
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>>(uint64_t *a1, unsigned char *a2, uint64_t *a3, unsigned char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v19 = *(void ***)a5;
    uint64_t v20 = *(char **)(a5 + 8);
    uint64_t v18 = a4;
  }
  else
  {
    uint64_t v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned short *,unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v22, a2, (unsigned char *)(*a1 + 4096), *(void ***)a5, *(char **)(a5 + 8));
    *(_OWORD *)a5 = v23;
    uint64_t v9 = *(void ***)a5;
    for (uint64_t i = *(char **)(a5 + 8); v8 != a3; ++v8)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *v8;
      uint64_t v14 = (char *)*v9++;
      unint64_t v13 = v14;
      while (1)
      {
        uint64_t v15 = v13 - i + 4096;
        if ((4096 - 2 * v11) >> 1 >= v15 >> 1) {
          uint64_t v16 = v15 >> 1;
        }
        else {
          uint64_t v16 = (4096 - 2 * v11) >> 1;
        }
        if (v16) {
          memmove(i, (const void *)(v12 + 2 * v11), 2 * v16);
        }
        v11 += v16;
        if (v11 == 2048) {
          break;
        }
        uint64_t v17 = (char *)*v9++;
        unint64_t v13 = v17;
        uint64_t i = v17;
      }
      i += 2 * v16;
      if ((char *)*(v9 - 1) + 4096 == i) {
        uint64_t i = (char *)*v9;
      }
      else {
        --v9;
      }
      *(void *)a5 = v9;
      *(void *)(a5 + 8) = i;
    }
    a2 = (unsigned char *)*a3;
    uint64_t v18 = a4;
    uint64_t v19 = v9;
    uint64_t v20 = i;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned short *,unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v22, a2, v18, v19, v20);
  double result = *(double *)&v23;
  *(_OWORD *)a5 = v23;
  return result;
}

double std::__val_expr<std::_BinaryOp<std::plus<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::max[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = **(void **)(a1 + 40);
  double result = *(double *)(v3 + 8 * v2) + *(double *)(v5 + 8 * v4);
  uint64_t v7 = v1 - 1;
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = (double *)(v5 + 8 * (v9 + v4));
    uint64_t v11 = (double *)(v3 + 8 * (v8 + v2));
    do
    {
      if (result < *v11 + *v10) {
        double result = *v11 + *v10;
      }
      v10 += v9;
      v11 += v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t std::valarray<double>::__assign_range(uint64_t a1, unsigned char *__src, unsigned char *a3)
{
  size_t v6 = a3 - __src;
  uint64_t v7 = (a3 - __src) >> 3;
  uint64_t v8 = *(unsigned char **)a1;
  uint64_t v9 = *(unsigned char **)(a1 + 8);
  if (v7 == (v9 - v8) >> 3)
  {
    if (a3 != __src) {
      memmove(v8, __src, a3 - __src);
    }
  }
  else
  {
    if (v8)
    {
      if (v9 != v8) {
        *(void *)(a1 + 8) = &v9[(v8 - v9 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      operator delete(v8);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    if ((v6 & 0x8000000000000000) != 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = (char *)operator new(v6);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = &v11[8 * v7];
    if (__src != a3) {
      memcpy(v11, __src, v6 & 0xFFFFFFFFFFFFFFF8);
    }
  }
  return a1;
}

double nms::intersectionPenalizedUnionOfRects<double>(std::valarray<double> const&,std::valarray<double>&,unsigned long,nms::RepresentationDimType)::{lambda(double)#1}::__invoke(double a1)
{
  return round(a1);
}

void *std::__val_expr<std::_BinaryOp<std::greater<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(void *result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  *double result = 0;
  result[1] = 0;
  int64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    size_t v6 = a2;
    uint64_t v7 = result;
    double result = operator new(a3 - a2);
    void *v7 = result;
    v7[1] = result;
    unsigned int v8 = *a4;
    do
    {
      unsigned int v9 = *v6++;
      *(unsigned char *)double result = v9 > v8;
      double result = (void *)((char *)result + 1);
      --v4;
    }
    while (v4);
    v7[1] = result;
  }
  return result;
}

void sub_1DD849410(_Unwind_Exception *a1)
{
  std::valarray<BOOL>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__val_expr<std::_BinaryOp<std::bit_and<BOOL>,std::valarray<BOOL>,std::__val_expr<std::_UnaryOp<std::logical_not<BOOL>,std::valarray<BOOL> const&>>>>::operator std::valarray<BOOL>(void *result, char *a2, unsigned char *a3, char **a4)
{
  *double result = 0;
  result[1] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    size_t v6 = a2;
    uint64_t v7 = result;
    double result = operator new(a3 - a2);
    void *v7 = result;
    v7[1] = result;
    unsigned int v8 = *a4;
    do
    {
      char v10 = *v8++;
      char v9 = v10;
      char v11 = *v6++;
      *(unsigned char *)double result = v11 & ~v9;
      double result = (void *)((char *)result + 1);
      --v4;
    }
    while (v4);
    v7[1] = result;
  }
  return result;
}

void sub_1DD84948C(_Unwind_Exception *a1)
{
  std::valarray<BOOL>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(void *a1, _WORD *a2, _WORD *a3)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1];
  if (v6 == v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v6 - v7) << 7) - 1;
  }
  uint64_t v9 = a1[5];
  unint64_t v10 = v9 + a1[4];
  if (v8 == v10)
  {
    std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(a1);
    uint64_t v9 = a1[5];
    uint64_t v7 = a1[1];
    unint64_t v10 = a1[4] + v9;
  }
  char v11 = (_WORD *)(*(void *)(v7 + ((v10 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v10 & 0x3FF));
  _WORD *v11 = *a2;
  v11[1] = *a3;
  a1[5] = v9 + 1;
}

void std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 7) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(_DWORD *)(*(void *)(v5 + ((v7 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v7 & 0x3FF)) = *a2;
  ++a1[5];
}

BOOL nms::PyramidNMS<unsigned short,double,unsigned char>::isQuadSizeEqualOrLarger(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5 = a1[5];
  if (v5 <= a2 || v5 <= a4) {
    std::__throw_out_of_range[abi:ne180100]("deque");
  }
  uint64_t v7 = a1[4];
  unint64_t v8 = v7 + a2;
  uint64_t v9 = a1[1];
  uint64_t v10 = *(void *)(v9 + 8 * (v8 / 0x14));
  unint64_t v11 = v7 + a4;
  uint64_t v12 = *(void *)(v9 + 8 * (v11 / 0x14));
  unint64_t v13 = v8 % 0x14;
  uint64_t v14 = (void *)(v10 + 200 * (v8 % 0x14));
  unint64_t v15 = v11 % 0x14;
  unint64_t v16 = *(void *)(v14[17] + 8 * ((v14[20] + 4) / 0x55uLL)) + 48 * ((v14[20] + 4) % 0x55uLL);
  uint64_t v17 = *(unsigned __int16 *)(*(void *)(*(void *)(v16 + 8)
                                        + (((*(void *)(v16 + 32) + (unint64_t)a3) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((*(void *)(v16 + 32) + a3) & 0x3FFLL));
  uint64_t v20 = (void *)v14[23];
  uint64_t v18 = v14 + 23;
  uint64_t v19 = v20;
  if (!v20) {
    goto LABEL_16;
  }
  __int16 v21 = v18;
  do
  {
    unint64_t v22 = v19[4];
    BOOL v23 = v22 >= 3;
    if (v22 >= 3) {
      unint64_t v24 = v19;
    }
    else {
      unint64_t v24 = v19 + 1;
    }
    if (v23) {
      __int16 v21 = v19;
    }
    uint64_t v19 = (void *)*v24;
  }
  while (*v24);
  if (v21 == v18 || v21[4] > 3uLL || (unint64_t v25 = v21[5], v25 > 8)) {
LABEL_16:
  }
    double v26 = 0.0;
  else {
    double v26 = dbl_1DD8CEC20[v25];
  }
  uint64_t v46 = *(void *)(*(void *)(v10 + 200 * v13 + 88)
                  + (((unint64_t)(*(void *)(v10 + 200 * v13 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
      + 16 * (*(unsigned char *)(v10 + 200 * v13 + 112) + 3);
  uint64_t v47 = *(void *)&v26 * v17;
  double v48 = v26;
  uint64_t v49 = 1;
  std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v44, (uint64_t)&v46);
  uint64_t v27 = (void *)(v12 + 200 * v15);
  unint64_t v28 = *(void *)(v27[17] + 8 * ((v27[20] + 4) / 0x55uLL)) + 48 * ((v27[20] + 4) % 0x55uLL);
  uint64_t v29 = *(unsigned __int16 *)(*(void *)(*(void *)(v28 + 8)
                                        + (((*(void *)(v28 + 32) + (unint64_t)a5) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((*(void *)(v28 + 32) + a5) & 0x3FFLL));
  unint64_t v32 = (void *)v27[23];
  unint64_t v30 = v27 + 23;
  uint64_t v31 = v32;
  if (!v32) {
    goto LABEL_30;
  }
  uint64_t v33 = v30;
  do
  {
    unint64_t v34 = v31[4];
    BOOL v35 = v34 >= 3;
    if (v34 >= 3) {
      uint64_t v36 = v31;
    }
    else {
      uint64_t v36 = v31 + 1;
    }
    if (v35) {
      uint64_t v33 = v31;
    }
    uint64_t v31 = (void *)*v36;
  }
  while (*v36);
  if (v33 == v30 || v33[4] > 3uLL || (unint64_t v37 = v33[5], v37 > 8)) {
LABEL_30:
  }
    double v38 = 0.0;
  else {
    double v38 = dbl_1DD8CEC20[v37];
  }
  uint64_t v46 = *(void *)(*(void *)(v12 + 200 * v15 + 88)
                  + (((unint64_t)(*(void *)(v12 + 200 * v15 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
      + 16 * (*(unsigned char *)(v12 + 200 * v15 + 112) + 3);
  uint64_t v47 = *(void *)&v38 * v29;
  double v48 = v38;
  uint64_t v49 = 1;
  std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&__p, (uint64_t)&v46);
  double v39 = nms::areaOfQuad<double>((double **)&v44);
  double v40 = nms::areaOfQuad<double>((double **)&__p);
  if (__p)
  {
    if (v43 != __p) {
      v43 += ((unsigned char *)__p - v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    operator delete(__p);
  }
  if (v44)
  {
    if (v45 != v44) {
      v45 += ((unsigned char *)v44 - v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    operator delete(v44);
  }
  return v39 >= v40;
}

void sub_1DD8498D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, void *a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(void *)uint64_t v6 = v8;
      a1[2] += 8;
      return;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v28 = 1;
      }
      else {
        unint64_t v28 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v28);
      unint64_t v30 = &v29[8 * (v28 >> 2)];
      unint64_t v32 = &v29[8 * v31];
      uint64_t v33 = (uint64_t *)a1[1];
      uint64_t v6 = v30;
      uint64_t v34 = a1[2] - (void)v33;
      if (v34)
      {
        uint64_t v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v35 = 8 * (v34 >> 3);
        uint64_t v36 = &v29[8 * (v28 >> 2)];
        do
        {
          uint64_t v37 = *v33++;
          *(void *)uint64_t v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  uint64_t v19 = a1[2];
  unint64_t v20 = (v19 - a1[1]) >> 3;
  uint64_t v21 = a1[3];
  uint64_t v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(void *)&long long v49 = operator new(0x1000uLL);
      std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(a1, &v49);
      return;
    }
    *(void *)&long long v49 = operator new(0x1000uLL);
    std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v49);
    double v39 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v40 = *v39;
    uint64_t v7 = (char *)(v39 + 1);
    uint64_t v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_31;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v41);
      unint64_t v30 = &v29[8 * (v41 >> 2)];
      unint64_t v32 = &v29[8 * v42];
      uint64_t v43 = (uint64_t *)a1[1];
      uint64_t v6 = v30;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        uint64_t v46 = &v29[8 * (v41 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      double v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = v22 >> 2;
  }
  unint64_t v51 = a1 + 3;
  *(void *)&long long v49 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v23);
  *((void *)&v49 + 1) = v49 + 8 * v20;
  *(void *)&long long v50 = *((void *)&v49 + 1);
  *((void *)&v50 + 1) = v49 + 8 * v24;
  double v48 = operator new(0x1000uLL);
  std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v49, &v48);
  for (uint64_t i = (void *)a1[2];
        i != (void *)a1[1];
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v49, i))
  {
    --i;
  }
  double v26 = (char *)*a1;
  long long v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26) {
    operator delete(v26);
  }
}

void sub_1DD849BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double nms::areaOfQuad<double>(double **a1)
{
  v16[0] = 0;
  v16[1] = 0;
  std::valarray<double>::resize((uint64_t)v16, 2uLL, 0.0);
  __p[0] = 0;
  __p[1] = 0;
  std::valarray<double>::resize((uint64_t)__p, 2uLL, 0.0);
  unint64_t v2 = *a1;
  double v3 = (*a1)[2] - **a1;
  unint64_t v4 = (double *)v16[0];
  *(double *)v16[0] = v3;
  v4[1] = v2[3] - v2[1];
  double v5 = v2[6] - *v2;
  uint64_t v6 = (double *)__p[0];
  *(double *)__p[0] = v5;
  double v7 = v2[7] - v2[1];
  v6[1] = v7;
  double v8 = *v4;
  double v9 = v4[1];
  *unint64_t v4 = v2[2] - v2[4];
  v4[1] = v2[3] - v2[5];
  double v10 = v2[6] - v2[4];
  double *v6 = v10;
  double v11 = v2[7] - v2[5];
  v6[1] = v11;
  double v12 = *v4;
  double v13 = v4[1];
  operator delete(v6);
  operator delete(v4);
  return fabs(v8 * v7 - v5 * v9) * 0.5 + fabs(v12 * v11 - v10 * v13) * 0.5;
}

void sub_1DD849D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nms::PyramidNMS<unsigned short,double,unsigned char>::getContainedDatums(void *a1, unsigned int a2, unsigned int a3, void *a4)
{
  double v8 = (void **)a4[1];
  uint64_t v9 = a4[2];
  a4[5] = 0;
  unint64_t v10 = v9 - (void)v8;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v8);
      uint64_t v11 = a4[2];
      double v8 = (void **)(a4[1] + 8);
      a4[1] = v8;
      unint64_t v10 = v11 - (void)v8;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    uint64_t v12 = 512;
  }
  else
  {
    if (v10 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v12 = 1024;
  }
  a4[4] = v12;
LABEL_8:
  uint64_t v13 = a1[121];
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 40);
    if ((_BYTE)v14)
    {
      uint64_t v15 = operator new(*(void *)(v13 + 40));
      bzero(v15, v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    __int16 v45 = 0;
    unsigned int v41 = v14;
    if (!(_BYTE)v14)
    {
      LOBYTE(v16) = 0;
      if (!v15) {
        return v16;
      }
      goto LABEL_31;
    }
    unsigned __int16 v17 = 0;
    int v16 = 0;
    uint64_t v18 = a2;
    uint64_t v42 = a3;
    unsigned int v19 = v14;
    uint64_t v39 = a2;
    uint64_t v40 = v15;
    do
    {
      uint64_t v20 = v17;
      unint64_t v21 = *(void *)(a1[92] + 8 * ((a1[95] + v18) / 0x55uLL)) + 48 * ((a1[95] + v18) % 0x55uLL);
      unint64_t v22 = *(void *)(v21 + 32) + v17;
      uint64_t v23 = *(void *)(*(void *)(v21 + 8) + 8 * (v22 / 0x55));
      if (*(void *)(v23 + 48 * (v22 % 0x55) + 40))
      {
        uint64_t v24 = v23 + 48 * (v22 % 0x55);
        unint64_t v25 = *(void *)(v24 + 32) + v42;
        uint64_t v26 = *(void *)(*(void *)(v24 + 8) + 8 * (v25 / 0x55));
        unint64_t v27 = v25 % 0x55;
        uint64_t v28 = *(void *)(v26 + 48 * (v25 % 0x55) + 40);
        if (v28)
        {
          int v43 = v16;
          uint64_t v29 = v26 + 48 * v27;
          uint64_t v30 = *(void *)(v29 + 8);
          if (*(void *)(v29 + 16) == v30
            || (unint64_t v31 = *(void *)(v26 + 48 * v27 + 32),
                unint64_t v32 = (char **)(v30 + 8 * (v31 >> 11)),
                uint64_t v33 = *v32,
                uint64_t v34 = (unsigned __int16 *)&(*v32)[2 * (v31 & 0x7FF)],
                uint64_t v35 = *(void *)(v30 + (((v31 + v28) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v31 + v28) & 0x7FF),
                v34 == (unsigned __int16 *)v35))
          {
            int v36 = 0;
          }
          else
          {
            int v36 = 0;
            do
            {
              unsigned __int16 v44 = 0;
              unsigned __int16 v44 = *v34;
              if (!*(unsigned char *)(*(void *)(*(void *)(a1[14]
                                                     + (((unint64_t)(a1[17] + v20) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*((unsigned char *)a1 + 136) + v20))
                             + v44)
                && !*(unsigned char *)(*(void *)(*(void *)(a1[20]
                                                     + (((unint64_t)(a1[23] + v20) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*((unsigned char *)a1 + 184) + v20))
                             + v44))
              {
                std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(a4, &v45, &v44);
                ++v36;
                uint64_t v33 = *v32;
              }
              if ((char *)++v34 - v33 == 4096)
              {
                uint64_t v37 = v32[1];
                ++v32;
                uint64_t v33 = v37;
                uint64_t v34 = (unsigned __int16 *)v37;
              }
            }
            while (v34 != (unsigned __int16 *)v35);
          }
          uint64_t v18 = v39;
          uint64_t v15 = v40;
          *((unsigned char *)v40 + v20) = v36;
          int v16 = v36 + v43;
          unsigned int v19 = v41;
        }
      }
      unsigned __int16 v17 = v20 + 1;
      __int16 v45 = v20 + 1;
    }
    while (v19 > (unsigned __int16)(v20 + 1));
    if (v15) {
LABEL_31:
    }
      operator delete(v15);
  }
  else
  {
    LOBYTE(v16) = 0;
  }
  return v16;
}

void sub_1DD84A018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nms::PyramidNMS<unsigned short,double,unsigned char>::processContainmentOfOneDatum(uint64_t result, unsigned int a2, unsigned int a3, void *a4, void *a5, void *a6)
{
  uint64_t v528 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(result + 112)
                                        + (((*(void *)(result + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (*(void *)(result + 136) + a2))
                + a3))
    return result;
  uint64_t v6 = a5;
  double v7 = a4;
  uint64_t v8 = result;
  uint64_t v481 = (void *)(result + 104);
  unint64_t v478 = (double *)(result + 1160);
  unint64_t v477 = (double *)(result + 1168);
  unint64_t v474 = (double *)(result + 1184);
  uint64_t v475 = (double *)(result + 1176);
  double v472 = (double *)(result + 1200);
  uint64_t v473 = (double *)(result + 1192);
  uint64_t v470 = (double *)(result + 1216);
  unint64_t v471 = (double *)(result + 1208);
  do
  {
    if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v8 + 160)
                                          + (((*(void *)(v8 + 184) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*(unsigned char *)(v8 + 184) + a2))
                  + a3))
      return result;
    uint64_t v9 = v7[5];
    if (!v9) {
      return result;
    }
    long long v496 = 0u;
    long long v497 = 0u;
    long long v495 = 0u;
    uint64_t v10 = v7[1];
    if (v7[2] == v10
      || (unint64_t v11 = v7[4],
          uint64_t v12 = (void *)(v10 + 8 * (v11 >> 10)),
          uint64_t v13 = (unsigned __int16 *)(*v12 + 4 * (v11 & 0x3FF)),
          uint64_t v14 = *(void *)(v10 + (((v11 + v9) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v11 + v9) & 0x3FF),
          v13 == (unsigned __int16 *)v14))
    {
      uint64_t v17 = 0;
      unsigned int v19 = 0;
      uint64_t v18 = 0;
      uint64_t v16 = 0;
LABEL_14:
      uint64_t v20 = 0;
      unint64_t v22 = 0;
      unint64_t v21 = (char *)(v16 + 8 * ((unint64_t)(v17 + v18) >> 9));
      goto LABEL_15;
    }
    do
    {
      *(void *)&v520.f64[0] = *v13 ^ (16 * v13[1]);
      std::deque<unsigned long>::push_back(&v495, &v520);
      v13 += 2;
      if ((unsigned __int16 *)((char *)v13 - *v12) == (unsigned __int16 *)4096)
      {
        uint64_t v15 = (unsigned __int16 *)v12[1];
        ++v12;
        uint64_t v13 = v15;
      }
    }
    while (v13 != (unsigned __int16 *)v14);
    uint64_t v16 = *((void *)&v495 + 1);
    uint64_t v17 = *((void *)&v497 + 1);
    uint64_t v18 = v497;
    unsigned int v19 = (char *)(*((void *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
    if ((void)v496 == *((void *)&v495 + 1)) {
      goto LABEL_14;
    }
    uint64_t v20 = (unint64_t *)(*(void *)v19 + 8 * (v497 & 0x1FF));
    unint64_t v21 = (char *)(*((void *)&v495 + 1) + 8 * ((*((void *)&v497 + 1) + (void)v497) >> 9));
    unint64_t v22 = (unint64_t *)(*(void *)v21 + 8 * ((*((void *)&v497 + 1) + v497) & 0x1FF));
LABEL_15:
    std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__less<void,void>>(v19, v20, v21, v22);
    long long v493 = 0u;
    long long v494 = 0u;
    long long v492 = 0u;
    uint64_t v23 = v7[1];
    if (v7[2] != v23)
    {
      unint64_t v24 = v7[4];
      unint64_t v25 = (unsigned __int16 **)(v23 + 8 * (v24 >> 10));
      uint64_t v26 = *v25;
      unint64_t v27 = &(*v25)[2 * (v24 & 0x3FF)];
      uint64_t v28 = *(void *)(v23 + (((v7[5] + v24) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v7[5] + v24) & 0x3FF);
      for (i = v28; ; uint64_t v28 = i)
      {
        if (v27 == (unsigned __int16 *)v28) {
          goto LABEL_117;
        }
        unsigned int v29 = *v27;
        unsigned int v30 = v27[1];
        if ((void)v493 == *((void *)&v492 + 1)) {
          break;
        }
        unint64_t v31 = (unsigned __int16 **)(*((void *)&v492 + 1) + 8 * ((unint64_t)v494 >> 10));
        unint64_t v32 = *v31;
        uint64_t v33 = &(*v31)[2 * (v494 & 0x3FF)];
        uint64_t v34 = *(void *)(*((void *)&v492 + 1) + (((*((void *)&v494 + 1) + (void)v494) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((*((void *)&v494 + 1) + v494) & 0x3FF);
        if (v33 != (unsigned __int16 *)v34)
        {
          while (*v33 != v29 || v33[1] != v30)
          {
            v33 += 2;
            if ((char *)v33 - (char *)v32 == 4096)
            {
              uint64_t v35 = v31[1];
              ++v31;
              unint64_t v32 = v35;
              uint64_t v33 = v35;
            }
            if (v33 == (unsigned __int16 *)v34) {
              goto LABEL_27;
            }
          }
        }
        if (v33 == (unsigned __int16 *)v34) {
          break;
        }
LABEL_114:
        v27 += 2;
        if ((char *)v27 - (char *)v26 == 4096)
        {
          unint64_t v98 = v25[1];
          ++v25;
          uint64_t v26 = v98;
          unint64_t v27 = v98;
        }
      }
LABEL_27:
      nms::PyramidNMS<unsigned short,double,unsigned char>::computeConstitutedIndices((uint64_t)v517, (void *)v8, v29, v30, v481);
      int v36 = (char *)v517[1];
      uint64_t v37 = (char *)v518;
      if ((void *)v518 == v517[1])
      {
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        double v48 = 0;
        long long v509 = 0u;
        long long v510 = 0u;
        *(_OWORD *)__p = 0u;
      }
      else
      {
        uint64_t v38 = v519;
        unint64_t v39 = (unint64_t)v519 >> 10;
        uint64_t v40 = (char *)v517[1] + 8 * ((unint64_t)v519 >> 10);
        unsigned int v41 = *(unsigned __int16 **)v40;
        uint64_t v42 = (unsigned __int16 *)(*(void *)v40 + 4 * (v519 & 0x3FF));
        uint64_t v43 = *(void *)((char *)v517[1] + (((*((void *)&v519 + 1) + (void)v519) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((*((void *)&v519 + 1) + v519) & 0x3FF);
        if (v42 != (unsigned __int16 *)v43)
        {
          while (*v42 != a2 || v42[1] != a3)
          {
            v42 += 2;
            if ((char *)v42 - (char *)v41 == 4096)
            {
              unsigned __int16 v44 = (unsigned __int16 *)*((void *)v40 + 1);
              v40 += 8;
              unsigned int v41 = v44;
              uint64_t v42 = v44;
            }
            if (v42 == (unsigned __int16 *)v43) {
              goto LABEL_38;
            }
          }
        }
        if (v42 != (unsigned __int16 *)v43)
        {
          std::deque<std::pair<unsigned short,unsigned short>>::erase((uint64_t)v517, v40, (uint64_t)v42);
          uint64_t v38 = v519;
          int v36 = (char *)v517[1];
          uint64_t v37 = (char *)v518;
          unint64_t v39 = (unint64_t)v519 >> 10;
        }
LABEL_38:
        long long v509 = 0u;
        long long v510 = 0u;
        *(_OWORD *)__p = 0u;
        if (v37 == v36
          || (long long v49 = &v36[8 * v39],
              long long v50 = (unsigned __int16 *)(*(void *)v49 + 4 * (v38 & 0x3FF)),
              uint64_t v51 = *(void *)&v36[((unint64_t)(*((void *)&v519 + 1) + v38) >> 7) & 0x1FFFFFFFFFFFFF8]
                  + 4 * ((*((void *)&v519 + 1) + v38) & 0x3FF),
              v50 == (unsigned __int16 *)v51))
        {
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          double v48 = 0;
        }
        else
        {
          do
          {
            *(void *)&v520.f64[0] = *v50 ^ (16 * v50[1]);
            std::deque<unsigned long>::push_back(__p, &v520);
            v50 += 2;
            if ((unsigned __int16 *)((char *)v50 - *(void *)v49) == (unsigned __int16 *)4096)
            {
              uint64_t v52 = (unsigned __int16 *)*((void *)v49 + 1);
              v49 += 8;
              long long v50 = v52;
            }
          }
          while (v50 != (unsigned __int16 *)v51);
          double v48 = (char *)__p[1];
          uint64_t v45 = *((void *)&v510 + 1);
          uint64_t v47 = v510;
          uint64_t v46 = (char *)__p[1] + 8 * ((unint64_t)v510 >> 9);
          if ((void *)v509 != __p[1])
          {
            uint64_t v53 = (unint64_t *)(*(void *)v46 + 8 * (v510 & 0x1FF));
            uint64_t v54 = (char *)__p[1] + 8 * ((*((void *)&v510 + 1) + (void)v510) >> 9);
            uint64_t v55 = (unint64_t *)(*(void *)v54 + 8 * ((*((void *)&v510 + 1) + v510) & 0x1FF));
LABEL_47:
            uint64_t v487 = v27;
            uint64_t v489 = v25;
            std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__less<void,void>>(v46, v53, v54, v55);
            std::deque<unsigned long>::deque((uint64_t)&v503, *((void *)&v510 + 1) + *((void *)&v497 + 1));
            uint64_t v56 = (uint64_t *)((char *)__p[1] + 8 * ((unint64_t)v510 >> 9));
            if ((void *)v509 == __p[1])
            {
              uint64_t v57 = 0;
              unint64_t v59 = 0;
              unint64_t v58 = (uint64_t *)((char *)__p[1] + 8 * ((*((void *)&v510 + 1) + (void)v510) >> 9));
            }
            else
            {
              uint64_t v57 = (unsigned char *)(*v56 + 8 * (v510 & 0x1FF));
              unint64_t v58 = (uint64_t *)((char *)__p[1] + 8 * ((*((void *)&v510 + 1) + (void)v510) >> 9));
              unint64_t v59 = (unsigned char *)(*v58 + 8 * ((*((void *)&v510 + 1) + v510) & 0x1FF));
            }
            unint64_t v60 = (void *)(*((void *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
            if ((void)v496 == *((void *)&v495 + 1))
            {
              uint64_t v61 = 0;
              uint64_t v62 = 0;
            }
            else
            {
              uint64_t v61 = (unint64_t *)(*v60 + 8 * (v497 & 0x1FF));
              uint64_t v62 = *(void *)(*((void *)&v495 + 1)
                              + (((*((void *)&v497 + 1) + (void)v497) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((*((void *)&v497 + 1) + v497) & 0x1FF);
            }
            double v63 = &v504[8 * (v506 >> 9)];
            if (v505 == v504) {
              uint64_t v64 = 0;
            }
            else {
              uint64_t v64 = (char *)(*(void *)v63 + 8 * (v506 & 0x1FF));
            }
            if (v57 == v59)
            {
              unint64_t v59 = v57;
            }
            else
            {
              while (v61 != (unint64_t *)v62)
              {
                unint64_t v65 = *(void *)v57;
                if (*(void *)v57 >= *v61)
                {
                  if (*v61 >= v65)
                  {
                    v57 += 8;
                    if (&v57[-*v56] == (unsigned char *)4096)
                    {
                      uint64_t v68 = (unsigned char *)v56[1];
                      ++v56;
                      uint64_t v57 = v68;
                    }
                  }
                  if ((unint64_t *)((char *)++v61 - *v60) == (unint64_t *)4096)
                  {
                    uint64_t v69 = (unint64_t *)v60[1];
                    ++v60;
                    uint64_t v61 = v69;
                  }
                }
                else
                {
                  *(void *)uint64_t v64 = v65;
                  v57 += 8;
                  if (&v57[-*v56] == (unsigned char *)4096)
                  {
                    uint64_t v66 = (unsigned char *)v56[1];
                    ++v56;
                    uint64_t v57 = v66;
                  }
                  v64 += 8;
                  if (&v64[-*(void *)v63] == (char *)4096)
                  {
                    uint64_t v67 = (char *)*((void *)v63 + 1);
                    v63 += 8;
                    uint64_t v64 = v67;
                  }
                }
                if (v57 == v59)
                {
                  uint64_t v57 = v59;
                  break;
                }
              }
            }
            if (v56 == v58)
            {
              std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v520, v57, v59, (void **)v63, v64);
              float64_t v80 = v520.f64[1];
              uint64_t v81 = v521;
            }
            else
            {
              uint64_t v71 = *v56;
              uint64_t v70 = v56 + 1;
              std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v520, v57, (unsigned char *)(v71 + 4096), (void **)v63, v64);
              unint64_t v72 = *(void ***)&v520.f64[1];
              uint64_t v73 = (char *)v521;
              if (v70 != v58)
              {
                uint64_t v74 = **(unsigned char ***)&v520.f64[1];
                do
                {
                  uint64_t v75 = 0;
                  uint64_t v76 = *v70;
                  for (++v72; ; ++v72)
                  {
                    uint64_t v77 = v74 - v73 + 4096;
                    if ((4096 - 8 * v75) >> 3 >= v77 >> 3) {
                      uint64_t v78 = v77 >> 3;
                    }
                    else {
                      uint64_t v78 = (4096 - 8 * v75) >> 3;
                    }
                    if (v78) {
                      memmove(v73, (const void *)(v76 + 8 * v75), 8 * v78);
                    }
                    v75 += v78;
                    if (v75 == 512) {
                      break;
                    }
                    uint64_t v79 = (char *)*v72;
                    uint64_t v74 = v79;
                    uint64_t v73 = v79;
                  }
                  v73 += 8 * v78;
                  uint64_t v74 = *(v72 - 1);
                  if (v74 + 4096 == v73)
                  {
                    uint64_t v74 = *v72;
                    uint64_t v73 = (char *)*v72;
                  }
                  else
                  {
                    --v72;
                  }
                  ++v70;
                }
                while (v70 != v58);
              }
              std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v520, (unsigned char *)*v58, v59, v72, v73);
              float64_t v80 = v520.f64[1];
              uint64_t v81 = v521;
              uint64_t v6 = a5;
            }
            unint64_t v27 = v487;
            unint64_t v25 = v489;
            unint64_t v82 = &v504[8 * (v506 >> 9)];
            double v7 = a4;
            if (v505 == v504) {
              uint64_t v83 = 0;
            }
            else {
              uint64_t v83 = *(void *)v82 + 8 * (v506 & 0x1FF);
            }
            if (v81 == v83) {
              unint64_t v84 = 0;
            }
            else {
              unint64_t v84 = ((v81 - **(void **)&v80) >> 3)
            }
                  + ((*(void *)&v80 - (void)v82) << 6)
                  - ((v83 - *(void *)v82) >> 3);
            std::deque<unsigned long>::resize(&v503, v84);
            if (v507) {
              std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(a6, v487);
            }
            std::deque<unsigned long>::deque((uint64_t)&v498, *((void *)&v510 + 1) + *((void *)&v497 + 1));
            uint64_t v86 = (void *)(*((void *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
            if ((void)v496 == *((void *)&v495 + 1))
            {
              double v87 = 0;
              uint64_t v89 = 0;
              uint64_t v88 = (void *)(*((void *)&v495 + 1) + 8 * ((*((void *)&v497 + 1) + (void)v497) >> 9));
            }
            else
            {
              double v87 = (unint64_t *)(*v86 + 8 * (v497 & 0x1FF));
              uint64_t v88 = (void *)(*((void *)&v495 + 1) + 8 * ((*((void *)&v497 + 1) + (void)v497) >> 9));
              uint64_t v89 = (unint64_t *)(*v88 + 8 * ((*((void *)&v497 + 1) + v497) & 0x1FF));
            }
            uint64_t v90 = (char *)__p[1] + 8 * ((unint64_t)v510 >> 9);
            if ((void *)v509 == __p[1])
            {
              unint64_t v91 = 0;
              unint64_t v93 = 0;
              unint64_t v92 = (char *)__p[1] + 8 * ((*((void *)&v510 + 1) + (void)v510) >> 9);
            }
            else
            {
              unint64_t v91 = (unint64_t *)(*v90 + 8 * (v510 & 0x1FF));
              unint64_t v92 = (char *)__p[1] + 8 * ((*((void *)&v510 + 1) + (void)v510) >> 9);
              unint64_t v93 = (unint64_t *)(*v92 + 8 * ((WORD4(v510) + (_WORD)v510) & 0x1FF));
            }
            if (v500 == v499) {
              uint64_t v94 = 0;
            }
            else {
              uint64_t v94 = (unint64_t *)(*(void *)&v499[v501 >> 9] + 8 * (v501 & 0x1FF));
            }
            std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(&v520, v86, v87, (uint64_t)v88, v89, v90, v91, v85, (uint64_t)v92, v93, &v499[v501 >> 9], v94);
            uint64_t v95 = (char *)&v499[v501 >> 9];
            if (v500 == v499) {
              uint64_t v96 = 0;
            }
            else {
              uint64_t v96 = *(void *)v95 + 8 * (v501 & 0x1FF);
            }
            if (v524 == (void **)v96) {
              unint64_t v97 = 0;
            }
            else {
              unint64_t v97 = (((uint64_t)v524 - *(void *)v523) >> 3) + ((v523 - v95) << 6) - ((v96 - *(void *)v95) >> 3);
            }
            std::deque<unsigned long>::resize(&v498, v97);
            if (!v502) {
              std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(&v492, v487);
            }
            std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v498);
            std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v503);
            std::deque<std::pair<int,int>>::~deque[abi:ne180100](__p);
            std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v517);
            uint64_t v26 = *v489;
            goto LABEL_114;
          }
        }
      }
      uint64_t v53 = 0;
      uint64_t v55 = 0;
      uint64_t v54 = &v48[8 * ((unint64_t)(v47 + v45) >> 9)];
      goto LABEL_47;
    }
LABEL_117:
    uint64_t v99 = *(void **)(v8 + 968);
    unint64_t v100 = v99[5];
    if (*(void *)(v8 + 984) != 1)
    {
      if (v100 > a2)
      {
        unint64_t v114 = v99[4] + a2;
        uint64_t v115 = *(void *)(v99[1] + 8 * (v114 / 0x14));
        unint64_t v116 = v114 % 0x14;
        uint64_t v117 = v115 + 200 * v116;
        double v120 = *(void **)(v117 + 184);
        uint64_t v118 = (void *)(v117 + 184);
        uint64_t v119 = v120;
        if (!v120) {
          goto LABEL_196;
        }
        double v121 = v118;
        do
        {
          unint64_t v122 = v119[4];
          BOOL v123 = v122 >= 3;
          if (v122 >= 3) {
            uint64_t v124 = v119;
          }
          else {
            uint64_t v124 = v119 + 1;
          }
          if (v123) {
            double v121 = v119;
          }
          uint64_t v119 = (void *)*v124;
        }
        while (*v124);
        if (v121 == v118 || v121[4] > 3uLL || (unint64_t v125 = v121[5], v125 > 8)) {
LABEL_196:
        }
          double v126 = 0.0;
        else {
          double v126 = dbl_1DD8CEC20[v125];
        }
        unint64_t v168 = *(void *)(*(void *)(v115 + 200 * v116 + 136)
                         + 8 * ((*(void *)(v115 + 200 * v116 + 160) + 4) / 0x55uLL))
             + 48 * ((*(void *)(v115 + 200 * v116 + 160) + 4) % 0x55uLL);
        uint64_t v169 = *(void *)(*(void *)(v115 + 200 * v116 + 88)
                         + (((unint64_t)(*(void *)(v115 + 200 * v116 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
             + 16 * (*(unsigned char *)(v115 + 200 * v116 + 112) + 3);
        *(void *)&float64_t v170 = *(void *)&v126
                         * *(unsigned __int16 *)(*(void *)(*(void *)(v168 + 8)
                                                           + (((*(void *)(v168 + 32) + (unint64_t)a3) >> 7) & 0x1FFFFFFFFFFFFF8))
                                               + 4 * ((*(void *)(v168 + 32) + a3) & 0x3FFLL));
        *(void *)&v520.f64[0] = v169;
        v520.f64[1] = v170;
        uint64_t v521 = *(void *)&v126;
        unint64_t v522 = 1;
        std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v517, (uint64_t)&v520);
        uint64_t v171 = v517[0];
        if ((void)v493 == *((void *)&v492 + 1)
          || (double v172 = (void *)(*((void *)&v492 + 1) + 8 * ((unint64_t)v494 >> 10)),
              unint64_t v173 = (unsigned __int16 *)(*v172 + 4 * (v494 & 0x3FF)),
              uint64_t v174 = *(void *)(*((void *)&v492 + 1)
                               + (((*((void *)&v494 + 1) + (void)v494) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((*((void *)&v494 + 1) + v494) & 0x3FF),
              v173 == (unsigned __int16 *)v174))
        {
          char v144 = 1;
        }
        else
        {
          double v175 = *((double *)v517[0] + 1);
          double v176 = sqrt((*(double *)v517[0] - *((double *)v517[0] + 6)) * (*(double *)v517[0] - *((double *)v517[0] + 6))+ (v175 - *((double *)v517[0] + 7)) * (v175 - *((double *)v517[0] + 7)));
          double v177 = sqrt((*((double *)v517[0] + 2) - *(double *)v517[0]) * (*((double *)v517[0] + 2) - *(double *)v517[0])+ (*((double *)v517[0] + 3) - v175) * (*((double *)v517[0] + 3) - v175));
          double v178 = fabs(v176);
          double v179 = fabs(v177);
          char v144 = 1;
          do
          {
            double v180 = *(void **)(v8 + 968);
            unint64_t v181 = *v173;
            if (v180[5] <= v181) {
              std::__throw_out_of_range[abi:ne180100]("deque");
            }
            unint64_t v182 = v180[4] + v181;
            uint64_t v183 = *(void *)(v180[1] + 8 * (v182 / 0x14));
            unint64_t v184 = v182 % 0x14;
            uint64_t v185 = v183 + 200 * v184;
            uint64_t v188 = *(void **)(v185 + 184);
            unint64_t v186 = (void *)(v185 + 184);
            uint64_t v187 = v188;
            if (!v188) {
              goto LABEL_214;
            }
            uint64_t v189 = v186;
            do
            {
              unint64_t v190 = v187[4];
              BOOL v191 = v190 >= 3;
              if (v190 >= 3) {
                BOOL v192 = v187;
              }
              else {
                BOOL v192 = v187 + 1;
              }
              if (v191) {
                uint64_t v189 = v187;
              }
              uint64_t v187 = (void *)*v192;
            }
            while (*v192);
            if (v189 == v186 || v189[4] > 3uLL || (unint64_t v193 = v189[5], v193 > 8)) {
LABEL_214:
            }
              double v194 = 0.0;
            else {
              double v194 = dbl_1DD8CEC20[v193];
            }
            unint64_t v195 = *(void *)(*(void *)(v183 + 200 * v184 + 136)
                             + 8 * ((*(void *)(v183 + 200 * v184 + 160) + 4) / 0x55uLL))
                 + 48 * ((*(void *)(v183 + 200 * v184 + 160) + 4) % 0x55uLL);
            unint64_t v196 = *(void *)(v195 + 32) + v173[1];
            uint64_t v197 = *(void *)(*(void *)(v183 + 200 * v184 + 88)
                             + (((unint64_t)(*(void *)(v183 + 200 * v184 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (*(unsigned char *)(v183 + 200 * v184 + 112) + 3);
            *(void *)&float64_t v198 = *(void *)&v194
                             * *(unsigned __int16 *)(*(void *)(*(void *)(v195 + 8)
                                                               + ((v196 >> 7) & 0x1FFFFFFFFFFFFF8))
                                                   + 4 * (v196 & 0x3FF));
            *(void *)&v520.f64[0] = v197;
            v520.f64[1] = v198;
            uint64_t v521 = *(void *)&v194;
            unint64_t v522 = 1;
            std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(__p, (uint64_t)&v520);
            double v199 = *(double *)__p[0];
            double v200 = *((double *)__p[0] + 1);
            double v201 = -1.0;
            if (v178 > 2.22044605e-16) {
              double v201 = sqrt((v200 - *((double *)__p[0] + 7)) * (v200 - *((double *)__p[0] + 7))+ (v199 - *((double *)__p[0] + 6)) * (v199 - *((double *)__p[0] + 6)))/ v176;
            }
            if (v201 < *v478 || v201 > *v477) {
              goto LABEL_223;
            }
            double v202 = -1.0;
            if (v179 > 2.22044605e-16) {
              double v202 = sqrt((*((double *)__p[0] + 3) - v200) * (*((double *)__p[0] + 3) - v200)+ (*((double *)__p[0] + 2) - v199) * (*((double *)__p[0] + 2) - v199))/ v177;
            }
            if (v202 >= *v475 && v202 <= *v474)
            {
              int v203 = 1;
            }
            else
            {
LABEL_223:
              int v203 = 0;
              char v144 = 0;
            }
            if (__p[1] != __p[0]) {
              __p[1] = (char *)__p[1] + (((char *)__p[0] - (char *)__p[1] + 7) & 0xFFFFFFFFFFFFFFF8);
            }
            operator delete(__p[0]);
            if (!v203) {
              break;
            }
            v173 += 2;
            if ((unsigned __int16 *)((char *)v173 - *v172) == (unsigned __int16 *)4096)
            {
              unint64_t v204 = (unsigned __int16 *)v172[1];
              ++v172;
              unint64_t v173 = v204;
            }
          }
          while (v173 != (unsigned __int16 *)v174);
          uint64_t v171 = v517[0];
          if (!v517[0]) {
            goto LABEL_241;
          }
        }
        if (v517[1] != v171) {
          v517[1] = (char *)v517[1] + ((v171 - (char *)v517[1] + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        goto LABEL_240;
      }
LABEL_541:
      std::__throw_out_of_range[abi:ne180100]("deque");
    }
    if (v100 <= a2) {
      goto LABEL_541;
    }
    unint64_t v101 = v99[4] + a2;
    uint64_t v102 = *(void *)(v99[1] + 8 * (v101 / 0x14));
    unint64_t v103 = v101 % 0x14;
    uint64_t v104 = v102 + 200 * v103;
    double v107 = *(void **)(v104 + 184);
    unint64_t v105 = (void *)(v104 + 184);
    uint64_t v106 = v107;
    if (!v107) {
      goto LABEL_146;
    }
    uint64_t v108 = v105;
    do
    {
      unint64_t v109 = v106[4];
      BOOL v110 = v109 >= 3;
      if (v109 >= 3) {
        unint64_t v111 = v106;
      }
      else {
        unint64_t v111 = v106 + 1;
      }
      if (v110) {
        uint64_t v108 = v106;
      }
      uint64_t v106 = (void *)*v111;
    }
    while (*v111);
    if (v108 == v105 || v108[4] > 3uLL || (unint64_t v112 = v108[5], v112 > 8)) {
LABEL_146:
    }
      double v113 = 0.0;
    else {
      double v113 = dbl_1DD8CEC20[v112];
    }
    unint64_t v127 = *(void *)(*(void *)(v102 + 200 * v103 + 136)
                     + 8 * ((*(void *)(v102 + 200 * v103 + 160) + 4) / 0x55uLL))
         + 48 * ((*(void *)(v102 + 200 * v103 + 160) + 4) % 0x55uLL);
    uint64_t v128 = *(void *)(*(void *)(v102 + 200 * v103 + 88)
                     + (((unint64_t)(*(void *)(v102 + 200 * v103 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*(unsigned char *)(v102 + 200 * v103 + 112) + 3);
    *(void *)&float64_t v129 = *(void *)&v113
                     * *(unsigned __int16 *)(*(void *)(*(void *)(v127 + 8)
                                                       + (((*(void *)(v127 + 32) + (unint64_t)a3) >> 7) & 0x1FFFFFFFFFFFFF8))
                                           + 4 * ((*(void *)(v127 + 32) + a3) & 0x3FFLL));
    *(void *)&v520.f64[0] = v128;
    v520.f64[1] = v129;
    uint64_t v521 = *(void *)&v113;
    unint64_t v522 = 1;
    std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v517, (uint64_t)&v520);
    uint64_t v130 = v517[0];
    double v131 = nms::minMaxEdgeOfQuad<double>((uint64_t)v517[0]);
    if (*((void *)&v494 + 1) == 1) {
      uint64_t v133 = v473;
    }
    else {
      uint64_t v133 = v478;
    }
    if (*((void *)&v494 + 1) == 1) {
      uint64_t v134 = v472;
    }
    else {
      uint64_t v134 = v477;
    }
    uint64_t v135 = v471;
    if (*((void *)&v494 + 1) != 1) {
      uint64_t v135 = v475;
    }
    uint64_t v136 = v474;
    if (*((void *)&v494 + 1) == 1) {
      uint64_t v136 = v470;
    }
    if ((void)v493 == *((void *)&v492 + 1)
      || (uint64_t v137 = (void *)(*((void *)&v492 + 1) + 8 * ((unint64_t)v494 >> 10)),
          unint64_t v138 = (unsigned __int16 *)(*v137 + 4 * (v494 & 0x3FF)),
          uint64_t v139 = *(void *)(*((void *)&v492 + 1)
                           + ((((void)v494 + *((void *)&v494 + 1)) >> 7) & 0x1FFFFFFFFFFFFF8))
               + 4 * ((v494 + *((void *)&v494 + 1)) & 0x3FF),
          v138 == (unsigned __int16 *)v139))
    {
      char v144 = 1;
      if (v130) {
        goto LABEL_233;
      }
      goto LABEL_241;
    }
    double v140 = v131 * *v133;
    double v141 = v131 * *v134;
    double v142 = v132 * *v135;
    double v143 = v132 * *v136;
    char v144 = 1;
    do
    {
      unint64_t v145 = *v138;
      uint64_t v146 = *(void **)(v8 + 968);
      if (v146[5] <= v145) {
        std::__throw_out_of_range[abi:ne180100]("deque");
      }
      unint64_t v147 = v146[4] + v145;
      uint64_t v148 = *(void *)(v146[1] + 8 * (v147 / 0x14));
      unint64_t v149 = v147 % 0x14;
      double v150 = (void *)(v148 + 200 * (v147 % 0x14));
      uint64_t v151 = (void *)v150[23];
      if (!v151) {
        goto LABEL_174;
      }
      unint64_t v152 = v150 + 23;
      do
      {
        unint64_t v153 = v151[4];
        BOOL v154 = v153 >= 3;
        if (v153 >= 3) {
          uint64_t v155 = v151;
        }
        else {
          uint64_t v155 = v151 + 1;
        }
        if (v154) {
          unint64_t v152 = v151;
        }
        uint64_t v151 = (void *)*v155;
      }
      while (*v155);
      if (v152 == v150 + 23 || v152[4] > 3uLL || (unint64_t v156 = v152[5], v156 > 8)) {
LABEL_174:
      }
        double v157 = 0.0;
      else {
        double v157 = dbl_1DD8CEC20[v156];
      }
      unint64_t v158 = *(void *)(v150[17] + 8 * ((v150[20] + 4) / 0x55uLL)) + 48 * ((v150[20] + 4) % 0x55uLL);
      unint64_t v159 = *(void *)(v158 + 32) + v138[1];
      uint64_t v160 = *(void *)(*(void *)(v148 + 200 * v149 + 88)
                       + (((unint64_t)(*(void *)(v148 + 200 * v149 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
           + 16 * (*(unsigned char *)(v148 + 200 * v149 + 112) + 3);
      *(void *)&float64_t v161 = *(void *)&v157
                       * *(unsigned __int16 *)(*(void *)(*(void *)(v158 + 8) + ((v159 >> 7) & 0x1FFFFFFFFFFFFF8))
                                             + 4 * (v159 & 0x3FF));
      *(void *)&v520.f64[0] = v160;
      v520.f64[1] = v161;
      uint64_t v521 = *(void *)&v157;
      unint64_t v522 = 1;
      std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(__p, (uint64_t)&v520);
      char v162 = __p[0];
      double v163 = nms::minMaxEdgeOfQuad<double>((uint64_t)__p[0]);
      if (v163 < v140)
      {
        char v144 = 0;
        BOOL v166 = 0;
        if (!v162) {
          goto LABEL_190;
        }
LABEL_187:
        if (__p[1] != v162) {
          __p[1] = (char *)__p[1] + ((v162 - (char *)__p[1] + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        operator delete(v162);
        goto LABEL_190;
      }
      BOOL v165 = v164 >= v142;
      if (v164 > v143) {
        BOOL v165 = 0;
      }
      if (v163 <= v141) {
        v144 &= v165;
      }
      else {
        char v144 = 0;
      }
      BOOL v166 = v163 <= v141 && v165;
      if (v162) {
        goto LABEL_187;
      }
LABEL_190:
      if (!v166) {
        break;
      }
      v138 += 2;
      if ((unsigned __int16 *)((char *)v138 - *v137) == (unsigned __int16 *)4096)
      {
        unint64_t v167 = (unsigned __int16 *)v137[1];
        ++v137;
        unint64_t v138 = v167;
      }
    }
    while (v138 != (unsigned __int16 *)v139);
    uint64_t v130 = v517[0];
    if (!v517[0]) {
      goto LABEL_241;
    }
LABEL_233:
    if (v517[1] != v130) {
      v517[1] = (char *)v517[1] + ((v130 - (char *)v517[1] + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    uint64_t v171 = v130;
LABEL_240:
    operator delete(v171);
LABEL_241:
    int v205 = 0;
    if (a2 == 1 && *(unsigned char *)(v8 + 1153)) {
      int v205 = (v6[5] == 0) & v144;
    }
    if (*((void *)&v494 + 1) < 2uLL)
    {
      if (*((void *)&v494 + 1) != 1) {
        goto LABEL_516;
      }
      uint64_t v227 = *(void **)(v8 + 968);
      unint64_t v228 = v227[5];
      if (v228 <= a2) {
        goto LABEL_542;
      }
      uint64_t v229 = v227[4];
      uint64_t v230 = v227[1];
      uint64_t v231 = *(void *)(v230 + 8 * ((v229 + (unint64_t)a2) / 0x14));
      unint64_t v232 = (v229 + (unint64_t)a2) % 0x14;
      uint64_t v233 = v231 + 200 * v232;
      double v236 = *(void **)(v233 + 184);
      unint64_t v234 = (void *)(v233 + 184);
      unint64_t v235 = v236;
      if (!v236) {
        goto LABEL_346;
      }
      unint64_t v237 = v235;
      do
      {
        uint64_t v238 = v237;
        unint64_t v237 = (void *)*v237;
      }
      while (v237);
      if (v238 == v234 || v238[4] || (unint64_t v239 = v238[5] - 5, v239 > 3))
      {
LABEL_346:
        uint64_t v240 = -1;
        if (!v235) {
          goto LABEL_352;
        }
      }
      else
      {
        uint64_t v240 = qword_1DD8CEC00[v239];
        if (!v235) {
          goto LABEL_352;
        }
      }
      do
      {
        double v300 = v235;
        unint64_t v235 = (void *)*v235;
      }
      while (v235);
      if (v300 != v234 && !v300[4])
      {
        unint64_t v301 = v300[5];
        if (v301 <= 8)
        {
          double v302 = dbl_1DD8CEC20[v301];
          goto LABEL_353;
        }
      }
LABEL_352:
      double v302 = 0.0;
LABEL_353:
      unint64_t v303 = v240 + *(void *)&v302 * a3;
      double v305 = (uint64_t *)(*(void *)(*(void *)(v231 + 200 * v232 + 88)
                                   + ((*(void *)(v231 + 200 * v232 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(void *)(v231 + 200 * v232 + 112));
      uint64_t v304 = *v305;
      double v306 = 0.0;
      if (v303 < (v305[1] - *v305) >> 3) {
        double v306 = *(double *)(v304 + 8 * v303);
      }
      uint64_t v307 = *(void *)(*((void *)&v492 + 1) + (((unint64_t)v494 >> 7) & 0x1FFFFFFFFFFFFF8));
      uint64_t v308 = v494 & 0x3FF;
      unint64_t v309 = (unsigned __int16 *)(v307 + 4 * v308);
      unint64_t v310 = *(void *)(v8 + 1144);
      if (v310 < 2) {
        goto LABEL_361;
      }
      unint64_t v311 = *v309;
      if (v228 <= v311) {
        goto LABEL_542;
      }
      uint64_t v312 = v231 + 200 * v232;
      unint64_t v313 = *(void *)(v230 + 8 * ((v229 + v311) / 0x14)) + 200 * ((v229 + v311) % 0x14);
      unint64_t v314 = *(void *)(v313 + 160);
      uint64_t v315 = *(void *)(*(void *)(v313 + 136) + 8 * (v314 / 0x55));
      unint64_t v316 = v314 % 0x55;
      unint64_t v317 = *(void *)(*(void *)(v312 + 136) + 8 * (*(void *)(v312 + 160) / 0x55uLL))
           + 48 * (*(void *)(v312 + 160) % 0x55uLL);
      uint64_t v318 = (unsigned __int16 *)(*(void *)(*(void *)(v317 + 8)
                                            + (((*(void *)(v317 + 32) + (unint64_t)a3) >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * ((*(void *)(v317 + 32) + a3) & 0x3FFLL));
      unint64_t v319 = v318[1] - (unint64_t)*v318 + 1;
      uint64_t v320 = *(unsigned __int16 *)(v307 + 4 * v308 + 2);
      uint64_t v321 = (unsigned __int16 *)(*(void *)(*(void *)(v315 + 48 * v316 + 8)
                                            + (((unint64_t)(*(void *)(v315 + 48 * v316 + 32) + v320) >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * ((*(void *)(v315 + 48 * v316 + 32) + v320) & 0x3FF));
      unint64_t v322 = v321[1] - (unint64_t)*v321;
      unint64_t v323 = v322 + 1;
      unint64_t v324 = v319 <= v322 + 1 ? v322 + 1 : v319;
      if (v324 <= v310)
      {
        uint64_t v6 = a5;
        if (v319 < v323) {
          goto LABEL_402;
        }
        int v325 = v319 > v323;
      }
      else
      {
LABEL_361:
        int v325 = 0;
      }
      BOOL isQuadSizeEqualOrLarger = 0;
      if ((v325 & 1) == 0 && *(unsigned char *)(v8 + 1152))
      {
        BOOL isQuadSizeEqualOrLarger = nms::PyramidNMS<unsigned short,double,unsigned char>::isQuadSizeEqualOrLarger(v227, a2, a3, *v309, *(unsigned __int16 *)(v307 + 4 * v308 + 2));
        int v325 = !isQuadSizeEqualOrLarger;
      }
      if ((v205 | v325 | isQuadSizeEqualOrLarger))
      {
        uint64_t v6 = a5;
        if ((v325 & 1) == 0)
        {
          LODWORD(v311) = *v309;
          LODWORD(v320) = *(unsigned __int16 *)(v307 + 4 * v308 + 2);
LABEL_402:
          unint64_t v353 = v7[4];
          uint64_t v354 = v7[1];
          uint64_t v355 = v7[2];
          uint64_t v356 = v354 + 8 * (v353 >> 10);
          if (v355 == v354) {
            uint64_t v357 = 0;
          }
          else {
            uint64_t v357 = *(void *)v356 + 4 * (v7[4] & 0x3FFLL);
          }
          unint64_t v358 = v7[5] + v353;
          unint64_t v359 = v358 >> 10;
          uint64_t v360 = v358 & 0x3FF;
          while (1)
          {
            int v361 = (unsigned __int16 *)v357;
            do
            {
              if (v355 == v354) {
                uint64_t v362 = 0;
              }
              else {
                uint64_t v362 = *(void *)(v354 + 8 * v359) + 4 * v360;
              }
              if (v361 == (unsigned __int16 *)v362) {
                goto LABEL_516;
              }
              if (*v361 == v311 && v361[1] == v320)
              {
                std::deque<std::pair<unsigned short,unsigned short>>::erase((uint64_t)v7, (char *)v356, v357);
                goto LABEL_516;
              }
              v361 += 2;
              v357 += 4;
            }
            while (*(void *)v356 + 4096 != v357);
            uint64_t v363 = *(void *)(v356 + 8);
            v356 += 8;
            uint64_t v357 = v363;
          }
        }
LABEL_398:
        uint64_t v347 = v6[5];
        if (v347)
        {
          std::deque<unsigned long>::deque((uint64_t)v517, *((void *)&v497 + 1) + v347);
          float64x2_t v349 = (void *)(*((void *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
          if ((void)v496 == *((void *)&v495 + 1))
          {
            uint64_t v350 = 0;
            v352 = 0;
            uint64_t v351 = (void *)(*((void *)&v495 + 1) + 8 * ((*((void *)&v497 + 1) + (void)v497) >> 9));
          }
          else
          {
            uint64_t v350 = (unint64_t *)(*v349 + 8 * (v497 & 0x1FF));
            uint64_t v351 = (void *)(*((void *)&v495 + 1) + 8 * ((*((void *)&v497 + 1) + (void)v497) >> 9));
            v352 = (unint64_t *)(*v351 + 8 * ((*((void *)&v497 + 1) + v497) & 0x1FF));
          }
          uint64_t v6 = a5;
          unint64_t v453 = a5[4];
          uint64_t v454 = a5[1];
          double v455 = (void *)(v454 + 8 * (v453 >> 9));
          if (a5[2] == v454)
          {
            uint64_t v456 = 0;
            double v459 = 0;
            unint64_t v458 = (void *)(v454 + 8 * ((a5[5] + v453) >> 9));
          }
          else
          {
            uint64_t v456 = (unint64_t *)(*v455 + 8 * (a5[4] & 0x1FFLL));
            unint64_t v457 = a5[5] + v453;
            unint64_t v458 = (void *)(v454 + 8 * (v457 >> 9));
            double v459 = (unint64_t *)(*v458 + 8 * (v457 & 0x1FF));
          }
          if ((void *)v518 == v517[1]) {
            uint64_t v460 = 0;
          }
          else {
            uint64_t v460 = (unint64_t *)(*((void *)v517[1] + ((unint64_t)v519 >> 9)) + 8 * (v519 & 0x1FF));
          }
          std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(&v520, v349, v350, (uint64_t)v351, v352, v455, v456, v348, (uint64_t)v458, v459, (void *)v517[1] + ((unint64_t)v519 >> 9), v460);
          unint64_t v461 = (char *)v517[1] + 8 * ((unint64_t)v519 >> 9);
          if ((void *)v518 == v517[1]) {
            uint64_t v462 = 0;
          }
          else {
            uint64_t v462 = *(void *)v461 + 8 * (v519 & 0x1FF);
          }
          if (v524 == (void **)v462) {
            unint64_t v463 = 0;
          }
          else {
            unint64_t v463 = (((uint64_t)v524 - *(void *)v523) >> 3) + ((v523 - v461) << 6) - ((v462 - *(void *)v461) >> 3);
          }
          std::deque<unsigned long>::resize(v517, v463);
          if (*((void *)&v519 + 1))
          {
            char v464 = 0;
            uint64_t v465 = a2;
            uint64_t v466 = a3;
            *(unsigned char *)(*(void *)(*(void *)(*(void *)(v8 + 64)
                                             + (((*(void *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(v8 + 88) + a2))
                     + a3) = 0;
            uint64_t v467 = *(void *)(*(void *)(*(void *)(v8 + 112)
                                         + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(v8 + 136) + a2));
            char v468 = 1;
          }
          else
          {
            uint64_t v467 = *(void *)(*(void *)(*(void *)(v8 + 112)
                                         + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(v8 + 136) + a2));
            if (!*(unsigned char *)(v467 + a3)
              || (uint64_t v469 = *(void *)(*(void *)(*(void *)(v8 + 64)
                                               + (((*(void *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(unsigned char *)(v8 + 88) + a2)),
                  *(unsigned char *)(v469 + a3)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)v8, a2, a3);
              uint64_t v469 = *(void *)(*(void *)(*(void *)(v8 + 64)
                                           + (((*(void *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(v8 + 88) + a2));
              uint64_t v467 = *(void *)(*(void *)(*(void *)(v8 + 112)
                                           + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(v8 + 136) + a2));
            }
            char v468 = 0;
            uint64_t v465 = a2;
            uint64_t v466 = a3;
            *(unsigned char *)(v469 + a3) = 0;
            char v464 = 1;
          }
          *(unsigned char *)(v467 + v466) = v464;
          *(unsigned char *)(*(void *)(*(void *)(*(void *)(v8 + 160)
                                           + (((unint64_t)(*(void *)(v8 + 184) + v465) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(v8 + 184) + v465))
                   + v466) = v468;
          std::deque<std::pair<int,int>>::~deque[abi:ne180100](v517);
        }
        else
        {
          uint64_t v364 = a2;
          uint64_t v365 = *(void *)(*(void *)(*(void *)(v8 + 112)
                                       + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (*(unsigned char *)(v8 + 136) + a2));
          if (!*(unsigned char *)(v365 + a3)
            || (uint64_t v366 = *(void *)(*(void *)(*(void *)(v8 + 64)
                                             + (((*(void *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(v8 + 88) + a2)),
                *(unsigned char *)(v366 + a3)))
          {
            nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)v8, a2, a3);
            uint64_t v364 = a2;
            uint64_t v366 = *(void *)(*(void *)(*(void *)(v8 + 64)
                                         + (((*(void *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(v8 + 88) + a2));
            uint64_t v365 = *(void *)(*(void *)(*(void *)(v8 + 112)
                                         + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(v8 + 136) + a2));
            uint64_t v6 = a5;
          }
          *(unsigned char *)(v366 + a3) = 0;
          *(unsigned char *)(v365 + a3) = 1;
          *(unsigned char *)(*(void *)(*(void *)(*(void *)(v8 + 160)
                                           + (((unint64_t)(*(void *)(v8 + 184) + v364) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(v8 + 184) + v364))
                   + a3) = 0;
        }
        goto LABEL_516;
      }
      unint64_t v328 = *(void **)(v8 + 968);
      unint64_t v311 = *v309;
      if (v328[5] > v311)
      {
        unint64_t v329 = v328[4] + v311;
        uint64_t v330 = *(void *)(v328[1] + 8 * (v329 / 0x14));
        unint64_t v331 = v329 % 0x14;
        uint64_t v332 = v330 + 200 * v331;
        v335 = *(void **)(v332 + 184);
        unint64_t v333 = (void *)(v332 + 184);
        size_t v334 = v335;
        if (v335)
        {
          do
          {
            uint64_t v336 = v334;
            size_t v334 = (void *)*v334;
          }
          while (v334);
          uint64_t v6 = a5;
          if (v336 == v333 || v336[4] || (unint64_t v337 = v336[5], v337 > 8)) {
            double v338 = 0.0;
          }
          else {
            double v338 = dbl_1DD8CEC20[v337];
          }
        }
        else
        {
          double v338 = 0.0;
          uint64_t v6 = a5;
        }
        double v342 = (void *)(*(void *)(*(void *)(v330 + 200 * v331 + 88)
                                    + ((*(void *)(v330 + 200 * v331 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(void *)(v330 + 200 * v331 + 112));
        unint64_t v343 = v240 + *(void *)&v338 * *(unsigned __int16 *)(v307 + 4 * v308 + 2);
        float64_t v345 = v342;
        uint64_t v344 = *v342;
        double v346 = 0.0;
        if (v343 < (v345[1] - v344) >> 3) {
          double v346 = *(double *)(v344 + 8 * v343);
        }
        if (v346 <= v306)
        {
          LODWORD(v320) = *(unsigned __int16 *)(v307 + 4 * v308 + 2);
          goto LABEL_402;
        }
        goto LABEL_398;
      }
LABEL_542:
      std::__throw_out_of_range[abi:ne180100]("deque");
    }
    char v206 = *(void **)(v8 + 968);
    uint64_t v207 = v206[4];
    unint64_t v208 = v206[5];
    uint64_t v209 = v206[1];
    unint64_t v210 = *(void *)(v209 + 8 * ((v208 + v207 - 1) / 0x14)) + 200 * ((v208 + v207 - 1) % 0x14);
    char v213 = *(void **)(v210 + 184);
    unint64_t v211 = v210 + 184;
    v212 = v213;
    if (!v213) {
      goto LABEL_249;
    }
    do
    {
      unint64_t v214 = v212;
      v212 = (void *)*v212;
    }
    while (v212);
    if (v214 == (void *)v211 || v214[4])
    {
LABEL_249:
      unint64_t v215 = 0;
      unint64_t v216 = 9;
    }
    else
    {
      unint64_t v216 = v214[5];
      if (v216 > 8) {
        unint64_t v215 = 0;
      }
      else {
        unint64_t v215 = *(void *)&dbl_1DD8CEC20[v216];
      }
    }
    if (v208 <= a2) {
      goto LABEL_542;
    }
    unint64_t v217 = v207 + a2;
    uint64_t v218 = *(void *)(v209 + 8 * (v217 / 0x14));
    uint64_t v219 = v218 + 200 * (v217 % 0x14);
    double v222 = *(void **)(v219 + 184);
    double v220 = (void *)(v219 + 184);
    double v221 = v222;
    if (!v222) {
      goto LABEL_269;
    }
    unint64_t v223 = v221;
    do
    {
      uint64_t v224 = v223;
      unint64_t v223 = (void *)*v223;
    }
    while (v223);
    if (v224 == v220 || v224[4] || (unint64_t v225 = v224[5] - 5, v225 > 3))
    {
LABEL_269:
      uint64_t v226 = -1;
      if (!v221) {
        goto LABEL_275;
      }
    }
    else
    {
      uint64_t v226 = qword_1DD8CEC00[v225];
      if (!v221) {
        goto LABEL_275;
      }
    }
    do
    {
      v241 = v221;
      double v221 = (void *)*v221;
    }
    while (v221);
    if (v241 == v220 || v241[4] || (unint64_t v242 = v241[5], v242 > 8)) {
LABEL_275:
    }
      double v243 = 0.0;
    else {
      double v243 = dbl_1DD8CEC20[v242];
    }
    uint64_t v244 = (void *)(*(void *)(*(void *)(v218 + 200 * (v217 % 0x14) + 88)
                                + ((*(void *)(v218 + 200 * (v217 % 0x14) + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * *(void *)(v218 + 200 * (v217 % 0x14) + 112));
    unint64_t v245 = v226 + *(void *)&v243 * a3;
    int64_t v247 = v244;
    uint64_t v246 = *v244;
    double v248 = 0.0;
    if (v245 < (v247[1] - v246) >> 3) {
      double v248 = *(double *)(v246 + 8 * v245);
    }
    unint64_t v249 = v215 * *((void *)&v494 + 1);
    uint64_t v511 = 0;
    uint64_t v512 = 0;
    if (v215 * *((void *)&v494 + 1))
    {
      if (v249 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      size_t v250 = 8 * v249;
      uint64_t v251 = (char *)operator new(8 * v249);
      uint64_t v511 = v251;
      bzero(v251, v250);
      uint64_t v512 = &v251[v250];
    }
    uint64_t v252 = 0;
    while (2)
    {
      uint64_t v253 = *(void **)(v8 + 968);
      uint64_t v254 = *(void *)(*((void *)&v492 + 1) + (((unint64_t)(v494 + v252) >> 7) & 0x1FFFFFFFFFFFFF8));
      uint64_t v255 = (v494 + v252) & 0x3FF;
      unint64_t v256 = *(unsigned __int16 *)(v254 + 4 * v255);
      if (v253[5] <= v256) {
        std::__throw_out_of_range[abi:ne180100]("deque");
      }
      unint64_t v257 = v253[4] + v256;
      uint64_t v258 = *(void *)(v253[1] + 8 * (v257 / 0x14));
      unint64_t v259 = v257 % 0x14;
      uint64_t v260 = v258 + 200 * v259;
      v263 = *(void **)(v260 + 184);
      unint64_t v261 = (void *)(v260 + 184);
      double v262 = v263;
      if (!v263) {
        goto LABEL_289;
      }
      do
      {
        unint64_t v264 = v262;
        double v262 = (void *)*v262;
      }
      while (v262);
      if (v264 == v261 || v264[4] || (unint64_t v265 = v264[5], v265 > 8)) {
LABEL_289:
      }
        double v266 = 0.0;
      else {
        double v266 = dbl_1DD8CEC20[v265];
      }
      uint64_t v267 = *(unsigned __int16 *)(v254 + 4 * v255 + 2);
      *(void *)&v520.f64[0] = *(void *)(*(void *)(v258 + 200 * v259 + 88)
                                          + ((*(void *)(v258 + 200 * v259 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * *(void *)(v258 + 200 * v259 + 112);
      *(void *)&v520.f64[1] = *(void *)&v266 * v267;
      uint64_t v521 = *(void *)&v266;
      unint64_t v522 = 1;
      std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v517, (uint64_t)&v520);
      unint64_t v268 = v517[0];
      double v269 = v517[1];
      if (v517[1] == v517[0])
      {
        if (v517[1]) {
          goto LABEL_297;
        }
      }
      else
      {
        unint64_t v270 = (char *)v511 + 8 * v252 * v215;
        unint64_t v271 = ((char *)v517[1] - (char *)v517[0]) >> 3;
        if (v271 <= 1) {
          unint64_t v271 = 1;
        }
        BOOL v272 = (uint64_t *)v517[0];
        do
        {
          uint64_t v273 = *v272++;
          *v270++ = v273;
          --v271;
        }
        while (v271);
        v517[1] = &v269[(v268 - v269 + 7) & 0xFFFFFFFFFFFFFFF8];
LABEL_297:
        operator delete(v268);
      }
      if ((unint64_t)++v252 < *((void *)&v494 + 1)) {
        continue;
      }
      break;
    }
    if ((v205 & 1) == 0)
    {
      uint64_t v6 = a5;
      if (nms::PyramidNMS<unsigned short,double,unsigned char>::computeAggregatedScore(v8, &v492) > v248)
      {
        uint64_t v294 = a5[5];
        if (v294)
        {
          std::deque<unsigned long>::deque((uint64_t)v517, *((void *)&v497 + 1) + v294);
          double v296 = (void *)(*((void *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
          if ((void)v496 == *((void *)&v495 + 1))
          {
            unint64_t v297 = 0;
            double v299 = 0;
            uint64_t v298 = (void *)(*((void *)&v495 + 1) + 8 * ((*((void *)&v497 + 1) + (void)v497) >> 9));
          }
          else
          {
            unint64_t v297 = (unint64_t *)(*v296 + 8 * (v497 & 0x1FF));
            uint64_t v298 = (void *)(*((void *)&v495 + 1) + 8 * ((*((void *)&v497 + 1) + (void)v497) >> 9));
            double v299 = (unint64_t *)(*v298 + 8 * ((*((void *)&v497 + 1) + v497) & 0x1FF));
          }
          unint64_t v436 = a5[4];
          uint64_t v437 = a5[1];
          uint64_t v438 = (void *)(v437 + 8 * (v436 >> 9));
          if (a5[2] == v437)
          {
            unsigned __int16 v439 = 0;
            uint64_t v442 = 0;
            unint64_t v441 = (void *)(v437 + 8 * ((a5[5] + v436) >> 9));
          }
          else
          {
            unsigned __int16 v439 = (unint64_t *)(*v438 + 8 * (a5[4] & 0x1FFLL));
            unint64_t v440 = a5[5] + v436;
            unint64_t v441 = (void *)(v437 + 8 * (v440 >> 9));
            uint64_t v442 = (unint64_t *)(*v441 + 8 * (v440 & 0x1FF));
          }
          if ((void *)v518 == v517[1]) {
            BOOL v443 = 0;
          }
          else {
            BOOL v443 = (unint64_t *)(*((void *)v517[1] + ((unint64_t)v519 >> 9)) + 8 * (v519 & 0x1FF));
          }
          std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(&v520, v296, v297, (uint64_t)v298, v299, v438, v439, v295, (uint64_t)v441, v442, (void *)v517[1] + ((unint64_t)v519 >> 9), v443);
          unint64_t v444 = (char *)v517[1] + 8 * ((unint64_t)v519 >> 9);
          if ((void *)v518 == v517[1]) {
            uint64_t v445 = 0;
          }
          else {
            uint64_t v445 = *(void *)v444 + 8 * (v519 & 0x1FF);
          }
          if (v524 == (void **)v445) {
            unint64_t v446 = 0;
          }
          else {
            unint64_t v446 = (((uint64_t)v524 - *(void *)v523) >> 3) + ((v523 - v444) << 6) - ((v445 - *(void *)v444) >> 3);
          }
          std::deque<unsigned long>::resize(v517, v446);
          if (*((void *)&v519 + 1))
          {
            char v447 = 0;
            uint64_t v448 = a2;
            uint64_t v449 = a3;
            *(unsigned char *)(*(void *)(*(void *)(*(void *)(v8 + 64)
                                             + (((*(void *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(v8 + 88) + a2))
                     + a3) = 0;
            uint64_t v450 = *(void *)(*(void *)(*(void *)(v8 + 112)
                                         + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(v8 + 136) + a2));
            char v451 = 1;
          }
          else
          {
            uint64_t v450 = *(void *)(*(void *)(*(void *)(v8 + 112)
                                         + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(v8 + 136) + a2));
            if (!*(unsigned char *)(v450 + a3)
              || (uint64_t v452 = *(void *)(*(void *)(*(void *)(v8 + 64)
                                               + (((*(void *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(unsigned char *)(v8 + 88) + a2)),
                  *(unsigned char *)(v452 + a3)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)v8, a2, a3);
              uint64_t v452 = *(void *)(*(void *)(*(void *)(v8 + 64)
                                           + (((*(void *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(v8 + 88) + a2));
              uint64_t v450 = *(void *)(*(void *)(*(void *)(v8 + 112)
                                           + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(v8 + 136) + a2));
            }
            char v451 = 0;
            uint64_t v448 = a2;
            uint64_t v449 = a3;
            *(unsigned char *)(v452 + a3) = 0;
            char v447 = 1;
          }
          *(unsigned char *)(v450 + v449) = v447;
          *(unsigned char *)(*(void *)(*(void *)(*(void *)(v8 + 160)
                                           + (((unint64_t)(*(void *)(v8 + 184) + v448) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(v8 + 184) + v448))
                   + v449) = v451;
          std::deque<std::pair<int,int>>::~deque[abi:ne180100](v517);
        }
        else
        {
          uint64_t v339 = a2;
          uint64_t v340 = *(void *)(*(void *)(*(void *)(v8 + 112)
                                       + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (*(unsigned char *)(v8 + 136) + a2));
          if (!*(unsigned char *)(v340 + a3)
            || (uint64_t v341 = *(void *)(*(void *)(*(void *)(v8 + 64)
                                             + (((*(void *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(unsigned char *)(v8 + 88) + a2)),
                *(unsigned char *)(v341 + a3)))
          {
            nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((void *)v8, a2, a3);
            uint64_t v339 = a2;
            uint64_t v341 = *(void *)(*(void *)(*(void *)(v8 + 64)
                                         + (((*(void *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(v8 + 88) + a2));
            uint64_t v340 = *(void *)(*(void *)(*(void *)(v8 + 112)
                                         + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(unsigned char *)(v8 + 136) + a2));
          }
          *(unsigned char *)(v341 + a3) = 0;
          *(unsigned char *)(v340 + a3) = 1;
          *(unsigned char *)(*(void *)(*(void *)(*(void *)(v8 + 160)
                                           + (((unint64_t)(*(void *)(v8 + 184) + v339) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(unsigned char *)(v8 + 184) + v339))
                   + a3) = 0;
        }
        goto LABEL_512;
      }
      if (v216 == 5) {
        unint64_t v327 = 5;
      }
      else {
        unint64_t v327 = 0;
      }
      if (!v216) {
        unint64_t v327 = 4;
      }
      if (v327 && v327 <= (v512 - (unsigned char *)v511) >> 3)
      {
        *(void *)&v520.f64[1] = &v511;
        uint64_t v521 = 2;
        unint64_t v522 = ((v512 - (unsigned char *)v511) >> 3) / v327;
        uint64_t v523 = (char *)v327;
        uint64_t v524 = &v511;
        uint64_t v525 = 3;
        unint64_t v526 = v522;
        unint64_t v527 = v327;
        std::__val_expr<std::_BinaryOp<std::multiplies<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::operator std::valarray<double>((double *)&v498, (uint64_t)&v520);
      }
      else
      {
        uint64_t v498 = 0;
        float64x2_t v499 = 0;
      }
      if (!*((void *)&v494 + 1))
      {
        LOWORD(v370) = 0;
        LOWORD(v369) = 0;
LABEL_470:
        double v7 = a4;
        unint64_t v422 = a4[4];
        uint64_t v423 = a4[1];
        uint64_t v424 = a4[2];
        uint64_t v425 = v423 + 8 * (v422 >> 10);
        if (v424 == v423) {
          uint64_t v426 = 0;
        }
        else {
          uint64_t v426 = *(void *)v425 + 4 * (a4[4] & 0x3FFLL);
        }
        uint64_t v6 = a5;
        unint64_t v427 = a4[5] + v422;
        unint64_t v428 = v427 >> 10;
        uint64_t v429 = v427 & 0x3FF;
LABEL_474:
        BOOL v430 = (unsigned __int16 *)v426;
        while (1)
        {
          uint64_t v431 = v424 == v423 ? 0 : *(void *)(v423 + 8 * v428) + 4 * v429;
          if (v430 == (unsigned __int16 *)v431) {
            break;
          }
          if (*v430 == (unsigned __int16)v370 && v430[1] == (unsigned __int16)v369)
          {
            std::deque<std::pair<unsigned short,unsigned short>>::erase((uint64_t)a4, (char *)v425, v426);
            break;
          }
          v430 += 2;
          v426 += 4;
          if (*(void *)v425 + 4096 == v426)
          {
            uint64_t v432 = *(void *)(v425 + 8);
            v425 += 8;
            uint64_t v426 = v432;
            goto LABEL_474;
          }
        }
        if (v498)
        {
          if (v499 != v498) {
            float64x2_t v499 = (double *)((char *)v499 + (((unsigned char *)v498 - (unsigned char *)v499 + 7) & 0xFFFFFFFFFFFFFFF8));
          }
          operator delete(v498);
        }
        goto LABEL_512;
      }
      unint64_t v367 = 0;
      uint64_t v368 = 0;
      int v369 = 0;
      int v370 = 0;
      double v371 = 0.0;
      while (2)
      {
        double v372 = *((double *)v498 + v368);
        uint64_t v373 = (unsigned __int16 *)(*(void *)(*((void *)&v492 + 1)
                                              + (((unint64_t)(v494 + v368) >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * ((v494 + v368) & 0x3FF));
        uint64_t v374 = *v373;
        uint64_t v375 = v373[1];
        long long v518 = 0u;
        long long v519 = 0u;
        *(_OWORD *)double v517 = 0u;
        uint64_t v376 = *(void *)(v8 + 968);
        if (v376 && (unint64_t v377 = *(void *)(v376 + 40), LOWORD(v520.f64[0]) = 0, v377))
        {
          uint64_t v491 = v368;
          int v476 = v369;
          int v486 = v370;
          unsigned __int16 v378 = 0;
          uint64_t v379 = 0;
          do
          {
            unint64_t v380 = *(void *)(*(void *)(v8 + 736) + 8 * ((*(void *)(v8 + 760) + v374) / 0x55uLL))
                 + 48 * ((*(void *)(v8 + 760) + v374) % 0x55uLL);
            unint64_t v381 = *(void *)(v380 + 32) + v379;
            uint64_t v382 = *(void *)(*(void *)(v380 + 8) + 8 * (v381 / 0x55));
            if (*(void *)(v382 + 48 * (v381 % 0x55) + 40))
            {
              uint64_t v383 = v382 + 48 * (v381 % 0x55);
              unint64_t v384 = *(void *)(v383 + 32) + v375;
              uint64_t v385 = *(void *)(*(void *)(v383 + 8) + 8 * (v384 / 0x55));
              unint64_t v386 = v384 % 0x55;
              uint64_t v387 = *(void *)(v385 + 48 * (v384 % 0x55) + 40);
              if (v387)
              {
                uint64_t v388 = v385 + 48 * v386;
                uint64_t v389 = *(void *)(v388 + 8);
                if (*(void *)(v388 + 16) != v389)
                {
                  unint64_t v390 = *(void *)(v385 + 48 * v386 + 32);
                  unint64_t v391 = (char **)(v389 + 8 * (v390 >> 11));
                  unint64_t v392 = *v391;
                  float64_t v393 = &(*v391)[2 * (v390 & 0x7FF)];
                  uint64_t v394 = *(void *)(v389 + (((v390 + v387) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v390 + v387) & 0x7FF);
                  while (v393 != (char *)v394)
                  {
                    LOWORD(__p[0]) = 0;
                    uint64_t v395 = *(unsigned __int16 *)v393;
                    LOWORD(__p[0]) = *(_WORD *)v393;
                    if (!*(void *)(v8 + 144)
                      || !*(unsigned char *)(*(void *)(*(void *)(*(void *)(v8 + 112)
                                                           + (((*(void *)(v8 + 136) + (unint64_t)v378) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (*(unsigned char *)(v8 + 136) + v378))
                                   + v395))
                    {
                      std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(v517, &v520, __p);
                      unint64_t v392 = *v391;
                    }
                    v393 += 2;
                    if (v393 - v392 == 4096)
                    {
                      double v396 = v391[1];
                      ++v391;
                      unint64_t v392 = v396;
                      float64_t v393 = v396;
                    }
                  }
                }
              }
            }
            LOWORD(v520.f64[0]) = ++v378;
            uint64_t v379 = v378;
          }
          while (v377 > v378);
          long long v509 = 0u;
          long long v510 = 0u;
          *(_OWORD *)__p = 0u;
          if ((void *)v518 == v517[1])
          {
            uint64_t v402 = 0;
            unint64_t v404 = 0;
            uint64_t v403 = 0;
            uint64_t v401 = 0;
            int v370 = v486;
            int v369 = v476;
            uint64_t v368 = v491;
          }
          else
          {
            v397 = (char *)v517[1] + 8 * ((unint64_t)v519 >> 10);
            v398 = (unsigned __int16 *)(*v397 + 4 * (v519 & 0x3FF));
            uint64_t v399 = *(void *)((char *)v517[1] + (((*((void *)&v519 + 1) + (void)v519) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((*((void *)&v519 + 1) + v519) & 0x3FF);
            uint64_t v368 = v491;
            if (v398 == (unsigned __int16 *)v399)
            {
              uint64_t v402 = 0;
              unint64_t v404 = 0;
              uint64_t v403 = 0;
              uint64_t v401 = 0;
              int v370 = v486;
              int v369 = v476;
            }
            else
            {
              do
              {
                *(void *)&v520.f64[0] = *v398 ^ (16 * v398[1]);
                std::deque<unsigned long>::push_back(__p, &v520);
                v398 += 2;
                if ((unsigned __int16 *)((char *)v398 - *v397) == (unsigned __int16 *)4096)
                {
                  unint64_t v400 = (unsigned __int16 *)v397[1];
                  ++v397;
                  v398 = v400;
                }
              }
              while (v398 != (unsigned __int16 *)v399);
              uint64_t v401 = (char *)__p[1];
              uint64_t v402 = *((void *)&v510 + 1);
              uint64_t v403 = v510;
              unint64_t v404 = (char *)__p[1] + 8 * ((unint64_t)v510 >> 9);
              int v370 = v486;
              int v369 = v476;
              if ((void *)v509 != __p[1])
              {
                double v405 = (unint64_t *)(*(void *)v404 + 8 * (v510 & 0x1FF));
                unint64_t v406 = (char *)__p[1] + 8 * ((*((void *)&v510 + 1) + (void)v510) >> 9);
                uint64_t v407 = (unint64_t *)(*(void *)v406 + 8 * ((*((void *)&v510 + 1) + v510) & 0x1FF));
                goto LABEL_446;
              }
            }
          }
        }
        else
        {
          uint64_t v402 = 0;
          unint64_t v404 = 0;
          uint64_t v403 = 0;
          uint64_t v401 = 0;
          long long v509 = 0uLL;
          long long v510 = 0uLL;
          *(_OWORD *)__p = 0uLL;
        }
        double v405 = 0;
        uint64_t v407 = 0;
        unint64_t v406 = &v401[8 * ((unint64_t)(v403 + v402) >> 9)];
LABEL_446:
        std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__less<void,void>>(v404, v405, v406, v407);
        std::deque<unsigned long>::deque((uint64_t)&v503, *((void *)&v510 + 1) + *((void *)&v497 + 1));
        unsigned __int16 v409 = (void *)(*((void *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
        if ((void)v496 == *((void *)&v495 + 1))
        {
          unint64_t v410 = 0;
          unint64_t v412 = 0;
          v411 = (void *)(*((void *)&v495 + 1) + 8 * ((*((void *)&v497 + 1) + (void)v497) >> 9));
        }
        else
        {
          unint64_t v410 = (unint64_t *)(*v409 + 8 * (v497 & 0x1FF));
          v411 = (void *)(*((void *)&v495 + 1) + 8 * ((*((void *)&v497 + 1) + (void)v497) >> 9));
          unint64_t v412 = (unint64_t *)(*v411 + 8 * ((*((void *)&v497 + 1) + v497) & 0x1FF));
        }
        uint64_t v413 = (char *)__p[1] + 8 * ((unint64_t)v510 >> 9);
        if ((void *)v509 == __p[1])
        {
          unint64_t v414 = 0;
          v416 = 0;
          uint64_t v415 = (char *)__p[1] + 8 * ((*((void *)&v510 + 1) + (void)v510) >> 9);
        }
        else
        {
          unint64_t v414 = (unint64_t *)(*v413 + 8 * (v510 & 0x1FF));
          uint64_t v415 = (char *)__p[1] + 8 * ((*((void *)&v510 + 1) + (void)v510) >> 9);
          v416 = (unint64_t *)(*v415 + 8 * ((WORD4(v510) + (_WORD)v510) & 0x1FF));
        }
        if (v505 == v504) {
          int v417 = 0;
        }
        else {
          int v417 = (unint64_t *)(*(void *)&v504[8 * (v506 >> 9)] + 8 * (v506 & 0x1FF));
        }
        std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(&v520, v409, v410, (uint64_t)v411, v412, v413, v414, v408, (uint64_t)v415, v416, &v504[8 * (v506 >> 9)], v417);
        unint64_t v418 = &v504[8 * (v506 >> 9)];
        if (v505 == v504) {
          uint64_t v419 = 0;
        }
        else {
          uint64_t v419 = *(void *)v418 + 8 * (v506 & 0x1FF);
        }
        if (v524 == (void **)v419) {
          unint64_t v420 = 0;
        }
        else {
          unint64_t v420 = (((uint64_t)v524 - *(void *)v523) >> 3) + ((v523 - v418) << 6) - ((v419 - *(void *)v418) >> 3);
        }
        std::deque<unsigned long>::resize(&v503, v420);
        unint64_t v421 = v507;
        if (v507 <= 1) {
          unint64_t v421 = 1;
        }
        if (v372 * (double)v421 > v371 * (double)v367)
        {
          int v370 = v374;
          int v369 = v375;
          unint64_t v367 = v421;
          double v371 = v372;
        }
        std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v503);
        std::deque<std::pair<int,int>>::~deque[abi:ne180100](__p);
        std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v517);
        if ((unint64_t)++v368 >= *((void *)&v494 + 1)) {
          goto LABEL_470;
        }
        continue;
      }
    }
    double v274 = *(double *)(v8 + 1136);
    if (v274 < 0.0 || v274 > 1.0) {
      goto LABEL_337;
    }
    unint64_t v276 = v215 <= 1 ? 1 : v215;
    unint64_t v277 = ((v512 - (unsigned char *)v511) >> 3) / v276;
    unint64_t v278 = v277 - 2;
    if (v277 < 2) {
      goto LABEL_337;
    }
    *(void *)&v520.f64[0] = &v511;
    v520.f64[1] = 0.0;
    uint64_t v521 = v215;
    unint64_t v522 = 1;
    std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v517, (uint64_t)&v520);
    float64x2_t v520 = *(float64x2_t *)v517[0];
    std::valarray<double>::valarray(__p, (uint64_t *)&v520, 2uLL);
    float64x2_t v520 = vaddq_f64(*(float64x2_t *)__p[0], *((float64x2_t *)v517[0] + 1));
    std::valarray<double>::valarray(&v503, (uint64_t *)&v520, 2uLL);
    uint64_t v498 = 0;
    float64x2_t v499 = 0;
    std::valarray<double>::resize((uint64_t)&v498, 2uLL, 0.0);
    v516[0] = 0;
    v516[1] = 0;
    std::valarray<double>::resize((uint64_t)v516, 2uLL, 0.0);
    v515[0] = 0;
    v515[1] = 0;
    std::valarray<double>::resize((uint64_t)v515, 2uLL, 0.0);
    uint64_t v279 = 0;
    v280 = v516[0];
    unint64_t v281 = v515[0];
    char v490 = 1;
    unint64_t v282 = v215;
    v283 = (double *)v498;
    uint64_t v488 = v499;
    do
    {
      *(void *)&v520.f64[0] = &v511;
      *(void *)&v520.f64[1] = v282;
      uint64_t v521 = v215;
      unint64_t v522 = 1;
      std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v513, (uint64_t)&v520);
      unint64_t v284 = (double *)v513;
      double v285 = *(double *)v513;
      double *v280 = *(double *)v513;
      v280[1] = v284[1];
      double *v281 = v285 + v284[2];
      v281[1] = v280[1] + v284[3];
      if (!v279)
      {
        uint64_t v286 = (double *)__p[0];
        double *v283 = *((double *)__p[0] + 1) - v280[1];
        v283[1] = *v280 - *v286;
        nms::normalizeL2<double>(v283, v488);
      }
      if (nms::PyramidNMS<unsigned short,double,unsigned char>::checkValidityOfCosAngleInDistributionCheckInProcessingContainment(v8, (double **)__p, v516, (uint64_t)&v498))
      {
        BOOL v287 = nms::PyramidNMS<unsigned short,double,unsigned char>::checkValidityOfCosAngleInDistributionCheckInProcessingContainment(v8, (double **)&v503, v515, (uint64_t)&v498);
        v490 &= v287;
      }
      else
      {
        BOOL v287 = 0;
        char v490 = 0;
      }
      if (v513)
      {
        if (v514 != v513) {
          v514 += ((unsigned char *)v513 - v514 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        operator delete(v513);
      }
      BOOL v288 = v278 != v279++ && v287;
      v282 += v215;
    }
    while (v288);
    operator delete(v281);
    operator delete(v280);
    if (v283) {
      operator delete(v283);
    }
    double v7 = a4;
    if (v503)
    {
      if (v504 != v503) {
        v504 += ((unsigned char *)v503 - v504 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      operator delete(v503);
    }
    if (__p[0])
    {
      if (__p[1] != __p[0]) {
        __p[1] = (char *)__p[1] + (((char *)__p[0] - (char *)__p[1] + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      operator delete(__p[0]);
    }
    if (v517[0])
    {
      if (v517[1] != v517[0]) {
        v517[1] = (char *)v517[1] + (((char *)v517[0] - (char *)v517[1] + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      operator delete(v517[0]);
    }
    if (v490)
    {
LABEL_337:
      double v289 = (void **)v7[1];
      uint64_t v290 = v7[2];
      v7[5] = 0;
      unint64_t v291 = v290 - (void)v289;
      uint64_t v6 = a5;
      if (v291 >= 0x11)
      {
        do
        {
          operator delete(*v289);
          uint64_t v292 = v7[2];
          double v289 = (void **)(v7[1] + 8);
          v7[1] = v289;
          unint64_t v291 = v292 - (void)v289;
        }
        while (v291 > 0x10);
      }
    }
    else
    {
      unint64_t v433 = (void **)a4[1];
      uint64_t v434 = a4[2];
      a4[5] = 0;
      unint64_t v291 = v434 - (void)v433;
      uint64_t v6 = a5;
      if (v291 >= 0x11)
      {
        do
        {
          operator delete(*v433);
          uint64_t v435 = a4[2];
          unint64_t v433 = (void **)(a4[1] + 8);
          a4[1] = v433;
          unint64_t v291 = v435 - (void)v433;
        }
        while (v291 > 0x10);
      }
    }
    if (v291 >> 3 == 1)
    {
      uint64_t v293 = 512;
LABEL_384:
      v7[4] = v293;
    }
    else if (v291 >> 3 == 2)
    {
      uint64_t v293 = 1024;
      goto LABEL_384;
    }
LABEL_512:
    if (v511)
    {
      if (v512 != v511) {
        v512 += ((unsigned char *)v511 - v512 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      operator delete(v511);
    }
LABEL_516:
    std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&v492);
    double result = std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v495);
  }
  while (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(v8 + 112)
                                            + (((*(void *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (*(unsigned char *)(v8 + 136) + a2))
                    + a3));
  return result;
}

void sub_1DD84CBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a71);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&a33);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a39);
  _Unwind_Resume(a1);
}

uint64_t nms::PyramidNMS<unsigned short,double,unsigned char>::getOverlappingDatums(void *a1, unsigned int a2, unsigned int a3, void *a4, char a5)
{
  uint64_t v10 = (void **)a4[1];
  uint64_t v11 = a4[2];
  a4[5] = 0;
  unint64_t v12 = v11 - (void)v10;
  if (v12 >= 0x11)
  {
    do
    {
      operator delete(*v10);
      uint64_t v13 = a4[2];
      uint64_t v10 = (void **)(a4[1] + 8);
      a4[1] = v10;
      unint64_t v12 = v13 - (void)v10;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 512;
  }
  else
  {
    if (v12 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v14 = 1024;
  }
  a4[4] = v14;
LABEL_8:
  uint64_t v15 = a1[121];
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 40);
    if ((_BYTE)v16)
    {
      uint64_t v17 = operator new(*(void *)(v15 + 40));
      bzero(v17, v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    __int16 v47 = 0;
    unsigned int v19 = v16;
    if (!(_BYTE)v16)
    {
      LOBYTE(v18) = 0;
      if (!v17) {
        return v18;
      }
      goto LABEL_32;
    }
    unsigned __int16 v20 = 0;
    int v18 = 0;
    uint64_t v21 = a2;
    uint64_t v43 = v17;
    uint64_t v44 = a3;
    unsigned int v42 = v16;
    uint64_t v41 = a2;
    do
    {
      uint64_t v22 = v20;
      unint64_t v23 = *(void *)(a1[116] + 8 * ((a1[119] + v21) / 0x55uLL)) + 48 * ((a1[119] + v21) % 0x55uLL);
      unint64_t v24 = *(void *)(v23 + 32) + v20;
      uint64_t v25 = *(void *)(*(void *)(v23 + 8) + 8 * (v24 / 0x55));
      if (*(void *)(v25 + 48 * (v24 % 0x55) + 40))
      {
        uint64_t v26 = v25 + 48 * (v24 % 0x55);
        unint64_t v27 = *(void *)(v26 + 32) + v44;
        uint64_t v28 = *(void *)(*(void *)(v26 + 8) + 8 * (v27 / 0x55));
        unint64_t v29 = v27 % 0x55;
        uint64_t v30 = *(void *)(v28 + 48 * (v27 % 0x55) + 40);
        if (v30)
        {
          int v45 = v18;
          uint64_t v31 = v28 + 48 * v29;
          uint64_t v32 = *(void *)(v31 + 8);
          if (*(void *)(v31 + 16) == v32
            || (unint64_t v33 = *(void *)(v28 + 48 * v29 + 32),
                uint64_t v34 = (char **)(v32 + 8 * (v33 >> 11)),
                uint64_t v35 = *v34,
                int v36 = (unsigned __int16 *)&(*v34)[2 * (v33 & 0x7FF)],
                uint64_t v37 = *(void *)(v32 + (((v33 + v30) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v33 + v30) & 0x7FF),
                v36 == (unsigned __int16 *)v37))
          {
            int v38 = 0;
          }
          else
          {
            int v38 = 0;
            do
            {
              unsigned __int16 v46 = 0;
              unsigned __int16 v46 = *v36;
              if (!*(unsigned char *)(*(void *)(*(void *)(a1[14]
                                                     + (((unint64_t)(a1[17] + v22) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*((unsigned char *)a1 + 136) + v22))
                             + v46)
                && ((a5 & 1) != 0
                 || !*(unsigned char *)(*(void *)(*(void *)(a1[20]
                                                      + (((unint64_t)(a1[23] + v22) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * (*((unsigned char *)a1 + 184) + v22))
                              + v46)))
              {
                std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(a4, &v47, &v46);
                ++v38;
                uint64_t v35 = *v34;
              }
              if ((char *)++v36 - v35 == 4096)
              {
                unint64_t v39 = v34[1];
                ++v34;
                uint64_t v35 = v39;
                int v36 = (unsigned __int16 *)v39;
              }
            }
            while (v36 != (unsigned __int16 *)v37);
          }
          uint64_t v17 = v43;
          *((unsigned char *)v43 + v22) += v38;
          int v18 = v38 + v45;
          unsigned int v19 = v42;
          uint64_t v21 = v41;
        }
      }
      unsigned __int16 v20 = v22 + 1;
      __int16 v47 = v22 + 1;
    }
    while (v19 > (unsigned __int16)(v22 + 1));
    if (v17) {
LABEL_32:
    }
      operator delete(v17);
  }
  else
  {
    LOBYTE(v18) = 0;
  }
  return v18;
}

void sub_1DD84D15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::pair<unsigned short,unsigned short>>::insert<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>(int64x2_t *a1, char *a2, uint64_t a3, uint64_t *a4, int *a5, uint64_t *a6, int *a7)
{
  uint64_t i = a7;
  uint64_t v8 = a6;
  uint64_t v9 = (uint64_t)a5;
  uint64_t v10 = a4;
  if (a7 == a5) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = (((uint64_t)a7 - *a6) >> 2) + (((char *)a6 - (char *)a4) << 7) - (((uint64_t)a5 - *a4) >> 2);
  }
  unint64_t v13 = a1[2].u64[0];
  unint64_t v14 = v13 >> 10;
  uint64_t v15 = a1->i64[1];
  uint64_t v16 = a1[1].i64[0];
  uint64_t v17 = (char *)(v15 + 8 * (v13 >> 10));
  uint64_t v18 = v16 - v15;
  if (v16 == v15) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)v17 + 4 * (a1[2].i64[0] & 0x3FF);
  }
  if (a3 == v19) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = ((a3 - *(void *)a2) >> 2) + ((a2 - v17) << 7) - ((v19 - *(void *)v17) >> 2);
  }
  uint64_t v21 = a1[2].i64[1];
  if (v20 >= v21 - v20)
  {
    uint64_t v35 = (v18 << 7) - 1;
    if (v16 == v15) {
      uint64_t v35 = 0;
    }
    unint64_t v36 = v21 + v13;
    unint64_t v37 = v35 - v36;
    if (v12 > v37)
    {
      unint64_t v38 = v12;
      unint64_t v39 = v20;
      std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(a1, v12 - v37);
      unint64_t v20 = v39;
      unint64_t v12 = v38;
      uint64_t v21 = a1[2].i64[1];
      uint64_t v15 = a1->i64[1];
      uint64_t v16 = a1[1].i64[0];
      unint64_t v36 = a1[2].i64[0] + v21;
    }
    uint64_t v40 = (uint64_t *)(v15 + 8 * (v36 >> 10));
    if (v16 == v15) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = *v40 + 4 * (v36 & 0x3FF);
    }
    unint64_t v42 = v21 - v20;
    if (v21 - v20 >= v12)
    {
      uint64_t v44 = (int *)v41;
      int v45 = v40;
      uint64_t v46 = (uint64_t)i;
      if (!v12) {
        return;
      }
      goto LABEL_78;
    }
    if (v42 >= v12 >> 1)
    {
      uint64_t v43 = v21 - v20 - v12 + (((uint64_t)i - *v8) >> 2);
      if (v43 >= 1)
      {
        v8 += (unint64_t)v43 >> 10;
        goto LABEL_50;
      }
      unint64_t v52 = 1023 - v43;
      __int16 v53 = ~(_WORD)v52;
      v8 -= v52 >> 10;
    }
    else
    {
      if (!v42)
      {
        uint64_t v8 = v10;
        uint64_t v46 = v9;
        goto LABEL_68;
      }
      uint64_t v43 = v42 + ((v9 - *v10) >> 2);
      if (v43 >= 1)
      {
        uint64_t v8 = &v10[(unint64_t)v43 >> 10];
LABEL_50:
        uint64_t v46 = *v8 + 4 * (v43 & 0x3FF);
        goto LABEL_68;
      }
      unint64_t v54 = 1023 - v43;
      __int16 v53 = ~(_WORD)v54;
      uint64_t v8 = &v10[-(v54 >> 10)];
    }
    uint64_t v46 = *v8 + 4 * (v53 & 0x3FF);
LABEL_68:
    if ((int *)v46 == i)
    {
      uint64_t v44 = (int *)v41;
      int v45 = v40;
    }
    else
    {
      uint64_t v55 = v8;
      uint64_t v56 = (int *)v46;
      int v45 = v40;
      uint64_t v44 = (int *)v41;
      do
      {
        *v44++ = *v56;
        if ((int *)((char *)v44 - *v45) == (int *)4096)
        {
          uint64_t v57 = (int *)v45[1];
          ++v45;
          uint64_t v44 = v57;
        }
        if ((int *)((char *)++v56 - *v55) == (int *)4096)
        {
          unint64_t v58 = (int *)v55[1];
          ++v55;
          uint64_t v56 = v58;
        }
        ++a1[2].i64[1];
      }
      while (v56 != i);
    }
    unint64_t v12 = v42;
    if (!v42) {
      return;
    }
LABEL_78:
    uint64_t v59 = ((v41 - *v40) >> 2) - v12;
    if (v59 < 1)
    {
      unint64_t v62 = 1023 - v59;
      unint64_t v60 = &v40[-(v62 >> 10)];
      uint64_t v61 = *v60 + 4 * (~(_WORD)v62 & 0x3FF);
    }
    else
    {
      unint64_t v60 = &v40[(unint64_t)v59 >> 10];
      uint64_t v61 = *v60 + 4 * (v59 & 0x3FF);
    }
    if (v61 != v41)
    {
      double v63 = v60;
      uint64_t v64 = (int *)v61;
      do
      {
        *v44++ = *v64;
        if ((int *)((char *)v44 - *v45) == (int *)4096)
        {
          unint64_t v65 = (int *)v45[1];
          ++v45;
          uint64_t v44 = v65;
        }
        if ((int *)((char *)++v64 - *v63) == (int *)4096)
        {
          uint64_t v66 = (int *)v63[1];
          ++v63;
          uint64_t v64 = v66;
        }
        ++a1[2].i64[1];
      }
      while (v64 != (int *)v41);
    }
    if (v12 < v42)
    {
      uint64_t v67 = ((v41 - *v40) >> 2) - v42;
      if (v67 < 1)
      {
        unint64_t v70 = 1023 - v67;
        uint64_t v68 = &v40[-(v70 >> 10)];
        uint64_t v69 = *v68 + 4 * (~(_WORD)v70 & 0x3FF);
      }
      else
      {
        uint64_t v68 = &v40[(unint64_t)v67 >> 10];
        uint64_t v69 = *v68 + 4 * (v67 & 0x3FF);
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>((__n128 *)&v158, v68, v69, v60, v61, v40, v41);
      uint64_t v40 = v159;
      uint64_t v41 = (uint64_t)v160;
    }
    if (v10 == v8)
    {
      uint64_t v79 = v9;
      uint64_t v78 = v46;
      uint64_t v75 = v40;
      uint64_t v76 = v41;
    }
    else
    {
      uint64_t v73 = *v8;
      unint64_t v72 = v8 - 1;
      uint64_t v71 = v73;
      uint64_t v74 = v46;
      uint64_t v75 = v40;
      uint64_t v76 = v41;
      while (1)
      {
        std::__copy_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v158, v71, v74, v75, v76);
        uint64_t v75 = (uint64_t *)v158.i64[1];
        uint64_t v76 = (uint64_t)v159;
        if (v72 == v10) {
          break;
        }
        uint64_t v77 = *v72--;
        uint64_t v71 = v77;
        uint64_t v74 = v77 + 4096;
      }
      uint64_t v78 = *v10 + 4096;
      uint64_t v79 = v9;
    }
    std::__copy_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v158, v79, v78, v75, v76);
    return;
  }
  if (v12 > v13)
  {
    uint64_t v22 = (v18 << 7) - 1;
    uint64_t v23 = v16 - v15;
    if (v16 == v15) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v22;
    }
    if (v16 == v15) {
      unint64_t v25 = v12 - v13 + 1;
    }
    else {
      unint64_t v25 = v12 - v13;
    }
    if ((v25 & 0x3FF) != 0) {
      unint64_t v26 = (v25 >> 10) + 1;
    }
    else {
      unint64_t v26 = v25 >> 10;
    }
    unint64_t v27 = v24 - (v13 + v21);
    if (v26 >= v27 >> 10) {
      unint64_t v28 = v27 >> 10;
    }
    else {
      unint64_t v28 = v26;
    }
    unint64_t v153 = v20;
    unint64_t v154 = v12;
    if (v26 <= v27 >> 10)
    {
      for (a1[2].i64[0] = v13 + (v28 << 10); v28; --v28)
      {
        uint64_t v47 = a1[1].i64[0];
        v158.i64[0] = *(void *)(v47 - 8);
        a1[1].i64[0] = v47 - 8;
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v158);
      }
    }
    else
    {
      unint64_t v29 = v26 - v28;
      uint64_t v30 = a1[1].i64[1] - a1->i64[0];
      if (v26 - v28 <= (v30 >> 3) - (v23 >> 3))
      {
        if (v29)
        {
          if (v15 == a1->i64[0])
          {
LABEL_58:
            unint64_t v50 = v29;
            do
            {
              v158.i64[0] = (uint64_t)operator new(0x1000uLL);
              std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(a1, &v158);
              --v50;
            }
            while (v50);
            v28 += v29;
            unint64_t v13 = a1[2].u64[0];
          }
          else
          {
            while (1)
            {
              v158.i64[0] = (uint64_t)operator new(0x1000uLL);
              std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v158);
              uint64_t v48 = a1->i64[1];
              uint64_t v49 = a1[1].i64[0] - v48 == 8 ? 1023 : 1024;
              unint64_t v13 = v49 + a1[2].i64[0];
              a1[2].i64[0] = v13;
              if (!--v29) {
                break;
              }
              if (v48 == a1->i64[0]) {
                goto LABEL_58;
              }
            }
          }
        }
        a1[2].i64[0] = v13 + (v28 << 10);
        for (uint64_t i = a7; v28; --v28)
        {
          uint64_t v51 = a1[1].i64[0];
          v158.i64[0] = *(void *)(v51 - 8);
          a1[1].i64[0] = v51 - 8;
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v158);
        }
      }
      else
      {
        BOOL v31 = v16 == v15;
        unint64_t v32 = v26 << 10;
        if (v30 >> 2 <= v29 + (v23 >> 3)) {
          unint64_t v33 = v29 + (v23 >> 3);
        }
        else {
          unint64_t v33 = v30 >> 2;
        }
        float64_t v161 = &a1[1].i8[8];
        if (v33) {
          unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v33);
        }
        else {
          uint64_t v34 = 0;
        }
        unint64_t v151 = v32 - v31;
        v158.i64[0] = v33;
        v158.i64[1] = v33;
        unint64_t v159 = (uint64_t *)v33;
        uint64_t v160 = (char *)(v33 + 8 * v34);
        do
        {
          double v157 = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v158, &v157);
          --v29;
        }
        while (v29);
        uint64_t v80 = a1[1].i64[0];
        uint64_t v81 = (char *)v159;
        if (v28)
        {
          uint64_t v152 = v9;
          do
          {
            if (v81 == v160)
            {
              uint64_t v83 = (char *)v158.i64[1];
              unint64_t v82 = (void *)v158.i64[0];
              if (v158.i64[1] <= (unint64_t)v158.i64[0])
              {
                if (v81 == (char *)v158.i64[0]) {
                  unint64_t v89 = 1;
                }
                else {
                  unint64_t v89 = (uint64_t)&v81[-v158.i64[0]] >> 2;
                }
                uint64_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v89);
                uint64_t v93 = v81 - v83;
                BOOL v92 = v81 == v83;
                uint64_t v81 = &v90[8 * (v89 >> 2)];
                if (!v92)
                {
                  uint64_t v81 = &v90[8 * (v89 >> 2) + (v93 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v94 = 8 * (v93 >> 3);
                  uint64_t v95 = &v90[8 * (v89 >> 2)];
                  do
                  {
                    uint64_t v96 = *(void *)v83;
                    v83 += 8;
                    *(void *)uint64_t v95 = v96;
                    v95 += 8;
                    v94 -= 8;
                  }
                  while (v94);
                }
                v158.i64[0] = (uint64_t)v90;
                v158.i64[1] = (uint64_t)&v90[8 * (v89 >> 2)];
                unint64_t v159 = (uint64_t *)v81;
                uint64_t v160 = &v90[8 * v91];
                if (v82) {
                  operator delete(v82);
                }
              }
              else
              {
                uint64_t v84 = (v158.i64[1] - v158.i64[0]) >> 3;
                if (v84 >= -1) {
                  uint64_t v85 = v84 + 1;
                }
                else {
                  uint64_t v85 = v84 + 2;
                }
                unint64_t v86 = v158.i64[1] - 8 * (v85 >> 1);
                double v87 = &v81[-v158.i64[1]];
                if (v81 != (char *)v158.i64[1])
                {
                  memmove((void *)(v158.i64[1] - 8 * (v85 >> 1)), (const void *)v158.i64[1], (size_t)&v81[-v158.i64[1]]);
                  uint64_t v81 = v83;
                }
                unint64_t v88 = (unint64_t)&v81[-8 * (v85 >> 1)];
                uint64_t v81 = &v87[v86];
                v158.i64[1] = v88;
                unint64_t v159 = (uint64_t *)&v87[v86];
                uint64_t v9 = v152;
              }
            }
            *(void *)uint64_t v81 = *(void *)(v80 - 8);
            uint64_t v81 = (char *)++v159;
            uint64_t v80 = a1[1].i64[0] - 8;
            a1[1].i64[0] = v80;
            --v28;
          }
          while (v28);
        }
        unint64_t v97 = (uint64_t *)a1->i64[1];
        if (v97 != (uint64_t *)v80)
        {
          do
          {
            if (v81 == v160)
            {
              uint64_t v99 = (char *)v158.i64[1];
              unint64_t v98 = (void *)v158.i64[0];
              if (v158.i64[1] <= (unint64_t)v158.i64[0])
              {
                if (v81 == (char *)v158.i64[0]) {
                  unint64_t v105 = 1;
                }
                else {
                  unint64_t v105 = (uint64_t)&v81[-v158.i64[0]] >> 2;
                }
                uint64_t v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v105);
                uint64_t v108 = v81 - v99;
                BOOL v92 = v81 == v99;
                uint64_t v81 = &v106[8 * (v105 >> 2)];
                if (!v92)
                {
                  uint64_t v81 = &v106[8 * (v105 >> 2) + (v108 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v109 = 8 * (v108 >> 3);
                  BOOL v110 = &v106[8 * (v105 >> 2)];
                  do
                  {
                    uint64_t v111 = *(void *)v99;
                    v99 += 8;
                    *(void *)BOOL v110 = v111;
                    v110 += 8;
                    v109 -= 8;
                  }
                  while (v109);
                }
                v158.i64[0] = (uint64_t)v106;
                v158.i64[1] = (uint64_t)&v106[8 * (v105 >> 2)];
                unint64_t v159 = (uint64_t *)v81;
                uint64_t v160 = &v106[8 * v107];
                if (v98) {
                  operator delete(v98);
                }
              }
              else
              {
                uint64_t v100 = (v158.i64[1] - v158.i64[0]) >> 3;
                if (v100 >= -1) {
                  uint64_t v101 = v100 + 1;
                }
                else {
                  uint64_t v101 = v100 + 2;
                }
                unint64_t v102 = v158.i64[1] - 8 * (v101 >> 1);
                unint64_t v103 = &v81[-v158.i64[1]];
                if (v81 != (char *)v158.i64[1])
                {
                  memmove((void *)(v158.i64[1] - 8 * (v101 >> 1)), (const void *)v158.i64[1], (size_t)&v81[-v158.i64[1]]);
                  uint64_t v81 = v99;
                }
                unint64_t v104 = (unint64_t)&v81[-8 * (v101 >> 1)];
                uint64_t v81 = &v103[v102];
                v158.i64[1] = v104;
                unint64_t v159 = (uint64_t *)&v103[v102];
              }
            }
            uint64_t v112 = *v97++;
            *(void *)uint64_t v81 = v112;
            uint64_t v81 = (char *)++v159;
          }
          while (v97 != (uint64_t *)a1[1].i64[0]);
        }
        double v113 = (void *)a1->i64[0];
        *a1 = v158;
        uint64_t v114 = (uint64_t)v160;
        a1[1].i64[0] = (uint64_t)v81;
        a1[1].i64[1] = v114;
        a1[2].i64[0] += v151;
        if (v113) {
          operator delete(v113);
        }
        uint64_t i = a7;
      }
    }
    unint64_t v13 = a1[2].u64[0];
    uint64_t v15 = a1->i64[1];
    uint64_t v16 = a1[1].i64[0];
    unint64_t v14 = v13 >> 10;
    unint64_t v20 = v153;
    unint64_t v12 = v154;
  }
  uint64_t v115 = (void *)(v15 + 8 * v14);
  if (v16 == v15) {
    uint64_t v116 = 0;
  }
  else {
    uint64_t v116 = *v115 + 4 * (v13 & 0x3FF);
  }
  if (v12 <= v20)
  {
    uint64_t v118 = v116;
    uint64_t v119 = (void *)(v15 + 8 * v14);
    uint64_t v120 = v9;
    if (!v12) {
      return;
    }
    goto LABEL_171;
  }
  if (v20 >= v12 >> 1)
  {
    uint64_t v117 = v12 - v20 + ((v9 - *v10) >> 2);
    if (v117 >= 1)
    {
      v10 += (unint64_t)v117 >> 10;
      goto LABEL_156;
    }
    unint64_t v121 = 1023 - v117;
    __int16 v122 = ~(_WORD)v121;
    v10 -= v121 >> 10;
  }
  else
  {
    if (!v20)
    {
      uint64_t v10 = v8;
      uint64_t v120 = (uint64_t)i;
      goto LABEL_161;
    }
    uint64_t v117 = (((uint64_t)i - *v8) >> 2) - v20;
    if (v117 >= 1)
    {
      uint64_t v10 = &v8[(unint64_t)v117 >> 10];
LABEL_156:
      uint64_t v120 = *v10 + 4 * (v117 & 0x3FF);
      goto LABEL_161;
    }
    unint64_t v123 = 1023 - v117;
    __int16 v122 = ~(_WORD)v123;
    uint64_t v10 = &v8[-(v123 >> 10)];
  }
  uint64_t v120 = *v10 + 4 * (v122 & 0x3FF);
LABEL_161:
  if (v120 == v9)
  {
    uint64_t v118 = v116;
    uint64_t v119 = v115;
  }
  else
  {
    uint64_t v124 = v10;
    uint64_t v125 = v120;
    uint64_t v119 = v115;
    uint64_t v118 = v116;
    do
    {
      if (v118 == *v119)
      {
        uint64_t v126 = *--v119;
        uint64_t v118 = v126 + 4096;
      }
      if (v125 == *v124)
      {
        uint64_t v127 = *--v124;
        uint64_t v125 = v127 + 4096;
      }
      int v128 = *(_DWORD *)(v125 - 4);
      v125 -= 4;
      *(_DWORD *)(v118 - 4) = v128;
      v118 -= 4;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1DD8CEB60);
    }
    while (v125 != v9);
  }
  unint64_t v12 = v20;
  if (v20)
  {
LABEL_171:
    uint64_t v155 = (int *)v120;
    unint64_t v129 = v12;
    unint64_t v130 = v20;
    double v131 = (char **)std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v115, v116, v12);
    unint64_t v133 = v130;
    uint64_t v134 = v131;
    uint64_t v135 = v132;
    if ((char *)v116 != v132)
    {
      uint64_t v136 = v131;
      uint64_t v137 = v132;
      do
      {
        if (v118 == *v119)
        {
          uint64_t v138 = *--v119;
          uint64_t v118 = v138 + 4096;
        }
        if (v137 == *v136)
        {
          uint64_t v139 = (uint64_t)*--v136;
          uint64_t v137 = (char *)(v139 + 4096);
        }
        int v140 = *((_DWORD *)v137 - 1);
        v137 -= 4;
        *(_DWORD *)(v118 - 4) = v140;
        v118 -= 4;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1DD8CEB60);
      }
      while (v137 != (char *)v116);
    }
    if (v129 < v133)
    {
      double v141 = (char **)std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v115, v116, v133);
      v158.i64[0] = (uint64_t)v115;
      v158.i64[1] = v116;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>>>(v134, v135, v141, v142, (char **)&v158);
      uint64_t v116 = v158.i64[1];
      uint64_t v115 = (void *)v158.i64[0];
    }
    double v143 = v155;
    if (v10 == v8)
    {
      double v150 = a7;
      unint64_t v147 = (int *)v115;
      uint64_t v148 = (int *)v116;
    }
    else
    {
      uint64_t v145 = *v10;
      char v144 = (int **)(v10 + 1);
      uint64_t v146 = (int *)(v145 + 4096);
      unint64_t v147 = (int *)v115;
      uint64_t v148 = (int *)v116;
      while (1)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>((int **)&v158, v143, v146, v147, v148);
        unint64_t v147 = (int *)v158.i64[1];
        uint64_t v148 = (int *)v159;
        if (v144 == (int **)v8) {
          break;
        }
        unint64_t v149 = *v144++;
        double v143 = v149;
        uint64_t v146 = v149 + 1024;
      }
      double v143 = (int *)*v8;
      double v150 = a7;
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>((int **)&v158, v143, v150, v147, v148);
  }
}

void sub_1DD84DBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void nms::PyramidNMS<unsigned short,double,unsigned char>::computeConstitutedIndices(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, void *a5)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v5 = a2[121];
  if (v5)
  {
    unint64_t v6 = *(void *)(v5 + 40);
    __int16 v33 = 0;
    unint64_t v31 = v6;
    if (v6)
    {
      unsigned __int16 v10 = 0;
      uint64_t v11 = 0;
      uint64_t v29 = a4;
      uint64_t v30 = a3;
      do
      {
        unint64_t v12 = *(void *)(a2[104] + 8 * ((a2[107] + v30) / 0x55uLL)) + 48 * ((a2[107] + v30) % 0x55uLL);
        unint64_t v13 = *(void *)(v12 + 32) + v11;
        uint64_t v14 = *(void *)(*(void *)(v12 + 8) + 8 * (v13 / 0x55));
        if (*(void *)(v14 + 48 * (v13 % 0x55) + 40))
        {
          uint64_t v15 = v14 + 48 * (v13 % 0x55);
          unint64_t v16 = *(void *)(v15 + 32) + v29;
          uint64_t v17 = *(void *)(*(void *)(v15 + 8) + 8 * (v16 / 0x55));
          unint64_t v18 = v16 % 0x55;
          uint64_t v19 = *(void *)(v17 + 48 * (v16 % 0x55) + 40);
          if (v19)
          {
            uint64_t v20 = v17 + 48 * v18;
            uint64_t v21 = *(void *)(v20 + 8);
            if (*(void *)(v20 + 16) != v21)
            {
              unint64_t v22 = *(void *)(v17 + 48 * v18 + 32);
              uint64_t v23 = (unsigned __int16 **)(v21 + 8 * (v22 >> 11));
              uint64_t v24 = *v23;
              unint64_t v25 = &(*v23)[v22 & 0x7FF];
              uint64_t v26 = *(void *)(v21 + (((v22 + v19) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v22 + v19) & 0x7FF);
              while (v25 != (unsigned __int16 *)v26)
              {
                unsigned __int16 v32 = 0;
                uint64_t v27 = *v25;
                unsigned __int16 v32 = *v25;
                if (!a5[5]
                  || !*(unsigned char *)(*(void *)(*(void *)(a5[1]
                                                       + (((a5[4] + (unint64_t)v10) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*((unsigned char *)a5 + 32) + v10))
                               + v27))
                {
                  std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>((void *)a1, &v33, &v32);
                  uint64_t v24 = *v23;
                }
                if ((char *)++v25 - (char *)v24 == 4096)
                {
                  unint64_t v28 = v23[1];
                  ++v23;
                  uint64_t v24 = v28;
                  unint64_t v25 = v28;
                }
              }
            }
          }
        }
        __int16 v33 = ++v10;
        uint64_t v11 = v10;
      }
      while (v31 > v10);
    }
  }
}

void sub_1DD84DE34(_Unwind_Exception *a1)
{
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(void *a1, unint64_t a2)
{
  double v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x3FF) != 0) {
    unint64_t v6 = (v5 >> 10) + 1;
  }
  else {
    unint64_t v6 = v5 >> 10;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 10) {
    unint64_t v8 = v7 >> 10;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 10)
  {
    for (a1[4] = v7 - (v8 << 10); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v28);
          unint64_t v31 = &v29[8 * (v28 >> 2)];
          unsigned __int16 v32 = (uint64_t *)a1[1];
          double v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            double v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          unint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            double v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            double v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          double v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)double v3 = v18;
      double v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          *(void *)&long long v85 = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(a1, &v85);
          --v6;
          if (!--v9) {
            goto LABEL_73;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          *(void *)&long long v85 = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v85);
          if (a1[2] - a1[1] == 8) {
            uint64_t v60 = 1023;
          }
          else {
            uint64_t v60 = 1024;
          }
          uint64_t v61 = v60 + a1[4];
          a1[4] = v61;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_73:
        uint64_t v61 = a1[4];
      }
      a1[4] = v61 - (v8 << 10);
      if (v8)
      {
        unint64_t v62 = (char *)a1[2];
        do
        {
          double v63 = (void *)a1[1];
          uint64_t v66 = *v63;
          uint64_t v64 = (char *)(v63 + 1);
          uint64_t v65 = v66;
          a1[1] = v64;
          if (v62 == (char *)a1[3])
          {
            uint64_t v67 = (uint64_t)&v64[-*a1];
            if ((unint64_t)v64 <= *a1)
            {
              if (v62 == (char *)*a1) {
                unint64_t v74 = 1;
              }
              else {
                unint64_t v74 = (uint64_t)&v62[-*a1] >> 2;
              }
              uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v74);
              uint64_t v77 = &v75[8 * (v74 >> 2)];
              uint64_t v78 = (uint64_t *)a1[1];
              unint64_t v62 = v77;
              uint64_t v79 = a1[2] - (void)v78;
              if (v79)
              {
                unint64_t v62 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v80 = 8 * (v79 >> 3);
                uint64_t v81 = &v75[8 * (v74 >> 2)];
                do
                {
                  uint64_t v82 = *v78++;
                  *(void *)uint64_t v81 = v82;
                  v81 += 8;
                  v80 -= 8;
                }
                while (v80);
              }
              uint64_t v83 = (char *)*a1;
              *a1 = v75;
              a1[1] = v77;
              a1[2] = v62;
              a1[3] = &v75[8 * v76];
              if (v83)
              {
                operator delete(v83);
                unint64_t v62 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v68 = v67 >> 3;
              BOOL v22 = v67 >> 3 < -1;
              uint64_t v69 = (v67 >> 3) + 2;
              if (v22) {
                uint64_t v70 = v69;
              }
              else {
                uint64_t v70 = v68 + 1;
              }
              uint64_t v71 = &v64[-8 * (v70 >> 1)];
              int64_t v72 = v62 - v64;
              if (v62 != v64)
              {
                memmove(&v64[-8 * (v70 >> 1)], v64, v62 - v64);
                unint64_t v62 = (char *)a1[1];
              }
              uint64_t v73 = &v62[-8 * (v70 >> 1)];
              unint64_t v62 = &v71[v72];
              a1[1] = v73;
              a1[2] = &v71[v72];
            }
          }
          *(void *)unint64_t v62 = v65;
          unint64_t v62 = (char *)(a1[2] + 8);
          a1[2] = v62;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = (char *)(v9 + v11);
      }
      else {
        unint64_t v13 = (char *)v12;
      }
      unint64_t v14 = v11 - v8;
      double v87 = a1 + 3;
      if (v13) {
        unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>((unint64_t)v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 10;
      *(void *)&long long v85 = v13;
      *((void *)&v85 + 1) = &v13[8 * v14];
      *(void *)&long long v86 = *((void *)&v85 + 1);
      *((void *)&v86 + 1) = &v13[8 * v15];
      do
      {
        uint64_t v84 = operator new(0x1000uLL);
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v85, &v84);
        --v9;
      }
      while (v9);
      if (v8)
      {
        unint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v86;
        do
        {
          if (v40 == *((char **)&v86 + 1))
          {
            uint64_t v41 = (char *)*((void *)&v85 + 1);
            unint64_t v42 = (void *)v85;
            if (*((void *)&v85 + 1) <= (unint64_t)v85)
            {
              if (v40 == (char *)v85) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (uint64_t)&v40[-v85] >> 2;
              }
              uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v48);
              uint64_t v52 = v40 - v41;
              BOOL v51 = v40 == v41;
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              if (!v51)
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                unint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *(void *)v41;
                  v41 += 8;
                  *(void *)unint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              *(void *)&long long v85 = v49;
              *((void *)&v85 + 1) = &v49[8 * (v48 >> 2)];
              *(void *)&long long v86 = v40;
              *((void *)&v86 + 1) = &v49[8 * v50];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              uint64_t v43 = (uint64_t)(*((void *)&v85 + 1) - v85) >> 3;
              if (v43 >= -1) {
                uint64_t v44 = v43 + 1;
              }
              else {
                uint64_t v44 = v43 + 2;
              }
              uint64_t v45 = *((void *)&v85 + 1) - 8 * (v44 >> 1);
              uint64_t v46 = &v40[-*((void *)&v85 + 1)];
              if (v40 != *((char **)&v85 + 1))
              {
                memmove((void *)(*((void *)&v85 + 1) - 8 * (v44 >> 1)), *((const void **)&v85 + 1), (size_t)&v40[-*((void *)&v85 + 1)]);
                uint64_t v40 = v41;
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v46[v45];
              *((void *)&v85 + 1) = v47;
              *(void *)&long long v86 = &v46[v45];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v86 + 8);
          *(void *)&long long v86 = v86 + 8;
          unint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      for (j = (void *)a1[2];
            j != (void *)a1[1];
            std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v85, j))
      {
        --j;
      }
      uint64_t v57 = (char *)*a1;
      long long v58 = v86;
      *(_OWORD *)a1 = v85;
      *((_OWORD *)a1 + 1) = v58;
      a1[4] -= v38;
      if (v57) {
        operator delete(v57);
      }
    }
  }
}

void sub_1DD84E314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 + ((a2 - *result) >> 2);
    if (v3 < 1) {
      result -= (unint64_t)(1023 - v3) >> 10;
    }
    else {
      result += (unint64_t)v3 >> 10;
    }
  }
  return result;
}

void std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__less<void,void>>(char *a1, unint64_t *a2, char *a3, unint64_t *a4)
{
  if (a4 == a2
    || (uint64_t v4 = (((uint64_t)a4 - *(void *)a3) >> 3) + ((a3 - a1) << 6), v5 = (uint64_t)a2 - *(void *)a1, v4 == v5 >> 3))
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 63 - __clz(v4 - (v5 >> 3));
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,false>(a1, a2, a3, a4, 2 * v6, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,false>(char *a1, unint64_t *a2, char *a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  BOOL v6 = a2 > a4;
  if (a2 == a4) {
    return;
  }
  unint64_t v9 = a4;
  uint64_t v11 = a2;
  unint64_t v13 = a2;
  while (1)
  {
    uint64_t v14 = a6;
    uint64_t v15 = *(unint64_t **)a3;
    unint64_t v242 = v9;
    uint64_t v16 = (uint64_t)v9 - *(void *)a3;
    uint64_t v17 = v16 >> 3;
    uint64_t v18 = (v16 >> 3) + ((a3 - a1) << 6);
    uint64_t v19 = *(char **)a1;
    unint64_t v20 = v18 - (((uint64_t)v11 - *(void *)a1) >> 3);
    if (!v6)
    {
      uint64_t v123 = (uint64_t)v242;
      switch(v20)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (v242 == v15) {
            uint64_t v123 = *((void *)a3 - 1) + 4096;
          }
          unint64_t v124 = *(void *)(v123 - 8);
          if (v124 < *v11)
          {
            unint64_t v125 = *v13;
            *unint64_t v13 = v124;
            *(void *)(v123 - 8) = v125;
          }
          return;
        case 3uLL:
          uint64_t v126 = (char *)v13 - v19;
          uint64_t v127 = ((char *)v13 - v19) >> 3;
          if (v126 < -7)
          {
            unint64_t v204 = 510 - v127;
            unint64_t v129 = &a1[-8 * (v204 >> 9)];
            unint64_t v130 = (unint64_t *)(*(void *)v129 + 8 * (~(_WORD)v204 & 0x1FF));
          }
          else
          {
            unint64_t v128 = v127 + 1;
            unint64_t v129 = &a1[8 * (v128 >> 9)];
            unint64_t v130 = (unint64_t *)(*(void *)v129 + 8 * (v128 & 0x1FF));
          }
          if (v242 == v15)
          {
            uint64_t v205 = *((void *)a3 - 1);
            a3 -= 8;
            uint64_t v123 = v205 + 4096;
          }
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, v13, (uint64_t)v129, v130, (uint64_t)a3, (unint64_t *)(v123 - 8));
          return;
        case 4uLL:
          uint64_t v131 = (char *)v13 - v19;
          uint64_t v132 = ((char *)v13 - v19) >> 3;
          if (v131 < -7)
          {
            unint64_t v133 = &a1[-8 * ((unint64_t)(510 - v132) >> 9)];
            uint64_t v134 = (unint64_t *)(*(void *)v133 + 8 * (~(510 - (_WORD)v132) & 0x1FF));
            if ((unint64_t)v131 < 0xFFFFFFFFFFFFFFF1)
            {
              unint64_t v216 = 509 - v132;
              char v206 = &a1[-8 * (v216 >> 9)];
              uint64_t v207 = (unint64_t *)(*(void *)v206 + 8 * (~(_WORD)v216 & 0x1FF));
LABEL_248:
              if (v242 == v15)
              {
                uint64_t v217 = *((void *)a3 - 1);
                a3 -= 8;
                uint64_t v123 = v217 + 4096;
              }
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, v13, (uint64_t)v133, v134, (uint64_t)v206, v207, (uint64_t)a3, (unint64_t *)(v123 - 8));
              return;
            }
            unint64_t v135 = 1;
          }
          else
          {
            unint64_t v133 = &a1[8 * ((unint64_t)(v132 + 1) >> 9)];
            uint64_t v134 = (unint64_t *)(*(void *)v133 + 8 * ((v132 + 1) & 0x1FF));
            unint64_t v135 = v132 + 2;
          }
          char v206 = &a1[8 * (v135 >> 9)];
          uint64_t v207 = (unint64_t *)(*(void *)v206 + 8 * (v135 & 0x1FF));
          goto LABEL_248;
        case 5uLL:
          uint64_t v136 = (char *)v13 - v19;
          uint64_t v137 = ((char *)v13 - v19) >> 3;
          if (v136 < -7)
          {
            uint64_t v138 = &a1[-8 * ((unint64_t)(510 - v137) >> 9)];
            uint64_t v139 = (unint64_t *)(*(void *)v138 + 8 * (~(510 - (_WORD)v137) & 0x1FF));
            if ((unint64_t)v136 < 0xFFFFFFFFFFFFFFF1)
            {
              unint64_t v208 = &a1[-8 * ((unint64_t)(509 - v137) >> 9)];
              uint64_t v209 = (unint64_t *)(*(void *)v208 + 8 * (~(509 - (_WORD)v137) & 0x1FF));
              if ((unint64_t)v136 < 0xFFFFFFFFFFFFFFE9)
              {
                unint64_t v236 = 508 - v137;
                unint64_t v211 = &a1[-8 * (v236 >> 9)];
                v212 = (unint64_t *)(*(void *)v211 + 8 * (~(_WORD)v236 & 0x1FF));
LABEL_237:
                if (v242 == v15)
                {
                  uint64_t v213 = *((void *)a3 - 1);
                  a3 -= 8;
                  uint64_t v123 = v213 + 4096;
                }
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, v13, (uint64_t)v138, v139, (uint64_t)v208, v209, (uint64_t)v211, v212, (uint64_t)a3, (unint64_t *)(v123 - 8));
                return;
              }
              unint64_t v210 = 1;
LABEL_236:
              unint64_t v211 = &a1[8 * (v210 >> 9)];
              v212 = (unint64_t *)(*(void *)v211 + 8 * (v210 & 0x1FF));
              goto LABEL_237;
            }
            unint64_t v140 = 1;
          }
          else
          {
            uint64_t v138 = &a1[8 * ((unint64_t)(v137 + 1) >> 9)];
            uint64_t v139 = (unint64_t *)(*(void *)v138 + 8 * ((v137 + 1) & 0x1FF));
            unint64_t v140 = v137 + 2;
          }
          unint64_t v208 = &a1[8 * (v140 >> 9)];
          uint64_t v209 = (unint64_t *)(*(void *)v208 + 8 * (v140 & 0x1FF));
          unint64_t v210 = v137 + 3;
          goto LABEL_236;
        default:
          JUMPOUT(0);
      }
    }
    if ((uint64_t)v20 <= 23) {
      break;
    }
    if (!a5)
    {
      if (v242 == v13) {
        return;
      }
      uint64_t v153 = (char *)v13 - v19;
      uint64_t v154 = v18 - (v153 >> 3);
      unint64_t v155 = v154 - 2;
      if (v154 < 2) {
        return;
      }
      uint64_t v238 = v153 >> 3;
      uint64_t v240 = a3;
      uint64_t v156 = v155 >> 1;
      uint64_t v157 = v155 >> 1;
      while (1)
      {
        uint64_t v158 = v157;
        unint64_t v159 = (char *)std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v13, v157);
        float64_t v161 = v160;
        if (v13 == v160) {
          break;
        }
        uint64_t v162 = ((v159 - a1) << 6) - v238 + (((uint64_t)v160 - *(void *)v159) >> 3);
        if (v156 >= v162) {
          goto LABEL_168;
        }
LABEL_188:
        uint64_t v157 = v158 - 1;
        if (!v158)
        {
          double v177 = v240;
          uint64_t v178 = (uint64_t)v242;
          do
          {
            v241 = v177;
            uint64_t v179 = 0;
            unint64_t v180 = *v13;
            unint64_t v181 = v13;
            unint64_t v182 = a1;
            do
            {
              uint64_t v183 = v181;
              if (v179 != -1)
              {
                uint64_t v184 = v179 + 1 + (((uint64_t)v181 - *(void *)v182) >> 3);
                if (v184 < 1)
                {
                  unint64_t v185 = 511 - v184;
                  v182 -= 8 * (v185 >> 9);
                  unint64_t v181 = (unint64_t *)(*(void *)v182 + 8 * (~(_WORD)v185 & 0x1FF));
                }
                else
                {
                  v182 += 8 * ((unint64_t)v184 >> 9);
                  unint64_t v181 = (unint64_t *)(*(void *)v182 + 8 * (v184 & 0x1FF));
                }
              }
              uint64_t v186 = (2 * v179) | 1;
              uint64_t v179 = 2 * v179 + 2;
              if (v179 >= v154
                || ((v187 = (uint64_t)v181 - *(void *)v182, uint64_t v188 = v187 >> 3, v187 < -7)
                  ? (uint64_t v189 = (unint64_t *)(*(void *)&v182[-8 * ((unint64_t)(510 - v188) >> 9)]
                                               + 8 * (~(510 - (_WORD)v188) & 0x1FF)))
                  : (uint64_t v189 = (unint64_t *)(*(void *)&v182[((unint64_t)(v188 + 1) >> 6) & 0x3FFFFFFFFFFFFF8]
                                               + 8 * ((v188 + 1) & 0x1FF))),
                    *v181 >= *v189))
              {
                uint64_t v179 = v186;
              }
              else if ((unint64_t *)((char *)++v181 - *(void *)v182) == (unint64_t *)4096)
              {
                unint64_t v190 = (unint64_t *)*((void *)v182 + 1);
                v182 += 8;
                unint64_t v181 = v190;
              }
              *uint64_t v183 = *v181;
            }
            while (v179 <= (uint64_t)((unint64_t)(v154 - 2) >> 1));
            uint64_t v191 = v178;
            if (v15 == (unint64_t *)v178) {
              uint64_t v191 = *((void *)v241 - 1) + 4096;
            }
            BOOL v192 = (unint64_t *)(v191 - 8);
            if (v192 == v181)
            {
              *unint64_t v181 = v180;
            }
            else
            {
              *unint64_t v181 = *v192;
              uint64_t v193 = (uint64_t)(v181 + 1);
              uint64_t v194 = *(void *)v182;
              if (v193 - *(void *)v182 == 4096)
              {
                uint64_t v195 = *((void *)v182 + 1);
                v182 += 8;
                uint64_t v193 = v195;
                uint64_t v194 = v195;
              }
              *BOOL v192 = v180;
              if ((unint64_t *)v193 != v13)
              {
                uint64_t v196 = ((v193 - v194) >> 3) - v238 + ((v182 - a1) << 6);
                BOOL v6 = v196 < 2;
                unint64_t v197 = v196 - 2;
                if (!v6)
                {
                  uint64_t v198 = v197 >> 1;
                  std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v13, v197 >> 1);
                  if (v194 == v193) {
                    uint64_t v193 = *((void *)v182 - 1) + 4096;
                  }
                  unint64_t v202 = *(void *)(v193 - 8);
                  double v201 = (unint64_t *)(v193 - 8);
                  unint64_t v200 = v202;
                  unint64_t v203 = *v199;
                  if (*v199 < v202)
                  {
                    do
                    {
                      *double v201 = v203;
                      double v201 = v199;
                      if (!v198) {
                        break;
                      }
                      uint64_t v198 = (unint64_t)(v198 - 1) >> 1;
                      std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v13, v198);
                      unint64_t v203 = *v199;
                    }
                    while (*v199 < v200);
                    *double v201 = v200;
                  }
                }
              }
            }
            if (v15 == (unint64_t *)v178)
            {
              double v177 = v241 - 8;
              uint64_t v15 = (unint64_t *)*((void *)v241 - 1);
              uint64_t v178 = (uint64_t)(v15 + 512);
            }
            else
            {
              double v177 = v241;
            }
            v178 -= 8;
            BOOL v6 = v154-- <= 2;
          }
          while (!v6);
          return;
        }
      }
      uint64_t v162 = 0;
LABEL_168:
      uint64_t v163 = 2 * v162;
      uint64_t v164 = (2 * v162) | 1;
      BOOL v165 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v13, v164);
      if (v163 + 2 < v154)
      {
        uint64_t v167 = (uint64_t)v166 - *v165;
        uint64_t v168 = v167 >> 3;
        uint64_t v169 = (unint64_t *)(v167 < -7
                                  ? v165[-((unint64_t)(510 - v168) >> 9)] + 8 * (~(510 - (_WORD)v168) & 0x1FF)
                                  : *(void *)((char *)v165
                                              + (((unint64_t)(v168 + 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                  + 8 * ((v168 + 1) & 0x1FF));
        if (*v166 < *v169)
        {
          if ((unint64_t *)((char *)++v166 - *v165) == (unint64_t *)4096) {
            BOOL v166 = (unint64_t *)v165[1];
          }
          uint64_t v164 = v163 + 2;
        }
      }
      unint64_t v170 = *v166;
      unint64_t v171 = *v161;
      if (*v166 >= *v161)
      {
        do
        {
          *float64_t v161 = v170;
          float64_t v161 = v166;
          if (v156 < v164) {
            break;
          }
          uint64_t v172 = 2 * v164;
          uint64_t v164 = (2 * v164) | 1;
          unint64_t v173 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v13, v164);
          if (v172 + 2 < v154)
          {
            uint64_t v174 = (uint64_t)v166 - *v173;
            uint64_t v175 = v174 >> 3;
            double v176 = (unint64_t *)(v174 < -7
                                      ? v173[-((unint64_t)(510 - v175) >> 9)]
                                      + 8 * (~(510 - (_WORD)v175) & 0x1FF)
                                      : *(void *)((char *)v173
                                                  + (((unint64_t)(v175 + 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                      + 8 * ((v175 + 1) & 0x1FF));
            if (*v166 < *v176)
            {
              if ((unint64_t *)((char *)++v166 - *v173) == (unint64_t *)4096) {
                BOOL v166 = (unint64_t *)v173[1];
              }
              uint64_t v164 = v172 + 2;
            }
          }
          unint64_t v170 = *v166;
        }
        while (*v166 >= v171);
        *float64_t v161 = v171;
      }
      goto LABEL_188;
    }
    uint64_t v21 = v20 >> 1;
    BOOL v22 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v11, v20 >> 1);
    if (v20 < 0x81)
    {
      if (v16 >= 9)
      {
        uint64_t v29 = &a3[8 * ((unint64_t)(v17 - 1) >> 9)];
        uint64_t v30 = (unint64_t *)(*(void *)v29 + 8 * ((v17 - 1) & 0x1FF));
      }
      else
      {
        uint64_t v29 = &a3[-8 * ((unint64_t)(512 - v17) >> 9)];
        uint64_t v30 = (unint64_t *)(*(void *)v29 + 8 * (~(512 - (_WORD)v17) & 0x1FF));
      }
      a6 = v14;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)v22, v23, (uint64_t)a1, v11, (uint64_t)v29, v30);
      unint64_t v9 = v242;
    }
    else
    {
      if (v16 >= 9)
      {
        uint64_t v24 = &a3[8 * ((unint64_t)(v17 - 1) >> 9)];
        unint64_t v25 = (unint64_t *)(*(void *)v24 + 8 * ((v17 - 1) & 0x1FF));
      }
      else
      {
        uint64_t v24 = &a3[-8 * ((unint64_t)(512 - v17) >> 9)];
        unint64_t v25 = (unint64_t *)(*(void *)v24 + 8 * (~(512 - (_WORD)v17) & 0x1FF));
      }
      uint64_t v237 = a5;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, v13, (uint64_t)v22, v23, (uint64_t)v24, v25);
      uint64_t v26 = (uint64_t)v11 - *(void *)a1;
      uint64_t v27 = v26 >> 3;
      unint64_t v9 = v242;
      if (v26 >= -7)
      {
        unint64_t v28 = v27 + 1;
        unsigned __int16 v32 = &a1[8 * (v28 >> 9)];
        uint64_t v33 = (unint64_t *)(*(void *)v32 + 8 * (v28 & 0x1FF));
      }
      else
      {
        unint64_t v31 = 510 - v27;
        unsigned __int16 v32 = &a1[-8 * (v31 >> 9)];
        uint64_t v33 = (unint64_t *)(*(void *)v32 + 8 * (~(_WORD)v31 & 0x1FF));
      }
      uint64_t v35 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v11, v21 - 1);
      uint64_t v36 = (uint64_t)v242 - *(void *)a3;
      uint64_t v37 = v36 >> 3;
      if (v36 < 17)
      {
        unint64_t v41 = 513 - v37;
        unint64_t v39 = &a3[-8 * (v41 >> 9)];
        uint64_t v40 = (unint64_t *)(*(void *)v39 + 8 * (~(_WORD)v41 & 0x1FF));
      }
      else
      {
        unint64_t v38 = v37 - 2;
        unint64_t v39 = &a3[8 * (v38 >> 9)];
        uint64_t v40 = (unint64_t *)(*(void *)v39 + 8 * (v38 & 0x1FF));
      }
      unint64_t v239 = a3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)v32, v33, (uint64_t)v35, v34, (uint64_t)v39, v40);
      uint64_t v42 = (uint64_t)v11 - *(void *)a1;
      uint64_t v43 = v42 >> 3;
      if (v42 < -15)
      {
        unint64_t v47 = 509 - v43;
        uint64_t v45 = &a1[-8 * (v47 >> 9)];
        uint64_t v46 = (unint64_t *)(*(void *)v45 + 8 * (~(_WORD)v47 & 0x1FF));
      }
      else
      {
        unint64_t v44 = v43 + 2;
        uint64_t v45 = &a1[8 * (v44 >> 9)];
        uint64_t v46 = (unint64_t *)(*(void *)v45 + 8 * (v44 & 0x1FF));
      }
      uint64_t v49 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v11, v21 + 1);
      uint64_t v50 = (uint64_t)v242 - *(void *)v239;
      uint64_t v51 = v50 >> 3;
      if (v50 < 25)
      {
        unint64_t v55 = 514 - v51;
        uint64_t v53 = &v239[-8 * (v55 >> 9)];
        unint64_t v54 = (unint64_t *)(*(void *)v53 + 8 * (~(_WORD)v55 & 0x1FF));
      }
      else
      {
        unint64_t v52 = v51 - 3;
        uint64_t v53 = &v239[8 * (v52 >> 9)];
        unint64_t v54 = (unint64_t *)(*(void *)v53 + 8 * (v52 & 0x1FF));
      }
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)v45, v46, (uint64_t)v49, v48, (uint64_t)v53, v54);
      uint64_t v56 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v11, v21 - 1);
      long long v58 = v57;
      uint64_t v59 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v11, v21);
      uint64_t v61 = v60;
      unint64_t v62 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v11, v21 + 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)v56, v58, (uint64_t)v59, v61, (uint64_t)v62, v63);
      std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v11, v21);
      unint64_t v64 = *v11;
      unint64_t *v11 = *v65;
      *uint64_t v65 = v64;
      a5 = v237;
      a3 = v239;
      a6 = v14;
    }
    --a5;
    if (a6)
    {
      unint64_t v66 = *v11;
      uint64_t v67 = *(char **)a1;
    }
    else
    {
      uint64_t v67 = *(char **)a1;
      uint64_t v68 = (uint64_t)v11 - *(void *)a1;
      uint64_t v69 = v68 >> 3;
      if (v68 >= 9) {
        uint64_t v70 = (unint64_t *)(*(void *)&a1[((unint64_t)(v69 - 1) >> 6) & 0x3FFFFFFFFFFFFF8]
      }
                                 + 8 * ((v69 - 1) & 0x1FF));
      else {
        uint64_t v70 = (unint64_t *)(*(void *)&a1[-8 * ((unint64_t)(512 - v69) >> 9)]
      }
                                 + 8 * (~(512 - (_WORD)v69) & 0x1FF));
      unint64_t v71 = *v70;
      unint64_t v66 = *v11;
      if (v71 >= *v11)
      {
        unint64_t v104 = *(unint64_t **)a3;
        uint64_t v105 = (uint64_t)v9 - *(void *)a3;
        uint64_t v106 = v105 >> 3;
        if (v105 >= 9) {
          uint64_t v109 = (unint64_t *)(*(void *)&a3[((unint64_t)(v106 - 1) >> 6) & 0x3FFFFFFFFFFFFF8]
        }
                                    + 8 * ((v106 - 1) & 0x1FF));
        else {
          uint64_t v109 = (unint64_t *)(*(void *)&a3[-8 * ((unint64_t)(512 - v106) >> 9)]
        }
                                    + 8 * (~(512 - (_WORD)v106) & 0x1FF));
        unint64_t v13 = v11;
        if (v66 >= *v109)
        {
          do
          {
            if ((char *)++v13 - v67 == 4096)
            {
              uint64_t v111 = (unint64_t *)*((void *)a1 + 1);
              a1 += 8;
              uint64_t v67 = (char *)v111;
              unint64_t v13 = v111;
            }
          }
          while ((a1 < a3 || a1 == a3 && v13 < v9) && v66 >= *v13);
        }
        else
        {
          do
          {
            if ((char *)++v13 - v67 == 4096)
            {
              BOOL v110 = (unint64_t *)*((void *)a1 + 1);
              a1 += 8;
              uint64_t v67 = (char *)v110;
              unint64_t v13 = v110;
            }
          }
          while (v66 >= *v13);
        }
        if (a1 < a3 || a1 == a3 && v13 < v9)
        {
          uint64_t v112 = a3;
          double v113 = v9;
          do
          {
            if (v113 == v104)
            {
              uint64_t v114 = (unint64_t *)*((void *)v112 - 1);
              v112 -= 8;
              unint64_t v104 = v114;
              double v113 = v114 + 512;
            }
            unint64_t v115 = *--v113;
          }
          while (v66 < v115);
        }
        else
        {
          uint64_t v112 = a3;
          double v113 = v9;
        }
        while (a1 < v112 || a1 == v112 && v13 < v113)
        {
          unint64_t v116 = *v13;
          *unint64_t v13 = *v113;
          *double v113 = v116;
          do
          {
            if ((char *)++v13 - v67 == 4096)
            {
              uint64_t v117 = (unint64_t *)*((void *)a1 + 1);
              a1 += 8;
              uint64_t v67 = (char *)v117;
              unint64_t v13 = v117;
            }
          }
          while (v66 >= *v13);
          do
          {
            if (v113 == v104)
            {
              uint64_t v118 = (unint64_t *)*((void *)v112 - 1);
              v112 -= 8;
              unint64_t v104 = v118;
              double v113 = v118 + 512;
            }
            unint64_t v119 = *--v113;
          }
          while (v66 < v119);
        }
        uint64_t v120 = (char *)v13 - v67;
        uint64_t v121 = ((char *)v13 - v67) >> 3;
        if (v120 >= 9) {
          __int16 v122 = (unint64_t *)(*(void *)&a1[((unint64_t)(v121 - 1) >> 6) & 0x3FFFFFFFFFFFFF8]
        }
                                    + 8 * ((v121 - 1) & 0x1FF));
        else {
          __int16 v122 = (unint64_t *)(*(void *)&a1[-8 * ((unint64_t)(512 - v121) >> 9)]
        }
                                    + 8 * (~(512 - (_WORD)v121) & 0x1FF));
        if (v122 != v11) {
          unint64_t *v11 = *v122;
        }
        a6 = 0;
        unint64_t *v122 = v66;
        goto LABEL_132;
      }
    }
    int64_t v72 = a1;
    uint64_t v73 = v11;
    do
    {
      if ((char *)++v73 - v67 == 4096)
      {
        unint64_t v74 = (unint64_t *)*((void *)v72 + 1);
        v72 += 8;
        uint64_t v67 = (char *)v74;
        uint64_t v73 = v74;
      }
      unint64_t v75 = *v73;
    }
    while (*v73 < v66);
    uint64_t v76 = ((char *)v73 - v67) >> 3;
    if ((char *)v73 - v67 >= 9) {
      uint64_t v77 = *(void *)&v72[((unint64_t)(v76 - 1) >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * ((v76 - 1) & 0x1FF);
    }
    else {
      uint64_t v77 = *(void *)&v72[-8 * ((unint64_t)(512 - v76) >> 9)] + 8 * (~(512 - (_WORD)v76) & 0x1FF);
    }
    uint64_t v78 = a3;
    uint64_t v79 = v9;
    if ((unint64_t *)v77 == v11)
    {
      do
      {
        if (v72 >= v78 && (v72 != v78 || v73 >= v79)) {
          break;
        }
        if (v79 == *(unint64_t **)v78)
        {
          uint64_t v83 = *((void *)v78 - 1);
          v78 -= 8;
          uint64_t v79 = (unint64_t *)(v83 + 4096);
        }
        unint64_t v84 = *--v79;
      }
      while (v84 >= v66);
    }
    else
    {
      uint64_t v80 = *(unint64_t **)a3;
      uint64_t v78 = a3;
      uint64_t v79 = v9;
      do
      {
        if (v79 == v80)
        {
          uint64_t v81 = (unint64_t *)*((void *)v78 - 1);
          v78 -= 8;
          uint64_t v80 = v81;
          uint64_t v79 = v81 + 512;
        }
        unint64_t v82 = *--v79;
      }
      while (v82 >= v66);
    }
    BOOL v86 = v72 != v78 || v73 >= v79;
    if (v72 < v78) {
      BOOL v86 = 0;
    }
    while (v72 < v78 || v72 == v78 && v73 < v79)
    {
      *uint64_t v73 = *v79;
      *uint64_t v79 = v75;
      do
      {
        if ((char *)++v73 - v67 == 4096)
        {
          double v87 = (unint64_t *)*((void *)v72 + 1);
          v72 += 8;
          uint64_t v67 = (char *)v87;
          uint64_t v73 = v87;
        }
        unint64_t v75 = *v73;
      }
      while (*v73 < v66);
      unint64_t v88 = *(unint64_t **)v78;
      do
      {
        if (v79 == v88)
        {
          unint64_t v89 = (unint64_t *)*((void *)v78 - 1);
          v78 -= 8;
          unint64_t v88 = v89;
          uint64_t v79 = v89 + 512;
        }
        unint64_t v90 = *--v79;
      }
      while (v90 >= v66);
    }
    uint64_t v91 = a5;
    uint64_t v92 = (char *)v73 - v67;
    uint64_t v93 = v92 >> 3;
    if (v92 >= 9)
    {
      unint64_t v94 = v93 - 1;
      uint64_t v96 = &v72[8 * (v94 >> 9)];
      unint64_t v97 = (unint64_t *)(*(void *)v96 + 8 * (v94 & 0x1FF));
    }
    else
    {
      unint64_t v95 = 512 - v93;
      uint64_t v96 = &v72[-8 * (v95 >> 9)];
      unint64_t v97 = (unint64_t *)(*(void *)v96 + 8 * (~(_WORD)v95 & 0x1FF));
    }
    if (v97 != v11) {
      unint64_t *v11 = *v97;
    }
    *unint64_t v97 = v66;
    if (v86)
    {
      int v98 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(a1, v11, v96, v97);
      uint64_t v99 = (uint64_t)v97 - *(void *)v96;
      uint64_t v100 = v99 >> 3;
      if (v99 < -7)
      {
        unint64_t v107 = 510 - v100;
        unint64_t v102 = &v96[-8 * (v107 >> 9)];
        unint64_t v103 = (unint64_t *)(*(void *)v102 + 8 * (~(_WORD)v107 & 0x1FF));
      }
      else
      {
        unint64_t v101 = v100 + 1;
        unint64_t v102 = &v96[8 * (v101 >> 9)];
        unint64_t v103 = (unint64_t *)(*(void *)v102 + 8 * (v101 & 0x1FF));
      }
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(v102, v103, a3, v9))
      {
        unint64_t v13 = v11;
        unint64_t v9 = v97;
        a3 = v96;
        a5 = v91;
        if (v98) {
          return;
        }
        goto LABEL_132;
      }
      if (v98)
      {
        unint64_t v13 = v97 + 1;
        if ((unint64_t *)((char *)v97 - *(void *)v96 + 8) != (unint64_t *)4096) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,false>(a1, v11, v96, v97, v91, a6 & 1);
    unint64_t v13 = v97 + 1;
    if ((unint64_t *)((char *)v97 - *(void *)v96 + 8) == (unint64_t *)4096)
    {
      a6 = 0;
LABEL_94:
      uint64_t v108 = (unint64_t *)*((void *)v96 + 1);
      v96 += 8;
      unint64_t v13 = v108;
      goto LABEL_95;
    }
    a6 = 0;
LABEL_95:
    a1 = v96;
    a5 = v91;
LABEL_132:
    uint64_t v11 = v13;
    BOOL v6 = v9 > v13;
    if (v9 == v13) {
      return;
    }
  }
  if (v14)
  {
    if (v242 == v13) {
      return;
    }
    for (uint64_t i = v13 + 1; ; ++i)
    {
      if ((char *)i - v19 == 4096)
      {
        double v142 = (char *)*((void *)a1 + 1);
        a1 += 8;
        uint64_t v19 = v142;
        uint64_t i = (unint64_t *)v142;
      }
      if (i == v242) {
        break;
      }
      double v143 = a1;
      uint64_t v144 = (uint64_t)i;
      if (i == (unint64_t *)v19)
      {
        double v143 = a1 - 8;
        uint64_t v144 = *((void *)a1 - 1) + 4096;
      }
      unint64_t v147 = *(void *)(v144 - 8);
      uint64_t v145 = (unint64_t *)(v144 - 8);
      unint64_t v146 = v147;
      unint64_t v148 = *i;
      if (*i < v147)
      {
        unint64_t v149 = i;
        while (1)
        {
          unint64_t *v149 = v146;
          if (v145 == v13) {
            break;
          }
          uint64_t v152 = v145;
          if (v145 == *(unint64_t **)v143)
          {
            uint64_t v150 = *((void *)v143 - 1);
            v143 -= 8;
            uint64_t v145 = (unint64_t *)(v150 + 4096);
          }
          unint64_t v151 = *--v145;
          unint64_t v146 = v151;
          unint64_t v149 = v152;
          if (v148 >= v151) {
            goto LABEL_160;
          }
        }
        uint64_t v152 = v13;
LABEL_160:
        *uint64_t v152 = v148;
      }
    }
  }
  else if (v242 != v13)
  {
    uint64_t v214 = (char *)v13 - v19;
    uint64_t v215 = ((char *)v13 - v19) >> 3;
    if (v214 >= -7)
    {
      __int16 v219 = v215 + 1;
      double v220 = &a1[8 * ((unint64_t)(v215 + 1) >> 9)];
    }
    else
    {
      unint64_t v218 = 510 - v215;
      __int16 v219 = ~(_WORD)v218;
      double v220 = &a1[-8 * (v218 >> 9)];
    }
    double v221 = *(char **)v220;
    double v222 = (unint64_t *)(*(void *)v220 + 8 * (v219 & 0x1FF));
    while (v222 != v242)
    {
      uint64_t v223 = ((char *)v222 - v221) >> 3;
      if ((char *)v222 - v221 >= 9)
      {
        __int16 v225 = v223 - 1;
        uint64_t v226 = &v220[8 * ((unint64_t)(v223 - 1) >> 9)];
      }
      else
      {
        unint64_t v224 = 512 - v223;
        __int16 v225 = ~(_WORD)v224;
        uint64_t v226 = &v220[-8 * (v224 >> 9)];
      }
      uint64_t v227 = *(unint64_t **)v226;
      unint64_t v228 = (unint64_t *)(*(void *)v226 + 8 * (v225 & 0x1FF));
      unint64_t v229 = *v222;
      unint64_t v230 = *v228;
      if (*v222 < *v228)
      {
        uint64_t v231 = v222;
        do
        {
          unint64_t v232 = v228;
          *uint64_t v231 = v230;
          if (v228 == v227)
          {
            uint64_t v233 = (unint64_t *)*((void *)v226 - 1);
            v226 -= 8;
            uint64_t v227 = v233;
            unint64_t v228 = v233 + 512;
          }
          unint64_t v234 = *--v228;
          unint64_t v230 = v234;
          uint64_t v231 = v232;
        }
        while (v229 < v234);
        unint64_t *v232 = v229;
      }
      if ((char *)++v222 - v221 == 4096)
      {
        unint64_t v235 = (char *)*((void *)v220 + 1);
        v220 += 8;
        double v221 = v235;
        double v222 = (unint64_t *)v235;
      }
    }
  }
}

void *std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 + ((a2 - *result) >> 3);
    if (v3 < 1) {
      result -= (unint64_t)(511 - v3) >> 9;
    }
    else {
      result += (unint64_t)v3 >> 9;
    }
  }
  return result;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  unint64_t v6 = *a4;
  unint64_t v7 = *a2;
  unint64_t v8 = *a6;
  if (*a4 >= *a2)
  {
    if (v8 < v6)
    {
      *a4 = v8;
      *a6 = v6;
      unint64_t v9 = *a2;
      if (*a4 < *a2)
      {
        *a2 = *a4;
        *a4 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *a2 = v6;
      *a4 = v7;
      if (*a6 >= v7) {
        return;
      }
      *a4 = *a6;
    }
    else
    {
      *a2 = v8;
    }
    *a6 = v7;
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(char *a1, unint64_t *a2, char *a3, unint64_t *a4)
{
  if (a4 == a2) {
    return 1;
  }
  uint64_t v4 = (uint64_t)a4;
  uint64_t v5 = (uint64_t)a3;
  unint64_t v7 = *(unint64_t **)a3;
  uint64_t v8 = (uint64_t)a2 - *(void *)a1;
  uint64_t v9 = v8 >> 3;
  BOOL v10 = 1;
  switch((((uint64_t)a4 - *(void *)a3) >> 3) + ((a3 - a1) << 6) - (v8 >> 3))
  {
    case 0:
    case 1:
      return v10;
    case 2:
      if (v7 == a4) {
        uint64_t v4 = *((void *)a3 - 1) + 4096;
      }
      unint64_t v11 = *(void *)(v4 - 8);
      unint64_t v12 = *a2;
      if (v11 < *a2)
      {
        *a2 = v11;
        *(void *)(v4 - 8) = v12;
      }
      return 1;
    case 3:
      if (v8 < -7)
      {
        uint64_t v17 = &a1[-8 * ((unint64_t)(510 - v9) >> 9)];
        uint64_t v18 = (unint64_t *)(*(void *)v17 + 8 * (~(510 - (_WORD)v9) & 0x1FF));
      }
      else
      {
        uint64_t v17 = &a1[8 * ((unint64_t)(v9 + 1) >> 9)];
        uint64_t v18 = (unint64_t *)(*(void *)v17 + 8 * (((_WORD)v9 + 1) & 0x1FF));
      }
      if (v7 == (unint64_t *)v4)
      {
        uint64_t v27 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v27 + 4096;
      }
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, a2, (uint64_t)v17, v18, v5, (unint64_t *)(v4 - 8));
      return 1;
    case 4:
      if (v8 >= -7)
      {
        BOOL v22 = &a1[8 * ((unint64_t)(v9 + 1) >> 9)];
        uint64_t v23 = (unint64_t *)(*(void *)v22 + 8 * ((v9 + 1) & 0x1FF));
        unint64_t v24 = v9 + 2;
LABEL_31:
        uint64_t v34 = &a1[8 * (v24 >> 9)];
        uint64_t v35 = (unint64_t *)(*(void *)v34 + 8 * (v24 & 0x1FF));
        goto LABEL_54;
      }
      BOOL v22 = &a1[-8 * ((unint64_t)(510 - v9) >> 9)];
      uint64_t v23 = (unint64_t *)(*(void *)v22 + 8 * (~(510 - (_WORD)v9) & 0x1FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFF1)
      {
        unint64_t v24 = 1;
        goto LABEL_31;
      }
      uint64_t v34 = &a1[-8 * ((unint64_t)(509 - v9) >> 9)];
      uint64_t v35 = (unint64_t *)(*(void *)v34 + 8 * (~(509 - (_WORD)v9) & 0x1FF));
LABEL_54:
      if (v7 == (unint64_t *)v4)
      {
        uint64_t v55 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v55 + 4096;
      }
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, a2, (uint64_t)v22, v23, (uint64_t)v34, v35, v5, (unint64_t *)(v4 - 8));
      return 1;
    case 5:
      if (v8 >= -7)
      {
        uint64_t v19 = &a1[8 * ((unint64_t)(v9 + 1) >> 9)];
        unint64_t v20 = (unint64_t *)(*(void *)v19 + 8 * ((v9 + 1) & 0x1FF));
        unint64_t v21 = v9 + 2;
LABEL_24:
        unint64_t v28 = &a1[8 * (v21 >> 9)];
        uint64_t v29 = (unint64_t *)(*(void *)v28 + 8 * (v21 & 0x1FF));
        unint64_t v30 = v9 + 3;
LABEL_25:
        unint64_t v31 = &a1[8 * (v30 >> 9)];
        unsigned __int16 v32 = (unint64_t *)(*(void *)v31 + 8 * (v30 & 0x1FF));
        goto LABEL_26;
      }
      uint64_t v19 = &a1[-8 * ((unint64_t)(510 - v9) >> 9)];
      unint64_t v20 = (unint64_t *)(*(void *)v19 + 8 * (~(510 - (_WORD)v9) & 0x1FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFF1)
      {
        unint64_t v21 = 1;
        goto LABEL_24;
      }
      unint64_t v28 = &a1[-8 * ((unint64_t)(509 - v9) >> 9)];
      uint64_t v29 = (unint64_t *)(*(void *)v28 + 8 * (~(509 - (_WORD)v9) & 0x1FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFE9)
      {
        unint64_t v30 = 1;
        goto LABEL_25;
      }
      unint64_t v31 = &a1[-8 * ((unint64_t)(508 - v9) >> 9)];
      unsigned __int16 v32 = (unint64_t *)(*(void *)v31 + 8 * (~(508 - (_WORD)v9) & 0x1FF));
LABEL_26:
      if (v7 == (unint64_t *)v4)
      {
        uint64_t v33 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v33 + 4096;
      }
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, a2, (uint64_t)v19, v20, (uint64_t)v28, v29, (uint64_t)v31, v32, v5, (unint64_t *)(v4 - 8));
      return 1;
    default:
      if (v8 <= -16)
      {
        unint64_t v13 = (unint64_t **)&a1[-8 * ((unint64_t)(509 - v9) >> 9)];
        uint64_t v14 = &(*v13)[~(509 - (_WORD)v9) & 0x1FF];
        unint64_t v16 = 510 - v9;
        goto LABEL_17;
      }
      unint64_t v13 = (unint64_t **)&a1[8 * ((unint64_t)(v9 + 2) >> 9)];
      uint64_t v14 = &(*v13)[(v9 + 2) & 0x1FF];
      unint64_t v15 = v9 + 1;
      if (v9 == -1)
      {
        unint64_t v16 = 511;
LABEL_17:
        unint64_t v25 = &a1[-8 * (v16 >> 9)];
        uint64_t v26 = (unint64_t *)(*(void *)v25 + 8 * (~(_WORD)v16 & 0x1FF));
        goto LABEL_33;
      }
      unint64_t v25 = &a1[8 * (v15 >> 9)];
      uint64_t v26 = (unint64_t *)(*(void *)v25 + 8 * (v15 & 0x1FF));
LABEL_33:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, a2, (uint64_t)v25, v26, (uint64_t)v13, v14);
      uint64_t v36 = *v13;
      uint64_t v37 = (char *)v14 - (char *)*v13;
      uint64_t v38 = v37 >> 3;
      if (v37 < -7)
      {
        unint64_t v43 = 510 - v38;
        uint64_t v40 = &v13[-(v43 >> 9)];
        unint64_t v41 = *v40;
        uint64_t v42 = ~v43 & 0x1FFLL;
      }
      else
      {
        unint64_t v39 = v38 + 1;
        uint64_t v40 = &v13[v39 >> 9];
        unint64_t v41 = *v40;
        uint64_t v42 = v39 & 0x1FF;
      }
      unint64_t v44 = &v41[v42];
      if (v44 == (unint64_t *)v4) {
        return 1;
      }
      int v45 = 0;
      while (1)
      {
        uint64_t v46 = v44;
        unint64_t v47 = v40;
        unint64_t v48 = v41;
        unint64_t v49 = *v44;
        unint64_t v50 = *v14;
        if (v49 < *v14)
        {
          uint64_t v51 = v46;
          while (1)
          {
            unint64_t *v51 = v50;
            if (v14 == a2) {
              break;
            }
            unint64_t v52 = v14;
            if (v14 == v36)
            {
              uint64_t v53 = *--v13;
              uint64_t v36 = v53;
              uint64_t v14 = v53 + 512;
            }
            unint64_t v54 = *--v14;
            unint64_t v50 = v54;
            uint64_t v51 = v52;
            if (v49 >= v54) {
              goto LABEL_46;
            }
          }
          unint64_t v52 = a2;
LABEL_46:
          *unint64_t v52 = v49;
          if (++v45 == 8) {
            break;
          }
        }
        unint64_t v44 = v46 + 1;
        unint64_t v41 = v48;
        uint64_t v40 = v47;
        if ((char *)(v46 + 1) - (char *)v48 == 4096)
        {
          uint64_t v40 = v47 + 1;
          unint64_t v41 = v47[1];
          unint64_t v44 = v41;
        }
        uint64_t v36 = v48;
        unint64_t v13 = v47;
        uint64_t v14 = v46;
        if (v44 == (unint64_t *)v4) {
          return 1;
        }
      }
      uint64_t v57 = v46 + 1;
      if ((char *)(v46 + 1) - (char *)v48 == 4096) {
        uint64_t v57 = v47[1];
      }
      BOOL v10 = v57 == (unint64_t *)v4;
      break;
  }
  return v10;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7, unint64_t *a8)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(a1, a2, a3, a4, a5, a6);
  unint64_t v12 = *a6;
  if (*a8 < *a6)
  {
    *a6 = *a8;
    *a8 = v12;
    unint64_t v13 = *a4;
    if (*a6 < *a4)
    {
      *a4 = *a6;
      *a6 = v13;
      unint64_t v14 = *a2;
      if (*a4 < *a2)
      {
        *a2 = *a4;
        *a4 = v14;
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7, unint64_t *a8, uint64_t a9, unint64_t *a10)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(a1, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v14 = *a8;
  if (*a10 < *a8)
  {
    *a8 = *a10;
    *a10 = v14;
    unint64_t v15 = *a6;
    if (*a8 < *a6)
    {
      *a6 = *a8;
      *a8 = v15;
      unint64_t v16 = *a4;
      if (*a6 < *a4)
      {
        *a4 = *a6;
        *a6 = v16;
        unint64_t v17 = *a2;
        if (*a4 < *a2)
        {
          *a2 = *a4;
          *a4 = v17;
        }
      }
    }
  }
}

void std::deque<std::pair<unsigned short,unsigned short>>::erase(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = (char *)(v5 + 8 * (v4 >> 10));
  if (v6 == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)v7 + 4 * (*(void *)(a1 + 32) & 0x3FFLL);
  }
  if (v8 == a3) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = ((a3 - *(void *)a2) >> 2) + ((a2 - v7) << 7) - ((v8 - *(void *)v7) >> 2);
  }
  BOOL v10 = std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100]((void *)(v5 + 8 * (v4 >> 10)), v8, v9);
  unint64_t v12 = (unint64_t)v10;
  unint64_t v13 = v11;
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = v11 - *v10;
  uint64_t v16 = v15 >> 2;
  if (v9 <= (unint64_t)(v14 - 1) >> 1)
  {
    if (v15 < -3)
    {
      unint64_t v20 = &v10[-((unint64_t)(1022 - v16) >> 10)];
      uint64_t v21 = *v20 + 4 * (~(1022 - (_WORD)v16) & 0x3FF);
    }
    else
    {
      unint64_t v20 = &v10[(unint64_t)(v16 + 1) >> 10];
      uint64_t v21 = *v20 + 4 * (((_WORD)v16 + 1) & 0x3FF);
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>(v27, (uint64_t *)(v5 + 8 * (v4 >> 10)), v8, v10, v11, v20, v21);
    int64x2_t v26 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1DD8CEB50);
    *(int64x2_t *)(a1 + 32) = v26;
    if (v26.i64[0] >= 0x800uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(void *)(a1 + 8) += 8;
      *(void *)(a1 + 32) -= 1024;
    }
  }
  else
  {
    if (v15 < -3)
    {
      unint64_t v22 = 1022 - v16;
      uint64_t v18 = (char **)&v10[-(v22 >> 10)];
      uint64_t v19 = &(*v18)[4 * (~(_WORD)v22 & 0x3FF)];
    }
    else
    {
      unint64_t v17 = v16 + 1;
      uint64_t v18 = (char **)&v10[v17 >> 10];
      uint64_t v19 = &(*v18)[4 * (v17 & 0x3FF)];
    }
    unint64_t v23 = v14 + v4;
    unint64_t v24 = (char **)(v5 + 8 * (v23 >> 10));
    if (v6 == v5) {
      unint64_t v25 = 0;
    }
    else {
      unint64_t v25 = &(*v24)[4 * (v23 & 0x3FF)];
    }
    v27[0].n128_u64[0] = v12;
    v27[0].n128_u64[1] = v13;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>>>(v18, v19, v24, v25, (char **)v27);
    --*(void *)(a1 + 40);
    std::deque<std::pair<unsigned short,unsigned short>>::__maybe_remove_back_spare[abi:ne180100]((void *)a1);
  }
}

void std::deque<unsigned long>::resize(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[5];
  BOOL v5 = a2 >= v4;
  BOOL v6 = a2 > v4;
  unint64_t v7 = a2 - v4;
  if (v6)
  {
    std::deque<unsigned long>::__append(a1, v7);
  }
  else if (!v5)
  {
    unint64_t v8 = a1[4];
    uint64_t v10 = a1[1];
    uint64_t v9 = a1[2];
    uint64_t v11 = (void *)(v10 + 8 * (v8 >> 9));
    if (v9 == v10)
    {
      unint64_t v12 = (char *)std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](v11, 0, a2);
      uint64_t v15 = 0;
      uint64_t v14 = (char *)(v10 + 8 * ((v8 + v4) >> 9));
    }
    else
    {
      unint64_t v12 = (char *)std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](v11, *v11 + 8 * (v8 & 0x1FF), a2);
      uint64_t v14 = (char *)(v10 + 8 * ((v8 + v4) >> 9));
      uint64_t v15 = *(void *)v14 + 8 * ((v8 + v4) & 0x1FF);
    }
    if (v15 != v13)
    {
      uint64_t v16 = ((v15 - *(void *)v14) >> 3) + ((v14 - v12) << 6) - ((v13 - *(void *)v12) >> 3);
      if (v16 >= 1)
      {
        a1[5] = v4 - v16;
        while ((std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0)
          ;
      }
    }
  }
}

BOOL std::deque<std::pair<unsigned short,unsigned short>>::__maybe_remove_back_spare[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 7) - 1;
  }
  unint64_t v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x800)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x7FF;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>(__n128 *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  if (a2 == a4)
  {
    uint64_t v19 = a3;
    uint64_t v18 = a5;
    uint64_t v15 = a6;
    uint64_t v16 = a7;
  }
  else
  {
    uint64_t v13 = a4 - 1;
    uint64_t v12 = *a4;
    uint64_t v14 = a5;
    uint64_t v15 = a6;
    uint64_t v16 = a7;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v21, v12, v14, v15, v16);
      uint64_t v16 = v22.n128_i64[1];
      uint64_t v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a2) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a2 + 4096;
    uint64_t v19 = a3;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v21, v19, v18, v15, v16);
  __n128 result = v22;
  a1->n128_u64[0] = (unint64_t)a4;
  a1->n128_u64[1] = a5;
  a1[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(void *result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    uint64_t v5 = *a4;
    uint64_t v6 = a3;
    while (1)
    {
      if ((v6 - a2) >> 2 >= (a5 - v5) >> 2) {
        uint64_t v7 = (a5 - v5) >> 2;
      }
      else {
        uint64_t v7 = (v6 - a2) >> 2;
      }
      if (v7)
      {
        unint64_t v8 = (__int16 *)(v6 - 2);
        uint64_t v9 = -4 * v7;
        do
        {
          *(_WORD *)(a5 - 4) = *(v8 - 1);
          a5 -= 4;
          __int16 v10 = *v8;
          v8 -= 2;
          *(_WORD *)(a5 + 2) = v10;
          v9 += 4;
        }
        while (v9);
      }
      v6 -= 4 * v7;
      if (v6 == a2) {
        break;
      }
      uint64_t v11 = *--a4;
      uint64_t v5 = v11;
      a5 = v11 + 4096;
    }
    if (v5 + 4096 == a5)
    {
      uint64_t v12 = a4[1];
      ++a4;
      a5 = v12;
    }
  }
  *__n128 result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>>>(char **a1, char *a2, char **a3, char *a4, char **a5)
{
  uint64_t v7 = *a5;
  unint64_t v8 = a5[1];
  if (a1 != a3)
  {
    __int16 v10 = a1 + 1;
    for (uint64_t i = *a1 + 4096; ; uint64_t i = v12 + 4096)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v14, a2, i, v7, v8);
      unint64_t v8 = (char *)*((void *)&v15 + 1);
      uint64_t v7 = (char *)v15;
      *a5 = (char *)v15;
      a5[1] = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v14, a2, a4, v7, v8);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char **std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(char **result, char *a2, char *a3, char *a4, char *a5)
{
  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    uint64_t v5 = *(_WORD **)a4;
    while (1)
    {
      uint64_t v6 = (char *)(v5 + 2048);
      if ((a3 - a2) >> 2 >= (v6 - a5) >> 2) {
        uint64_t v7 = (v6 - a5) >> 2;
      }
      else {
        uint64_t v7 = (a3 - a2) >> 2;
      }
      if (v7)
      {
        unint64_t v8 = &a2[4 * v7];
        do
        {
          *(_WORD *)a5 = *(_WORD *)a2;
          *((_WORD *)a5 + 1) = *((_WORD *)a2 + 1);
          a5 += 4;
          a2 += 4;
        }
        while (a2 != v8);
        a2 = v8;
      }
      if (a2 == a3) {
        break;
      }
      uint64_t v9 = (_WORD *)*((void *)a4 + 1);
      a4 += 8;
      uint64_t v5 = v9;
      a5 = (char *)v9;
    }
    if (v6 == a5)
    {
      __int16 v10 = (char *)*((void *)a4 + 1);
      a4 += 8;
      a5 = v10;
    }
  }
  *double result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

uint64_t std::deque<unsigned long>::deque(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2) {
    std::deque<unsigned long>::__append((void *)a1, a2);
  }
  return a1;
}

void sub_1DD85021C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void std::deque<unsigned long>::__append(void *a1, unint64_t a2)
{
  unint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  unint64_t v10 = v9 + v8;
  unint64_t v11 = v7 - (v9 + v8);
  BOOL v12 = a2 >= v11;
  unint64_t v13 = a2 - v11;
  if (v13 != 0 && v12)
  {
    if (v5 == v4) {
      unint64_t v14 = v13 + 1;
    }
    else {
      unint64_t v14 = v13;
    }
    if ((v14 & 0x1FF) != 0) {
      unint64_t v15 = (v14 >> 9) + 1;
    }
    else {
      unint64_t v15 = v14 >> 9;
    }
    if (v15 >= v8 >> 9) {
      unint64_t v16 = v8 >> 9;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v15 <= v8 >> 9)
    {
      for (a1[4] = v8 - (v16 << 9); v16; --v16)
      {
        unint64_t v25 = (void *)a1[1];
        uint64_t v28 = *v25;
        int64x2_t v26 = (char *)(v25 + 1);
        uint64_t v27 = v28;
        a1[1] = v26;
        if (v5 == (char *)a1[3])
        {
          uint64_t v29 = (uint64_t)&v26[-*a1];
          if ((unint64_t)v26 <= *a1)
          {
            if (v5 == (char *)*a1) {
              unint64_t v37 = 1;
            }
            else {
              unint64_t v37 = (uint64_t)&v5[-*a1] >> 2;
            }
            uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v37);
            uint64_t v40 = &v38[8 * (v37 >> 2)];
            unint64_t v41 = (uint64_t *)a1[1];
            uint64_t v5 = v40;
            uint64_t v42 = a1[2] - (void)v41;
            if (v42)
            {
              uint64_t v5 = &v40[v42 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v43 = 8 * (v42 >> 3);
              unint64_t v44 = &v38[8 * (v37 >> 2)];
              do
              {
                uint64_t v45 = *v41++;
                *(void *)unint64_t v44 = v45;
                v44 += 8;
                v43 -= 8;
              }
              while (v43);
            }
            uint64_t v46 = (char *)*a1;
            *a1 = v38;
            a1[1] = v40;
            a1[2] = v5;
            a1[3] = &v38[8 * v39];
            if (v46)
            {
              operator delete(v46);
              uint64_t v5 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v30 = v29 >> 3;
            BOOL v31 = v29 >> 3 < -1;
            uint64_t v32 = (v29 >> 3) + 2;
            if (v31) {
              uint64_t v33 = v32;
            }
            else {
              uint64_t v33 = v30 + 1;
            }
            uint64_t v34 = &v26[-8 * (v33 >> 1)];
            int64_t v35 = v5 - v26;
            if (v5 != v26)
            {
              memmove(&v26[-8 * (v33 >> 1)], v26, v5 - v26);
              uint64_t v5 = (char *)a1[1];
            }
            uint64_t v36 = &v5[-8 * (v33 >> 1)];
            uint64_t v5 = &v34[v35];
            a1[1] = v36;
            a1[2] = &v34[v35];
          }
        }
        *(void *)uint64_t v5 = v27;
        uint64_t v5 = (char *)(a1[2] + 8);
        a1[2] = v5;
      }
    }
    else
    {
      unint64_t v17 = v15 - v16;
      uint64_t v18 = a1[3] - *a1;
      if (v15 - v16 <= (v18 >> 3) - (v6 >> 3))
      {
        if (v17)
        {
          while (a1[3] != a1[2])
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_back(a1, __p);
            --v15;
            if (!--v17)
            {
              uint64_t v5 = (char *)a1[2];
              goto LABEL_81;
            }
          }
          for (uint64_t i = 0; i != v17; ++i)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_front((uint64_t)a1, __p);
            uint64_t v5 = (char *)a1[2];
            if (&v5[-a1[1]] == (char *)8) {
              uint64_t v73 = 511;
            }
            else {
              uint64_t v73 = 512;
            }
            uint64_t v74 = v73 + a1[4];
            a1[4] = v74;
          }
          unint64_t v16 = v15;
        }
        else
        {
LABEL_81:
          uint64_t v74 = a1[4];
        }
        for (a1[4] = v74 - (v16 << 9); v16; --v16)
        {
          unint64_t v75 = (void *)a1[1];
          uint64_t v78 = *v75;
          uint64_t v76 = (char *)(v75 + 1);
          uint64_t v77 = v78;
          a1[1] = v76;
          if (v5 == (char *)a1[3])
          {
            uint64_t v79 = (uint64_t)&v76[-*a1];
            if ((unint64_t)v76 <= *a1)
            {
              if (v5 == (char *)*a1) {
                unint64_t v86 = 1;
              }
              else {
                unint64_t v86 = (uint64_t)&v5[-*a1] >> 2;
              }
              double v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v86);
              unint64_t v89 = &v87[8 * (v86 >> 2)];
              unint64_t v90 = (uint64_t *)a1[1];
              uint64_t v5 = v89;
              uint64_t v91 = a1[2] - (void)v90;
              if (v91)
              {
                uint64_t v5 = &v89[v91 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v92 = 8 * (v91 >> 3);
                uint64_t v93 = &v87[8 * (v86 >> 2)];
                do
                {
                  uint64_t v94 = *v90++;
                  *(void *)uint64_t v93 = v94;
                  v93 += 8;
                  v92 -= 8;
                }
                while (v92);
              }
              unint64_t v95 = (char *)*a1;
              *a1 = v87;
              a1[1] = v89;
              a1[2] = v5;
              a1[3] = &v87[8 * v88];
              if (v95)
              {
                operator delete(v95);
                uint64_t v5 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v80 = v79 >> 3;
              BOOL v31 = v79 >> 3 < -1;
              uint64_t v81 = (v79 >> 3) + 2;
              if (v31) {
                uint64_t v82 = v81;
              }
              else {
                uint64_t v82 = v80 + 1;
              }
              uint64_t v83 = &v76[-8 * (v82 >> 1)];
              int64_t v84 = v5 - v76;
              if (v5 != v76)
              {
                memmove(&v76[-8 * (v82 >> 1)], v76, v5 - v76);
                uint64_t v5 = (char *)a1[1];
              }
              long long v85 = &v5[-8 * (v82 >> 1)];
              uint64_t v5 = &v83[v84];
              a1[1] = v85;
              a1[2] = &v83[v84];
            }
          }
          *(void *)uint64_t v5 = v77;
          uint64_t v5 = (char *)(a1[2] + 8);
          a1[2] = v5;
        }
      }
      else
      {
        uint64_t v19 = v6 >> 3;
        unint64_t v20 = v18 >> 2;
        unint64_t v21 = v17 + (v6 >> 3);
        if (v20 <= v21) {
          unint64_t v22 = v21;
        }
        else {
          unint64_t v22 = v20;
        }
        unint64_t v23 = v19 - v16;
        uint64_t v109 = a1 + 3;
        if (v22) {
          unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v22);
        }
        else {
          unint64_t v24 = 0;
        }
        uint64_t v47 = v16 << 9;
        __p[0] = v24;
        __p[1] = &v24[8 * v23];
        *(void **)&long long v108 = __p[1];
        *((void *)&v108 + 1) = &v24[8 * v22];
        do
        {
          uint64_t v106 = operator new(0x1000uLL);
          std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_back(__p, &v106);
          --v17;
        }
        while (v17);
        if (v16)
        {
          unint64_t v48 = (void *)a1[1];
          unint64_t v49 = (char *)v108;
          do
          {
            if (v49 == *((char **)&v108 + 1))
            {
              int64_t v50 = (char *)__p[1] - (char *)__p[0];
              if (__p[1] <= __p[0])
              {
                if (v49 == __p[0]) {
                  unint64_t v57 = 1;
                }
                else {
                  unint64_t v57 = (v49 - (char *)__p[0]) >> 2;
                }
                long long v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v109, v57);
                uint64_t v60 = (uint64_t *)__p[1];
                unint64_t v49 = &v58[8 * (v57 >> 2)];
                uint64_t v61 = v108 - (unint64_t)__p[1];
                if ((void *)v108 != __p[1])
                {
                  unint64_t v49 = &v58[8 * (v57 >> 2) + (v61 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v62 = 8 * (v61 >> 3);
                  double v63 = &v58[8 * (v57 >> 2)];
                  do
                  {
                    uint64_t v64 = *v60++;
                    *(void *)double v63 = v64;
                    v63 += 8;
                    v62 -= 8;
                  }
                  while (v62);
                }
                uint64_t v65 = __p[0];
                __p[0] = v58;
                __p[1] = &v58[8 * (v57 >> 2)];
                *(void *)&long long v108 = v49;
                *((void *)&v108 + 1) = &v58[8 * v59];
                if (v65)
                {
                  operator delete(v65);
                  unint64_t v49 = (char *)v108;
                }
              }
              else
              {
                uint64_t v51 = v50 >> 3;
                BOOL v31 = v50 >> 3 < -1;
                uint64_t v52 = (v50 >> 3) + 2;
                if (v31) {
                  uint64_t v53 = v52;
                }
                else {
                  uint64_t v53 = v51 + 1;
                }
                unint64_t v54 = (char *)__p[1] - 8 * (v53 >> 1);
                int64_t v55 = v49 - (char *)__p[1];
                if (v49 != __p[1])
                {
                  memmove((char *)__p[1] - 8 * (v53 >> 1), __p[1], v49 - (char *)__p[1]);
                  unint64_t v49 = (char *)__p[1];
                }
                uint64_t v56 = &v49[-8 * (v53 >> 1)];
                unint64_t v49 = &v54[v55];
                __p[1] = v56;
                *(void *)&long long v108 = &v54[v55];
              }
            }
            *(void *)unint64_t v49 = *v48;
            unint64_t v49 = (char *)(v108 + 8);
            *(void *)&long long v108 = v108 + 8;
            unint64_t v48 = (void *)(a1[1] + 8);
            a1[1] = v48;
            --v16;
          }
          while (v16);
        }
        unint64_t v66 = (void *)a1[2];
        uint64_t v67 = -7 - (void)v66;
        while (v66 != (void *)a1[1])
        {
          --v66;
          v67 += 8;
          std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_front((uint64_t)__p, v66);
        }
        uint64_t v68 = (char *)*a1;
        long long v70 = *(_OWORD *)__p;
        long long v69 = v108;
        __p[0] = *(void **)a1;
        __p[1] = v66;
        long long v71 = *((_OWORD *)a1 + 1);
        *(_OWORD *)a1 = v70;
        *((_OWORD *)a1 + 1) = v69;
        long long v108 = v71;
        a1[4] -= v47;
        if (v66 != (void *)v71) {
          *(void *)&long long v108 = v71 + (-(v71 + v67) & 0xFFFFFFFFFFFFFFF8);
        }
        if (v68)
        {
          operator delete(v68);
          uint64_t v5 = (char *)a1[2];
        }
        else
        {
          uint64_t v5 = (char *)v69;
        }
      }
    }
    uint64_t v9 = a1[5];
    unint64_t v4 = (char *)a1[1];
    unint64_t v10 = a1[4] + v9;
  }
  uint64_t v96 = &v4[8 * (v10 >> 9)];
  if (v5 == v4) {
    unint64_t v97 = 0;
  }
  else {
    unint64_t v97 = (char *)(*(void *)v96 + 8 * (v10 & 0x1FF));
  }
  int v98 = (char *)std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](v96, (uint64_t)v97, a2);
  if (v97 != v99)
  {
    uint64_t v100 = v98;
    uint64_t v101 = (uint64_t)v99;
    do
    {
      if (v96 == v100) {
        uint64_t v102 = v101;
      }
      else {
        uint64_t v102 = *(void *)v96 + 4096;
      }
      if (v97 == (char *)v102)
      {
        unint64_t v104 = v97;
      }
      else
      {
        size_t v103 = (v102 - (void)v97) & 0xFFFFFFFFFFFFFFF8;
        bzero(v97, v103);
        unint64_t v104 = &v97[v103];
        uint64_t v9 = a1[5];
      }
      v9 += (v104 - v97) >> 3;
      a1[5] = v9;
      if (v96 == v100) {
        break;
      }
      uint64_t v105 = (char *)*((void *)v96 + 1);
      v96 += 8;
      unint64_t v97 = v105;
    }
    while (v105 != (char *)v101);
  }
}

void sub_1DD850830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(void *result, unsigned char *__src, unsigned char *a3, void **a4, char *__dst)
{
  uint64_t v6 = a4;
  unint64_t v8 = result;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    unint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12) {
        double result = memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      unint64_t v13 = (char *)*v6++;
      unint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  void *v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

void *std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(void *result, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5, void *a6, unint64_t *a7, uint64_t a8, uint64_t a9, unint64_t *a10, void *a11, unint64_t *a12)
{
  while (a3 != a5 && a7 != a10)
  {
    unint64_t v14 = *a3;
    if (*a3 >= *a7)
    {
      if (*a7 >= v14)
      {
        *a12++ = v14;
        if ((unint64_t *)((char *)a12 - *a11) == (unint64_t *)4096)
        {
          unint64_t v16 = (unint64_t *)a11[1];
          ++a11;
          a12 = v16;
        }
        if ((unint64_t *)((char *)++a3 - *a2) == (unint64_t *)4096)
        {
          unint64_t v17 = (unint64_t *)a2[1];
          ++a2;
          a3 = v17;
        }
      }
      if ((unint64_t *)((char *)++a7 - *a6) == (unint64_t *)4096)
      {
        uint64_t v18 = (unint64_t *)a6[1];
        ++a6;
        a7 = v18;
      }
    }
    else if ((unint64_t *)((char *)++a3 - *a2) == (unint64_t *)4096)
    {
      unint64_t v15 = (unint64_t *)a2[1];
      ++a2;
      a3 = v15;
    }
  }
  *double result = a4;
  result[1] = a5;
  result[2] = a9;
  result[3] = a10;
  result[4] = a11;
  result[5] = a12;
  return result;
}

double nms::minMaxEdgeOfQuad<double>(uint64_t a1)
{
  uint64_t v1 = 0;
  double result = 1.79769313e308;
  double v3 = 2.22507386e-308;
  do
  {
    unint64_t v4 = (double *)(a1 + 8 * v1);
    v1 += 2;
    uint64_t v5 = (double *)(a1 + 8 * (v1 & 6));
    double v6 = sqrt((v4[1] - v5[1]) * (v4[1] - v5[1]) + (*v4 - *v5) * (*v4 - *v5));
    if (v6 < result) {
      double result = v6;
    }
    if (v3 < v6) {
      double v3 = v6;
    }
  }
  while (v1 != 8);
  return result;
}

double nms::PyramidNMS<unsigned short,double,unsigned char>::computeAggregatedScore(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[5];
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = *(void **)(a1 + 968);
    uint64_t v5 = a2[4];
    double v6 = 0.0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2[1] + (((unint64_t)(v3 + v5) >> 7) & 0x1FFFFFFFFFFFFF8));
      uint64_t v8 = (v3 + v5) & 0x3FF;
      unint64_t v9 = *(unsigned __int16 *)(v7 + 4 * v8);
      if (v4[5] <= v9) {
        std::__throw_out_of_range[abi:ne180100]("deque");
      }
      unint64_t v10 = v4[4] + v9;
      uint64_t v11 = *(void *)(v4[1] + 8 * (v10 / 0x14));
      unint64_t v12 = v10 % 0x14;
      uint64_t v13 = v11 + 200 * v12;
      unint64_t v16 = *(void **)(v13 + 184);
      unint64_t v14 = (void *)(v13 + 184);
      unint64_t v15 = v16;
      if (!v16) {
        goto LABEL_12;
      }
      unint64_t v17 = v15;
      do
      {
        uint64_t v18 = v17;
        unint64_t v17 = (void *)*v17;
      }
      while (v17);
      if (v18 == v14 || v18[4] || (unint64_t v19 = v18[5] - 5, v19 > 3))
      {
LABEL_12:
        uint64_t v20 = -1;
        if (!v15) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v20 = qword_1DD8CEC00[v19];
        if (!v15) {
          goto LABEL_18;
        }
      }
      do
      {
        unint64_t v21 = v15;
        unint64_t v15 = (void *)*v15;
      }
      while (v15);
      if (v21 == v14 || v21[4] || (unint64_t v22 = v21[5], v22 > 8))
      {
LABEL_18:
        double v23 = 0.0;
        goto LABEL_19;
      }
      double v23 = dbl_1DD8CEC20[v22];
LABEL_19:
      unint64_t v24 = v20 + *(void *)&v23 * *(unsigned __int16 *)(v7 + 4 * v8 + 2);
      int64x2_t v26 = (uint64_t *)(*(void *)(*(void *)(v11 + 200 * v12 + 88)
                                  + ((*(void *)(v11 + 200 * v12 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * *(void *)(v11 + 200 * v12 + 112));
      uint64_t v25 = *v26;
      if (v24 >= (v26[1] - *v26) >> 3) {
        double v27 = -0.0;
      }
      else {
        double v27 = *(double *)(v25 + 8 * v24);
      }
      double v6 = v6 + v27;
      if (++v3 == v2) {
        return v6 * *(double *)(a1 + 1016);
      }
    }
  }
  double v6 = 0.0;
  return v6 * *(double *)(a1 + 1016);
}

double *nms::normalizeL2<double>(double *result, double *a2)
{
  uint64_t v2 = (char *)a2 - (char *)result;
  if (a2 != result)
  {
    double v3 = *result * *result;
    if ((unint64_t)v2 >= 9)
    {
      unint64_t v4 = v2 >> 3;
      if (v4 <= 2) {
        unint64_t v4 = 2;
      }
      unint64_t v5 = v4 - 1;
      double v6 = result + 1;
      do
      {
        double v7 = *v6++;
        double v3 = v3 + v7 * v7;
        --v5;
      }
      while (v5);
    }
    double v8 = sqrt(v3);
    double v9 = fabs(v8);
    if (v9 > v9 * 2.22044605e-16)
    {
      do
      {
        *double result = *result / v8;
        ++result;
      }
      while (result != a2);
    }
  }
  return result;
}

BOOL nms::PyramidNMS<unsigned short,double,unsigned char>::checkValidityOfCosAngleInDistributionCheckInProcessingContainment(uint64_t a1, double **a2, double **a3, uint64_t a4)
{
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  std::valarray<double>::resize((uint64_t)&v15, 2uLL, 0.0);
  double v8 = *a2;
  double v9 = *a3;
  double v10 = (*a2)[1] - (*a3)[1];
  unint64_t v12 = v15;
  uint64_t v11 = v16;
  double *v15 = v10;
  v12[1] = *v9 - *v8;
  nms::normalizeL2<double>(v12, v11);
  BOOL v13 = fabs(*(double *)(*(void *)a4 + 8) * v12[1] + **(double **)a4 * *v12) >= *(double *)(a1 + 1136);
  operator delete(v12);
  return v13;
}

int **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(int **result, int *a2, int *a3, int *a4, int *a5)
{
  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    unint64_t v5 = *(_DWORD **)a4;
    while (1)
    {
      double v6 = v5 + 1024;
      if (a3 - a2 >= v6 - a5) {
        uint64_t v7 = v6 - a5;
      }
      else {
        uint64_t v7 = a3 - a2;
      }
      if (v7)
      {
        double v8 = &a2[v7];
        do
        {
          int v9 = *a2++;
          *a5++ = v9;
        }
        while (a2 != v8);
        a2 = v8;
      }
      if (a2 == a3) {
        break;
      }
      double v10 = (_DWORD *)*((void *)a4 + 1);
      a4 += 2;
      unint64_t v5 = v10;
      a5 = v10;
    }
    if (v6 == a5)
    {
      uint64_t v11 = (int *)*((void *)a4 + 1);
      a4 += 2;
      a5 = v11;
    }
  }
  *double result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

void *std::__copy_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(void *result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    uint64_t v5 = *a4;
    uint64_t v6 = a3;
    while (1)
    {
      if ((v6 - a2) >> 2 >= (a5 - v5) >> 2) {
        uint64_t v7 = (a5 - v5) >> 2;
      }
      else {
        uint64_t v7 = (v6 - a2) >> 2;
      }
      if (v7)
      {
        uint64_t v8 = v6 - 2;
        uint64_t v9 = -4 * v7;
        do
        {
          *(_DWORD *)(a5 - 4) = *(_DWORD *)(v8 - 2);
          a5 -= 4;
          v8 -= 4;
          v9 += 4;
        }
        while (v9);
      }
      v6 -= 4 * v7;
      if (v6 == a2) {
        break;
      }
      uint64_t v10 = *--a4;
      uint64_t v5 = v10;
      a5 = v10 + 4096;
    }
    if (v5 + 4096 == a5)
    {
      uint64_t v11 = a4[1];
      ++a4;
      a5 = v11;
    }
  }
  *double result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

uint64_t std::deque<unsigned short>::deque(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (char **)(v5 + 8 * (v4 >> 11));
  if (v6 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 11));
  }
  else
  {
    uint64_t v8 = &(*v7)[2 * (v4 & 0x7FF)];
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 11));
    uint64_t v11 = *(void *)v10 + 2 * (v9 & 0x7FF);
  }
  if ((char *)v11 == v8) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = ((v11 - *(void *)v10) >> 1) + ((v10 - (char *)v7) << 8) - ((v8 - *v7) >> 1);
  }
  std::deque<unsigned short>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>>((void *)a1, v7, v8, v12);
  return a1;
}

void sub_1DD850EEC(_Unwind_Exception *a1)
{
  std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void *std::valarray<double>::valarray(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v5 = operator new(8 * v3);
    *a1 = v5;
    uint64_t v6 = *(void **)a2;
    uint64_t v7 = 8 * *(void *)(a2 + 16);
    do
    {
      *v5++ = *v6;
      uint64_t v6 = (void *)((char *)v6 + v7);
      --v3;
    }
    while (v3);
    a1[1] = v5;
  }
  return a1;
}

uint64_t std::deque<nms::RectForest<unsigned short,double>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x14];
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x14] + 200 * ((*(void *)(a1 + 40) + v5) % 0x14);
    if ((char *)*v6 + 200 * (v5 % 0x14) != (void *)v7)
    {
      uint64_t v8 = (void (***)(void))((char *)*v6 + 200 * (v5 % 0x14));
      do
      {
        unint64_t v9 = *v8;
        v8 += 25;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v6 == 4000)
        {
          uint64_t v10 = (void (***)(void))v6[1];
          ++v6;
          uint64_t v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      uint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 10;
    goto LABEL_15;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 20;
LABEL_15:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *nms::PyramidNMS<unsigned short,double,unsigned char>::PyramidNMS(void *a1)
{
  *a1 = &unk_1F38ED540;
  bzero(a1 + 1, 0x3C8uLL);
  nms::PyramidNMSConfig::PyramidNMSConfig((uint64_t)(a1 + 122), 0, 0);
  nms::PyramidNMSConfig::PyramidNMSConfig((uint64_t)&v3, 0, 0);
  memcpy(a1 + 123, v4, 0x148uLL);
  return a1;
}

void CRMinAreaRect::findMinAreaRect(float a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(int **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = v5 - *(void *)a3;
  if ((unint64_t)v6 >= 0x18)
  {
    uint64_t v8 = v6 >> 3;
    uint64_t v9 = v8 - 1;
    if (v8 == 1)
    {
      int v71 = 0;
      double v20 = 0.0;
      float v23 = 0.0;
      float v22 = 0.0;
      float v21 = 0.0;
      float v14 = 0.0;
      double v15 = 0.0;
    }
    else
    {
      uint64_t v10 = 0;
      int v71 = 0;
      int v12 = *v4;
      int v11 = v4[1];
      uint64_t v13 = v4 + 3;
      float v14 = 0.0;
      double v15 = 0.0;
      unint64_t ExtremeIndex = 1;
      float v17 = 3.4028e38;
      unint64_t v18 = 1;
      int v19 = 1;
      double v20 = 0.0;
      float v21 = 0.0;
      float v22 = 0.0;
      float v23 = 0.0;
      do
      {
        unint64_t ExtremeIndex = findExtremeIndex((uint64_t)v4, v5, v10, ExtremeIndex, 0);
        unint64_t v24 = findExtremeIndex((uint64_t)v4, v5, v10, v18, 2);
        unint64_t v18 = v24;
        if (v10) {
          unint64_t v25 = v19;
        }
        else {
          unint64_t v25 = v24;
        }
        int v19 = findExtremeIndex((uint64_t)v4, v5, v10, v25, 1);
        int64x2_t v26 = &v4[2 * (int)v18];
        double v27 = (double)(*v26 - v12);
        double v28 = (double)(v26[1] - v11);
        uint64_t v29 = &v4[2 * v19];
        double v30 = (double)(*v29 - v12);
        double v31 = (double)(v29[1] - v11);
        int v32 = *(v13 - 1);
        double v33 = (double)(v32 - v12);
        int v34 = *v13;
        double v35 = (double)(*v13 - v11);
        float v36 = sqrt((double)(v12 - v32) * (double)(v12 - v32) + (double)(v11 - v34) * (double)(v11 - v34));
        *(float *)&double v27 = v28 * v35 + v27 * v33;
        float v37 = *(float *)&v27 / v36;
        *(float *)&double v28 = v31 * v35 + v30 * v33;
        float v38 = *(float *)&v28 / v36;
        *(float *)&double v30 = (double)(v4[2 * (int)ExtremeIndex] - v12) * v35
                       - (double)(v4[2 * (int)ExtremeIndex + 1] - v11) * v33;
        float v39 = fabsf(*(float *)&v30) / v36;
        if ((float)((float)(v37 - v38) * v39) < v17)
        {
          float v23 = v36;
          float v22 = v39;
          int v71 = v10;
          float v21 = v38;
          float v14 = v37;
          double v20 = (double)(v34 - v11);
          double v15 = (double)(v32 - v12);
          float v17 = (float)(v37 - v38) * v39;
        }
        ++v10;
        v13 += 2;
        int v11 = v34;
        int v12 = v32;
      }
      while (v9 != v10);
    }
    double v40 = v23 + 0.0000001;
    double v41 = v15 / v40;
    double v42 = v20 / v40;
    uint64_t v43 = &v4[2 * v71];
    int v44 = *v43;
    LODWORD(v43) = v43[1];
    double v45 = (double)v44 + v41 * v21;
    double v46 = (double)(int)v43 + v42 * v21;
    *a4 = v45;
    a4[1] = v46;
    double v47 = (double)v44 + v41 * v14;
    double v48 = (double)(int)v43 + v42 * v14;
    a4[2] = v47;
    a4[3] = v48;
    double v49 = v22;
    a4[4] = v47 - v42 * v22;
    a4[5] = v48 + v41 * v22;
    a4[6] = v45 - v42 * v22;
    a4[7] = v46 + v41 * v22;
    float v50 = v14 - v21;
    a4[8] = v50;
    a4[9] = v22;
    double CenterPoint = CRDetectorUtils::makeCenterPoint((CRDetectorUtils *)a4, (CGPoint *)a3);
    v73.x = CenterPoint;
    v73.y = v52;
    uint64_t v72 = *(void *)&v52;
    if (v50 <= v22)
    {
      if (v20 == 0.0)
      {
        float v53 = 90.0;
      }
      else
      {
        float v59 = v15;
        if (v59 >= 0.0) {
          int v60 = 1;
        }
        else {
          int v60 = -1;
        }
        float v58 = v20;
        if (v58 < 0.0) {
          int v60 = -v60;
        }
        float v53 = atan2(fabs(v15) * (double)v60, fabs(v20)) / 3.14159265 * 180.0;
      }
      a4[8] = v49;
      a4[9] = v50;
      double v57 = v50;
    }
    else
    {
      if (v15 == 0.0)
      {
        float v53 = 90.0;
      }
      else
      {
        float v55 = v15;
        if (v55 >= 0.0) {
          int v56 = 1;
        }
        else {
          int v56 = -1;
        }
        float v54 = -v20;
        if (v54 < 0.0) {
          int v56 = -v56;
        }
        float v53 = atan2(fabs(v20) * (double)v56, fabs(v15)) / 3.14159265 * 180.0;
      }
      double v57 = v22;
      double v49 = v50;
    }
    a4[10] = v53;
    if (a1 != 0.0)
    {
      double v61 = (float)(a1 + a1);
      a4[8] = v49 + v61;
      a4[9] = v57 + v61;
      CRDetectorUtils::rotatePolygon((CRDetectorUtils *)a4, &v73, v74, (float)(v53 / 180.0) * 3.14159265, v51);
      uint64_t v63 = 0;
      float64x2_t v64 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&CenterPoint, 0);
      int8x16_t v65 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(-a1), 0);
      int8x16_t v66 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(a1), 0);
      float64x2_t v67 = (float64x2_t)vdupq_lane_s64(v72, 0);
      do
      {
        uint64_t v68 = &v74[v63];
        float64x2x2_t v76 = vld2q_f64(&v68->x);
        v77.val[0] = vaddq_f64(v76.val[0], (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v64, v76.val[0]), v65, v66));
        v77.val[1] = vaddq_f64(v76.val[1], (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v67, v76.val[1]), v65, v66));
        vst2q_f64(&v68->x, v77);
        v63 += 2;
      }
      while (v63 != 4);
      CRDetectorUtils::rotatePolygon((CRDetectorUtils *)v74, &v73, (const CGPoint *)a4, (float)(v53 / -180.0) * 3.14159265, v62);
    }
  }
}

unint64_t findExtremeIndex(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int a5)
{
  unint64_t v6 = a4;
  uint64_t v9 = (int *)(a1 + 8 * a3);
  uint64_t v10 = (_DWORD *)(a1 + 8 * (int)a4);
  int v11 = *v9;
  int v12 = v9[1];
  double v13 = (double)(v9[2] - *v9);
  double v14 = (double)(v9[3] - v12);
  if (analyzeState(a5, (double)(*v10 - v11), (double)(v10[1] - v12), (double)(v10[2] - v11), (double)(v10[3] - v12), (double)(v9[2] - v11), v14))BOOL v15 = a2 == a1; {
  else
  }
    BOOL v15 = 1;
  if (!v15)
  {
    unint64_t v16 = (a2 - a1) >> 3;
    unint64_t v17 = 1;
    do
    {
      unint64_t v6 = ((int)v6 + 1) % (v16 - 1);
      if (analyzeState(a5, (double)(*(_DWORD *)(a1 + 8 * (int)v6) - v11), (double)(*(_DWORD *)(a1 + 8 * (int)v6 + 4) - v12), (double)(*(_DWORD *)(a1 + ((uint64_t)((v6 << 32) + 0x100000000) >> 29)) - v11), (double)(*(_DWORD *)(a1 + ((uint64_t)((v6 << 32) + 0x100000000) >> 29) + 4) - v12), v13, v14))BOOL v18 = v16 > v17; {
      else
      }
        BOOL v18 = 0;
      ++v17;
    }
    while (v18);
  }
  return v6;
}

void CRMinAreaRect::findMinAreaMaxContourRect(float a1, float a2, uint64_t a3, uint64_t a4, double *a5, uint64_t *a6)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(int **)a4;
  uint64_t v110 = *(void *)(a4 + 8);
  uint64_t v7 = v110 - *(void *)a4;
  if ((unint64_t)v7 >= 0x18)
  {
    uint64_t v8 = v7 >> 3;
    BOOL v9 = v7 >> 3 != 0;
    unint64_t v10 = (v7 >> 3) - 1;
    if (v10 == 0 || !v9) {
      uint64_t v8 = 1;
    }
    int v11 = v6 + 1;
    float v12 = 0.0;
    float v13 = 3.4028e38;
    float v14 = 3.4028e38;
    float v15 = 0.0;
    do
    {
      double v16 = (double)*(v11 - 1);
      float v13 = fmin(v13, v16);
      int v17 = *v11;
      v11 += 2;
      float v14 = fmin(v14, (double)v17);
      float v12 = fmax(v12, v16);
      float v15 = fmax(v15, (double)v17);
      --v8;
    }
    while (v8);
    uint64_t v18 = 0;
    int v102 = 0;
    uint64_t v19 = *a6;
    uint64_t v109 = a6[1];
    unint64_t v20 = (v109 - *a6) >> 3;
    float v21 = fmin((float)((float)((float)(v12 - v13) + (float)(v12 - v13)) + (float)((float)(v15 - v14) * 2.0)), (double)v20);
    float v98 = v21;
    float v107 = 1.0 - a2;
    float v108 = (float)v20;
    if (v20 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = (v109 - v19) >> 3;
    }
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    unint64_t v106 = v10;
    int v23 = *v6;
    int v24 = v6[1];
    double v104 = 0.0;
    float v112 = 0.0;
    unint64_t v25 = 1;
    unint64_t v26 = 1;
    unsigned int v117 = 1;
    float v113 = 0.0;
    float v99 = 0.0;
    float v100 = 0.0;
    float v101 = 0.0;
    double v103 = 0.0;
    uint64_t v105 = *(int **)a4;
    do
    {
      unint64_t ExtremeIndex = findExtremeIndex((uint64_t)v6, v110, v18, v25, 0);
      unsigned int v28 = findExtremeIndex((uint64_t)v6, v110, v18, v26, 2);
      unsigned int v29 = v28;
      if (v18) {
        unint64_t v30 = v117;
      }
      else {
        unint64_t v30 = v28;
      }
      unsigned int v31 = findExtremeIndex((uint64_t)v6, v110, v18, v30, 1);
      unsigned int v115 = v29;
      int v32 = &v6[2 * v29];
      double v33 = (double)(*v32 - v23);
      double v34 = (double)(v32[1] - v24);
      unsigned int v117 = v31;
      double v35 = &v6[2 * v31];
      double v36 = (double)(*v35 - v23);
      double v37 = (double)(v35[1] - v24);
      float v38 = &v6[2 * v18 + 2];
      int v39 = v38[1];
      double v40 = (double)(*v38 - v23);
      double v41 = (double)(v39 - v24);
      unint64_t v116 = ExtremeIndex;
      int v42 = *v38;
      int v43 = v39;
      float v44 = sqrt((double)(v23 - *v38) * (double)(v23 - *v38) + (double)(v24 - v39) * (double)(v24 - v39));
      *(float *)&double v33 = v34 * v41 + v33 * v40;
      float v45 = *(float *)&v33 / v44;
      *(float *)&double v33 = v37 * v41 + v36 * v40;
      float v46 = *(float *)&v33 / v44;
      *(float *)&double v33 = (double)(v6[2 * (int)ExtremeIndex] - v23) * v41
                     - (double)(v6[2 * (int)ExtremeIndex + 1] - v24) * v40;
      float v47 = fabsf(*(float *)&v33) / v44;
      float v50 = expf((float)((float)(v45 - v46) * v47) / v108);
      double v51 = v44 + 0.0000001;
      double v52 = v40 / v51;
      double v53 = v41 / v51;
      v122.x = (double)v23 + v52 * v46;
      v122.y = (double)v24 + v53 * v46;
      double v123 = (double)v23 + v52 * v45;
      double v124 = (double)v24 + v53 * v45;
      double v125 = v123 - v53 * v47;
      double v126 = v124 + v52 * v47;
      double v127 = v122.x - v53 * v47;
      double v128 = v122.y + v52 * v47;
      if (v109 == v19)
      {
        uint64_t v56 = v18 + 1;
      }
      else
      {
        float v114 = v50;
        uint64_t v54 = 0;
        float v55 = 0.0;
        uint64_t v56 = v18 + 1;
        do
        {
          uint64_t v57 = *(void *)(v19 + 8 * v54);
          v58.i64[0] = (int)v57;
          v58.i64[1] = SHIDWORD(v57);
          CGPoint v119 = (CGPoint)vcvtq_f64_s64(v58);
          float v59 = &v122;
          float v60 = 3.4028e38;
          for (uint64_t i = 1; i != 5; ++i)
          {
            CGPoint v121 = v119;
            float v62 = CRDetectorUtils::distPointToLine((CRDetectorUtils *)&v121, v59, &v122 + (i & 3), v49);
            if (v62 < v60) {
              float v60 = v62;
            }
            ++v59;
          }
          if (v60 > 0.0 && v60 <= 1.0) {
            float v55 = v55 + 1.0;
          }
          ++v54;
        }
        while (v54 != v22);
        unint64_t v6 = v105;
        float v50 = v114;
        if (v55 > 5.0)
        {
          float v64 = expf((float)-v55 / v98);
          float v50 = v114;
          float v112 = (float)(1.0 / (float)(v64 + 1.0)) + -0.5;
        }
      }
      if ((float)((float)(v107 * (float)(1.0 / (float)(v50 + 1.0))) + (float)(a2 * v112)) > v113)
      {
        double v103 = v40;
        double v104 = v41;
        int v102 = v18;
        float v100 = v46;
        float v101 = v47;
        float v99 = v45;
        float v113 = (float)(v107 * (float)(1.0 / (float)(v50 + 1.0))) + (float)(a2 * v112);
      }
      int v24 = v43;
      int v23 = v42;
      uint64_t v18 = v56;
      unint64_t v25 = v116;
      unint64_t v26 = v115;
    }
    while (v56 != v106);
    int8x16_t v65 = &v6[2 * v102];
    int v66 = *v65;
    int v67 = v65[1];
    float v68 = sqrt((double)(*v65 - v65[2]) * (double)(*v65 - v65[2]) + (double)(v67 - v65[3]) * (double)(v67 - v65[3]));
    double v69 = v68 + 0.0000001;
    double v70 = v103 / v69;
    double v71 = v104 / v69;
    double v72 = (double)*v65 + v70 * v100;
    double v73 = (double)v67 + v71 * v100;
    *a5 = v72;
    a5[1] = v73;
    double v74 = (double)v66 + v70 * v99;
    double v75 = (double)v67 + v71 * v99;
    a5[2] = v74;
    a5[3] = v75;
    double v76 = v101;
    a5[4] = v74 - v71 * v101;
    a5[5] = v75 + v70 * v101;
    a5[6] = v72 - v71 * v101;
    a5[7] = v73 + v70 * v101;
    double v77 = (float)(v99 - v100);
    a5[8] = v77;
    a5[9] = v101;
    double CenterPoint = CRDetectorUtils::makeCenterPoint((CRDetectorUtils *)a5, v48);
    uint64_t v120 = *(void *)&v78;
    v121.x = CenterPoint;
    v121.y = v78;
    if ((float)(v99 - v100) <= v101)
    {
      if (v104 == 0.0)
      {
        float v80 = 90.0;
      }
      else
      {
        float v86 = v103;
        if (v86 >= 0.0) {
          int v87 = 1;
        }
        else {
          int v87 = -1;
        }
        float v85 = v104;
        if (v85 < 0.0) {
          int v87 = -v87;
        }
        float v80 = atan2(fabs(v103) * (double)v87, fabs(v104)) / 3.14159265 * 180.0;
      }
      a5[8] = v76;
      a5[9] = v77;
      double v84 = (float)(v99 - v100);
    }
    else
    {
      if (v103 == 0.0)
      {
        float v80 = 90.0;
      }
      else
      {
        float v82 = v103;
        if (v82 >= 0.0) {
          int v83 = 1;
        }
        else {
          int v83 = -1;
        }
        float v81 = -v104;
        if (v81 < 0.0) {
          int v83 = -v83;
        }
        float v80 = atan2(fabs(v104) * (double)v83, fabs(v103)) / 3.14159265 * 180.0;
      }
      double v84 = v101;
      double v76 = (float)(v99 - v100);
    }
    a5[10] = v80;
    if (a1 != 0.0)
    {
      double v88 = (float)(a1 + a1);
      a5[8] = v76 + v88;
      a5[9] = v84 + v88;
      CRDetectorUtils::rotatePolygon((CRDetectorUtils *)a5, &v121, &v122, (float)(v80 / 180.0) * 3.14159265, v79);
      uint64_t v90 = 0;
      float64x2_t v91 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&CenterPoint, 0);
      int8x16_t v92 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(-a1), 0);
      int8x16_t v93 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(a1), 0);
      float64x2_t v94 = (float64x2_t)vdupq_lane_s64(v120, 0);
      do
      {
        unint64_t v95 = (double *)((char *)&v122.x + v90);
        float64x2x2_t v130 = vld2q_f64(v95);
        v131.val[0] = vaddq_f64(v130.val[0], (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v91, v130.val[0]), v92, v93));
        v131.val[1] = vaddq_f64(v130.val[1], (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v94, v130.val[1]), v92, v93));
        vst2q_f64(v95, v131);
        v90 += 32;
      }
      while (v90 != 64);
      CRDetectorUtils::rotatePolygon((CRDetectorUtils *)&v122, &v121, (const CGPoint *)a5, (float)(v80 / -180.0) * 3.14159265, v89);
    }
  }
}

void CRMinAreaRect::sortMinAreaRectCorners(int a1, CRDetectorUtils *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  double CenterPoint = CRDetectorUtils::makeCenterPoint(this, (CGPoint *)this);
  double v5 = v4;
  v14.x = CenterPoint;
  v14.y = v4;
  float v6 = *((double *)this + 10) / 180.0 * 3.14159265;
  CRDetectorUtils::rotatePolygon(this, &v14, v15, v6, v7);
  uint64_t v8 = 0;
  p_y = &v15[0].y;
  while (*(p_y - 1) >= CenterPoint || *p_y >= v5)
  {
    ++v8;
    p_y += 2;
    if (v8 == 4)
    {
      LOBYTE(v8) = 0;
      break;
    }
  }
  for (uint64_t i = 0; i != 4; ++i)
    v15[i] = *((CGPoint *)this + (((_BYTE)v8 + (_BYTE)i) & 3));
  for (uint64_t j = 0; j != 4; j += 2)
  {
    CGPoint v12 = v15[j + 1];
    float v13 = (CGPoint *)((char *)this + j * 16);
    *float v13 = v15[j];
    v13[1] = v12;
  }
}

uint64_t analyzeState(int a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (a1 == 2)
  {
    float v9 = a3 * a7 + a2 * a6;
    float v10 = a5 * a7 + a4 * a6;
LABEL_6:
    BOOL v11 = vabds_f32(v9, v10) < 0.0000001;
    return (float)(v9 - v10) <= 0.0 || v11;
  }
  if (a1 != 1)
  {
    if (a1) {
      return 0;
    }
    float v7 = a2 * a7 - a3 * a6;
    float v8 = a4 * a7 - a5 * a6;
    float v9 = fabsf(v7);
    float v10 = fabsf(v8);
    goto LABEL_6;
  }
  float v13 = a3 * a7 + a2 * a6;
  float v14 = a5 * a7 + a4 * a6;
  BOOL v15 = vabds_f32(v13, v14) < 0.0000001;
  return (float)(v13 - v14) > 0.0 || v15;
}

void sub_1DD852420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD8527A8(_Unwind_Exception *a1)
{
  CGFloat v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD8529E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD852A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD853058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8534D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD8537F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD853A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD853D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD85402C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD854284(_Unwind_Exception *a1)
{
  CGFloat v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD8545F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD854A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD854BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD854F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8553F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8556D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD855788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD855974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD855F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD856808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1DD856D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1DD857264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1DD857860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD857A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD857AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD857C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD857D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD858384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD858600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD858794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD858AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD858D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD859164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8593A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD859810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD85A140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD85A494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD85AE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1DD85B344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD85B490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD85BDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD85C100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD85C150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD85C1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD85CB34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD85D030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1DD85DC14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

{
  Segmenter::~Segmenter((Segmenter *)(a1 + 48));
}

void sub_1DD85E4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD85E7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD85EB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD85EE64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TRShouldLogImages(void)
{
  v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v1 = [v0 persistentDomainForName:@"com.apple.CoreRecognition"];

  uint64_t v2 = [v1 objectForKey:@"LogAllImages"];
  if ([v2 BOOLValue])
  {
  }
  else
  {
    uint64_t v3 = [v1 objectForKey:@"ImageLogLevel"];
    int v4 = [v3 BOOLValue];

    if (!v4)
    {
      uint64_t v6 = 0;
      TRShouldLogImages(void)::_shouldLogImages = 0;
      goto LABEL_6;
    }
  }
  double v5 = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___Z17TRShouldLogImagesv_block_invoke;
  block[3] = &unk_1E6CDBE60;
  id v9 = v1;
  dispatch_async(v5, block);

  uint64_t v6 = TRShouldLogImages(void)::_shouldLogImages;
LABEL_6:

  return v6;
}

void sub_1DD85F0D0(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void ___Z17TRShouldLogImagesv_block_invoke(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) objectForKey:@"LogAllImages"];
  if ([v3 BOOLValue])
  {
    TRShouldLogImages(void)::_shouldLogImages = 5;
  }
  else
  {
    uint64_t v2 = [*(id *)(a1 + 32) objectForKey:@"ImageLogLevel"];
    TRShouldLogImages(void)::_shouldLogImages = [v2 integerValue];
  }
}

void sub_1DD85F19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD85F4AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD85F568(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD85F684(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD85F7A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD85F934(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD85F9F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD85FF84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD8600C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD8601BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD8602D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void CRLattice::CRLattice(uint64_t a1, void *a2, void *a3, uint64_t **a4, void *a5, uint64_t a6, double a7, double a8)
{
  id v15 = a2;
  a3;
  id v16 = a5;
  *(void *)a1 = 0;
  id v17 = v15;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 8) = v17;
  *(_OWORD *)(a1 + 32) = 0u;
  std::vector<BreakPoint>::__init_with_size[abi:ne180100]<BreakPoint*,BreakPoint*>((void *)(a1 + 24), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (a4[1] - *a4));
  *(double *)(a1 + 48) = a7;
  *(double *)(a1 + 56) = a8;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = a6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a6 + 113);
  objc_storeStrong((id *)(a1 + 16), a3);
  CRLattice::build();
}

{
  CRLattice::CRLattice(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1DD860E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  va_start(va, a4);
  float v7 = v6;

  std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CRLattice::build()
{
}

void sub_1DD8616A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CRCHSymbolMap *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42)
{
  a19 = v42 - 184;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void CRLattice::~CRLattice(id *this)
{
  uint64_t v2 = (CRCHNetwork *)*this;
  if (v2)
  {
    CRCHNetwork::~CRCHNetwork(v2);
    MEMORY[0x1E01BF140]();
    *this = 0;
  }

  id v3 = this + 3;
  std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void CRLattice::symbolIDStringFromRepresentationString(NSString *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = a1;
  uint64_t v5 = [(NSString *)v4 length];
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  float v7 = &v9 - 2 * v6;
  uint64_t v13 = 0;
  if (!-[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v4, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v7, 0, v6, 0))
  {
    id v8 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F281E8] reason:@"Conversion from representation string to symbol ID string failed" userInfo:0];
    objc_exception_throw(v8);
  }
  BOOL v11 = 0;
  uint64_t v12 = 0;
  float v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v10, v7, (uint64_t)v7 + (v13 & 0xFFFFFFFFFFFFFFFCLL), v13 >> 2);
  iv2s((uint64_t)&v10, 0, a2);
  if (v10)
  {
    BOOL v11 = v10;
    operator delete(v10);
  }
}

void sub_1DD861A60(_Unwind_Exception *a1)
{
  int v4 = *(void **)(v2 - 72);
  if (v4)
  {
    *(void *)(v2 - 64) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

double CRLattice::undersegmentationFactor(CRLattice *this, int a2, int a3)
{
  double v3 = 1.0;
  if (a2 + 1 <= (a3 - 1))
  {
    unint64_t v5 = a3 - 1;
    unint64_t v6 = a2 + 1;
    uint64_t v7 = 40 * a2;
    do
    {
      uint64_t v8 = *((void *)this + 3) + v7;
      if (!*(_DWORD *)(v8 + 44))
      {
        [*(id *)(v8 + 64) bounds];
        double v10 = v9;
        [*(id *)(v8 + 56) bounds];
        double v12 = v11;
        [*(id *)(v8 + 56) bounds];
        double v3 = v3
           * exp(fmax((v10 - (v12 + v13)) * (double)(unint64_t)[*((id *)this + 1) width], 0.0)* -0.5);
      }
      ++v6;
      v7 += 40;
    }
    while (v6 <= v5);
  }
  return v3;
}

id CRLattice::getNetworkEdges(CRLattice *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    double v3 = *(NetworkEdge **)(v1 + 88);
    int v4 = *(NetworkEdge **)(v1 + 96);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
    __str.__r_.__value_.__s.__data_[8] = 0;
    if (v4 != v3)
    {
      std::vector<NetworkEdge>::__vallocate[abi:ne180100](&v18, 0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 4));
      uint64_t v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NetworkEdge>,NetworkEdge*,NetworkEdge*,NetworkEdge*>((uint64_t)&v20, v3, v4, v19);
    }
    unint64_t v5 = [MEMORY[0x1E4F1CA48] array];
    unint64_t v6 = v18;
    uint64_t v7 = v19;
    if (v18 != v19)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(*(void *)this + 144) + 24 * *((void *)v6 + 2);
        if (*(char *)(v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v9, *(void *)(v9 + 8));
        }
        else
        {
          long long v10 = *(_OWORD *)v9;
          __str.__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
        }
        w2i32(&__str, (char **)&__p);
        id v11 = [NSString alloc];
        double v12 = (void *)[v11 initWithBytes:__p length:v16 - (unsigned char *)__p encoding:2617245952];
        double v13 = [[CRLatticeEdge alloc] initWithSymbol:v12 index:v8 score:*(void *)v6 startNode:*((void *)v6 + 1) endNode:*((double *)v6 + 4)];
        [v5 addObject:v13];

        if (__p)
        {
          id v16 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        unint64_t v6 = (NetworkEdge *)((char *)v6 + 80);
        ++v8;
      }
      while (v6 != v7);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
    std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  }
  else
  {
    unint64_t v5 = 0;
  }
  return v5;
}

void sub_1DD861D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20)
{
}

id CRLattice::augmentConfusableCandidates(uint64_t a1, void *a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id v2 = a2;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v70 objects:v78 count:16];
  int v4 = v2;
  unint64_t v5 = v2;
  if (!v3)
  {
LABEL_48:

    goto LABEL_49;
  }
  uint64_t v6 = *(void *)v71;
  double v7 = 0.0;
  do
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (*(void *)v71 != v6) {
        objc_enumerationMutation(v2);
      }
      uint64_t v9 = [v2 objectForKeyedSubscript:*(void *)(*((void *)&v70 + 1) + 8 * i)];
      [v9 doubleValue];
      double v11 = v10;

      double v7 = v7 + v11;
    }
    uint64_t v3 = [v2 countByEnumeratingWithState:&v70 objects:v78 count:16];
  }
  while (v3);

  unint64_t v5 = v2;
  if (v7 > 0.0)
  {
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    int v4 = 0;
    uint64_t v12 = [&unk_1F393AFC8 countByEnumeratingWithState:&v66 objects:v77 count:16];
    if (!v12) {
      goto LABEL_38;
    }
    uint64_t v13 = *(void *)v67;
    double v14 = -INFINITY;
    do
    {
      for (uint64_t j = 0; j != v12; ++j)
      {
        if (*(void *)v67 != v13) {
          objc_enumerationMutation(&unk_1F393AFC8);
        }
        id v16 = *(void **)(*((void *)&v66 + 1) + 8 * j);
        id v17 = [v2 objectForKey:v16];
        [v17 doubleValue];
        if (v18 > v14)
        {
          [v17 doubleValue];
          double v14 = v19;
          id v20 = v16;

          int v4 = v20;
        }
      }
      uint64_t v12 = [&unk_1F393AFC8 countByEnumeratingWithState:&v66 objects:v77 count:16];
    }
    while (v12);
    if (v4 && v14 < 0.6)
    {
      double v52 = [&unk_1F393B0B8 objectForKey:v4];
      float v21 = (void *)[v2 mutableCopy];
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      obuint64_t j = v52;
      uint64_t v22 = [obj countByEnumeratingWithState:&v62 objects:v76 count:16];
      if (v22)
      {
        uint64_t v23 = *(void *)v63;
        do
        {
          for (uint64_t k = 0; k != v22; ++k)
          {
            if (*(void *)v63 != v23) {
              objc_enumerationMutation(obj);
            }
            uint64_t v25 = *(void *)(*((void *)&v62 + 1) + 8 * k);
            unint64_t v26 = [obj objectForKeyedSubscript:v25];
            [v26 doubleValue];
            double v28 = v27;

            unsigned int v29 = [v21 objectForKey:v25];
            unint64_t v30 = v29;
            if (!v29 || ([v29 doubleValue], v14 > v31))
            {
              uint64_t v32 = [NSNumber numberWithDouble:v14 * v28];

              unint64_t v30 = (void *)v32;
            }
            [v21 setObject:v30 forKey:v25];
          }
          uint64_t v22 = [obj countByEnumeratingWithState:&v62 objects:v76 count:16];
        }
        while (v22);
      }

      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      id v33 = v21;
      uint64_t v34 = [v33 countByEnumeratingWithState:&v58 objects:v75 count:16];
      if (v34)
      {
        uint64_t v35 = *(void *)v59;
        double v36 = 0.0;
        do
        {
          for (uint64_t m = 0; m != v34; ++m)
          {
            if (*(void *)v59 != v35) {
              objc_enumerationMutation(v33);
            }
            float v38 = [v33 objectForKeyedSubscript:*(void *)(*((void *)&v58 + 1) + 8 * m)];
            [v38 doubleValue];
            double v40 = v39;

            double v36 = v36 + v40;
          }
          uint64_t v34 = [v33 countByEnumeratingWithState:&v58 objects:v75 count:16];
        }
        while (v34);
      }
      else
      {
        double v36 = 0.0;
      }

      double v41 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v33, "count"));
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      id v42 = v33;
      uint64_t v43 = [v42 countByEnumeratingWithState:&v54 objects:v74 count:16];
      if (v43)
      {
        uint64_t v44 = *(void *)v55;
        do
        {
          for (uint64_t n = 0; n != v43; ++n)
          {
            if (*(void *)v55 != v44) {
              objc_enumerationMutation(v42);
            }
            uint64_t v46 = *(void *)(*((void *)&v54 + 1) + 8 * n);
            float v47 = [v42 objectForKeyedSubscript:v46];
            [v47 doubleValue];
            double v49 = v48;

            float v50 = [NSNumber numberWithDouble:v7 * v49 / v36];
            [v41 setObject:v50 forKeyedSubscript:v46];
          }
          uint64_t v43 = [v42 countByEnumeratingWithState:&v54 objects:v74 count:16];
        }
        while (v43);
      }

      unint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithDictionary:v41];
    }
    else
    {
LABEL_38:
      unint64_t v5 = v2;
    }
    goto LABEL_48;
  }
LABEL_49:

  return v5;
}

void sub_1DD862318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void CRLattice::kBestPaths(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8)
{
  id v13 = a8;
  LXLexiconCreateRootCursor();
  if (a5) {
    LXLexiconCreateRootCursor();
  }
  uint64_t v22 = +[CRCHPatternNetwork rootCursorForContentType:a7 inNetwork:v13];
  uint64_t v19 = a3;
  char v20 = a6;
  uint64_t v14 = *a1;
  id v15 = std::set<unsigned long>::set[abi:ne180100](v24, *a1 + 64);
  id v16 = *(uint64_t **)(v24[0] + 32);
  std::__tree<CRCHuint128>::destroy((uint64_t)v15, (void *)v24[1]);
  LOBYTE(v18) = v20;
  LODWORD(v17) = a7;
  CRCHNetwork::kBestPaths(v14, v16, a2, &v23, v13, v22, v17, v19, v18, &__block_literal_global_38, &__block_literal_global_131);
}

void sub_1DD862664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

double ___ZN9CRLattice10kBestPathsEiPvPK10_LXLexiconPS1_bbP18CRCHPatternNetworkbRKNSt3__18functionIFvRKNS7_6vectorImNS7_9allocatorImEEEEddddddEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 32);
}

double ___ZN9CRLattice10kBestPathsEiPvPK10_LXLexiconPS1_bbP18CRCHPatternNetworkbRKNSt3__18functionIFvRKNS7_6vectorImNS7_9allocatorImEEEEddddddEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 144);
  uint64_t v3 = **(double ***)(a2 + 56);
  double v4 = v3[8];
  if (v2 > v4)
  {
    *(double *)(a2 + 144) = v4;
    double v2 = v4;
  }
  double v5 = *(double *)(a2 + 128);
  if (v5 > v4)
  {
    *(double *)(a2 + 128) = v4;
    double v5 = v4;
  }
  double v6 = *(double *)(a2 + 176);
  if (v6 > v4)
  {
    *(double *)(a2 + 176) = v4;
    double v6 = v4;
  }
  return v3[1] * (v5 + *(double *)(a2 + 120))
       + v3[2] * (v2 + *(double *)(a2 + 136))
       + v3[5] * (*(double *)(a2 + 184) + *(double *)(a2 + 192))
       + v3[3] * (v6 + *(double *)(a2 + 168))
       + v3[6] * *(double *)(a2 + 200);
}

id CRLattice::decodePath(uint64_t *a1, uint64_t a2, void *a3, void *a4, int a5)
{
  unint64_t v8 = 0x1E4F1C000uLL;
  int8x16_t v92 = [MEMORY[0x1E4F1CA48] array];
  float v114 = 0;
  unsigned int v115 = 0;
  unint64_t v116 = 0;
  unint64_t v97 = (void *)a2;
  std::vector<_NSRange>::__init_with_size[abi:ne180100]<_NSRange*,_NSRange*>(&v114, *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 4);
  uint64_t v9 = v115;
  uint64_t v10 = v115 - v114;
  if (v115 == v114)
  {
    uint64_t v11 = ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3) - 1;
    if ((unint64_t)v115 >= v116)
    {
      uint64_t v13 = v10 >> 4;
      uint64_t v14 = v116 - (void)v114;
      if ((uint64_t)(v116 - (void)v114) >> 3 <= (unint64_t)((v10 >> 4) + 1)) {
        uint64_t v15 = v13 + 1;
      }
      else {
        uint64_t v15 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)&v116, v16);
      uint64_t v18 = &v17[16 * v13];
      char v20 = &v17[16 * v19];
      *(void *)uint64_t v18 = 0;
      *((void *)v18 + 1) = v11;
      uint64_t v12 = v18 + 16;
      uint64_t v22 = v114;
      float v21 = v115;
      if (v115 != v114)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v21 - 1);
          v18 -= 16;
          v21 -= 16;
        }
        while (v21 != v22);
        float v21 = v114;
      }
      float v114 = v18;
      unsigned int v115 = v12;
      unint64_t v116 = (unint64_t)v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)unsigned int v115 = 0;
      *((void *)v9 + 1) = v11;
      uint64_t v12 = v9 + 16;
    }
    unsigned int v115 = v12;
  }
  if (a4)
  {
    uint64_t v90 = [MEMORY[0x1E4F1CA48] array];
  }
  else
  {
    uint64_t v90 = 0;
  }
  if (a3)
  {
    unint64_t v89 = [MEMORY[0x1E4F1CA48] array];
  }
  else
  {
    unint64_t v89 = 0;
  }
  uint64_t v23 = v114;
  float64x2_t v91 = v115;
  if (v114 != v115)
  {
    uint64_t v24 = 0;
    uint64_t v103 = a5;
    unint64_t v95 = 0;
    do
    {
      uint64_t v25 = *((void *)v23 + 1);
      float v99 = [MEMORY[0x1E4F28E78] string];
      if (a4)
      {
        uint64_t v96 = [*(id *)(v8 + 2632) array];
      }
      else
      {
        uint64_t v96 = 0;
      }
      if ([v99 length]) {
        [v99 appendString:@" "];
      }
      float64x2_t v94 = v23;
      if (v25)
      {
        unint64_t v26 = 0;
        uint64_t v27 = v24;
        do
        {
          uint64_t v100 = v25;
          uint64_t v101 = v27 + 1;
          double v28 = (unint64_t *)(*(void *)(*a1 + 40) + 56 * *(void *)(v97[8] + 8 * v27));
          unint64_t v29 = v28[2] + *(void *)(v97[11] + 8 * (v27 + 1));
          uint64_t v30 = *(void *)(*a1 + 88);
          double v104 = (void *)(v30 + 80 * v29);
          uint64_t v31 = *(void *)(*a1 + 144) + 24 * v104[2];
          if (*(char *)(v31 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v31, *(void *)(v31 + 8));
          }
          else
          {
            long long v32 = *(_OWORD *)v31;
            __str.__r_.__value_.__r.__words[2] = *(void *)(v31 + 16);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v32;
          }
          w2i32(&__str, &v111);
          id v33 = [NSString alloc];
          uint64_t v34 = [v33 initWithBytes:v111 length:v112 - v111 encoding:2617245952];

          [v99 appendString:v34];
          int v102 = (void *)v34;
          if (a4)
          {
            uint64_t v35 = objc_alloc_init(CRTextFeature);
            [(CRTextFeature *)v35 setStringValue:v34];
            uint64_t v36 = v30 + 80 * v29;
            uint64_t v38 = *(void *)(v36 + 8);
            double v37 = (void *)(v36 + 8);
            [(CRTextFeature *)v35 setBounds:Segmenter::imageRegionBetweenBreakpoints((double *)(a1[3] + 40 * *v104), (int *)(a1[3] + 40 * v38), a1 + 3)];
            [(CRTextFeature *)v35 bounds];
            -[CRTextFeature setTopLeft:](v35, "setTopLeft:");
            [(CRTextFeature *)v35 bounds];
            double v40 = v39;
            [(CRTextFeature *)v35 bounds];
            double v42 = v41;
            [(CRTextFeature *)v35 bounds];
            -[CRTextFeature setBottomLeft:](v35, "setBottomLeft:", v40, v42 + v43);
            [(CRTextFeature *)v35 bounds];
            double v45 = v44;
            [(CRTextFeature *)v35 bounds];
            double v47 = v46;
            [(CRTextFeature *)v35 bounds];
            [(CRTextFeature *)v35 setTopRight:v45 + v47];
            [(CRTextFeature *)v35 bounds];
            double v49 = v48;
            [(CRTextFeature *)v35 bounds];
            double v51 = v50;
            [(CRTextFeature *)v35 bounds];
            double v53 = v52;
            [(CRTextFeature *)v35 bounds];
            -[CRTextFeature setBottomRight:](v35, "setBottomRight:", v49 + v51, v53 + v54);
            float v108 = 0;
            uint64_t v109 = 0;
            uint64_t v110 = 0;
            unint64_t v55 = *v28;
            if (*v28)
            {
              long long v56 = 0;
              unint64_t v57 = 0;
              do
              {
                uint64_t v58 = *(void *)(*a1 + 88) + 80 * (v28[2] + v57);
                if (*(void *)(v58 + 8) == *v37)
                {
                  if (v56 >= v110)
                  {
                    uint64_t v59 = ((char *)v56 - (unsigned char *)v108) >> 3;
                    if ((unint64_t)(v59 + 1) >> 61) {
                      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v60 = ((char *)v110 - (unsigned char *)v108) >> 2;
                    if (v60 <= v59 + 1) {
                      unint64_t v60 = v59 + 1;
                    }
                    if ((unint64_t)((char *)v110 - (unsigned char *)v108) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v61 = v60;
                    }
                    if (v61) {
                      long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v110, v61);
                    }
                    else {
                      long long v62 = 0;
                    }
                    long long v63 = (uint64_t *)&v62[8 * v59];
                    uint64_t *v63 = v58;
                    long long v56 = v63 + 1;
                    long long v65 = (char *)v108;
                    long long v64 = (char *)v109;
                    if (v109 != v108)
                    {
                      do
                      {
                        uint64_t v66 = *((void *)v64 - 1);
                        v64 -= 8;
                        *--long long v63 = v66;
                      }
                      while (v64 != v65);
                      long long v64 = (char *)v108;
                    }
                    float v108 = v63;
                    uint64_t v109 = v56;
                    uint64_t v110 = (uint64_t *)&v62[8 * v61];
                    if (v64) {
                      operator delete(v64);
                    }
                  }
                  else
                  {
                    *v56++ = v58;
                  }
                  uint64_t v109 = v56;
                  unint64_t v55 = *v28;
                }
                ++v57;
              }
              while (v57 < v55);
              long long v67 = (uint64_t *)v108;
            }
            else
            {
              long long v56 = 0;
              long long v67 = 0;
            }
            unint64_t v68 = 126 - 2 * __clz(v56 - v67);
            if (v56 == v67) {
              uint64_t v69 = 0;
            }
            else {
              uint64_t v69 = v68;
            }
            std::__introsort<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**,false>((uint64_t)v67, v56, v69, 1);
            long long v70 = [*(id *)(v8 + 2632) array];
            long long v71 = [*(id *)(v8 + 2632) array];
            [(CRTextFeature *)v35 setBestCandidateIndex:-1];
            long long v72 = (uint64_t *)v108;
            long long v73 = v109;
            if (v108 != v109)
            {
              uint64_t v74 = 0;
              do
              {
                uint64_t v75 = *v72;
                if ([v70 count] == v103) {
                  break;
                }
                uint64_t v76 = *(void *)(*a1 + 144) + 24 * *(void *)(v75 + 16);
                if (*(char *)(v76 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v76, *(void *)(v76 + 8));
                }
                else
                {
                  long long v77 = *(_OWORD *)v76;
                  v107.__r_.__value_.__r.__words[2] = *(void *)(v76 + 16);
                  *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v77;
                }
                w2i32(&v107, (char **)&__p);
                id v78 = [NSString alloc];
                uint64_t v79 = (void *)[v78 initWithBytes:__p length:v106 - (unsigned char *)__p encoding:2617245952];
                [v70 addObject:v79];
                float v80 = [NSNumber numberWithDouble:__exp10(-*(double *)(v75 + 32))];
                [v71 addObject:v80];

                if ((void *)v75 == v104) {
                  [(CRTextFeature *)v35 setBestCandidateIndex:v74];
                }

                if (__p)
                {
                  unint64_t v106 = __p;
                  operator delete(__p);
                }
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v107.__r_.__value_.__l.__data_);
                }
                ++v72;
                ++v74;
              }
              while (v72 != v73);
            }
            [(CRTextFeature *)v35 setStringValueCandidates:v70];
            [(CRTextFeature *)v35 setCandidateProbs:v71];
            [v96 addObject:v35];

            if (v108)
            {
              uint64_t v109 = (uint64_t *)v108;
              operator delete(v108);
            }

            unint64_t v8 = 0x1E4F1C000;
          }
          if (v111)
          {
            float v112 = v111;
            operator delete(v111);
          }
          uint64_t v24 = v101;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          float v81 = v102;
          uint64_t v82 = [v102 length];
          uint64_t v27 = v101;
          unint64_t v26 = v102;
          uint64_t v25 = v100 - v82;
        }
        while (v100 != v82);
      }
      else
      {
        float v81 = 0;
      }
      [v92 addObject:v99];
      if (a4) {
        [v90 addObject:v96];
      }
      if (a3)
      {
        uint64_t v83 = (v95 >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v84 = 3;
        if ((*(void *)(v97[48] + v83) & (1 << v95)) == 0) {
          uint64_t v84 = 1;
        }
        if ((*(void *)(v97[51] + v83) & (1 << v95)) != 0) {
          uint64_t v85 = v84 | 4;
        }
        else {
          uint64_t v85 = v84;
        }
        float v86 = [NSNumber numberWithUnsignedInteger:v85];
        [v89 addObject:v86];
      }
      ++v95;

      uint64_t v23 = v94 + 16;
    }
    while (v94 + 16 != v91);
  }
  if (a4)
  {
    *a4 = [MEMORY[0x1E4F1C978] arrayWithArray:v90];
  }
  if (a3)
  {
    *a3 = [MEMORY[0x1E4F1C978] arrayWithArray:v89];
  }
  int v87 = [MEMORY[0x1E4F1C978] arrayWithArray:v92];

  if (v114)
  {
    unsigned int v115 = v114;
    operator delete(v114);
  }

  return v87;
}

void sub_1DD862FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39)
{
  double v41 = *(void **)(v39 - 144);
  if (v41)
  {
    *(void *)(v39 - 136) = v41;
    operator delete(v41);
  }

  _Unwind_Resume(a1);
}

void *std::vector<BreakPoint>::__init_with_size[abi:ne180100]<BreakPoint*,BreakPoint*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    std::vector<BreakPoint>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<BreakPoint>,BreakPoint*,BreakPoint*,BreakPoint*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DD8631DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<BreakPoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<BreakPoint>,BreakPoint*,BreakPoint*,BreakPoint*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    double v6 = a2;
    do
    {
      uint64_t v7 = *v6;
      *(_DWORD *)(v4 + 8) = *((_DWORD *)v6 + 2);
      *(void *)uint64_t v4 = v7;
      *(void *)(v4 + 16) = (id)v6[2];
      *(void *)(v4 + 24) = (id)v6[3];
      *(void *)(v4 + 32) = v6[4];
      v4 += 40;
      v6 += 5;
    }
    while (v6 != a3);
    uint64_t v12 = v4;
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<BreakPoint>,BreakPoint*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<BreakPoint>,BreakPoint*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::__allocator_destroy[abi:ne180100]<std::allocator<BreakPoint>,std::reverse_iterator<BreakPoint*>,std::reverse_iterator<BreakPoint*>>(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<BreakPoint>,std::reverse_iterator<BreakPoint*>,std::reverse_iterator<BreakPoint*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    do
    {

      v6 -= 40;
    }
    while (v6 != a5);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    char v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v10;
                if (*(double *)(v40 + 32) < *(double *)(*v10 + 32))
                {
                  uint64_t *v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                double result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                double result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                double v42 = v10 + 1;
                double v43 = v10 + 2;
                double v44 = v10 + 3;
                double result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v45 = *(a2 - 1);
                uint64_t v46 = v10[3];
                if (*(double *)(v45 + 32) < *(double *)(v46 + 32))
                {
                  uint64_t *v44 = v45;
                  *(a2 - 1) = v46;
                  uint64_t v47 = *v44;
                  uint64_t v48 = *v43;
                  double v49 = *(double *)(*v44 + 32);
                  if (v49 < *(double *)(*v43 + 32))
                  {
                    *double v43 = v47;
                    uint64_t *v44 = v48;
                    uint64_t v50 = *v42;
                    if (v49 < *(double *)(*v42 + 32))
                    {
                      v10[1] = v47;
                      v10[2] = v50;
                      uint64_t v51 = *v10;
                      if (v49 < *(double *)(*v10 + 32))
                      {
                        uint64_t *v10 = v47;
                        v10[1] = v51;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            double v52 = v10 + 1;
            BOOL v54 = v10 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 8;
                long long v56 = v10;
                do
                {
                  uint64_t v58 = *v56;
                  uint64_t v57 = v56[1];
                  long long v56 = v52;
                  double v59 = *(double *)(v57 + 32);
                  if (v59 < *(double *)(v58 + 32))
                  {
                    uint64_t v60 = v55;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v60) = v58;
                      uint64_t v61 = v60 - 8;
                      if (v60 == 8)
                      {
                        long long v62 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v58 = *(uint64_t *)((char *)v10 + v60 - 16);
                      v60 -= 8;
                    }
                    while (v59 < *(double *)(v58 + 32));
                    long long v62 = (uint64_t *)((char *)v10 + v61);
LABEL_85:
                    *long long v62 = v57;
                  }
                  double v52 = v56 + 1;
                  v55 += 8;
                }
                while (v56 + 1 != a2);
              }
            }
            else if (!v54)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                uint64_t v9 = v52;
                double v92 = *(double *)(v90 + 32);
                if (v92 < *(double *)(v91 + 32))
                {
                  do
                  {
                    *double v52 = v91;
                    uint64_t v91 = *(v52 - 2);
                    --v52;
                  }
                  while (v92 < *(double *)(v91 + 32));
                  *double v52 = v90;
                }
                double v52 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v63 = (v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  long long v67 = &v10[v66];
                  if (2 * v65 + 2 < (uint64_t)v12 && *(double *)(*v67 + 32) < *(double *)(v67[1] + 32))
                  {
                    ++v67;
                    uint64_t v66 = 2 * v65 + 2;
                  }
                  unint64_t v68 = &v10[v65];
                  uint64_t v69 = *v67;
                  uint64_t v70 = *v68;
                  double v71 = *(double *)(*v68 + 32);
                  if (*(double *)(*v67 + 32) >= v71)
                  {
                    do
                    {
                      long long v72 = v67;
                      uint64_t *v68 = v69;
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v73 = 2 * v66;
                      uint64_t v66 = (2 * v66) | 1;
                      long long v67 = &v10[v66];
                      uint64_t v74 = v73 + 2;
                      if (v74 < (uint64_t)v12)
                      {
                        double result = *v67;
                        if (*(double *)(*v67 + 32) < *(double *)(v67[1] + 32))
                        {
                          ++v67;
                          uint64_t v66 = v74;
                        }
                      }
                      uint64_t v69 = *v67;
                      unint64_t v68 = v72;
                    }
                    while (*(double *)(*v67 + 32) >= v71);
                    *long long v72 = v70;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              uint64_t v75 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v76 = 0;
                uint64_t v77 = *v10;
                id v78 = v10;
                do
                {
                  uint64_t v79 = v78;
                  v78 += v76 + 1;
                  uint64_t v80 = 2 * v76;
                  uint64_t v76 = (2 * v76) | 1;
                  uint64_t v81 = v80 + 2;
                  if (v81 < v75 && *(double *)(*v78 + 32) < *(double *)(v78[1] + 32))
                  {
                    ++v78;
                    uint64_t v76 = v81;
                  }
                  *uint64_t v79 = *v78;
                }
                while (v76 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
                if (v78 == --a2)
                {
                  *id v78 = v77;
                }
                else
                {
                  *id v78 = *a2;
                  *a2 = v77;
                  uint64_t v82 = (char *)v78 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    uint64_t v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v78;
                    double v87 = *(double *)(*v78 + 32);
                    if (*(double *)(*v84 + 32) < v87)
                    {
                      do
                      {
                        double v88 = v84;
                        *id v78 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        uint64_t v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        id v78 = v88;
                      }
                      while (*(double *)(*v84 + 32) < v87);
                      *double v88 = v86;
                    }
                  }
                }
              }
              while (v75-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v9 + 2, &v9[v13 + 1], a2 - 3);
            double result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *uint64_t v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            double result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          double v17 = *(double *)(v16 + 32);
          if (*(double *)(*(v9 - 1) + 32) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(double *)(*(a2 - 1) + 32))
          {
            long long v32 = v9 + 1;
            do
            {
              char v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= *(double *)(*v10 + 32));
          }
          else
          {
            char v10 = v9;
            do
            {
              uint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *(double *)(v31 + 32));
          }
          id v33 = a2;
          if (v10 < a2)
          {
            id v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *(double *)(v34 + 32));
          }
          if (v10 < v33)
          {
            uint64_t v35 = *v10;
            uint64_t v36 = *v33;
            do
            {
              uint64_t *v10 = v36;
              *id v33 = v35;
              do
              {
                uint64_t v37 = v10[1];
                ++v10;
                uint64_t v35 = v37;
              }
              while (v17 >= *(double *)(v37 + 32));
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
              }
              while (v17 < *(double *)(v38 + 32));
            }
            while (v10 < v33);
          }
          uint64_t v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *uint64_t v9 = *v39;
          }
          a4 = 0;
          *uint64_t v39 = v16;
        }
        double v17 = *(double *)(v16 + 32);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(double *)(v19 + 32) < v17);
        char v20 = &v9[v18];
        float v21 = a2;
        if (v18 == 1)
        {
          float v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(double *)(v23 + 32) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(double *)(v22 + 32) >= v17);
        }
        if (v20 >= v21)
        {
          unint64_t v29 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v25 = &v9[v18];
          unint64_t v26 = v21;
          do
          {
            *uint64_t v25 = v24;
            uint64_t *v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              uint64_t v19 = v27;
            }
            while (*(double *)(v27 + 32) < v17);
            do
            {
              uint64_t v28 = *--v26;
              uint64_t v24 = v28;
            }
            while (*(double *)(v28 + 32) >= v17);
          }
          while (v25 < v26);
          unint64_t v29 = v25 - 1;
        }
        if (v29 != v9) {
          *uint64_t v9 = *v29;
        }
        *unint64_t v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        double result = std::__introsort<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**,false>(v9, v29, a3, a4 & 1);
        a4 = 0;
        char v10 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v9, v29);
      char v10 = v29 + 1;
      double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  double v5 = *(double *)(*a2 + 32);
  double v6 = *(double *)(*result + 32);
  uint64_t v7 = *a3;
  double v8 = *(double *)(*a3 + 32);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(double *)(*a2 + 32) < *(double *)(*result + 32))
      {
        *double result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *double result = v3;
      *a2 = v4;
      if (*(double *)(*a3 + 32) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *double result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(double *)(v6 + 32) < *(double *)(*a1 + 32))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      char v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(double *)(v21 + 32) < *(double *)(v22 + 32))
      {
        uint64_t *v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        double v25 = *(double *)(*v20 + 32);
        if (v25 < *(double *)(*v19 + 32))
        {
          *uint64_t v19 = v23;
          uint64_t *v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(double *)(*v18 + 32))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(double *)(*a1 + 32))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      double v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    double v14 = *(double *)(*v9 + 32);
    if (v14 < *(double *)(*v8 + 32))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(double *)(v13 + 32))
        {
          double v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      double v17 = a1;
LABEL_13:
      *double v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    double v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(double *)(*a4 + 32) < *(double *)(*a3 + 32))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(double *)(*a3 + 32) < *(double *)(*a2 + 32))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(double *)(*a2 + 32) < *(double *)(*a1 + 32))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void sub_1DD86418C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD86427C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD864324(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD864688(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DD86500C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a66, 8);
  _Block_object_dispose((const void *)(v66 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1DD8659C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD865AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD866248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void sub_1DD86660C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD866A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1DD866F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Segmenter *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a54, 8);
  Segmenter::~Segmenter(a10);

  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__17(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  uint64_t v4 = *(uint64_t ****)(a2 + 48);
  double v5 = *(uint64_t ****)(a2 + 56);
  if (v5 != v4)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 8), v6);
    v3[6] = v7;
    v3[7] = v7;
    uint64_t v19 = v3;
    v3[8] = &v7[3 * v8];
    uint64_t v22 = v7;
    v23[0] = v7;
    v20[0] = v3 + 8;
    v20[1] = &v22;
    v20[2] = v23;
    char v21 = 0;
    uint64_t v9 = v7;
    do
    {
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      uint64_t v10 = *v4;
      uint64_t v11 = v4[1];
      v23[1] = v9;
      char v24 = 0;
      if (v11 != v10)
      {
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 - v10);
        if (v12 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v9 + 2), v12);
        *uint64_t v9 = v13;
        v9[1] = v13;
        v9[2] = &v13[3 * v14];
        uint64_t v27 = v13;
        uint64_t v28 = v13;
        v25[0] = v9 + 2;
        v25[1] = &v27;
        v25[2] = &v28;
        char v26 = 0;
        uint64_t v15 = v13;
        do
        {
          void *v15 = 0;
          v15[1] = 0;
          v15[2] = 0;
          std::vector<BreakPoint>::__init_with_size[abi:ne180100]<BreakPoint*,BreakPoint*>(v15, *v10, v10[1], 0xCCCCCCCCCCCCCCCDLL * (v10[1] - *v10));
          uint64_t v15 = v28 + 3;
          v28 += 3;
          v10 += 3;
        }
        while (v10 != v11);
        char v26 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BreakPoint>>,std::vector<BreakPoint>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v25);
        v9[1] = v15;
        uint64_t v9 = (void *)v23[0];
      }
      v4 += 3;
      v9 += 3;
      v23[0] = v9;
    }
    while (v4 != v5);
    char v21 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<BreakPoint>>>,std::vector<std::vector<BreakPoint>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v20);
    uint64_t v3 = v19;
    v19[7] = v9;
  }
  v3[9] = *(id *)(a2 + 72);
  v3[10] = *(id *)(a2 + 80);
  v3[11] = *(id *)(a2 + 88);
  v3[12] = *(id *)(a2 + 96);
  id v16 = *(id *)(a2 + 104);
  v3[14] = 0;
  v3[13] = v16;
  v3[15] = 0;
  v3[16] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v3 + 14, *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  v3[17] = 0;
  v3[18] = 0;
  v3[19] = 0;
  BOOL result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v3 + 17, *(const void **)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3);
  uint64_t v18 = *(void *)(a2 + 160);
  *((_DWORD *)v3 + 42) = *(_DWORD *)(a2 + 168);
  v3[20] = v18;
  return result;
}

void sub_1DD8672BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  double v25 = *v23;
  if (*v23)
  {
    *(void *)(v22 + 120) = v25;
    operator delete(v25);
  }

  a22 = a10;
  std::vector<std::vector<std::vector<BreakPoint>>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void sub_1DD867900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD867A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BreakPoint>>,std::vector<BreakPoint>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void ****)(a1 + 8);
    uint64_t v4 = **(void ****)(a1 + 16);
    while (v4 != v3)
    {
      v4 -= 3;
      double v5 = v4;
      std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<BreakPoint>>>,std::vector<std::vector<BreakPoint>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void ****)(a1 + 8);
    uint64_t v4 = **(void ****)(a1 + 16);
    while (v4 != v3)
    {
      v4 -= 3;
      double v5 = v4;
      std::vector<std::vector<BreakPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

uint64_t nms::PyramidNMSConfig::PyramidNMSConfig(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(_WORD *)(result + 32) = 267;
  *(unsigned char *)(result + 34) = 0;
  *(void *)(result + 40) = 0x3FE3333333333333;
  *(void *)(result + 80) = 0xBFF0000000000000;
  *(void *)(result + 96) = 50;
  *(_DWORD *)(result + 120) = 16843009;
  *(_WORD *)(result + 124) = 257;
  *(void *)(result + 128) = 3;
  *(void *)(result + 144) = 0x3FB0000000000000;
  *(unsigned char *)(result + 48) = 1;
  *(_OWORD *)(result + 56) = xmmword_1DD8CEE40;
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 88) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(result + 104) = _Q0;
  *(_WORD *)(result + 136) = 0;
  *(unsigned char *)(result + 152) = 1;
  *(_WORD *)(result + 176) = 256;
  *(_OWORD *)(result + 184) = xmmword_1DD8CEE50;
  *(_OWORD *)(result + 216) = xmmword_1DD8CEE50;
  *(void *)(result + 160) = 0x3FEB333333333333;
  *(void *)(result + 168) = 0;
  *(_OWORD *)(result + 200) = xmmword_1DD8CEE60;
  *(_OWORD *)(result + 232) = xmmword_1DD8CEE60;
  *(_OWORD *)(result + 248) = xmmword_1DD8CEE70;
  *(void *)(result + 264) = 0x3FEB333333333333;
  *(_OWORD *)(result + 272) = xmmword_1DD8CEE80;
  *(_OWORD *)(result + 288) = xmmword_1DD8CEE80;
  *(_OWORD *)(result + 304) = xmmword_1DD8CE3D0;
  *(_OWORD *)(result + 320) = xmmword_1DD8CEE90;
  *(void *)BOOL result = &unk_1F38ED580;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0;
  if (a3 <= 1) {
    *(void *)(result + 24) = 0;
  }
  return result;
}

double nms::PyramidNMSConfig::PyramidNMSConfig(nms::PyramidNMSConfig *this, const PyramidNMSConfig *a2)
{
  *(void *)this = &unk_1F38ED580;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_WORD *)this + 16) = 267;
  *((unsigned char *)this + 34) = 0;
  *((void *)this + 5) = 0x3FE3333333333333;
  *((unsigned char *)this + 48) = 1;
  *(_OWORD *)((char *)this + 56) = xmmword_1DD8CEE40;
  *((unsigned char *)this + 72) = 0;
  *((void *)this + 10) = 0xBFF0000000000000;
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 12) = 50;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 104) = _Q0;
  *((_DWORD *)this + 30) = 16843009;
  *((_WORD *)this + 62) = 257;
  *((void *)this + 16) = 3;
  *((_WORD *)this + 68) = 0;
  *((void *)this + 18) = 0x3FB0000000000000;
  *((unsigned char *)this + 152) = 1;
  *((void *)this + 20) = 0x3FEB333333333333;
  *((void *)this + 21) = 0;
  *((_WORD *)this + 88) = 256;
  *(_OWORD *)((char *)this + 184) = xmmword_1DD8CEE50;
  *(_OWORD *)((char *)this + 200) = xmmword_1DD8CEE60;
  *(_OWORD *)((char *)this + 216) = xmmword_1DD8CEE50;
  *(_OWORD *)((char *)this + 232) = xmmword_1DD8CEE60;
  *(_OWORD *)((char *)this + 248) = xmmword_1DD8CEE70;
  *(_OWORD *)((char *)this + 264) = xmmword_1DD8CEEA0;
  *(_OWORD *)((char *)this + 280) = xmmword_1DD8CEEA0;
  *(_OWORD *)((char *)this + 296) = xmmword_1DD8CEEB0;
  *(_OWORD *)((char *)this + 312) = xmmword_1DD8CEEC0;
  *((void *)this + 41) = 0x3FEB333333333333;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&a2->methodType;
  *((_WORD *)this + 16) = *(_WORD *)&a2->scoreMapMinThreshold;
  *((void *)this + 3) = *(void *)&a2->scoreMinThreshold;
  *((unsigned char *)this + 34) = a2->scoreUseArea;
  *((void *)this + 5) = *(void *)&a2->scoreAggregationScalingFactor;
  *((unsigned char *)this + 48) = a2->scoreUseNumSubDatums;
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)&a2->scoreNumSubDatumsUpperClip;
  *((unsigned char *)this + 72) = a2->ignoreOrphansInFullTile;
  *((unsigned char *)this + 88) = a2->computeIntrascaleGeometricRelationships;
  *((void *)this + 12) = a2->intersectionNumSamples;
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)&a2->iouMinThresholdToAcceptContainedDatum;
  *((_DWORD *)this + 30) = *(_DWORD *)&a2->pendingInvalidRejectCompetingDatums;
  *((_WORD *)this + 62) = *(_WORD *)&a2->processOverlap;
  *((unsigned char *)this + 152) = a2->useOverlappingWordsInProcessingContainment;
  *((void *)this + 16) = a2->favorSubDatumUndersegmentationInProcessingCoincidence;
  *((_WORD *)this + 68) = *(_WORD *)&a2->favorLargerAreaInProcessingCoincidence;
  *((void *)this + 18) = *(void *)&a2->datumMinHeightRatioToUseFullTile;
  *((unsigned char *)this + 152) = a2->useOverlappingWordsInProcessingContainment;
  *((void *)this + 20) = *(void *)&a2->minValidCosAngleInDistributionCheckInProcessingContainment;
  *((void *)this + 21) = a2->favorSubDatumUndersegmentationInProcessingContainment;
  *((unsigned char *)this + 176) = a2->favorLargerAreaInProcessingContainment;
  *((unsigned char *)this + 177) = a2->favorFullTileInProcessingContainment;
  *(_OWORD *)((char *)this + 184) = *(_OWORD *)&a2->heightRatioFineToFullMinThresholdFavorFullTileInProcessingContainment;
  *(_OWORD *)((char *)this + 200) = *(_OWORD *)&a2->widthRatioFineToFullMinThresholdFavorFullTileInProcessingContainment;
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)&a2->heightRatioFineToFullMinThresholdFavorFullTileInProcessingSingleConstituentContainment;
  *(_OWORD *)((char *)this + 232) = *(_OWORD *)&a2->widthRatioFineToFullMinThresholdFavorFullTileInProcessingSingleConstituentContainment;
  *(_OWORD *)((char *)this + 248) = *(_OWORD *)&a2->favorFullTileInProcessingOverlap;
  *(_OWORD *)((char *)this + 264) = *(_OWORD *)&a2->coincidenceIOMinMinThreshold;
  *(_OWORD *)((char *)this + 280) = *(_OWORD *)&a2->containmentIOMinMinThreshold;
  *(_OWORD *)((char *)this + 296) = *(_OWORD *)&a2->constitutionIOMinMinThreshold;
  *(_OWORD *)((char *)this + 312) = *(_OWORD *)&a2->overlapIOUMaxThreshold;
  double result = a2->overlapIOMinMaxThreshold;
  *((double *)this + 41) = result;
  return result;
}

double nms::PyramidNMSConfigV3::PyramidNMSConfigV3(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = nms::PyramidNMSConfig::PyramidNMSConfig(a1, a2, a3);
  *(void *)uint64_t v3 = &unk_1F38ED5A0;
  *(void *)(v3 + 96) = 20;
  double result = 0.02;
  *(_OWORD *)(v3 + 104) = xmmword_1DD8CEB30;
  *(void *)(v3 + 304) = 0x3FC999999999999ALL;
  *(void *)(v3 + 144) = 0x3FA1EB851EB851ECLL;
  *(unsigned char *)(v3 + 34) = 1;
  *(void *)(v3 + 40) = 0x4004000000000000;
  *(void *)(v3 + 160) = 0x3FE6666666666666;
  *(void *)(v3 + 216) = 0x3FE6666666666666;
  *(void *)(v3 + 184) = 0x3FE0000000000000;
  return result;
}

{
  uint64_t v3;
  double result;

  uint64_t v3 = nms::PyramidNMSConfig::PyramidNMSConfig(a1, a2, a3);
  *(void *)uint64_t v3 = &unk_1F38ED5A0;
  *(void *)(v3 + 96) = 20;
  double result = 0.02;
  *(_OWORD *)(v3 + 104) = xmmword_1DD8CEB30;
  *(void *)(v3 + 304) = 0x3FC999999999999ALL;
  *(void *)(v3 + 144) = 0x3FA1EB851EB851ECLL;
  *(unsigned char *)(v3 + 34) = 1;
  *(void *)(v3 + 40) = 0x4004000000000000;
  *(void *)(v3 + 160) = 0x3FE6666666666666;
  *(void *)(v3 + 216) = 0x3FE6666666666666;
  *(void *)(v3 + 184) = 0x3FE0000000000000;
  return result;
}

void nms::PyramidNMSConfig::~PyramidNMSConfig(nms::PyramidNMSConfig *this)
{
}

void nms::PyramidNMSConfigV3::~PyramidNMSConfigV3(nms::PyramidNMSConfigV3 *this)
{
}

void CRDetectorOutputMaps::init(CRDetectorOutputMaps *this)
{
}

void sub_1DD868AB4(_Unwind_Exception *a1)
{
  MEMORY[0x1E01BF140](v1, 0x1080C40ABB4582ELL);
  _Unwind_Resume(a1);
}

unint64_t CRDetectorOutputMaps::createMaps@<X0>(unint64_t this@<X0>, CGSize a2@<0:D0, 8:D1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (this)
  {
    unint64_t v3 = this;
    if (!(this >> 61))
    {
      uint64_t v5 = 8 * this;
      unint64_t v6 = (char *)operator new(8 * this);
      *a3 = v6;
      a3[2] = &v6[8 * v3];
      bzero(v6, 8 * v3);
      a3[1] = &v6[v5];
      operator new();
    }
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  return this;
}

void sub_1DD868C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void CRDetectorOutputMaps::scaleMaps(CRDetectorOutputMaps *this, int a2)
{
  unint64_t v3 = *(const float ***)this;
  uint64_t v4 = (float *)**((void **)this + 4);
  uint64_t v5 = (float *)**((void **)this + 5);
  float __B = 5.0;
  vDSP_vsdiv(*v3, 1, &__B, (float *)*v3, 1, (void)v3[1] * (void)v3[2]);
  if (a2)
  {
    for (uint64_t i = (void)v3[2] * (void)v3[1]; i; --i)
    {
      float v7 = *v4;
      if (*v4 > 0.1 && *v5 > 0.1)
      {
        if (v7 < *v5) {
          float v7 = *v5;
        }
        *uint64_t v5 = v7;
        *uint64_t v4 = v7;
      }
      ++v5;
      ++v4;
    }
  }
}

void CRDetectorOutputMaps::aggregateMaps(CRDetectorOutputMaps *this, CRTextDetectorModelV3Output *a2, const CGSize *a3, const CGPoint *a4)
{
  id v16 = a2;
  uint64_t v4 = [(CRTextDetectorModelV3Output *)v16 region_score];
  uint64_t v5 = [v4 shape];
  unint64_t v6 = [v5 objectAtIndexedSubscript:2];
  [v6 integerValue];

  float v7 = [(CRTextDetectorModelV3Output *)v16 region_score];
  uint64_t v8 = [v7 shape];
  uint64_t v9 = [v8 objectAtIndexedSubscript:1];
  [v9 integerValue];

  uint64_t v10 = [(CRTextDetectorModelV3Output *)v16 region_score];
  uint64_t v11 = [v10 strides];
  unint64_t v12 = [v11 objectAtIndexedSubscript:1];
  [v12 integerValue];

  uint64_t v13 = [(CRTextDetectorModelV3Output *)v16 region_score];
  uint64_t v14 = [v13 shape];
  uint64_t v15 = [v14 objectAtIndexedSubscript:0];
  [v15 integerValue];

  operator new();
}

void sub_1DD869264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18, void **a19, void **a20)
{
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](&a19, 0);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](&a20, 0);

  _Unwind_Resume(a1);
}

void CRDetectorOutputMaps::applyFunctionToMaps<void (*)(float const*,unsigned long,unsigned long,char *,float *,unsigned long,unsigned long,unsigned long)>(int a1, int a2, int a3, uint64_t a4, uint64_t a5, double *a6, id a7, uint64_t **a8, double a9, double a10, uint64_t a11)
{
  int v18 = (int)a10 / a3;
  if (v18 >= a2) {
    uint64_t v19 = a2;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = [a7 dataPointer];
  uint64_t v21 = v19;
  uint64_t v44 = v20;
  if ((int)v19 >= 1)
  {
    int v22 = a3;
    uint64_t v23 = 0;
    uint64_t v24 = a11;
    uint64_t v25 = **a8;
    int v26 = (int)a9 / a3;
    if (v26 >= a1) {
      int v26 = a1;
    }
    vDSP_Stride __IC = a3;
    int v43 = a3;
    vDSP_Length v27 = v26;
    uint64_t v28 = 4 * v22;
    double v29 = (double)a4;
    uint64_t v30 = 4 * a5;
    uint64_t v31 = (float *)v20;
    uint64_t v32 = a11;
    uint64_t v40 = a5;
    uint64_t v41 = a6;
    do
    {
      uint64_t v33 = (uint64_t)(*a6 + (a6[1] + (double)((int)v23 * v22)) * v29);
      if (v24)
      {
        if (v27)
        {
          uint64_t v34 = v31;
          uint64_t v35 = (unsigned char *)v32;
          vDSP_Length v36 = v27;
          uint64_t v37 = (float *)(v25 + 4 * v33);
          do
          {
            if (*v34 >= *v37)
            {
              *uint64_t v37 = *v34;
              *uint64_t v35 = 1;
            }
            uint64_t v37 = (float *)((char *)v37 + v28);
            ++v35;
            ++v34;
            --v36;
          }
          while (v36);
        }
      }
      else
      {
        uint64_t v38 = v21;
        uint64_t v39 = v25;
        vDSP_vmax((const float *)(v44 + 4 * v23 * a5), 1, (const float *)(v25 + 4 * v33), __IC, (float *)(v25 + 4 * v33), __IC, v27);
        uint64_t v25 = v39;
        uint64_t v24 = 0;
        a5 = v40;
        a6 = v41;
        uint64_t v21 = v38;
        int v22 = v43;
      }
      ++v23;
      v32 += a5;
      uint64_t v31 = (float *)((char *)v31 + v30);
    }
    while (v23 != v21);
  }
}

void CRDetectorOutputMaps::updateMultiChannelData(void *a1, uint64_t **a2, int a3, double *a4, uint64_t a5)
{
  id v8 = a1;
  uint64_t v9 = *a2;
  uint64_t v40 = a2[1];
  uint64_t v10 = [v8 shape];
  uint64_t v11 = [v10 objectAtIndexedSubscript:1];
  uint64_t v37 = [v11 integerValue];

  unint64_t v12 = [v8 shape];
  uint64_t v13 = [v12 objectAtIndexedSubscript:2];
  uint64_t v14 = [v13 integerValue];

  uint64_t v15 = [v8 strides];
  id v16 = [v15 objectAtIndexedSubscript:0];
  uint64_t v17 = [v16 integerValue];

  int v18 = [v8 strides];
  uint64_t v19 = [v18 objectAtIndexedSubscript:1];
  uint64_t v20 = [v19 integerValue];

  double v21 = *a4;
  double v22 = a4[1];
  uint64_t v23 = **a2;
  unint64_t v24 = *(void *)(v23 + 8);
  unint64_t v25 = *(void *)(v23 + 16);
  id v39 = v8;
  uint64_t v26 = [v39 dataPointer];
  if ((char *)v40 - (char *)v9 >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v40 - v9;
    double v29 = *a2;
    unint64_t v30 = v37 * a3;
    unint64_t v31 = v14 * a3;
    if (v28 <= 1) {
      uint64_t v28 = 1;
    }
    do
    {
      if (v30)
      {
        unint64_t v32 = 0;
        unint64_t v33 = *(void *)v29[v27] + 4 * (unint64_t)(v22 * 0.5) * v25;
        unint64_t v34 = (unint64_t)(v22 * 0.5);
        do
        {
          if (v34 < v24 && v31)
          {
            unint64_t v35 = 0;
            unint64_t v36 = (unint64_t)(v21 * 0.5);
            do
            {
              if (v36 < v25 && *(char *)(a5 + v20 * (int)v32 + v35) >= 1) {
                *(_DWORD *)(v33 + 4 * v36) = *(_DWORD *)(v26 + 4 * v20 * (int)v32 + 4 * v35);
              }
              ++v36;
              v35 += a3;
            }
            while (v35 < v31);
          }
          ++v34;
          v32 += a3;
          v33 += 4 * v25;
        }
        while (v32 < v30);
      }
      ++v27;
      v26 += 4 * v17;
    }
    while (v27 != v28);
  }
}

void sub_1DD869768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](void ***result, void **a2)
{
  double v2 = *result;
  *double result = a2;
  if (v2)
  {
    if (*v2) {
      free(*v2);
    }
    JUMPOUT(0x1E01BF140);
  }
  return result;
}

void sub_1DD86990C(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DD869A6C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DD869B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD869CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD86A7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v35 = *(void **)(v33 - 176);
  if (v35)
  {
    *(void *)(v33 - 168) = v35;
    operator delete(v35);
  }

  _Unwind_Resume(a1);
}

void sub_1DD86AB00(_Unwind_Exception *a1)
{
  MEMORY[0x1E01BF140](v2, 0x1080C40ABB4582ELL);

  _Unwind_Resume(a1);
}

void sub_1DD86AD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12)
{
  a12 = a11;
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void sub_1DD86B98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void **a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a50, 8);
  a44 = a13;
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100](&a44);
  _Block_object_dispose(&a59, 8);

  _Block_object_dispose(&a65, 8);
  std::deque<unsigned char>::~deque[abi:ne180100](a12);

  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose(&STACK[0x2C8], 8);
  _Block_object_dispose(&STACK[0x308], 8);
  _Block_object_dispose(&STACK[0x348], 8);
  _Block_object_dispose(&STACK[0x388], 8);
  _Block_object_dispose(&STACK[0x3C8], 8);

  _Block_object_dispose(&STACK[0x3F8], 8);
  CRDetectorOutputMaps::~CRDetectorOutputMaps((void ***)&STACK[0x428]);
  _Block_object_dispose(&STACK[0x490], 8);
  CRDetectorOutputMaps::~CRDetectorOutputMaps((void ***)&STACK[0x4C0]);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a2 + 56) = 0u;
  uint64_t v3 = *(void *)(a2 + 80);
  *(_OWORD *)(a2 + 72) = 0u;
  *(void *)(a1 + 80) = v3;
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 88) = v4;
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  __n128 result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  return result;
}

void ***__Block_byref_object_dispose__20(uint64_t a1)
{
  uint64_t v2 = (void ***)(a1 + 48);
  uint64_t v4 = (void **)(a1 + 128);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 104);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)(a1 + 96), 0);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)(a1 + 88), 0);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)(a1 + 80), 0);
  uint64_t v4 = (void **)(a1 + 56);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](v2, 0);
}

void CRDetectorOutputMaps::~CRDetectorOutputMaps(void ***this)
{
  uint64_t v2 = (void **)(this + 10);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(this + 7);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](this + 6, 0);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](this + 5, 0);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](this + 4, 0);
  uint64_t v2 = (void **)(this + 1);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](this, 0);
}

__n128 __Block_byref_object_copy__11(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1DD86C454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD86C89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Unwind_Resume(a1);
}

void sub_1DD86CAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double __Block_byref_object_copy__21(void *a1, void *a2)
{
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  double result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__22(uint64_t a1)
{
  return std::deque<unsigned char>::~deque[abi:ne180100]((void *)(a1 + 48));
}

__n128 __Block_byref_object_copy__24(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
}

void sub_1DD86CFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD86FC14(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 1320);
  uint64_t v6 = *(void *)(v1 + 1328);
  if (v6 != v5) {
    *(void *)(v1 + 1328) = v6 + ((v5 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  float v7 = *(void **)(v1 + 1312);
  if (v7) {
    operator delete(v7);
  }

  *(void *)(v1 + 88) = v3;
  *(void *)(v1 + 640) = v1 + 440;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 640));
  std::deque<unsigned char>::~deque[abi:ne180100]((void *)(v1 + 464));

  *(void *)(v1 + 464) = v1 + 536;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 464));
  std::deque<unsigned char>::~deque[abi:ne180100]((void *)(v1 + 560));

  _Unwind_Resume(a1);
}

void sub_1DD86FC20()
{
}

void sub_1DD86FCD4()
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,CRDetectorUtils::CRTextDetectorQuadFeature*>>::~__exception_guard_exceptions[abi:ne180100](v0 + 1312);
  *(void *)(v0 + 544) = v1;
  JUMPOUT(0x1DD86FD90);
}

void sub_1DD86FCE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    for (uint64_t i = *(void ***)(v2 + 1320); i != *(void ***)(v2 + 1328); ++i)
    {
      uint64_t v4 = *i;
      operator delete(v4);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1DD86FD1C()
{
}

void sub_1DD86FD58(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1DD86FD68()
{
}

void sub_1DD86FD78()
{
}

void sub_1DD86FD80()
{
  *(void *)(v0 + 1328) = v1;
  JUMPOUT(0x1DD86FD88);
}

void sub_1DD86FD9C()
{
  *(void *)(v0 + 464) = v0 + 536;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100](v0 + 464);
  std::deque<unsigned char>::~deque[abi:ne180100](v0 + 560);

  JUMPOUT(0x1DD86FFD0);
}

void sub_1DD86FDB0()
{
  JUMPOUT(0x1DD86FF98);
}

void sub_1DD86FDDC()
{
  JUMPOUT(0x1DD86FF34);
}

void sub_1DD86FDF4()
{
  *(void *)(v0 + 912) = v0 + 616;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 + 912));
  *(void *)(v0 + 616) = v0 + 648;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 + 616));
  JUMPOUT(0x1DD86FF1CLL);
}

void sub_1DD86FE40()
{
  JUMPOUT(0x1DD86FF98);
}

void sub_1DD86FE4C()
{
  JUMPOUT(0x1DD86FF78);
}

void sub_1DD86FE78()
{
  JUMPOUT(0x1DD86FEF0);
}

void sub_1DD86FF74()
{
  JUMPOUT(0x1DD86FF80);
}

void sub_1DD870228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD870A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_1DD870D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD870EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87121C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD87184C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  a35 = &a28;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a31;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);

  _Unwind_Resume(a1);
}

void CRDetectorUtils::CRTextDetectorQuadFeature::~CRTextDetectorQuadFeature(CRDetectorUtils::CRTextDetectorQuadFeature *this)
{
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
}

void **std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::shrink_to_fit(void **result)
{
  unint64_t v1 = (unint64_t)*result;
  int64x2_t v2 = *(int64x2_t *)(result + 1);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 3uLL);
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xCF3CF3CF3CF3CF3DLL * v3.i64[1] > v4)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = (uint64_t)(result + 2);
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      id v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      id v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>(v7, v4);
    }
    uint64_t v10 = v8;
    uint64_t v11 = &v8[168 * v5];
    unint64_t v12 = v11;
    uint64_t v13 = &v8[168 * v9];
    std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::~__split_buffer(&v10);
  }
  return result;
}

void sub_1DD871A14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1DD871B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1DD871C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8720BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<CRDetectorUtils::CRTextDetectorQuad>::__init_with_size[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<CRDetectorUtils::CRTextDetectorQuad>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DD872194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CRDetectorUtils::CRTextDetectorQuad>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuad>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuad>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v16 = a4;
  uint64_t v17 = a4;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  char v15 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      long long v7 = *v6;
      long long v8 = v6[1];
      long long v9 = v6[3];
      *(_OWORD *)(v4 + 32) = v6[2];
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      *(void *)(v4 + 72) = 0;
      *(void *)(v4 + 80) = 0;
      *(void *)(v4 + 64) = 0;
      std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((void *)(v4 + 64), *((const void **)v6 + 8), *((void *)v6 + 9), (uint64_t)(*((void *)v6 + 9) - *((void *)v6 + 8)) >> 4);
      long long v10 = *(long long *)((char *)v6 + 88);
      long long v11 = *(long long *)((char *)v6 + 104);
      long long v12 = *(long long *)((char *)v6 + 120);
      *(void *)(v4 + 136) = *((void *)v6 + 17);
      *(_OWORD *)(v4 + 120) = v12;
      *(_OWORD *)(v4 + 104) = v11;
      *(_OWORD *)(v4 + 88) = v10;
      uint64_t v4 = v17 + 144;
      v17 += 144;
      v6 += 9;
    }
    while (v6 != a3);
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v4;
}

void sub_1DD872328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    int64x2_t v3 = *(void **)(v1 - 80);
    if (v3)
    {
      *(void *)(v1 - 72) = v3;
      operator delete(v3);
    }
    v1 -= 144;
  }
}

void std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<CRDetectorUtils::CRTextDetectorQuad>::__clear[abi:ne180100]((uint64_t *)v2);
    int64x2_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<CRDetectorUtils::CRTextDetectorQuad>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 144)
  {
    uint64_t v4 = *(void **)(i - 80);
    if (v4)
    {
      *(void *)(i - 72) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        std::__list_imp<unsigned long>::clear(v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void ***)**a1;
  if (v2)
  {
    uint64_t v4 = (void ***)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<CRImageBuffer>>::__vdeallocate(void ****a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    int64x2_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
        std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](--v3, 0);
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 168;
        std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 144);
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100](&v4);
  int64x2_t v3 = *(void **)(a2 + 64);
  if (v3)
  {
    *(void *)(a2 + 72) = v3;
    operator delete(v3);
  }
}

uint64_t std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__push_back_slow_path<CRDetectorUtils::CRTextDetectorQuadFeature const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  long long v10 = v7;
  long long v11 = &v7[168 * v3];
  uint64_t v13 = &v7[168 * v6];
  std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::construct[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuadFeature,CRDetectorUtils::CRTextDetectorQuadFeature const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  long long v12 = v11 + 168;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::~__split_buffer(&v10);
  return v8;
}

void sub_1DD8727CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::construct[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuadFeature,CRDetectorUtils::CRTextDetectorQuadFeature const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  long long v6 = a3[1];
  long long v7 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((void *)(a2 + 64), *((const void **)a3 + 8), *((void *)a3 + 9), (uint64_t)(*((void *)a3 + 9) - *((void *)a3 + 8)) >> 4);
  long long v8 = *(long long *)((char *)a3 + 88);
  long long v9 = *(long long *)((char *)a3 + 104);
  long long v10 = *(long long *)((char *)a3 + 120);
  uint64_t v11 = *((void *)a3 + 17);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 136) = v11;
  *(_OWORD *)(a2 + 120) = v10;
  *(_OWORD *)(a2 + 104) = v9;
  *(_OWORD *)(a2 + 88) = v8;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  return std::vector<CRDetectorUtils::CRTextDetectorQuad>::__init_with_size[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*>((void *)(a2 + 144), *((long long **)a3 + 18), *((long long **)a3 + 19), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a3 + 19) - *((void *)a3 + 18)) >> 4));
}

void sub_1DD87288C(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  void v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 168);
      long long v9 = *(_OWORD *)(a3 - 152);
      long long v10 = *(_OWORD *)(a3 - 136);
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(a3 - 120);
      *(_OWORD *)(v7 - 136) = v10;
      *(_OWORD *)(v7 - 152) = v9;
      *(_OWORD *)(v7 - 168) = v8;
      *(void *)(v7 - 96) = 0;
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 104) = 0;
      *(_OWORD *)(v7 - 104) = *(_OWORD *)(a3 - 104);
      *(void *)(v7 - 88) = *(void *)(a3 - 88);
      *(void *)(a3 - 104) = 0;
      *(void *)(a3 - 96) = 0;
      *(void *)(a3 - 88) = 0;
      long long v11 = *(_OWORD *)(a3 - 80);
      long long v12 = *(_OWORD *)(a3 - 48);
      uint64_t v13 = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 48) = v12;
      *(_OWORD *)(v7 - 80) = v11;
      *(void *)(v7 - 32) = v13;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v19 + 1) - 168;
      *((void *)&v19 + 1) -= 168;
      a3 -= 168;
    }
    while (a3 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100](v3, v1);
      v1 += 168;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 168;
    std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100](v4, i - 168);
  }
}

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(double *result, double *a2, double *a3, unsigned char *a4)
{
  if (*a4) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = a2 + 1;
  }
  double v5 = *v4;
  if (*a4) {
    uint64_t v6 = result;
  }
  else {
    uint64_t v6 = result + 1;
  }
  double v7 = *v6;
  long long v8 = a3 + 1;
  if (*a4) {
    long long v8 = a3;
  }
  double v9 = *v8;
  if (v5 >= v7)
  {
    if (v9 < v5)
    {
      long long v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v11;
      if (*a4) {
        long long v12 = a2;
      }
      else {
        long long v12 = a2 + 1;
      }
      double v13 = *v12;
      uint64_t v14 = result + 1;
      if (*a4) {
        uint64_t v14 = result;
      }
      if (v13 < *v14)
      {
        long long v15 = *(_OWORD *)result;
        *(_OWORD *)uint64_t result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v15;
      }
    }
  }
  else
  {
    if (v9 < v5)
    {
      long long v10 = *(_OWORD *)result;
      *(_OWORD *)uint64_t result = *(_OWORD *)a3;
LABEL_27:
      *(_OWORD *)a3 = v10;
      return result;
    }
    long long v16 = *(_OWORD *)result;
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(_OWORD *)a2 = v16;
    if (*a4) {
      char v17 = a3;
    }
    else {
      char v17 = a3 + 1;
    }
    double v18 = *v17;
    long long v19 = a2 + 1;
    if (*a4) {
      long long v19 = a2;
    }
    if (v18 < *v19)
    {
      long long v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_27;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(long long *a1, double *a2, unsigned char *a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v8 = a2 - 2;
      if (*a3) {
        double v9 = a2 - 2;
      }
      else {
        double v9 = a2 - 1;
      }
      double v10 = *v9;
      if (*a3) {
        long long v11 = (double *)a1;
      }
      else {
        long long v11 = (double *)a1 + 1;
      }
      if (v10 < *v11)
      {
        long long v12 = *a1;
        *a1 = *(_OWORD *)v8;
        *(_OWORD *)long long v8 = v12;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>((double *)a1, (double *)a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>((double *)a1, (double *)a1 + 2, (double *)a1 + 4, (unint64_t *)a2 - 2, a3);
      return 1;
    case 5:
      uint64_t v27 = a1 + 1;
      uint64_t v28 = a1 + 2;
      double v29 = a1 + 3;
      unint64_t v30 = a2 - 2;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>((double *)a1, (double *)a1 + 2, (double *)a1 + 4, (unint64_t *)a1 + 6, a3);
      unint64_t v31 = (double *)a1 + 7;
      if (*a3) {
        unint64_t v32 = a2 - 2;
      }
      else {
        unint64_t v32 = a2 - 1;
      }
      double v33 = *v32;
      if (*a3) {
        unint64_t v34 = (double *)(a1 + 3);
      }
      else {
        unint64_t v34 = (double *)a1 + 7;
      }
      if (v33 < *v34)
      {
        long long v35 = *v29;
        *double v29 = *(_OWORD *)v30;
        *(_OWORD *)unint64_t v30 = v35;
        unint64_t v36 = (double *)a1 + 5;
        if (*a3) {
          unint64_t v31 = (double *)(a1 + 3);
        }
        double v37 = *v31;
        if (*a3) {
          uint64_t v38 = (double *)(a1 + 2);
        }
        else {
          uint64_t v38 = (double *)a1 + 5;
        }
        if (v37 < *v38)
        {
          long long v39 = *v28;
          *uint64_t v28 = *v29;
          *double v29 = v39;
          if (*a3) {
            unint64_t v36 = (double *)(a1 + 2);
          }
          double v40 = *v36;
          if (*a3) {
            uint64_t v41 = (double *)(a1 + 1);
          }
          else {
            uint64_t v41 = (double *)a1 + 3;
          }
          if (v40 < *v41)
          {
            long long v42 = *v27;
            long long *v27 = *v28;
            *uint64_t v28 = v42;
            int v43 = *a3 ? (double *)(a1 + 1) : (double *)((char *)a1 + 24);
            double v44 = *v43;
            uint64_t v45 = *a3 ? (double *)a1 : (double *)((char *)a1 + 8);
            if (v44 < *v45)
            {
              long long v46 = *a1;
              *a1 = *v27;
              long long *v27 = v46;
            }
          }
        }
      }
      return 1;
    default:
      double v13 = (double *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>((double *)a1, (double *)a1 + 2, (double *)a1 + 4, a3);
      uint64_t v14 = (double *)(a1 + 3);
      if (a1 + 3 == (long long *)a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    double v18 = *v14;
    double v17 = v14[1];
    double v19 = *a3 ? *v14 : v14[1];
    uint64_t v20 = *a3 ? v13 : v13 + 1;
    if (v19 < *v20)
    {
      uint64_t v21 = v15;
      while (1)
      {
        uint64_t v22 = (uint64_t)a1 + v21;
        *(long long *)((char *)a1 + v21 + 48) = *(long long *)((char *)a1 + v21 + 32);
        if (v21 == -32) {
          break;
        }
        uint64_t v23 = (double *)(v22 + 16);
        unint64_t v24 = (double *)(v22 + 24);
        if (*a3) {
          double v25 = v18;
        }
        else {
          double v25 = v17;
        }
        if (*a3) {
          unint64_t v24 = v23;
        }
        v21 -= 16;
        if (v25 >= *v24)
        {
          uint64_t v26 = (double *)((char *)a1 + v21 + 48);
          goto LABEL_30;
        }
      }
      uint64_t v26 = (double *)a1;
LABEL_30:
      double *v26 = v18;
      v26[1] = v17;
      if (++v16 == 8) {
        return v14 + 2 == a2;
      }
    }
    double v13 = v14;
    v15 += 16;
    v14 += 2;
    if (v14 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(double *a1, double *a2, double *a3, unint64_t *a4, unsigned char *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(a1, a2, a3, a5);
  long long v11 = (unint64_t *)(a3 + 1);
  if (*a5) {
    long long v12 = a4;
  }
  else {
    long long v12 = a4 + 1;
  }
  result.n128_u64[0] = *v12;
  if (*a5) {
    double v13 = a3;
  }
  else {
    double v13 = a3 + 1;
  }
  if (result.n128_f64[0] < *v13)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*a5) {
      long long v11 = (unint64_t *)a3;
    }
    result.n128_u64[0] = *v11;
    if (*a5) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = a2 + 1;
    }
    if (result.n128_f64[0] < *v14)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a5) {
        uint64_t v15 = (unint64_t *)a2;
      }
      else {
        uint64_t v15 = (unint64_t *)(a2 + 1);
      }
      result.n128_u64[0] = *v15;
      if (*a5) {
        int v16 = a1;
      }
      else {
        int v16 = a1 + 1;
      }
      if (result.n128_f64[0] < *v16)
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void ****std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned char,unsigned char const*,unsigned char const&,unsigned char const* const*,long,4096l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned char,unsigned char const*,unsigned char const&,unsigned char const* const*,long,4096l>,std::__deque_iterator<unsigned char,unsigned char *,unsigned char &,unsigned char **,long,4096l>>>(uint64_t *a1, unsigned char *a2, uint64_t *a3, unsigned char *a4, uint64_t a5)
{
  double v19 = (void ***)a5;
  if (a1 != a3)
  {
    long long v8 = a1 + 1;
    std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned char,unsigned char const*,unsigned char const&,unsigned char const* const*,long,4096l>,std::__deque_iterator<unsigned char,unsigned char *,unsigned char &,unsigned char **,long,4096l>>::operator()[abi:ne180100](&v19, a2, (unsigned char *)(*a1 + 4096));
    if (v8 != a3)
    {
      double v10 = *(void ***)a5;
      double v9 = *(char **)(a5 + 8);
      do
      {
        uint64_t v11 = 0;
        uint64_t v12 = *v8;
        uint64_t v14 = (char *)*v10++;
        double v13 = v14;
        while (1)
        {
          uint64_t v15 = v13 - v9 + 4096;
          if (4096 - v11 >= v15) {
            size_t v16 = v15;
          }
          else {
            size_t v16 = 4096 - v11;
          }
          if (v16) {
            memmove(v9, (const void *)(v12 + v11), v16);
          }
          v11 += v16;
          if (v11 == 4096) {
            break;
          }
          double v17 = (char *)*v10++;
          double v13 = v17;
          double v9 = v17;
        }
        v9 += v16;
        if ((char *)*(v10 - 1) + 4096 == v9) {
          double v9 = (char *)*v10;
        }
        else {
          --v10;
        }
        *(void *)a5 = v10;
        *(void *)(a5 + 8) = v9;
        ++v8;
      }
      while (v8 != a3);
    }
    a2 = (unsigned char *)*a3;
  }
  return std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned char,unsigned char const*,unsigned char const&,unsigned char const* const*,long,4096l>,std::__deque_iterator<unsigned char,unsigned char *,unsigned char &,unsigned char **,long,4096l>>::operator()[abi:ne180100](&v19, a2, a4);
}

void ****std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned char,unsigned char const*,unsigned char const&,unsigned char const* const*,long,4096l>,std::__deque_iterator<unsigned char,unsigned char *,unsigned char &,unsigned char **,long,4096l>>::operator()[abi:ne180100](void ****result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v3 = *result;
  double v5 = **result;
  uint64_t v4 = (*result)[1];
  if (__src != a3)
  {
    double v7 = __src;
    long long v8 = result;
    double v10 = (char *)*v5++;
    double v9 = (void **)v10;
    while (1)
    {
      uint64_t v11 = (char *)v9 - (char *)v4 + 4096;
      if (a3 - v7 >= v11) {
        size_t v12 = v11;
      }
      else {
        size_t v12 = a3 - v7;
      }
      if (v12) {
        __n128 result = (void ****)memmove(v4, v7, v12);
      }
      v7 += v12;
      if (v7 == a3) {
        break;
      }
      double v13 = (void **)*v5++;
      double v9 = v13;
      uint64_t v4 = v13;
    }
    uint64_t v4 = (void **)((char *)v4 + v12);
    if ((char *)*(v5 - 1) + 4096 == (char *)v4) {
      uint64_t v4 = (void **)*v5;
    }
    else {
      --v5;
    }
    uint64_t v3 = *v8;
  }
  *uint64_t v3 = v5;
  v3[1] = v4;
  return result;
}

void std::deque<unsigned char>::__add_back_capacity(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0xFFF) != 0) {
    unint64_t v6 = (v5 >> 12) + 1;
  }
  else {
    unint64_t v6 = v5 >> 12;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 12) {
    unint64_t v8 = v7 >> 12;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 12)
  {
    for (a1[4] = v7 - (v8 << 12); v8; --v8)
    {
      size_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      double v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          double v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v28);
          unint64_t v31 = &v29[8 * (v28 >> 2)];
          unint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            long long v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)long long v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          double v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          double v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 4095;
          }
          else {
            uint64_t v64 = 4096;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 12);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          long long v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          unint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              double v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 12;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        double v88 = operator new(0x1000uLL);
        std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        long long v39 = (void *)a1[1];
        double v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              double v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              double v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                double v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                BOOL v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)BOOL v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              long long v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                double v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                double v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              double v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)double v40 = *v39;
          double v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          long long v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_front((uint64_t)__p, v57);
      }
      double v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1DD87408C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::construct[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuadFeature,CRDetectorUtils::CRTextDetectorQuadFeature&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((void *)(a1 + 64), *((const void **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 4);
  long long v7 = *(long long *)((char *)a2 + 88);
  long long v8 = *(long long *)((char *)a2 + 104);
  long long v9 = *(long long *)((char *)a2 + 120);
  uint64_t v10 = *((void *)a2 + 17);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  return std::vector<CRDetectorUtils::CRTextDetectorQuad>::__init_with_size[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*>((void *)(a1 + 144), *((long long **)a2 + 18), *((long long **)a2 + 19), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 4));
}

void sub_1DD8741B0(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,CRDetectorUtils::CRTextDetectorQuadFeature*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 168;
        std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

void std::vector<CRDetectorUtils::CRTextDetectorQuad>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<CRDetectorUtils::CRTextDetectorQuad>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuad *,CRDetectorUtils::CRTextDetectorQuad *,CRDetectorUtils::CRTextDetectorQuad *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 64;
    do
    {
      uint64_t v6 = v5 - 64;
      long long v7 = *(_OWORD *)(v5 - 64);
      long long v8 = *(_OWORD *)(v5 - 48);
      long long v9 = *(_OWORD *)(v5 - 16);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v5 - 32);
      *(_OWORD *)(a3 + 48) = v9;
      *(_OWORD *)a3 = v7;
      *(_OWORD *)(a3 + 16) = v8;
      if (a3 != v5 - 64) {
        std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>((char *)(a3 + 64), *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 4);
      }
      long long v10 = *(_OWORD *)(v5 + 24);
      long long v11 = *(_OWORD *)(v5 + 40);
      long long v12 = *(_OWORD *)(v5 + 56);
      *(void *)(a3 + 136) = *(void *)(v5 + 72);
      *(_OWORD *)(a3 + 120) = v12;
      *(_OWORD *)(a3 + 104) = v11;
      *(_OWORD *)(a3 + 88) = v10;
      a3 += 144;
      v5 += 144;
    }
    while (v6 + 144 != a2);
  }
  return a3;
}

void sub_1DD8743AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8744A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87458C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8746D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD874734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD874DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void sub_1DD87661C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD8766F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD876B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::~SpaceSegmentedPathBuilder(void *a1)
{
  *a1 = &unk_1F38ED2E0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1DD876D04(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::decode(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  __p = 0;
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::reserve((uint64_t *)&__p, *a2 + 1);
  uint64_t v6 = v57;
  if ((unint64_t)v57 >= v58)
  {
    unint64_t v7 = std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::__emplace_back_slow_path<>((uint64_t *)&__p);
  }
  else
  {
    v57[2] = 0u;
    v6[3] = 0u;
    _OWORD *v6 = 0u;
    v6[1] = 0u;
    *((void *)v6 + 8) = &unk_1F38ED4D8;
    *((void *)v6 + 9) = 0;
    unint64_t v7 = (unint64_t)(v6 + 5);
  }
  uint64_t v57 = (_OWORD *)v7;
  *(void *)(v7 - 24) = 0;
  *(void *)(v7 - 48) = 0;
  *(_OWORD *)(v7 - 80) = xmmword_1DD8CEF50;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  BOOL v54 = &unk_1F38ED4D8;
  uint64_t v55 = 0;
  if (*a2)
  {
    uint64_t v8 = 0;
    uint64_t v9 = -1;
    do
    {
      uint64_t v10 = a2[1];
      uint64_t v11 = v10 * v8;
      uint64_t v13 = a2[8];
      uint64_t v12 = a2[9];
      unint64_t v14 = (float *)(v12 + 4 * v10 * v8);
      if (v12)
      {
        float v15 = -1.0;
      }
      else
      {
        unint64_t v14 = 0;
        float v15 = 0.0;
      }
      size_t v16 = (float *)(v13 + 4 * v11);
      unint64_t v17 = v8 + 1;
      uint64_t v18 = v10 * (v8 + 1);
      uint64_t v19 = (float *)(v13 + 4 * v18);
      BOOL v21 = v11 == v18;
      uint64_t v20 = v16 + 1;
      BOOL v21 = v21 || v20 == v19;
      if (!v21)
      {
        float v22 = v15 + 1.0;
        if (v14) {
          float v22 = v15;
        }
        uint64_t v23 = v14 + 1;
        if (!v14) {
          uint64_t v23 = 0;
        }
        uint64_t v24 = 4 * v10 - 4;
        do
        {
          float v25 = *v16;
          if (*v16 > -0.0010005) {
            float v25 = -0.0010005;
          }
          float v26 = *v20;
          if (*v20 > -0.0010005) {
            float v26 = -0.0010005;
          }
          if (v25 < v26)
          {
            unint64_t v14 = v23;
            size_t v16 = v20;
            float v15 = v22;
          }
          ++v20;
          BOOL v27 = v23 == 0;
          if (v23) {
            ++v23;
          }
          else {
            uint64_t v23 = 0;
          }
          if (v27) {
            float v22 = v22 + 1.0;
          }
          v24 -= 4;
        }
        while (v24);
      }
      if (v14) {
        float v15 = *v14;
      }
      float v28 = *v16;
      unint64_t v29 = (unint64_t)v15;
      if (v28 <= -0.0010005) {
        float v30 = v28;
      }
      else {
        float v30 = -0.0010005;
      }
      *(void *)&long long v50 = v29;
      *((void *)&v53 + 1) = v7 - 80;
      if (v9 == v29)
      {
        double v31 = v30;
        CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::updateActivationProgression((uint64_t)(a1 + 2), v7 - 80, v8, v30);
        unint64_t v7 = (unint64_t)v57;
      }
      else
      {
        double v31 = v30;
        if (a1[1] != v29)
        {
          unint64_t v32 = (void *)a1[4];
          uint64_t v33 = (void *)a1[5];
          if (v32 != v33)
          {
            while (*v32 != v29)
            {
              if (++v32 == v33)
              {
                unint64_t v32 = (void *)a1[5];
                break;
              }
            }
          }
          if (v32 != v33)
          {
            *((void *)&v50 + 1) = v8;
            *((double *)&v52 + 1) = v30;
          }
          *(void *)&long long v52 = *(void *)(v7 - 48);
          if (v7 >= v58)
          {
            unint64_t v7 = std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::__emplace_back_slow_path<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>&>((uint64_t *)&__p, &v50);
          }
          else
          {
            long long v34 = v50;
            long long v35 = v51;
            long long v36 = v53;
            *(_OWORD *)(v7 + 32) = v52;
            *(_OWORD *)(v7 + 48) = v36;
            *(_OWORD *)unint64_t v7 = v34;
            *(_OWORD *)(v7 + 16) = v35;
            *(void *)(v7 + 64) = &unk_1F38ED4D8;
            *(void *)(v7 + 72) = v55;
            v7 += 80;
          }
          uint64_t v57 = (_OWORD *)v7;
        }
      }
      *(double *)(v7 - 48) = v31 + *(double *)(v7 - 48);
      uint64_t v9 = v50;
      uint64_t v37 = *a2;
      uint64_t v8 = v17;
    }
    while (v17 < *a2);
  }
  else
  {
    uint64_t v37 = 0;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::createResultPathFromBeamEntry((uint64_t)(a1 + 2), v7 - 80, v37, (uint64_t)&v47);
  unint64_t v38 = a3[2];
  unint64_t v39 = a3[1];
  if (v39 >= v38)
  {
    unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - *a3) >> 3);
    unint64_t v42 = v41 + 1;
    if (v41 + 1 > 0x666666666666666) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - *a3) >> 3);
    if (2 * v43 > v42) {
      unint64_t v42 = 2 * v43;
    }
    if (v43 >= 0x333333333333333) {
      unint64_t v44 = 0x666666666666666;
    }
    else {
      unint64_t v44 = v42;
    }
    v59[4] = a3 + 2;
    if (v44) {
      uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(a3 + 2), v44);
    }
    else {
      uint64_t v45 = 0;
    }
    int64_t v46 = &v45[40 * v41];
    v59[0] = v45;
    v59[1] = v46;
    v59[3] = &v45[40 * v44];
    *(void *)int64_t v46 = 0;
    *((void *)v46 + 1) = 0;
    *((void *)v46 + 2) = 0;
    *(_OWORD *)int64_t v46 = v47;
    *((void *)v46 + 2) = v48;
    long long v47 = 0uLL;
    uint64_t v48 = 0;
    *(_OWORD *)(v46 + 24) = v49;
    v59[2] = v46 + 40;
    std::vector<CoreRecognition::decoder::DecodingPath>::__swap_out_circular_buffer(a3, v59);
    uint64_t v40 = a3[1];
    std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer(v59);
  }
  else
  {
    *(void *)unint64_t v39 = 0;
    *(void *)(v39 + 8) = 0;
    *(void *)(v39 + 16) = 0;
    *(_OWORD *)unint64_t v39 = v47;
    *(void *)(v39 + 16) = v48;
    long long v47 = 0uLL;
    uint64_t v48 = 0;
    *(_OWORD *)(v39 + 24) = v49;
    uint64_t v40 = v39 + 40;
  }
  a3[1] = v40;
  v59[0] = &v47;
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
  if (__p)
  {
    uint64_t v57 = __p;
    operator delete(__p);
  }
}

void sub_1DD877158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer((void **)(v27 - 136));
  *(void *)(v27 - 144) = &a9;
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1DD87720C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_40c100_ZTSN15CoreRecognition7decoder16CTCGreedyDecoderINS0_25SpaceSegmentedPathBuilderINS0_9BaseStateEEEEE104c86_ZTSKNSt3__16vectorIN15CoreRecognition7decoder16ActivationMatrixENS_9allocatorIS3_EEEE128c40_ZTSKN15CoreRecognition7decoder7ContextE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = &unk_1F38ED080;
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_1F38ED2E0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  char v5 = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<CoreRecognition::decoder::ActivationMatrix>::__init_with_size[abi:ne180100]<CoreRecognition::decoder::ActivationMatrix*,CoreRecognition::decoder::ActivationMatrix*>((void *)(a1 + 104), *(void *)(a2 + 104), *(void *)(a2 + 112), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4));
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    CFRetain(*(CFTypeRef *)(a2 + 128));
  }
  *(void *)(a1 + 128) = v6;
  __n128 result = *(__n128 *)(a2 + 136);
  *(__n128 *)(a1 + 136) = result;
  return result;
}

void sub_1DD877300(_Unwind_Exception *a1)
{
  CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::~CTCGreedyDecoder(v1);
  _Unwind_Resume(a1);
}

void *CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::~CTCGreedyDecoder(void *a1)
{
  *a1 = &unk_1F38ED080;
  a1[2] = &unk_1F38ED2E0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void __destroy_helper_block_ea8_40c100_ZTSN15CoreRecognition7decoder16CTCGreedyDecoderINS0_25SpaceSegmentedPathBuilderINS0_9BaseStateEEEEE104c86_ZTSKNSt3__16vectorIN15CoreRecognition7decoder16ActivationMatrixENS_9allocatorIS3_EEEE128c40_ZTSKN15CoreRecognition7decoder7ContextE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 128);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v4 = (void **)(a1 + 104);
  std::vector<CoreRecognition::decoder::ActivationMatrix>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)(a1 + 40) = &unk_1F38ED080;
  *(void *)(a1 + 56) = &unk_1F38ED2E0;
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
}

void CoreRecognition::decoder::Context::~Context(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void sub_1DD8774C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8776F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v12 = *(void **)(v10 - 120);
  if (v12)
  {
    *(void *)(v10 - 112) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void sub_1DD8779FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<CoreRecognition::decoder::ActivationMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1DD877EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  _Unwind_Resume(a1);
}

void std::vector<espresso_buffer_t>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<espresso_buffer_t>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 168 * a2;
  }
}

void sub_1DD878D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,void *a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

void sub_1DD8793B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD879534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD8795D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD879654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::~SpaceSegmentedPathBuilder(void *a1)
{
  *a1 = &unk_1F38ED2E0;
  unint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01BF140);
}

void CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::createResultPathFromBeamEntry(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  double v5 = *(double *)(a2 + 32);
  *(double *)(a4 + 24) = v5 + *(double *)(a2 + 48);
  *(double *)(a4 + 32) = v5;
  long long v66 = 0u;
  long long v67 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v64 = 0;
  double v65 = v5;
  uint64_t v6 = (void *)(a2 + 56);
  if (!*(void *)(a2 + 56))
  {
    long long v52 = 0;
    long long v51 = 0;
    goto LABEL_78;
  }
  uint64_t v8 = (void *)a2;
  do
  {
    ++*((void *)&v67 + 1);
    int v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 48))(a1, *v8);
    int v11 = v10;
    if (v10 != 2)
    {
      if (!v10)
      {
        float v15 = (char *)__p[1];
        if (__p[1] >= v64)
        {
          uint64_t v23 = (char *)__p[0];
          int64_t v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61) {
LABEL_92:
          }
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          uint64_t v26 = v64 - (char *)__p[0];
          if ((v64 - (char *)__p[0]) >> 2 > v25) {
            unint64_t v25 = v26 >> 2;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            float v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v64, v27);
            uint64_t v23 = (char *)__p[0];
            float v15 = (char *)__p[1];
          }
          else
          {
            float v28 = 0;
          }
          int64_t v46 = &v28[8 * v24];
          *(void *)int64_t v46 = *v8;
          size_t v16 = v46 + 8;
          while (v15 != v23)
          {
            uint64_t v47 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v46 - 1) = v47;
            v46 -= 8;
          }
          __p[0] = v46;
          __p[1] = v16;
          uint64_t v64 = &v28[8 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(void *)__p[1] = *v8;
          size_t v16 = v15 + 8;
        }
        __p[1] = v16;
        goto LABEL_64;
      }
      if (v10 == 1)
      {
        uint64_t v12 = (char *)__p[1];
        if (__p[1] >= v64)
        {
          unint64_t v17 = (char *)__p[0];
          int64_t v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
            goto LABEL_92;
          }
          uint64_t v20 = v64 - (char *)__p[0];
          if ((v64 - (char *)__p[0]) >> 2 > v19) {
            unint64_t v19 = v20 >> 2;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            float v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v64, v21);
            unint64_t v17 = (char *)__p[0];
            uint64_t v12 = (char *)__p[1];
          }
          else
          {
            float v22 = 0;
          }
          unint64_t v29 = &v22[8 * v18];
          *(void *)unint64_t v29 = *v8;
          uint64_t v13 = v29 + 8;
          while (v12 != v17)
          {
            uint64_t v30 = *((void *)v12 - 1);
            v12 -= 8;
            *((void *)v29 - 1) = v30;
            v29 -= 8;
          }
          __p[0] = v29;
          __p[1] = v13;
          uint64_t v64 = &v22[8 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(void *)__p[1] = *v8;
          uint64_t v13 = v12 + 8;
        }
        __p[1] = v13;
        uint64_t v14 = v8[1];
      }
      else
      {
LABEL_10:
        uint64_t v14 = v8[1] + 1;
      }
      *((void *)&v66 + 1) = v14;
      *(void *)&long long v67 = a3;
      unint64_t v31 = *(void *)(a4 + 8);
      if (v31 >= *(void *)(a4 + 16))
      {
        uint64_t v33 = std::vector<CoreRecognition::decoder::DecodingToken>::__emplace_back_slow_path<CoreRecognition::decoder::DecodingToken&>((uint64_t *)a4, (uint64_t)__p);
      }
      else
      {
        __n128 v32 = std::vector<CoreRecognition::decoder::DecodingToken>::__construct_one_at_end[abi:ne180100]<CoreRecognition::decoder::DecodingToken&>(a4, (uint64_t)__p);
        uint64_t v33 = v31 + 64;
      }
      *(void *)(a4 + 8) = v33;
      long long v34 = (char *)__p[0];
      __p[1] = __p[0];
      *((void *)&v67 + 1) = 0;
      if (v11 == 2)
      {
        if (__p[0] >= v64)
        {
          unint64_t v37 = (v64 - (char *)__p[0]) >> 2;
          if (v37 <= 1) {
            unint64_t v37 = 1;
          }
          if ((unint64_t)(v64 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v64, v38);
          unint64_t v41 = (char *)__p[0];
          unint64_t v42 = (char *)__p[1];
          *(void *)uint64_t v40 = *v8;
          long long v35 = v40 + 8;
          unint64_t v43 = v40;
          while (v42 != v41)
          {
            uint64_t v44 = *((void *)v42 - 1);
            v42 -= 8;
            *((void *)v43 - 1) = v44;
            v43 -= 8;
          }
          __p[0] = v43;
          __p[1] = v40 + 8;
          uint64_t v64 = &v40[8 * v39];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *(void *)__p[0] = *v8;
          long long v35 = v34 + 8;
        }
        __p[1] = v35;
      }
      else if (!*v6)
      {
        double v36 = 0.0;
LABEL_56:
        uint64_t v45 = v8[5];
        double v65 = v36;
        *(void *)&long long v66 = v45;
        a3 = v14;
        goto LABEL_64;
      }
      double v36 = (*(double (**)(uint64_t, __n128))(*(void *)a1 + 56))(a1, v32);
      goto LABEL_56;
    }
    if (__p[0] != __p[1]) {
      goto LABEL_10;
    }
LABEL_64:
    uint64_t v8 = (void *)*v6;
    uint64_t v48 = (void *)*v6;
    uint64_t v49 = v48[7];
    uint64_t v6 = v48 + 7;
  }
  while (v49);
  if (__p[0] != __p[1])
  {
    *((void *)&v66 + 1) = 0;
    *(void *)&long long v67 = a3;
    unint64_t v50 = *(void *)(a4 + 8);
    if (v50 >= *(void *)(a4 + 16))
    {
      long long v51 = (long long *)std::vector<CoreRecognition::decoder::DecodingToken>::__emplace_back_slow_path<CoreRecognition::decoder::DecodingToken&>((uint64_t *)a4, (uint64_t)__p);
    }
    else
    {
      std::vector<CoreRecognition::decoder::DecodingToken>::__construct_one_at_end[abi:ne180100]<CoreRecognition::decoder::DecodingToken&>(a4, (uint64_t)__p);
      long long v51 = (long long *)(v50 + 64);
    }
    *(void *)(a4 + 8) = v51;
    long long v52 = *(long long **)a4;
    goto LABEL_73;
  }
  long long v52 = *(long long **)a4;
  long long v51 = *(long long **)(a4 + 8);
  if (*(long long **)a4 == v51)
  {
    long long v52 = *(long long **)(a4 + 8);
  }
  else
  {
    *((void *)v51 - 3) = 0;
LABEL_73:
    if (v52 != v51)
    {
      for (uint64_t i = v52 + 4; i != v51; i += 4)
        *((double *)i - 5) = *((double *)i - 5) - *((double *)i + 3);
    }
  }
LABEL_78:
  std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>>(v52, v51);
  BOOL v54 = *(long long **)a4;
  uint64_t v55 = *(long long **)(a4 + 8);
  while (v54 != v55)
  {
    unint64_t v56 = *(void *)v54;
    uint64_t v57 = *((void *)v54 + 1);
    unint64_t v58 = (void *)(v57 - 8);
    if (*(void *)v54 != v57 && (unint64_t)v58 > v56)
    {
      unint64_t v60 = v56 + 8;
      do
      {
        uint64_t v61 = *(void *)(v60 - 8);
        *(void *)(v60 - 8) = *v58;
        *v58-- = v61;
        BOOL v62 = v60 >= (unint64_t)v58;
        v60 += 8;
      }
      while (!v62);
    }
    v54 += 4;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DD879BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::updateActivationProgression(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v4 = *(void **)(result + 16);
  double v5 = *(void **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(void *)a2)
    {
      if (++v4 == v5)
      {
        unint64_t v4 = *(void **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5 && *(unsigned char *)(result + 8) && *(double *)(a2 + 40) < a4)
  {
    *(void *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::updateActivationExtension(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v4 = *(void **)(result + 16);
  double v5 = *(void **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(void *)a2)
    {
      if (++v4 == v5)
      {
        unint64_t v4 = *(void **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5)
  {
    *(void *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

BOOL CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::willCommitBetween(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) == 2
      || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a3) == 1;
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::needsToBeCommitted(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 16);
  BOOL v3 = *(void **)(a1 + 24);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        unint64_t v2 = *(void **)(a1 + 24);
        return 2 * (v2 != v3);
      }
    }
  }
  return 2 * (v2 != v3);
}

double CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::getCumulativeTokenScore(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 0.0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void *)(a2 + 56);
    if (v3 && a3 == 0) {
      return (*(double *)(a2 + 32) + *(double *)(v3 + 32)) * 0.5;
    }
  }
  return *(double *)(a2 + 32);
}

__n128 std::vector<CoreRecognition::decoder::DecodingToken>::__construct_one_at_end[abi:ne180100]<CoreRecognition::decoder::DecodingToken&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  __n128 result = *(__n128 *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v6;
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a1 + 8) = v4 + 64;
  return result;
}

void sub_1DD879E28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CoreRecognition::decoder::DecodingToken>::__emplace_back_slow_path<CoreRecognition::decoder::DecodingToken&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v19 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingToken>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  int v11 = &v10[64 * v4];
  v16[0] = v10;
  v16[1] = v11;
  unint64_t v17 = v11;
  int64_t v18 = &v10[64 * v9];
  *(void *)int v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  long long v12 = *(_OWORD *)(a2 + 24);
  long long v13 = *(_OWORD *)(a2 + 40);
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  *(_OWORD *)(v11 + 40) = v13;
  *(_OWORD *)(v11 + 24) = v12;
  v17 += 64;
  std::vector<CoreRecognition::decoder::DecodingToken>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<CoreRecognition::decoder::DecodingToken>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1DD879F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CoreRecognition::decoder::DecodingToken>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CoreRecognition::decoder::DecodingToken>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingToken>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      long long v8 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)(v7 - 64) = v8;
      *(void *)(v7 - 48) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      long long v9 = *(_OWORD *)(a3 + 40);
      uint64_t v10 = *(void *)(a3 + 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = v10;
      *(_OWORD *)(v7 - 24) = v9;
      uint64_t v7 = *((void *)&v16 + 1) - 64;
      *((void *)&v16 + 1) -= 64;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 64;
  }
}

uint64_t std::__split_buffer<CoreRecognition::decoder::DecodingToken>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<CoreRecognition::decoder::DecodingToken>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 64);
    *(void *)(a1 + 16) = v2 - 64;
    if (v5)
    {
      *(void *)(v2 - 56) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
}

void std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>>(long long *a1, long long *a2)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    unint64_t v2 = (unint64_t)(a2 - 4);
    if (a2 - 4 > a1)
    {
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CoreRecognition::decoder::DecodingToken *> &,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *> &>(&v3, (uint64_t *)&v2);
        v2 -= 64;
        v3 += 4;
      }
      while ((unint64_t)v3 < v2);
    }
  }
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CoreRecognition::decoder::DecodingToken *> &,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *> &>(long long **a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  long long v4 = **a1;
  uint64_t v5 = *((void *)*a1 + 2);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = 0;
  long long v11 = v4;
  __n128 v12 = *(__n128 *)((char *)v2 + 24);
  uint64_t v6 = *((void *)v2 + 5);
  uint64_t v7 = *((void *)v2 + 6);
  uint64_t v8 = *((void *)v2 + 7);
  std::vector<int>::__move_assign((uint64_t)v2, (__n128 *)v3);
  *(long long *)((char *)v2 + 24) = *(_OWORD *)(v3 + 24);
  *((void *)v2 + 5) = *(void *)(v3 + 40);
  v2[3] = *(_OWORD *)(v3 + 48);
  long long v9 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v9;
    operator delete(v9);
  }
  *(_OWORD *)uint64_t v3 = v11;
  *(void *)(v3 + 16) = v5;
  __n128 result = v12;
  *(__n128 *)(v3 + 24) = v12;
  *(void *)(v3 + 40) = v6;
  *(void *)(v3 + 48) = v7;
  *(void *)(v3 + 56) = v8;
  return result;
}

void std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<CoreRecognition::decoder::DecodingToken>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<CoreRecognition::decoder::DecodingToken>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 64);
      v4 -= 64;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 56) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        uint64_t v6 = v4;
        std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::~CTCGreedyDecoder(void *a1)
{
  *a1 = &unk_1F38ED080;
  a1[2] = &unk_1F38ED2E0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01BF140);
}

void std::vector<CoreRecognition::decoder::ActivationMatrix>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        std::allocator<CoreRecognition::decoder::ActivationMatrix>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CoreRecognition::decoder::ActivationMatrix>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

void std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>(v3, a2);
    uint64_t v8 = (char *)__p + v5;
    long long v9 = (char *)__p + v5;
    uint64_t v10 = (char *)__p + 80 * v6;
    std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      long long v9 = &v8[(v9 - v8 - 80) % 0x50uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1DD87A638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      long long v7 = *(_OWORD *)(v2 + v5 - 80);
      long long v8 = *(_OWORD *)(v2 + v5 - 64);
      long long v9 = *(_OWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 32) = v9;
      *(_OWORD *)(v6 - 80) = v7;
      *(_OWORD *)(v6 - 64) = v8;
      *(void *)(v6 - 16) = &unk_1F38ED4D8;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 80;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  *__n128 result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void CoreRecognition::decoder::BaseState::~BaseState(CoreRecognition::decoder::BaseState *this)
{
}

uint64_t CoreRecognition::decoder::BaseState::reset(uint64_t this)
{
  *(void *)(this + 8) = 0;
  return this;
}

uint64_t std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::__emplace_back_slow_path<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v2) >> 4);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0x199999999999999) {
    unint64_t v7 = 0x333333333333333;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v17 = a1 + 2;
  long long v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>(v5, v7);
  long long v9 = &v8[80 * v3];
  __p = v8;
  char v14 = v9;
  long long v16 = &v8[80 * v10];
  *(_OWORD *)long long v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((void *)v9 + 8) = &unk_1F38ED4D8;
  *((void *)v9 + 9) = 0;
  long long v15 = v9 + 80;
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v11 = a1[1];
  if (v15 != v14) {
    long long v15 = &v14[(v15 - v14 - 80) % 0x50uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_1DD87A87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::__emplace_back_slow_path<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  float v22 = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>(v7, v9);
  uint64_t v11 = &v10[80 * v4];
  __p = v10;
  unint64_t v19 = v11;
  unint64_t v21 = &v10[80 * v12];
  long long v13 = *a2;
  long long v14 = a2[1];
  long long v15 = a2[3];
  *((_OWORD *)v11 + 2) = a2[2];
  *((_OWORD *)v11 + 3) = v15;
  *(_OWORD *)uint64_t v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *((void *)v11 + 8) = &unk_1F38ED4D8;
  *((void *)v11 + 9) = *((void *)a2 + 9);
  uint64_t v20 = v11 + 80;
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v16 = a1[1];
  if (v20 != v19) {
    uint64_t v20 = &v19[(v20 - v19 - 80) % 0x50uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v16;
}

void sub_1DD87AA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CoreRecognition::decoder::DecodingPath>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      long long v8 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)(v7 - 40) = v8;
      *(void *)(v7 - 24) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 5;
  }
}

void **std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<CoreRecognition::decoder::DecodingPath>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 40);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void *std::vector<CoreRecognition::decoder::ActivationMatrix>::__init_with_size[abi:ne180100]<CoreRecognition::decoder::ActivationMatrix*,CoreRecognition::decoder::ActivationMatrix*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x333333333333334) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::ActivationMatrix>>(a4);
    uint64_t v7 = result;
    void *v6 = result;
    v6[1] = result;
    v6[2] = &result[10 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = a2 + v9;
        uint64_t v11 = &v7[v9 / 8];
        *(_OWORD *)uint64_t v11 = *(_OWORD *)(a2 + v9);
        void v11[3] = 0;
        v11[4] = 0;
        v7[v9 / 8 + 2] = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v7[v9 / 8 + 2], *(const void **)(a2 + v9 + 16), *(void *)(a2 + v9 + 24), (uint64_t)(*(void *)(a2 + v9 + 24) - *(void *)(a2 + v9 + 16)) >> 2);
        v11[5] = 0;
        v11[6] = 0;
        char v12 = &v7[v9 / 8 + 5];
        v12[2] = 0;
        uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v12, *(const void **)(v10 + 40), *(void *)(v10 + 48), (uint64_t)(*(void *)(v10 + 48) - *(void *)(v10 + 40)) >> 2);
        *(_OWORD *)&v7[v9 / 8 + 8] = *(_OWORD *)(a2 + v9 + 64);
        v9 += 80;
      }
      while (v10 + 80 != a3);
      uint64_t v7 = (void *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1DD87AD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::ActivationMatrix>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a1);
}

uint64_t *std::vector<CoreRecognition::decoder::ActivationMatrix>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 80;
      *(_OWORD *)(v4 - 80) = *(_OWORD *)(v3 - 80);
      *(void *)(v4 - 56) = 0;
      *(void *)(v4 - 48) = 0;
      *(void *)(v4 - 64) = 0;
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(void *)(v4 - 48) = *(void *)(v3 - 48);
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 48) = 0;
      *(void *)(v4 - 40) = 0;
      *(void *)(v4 - 32) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 24) = *(void *)(v3 - 24);
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 24) = 0;
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      v4 -= 80;
      v3 -= 80;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v6 = *result;
  *uint64_t result = v5;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<CoreRecognition::decoder::ActivationMatrix>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::allocator<CoreRecognition::decoder::ActivationMatrix>::destroy[abi:ne180100]((void *)(i - 80));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<espresso_buffer_t>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xCF3CF3CF3CF3CF3DLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCF3CF3CF3CF3CF3DLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x186186186186186) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCF3CF3CF3CF3CF3DLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xC30C30C30C30C3) {
      unint64_t v11 = 0x186186186186186;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    long long v14 = &v12[168 * v8];
    long long v15 = &v12[168 * v11];
    size_t v16 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
    bzero(v14, v16);
    unint64_t v17 = &v14[v16];
    unint64_t v19 = (char *)*a1;
    int64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 168);
        long long v21 = *(_OWORD *)(v18 - 152);
        *(_OWORD *)(v14 - 136) = *(_OWORD *)(v18 - 136);
        *(_OWORD *)(v14 - 152) = v21;
        *(_OWORD *)(v14 - 168) = v20;
        long long v22 = *(_OWORD *)(v18 - 120);
        long long v23 = *(_OWORD *)(v18 - 104);
        long long v24 = *(_OWORD *)(v18 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        *(_OWORD *)(v14 - 88) = v24;
        *(_OWORD *)(v14 - 104) = v23;
        *(_OWORD *)(v14 - 120) = v22;
        long long v25 = *(_OWORD *)(v18 - 56);
        long long v26 = *(_OWORD *)(v18 - 40);
        long long v27 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v27;
        *(_OWORD *)(v14 - 40) = v26;
        *(_OWORD *)(v14 - 56) = v25;
        v14 -= 168;
        v18 -= 168;
      }
      while (v18 != v19);
      int64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void sub_1DD87B724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }

  _Unwind_Resume(a1);
}

void sub_1DD87B898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1DD87B9B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87BCE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87BDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD87C37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,char a30)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void sub_1DD87C4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87C6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD87C7EC(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DD87C9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87C9FC()
{
}

void sub_1DD87CA04()
{
}

void sub_1DD87CC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1DD87CE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87CF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87D02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87D100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87D198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87D220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD87D280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

cv::Mat *cv::Mat::Mat(cv::Mat *this)
{
  *(void *)this = &unk_1F38ED500;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 36) = &unk_1F38ED520;
  cv::Mat::create(this, 0, 0, 1);
  return this;
}

void sub_1DD87D474(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = v2;
  cv::SmartPtr::release(v1);
  _Unwind_Resume(a1);
}

void cv::Mat::create(void *a1, int a2, int *a3, int a4)
{
  cv::Mat::createInfo((uint64_t)a1, a2, a3, a4, a3);
  size_t v5 = a1[72];
  if (v5)
  {
    v6[0] = &unk_1F38ED520;
    v6[1] = malloc_type_malloc(v5, 0xC7CB7715uLL);
    uint64_t v7 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
    _DWORD *v7 = 1;
    cv::SmartPtr::operator=((cv::SmartPtr *)(a1 + 36), (cv::SmartPtr *)v6, v8);
    v8[0] = &unk_1F38ED520;
    cv::SmartPtr::release((cv::SmartPtr *)v8);
    v6[0] = &unk_1F38ED520;
    cv::SmartPtr::release((cv::SmartPtr *)v6);
  }
  a1[1] = a1[37];
}

void *cv::Mat::Mat(void *a1, int a2, int a3, int a4)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1F38ED500;
  a1[37] = 0;
  a1[38] = 0;
  a1[36] = &unk_1F38ED520;
  v6[0] = a2;
  v6[1] = a3;
  cv::Mat::create(a1, 2, v6, a4);
  return a1;
}

void sub_1DD87D624(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = v2;
  cv::SmartPtr::release(v1);
  _Unwind_Resume(a1);
}

void cv::Mat::createInfo(uint64_t a1, int a2, int *a3, int a4, int *a5)
{
  int v6 = a4;
  *(_DWORD *)(a1 + 316) = a4;
  bzero((void *)(a1 + 156), 0x80uLL);
  bzero((void *)(a1 + 28), 0x80uLL);
  bzero((void *)(a1 + 320), 0x80uLL);
  bzero((void *)(a1 + 448), 0x80uLL);
  *(_DWORD *)(a1 + 16) = a2;
  if (a2 >= 1)
  {
    uint64_t v10 = a2;
    int v11 = -1;
    uint64_t v12 = a1;
    do
    {
      int v13 = *a5++;
      *(_DWORD *)(a1 + 4 * (v11 + *(_DWORD *)(a1 + 16)) + 156) = v13;
      *(_DWORD *)(v12 + 28) = *a3;
      int v14 = *a3++;
      *(_DWORD *)(v12 + 448) = v14;
      v12 += 4;
      --v11;
      --v10;
    }
    while (v10);
  }
  *(void *)(a1 + 20) = *(void *)(a1 + 28);
  if (v6 > 32)
  {
    if (v6 != 33)
    {
      if (v6 == 49)
      {
        int v6 = 8;
      }
      else
      {
        if (v6 != 65) {
          goto LABEL_16;
        }
        int v6 = 2;
      }
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((v6 - 3) < 2 || v6 == 1) {
    goto LABEL_15;
  }
  if (v6 == 17)
  {
LABEL_13:
    int v6 = 4;
LABEL_15:
    *(_DWORD *)(a1 + 312) = v6;
  }
LABEL_16:
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = *(int *)(a1 + 312);
    *(void *)(a1 + 576) = v16;
    if ((int)v15 >= 1)
    {
      unint64_t v17 = (int *)(a1 + 156);
      do
      {
        uint64_t v18 = *v17++;
        v16 *= v18;
        --v15;
      }
      while (v15);
      *(void *)(a1 + 576) = v16;
    }
  }
  else
  {
    *(void *)(a1 + 576) = 0;
  }
}

void cv::Mat::~Mat(cv::Mat *this)
{
  *(void *)this = &unk_1F38ED500;
  *((void *)this + 36) = &unk_1F38ED520;
  cv::SmartPtr::release((cv::Mat *)((char *)this + 288));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F38ED500;
  *((void *)this + 36) = &unk_1F38ED520;
  cv::SmartPtr::release((cv::Mat *)((char *)this + 288));
  JUMPOUT(0x1E01BF140);
}

void cv::Mat::clear(cv::Mat *this)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  if ((int)v2 < 1)
  {
LABEL_5:
    size_t v5 = (void *)*((void *)this + 1);
    size_t v6 = *((void *)this + 72);
    bzero(v5, v6);
  }
  else
  {
    uint64_t v3 = (int *)((char *)this + 28);
    while (1)
    {
      int v4 = *v3++;
      if (v4 != *((_DWORD *)this + (int)v2 + 38)) {
        break;
      }
      if (!--v2) {
        goto LABEL_5;
      }
    }
    uint64_t v7 = (char *)*((void *)this + 1);
    int v8 = *((_DWORD *)this + 6);
    switch(*((_DWORD *)this + 79) >> 4)
    {
      case 0:
        int v9 = *((_DWORD *)this + 79) & 0xF;
        int v10 = v9 * v8;
        int v11 = 1;
        break;
      case 1:
      case 2:
        int v9 = *((_DWORD *)this + 79) & 0xF;
        int v10 = 4 * v8 * v9;
        int v11 = 4;
        break;
      case 3:
        int v9 = *((_DWORD *)this + 79) & 0xF;
        int v10 = 8 * v8 * v9;
        int v11 = 8;
        break;
      case 4:
        int v9 = *((_DWORD *)this + 79) & 0xF;
        int v10 = 2 * v8 * v9;
        int v11 = 2;
        break;
      default:
        int v10 = 0;
        int v11 = 0;
        int v9 = *((_DWORD *)this + 79) & 0xF;
        break;
    }
    if (*((int *)this + 5) >= 1)
    {
      int v12 = 0;
      uint64_t v13 = v11 * v9 * (uint64_t)*((int *)this + 39);
      size_t v14 = v10;
      do
      {
        bzero(v7, v14);
        v7 += v13;
        ++v12;
      }
      while (v12 < *((_DWORD *)this + 5));
    }
  }
}

double cv::Mat::vImage@<D0>(cv::Mat *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 80);
  switch(*((_DWORD *)this + 79) >> 4)
  {
    case 0:
      int v4 = *((_DWORD *)this + 79) & 0xF;
      int v5 = *((_DWORD *)this + 39);
      v2 += v4 * v3 * v5 + *((int *)this + 81) * (uint64_t)v4;
      int v6 = 1;
      break;
    case 1:
    case 2:
      int v4 = *((_DWORD *)this + 79) & 0xF;
      int v5 = *((_DWORD *)this + 39);
      v2 += 4 * v3 * v4 * v5 + 4 * v4 * (uint64_t)*((int *)this + 81);
      int v6 = 4;
      break;
    case 3:
      int v4 = *((_DWORD *)this + 79) & 0xF;
      int v5 = *((_DWORD *)this + 39);
      v2 += 8 * v3 * v4 * v5 + 8 * v4 * (uint64_t)*((int *)this + 81);
      int v6 = 8;
      break;
    case 4:
      int v4 = *((_DWORD *)this + 79) & 0xF;
      int v5 = *((_DWORD *)this + 39);
      v2 += 2 * v3 * v4 * v5 + 2 * v4 * (uint64_t)*((int *)this + 81);
      int v6 = 2;
      break;
    default:
      int v6 = 0;
      int v4 = *((_DWORD *)this + 79) & 0xF;
      int v5 = *((_DWORD *)this + 39);
      break;
  }
  *(void *)a2 = v2;
  double result = *(double *)((char *)this + 20);
  *(void *)&long long v7 = SLODWORD(result);
  *((void *)&v7 + 1) = SHIDWORD(result);
  *(void *)&double result = SLODWORD(result);
  *(_OWORD *)(a2 + 8) = v7;
  *(void *)(a2 + 24) = v5 * v4 * v6;
  return result;
}

void sub_1DD87E2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void CRDetectorPostProcessV3::extractAvgAndMaxValueInComponents(uint64_t a1, uint64_t *a2, float **a3, uint64_t *a4, float **a5, uint64_t *a6, uint64_t *a7)
{
  std::vector<float>::vector(__p, a3[1] - *a3);
  uint64_t v14 = *(void *)(a1 + 112);
  if (v14)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v17 = *a2;
    uint64_t v18 = *a4;
    uint64_t v19 = *a6;
    uint64_t v20 = *(void *)(a1 + 104);
    long long v21 = *(unint64_t **)a1;
    unint64_t v22 = *(int *)(a1 + 120);
    do
    {
      if (v20)
      {
        long long v23 = *a3;
        long long v24 = *a5;
        long long v25 = (_DWORD *)(v19 + 4 * v16);
        long long v26 = (float *)__p[0];
        uint64_t v27 = *a7;
        float v28 = (float *)(v18 + 4 * v16);
        unint64_t v29 = (float *)(v17 + 4 * v16);
        v16 += v20;
        uint64_t v30 = v21;
        uint64_t v31 = v20;
        do
        {
          unint64_t v32 = *v30++;
          unint64_t v33 = v32 - v22;
          if (v32 >= v22)
          {
            v23[v33] = *v29 + v23[v33];
            v24[v33] = *v28 + v24[v33];
            v26[v33] = v26[v33] + 1.0;
            if (*(float *)(v27 + 4 * v33) < *(float *)v25) {
              *(_DWORD *)(v27 + 4 * v33) = *v25;
            }
          }
          ++v25;
          ++v28;
          ++v29;
          --v31;
        }
        while (v31);
      }
      ++v15;
      v21 += v20;
    }
    while (v15 != v14);
  }
  long long v34 = *a3;
  long long v35 = __p[0];
  uint64_t v36 = (char *)a3[1] - (char *)*a3;
  if (v36)
  {
    unint64_t v37 = v36 >> 2;
    unint64_t v38 = *a5;
    if (v37 <= 1) {
      unint64_t v37 = 1;
    }
    uint64_t v39 = (float *)__p[0];
    do
    {
      float *v34 = *v34 / *v39;
      ++v34;
      float v40 = *v39++;
      *unint64_t v38 = *v38 / v40;
      ++v38;
      --v37;
    }
    while (v37);
  }
  else if (!__p[0])
  {
    return;
  }
  __p[1] = v35;
  operator delete(v35);
}

uint64_t CRDetectorPostProcessV3::splitIsthmusMergedComponents(CRDetectorPostProcessV3 *this, CRDetectorUtils::CRTextDetectorConnectedComponentResult *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 2) - *((void *)this + 1);
  if (v2)
  {
    int v3 = this;
    uint64_t v4 = 0;
    unint64_t v5 = v2 >> 3;
    int v6 = (void *)((char *)this + 32);
    if (v5 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v5;
    }
    do
    {
      if (CRDetectorUtils::estimateVerticalIsthmusMergedLineCountInConnectedComponents((uint64_t *)v3, v4, 0xAuLL) == 2
        && (double)(unint64_t)(*(void *)(*v6 + 32 * v4 + 24) - *(void *)(*v6 + 32 * v4 + 16) + 1)
         / (double)(unint64_t)(*(void *)(*v6 + 32 * v4 + 8) - *(void *)(*v6 + 32 * v4) + 1) >= 1.4)
      {
        *(_OWORD *)__n128 __src = 0u;
        long long v18 = 0u;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__src[1], *((const void **)v3 + 1), *((void *)v3 + 2), (uint64_t)(*((void *)v3 + 2) - *((void *)v3 + 1)) >> 3);
        uint64_t v19 = 0;
        __dst = 0;
        uint64_t v21 = 0;
        int v9 = (unsigned char *)*((void *)v3 + 4);
        int v8 = (unsigned char *)*((void *)v3 + 5);
        int64_t v10 = v8 - v9;
        if (v8 != v9)
        {
          std::vector<CGRect>::__vallocate[abi:ne180100](&v19, v10 >> 5);
          int v11 = (char *)__dst;
          memmove(__dst, v9, v10);
          __dst = &v11[32 * (v10 >> 5)];
          int v3 = this;
        }
        memset(__p, 0, sizeof(__p));
        std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(__p, *((const void **)v3 + 7), *((void *)v3 + 8), (uint64_t)(*((void *)v3 + 8) - *((void *)v3 + 7)) >> 4);
        uint64_t v23 = 0;
        long long v24 = 0;
        v25[0] = 0;
        uint64_t v13 = *((void *)v3 + 10);
        uint64_t v12 = *((void *)v3 + 11);
        unint64_t v29 = &v23;
        LOBYTE(v30) = 0;
        if (v12 != v13)
        {
          std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](&v23, 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3));
          long long v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<CGPoint>>,std::vector<CGPoint>*,std::vector<CGPoint>*,std::vector<CGPoint>*>((uint64_t)v25, v13, v12, v24);
        }
        uint64_t v14 = *((void *)v3 + 14);
        v25[1] = *((void *)v3 + 13);
        v25[2] = v14;
        int v26 = *((_DWORD *)v3 + 30);
        uint64_t v27 = *((void *)v3 + 16);
        __int16 v28 = *((_WORD *)v3 + 68);
        operator new[]();
      }
      ++v4;
    }
    while (v4 != v7);
  }
  return 0;
}

void sub_1DD87FD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  *(void *)(a20 + 88) = v34;
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&a23);
  _Unwind_Resume(a1);
}

void CRDetectorPostProcessV3::extractTableBoxes(void *a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v14 = a2;
  if (a1)
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
    uint64_t v21 = 0;
    uint64_t v12 = a1[2];
    uint64_t v13 = a1[1];
    std::vector<float>::vector(&__C, v12 * v13);
    LODWORD(v17) = 1061997773;
    __B[0] = 0.5;
    MEMORY[0x1E01C0120](*a1, 1, &v17, __B, __C, 1, a1[2] * a1[1]);
    vDSP_vsadd(__C, 1, __B, __C, 1, a1[2] * a1[1]);
    CRLogger = CRLogger::getCRLogger(v4);
    if (*CRLogger && (CRLogger[8] & 1) != 0)
    {
      int v6 = malloc_type_calloc(a1[1] * a1[2], 4uLL, 0x100004052888210uLL);
      uint64_t v7 = a1[1];
      uint64_t v8 = a1[2];
      *(void *)long long v24 = v6;
      uint64_t v25 = v7;
      uint64_t v26 = v8;
      uint64_t v27 = 4 * v8;
      if (v23 != __C) {
        memmove(v6, __C, (char *)v23 - (char *)__C);
      }
      objc_msgSend(NSString, "stringWithFormat:", @"/tmp/%f_tableMap.png", (float)rand());
      int v9 = (vImage_Buffer *)objc_claimAutoreleasedReturnValue();
      CRDetectorUtils::writeImageBufferToFile((CRDetectorUtils *)v24, v9, v10);
      free(*(void **)v24);
    }
    CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)buf, v12, v13, 1, 1, 1);
  }
  int v11 = CROSLogForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DD733000, v11, OS_LOG_TYPE_ERROR, "Nil tableMap buffer in extractTableBoxes.", buf, 2u);
  }

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_1DD8817E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  BOOL v62 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x258] = (unint64_t)&a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x258]);
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  a47 = &a50;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  a50 = (uint64_t)&a53;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (v59) {
    operator delete(v59);
  }
  a53 = (uint64_t)&a56;
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&a59);
  a59 = (uint64_t)&STACK[0x228];
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);

  _Unwind_Resume(a1);
}

uint64_t std::vector<CRNormalizedQuad * {__strong}>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(result, a2);
    int v9 = *a1;
    uint64_t v8 = a1[1];
    if (v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64((unint64_t)v8);
      int64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      int64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *(void *)uint64_t v8 = 0;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v15 = v12;
    uint64_t v13 = a1[2];
    a1[2] = &v6[8 * v7];
    int v16 = v13;
    uint64_t v14 = v12.i64[0];
    return std::__split_buffer<CRNormalizedQuad * {__strong}>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

float getWeightedMedianAngle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  uint64_t v4 = a1[1] - *a1;
  if (v4)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v29, v4 >> 2);
    uint64_t v28 = v27;
    unint64_t v29 = &v27[2 * v5];
  }
  uint64_t v6 = *a1;
  if (a1[1] == *a1)
  {
    float v20 = 0.0;
    int64_t v10 = v28;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = *a2;
    float v9 = 0.0;
    int64_t v10 = v28;
    do
    {
      if (v10 >= v29)
      {
        uint64_t v11 = ((char *)v10 - (char *)v27) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = v29 - v27;
        if (v12 <= v11 + 1) {
          unint64_t v12 = v11 + 1;
        }
        if ((unint64_t)((char *)v29 - (char *)v27) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v29, v13);
        int v16 = &v14[8 * v11];
        *(_DWORD *)int v16 = *(_DWORD *)(v6 + 4 * v7);
        *((_DWORD *)v16 + 1) = *(_DWORD *)(v8 + 4 * v7);
        uint64_t v17 = v28;
        long long v18 = (float *)v16;
        if (v28 != v27)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 2;
            *((void *)v18 - 1) = v19;
            v18 -= 2;
          }
          while (v17 != v27);
          uint64_t v17 = v27;
        }
        int64_t v10 = (float *)(v16 + 8);
        uint64_t v27 = v18;
        unint64_t v29 = (float *)&v14[8 * v15];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        float *v10 = *(float *)(v6 + 4 * v7);
        v10[1] = *(float *)(v8 + 4 * v7);
        v10 += 2;
      }
      uint64_t v28 = v10;
      uint64_t v8 = *a2;
      float v9 = v9 + *(float *)(*a2 + 4 * v7++);
      uint64_t v6 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 2);
    float v20 = v9 * 0.5;
  }
  unint64_t v21 = 126 - 2 * __clz(((char *)v10 - (char *)v27) >> 3);
  if (v10 == v27) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *,false>(v27, v10, v22, 1);
  if (v27 == v28)
  {
LABEL_29:
    float v25 = 0.0;
    if (!v27) {
      return v25;
    }
LABEL_30:
    operator delete(v27);
    return v25;
  }
  float v23 = 0.0;
  long long v24 = v27;
  while (1)
  {
    float v23 = v23 + v24[1];
    if (v23 >= v20) {
      break;
    }
    v24 += 2;
    if (v24 == v28) {
      goto LABEL_29;
    }
  }
  float v25 = *v24;
  if (v27) {
    goto LABEL_30;
  }
  return v25;
}

void sub_1DD881D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id std::vector<CRNormalizedQuad * {__strong}>::emplace_back<CRNormalizedQuad * {__strong}&>(char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    long long v24 = v16;
    *(void *)uint64_t v15 = *a2;
    float v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    long long v18 = *a1;
    uint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)uint64_t v17 = 0;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      float v9 = (char *)v23.i64[1];
      int v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    unint64_t v21 = a1[2];
    a1[2] = v16;
    long long v24 = v21;
    uint64_t v22 = v20.i64[0];
    id result = (id)std::__split_buffer<CRNormalizedQuad * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    id result = *a2;
    *(void *)unint64_t v7 = result;
    float v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void CRDetectorPostProcessV3::saveConnectedComponentsMap(CRDetectorPostProcessV3 *this, const CRDetectorUtils::CRTextDetectorConnectedComponentResult *a2, void *a3, void *a4, NSString *a5)
{
  uint64_t v8 = a4;
  float v9 = (char *)malloc_type_calloc((void)a3 * (void)a2, 4uLL, 0x100004052888210uLL);
  v30[0] = v9;
  v30[1] = a3;
  v30[2] = a2;
  v30[3] = (void *)(4 * (void)a2);
  uint64_t v11 = *((void *)this + 2) - *((void *)this + 1);
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v11 >> 3;
    uint64_t v14 = *((void *)this + 4);
    uint64_t v15 = *((int *)this + 30);
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    int v16 = 19;
    do
    {
      uint64_t v17 = v14 + 32 * v12;
      uint64_t v10 = *(NSString **)v17;
      uint64_t v18 = *(void *)(v17 + 8);
      if ((int)*(void *)v17 < (int)v18)
      {
        uint64_t v21 = v17 + 16;
        uint64_t v19 = *(void *)(v17 + 16);
        uint64_t v20 = *(void *)(v21 + 8);
        uint64_t v22 = *((void *)this + 13);
        uint64_t v10 = (NSString *)(int)v10;
        int64x2_t v23 = (float *)&v9[4 * (void)a2 * (int)v10 + 4 * (int)v19];
        long long v24 = (uint64_t *)(*(void *)this + 8 * (v22 * (int)v10 + (int)v19));
        uint64_t v25 = 8 * v22;
        do
        {
          uint64_t v26 = v24;
          uint64_t v27 = v23;
          uint64_t v28 = (int)v20 - (uint64_t)(int)v19;
          if ((int)v19 < (int)v20)
          {
            do
            {
              uint64_t v29 = *v26++;
              if (v29 == v12 + v15) {
                float *v27 = (float)v16 / 255.0;
              }
              ++v27;
              --v28;
            }
            while (v28);
          }
          uint64_t v10 = (NSString *)((char *)v10 + 1);
          v23 += (uint64_t)a2;
          long long v24 = (uint64_t *)((char *)v24 + v25);
        }
        while (v10 != (NSString *)(int)v18);
      }
      int v16 = (v16 + 19) % 255;
      ++v12;
    }
    while (v12 != v13);
  }
  CRDetectorUtils::writeImageBufferToFile((CRDetectorUtils *)v30, v8, v10);
  free(v30[0]);
}

void sub_1DD88206C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CRDetectorPostProcessV3::extractMaxValueInComponents(uint64_t a1, uint64_t *a2, char **a3)
{
  uint64_t v6 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
  unint64_t v7 = v6 >> 3;
  uint64_t v8 = *a3;
  float v9 = a3[1];
  uint64_t v10 = v9 - *a3;
  unint64_t v11 = v10 >> 2;
  if (v6 >> 3 <= (unint64_t)(v10 >> 2))
  {
    if (v7 >= v11) {
      goto LABEL_18;
    }
    int64x2_t v23 = &v8[4 * v7];
    goto LABEL_15;
  }
  uint64_t v12 = a3[2];
  if (v7 - v11 <= (v12 - v9) >> 2)
  {
    bzero(a3[1], (((v6 >> 1) - v10 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    int64x2_t v23 = &v9[4 * (v7 - v11)];
LABEL_15:
    a3[1] = v23;
    goto LABEL_18;
  }
  if (v6 < 0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = v12 - v8;
  uint64_t v14 = v13 >> 1;
  if (v13 >> 1 <= v7) {
    uint64_t v14 = v6 >> 3;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v14;
  }
  int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v15);
  uint64_t v18 = v17;
  uint64_t v19 = &v16[4 * v11];
  bzero(v19, ((((unint64_t)v6 >> 1) - v10 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  uint64_t v20 = *a3;
  for (uint64_t i = a3[1]; i != v20; i -= 4)
  {
    int v22 = *((_DWORD *)i - 1);
    *((_DWORD *)v19 - 1) = v22;
    v19 -= 4;
  }
  *a3 = v19;
  a3[1] = &v16[4 * v7];
  a3[2] = &v16[4 * v18];
  if (v20) {
    operator delete(v20);
  }
LABEL_18:
  uint64_t v24 = *(void *)(a1 + 112);
  if (v24)
  {
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = *a2;
    uint64_t v28 = *(void *)(a1 + 104);
    uint64_t v29 = *(unint64_t **)a1;
    unint64_t v30 = *(int *)(a1 + 120);
    do
    {
      if (v28)
      {
        uint64_t v31 = *a3;
        unint64_t v32 = (_DWORD *)(v27 + 4 * v26);
        v26 += v28;
        unint64_t v33 = v29;
        uint64_t v34 = v28;
        do
        {
          unint64_t v35 = *v33++;
          unint64_t v36 = v35 - v30;
          if (v35 >= v30 && *(float *)&v31[4 * v36] < *(float *)v32) {
            *(_DWORD *)&v31[4 * v36] = *v32;
          }
          ++v32;
          --v34;
        }
        while (v34);
      }
      ++v25;
      v29 += v28;
    }
    while (v25 != v24);
  }
}

void CRDetectorPostProcessV3::getSplitComponents(void *a1, void *a2, const CRImageBuffer *a3, void *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v20 = a1;
  id v21 = a2;
  a4;
  uint64_t v8 = *((void *)a3 + 1);
  uint64_t v7 = *((void *)a3 + 2);
  if (v8 * v7)
  {
    float v9 = malloc_type_calloc(v8 * v7, 4uLL, 0xF2EF0BD8uLL);
    bzero(v9, 4 * v8 * v7);
  }
  else
  {
    float v9 = 0;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v10 = v21;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v28 != v12) {
          objc_enumerationMutation(v10);
        }
        uint64_t v14 = (CRTextFeature *)*(id *)(*((void *)&v27 + 1) + 8 * i);
        drawRect(v14, a3, (float *)v9, 1.0);
      }
      uint64_t v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v27, v32, 16, v20);
    }
    while (v11);
  }

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v15 = v20;
  uint64_t v16 = [v15 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v24;
    do
    {
      for (uint64_t j = 0; j != v16; ++j)
      {
        if (*(void *)v24 != v17) {
          objc_enumerationMutation(v15);
        }
        uint64_t v19 = (CRTextFeature *)*(id *)(*((void *)&v23 + 1) + 8 * j);
        drawRect(v19, a3, (float *)v9, 0.0);
      }
      uint64_t v16 = [v15 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v16);
  }

  CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v22, v7, v8, 1, 1, 1);
}

void sub_1DD882670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41)
{
  _Unwind_Resume(a1);
}

void drawRect(CRTextFeature *a1, const CRImageBuffer *a2, float *a3, float a4)
{
  uint64_t v7 = a1;
  unint64_t v9 = *((void *)a2 + 1);
  unint64_t v8 = *((void *)a2 + 2);
  uint64_t v10 = *(void *)a2;
  uint64_t v39 = v7;
  [(CRTextFeature *)v7 bounds];
  double v12 = v11;
  [(CRTextFeature *)v39 bounds];
  double v14 = v13;
  [(CRTextFeature *)v39 bounds];
  double v16 = v15;
  [(CRTextFeature *)v39 bounds];
  double v18 = v17;
  [(CRTextFeature *)v39 bounds];
  double v20 = v19;
  [(CRTextFeature *)v39 bounds];
  int v22 = (int)fmax(v12 * (double)v9, 0.0);
  int v23 = (int)fmin((double)v9, (v14 + v16) * (double)v9);
  if (v22 < v23)
  {
    int v24 = (int)fmax(v18 * (double)v8, 0.0);
    unint64_t v25 = v23;
    unint64_t v26 = v22;
    unint64_t v38 = v24;
    unint64_t v27 = (int)fmin((double)v8, (v20 + v21) * (double)v8);
    float v28 = (float)v9;
    float v29 = (float)v8;
    unint64_t v30 = v8 * v22;
    uint64_t v31 = &a3[v30];
    uint64_t v32 = 4 * v8;
    uint64_t v33 = v10 + 4 * v30;
    do
    {
      if (v24 < v27)
      {
        unint64_t v34 = v38;
        do
        {
          unint64_t v35 = [(CRTextFeature *)v39 boundingQuad];
          int v36 = objc_msgSend(v35, "containsNormalizedPoint:", (float)((float)v34 / v29), (float)((float)v26 / v28));

          if (v36)
          {
            if (*(float *)(v33 + 4 * v34) <= 0.06) {
              float v37 = 0.0;
            }
            else {
              float v37 = 1.0;
            }
            v31[v34] = v37 * a4;
          }
          ++v34;
        }
        while (v34 < v27);
      }
      ++v26;
      uint64_t v31 = (float *)((char *)v31 + v32);
      v33 += v32;
    }
    while (v26 < v25);
  }
}

void sub_1DD882944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void extractContourFromLabelMap(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, void **a6, void **a7)
{
  uint64_t v10 = a1[13];
  uint64_t v9 = a1[14];
  double v11 = (uint64_t *)(a1[4] + 32 * (a2 - (uint64_t)*((int *)a1 + 30)));
  uint64_t v12 = v11[2];
  uint64_t v13 = v11[3];
  uint64_t v15 = *v11;
  uint64_t v14 = v11[1];
  int v16 = 2 * a5;
  if ((int)v15 <= (int)v14)
  {
    uint64_t v18 = (int)v15;
    uint64_t v19 = a3 + 8 * a4 * (int)v15;
    uint64_t v20 = *a1 + 8 * v10 * (int)v15;
    do
    {
      uint64_t v21 = (int)v12;
      if ((int)v12 <= (int)v13)
      {
        do
        {
          if (*(void *)(v20 + 8 * v21) == a2) {
            uint64_t v17 = *(void *)(v19 + 8 * v21);
          }
          else {
            uint64_t v17 = 0;
          }
          if (v21 >= (int)v13) {
            break;
          }
          ++v21;
        }
        while (!v17);
      }
      else
      {
        uint64_t v17 = 0;
      }
      if (v18 >= (int)v14) {
        break;
      }
      ++v18;
      v19 += 8 * a4;
      v20 += 8 * v10;
    }
    while (!v17);
  }
  else
  {
    uint64_t v17 = 0;
  }
  LODWORD(v22) = (int)fmax((double)((int)v15 - v16), 0.0);
  int v23 = (int)fmin((double)(v16 + 2 + (int)v14), (double)(int)v9);
  double v24 = (double)(int)v10;
  if ((int)v22 >= v23)
  {
    int v27 = 0;
    int v26 = 0;
    int v25 = 0;
    int v33 = v10;
    int v32 = v9;
  }
  else
  {
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    int v28 = (int)fmin((double)(v16 + 2 + (int)v13), v24);
    int v29 = (int)fmax((double)((int)v12 - v16), 0.0);
    uint64_t v22 = (int)v22;
    unint64_t v30 = (uint64_t *)(a3 + 8 * (a4 * (int)v22 + v29));
    uint64_t v31 = 8 * a4;
    int v32 = v9;
    int v33 = v10;
    do
    {
      if (v29 < v28)
      {
        double v34 = (double)(int)v22;
        unint64_t v35 = v30;
        int v36 = v29;
        uint64_t v37 = v28 - (uint64_t)v29;
        do
        {
          uint64_t v38 = *v35++;
          if (v38 == v17)
          {
            int v33 = (int)fmin((double)v36, (double)v33);
            int v27 = (int)fmax((double)v36, (double)v27);
            int v32 = (int)fmin(v34, (double)v32);
            int v26 = (int)fmax(v34, (double)v26);
            ++v25;
          }
          ++v36;
          --v37;
        }
        while (v37);
      }
      ++v22;
      unint64_t v30 = (uint64_t *)((char *)v30 + v31);
    }
    while (v22 != v23);
  }
  double v39 = sqrt(fmin((double)(v27 - v33 + 1), (double)(v26 - v32 + 1))* (double)v25/ (float)((v26 - v32 + 1) * (v27 - v33 + 1)));
  int v40 = (int)fmax((double)v16, (double)(int)(v39 + v39));
  int v41 = (int)fmax((double)(v32 - v40), 0.0);
  unsigned int v42 = v40 + 2;
  int v43 = (int)fmin((double)(v40 + 2 + v26), (double)(int)v9);
  int v44 = (int)fmax((double)(v33 - v40), 0.0);
  int v45 = (int)fmin((double)(v40 + 2 + v27), v24);
  int v102 = v9;
  int v104 = v44;
  BOOL v48 = v43 == v9 || v44 == 0 || v45 == v10;
  if (v41) {
    char v49 = v48;
  }
  else {
    char v49 = 1;
  }
  if (v41 < v43)
  {
    int v50 = v40 + 1;
    int v51 = (int)((double)(v40 + 1) * 0.6);
    if (v40 >= -1) {
      int v52 = v40 + 1;
    }
    else {
      int v52 = v40 + 2;
    }
    int v53 = v50 - (v52 >> 1);
    if (v42 < 3) {
      char v49 = 1;
    }
    double v54 = (double)-v51;
    double v55 = (double)(v52 >> 1);
    double v56 = (double)-(v52 >> 1);
    uint64_t v57 = a2;
    if (v51) {
      char v58 = v49;
    }
    else {
      char v58 = 1;
    }
    char v106 = v58;
    double v59 = (double)v53;
    uint64_t v60 = v41;
    int v107 = v10;
    int v103 = v43;
    while (v104 >= v45)
    {
LABEL_89:
      if (++v60 == v103) {
        return;
      }
    }
    uint64_t v61 = v104;
    uint64_t v62 = (int)fmax((double)-(int)v60, v54);
    uint64_t v63 = (int)fmin((double)(v102 - (int)v60), v55);
    while (1)
    {
      uint64_t v64 = *a1;
      uint64_t v65 = a1[13];
      if ((int)v62 < (int)v63) {
        break;
      }
LABEL_53:
      if (*(void *)(v64 + 8 * (v61 + v65 * v60)) == v57)
      {
        int v73 = 0;
LABEL_56:
        uint64_t v75 = a6[1];
        unint64_t v74 = (unint64_t)a6[2];
        if ((unint64_t)v75 >= v74)
        {
          uint64_t v77 = ((char *)v75 - (unsigned char *)*a6) >> 3;
          unint64_t v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v79 = v74 - (void)*a6;
          if (v79 >> 2 > v78) {
            unint64_t v78 = v79 >> 2;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v78;
          }
          uint64_t v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v80);
          uint64_t v83 = &v82[8 * v77];
          *(_DWORD *)uint64_t v83 = v61;
          *((_DWORD *)v83 + 1) = v60;
          uint64_t v85 = (char *)*a6;
          uint64_t v84 = (char *)a6[1];
          uint64_t v86 = v83;
          if (v84 != *a6)
          {
            do
            {
              uint64_t v87 = *((void *)v84 - 1);
              v84 -= 8;
              *((void *)v86 - 1) = v87;
              v86 -= 8;
            }
            while (v84 != v85);
            uint64_t v84 = (char *)*a6;
          }
          int64_t v76 = v83 + 8;
          *a6 = v86;
          a6[1] = v83 + 8;
          a6[2] = &v82[8 * v81];
          if (v84) {
            operator delete(v84);
          }
          LODWORD(v10) = v107;
        }
        else
        {
          *uint64_t v75 = v61;
          v75[1] = v60;
          int64_t v76 = v75 + 2;
        }
        a6[1] = v76;
        if (v73 && ((v106 & 1) != 0 || *(void *)(*a1 + 8 * (v61 + a1[13] * v60)) != v57))
        {
          unint64_t v89 = a7[1];
          unint64_t v88 = (unint64_t)a7[2];
          if ((unint64_t)v89 >= v88)
          {
            uint64_t v91 = ((char *)v89 - (unsigned char *)*a7) >> 3;
            unint64_t v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 61) {
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v93 = v88 - (void)*a7;
            if (v93 >> 2 > v92) {
              unint64_t v92 = v93 >> 2;
            }
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v94 = v92;
            }
            uint64_t v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a7 + 2), v94);
            unint64_t v97 = &v96[8 * v91];
            *(_DWORD *)unint64_t v97 = v61;
            *((_DWORD *)v97 + 1) = v60;
            float v99 = (char *)*a7;
            float v98 = (char *)a7[1];
            uint64_t v100 = v97;
            if (v98 != *a7)
            {
              do
              {
                uint64_t v101 = *((void *)v98 - 1);
                v98 -= 8;
                *((void *)v100 - 1) = v101;
                v100 -= 8;
              }
              while (v98 != v99);
              float v98 = (char *)*a7;
            }
            long long v90 = v97 + 8;
            *a7 = v100;
            a7[1] = v97 + 8;
            a7[2] = &v96[8 * v95];
            if (v98) {
              operator delete(v98);
            }
            LODWORD(v10) = v107;
          }
          else
          {
            *unint64_t v89 = v61;
            v89[1] = v60;
            long long v90 = v89 + 2;
          }
          a7[1] = v90;
        }
      }
      if (++v61 == v45) {
        goto LABEL_89;
      }
    }
    int v66 = (int)fmin((double)((int)v10 - (int)v61), v59);
    int v67 = (int)fmax((double)-(int)v61, v56);
    unint64_t v68 = (uint64_t *)(v64 + 8 * (v61 + (v60 + v62) * v65 + v67));
    uint64_t v69 = v62;
    while (1)
    {
      uint64_t v70 = v66 - (uint64_t)v67;
      uint64_t v71 = v68;
      if (v67 < v66) {
        break;
      }
LABEL_52:
      ++v69;
      v68 += v65;
      if (v69 == v63) {
        goto LABEL_53;
      }
    }
    while (1)
    {
      uint64_t v72 = *v71++;
      if (v72 == v57) {
        break;
      }
      if (!--v70) {
        goto LABEL_52;
      }
    }
    int v73 = 1;
    goto LABEL_56;
  }
}

void CRDetectorPostProcessV3::extractTextBoxes(uint64_t a1, float **a2, uint64_t a3, uint64_t a4, float **a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  a8;
  memset(&v21[3], 0, 24);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v19 = *(void *)(a1 + 16);
  std::vector<float>::vector(v21, v19 * v18);
  uint64_t v10 = *(void *)(a1 + 16) * *(void *)(a1 + 8);
  if (v10)
  {
    double v11 = *(float **)a1;
    uint64_t v12 = *a2;
    uint64_t v13 = *a5;
    uint64_t v14 = (float *)v21[0];
    do
    {
      BOOL v15 = *v11 > 0.15 || *v12 > 0.3;
      *uint64_t v13 = (float)v15;
      BOOL v16 = *v11 > 0.45 || *v12 > 0.3;
      *v14++ = (float)v16;
      ++v12;
      ++v13;
      ++v11;
      --v10;
    }
    while (v10);
  }
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v20, v19, v18, 1, 1, 1);
}

void sub_1DD885A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&a56);
  uint64_t v63 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v63;
    operator delete(v63);
  }
  uint64_t v64 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v64;
    operator delete(v64);
  }
  uint64_t v65 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v65;
    operator delete(v65);
  }
  if (STACK[0x250]) {
    operator delete((void *)STACK[0x250]);
  }
  int v66 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v66;
    operator delete(v66);
  }
  int v67 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v67;
    operator delete(v67);
  }
  unint64_t v68 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v68;
    operator delete(v68);
  }
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&STACK[0x2B0]);
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&STACK[0x340]);
  uint64_t v69 = (void *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    STACK[0x3D8] = (unint64_t)v69;
    operator delete(v69);
  }
  STACK[0x340] = (unint64_t)&STACK[0x3E8];
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x340]);

  _Unwind_Resume(a1);
}

void std::vector<float>::shrink_to_fit(char **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  int v3 = a1[2];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = (v5 - v4) >> 2;
  if (v6 >= (v3 - v4) >> 2) {
    return;
  }
  if (v5 == v4)
  {
    double v11 = 0;
    uint64_t v9 = 4 * v6;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v2, v6);
  unint64_t v8 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v9 = (uint64_t)&v7[4 * v6];
  double v11 = &v7[4 * v10];
  if (v4 == *a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    int v13 = *((_DWORD *)v4 - 1);
    v4 -= 4;
    *(_DWORD *)(v12 - 4) = v13;
    v12 -= 4;
  }
  while (v4 != v8);
  uint64_t v4 = v8;
LABEL_9:
  *a1 = (char *)v12;
  a1[1] = (char *)v9;
  a1[2] = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void CRDetectorPostProcessV3::Graph::connectedComponents(CRDetectorPostProcessV3::Graph *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = *(int *)this;
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(v12, v4, (unsigned __int8 *)&__p);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v5 = *(_DWORD *)this;
  if (*(int *)this >= 1)
  {
    unint64_t v6 = 0;
    do
    {
      if (((*(void *)((char *)v12[0] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        __p = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        CRDetectorPostProcessV3::Graph::dfsUtil((uint64_t)this, v6, v12, (uint64_t)&__p);
        unint64_t v7 = a2[1];
        if (v7 >= a2[2])
        {
          uint64_t v8 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(a2, (uint64_t)&__p);
        }
        else
        {
          std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>((uint64_t)a2, (uint64_t)&__p);
          uint64_t v8 = v7 + 24;
        }
        a2[1] = v8;
        if (__p)
        {
          uint64_t v10 = __p;
          operator delete(__p);
        }
        int v5 = *(_DWORD *)this;
      }
      ++v6;
    }
    while ((uint64_t)v6 < v5);
  }
  if (v12[0]) {
    operator delete(v12[0]);
  }
}

void sub_1DD885FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void CRDetectorPostProcessV3::Graph::dfsUtil(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  *(void *)(*a3 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  unint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = *(_DWORD **)(a4 + 8);
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = *(_DWORD **)a4;
    uint64_t v13 = ((uint64_t)v10 - *(void *)a4) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v9 - (void)v12;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v16);
      uint64_t v12 = *(_DWORD **)a4;
      uint64_t v10 = *(_DWORD **)(a4 + 8);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v18 = &v17[4 * v13];
    uint64_t v19 = &v17[4 * v16];
    *(_DWORD *)uint64_t v18 = a2;
    uint64_t v11 = v18 + 4;
    while (v10 != v12)
    {
      int v20 = *--v10;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    *(void *)a4 = v18;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    _DWORD *v10 = a2;
    uint64_t v11 = v10 + 1;
  }
  *(void *)(a4 + 8) = v11;
  uint64_t v21 = *(void *)(a1 + 8) + 24 * a2;
  for (uint64_t i = *(void *)(v21 + 8); i != v21; uint64_t i = *(void *)(i + 8))
  {
    if (((*(void *)(*a3 + (((unint64_t)*(int *)(i + 16) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(i + 16)) & 1) == 0) {
      CRDetectorPostProcessV3::Graph::dfsUtil(a1);
    }
  }
}

CRDetectorPostProcessV3::Graph *CRDetectorPostProcessV3::Graph::Graph(CRDetectorPostProcessV3::Graph *this, int a2)
{
  *(_DWORD *)this = a2;
  *((void *)this + 1) = 0;
  int v3 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<std::list<int>>::vector(&v5, a2);
  std::vector<std::list<int>>::__vdeallocate(v3);
  *(_OWORD *)((char *)this + 8) = v5;
  *((void *)this + 3) = v6;
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  unint64_t v7 = (void **)&v5;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  return this;
}

void sub_1DD8861F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

_DWORD *CRDetectorPostProcessV3::Graph::addEdge(CRDetectorPostProcessV3::Graph *this, int a2, int a3)
{
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = (uint64_t *)(v5 + 24 * a2);
  unint64_t v7 = operator new(0x18uLL);
  v7[4] = a3;
  uint64_t v8 = *v6;
  *(void *)unint64_t v7 = *v6;
  *((void *)v7 + 1) = v6;
  *(void *)(v8 + 8) = v7;
  uint64_t *v6 = (uint64_t)v7;
  ++v6[2];
  unint64_t v9 = (uint64_t *)(v5 + 24 * a3);
  id result = operator new(0x18uLL);
  result[4] = a2;
  uint64_t v11 = *v9;
  *(void *)id result = *v9;
  *((void *)result + 1) = v9;
  *(void *)(v11 + 8) = result;
  *unint64_t v9 = (uint64_t)result;
  ++v9[2];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<CGPoint>>,std::vector<CGPoint>*,std::vector<CGPoint>*,std::vector<CGPoint>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1DD886348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<CGPoint> *,std::vector<CGPoint> *,std::vector<CGPoint> *>(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((char *)v5 != a3) {
        std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>(a3, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 4);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *,false>(float *a1, float *a2, uint64_t a3, char a4)
{
float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(float *a1, float *a2, float *a3)
{
  float result = *a2;
  float v4 = *a1;
  if (*a2 >= *a1 && (v4 < result || a2[1] >= a1[1]))
  {
    float v8 = *a3;
    if (*a3 < result || result >= v8 && a3[1] < a2[1])
    {
      *a2 = v8;
      *a3 = result;
      char v9 = a2 + 1;
      int v10 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v10;
      float result = *a2;
      float v11 = *a1;
      if (*a2 < *a1 || v11 >= result && *v9 < a1[1])
      {
        *a1 = result;
        uint64_t v6 = a1 + 1;
        *a2 = v11;
LABEL_18:
        float result = *v6;
        float *v6 = *v9;
        *char v9 = result;
      }
    }
  }
  else
  {
    float v5 = *a3;
    if (*a3 < result || result >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      uint64_t v6 = a1 + 1;
      *a3 = v4;
      unint64_t v7 = a3 + 1;
LABEL_17:
      char v9 = v7;
      goto LABEL_18;
    }
    *a1 = result;
    *a2 = v4;
    float v12 = a1[1];
    a1[1] = a2[1];
    a2[1] = v12;
    float v13 = *a3;
    float result = *a2;
    if (*a3 < *a2 || result >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = result;
      unint64_t v7 = a3 + 1;
      uint64_t v6 = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(uint64_t a1, float *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 2);
      float v7 = *(float *)a1;
      if (v6 < *(float *)a1 || v7 >= v6 && *(a2 - 1) < *(float *)(a1 + 4))
      {
        *(float *)a1 = v6;
        *(a2 - 2) = v7;
        int v8 = *(_DWORD *)(a1 + 4);
        *(float *)(a1 + 4) = *(a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)a1, (float *)(a1 + 8), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)a1, a1 + 8, a1 + 16, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)a1, a1 + 8, a1 + 16, a1 + 24, (uint64_t)(a2 - 2));
      return 1;
    default:
      char v9 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      int v10 = (float *)(a1 + 24);
      if ((float *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    float v13 = *v10;
    float v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13) {
        goto LABEL_23;
      }
      float v15 = v10[1];
      if (v15 >= v9[1]) {
        goto LABEL_23;
      }
    }
    else
    {
      float v15 = v10[1];
    }
    float *v10 = v14;
    v10[1] = v9[1];
    uint64_t v16 = (float *)a1;
    if (v9 == (float *)a1) {
      goto LABEL_22;
    }
    uint64_t v17 = v11;
    while (1)
    {
      uint64_t v18 = a1 + v17;
      float v19 = *(float *)(a1 + v17 + 8);
      if (v13 < v19)
      {
        float v20 = *(float *)(v18 + 12);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        uint64_t v16 = (float *)(a1 + v17 + 16);
        goto LABEL_22;
      }
      float v20 = *(float *)(a1 + v17 + 12);
      if (v15 >= v20) {
        break;
      }
LABEL_18:
      v9 -= 2;
      *(float *)(v18 + 16) = v19;
      *(float *)(a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        uint64_t v16 = (float *)a1;
        goto LABEL_22;
      }
    }
    uint64_t v16 = v9;
LABEL_22:
    float *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_23:
    char v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(a1, (float *)a2, (float *)a3);
  float result = *(float *)a4;
  float v9 = *(float *)a3;
  if (*(float *)a4 < *(float *)a3 || v9 >= result && *(float *)(a4 + 4) < *(float *)(a3 + 4))
  {
    *(float *)a3 = result;
    *(float *)a4 = v9;
    int v10 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    float result = *(float *)a3;
    float v11 = *(float *)a2;
    if (*(float *)a3 < *(float *)a2 || v11 >= result && *(float *)(a3 + 4) < *(float *)(a2 + 4))
    {
      *(float *)a2 = result;
      *(float *)a3 = v11;
      int v12 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v12;
      float result = *(float *)a2;
      float v13 = *a1;
      if (*(float *)a2 < *a1 || v13 >= result && *(float *)(a2 + 4) < a1[1])
      {
        *a1 = result;
        *(float *)a2 = v13;
        float result = a1[1];
        a1[1] = *(float *)(a2 + 4);
        *(float *)(a2 + 4) = result;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(a1, a2, a3, a4);
  float result = *(float *)a5;
  float v11 = *(float *)a4;
  if (*(float *)a5 < *(float *)a4 || v11 >= result && *(float *)(a5 + 4) < *(float *)(a4 + 4))
  {
    *(float *)a4 = result;
    *(float *)a5 = v11;
    int v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = *(_DWORD *)(a5 + 4);
    *(_DWORD *)(a5 + 4) = v12;
    float result = *(float *)a4;
    float v13 = *(float *)a3;
    if (*(float *)a4 < *(float *)a3 || v13 >= result && *(float *)(a4 + 4) < *(float *)(a3 + 4))
    {
      *(float *)a3 = result;
      *(float *)a4 = v13;
      int v14 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v14;
      float result = *(float *)a3;
      float v15 = *(float *)a2;
      if (*(float *)a3 < *(float *)a2 || v15 >= result && *(float *)(a3 + 4) < *(float *)(a2 + 4))
      {
        *(float *)a2 = result;
        *(float *)a3 = v15;
        int v16 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = v16;
        float result = *(float *)a2;
        float v17 = *a1;
        if (*(float *)a2 < *a1 || v17 >= result && *(float *)(a2 + 4) < a1[1])
        {
          *a1 = result;
          *(float *)a2 = v17;
          float result = a1[1];
          a1[1] = *(float *)(a2 + 4);
          *(float *)(a2 + 4) = result;
        }
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,false>(uint64_t result, double *a2, void *a3, uint64_t a4, char a5)
{
  unint64_t v11 = result;
  while (2)
  {
    uint64_t v187 = (uint64_t)a2;
    uint64_t v188 = (uint64_t)(a2 - 2);
    uint64_t v184 = (uint64_t)(a2 - 6);
    uint64_t v185 = (uint64_t)(a2 - 4);
    unint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v12;
          uint64_t v13 = (uint64_t)a2 - v12;
          uint64_t v14 = (uint64_t)((uint64_t)a2 - v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                double v83 = *(a2 - 2);
                [*(id *)(*a3 + 8 * *((int *)a2 - 2)) area];
                double v84 = *(double *)v11;
                double v86 = v83 / v85;
                float result = [*(id *)(*a3 + 8 * *(int *)(v11 + 8)) area];
                if (v86 < v84 / v87)
                {
                  double v88 = *(double *)v11;
                  *(double *)unint64_t v11 = *(a2 - 2);
                  *(a2 - 2) = v88;
                  int v89 = *(_DWORD *)(v11 + 8);
                  *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v89;
                }
                break;
              case 3:
                float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v11, v11 + 16, v188, a3);
                break;
              case 4:
                float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v11, v11 + 16, v11 + 32, v188, a3);
                break;
              case 5:
                float result = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,0>(v11, v11 + 16, v11 + 32, v11 + 48, v188, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 383)
          {
            unint64_t v90 = (double *)(v11 + 16);
            BOOL v92 = (double *)v11 == a2 || v90 == a2;
            if (a5)
            {
              if (!v92)
              {
                uint64_t v93 = 0;
                unint64_t v94 = v11;
                do
                {
                  float v95 = v90;
                  double v96 = *(double *)(v94 + 16);
                  objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v94 + 24)), "area", v184);
                  double v97 = *(double *)v94;
                  double v99 = v96 / v98;
                  float result = [*(id *)(*a3 + 8 * *(int *)(v94 + 8)) area];
                  if (v99 < v97 / v100)
                  {
                    double v101 = *v95;
                    int v102 = *(_DWORD *)(v94 + 24);
                    uint64_t v103 = v93;
                    while (1)
                    {
                      uint64_t v104 = v11 + v103;
                      *(void *)(v104 + 16) = *(void *)(v11 + v103);
                      *(_DWORD *)(v104 + 24) = *(_DWORD *)(v11 + v103 + 8);
                      if (!v103) {
                        break;
                      }
                      [*(id *)(*a3 + 8 * v102) area];
                      double v105 = *(double *)(v104 - 16);
                      double v107 = v101 / v106;
                      float result = [*(id *)(*a3 + 8 * *(int *)(v104 - 8)) area];
                      v103 -= 16;
                      if (v107 >= v105 / v108)
                      {
                        uint64_t v109 = v11 + v103 + 16;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v109 = v11;
LABEL_80:
                    *(double *)uint64_t v109 = v101;
                    *(_DWORD *)(v109 + 8) = v102;
                    a2 = (double *)v187;
                  }
                  unint64_t v90 = v95 + 2;
                  v93 += 16;
                  unint64_t v94 = (unint64_t)v95;
                }
                while (v95 + 2 != a2);
              }
            }
            else if (!v92)
            {
              uint64_t v168 = (double *)(v11 + 24);
              do
              {
                uint64_t v169 = v90;
                double v170 = *(double *)(v11 + 16);
                objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v11 + 24)), "area", v184);
                double v171 = *(double *)v11;
                double v173 = v170 / v172;
                float result = [*(id *)(*a3 + 8 * *(int *)(v11 + 8)) area];
                if (v173 < v171 / v174)
                {
                  double v175 = *v169;
                  int v176 = *(_DWORD *)(v11 + 24);
                  double v177 = v168;
                  do
                  {
                    uint64_t v178 = v177;
                    *(v177 - 1) = *(v177 - 3);
                    int v179 = *((_DWORD *)v177 - 4);
                    v177 -= 2;
                    *(_DWORD *)uint64_t v178 = v179;
                    [*(id *)(*a3 + 8 * v176) area];
                    double v180 = *(v178 - 5);
                    double v182 = v175 / v181;
                    float result = [*(id *)(*a3 + 8 * *((int *)v178 - 8)) area];
                  }
                  while (v182 < v180 / v183);
                  *(v177 - 1) = v175;
                  *(_DWORD *)double v177 = v176;
                  a2 = (double *)v187;
                }
                unint64_t v90 = v169 + 2;
                v168 += 2;
                unint64_t v11 = (unint64_t)v169;
              }
              while (v169 + 2 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((double *)v11 != a2)
            {
              int64_t v110 = (unint64_t)(v14 - 2) >> 1;
              int64_t v189 = v110;
              do
              {
                int64_t v111 = v110;
                if (v189 >= v110)
                {
                  uint64_t v112 = (2 * v110) | 1;
                  unint64_t v113 = v11 + 16 * v112;
                  if (2 * v110 + 2 < v14)
                  {
                    double v114 = *(double *)v113;
                    [*(id *)(*a3 + 8 * *(int *)(v113 + 8)) area];
                    double v115 = *(double *)(v113 + 16);
                    double v117 = v114 / v116;
                    [*(id *)(*a3 + 8 * *(int *)(v113 + 24)) area];
                    if (v117 < v115 / v118)
                    {
                      v113 += 16;
                      uint64_t v112 = 2 * v111 + 2;
                    }
                  }
                  unint64_t v119 = v11 + 16 * v111;
                  double v120 = *(double *)v113;
                  objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v113 + 8)), "area", v184);
                  double v121 = *(double *)v119;
                  double v123 = v120 / v122;
                  float result = [*(id *)(*a3 + 8 * *(int *)(v119 + 8)) area];
                  if (v123 >= v121 / v124)
                  {
                    double v125 = *(double *)v119;
                    uint64_t v184 = *(unsigned int *)(v119 + 8);
                    int64_t v186 = v111;
                    uint64_t v126 = (int)v184;
                    do
                    {
                      unint64_t v127 = v119;
                      unint64_t v119 = v113;
                      *(void *)unint64_t v127 = *(void *)v113;
                      *(_DWORD *)(v127 + 8) = *(_DWORD *)(v113 + 8);
                      if (v189 < v112) {
                        break;
                      }
                      uint64_t v128 = 2 * v112;
                      uint64_t v112 = (2 * v112) | 1;
                      unint64_t v113 = v11 + 16 * v112;
                      uint64_t v129 = v128 + 2;
                      if (v128 + 2 < v14)
                      {
                        double v130 = *(double *)v113;
                        [*(id *)(*a3 + 8 * *(int *)(v113 + 8)) area];
                        double v131 = *(double *)(v113 + 16);
                        double v133 = v130 / v132;
                        [*(id *)(*a3 + 8 * *(int *)(v113 + 24)) area];
                        if (v133 < v131 / v134)
                        {
                          v113 += 16;
                          uint64_t v112 = v129;
                        }
                      }
                      double v135 = *(double *)v113;
                      objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v113 + 8)), "area", v184);
                      double v137 = v135 / v136;
                      float result = [*(id *)(*a3 + 8 * v126) area];
                    }
                    while (v137 >= v125 / v138);
                    *(double *)unint64_t v119 = v125;
                    int64_t v111 = v186;
                    *(_DWORD *)(v119 + 8) = v184;
                    a2 = (double *)v187;
                  }
                }
                int64_t v110 = v111 - 1;
              }
              while (v111);
              uint64_t v139 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v140 = 0;
                double v141 = *(double *)v11;
                int v190 = *(_DWORD *)(v11 + 8);
                unint64_t v142 = v11;
                do
                {
                  unint64_t v143 = v142;
                  v142 += 16 * (v140 + 1);
                  uint64_t v144 = 2 * v140;
                  uint64_t v140 = (2 * v140) | 1;
                  uint64_t v145 = v144 + 2;
                  if (v144 + 2 < v139)
                  {
                    double v146 = *(double *)v142;
                    [*(id *)(*a3 + 8 * *(int *)(v142 + 8)) area];
                    double v147 = *(double *)(v142 + 16);
                    double v149 = v146 / v148;
                    float result = [*(id *)(*a3 + 8 * *(int *)(v142 + 24)) area];
                    if (v149 < v147 / v150)
                    {
                      v142 += 16;
                      uint64_t v140 = v145;
                    }
                  }
                  *(void *)unint64_t v143 = *(void *)v142;
                  *(_DWORD *)(v143 + 8) = *(_DWORD *)(v142 + 8);
                }
                while (v140 <= (uint64_t)((unint64_t)(v139 - 2) >> 1));
                unint64_t v151 = a2 - 2;
                if ((double *)v142 == a2 - 2)
                {
                  *(double *)unint64_t v142 = v141;
                  *(_DWORD *)(v142 + 8) = v190;
                }
                else
                {
                  *(double *)unint64_t v142 = *(a2 - 2);
                  *(_DWORD *)(v142 + 8) = *((_DWORD *)a2 - 2);
                  *(a2 - 2) = v141;
                  *((_DWORD *)a2 - 2) = v190;
                  uint64_t v152 = v142 - v11 + 16;
                  if (v152 >= 17)
                  {
                    unint64_t v153 = (((unint64_t)v152 >> 4) - 2) >> 1;
                    unint64_t v154 = v11 + 16 * v153;
                    double v155 = *(double *)v154;
                    [*(id *)(*a3 + 8 * *(int *)(v154 + 8)) area];
                    double v156 = *(double *)v142;
                    double v158 = v155 / v157;
                    float result = [*(id *)(*a3 + 8 * *(int *)(v142 + 8)) area];
                    if (v158 < v156 / v159)
                    {
                      double v160 = *(double *)v142;
                      int v161 = *(_DWORD *)(v142 + 8);
                      do
                      {
                        unint64_t v162 = v142;
                        unint64_t v142 = v154;
                        *(void *)unint64_t v162 = *(void *)v154;
                        *(_DWORD *)(v162 + 8) = *(_DWORD *)(v154 + 8);
                        if (!v153) {
                          break;
                        }
                        unint64_t v153 = (v153 - 1) >> 1;
                        unint64_t v154 = v11 + 16 * v153;
                        double v163 = *(double *)v154;
                        [*(id *)(*a3 + 8 * *(int *)(v154 + 8)) area];
                        double v165 = v163 / v164;
                        float result = [*(id *)(*a3 + 8 * v161) area];
                      }
                      while (v165 < v160 / v166);
                      *(double *)unint64_t v142 = v160;
                      *(_DWORD *)(v142 + 8) = v161;
                    }
                  }
                }
                a2 = v151;
              }
              while (v139-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = v11 + 16 * ((unint64_t)v14 >> 1);
          if ((unint64_t)v13 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v16, v11, v188, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v11, v16, v188, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v11 + 16, v16 - 16, v185, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v11 + 32, v11 + 16 + 16 * v15, v184, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v16 - 16, v16, v11 + 16 + 16 * v15, a3);
            double v17 = *(double *)v11;
            *(void *)unint64_t v11 = *(void *)v16;
            *(double *)uint64_t v16 = v17;
            int v18 = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v16 + 8);
            *(_DWORD *)(v16 + 8) = v18;
          }
          --a4;
          if (a5) {
            break;
          }
          double v19 = *(double *)(v11 - 16);
          [*(id *)(*a3 + 8 * *(int *)(v11 - 8)) area];
          double v20 = *(double *)v11;
          double v22 = v19 / v21;
          [*(id *)(*a3 + 8 * *(int *)(v11 + 8)) area];
          if (v22 < v20 / v23) {
            break;
          }
          double v53 = *(double *)v11;
          int v54 = *(_DWORD *)(v11 + 8);
          [*(id *)(*a3 + 8 * v54) area];
          double v55 = *(a2 - 2);
          double v57 = v53 / v56;
          float result = [*(id *)(*a3 + 8 * *((int *)a2 - 2)) area];
          if (v57 >= v55 / v58)
          {
            unint64_t v63 = v11 + 16;
            do
            {
              unint64_t v12 = v63;
              if (v63 >= (unint64_t)a2) {
                break;
              }
              [*(id *)(*a3 + 8 * v54) area];
              double v64 = *(double *)v12;
              double v66 = v53 / v65;
              float result = [*(id *)(*a3 + 8 * *(int *)(v12 + 8)) area];
              unint64_t v63 = v12 + 16;
            }
            while (v66 >= v64 / v67);
          }
          else
          {
            unint64_t v12 = v11;
            do
            {
              objc_msgSend(*(id *)(*a3 + 8 * v54), "area", v184);
              double v59 = *(double *)(v12 + 16);
              v12 += 16;
              double v61 = v53 / v60;
              float result = [*(id *)(*a3 + 8 * *(int *)(v12 + 8)) area];
            }
            while (v61 >= v59 / v62);
          }
          unint64_t v68 = (unint64_t)a2;
          if (v12 < (unint64_t)a2)
          {
            unint64_t v68 = (unint64_t)a2;
            do
            {
              objc_msgSend(*(id *)(*a3 + 8 * v54), "area", v184);
              double v69 = *(double *)(v68 - 16);
              v68 -= 16;
              double v71 = v53 / v70;
              float result = [*(id *)(*a3 + 8 * *(int *)(v68 + 8)) area];
            }
            while (v71 < v69 / v72);
          }
          while (v12 < v68)
          {
            double v73 = *(double *)v12;
            *(void *)unint64_t v12 = *(void *)v68;
            *(double *)unint64_t v68 = v73;
            int v74 = *(_DWORD *)(v12 + 8);
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v68 + 8);
            *(_DWORD *)(v68 + 8) = v74;
            do
            {
              objc_msgSend(*(id *)(*a3 + 8 * v54), "area", v184);
              double v75 = *(double *)(v12 + 16);
              v12 += 16;
              double v77 = v53 / v76;
              [*(id *)(*a3 + 8 * *(int *)(v12 + 8)) area];
            }
            while (v77 >= v75 / v78);
            do
            {
              [*(id *)(*a3 + 8 * v54) area];
              double v79 = *(double *)(v68 - 16);
              v68 -= 16;
              double v81 = v53 / v80;
              float result = [*(id *)(*a3 + 8 * *(int *)(v68 + 8)) area];
            }
            while (v81 < v79 / v82);
          }
          BOOL v5 = v12 - 16 >= v11;
          BOOL v6 = v12 - 16 == v11;
          if (v12 - 16 != v11)
          {
            *(void *)unint64_t v11 = *(void *)(v12 - 16);
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 - 8);
          }
          a5 = 0;
          *(double *)(v12 - 16) = v53;
          *(_DWORD *)(v12 - 8) = v54;
        }
        uint64_t v24 = 0;
        double v25 = *(double *)v11;
        int v26 = *(_DWORD *)(v11 + 8);
        do
        {
          double v27 = *(double *)(v11 + v24 + 16);
          objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v11 + v24 + 24)), "area", v184);
          double v29 = v27 / v28;
          [*(id *)(*a3 + 8 * v26) area];
          v24 += 16;
        }
        while (v29 < v25 / v30);
        unint64_t v31 = v11 + v24;
        unint64_t v32 = v187;
        if (v24 == 16)
        {
          unint64_t v32 = v187;
          do
          {
            if (v31 >= v32) {
              break;
            }
            double v37 = *(double *)(v32 - 16);
            v32 -= 16;
            [*(id *)(*a3 + 8 * *(int *)(v32 + 8)) area];
            double v39 = v37 / v38;
            [*(id *)(*a3 + 8 * v26) area];
          }
          while (v39 >= v25 / v40);
        }
        else
        {
          do
          {
            double v33 = *(double *)(v32 - 16);
            v32 -= 16;
            [*(id *)(*a3 + 8 * *(int *)(v32 + 8)) area];
            double v35 = v33 / v34;
            [*(id *)(*a3 + 8 * v26) area];
          }
          while (v35 >= v25 / v36);
        }
        unint64_t v12 = v11 + v24;
        if (v31 < v32)
        {
          unint64_t v41 = v32;
          do
          {
            double v42 = *(double *)v12;
            *(void *)unint64_t v12 = *(void *)v41;
            *(double *)unint64_t v41 = v42;
            int v43 = *(_DWORD *)(v12 + 8);
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v41 + 8);
            *(_DWORD *)(v41 + 8) = v43;
            do
            {
              double v44 = *(double *)(v12 + 16);
              v12 += 16;
              [*(id *)(*a3 + 8 * *(int *)(v12 + 8)) area];
              double v46 = v44 / v45;
              [*(id *)(*a3 + 8 * v26) area];
            }
            while (v46 < v25 / v47);
            do
            {
              double v48 = *(double *)(v41 - 16);
              v41 -= 16;
              [*(id *)(*a3 + 8 * *(int *)(v41 + 8)) area];
              double v50 = v48 / v49;
              [*(id *)(*a3 + 8 * v26) area];
            }
            while (v50 >= v25 / v51);
          }
          while (v12 < v41);
        }
        if (v12 - 16 != v11)
        {
          *(void *)unint64_t v11 = *(void *)(v12 - 16);
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 - 8);
        }
        *(double *)(v12 - 16) = v25;
        *(_DWORD *)(v12 - 8) = v26;
        BOOL v5 = v31 >= v32;
        a2 = (double *)v187;
        if (v5) {
          break;
        }
LABEL_32:
        float result = std::__introsort<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,false>(v11, v12 - 16, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v52 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v11, v12 - 16, a3);
      float result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v12, v187, a3);
      if (result) {
        break;
      }
      if (!v52) {
        goto LABEL_32;
      }
    }
    a2 = (double *)(v12 - 16);
    if (!v52) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(a1, a2, a3, a4, a6);
  double v12 = *(double *)a5;
  [*(id *)(*a6 + 8 * *(int *)(a5 + 8)) area];
  double v13 = *(double *)a4;
  double v15 = v12 / v14;
  uint64_t result = [*(id *)(*a6 + 8 * *(int *)(a4 + 8)) area];
  if (v15 < v13 / v17)
  {
    double v18 = *(double *)a4;
    *(void *)a4 = *(void *)a5;
    *(double *)a5 = v18;
    int v19 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v19;
    double v20 = *(double *)a4;
    [*(id *)(*a6 + 8 * *(int *)(a4 + 8)) area];
    double v21 = *(double *)a3;
    double v23 = v20 / v22;
    uint64_t result = [*(id *)(*a6 + 8 * *(int *)(a3 + 8)) area];
    if (v23 < v21 / v24)
    {
      double v25 = *(double *)a3;
      *(void *)a3 = *(void *)a4;
      *(double *)a4 = v25;
      int v26 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v26;
      double v27 = *(double *)a3;
      [*(id *)(*a6 + 8 * *(int *)(a3 + 8)) area];
      double v28 = *(double *)a2;
      double v30 = v27 / v29;
      uint64_t result = [*(id *)(*a6 + 8 * *(int *)(a2 + 8)) area];
      if (v30 < v28 / v31)
      {
        double v32 = *(double *)a2;
        *(void *)a2 = *(void *)a3;
        *(double *)a3 = v32;
        int v33 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v33;
        double v34 = *(double *)a2;
        [*(id *)(*a6 + 8 * *(int *)(a2 + 8)) area];
        double v35 = *(double *)a1;
        double v37 = v34 / v36;
        uint64_t result = [*(id *)(*a6 + 8 * *(int *)(a1 + 8)) area];
        if (v37 < v35 / v38)
        {
          double v39 = *(double *)a1;
          *(void *)a1 = *(void *)a2;
          *(double *)a2 = v39;
          int v40 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v40;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  double v8 = *(double *)a2;
  float v9 = (int *)(a2 + 8);
  [*(id *)(*a4 + 8 * *(int *)(a2 + 8)) area];
  double v10 = *(double *)a1;
  unint64_t v11 = (int *)(a1 + 8);
  double v13 = v8 / v12;
  [*(id *)(*a4 + 8 * *(int *)(a1 + 8)) area];
  double v14 = *(double *)a3;
  double v16 = v10 / v15;
  [*(id *)(*a4 + 8 * *(int *)(a3 + 8)) area];
  double v17 = *(double *)a2;
  double v19 = v14 / v18;
  uint64_t result = [*(id *)(*a4 + 8 * *v9) area];
  double v22 = v17 / v21;
  if (v13 < v16)
  {
    double v23 = *(double *)a1;
    if (v19 >= v22)
    {
      *(void *)a1 = *(void *)a2;
      *(double *)a2 = v23;
      int v32 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v32;
      double v33 = *(double *)a3;
      [*(id *)(*a4 + 8 * *(int *)(a3 + 8)) area];
      double v34 = *(double *)a2;
      double v36 = v33 / v35;
      uint64_t result = [*(id *)(*a4 + 8 * *(int *)(a2 + 8)) area];
      if (v36 >= v34 / v37) {
        return result;
      }
      double v38 = *(double *)a2;
      *(void *)a2 = *(void *)a3;
      *(double *)a3 = v38;
      unint64_t v11 = v9;
    }
    else
    {
      *(void *)a1 = *(void *)a3;
      *(double *)a3 = v23;
    }
    float v9 = (int *)(a3 + 8);
    goto LABEL_10;
  }
  if (v19 < v22)
  {
    double v24 = *(double *)a2;
    *(void *)a2 = *(void *)a3;
    *(double *)a3 = v24;
    int v25 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v25;
    double v26 = *(double *)a2;
    [*(id *)(*a4 + 8 * *(int *)(a2 + 8)) area];
    double v27 = *(double *)a1;
    double v29 = v26 / v28;
    uint64_t result = [*(id *)(*a4 + 8 * *(int *)(a1 + 8)) area];
    if (v29 < v27 / v30)
    {
      double v31 = *(double *)a1;
      *(void *)a1 = *(void *)a2;
      *(double *)a2 = v31;
LABEL_10:
      int v39 = *v11;
      int *v11 = *v9;
      *float v9 = v39;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v8 = *(double *)(a2 - 16);
      [*(id *)(*a3 + 8 * *(int *)(a2 - 8)) area];
      double v9 = *(double *)a1;
      double v11 = v8 / v10;
      [*(id *)(*a3 + 8 * *(int *)(a1 + 8)) area];
      if (v11 < v9 / v12)
      {
        double v13 = *(double *)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(double *)(a2 - 16) = v13;
        int v14 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v14;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(a1, a1 + 16, a2 - 16, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,0>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      uint64_t v15 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32, a3);
      uint64_t v16 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    double v19 = *(double *)v16;
    [*(id *)(*a3 + 8 * *(int *)(v16 + 8)) area];
    double v20 = *(double *)v15;
    double v22 = v19 / v21;
    [*(id *)(*a3 + 8 * *(int *)(v15 + 8)) area];
    if (v22 < v20 / v23)
    {
      double v24 = *(double *)v16;
      int v25 = *(_DWORD *)(v16 + 8);
      uint64_t v26 = v17;
      while (1)
      {
        uint64_t v27 = a1 + v26;
        *(void *)(v27 + 48) = *(void *)(a1 + v26 + 32);
        *(_DWORD *)(v27 + 56) = *(_DWORD *)(a1 + v26 + 40);
        if (v26 == -32) {
          break;
        }
        [*(id *)(*a3 + 8 * v25) area];
        double v28 = *(double *)(v27 + 16);
        double v30 = v24 / v29;
        [*(id *)(*a3 + 8 * *(int *)(v27 + 24)) area];
        v26 -= 16;
        if (v30 >= v28 / v31)
        {
          uint64_t v32 = a1 + v26 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v32 = a1;
LABEL_12:
      *(double *)uint64_t v32 = v24;
      *(_DWORD *)(v32 + 8) = v25;
      if (++v18 == 8) {
        return v16 + 16 == a2;
      }
    }
    uint64_t v15 = v16;
    v17 += 16;
    v16 += 16;
    if (v16 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(a1, a2, a3, a5);
  double v10 = *(double *)a4;
  [*(id *)(*a5 + 8 * *(int *)(a4 + 8)) area];
  double v11 = *(double *)a3;
  double v13 = v10 / v12;
  uint64_t result = [*(id *)(*a5 + 8 * *(int *)(a3 + 8)) area];
  if (v13 < v11 / v15)
  {
    double v16 = *(double *)a3;
    *(void *)a3 = *(void *)a4;
    *(double *)a4 = v16;
    int v17 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v17;
    double v18 = *(double *)a3;
    [*(id *)(*a5 + 8 * *(int *)(a3 + 8)) area];
    double v19 = *(double *)a2;
    double v21 = v18 / v20;
    uint64_t result = [*(id *)(*a5 + 8 * *(int *)(a2 + 8)) area];
    if (v21 < v19 / v22)
    {
      double v23 = *(double *)a2;
      *(void *)a2 = *(void *)a3;
      *(double *)a3 = v23;
      int v24 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v24;
      double v25 = *(double *)a2;
      [*(id *)(*a5 + 8 * *(int *)(a2 + 8)) area];
      double v26 = *(double *)a1;
      double v28 = v25 / v27;
      uint64_t result = [*(id *)(*a5 + 8 * *(int *)(a1 + 8)) area];
      if (v28 < v26 / v29)
      {
        double v30 = *(double *)a1;
        *(void *)a1 = *(void *)a2;
        *(double *)a2 = v30;
        int v31 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v31;
      }
    }
  }
  return result;
}

uint64_t std::__split_buffer<CRNormalizedQuad * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::pair<double,int>>::__throw_length_error[abi:ne180100]()
{
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DD888724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__split_buffer<CRDetectorUtils::CRTextDetectorQuad>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 144;
    uint64_t v4 = *(void **)(v2 - 80);
    if (v4)
    {
      *(void *)(v2 - 72) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 144;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::list<int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::list<int>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (void *)a1[1];
    size_t v5 = &v4[3 * a2];
    do
    {
      *uint64_t v4 = v4;
      v4[1] = v4;
      v4[2] = 0;
      v4 += 3;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1DD88880C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::list<int>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::pair<double,int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::list<int>>::__vdeallocate(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        std::__list_imp<unsigned long>::clear(v3);
      }
      while (v3 != v1);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void cv::SmartPtr::release(cv::SmartPtr *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 2);
  if (v2)
  {
    if ((*v2)-- == 1)
    {
      if (*((void *)this + 1))
      {
        free(*((void **)this + 1));
        *((void *)this + 1) = 0;
        uint64_t v2 = (_DWORD *)*((void *)this + 2);
      }
      free(v2);
      *((void *)this + 2) = 0;
    }
  }
}

void cv::SmartPtr::~SmartPtr(cv::SmartPtr *this)
{
  *(void *)this = &unk_1F38ED520;
  cv::SmartPtr::release(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F38ED520;
  cv::SmartPtr::release(this);
  JUMPOUT(0x1E01BF140);
}

void cv::SmartPtr::operator=(cv::SmartPtr *this@<X0>, cv::SmartPtr *a2@<X1>, void *a3@<X8>)
{
  if (this == a2)
  {
    uint64_t v6 = *((void *)this + 1);
    float v7 = (_DWORD *)*((void *)this + 2);
  }
  else
  {
    cv::SmartPtr::release(this);
    uint64_t v6 = *((void *)a2 + 1);
    float v7 = (_DWORD *)*((void *)a2 + 2);
    *((void *)this + 1) = v6;
    *((void *)this + 2) = v7;
    if (v7) {
      ++*v7;
    }
  }
  *a3 = &unk_1F38ED520;
  a3[1] = v6;
  a3[2] = v7;
  if (v7) {
    ++*v7;
  }
}

void correctHistogram(unsigned __int8 **a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (unsigned char *)*a2;
  uint64_t v4 = (void)a1[1] * (void)a1[2];
  bzero(v17, 0x400uLL);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = v4;
    uint64_t v6 = v2;
    do
    {
      int v7 = *v6++;
      ++v17[v7];
      --v5;
    }
    while (v5);
  }
  int v8 = 257;
  double v9 = v17;
  do
  {
    int v10 = *v9++;
    --v8;
  }
  while (!v10);
  uint64_t v11 = 255;
  int v12 = v8;
  do
  {
    int v13 = v17[v11];
    --v12;
    --v11;
  }
  while (!v13);
  if ((int)v4 >= 1)
  {
    float v14 = 255.0 / (float)v12;
    uint64_t v15 = v4;
    do
    {
      int v16 = *v2++;
      *v3++ = (int)(float)(v14 * (float)(v8 + v16 - 256));
      --v15;
    }
    while (v15);
  }
}

double houghTransformGlobalAngle(uint64_t a1, unint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8 = 0;
  v100[361] = *MEMORY[0x1E4F143B8];
  int32x4_t v9 = (int32x4_t)xmmword_1DD8CF1C0;
  float64x2_t v86 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
  float64x2_t v87 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  do
  {
    int32x4_t v92 = v9;
    v10.i64[0] = v9.i32[0];
    v10.i64[1] = v9.i32[1];
    float64x2_t v11 = vcvtq_f64_s64(v10);
    v10.i64[0] = v92.i32[2];
    v10.i64[1] = v92.i32[3];
    float64x2_t v91 = vdivq_f64(vmulq_f64(v11, v87), v86);
    float64x2_t v89 = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v10), v87), v86);
    __double2 v12 = __sincos_stret(v89.f64[1]);
    __double2 v14 = __sincos_stret(v89.f64[0]);
    v13.f64[0] = v14.__cosval;
    v13.f64[1] = v12.__cosval;
    float64x2_t v88 = v13;
    __double2 v15 = __sincos_stret(v91.f64[1]);
    __double2 v18 = __sincos_stret(v91.f64[0]);
    v17.f64[0] = v18.__cosval;
    v16.f64[0] = v18.__sinval;
    v17.f64[1] = v15.__cosval;
    *(float32x4_t *)&v100[v8 + 1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v17), v88);
    v19.f64[0] = v14.__sinval;
    v19.f64[1] = v12.__sinval;
    v16.f64[1] = v15.__sinval;
    *(float32x4_t *)&v100[v8 + 181] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v19);
    *(void *)&v17.f64[0] = 0x400000004;
    *(void *)&v17.f64[1] = 0x400000004;
    int32x4_t v9 = vaddq_s32(v92, (int32x4_t)v17);
    v8 += 2;
  }
  while (v8 != 180);
  int v20 = (int)sqrt((double)(a2 * a2 + a3 * a3));
  __p = 0;
  double v99 = 0;
  v100[0] = 0;
  float v95 = 0;
  double v96 = 0;
  double v97 = 0;
  if (v20 >= 1)
  {
    std::vector<int>::value_type __x = 0;
    std::vector<int>::vector(&v94, 360 * v20, &__x);
    if (a3 * a2)
    {
      unint64_t v21 = 0;
      int v22 = 0;
      do
      {
        if (*(unsigned char *)(a1 + v21))
        {
          uint64_t v23 = 0;
          begiuint64_t n = v94.__begin_;
          do
          {
            int v25 = (int)(float)((float)(*((float *)&v100[181] + v23) * (float)(v21 / a2))
                             + (float)((float)(v21 % a2) * *((float *)&v100[1] + v23)));
            if (v25 >= 1 && v25 < v20)
            {
              int v27 = v23 + 360 * v25;
              int v28 = begin[v27];
              begin[v27] = v28 + 1;
              if (v28 + 1 > v22) {
                int v22 = v28 + 1;
              }
            }
            ++v23;
          }
          while (v23 != 360);
        }
        ++v21;
      }
      while (v21 != a3 * a2);
    }
    else
    {
      int v22 = 0;
    }
    if (v20 >= 10)
    {
      unint64_t v29 = 0;
      uint64_t v90 = (v20 - 9);
      double v30 = (double)v22 * 0.5;
      unint64_t v31 = 8;
      uint64_t v32 = 4;
      do
      {
        for (unint64_t i = 0; i != 360; ++i)
        {
          if ((int)i <= 4) {
            uint64_t v34 = 4;
          }
          else {
            uint64_t v34 = i;
          }
          uint64_t v35 = v94.__begin_[360 * v32 + i];
          if (v30 < (double)(int)v35)
          {
            uint64_t v36 = v34 - 4;
            unsigned int v37 = v34 - 4;
            if (i >= 0x163) {
              int v38 = 355;
            }
            else {
              int v38 = i;
            }
            unint64_t v39 = (v38 + 5);
            char v40 = 1;
            unint64_t v41 = v29;
            do
            {
              if (v41 <= v31) {
                unint64_t v42 = v31;
              }
              else {
                unint64_t v42 = v41;
              }
              int v43 = &v94.__begin_[360 * v41];
              while (1)
              {
                uint64_t v44 = v36;
                if (v37 < v39) {
                  break;
                }
LABEL_37:
                v43 += 360;
                if (v41++ == v42)
                {
                  if (v40)
                  {
                    double v47 = v99;
                    if ((unint64_t)v99 >= v100[0])
                    {
                      double v49 = (char *)__p;
                      uint64_t v50 = (v99 - (unsigned char *)__p) >> 3;
                      unint64_t v51 = v50 + 1;
                      if ((unint64_t)(v50 + 1) >> 61) {
                        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v52 = v100[0] - (void)__p;
                      if ((uint64_t)(v100[0] - (void)__p) >> 2 > v51) {
                        unint64_t v51 = v52 >> 2;
                      }
                      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v53 = v51;
                      }
                      if (v53)
                      {
                        int v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v100, v53);
                        double v49 = (char *)__p;
                        double v47 = v99;
                      }
                      else
                      {
                        int v54 = 0;
                      }
                      double v55 = &v54[8 * v50];
                      *(void *)double v55 = v35;
                      double v48 = v55 + 8;
                      while (v47 != v49)
                      {
                        uint64_t v56 = *((void *)v47 - 1);
                        v47 -= 8;
                        *((void *)v55 - 1) = v56;
                        v55 -= 8;
                      }
                      __p = v55;
                      double v99 = v48;
                      v100[0] = &v54[8 * v53];
                      if (v49) {
                        operator delete(v49);
                      }
                    }
                    else
                    {
                      *(void *)double v99 = v35;
                      double v48 = v47 + 8;
                    }
                    double v99 = v48;
                    int v57 = i - 180;
                    if (i < 0xB5) {
                      int v57 = i;
                    }
                    double v58 = (float)v57;
                    double v59 = v96;
                    if (v96 >= v97)
                    {
                      double v61 = (double *)v95;
                      uint64_t v62 = ((char *)v96 - (unsigned char *)v95) >> 3;
                      unint64_t v63 = v62 + 1;
                      if ((unint64_t)(v62 + 1) >> 61) {
                        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v64 = (char *)v97 - (unsigned char *)v95;
                      if (((char *)v97 - (unsigned char *)v95) >> 2 > v63) {
                        unint64_t v63 = v64 >> 2;
                      }
                      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v65 = v63;
                      }
                      if (v65)
                      {
                        double v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v97, v65);
                        double v61 = (double *)v95;
                        double v59 = v96;
                      }
                      else
                      {
                        double v66 = 0;
                      }
                      double v67 = (double *)&v66[8 * v62];
                      *double v67 = v58;
                      double v60 = v67 + 1;
                      while (v59 != v61)
                      {
                        uint64_t v68 = *((void *)v59-- - 1);
                        *((void *)v67-- - 1) = v68;
                      }
                      float v95 = v67;
                      double v96 = v60;
                      double v97 = (double *)&v66[8 * v65];
                      if (v61) {
                        operator delete(v61);
                      }
                    }
                    else
                    {
                      *double v96 = v58;
                      double v60 = v59 + 1;
                    }
                    double v96 = v60;
                  }
                  goto LABEL_79;
                }
              }
              while (v43[v44] <= (int)v35)
              {
                if (++v44 >= v39) {
                  goto LABEL_37;
                }
              }
              char v40 = 0;
            }
            while (v41++ < v32 + 4);
          }
LABEL_79:
          ;
        }
        ++v32;
        ++v29;
        ++v31;
      }
      while (v29 != v90);
    }
    if (v94.__begin_)
    {
      v94.__end_ = v94.__begin_;
      operator delete(v94.__begin_);
    }
  }
  std::vector<unsigned long>::vector(&v94, 0xB4uLL);
  double v69 = (double *)v95;
  if (v96 == v95)
  {
    uint64_t v83 = 0;
    float v81 = 0.0;
    float v82 = 0.0;
  }
  else
  {
    unint64_t v70 = 0;
    unint64_t v71 = ((char *)v96 - (unsigned char *)v95) >> 3;
    double v72 = (uint64_t *)__p;
    std::vector<int>::pointer v73 = v94.__begin_;
    if (v71 <= 1) {
      unint64_t v71 = 1;
    }
    int v74 = (double *)v95;
    unint64_t v75 = v71;
    do
    {
      double v76 = *v74++;
      *(void *)&v73[2 * (unint64_t)v76] += *v72;
      uint64_t v77 = *v72++;
      v70 += v77;
      --v75;
    }
    while (v75);
    int v78 = 0;
    unint64_t v79 = 0;
    do
    {
      double v80 = v69[v75];
      if (v79 <= *(void *)&v73[2 * (unint64_t)v80])
      {
        unint64_t v79 = *(void *)&v73[2 * (unint64_t)v80];
        int v78 = v75;
      }
      ++v75;
    }
    while (v71 != v75);
    float v81 = (float)v70;
    float v82 = (float)v79;
    uint64_t v83 = v78;
  }
  double v84 = -1000.0;
  if (v99 != __p && (float)(v81 * a4) <= v82) {
    double v84 = v69[v83];
  }
  if (v94.__begin_)
  {
    v94.__end_ = v94.__begin_;
    operator delete(v94.__begin_);
  }
  if (v95)
  {
    double v96 = (double *)v95;
    operator delete(v95);
  }
  if (__p)
  {
    double v99 = (char *)__p;
    operator delete(__p);
  }
  return v84;
}

void sub_1DD889E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t otsuThreshold(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  bzero(v22, 0x400uLL);
  uint64_t v6 = a3 * a2;
  if (a3 * a2)
  {
    uint64_t v7 = a3 * a2;
    do
    {
      int v8 = *a1++;
      ++v22[v8];
      --v7;
    }
    while (v7);
  }
  uint64_t v9 = 0;
  int32x4_t v10 = (int32x4_t)xmmword_1DD8CF1C0;
  float v11 = 0.0;
  v12.i64[0] = 0x400000004;
  v12.i64[1] = 0x400000004;
  do
  {
    float32x4_t v13 = vcvtq_f32_s32(vmulq_s32(*(int32x4_t *)&v22[v9], v10));
    float v11 = (float)((float)((float)(v11 + v13.f32[0]) + v13.f32[1]) + v13.f32[2]) + v13.f32[3];
    int32x4_t v10 = vaddq_s32(v10, v12);
    v9 += 4;
  }
  while (v9 != 256);
  uint64_t v14 = 0;
  uint64_t result = 0;
  int v16 = 0;
  float v17 = 0.0;
  float v18 = 0.0;
  do
  {
    int v19 = v22[v14];
    v16 += v19;
    if (v16)
    {
      if (v6 == v16) {
        return result;
      }
      unint64_t v20 = v6 - v16;
      float v18 = v18 + (float)(v19 * v14);
      float v21 = (float)(v18 / (float)v16) - (float)((float)(v11 - v18) / (float)v20);
      if ((float)(v21 * (float)((float)((float)v16 * (float)v20) * v21)) <= v17)
      {
        uint64_t result = result;
      }
      else
      {
        float v17 = v21 * (float)((float)((float)v16 * (float)v20) * v21);
        uint64_t result = v14;
      }
    }
    ++v14;
  }
  while (v14 != 256);
  return result;
}

unint64_t generateIntegralImage(unint64_t result, void *a2)
{
  uint64_t v2 = *(unsigned __int8 **)(result + 16);
  int v3 = *(_DWORD *)(result + 8);
  uint64_t v4 = *(void *)result;
  uint64_t v5 = (_DWORD *)*a2;
  int v6 = **(unsigned __int8 **)result;
  *(_DWORD *)*a2 = v6;
  if ((int)v2 >= 2)
  {
    uint64_t v7 = v2 - 1;
    int v8 = v5 + 1;
    uint64_t v9 = (unsigned __int8 *)(v4 + 1);
    do
    {
      int v10 = *v9++;
      v6 += v10;
      *v8++ = v6;
      --v7;
    }
    while (v7);
  }
  if (v3 >= 2)
  {
    int v11 = 1;
    int v12 = (int)v2;
    do
    {
      if ((int)v2 >= 1)
      {
        int v13 = 0;
        uint64_t v14 = &v5[v12];
        __double2 v15 = (unsigned __int8 *)(v4 + v12);
        v12 += (int)v2;
        LODWORD(result) = v2;
        do
        {
          int v16 = *v15++;
          v13 += v16;
          *uint64_t v14 = v13 + v14[-(int)v2];
          ++v14;
          uint64_t result = (result - 1);
        }
        while (result);
      }
      ++v11;
    }
    while (v11 != v3);
  }
  return result;
}

int32x4_t *generateIntegralImage_NEON(int32x4_t *result, const vImage_Buffer *a2)
{
  uint64_t v2 = result[1].i64[0];
  int v3 = result->i32[2];
  uint64_t v4 = result->i64[0];
  data = (char *)a2->data;
  int v6 = *(unsigned __int8 *)result->i64[0];
  *(_DWORD *)a2->data = v6;
  if ((int)v2 >= 2)
  {
    uint64_t v7 = v2 - 1;
    int v8 = data + 4;
    uint64_t v9 = (unsigned __int8 *)(v4 + 1);
    do
    {
      int v10 = *v9++;
      v6 += v10;
      *v8++ = v6;
      --v7;
    }
    while (v7);
  }
  if (v3 >= 2)
  {
    int v11 = data + 16;
    int v12 = 1;
    int v13 = v2;
    do
    {
      if ((int)v2 >= 1)
      {
        uint64_t v14 = 0;
        int32x4_t v15 = 0uLL;
        int v16 = (int32x4_t *)&v11[4 * v13];
        do
        {
          int8x8_t v17 = *(int8x8_t *)(v4 + v13 + v14);
          int8x8_t v18 = vext_s8(*(int8x8_t *)v15.i8, v17, 7uLL);
          v18.i8[0] = 0;
          int8x8_t v19 = vext_s8(*(int8x8_t *)v15.i8, v18, 7uLL);
          v19.i8[0] = 0;
          int8x8_t v20 = vext_s8(*(int8x8_t *)v15.i8, v19, 7uLL);
          v20.i8[0] = 0;
          int8x8_t v21 = vext_s8(*(int8x8_t *)v15.i8, v20, 7uLL);
          v21.i8[0] = 0;
          int8x8_t v22 = vext_s8(*(int8x8_t *)v15.i8, v21, 7uLL);
          v22.i8[0] = 0;
          int8x8_t v23 = vext_s8(*(int8x8_t *)v15.i8, v22, 7uLL);
          v23.i8[0] = 0;
          uint8x8_t v24 = (uint8x8_t)vext_s8(*(int8x8_t *)v15.i8, v23, 7uLL);
          v24.i8[0] = 0;
          uint16x8_t v25 = vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v18, (uint8x8_t)v17), (uint8x8_t)v19), (uint8x8_t)v20), (uint8x8_t)v21), (uint8x8_t)v22), (uint8x8_t)v23), v24);
          uint64_t result = (int32x4_t *)((char *)v16 - 4 * (int)v2);
          int32x4_t v26 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v25);
          v16[-1] = (int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32(result[-1], v15), *(uint16x4_t *)v25.i8);
          int32x4_t *v16 = vaddq_s32(v26, *result);
          v16 += 2;
          int32x4_t v15 = vdupq_laneq_s32(v26, 3);
          v14 += 8;
        }
        while ((int)v14 < (int)v2);
        v13 += v14;
      }
      ++v12;
    }
    while (v12 != v3);
  }
  return result;
}

void adaptiveThresholdIntegralImage(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) * v4)
  {
    uint64_t v9 = malloc_type_malloc(4 * v4 * *(void *)(a1 + 24), 0x100004052888210uLL);
    vImagePixelCount v10 = *(void *)(a1 + 8);
    vImagePixelCount v11 = *(void *)(a1 + 16);
    v19.data = v9;
    v19.height = v10;
    size_t v12 = 4 * *(void *)(a1 + 24);
    v19.width = v11;
    v19.rowBytes = v12;
    long long v13 = *(_OWORD *)(a1 + 16);
    if ((v11 & 7) != 0)
    {
      v17[0] = *(_OWORD *)a1;
      v17[1] = v13;
      generateIntegralImage((unint64_t)v17, &v19);
    }
    else
    {
      *(_OWORD *)&v18.data = *(_OWORD *)a1;
      *(_OWORD *)&v18.width = v13;
      generateIntegralImage_NEON((int32x4_t *)&v18, &v19);
    }
    long long v14 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v14;
    vImage_Buffer v15 = v19;
    adaptiveThresholdIntegralImageWithBuffer((uint64_t)v16, a2, (uint64_t *)&v15, a3, a4, *(int32x4_t *)&v19.data, *(int32x4_t *)&v19.width);
    free(v9);
  }
}

uint64_t adaptiveThresholdIntegralImageWithBuffer(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int a5, int32x4_t a6, int32x4_t a7)
{
  unint64_t v7 = *(void *)(result + 8);
  unint64_t v8 = *(void *)(result + 16);
  if (v8) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    int v11 = a4;
    uint64_t v12 = result;
    uint64_t v13 = *(void *)result;
    uint64_t v14 = *a2;
    uint64_t v15 = *a3;
    v89[0] = MEMORY[0x1E4F143A8];
    a6.i32[1] = 0;
    v89[1] = 3221225472;
    uint64_t v90 = __adaptiveThresholdIntegralImageWithBuffer_block_invoke;
    float64x2_t v91 = &__block_descriptor_80_e11_v16__0i8i12l;
    unint64_t v92 = v8;
    unint64_t v93 = v7;
    uint64_t v68 = v15;
    uint64_t v70 = v14;
    uint64_t v94 = v15;
    uint64_t v95 = v13;
    uint64_t v71 = v13;
    int v97 = a4;
    int v98 = a5;
    uint64_t v96 = v14;
    LOBYTE(v16) = v8;
    if (a4 >= 1)
    {
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = 0;
        do
          uint64_t result = v90((uint64_t)v89, v18++, v17);
        while (v8 != v18);
        uint64_t v17 = (v17 + 1);
        int v11 = a4;
      }
      while (v17 != a4);
      uint64_t v16 = *(void *)(v12 + 16);
    }
    int v19 = 4 * v11 * v11;
    BOOL v9 = (v16 & 7) == 0;
    unint64_t v66 = v7;
    unint64_t v20 = v7 - v11;
    if (v9)
    {
      unint64_t v87 = v7 - v11;
      if (v20 > v11)
      {
        a6.i32[0] = 0;
        uint64_t v33 = v11;
        int v34 = ((_BYTE)v8 - (_BYTE)v11) & 7;
        int v35 = v34 + v11;
        a7.i32[0] = 4 * v11 * v11;
        uint16x4_t v75 = *(uint16x4_t *)a7.i8;
        a7.i32[0] = a5;
        int8x16_t v36 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a7, a6), 0);
        if (a5 > 0) {
          unsigned int v37 = a5;
        }
        else {
          unsigned int v37 = -a5;
        }
        int v38 = (int32x4_t *)(v68 + 4 * (((_BYTE)v8 - (_BYTE)v11) & 7));
        uint64_t v39 = v68 + 4 * v8 * 2 * v11;
        char v40 = (int32x4_t *)(v39 + 4 * (((_BYTE)v8 - (_BYTE)v11) & 7));
        int16x8_t v41 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v37));
        uint16x8_t v73 = (uint16x8_t)vbslq_s8(v36, (int8x16_t)v41, (int8x16_t)vnegq_s16(v41));
        unint64_t v42 = (int32x4_t *)(v68 + 4 * (v35 + v11));
        int v43 = (int32x4_t *)(v39 + 4 * (v35 + v11));
        int v44 = v35 + v8 * v11;
        unint64_t v81 = v8 - v35;
        unint64_t v83 = v35;
        int v85 = v34 + v11;
        uint64_t v77 = 2 * v35;
        unint64_t v79 = (int)v8 - v35;
        uint64_t v69 = (v8 - v35);
        do
        {
          if (v85 >= 1)
          {
            uint64_t v45 = 0;
            do
            {
              uint64_t result = v90((uint64_t)v89, v45, v33);
              uint64_t v45 = (v45 + 1);
            }
            while (v85 != v45);
          }
          unint64_t v46 = v83;
          if (v81 > v83)
          {
            double v47 = (int8x8_t *)(v70 + v44);
            double v48 = (uint8x8_t *)(v71 + v44);
            do
            {
              uint8x8_t v49 = *v48++;
              uint16x8_t v50 = vaddw_u8(v73, v49);
              int32x4_t v51 = *v42;
              int32x4_t v52 = v42[1];
              v42 += 2;
              int32x4_t v53 = *v40;
              int32x4_t v54 = v40[1];
              v40 += 2;
              int32x4_t v55 = vaddq_s32(v51, v53);
              int32x4_t v56 = *v43;
              int32x4_t v57 = v43[1];
              v43 += 2;
              int32x4_t v58 = vsubq_s32(v56, v55);
              int32x4_t v59 = *v38;
              int32x4_t v60 = v38[1];
              v38 += 2;
              *v47++ = vmovn_s16((int16x8_t)vuzp1q_s8((int8x16_t)vcgtq_u32(vmull_lane_u16(*(uint16x4_t *)v50.i8, v75, 0), (uint32x4_t)vaddq_s32(v58, v59)), (int8x16_t)vcgtq_u32(vmull_high_lane_u16(v50, v75, 0), (uint32x4_t)vaddq_s32(vsubq_s32(v57, vaddq_s32(v52, v54)), v60))));
              v46 += 8;
              v44 += 8;
            }
            while (v81 > v46);
          }
          if (v8 > v79)
          {
            uint64_t v61 = v8 - v79;
            uint64_t v62 = v69;
            do
            {
              uint64_t result = v90((uint64_t)v89, v62, v33);
              uint64_t v62 = (v62 + 1);
              --v61;
            }
            while (v61);
          }
          int v43 = (int32x4_t *)((char *)v43 + 4 * v77);
          unint64_t v42 = (int32x4_t *)((char *)v42 + 4 * v77);
          char v40 = (int32x4_t *)((char *)v40 + 4 * v77);
          ++v33;
          v44 += v77;
          int v38 = (int32x4_t *)((char *)v38 + 4 * v77);
          int v11 = a4;
        }
        while (v33 != v87);
      }
    }
    else
    {
      unint64_t v78 = v7 - v11;
      if (v20 > v11)
      {
        int v21 = 0;
        int v22 = 2 * v11;
        uint64_t v23 = v11;
        int v24 = v11 + v11 * v8;
        unint64_t v74 = (int)v8 - v11;
        int v25 = 2 * v11 * v8;
        unint64_t v72 = v8 - v11;
        unint64_t v26 = v8 - 2 * v11;
        uint64_t v67 = (v8 - v11);
        unint64_t v76 = v11;
        int v82 = 2 * v11;
        int v80 = v25;
        do
        {
          int v84 = v24;
          int v86 = v21;
          if (v11 >= 1)
          {
            uint64_t v27 = 0;
            do
            {
              uint64_t result = v90((uint64_t)v89, v27, v23);
              uint64_t v27 = (v27 + 1);
            }
            while (v11 != v27);
          }
          int v28 = v80 + v82;
          if (v72 <= v76)
          {
            v80 += v82;
          }
          else
          {
            uint64_t v29 = 0;
            do
            {
              uint64_t result = *(unsigned int *)(v68 + 4 * v86 + 4 * v29);
              if ((*(unsigned __int8 *)(v71 + v84 + v29) + a5) * v19 < *(_DWORD *)(v68 + 4 * v28 + 4 * v29)
                                                                      - (*(_DWORD *)(v68 + 4 * v22 + 4 * v29)
                                                                       + *(_DWORD *)(v68 + 4 * v25 + 4 * v29))
                                                                      + (int)result)
                char v30 = 0;
              else {
                char v30 = -1;
              }
              *(unsigned char *)(v70 + v84 + v29++) = v30;
            }
            while (v26 != v29);
            v86 += v29;
            v25 += v29;
            v22 += v29;
            int v80 = v28 + v29;
            v84 += v29;
          }
          if (v8 > v74)
          {
            uint64_t v31 = v8 - v74;
            uint64_t v32 = v67;
            do
            {
              uint64_t result = v90((uint64_t)v89, v32, v23);
              uint64_t v32 = (v32 + 1);
              --v31;
            }
            while (v31);
          }
          v22 += v82;
          v25 += v82;
          int v21 = v86 + v82;
          ++v23;
          int v24 = v84 + v82;
          int v11 = a4;
        }
        while (v23 != v78);
      }
    }
    if (v66 > (int)v66 - v11)
    {
      unint64_t v63 = (int)v66 - v11;
      if (v8 <= 1) {
        uint64_t v64 = 1;
      }
      else {
        uint64_t v64 = v8;
      }
      do
      {
        for (uint64_t i = 0; i != v64; ++i)
          uint64_t result = v90((uint64_t)v89, i, v63);
        ++v63;
      }
      while (v66 > v63);
    }
  }
  return result;
}

void adaptiveThresholdIntegralImageWithFiltering(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12 = malloc_type_calloc(*(void *)(a1 + 24) * *(void *)(a1 + 8), 4uLL, 0x100004052888210uLL);
  vImagePixelCount v13 = *(void *)(a1 + 8);
  vImagePixelCount v14 = *(void *)(a1 + 16);
  v32.data = v12;
  v32.height = v13;
  size_t v15 = 4 * *(void *)(a1 + 24);
  v32.width = v14;
  v32.rowBytes = v15;
  long long v16 = *(_OWORD *)(a1 + 16);
  if ((v14 & 7) != 0)
  {
    v30[0] = *(_OWORD *)a1;
    v30[1] = v16;
    generateIntegralImage((unint64_t)v30, &v32);
  }
  else
  {
    *(_OWORD *)&v31.data = *(_OWORD *)a1;
    *(_OWORD *)&v31.width = v16;
    generateIntegralImage_NEON((int32x4_t *)&v31, &v32);
  }
  long long v17 = *(_OWORD *)(a1 + 16);
  v29[0] = *(_OWORD *)a1;
  v29[1] = v17;
  vImage_Buffer v28 = v32;
  adaptiveThresholdIntegralImageWithBuffer((uint64_t)v29, (uint64_t *)a2, (uint64_t *)&v28, a3, a4, *(int32x4_t *)&v32.data, *(int32x4_t *)&v32.width);
  if (a5)
  {
    long long v18 = *(_OWORD *)(a2 + 16);
    v27[0] = *(_OWORD *)a2;
    v27[1] = v18;
    generateIntegralImage((unint64_t)v27, &v32);
    uint64_t v19 = *(void *)(a2 + 8);
    if (v19 - a5 > (unint64_t)a5)
    {
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)(a2 + 16);
      uint64_t v22 = *(void *)a2 + a5;
      uint64_t v23 = 2 * a5;
      unint64_t v24 = a5;
      do
      {
        if (v21 - a5 > (unint64_t)a5)
        {
          uint64_t v25 = 0;
          do
          {
            uint64_t v26 = v22 + v24 * v21;
            if (*(unsigned char *)(v26 + v25)
              && (*((_DWORD *)v12 + 2 * a5 + v25 + v23 * v21)
                - (*((_DWORD *)v12 + 2 * a5 + v25 + v20 * v21)
                 + *((_DWORD *)v12 + v25 + v23 * v21))
                + *((_DWORD *)v12 + v25 + v20 * v21))
               / 255 < a6)
            {
              *(unsigned char *)(v26 + v25) = 0;
              uint64_t v21 = *(void *)(a2 + 16);
            }
            ++v25;
          }
          while (v21 - a5 > (unint64_t)(a5 + v25));
          uint64_t v19 = *(void *)(a2 + 8);
        }
        ++v24;
        ++v20;
        ++v23;
      }
      while (v19 - a5 > v24);
    }
  }
  free(v12);
}

uint64_t __adaptiveThresholdIntegralImageWithBuffer_block_invoke(uint64_t result, int a2, int a3)
{
  unint64_t v3 = *(void *)(result + 32);
  unint64_t v4 = *(void *)(result + 40);
  unint64_t v5 = v3 * a3 + a2;
  int v6 = *(_DWORD *)(result + 72);
  int v7 = a2 - v6;
  int v8 = v6 + a2;
  int v9 = a3 - v6;
  int v10 = v6 + a3;
  unsigned int v11 = v7 & ~(v7 >> 31);
  if (v3 <= v8) {
    int v8 = v3 - 1;
  }
  uint64_t v12 = v9 & ~(v9 >> 31);
  if (v4 <= v10) {
    int v13 = v4 - 1;
  }
  else {
    int v13 = v10;
  }
  int v14 = (v8 - v11) * (v13 - v12);
  unint64_t v15 = v3 * v13;
  unint64_t v16 = v3 * v12;
  uint64_t v17 = *(void *)(result + 48);
  if (v14 * (*(_DWORD *)(result + 76) + *(unsigned __int8 *)(*(void *)(result + 56) + v5)) > *(_DWORD *)(v17 + 4 * v15 + 4 * v8)
                                                                                              - *(_DWORD *)(v17 + 4 * v15 + 4 * v11)
                                                                                              - *(_DWORD *)(v17 + 4 * v16 + 4 * v8)
                                                                                              + *(_DWORD *)(v17 + 4 * v16 + 4 * v11))
    *(unsigned char *)(*(void *)(result + 64) + v5) = -1;
  return result;
}

float find_homography(uint64_t a1)
{
  uint64_t v1 = (float64x2_t *)MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v6 = (double *)(v5 + 8);
  do
  {
    int v7 = &v15[v4];
    *(_OWORD *)int v7 = 0uLL;
    *((void *)v7 + 2) = 0;
    float64x2_t v8 = *v1++;
    *(float64x2_t *)(v7 + 24) = vnegq_f64(v8);
    *((void *)v7 + 5) = 0xBFF0000000000000;
    double v9 = *v6;
    *((float64x2_t *)v7 + 3) = vmulq_n_f64(v8, *v6);
    *((double *)v7 + 8) = v9;
    *(float64x2_t *)(v7 + 72) = v8;
    *(_OWORD *)(v7 + 88) = xmmword_1DD8CE3C0;
    *(_OWORD *)(v7 + 104) = 0uLL;
    double v10 = -*(v6 - 1);
    *(float64x2_t *)(v7 + 120) = vmulq_n_f64(v8, v10);
    *((double *)v7 + 17) = v10;
    v4 += 144;
    v6 += 2;
  }
  while (v4 != 576);
  dgeqrf_NEWLAPACK();
  dorgqr_NEWLAPACK();
  uint64_t v11 = 0;
  double v12 = 1.0 / v16;
  do
  {
    float v13 = v12 * *(double *)&v15[8 * v11 + 576];
    *(float *)(v3 + 4 * v11++) = v13;
  }
  while (v11 != 9);
  return *(float *)&v12;
}

uint64_t writeCGImageToPNG(CGImage *a1, void *a2)
{
  return writeCGImageWithMetadata(a1, a2, 0);
}

uint64_t writeCGImageWithMetadata(CGImage *a1, void *a2, const __CFDictionary *a3)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  if ([a2 isAbsolutePath])
  {
    CFURLRef v6 = (const __CFURL *)[MEMORY[0x1E4F1CB10] fileURLWithPath:a2];
  }
  else
  {
    uint64_t v14 = 0;
    CFURLRef v6 = (const __CFURL *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 9, 1, 0, 1, &v14), "URLByAppendingPathComponent:", @"CRImages"), "URLByAppendingPathComponent:", a2);
  }
  CFURLRef v7 = v6;
  float64x2_t v8 = (void *)[(__CFURL *)v6 URLByDeletingLastPathComponent];
  uint64_t v14 = 0;
  if (([v8 checkResourceIsReachableAndReturnError:&v14] & 1) == 0)
  {
    uint64_t v15 = *MEMORY[0x1E4F28330];
    v16[0] = [NSNumber numberWithInt:493];
    uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:&v15 count:1];
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v8, 1, v9, &v14);
  }
  double v10 = objc_msgSend((id)objc_msgSend(a2, "pathExtension"), "uppercaseString");
  if (([v10 isEqualToString:@"JPG"] & 1) != 0
    || [v10 isEqualToString:@"JPEG"])
  {
    uint64_t v11 = (void *)*MEMORY[0x1E4F44410];
  }
  else if ([v10 isEqualToString:@"PNG"])
  {
    uint64_t v11 = (void *)*MEMORY[0x1E4F44460];
  }
  else
  {
    uint64_t v11 = (void *)*MEMORY[0x1E4F444E0];
  }
  double v12 = CGImageDestinationCreateWithURL(v7, (CFStringRef)[v11 identifier], 1uLL, 0);
  CGImageDestinationAddImage(v12, a1, a3);
  CGImageDestinationFinalize(v12);
  CFRelease(v12);
  return -[__CFDictionary writeToFile:atomically:](a3, "writeToFile:atomically:", objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)-[__CFURL path](v7, "path"), "stringByDeletingPathExtension"), "stringByAppendingString:", @"-meta"), "stringByAppendingPathExtension:", @"plist"), 1);
}

void sub_1DD88ADF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    NSLog(&cfstr_Exception.isa);
    objc_end_catch();
    JUMPOUT(0x1DD88ADBCLL);
  }
  _Unwind_Resume(exception_object);
}

void writeCGImage(CGImage *a1, void *a2)
{
  if (a1)
  {
    CFURLRef v3 = (const __CFURL *)objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:", objc_msgSend(-[NSArray objectAtIndex:](NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1), "objectAtIndex:", 0), "stringByAppendingPathComponent:", objc_msgSend(a2, "lastPathComponent")));
    uint64_t v4 = CGImageDestinationCreateWithURL(v3, (CFStringRef)[(id)*MEMORY[0x1E4F44460] identifier], 1uLL, 0);
    CGImageDestinationAddImage(v4, a1, 0);
    CGImageDestinationFinalize(v4);
    CFRelease(v4);
  }
  else
  {
    NSLog(&cfstr_NoImageAvailab.isa);
  }
}

void writeBuffer(_OWORD *a1, void *a2)
{
  long long v2 = a1[1];
  v3[0] = *a1;
  v3[1] = v2;
  writeBufferWithMetadata((uint64_t)v3, a2, 0);
}

void writeBufferWithMetadata(uint64_t a1, void *a2, const __CFDictionary *a3)
{
  DeviceGray = CGColorSpaceCreateDeviceGray();
  CFURLRef v7 = CGBitmapContextCreate(*(void **)a1, *(void *)(a1 + 16), *(void *)(a1 + 8), 8uLL, *(void *)(a1 + 24), DeviceGray, 0);
  Image = CGBitmapContextCreateImage(v7);
  writeCGImageWithMetadata(Image, a2, a3);
  CGColorSpaceRelease(DeviceGray);
  CGContextRelease(v7);
  CGImageRelease(Image);
}

void writeBufferWithFullColor(opaqueCMSampleBuffer *a1, void *a2, const __CFDictionary *a3)
{
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  CFDictionaryRef v7 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, 1u);
  float64x2_t v8 = (void *)[objc_alloc(MEMORY[0x1E4F1E050]) initWithCVPixelBuffer:ImageBuffer options:v7];
  uint64_t v9 = (void *)[MEMORY[0x1E4F1E018] contextWithOptions:0];
  [v8 extent];
  double v10 = (CGImage *)objc_msgSend(v9, "createCGImage:fromRect:", v8);
  writeCGImageWithMetadata(v10, a2, a3);

  CFRelease(v7);
  CGImageRelease(v10);
}

void writeRawBuffer(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a1 length:a2];
  if (([a3 isAbsolutePath] & 1) == 0) {
    a3 = objc_msgSend((id)objc_msgSend(-[NSArray objectAtIndex:](NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1), "objectAtIndex:", 0), "stringByAppendingPathComponent:", @"CRImages"), "stringByAppendingPathComponent:", objc_msgSend(a3, "lastPathComponent"));
  }
  [v4 writeToFile:a3 atomically:1];
}

uint64_t applyHomograpyMatrix(uint64_t result, unsigned char **a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v11 = (const float *)a3;
  float32x2_t v12 = vld1_dup_f32(v11++);
  float v13 = *v11;
  uint64_t v14 = (const float *)(a3 + 8);
  float32x2_t v15 = vld1_dup_f32(v14);
  double v16 = (const float *)(a3 + 12);
  float32x2_t v17 = vld1_dup_f32(v16);
  float v18 = *(float *)(a3 + 16);
  uint64_t v19 = (const float *)(a3 + 20);
  float32x2_t v20 = vld1_dup_f32(v19);
  uint64_t v21 = (const float *)(a3 + 24);
  float32x2_t v22 = vld1_dup_f32(v21);
  float v23 = *(float *)(a3 + 28);
  unint64_t v24 = (const float *)(a3 + 32);
  float32x2_t v25 = vld1_dup_f32(v24);
  int v26 = (int)(a5 + a7);
  unsigned int v27 = *(_DWORD *)(result + 16);
  vImage_Buffer v28 = *(unsigned char **)result;
  uint64_t v29 = *(void *)(result + 8);
  **(unsigned char **)uint64_t result = 0;
  float v30 = (float)(int)a5;
  float v31 = (float)v26;
  if (v30 < (float)v26)
  {
    vImage_Buffer v32 = *a2;
    int v33 = (int)(a4 + a6);
    int v34 = (int)a4;
    float v35 = (float)(int)a4;
    float v36 = (float)v33;
    int32x2_t v37 = vdup_n_s32(v27);
    int32x2_t v38 = vdup_n_s32(v29);
    do
    {
      if (v35 >= v36)
      {
        uint8x8_t v49 = v32;
      }
      else
      {
        v7.f32[0] = v13 * v30;
        float32x2_t v7 = (float32x2_t)vdup_lane_s32((int32x2_t)v7, 0);
        v8.f32[0] = v23 * v30;
        float32x2_t v8 = (float32x2_t)vdup_lane_s32((int32x2_t)v8, 0);
        v9.f32[0] = v18 * v30;
        float32x2_t v9 = (float32x2_t)vdup_lane_s32((int32x2_t)v9, 0);
        *(float *)v10.i32 = (float)v34;
        do
        {
          float32x2_t v39 = vadd_f32((float32x2_t)vdup_lane_s32(v10, 0), (float32x2_t)0x3F80000000000000);
          float32x2_t v40 = vadd_f32(v25, vadd_f32(v8, vmul_f32(v22, v39)));
          float32x2_t v41 = vrecpe_f32(v40);
          float32x2_t v42 = vmul_f32(v41, vrecps_f32(v40, v41));
          float32x2_t v43 = vmul_f32(vrecps_f32(v40, v42), v42);
          int32x2_t v44 = vcvt_s32_f32(vadd_f32(vmul_f32(v43, vadd_f32(v15, vadd_f32(v7, vmul_f32(v12, v39)))), (float32x2_t)0x3F0000003F000000));
          int32x2_t v45 = vcvt_s32_f32(vadd_f32(vmul_f32(v43, vadd_f32(v20, vadd_f32(v9, vmul_f32(v17, v39)))), (float32x2_t)0x3F0000003F000000));
          int8x8_t v46 = vand_s8(vand_s8((int8x8_t)vcgt_s32(v38, v45), (int8x8_t)vcgt_s32(v37, v44)), (int8x8_t)vcgt_s32((int32x2_t)vorr_s8((int8x8_t)v45, (int8x8_t)v44), (int32x2_t)-1));
          int8x8_t v47 = vand_s8((int8x8_t)v44, v46);
          int32x2_t v48 = vmul_s32((int32x2_t)vand_s8((int8x8_t)v45, v46), v37);
          unsigned char *v32 = v28[v48.i32[0] + v47.i32[0]];
          uint8x8_t v49 = v32 + 2;
          v32[1] = v28[v48.i32[1] + v47.i32[1]];
          *(float *)v10.i32 = *(float *)v10.i32 + 2.0;
          v32 += 2;
        }
        while (*(float *)v10.i32 < v36);
      }
      float v30 = v30 + 1.0;
      vImage_Buffer v32 = v49;
    }
    while (v30 < v31);
  }
  return result;
}

void InstantLogPrinter::InstantLogPrinter(InstantLogPrinter *this, __sFILE *a2)
{
  *(void *)this = a2;
}

{
  *(void *)this = a2;
}

uint64_t InstantLogPrinter::print(FILE **this, const char *a2, va_list a3)
{
  return vfprintf(*this, a2, a3);
}

void *CRLogger::getCRLogger(CRLogger *this)
{
  {
    CRLogger::CRLogger((CRLogger *)&CRLogger::getCRLogger(void)::loggerSingleton);
  }
  return &CRLogger::getCRLogger(void)::loggerSingleton;
}

void sub_1DD88B3A8(_Unwind_Exception *a1)
{
}

void CRLogger::CRLogger(CRLogger *this)
{
  *((void *)this + 1) = 0;
  long long v2 = (uint64_t *)((char *)this + 8);
  *(unsigned char *)this = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  CFURLRef v3 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v4 = getenv("DEBUG_PRINT_DETECTION_MAPS");
  if (v4 && *v4 == 49) {
    *v2 |= 1uLL;
  }
  uint64_t v5 = getenv("DEBUG_PRINT_DETECTION_NMS");
  if (v5 && *v5 == 49) {
    *v2 |= 2uLL;
  }
  CFURLRef v6 = getenv("DEBUG_PRINT_RECOGNIZER_RECTIFIED_INPUT");
  if (v6 && *v6 == 49) {
    *v2 |= 4uLL;
  }
  float32x2_t v7 = getenv("DEBUG_PRINT_RECOGNIZER_INPUT_BATCH");
  if (v7 && *v7 == 49) {
    *v2 |= 8uLL;
  }
  float32x2_t v8 = getenv("DEBUG_FORM_FIELD_DETECTION");
  if (v8 && *v8 == 49
    || ([v3 objectForKey:@"com.apple.CoreRecognition.debug_form_field_detection"],
        float32x2_t v9 = objc_claimAutoreleasedReturnValue(),
        int v10 = [v9 BOOLValue],
        v9,
        v10))
  {
    *v2 |= 0x10uLL;
  }
  uint64_t v11 = getenv("DEBUG_DATA_DETECTION");
  if (v11 && *v11 == 49)
  {
    uint64_t v12 = *v2;
  }
  else
  {
    float v13 = [v3 objectForKey:@"com.apple.CoreRecognition.debug_data_detection"];
    int v14 = [v13 BOOLValue];

    uint64_t v12 = *v2;
    if (!v14)
    {
      if (!v12) {
        goto LABEL_27;
      }
      goto LABEL_23;
    }
  }
  uint64_t *v2 = v12 | 0x20;
LABEL_23:
  *(unsigned char *)this = 1;
  float32x2_t v15 = getenv("CR_LOG_DESTINATION_FILE");
  if (v15)
  {
    double v16 = v15;
    float32x2_t v17 = fopen(v15, "a+");
    *((void *)this + 2) = v17;
    if (!v17)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Cannot open specified log file %s.\nAll logging is turned off.\n", v16);
      *(unsigned char *)this = 0;
      goto LABEL_30;
    }
    *((unsigned char *)this + 24) = 1;
  }
  else
  {
    *((void *)this + 2) = *MEMORY[0x1E4F143C8];
  }
LABEL_27:
  if (*(unsigned char *)this) {
    operator new();
  }
LABEL_30:
}

void sub_1DD88B63C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v4) {
    MEMORY[0x1E01BF140](v4, 0x20C4093837F09);
  }
  _Unwind_Resume(a1);
}

void CRLogger::~CRLogger(CRLogger *this)
{
  long long v2 = (FILE **)*((void *)this + 4);
  if (v2) {
    fflush(*v2);
  }
  if (*((unsigned char *)this + 24)) {
    fclose(*((FILE **)this + 2));
  }
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    MEMORY[0x1E01BF140](v3, 0x20C4093837F09);
  }
}

BOOL CRLogger::isLoggingTypeEnabled(uint64_t a1, unsigned int a2)
{
  return *(unsigned char *)a1 && (*(void *)(a1 + 8) & a2) != 0;
}

uint64_t CRLogger::log(uint64_t result, unsigned int a2, char *a3, ...)
{
  va_start(va, a3);
  if (*(unsigned char *)result)
  {
    if ((*(void *)(result + 8) & a2) != 0) {
      return vfprintf(**(FILE ***)(result + 32), a3, va);
    }
  }
  return result;
}

void sub_1DD88BAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD88CA04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88CFB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88D4F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88D898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88DC30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88E1F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88E348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88E568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88E688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88E79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void sub_1DD88E89C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88EB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88ECB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88EEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DD88F140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88F270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88F478(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1DD88F6E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1DD88F8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88FADC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1DD88FD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD88FEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD890284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD8904E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD890594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8906B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD890878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD890E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  a54 = &unk_1F38ED520;
  cv::SmartPtr::release((cv::SmartPtr *)&a54);

  _Unwind_Resume(a1);
}

void sub_1DD891538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1DD891854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD891D60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD891E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD891ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD891F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRImage;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1DD89208C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8923E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD892670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD892774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD892E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD892F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8932DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  float v13 = va_arg(va1, const void *);
  applesauce::CF::ObjectRef<CGContext *>::~ObjectRef((const void **)va);
  applesauce::CF::ObjectRef<CGColorSpace *>::~ObjectRef((const void **)va1);

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CTFrame const*>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<__CTFramesetter const*>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<CGColor *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<CGImage *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<CGContext *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<CGColorSpace *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1DD8937C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DD8938BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD893BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD893CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD893F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id createPixelBufferCLAPDictionaryFromRect(CGSize a1, CGRect a2)
{
  double height = a2.size.height;
  double width = a2.size.width;
  double y = a2.origin.y;
  double x = a2.origin.x;
  double v6 = a1.height;
  double v7 = a1.width;
  CGPoint v15[4] = *MEMORY[0x1E4F143B8];
  v14[0] = *MEMORY[0x1E4F24A88];
  float32x2_t v8 = [NSNumber numberWithDouble:a2.size.width];
  v15[0] = v8;
  v14[1] = *MEMORY[0x1E4F24A68];
  float32x2_t v9 = [NSNumber numberWithDouble:height];
  v15[1] = v9;
  v14[2] = *MEMORY[0x1E4F24A70];
  int v10 = [NSNumber numberWithDouble:x + width * 0.5 - v7 * 0.5];
  v15[2] = v10;
  void v14[3] = *MEMORY[0x1E4F24A80];
  uint64_t v11 = [NSNumber numberWithDouble:y + height * 0.5 - v6 * 0.5];
  v15[3] = v11;
  uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:4];

  return v12;
}

void sub_1DD894124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8943E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8945B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8946E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD894988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD894B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD894C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD894CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD894D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD894FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8950B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD89514C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8951E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD895274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD895350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD895538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRImage_PixelBuffer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1DD8956E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD895818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::ObjectRef<CGColorSpace *>::from_create@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<CGContext *>::from_create@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<CGColor *>::from_create@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<CGPath *>::from_create@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<__CTFramesetter const*>::from_create@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<__CTFrame const*>::from_create@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<CGImage *>::from_create@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_1DD8959D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD895ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD896048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD896270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)CRCTCCVNLPTextDecoder;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1DD896358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD8963D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD89646C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD896C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *CoreRecognition::decoder::ActivationMatrix::reverseInTime(unint64_t *this)
{
  unint64_t v1 = *this;
  if (*this >= 2)
  {
    uint64_t v2 = 0;
    unint64_t v3 = this[1];
    unint64_t v4 = this[8];
    unint64_t v5 = this[9];
    do
    {
      uint64_t v6 = v2 * v3;
      uint64_t v7 = v2 + 1;
      if (v2 * v3 != (v2 + 1) * v3)
      {
        uint64_t v8 = (v1 + ~v2) * v3;
        float32x2_t v9 = (_DWORD *)(v4 + 4 * v8);
        this = (unint64_t *)(v4 + 4 * v6);
        uint64_t v10 = 4 * v3;
        do
        {
          int v11 = *(_DWORD *)this;
          *(_DWORD *)this = *v9;
          this = (unint64_t *)((char *)this + 4);
          *v9++ = v11;
          v10 -= 4;
        }
        while (v10);
        if (v5)
        {
          uint64_t v12 = (int *)(v5 + 4 * v8);
          uint64_t v13 = 4 * v3;
          int v14 = (int *)(v5 + 4 * v6);
          do
          {
            int v15 = *v14;
            *v14++ = *v12;
            *v12++ = v15;
            v13 -= 4;
          }
          while (v13);
        }
      }
      uint64_t v2 = v7;
    }
    while (v7 != v1 >> 1);
  }
  return this;
}

void sub_1DD896ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::ActivationMatrix::~ActivationMatrix(CoreRecognition::decoder::ActivationMatrix *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

void sub_1DD897480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int v15 = (void *)STACK[0x4A8];
  if (STACK[0x4A8])
  {
    STACK[0x4B0] = (unint64_t)v15;
    operator delete(v15);
  }

  _Unwind_Resume(a1);
}

void sub_1DD897B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD897FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1DD8980E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD898204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD898904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<int>>,void *>>>::operator()[abi:ne180100](1, v12);
  std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::~__hash_table(v11);
  uint64_t v14 = 0;
  while (1)
  {
    int v15 = *(void **)(&a10 + v14 + 72);
    if (v15)
    {
      *(void *)(&a10 + v14 + 80) = v15;
      operator delete(v15);
    }
    v14 -= 32;
    if (v14 == -96)
    {

      _Unwind_Resume(a1);
    }
  }
}

void sub_1DD898A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD898D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1DD89902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1DD899164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DD899F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42)
{
  applesauce::CF::ObjectRef<_LXLexicon const*>::~ObjectRef((const void **)(v48 - 120));

  *(void *)(v48 - 120) = v48 - 160;
  std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 120));
  if (__p) {
    operator delete(__p);
  }
  void *v44 = a12;
  *(void *)(v48 - 160) = a11;
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 160));

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<void *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::addScorer(void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = result;
    unint64_t v4 = result + 5;
    unint64_t v5 = result[5];
    uint64_t v6 = (void *)result[4];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = (void *)result[3];
      uint64_t v9 = v6 - v8;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      float32x2_t v22 = v4;
      if (v12)
      {
        unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v12);
        uint64_t v8 = (void *)v3[3];
        uint64_t v6 = (void *)v3[4];
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = (void *)(v12 + 8 * v9);
      unint64_t v15 = v12 + 8 * v13;
      unint64_t v21 = v15;
      *uint64_t v14 = a2;
      *((void *)&v20 + 1) = v14 + 1;
      if (v6 == v8)
      {
        uint64_t v7 = v14 + 1;
      }
      else
      {
        do
        {
          uint64_t v16 = *--v6;
          void *v6 = 0;
          *--uint64_t v14 = v16;
        }
        while (v6 != v8);
        uint64_t v7 = (void *)*((void *)&v20 + 1);
        unint64_t v15 = v21;
      }
      long long v17 = *(_OWORD *)(v3 + 3);
      v3[3] = v14;
      v3[4] = v7;
      long long v20 = v17;
      unint64_t v18 = v3[5];
      v3[5] = v15;
      unint64_t v21 = v18;
      uint64_t v19 = v17;
      uint64_t result = (void *)std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::~__split_buffer((uint64_t)&v19);
    }
    else
    {
      void *v6 = a2;
      uint64_t v7 = v6 + 1;
    }
    v3[4] = v7;
  }
  return result;
}

const void **applesauce::CF::ObjectRef<CVNLPLanguageModel *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *CoreRecognition::decoder::LatinArabicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::~LatinArabicMixedScriptPenaltyBeamScorer(void *a1)
{
  *a1 = &unk_1F38ED378;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void *CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::addScorer(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    unint64_t v4 = result;
    unint64_t v5 = result + 5;
    unint64_t v6 = result[5];
    uint64_t v7 = (void *)result[4];
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = result[3];
      uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v6 - v9;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      float32x2_t v25 = v5;
      if (v13)
      {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v13);
        uint64_t v2 = *a2;
      }
      else
      {
        uint64_t v14 = 0;
      }
      unint64_t v15 = (void *)(v13 + 8 * v10);
      unint64_t v16 = v13 + 8 * v14;
      unint64_t v24 = v16;
      *a2 = 0;
      void *v15 = v2;
      uint64_t v8 = v15 + 1;
      v23.i64[1] = (uint64_t)(v15 + 1);
      unint64_t v18 = (void *)v4[3];
      long long v17 = (void *)v4[4];
      if (v17 == v18)
      {
        int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
      }
      else
      {
        do
        {
          uint64_t v19 = *--v17;
          *long long v17 = 0;
          *--unint64_t v15 = v19;
        }
        while (v17 != v18);
        int64x2_t v20 = *(int64x2_t *)(v4 + 3);
        uint64_t v8 = (void *)v23.i64[1];
        unint64_t v16 = v24;
      }
      v4[3] = v15;
      v4[4] = v8;
      int64x2_t v23 = v20;
      unint64_t v21 = v4[5];
      v4[5] = v16;
      unint64_t v24 = v21;
      uint64_t v22 = v20.i64[0];
      uint64_t result = (void *)std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::~__split_buffer((uint64_t)&v22);
    }
    else
    {
      *a2 = 0;
      void *v7 = v2;
      uint64_t v8 = v7 + 1;
    }
    v4[4] = v8;
  }
  return result;
}

void *CoreRecognition::decoder::LatinCyrillicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::~LatinCyrillicMixedScriptPenaltyBeamScorer(void *a1)
{
  *a1 = &unk_1F38ED378;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<_LXLexicon const*>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::~AdditiveCombiningBeamScorer(uint64_t a1)
{
  *(void *)a1 = &unk_1F38ED330;
  unint64_t v3 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void sub_1DD89A9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  CoreRecognition::decoder::Context::~Context((const void **)(v22 - 120));
  CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::~CTCGreedyDecoder(&a22);
  a22 = v22 - 96;
  std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::decode(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  __p = 0;
  int32x4_t v55 = 0;
  unint64_t v56 = 0;
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::reserve((uint64_t *)&__p, *a2 + 1);
  unint64_t v6 = v55;
  if ((unint64_t)v55 >= v56)
  {
    unint64_t v7 = std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::__emplace_back_slow_path<>((uint64_t *)&__p);
  }
  else
  {
    v55[2] = 0u;
    v6[3] = 0u;
    _OWORD *v6 = 0u;
    v6[1] = 0u;
    *((void *)v6 + 8) = &unk_1F38ED4D8;
    *((void *)v6 + 9) = 0;
    unint64_t v7 = (unint64_t)(v6 + 5);
  }
  int32x4_t v55 = (_OWORD *)v7;
  *(void *)(v7 - 24) = 0;
  *(void *)(v7 - 48) = 0;
  *(_OWORD *)(v7 - 80) = xmmword_1DD8CEF50;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  int32x4_t v52 = &unk_1F38ED4D8;
  uint64_t v53 = 0;
  unint64_t v8 = *a2;
  if (*a2)
  {
    unint64_t v9 = 0;
    uint64_t v10 = -1;
    do
    {
      unint64_t v11 = a2[1];
      unint64_t v12 = v11 * v9;
      unint64_t v14 = a2[8];
      unint64_t v13 = a2[9];
      unint64_t v15 = (float *)(v13 + 4 * v11 * v9);
      if (v13)
      {
        float v16 = -1.0;
      }
      else
      {
        unint64_t v15 = 0;
        float v16 = 0.0;
      }
      long long v17 = (float *)(v14 + 4 * v12);
      unint64_t v18 = v9 + 1;
      uint64_t v19 = v11 * (v9 + 1);
      int64x2_t v20 = (float *)(v14 + 4 * v19);
      BOOL v22 = v12 == v19;
      unint64_t v21 = v17 + 1;
      BOOL v22 = v22 || v21 == v20;
      if (!v22)
      {
        float v23 = v16 + 1.0;
        if (v15) {
          float v23 = v16;
        }
        unint64_t v24 = v15 + 1;
        if (!v15) {
          unint64_t v24 = 0;
        }
        uint64_t v25 = 4 * v11 - 4;
        do
        {
          float v26 = *v17;
          if (*v17 > -0.0010005) {
            float v26 = -0.0010005;
          }
          float v27 = *v21;
          if (*v21 > -0.0010005) {
            float v27 = -0.0010005;
          }
          if (v26 < v27)
          {
            unint64_t v15 = v24;
            long long v17 = v21;
            float v16 = v23;
          }
          ++v21;
          BOOL v28 = v24 == 0;
          if (v24) {
            ++v24;
          }
          else {
            unint64_t v24 = 0;
          }
          if (v28) {
            float v23 = v23 + 1.0;
          }
          v25 -= 4;
        }
        while (v25);
      }
      if (v15) {
        float v16 = *v15;
      }
      float v29 = *v17;
      unint64_t v30 = (unint64_t)v16;
      if (v29 <= -0.0010005) {
        float v31 = v29;
      }
      else {
        float v31 = -0.0010005;
      }
      *(void *)&long long v48 = v30;
      *((void *)&v51 + 1) = v7 - 80;
      if (v10 == v30)
      {
        double v32 = v31;
        if (*(unsigned char *)(a1 + 24) && *(double *)(v7 - 40) < v32)
        {
          *(void *)(v7 - 72) = v9;
          *(double *)(v7 - 40) = v32;
        }
      }
      else
      {
        double v32 = v31;
        if (*(void *)(a1 + 8) == v30)
        {
          uint64_t v10 = v30;
        }
        else
        {
          *((void *)&v48 + 1) = v9;
          *((double *)&v50 + 1) = v31;
          *(void *)&long long v50 = *(void *)(v7 - 48);
          if (v7 >= v56)
          {
            unint64_t v7 = std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::__emplace_back_slow_path<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>&>((uint64_t *)&__p, &v48);
          }
          else
          {
            long long v33 = v48;
            long long v34 = v49;
            long long v35 = v51;
            *(_OWORD *)(v7 + 32) = v50;
            *(_OWORD *)(v7 + 48) = v35;
            *(_OWORD *)unint64_t v7 = v33;
            *(_OWORD *)(v7 + 16) = v34;
            *(void *)(v7 + 64) = &unk_1F38ED4D8;
            *(void *)(v7 + 72) = v53;
            v7 += 80;
          }
          int32x4_t v55 = (_OWORD *)v7;
          uint64_t v10 = v48;
          unint64_t v8 = *a2;
        }
      }
      *(double *)(v7 - 48) = v32 + *(double *)(v7 - 48);
      unint64_t v9 = v18;
    }
    while (v18 < v8);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::createResultPathFromBeamEntry(a1 + 16, v7 - 80, v8, (uint64_t)&v45);
  unint64_t v36 = a3[2];
  unint64_t v37 = a3[1];
  if (v37 >= v36)
  {
    unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v37 - *a3) >> 3);
    unint64_t v40 = v39 + 1;
    if (v39 + 1 > 0x666666666666666) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v36 - *a3) >> 3);
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0x333333333333333) {
      unint64_t v42 = 0x666666666666666;
    }
    else {
      unint64_t v42 = v40;
    }
    v57[4] = a3 + 2;
    if (v42) {
      float32x2_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(a3 + 2), v42);
    }
    else {
      float32x2_t v43 = 0;
    }
    int32x2_t v44 = &v43[40 * v39];
    v57[0] = v43;
    v57[1] = v44;
    v57[3] = &v43[40 * v42];
    *(void *)int32x2_t v44 = 0;
    *((void *)v44 + 1) = 0;
    *((void *)v44 + 2) = 0;
    *(_OWORD *)int32x2_t v44 = v45;
    *((void *)v44 + 2) = v46;
    long long v45 = 0uLL;
    uint64_t v46 = 0;
    *(_OWORD *)(v44 + 24) = v47;
    v57[2] = v44 + 40;
    std::vector<CoreRecognition::decoder::DecodingPath>::__swap_out_circular_buffer(a3, v57);
    uint64_t v38 = a3[1];
    std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer(v57);
  }
  else
  {
    *(void *)unint64_t v37 = 0;
    *(void *)(v37 + 8) = 0;
    *(void *)(v37 + 16) = 0;
    *(_OWORD *)unint64_t v37 = v45;
    *(void *)(v37 + 16) = v46;
    long long v45 = 0uLL;
    uint64_t v46 = 0;
    *(_OWORD *)(v37 + 24) = v47;
    uint64_t v38 = v37 + 40;
  }
  a3[1] = v38;
  v57[0] = &v45;
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v57);
  if (__p)
  {
    int32x4_t v55 = __p;
    operator delete(__p);
  }
}

void sub_1DD89AE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer((void **)(v27 - 136));
  *(void *)(v27 - 144) = &a9;
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1DD89AEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD89B0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1DD89B6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  *(void *)(v28 - 224) = a11;
  unint64_t v30 = *(void **)(v28 - 208);
  if (v30)
  {
    *(void *)(v28 - 200) = v30;
    operator delete(v30);
  }
  a28 = (void **)(v28 - 176);
  std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100](&a28);

  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::decode()
{
}

void sub_1DD89CC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::~CTCBeamSearchDecoder(uint64_t a1)
{
  *(void *)a1 = &unk_1F38ED1D8;
  *(void *)(a1 + 16) = &unk_1F38ED330;
  unint64_t v3 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::decode()
{
}

void sub_1DD89E310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::~CTCBeamSearchDecoder(uint64_t a1)
{
  *(void *)a1 = &unk_1F38ED1B0;
  *(void *)(a1 + 64) = &unk_1F38ED290;
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  *(void *)(a1 + 16) = &unk_1F38ED330;
  unint64_t v4 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void *CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::~SpaceSegmentedPathBuilder(void *a1)
{
  *a1 = &unk_1F38ED290;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1DD89E5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DD89E998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DD89ED18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1DD8A0CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,_Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_1DD8A15D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::updateActivationProgression(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  if (*(unsigned char *)(result + 8))
  {
    if (*(double *)(a2 + 40) < a4)
    {
      *(void *)(a2 + 8) = a3;
      *(double *)(a2 + 40) = a4;
    }
  }
  return result;
}

void CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::updateActivationExtension(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a3 + 8) = a4;
  *(double *)(a3 + 40) = a1;
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  unint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::~AdditiveCombiningBeamScorer(uint64_t a1)
{
  *(void *)a1 = &unk_1F38ED330;
  unint64_t v1 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1E01BF140);
}

void CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::createState()
{
}

uint64_t CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::initializeState(uint64_t a1, void *a2)
{
  return CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::initializeState(*(void *)(a1 + 24), *(void *)(a1 + 32), a2);
}

double CoreRecognition::decoder::BaseBeamScorer::getCachedExpandStateScore(CoreRecognition::decoder::BaseBeamScorer *this, const CoreRecognition::decoder::BaseState *a2)
{
  return *((double *)a2 + 1);
}

double CoreRecognition::decoder::BaseBeamScorer::finalizeState(CoreRecognition::decoder::BaseBeamScorer *this, CoreRecognition::decoder::BaseState *a2)
{
  return 0.0;
}

void CoreRecognition::decoder::CombinedBeamState::~CombinedBeamState(CoreRecognition::decoder::CombinedBeamState *this)
{
  *(void *)this = &unk_1F38ED140;
  unint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_1F38ED140;
  unint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1E01BF140);
}

void CoreRecognition::decoder::CombinedBeamState::reset(CoreRecognition::decoder::CombinedBeamState *this)
{
}

void std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::initializeState(uint64_t result, uint64_t a2, void *a3)
{
  if (result != a2)
  {
    unint64_t v4 = a3 + 4;
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)result + 16))();
    unint64_t v7 = a3[3];
    unint64_t v6 = a3[4];
    if (v7 < v6) {
      std::shared_ptr<CoreRecognition::decoder::BaseState>::shared_ptr[abi:ne180100]<CoreRecognition::decoder::BaseState,void>((void *)a3[3], v5);
    }
    uint64_t v8 = a3[2];
    uint64_t v9 = (uint64_t)(v7 - v8) >> 4;
    if (!((unint64_t)(v9 + 1) >> 60))
    {
      uint64_t v10 = v6 - v8;
      uint64_t v11 = v10 >> 3;
      if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      unint64_t v18 = v4;
      if (v12) {
        unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      unint64_t v14 = v12;
      unint64_t v15 = (void *)(v12 + 16 * v9);
      float v16 = v15;
      unint64_t v17 = v12 + 16 * v13;
      std::shared_ptr<CoreRecognition::decoder::BaseState>::shared_ptr[abi:ne180100]<CoreRecognition::decoder::BaseState,void>(v15, v5);
    }
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  return result;
}

void sub_1DD8A1C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<CoreRecognition::decoder::BaseState>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<CoreRecognition::decoder::BaseState>::shared_ptr[abi:ne180100]<CoreRecognition::decoder::BaseState,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1DD8A1CAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CoreRecognition::decoder::BaseState *,std::shared_ptr<CoreRecognition::decoder::BaseState>::__shared_ptr_default_delete<CoreRecognition::decoder::BaseState,CoreRecognition::decoder::BaseState>,std::allocator<CoreRecognition::decoder::BaseState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E01BF140);
}

uint64_t std::__shared_ptr_pointer<CoreRecognition::decoder::BaseState *,std::shared_ptr<CoreRecognition::decoder::BaseState>::__shared_ptr_default_delete<CoreRecognition::decoder::BaseState,CoreRecognition::decoder::BaseState>,std::allocator<CoreRecognition::decoder::BaseState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreRecognition::decoder::BaseState *,std::shared_ptr<CoreRecognition::decoder::BaseState>::__shared_ptr_default_delete<CoreRecognition::decoder::BaseState,CoreRecognition::decoder::BaseState>,std::allocator<CoreRecognition::decoder::BaseState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__split_buffer<std::shared_ptr<CoreRecognition::decoder::BaseState>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::expandState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 != *(void *)(a1 + 32))
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)v5 + 16))();
    unint64_t v8 = *(void *)(a4 + 24);
    unint64_t v7 = *(void *)(a4 + 32);
    if (v8 < v7) {
      std::shared_ptr<CoreRecognition::decoder::BaseState>::shared_ptr[abi:ne180100]<CoreRecognition::decoder::BaseState,void>(*(void **)(a4 + 24), v6);
    }
    uint64_t v9 = *(void *)(a4 + 16);
    uint64_t v10 = (uint64_t)(v8 - v9) >> 4;
    if (!((unint64_t)(v10 + 1) >> 60))
    {
      uint64_t v11 = v7 - v9;
      uint64_t v12 = v11 >> 3;
      if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v13);
      }
      std::shared_ptr<CoreRecognition::decoder::BaseState>::shared_ptr[abi:ne180100]<CoreRecognition::decoder::BaseState,void>((void *)(v13 + 16 * v10), v6);
    }
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  double v14 = *(double *)(a1 + 16);
  if (v14 <= 0.0) {
    double v14 = 0.0;
  }
  double result = *(double *)(a1 + 8) * v14;
  *(double *)(a4 + 8) = result;
  return result;
}

void sub_1DD8A200C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<std::shared_ptr<CoreRecognition::decoder::BaseState>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

double CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::finalizeState(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a2 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 24);
  uint64_t v6 = *(uint64_t **)(a1 + 32);
  if (v5 == v6)
  {
    double v8 = 0.0;
  }
  else
  {
    uint64_t v7 = 0;
    double v8 = 0.0;
    do
    {
      uint64_t v9 = *v5++;
      double v8 = v8
         + (*(double (**)(uint64_t, void))(*(void *)v9 + 48))(v9, *(void *)(*(void *)(a2 + 16) + v7));
      v7 += 16;
    }
    while (v5 != v6);
  }
  double v10 = *(double *)(a1 + 8);
  double v11 = *(double *)(a1 + 16);
  if (v11 <= v8 + v4 / v10) {
    double v11 = v8 + v4 / v10;
  }
  *(double *)(a2 + 8) = v10 * v11;
  return v8;
}

void CoreRecognition::decoder::MixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::createState()
{
}

double CoreRecognition::decoder::MixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::expandState(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (*(uint64_t (**)(double *, uint64_t))(*(void *)a1 + 72))(a1, a5);
  *(_DWORD *)(a4 + 20) = v9;
  if (a3 == -1)
  {
    *(unsigned char *)(a4 + 16) = 0;
    goto LABEL_5;
  }
  if ((*(unsigned int (**)(double *, uint64_t))(*(void *)a1 + 64))(a1, v9))
  {
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(a2 + 20);
    *(unsigned char *)(a4 + 16) = *(unsigned char *)(a2 + 16);
LABEL_5:
    *(void *)(a4 + 8) = 0;
    return 0.0;
  }
  if (!*(unsigned char *)(a2 + 16)
    && ((*(uint64_t (**)(double *, void, void))(*(void *)a1 + 56))(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a4 + 20)) & 1) == 0)
  {
    return *(double *)(a4 + 8);
  }
  *(unsigned char *)(a4 + 16) = 1;
  double v11 = a1[6];
  if (a1[2] > v11) {
    double v11 = a1[2];
  }
  double result = a1[1] * v11;
  *(double *)(a4 + 8) = result;
  return result;
}

uint64_t CoreRecognition::decoder::MixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::labelToScriptCode(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = (*(void *)(a1 + 32) - v2) >> 2;
  if (v3 > a2) {
    return *(unsigned int *)(v2 + 4 * a2);
  }
  uint64_t v5 = objc_msgSend(NSString, "stringWithFormat:", @"Label=%lu is out-of-bounds for labelToScriptMap of size=%lu", a2, v3);
  CVNLPLogGeneralFault();

  return 0;
}

void sub_1DD8A22C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::MixedScriptState::~MixedScriptState(CoreRecognition::decoder::MixedScriptState *this)
{
}

void std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    double v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *double v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::~CharacterSegmentedPathBuilder()
{
}

uint64_t CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::needsToBeCommitted()
{
  return 1;
}

double CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::getCumulativeTokenScore(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return *(double *)(a2 + 32);
  }
  else {
    return 0.0;
  }
}

void std::vector<CoreRecognition::decoder::DecodingPath>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    unint64_t v3 = a1[1];
    double v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 5;
        uint64_t v5 = v3;
        std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      double v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::~CharacterSegmentedPathBuilder()
{
}

void CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::CombinedBeamState>::createResultPathFromBeamEntry(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  double v5 = *(double *)(a2 + 32);
  *(double *)(a4 + 24) = v5 + *(double *)(a2 + 48);
  *(double *)(a4 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v5;
  long long v66 = 0u;
  long long v67 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v64 = 0;
  double v65 = v5;
  uint64_t v6 = (void *)(a2 + 56);
  if (!*(void *)(a2 + 56))
  {
    int32x4_t v52 = 0;
    long long v51 = 0;
    goto LABEL_78;
  }
  double v8 = (void *)a2;
  do
  {
    ++*((void *)&v67 + 1);
    int v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 48))(a1, *v8);
    int v11 = v10;
    if (v10 != 2)
    {
      if (!v10)
      {
        unint64_t v15 = (char *)__p[1];
        if (__p[1] >= v64)
        {
          float v23 = (char *)__p[0];
          int64_t v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61) {
LABEL_92:
          }
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          uint64_t v26 = v64 - (char *)__p[0];
          if ((v64 - (char *)__p[0]) >> 2 > v25) {
            unint64_t v25 = v26 >> 2;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v64, v27);
            float v23 = (char *)__p[0];
            unint64_t v15 = (char *)__p[1];
          }
          else
          {
            uint64_t v28 = 0;
          }
          uint64_t v46 = &v28[8 * v24];
          *(void *)uint64_t v46 = *v8;
          float v16 = v46 + 8;
          while (v15 != v23)
          {
            uint64_t v47 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v46 - 1) = v47;
            v46 -= 8;
          }
          __p[0] = v46;
          __p[1] = v16;
          uint64_t v64 = &v28[8 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(void *)__p[1] = *v8;
          float v16 = v15 + 8;
        }
        __p[1] = v16;
        goto LABEL_64;
      }
      if (v10 == 1)
      {
        uint64_t v12 = (char *)__p[1];
        if (__p[1] >= v64)
        {
          unint64_t v17 = (char *)__p[0];
          int64_t v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
            goto LABEL_92;
          }
          uint64_t v20 = v64 - (char *)__p[0];
          if ((v64 - (char *)__p[0]) >> 2 > v19) {
            unint64_t v19 = v20 >> 2;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            BOOL v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v64, v21);
            unint64_t v17 = (char *)__p[0];
            uint64_t v12 = (char *)__p[1];
          }
          else
          {
            BOOL v22 = 0;
          }
          float v29 = &v22[8 * v18];
          *(void *)float v29 = *v8;
          unint64_t v13 = v29 + 8;
          while (v12 != v17)
          {
            uint64_t v30 = *((void *)v12 - 1);
            v12 -= 8;
            *((void *)v29 - 1) = v30;
            v29 -= 8;
          }
          __p[0] = v29;
          __p[1] = v13;
          uint64_t v64 = &v22[8 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(void *)__p[1] = *v8;
          unint64_t v13 = v12 + 8;
        }
        __p[1] = v13;
        uint64_t v14 = v8[1];
      }
      else
      {
LABEL_10:
        uint64_t v14 = v8[1] + 1;
      }
      *((void *)&v66 + 1) = v14;
      *(void *)&long long v67 = a3;
      unint64_t v31 = *(void *)(a4 + 8);
      if (v31 >= *(void *)(a4 + 16))
      {
        uint64_t v33 = std::vector<CoreRecognition::decoder::DecodingToken>::__emplace_back_slow_path<CoreRecognition::decoder::DecodingToken&>((uint64_t *)a4, (uint64_t)__p);
      }
      else
      {
        __n128 v32 = std::vector<CoreRecognition::decoder::DecodingToken>::__construct_one_at_end[abi:ne180100]<CoreRecognition::decoder::DecodingToken&>(a4, (uint64_t)__p);
        uint64_t v33 = v31 + 64;
      }
      *(void *)(a4 + 8) = v33;
      long long v34 = (char *)__p[0];
      __p[1] = __p[0];
      *((void *)&v67 + 1) = 0;
      if (v11 == 2)
      {
        if (__p[0] >= v64)
        {
          unint64_t v37 = (v64 - (char *)__p[0]) >> 2;
          if (v37 <= 1) {
            unint64_t v37 = 1;
          }
          if ((unint64_t)(v64 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v64, v38);
          unint64_t v41 = (char *)__p[0];
          unint64_t v42 = (char *)__p[1];
          *(void *)unint64_t v40 = *v8;
          long long v35 = v40 + 8;
          float32x2_t v43 = v40;
          while (v42 != v41)
          {
            uint64_t v44 = *((void *)v42 - 1);
            v42 -= 8;
            *((void *)v43 - 1) = v44;
            v43 -= 8;
          }
          __p[0] = v43;
          __p[1] = v40 + 8;
          uint64_t v64 = &v40[8 * v39];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *(void *)__p[0] = *v8;
          long long v35 = v34 + 8;
        }
        __p[1] = v35;
      }
      else if (!*v6)
      {
        double v36 = 0.0;
LABEL_56:
        uint64_t v45 = v8[5];
        double v65 = v36;
        *(void *)&long long v66 = v45;
        a3 = v14;
        goto LABEL_64;
      }
      double v36 = (*(double (**)(uint64_t, __n128))(*(void *)a1 + 56))(a1, v32);
      goto LABEL_56;
    }
    if (__p[0] != __p[1]) {
      goto LABEL_10;
    }
LABEL_64:
    double v8 = (void *)*v6;
    long long v48 = (void *)*v6;
    uint64_t v49 = v48[7];
    uint64_t v6 = v48 + 7;
  }
  while (v49);
  if (__p[0] != __p[1])
  {
    *((void *)&v66 + 1) = 0;
    *(void *)&long long v67 = a3;
    unint64_t v50 = *(void *)(a4 + 8);
    if (v50 >= *(void *)(a4 + 16))
    {
      long long v51 = (long long *)std::vector<CoreRecognition::decoder::DecodingToken>::__emplace_back_slow_path<CoreRecognition::decoder::DecodingToken&>((uint64_t *)a4, (uint64_t)__p);
    }
    else
    {
      std::vector<CoreRecognition::decoder::DecodingToken>::__construct_one_at_end[abi:ne180100]<CoreRecognition::decoder::DecodingToken&>(a4, (uint64_t)__p);
      long long v51 = (long long *)(v50 + 64);
    }
    *(void *)(a4 + 8) = v51;
    int32x4_t v52 = *(long long **)a4;
    goto LABEL_73;
  }
  int32x4_t v52 = *(long long **)a4;
  long long v51 = *(long long **)(a4 + 8);
  if (*(long long **)a4 == v51)
  {
    int32x4_t v52 = *(long long **)(a4 + 8);
  }
  else
  {
    *((void *)v51 - 3) = 0;
LABEL_73:
    if (v52 != v51)
    {
      for (uint64_t i = v52 + 4; i != v51; i += 4)
        *((double *)i - 5) = *((double *)i - 5) - *((double *)i + 3);
    }
  }
LABEL_78:
  std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>>(v52, v51);
  int32x4_t v54 = *(long long **)a4;
  int32x4_t v55 = *(long long **)(a4 + 8);
  while (v54 != v55)
  {
    unint64_t v56 = *(void *)v54;
    uint64_t v57 = *((void *)v54 + 1);
    int32x4_t v58 = (void *)(v57 - 8);
    if (*(void *)v54 != v57 && (unint64_t)v58 > v56)
    {
      unint64_t v60 = v56 + 8;
      do
      {
        uint64_t v61 = *(void *)(v60 - 8);
        *(void *)(v60 - 8) = *v58;
        *v58-- = v61;
        BOOL v62 = v60 >= (unint64_t)v58;
        v60 += 8;
      }
      while (!v62);
    }
    v54 += 4;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DD8A28D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::CombinedBeamState>::updateActivationProgression(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  if (*(unsigned char *)(result + 8))
  {
    if (*(double *)(a2 + 40) < a4)
    {
      *(void *)(a2 + 8) = a3;
      *(double *)(a2 + 40) = a4;
    }
  }
  return result;
}

void CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::CombinedBeamState>::updateActivationExtension(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a3 + 8) = a4;
  *(double *)(a3 + 40) = a1;
}

BOOL CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::CombinedBeamState>::willCommitBetween(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) == 2
      || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a3) == 1;
}

uint64_t CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::needsToBeCommitted()
{
  return 1;
}

double CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::getCumulativeTokenScore(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return *(double *)(a2 + 32);
  }
  else {
    return 0.0;
  }
}

void CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::~CTCBeamSearchDecoder(uint64_t a1)
{
  *(void *)a1 = &unk_1F38ED1D8;
  *(void *)(a1 + 16) = &unk_1F38ED330;
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1E01BF140);
}

void CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::~CTCBeamSearchDecoder(uint64_t a1)
{
  *(void *)a1 = &unk_1F38ED1B0;
  *(void *)(a1 + 64) = &unk_1F38ED290;
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  *(void *)(a1 + 16) = &unk_1F38ED330;
  unint64_t v3 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1E01BF140);
}

void CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::~SpaceSegmentedPathBuilder(void *a1)
{
  *a1 = &unk_1F38ED290;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01BF140);
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::updateActivationProgression(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  double v4 = *(void **)(result + 16);
  double v5 = *(void **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(void *)a2)
    {
      if (++v4 == v5)
      {
        double v4 = *(void **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5 && *(unsigned char *)(result + 8) && *(double *)(a2 + 40) < a4)
  {
    *(void *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::updateActivationExtension(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  double v4 = *(void **)(result + 16);
  double v5 = *(void **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(void *)a2)
    {
      if (++v4 == v5)
      {
        double v4 = *(void **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5)
  {
    *(void *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::needsToBeCommitted(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  unint64_t v3 = *(void **)(a1 + 24);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        uint64_t v2 = *(void **)(a1 + 24);
        return 2 * (v2 != v3);
      }
    }
  }
  return 2 * (v2 != v3);
}

double CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::getCumulativeTokenScore(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 0.0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void *)(a2 + 56);
    if (v3 && a3 == 0) {
      return (*(double *)(a2 + 32) + *(double *)(v3 + 32)) * 0.5;
    }
  }
  return *(double *)(a2 + 32);
}

void *CoreRecognition::decoder::NGramCharLMBeamScorer<CoreRecognition::decoder::NGramState>::~NGramCharLMBeamScorer(void *a1)
{
  *a1 = &unk_1F38ED248;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void CoreRecognition::decoder::NGramCharLMBeamScorer<CoreRecognition::decoder::NGramState>::~NGramCharLMBeamScorer(void *a1)
{
  *a1 = &unk_1F38ED248;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  JUMPOUT(0x1E01BF140);
}

void CoreRecognition::decoder::NGramCharLMBeamScorer<CoreRecognition::decoder::NGramState>::createState()
{
}

uint64_t CoreRecognition::decoder::NGramCharLMBeamScorer<CoreRecognition::decoder::NGramState>::initializeState(uint64_t a1, void *a2, CFStringRef *a3)
{
  unint64_t v5 = *(int *)(a1 + 56);
  uint64_t v7 = a2[2];
  uint64_t v6 = (char *)a2[3];
  double v8 = a2 + 2;
  unint64_t v9 = (uint64_t)&v6[-v7] >> 2;
  if (v5 <= v9)
  {
    if (v5 < v9) {
      a2[3] = v7 + 4 * v5;
    }
  }
  else
  {
    unint64_t v10 = v5 - v9;
    uint64_t v11 = (uint64_t)(a2 + 4);
    uint64_t v12 = a2[4];
    if (v5 - v9 <= (v12 - (uint64_t)v6) >> 2)
    {
      float v23 = &v6[4 * v10];
      memset_pattern16(v6, &unk_1DD8CDD60, 4 * v10);
      a2[3] = v23;
    }
    else
    {
      if ((v5 & 0x80000000) != 0) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = v12 - v7;
      unint64_t v14 = (v12 - v7) >> 1;
      if (v14 <= v5) {
        unint64_t v14 = v5;
      }
      if (v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v11, v15);
      uint64_t v18 = v17;
      unint64_t v19 = (char *)a2[2];
      uint64_t v20 = (char *)a2[3];
      unint64_t v21 = &v16[4 * v9];
      memset_pattern16(v21, &unk_1DD8CDD60, 4 * v10);
      while (v20 != v19)
      {
        int v22 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v21 - 1) = v22;
        v21 -= 4;
      }
      a2[2] = v21;
      a2[3] = &v16[4 * v5];
      a2[4] = &v16[4 * v18];
      if (v19) {
        operator delete(v19);
      }
    }
  }
  uint64_t result = (uint64_t)*a3;
  if (*a3)
  {
    uint64_t result = CFStringGetLength((CFStringRef)result);
    if (result)
    {
      uint64_t result = CFStringGetLength(*a3);
      if (result >= 1)
      {
        uint64_t v25 = result;
        char v26 = 0;
        uint64_t v27 = a2[3];
        do
        {
          if (v27 == *v8) {
            return result;
          }
          CFIndex v28 = v25 - 1;
          uint64_t result = CFStringGetCharacterAtIndex(*a3, v25 - 1);
          int v29 = result;
          CFIndex v30 = v25 - 2;
          if ((unint64_t)v25 < 2)
          {
            --v25;
            if (v26) {
              goto LABEL_35;
            }
          }
          else
          {
            --v25;
            if ((result & 0xFC00) == 0xDC00)
            {
              uint64_t result = CFStringGetCharacterAtIndex(*a3, v30);
              uint64_t v25 = (result & 0xFC00) == 0xD800 ? v30 : v28;
              if ((result & 0xFC00) == 0xD800) {
                int v29 = v29 + (result << 10) - 56613888;
              }
            }
            if (v26) {
              goto LABEL_35;
            }
          }
          uint64_t result = CVNLPIsWhitespaceCharLMCodepoint();
          if ((result & 1) == 0)
          {
            uint64_t result = CVNLPIsDigitCharLMCodepoint();
            char v26 = 0;
            uint64_t v31 = 6;
            if (result) {
              uint64_t v31 = 5;
            }
            ++a2[v31];
            goto LABEL_36;
          }
LABEL_35:
          char v26 = 1;
LABEL_36:
          *(_DWORD *)(v27 - 4) = v29;
          v27 -= 4;
        }
        while (v25 > 0);
      }
    }
  }
  return result;
}

double CoreRecognition::decoder::NGramCharLMBeamScorer<CoreRecognition::decoder::NGramState>::expandState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a4 + 8) = 0;
  if (*(void *)(a1 + 64) == a5)
  {
    if (a4 != a2) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a4 + 16), *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
    }
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(a2 + 40);
  }
  else
  {
    double v8 = (void **)(a4 + 16);
    std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(a4 + 16), *(int *)(a1 + 56) + 1);
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(_DWORD **)(a2 + 24);
    if (*(int *)(a1 + 56) >= (unint64_t)(((uint64_t)v10 - v9) >> 2)) {
      uint64_t v11 = *(_DWORD **)(a2 + 16);
    }
    else {
      uint64_t v11 = (_DWORD *)(v9 + 4);
    }
    if (v10 != v11)
    {
      uint64_t v12 = (void *)(a4 + 32);
      unint64_t v13 = *(char **)(a4 + 24);
      do
      {
        if ((unint64_t)v13 >= *v12)
        {
          unint64_t v15 = (char *)*v8;
          uint64_t v16 = (v13 - (unsigned char *)*v8) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            goto LABEL_59;
          }
          uint64_t v18 = *v12 - (void)v15;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 32, v19);
            unint64_t v15 = *(char **)(a4 + 16);
            unint64_t v13 = *(char **)(a4 + 24);
          }
          else
          {
            uint64_t v20 = 0;
          }
          unint64_t v21 = &v20[4 * v16];
          *(_DWORD *)unint64_t v21 = *v11;
          unint64_t v14 = v21 + 4;
          while (v13 != v15)
          {
            int v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(void *)(a4 + 16) = v21;
          *(void *)(a4 + 24) = v14;
          *(void *)(a4 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = &v20[4 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v13 = *v11;
          unint64_t v14 = v13 + 4;
        }
        *(void *)(a4 + 24) = v14;
        ++v11;
        unint64_t v13 = v14;
      }
      while (v11 != v10);
    }
    int v23 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * a5);
    if (CVNLPIsWhitespaceCharLMCodepoint())
    {
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
    }
    else
    {
      int v24 = CVNLPIsDigitCharLMCodepoint();
      uint64_t v25 = *(void *)(a2 + 40);
      if (v24)
      {
        ++v25;
        uint64_t v26 = *(void *)(a2 + 48);
      }
      else
      {
        uint64_t v26 = *(void *)(a2 + 48) + 1;
      }
      *(void *)(a4 + 40) = v25;
      *(void *)(a4 + 48) = v26;
    }
    unint64_t v27 = *(void *)(a2 + 40);
    unint64_t v28 = *(void *)(a2 + 48) + v27;
    if (v28) {
      float v29 = (float)(v27 / v28);
    }
    else {
      float v29 = 0.0;
    }
    if (v29 <= *(float *)(a1 + 72)
      && (uint64_t)(*(void *)(a4 + 24) - *(void *)(a4 + 16)) >> 2 >= (unint64_t)*(int *)(a1 + 56))
    {
      LMLanguageModelConditionalProbability();
      double v31 = v30 * 2.30258509;
      if (*(double *)(a1 + 16) > v31) {
        double v31 = *(double *)(a1 + 16);
      }
      *(double *)(a4 + 8) = *(double *)(a1 + 8) * v31;
    }
    unint64_t v32 = *(void *)(a4 + 32);
    uint64_t v33 = *(char **)(a4 + 24);
    if ((unint64_t)v33 >= v32)
    {
      long long v35 = (char *)*v8;
      uint64_t v36 = (v33 - (unsigned char *)*v8) >> 2;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62) {
LABEL_59:
      }
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      uint64_t v38 = v32 - (void)v35;
      if (v38 >> 1 > v37) {
        unint64_t v37 = v38 >> 1;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 32, v39);
        long long v35 = *(char **)(a4 + 16);
        uint64_t v33 = *(char **)(a4 + 24);
      }
      else
      {
        unint64_t v40 = 0;
      }
      unint64_t v41 = &v40[4 * v36];
      unint64_t v42 = &v40[4 * v39];
      *(_DWORD *)unint64_t v41 = v23;
      long long v34 = v41 + 4;
      while (v33 != v35)
      {
        int v43 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v41 - 1) = v43;
        v41 -= 4;
      }
      *(void *)(a4 + 16) = v41;
      *(void *)(a4 + 24) = v34;
      *(void *)(a4 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v42;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v33 = v23;
      long long v34 = v33 + 4;
    }
    *(void *)(a4 + 24) = v34;
  }
  return *(double *)(a4 + 8);
}

void CoreRecognition::decoder::NGramState::~NGramState(CoreRecognition::decoder::NGramState *this)
{
  *(void *)this = &unk_1F38ECFE0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F38ECFE0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01BF140);
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    uint64_t v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (unsigned int *)&v6[4 * v8];
    begiuint64_t n = this->__begin_;
    end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *CoreRecognition::decoder::LSTMCharLMBeamScorer<CoreRecognition::decoder::LSTMCharLMState>::~LSTMCharLMBeamScorer(void *a1)
{
  *a1 = &unk_1F38ED200;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void CoreRecognition::decoder::LSTMCharLMBeamScorer<CoreRecognition::decoder::LSTMCharLMState>::~LSTMCharLMBeamScorer(void *a1)
{
  *a1 = &unk_1F38ED200;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  JUMPOUT(0x1E01BF140);
}

void CoreRecognition::decoder::LSTMCharLMBeamScorer<CoreRecognition::decoder::LSTMCharLMState>::createState()
{
}

void CoreRecognition::decoder::LSTMCharLMBeamScorer<CoreRecognition::decoder::LSTMCharLMState>::initializeState(uint64_t a1, uint64_t a2, CFStringRef *a3)
{
  int64_t v5 = (const void *)CVNLPLanguageModelWithStateCreate();
  if (*a3 && CFStringGetLength(*a3)) {
    CVNLPLanguageModelWithStateUpdateWithContext();
  }
  uint64_t v6 = *(const void **)(a2 + 16);
  *(void *)(a2 + 16) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1DD8A36A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

double CoreRecognition::decoder::LSTMCharLMBeamScorer<CoreRecognition::decoder::LSTMCharLMState>::expandState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a4 + 8) = 0;
  Copdouble y = CVNLPLanguageModelWithStateCreateCopy();
  uint64_t v9 = *(const void **)(a4 + 16);
  *(void *)(a4 + 16) = Copy;
  if (v9) {
    CFRelease(v9);
  }
  if (*(void *)(a1 + 56) == a5) {
    return *(double *)(a4 + 8);
  }
  int v11 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * a5);
  if ((v11 - 0x10000) >> 20)
  {
    CFIndex v13 = 1;
    unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * a5);
  }
  else
  {
    unsigned int v12 = ((v11 + 67043328) >> 10) - 10240;
    chars[1] = v11 & 0x3FF | 0xDC00;
    CFIndex v13 = 2;
  }
  chars[0] = v12;
  CFStringRef v14 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CF80], chars, v13);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v14);
  CVNLPLanguageModelWithStateConditionalProbability();
  float v16 = v15;
  CVNLPLanguageModelWithStateUpdateWithContext();
  double v17 = logf(v16);
  double v18 = *(double *)(a1 + 8);
  if (*(double *)(a1 + 16) > v17) {
    double v17 = *(double *)(a1 + 16);
  }
  double v10 = v18 * v17;
  *(double *)(a4 + 8) = v18 * v17;
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void sub_1DD8A37EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void CoreRecognition::decoder::LSTMCharLMState::~LSTMCharLMState(CoreRecognition::decoder::LSTMCharLMState *this)
{
  *(void *)this = &unk_1F38ED058;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  const void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F38ED058;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x1E01BF140);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01BEEF0](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_1DD8A3950(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  int64_t v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      CFIndex v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v12);
      uint64_t v8 = *(_DWORD **)v4;
      int64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      CFIndex v13 = 0;
    }
    CFStringRef v14 = &v13[4 * v9];
    float v15 = &v13[4 * v12];
    *(_DWORD *)CFStringRef v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int64_t v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void CoreRecognition::decoder::LatinArabicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::~LatinArabicMixedScriptPenaltyBeamScorer(void *a1)
{
  *a1 = &unk_1F38ED378;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01BF140);
}

BOOL CoreRecognition::decoder::LatinArabicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::isBadMixedScript(uint64_t a1, int a2, int a3)
{
  if (!a2 && a3 == 1) {
    return 1;
  }
  BOOL v3 = !a3 || a3 == 3;
  BOOL v4 = v3;
  if (a2 == 1 && v4) {
    return 1;
  }
  return a2 == 3 && a3 == 1;
}

BOOL CoreRecognition::decoder::LatinArabicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::shouldIgnoreScriptCode(uint64_t a1, int a2)
{
  return a2 == 2;
}

void CoreRecognition::decoder::LatinCyrillicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::~LatinCyrillicMixedScriptPenaltyBeamScorer(void *a1)
{
  *a1 = &unk_1F38ED378;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01BF140);
}

uint64_t CoreRecognition::decoder::LatinCyrillicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::isBadMixedScript(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F410DC08](a2, a3);
}

uint64_t CoreRecognition::decoder::LatinCyrillicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::shouldIgnoreScriptCode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F410DC68](a2);
}

void std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    BOOL v4 = (char *)v1[1];
    int64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        std::allocator<applesauce::CF::ObjectRef<_LXLexicon const*>>::destroy[abi:ne180100](v6);
      }
      while (v4 != v2);
      int64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<applesauce::CF::ObjectRef<_LXLexicon const*>>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t std::__split_buffer<applesauce::CF::ObjectRef<_LXLexicon const*>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    BOOL v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    std::allocator<applesauce::CF::ObjectRef<_LXLexicon const*>>::destroy[abi:ne180100](v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__init_with_size[abi:ne180100]<applesauce::CF::ObjectRef<_LXLexicon const*>*,applesauce::CF::ObjectRef<_LXLexicon const*>*>(void *result, CFTypeRef *a2, CFTypeRef *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(a4);
    uint64_t v7 = result;
    void *v6 = result;
    v6[1] = result;
    int v6[2] = &result[v8];
    if (a2 != a3)
    {
      uint64_t v9 = result;
      do
      {
        CFTypeRef v10 = *a2;
        if (*a2) {
          uint64_t result = CFRetain(*a2);
        }
        *v9++ = v10;
        ++a2;
        ++v7;
      }
      while (a2 != a3);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1DD8A3D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::~LexiconBeamScorer(uint64_t a1)
{
  *(void *)a1 = &unk_1F38ED168;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  BOOL v4 = (void **)(a1 + 24);
  std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::~LexiconBeamScorer(uint64_t a1)
{
  *(void *)a1 = &unk_1F38ED168;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1E01BF140);
}

void CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::createState()
{
}

void CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::initializeState(uint64_t a1, int64x2_t *a2, uint64_t a3)
{
  if (*(void *)a3 && CFStringGetLength(*(CFStringRef *)a3) && (v6.length = *(void *)(a3 + 16)) != 0)
  {
    v6.locatiouint64_t n = *(void *)(a3 + 8);
    CFStringRef v7 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFStringRef *)a3, v6);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  uint64_t v8 = *(CFTypeRef **)(a1 + 24);
  for (uint64_t i = *(CFTypeRef **)(a1 + 32); v8 != i; ++v8)
  {
    CFTypeRef v10 = *v8;
    if (*v8) {
      CFRetain(*v8);
    }
    uint64_t RootCursor = LXLexiconCreateRootCursor();
    unint64_t v12 = (const void *)RootCursor;
    if (cf)
    {
      CFIndex v13 = (const void *)LXCursorCreateByAdvancing();
      if (v12) {
        CFRelease(v12);
      }
    }
    else
    {
      CFIndex v13 = (const void *)RootCursor;
    }
    unint64_t v15 = a2[1].u64[1];
    unint64_t v14 = a2[2].u64[0];
    if (v15 >= v14)
    {
      uint64_t v17 = a2[1].i64[0];
      uint64_t v18 = (uint64_t)(v15 - v17) >> 3;
      if ((unint64_t)(v18 + 1) >> 61) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v14 - v17;
      uint64_t v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
        uint64_t v20 = v18 + 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      long long v34 = a2 + 2;
      if (v21) {
        unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v21);
      }
      else {
        uint64_t v22 = 0;
      }
      int v23 = (void *)(v21 + 8 * v18);
      unint64_t v24 = v21 + 8 * v22;
      unint64_t v33 = v24;
      std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::construct[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*>,applesauce::CF::ObjectRef<_LXCursor const*>&>(v23, v13);
      int v16 = v23 + 1;
      v32.i64[1] = (uint64_t)(v23 + 1);
      uint64_t v26 = (void *)a2[1].i64[0];
      uint64_t v25 = (void *)a2[1].i64[1];
      if (v25 == v26)
      {
        int64x2_t v28 = vdupq_n_s64((unint64_t)v25);
      }
      else
      {
        do
        {
          uint64_t v27 = *--v25;
          *--int v23 = v27;
          *uint64_t v25 = 0;
        }
        while (v25 != v26);
        int64x2_t v28 = a2[1];
        int v16 = (void *)v32.i64[1];
        unint64_t v24 = v33;
      }
      a2[1].i64[0] = (uint64_t)v23;
      a2[1].i64[1] = (uint64_t)v16;
      int64x2_t v32 = v28;
      uint64_t v29 = a2[2].i64[0];
      a2[2].i64[0] = v24;
      unint64_t v33 = v29;
      uint64_t v31 = v28.i64[0];
      std::__split_buffer<applesauce::CF::ObjectRef<_LXCursor const*>>::~__split_buffer((uint64_t)&v31);
    }
    else
    {
      std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::construct[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*>,applesauce::CF::ObjectRef<_LXCursor const*>&>((void *)a2[1].i64[1], v13);
      int v16 = (void *)(v15 + 8);
    }
    a2[1].i64[1] = (uint64_t)v16;
    if (v13) {
      CFRelease(v13);
    }
    if (v10) {
      CFRelease(v10);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1DD8A40A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

double CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 40) = *(void *)(a2 + 40);
  if (*(void *)(a1 + 80) == a5)
  {
    if (a4 == a2) {
      return 0.0;
    }
    uint64_t v8 = (void **)(a4 + 16);
    uint64_t v7 = *(void *)(a4 + 16);
    CFTypeRef v10 = *(const void ***)(a2 + 16);
    uint64_t v9 = *(const void ***)(a2 + 24);
    unint64_t v11 = v9 - v10;
    uint64_t v12 = *(void *)(a4 + 32);
    if (v11 <= (v12 - v7) >> 3)
    {
      unint64_t v52 = (*(void *)(a4 + 24) - v7) >> 3;
      if (v52 >= v11)
      {
        int v80 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *>(*(const void ***)(a2 + 16), *(const void ***)(a2 + 24), *(const void ***)(a4 + 16));
        for (uint64_t i = *(const void ***)(a4 + 24); i != v80; --i)
        {
          int v82 = *(i - 1);
          std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::destroy[abi:ne180100](v82);
        }
        *(void *)(a4 + 24) = v80;
      }
      else
      {
        uint64_t v53 = &v10[v52];
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *>(*(const void ***)(a2 + 16), v53, *(const void ***)(a4 + 16));
        int32x4_t v54 = *(void **)(a4 + 24);
        while (v53 != v9)
        {
          int32x4_t v55 = *v53++;
          std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::construct[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*>,applesauce::CF::ObjectRef<_LXCursor const*>&>(v54++, v55);
        }
        *(void *)(a4 + 24) = v54;
      }
    }
    else
    {
      if (v7)
      {
        uint64_t v13 = *(void *)(a4 + 24);
        unint64_t v14 = *(void **)(a4 + 16);
        if (v13 != v7)
        {
          do
          {
            unint64_t v15 = *(const void **)(v13 - 8);
            v13 -= 8;
            std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::destroy[abi:ne180100](v15);
          }
          while (v13 != v7);
          unint64_t v14 = *v8;
        }
        *(void *)(a4 + 24) = v7;
        operator delete(v14);
        uint64_t v12 = 0;
        CFTypeRef *v8 = 0;
        *(void *)(a4 + 24) = 0;
        *(void *)(a4 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = 0;
      }
      if ((char *)v9 - (char *)v10 < 0) {
        goto LABEL_118;
      }
      uint64_t v16 = v12 >> 2;
      if (v12 >> 2 <= v11) {
        uint64_t v16 = v9 - v10;
      }
      unint64_t v17 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v16;
      if (v17 >> 61) {
LABEL_118:
      }
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      uint64_t v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v17);
      uint64_t v19 = v18;
      *(void *)(a4 + 16) = v18;
      *(void *)(a4 + 24) = v18;
      *(void *)(a4 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = &v18[v20];
      if (v10 != v9)
      {
        unint64_t v21 = v18;
        do
        {
          uint64_t v22 = *v10++;
          std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::construct[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*>,applesauce::CF::ObjectRef<_LXCursor const*>&>(v21++, v22);
          ++v19;
        }
        while (v10 != v9);
      }
      *(void *)(a4 + 24) = v19;
    }
    return *(double *)(a4 + 8);
  }
  int v25 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * a5);
  if ((v25 - 0x10000) >> 20)
  {
    CFIndex v27 = 1;
    unsigned int v26 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * a5);
  }
  else
  {
    unsigned int v26 = ((v25 + 67043328) >> 10) - 10240;
    chars[1] = v25 & 0x3FF | 0xDC00;
    CFIndex v27 = 2;
  }
  chars[0] = v26;
  CFStringRef v28 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CF80], chars, v27);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v28);
  uint64_t v29 = *(void (**)(void))(a1 + 96);
  if (v29)
  {
    double v30 = (id)cf;
    v29();
    id v31 = (id)objc_claimAutoreleasedReturnValue();
    int64x2_t v32 = v31;
    if (v31) {
      CFRetain(v31);
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)chars, v32);

    CFTypeRef v33 = cf;
    CFTypeRef cf = *(CFTypeRef *)chars;
    *(void *)chars = v33;
    if (v33) {
      CFRelease(v33);
    }
  }
  if (*(void *)(a1 + 72) != a5 && !MEMORY[0x1E01BE8E0](cf))
  {
    unint64_t v56 = *(CFTypeRef **)(a2 + 16);
    for (unint64_t j = *(CFTypeRef **)(a2 + 24); v56 != j; ++v56)
    {
      CFTypeRef v58 = *v56;
      if (*v56) {
        CFRetain(*v56);
      }
      int32x4_t v59 = (const void *)LXCursorCreateByAdvancing();
      unint64_t v60 = v59;
      if (v59)
      {
        BOOL v62 = *(void **)(a4 + 24);
        unint64_t v61 = *(void *)(a4 + 32);
        if ((unint64_t)v62 >= v61)
        {
          uint64_t v64 = *(void *)(a4 + 16);
          uint64_t v65 = ((uint64_t)v62 - v64) >> 3;
          if ((unint64_t)(v65 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v66 = v61 - v64;
          uint64_t v67 = v66 >> 2;
          if (v66 >> 2 <= (unint64_t)(v65 + 1)) {
            uint64_t v67 = v65 + 1;
          }
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v68 = v67;
          }
          uint64_t v101 = a4 + 32;
          if (v68)
          {
            uint64_t v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v68);
          }
          else
          {
            uint64_t v70 = 0;
            uint64_t v69 = 0;
          }
          uint64_t v71 = &v70[8 * v69];
          unint64_t v100 = (unint64_t)v71;
          CFRetain(v60);
          unint64_t v72 = &v70[8 * v65];
          *(void *)unint64_t v72 = v60;
          unint64_t v63 = v72 + 8;
          v99.i64[1] = (uint64_t)(v72 + 8);
          unint64_t v74 = *(void **)(a4 + 16);
          uint16x8_t v73 = *(void **)(a4 + 24);
          if (v73 == v74)
          {
            int64x2_t v76 = vdupq_n_s64((unint64_t)v73);
          }
          else
          {
            do
            {
              uint64_t v75 = *--v73;
              *((void *)v72 - 1) = v75;
              v72 -= 8;
              *uint16x8_t v73 = 0;
            }
            while (v73 != v74);
            int64x2_t v76 = *(int64x2_t *)(a4 + 16);
            unint64_t v63 = (void *)v99.i64[1];
            uint64_t v71 = (char *)v100;
          }
          *(void *)(a4 + 16) = v72;
          *(void *)(a4 + 24) = v63;
          int64x2_t v99 = v76;
          unint64_t v77 = *(void *)(a4 + 32);
          *(void *)(a4 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v71;
          unint64_t v100 = v77;
          *(void *)chars = v76.i64[0];
          std::__split_buffer<applesauce::CF::ObjectRef<_LXCursor const*>>::~__split_buffer((uint64_t)chars);
        }
        else
        {
          CFRetain(v59);
          *BOOL v62 = v60;
          unint64_t v63 = v62 + 1;
        }
        *(void *)(a4 + 24) = v63;
        CFRelease(v60);
      }
      if (v58) {
        CFRelease(v58);
      }
    }
    if (CVNLPShouldUseLexiconContextLogProb())
    {
      unint64_t v78 = &CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::CONTEXT_LOG_PROB;
      {
        goto LABEL_107;
      }
      CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::CONTEXT_LOG_PROB = 0xC007F7427B73E391;
    }
    else
    {
      unint64_t v83 = *(CFTypeRef **)(a4 + 16);
      int v84 = *(CFTypeRef **)(a4 + 24);
      if (v83 != v84)
      {
        double v85 = log((double)(unint64_t)((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
        if (*(unsigned char *)(a1 + 88)) {
          double v86 = 0.0;
        }
        else {
          double v86 = -INFINITY;
        }
        double v87 = -v85;
        do
        {
          CFTypeRef v88 = *v83;
          if (*v83) {
            CFRetain(*v83);
          }
          LXCursorConditionalProbability();
          double v90 = v87 + v89 * 2.30258509;
          if (v86 <= v90) {
            double v91 = v86;
          }
          else {
            double v91 = v87 + v89 * 2.30258509;
          }
          if (v86 <= v90) {
            double v86 = v90;
          }
          if (v91 > -INFINITY)
          {
            long double v92 = exp(v91 - v86);
            double v86 = v86 + log1p(v92);
          }
          if (v88) {
            CFRelease(v88);
          }
          ++v83;
        }
        while (v83 != v84);
        goto LABEL_108;
      }
      unint64_t v78 = &CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::WORD_MIN_LOG_PROB;
      {
LABEL_107:
        double v86 = *(double *)v78;
LABEL_108:
        double v93 = *(double *)(a1 + 16);
        double v94 = *(double *)(a4 + 40);
        double v95 = v93 - v94;
        if (v86 >= v93 - v94) {
          double v95 = v86;
        }
        *(double *)(a4 + 40) = v94 + v95;
        if (v93 <= v95) {
          double v93 = v95;
        }
        double v51 = *(double *)(a1 + 8) * v93;
        *(double *)(a4 + 8) = v51;
        goto LABEL_113;
      }
      CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::WORD_MIN_LOG_PROB = 0xC04205966F2B4F12;
    }
    __cxa_guard_release(v79);
    goto LABEL_107;
  }
  uint64_t v34 = *(void *)(a1 + 24);
  for (uint64_t k = *(void *)(a1 + 32); v34 != k; v34 += 8)
  {
    uint64_t RootCursor = LXLexiconCreateRootCursor();
    uint64_t v37 = RootCursor;
    unint64_t v39 = *(uint64_t **)(a4 + 24);
    unint64_t v38 = *(void *)(a4 + 32);
    if ((unint64_t)v39 >= v38)
    {
      unint64_t v41 = *(void **)(a4 + 16);
      uint64_t v42 = v39 - v41;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 61) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v44 = v38 - (void)v41;
      if (v44 >> 2 > v43) {
        unint64_t v43 = v44 >> 2;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v43;
      }
      uint64_t v101 = a4 + 32;
      if (v45)
      {
        unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v45);
        unint64_t v41 = *(void **)(a4 + 16);
        unint64_t v39 = *(uint64_t **)(a4 + 24);
      }
      else
      {
        uint64_t v46 = 0;
      }
      uint64_t v47 = (uint64_t *)(v45 + 8 * v42);
      unint64_t v100 = v45 + 8 * v46;
      *uint64_t v47 = v37;
      v99.i64[1] = (uint64_t)(v47 + 1);
      if (v39 == v41)
      {
        unint64_t v40 = v47 + 1;
      }
      else
      {
        do
        {
          uint64_t v48 = *--v39;
          *--uint64_t v47 = v48;
          *unint64_t v39 = 0;
        }
        while (v39 != v41);
        unint64_t v40 = (void *)v99.i64[1];
      }
      int64x2_t v49 = *(int64x2_t *)(a4 + 16);
      *(void *)(a4 + 16) = v47;
      *(void *)(a4 + 24) = v40;
      int64x2_t v99 = v49;
      unint64_t v50 = *(void *)(a4 + 32);
      *(void *)(a4 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v100;
      unint64_t v100 = v50;
      *(void *)chars = v49.i64[0];
      std::__split_buffer<applesauce::CF::ObjectRef<_LXCursor const*>>::~__split_buffer((uint64_t)chars);
    }
    else
    {
      *unint64_t v39 = RootCursor;
      unint64_t v40 = v39 + 1;
    }
    *(void *)(a4 + 24) = v40;
  }
  *(void *)(a4 + 40) = 0;
  double v51 = *(double *)(a4 + 8);
LABEL_113:
  if (cf) {
    CFRelease(cf);
  }
  return v51;
}

void sub_1DD8A479C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void CoreRecognition::decoder::LexiconState::~LexiconState(CoreRecognition::decoder::LexiconState *this)
{
  *(void *)this = &unk_1F38ED030;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<applesauce::CF::ObjectRef<_LXCursor const*>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_1F38ED030;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<applesauce::CF::ObjectRef<_LXCursor const*>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1E01BF140);
}

void std::vector<applesauce::CF::ObjectRef<_LXCursor const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    BOOL v4 = (char *)v1[1];
    int64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        CFRange v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::destroy[abi:ne180100](v6);
      }
      while (v4 != v2);
      int64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void *std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::construct[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*>,applesauce::CF::ObjectRef<_LXCursor const*>&>(void *result, CFTypeRef cf)
{
  uint64_t v3 = result;
  if (cf) {
    uint64_t result = CFRetain(cf);
  }
  *uint64_t v3 = cf;
  return result;
}

uint64_t std::__split_buffer<applesauce::CF::ObjectRef<_LXCursor const*>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    BOOL v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::destroy[abi:ne180100](v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *>(const void **a1, const void **a2, const void **a3)
{
  if (a1 != a2)
  {
    int64_t v5 = a1;
    do
    {
      CFRange v6 = *a3;
      uint64_t v7 = *v5;
      *a3 = *v5;
      if (v7) {
        CFRetain(v7);
      }
      if (v6) {
        CFRelease(v6);
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

void *CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::~WordLMBeamScorer(void *a1)
{
  *a1 = &unk_1F38ED0F8;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  BOOL v4 = (const void *)a1[3];
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

void CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::~WordLMBeamScorer(void *a1)
{
  *a1 = &unk_1F38ED0F8;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  BOOL v4 = (const void *)a1[3];
  if (v4) {
    CFRelease(v4);
  }
  JUMPOUT(0x1E01BF140);
}

void CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::createState()
{
}

void CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::initializeState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a3 && CFStringGetLength(*(CFStringRef *)a3))
  {
    if (*(void *)a3 && CFStringGetLength(*(CFStringRef *)a3) && (v4.length = *(void *)(a3 + 8)) != 0)
    {
      v4.locatiouint64_t n = 0;
      CFStringRef v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFStringRef *)a3, v4);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v6, v5);
    }
    else
    {
      CFTypeRef v6 = 0;
    }
    CVNLPWordTokenIDsForString();
    if (v6) {
      CFRelease(v6);
    }
  }
}

void sub_1DD8A4D20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 - 40);
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

double CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::expandState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a4 + 8) = 0;
  if (a4 == a2)
  {
    uint64_t v9 = (void **)(a4 + 40);
  }
  else
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a4 + 16), *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
    uint64_t v9 = (void **)(a4 + 40);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a4 + 40), *(char **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
  }
  if (*(void *)(a1 + 72) == a5)
  {
    double result = *(double *)(a2 + 8);
    *(double *)(a4 + 8) = result;
  }
  else
  {
    if (*(void *)(a1 + 64) == a5)
    {
      CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::queryLanguageModelAndUpdateState(a1, (void *)a4, a5);
    }
    else
    {
      unint64_t v11 = *(void *)(a4 + 56);
      uint64_t v12 = *(uint64_t **)(a4 + 48);
      if ((unint64_t)v12 >= v11)
      {
        unint64_t v14 = (uint64_t *)*v9;
        uint64_t v15 = ((char *)v12 - (unsigned char *)*v9) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a4 + 56, v18);
          unint64_t v14 = *(uint64_t **)(a4 + 40);
          uint64_t v12 = *(uint64_t **)(a4 + 48);
        }
        else
        {
          uint64_t v19 = 0;
        }
        uint64_t v20 = (uint64_t *)&v19[8 * v15];
        unint64_t v21 = &v19[8 * v18];
        uint64_t *v20 = a5;
        uint64_t v13 = v20 + 1;
        while (v12 != v14)
        {
          uint64_t v22 = *--v12;
          *--uint64_t v20 = v22;
        }
        *(void *)(a4 + 40) = v20;
        *(void *)(a4 + 48) = v13;
        *(void *)(a4 + 56) = v21;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v12 = a5;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a4 + 48) = v13;
    }
    return *(double *)(a4 + 8);
  }
  return result;
}

double CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::finalizeState(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  if (!*(unsigned char *)(a1 + 80) && *(void *)(a2 + 40) != *(void *)(a2 + 48))
  {
    CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::queryLanguageModelAndUpdateState(a1, (void *)a2, *(void *)(a1 + 64));
    return *(double *)(a2 + 8);
  }
  return result;
}

void CoreRecognition::decoder::WordLMState::~WordLMState(CoreRecognition::decoder::WordLMState *this)
{
  *(void *)this = &unk_1F38ED008;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F38ED008;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1E01BF140);
}

void ___ZNK15CoreRecognition7decoder16WordLMBeamScorerINS0_11WordLMStateEE15initializeStateEPS2_RKNS0_7ContextE_block_invoke(uint64_t a1, void *a2, int TokenIDForString)
{
  id v5 = a2;
  if (!TokenIDForString)
  {
    id v20 = v5;
    CFTypeRef v6 = [v5 lowercaseString];
    TokenIDForString = LMLanguageModelGetTokenIDForString();

    id v5 = v20;
  }
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = (char *)v7[3];
  unint64_t v9 = v7[4];
  if ((unint64_t)v8 >= v9)
  {
    id v21 = v5;
    unint64_t v11 = (char *)v7[2];
    uint64_t v12 = (v8 - v11) >> 2;
    if ((unint64_t)(v12 + 1) >> 62) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = v9 - (void)v11;
    unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 1;
    if (v14 <= v12 + 1) {
      unint64_t v14 = v12 + 1;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v7 + 4), v15);
      unint64_t v11 = (char *)v7[2];
      uint64_t v8 = (char *)v7[3];
    }
    else
    {
      unint64_t v16 = 0;
    }
    uint64_t v17 = &v16[4 * v12];
    unint64_t v18 = &v16[4 * v15];
    *(_DWORD *)uint64_t v17 = TokenIDForString;
    CFTypeRef v10 = v17 + 4;
    while (v8 != v11)
    {
      int v19 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    v7[2] = v17;
    v7[3] = v10;
    v7[4] = v18;
    if (v11) {
      operator delete(v11);
    }
    id v5 = v21;
  }
  else
  {
    *(_DWORD *)uint64_t v8 = TokenIDForString;
    CFTypeRef v10 = v8 + 4;
  }
  v7[3] = v10;
}

void sub_1DD8A5114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::queryLanguageModelAndUpdateState(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = (char *)a2[5];
  CFTypeRef v6 = (char *)a2[6];
  if (v5 != v6)
  {
    if (*(void *)(a1 + 64) != a3)
    {
      unint64_t v9 = a2[7];
      if ((unint64_t)v6 >= v9)
      {
        uint64_t v11 = (v6 - v5) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = v9 - (void)v5;
        unint64_t v13 = (uint64_t)(v9 - (void)v5) >> 2;
        if (v13 <= v11 + 1) {
          unint64_t v13 = v11 + 1;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 7), v14);
          id v5 = (char *)a2[5];
          CFTypeRef v6 = (char *)a2[6];
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v16 = &v15[8 * v11];
        uint64_t v17 = &v15[8 * v14];
        *(void *)unint64_t v16 = a3;
        CFTypeRef v10 = v16 + 8;
        while (v6 != v5)
        {
          uint64_t v18 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v16 - 1) = v18;
          v16 -= 8;
        }
        a2[5] = v16;
        a2[6] = v10;
        a2[7] = v17;
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *(void *)CFTypeRef v6 = a3;
        CFTypeRef v10 = v6 + 8;
      }
      a2[6] = v10;
      id v5 = (char *)a2[5];
      CFTypeRef v6 = v10;
    }
    __p = 0;
    p_p = 0;
    v65[0] = 0;
    uint64_t v19 = v6 - v5;
    if (v6 != v5)
    {
      if (v19 < 0) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v65, v19 >> 3);
      p_p = __p;
      v65[0] = (char *)__p + 2 * v20;
    }
    BOOL v62 = a2;
    id v21 = (void *)a2[5];
    uint64_t v22 = (void *)a2[6];
    if (v21 == v22)
    {
      CFIndex v27 = p_p;
    }
    else
    {
      do
      {
        int v23 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * *v21);
        unsigned int v24 = v23 - 1114112;
        if ((v23 - 1114112) >= 0xFFF00000) {
          __int16 v25 = ((v23 + 67043328) >> 10) - 10240;
        }
        else {
          __int16 v25 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * *v21);
        }
        if (v24 >= 0xFFF00000) {
          __int16 v3 = v23 & 0x3FF | 0xDC00;
        }
        unsigned int v26 = p_p;
        if ((unint64_t)p_p >= v65[0])
        {
          CFStringRef v28 = __p;
          uint64_t v29 = (char *)p_p - (unsigned char *)__p;
          if ((char *)p_p - (unsigned char *)__p <= -3) {
            goto LABEL_97;
          }
          uint64_t v30 = v29 >> 1;
          if (v65[0] - (void)__p <= (unint64_t)((v29 >> 1) + 1)) {
            uint64_t v31 = v30 + 1;
          }
          else {
            uint64_t v31 = v65[0] - (void)__p;
          }
          if (v65[0] - (void)__p >= 0x7FFFFFFFFFFFFFFEuLL) {
            uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v32 = v31;
          }
          if (v32)
          {
            CFTypeRef v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v65, v32);
            CFStringRef v28 = __p;
            unsigned int v26 = p_p;
          }
          else
          {
            CFTypeRef v33 = 0;
          }
          uint64_t v34 = &v33[2 * v30];
          *(_WORD *)uint64_t v34 = v25;
          CFIndex v27 = v34 + 2;
          while (v26 != v28)
          {
            __int16 v35 = *--v26;
            *((_WORD *)v34 - 1) = v35;
            v34 -= 2;
          }
          __p = v34;
          p_p = v27;
          v65[0] = &v33[2 * v32];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          _WORD *p_p = v25;
          CFIndex v27 = v26 + 1;
        }
        p_p = v27;
        if (v24 >= 0xFFF00000)
        {
          if ((unint64_t)v27 >= v65[0])
          {
            uint64_t v37 = __p;
            uint64_t v38 = (char *)v27 - (unsigned char *)__p;
            if ((char *)v27 - (unsigned char *)__p < -2) {
LABEL_97:
            }
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            uint64_t v39 = v38 >> 1;
            if (v65[0] - (void)__p <= (unint64_t)((v38 >> 1) + 1)) {
              uint64_t v40 = v39 + 1;
            }
            else {
              uint64_t v40 = v65[0] - (void)__p;
            }
            if (v65[0] - (void)__p >= 0x7FFFFFFFFFFFFFFEuLL) {
              uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v41 = v40;
            }
            if (v41)
            {
              uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v65, v41);
              uint64_t v37 = __p;
              CFIndex v27 = p_p;
            }
            else
            {
              uint64_t v42 = 0;
            }
            unint64_t v43 = &v42[2 * v39];
            *(_WORD *)unint64_t v43 = v3;
            uint64_t v36 = v43 + 2;
            while (v27 != v37)
            {
              __int16 v44 = *--v27;
              *((_WORD *)v43 - 1) = v44;
              v43 -= 2;
            }
            __p = v43;
            p_p = v36;
            v65[0] = &v42[2 * v41];
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            _WORD *v27 = v3;
            uint64_t v36 = v27 + 1;
          }
          p_p = v36;
          CFIndex v27 = v36;
        }
        ++v21;
      }
      while (v21 != v22);
    }
    CFStringRef v45 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UniChar *)__p, ((char *)v27 - (unsigned char *)__p) >> 1);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v45);
    if (__p)
    {
      p_p = __p;
      operator delete(__p);
    }
    __p = 0;
    p_p = &__p;
    v65[0] = 0x2020000000;
    v65[1] = 0;
    if (*(double *)(a1 + 16) / 2.30258509 >= -15.654) {
      double v46 = *(double *)(a1 + 16) / 2.30258509;
    }
    else {
      double v46 = -15.654;
    }
    int TokenIDForString = LMLanguageModelGetTokenIDForString();
    if (TokenIDForString)
    {
      uint64_t v48 = (void **)(v62 + 2);
      LMLanguageModelConditionalProbability();
      if (v49 < v46) {
        double v49 = v46;
      }
      *((double *)p_p + 3) = v49;
      unint64_t v50 = v62[4];
      double v51 = (char *)v62[3];
      if ((unint64_t)v51 >= v50)
      {
        uint64_t v53 = (char *)*v48;
        uint64_t v54 = (v51 - (unsigned char *)*v48) >> 2;
        unint64_t v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 62) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v56 = v50 - (void)v53;
        if (v56 >> 1 > v55) {
          unint64_t v55 = v56 >> 1;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          CFTypeRef v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v62 + 4), v57);
          uint64_t v53 = (char *)v62[2];
          double v51 = (char *)v62[3];
        }
        else
        {
          CFTypeRef v58 = 0;
        }
        int32x4_t v59 = &v58[4 * v54];
        unint64_t v60 = &v58[4 * v57];
        *(_DWORD *)int32x4_t v59 = TokenIDForString;
        unint64_t v52 = v59 + 4;
        while (v51 != v53)
        {
          int v61 = *((_DWORD *)v51 - 1);
          v51 -= 4;
          *((_DWORD *)v59 - 1) = v61;
          v59 -= 4;
        }
        v62[2] = v59;
        v62[3] = v52;
        v62[4] = v60;
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(_DWORD *)double v51 = TokenIDForString;
        unint64_t v52 = v51 + 4;
      }
      v62[3] = v52;
    }
    else
    {
      CVNLPWordTokenIDsForString();
    }
    v62[6] = v62[5];
    *((double *)v62 + 1) = *(double *)(a1 + 8) * *((double *)p_p + 3) * 2.30258509;
    _Block_object_dispose(&__p, 8);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1DD8A568C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK15CoreRecognition7decoder16WordLMBeamScorerINS0_11WordLMStateEE32queryLanguageModelAndUpdateStateEPS2_m_block_invoke(uint64_t a1, void *a2, int TokenIDForString)
{
  id v20 = a2;
  if (TokenIDForString
    || ([v20 lowercaseString],
        id v5 = objc_claimAutoreleasedReturnValue(),
        int TokenIDForString = LMLanguageModelGetTokenIDForString(),
        v5,
        TokenIDForString))
  {
    LMLanguageModelConditionalProbability();
    if (v6 < *(double *)(a1 + 56)) {
      double v6 = *(double *)(a1 + 56);
    }
  }
  else
  {
    double v6 = *(double *)(a1 + 56);
  }
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6
                                                              + *(double *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v8 = (char *)v7[3];
  unint64_t v9 = v7[4];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = (char *)v7[2];
    uint64_t v12 = (v8 - v11) >> 2;
    if ((unint64_t)(v12 + 1) >> 62) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = v9 - (void)v11;
    unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 1;
    if (v14 <= v12 + 1) {
      unint64_t v14 = v12 + 1;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v7 + 4), v15);
      uint64_t v11 = (char *)v7[2];
      uint64_t v8 = (char *)v7[3];
    }
    else
    {
      unint64_t v16 = 0;
    }
    uint64_t v17 = &v16[4 * v12];
    uint64_t v18 = &v16[4 * v15];
    *(_DWORD *)uint64_t v17 = TokenIDForString;
    CFTypeRef v10 = v17 + 4;
    while (v8 != v11)
    {
      int v19 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    v7[2] = v17;
    v7[3] = v10;
    v7[4] = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v8 = TokenIDForString;
    CFTypeRef v10 = v8 + 4;
  }
  v7[3] = v10;
}

void sub_1DD8A5858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::~CTCGreedyDecoder()
{
}

void *std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::reserve(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    unint64_t v15 = result + 2;
    CFRange v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(a2);
    uint64_t v7 = *v2;
    double v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      uint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      uint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)double v6 = 0;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    void *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v13 = v10;
    uint64_t v11 = v2[2];
    v2[2] = &v4[8 * v5];
    unint64_t v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

void **std::vector<CoreRecognition::decoder::DecodingPath>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 40 * v6;
    std::vector<CoreRecognition::decoder::DecodingPath>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer(v7);
  }
  return result;
}

void sub_1DD8A59F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *,std::allocator<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    int64x2_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t CoreRecognition::decoder::BeamSearchState<CoreRecognition::decoder::CombinedBeamState>::~BeamSearchState(uint64_t a1)
{
  int64_t v3 = (void **)(a1 + 56);
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int64_t v3 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(*(void **)(a1 + 8));
  return a1;
}

void CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>::getReversePrefix(char **a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = a1 + 2;
  uint64_t v5 = (char *)operator new(8uLL);
  *(void *)uint64_t v5 = *a2;
  uint64_t v6 = v5 + 8;
  *uint64_t v4 = v5 + 8;
  uint64_t v7 = (void *)a2[7];
  *a1 = v5;
  for (a1[1] = v5 + 8; v7; uint64_t v6 = v8)
  {
    if ((unint64_t)v6 >= *v4)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = (v6 - *a1) >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = *v4 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v4, v13);
        uint64_t v9 = *a1;
        uint64_t v6 = a1[1];
      }
      else
      {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[8 * v10];
      *(void *)unint64_t v15 = *v7;
      uint64_t v8 = v15 + 8;
      while (v6 != v9)
      {
        uint64_t v16 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v15 - 1) = v16;
        v15 -= 8;
      }
      *a1 = v15;
      a1[1] = v8;
      a1[2] = &v14[8 * v13];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(void *)uint64_t v6 = *v7;
      uint64_t v8 = v6 + 8;
    }
    a1[1] = v8;
    uint64_t v7 = (void *)v7[7];
  }
}

void sub_1DD8A5C2C(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreRecognition::decoder::BeamSearchState<CoreRecognition::decoder::CombinedBeamState>::BeamSearchState(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  int64_t v3 = (uint64_t *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 7std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = 0;
  uint64_t v4 = a1 + 72;
  unint64_t v5 = a2 + 1;
  *(void *)(a1 + 80) = a2 + 1;
  if (a2 != -1)
  {
    if (v5 >= 0x276276276276277) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    v8[4] = v4;
    v8[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>(v5);
    v8[1] = v8[0];
    v8[2] = v8[0];
    void v8[3] = v8[0] + 104 * v6;
    std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__swap_out_circular_buffer(v3, v8);
    std::__split_buffer<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::~__split_buffer((uint64_t)v8);
  }
  return a1;
}

void sub_1DD8A5D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(*v9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 104);
      long long v9 = *(_OWORD *)(v2 + v5 - 88);
      long long v10 = *(_OWORD *)(v2 + v5 - 72);
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_OWORD *)(v6 - 7std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v10;
      *(_OWORD *)(v6 - 88) = v9;
      *(_OWORD *)(v6 - 104) = v8;
      *(void *)(v6 - 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 40) = &unk_1F38ED140;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 104;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v11 = *result;
  *double result = v4;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a1);
}

uint64_t std::__split_buffer<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    *(void *)(i - 40) = &unk_1F38ED140;
    uint64_t v5 = (void **)(i - 24);
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 40;
    do
    {
      uint64_t v6 = v4 - 104;
      *(void *)(v4 - 40) = &unk_1F38ED140;
      uint64_t v7 = (void **)(v4 - 24);
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&v7);
      v5 -= 104;
      uint64_t v4 = v6;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    *(void *)(v1 + 64) = &unk_1F38ED140;
    uint64_t v2 = (void **)(v1 + 80);
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1E01BF140);
  }
  return result;
}

void std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(*a1);
    std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[4];
    if (v2)
    {
      a1[5] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::reset[abi:ne180100]((uint64_t *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::__emplace_unique_key_args<std::vector<unsigned long>,std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *&>(uint64_t **a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  double result = std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::__find_equal<std::vector<unsigned long>>((uint64_t)a1, &v14, a2, a3);
  if (!*result)
  {
    long long v9 = (uint64_t **)result;
    long long v10 = operator new(0x40uLL);
    v10[2] = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    uint64_t v12 = *a5;
    *((void *)v10 + 6) = v11;
    *((void *)v10 + 7) = v12;
    uint64_t v13 = v14;
    return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, v13, v9, (uint64_t *)v10);
  }
  return result;
}

void *std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::__find_equal<std::vector<unsigned long>>(uint64_t a1, void *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6 = *(void **)(a1 + 8);
  double result = (void *)(a1 + 8);
  uint64_t v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v5;
        long long v8 = (unint64_t *)v5[4];
        long long v9 = (unint64_t *)v7[5];
        if (v8 != v9) {
          break;
        }
LABEL_11:
        if (a3 != a4)
        {
          unint64_t v15 = a3 + 1;
          while (v8 != v9)
          {
            unint64_t v16 = *v8;
            unint64_t v17 = *(v15 - 1);
            if (*v8 < v17) {
              break;
            }
            ++v8;
            if (v17 < v16 || v15++ == a4) {
              goto LABEL_26;
            }
          }
          double result = v7 + 1;
          uint64_t v5 = (void *)v7[1];
          if (v5) {
            continue;
          }
        }
        goto LABEL_26;
      }
      long long v10 = v8 + 1;
      uint64_t v11 = a3;
      while (v11 != a4)
      {
        unint64_t v12 = *v11;
        unint64_t v13 = *(v10 - 1);
        if (*v11 < v13) {
          break;
        }
        ++v11;
        if (v13 < v12 || v10++ == v9) {
          goto LABEL_11;
        }
      }
      uint64_t v5 = (void *)*v7;
      double result = v7;
    }
    while (*v7);
  }
  else
  {
    uint64_t v7 = result;
  }
LABEL_26:
  *a2 = v7;
  return result;
}

uint64_t CoreRecognition::decoder::ActivationPruning::pruneActivations(float **a1, uint64_t a2, uint64_t a3, float **a4)
{
  uint64_t v4 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    if (v5 >> 60) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = 16 * v5;
    long long v10 = (float *)operator new(16 * v5);
    uint64_t v11 = v10;
    uint64_t v12 = (uint64_t)&v10[4 * v5];
    unint64_t v13 = v10;
    do
    {
      *(void *)unint64_t v13 = 0;
      v13[2] = 0.0;
      v13 += 4;
    }
    while (v13 != (float *)v12);
    uint64_t v54 = a2;
    *uint64_t v4 = v10;
    v4[1] = (float *)v12;
    unint64_t v52 = v4;
    v4[2] = (float *)v12;
    uint64_t v14 = *a4;
    float v15 = *(float *)(a3 + 16);
    unint64_t v17 = *(float **)a3;
    unint64_t v16 = *(float **)(a3 + 8);
    if (*(float **)a3 == *a4)
    {
      uint64_t v18 = v10;
      unint64_t v17 = *a4;
      id v20 = v10;
    }
    else
    {
      uint64_t v18 = v10;
      int v19 = *(float **)(a3 + 8);
      id v20 = v10;
      do
      {
        float v21 = *v17;
        if (v19)
        {
          float v22 = *v19++;
          float v23 = v22;
          if (v21 > -0.0010005) {
            float v21 = -0.0010005;
          }
          unint64_t v16 = v19;
        }
        else
        {
          if (v21 > -0.0010005) {
            float v21 = -0.0010005;
          }
          float v23 = v15;
          float v15 = v15 + 1.0;
        }
        *(void *)id v20 = (unint64_t)v23;
        v20[2] = v21;
        ++v17;
        v20 += 4;
        v18 += 4;
      }
      while (v17 != v14 && v20 != (float *)v12);
    }
    uint64_t v24 = (char *)v18 - (char *)v10;
    uint64_t v25 = v24 >> 4;
    uint64_t v53 = v24;
    if (v24 >= 17)
    {
      unint64_t v26 = (unint64_t)(v25 - 2) >> 1;
      unint64_t v27 = v26 + 1;
      CFStringRef v28 = &v10[4 * v26];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::ActivationPruning::pruneActivations(CoreRecognition::decoder::detail::ActivationsIterator<float>,CoreRecognition::decoder::detail::ActivationsIterator<float>)::{lambda(std::pair<unsigned long,float> const&,std::pair<unsigned long,float> const&)#1} &,std::__wrap_iter<std::pair<unsigned long,float>*>>((uint64_t)v11, v25, v28);
        v28 -= 4;
        --v27;
      }
      while (v27);
    }
    if (v17 != v14)
    {
      uint64_t v29 = v16;
      do
      {
        float v30 = *v17;
        if (*v17 > -0.0010005) {
          float v30 = -0.0010005;
        }
        if (v30 > v11[2])
        {
          float v31 = v15;
          if (v29) {
            float v31 = *v29;
          }
          *(void *)uint64_t v11 = (unint64_t)v31;
          v11[2] = v30;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::ActivationPruning::pruneActivations(CoreRecognition::decoder::detail::ActivationsIterator<float>,CoreRecognition::decoder::detail::ActivationsIterator<float>)::{lambda(std::pair<unsigned long,float> const&,std::pair<unsigned long,float> const&)#1} &,std::__wrap_iter<std::pair<unsigned long,float>*>>((uint64_t)v11, v25, v11);
          uint64_t v29 = v16;
        }
        ++v17;
        if (v29) {
          unint64_t v16 = v29 + 1;
        }
        else {
          float v15 = v15 + 1.0;
        }
        if (v29) {
          ++v29;
        }
        else {
          uint64_t v29 = 0;
        }
      }
      while (v17 != v14);
    }
    if (v53 >= 17)
    {
      uint64_t v32 = (unint64_t)v53 >> 4;
      do
      {
        uint64_t v33 = 0;
        uint64_t v34 = *(void *)v11;
        float v35 = v11[2];
        uint64_t v36 = v32 - 2;
        if (v32 < 2) {
          uint64_t v36 = v32 - 1;
        }
        uint64_t v37 = v36 >> 1;
        uint64_t v38 = v11;
        do
        {
          uint64_t v39 = v38;
          v38 += 4 * v33 + 4;
          uint64_t v40 = 2 * v33;
          uint64_t v33 = (2 * v33) | 1;
          uint64_t v41 = v40 + 2;
          if (v41 < v32 && v38[2] > v38[6])
          {
            v38 += 4;
            uint64_t v33 = v41;
          }
          *(void *)uint64_t v39 = *(void *)v38;
          v39[2] = v38[2];
        }
        while (v33 <= v37);
        if (v20 - 4 == v38)
        {
          *(void *)uint64_t v38 = v34;
        }
        else
        {
          *(void *)uint64_t v38 = *((void *)v20 - 2);
          v38[2] = *(v20 - 2);
          *((void *)v20 - std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v34;
          *(v20 - std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v35;
          uint64_t v42 = (char *)v38 - (char *)v11 + 16;
          if (v42 < 17) {
            goto LABEL_55;
          }
          unint64_t v43 = (((unint64_t)v42 >> 4) - 2) >> 1;
          float v44 = v11[4 * v43 + 2];
          float v35 = v38[2];
          if (v44 <= v35) {
            goto LABEL_55;
          }
          uint64_t v45 = *(void *)v38;
          do
          {
            double v46 = v38;
            uint64_t v38 = &v11[4 * v43];
            *(void *)double v46 = *(void *)v38;
            v46[2] = v44;
            if (!v43) {
              break;
            }
            unint64_t v43 = (v43 - 1) >> 1;
            float v44 = v11[4 * v43 + 2];
          }
          while (v44 > v35);
          *(void *)uint64_t v38 = v45;
        }
        v38[2] = v35;
LABEL_55:
        v20 -= 4;
      }
      while (v32-- > 2);
    }
    float v48 = *(float *)v54;
    if (*(unsigned char *)(v54 + 16))
    {
      float v49 = expf(v48);
      float v50 = 0.0;
      uint64_t v4 = v52;
      while (v50 <= v49)
      {
        float v50 = v50 + expf(v11[2]);
        v11 += 4;
        v9 -= 16;
        if (!v9) {
          goto LABEL_65;
        }
      }
    }
    else
    {
      uint64_t v4 = v52;
      while (v11[2] >= v48)
      {
        v11 += 4;
        v9 -= 16;
        if (!v9)
        {
LABEL_65:
          uint64_t v11 = (float *)v12;
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  return std::vector<std::pair<unsigned long,float>>::erase((uint64_t)v4, (uint64_t)v11, v12);
}

unint64_t CoreRecognition::decoder::BeamSearchQueue<CoreRecognition::decoder::CombinedBeamState>::getFreeCandidate(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v3 - v2) >> 3);
  if (v5 >= a1[3])
  {
    std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(v2, v3, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v3 - v2) >> 3));
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)(a1[1] - 24));
    unint64_t v7 = a1[1];
  }
  else
  {
    unint64_t v6 = a1[2];
    if (v3 >= v6)
    {
      unint64_t v8 = v5 + 1;
      if (v5 + 1 > 0x276276276276276) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - v2) >> 3);
      if (2 * v9 > v8) {
        unint64_t v8 = 2 * v9;
      }
      if (v9 >= 0x13B13B13B13B13BLL) {
        unint64_t v10 = 0x276276276276276;
      }
      else {
        unint64_t v10 = v8;
      }
      void v14[4] = a1 + 2;
      if (v10) {
        unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>(v10);
      }
      else {
        uint64_t v11 = 0;
      }
      unint64_t v12 = v10 + 104 * v5;
      v14[0] = v10;
      v14[1] = v12;
      void v14[3] = v10 + 104 * v11;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)unint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(void *)(v12 + 64) = &unk_1F38ED140;
      *(void *)(v12 + 88) = 0;
      *(void *)(v12 + 96) = 0;
      *(void *)(v12 + 80) = 0;
      v14[2] = v12 + 104;
      std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__swap_out_circular_buffer(a1, v14);
      unint64_t v7 = a1[1];
      std::__split_buffer<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::~__split_buffer((uint64_t)v14);
    }
    else
    {
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)unint64_t v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(void *)(v3 + 64) = &unk_1F38ED140;
      *(void *)(v3 + 88) = 0;
      *(void *)(v3 + 96) = 0;
      *(void *)(v3 + 80) = 0;
      unint64_t v7 = v3 + 104;
    }
    a1[1] = v7;
  }
  return v7 - 104;
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    v31[11] = v3;
    v31[12] = v4;
    uint64_t v8 = 0;
    long long v26 = *(_OWORD *)(a1 + 32);
    long long v27 = *(_OWORD *)(a1 + 48);
    long long v24 = *(_OWORD *)a1;
    long long v25 = *(_OWORD *)(a1 + 16);
    uint64_t v28 = *(void *)(a1 + 72);
    long long v29 = *(_OWORD *)(a1 + 80);
    uint64_t v30 = *(void *)(a1 + 96);
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 80) = 0;
    int64_t v9 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v10 = a1;
    do
    {
      uint64_t v11 = v10;
      uint64_t v12 = v8 + 1;
      v10 += 104 * (v8 + 1);
      uint64_t v13 = 2 * v8;
      uint64_t v8 = (2 * v8) | 1;
      uint64_t v14 = v13 + 2;
      if (v14 < a3
        && *(double *)(v11 + 104 * v12 + 32) + *(double *)(v11 + 104 * v12 + 48) > *(double *)(v10 + 136)
                                                                                 + *(double *)(v10 + 152))
      {
        v10 += 104;
        uint64_t v8 = v14;
      }
      long long v15 = *(_OWORD *)v10;
      long long v16 = *(_OWORD *)(v10 + 16);
      long long v17 = *(_OWORD *)(v10 + 48);
      *(_OWORD *)(v11 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = *(_OWORD *)(v10 + 32);
      *(_OWORD *)(v11 + 48) = v17;
      *(_OWORD *)uint64_t v11 = v15;
      *(_OWORD *)(v11 + 16) = v16;
      *(void *)(v11 + 7std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = *(void *)(v10 + 72);
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate((uint64_t *)(v11 + 80));
      uint64_t v18 = (uint64_t *)(v10 + 80);
      *(_OWORD *)(v11 + 80) = *(_OWORD *)(v10 + 80);
      *(void *)(v11 + 96) = *(void *)(v10 + 96);
      *(void *)(v10 + 80) = 0;
      *(void *)(v10 + 88) = 0;
      *(void *)(v10 + 96) = 0;
    }
    while (v8 <= v9);
    int v19 = (long long *)(a2 - 104);
    if (a2 - 104 == v10)
    {
      *(_OWORD *)(v10 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v26;
      *(_OWORD *)(v10 + 48) = v27;
      *(_OWORD *)uint64_t v10 = v24;
      *(_OWORD *)(v10 + 16) = v25;
      *(void *)(v10 + 7std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v28;
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate(v18);
      *(_OWORD *)(v10 + 80) = v29;
      *(void *)(v10 + 96) = v30;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
    }
    else
    {
      long long v20 = *v19;
      long long v21 = *(_OWORD *)(a2 - 88);
      long long v22 = *(_OWORD *)(a2 - 56);
      *(_OWORD *)(v10 + 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = *(_OWORD *)(a2 - 72);
      *(_OWORD *)(v10 + 48) = v22;
      *(_OWORD *)uint64_t v10 = v20;
      *(_OWORD *)(v10 + 16) = v21;
      *(void *)(v10 + 7std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = *(void *)(a2 - 32);
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate(v18);
      float v23 = (void *)(a2 - 24);
      *(_OWORD *)(v10 + 80) = *(_OWORD *)(a2 - 24);
      *(void *)(v10 + 96) = *(void *)(a2 - 8);
      *float v23 = 0;
      v23[1] = 0;
      void v23[2] = 0;
      *(_OWORD *)(a2 - 7std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v26;
      *(_OWORD *)(a2 - 56) = v27;
      *int v19 = v24;
      *(_OWORD *)(a2 - 88) = v25;
      *(void *)(a2 - 3std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v28;
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate((uint64_t *)(a2 - 24));
      *(_OWORD *)float v23 = v29;
      *(void *)(a2 - 8) = v30;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(a1, v10 + 104, 0x4EC4EC4EC4EC4EC5 * ((v10 + 104 - a1) >> 3));
    }
    v31[0] = (void **)&v29;
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](v31);
  }
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a3 - 2;
  if (a3 >= 2)
  {
    v20[11] = v3;
    v20[12] = v4;
    unint64_t v7 = v5 >> 1;
    if (*(double *)(a1 + 104 * (v5 >> 1) + 32) + *(double *)(a1 + 104 * (v5 >> 1) + 48) > *(double *)(a2 - 72)
                                                                                         + *(double *)(a2 - 56))
    {
      uint64_t v8 = (long long *)(a2 - 104);
      long long v15 = *(_OWORD *)(a2 - 72);
      long long v16 = *(_OWORD *)(a2 - 56);
      long long v13 = *(_OWORD *)(a2 - 104);
      long long v14 = *(_OWORD *)(a2 - 88);
      uint64_t v17 = *(void *)(a2 - 32);
      long long v18 = *(_OWORD *)(a2 - 24);
      uint64_t v19 = *(void *)(a2 - 8);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      do
      {
        int64_t v9 = v8;
        uint64_t v8 = (long long *)(a1 + 104 * v7);
        long long v10 = *v8;
        long long v11 = v8[1];
        long long v12 = v8[3];
        v9[2] = v8[2];
        void v9[3] = v12;
        *int64_t v9 = v10;
        v9[1] = v11;
        *((void *)v9 + 9) = *((void *)v8 + 9);
        std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate((uint64_t *)v9 + 10);
        v9[5] = v8[5];
        *((void *)v9 + 1std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = *((void *)v8 + 12);
        *((void *)v8 + 11) = 0;
        *((void *)v8 + 10) = 0;
        *((void *)v8 + 1std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = 0;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
      }
      while (*(double *)(a1 + 104 * v7 + 32) + *(double *)(a1 + 104 * v7 + 48) > *(double *)&v15 + *(double *)&v16);
      v8[2] = v15;
      void v8[3] = v16;
      long long *v8 = v13;
      v8[1] = v14;
      *((void *)v8 + 9) = v17;
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate((uint64_t *)v8 + 10);
      void v8[5] = v18;
      *((void *)v8 + 1std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100]((uint64_t *)this + 2) = v19;
      long long v18 = 0uLL;
      uint64_t v19 = 0;
      v20[0] = (void **)&v18;
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](v20);
    }
  }
}

void std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState>*,std::shared_ptr<CoreRecognition::decoder::BaseState>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = (void *)*a1;
  if (a4 > (a1[2] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate(a1);
    if (a4 >> 60) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = a1[2] - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vallocate[abi:ne180100](a1, v11);
    for (uint64_t i = (uint64_t *)a1[1]; v6 != a3; v6 += 2)
    {
      uint64_t v13 = v6[1];
      *uint64_t i = *v6;
      i[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
LABEL_18:
    a1[1] = (uint64_t)i;
    return;
  }
  unint64_t v14 = (a1[1] - (uint64_t)v8) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState> *,std::shared_ptr<CoreRecognition::decoder::BaseState> *,std::shared_ptr<CoreRecognition::decoder::BaseState> *>(a2, v15, v8);
    for (uint64_t i = (uint64_t *)a1[1]; v15 != a3; v15 += 2)
    {
      uint64_t v16 = v15[1];
      *uint64_t i = *v15;
      i[1] = v16;
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
    goto LABEL_18;
  }
  uint64_t v17 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState> *,std::shared_ptr<CoreRecognition::decoder::BaseState> *,std::shared_ptr<CoreRecognition::decoder::BaseState> *>(a2, a3, v8);
  for (unint64_t j = (void *)a1[1]; j != v17; j -= 2)
  {
    uint64_t v19 = (std::__shared_weak_count *)*(j - 1);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  a1[1] = (uint64_t)v17;
}

char *std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState> *,std::shared_ptr<CoreRecognition::decoder::BaseState> *,std::shared_ptr<CoreRecognition::decoder::BaseState> *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>,std::back_insert_iterator<std::vector<unsigned long>>,0>(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    uint64_t v6 = (void *)(a3 + 16);
    uint64_t v7 = *(void **)(a3 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v9 = *(void **)a3;
        uint64_t v10 = ((uint64_t)v7 - *(void *)a3) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = *v6 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v6, v13);
          uint64_t v9 = *(void **)a3;
          uint64_t v7 = *(void **)(a3 + 8);
        }
        else
        {
          unint64_t v14 = 0;
        }
        long long v15 = &v14[8 * v10];
        *(void *)long long v15 = *v5;
        uint64_t v8 = v15 + 8;
        while (v7 != v9)
        {
          uint64_t v16 = *--v7;
          *((void *)v15 - 1) = v16;
          v15 -= 8;
        }
        *(void *)a3 = v15;
        *(void *)(a3 + 8) = v8;
        *(void *)(a3 + 16) = &v14[8 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        void *v7 = *v5;
        uint64_t v8 = v7 + 1;
      }
      *(void *)(a3 + 8) = v8;
      ++v5;
      uint64_t v7 = v8;
    }
    while (v5 != a2);
  }
}

void *std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::find<std::vector<unsigned long>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = *(void **)(a1 + 8);
  double result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = result;
    do
    {
      if (a2 == a3)
      {
LABEL_12:
        uint64_t v6 = v4;
      }
      else
      {
        uint64_t v7 = (unint64_t *)v4[4];
        uint64_t v8 = a2 + 1;
        while (v7 != (unint64_t *)v4[5])
        {
          unint64_t v9 = *v7;
          unint64_t v10 = *(v8 - 1);
          if (*v7 < v10) {
            break;
          }
          ++v7;
          if (v10 < v9 || v8++ == a3) {
            goto LABEL_12;
          }
        }
        ++v4;
      }
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
    if (result != v6)
    {
      uint64_t v13 = v6[4];
      uint64_t v12 = v6[5];
      if (v13 == v12)
      {
        return v6;
      }
      else
      {
        for (uint64_t i = v13 + 8; a2 != a3; i += 8)
        {
          unint64_t v15 = *a2;
          unint64_t v16 = *(void *)(i - 8);
          if (*a2 < v16) {
            break;
          }
          ++a2;
          if (v16 < v15 || i == v12) {
            return v6;
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::vector<std::pair<unsigned long,float>>::erase(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *(void *)(result + 8);
    if (a3 != v3)
    {
      uint64_t v4 = 16 * ((a3 - a2) >> 4);
      do
      {
        *(void *)a2 = *(void *)(a2 + v4);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + v4 + 8);
        a2 += 16;
      }
      while (a2 + v4 != v3);
    }
    *(void *)(result + 8) = a2;
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::ActivationPruning::pruneActivations(CoreRecognition::decoder::detail::ActivationsIterator<float>,CoreRecognition::decoder::detail::ActivationsIterator<float>)::{lambda(std::pair<unsigned long,float> const&,std::pair<unsigned long,float> const&)#1} &,std::__wrap_iter<std::pair<unsigned long,float>*>>(uint64_t result, uint64_t a2, float *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      uint64_t v5 = v3 >> 3;
      uint64_t v6 = (v3 >> 3) | 1;
      uint64_t v7 = (float *)(result + 16 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2 && v7[2] > v7[6])
      {
        v7 += 4;
        uint64_t v6 = v8;
      }
      float v9 = v7[2];
      float v10 = a3[2];
      if (v9 <= v10)
      {
        uint64_t v11 = *(void *)a3;
        do
        {
          uint64_t v12 = a3;
          a3 = v7;
          *(void *)uint64_t v12 = *(void *)v7;
          v12[2] = v9;
          if (v4 < v6) {
            break;
          }
          uint64_t v13 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (float *)(result + 16 * v6);
          uint64_t v14 = v13 + 2;
          if (v14 < a2 && v7[2] > v7[6])
          {
            v7 += 4;
            uint64_t v6 = v14;
          }
          float v9 = v7[2];
        }
        while (v9 <= v10);
        *(void *)a3 = v11;
        a3[2] = v10;
      }
    }
  }
  return result;
}

char *std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__init_with_size[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState>*,std::shared_ptr<CoreRecognition::decoder::BaseState>*>(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vallocate[abi:ne180100](result, a4);
    for (uint64_t i = (void *)*((void *)v6 + 1); a2 != a3; a2 += 2)
    {
      *uint64_t i = *a2;
      uint64_t v8 = a2[1];
      i[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
    *((void *)v6 + 1) = i;
  }
  return result;
}

void sub_1DD8A72AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::decode(CoreRecognition::decoder::ActivationMatrix const&,CoreRecognition::decoder::Context const&)::{lambda(CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*)#1} &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>**>>(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      uint64_t v5 = v3 >> 2;
      uint64_t v6 = (v3 >> 2) | 1;
      uint64_t v7 = (void *)(result + 8 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2
        && *(double *)(*v7 + 32) + *(double *)(*v7 + 48) > *(double *)(v7[1] + 32) + *(double *)(v7[1] + 48))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v9 = *v7;
      uint64_t v10 = *a3;
      double v11 = *(double *)(*a3 + 32) + *(double *)(*a3 + 48);
      if (*(double *)(*v7 + 32) + *(double *)(*v7 + 48) <= v11)
      {
        do
        {
          *a3 = v9;
          a3 = v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v12 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (void *)(result + 8 * v6);
          uint64_t v13 = v12 + 2;
          if (v13 < a2
            && *(double *)(*v7 + 32) + *(double *)(*v7 + 48) > *(double *)(v7[1] + 32) + *(double *)(v7[1] + 48))
          {
            ++v7;
            uint64_t v6 = v13;
          }
          uint64_t v9 = *v7;
        }
        while (*(double *)(*v7 + 32) + *(double *)(*v7 + 48) <= v11);
        *a3 = v10;
      }
    }
  }
  return result;
}

uint64_t sub_1DD8A73D0()
{
  return MEMORY[0x1F40E32B0]();
}

uint64_t sub_1DD8A73E0()
{
  return MEMORY[0x1F40E3380]();
}

uint64_t sub_1DD8A73F0()
{
  return MEMORY[0x1F40E33E8]();
}

uint64_t sub_1DD8A7400()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t sub_1DD8A7410()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1DD8A7420()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_1DD8A7430()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1DD8A7440()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t sub_1DD8A7450()
{
  return MEMORY[0x1F4183730]();
}

uint64_t sub_1DD8A7460()
{
  return MEMORY[0x1F40E6088]();
}

uint64_t sub_1DD8A7470()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1DD8A7480()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1DD8A7490()
{
  return MEMORY[0x1F4183938]();
}

uint64_t sub_1DD8A74A0()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1DD8A74B0()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t sub_1DD8A74C0()
{
  return MEMORY[0x1F4183A50]();
}

uint64_t sub_1DD8A74D0()
{
  return MEMORY[0x1F4183A78]();
}

uint64_t sub_1DD8A74E0()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_1DD8A74F0()
{
  return MEMORY[0x1F4183AD8]();
}

uint64_t sub_1DD8A7500()
{
  return MEMORY[0x1F4183AE0]();
}

uint64_t sub_1DD8A7510()
{
  return MEMORY[0x1F4183AF0]();
}

uint64_t sub_1DD8A7520()
{
  return MEMORY[0x1F4183AF8]();
}

uint64_t sub_1DD8A7530()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_1DD8A7540()
{
  return MEMORY[0x1F4183B20]();
}

uint64_t sub_1DD8A7550()
{
  return MEMORY[0x1F4183B58]();
}

uint64_t sub_1DD8A7560()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_1DD8A7570()
{
  return MEMORY[0x1F4183CF0]();
}

uint64_t sub_1DD8A7580()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_1DD8A7590()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_1DD8A75A0()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1DD8A75B0()
{
  return MEMORY[0x1F4184720]();
}

uint64_t sub_1DD8A75C0()
{
  return MEMORY[0x1F4184730]();
}

uint64_t sub_1DD8A75D0()
{
  return MEMORY[0x1F4184770]();
}

uint64_t sub_1DD8A75E0()
{
  return MEMORY[0x1F4184778]();
}

uint64_t sub_1DD8A75F0()
{
  return MEMORY[0x1F4184780]();
}

uint64_t sub_1DD8A7600()
{
  return MEMORY[0x1F4184790]();
}

uint64_t sub_1DD8A7610()
{
  return MEMORY[0x1F40E6BB0]();
}

uint64_t sub_1DD8A7620()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t sub_1DD8A7630()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t sub_1DD8A7640()
{
  return MEMORY[0x1F4184978]();
}

uint64_t sub_1DD8A7660()
{
  return MEMORY[0x1F4184CE0]();
}

uint64_t sub_1DD8A7670()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1DD8A7680()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1DD8A7690()
{
  return MEMORY[0x1F4184E70]();
}

uint64_t sub_1DD8A76A0()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_1DD8A76B0()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_1DD8A76C0()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t sub_1DD8A76D0()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_1DD8A76E0()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_1DD8A76F0()
{
  return MEMORY[0x1F41852B0]();
}

uint64_t sub_1DD8A7700()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1DD8A7710()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1DD8A7720()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1DD8A7730()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1DD8A7740()
{
  return MEMORY[0x1F4185740]();
}

uint64_t sub_1DD8A7750()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1DD8A7760()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1DD8A7770()
{
  return MEMORY[0x1F4185B90]();
}

uint64_t sub_1DD8A7780()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t sub_1DD8A7790()
{
  return MEMORY[0x1F4185D10]();
}

uint64_t sub_1DD8A77A0()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1DD8A77B0()
{
  return MEMORY[0x1F4185E98]();
}

uint64_t sub_1DD8A77C0()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1DD8A77D0()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1DD8A77E0()
{
  return MEMORY[0x1F4186110]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8460](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.length = v2;
  result.locatiouint64_t n = v1;
  return result;
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F0](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D9970](space, components);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1F40D99A8](red, green, blue, alpha);
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1F40D99B0](red, green, blue, alpha);
}

void CGColorRelease(CGColorRef color)
{
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF0]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextAddRects(CGContextRef c, const CGRect *rects, size_t count)
{
}

void CGContextBeginPath(CGContextRef c)
{
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetGrayFillColor(CGContextRef c, CGFloat gray, CGFloat alpha)
{
}

void CGContextSetGrayStrokeColor(CGContextRef c, CGFloat gray, CGFloat alpha)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetTextDrawingMode(CGContextRef c, CGTextDrawingMode mode)
{
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9758](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1F40E9760](idst);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

void CGImageRelease(CGImageRef image)
{
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9938](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9968](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E99C8](url, options);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddLines(CGMutablePathRef path, const CGAffineTransform *m, const CGPoint *points, size_t count)
{
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x1F40DB008](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1F40DB010](path);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB068]();
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  MEMORY[0x1F40DB0F0](path);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1F40DB228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB230]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1F40DB238]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2B8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x1F40DB2C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB2D0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB310]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

CFDictionaryRef CMCopyDictionaryOfAttachments(CFAllocatorRef allocator, CMAttachmentBearerRef target, CMAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1F40DBB70](allocator, target, *(void *)&attachmentMode);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return (CVImageBufferRef)MEMORY[0x1F40DBDC8](sbuf);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1F40DF390](name, matrix, size);
}

CGFloat CTFontGetSize(CTFontRef font)
{
  MEMORY[0x1F40DF558](font);
  return result;
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1F40DF6E0](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1F40DF6E8](attrString);
}

uint64_t CVNLPCodepointToScriptCode()
{
  return MEMORY[0x1F410DBF8]();
}

uint64_t CVNLPIsDigitCharLMCodepoint()
{
  return MEMORY[0x1F410DC00]();
}

uint64_t CVNLPIsWhitespaceCharLMCodepoint()
{
  return MEMORY[0x1F410DC10]();
}

uint64_t CVNLPIsWordSeparatorForLexicon()
{
  return MEMORY[0x1F410DC18]();
}

uint64_t CVNLPLanguageModelCreate()
{
  return MEMORY[0x1F410DC20]();
}

uint64_t CVNLPLanguageModelLogConditionalProbabilityForTokenString()
{
  return MEMORY[0x1F410DC28]();
}

uint64_t CVNLPLanguageModelLogJointProbability()
{
  return MEMORY[0x1F410DC30]();
}

uint64_t CVNLPLanguageModelWithStateConditionalProbability()
{
  return MEMORY[0x1F410DC38]();
}

uint64_t CVNLPLanguageModelWithStateCreate()
{
  return MEMORY[0x1F410DC40]();
}

uint64_t CVNLPLanguageModelWithStateCreateCopy()
{
  return MEMORY[0x1F410DC48]();
}

uint64_t CVNLPLanguageModelWithStateUpdateWithContext()
{
  return MEMORY[0x1F410DC50]();
}

uint64_t CVNLPLogGeneralFault()
{
  return MEMORY[0x1F410DC58]();
}

uint64_t CVNLPNormalizeCodepointForCharLM()
{
  return MEMORY[0x1F410DC60]();
}

uint64_t CVNLPShouldUseLexiconContextLogProb()
{
  return MEMORY[0x1F410DC70]();
}

uint64_t CVNLPWordTokenIDsForString()
{
  return MEMORY[0x1F410DC78]();
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFCE0](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFD00](allocator, width, height, *(void *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFD08](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1F40DFD28](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1F40DFD30](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD40](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD48](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD68](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD70](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1F40DFD78](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD80](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD88](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD98](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFDA0](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFDB0](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1F40DFDB8](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1F40DFE40](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1F40DFE48](pixelBuffer, unlockFlags);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9440](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E94F8](buffer);
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1F412A878]();
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x1F412A148]();
}

uint64_t LMLanguageModelConditionalProbabilityVector()
{
  return MEMORY[0x1F412A150]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x1F412A158]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x1F412A1A0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x1F412A1E0]();
}

uint64_t LMLanguageModelTokenIDisUnknown()
{
  return MEMORY[0x1F412A218]();
}

uint64_t LMLexiconCursorFirstTokenID()
{
  return MEMORY[0x1F412A230]();
}

uint64_t LMLexiconCursorGetTraversedCharacters()
{
  return MEMORY[0x1F412A238]();
}

uint64_t LMLexiconCursorHasChildren()
{
  return MEMORY[0x1F412A240]();
}

uint64_t LMLexiconCursorHasEntries()
{
  return MEMORY[0x1F412A248]();
}

uint64_t LMLexiconCursorHash()
{
  return MEMORY[0x1F412A250]();
}

uint64_t LMLexiconCursorTraversedLength()
{
  return MEMORY[0x1F412A258]();
}

uint64_t LMLexiconGetCursorByAdvancingWithCharacters()
{
  return MEMORY[0x1F412A260]();
}

uint64_t LMLexiconGetRootCursor()
{
  return MEMORY[0x1F412A270]();
}

uint64_t LMLexiconResetCursors()
{
  return MEMORY[0x1F412A2A8]();
}

uint64_t LMStreamTokenizerCreate()
{
  return MEMORY[0x1F412A2D0]();
}

uint64_t LMStreamTokenizerPushBytes()
{
  return MEMORY[0x1F412A2E0]();
}

uint64_t LMStreamTokenizerRelease()
{
  return MEMORY[0x1F412A2E8]();
}

uint64_t LMStreamTokenizerReset()
{
  return MEMORY[0x1F412A2F0]();
}

uint64_t LXCursorConditionalProbability()
{
  return MEMORY[0x1F412A608]();
}

uint64_t LXCursorCreateByAdvancing()
{
  return MEMORY[0x1F412A618]();
}

uint64_t LXCursorHasChildren()
{
  return MEMORY[0x1F412A648]();
}

uint64_t LXCursorHasEntries()
{
  return MEMORY[0x1F412A650]();
}

uint64_t LXCursorIsRoot()
{
  return MEMORY[0x1F412A660]();
}

uint64_t LXCursorTerminationProbability()
{
  return MEMORY[0x1F412A680]();
}

uint64_t LXLexiconAdd()
{
  return MEMORY[0x1F412A728]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1F412A768]();
}

uint64_t LXLexiconCreateMutable()
{
  return MEMORY[0x1F412A770]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x1F412A778]();
}

uint64_t LXLexiconIncrementUsageCount()
{
  return MEMORY[0x1F412A7B8]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x1F417CE30]();
}

NSArray *MLAllComputeDevices(void)
{
  return (NSArray *)MEMORY[0x1F40DB7D0]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1F40EDE00]();
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

NSRect NSIntegralRect(NSRect aRect)
{
  MEMORY[0x1F40E7130]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E7140](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.locatiouint64_t n = v2;
  return result;
}

NSRect NSIntersectionRect(NSRect aRect, NSRect bRect)
{
  MEMORY[0x1F40E7148]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height, (__n128)bRect.origin, *(__n128 *)&bRect.origin.y, (__n128)bRect.size, *(__n128 *)&bRect.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
}

NSRect NSRectFromString(NSString *aString)
{
  MEMORY[0x1F40E7220](aString);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1F40E7248](directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return (NSString *)MEMORY[0x1F40E7290]((__n128)aPoint, *(__n128 *)&aPoint.y);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return (NSString *)MEMORY[0x1F40E72A8]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

NSString *__cdecl NSStringFromSize(NSSize aSize)
{
  return (NSString *)MEMORY[0x1F40E72C0]((__n128)aSize, *(__n128 *)&aSize.height);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E72E0](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.locatiouint64_t n = v2;
  return result;
}

OSStatus VTPixelRotationSessionCreate(CFAllocatorRef allocator, VTPixelRotationSessionRef *pixelRotationSessionOut)
{
  return MEMORY[0x1F4103490](allocator, pixelRotationSessionOut);
}

void VTPixelRotationSessionInvalidate(VTPixelRotationSessionRef session)
{
}

OSStatus VTPixelRotationSessionRotateImage(VTPixelRotationSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1F41034A8](session, sourceBuffer, destinationBuffer);
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x1F41034D0](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1F41034F0](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x1F4103538](session, propertyKey, propertyValue);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E438](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E440](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C0](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7D0]();
}

{
  return MEMORY[0x1F417E7F0]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1F417EC38]();
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x1F417EC40]();
}

uint64_t std::__sort<std::__less<unsigned char,unsigned char> &,unsigned char *>()
{
  return MEMORY[0x1F417EC48]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x1F417EC50]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::valarray<unsigned long>::resize()
{
  return MEMORY[0x1F417EE38]();
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[](void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

long double acos(long double __x)
{
  MEMORY[0x1F40CA330](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x1F40CA470](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0A0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0B0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

uint64_t convertToCVNLPTextDecodingResult()
{
  return MEMORY[0x1F410DC80]();
}

float cosf(float a1)
{
  MEMORY[0x1F40CB8B0](a1);
  return result;
}

uint64_t dgeqrf_NEWLAPACK()
{
  return MEMORY[0x1F40D16F0]();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CB9F8](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

uint64_t dorgqr_NEWLAPACK()
{
  return MEMORY[0x1F40D1768]();
}

uint64_t espresso_blob_is_dynamic()
{
  return MEMORY[0x1F4118610]();
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return MEMORY[0x1F4118628]();
}

uint64_t espresso_buffer_unpack_tensor_shape()
{
  return MEMORY[0x1F4118638]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1F4118648]();
}

uint64_t espresso_context_set_low_precision_accumulation()
{
  return MEMORY[0x1F4118658]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1F4118668]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1F4118678]();
}

uint64_t espresso_device_id_for_metal_device()
{
  return MEMORY[0x1F4118688]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1F41186E0]();
}

uint64_t espresso_network_change_blob_shape()
{
  return MEMORY[0x1F4118730]();
}

uint64_t espresso_network_declare_input()
{
  return MEMORY[0x1F4118760]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x1F4118770]();
}

uint64_t espresso_network_select_configuration()
{
  return MEMORY[0x1F41187A0]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1F41187D8]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1F41187F0]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x1F41187F8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1F4118818]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1F4118828]();
}

uint64_t espresso_plan_get_error_info()
{
  return MEMORY[0x1F4118838]();
}

uint64_t espresso_plan_get_phase()
{
  return MEMORY[0x1F4118848]();
}

uint64_t espresso_plan_submit()
{
  return MEMORY[0x1F4118878]();
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1F40CC098](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1F40CC100](a1, *(void *)&a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1F40CC2E0](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

long double log1p(long double __x)
{
  MEMORY[0x1F40CC890](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

uint64_t pc_session_add_metric()
{
  return MEMORY[0x1F4181BA8]();
}

uint64_t pc_session_begin()
{
  return MEMORY[0x1F4181BC0]();
}

uint64_t pc_session_create()
{
  return MEMORY[0x1F4181BD0]();
}

uint64_t pc_session_destroy()
{
  return MEMORY[0x1F4181BD8]();
}

uint64_t pc_session_end()
{
  return MEMORY[0x1F4181BF0]();
}

uint64_t pc_session_get_value()
{
  return MEMORY[0x1F4181C08]();
}

uint64_t pc_session_set_procpid()
{
  return MEMORY[0x1F4181C18]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1F40CDBA8](*(void *)&a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

int rand(void)
{
  return MEMORY[0x1F40CDC08]();
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1F40CE298](__str, __sep, __lasts);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

float tanf(float a1)
{
  MEMORY[0x1F40CE428](a1);
  return result;
}

float tanhf(float a1)
{
  MEMORY[0x1F40CE438](a1);
  return result;
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1F417F718](*(void *)&c);
}

UBool u_isWhitespace(UChar32 c)
{
  return MEMORY[0x1F417F7A8](*(void *)&c);
}

UBool u_isdigit(UChar32 c)
{
  return MEMORY[0x1F417F7C8](*(void *)&c);
}

UBool u_islower(UChar32 c)
{
  return MEMORY[0x1F417F7D0](*(void *)&c);
}

UBool u_ispunct(UChar32 c)
{
  return MEMORY[0x1F417F7E0](*(void *)&c);
}

UBool u_isupper(UChar32 c)
{
  return MEMORY[0x1F417F7F8](*(void *)&c);
}

UChar32 u_tolower(UChar32 c)
{
  return MEMORY[0x1F417F8A8](*(void *)&c);
}

uint64_t ubidi_close()
{
  return MEMORY[0x1F417F970]();
}

uint64_t ubidi_getLogicalMap()
{
  return MEMORY[0x1F417F998]();
}

uint64_t ubidi_getParaLevel()
{
  return MEMORY[0x1F417F9A8]();
}

uint64_t ubidi_getVisualMap()
{
  return MEMORY[0x1F417F9C8]();
}

uint64_t ubidi_open()
{
  return MEMORY[0x1F417F9D0]();
}

uint64_t ubidi_setInverse()
{
  return MEMORY[0x1F417F9F0]();
}

uint64_t ubidi_setPara()
{
  return MEMORY[0x1F417F9F8]();
}

uint64_t ubidi_setReorderingMode()
{
  return MEMORY[0x1F417FA08]();
}

uint64_t ubidi_writeReordered()
{
  return MEMORY[0x1F417FA18]();
}

UBlockCode ublock_getCode(UChar32 c)
{
  return MEMORY[0x1F417FA20](*(void *)&c);
}

void vDSP_maxmgvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
}

void vDSP_sveD(const double *__A, vDSP_Stride __I, double *__C, vDSP_Length __N)
{
}

void vDSP_vclipc(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N, vDSP_Length *__NLow, vDSP_Length *__NHigh)
{
}

void vDSP_vlim(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vmax(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

vImage_Error vImageBuffer_InitWithCGImage(vImage_Buffer *buf, vImage_CGImageFormat *format, const CGFloat *backgroundColor, CGImageRef image, vImage_Flags flags)
{
  return MEMORY[0x1F40D22B8](buf, format, backgroundColor, image, *(void *)&flags);
}

vImage_Error vImageConvert_420Yp8_CbCr8ToARGB8888(const vImage_Buffer *srcYp, const vImage_Buffer *srcCbCr, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1F40D23E8](srcYp, srcCbCr, dest, info, permuteMap, alpha, *(void *)&flags);
}

vImage_Error vImageConvert_422CbYpCrYp8ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1F40D2400](src, dest, info, permuteMap, alpha, *(void *)&flags);
}

vImage_Error vImageConvert_444AYpCbCr8ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1F40D2438](src, dest, info, permuteMap, *(void *)&flags);
}

vImage_Error vImageConvert_444CrYpCb8ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1F40D2450](src, dest, info, permuteMap, alpha, *(void *)&flags);
}

vImage_Error vImageConvert_ARGB8888To444AYpCbCr8(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1F40D24F0](src, dest, info, permuteMap, *(void *)&flags);
}

vImage_Error vImageConvert_ARGB8888To444CrYpCb8(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1F40D2500](src, dest, info, permuteMap, *(void *)&flags);
}

vImage_Error vImageConvert_ARGB8888toRGB888(const vImage_Buffer *a1, const vImage_Buffer *a2, vImage_Flags a3)
{
  return MEMORY[0x1F40D2538](a1, a2, *(void *)&a3);
}

vImage_Error vImageConvert_ARGBToYpCbCr_GenerateConversion(const vImage_ARGBToYpCbCrMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_ARGBToYpCbCr *outInfo, vImageARGBType inARGBType, vImageYpCbCrType outYpCbCrType, vImage_Flags flags)
{
  return MEMORY[0x1F40D2570](matrix, pixelRange, outInfo, *(void *)&inARGBType, *(void *)&outYpCbCrType, *(void *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D25B0](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar8ToXRGB8888(Pixel_8 alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D25F8](alpha, red, green, blue, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x1F40D2618](src, dest, *(void *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_PlanarFtoPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x1F40D2650](src, dest, *(void *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_RGB888toARGB8888(const vImage_Buffer *a1, const vImage_Buffer *a2, Pixel_8 a3, const vImage_Buffer *a4, BOOL a5, vImage_Flags a6)
{
  return MEMORY[0x1F40D26B0](a1, a2, a3, a4, a5, *(void *)&a6);
}

vImage_Error vImageConvert_RGB888toPlanar8(const vImage_Buffer *rgbSrc, const vImage_Buffer *redDest, const vImage_Buffer *greenDest, const vImage_Buffer *blueDest, vImage_Flags flags)
{
  return MEMORY[0x1F40D26C8](rgbSrc, redDest, greenDest, blueDest, *(void *)&flags);
}

vImage_Error vImageConvert_YpCbCrToARGB_GenerateConversion(const vImage_YpCbCrToARGBMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_YpCbCrToARGB *outInfo, vImageYpCbCrType inYpCbCrType, vImageARGBType outARGBType, vImage_Flags flags)
{
  return MEMORY[0x1F40D2780](matrix, pixelRange, outInfo, *(void *)&inYpCbCrType, *(void *)&outARGBType, *(void *)&flags);
}

vImage_Error vImageCopyBuffer(const vImage_Buffer *src, const vImage_Buffer *dest, size_t pixelSize, vImage_Flags flags)
{
  return MEMORY[0x1F40D2858](src, dest, pixelSize, *(void *)&flags);
}

CGImageRef vImageCreateCGImageFromBuffer(const vImage_Buffer *buf, const vImage_CGImageFormat *format, void (__cdecl *callback)(void *, void *), void *userData, vImage_Flags flags, vImage_Error *error)
{
  return (CGImageRef)MEMORY[0x1F40D2860](buf, format, callback, userData, *(void *)&flags, error);
}

vImage_Error vImageDilate_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const unsigned __int8 *kernel, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x1F40D2888](src, dest, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, kernel_height, kernel_width, *(void *)&flags);
}

vImage_Error vImageDilate_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const float *kernel, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x1F40D2890](src, dest, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, kernel_height, kernel_width, *(void *)&flags);
}

vImage_Error vImageErode_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const float *kernel, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x1F40D28D0](src, dest, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, kernel_height, kernel_width, *(void *)&flags);
}

vImage_Error vImageExtractChannel_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint64_t channelIndex, vImage_Flags flags)
{
  return MEMORY[0x1F40D28E0](src, dest, channelIndex, *(void *)&flags);
}

vImage_Error vImageHorizontalReflect_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D29A0](src, dest, *(void *)&flags);
}

vImage_Error vImageHorizontalReflect_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D29C0](src, dest, *(void *)&flags);
}

vImage_Error vImageMatrixMultiply_ARGB8888ToPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, const int16_t matrix[4], int32_t divisor, const int16_t pre_bias[4], int32_t post_bias, vImage_Flags flags)
{
  return MEMORY[0x1F40D2A60](src, dest, matrix, *(void *)&divisor, pre_bias, *(void *)&post_bias, *(void *)&flags);
}

vImage_Error vImageOverwriteChannelsWithPixel_ARGB8888(const Pixel_8888 the_pixel, const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1F40D2AE8](the_pixel, src, dest, copyMask, *(void *)&flags);
}

vImage_Error vImageOverwriteChannels_ARGB8888(const vImage_Buffer *newSrc, const vImage_Buffer *origSrc, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1F40D2B30](newSrc, origSrc, dest, copyMask, *(void *)&flags);
}

vImage_Error vImagePermuteChannels_RGB888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[3], vImage_Flags flags)
{
  return MEMORY[0x1F40D2B78](src, dest, permuteMap, *(void *)&flags);
}

vImage_Error vImageRotate90_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D2C48](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D2C78](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, float angleInRadians, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D2CB8](src, dest, tempBuffer, backColor, *(void *)&flags, angleInRadians);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1F40D2CD8](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1F40D2D08](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageVerticalReflect_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D2D98](src, dest, *(void *)&flags);
}

vImage_Error vImageVerticalReflect_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D2DB8](src, dest, *(void *)&flags);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE690](a1, a2, a3);
}