void type metadata accessor for os_unfair_lock_s()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_26976ABD0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_26976ABD0);
    }
  }
}

uint64_t AssetDownloadResponse.id.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();
  sub_24A1247B0();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t AssetDownloadResponse.asset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AssetDownloadResponse();
  return sub_24A123634(v1 + *(int *)(v3 + 20), a1, (void (*)(void))type metadata accessor for Asset);
}

uint64_t type metadata accessor for AssetDownloadResponse()
{
  uint64_t result = qword_26976ACA8;
  if (!qword_26976ACA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AssetDownloadResponse.fileURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AssetDownloadResponse() + 24);
  type metadata accessor for URL();
  sub_24A1247B0();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  return v6(a1, v3, v4);
}

uint64_t AssetDownloadResponse.range.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AssetDownloadResponse() + 28));
}

uint64_t AssetDownloadResponse.init(id:asset:fileURL:range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  type metadata accessor for UUID();
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(a7, a1);
  v15 = (int *)type metadata accessor for AssetDownloadResponse();
  sub_24A122438(a2, a7 + v15[5]);
  uint64_t v16 = a7 + v15[6];
  type metadata accessor for URL();
  sub_24A1247B0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v16, a3);
  uint64_t v19 = a7 + v15[7];
  *(void *)uint64_t v19 = a4;
  *(void *)(v19 + 8) = a5;
  *(unsigned char *)(v19 + 16) = a6 & 1;
  return result;
}

uint64_t sub_24A122438(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Asset(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void AssetDownloadResponse.hash(into:)()
{
  uint64_t v1 = v0;
  type metadata accessor for UUID();
  sub_24A123778(&qword_26976AC40, MEMORY[0x263F07508]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = type metadata accessor for AssetDownloadResponse();
  uint64_t v3 = v0 + *(int *)(v2 + 20);
  Asset.ID.hash(into:)();
  uint64_t v4 = type metadata accessor for Asset(0);
  uint64_t v5 = (uint64_t *)(v3 + *(int *)(v4 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  unint64_t v9 = v5[3];
  sub_24A1233B4(*v5, v7);
  Data.hash(into:)();
  sub_24A12340C(v6, v7);
  sub_24A1233B4(v8, v9);
  Data.hash(into:)();
  sub_24A12340C(v8, v9);
  Hasher._combine(_:)(*(void *)(v3 + *(int *)(v4 + 24)));
  type metadata accessor for URL();
  sub_24A123778(&qword_26976AC48, MEMORY[0x263F06EA8]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v10 = v1 + *(int *)(v2 + 28);
  if (*(unsigned char *)(v10 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v12 = *(void *)v10;
    Swift::UInt v11 = *(void *)(v10 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v11);
  }
}

BOOL static AssetDownloadResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for AssetDownloadResponse();
  if (!static Asset.== infix(_:_:)(a1 + v4[5], a2 + v4[5]) || (MEMORY[0x24C5BCC70](a1 + v4[6], a2 + v4[6]) & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v4[7];
  uint64_t v6 = (uint64_t *)(a1 + v5);
  char v7 = *(unsigned char *)(a1 + v5 + 16);
  uint64_t v8 = (uint64_t *)(a2 + v5);
  if ((v7 & 1) == 0)
  {
    if ((v8[2] & 1) == 0)
    {
      uint64_t v10 = *v6;
      uint64_t v9 = v6[1];
      uint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v10 == v12 && v9 == v11) {
        return 1;
      }
    }
    return 0;
  }
  return (v8[2] & 1) != 0;
}

BOOL sub_24A122710(char a1, char a2)
{
  return a1 == a2;
}

void sub_24A122720(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_24A122748(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7465737361 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x4C5255656C6966 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_24A1228D0()
{
  return 4;
}

Swift::Int sub_24A1228D8(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_24A122920()
{
  return 0;
}

uint64_t sub_24A12292C(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7465737361;
      break;
    case 2:
      uint64_t result = 0x4C5255656C6966;
      break;
    case 3:
      uint64_t result = 0x65676E6172;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_24A1229AC(char *a1, char *a2)
{
  return sub_24A122710(*a1, *a2);
}

Swift::Int sub_24A1229B8()
{
  return sub_24A1228D8(*v0);
}

void sub_24A1229C0(uint64_t a1)
{
  sub_24A122720(a1, *v1);
}

Swift::Int sub_24A1229C8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_24A122A0C()
{
  return sub_24A12292C(*v0);
}

uint64_t sub_24A122A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A122748(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A122A3C()
{
  return sub_24A122920();
}

uint64_t sub_24A122A5C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A1228D0();
  *a1 = result;
  return result;
}

uint64_t sub_24A122A84(uint64_t a1)
{
  unint64_t v2 = sub_24A1234EC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A122AC0(uint64_t a1)
{
  unint64_t v2 = sub_24A1234EC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AssetDownloadResponse.encode(to:)(void *a1)
{
  uint64_t v4 = sub_24A123464(&qword_26976AC50);
  sub_24A12477C();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388]();
  sub_24A1247F8();
  sub_24A1234A8(a1, a1[3]);
  sub_24A1234EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_24A123778(&qword_26976AC60, MEMORY[0x263F07508]);
  sub_24A124824();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AssetDownloadResponse();
    type metadata accessor for Asset(0);
    sub_24A123778((unint64_t *)&unk_26976C0A0, (void (*)(uint64_t))type metadata accessor for Asset);
    sub_24A1247C0();
    type metadata accessor for URL();
    sub_24A123778(&qword_26976AC68, MEMORY[0x263F06EA8]);
    sub_24A1247C0();
    sub_24A123464(&qword_26976C050);
    sub_24A1235D0(&qword_26976AC70);
    sub_24A124824();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

Swift::Int AssetDownloadResponse.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t AssetDownloadResponse.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v31 = type metadata accessor for URL();
  sub_24A12477C();
  uint64_t v28 = v4;
  MEMORY[0x270FA5388]();
  sub_24A124810();
  uint64_t v27 = v5;
  type metadata accessor for Asset(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388]();
  sub_24A1247F8();
  uint64_t v33 = type metadata accessor for UUID();
  sub_24A12477C();
  uint64_t v29 = v6;
  MEMORY[0x270FA5388]();
  sub_24A124810();
  uint64_t v34 = v7;
  uint64_t v32 = sub_24A123464(&qword_26976AC78);
  sub_24A12477C();
  uint64_t v30 = v8;
  MEMORY[0x270FA5388]();
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AssetDownloadResponse();
  sub_24A1247B0();
  MEMORY[0x270FA5388]();
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1234A8(a1, a1[3]);
  sub_24A1234EC();
  v35 = v10;
  uint64_t v14 = (uint64_t)v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return sub_24A123580((uint64_t)a1);
  }
  uint64_t v15 = v11;
  uint64_t v16 = (uint64_t)v13;
  v36 = a1;
  uint64_t v17 = v31;
  LOBYTE(v37) = 0;
  sub_24A123778(&qword_26976AC80, MEMORY[0x263F07508]);
  uint64_t v18 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v13, v34, v18);
  LOBYTE(v37) = 1;
  sub_24A123778(&qword_26976AC88, (void (*)(uint64_t))type metadata accessor for Asset);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v15;
  sub_24A122438(v2, v16 + *(int *)(v15 + 20));
  LOBYTE(v37) = 2;
  sub_24A123778(&qword_26976AC90, MEMORY[0x263F06EA8]);
  uint64_t v20 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v16 + *(int *)(v19 + 24), v20, v17);
  sub_24A123464(&qword_26976C050);
  char v39 = 3;
  sub_24A1235D0(&qword_26976AC98);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_24A1247EC();
  v21();
  char v22 = v38;
  uint64_t v23 = v16 + *(int *)(v19 + 28);
  *(_OWORD *)uint64_t v23 = v37;
  *(unsigned char *)(v23 + 16) = v22;
  sub_24A123634(v16, v26, (void (*)(void))type metadata accessor for AssetDownloadResponse);
  sub_24A123580((uint64_t)v36);
  return sub_24A123694(v16, (void (*)(void))type metadata accessor for AssetDownloadResponse);
}

Swift::Int sub_24A123344()
{
  return Hasher._finalize()();
}

uint64_t sub_24A123380@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetDownloadResponse.init(from:)(a1, a2);
}

uint64_t sub_24A123398(void *a1)
{
  return AssetDownloadResponse.encode(to:)(a1);
}

uint64_t sub_24A1233B4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_24A12340C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_24A123464(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *sub_24A1234A8(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_24A1234EC()
{
  unint64_t result = qword_26976AC58;
  if (!qword_26976AC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AC58);
  }
  return result;
}

uint64_t sub_24A123538(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_24A123580(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_24A1235D0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A123538(&qword_26976C050);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A123634(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_24A123694(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A1247B0();
  sub_24A1247EC();
  v3();
  return a1;
}

uint64_t sub_24A1236E8()
{
  return sub_24A123778(&qword_26976AC40, MEMORY[0x263F07508]);
}

uint64_t sub_24A123730()
{
  return sub_24A123778(&qword_26976ACA0, (void (*)(uint64_t))type metadata accessor for AssetDownloadResponse);
}

uint64_t sub_24A123778(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AssetDownloadResponse(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v37 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v40 = type metadata accessor for URL();
    char v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16);
    v39(v9, v10, v40);
    uint64_t v11 = (int *)type metadata accessor for Asset.ID(0);
    uint64_t v12 = v11[5];
    v13 = &v9[v12];
    uint64_t v14 = &v10[v12];
    uint64_t v15 = *((void *)v14 + 1);
    *(void *)v13 = *(void *)v14;
    *((void *)v13 + 1) = v15;
    uint64_t v16 = v11[6];
    uint64_t v17 = (uint64_t *)&v9[v16];
    uint64_t v18 = (uint64_t *)&v10[v16];
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    swift_bridgeObjectRetain();
    sub_24A1233B4(v19, v20);
    *uint64_t v17 = v19;
    v17[1] = v20;
    uint64_t v21 = v11[7];
    char v22 = (uint64_t *)&v9[v21];
    uint64_t v23 = (uint64_t *)&v10[v21];
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    sub_24A1233B4(*v23, v25);
    *char v22 = v24;
    v22[1] = v25;
    uint64_t v26 = type metadata accessor for Asset(0);
    uint64_t v27 = *(int *)(v26 + 20);
    uint64_t v28 = (uint64_t *)&v9[v27];
    uint64_t v29 = &v10[v27];
    uint64_t v30 = *(void *)&v10[v27];
    unint64_t v31 = *(void *)&v10[v27 + 8];
    sub_24A1233B4(v30, v31);
    *uint64_t v28 = v30;
    v28[1] = v31;
    uint64_t v32 = *((void *)v29 + 2);
    unint64_t v33 = *((void *)v29 + 3);
    sub_24A1233B4(v32, v33);
    v28[2] = v32;
    v28[3] = v33;
    *(void *)&v9[*(int *)(v26 + 24)] = *(void *)&v10[*(int *)(v26 + 24)];
    v39(&a1[a3[6]], (char *)a2 + a3[6], v40);
    uint64_t v34 = a3[7];
    v35 = &a1[v34];
    v36 = (char *)a2 + v34;
    *(_OWORD *)v35 = *(_OWORD *)v36;
    v35[16] = v36[16];
  }
  return a1;
}

uint64_t destroy for AssetDownloadResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v11)((void *)(v6 - 8), v5, v6);
  uint64_t v7 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(v5 + *(int *)(v7 + 24)), *(void *)(v5 + *(int *)(v7 + 24) + 8));
  sub_24A12340C(*(void *)(v5 + *(int *)(v7 + 28)), *(void *)(v5 + *(int *)(v7 + 28) + 8));
  uint64_t v8 = v5 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_24A12340C(*(void *)v8, *(void *)(v8 + 8));
  sub_24A12340C(*(void *)(v8 + 16), *(void *)(v8 + 24));
  uint64_t v9 = a1 + *(int *)(a2 + 24);
  return v11(v9, v6);
}

uint64_t initializeWithCopy for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  char v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v38(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v12 = v11[5];
  v13 = (void *)(v8 + v12);
  uint64_t v14 = (void *)(v9 + v12);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = v11[6];
  uint64_t v17 = (uint64_t *)(v8 + v16);
  uint64_t v18 = (uint64_t *)(v9 + v16);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  swift_bridgeObjectRetain();
  sub_24A1233B4(v19, v20);
  *uint64_t v17 = v19;
  v17[1] = v20;
  uint64_t v21 = v11[7];
  char v22 = (uint64_t *)(v8 + v21);
  uint64_t v23 = (uint64_t *)(v9 + v21);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_24A1233B4(*v23, v25);
  *char v22 = v24;
  v22[1] = v25;
  uint64_t v26 = type metadata accessor for Asset(0);
  uint64_t v27 = *(int *)(v26 + 20);
  uint64_t v28 = (uint64_t *)(v8 + v27);
  uint64_t v29 = v9 + v27;
  uint64_t v30 = *(void *)(v9 + v27);
  unint64_t v31 = *(void *)(v9 + v27 + 8);
  sub_24A1233B4(v30, v31);
  *uint64_t v28 = v30;
  v28[1] = v31;
  uint64_t v32 = *(void *)(v29 + 16);
  unint64_t v33 = *(void *)(v29 + 24);
  sub_24A1233B4(v32, v33);
  v28[2] = v32;
  v28[3] = v33;
  *(void *)(v8 + *(int *)(v26 + 24)) = *(void *)(v9 + *(int *)(v26 + 24));
  v38(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v34 = a3[7];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  *(unsigned char *)(v35 + 16) = *(unsigned char *)(v36 + 16);
  return a1;
}

uint64_t assignWithCopy for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  v46(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v12 = v11[5];
  v13 = (void *)(v8 + v12);
  uint64_t v14 = (void *)(v9 + v12);
  void *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = v11[6];
  uint64_t v16 = (uint64_t *)(v8 + v15);
  uint64_t v17 = (uint64_t *)(v9 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_24A1233B4(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  *uint64_t v16 = v18;
  v16[1] = v19;
  sub_24A12340C(v20, v21);
  uint64_t v22 = v11[7];
  uint64_t v23 = (uint64_t *)(v8 + v22);
  uint64_t v24 = (uint64_t *)(v9 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_24A1233B4(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *uint64_t v23 = v25;
  v23[1] = v26;
  sub_24A12340C(v27, v28);
  uint64_t v29 = type metadata accessor for Asset(0);
  uint64_t v30 = *(int *)(v29 + 20);
  unint64_t v31 = (uint64_t *)(v8 + v30);
  uint64_t v32 = v9 + v30;
  uint64_t v33 = *(void *)(v9 + v30);
  unint64_t v34 = *(void *)(v9 + v30 + 8);
  sub_24A1233B4(v33, v34);
  uint64_t v35 = *v31;
  unint64_t v36 = v31[1];
  *unint64_t v31 = v33;
  v31[1] = v34;
  sub_24A12340C(v35, v36);
  uint64_t v37 = *(void *)(v32 + 16);
  unint64_t v38 = *(void *)(v32 + 24);
  sub_24A1233B4(v37, v38);
  uint64_t v39 = v31[2];
  unint64_t v40 = v31[3];
  v31[2] = v37;
  v31[3] = v38;
  sub_24A12340C(v39, v40);
  *(void *)(v8 + *(int *)(v29 + 24)) = *(void *)(v9 + *(int *)(v29 + 24));
  v46(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v41 = a3[7];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  char v44 = *(unsigned char *)(v43 + 16);
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *(unsigned char *)(v42 + 16) = v44;
  return a1;
}

uint64_t initializeWithTake for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(v8 + v12[5]) = *(_OWORD *)(v9 + v12[5]);
  *(_OWORD *)(v8 + v12[6]) = *(_OWORD *)(v9 + v12[6]);
  *(_OWORD *)(v8 + v12[7]) = *(_OWORD *)(v9 + v12[7]);
  uint64_t v13 = type metadata accessor for Asset(0);
  uint64_t v14 = *(int *)(v13 + 20);
  uint64_t v15 = (_OWORD *)(v8 + v14);
  uint64_t v16 = (_OWORD *)(v9 + v14);
  long long v17 = v16[1];
  _OWORD *v15 = *v16;
  v15[1] = v17;
  *(void *)(v8 + *(int *)(v13 + 24)) = *(void *)(v9 + *(int *)(v13 + 24));
  v11(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v18 = a3[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
  return a1;
}

uint64_t assignWithTake for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  v35(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(v8 + v12);
  uint64_t v14 = (uint64_t *)(v9 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = v11[6];
  uint64_t v18 = *(void *)(v8 + v17);
  unint64_t v19 = *(void *)(v8 + v17 + 8);
  *(_OWORD *)(v8 + v17) = *(_OWORD *)(v9 + v17);
  sub_24A12340C(v18, v19);
  uint64_t v20 = v11[7];
  uint64_t v21 = *(void *)(v8 + v20);
  unint64_t v22 = *(void *)(v8 + v20 + 8);
  *(_OWORD *)(v8 + v20) = *(_OWORD *)(v9 + v20);
  sub_24A12340C(v21, v22);
  uint64_t v23 = type metadata accessor for Asset(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v25 = v8 + v24;
  uint64_t v26 = v9 + v24;
  uint64_t v27 = *(void *)(v8 + v24);
  unint64_t v28 = *(void *)(v8 + v24 + 8);
  *(_OWORD *)(v8 + v24) = *(_OWORD *)(v9 + v24);
  sub_24A12340C(v27, v28);
  uint64_t v29 = *(void *)(v25 + 16);
  unint64_t v30 = *(void *)(v25 + 24);
  *(_OWORD *)(v25 + 16) = *(_OWORD *)(v26 + 16);
  sub_24A12340C(v29, v30);
  *(void *)(v8 + *(int *)(v23 + 24)) = *(void *)(v9 + *(int *)(v23 + 24));
  v35(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v31 = a3[7];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  *(unsigned char *)(v32 + 16) = *(unsigned char *)(v33 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetDownloadResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A124224);
}

uint64_t sub_24A124224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  sub_24A124798();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    type metadata accessor for Asset(0);
    sub_24A124798();
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v8 = v10;
      uint64_t v12 = *(int *)(a3 + 20);
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      uint64_t v12 = *(int *)(a3 + 24);
    }
    uint64_t v9 = a1 + v12;
  }
  return _s11CloudAssets21UploadResponseMessageOwet_0(v9, a2, v8);
}

uint64_t _s11CloudAssets21UploadResponseMessageOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AssetDownloadResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A124300);
}

uint64_t sub_24A124300(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  sub_24A124798();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for Asset(0);
    sub_24A124798();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = *(int *)(a4 + 20);
    }
    else
    {
      uint64_t v10 = type metadata accessor for URL();
      uint64_t v14 = *(int *)(a4 + 24);
    }
    uint64_t v11 = a1 + v14;
  }
  return _s11CloudAssets21UploadResponseMessageOwst_0(v11, a2, a2, v10);
}

uint64_t _s11CloudAssets21UploadResponseMessageOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_24A1243D0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Asset(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for URL();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for AssetDownloadResponse.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AssetDownloadResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetDownloadResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A124640);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_24A124668(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_24A124674(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AssetDownloadResponse.CodingKeys()
{
  return &type metadata for AssetDownloadResponse.CodingKeys;
}

unint64_t sub_24A124690()
{
  unint64_t result = qword_26976ACB8;
  if (!qword_26976ACB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ACB8);
  }
  return result;
}

unint64_t sub_24A1246E0()
{
  unint64_t result = qword_26976ACC0;
  if (!qword_26976ACC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ACC0);
  }
  return result;
}

unint64_t sub_24A124730()
{
  unint64_t result = qword_26976ACC8;
  if (!qword_26976ACC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ACC8);
  }
  return result;
}

uint64_t sub_24A1247C0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

BOOL static Asset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0x24C5BCC70]() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for Asset.ID(0);
  sub_24A1291E4(v4);
  BOOL v7 = v7 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v8 & 1) != 0))
  {
    sub_24A1291C4();
    if (v10)
    {
      sub_24A1291C4();
      if (v11)
      {
        uint64_t v23 = type metadata accessor for Asset(0);
        uint64_t v12 = *(int *)(v23 + 20);
        uint64_t v13 = *(void *)(a1 + v12);
        unint64_t v14 = *(void *)(a1 + v12 + 8);
        uint64_t v16 = *(void *)(a1 + v12 + 16);
        unint64_t v15 = *(void *)(a1 + v12 + 24);
        uint64_t v17 = (uint64_t *)(a2 + v12);
        uint64_t v19 = *v17;
        unint64_t v18 = v17[1];
        uint64_t v20 = v17[2];
        unint64_t v21 = v17[3];
        sub_24A1233B4(v13, v14);
        sub_24A1233B4(v16, v15);
        sub_24A1233B4(v19, v18);
        sub_24A1233B4(v20, v21);
        if (MEMORY[0x24C5BCD30](v13, v14, v19, v18))
        {
          char v22 = MEMORY[0x24C5BCD30](v16, v15, v20, v21);
          sub_24A12340C(v19, v18);
          sub_24A12340C(v20, v21);
          sub_24A12340C(v13, v14);
          sub_24A12340C(v16, v15);
          if (v22) {
            return *(void *)(a1 + *(int *)(v23 + 24)) == *(void *)(a2 + *(int *)(v23 + 24));
          }
        }
        else
        {
          sub_24A12340C(v19, v18);
          sub_24A12340C(v20, v21);
          sub_24A12340C(v13, v14);
          sub_24A12340C(v16, v15);
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t Asset.ID.Builder.__allocating_init(partition:ownerID:signature:)()
{
  sub_24A1292B4();
  uint64_t v0 = swift_allocObject();
  Asset.ID.Builder.init(partition:ownerID:signature:)();
  return v0;
}

uint64_t Asset.ID.Builder.init(partition:ownerID:signature:)()
{
  sub_24A1292B4();
  uint64_t v6 = v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_partition;
  uint64_t v7 = type metadata accessor for URL();
  sub_24A12477C();
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v6, v5, v7);
  char v11 = (void *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_ownerID);
  *char v11 = v4;
  v11[1] = v3;
  uint64_t v12 = (void *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_signature);
  *uint64_t v12 = v2;
  v12[1] = v0;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v5, v7);
  *(_OWORD *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature) = xmmword_24A190210;
  return v1;
}

uint64_t Asset.ID.Builder.setReferenceSignature(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)(v2 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature);
  unint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  sub_24A1233B4(a1, a2);
  sub_24A12340C(v4, v5);
  return swift_retain();
}

uint64_t Asset.ID.Builder.build()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for URL();
  sub_24A1247B0();
  uint64_t v3 = sub_24A129370();
  v4(v3);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_ownerID);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_ownerID + 8);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = (void *)(a1 + v7[5]);
  *uint64_t v8 = v6;
  v8[1] = v5;
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_signature);
  unint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_signature + 8);
  char v11 = (uint64_t *)(a1 + v7[6]);
  *char v11 = v9;
  v11[1] = v10;
  uint64_t v12 = v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature;
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature);
  unint64_t v14 = *(void *)(v12 + 8);
  unint64_t v15 = (uint64_t *)(a1 + v7[7]);
  uint64_t *v15 = v13;
  v15[1] = v14;
  swift_bridgeObjectRetain();
  sub_24A1233B4(v9, v10);
  return sub_24A1233B4(v13, v14);
}

uint64_t Asset.ID.Builder.deinit()
{
  type metadata accessor for URL();
  sub_24A1247B0();
  uint64_t v1 = sub_24A129300();
  v2(v1);
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(v0 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_signature), *(void *)(v0 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_signature + 8));
  sub_24A12340C(*(void *)(v0 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature), *(void *)(v0 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature + 8));
  return v0;
}

uint64_t Asset.ID.Builder.__deallocating_deinit()
{
  Asset.ID.Builder.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_24A124D58()
{
  return 1;
}

Swift::Int sub_24A124D60()
{
  return sub_24A1265BC();
}

uint64_t sub_24A124D80()
{
  return 0x6675626F746F7270;
}

void sub_24A124DA0(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_24A124DAC(uint64_t a1)
{
  unint64_t v2 = sub_24A1262A8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A124DE8(uint64_t a1)
{
  unint64_t v2 = sub_24A1262A8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Asset.ID.partition.getter()
{
  type metadata accessor for URL();
  sub_24A1247B0();
  uint64_t v0 = sub_24A1291AC();
  return v1(v0);
}

uint64_t Asset.ID.storageLocation.getter()
{
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  sub_24A12477C();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388]();
  sub_24A1247F8();
  type metadata accessor for Asset.ID(0);
  sub_24A1292A8();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, *MEMORY[0x263F06E50], v1);
  sub_24A12625C();
  swift_bridgeObjectRetain();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return swift_bridgeObjectRelease();
}

uint64_t Asset.ID.ownerID.getter()
{
  return sub_24A1291AC();
}

uint64_t Asset.ID.signature.getter()
{
  return sub_24A1291AC();
}

uint64_t Asset.ID.referenceSignature.getter()
{
  return sub_24A1291AC();
}

int *Asset.ID.init(storageLocation:signature:referenceSignature:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  URL.deletingLastPathComponent()();
  uint64_t v12 = URL.lastPathComponent.getter();
  uint64_t v14 = v13;
  type metadata accessor for URL();
  sub_24A1247B0();
  (*(void (**)(uint64_t))(v15 + 8))(a1);
  BOOL result = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v17 = (uint64_t *)(a6 + result[5]);
  *uint64_t v17 = v12;
  v17[1] = v14;
  unint64_t v18 = (void *)(a6 + result[6]);
  *unint64_t v18 = a2;
  v18[1] = a3;
  uint64_t v19 = (void *)(a6 + result[7]);
  *uint64_t v19 = a4;
  v19[1] = a5;
  return result;
}

void Asset.ID.init(from:)()
{
  sub_24A129194();
  uint64_t v2 = v1;
  uint64_t v59 = v3;
  uint64_t v4 = sub_24A123464(&qword_26976B4D0);
  uint64_t v5 = sub_24A1291B8(v4);
  MEMORY[0x270FA5388](v5);
  sub_24A124810();
  uint64_t v61 = v6;
  sub_24A129220();
  uint64_t v60 = type metadata accessor for URL();
  sub_24A12477C();
  uint64_t v58 = v7;
  MEMORY[0x270FA5388](v8);
  sub_24A124810();
  uint64_t v56 = v9;
  uint64_t v10 = sub_24A129220();
  uint64_t v57 = type metadata accessor for Asset.ID(v10);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v11);
  sub_24A124810();
  uint64_t v55 = v12;
  sub_24A129220();
  uint64_t v13 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v14 = sub_24A1291B8(v13);
  MEMORY[0x270FA5388](v14);
  sub_24A124810();
  v63 = v15;
  uint64_t v16 = sub_24A129220();
  uint64_t v17 = type metadata accessor for CloudAssets_Asset.ID(v16);
  sub_24A1247B0();
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)v53 - v22;
  uint64_t v24 = sub_24A123464(&qword_26976ACD8);
  sub_24A12477C();
  uint64_t v62 = v25;
  MEMORY[0x270FA5388](v26);
  unint64_t v28 = (char *)v53 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1234A8(v2, v2[3]);
  sub_24A1262A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    v53[1] = v17;
    v53[0] = (uint64_t)v21;
    v54 = v23;
    uint64_t v29 = v62;
    v69 = v2;
    sub_24A1262F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v67 = v68;
    uint64_t v66 = 0;
    long long v64 = 0u;
    long long v65 = 0u;
    BinaryDecodingOptions.init()();
    sub_24A1263D8(&qword_26976ACF0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
    uint64_t v30 = (uint64_t)v54;
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    uint64_t v31 = v29;
    uint64_t v32 = (void *)v53[0];
    sub_24A1267E4(v30, v53[0]);
    uint64_t v33 = v61;
    URL.init(string:)();
    uint64_t v34 = v60;
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v33, 1, v60) != 1)
    {
      uint64_t v38 = v34;
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v58 + 32);
      uint64_t v40 = v56;
      uint64_t v41 = v33;
      uint64_t v42 = v38;
      v39(v56, v41);
      v63 = v28;
      uint64_t v43 = v55;
      ((void (*)(uint64_t, uint64_t, uint64_t))v39)(v55, v40, v42);
      uint64_t v44 = v32[3];
      uint64_t v45 = v57;
      v46 = (void *)(v43 + *(int *)(v57 + 20));
      void *v46 = v32[2];
      v46[1] = v44;
      uint64_t v48 = v32[4];
      unint64_t v47 = v32[5];
      v49 = (uint64_t *)(v43 + *(int *)(v45 + 24));
      uint64_t *v49 = v48;
      v49[1] = v47;
      uint64_t v50 = v32[6];
      unint64_t v51 = v32[7];
      swift_bridgeObjectRetain();
      sub_24A1233B4(v48, v47);
      sub_24A1233B4(v50, v51);
      sub_24A12767C((uint64_t)v32, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
      v52 = (uint64_t *)(v43 + *(int *)(v45 + 28));
      uint64_t *v52 = v50;
      v52[1] = v51;
      sub_24A12767C((uint64_t)v54, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v63, v24);
      sub_24A127104(v43, v59);
      uint64_t v37 = (uint64_t)v69;
      goto LABEL_5;
    }
    sub_24A1290C4(v33, &qword_26976B4D0);
    sub_24A126340();
    swift_allocError();
    swift_willThrow();
    sub_24A12767C((uint64_t)v32, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
    uint64_t v35 = sub_24A1291AC();
    sub_24A12767C(v35, v36);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v24);
    uint64_t v2 = v69;
  }
  uint64_t v37 = (uint64_t)v2;
LABEL_5:
  sub_24A123580(v37);
  sub_24A12917C();
}

void Asset.ID.encode(to:)()
{
  sub_24A129194();
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = sub_24A129214();
  uint64_t v6 = type metadata accessor for CloudAssets_Asset.ID(v5);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v7);
  sub_24A129164();
  uint64_t v25 = sub_24A123464(&qword_26976AD00);
  sub_24A12477C();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1234A8(v0, v0[3]);
  sub_24A1262A8();
  sub_24A129328();
  UnknownStorage.init()();
  *uint64_t v2 = URL.absoluteString.getter();
  v2[1] = v13;
  uint64_t v14 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v15 = (void *)((char *)v0 + v14[5]);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  v2[2] = v17;
  v2[3] = v16;
  uint64_t v18 = (void *)((char *)v0 + v14[6]);
  uint64_t v20 = *v18;
  unint64_t v19 = v18[1];
  v2[4] = *v18;
  v2[5] = v19;
  unint64_t v21 = (void *)((char *)v4 + v14[7]);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  v2[6] = *v21;
  v2[7] = v23;
  swift_bridgeObjectRetain();
  sub_24A1233B4(v20, v19);
  sub_24A1233B4(v22, v23);
  sub_24A1263D8(&qword_26976ACF0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
  sub_24A129284();
  sub_24A129248();
  sub_24A12767C((uint64_t)v2, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v25);
  }
  else
  {
    v24[0] = v6;
    v24[1] = v22;
    sub_24A12638C();
    sub_24A129258();
    sub_24A1292E4();
    (*(void (**)(char *, uint64_t *))(v9 + 8))(v12, v2);
  }
  sub_24A12917C();
}

uint64_t Asset.ID.hash(into:)()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_24A1263D8(&qword_26976AC48, MEMORY[0x263F06EA8]);
  sub_24A129370();
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Asset.ID(0);
  sub_24A129348();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  sub_24A1233B4(*v2, v4);
  Data.hash(into:)();
  sub_24A12340C(v3, v4);
  uint64_t v5 = (uint64_t *)(v0 + *(int *)(v1 + 28));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_24A1233B4(*v5, v7);
  Data.hash(into:)();
  return sub_24A12340C(v6, v7);
}

uint64_t static Asset.ID.== infix(_:_:)()
{
  if (MEMORY[0x24C5BCC70]())
  {
    uint64_t v0 = type metadata accessor for Asset.ID(0);
    sub_24A1291E4(v0);
    BOOL v3 = v3 && v1 == v2;
    if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      sub_24A1291C4();
      if (v4)
      {
        JUMPOUT(0x24C5BCD30);
      }
    }
  }
  return 0;
}

Swift::Int Asset.ID.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_24A1259E8()
{
  return Hasher._finalize()();
}

void sub_24A125A24()
{
}

void sub_24A125A3C()
{
}

double Asset.Protector.Builder.__allocating_init(securityKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  double result = 0.0;
  *(_OWORD *)(v4 + 32) = xmmword_24A190210;
  return result;
}

uint64_t Asset.Protector.Builder.init(securityKey:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  *(_OWORD *)(v2 + 32) = xmmword_24A190210;
  return v2;
}

uint64_t Asset.Protector.Builder.setPrivacyKey(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 32);
  unint64_t v4 = *(void *)(v2 + 40);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  sub_24A1233B4(a1, a2);
  sub_24A12340C(v3, v4);
  return swift_retain();
}

uint64_t Asset.Protector.Builder.build()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[2];
  unint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  sub_24A1233B4(v2, v3);
  uint64_t v6 = sub_24A1291AC();
  return sub_24A1233B4(v6, v7);
}

uint64_t Asset.Protector.Builder.deinit()
{
  sub_24A12340C(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_24A12340C(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return v0;
}

uint64_t Asset.Protector.Builder.__deallocating_deinit()
{
  Asset.Protector.Builder.deinit();
  return MEMORY[0x270FA0228](v0, 48, 7);
}

uint64_t sub_24A125BAC(uint64_t a1)
{
  unint64_t v2 = sub_24A126420();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A125BE8(uint64_t a1)
{
  unint64_t v2 = sub_24A126420();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Asset.Protector.securityKey.getter()
{
  return sub_24A1291AC();
}

uint64_t Asset.Protector.privacyKey.getter()
{
  return sub_24A1291AC();
}

uint64_t Asset.Protector.init(securityKey:privacyKey:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

void Asset.Protector.init(from:)()
{
  sub_24A129194();
  unint64_t v3 = v2;
  unint64_t v21 = v4;
  uint64_t v5 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v6 = sub_24A1291B8(v5);
  MEMORY[0x270FA5388](v6);
  sub_24A129204();
  type metadata accessor for CloudAssets_Asset.Protector(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v7);
  sub_24A1292CC();
  uint64_t v8 = sub_24A123464(&qword_26976AD10);
  sub_24A12477C();
  uint64_t v22 = v9;
  MEMORY[0x270FA5388](v10);
  sub_24A129204();
  uint64_t v13 = v12 - v11;
  sub_24A1234A8(v3, v3[3]);
  sub_24A126420();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    uint64_t v20 = (uint64_t)v3;
  }
  else
  {
    unint64_t v23 = v3;
    sub_24A1262F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A129310();
    BinaryDecodingOptions.init()();
    sub_24A1263D8(&qword_26976AD20, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
    uint64_t v14 = v1;
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    uint64_t v15 = v13;
    uint64_t v16 = *v1;
    uint64_t v17 = v1[1];
    uint64_t v18 = v1[2];
    unint64_t v19 = v14[3];
    sub_24A1233B4(*v14, v14[1]);
    sub_24A1233B4(v18, v19);
    sub_24A12767C((uint64_t)v14, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v15, v8);
    *unint64_t v21 = v16;
    v21[1] = v17;
    v21[2] = v18;
    v21[3] = v19;
    uint64_t v20 = (uint64_t)v23;
  }
  sub_24A123580(v20);
  sub_24A12917C();
}

void Asset.Protector.encode(to:)()
{
  sub_24A129194();
  unint64_t v3 = v2;
  type metadata accessor for CloudAssets_Asset.Protector(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v4);
  sub_24A129164();
  uint64_t v15 = sub_24A123464(&qword_26976AD28);
  sub_24A12477C();
  uint64_t v14 = v5;
  MEMORY[0x270FA5388](v6);
  sub_24A129204();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = *v0;
  unint64_t v11 = v0[1];
  uint64_t v12 = v0[2];
  unint64_t v13 = v0[3];
  sub_24A1234A8(v3, v3[3]);
  sub_24A126420();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  UnknownStorage.init()();
  *uint64_t v1 = v10;
  v1[1] = v11;
  v1[2] = v12;
  v1[3] = v13;
  sub_24A1233B4(v10, v11);
  sub_24A1233B4(v12, v13);
  sub_24A1263D8(&qword_26976AD20, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
  Message.serializedData(partial:)();
  sub_24A129248();
  sub_24A12767C((uint64_t)v1, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
  if (!v12)
  {
    sub_24A12638C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A1292E4();
  }
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v9, v15);
  sub_24A12917C();
}

uint64_t Asset.Protector.hash(into:)()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  sub_24A1233B4(v1, v2);
  sub_24A129370();
  Data.hash(into:)();
  sub_24A12340C(v1, v2);
  sub_24A1233B4(v4, v3);
  Data.hash(into:)();
  return sub_24A12340C(v4, v3);
}

uint64_t static Asset.Protector.== infix(_:_:)(void *a1, void *a2)
{
  if (MEMORY[0x24C5BCD30](*a1, a1[1], *a2, a2[1]))
  {
    JUMPOUT(0x24C5BCD30);
  }
  return 0;
}

uint64_t type metadata accessor for Asset.ID(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976AD78);
}

uint64_t type metadata accessor for Asset(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976AD68);
}

unint64_t sub_24A12625C()
{
  unint64_t result = qword_26976ACD0;
  if (!qword_26976ACD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ACD0);
  }
  return result;
}

unint64_t sub_24A1262A8()
{
  unint64_t result = qword_26976ACE0;
  if (!qword_26976ACE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ACE0);
  }
  return result;
}

unint64_t sub_24A1262F4()
{
  unint64_t result = qword_26976ACE8;
  if (!qword_26976ACE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ACE8);
  }
  return result;
}

unint64_t sub_24A126340()
{
  unint64_t result = qword_26976ACF8;
  if (!qword_26976ACF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ACF8);
  }
  return result;
}

unint64_t sub_24A12638C()
{
  unint64_t result = qword_26976AD08;
  if (!qword_26976AD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AD08);
  }
  return result;
}

uint64_t sub_24A1263D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A126420()
{
  unint64_t result = qword_26976AD18;
  if (!qword_26976AD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AD18);
  }
  return result;
}

Swift::Int Asset.Protector.hashValue.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  sub_24A1293A8();
  uint64_t v5 = sub_24A129370();
  sub_24A1233B4(v5, v6);
  Data.hash(into:)();
  sub_24A12340C(v1, v2);
  sub_24A1233B4(v4, v3);
  Data.hash(into:)();
  sub_24A12340C(v4, v3);
  return Hasher._finalize()();
}

void sub_24A1264F8()
{
  Swift::UInt v0 = sub_24A129214();
  Hasher._combine(_:)(v0);
}

uint64_t sub_24A12651C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6675626F746F7270 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_24A1265BC()
{
  return Hasher._finalize()();
}

Swift::Int sub_24A126600()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  sub_24A1233B4(v1, v2);
  Data.hash(into:)();
  sub_24A12340C(v1, v2);
  sub_24A1233B4(v4, v3);
  Data.hash(into:)();
  sub_24A12340C(v4, v3);
  return Hasher._finalize()();
}

void sub_24A126694()
{
}

void sub_24A1266AC()
{
}

Swift::Int sub_24A1266C8()
{
  return Hasher._finalize()();
}

uint64_t sub_24A126708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_24A12651C(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_24A126738(uint64_t a1)
{
  unint64_t v2 = sub_24A1270B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A126774(uint64_t a1)
{
  unint64_t v2 = sub_24A1270B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Asset.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1267E4(v1, a1);
}

uint64_t sub_24A1267E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_24A129214();
  v4(v3);
  sub_24A1247B0();
  uint64_t v5 = sub_24A12937C();
  v6(v5);
  return a2;
}

uint64_t Asset.protector.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Asset(0);
  sub_24A1292A8();
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  unint64_t v6 = v2[3];
  *a1 = *v2;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_24A1233B4(v3, v4);
  return sub_24A1233B4(v5, v6);
}

uint64_t Asset.size.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Asset(0) + 24));
}

void sub_24A1268B8()
{
  sub_24A129194();
  uint64_t v51 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = sub_24A123464(&qword_26976ADE8);
  uint64_t v7 = sub_24A1291B8(v6);
  MEMORY[0x270FA5388](v7);
  sub_24A124810();
  uint64_t v49 = v8;
  uint64_t v9 = sub_24A129220();
  uint64_t v48 = type metadata accessor for CloudAssets_Asset.Protector(v9);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v10);
  sub_24A124810();
  uint64_t v50 = v11;
  uint64_t v12 = sub_24A123464(&qword_26976B4D0);
  uint64_t v13 = sub_24A1291B8(v12);
  MEMORY[0x270FA5388](v13);
  sub_24A12922C();
  uint64_t v14 = type metadata accessor for URL();
  sub_24A12477C();
  uint64_t v47 = v15;
  MEMORY[0x270FA5388](v16);
  sub_24A124810();
  uint64_t v46 = v17;
  uint64_t v18 = sub_24A123464(&qword_26976ADE0);
  uint64_t v19 = sub_24A1291B8(v18);
  MEMORY[0x270FA5388](v19);
  sub_24A129164();
  uint64_t v20 = type metadata accessor for CloudAssets_Asset.ID(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v21);
  sub_24A129204();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = (int *)type metadata accessor for Asset.ID(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v26);
  sub_24A1292CC();
  uint64_t v45 = type metadata accessor for CloudAssets_Asset(0);
  v52 = (uint64_t *)v5;
  sub_24A129110(v5 + *(int *)(v45 + 24), v0, &qword_26976ADE0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v0, 1, v20) == 1)
  {
    *(void *)uint64_t v24 = 0;
    *(void *)(v24 + 8) = 0xE000000000000000;
    *(void *)(v24 + 16) = 0;
    *(void *)(v24 + 24) = 0xE000000000000000;
    *(_OWORD *)(v24 + 32) = xmmword_24A190210;
    *(_OWORD *)(v24 + 48) = xmmword_24A190210;
    UnknownStorage.init()();
    sub_24A1290C4(v0, &qword_26976ADE0);
  }
  else
  {
    sub_24A127104(v0, v24);
  }
  URL.init(string:)();
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v2, 1, v14) == 1)
  {
    sub_24A1290C4(v2, &qword_26976B4D0);
    sub_24A126340();
    swift_allocError();
    swift_willThrow();
    sub_24A12767C(v24, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
    sub_24A12767C(v5, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  }
  else
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32);
    v27(v46, v2, v14);
    v27(v1, v46, v14);
    uint64_t v28 = *(void *)(v24 + 24);
    uint64_t v29 = (void *)(v1 + v25[5]);
    *uint64_t v29 = *(void *)(v24 + 16);
    v29[1] = v28;
    uint64_t v31 = *(void *)(v24 + 32);
    unint64_t v30 = *(void *)(v24 + 40);
    uint64_t v32 = (uint64_t *)(v1 + v25[6]);
    *uint64_t v32 = v31;
    v32[1] = v30;
    uint64_t v33 = *(void *)(v24 + 48);
    unint64_t v34 = *(void *)(v24 + 56);
    swift_bridgeObjectRetain();
    sub_24A1233B4(v31, v30);
    sub_24A1233B4(v33, v34);
    sub_24A12767C(v24, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
    uint64_t v35 = (uint64_t *)(v1 + v25[7]);
    uint64_t *v35 = v33;
    v35[1] = v34;
    sub_24A127104(v1, v51);
    sub_24A129110((uint64_t)v52 + *(int *)(v45 + 28), v49, &qword_26976ADE8);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v49, 1, v48) == 1)
    {
      *(_OWORD *)uint64_t v50 = xmmword_24A190210;
      *(_OWORD *)(v50 + 16) = xmmword_24A190210;
      UnknownStorage.init()();
      sub_24A1290C4(v49, &qword_26976ADE8);
    }
    else
    {
      sub_24A127104(v49, v50);
    }
    uint64_t v36 = *(void *)v50;
    uint64_t v37 = *(void *)(v50 + 8);
    uint64_t v38 = *(void *)(v50 + 16);
    unint64_t v39 = *(void *)(v50 + 24);
    uint64_t v40 = sub_24A1291AC();
    sub_24A1233B4(v40, v41);
    sub_24A1233B4(v38, v39);
    sub_24A12767C(v50, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
    uint64_t v42 = type metadata accessor for Asset(0);
    uint64_t v43 = (void *)(v51 + *(int *)(v42 + 20));
    *uint64_t v43 = v36;
    v43[1] = v37;
    v43[2] = v38;
    v43[3] = v39;
    uint64_t v44 = *v52;
    sub_24A12767C((uint64_t)v52, (void (*)(void))type metadata accessor for CloudAssets_Asset);
    *(void *)(v51 + *(int *)(v42 + 24)) = v44;
  }
  sub_24A12917C();
}

__n128 Asset.init(id:protector:size:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 v11 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  unint64_t v7 = a2[1].n128_u64[1];
  sub_24A127104(a1, a4);
  type metadata accessor for Asset(0);
  sub_24A1292A8();
  __n128 result = v11;
  *uint64_t v9 = v11;
  v9[1].n128_u64[0] = v6;
  v9[1].n128_u64[1] = v7;
  *(void *)(a4 + *(int *)(v10 + 24)) = a3;
  return result;
}

void Asset.init(from:)()
{
  sub_24A129194();
  uint64_t v4 = v3;
  uint64_t v16 = v5;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v7 = sub_24A1291B8(v6);
  MEMORY[0x270FA5388](v7);
  sub_24A124810();
  uint64_t v8 = sub_24A129220();
  type metadata accessor for CloudAssets_Asset(v8);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = sub_24A12922C();
  uint64_t v11 = type metadata accessor for Asset(v10);
  uint64_t v12 = sub_24A1291B8(v11);
  MEMORY[0x270FA5388](v12);
  sub_24A129164();
  uint64_t v13 = sub_24A123464(&qword_26976AD30);
  sub_24A12477C();
  uint64_t v17 = v14;
  MEMORY[0x270FA5388](v15);
  sub_24A1247F8();
  sub_24A1234A8(v4, v4[3]);
  sub_24A1270B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    sub_24A1262F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A129310();
    BinaryDecodingOptions.init()();
    sub_24A1263D8(&qword_26976AD40, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    sub_24A1268B8();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v1, v13);
    sub_24A127104(v2, v16);
  }
  sub_24A123580((uint64_t)v4);
  sub_24A12917C();
}

unint64_t sub_24A1270B8()
{
  unint64_t result = qword_26976AD38;
  if (!qword_26976AD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AD38);
  }
  return result;
}

uint64_t sub_24A127104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A129214();
  v5(v4);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a2, v2);
  return a2;
}

uint64_t sub_24A127160@<X0>(void *a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v47 = type metadata accessor for CloudAssets_Asset.Protector(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v2);
  sub_24A12935C();
  uint64_t v45 = v3;
  MEMORY[0x270FA5388](v4);
  uint64_t v46 = (void *)((char *)v39 - v5);
  uint64_t v6 = sub_24A129220();
  uint64_t v40 = type metadata accessor for CloudAssets_Asset.ID(v6);
  MEMORY[0x270FA5388](v40);
  sub_24A12935C();
  uint64_t v41 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (void *)((char *)v39 - v9);
  UnknownStorage.init()();
  *uint64_t v10 = URL.absoluteString.getter();
  v10[1] = v11;
  uint64_t v12 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v13 = v1;
  uint64_t v14 = (uint64_t *)(v1 + v12[5]);
  uint64_t v15 = v14[1];
  v10[2] = *v14;
  v10[3] = v15;
  uint64_t v16 = (uint64_t *)(v13 + v12[6]);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  v10[4] = *v16;
  v10[5] = v18;
  uint64_t v19 = (uint64_t *)(v13 + v12[7]);
  uint64_t v20 = v13;
  uint64_t v43 = v13;
  uint64_t v22 = *v19;
  unint64_t v21 = v19[1];
  v10[6] = *v19;
  v10[7] = v21;
  uint64_t v42 = type metadata accessor for Asset(0);
  uint64_t v23 = (uint64_t *)(v20 + *(int *)(v42 + 20));
  uint64_t v25 = *v23;
  unint64_t v24 = v23[1];
  uint64_t v26 = v23[2];
  unint64_t v27 = v23[3];
  v39[1] = (char *)v46 + *(int *)(v47 + 24);
  swift_bridgeObjectRetain();
  sub_24A1233B4(v17, v18);
  sub_24A1233B4(v22, v21);
  sub_24A1233B4(v25, v24);
  sub_24A1233B4(v26, v27);
  UnknownStorage.init()();
  uint64_t v28 = v46;
  uint64_t *v46 = v25;
  v28[1] = v24;
  v28[2] = v26;
  v28[3] = v27;
  sub_24A1233B4(v25, v24);
  sub_24A1233B4(v26, v27);
  sub_24A12340C(v25, v24);
  sub_24A12340C(v26, v27);
  uint64_t v29 = v44;
  *uint64_t v44 = 0;
  uint64_t v30 = type metadata accessor for CloudAssets_Asset(0);
  UnknownStorage.init()();
  uint64_t v31 = (uint64_t)v29 + *(int *)(v30 + 24);
  uint64_t v32 = v40;
  _s11CloudAssets21UploadResponseMessageOwst_0(v31, 1, 1, v40);
  uint64_t v33 = (uint64_t)v29 + *(int *)(v30 + 28);
  uint64_t v34 = v47;
  _s11CloudAssets21UploadResponseMessageOwst_0(v33, 1, 1, v47);
  uint64_t v35 = v41;
  sub_24A1267E4((uint64_t)v10, v41);
  sub_24A1290C4(v31, &qword_26976ADE0);
  sub_24A127104(v35, v31);
  _s11CloudAssets21UploadResponseMessageOwst_0(v31, 0, 1, v32);
  uint64_t v36 = v45;
  sub_24A1267E4((uint64_t)v28, v45);
  sub_24A1290C4(v33, &qword_26976ADE8);
  sub_24A127104(v36, v33);
  _s11CloudAssets21UploadResponseMessageOwst_0(v33, 0, 1, v34);
  uint64_t v37 = *(void *)(v43 + *(int *)(v42 + 24));
  sub_24A12767C((uint64_t)v28, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
  uint64_t result = sub_24A12767C((uint64_t)v10, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  *uint64_t v29 = v37;
  return result;
}

void Asset.encode(to:)()
{
  sub_24A129194();
  uint64_t v3 = sub_24A129214();
  uint64_t v4 = type metadata accessor for CloudAssets_Asset(v3);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v5);
  sub_24A129164();
  uint64_t v12 = sub_24A123464(&qword_26976AD48);
  sub_24A12477C();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1234A8(v0, v0[3]);
  sub_24A1270B8();
  sub_24A129328();
  sub_24A127160(v2);
  sub_24A1263D8(&qword_26976AD40, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
  sub_24A129284();
  sub_24A129248();
  sub_24A12767C((uint64_t)v2, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v12);
  }
  else
  {
    v11[0] = v4;
    v11[1] = v0;
    sub_24A12638C();
    sub_24A129258();
    sub_24A1292E4();
    (*(void (**)(char *, void *))(v7 + 8))(v10, v2);
  }
  sub_24A12917C();
}

uint64_t sub_24A12767C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A1247B0();
  uint64_t v3 = sub_24A129300();
  v4(v3);
  return a1;
}

void Asset.hash(into:)()
{
  Asset.ID.hash(into:)();
  type metadata accessor for Asset(0);
  sub_24A129348();
  uint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  sub_24A1233B4(v2, v3);
  Data.hash(into:)();
  sub_24A12340C(v2, v3);
  sub_24A1233B4(v5, v6);
  Data.hash(into:)();
  sub_24A12340C(v5, v6);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 24)));
}

Swift::Int Asset.hashValue.getter()
{
  sub_24A1293A8();
  Asset.ID.hash(into:)();
  uint64_t v1 = type metadata accessor for Asset(0);
  sub_24A1292A8();
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  unint64_t v6 = v2[3];
  sub_24A1233B4(*v2, v4);
  Data.hash(into:)();
  sub_24A12340C(v3, v4);
  sub_24A1233B4(v5, v6);
  Data.hash(into:)();
  sub_24A12340C(v5, v6);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

Swift::Int sub_24A127840(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Asset.ID.hash(into:)();
  unint64_t v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  uint64_t v7 = v4[2];
  unint64_t v8 = v4[3];
  sub_24A1233B4(*v4, v6);
  Data.hash(into:)();
  sub_24A12340C(v5, v6);
  sub_24A1233B4(v7, v8);
  Data.hash(into:)();
  sub_24A12340C(v7, v8);
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_24A127900()
{
  return sub_24A1263D8(&qword_26976AD50, (void (*)(uint64_t))type metadata accessor for Asset.ID);
}

unint64_t sub_24A12794C()
{
  unint64_t result = qword_26976AD58;
  if (!qword_26976AD58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AD58);
  }
  return result;
}

uint64_t sub_24A127998()
{
  return sub_24A1263D8(&qword_26976AD60, (void (*)(uint64_t))type metadata accessor for Asset);
}

void sub_24A1279E0()
{
}

void sub_24A1279F8()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Asset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    unint64_t v8 = (int *)type metadata accessor for Asset.ID(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = v8[6];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_24A1233B4(v16, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = v8[7];
    uint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    sub_24A1233B4(*v20, v22);
    *uint64_t v19 = v21;
    v19[1] = v22;
    uint64_t v23 = *(int *)(a3 + 20);
    unint64_t v24 = (uint64_t *)((char *)a1 + v23);
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = *(uint64_t *)((char *)a2 + v23);
    unint64_t v27 = *(uint64_t *)((char *)a2 + v23 + 8);
    sub_24A1233B4(v26, v27);
    *unint64_t v24 = v26;
    v24[1] = v27;
    uint64_t v28 = *((void *)v25 + 2);
    unint64_t v29 = *((void *)v25 + 3);
    sub_24A1233B4(v28, v29);
    void v24[2] = v28;
    v24[3] = v29;
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for Asset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(a1 + *(int *)(v5 + 24)), *(void *)(a1 + *(int *)(v5 + 24) + 8));
  sub_24A12340C(*(void *)(a1 + *(int *)(v5 + 28)), *(void *)(a1 + *(int *)(v5 + 28) + 8));
  unint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  sub_24A12340C(*v6, v6[1]);
  uint64_t v7 = v6[2];
  unint64_t v8 = v6[3];
  return sub_24A12340C(v7, v8);
}

uint64_t initializeWithCopy for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = v7[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  swift_bridgeObjectRetain();
  sub_24A1233B4(v15, v16);
  uint64_t *v13 = v15;
  v13[1] = v16;
  uint64_t v17 = v7[7];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_24A1233B4(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = *(int *)(a3 + 20);
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = a2 + v22;
  uint64_t v25 = *(void *)(a2 + v22);
  unint64_t v26 = *(void *)(a2 + v22 + 8);
  sub_24A1233B4(v25, v26);
  *uint64_t v23 = v25;
  v23[1] = v26;
  uint64_t v27 = *(void *)(v24 + 16);
  unint64_t v28 = *(void *)(v24 + 24);
  sub_24A1233B4(v27, v28);
  v23[2] = v27;
  v23[3] = v28;
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = v7[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_24A1233B4(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_24A12340C(v16, v17);
  uint64_t v18 = v7[7];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_24A1233B4(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  *uint64_t v19 = v21;
  v19[1] = v22;
  sub_24A12340C(v23, v24);
  uint64_t v25 = *(int *)(a3 + 20);
  unint64_t v26 = (uint64_t *)(a1 + v25);
  uint64_t v27 = a2 + v25;
  uint64_t v28 = *(void *)(a2 + v25);
  unint64_t v29 = *(void *)(a2 + v25 + 8);
  sub_24A1233B4(v28, v29);
  uint64_t v30 = *v26;
  unint64_t v31 = v26[1];
  *unint64_t v26 = v28;
  v26[1] = v29;
  sub_24A12340C(v30, v31);
  uint64_t v32 = *(void *)(v27 + 16);
  unint64_t v33 = *(void *)(v27 + 24);
  sub_24A1233B4(v32, v33);
  uint64_t v34 = v26[2];
  unint64_t v35 = v26[3];
  v26[2] = v32;
  v26[3] = v33;
  sub_24A12340C(v34, v35);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (_OWORD *)(a1 + v8);
  uint64_t v11 = (_OWORD *)(a2 + v8);
  long long v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = v7[6];
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_24A12340C(v14, v15);
  uint64_t v16 = v7[7];
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_24A12340C(v17, v18);
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(a1 + v19);
  unint64_t v23 = *(void *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_24A12340C(v22, v23);
  uint64_t v24 = *(void *)(v20 + 16);
  unint64_t v25 = *(void *)(v20 + 24);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
  sub_24A12340C(v24, v25);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A12809C);
}

uint64_t sub_24A12809C()
{
  uint64_t v3 = sub_24A1293C0();
  type metadata accessor for Asset.ID(v3);
  sub_24A124798();
  if (*(_DWORD *)(v5 + 84) == v1)
  {
    return _s11CloudAssets21UploadResponseMessageOwet_0(v0, v1, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + *(int *)(v2 + 20) + 8) >> 60;
    if (((4 * v7) & 0xC) != 0) {
      return 16 - ((4 * v7) & 0xC | (v7 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for Asset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A128144);
}

void sub_24A128144(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_24A129214();
  type metadata accessor for Asset.ID(v8);
  sub_24A124798();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = sub_24A1293D4();
    _s11CloudAssets21UploadResponseMessageOwst_0(v10, v11, v12, v13);
  }
  else
  {
    uint64_t v14 = (void *)(v4 + *(int *)(a4 + 20));
    *uint64_t v14 = 0;
    v14[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
}

uint64_t sub_24A1281CC()
{
  uint64_t result = type metadata accessor for Asset.ID(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Asset.ID(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = *(uint64_t *)((char *)a2 + v9);
    unint64_t v15 = *(uint64_t *)((char *)a2 + v9 + 8);
    swift_bridgeObjectRetain();
    sub_24A1233B4(v14, v15);
    uint64_t *v13 = v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    unint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    sub_24A1233B4(*v18, v20);
    *uint64_t v17 = v19;
    v17[1] = v20;
  }
  return a1;
}

uint64_t destroy for Asset.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8));
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  return sub_24A12340C(v6, v7);
}

uint64_t initializeWithCopy for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (uint64_t *)(a1 + v8);
  uint64_t v13 = *(void *)(a2 + v8);
  unint64_t v14 = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  sub_24A1233B4(v13, v14);
  *uint64_t v12 = v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_24A1233B4(*v17, v19);
  *uint64_t v16 = v18;
  v16[1] = v19;
  return a1;
}

uint64_t assignWithCopy for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_24A1233B4(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_24A12340C(v15, v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  unint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_24A1233B4(*v19, v21);
  uint64_t v22 = *v18;
  unint64_t v23 = v18[1];
  *uint64_t v18 = v20;
  v18[1] = v21;
  sub_24A12340C(v22, v23);
  return a1;
}

uint64_t initializeWithTake for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_24A12340C(v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = *(void *)(a1 + v15);
  unint64_t v17 = *(void *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_24A12340C(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Asset.ID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A128744);
}

uint64_t sub_24A128744()
{
  sub_24A1293C0();
  type metadata accessor for URL();
  sub_24A124798();
  if (*(_DWORD *)(v4 + 84) == v1)
  {
    return _s11CloudAssets21UploadResponseMessageOwet_0(v0, v1, v3);
  }
  else
  {
    unint64_t v6 = *(void *)(v0 + *(int *)(v2 + 20) + 8);
    if (v6 >= 0xFFFFFFFF) {
      LODWORD(v6) = -1;
    }
    return (v6 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Asset.ID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1287DC);
}

void sub_24A1287DC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  sub_24A129214();
  type metadata accessor for URL();
  sub_24A124798();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    uint64_t v9 = sub_24A1293D4();
    _s11CloudAssets21UploadResponseMessageOwst_0(v9, v10, v11, v12);
  }
  else
  {
    *(void *)(v4 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t sub_24A128858()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A1288F8()
{
  return type metadata accessor for Asset.ID.Builder(0);
}

uint64_t type metadata accessor for Asset.ID.Builder(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976AD88);
}

uint64_t sub_24A128920(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A128954()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for Asset.ID.Builder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Asset.ID.Builder);
}

uint64_t dispatch thunk of Asset.ID.Builder.__allocating_init(partition:ownerID:signature:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t initializeBufferWithCopyOfBuffer for Asset.Protector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for Asset.Protector(uint64_t *a1)
{
  sub_24A12340C(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  return sub_24A12340C(v2, v3);
}

uint64_t *initializeWithCopy for Asset.Protector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_24A1233B4(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_24A1233B4(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for Asset.Protector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_24A1233B4(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_24A12340C(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_24A1233B4(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_24A12340C(v10, v11);
  return a1;
}

__n128 initializeWithTake for Asset.Protector(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for Asset.Protector(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_24A12340C(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_24A12340C(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Asset.Protector(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(unsigned char *)(a1 + 32))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for Asset.Protector(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

void type metadata accessor for Asset.Protector()
{
}

uint64_t type metadata accessor for Asset.Protector.Builder()
{
  return self;
}

uint64_t method lookup function for Asset.Protector.Builder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Asset.Protector.Builder);
}

uint64_t dispatch thunk of Asset.Protector.Builder.__allocating_init(securityKey:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_24A128CB4()
{
  return 0;
}

void type metadata accessor for Asset.CodingKeys()
{
}

void type metadata accessor for Asset.Protector.CodingKeys()
{
}

uint64_t getEnumTagSinglePayload for AssetSkeleton.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *sub_24A128D24(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A128DC0);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for Asset.ID.CodingKeys()
{
}

unint64_t sub_24A128DF8()
{
  unint64_t result = qword_26976AD98;
  if (!qword_26976AD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AD98);
  }
  return result;
}

unint64_t sub_24A128E48()
{
  unint64_t result = qword_26976ADA0;
  if (!qword_26976ADA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ADA0);
  }
  return result;
}

unint64_t sub_24A128E98()
{
  unint64_t result = qword_26976ADA8;
  if (!qword_26976ADA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ADA8);
  }
  return result;
}

unint64_t sub_24A128EE8()
{
  unint64_t result = qword_26976ADB0;
  if (!qword_26976ADB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ADB0);
  }
  return result;
}

unint64_t sub_24A128F38()
{
  unint64_t result = qword_26976ADB8;
  if (!qword_26976ADB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ADB8);
  }
  return result;
}

unint64_t sub_24A128F88()
{
  unint64_t result = qword_26976ADC0;
  if (!qword_26976ADC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ADC0);
  }
  return result;
}

unint64_t sub_24A128FD8()
{
  unint64_t result = qword_26976ADC8;
  if (!qword_26976ADC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ADC8);
  }
  return result;
}

unint64_t sub_24A129028()
{
  unint64_t result = qword_26976ADD0;
  if (!qword_26976ADD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ADD0);
  }
  return result;
}

unint64_t sub_24A129078()
{
  unint64_t result = qword_26976ADD8;
  if (!qword_26976ADD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ADD8);
  }
  return result;
}

uint64_t sub_24A1290C4(uint64_t a1, uint64_t *a2)
{
  sub_24A123464(a2);
  sub_24A1247B0();
  uint64_t v3 = sub_24A129300();
  v4(v3);
  return a1;
}

uint64_t sub_24A129110(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24A123464(a3);
  sub_24A1247B0();
  uint64_t v4 = sub_24A12937C();
  v5(v4);
  return a2;
}

uint64_t sub_24A1291AC()
{
  return v0;
}

uint64_t sub_24A1291B8(uint64_t a1)
{
  return a1 - 8;
}

void sub_24A1291C4()
{
  JUMPOUT(0x24C5BCD30);
}

uint64_t sub_24A1291E4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_24A129214()
{
  return 0;
}

uint64_t sub_24A129220()
{
  return 0;
}

uint64_t sub_24A12922C()
{
  return 0;
}

uint64_t sub_24A129258()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_24A129284()
{
  return Message.serializedData(partial:)();
}

uint64_t sub_24A1292E4()
{
  return sub_24A12340C(v0, v1);
}

uint64_t sub_24A129300()
{
  return v0;
}

double sub_24A129310()
{
  *(_OWORD *)(v0 - 112) = *(_OWORD *)(v0 - 96);
  *(void *)(v0 - 128) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  return result;
}

uint64_t sub_24A129328()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_24A129370()
{
  return v0;
}

uint64_t sub_24A12937C()
{
  return v0;
}

uint64_t sub_24A129390()
{
  return sub_24A1233B4(v0, v1);
}

uint64_t sub_24A1293A8()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_24A1293C0()
{
  return 0;
}

uint64_t sub_24A1293D4()
{
  return v0;
}

uint64_t sub_24A1293E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6675626F746F7270 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    sub_24A124D80();
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_24A129470()
{
  return Hasher._finalize()();
}

uint64_t sub_24A1294B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_24A1293E8(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_24A1294E8(uint64_t a1)
{
  unint64_t v2 = sub_24A129908();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A129524(uint64_t a1)
{
  unint64_t v2 = sub_24A129908();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AssetSkeleton.asset.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A12BA1C(v1, a1);
}

uint64_t AssetSkeleton.assetID.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A12BA1C(v1, a1);
}

uint64_t AssetSkeleton.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v29 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for AssetSkeleton();
  MEMORY[0x270FA5388](v11 - 8);
  sub_24A129164();
  uint64_t v12 = sub_24A123464(&qword_26976ADF0);
  sub_24A12477C();
  uint64_t v22 = v13;
  MEMORY[0x270FA5388](v14);
  sub_24A1247F8();
  sub_24A1234A8(a1, a1[3]);
  sub_24A129908();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v19 = v4;
    uint64_t v20 = a1;
    uint64_t v15 = v22;
    sub_24A1262F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = v12;
    long long v27 = v28;
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    BinaryDecodingOptions.init()();
    sub_24A12A9B4(&qword_26976AE00, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    uint64_t v17 = v19;
    sub_24A129954(v10, v19);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v3, v18);
    a1 = v20;
    sub_24A12B9C0(v17, v21);
  }
  return sub_24A123580((uint64_t)a1);
}

uint64_t type metadata accessor for AssetSkeleton()
{
  uint64_t result = qword_26976AE18;
  if (!qword_26976AE18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_24A129908()
{
  unint64_t result = qword_26976ADF8;
  if (!qword_26976ADF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976ADF8);
  }
  return result;
}

uint64_t sub_24A129954@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v70 = type metadata accessor for Date();
  uint64_t v74 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  v73 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_24A123464(&qword_26976AE48);
  MEMORY[0x270FA5388](v4 - 8);
  v75 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Google_Protobuf_Timestamp();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  MEMORY[0x270FA5388](v6);
  v76 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24A123464((uint64_t *)&unk_26976C040);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v72 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for CloudAssets_Credential(0);
  MEMORY[0x270FA5388](v71);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Credential(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Asset(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_24A123464(&qword_26976AE50);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for CloudAssets_Asset(0);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  long long v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v64 - v25;
  sub_24A13981C(*a1, (uint64_t)v20);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v20, 1, v21) == 1)
  {
    sub_24A12B96C((uint64_t)v20, &qword_26976AE50);
    sub_24A126340();
    swift_allocError();
    swift_willThrow();
    long long v27 = type metadata accessor for CloudAssets_SimultaneousDownloadableAssets;
    uint64_t v28 = (uint64_t)a1;
    return sub_24A12BA6C(v28, (void (*)(void))v27);
  }
  uint64_t v66 = v12;
  long long v67 = v11;
  long long v68 = v14;
  v69 = a1;
  uint64_t v29 = v78;
  uint64_t v30 = v80;
  sub_24A12B9C0((uint64_t)v20, (uint64_t)v26);
  sub_24A12BA1C((uint64_t)v26, (uint64_t)v24);
  uint64_t v31 = (uint64_t)v79;
  sub_24A1268B8();
  if (v31)
  {
    sub_24A12BA6C((uint64_t)v69, (void (*)(void))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
    long long v27 = type metadata accessor for CloudAssets_Asset;
    uint64_t v28 = (uint64_t)v26;
    return sub_24A12BA6C(v28, (void (*)(void))v27);
  }
  v79 = v26;
  sub_24A12B9C0((uint64_t)v17, v30);
  unint64_t v33 = v69;
  uint64_t v34 = v69[1];
  unint64_t v35 = v69[2];
  uint64_t v65 = type metadata accessor for AssetSkeleton();
  uint64_t v36 = (uint64_t *)(v30 + *(int *)(v65 + 20));
  uint64_t *v36 = v34;
  v36[1] = v35;
  unint64_t v37 = v35;
  uint64_t v38 = (uint64_t)v33 + *(int *)(type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0) + 32);
  uint64_t v39 = v72;
  sub_24A129110(v38, v72, (uint64_t *)&unk_26976C040);
  uint64_t v40 = v71;
  int v41 = _s11CloudAssets21UploadResponseMessageOwet_0(v39, 1, v71);
  uint64_t v42 = v29;
  uint64_t v44 = v67;
  uint64_t v43 = v68;
  if (v41 == 1)
  {
    *long long v67 = 0;
    v44[1] = 0xE000000000000000;
    v44[2] = 0;
    v44[3] = 0xE000000000000000;
    v44[4] = 0;
    v44[5] = 0xE000000000000000;
    sub_24A1233B4(v34, v37);
    UnknownStorage.init()();
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v44 + *(int *)(v40 + 32), 1, 1, v29);
    sub_24A12B96C(v39, (uint64_t *)&unk_26976C040);
  }
  else
  {
    sub_24A12B9C0(v39, (uint64_t)v67);
    sub_24A1233B4(v34, v37);
  }
  uint64_t v45 = (uint64_t)v75;
  uint64_t v46 = v40;
  uint64_t v47 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v47;
  uint64_t v48 = v44[3];
  v43[2] = v44[2];
  v43[3] = v48;
  uint64_t v49 = v44[5];
  v43[4] = v44[4];
  v43[5] = v49;
  sub_24A129110((uint64_t)v44 + *(int *)(v46 + 32), v45, &qword_26976AE48);
  int v50 = _s11CloudAssets21UploadResponseMessageOwet_0(v45, 1, v29);
  uint64_t v51 = v74;
  uint64_t v52 = v66;
  if (v50 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53 = v76;
    Google_Protobuf_Timestamp.init()();
    sub_24A12B96C(v45, &qword_26976AE48);
    uint64_t v54 = v77;
  }
  else
  {
    uint64_t v55 = v45;
    v53 = v76;
    uint64_t v54 = v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 32))(v76, v55, v42);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v56 = v73;
  Google_Protobuf_Timestamp.date.getter();
  sub_24A12BA6C((uint64_t)v67, (void (*)(void))type metadata accessor for CloudAssets_Credential);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v42);
  uint64_t v57 = (uint64_t)v68;
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))((char *)v68 + *(int *)(v52 + 28), v56, v70);
  sub_24A12BA6C((uint64_t)v79, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  uint64_t v58 = v65;
  uint64_t v59 = v80;
  sub_24A12B9C0(v57, v80 + *(int *)(v65 + 28));
  uint64_t v60 = v69;
  uint64_t v61 = v69[3];
  unint64_t v62 = v69[4];
  sub_24A1233B4(v61, v62);
  uint64_t result = sub_24A12BA6C((uint64_t)v60, (void (*)(void))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  v63 = (uint64_t *)(v59 + *(int *)(v58 + 24));
  uint64_t *v63 = v61;
  v63[1] = v62;
  return result;
}

uint64_t AssetSkeleton.init(asset:credential:storageReference:storageReferenceSignature:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_24A12B9C0(a1, a7);
  uint64_t v13 = (int *)type metadata accessor for AssetSkeleton();
  uint64_t result = sub_24A12B9C0(a2, a7 + v13[7]);
  uint64_t v15 = (void *)(a7 + v13[5]);
  void *v15 = a3;
  v15[1] = a4;
  uint64_t v16 = (void *)(a7 + v13[6]);
  *uint64_t v16 = a5;
  v16[1] = a6;
  return result;
}

uint64_t sub_24A12A164@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v38 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Timestamp();
  uint64_t v41 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v37 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CloudAssets_Credential(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_OWORD *)(a1 + 3) = xmmword_24A190210;
  uint64_t v10 = type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
  UnknownStorage.init()();
  uint64_t v36 = (uint64_t)a1 + *(int *)(v10 + 32);
  _s11CloudAssets21UploadResponseMessageOwst_0(v36, 1, 1, v7);
  sub_24A123464(&qword_26976AE40);
  uint64_t v11 = *(void *)(type metadata accessor for CloudAssets_Asset(0) - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_24A190860;
  sub_24A127160((void *)(v13 + v12));
  *a1 = v13;
  uint64_t v14 = (int *)type metadata accessor for AssetSkeleton();
  uint64_t v15 = v14[5];
  uint64_t v35 = v1;
  uint64_t v16 = (uint64_t *)(v1 + v15);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  a1[1] = *v16;
  a1[2] = v18;
  uint64_t v19 = (char *)(v1 + v14[7]);
  sub_24A1233B4(v17, v18);
  UnknownStorage.init()();
  uint64_t v20 = (uint64_t)v9 + *(int *)(v7 + 32);
  uint64_t v21 = v5;
  _s11CloudAssets21UploadResponseMessageOwst_0(v20, 1, 1, v5);
  uint64_t v22 = *((void *)v19 + 1);
  *uint64_t v9 = *(void *)v19;
  v9[1] = v22;
  uint64_t v23 = *((void *)v19 + 3);
  v9[2] = *((void *)v19 + 2);
  v9[3] = v23;
  uint64_t v24 = *((void *)v19 + 5);
  v9[4] = *((void *)v19 + 4);
  v9[5] = v24;
  uint64_t v25 = type metadata accessor for Credential(0);
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v38, &v19[*(int *)(v25 + 28)], v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = v37;
  Google_Protobuf_Timestamp.init(date:)();
  sub_24A12B96C(v20, &qword_26976AE48);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v20, v26, v21);
  _s11CloudAssets21UploadResponseMessageOwst_0(v20, 0, 1, v21);
  uint64_t v27 = v36;
  sub_24A12B96C(v36, (uint64_t *)&unk_26976C040);
  sub_24A12B9C0((uint64_t)v9, v27);
  _s11CloudAssets21UploadResponseMessageOwst_0(v27, 0, 1, v7);
  uint64_t v28 = (uint64_t *)(v35 + v14[6]);
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  uint64_t v31 = a1[3];
  unint64_t v32 = a1[4];
  sub_24A1233B4(*v28, v30);
  uint64_t result = sub_24A12340C(v31, v32);
  a1[3] = v29;
  a1[4] = v30;
  return result;
}

uint64_t AssetSkeleton.encode(to:)()
{
  uint64_t v4 = sub_24A129214();
  type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(v4);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v5);
  sub_24A129164();
  uint64_t v13 = sub_24A123464(&qword_26976AE08);
  sub_24A12477C();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_24A1247F8();
  sub_24A1234A8(v0, v0[3]);
  sub_24A129908();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A12A164(v3);
  sub_24A12A9B4(&qword_26976AE00, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  uint64_t v9 = Message.serializedData(partial:)();
  unint64_t v11 = v10;
  sub_24A12BA6C((uint64_t)v3, (void (*)(void))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  if (!v1)
  {
    sub_24A12638C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A12340C(v9, v11);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v2, v13);
}

uint64_t AssetSkeleton.hash(into:)(uint64_t a1)
{
  Asset.ID.hash(into:)();
  type metadata accessor for Asset(0);
  sub_24A12BAE0();
  uint64_t v6 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  sub_24A1233B4(v2, v3);
  sub_24A12BAC4();
  sub_24A12340C(v2, v3);
  sub_24A1233B4(v6, v7);
  Data.hash(into:)();
  sub_24A12340C(v6, v7);
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(v1 + 24)));
  type metadata accessor for AssetSkeleton();
  sub_24A12BAE0();
  sub_24A1233B4(v2, v3);
  sub_24A12BAC4();
  sub_24A12340C(v2, v3);
  uint64_t v8 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_24A1233B4(*v8, v10);
  sub_24A12BAC4();
  sub_24A12340C(v9, v10);
  return Credential.hash(into:)();
}

uint64_t static AssetSkeleton.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!static Asset.== infix(_:_:)(a1, a2)) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for AssetSkeleton();
  sub_24A1291C4();
  if ((v5 & 1) == 0) {
    return 0;
  }
  sub_24A1291C4();
  if ((v6 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(int *)(v4 + 28);
  return static Credential.== infix(_:_:)((void *)(a1 + v7), (void *)(a2 + v7));
}

Swift::Int AssetSkeleton.hashValue.getter()
{
  Hasher.init(_seed:)();
  AssetSkeleton.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_24A12A8FC()
{
  Hasher.init(_seed:)();
  AssetSkeleton.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_24A12A938@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetSkeleton.init(from:)(a1, a2);
}

uint64_t sub_24A12A950()
{
  return AssetSkeleton.encode(to:)();
}

uint64_t sub_24A12A96C()
{
  return sub_24A12A9B4(&qword_26976AE10, (void (*)(uint64_t))type metadata accessor for AssetSkeleton);
}

uint64_t sub_24A12A9B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetSkeleton(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v53 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v53 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for Asset.ID(0);
    uint64_t v9 = v8[5];
    unint64_t v10 = (uint64_t *)((char *)a1 + v9);
    unint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = v8[6];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_24A1233B4(v16, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = v8[7];
    uint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    sub_24A1233B4(*v20, v22);
    *uint64_t v19 = v21;
    v19[1] = v22;
    uint64_t v23 = type metadata accessor for Asset(0);
    uint64_t v24 = *(int *)(v23 + 20);
    uint64_t v25 = (uint64_t *)((char *)a1 + v24);
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = *(uint64_t *)((char *)a2 + v24);
    unint64_t v28 = *(uint64_t *)((char *)a2 + v24 + 8);
    sub_24A1233B4(v27, v28);
    *uint64_t v25 = v27;
    v25[1] = v28;
    uint64_t v29 = *((void *)v26 + 2);
    unint64_t v30 = *((void *)v26 + 3);
    sub_24A1233B4(v29, v30);
    v25[2] = v29;
    v25[3] = v30;
    *(uint64_t *)((char *)a1 + *(int *)(v23 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v23 + 24));
    uint64_t v31 = a3[5];
    unint64_t v32 = (uint64_t *)((char *)a1 + v31);
    unint64_t v33 = (uint64_t *)((char *)a2 + v31);
    uint64_t v34 = *v33;
    unint64_t v35 = v33[1];
    sub_24A1233B4(*v33, v35);
    *unint64_t v32 = v34;
    v32[1] = v35;
    uint64_t v36 = a3[6];
    unint64_t v37 = (uint64_t *)((char *)a1 + v36);
    uint64_t v38 = (uint64_t *)((char *)a2 + v36);
    uint64_t v39 = *v38;
    unint64_t v40 = v38[1];
    sub_24A1233B4(*v38, v40);
    *unint64_t v37 = v39;
    v37[1] = v40;
    uint64_t v41 = a3[7];
    uint64_t v42 = (uint64_t *)((char *)a1 + v41);
    uint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = *(uint64_t *)((char *)a2 + v41);
    uint64_t v45 = v43[1];
    *uint64_t v42 = v44;
    v42[1] = v45;
    uint64_t v46 = v43[3];
    v42[2] = v43[2];
    v42[3] = v46;
    uint64_t v47 = v43[5];
    v42[4] = v43[4];
    v42[5] = v47;
    uint64_t v48 = *(int *)(type metadata accessor for Credential(0) + 28);
    uint64_t v49 = (char *)v42 + v48;
    int v50 = (char *)v43 + v48;
    uint64_t v51 = type metadata accessor for Date();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52(v49, v50, v51);
  }
  return a1;
}

uint64_t destroy for AssetSkeleton(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(a1 + *(int *)(v5 + 24)), *(void *)(a1 + *(int *)(v5 + 24) + 8));
  sub_24A12340C(*(void *)(a1 + *(int *)(v5 + 28)), *(void *)(a1 + *(int *)(v5 + 28) + 8));
  uint64_t v6 = a1 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_24A12340C(*(void *)v6, *(void *)(v6 + 8));
  sub_24A12340C(*(void *)(v6 + 16), *(void *)(v6 + 24));
  sub_24A12340C(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8));
  sub_24A12340C(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v7 = a1 + a2[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v9 = type metadata accessor for Date();
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  return v10(v8, v9);
}

uint64_t initializeWithCopy for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = v7[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  swift_bridgeObjectRetain();
  sub_24A1233B4(v15, v16);
  uint64_t *v13 = v15;
  v13[1] = v16;
  uint64_t v17 = v7[7];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_24A1233B4(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = type metadata accessor for Asset(0);
  uint64_t v23 = *(int *)(v22 + 20);
  uint64_t v24 = (uint64_t *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void *)(a2 + v23);
  unint64_t v27 = *(void *)(a2 + v23 + 8);
  sub_24A1233B4(v26, v27);
  *uint64_t v24 = v26;
  v24[1] = v27;
  uint64_t v28 = *(void *)(v25 + 16);
  unint64_t v29 = *(void *)(v25 + 24);
  sub_24A1233B4(v28, v29);
  void v24[2] = v28;
  v24[3] = v29;
  *(void *)(a1 + *(int *)(v22 + 24)) = *(void *)(a2 + *(int *)(v22 + 24));
  uint64_t v30 = a3[5];
  uint64_t v31 = (uint64_t *)(a1 + v30);
  unint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  sub_24A1233B4(*v32, v34);
  *uint64_t v31 = v33;
  v31[1] = v34;
  uint64_t v35 = a3[6];
  uint64_t v36 = (uint64_t *)(a1 + v35);
  unint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v38 = *v37;
  unint64_t v39 = v37[1];
  sub_24A1233B4(*v37, v39);
  uint64_t *v36 = v38;
  v36[1] = v39;
  uint64_t v40 = a3[7];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (void *)(a2 + v40);
  uint64_t v43 = *(void *)(a2 + v40);
  uint64_t v44 = v42[1];
  *uint64_t v41 = v43;
  v41[1] = v44;
  uint64_t v45 = v42[3];
  v41[2] = v42[2];
  v41[3] = v45;
  uint64_t v46 = v42[5];
  v41[4] = v42[4];
  v41[5] = v46;
  uint64_t v47 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v48 = (char *)v41 + v47;
  uint64_t v49 = (char *)v42 + v47;
  uint64_t v50 = type metadata accessor for Date();
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v51(v48, v49, v50);
  return a1;
}

uint64_t assignWithCopy for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = v7[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_24A1233B4(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_24A12340C(v16, v17);
  uint64_t v18 = v7[7];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_24A1233B4(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  *uint64_t v19 = v21;
  v19[1] = v22;
  sub_24A12340C(v23, v24);
  uint64_t v25 = type metadata accessor for Asset(0);
  uint64_t v26 = *(int *)(v25 + 20);
  unint64_t v27 = (uint64_t *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)(a2 + v26);
  unint64_t v30 = *(void *)(a2 + v26 + 8);
  sub_24A1233B4(v29, v30);
  uint64_t v31 = *v27;
  unint64_t v32 = v27[1];
  *unint64_t v27 = v29;
  v27[1] = v30;
  sub_24A12340C(v31, v32);
  uint64_t v33 = *(void *)(v28 + 16);
  unint64_t v34 = *(void *)(v28 + 24);
  sub_24A1233B4(v33, v34);
  uint64_t v35 = v27[2];
  unint64_t v36 = v27[3];
  v27[2] = v33;
  v27[3] = v34;
  sub_24A12340C(v35, v36);
  *(void *)(a1 + *(int *)(v25 + 24)) = *(void *)(a2 + *(int *)(v25 + 24));
  uint64_t v37 = a3[5];
  uint64_t v38 = (uint64_t *)(a1 + v37);
  unint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  sub_24A1233B4(*v39, v41);
  uint64_t v42 = *v38;
  unint64_t v43 = v38[1];
  *uint64_t v38 = v40;
  v38[1] = v41;
  sub_24A12340C(v42, v43);
  uint64_t v44 = a3[6];
  uint64_t v45 = (uint64_t *)(a1 + v44);
  uint64_t v46 = (uint64_t *)(a2 + v44);
  uint64_t v47 = *v46;
  unint64_t v48 = v46[1];
  sub_24A1233B4(*v46, v48);
  uint64_t v49 = *v45;
  unint64_t v50 = v45[1];
  *uint64_t v45 = v47;
  v45[1] = v48;
  sub_24A12340C(v49, v50);
  uint64_t v51 = a3[7];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  void *v52 = *(void *)(a2 + v51);
  v52[1] = *(void *)(a2 + v51 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52[2] = v53[2];
  v52[3] = v53[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52[4] = v53[4];
  v52[5] = v53[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v55 = (char *)v52 + v54;
  uint64_t v56 = (char *)v53 + v54;
  uint64_t v57 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 24))(v55, v56, v57);
  return a1;
}

uint64_t initializeWithTake for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  uint64_t v8 = type metadata accessor for Asset(0);
  uint64_t v9 = *(int *)(v8 + 20);
  unint64_t v10 = (_OWORD *)(a1 + v9);
  uint64_t v11 = (_OWORD *)(a2 + v9);
  long long v12 = v11[1];
  *unint64_t v10 = *v11;
  v10[1] = v12;
  *(void *)(a1 + *(int *)(v8 + 24)) = *(void *)(a2 + *(int *)(v8 + 24));
  uint64_t v13 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[7];
  unint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  long long v17 = v16[1];
  _OWORD *v15 = *v16;
  v15[1] = v17;
  v15[2] = v16[2];
  uint64_t v18 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v19 = (char *)v15 + v18;
  uint64_t v20 = (char *)v16 + v18;
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = v7[6];
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_24A12340C(v14, v15);
  uint64_t v16 = v7[7];
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_24A12340C(v17, v18);
  uint64_t v19 = type metadata accessor for Asset(0);
  uint64_t v20 = *(int *)(v19 + 20);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = *(void *)(a1 + v20);
  unint64_t v24 = *(void *)(a1 + v20 + 8);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  sub_24A12340C(v23, v24);
  uint64_t v25 = *(void *)(v21 + 16);
  unint64_t v26 = *(void *)(v21 + 24);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
  sub_24A12340C(v25, v26);
  *(void *)(a1 + *(int *)(v19 + 24)) = *(void *)(a2 + *(int *)(v19 + 24));
  uint64_t v27 = a3[5];
  uint64_t v28 = *(void *)(a1 + v27);
  unint64_t v29 = *(void *)(a1 + v27 + 8);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  sub_24A12340C(v28, v29);
  uint64_t v30 = a3[6];
  uint64_t v31 = *(void *)(a1 + v30);
  unint64_t v32 = *(void *)(a1 + v30 + 8);
  *(_OWORD *)(a1 + v30) = *(_OWORD *)(a2 + v30);
  sub_24A12340C(v31, v32);
  uint64_t v33 = a3[7];
  unint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  uint64_t v36 = *(void *)(a2 + v33 + 8);
  *unint64_t v34 = *(void *)(a2 + v33);
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v37 = v35[3];
  v34[2] = v35[2];
  v34[3] = v37;
  swift_bridgeObjectRelease();
  uint64_t v38 = v35[5];
  v34[4] = v35[4];
  v34[5] = v38;
  swift_bridgeObjectRelease();
  uint64_t v39 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v40 = (char *)v34 + v39;
  unint64_t v41 = (char *)v35 + v39;
  uint64_t v42 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetSkeleton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A12B548);
}

uint64_t sub_24A12B548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Asset(0);
  sub_24A124798();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    if (a2 == 12)
    {
      uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
      if (((4 * v10) & 0xC) != 0) {
        return 16 - ((4 * v10) & 0xC | (v10 >> 2));
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = type metadata accessor for Credential(0);
    uint64_t v9 = a1 + *(int *)(a3 + 28);
  }
  return _s11CloudAssets21UploadResponseMessageOwet_0(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AssetSkeleton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A12B61C);
}

void sub_24A12B61C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Asset(0);
  sub_24A124798();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 12)
    {
      uint64_t v12 = (void *)(a1 + *(int *)(a4 + 20));
      *uint64_t v12 = 0;
      v12[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
      return;
    }
    uint64_t v10 = type metadata accessor for Credential(0);
    uint64_t v11 = a1 + *(int *)(a4 + 28);
  }
  _s11CloudAssets21UploadResponseMessageOwst_0(v11, a2, a2, v10);
}

uint64_t sub_24A12B6D4()
{
  uint64_t result = type metadata accessor for Asset(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Credential(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AssetSkeleton.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A12B844);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetSkeleton.CodingKeys()
{
  return &type metadata for AssetSkeleton.CodingKeys;
}

unint64_t sub_24A12B880()
{
  unint64_t result = qword_26976AE28;
  if (!qword_26976AE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AE28);
  }
  return result;
}

unint64_t sub_24A12B8D0()
{
  unint64_t result = qword_26976AE30;
  if (!qword_26976AE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AE30);
  }
  return result;
}

unint64_t sub_24A12B920()
{
  unint64_t result = qword_26976AE38;
  if (!qword_26976AE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AE38);
  }
  return result;
}

uint64_t sub_24A12B96C(uint64_t a1, uint64_t *a2)
{
  sub_24A123464(a2);
  sub_24A1247B0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_24A12B9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A129214();
  v5(v4);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a2, v2);
  return a2;
}

uint64_t sub_24A12BA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_24A129214();
  v4(v3);
  sub_24A1247B0();
  uint64_t v5 = sub_24A12937C();
  v6(v5);
  return a2;
}

uint64_t sub_24A12BA6C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A1247B0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_24A12BAC4()
{
  return Data.hash(into:)();
}

uint64_t sub_24A12BAF4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A12BAFC@<X0>(uint64_t a1@<X8>)
{
  return sub_24A12BB24(&OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__signals, &qword_26976AE60, a1);
}

uint64_t sub_24A12BB10@<X0>(uint64_t a1@<X8>)
{
  return sub_24A12BB24(&OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__results, &qword_26976AE70, a1);
}

uint64_t sub_24A12BB24@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  sub_24A123464(a2);
  sub_24A1247B0();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  return v8(a3, v5, v6);
}

uint64_t sub_24A12BB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = a1;
  uint64_t v7 = v3 + OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__signals;
  sub_24A123464(&qword_26976AE60);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, a2);
  uint64_t v9 = v3 + OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__results;
  sub_24A123464(&qword_26976AE70);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, a3);
  return v3;
}

uint64_t AssetsUploadCoordinator.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__signals;
  sub_24A123464(&qword_26976AE60);
  sub_24A1247B0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  uint64_t v3 = v0 + OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__results;
  sub_24A123464(&qword_26976AE70);
  sub_24A1247B0();
  (*(void (**)(uint64_t))(v4 + 8))(v3);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetsUploadCoordinator.__deallocating_deinit()
{
  AssetsUploadCoordinator.deinit();
  return MEMORY[0x270FA2418](v0);
}

uint64_t AssetsUploadCoordinator.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_24A12BD3C()
{
  return AssetsUploadCoordinator.unownedExecutor.getter();
}

uint64_t sub_24A12BD58()
{
  return type metadata accessor for AssetsUploadCoordinator();
}

uint64_t type metadata accessor for AssetsUploadCoordinator()
{
  uint64_t result = qword_26976AE78;
  if (!qword_26976AE78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_24A12BDA8()
{
  sub_24A12BF10();
  if (v0 <= 0x3F)
  {
    sub_24A12BF7C();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for AssetsUploadCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetsUploadCoordinator);
}

uint64_t dispatch thunk of AssetsUploadCoordinator.assetSkeletons.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AssetsUploadCoordinator.signals.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AssetsUploadCoordinator.results.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

void sub_24A12BF10()
{
  if (!qword_26976AE88)
  {
    sub_24A123538(&qword_26976C190);
    unint64_t v0 = type metadata accessor for AsyncThrowingStream();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26976AE88);
    }
  }
}

void sub_24A12BF7C()
{
  if (!qword_26976AE90)
  {
    sub_24A123538(&qword_26976AE98);
    sub_24A123538(&qword_26976C190);
    unint64_t v0 = type metadata accessor for AsyncThrowingStream();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26976AE90);
    }
  }
}

uint64_t XPCAsyncSequenceRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t XPCAsyncSequenceRequest.data.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for XPCAsyncSequenceRequest() + 20);
  uint64_t v2 = *(void *)v1;
  sub_24A1233B4(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for XPCAsyncSequenceRequest()
{
  uint64_t result = qword_26976AEB8;
  if (!qword_26976AEB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

BOOL sub_24A12C0E8(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_24A12C0F8(uint64_t a1, char a2)
{
}

uint64_t sub_24A12C120(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A12C1E8()
{
  return 2;
}

Swift::Int sub_24A12C1F0(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_24A12C238(char a1)
{
  if (a1) {
    return 1635017060;
  }
  else {
    return 25705;
  }
}

BOOL sub_24A12C25C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24A12C0E8(*a1, *a2);
}

Swift::Int sub_24A12C268()
{
  return sub_24A12C1F0(*v0);
}

void sub_24A12C270(uint64_t a1)
{
  sub_24A12C0F8(a1, *v1);
}

uint64_t sub_24A12C278()
{
  return sub_24A12C238(*v0);
}

uint64_t sub_24A12C280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A12C120(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A12C2A8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A12C1E8();
  *a1 = result;
  return result;
}

uint64_t sub_24A12C2D0(uint64_t a1)
{
  unint64_t v2 = sub_24A12C4C8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A12C30C(uint64_t a1)
{
  unint64_t v2 = sub_24A12C4C8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t XPCAsyncSequenceRequest.encode(to:)(void *a1)
{
  uint64_t v4 = sub_24A123464(&qword_26976AEA0);
  sub_24A12477C();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_24A1247F8();
  sub_24A1234A8(a1, a1[3]);
  sub_24A12C4C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_24A12C8BC(&qword_26976AC60);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for XPCAsyncSequenceRequest();
    sub_24A12638C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

unint64_t sub_24A12C4C8()
{
  unint64_t result = qword_26976AEA8;
  if (!qword_26976AEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AEA8);
  }
  return result;
}

uint64_t XPCAsyncSequenceRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v25 = type metadata accessor for UUID();
  sub_24A12477C();
  uint64_t v23 = v5;
  MEMORY[0x270FA5388](v6);
  sub_24A1247F8();
  uint64_t v26 = sub_24A123464(&qword_26976AEB0);
  sub_24A12477C();
  uint64_t v24 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = type metadata accessor for XPCAsyncSequenceRequest();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1234A8(a1, a1[3]);
  sub_24A12C4C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_24A123580((uint64_t)a1);
  }
  uint64_t v12 = v11;
  uint64_t v13 = v23;
  LOBYTE(v27) = 0;
  sub_24A12C8BC(&qword_26976AC80);
  uint64_t v14 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
  uint64_t v21 = (uint64_t)v12;
  v15(v12, v3, v14);
  char v28 = 1;
  sub_24A1262F4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = sub_24A12D134();
  v17(v16);
  uint64_t v19 = v21;
  uint64_t v18 = v22;
  *(_OWORD *)(v21 + *(int *)(v9 + 20)) = v27;
  sub_24A12C7C8(v19, v18);
  sub_24A123580((uint64_t)a1);
  return sub_24A12C82C(v19);
}

uint64_t sub_24A12C7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCAsyncSequenceRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A12C82C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCAsyncSequenceRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A12C888()
{
  return sub_24A12C8BC(&qword_26976AC40);
}

uint64_t sub_24A12C8BC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A12C904@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCAsyncSequenceRequest.init(from:)(a1, a2);
}

uint64_t sub_24A12C91C(void *a1)
{
  return XPCAsyncSequenceRequest.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCAsyncSequenceRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_24A1233B4(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t destroy for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  return sub_24A12340C(v6, v7);
}

uint64_t initializeWithCopy for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_24A1233B4(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t assignWithCopy for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_24A1233B4(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_24A12340C(v12, v13);
  return a1;
}

uint64_t initializeWithTake for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_24A12340C(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A12CCCC);
}

uint64_t sub_24A12CCCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  sub_24A124798();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return _s11CloudAssets21UploadResponseMessageOwet_0(a1, a2, v6);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v9) & 0xC) != 0) {
      return 16 - ((4 * v9) & 0xC | (v9 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A12CD80);
}

void sub_24A12CD80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  sub_24A124798();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s11CloudAssets21UploadResponseMessageOwst_0(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v10 = (void *)(a1 + *(int *)(a4 + 20));
    *uint64_t v10 = 0;
    v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
}

uint64_t sub_24A12CE18()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for XPCAsyncSequenceRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A12D000);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_24A12D028(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceRequest.CodingKeys()
{
  return &type metadata for XPCAsyncSequenceRequest.CodingKeys;
}

unint64_t sub_24A12D048()
{
  unint64_t result = qword_26976AEC8;
  if (!qword_26976AEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AEC8);
  }
  return result;
}

unint64_t sub_24A12D098()
{
  unint64_t result = qword_26976AED0;
  if (!qword_26976AED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AED0);
  }
  return result;
}

unint64_t sub_24A12D0E8()
{
  unint64_t result = qword_26976AED8;
  if (!qword_26976AED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AED8);
  }
  return result;
}

uint64_t sub_24A12D134()
{
  return v0;
}

uint64_t AssetDownloadRequest.id.getter()
{
  type metadata accessor for UUID();
  sub_24A1247B0();
  uint64_t v0 = sub_24A1291AC();
  return v1(v0);
}

uint64_t AssetDownloadRequest.tenantName.getter()
{
  return sub_24A1291AC();
}

uint64_t type metadata accessor for AssetDownloadRequest()
{
  uint64_t result = qword_26976AF28;
  if (!qword_26976AF28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AssetDownloadRequest.workingDirectory.getter()
{
  sub_24A131418();
  type metadata accessor for URL();
  sub_24A1247B0();
  uint64_t v0 = sub_24A1291AC();
  return v1(v0);
}

uint64_t AssetDownloadRequest.asset.getter()
{
  uint64_t v2 = sub_24A131418();
  return sub_24A12F934(v1 + *(int *)(v2 + 28), v0, (void (*)(void))type metadata accessor for Asset);
}

uint64_t AssetDownloadRequest.range.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AssetDownloadRequest() + 32));
}

uint64_t AssetDownloadRequest.fileURL.getter()
{
  sub_24A131418();
  type metadata accessor for URL();
  sub_24A1247B0();
  uint64_t v0 = sub_24A1291AC();
  return v1(v0);
}

uint64_t AssetDownloadRequest.credential.getter()
{
  uint64_t v2 = sub_24A131418();
  return sub_24A12F934(v1 + *(int *)(v2 + 40), v0, (void (*)(void))type metadata accessor for Credential);
}

uint64_t AssetDownloadRequest.storageReference.getter()
{
  uint64_t v0 = type metadata accessor for AssetDownloadRequest();
  sub_24A1313D8(*(int *)(v0 + 44));
  return sub_24A1291AC();
}

uint64_t AssetDownloadRequest.storageReferenceSignature.getter()
{
  uint64_t v0 = type metadata accessor for AssetDownloadRequest();
  sub_24A1313D8(*(int *)(v0 + 48));
  return sub_24A1291AC();
}

uint64_t AssetDownloadRequest.applicationID.getter()
{
  return sub_24A1291AC();
}

__n128 AssetDownloadRequest.init(asset:fileURL:credential:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  UUID.init()();
  uint64_t v7 = type metadata accessor for AssetDownloadRequest();
  sub_24A131258(v7);
  sub_24A1313CC();
  sub_24A12F934(a1, v8, (void (*)(void))type metadata accessor for Asset);
  type metadata accessor for URL();
  sub_24A124798();
  uint64_t v9 = sub_24A1312D8();
  v10(v9);
  sub_24A12F934(a2, a3 + v3[10], (void (*)(void))type metadata accessor for Credential);
  *(_OWORD *)(a3 + v3[11]) = xmmword_24A190210;
  sub_24A12F994(a2, (void (*)(void))type metadata accessor for Credential);
  uint64_t v11 = sub_24A13130C();
  v12(v11);
  sub_24A12F994(a1, (void (*)(void))type metadata accessor for Asset);
  *(_OWORD *)(a3 + v3[12]) = xmmword_24A190210;
  sub_24A131234();
  return result;
}

void sub_24A12D578(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = a1;
  unint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v51 = type metadata accessor for URL.DirectoryHint();
  sub_24A12477C();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_24A129164();
  uint64_t v7 = sub_24A123464(&qword_26976B4D0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL();
  sub_24A12477C();
  uint64_t v60 = v10;
  uint64_t v61 = v11;
  MEMORY[0x270FA5388](v10);
  unint64_t v50 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A131324();
  MEMORY[0x270FA5388](v13);
  sub_24A13140C();
  uint64_t v56 = v14;
  sub_24A131324();
  MEMORY[0x270FA5388](v15);
  sub_24A13140C();
  uint64_t v57 = v16;
  sub_24A131324();
  MEMORY[0x270FA5388](v17);
  sub_24A13140C();
  uint64_t v55 = v18;
  sub_24A131324();
  MEMORY[0x270FA5388](v19);
  sub_24A13140C();
  v46[0] = v20;
  sub_24A131324();
  MEMORY[0x270FA5388](v21);
  v46[1] = (char *)v46 - v22;
  uint64_t v23 = NSHomeDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v9, 1, 1, v60);
  unsigned int v24 = *MEMORY[0x263F06E50];
  uint64_t v25 = v5;
  uint64_t v27 = v5 + 104;
  uint64_t v26 = *(void (**)(void))(v5 + 104);
  uint64_t v28 = v51;
  sub_24A13136C();
  v26();
  uint64_t v58 = v26;
  URL.init(filePath:directoryHint:relativeTo:)();
  sub_24A1313F8(0x7972617262694CLL);
  sub_24A13136C();
  v26();
  unint64_t v54 = sub_24A12625C();
  URL.appending<A>(path:directoryHint:)();
  unint64_t v29 = *(void (**)(void))(v25 + 8);
  uint64_t v59 = v25 + 8;
  sub_24A1313C0();
  sub_24A131348();
  v29();
  swift_bridgeObjectRelease();
  uint64_t v30 = v60;
  uint64_t v31 = *(void (**)(void))(v61 + 8);
  v61 += 8;
  sub_24A131348();
  v31();
  sub_24A1313F8(0x736568636143);
  unint64_t v32 = v58;
  sub_24A13136C();
  v32();
  uint64_t v33 = v56;
  URL.appending<A>(path:directoryHint:)();
  ((void (*)(uint64_t, uint64_t))v29)(v3, v28);
  swift_bridgeObjectRelease();
  ((void (*)(void (*)(void), uint64_t))v31)(v33, v30);
  uint64_t v62 = 0x74694B64756F6C43;
  unint64_t v63 = 0xE800000000000000;
  unsigned int v52 = v24;
  uint64_t v53 = v27;
  sub_24A13136C();
  v32();
  unint64_t v34 = v57;
  URL.appending<A>(path:directoryHint:)();
  uint64_t v56 = v29;
  ((void (*)(uint64_t, uint64_t))v29)(v3, v28);
  swift_bridgeObjectRelease();
  uint64_t v57 = v31;
  ((void (*)(void (*)(void), uint64_t))v31)(v34, v30);
  id v35 = objc_msgSend(self, sel_mainBundle);
  id v36 = objc_msgSend(v35, sel_bundleIdentifier);

  if (v36)
  {
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v39 = v38;

    uint64_t v62 = v37;
    unint64_t v63 = v39;
    uint64_t v40 = v52;
    unint64_t v41 = v58;
    ((void (*)(uint64_t, void, uint64_t))v58)(v3, v52, v28);
    URL.appending<A>(path:directoryHint:)();
    sub_24A1313C0();
    uint64_t v42 = v56;
    sub_24A131348();
    v42();
    swift_bridgeObjectRelease();
    unint64_t v43 = v57;
    sub_24A131348();
    v43();
    uint64_t v62 = 0x73734164756F6C43;
    unint64_t v63 = 0xEB00000000737465;
    ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v3, v40, v28);
    URL.appending<A>(path:directoryHint:)();
    uint64_t v44 = sub_24A1313C0();
    ((void (*)(uint64_t))v42)(v44);
    swift_bridgeObjectRelease();
    sub_24A1312CC();
    v43();
    uint64_t v62 = v47;
    unint64_t v63 = v48;
    ((void (*)(uint64_t, void, uint64_t))v58)(v3, v52, v28);
    URL.appending<A>(path:directoryHint:)();
    uint64_t v45 = sub_24A1313C0();
    ((void (*)(uint64_t))v42)(v45);
    sub_24A1312CC();
    v43();
  }
  else
  {
    __break(1u);
  }
}

__n128 AssetDownloadRequest.init(tenantName:asset:fileURL:credential:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  UUID.init()();
  uint64_t v10 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v11 = (uint64_t *)(a5 + v10[5]);
  *uint64_t v11 = a1;
  v11[1] = a2;
  uint64_t v12 = a5 + v10[6];
  swift_bridgeObjectRetain();
  sub_24A12D578(a1, a2, v12);
  swift_bridgeObjectRelease();
  sub_24A1313CC();
  sub_24A12F934(a3, v13, (void (*)(void))type metadata accessor for Asset);
  type metadata accessor for URL();
  sub_24A124798();
  uint64_t v14 = sub_24A1312D8();
  v15(v14);
  sub_24A12F934(a4, a5 + v10[10], (void (*)(void))type metadata accessor for Credential);
  *(_OWORD *)(a5 + v10[11]) = xmmword_24A190210;
  sub_24A12F994(a4, (void (*)(void))type metadata accessor for Credential);
  uint64_t v16 = sub_24A13130C();
  v17(v16);
  sub_24A12F994(a3, (void (*)(void))type metadata accessor for Asset);
  *(_OWORD *)(a5 + v10[12]) = xmmword_24A190210;
  sub_24A131234();
  return result;
}

void AssetDownloadRequest.init(skeleton:fileURL:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  UUID.init()();
  uint64_t v7 = type metadata accessor for AssetDownloadRequest();
  sub_24A131258(v7);
  sub_24A1313CC();
  sub_24A12DD6C(a1, v8, (void (*)(void))type metadata accessor for Asset);
  type metadata accessor for URL();
  sub_24A1247B0();
  uint64_t v9 = sub_24A1313AC();
  v10(v9);
  uint64_t v11 = type metadata accessor for AssetSkeleton();
  uint64_t v12 = sub_24A131354(v11);
  sub_24A12DD6C(v12, v13, (void (*)(void))type metadata accessor for Credential);
  *(_OWORD *)(a3 + *(int *)(v3 + 44)) = *(_OWORD *)(a1 + *(int *)(a2 + 20));
  *(_OWORD *)(a3 + *(int *)(v3 + 48)) = *(_OWORD *)(a1 + *(int *)(a2 + 24));
  sub_24A131234();
}

uint64_t sub_24A12DD6C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

void AssetDownloadRequest.init(tenantName:skeleton:fileURL:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  UUID.init()();
  uint64_t v10 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v11 = (uint64_t *)(a5 + v10[5]);
  *uint64_t v11 = a1;
  v11[1] = a2;
  uint64_t v12 = a5 + v10[6];
  swift_bridgeObjectRetain();
  sub_24A12D578(a1, a2, v12);
  swift_bridgeObjectRelease();
  sub_24A1313CC();
  sub_24A12DD6C(a3, v13, (void (*)(void))type metadata accessor for Asset);
  type metadata accessor for URL();
  sub_24A1247B0();
  uint64_t v14 = sub_24A1313AC();
  v15(v14);
  uint64_t v16 = type metadata accessor for AssetSkeleton();
  uint64_t v17 = sub_24A131354(v16);
  sub_24A12DD6C(v17, v18, (void (*)(void))type metadata accessor for Credential);
  *(_OWORD *)(a5 + v10[11]) = *(_OWORD *)(a3 + *(int *)(a4 + 20));
  *(_OWORD *)(a5 + v10[12]) = *(_OWORD *)(a3 + *(int *)(a4 + 24));
  sub_24A131234();
}

__n128 AssetDownloadRequest.init(asset:destination:credential:range:applicationID:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  UUID.init()();
  uint64_t v15 = *a3;
  unint64_t v16 = a3[1];
  uint64_t v17 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v18 = (uint64_t *)(a9 + v17[5]);
  *uint64_t v18 = v15;
  v18[1] = v16;
  uint64_t v19 = a9 + v17[6];
  swift_bridgeObjectRetain();
  sub_24A12D578(v15, v16, v19);
  sub_24A12F934(a1, a9 + v17[7], (void (*)(void))type metadata accessor for Asset);
  uint64_t v20 = a9 + v17[8];
  *(void *)uint64_t v20 = a4;
  *(void *)(v20 + 8) = a5;
  *(unsigned char *)(v20 + 16) = a6 & 1;
  uint64_t v21 = a9 + v17[9];
  uint64_t v22 = type metadata accessor for URL();
  sub_24A124798();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, a2, v22);
  sub_24A12F934((uint64_t)a3, a9 + v17[10], (void (*)(void))type metadata accessor for Credential);
  unsigned int v24 = (void *)(a9 + v17[13]);
  *unsigned int v24 = a7;
  v24[1] = a8;
  *(_OWORD *)(a9 + v17[11]) = xmmword_24A190210;
  sub_24A1312CC();
  v25();
  sub_24A12F994(a1, (void (*)(void))type metadata accessor for Asset);
  sub_24A12F994((uint64_t)a3, (void (*)(void))type metadata accessor for Credential);
  __n128 result = (__n128)xmmword_24A190210;
  *(_OWORD *)(a9 + v17[12]) = xmmword_24A190210;
  return result;
}

void AssetDownloadRequest.hash(into:)()
{
  uint64_t v1 = v0;
  type metadata accessor for UUID();
  sub_24A12FB04(&qword_26976AC40, MEMORY[0x263F07508]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = (int *)type metadata accessor for AssetDownloadRequest();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  sub_24A12FB04(&qword_26976AC48, MEMORY[0x263F06EA8]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v3 = v0 + v2[7];
  Asset.ID.hash(into:)();
  uint64_t v4 = type metadata accessor for Asset(0);
  uint64_t v5 = (uint64_t *)(v3 + *(int *)(v4 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  uint64_t v9 = v5[2];
  unint64_t v8 = v5[3];
  sub_24A1233B4(*v5, v7);
  Data.hash(into:)();
  sub_24A12340C(v6, v7);
  sub_24A1233B4(v9, v8);
  Data.hash(into:)();
  sub_24A12340C(v9, v8);
  Hasher._combine(_:)(*(void *)(v3 + *(int *)(v4 + 24)));
  uint64_t v10 = v1 + v2[8];
  if (*(unsigned char *)(v10 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v11 = *(void *)v10;
    unint64_t v8 = *(void *)(v10 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
    Hasher._combine(_:)(v8);
  }
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v12 = v1 + v2[10];
  Credential.hash(into:)();
  sub_24A13138C(v2[11]);
  Data.hash(into:)();
  sub_24A12340C(v12, v8);
  sub_24A13138C(v2[12]);
  Data.hash(into:)();
  sub_24A12340C(v12, v8);
  if (*(void *)(v1 + v2[13] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static AssetDownloadRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  unint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v10 & 1) != 0))
  {
    if ((MEMORY[0x24C5BCC70](a1 + v4[6], a2 + v4[6]) & 1) == 0 || !static Asset.== infix(_:_:)(a1 + v4[7], a2 + v4[7])) {
      return 0;
    }
    uint64_t v12 = v4[8];
    uint64_t v13 = (uint64_t *)(a1 + v12);
    char v14 = *(unsigned char *)(a1 + v12 + 16);
    uint64_t v15 = (uint64_t *)(a2 + v12);
    if (v14)
    {
      if ((v15[2] & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v15[2]) {
        return 0;
      }
      uint64_t v17 = *v13;
      uint64_t v16 = v13[1];
      uint64_t v19 = *v15;
      uint64_t v18 = v15[1];
      if (v17 != v19 || v16 != v18) {
        return 0;
      }
    }
    if ((MEMORY[0x24C5BCC70](a1 + v4[9], a2 + v4[9]) & 1) == 0) {
      return 0;
    }
    if ((static Credential.== infix(_:_:)((void *)(a1 + v4[10]), (void *)(a2 + v4[10])) & 1) == 0) {
      return 0;
    }
    sub_24A1291C4();
    if ((v21 & 1) == 0) {
      return 0;
    }
    sub_24A1291C4();
    if ((v22 & 1) == 0) {
      return 0;
    }
    uint64_t v23 = v4[13];
    unsigned int v24 = (void *)(a1 + v23);
    uint64_t v25 = *(void *)(a1 + v23 + 8);
    uint64_t v26 = (void *)(a2 + v23);
    uint64_t v27 = v26[1];
    if (v25)
    {
      if (!v27) {
        return 0;
      }
      BOOL v28 = *v24 == *v26 && v25 == v27;
      if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
    }
    else if (v27)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_24A12E4FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x614E746E616E6574 && a2 == 0xEA0000000000656DLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x800000024A18C3F0 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x7465737361 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x4C5255656C6966 && a2 == 0xE700000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            BOOL v10 = a1 == 0x69746E6564657263 && a2 == 0xEA00000000006C61;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else if (a1 == 0xD000000000000010 && a2 == 0x800000024A18C410 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else if (a1 == 0xD000000000000019 && a2 == 0x800000024A18C430 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else if (a1 == 0x746163696C707061 && a2 == 0xED000044496E6F69)
            {
              swift_bridgeObjectRelease();
              return 9;
            }
            else
            {
              char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v12) {
                return 9;
              }
              else {
                return 10;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_24A12E8E8()
{
  return 10;
}

unint64_t sub_24A12E8F0(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614E746E616E6574;
      break;
    case 2:
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x7465737361;
      break;
    case 4:
      unint64_t result = 0x65676E6172;
      break;
    case 5:
      unint64_t result = 0x4C5255656C6966;
      break;
    case 6:
      unint64_t result = 0x69746E6564657263;
      break;
    case 8:
      unint64_t result = 0xD000000000000019;
      break;
    case 9:
      unint64_t result = 0x746163696C707061;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_24A12EA34()
{
  return sub_24A12E8F0(*v0);
}

uint64_t sub_24A12EA3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A12E4FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A12EA64@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A12E8E8();
  *a1 = result;
  return result;
}

uint64_t sub_24A12EA8C(uint64_t a1)
{
  unint64_t v2 = sub_24A12F8E8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A12EAC8(uint64_t a1)
{
  unint64_t v2 = sub_24A12F8E8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AssetDownloadRequest.encode(to:)(void *a1)
{
  uint64_t v4 = sub_24A123464(&qword_26976AEE0);
  sub_24A12477C();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_24A1247F8();
  sub_24A1234A8(a1, a1[3]);
  sub_24A12F8E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_24A12FB04(&qword_26976AC60, MEMORY[0x263F07508]);
  sub_24A131444();
  sub_24A131378();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AssetDownloadRequest();
    sub_24A131330(1);
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for URL();
    sub_24A12FB04(&qword_26976AC68, MEMORY[0x263F06EA8]);
    sub_24A131430();
    sub_24A1312B0();
    type metadata accessor for Asset(0);
    sub_24A12FB04((unint64_t *)&unk_26976C0A0, (void (*)(uint64_t))type metadata accessor for Asset);
    sub_24A131430();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A123464(&qword_26976C050);
    sub_24A1235D0(&qword_26976AC70);
    sub_24A131378();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_24A1312B0();
    type metadata accessor for Credential(0);
    sub_24A12FB04(&qword_26976AEF0, (void (*)(uint64_t))type metadata accessor for Credential);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A12638C();
    sub_24A1312B0();
    sub_24A1312B0();
    sub_24A131330(9);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

Swift::Int AssetDownloadRequest.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t AssetDownloadRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v59 = type metadata accessor for Credential(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v5);
  sub_24A124810();
  uint64_t v60 = v6;
  uint64_t v61 = type metadata accessor for Asset(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v7);
  sub_24A124810();
  uint64_t v62 = v8;
  uint64_t v72 = type metadata accessor for URL();
  sub_24A12477C();
  uint64_t v70 = v9;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  sub_24A12477C();
  uint64_t v66 = v17;
  MEMORY[0x270FA5388](v18);
  sub_24A1247F8();
  uint64_t v64 = sub_24A123464(&qword_26976AEF8);
  sub_24A12477C();
  uint64_t v20 = v19;
  MEMORY[0x270FA5388](v21);
  sub_24A129164();
  uint64_t v71 = (int *)type metadata accessor for AssetDownloadRequest();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v22);
  sub_24A124810();
  long long v67 = a1;
  uint64_t v68 = v23;
  sub_24A1234A8(a1, a1[3]);
  sub_24A12F8E8();
  uint64_t v63 = v3;
  unsigned int v24 = v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v65 = v16;
  if (v24)
  {
    v69 = v24;
    return sub_24A123580((uint64_t)v67);
  }
  uint64_t v25 = (uint64_t)v62;
  v69 = v13;
  uint64_t v57 = v20;
  LOBYTE(v73) = 0;
  sub_24A12FB04(&qword_26976AC80, MEMORY[0x263F07508]);
  sub_24A131444();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v30 = v68;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v68, v2, v16);
  LOBYTE(v73) = 1;
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v32 = v71;
  uint64_t v33 = (uint64_t *)(v30 + v71[5]);
  *uint64_t v33 = v31;
  v33[1] = v34;
  LOBYTE(v73) = 2;
  sub_24A12FB04(&qword_26976AC90, MEMORY[0x263F06EA8]);
  uint64_t v35 = v72;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  id v36 = v15;
  uint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 32);
  v37(v30 + v32[6], v36, v35);
  LOBYTE(v73) = 3;
  sub_24A12FB04(&qword_26976AC88, (void (*)(uint64_t))type metadata accessor for Asset);
  sub_24A131444();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_24A12DD6C(v25, v30 + v71[7], (void (*)(void))type metadata accessor for Asset);
  sub_24A123464(&qword_26976C050);
  char v75 = 4;
  sub_24A1235D0(&qword_26976AC98);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v62 = v37;
  char v38 = v74;
  uint64_t v39 = v72;
  uint64_t v40 = v30 + v71[8];
  *(_OWORD *)uint64_t v40 = v73;
  *(unsigned char *)(v40 + 16) = v38;
  LOBYTE(v73) = 5;
  unint64_t v41 = v69;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v42 = v71;
  v62(v30 + v71[9], v41, v39);
  LOBYTE(v73) = 6;
  sub_24A12FB04(&qword_26976C0C0, (void (*)(uint64_t))type metadata accessor for Credential);
  sub_24A131444();
  uint64_t v43 = v60;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_24A12DD6C(v43, v30 + v42[10], (void (*)(void))type metadata accessor for Credential);
  char v75 = 7;
  sub_24A1262F4();
  sub_24A1312F4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v69 = 0;
  *(_OWORD *)(v30 + v42[11]) = v73;
  char v75 = 8;
  sub_24A1312F4();
  uint64_t v45 = v69;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v69 = v45;
  if (v45)
  {
    sub_24A1312CC();
    v46();
    char v47 = 0;
    uint64_t v44 = (uint64_t)v67;
  }
  else
  {
    *(_OWORD *)(v30 + v42[12]) = v73;
    LOBYTE(v73) = 9;
    unint64_t v48 = v69;
    uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v69 = v48;
    if (!v48)
    {
      uint64_t v52 = v49;
      uint64_t v53 = v50;
      sub_24A1247EC();
      v54();
      uint64_t v55 = v68;
      uint64_t v56 = (uint64_t *)(v68 + v71[13]);
      *uint64_t v56 = v52;
      v56[1] = v53;
      sub_24A12F934(v55, v58, (void (*)(void))type metadata accessor for AssetDownloadRequest);
      sub_24A123580((uint64_t)v67);
      return sub_24A12F994(v55, (void (*)(void))type metadata accessor for AssetDownloadRequest);
    }
    sub_24A1247EC();
    v51();
    char v47 = 1;
    uint64_t v42 = v71;
    uint64_t v44 = (uint64_t)v67;
    uint64_t v30 = v68;
  }
  sub_24A123580(v44);
  sub_24A1247EC();
  v29();
  swift_bridgeObjectRelease();
  sub_24A131348();
  v27();
  sub_24A12F994(v30 + v42[7], (void (*)(void))type metadata accessor for Asset);
  sub_24A1247EC();
  v28();
  sub_24A12F994(v30 + v42[10], (void (*)(void))type metadata accessor for Credential);
  uint64_t result = sub_24A12340C(*(void *)(v30 + v42[11]), *(void *)(v30 + v42[11] + 8));
  if (v47) {
    return sub_24A12340C(*(void *)(v30 + v42[12]), *(void *)(v30 + v42[12] + 8));
  }
  return result;
}

Swift::Int sub_24A12F874()
{
  return Hasher._finalize()();
}

uint64_t sub_24A12F8B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetDownloadRequest.init(from:)(a1, a2);
}

uint64_t sub_24A12F8C8(void *a1)
{
  return AssetDownloadRequest.encode(to:)(a1);
}

unint64_t sub_24A12F8E8()
{
  unint64_t result = qword_26976AEE8;
  if (!qword_26976AEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AEE8);
  }
  return result;
}

uint64_t sub_24A12F934(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_24A12F994(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A1247B0();
  sub_24A1247EC();
  v3();
  return a1;
}

uint64_t sub_24A12F9E8(void *a1)
{
  a1[1] = sub_24A12FB04(&qword_26976AF00, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
  a1[2] = sub_24A12FB04(&qword_26976AF08, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
  a1[3] = sub_24A12FB04(&qword_26976AF10, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
  uint64_t result = sub_24A12FB04(&qword_26976AF18, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
  a1[4] = result;
  return result;
}

uint64_t sub_24A12FABC()
{
  return sub_24A12FB04(&qword_26976AF20, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
}

uint64_t sub_24A12FB04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A12FB4C()
{
  return sub_24A12FB04(&qword_26976AC40, MEMORY[0x263F07508]);
}

char *initializeBufferWithCopyOfBuffer for AssetDownloadRequest(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v69 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v69 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = &a1[v8];
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *(void *)uint64_t v10 = *v11;
    *((void *)v10 + 1) = v12;
    uint64_t v13 = &a1[v9];
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v72 = type metadata accessor for URL();
    uint64_t v71 = *(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16);
    swift_bridgeObjectRetain();
    v71(v13, v14, v72);
    uint64_t v15 = a3[7];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = (char *)a2 + v15;
    v71(&a1[v15], (char *)a2 + v15, v72);
    uint64_t v18 = (int *)type metadata accessor for Asset.ID(0);
    uint64_t v19 = v18[5];
    uint64_t v20 = &v16[v19];
    uint64_t v21 = &v17[v19];
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    uint64_t v23 = v18[6];
    unsigned int v24 = (uint64_t *)&v16[v23];
    uint64_t v25 = (uint64_t *)&v17[v23];
    uint64_t v26 = *v25;
    unint64_t v27 = v25[1];
    swift_bridgeObjectRetain();
    sub_24A1233B4(v26, v27);
    *unsigned int v24 = v26;
    v24[1] = v27;
    uint64_t v28 = v18[7];
    unint64_t v29 = (uint64_t *)&v16[v28];
    uint64_t v30 = (uint64_t *)&v17[v28];
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1];
    sub_24A1233B4(*v30, v32);
    *unint64_t v29 = v31;
    v29[1] = v32;
    uint64_t v33 = type metadata accessor for Asset(0);
    uint64_t v34 = *(int *)(v33 + 20);
    uint64_t v35 = (uint64_t *)&v16[v34];
    id v36 = &v17[v34];
    uint64_t v37 = *(void *)&v17[v34];
    unint64_t v38 = *(void *)&v17[v34 + 8];
    sub_24A1233B4(v37, v38);
    uint64_t *v35 = v37;
    v35[1] = v38;
    uint64_t v39 = *((void *)v36 + 2);
    unint64_t v40 = *((void *)v36 + 3);
    sub_24A1233B4(v39, v40);
    v35[2] = v39;
    v35[3] = v40;
    *(void *)&v16[*(int *)(v33 + 24)] = *(void *)&v17[*(int *)(v33 + 24)];
    uint64_t v41 = a3[8];
    uint64_t v42 = a3[9];
    uint64_t v43 = &a1[v41];
    uint64_t v44 = (char *)a2 + v41;
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    v43[16] = v44[16];
    v71(&a1[v42], (char *)a2 + v42, v72);
    uint64_t v45 = a3[10];
    uint64_t v46 = &a1[v45];
    char v47 = (char *)a2 + v45;
    uint64_t v48 = *(uint64_t *)((char *)a2 + v45 + 8);
    *(void *)uint64_t v46 = *(uint64_t *)((char *)a2 + v45);
    *((void *)v46 + 1) = v48;
    uint64_t v49 = *(uint64_t *)((char *)a2 + v45 + 24);
    *((void *)v46 + 2) = *(uint64_t *)((char *)a2 + v45 + 16);
    *((void *)v46 + 3) = v49;
    uint64_t v50 = *(uint64_t *)((char *)a2 + v45 + 40);
    *((void *)v46 + 4) = *(uint64_t *)((char *)a2 + v45 + 32);
    *((void *)v46 + 5) = v50;
    uint64_t v51 = *(int *)(type metadata accessor for Credential(0) + 28);
    long long v73 = &v46[v51];
    uint64_t v52 = &v47[v51];
    uint64_t v53 = type metadata accessor for Date();
    unint64_t v54 = *(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v54(v73, v52, v53);
    uint64_t v55 = a3[11];
    uint64_t v56 = (uint64_t *)&a1[v55];
    uint64_t v57 = (uint64_t *)((char *)a2 + v55);
    uint64_t v58 = *v57;
    unint64_t v59 = v57[1];
    sub_24A1233B4(*v57, v59);
    *uint64_t v56 = v58;
    v56[1] = v59;
    uint64_t v60 = a3[12];
    uint64_t v61 = (uint64_t *)&a1[v60];
    uint64_t v62 = (uint64_t *)((char *)a2 + v60);
    uint64_t v63 = *v62;
    unint64_t v64 = v62[1];
    sub_24A1233B4(*v62, v64);
    *uint64_t v61 = v63;
    v61[1] = v64;
    uint64_t v65 = a3[13];
    uint64_t v66 = &a1[v65];
    long long v67 = (uint64_t *)((char *)a2 + v65);
    uint64_t v68 = v67[1];
    *(void *)uint64_t v66 = *v67;
    *((void *)v66 + 1) = v68;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AssetDownloadRequest(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = a1 + a2[7];
  v7(v8, v6);
  uint64_t v9 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(v8 + *(int *)(v9 + 24)), *(void *)(v8 + *(int *)(v9 + 24) + 8));
  sub_24A12340C(*(void *)(v8 + *(int *)(v9 + 28)), *(void *)(v8 + *(int *)(v9 + 28) + 8));
  uint64_t v10 = v8 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_24A12340C(*(void *)v10, *(void *)(v10 + 8));
  sub_24A12340C(*(void *)(v10 + 16), *(void *)(v10 + 24));
  v7(a1 + a2[9], v6);
  uint64_t v11 = a1 + a2[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v11 + *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_24A12340C(*(void *)(a1 + a2[11]), *(void *)(a1 + a2[11] + 8));
  sub_24A12340C(*(void *)(a1 + a2[12]), *(void *)(a1 + a2[12] + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v70 = type metadata accessor for URL();
  uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16);
  swift_bridgeObjectRetain();
  v69(v12, v13, v70);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  v69(a1 + v14, a2 + v14, v70);
  uint64_t v17 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v18 = v17[5];
  uint64_t v19 = (void *)(v15 + v18);
  uint64_t v20 = (void *)(v16 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = v17[6];
  uint64_t v23 = (uint64_t *)(v15 + v22);
  unsigned int v24 = (uint64_t *)(v16 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  swift_bridgeObjectRetain();
  sub_24A1233B4(v25, v26);
  *uint64_t v23 = v25;
  v23[1] = v26;
  uint64_t v27 = v17[7];
  uint64_t v28 = (uint64_t *)(v15 + v27);
  unint64_t v29 = (uint64_t *)(v16 + v27);
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  sub_24A1233B4(*v29, v31);
  *uint64_t v28 = v30;
  v28[1] = v31;
  uint64_t v32 = type metadata accessor for Asset(0);
  uint64_t v33 = *(int *)(v32 + 20);
  uint64_t v34 = (uint64_t *)(v15 + v33);
  uint64_t v35 = v16 + v33;
  uint64_t v36 = *(void *)(v16 + v33);
  unint64_t v37 = *(void *)(v16 + v33 + 8);
  sub_24A1233B4(v36, v37);
  *uint64_t v34 = v36;
  v34[1] = v37;
  uint64_t v38 = *(void *)(v35 + 16);
  unint64_t v39 = *(void *)(v35 + 24);
  sub_24A1233B4(v38, v39);
  v34[2] = v38;
  v34[3] = v39;
  *(void *)(v15 + *(int *)(v32 + 24)) = *(void *)(v16 + *(int *)(v32 + 24));
  uint64_t v40 = a3[8];
  uint64_t v41 = a3[9];
  uint64_t v42 = a1 + v40;
  uint64_t v43 = a2 + v40;
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *(unsigned char *)(v42 + 16) = *(unsigned char *)(v43 + 16);
  v69(a1 + v41, a2 + v41, v70);
  uint64_t v44 = a3[10];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = a2 + v44;
  uint64_t v47 = *(void *)(a2 + v44 + 8);
  *uint64_t v45 = *(void *)(a2 + v44);
  v45[1] = v47;
  uint64_t v48 = *(void *)(a2 + v44 + 24);
  v45[2] = *(void *)(a2 + v44 + 16);
  v45[3] = v48;
  uint64_t v49 = *(void *)(a2 + v44 + 40);
  v45[4] = *(void *)(a2 + v44 + 32);
  v45[5] = v49;
  uint64_t v50 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v71 = (char *)v45 + v50;
  uint64_t v51 = v46 + v50;
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53(v71, v51, v52);
  uint64_t v54 = a3[11];
  uint64_t v55 = (uint64_t *)(a1 + v54);
  uint64_t v56 = (uint64_t *)(a2 + v54);
  uint64_t v57 = *v56;
  unint64_t v58 = v56[1];
  sub_24A1233B4(*v56, v58);
  *uint64_t v55 = v57;
  v55[1] = v58;
  uint64_t v59 = a3[12];
  uint64_t v60 = (uint64_t *)(a1 + v59);
  uint64_t v61 = (uint64_t *)(a2 + v59);
  uint64_t v62 = *v61;
  unint64_t v63 = v61[1];
  sub_24A1233B4(*v61, v63);
  *uint64_t v60 = v62;
  v60[1] = v63;
  uint64_t v64 = a3[13];
  uint64_t v65 = (void *)(a1 + v64);
  uint64_t v66 = (void *)(a2 + v64);
  uint64_t v67 = v66[1];
  *uint64_t v65 = *v66;
  v65[1] = v67;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24);
  uint64_t v76 = v13;
  v77(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  v77(a1 + v14, a2 + v14, v13);
  uint64_t v17 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v18 = v17[5];
  uint64_t v19 = (void *)(v15 + v18);
  uint64_t v20 = (void *)(v16 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v17[6];
  uint64_t v22 = (uint64_t *)(v15 + v21);
  uint64_t v23 = (uint64_t *)(v16 + v21);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_24A1233B4(*v23, v25);
  uint64_t v26 = *v22;
  unint64_t v27 = v22[1];
  *uint64_t v22 = v24;
  v22[1] = v25;
  sub_24A12340C(v26, v27);
  uint64_t v28 = v17[7];
  unint64_t v29 = (uint64_t *)(v15 + v28);
  uint64_t v30 = (uint64_t *)(v16 + v28);
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  sub_24A1233B4(*v30, v32);
  uint64_t v33 = *v29;
  unint64_t v34 = v29[1];
  *unint64_t v29 = v31;
  v29[1] = v32;
  sub_24A12340C(v33, v34);
  uint64_t v35 = type metadata accessor for Asset(0);
  uint64_t v36 = *(int *)(v35 + 20);
  unint64_t v37 = (uint64_t *)(v15 + v36);
  uint64_t v38 = v16 + v36;
  uint64_t v39 = *(void *)(v16 + v36);
  unint64_t v40 = *(void *)(v16 + v36 + 8);
  sub_24A1233B4(v39, v40);
  uint64_t v41 = *v37;
  unint64_t v42 = v37[1];
  *unint64_t v37 = v39;
  v37[1] = v40;
  sub_24A12340C(v41, v42);
  uint64_t v43 = *(void *)(v38 + 16);
  unint64_t v44 = *(void *)(v38 + 24);
  sub_24A1233B4(v43, v44);
  uint64_t v45 = v37[2];
  unint64_t v46 = v37[3];
  v37[2] = v43;
  v37[3] = v44;
  sub_24A12340C(v45, v46);
  *(void *)(v15 + *(int *)(v35 + 24)) = *(void *)(v16 + *(int *)(v35 + 24));
  uint64_t v47 = a3[8];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  char v50 = *(unsigned char *)(v49 + 16);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  *(unsigned char *)(v48 + 16) = v50;
  v77(a1 + a3[9], a2 + a3[9], v76);
  uint64_t v51 = a3[10];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  void *v52 = *(void *)(a2 + v51);
  v52[1] = *(void *)(a2 + v51 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52[2] = v53[2];
  v52[3] = v53[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52[4] = v53[4];
  v52[5] = v53[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v55 = (char *)v52 + v54;
  uint64_t v56 = (char *)v53 + v54;
  uint64_t v57 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 24))(v55, v56, v57);
  uint64_t v58 = a3[11];
  uint64_t v59 = (uint64_t *)(a1 + v58);
  uint64_t v60 = (uint64_t *)(a2 + v58);
  uint64_t v61 = *v60;
  unint64_t v62 = v60[1];
  sub_24A1233B4(*v60, v62);
  uint64_t v63 = *v59;
  unint64_t v64 = v59[1];
  *uint64_t v59 = v61;
  v59[1] = v62;
  sub_24A12340C(v63, v64);
  uint64_t v65 = a3[12];
  uint64_t v66 = (uint64_t *)(a1 + v65);
  uint64_t v67 = (uint64_t *)(a2 + v65);
  uint64_t v68 = *v67;
  unint64_t v69 = v67[1];
  sub_24A1233B4(*v67, v69);
  uint64_t v70 = *v66;
  unint64_t v71 = v66[1];
  *uint64_t v66 = v68;
  v66[1] = v69;
  sub_24A12340C(v70, v71);
  uint64_t v72 = a3[13];
  long long v73 = (void *)(a1 + v72);
  char v74 = (void *)(a2 + v72);
  void *v73 = *v74;
  v73[1] = v74[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  uint64_t v15 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(v13 + v15[5]) = *(_OWORD *)(v14 + v15[5]);
  *(_OWORD *)(v13 + v15[6]) = *(_OWORD *)(v14 + v15[6]);
  *(_OWORD *)(v13 + v15[7]) = *(_OWORD *)(v14 + v15[7]);
  uint64_t v16 = type metadata accessor for Asset(0);
  uint64_t v17 = *(int *)(v16 + 20);
  uint64_t v18 = (_OWORD *)(v13 + v17);
  uint64_t v19 = (_OWORD *)(v14 + v17);
  long long v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  *(void *)(v13 + *(int *)(v16 + 24)) = *(void *)(v14 + *(int *)(v16 + 24));
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  v11(a1 + v22, a2 + v22, v10);
  uint64_t v25 = a3[10];
  uint64_t v26 = (_OWORD *)(a1 + v25);
  uint64_t v27 = a2 + v25;
  long long v28 = *(_OWORD *)(a2 + v25 + 16);
  *uint64_t v26 = *(_OWORD *)(a2 + v25);
  v26[1] = v28;
  v26[2] = *(_OWORD *)(a2 + v25 + 32);
  uint64_t v29 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v30 = (char *)v26 + v29;
  uint64_t v31 = v27 + v29;
  uint64_t v32 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
  uint64_t v33 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40);
  v65(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  v65(a1 + v16, a2 + v16, v15);
  uint64_t v19 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v20 = v19[5];
  uint64_t v21 = (void *)(v17 + v20);
  uint64_t v22 = (uint64_t *)(v18 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v19[6];
  uint64_t v26 = *(void *)(v17 + v25);
  unint64_t v27 = *(void *)(v17 + v25 + 8);
  *(_OWORD *)(v17 + v25) = *(_OWORD *)(v18 + v25);
  sub_24A12340C(v26, v27);
  uint64_t v28 = v19[7];
  uint64_t v29 = *(void *)(v17 + v28);
  unint64_t v30 = *(void *)(v17 + v28 + 8);
  *(_OWORD *)(v17 + v28) = *(_OWORD *)(v18 + v28);
  sub_24A12340C(v29, v30);
  uint64_t v31 = type metadata accessor for Asset(0);
  uint64_t v32 = *(int *)(v31 + 20);
  uint64_t v33 = v17 + v32;
  uint64_t v34 = v18 + v32;
  uint64_t v35 = *(void *)(v17 + v32);
  unint64_t v36 = *(void *)(v17 + v32 + 8);
  *(_OWORD *)(v17 + v32) = *(_OWORD *)(v18 + v32);
  sub_24A12340C(v35, v36);
  uint64_t v37 = *(void *)(v33 + 16);
  unint64_t v38 = *(void *)(v33 + 24);
  *(_OWORD *)(v33 + 16) = *(_OWORD *)(v34 + 16);
  sub_24A12340C(v37, v38);
  *(void *)(v17 + *(int *)(v31 + 24)) = *(void *)(v18 + *(int *)(v31 + 24));
  uint64_t v39 = a3[8];
  uint64_t v40 = a3[9];
  uint64_t v41 = a1 + v39;
  uint64_t v42 = a2 + v39;
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
  *(unsigned char *)(v41 + 16) = *(unsigned char *)(v42 + 16);
  v65(a1 + v40, a2 + v40, v15);
  uint64_t v43 = a3[10];
  unint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (void *)(a2 + v43);
  uint64_t v46 = *(void *)(a2 + v43 + 8);
  *unint64_t v44 = *(void *)(a2 + v43);
  v44[1] = v46;
  swift_bridgeObjectRelease();
  uint64_t v47 = v45[3];
  v44[2] = v45[2];
  v44[3] = v47;
  swift_bridgeObjectRelease();
  uint64_t v48 = v45[5];
  v44[4] = v45[4];
  v44[5] = v48;
  swift_bridgeObjectRelease();
  uint64_t v49 = *(int *)(type metadata accessor for Credential(0) + 28);
  char v50 = (char *)v44 + v49;
  uint64_t v51 = (char *)v45 + v49;
  uint64_t v52 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 40))(v50, v51, v52);
  uint64_t v53 = a3[11];
  uint64_t v54 = *(void *)(a1 + v53);
  unint64_t v55 = *(void *)(a1 + v53 + 8);
  *(_OWORD *)(a1 + v53) = *(_OWORD *)(a2 + v53);
  sub_24A12340C(v54, v55);
  uint64_t v56 = a3[12];
  uint64_t v57 = *(void *)(a1 + v56);
  unint64_t v58 = *(void *)(a1 + v56 + 8);
  *(_OWORD *)(a1 + v56) = *(_OWORD *)(a2 + v56);
  sub_24A12340C(v57, v58);
  uint64_t v59 = a3[13];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (uint64_t *)(a2 + v59);
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  *uint64_t v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetDownloadRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A130C48);
}

uint64_t sub_24A130C48(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for UUID();
  sub_24A124798();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_13:
    return _s11CloudAssets21UploadResponseMessageOwet_0(v9, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    type metadata accessor for URL();
    sub_24A124798();
    if (*(_DWORD *)(v13 + 84) == a2)
    {
      uint64_t v8 = v12;
      uint64_t v14 = a3[6];
    }
    else
    {
      type metadata accessor for Asset(0);
      sub_24A124798();
      if (*(_DWORD *)(v16 + 84) == a2)
      {
        uint64_t v8 = v15;
        uint64_t v14 = a3[7];
      }
      else
      {
        uint64_t v8 = type metadata accessor for Credential(0);
        uint64_t v14 = a3[10];
      }
    }
    uint64_t v9 = a1 + v14;
    goto LABEL_13;
  }
  unint64_t v10 = *(void *)(a1 + a3[5] + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetDownloadRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A130D58);
}

void sub_24A130D58(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for UUID();
  sub_24A124798();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[5] + 8) = (a2 - 1);
      return;
    }
    type metadata accessor for URL();
    sub_24A124798();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[6];
    }
    else
    {
      type metadata accessor for Asset(0);
      sub_24A124798();
      if (*(_DWORD *)(v16 + 84) == a3)
      {
        uint64_t v10 = v15;
        uint64_t v14 = a4[7];
      }
      else
      {
        uint64_t v10 = type metadata accessor for Credential(0);
        uint64_t v14 = a4[10];
      }
    }
    uint64_t v11 = a1 + v14;
  }
  _s11CloudAssets21UploadResponseMessageOwst_0(v11, a2, a2, v10);
}

uint64_t sub_24A130E50()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Asset(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for Credential(319);
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssetDownloadRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetDownloadRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A13110CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetDownloadRequest.CodingKeys()
{
  return &type metadata for AssetDownloadRequest.CodingKeys;
}

unint64_t sub_24A131148()
{
  unint64_t result = qword_26976AF38;
  if (!qword_26976AF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AF38);
  }
  return result;
}

unint64_t sub_24A131198()
{
  unint64_t result = qword_26976AF40;
  if (!qword_26976AF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AF40);
  }
  return result;
}

unint64_t sub_24A1311E8()
{
  unint64_t result = qword_26976AF48;
  if (!qword_26976AF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AF48);
  }
  return result;
}

void sub_24A131234()
{
  int v2 = (void *)(v0 + *(int *)(v1 + 52));
  *int v2 = 0;
  v2[1] = 0;
  uint64_t v3 = v0 + *(int *)(v1 + 32);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 16) = 1;
}

void sub_24A131258(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(int *)(a1 + 20));
  *uint64_t v3 = 0x616C506572616853;
  v3[1] = 0xE900000000000079;
  uint64_t v4 = v1 + *(int *)(a1 + 24);
  sub_24A12D578(0x616C506572616853, 0xE900000000000079, v4);
}

uint64_t sub_24A1312B0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_24A1312D8()
{
  return v0;
}

uint64_t sub_24A13130C()
{
  return v0;
}

void sub_24A131330(char a1@<W8>)
{
  *(unsigned char *)(v1 - 112) = a1;
}

uint64_t sub_24A131354(uint64_t a1)
{
  return v1 + *(int *)(a1 + 28);
}

uint64_t sub_24A13138C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + a1);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  return sub_24A1233B4(v4, v5);
}

uint64_t sub_24A1313AC()
{
  return v0;
}

uint64_t sub_24A1313C0()
{
  return v0;
}

uint64_t sub_24A1313D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + a1);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  return sub_24A1233B4(v4, v5);
}

uint64_t sub_24A1313F8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 - 104) = a1;
  *(void *)(v3 - 96) = v1;
  return v2;
}

uint64_t sub_24A131418()
{
  return type metadata accessor for AssetDownloadRequest();
}

uint64_t sub_24A131430()
{
  return v0;
}

uint64_t sub_24A131450@<X0>(uint64_t a1@<X8>)
{
  return sub_24A12BB24(&OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__results, &qword_26976AE70, a1);
}

uint64_t sub_24A131464@<X0>(uint64_t a1@<X8>)
{
  return sub_24A12BB24(&OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__signals, &qword_26976AE60, a1);
}

uint64_t sub_24A131478(uint64_t *a1)
{
  v2[3] = v1;
  uint64_t v4 = sub_24A123464(&qword_26976AF68);
  v2[4] = v4;
  v2[5] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = *a1;
  v2[6] = v5;
  v2[7] = v6;
  return MEMORY[0x270FA2498](sub_24A131544, v1, 0);
}

uint64_t sub_24A131544()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  v0[2] = v0[7];
  swift_bridgeObjectRetain();
  sub_24A123464(&qword_26976AF78);
  AsyncThrowingStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_24A131610(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v24 = sub_24A123464(&qword_26976AFA0);
  sub_24A12477C();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_24A123464(&qword_26976AE60);
  sub_24A12477C();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24A123464(&qword_26976AFA8);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v23 - v16;
  swift_defaultActor_initialize();
  uint64_t v18 = v1 + OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__results;
  uint64_t v19 = sub_24A123464(&qword_26976AE70);
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v26, v19);
  uint64_t v21 = sub_24A123464(&qword_26976AF78);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v17, 1, 1, v21);
  unint64_t v27 = v17;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F8F680], v24);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v1 + OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__signals, v11, v25);
  sub_24A131F28((uint64_t)v17, (uint64_t)v15);
  uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v15, 1, v21);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v26, v19);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v1 + OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator_continutation, v15, v21);
    sub_24A131F90((uint64_t)v17);
    return v1;
  }
  return result;
}

uint64_t sub_24A131900(uint64_t a1, uint64_t a2)
{
  sub_24A131F90(a2);
  uint64_t v4 = sub_24A123464(&qword_26976AF78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return _s11CloudAssets21UploadResponseMessageOwst_0(a2, 0, 1, v4);
}

uint64_t AssetsDownloadCoordinator.deinit()
{
  sub_24A123464(&qword_26976AE70);
  sub_24A1247B0();
  uint64_t v1 = sub_24A129300();
  v2(v1);
  sub_24A123464(&qword_26976AE60);
  sub_24A1247B0();
  uint64_t v3 = sub_24A129300();
  v4(v3);
  sub_24A123464(&qword_26976AF78);
  sub_24A1247B0();
  uint64_t v5 = sub_24A129300();
  v6(v5);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetsDownloadCoordinator.__deallocating_deinit()
{
  AssetsDownloadCoordinator.deinit();
  return MEMORY[0x270FA2418](v0);
}

uint64_t AssetsDownloadCoordinator.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_24A131AA0()
{
  return AssetsDownloadCoordinator.unownedExecutor.getter();
}

uint64_t sub_24A131ABC()
{
  return type metadata accessor for AssetsDownloadCoordinator();
}

uint64_t type metadata accessor for AssetsDownloadCoordinator()
{
  uint64_t result = qword_26976AF80;
  if (!qword_26976AF80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_24A131B0C()
{
  sub_24A12BF7C();
  if (v0 <= 0x3F)
  {
    sub_24A131EAC(319, (unint64_t *)&qword_26976AE88, MEMORY[0x263F8F6B8]);
    if (v1 <= 0x3F)
    {
      sub_24A131EAC(319, &qword_26976AF98, MEMORY[0x263F8F690]);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for AssetsDownloadCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetsDownloadCoordinator);
}

uint64_t dispatch thunk of AssetsDownloadCoordinator.results.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AssetsDownloadCoordinator.signals.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AssetsDownloadCoordinator.receive(signal:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 128) + **(int **)(*(void *)v1 + 128));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_24A131DB8;
  return v6(a1);
}

uint64_t sub_24A131DB8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_24A131EAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = sub_24A123538(&qword_26976C190);
    unint64_t v7 = a3(a1, &type metadata for Signal, v6, MEMORY[0x263F8E4E0]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_24A131F20(uint64_t a1)
{
  return sub_24A131900(a1, *(void *)(v1 + 16));
}

uint64_t sub_24A131F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A123464(&qword_26976AFA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A131F90(uint64_t a1)
{
  uint64_t v2 = sub_24A123464(&qword_26976AFA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t static XPCServiceNames.userService.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static XPCServiceNames.systemService.getter()
{
  return sub_24A132034();
}

unint64_t static XPCServiceNames.testService.getter()
{
  return sub_24A132034();
}

ValueMetadata *type metadata accessor for XPCServiceNames()
{
  return &type metadata for XPCServiceNames;
}

unint64_t sub_24A132034()
{
  return 0xD000000000000022;
}

void DownloadRequestMessage.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 8));
  sub_24A137EBC(a1, v3);
}

uint64_t static DownloadRequestMessage.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned __int8 *)a2 + 8);
  if ((v3 & 1) == 0)
  {
    if ((v5 & 1) == 0)
    {
      j__swift_bridgeObjectRetain(*a2, 0);
      j__swift_bridgeObjectRetain(v2, 0);
      char v6 = sub_24A1322BC(v2, v4);
      uint64_t v3 = 0;
      uint64_t v5 = 0;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((v5 & 1) == 0)
  {
LABEL_5:
    j__swift_bridgeObjectRetain(*a2, *((unsigned __int8 *)a2 + 8));
    j__swift_bridgeObjectRetain(v2, v3);
    char v6 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = 1;
  j__swift_bridgeObjectRetain(*a2, 1);
  j__swift_bridgeObjectRetain(v2, 1);
  char v6 = sub_24A1322BC(v2, v4);
  uint64_t v5 = 1;
LABEL_7:
  j__swift_bridgeObjectRelease(v2, v3);
  j__swift_bridgeObjectRelease(v4, v5);
  return v6 & 1;
}

uint64_t sub_24A132180(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned char *)(a1 + 40);
    uint64_t v4 = (char *)(a2 + 40);
    do
    {
      char v5 = *v4;
      if (*v3)
      {
        if (!*v4) {
          return 0;
        }
      }
      else
      {
        if (*((void *)v3 - 1) != *((void *)v4 - 1)) {
          char v5 = 1;
        }
        if (v5) {
          return 0;
        }
      }
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_24A1321EC(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a2 + 7;
  uint64_t v9 = a1 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v9 - 1);
    if (result != *(v8 - 1) || *v9 != *v8)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1322BC(uint64_t a1, uint64_t a2)
{
  __s1[3] = *MEMORY[0x263EF8340];
  v217 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v4 = MEMORY[0x270FA5388](v217);
  char v6 = (char *)&v198 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v198 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v10 || a1 == a2) {
    return 1;
  }
  v214 = v6;
  uint64_t v215 = 0;
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v206 = *(void *)(v7 + 72);
  uint64_t v207 = a1;
  uint64_t v208 = a2;
  while (2)
  {
    uint64_t v210 = v10;
    sub_24A1392CC(a1 + v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for AssetDownloadRequest);
    unint64_t v209 = v11;
    sub_24A1392CC(a2 + v11, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AssetDownloadRequest);
    if ((static UUID.== infix(_:_:)() & 1) == 0) {
      goto LABEL_245;
    }
    uint64_t v12 = v217[5];
    uint64_t v13 = *(void *)&v9[v12];
    uint64_t v14 = *(void *)&v9[v12 + 8];
    uint64_t v15 = &v6[v12];
    BOOL v16 = v13 == *(void *)v15 && v14 == *((void *)v15 + 1);
    if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_245;
    }
    if ((MEMORY[0x24C5BCC70](&v9[v217[6]], &v6[v217[6]]) & 1) == 0) {
      goto LABEL_245;
    }
    uint64_t v17 = v217[7];
    uint64_t v18 = &v9[v17];
    v216 = &v6[v17];
    if ((MEMORY[0x24C5BCC70](&v9[v17]) & 1) == 0) {
      goto LABEL_245;
    }
    unint64_t v19 = type metadata accessor for Asset.ID(0);
    uint64_t v20 = *(int *)(v19 + 20);
    uint64_t v21 = *(void *)&v18[v20];
    uint64_t v22 = *(void *)&v18[v20 + 8];
    uint64_t v23 = &v216[v20];
    BOOL v24 = v21 == *(void *)v23 && v22 == *((void *)v23 + 1);
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_245;
    }
    uint64_t v25 = *(int *)(v19 + 24);
    uint64_t v26 = *(void *)&v18[v25];
    unint64_t v27 = *(void *)&v18[v25 + 8];
    uint64_t v28 = (uint64_t *)&v216[v25];
    uint64_t v30 = *v28;
    unint64_t v29 = v28[1];
    uint64_t v31 = 0;
    switch(v27 >> 62)
    {
      case 1uLL:
        LODWORD(v31) = HIDWORD(v26) - v26;
        if (__OFSUB__(HIDWORD(v26), v26)) {
          goto LABEL_248;
        }
        uint64_t v31 = (int)v31;
LABEL_23:
        switch(v29 >> 62)
        {
          case 1uLL:
            LODWORD(v35) = HIDWORD(v30) - v30;
            if (__OFSUB__(HIDWORD(v30), v30)) {
              goto LABEL_249;
            }
            uint64_t v35 = (int)v35;
LABEL_32:
            if (v31 != v35) {
              goto LABEL_245;
            }
            if (v31 < 1) {
              goto LABEL_52;
            }
            break;
          case 2uLL:
            uint64_t v37 = *(void *)(v30 + 16);
            uint64_t v36 = *(void *)(v30 + 24);
            BOOL v34 = __OFSUB__(v36, v37);
            uint64_t v35 = v36 - v37;
            if (!v34) {
              goto LABEL_32;
            }
            goto LABEL_250;
          case 3uLL:
            if (v31) {
              goto LABEL_245;
            }
            goto LABEL_52;
          default:
            uint64_t v35 = BYTE6(v29);
            goto LABEL_32;
        }
        break;
      case 2uLL:
        uint64_t v33 = *(void *)(v26 + 16);
        uint64_t v32 = *(void *)(v26 + 24);
        BOOL v34 = __OFSUB__(v32, v33);
        uint64_t v31 = v32 - v33;
        if (!v34) {
          goto LABEL_23;
        }
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        __break(1u);
LABEL_257:
        __break(1u);
LABEL_258:
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        __break(1u);
LABEL_263:
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
LABEL_273:
        __break(1u);
LABEL_274:
        __break(1u);
LABEL_275:
        __break(1u);
        goto LABEL_276;
      case 3uLL:
        goto LABEL_23;
      default:
        uint64_t v31 = BYTE6(v27);
        goto LABEL_23;
    }
    switch(v27 >> 62)
    {
      case 1uLL:
        v205 = v18;
        if (v26 >> 32 < (int)v26) {
          goto LABEL_271;
        }
        sub_24A1233B4(v30, v29);
        sub_24A1233B4(v30, v29);
        sub_24A1233B4(v30, v29);
        sub_24A1233B4(v26, v27);
        uint64_t v47 = __DataStorage._bytes.getter();
        if (!v47) {
          goto LABEL_50;
        }
        uint64_t v48 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v26, v48)) {
          goto LABEL_281;
        }
        v47 += (int)v26 - v48;
LABEL_50:
        __DataStorage._length.getter();
        uint64_t v49 = v215;
        sub_24A137958(v47, v30, v29, (BOOL *)__s1);
        sub_24A12340C(v30, v29);
        uint64_t v215 = v49;
        if (v49)
        {
          sub_24A12340C(v30, v29);
          sub_24A12340C(v30, v29);
          uint64_t v196 = v26;
          unint64_t v197 = v27;
          goto LABEL_302;
        }
        sub_24A12340C(v26, v27);
        sub_24A12340C(v30, v29);
        char v50 = __s1[0];
        sub_24A12340C(v30, v29);
        char v6 = v214;
        uint64_t v18 = v205;
        if ((v50 & 1) == 0) {
          goto LABEL_245;
        }
LABEL_52:
        uint64_t v51 = *(int *)(v19 + 28);
        uint64_t v52 = *(void *)&v18[v51];
        unint64_t v53 = *(void *)&v18[v51 + 8];
        uint64_t v54 = (uint64_t *)&v216[v51];
        uint64_t v55 = *v54;
        unint64_t v19 = v54[1];
        uint64_t v56 = 0;
        switch(v53 >> 62)
        {
          case 1uLL:
            LODWORD(v56) = HIDWORD(v52) - v52;
            if (__OFSUB__(HIDWORD(v52), v52)) {
              goto LABEL_251;
            }
            uint64_t v56 = (int)v56;
LABEL_57:
            switch(v19 >> 62)
            {
              case 1uLL:
                LODWORD(v59) = HIDWORD(v55) - v55;
                if (__OFSUB__(HIDWORD(v55), v55)) {
                  goto LABEL_254;
                }
                uint64_t v59 = (int)v59;
LABEL_66:
                if (v56 != v59) {
                  goto LABEL_245;
                }
                if (v56 < 1) {
                  goto LABEL_86;
                }
                break;
              case 2uLL:
                uint64_t v61 = *(void *)(v55 + 16);
                uint64_t v60 = *(void *)(v55 + 24);
                BOOL v34 = __OFSUB__(v60, v61);
                uint64_t v59 = v60 - v61;
                if (!v34) {
                  goto LABEL_66;
                }
                goto LABEL_253;
              case 3uLL:
                if (v56) {
                  goto LABEL_245;
                }
                goto LABEL_86;
              default:
                uint64_t v59 = BYTE6(v19);
                goto LABEL_66;
            }
            break;
          case 2uLL:
            uint64_t v58 = *(void *)(v52 + 16);
            uint64_t v57 = *(void *)(v52 + 24);
            BOOL v34 = __OFSUB__(v57, v58);
            uint64_t v56 = v57 - v58;
            if (!v34) {
              goto LABEL_57;
            }
            goto LABEL_252;
          case 3uLL:
            goto LABEL_57;
          default:
            uint64_t v56 = BYTE6(v53);
            goto LABEL_57;
        }
        switch(v53 >> 62)
        {
          case 1uLL:
            if (v52 >> 32 < (int)v52) {
              goto LABEL_273;
            }
            sub_24A1233B4(v55, v19);
            sub_24A1233B4(v55, v19);
            sub_24A1233B4(v55, v19);
            sub_24A1233B4(v52, v53);
            uint64_t v70 = __DataStorage._bytes.getter();
            if (!v70) {
              goto LABEL_84;
            }
            uint64_t v71 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v52, v71)) {
              goto LABEL_283;
            }
            v70 += (int)v52 - v71;
LABEL_84:
            __DataStorage._length.getter();
            uint64_t v72 = v215;
            sub_24A137958(v70, v55, v19, (BOOL *)__s1);
            sub_24A12340C(v55, v19);
            uint64_t v215 = v72;
            if (v72)
            {
              sub_24A12340C(v55, v19);
              sub_24A12340C(v55, v19);
              uint64_t v196 = v52;
              unint64_t v197 = v53;
              goto LABEL_302;
            }
            sub_24A12340C(v52, v53);
            sub_24A12340C(v55, v19);
            char v73 = __s1[0];
            sub_24A12340C(v55, v19);
            char v6 = v214;
            if ((v73 & 1) == 0) {
              goto LABEL_245;
            }
LABEL_86:
            uint64_t v74 = type metadata accessor for Asset(0);
            uint64_t v75 = *(int *)(v74 + 20);
            uint64_t v77 = *(void *)&v18[v75];
            unint64_t v76 = *(void *)&v18[v75 + 8];
            uint64_t v79 = *(void *)&v18[v75 + 16];
            unint64_t v78 = *(void *)&v18[v75 + 24];
            uint64_t v80 = (uint64_t *)&v216[v75];
            uint64_t v82 = *v80;
            unint64_t v81 = v80[1];
            uint64_t v83 = v80[2];
            unint64_t v19 = v80[3];
            uint64_t v84 = 0;
            switch(v76 >> 62)
            {
              case 1uLL:
                LODWORD(v84) = HIDWORD(v77) - v77;
                if (__OFSUB__(HIDWORD(v77), v77)) {
                  goto LABEL_256;
                }
                uint64_t v84 = (int)v84;
                break;
              case 2uLL:
                uint64_t v86 = *(void *)(v77 + 16);
                uint64_t v85 = *(void *)(v77 + 24);
                BOOL v34 = __OFSUB__(v85, v86);
                uint64_t v84 = v85 - v86;
                if (!v34) {
                  goto LABEL_91;
                }
                goto LABEL_255;
              case 3uLL:
                goto LABEL_91;
              default:
                uint64_t v84 = BYTE6(v76);
                goto LABEL_91;
            }
            break;
          case 2uLL:
            uint64_t v62 = v18;
            unint64_t v39 = v53 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v63 = *(void *)(v52 + 16);
            uint64_t v64 = *(void *)(v52 + 24);
            sub_24A1233B4(v55, v19);
            sub_24A1233B4(v55, v19);
            sub_24A1233B4(v55, v19);
            swift_retain();
            swift_retain();
            uint64_t v65 = __DataStorage._bytes.getter();
            if (!v65) {
              goto LABEL_73;
            }
            uint64_t v66 = __DataStorage._offset.getter();
            if (__OFSUB__(v63, v66)) {
              goto LABEL_282;
            }
            v65 += v63 - v66;
LABEL_73:
            if (__OFSUB__(v64, v63)) {
              goto LABEL_274;
            }
            __DataStorage._length.getter();
            uint64_t v67 = v215;
            sub_24A137958(v65, v55, v19, (BOOL *)__s1);
            sub_24A12340C(v55, v19);
            uint64_t v215 = v67;
            if (v67)
            {
              sub_24A12340C(v55, v19);
              sub_24A12340C(v55, v19);
              goto LABEL_293;
            }
            swift_release();
            swift_release();
            char v68 = __s1[0];
            sub_24A12340C(v55, v19);
            sub_24A12340C(v55, v19);
            char v6 = v214;
            uint64_t v18 = v62;
            if ((v68 & 1) == 0) {
              goto LABEL_245;
            }
            goto LABEL_86;
          case 3uLL:
            memset(__s1, 0, 14);
            sub_24A1233B4(v55, v19);
            sub_24A1233B4(v55, v19);
            goto LABEL_78;
          default:
            __s1[0] = v52;
            LOWORD(__s1[1]) = v53;
            BYTE2(__s1[1]) = BYTE2(v53);
            BYTE3(__s1[1]) = BYTE3(v53);
            BYTE4(__s1[1]) = BYTE4(v53);
            BYTE5(__s1[1]) = BYTE5(v53);
            sub_24A1233B4(v55, v19);
            sub_24A1233B4(v55, v19);
LABEL_78:
            uint64_t v69 = v215;
            sub_24A137958((uint64_t)__s1, v55, v19, &v218);
            uint64_t v215 = v69;
            sub_24A12340C(v55, v19);
            sub_24A12340C(v55, v19);
            char v6 = v214;
            if (!v218) {
              goto LABEL_245;
            }
            goto LABEL_86;
        }
        break;
      case 2uLL:
        unint64_t v38 = v18;
        unint64_t v39 = v27 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v40 = *(void *)(v26 + 16);
        uint64_t v41 = *(void *)(v26 + 24);
        sub_24A1233B4(v30, v29);
        sub_24A1233B4(v30, v29);
        sub_24A1233B4(v30, v29);
        swift_retain();
        swift_retain();
        uint64_t v42 = __DataStorage._bytes.getter();
        if (!v42) {
          goto LABEL_39;
        }
        uint64_t v43 = __DataStorage._offset.getter();
        if (__OFSUB__(v40, v43)) {
          goto LABEL_280;
        }
        v42 += v40 - v43;
LABEL_39:
        if (__OFSUB__(v41, v40)) {
          goto LABEL_272;
        }
        __DataStorage._length.getter();
        uint64_t v44 = v215;
        sub_24A137958(v42, v30, v29, (BOOL *)__s1);
        sub_24A12340C(v30, v29);
        uint64_t v215 = v44;
        if (v44)
        {
          sub_24A12340C(v30, v29);
          uint64_t v194 = v30;
          unint64_t v195 = v29;
          goto LABEL_292;
        }
        swift_release();
        swift_release();
        char v45 = __s1[0];
        sub_24A12340C(v30, v29);
        sub_24A12340C(v30, v29);
        char v6 = v214;
        uint64_t v18 = v38;
        if ((v45 & 1) == 0) {
          goto LABEL_245;
        }
        goto LABEL_52;
      case 3uLL:
        memset(__s1, 0, 14);
        sub_24A1233B4(v30, v29);
        sub_24A1233B4(v30, v29);
        goto LABEL_44;
      default:
        __s1[0] = v26;
        LOWORD(__s1[1]) = v27;
        BYTE2(__s1[1]) = BYTE2(v27);
        BYTE3(__s1[1]) = BYTE3(v27);
        BYTE4(__s1[1]) = BYTE4(v27);
        BYTE5(__s1[1]) = BYTE5(v27);
        sub_24A1233B4(v30, v29);
        sub_24A1233B4(v30, v29);
LABEL_44:
        uint64_t v46 = v215;
        sub_24A137958((uint64_t)__s1, v30, v29, &v218);
        uint64_t v215 = v46;
        sub_24A12340C(v30, v29);
        sub_24A12340C(v30, v29);
        char v6 = v214;
        if (!v218) {
          goto LABEL_245;
        }
        goto LABEL_52;
    }
LABEL_91:
    unint64_t v212 = v76;
    unint64_t v213 = v78;
    uint64_t v211 = v74;
    switch(v81 >> 62)
    {
      case 1uLL:
        LODWORD(v87) = HIDWORD(v82) - v82;
        if (__OFSUB__(HIDWORD(v82), v82)) {
          goto LABEL_258;
        }
        uint64_t v87 = (int)v87;
LABEL_100:
        if (v84 != v87) {
          goto LABEL_245;
        }
        if (v84 < 1)
        {
LABEL_104:
          sub_24A1233B4(v77, v76);
          sub_24A1233B4(v79, v78);
          sub_24A1233B4(v82, v81);
          sub_24A1233B4(v83, v19);
LABEL_122:
          uint64_t v105 = 0;
          switch(v213 >> 62)
          {
            case 1uLL:
              LODWORD(v105) = HIDWORD(v79) - v79;
              if (__OFSUB__(HIDWORD(v79), v79)) {
                goto LABEL_260;
              }
              uint64_t v105 = (int)v105;
              break;
            case 2uLL:
              uint64_t v107 = *(void *)(v79 + 16);
              uint64_t v106 = *(void *)(v79 + 24);
              BOOL v34 = __OFSUB__(v106, v107);
              uint64_t v105 = v106 - v107;
              if (!v34) {
                break;
              }
              goto LABEL_259;
            case 3uLL:
              break;
            default:
              uint64_t v105 = BYTE6(v213);
              break;
          }
          switch(v19 >> 62)
          {
            case 1uLL:
              LODWORD(v108) = HIDWORD(v83) - v83;
              if (__OFSUB__(HIDWORD(v83), v83)) {
                goto LABEL_262;
              }
              uint64_t v108 = (int)v108;
LABEL_136:
              if (v105 != v108) {
                goto LABEL_244;
              }
              if (v105 < 1)
              {
LABEL_140:
                sub_24A12340C(v82, v81);
                sub_24A12340C(v83, v19);
                sub_24A12340C(v77, v212);
                sub_24A12340C(v79, v213);
                uint64_t v112 = v211;
              }
              else
              {
                unint64_t v111 = v213;
                switch(v213 >> 62)
                {
                  case 1uLL:
                    v205 = v18;
                    if (v79 >> 32 < (int)v79) {
                      goto LABEL_277;
                    }
                    uint64_t v200 = (int)v79;
                    unint64_t v39 = v213;
                    sub_24A1233B4(v83, v19);
                    sub_24A1233B4(v83, v19);
                    sub_24A1233B4(v83, v19);
                    sub_24A1233B4(v79, v39);
                    uint64_t v122 = v215;
                    char v123 = sub_24A137B80(v200, v79 >> 32, v39 & 0x3FFFFFFFFFFFFFFFLL, v83, v19);
                    uint64_t v215 = v122;
                    if (v122)
                    {
                      sub_24A12340C(v83, v19);
                      sub_24A12340C(v83, v19);
                      uint64_t v196 = v79;
                      goto LABEL_300;
                    }
                    char v118 = v123;
                    sub_24A12340C(v79, v39);
                    sub_24A12340C(v82, v81);
                    sub_24A12340C(v83, v19);
                    sub_24A12340C(v77, v212);
                    uint64_t v119 = v79;
                    unint64_t v120 = v39;
LABEL_150:
                    sub_24A12340C(v119, v120);
                    sub_24A12340C(v83, v19);
                    sub_24A12340C(v83, v19);
                    char v6 = v214;
                    uint64_t v18 = v205;
                    uint64_t v112 = v211;
                    if ((v118 & 1) == 0) {
                      goto LABEL_245;
                    }
                    break;
                  case 2uLL:
                    v205 = v18;
                    unint64_t v39 = v213 & 0x3FFFFFFFFFFFFFFFLL;
                    uint64_t v113 = *(void *)(v79 + 16);
                    uint64_t v114 = *(void *)(v79 + 24);
                    sub_24A1233B4(v83, v19);
                    sub_24A1233B4(v83, v19);
                    sub_24A1233B4(v83, v19);
                    swift_retain();
                    swift_retain();
                    uint64_t v115 = v114;
                    uint64_t v116 = v215;
                    char v117 = sub_24A137B80(v113, v115, v39, v83, v19);
                    uint64_t v215 = v116;
                    if (v116)
                    {
                      sub_24A12340C(v83, v19);
                      sub_24A12340C(v83, v19);
                      swift_release();
                      goto LABEL_298;
                    }
                    char v118 = v117;
                    swift_release();
                    swift_release();
                    sub_24A12340C(v82, v81);
                    sub_24A12340C(v83, v19);
                    sub_24A12340C(v77, v212);
                    uint64_t v119 = v79;
                    unint64_t v120 = v213;
                    goto LABEL_150;
                  case 3uLL:
                    memset(__s1, 0, 14);
                    sub_24A1233B4(v83, v19);
                    sub_24A1233B4(v83, v19);
                    goto LABEL_144;
                  default:
                    __s1[0] = v79;
                    LOWORD(__s1[1]) = v213;
                    *(_DWORD *)((char *)&__s1[1] + 2) = *(_DWORD *)((char *)&v213 + 2);
                    sub_24A1233B4(v83, v19);
                    sub_24A1233B4(v83, v19);
LABEL_144:
                    uint64_t v121 = v215;
                    sub_24A137958((uint64_t)__s1, v83, v19, &v218);
                    uint64_t v215 = v121;
                    if (v121)
                    {
                      sub_24A12340C(v83, v19);
                      uint64_t v196 = v83;
                      unint64_t v197 = v19;
                      goto LABEL_302;
                    }
                    sub_24A12340C(v82, v81);
                    sub_24A12340C(v83, v19);
                    sub_24A12340C(v77, v212);
                    sub_24A12340C(v79, v111);
                    sub_24A12340C(v83, v19);
                    sub_24A12340C(v83, v19);
                    char v6 = v214;
                    uint64_t v112 = v211;
                    if (!v218) {
                      goto LABEL_245;
                    }
                    break;
                }
              }
              if (*(void *)&v18[*(int *)(v112 + 24)] != *(void *)&v216[*(int *)(v112 + 24)]) {
                goto LABEL_245;
              }
              uint64_t v124 = v217[8];
              v125 = &v9[v124];
              char v126 = v9[v124 + 16];
              v127 = &v6[v124];
              if (v126)
              {
                if ((v127[16] & 1) == 0) {
                  goto LABEL_245;
                }
              }
              else
              {
                if (v127[16]) {
                  goto LABEL_245;
                }
                uint64_t v129 = *(void *)v125;
                uint64_t v128 = *((void *)v125 + 1);
                uint64_t v131 = *(void *)v127;
                uint64_t v130 = *((void *)v127 + 1);
                if (v129 != v131 || v128 != v130) {
                  goto LABEL_245;
                }
              }
              if ((MEMORY[0x24C5BCC70](&v9[v217[9]], &v6[v217[9]]) & 1) == 0) {
                goto LABEL_245;
              }
              uint64_t v133 = v217[10];
              v134 = &v9[v133];
              v135 = &v6[v133];
              BOOL v136 = *(void *)&v9[v133] == *(void *)&v6[v133]
                  && *(void *)&v9[v133 + 8] == *(void *)&v6[v133 + 8];
              if (!v136 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_245;
              }
              BOOL v137 = *((void *)v134 + 2) == *((void *)v135 + 2) && *((void *)v134 + 3) == *((void *)v135 + 3);
              if (!v137 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_245;
              }
              BOOL v138 = *((void *)v134 + 4) == *((void *)v135 + 4) && *((void *)v134 + 5) == *((void *)v135 + 5);
              if (!v138 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_245;
              }
              type metadata accessor for Credential(0);
              if ((static Date.== infix(_:_:)() & 1) == 0) {
                goto LABEL_245;
              }
              uint64_t v139 = v217[11];
              uint64_t v140 = *(void *)&v9[v139];
              unint64_t v141 = *(void *)&v9[v139 + 8];
              v142 = (unint64_t *)&v6[v139];
              unint64_t v19 = *v142;
              unint64_t v39 = v142[1];
              uint64_t v143 = 0;
              switch(v141 >> 62)
              {
                case 1uLL:
                  LODWORD(v143) = HIDWORD(v140) - v140;
                  if (__OFSUB__(HIDWORD(v140), v140)) {
                    goto LABEL_264;
                  }
                  uint64_t v143 = (int)v143;
LABEL_183:
                  switch(v39 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v146) = HIDWORD(v19) - v19;
                      if (__OFSUB__(HIDWORD(v19), v19)) {
                        goto LABEL_266;
                      }
                      uint64_t v146 = (int)v146;
LABEL_192:
                      if (v143 != v146) {
                        goto LABEL_245;
                      }
                      if (v143 < 1) {
                        goto LABEL_205;
                      }
                      break;
                    case 2uLL:
                      uint64_t v148 = *(void *)(v19 + 16);
                      uint64_t v147 = *(void *)(v19 + 24);
                      BOOL v34 = __OFSUB__(v147, v148);
                      uint64_t v146 = v147 - v148;
                      if (!v34) {
                        goto LABEL_192;
                      }
                      goto LABEL_265;
                    case 3uLL:
                      if (v143) {
                        goto LABEL_245;
                      }
                      goto LABEL_205;
                    default:
                      uint64_t v146 = BYTE6(v39);
                      goto LABEL_192;
                  }
                  break;
                case 2uLL:
                  uint64_t v145 = *(void *)(v140 + 16);
                  uint64_t v144 = *(void *)(v140 + 24);
                  BOOL v34 = __OFSUB__(v144, v145);
                  uint64_t v143 = v144 - v145;
                  if (!v34) {
                    goto LABEL_183;
                  }
                  goto LABEL_263;
                case 3uLL:
                  goto LABEL_183;
                default:
                  uint64_t v143 = BYTE6(v141);
                  goto LABEL_183;
              }
              sub_24A1233B4(v19, v39);
              sub_24A1233B4(v19, v39);
              unint64_t v150 = v203;
              unint64_t v149 = v204;
              switch(v141 >> 62)
              {
                case 1uLL:
                  if (v140 >> 32 < (int)v140) {
                    goto LABEL_278;
                  }
                  sub_24A1233B4(v19, v39);
                  sub_24A1233B4(v19, v39);
                  sub_24A1233B4(v19, v39);
                  sub_24A1233B4(v140, v141);
                  uint64_t v162 = v215;
                  char v163 = sub_24A137B80((int)v140, v140 >> 32, v141 & 0x3FFFFFFFFFFFFFFFLL, v19, v39);
                  uint64_t v215 = v162;
                  if (v162)
                  {
LABEL_301:
                    sub_24A12340C(v19, v39);
                    sub_24A12340C(v19, v39);
                    sub_24A12340C(v19, v39);
                    sub_24A12340C(v19, v39);
                    uint64_t v196 = v140;
                    unint64_t v197 = v141;
                    goto LABEL_302;
                  }
                  BOOL v154 = v163;
                  sub_24A12340C(v140, v141);
LABEL_204:
                  char v6 = v214;
                  sub_24A12340C(v19, v39);
                  sub_24A12340C(v19, v39);
                  sub_24A12340C(v19, v39);
                  sub_24A12340C(v19, v39);
                  if (!v154) {
                    goto LABEL_245;
                  }
LABEL_205:
                  uint64_t v164 = v217[12];
                  uint64_t v140 = *(void *)&v9[v164];
                  unint64_t v141 = *(void *)&v9[v164 + 8];
                  v165 = (unint64_t *)&v6[v164];
                  unint64_t v19 = *v165;
                  unint64_t v39 = v165[1];
                  uint64_t v166 = 0;
                  switch(v141 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v166) = HIDWORD(v140) - v140;
                      if (__OFSUB__(HIDWORD(v140), v140)) {
                        goto LABEL_268;
                      }
                      uint64_t v166 = (int)v166;
                      break;
                    case 2uLL:
                      uint64_t v168 = *(void *)(v140 + 16);
                      uint64_t v167 = *(void *)(v140 + 24);
                      BOOL v34 = __OFSUB__(v167, v168);
                      uint64_t v166 = v167 - v168;
                      if (!v34) {
                        break;
                      }
                      goto LABEL_267;
                    case 3uLL:
                      break;
                    default:
                      uint64_t v166 = BYTE6(v141);
                      break;
                  }
                  switch(v39 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v169) = HIDWORD(v19) - v19;
                      if (__OFSUB__(HIDWORD(v19), v19)) {
                        goto LABEL_269;
                      }
                      uint64_t v169 = (int)v169;
LABEL_219:
                      if (v166 != v169) {
                        goto LABEL_245;
                      }
                      if (v166 >= 1)
                      {
                        sub_24A1233B4(v19, v39);
                        sub_24A1233B4(v19, v39);
                        unint64_t v172 = v202;
                        unint64_t v173 = v201;
                        switch(v141 >> 62)
                        {
                          case 1uLL:
                            if (v140 >> 32 < (int)v140) {
                              goto LABEL_279;
                            }
                            sub_24A1233B4(v19, v39);
                            sub_24A1233B4(v19, v39);
                            sub_24A1233B4(v19, v39);
                            sub_24A1233B4(v140, v141);
                            uint64_t v185 = v215;
                            char v186 = sub_24A137B80((int)v140, v140 >> 32, v141 & 0x3FFFFFFFFFFFFFFFLL, v19, v39);
                            uint64_t v215 = v185;
                            if (v185) {
                              goto LABEL_301;
                            }
                            BOOL v177 = v186;
                            sub_24A12340C(v140, v141);
LABEL_231:
                            char v6 = v214;
                            sub_24A12340C(v19, v39);
                            sub_24A12340C(v19, v39);
                            sub_24A12340C(v19, v39);
                            sub_24A12340C(v19, v39);
                            if (v177) {
                              break;
                            }
                            goto LABEL_245;
                          case 2uLL:
                            uint64_t v178 = *(void *)(v140 + 16);
                            uint64_t v179 = *(void *)(v140 + 24);
                            sub_24A1233B4(v19, v39);
                            sub_24A1233B4(v19, v39);
                            sub_24A1233B4(v19, v39);
                            swift_retain();
                            swift_retain();
                            uint64_t v180 = v215;
                            char v181 = sub_24A137B80(v178, v179, v141 & 0x3FFFFFFFFFFFFFFFLL, v19, v39);
                            uint64_t v215 = v180;
                            if (v180) {
                              goto LABEL_297;
                            }
                            BOOL v177 = v181;
                            swift_release();
                            swift_release();
                            goto LABEL_231;
                          case 3uLL:
                            sub_24A1233B4(v19, v39);
                            sub_24A1233B4(v19, v39);
                            sub_24A1233B4(v19, v39);
                            unint64_t v182 = v172 & 0xFF00000000000000;
                            uint64_t v183 = v215;
                            BOOL v184 = sub_24A137CEC(0, v182, v19, v39);
                            uint64_t v215 = v183;
                            if (v183) {
                              goto LABEL_299;
                            }
                            BOOL v177 = v184;
                            unint64_t v202 = v182;
                            goto LABEL_231;
                          default:
                            sub_24A1233B4(v19, v39);
                            sub_24A1233B4(v19, v39);
                            sub_24A1233B4(v19, v39);
                            unint64_t v174 = v173 & 0xFF00000000000000 | v141 & 0xFFFFFFFFFFFFFFLL;
                            uint64_t v175 = v215;
                            BOOL v176 = sub_24A137CEC(v140, v174, v19, v39);
                            uint64_t v215 = v175;
                            if (v175) {
                              goto LABEL_299;
                            }
                            BOOL v177 = v176;
                            unint64_t v201 = v174;
                            goto LABEL_231;
                        }
                      }
LABEL_232:
                      uint64_t v187 = v217[13];
                      v188 = &v9[v187];
                      uint64_t v189 = *(void *)&v9[v187 + 8];
                      v190 = &v6[v187];
                      uint64_t v191 = *((void *)v190 + 1);
                      if (v189)
                      {
                        if (!v191) {
                          goto LABEL_245;
                        }
                        BOOL v192 = *(void *)v188 == *(void *)v190 && v189 == v191;
                        if (!v192 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                          goto LABEL_245;
                        }
                      }
                      else if (v191)
                      {
                        goto LABEL_245;
                      }
                      sub_24A139334((uint64_t)v6, (void (*)(void))type metadata accessor for AssetDownloadRequest);
                      sub_24A139334((uint64_t)v9, (void (*)(void))type metadata accessor for AssetDownloadRequest);
                      a1 = v207;
                      unint64_t v11 = v209 + v206;
                      uint64_t result = 1;
                      uint64_t v10 = v210 - 1;
                      a2 = v208;
                      if (v210 == 1) {
                        return result;
                      }
                      break;
                    case 2uLL:
                      uint64_t v171 = *(void *)(v19 + 16);
                      uint64_t v170 = *(void *)(v19 + 24);
                      BOOL v34 = __OFSUB__(v170, v171);
                      uint64_t v169 = v170 - v171;
                      if (!v34) {
                        goto LABEL_219;
                      }
                      goto LABEL_270;
                    case 3uLL:
                      if (v166) {
                        goto LABEL_245;
                      }
                      goto LABEL_232;
                    default:
                      uint64_t v169 = BYTE6(v39);
                      goto LABEL_219;
                  }
                  break;
                case 2uLL:
                  uint64_t v155 = *(void *)(v140 + 16);
                  uint64_t v156 = *(void *)(v140 + 24);
                  sub_24A1233B4(v19, v39);
                  sub_24A1233B4(v19, v39);
                  sub_24A1233B4(v19, v39);
                  swift_retain();
                  swift_retain();
                  uint64_t v157 = v215;
                  char v158 = sub_24A137B80(v155, v156, v141 & 0x3FFFFFFFFFFFFFFFLL, v19, v39);
                  uint64_t v215 = v157;
                  if (v157)
                  {
LABEL_297:
                    sub_24A12340C(v19, v39);
                    sub_24A12340C(v19, v39);
                    sub_24A12340C(v19, v39);
                    sub_24A12340C(v19, v39);
                    swift_release();
                    goto LABEL_298;
                  }
                  BOOL v154 = v158;
                  swift_release();
                  swift_release();
                  goto LABEL_204;
                case 3uLL:
                  sub_24A1233B4(v19, v39);
                  sub_24A1233B4(v19, v39);
                  sub_24A1233B4(v19, v39);
                  unint64_t v159 = v149 & 0xFF00000000000000;
                  uint64_t v160 = v215;
                  BOOL v161 = sub_24A137CEC(0, v159, v19, v39);
                  uint64_t v215 = v160;
                  if (v160) {
                    goto LABEL_299;
                  }
                  BOOL v154 = v161;
                  unint64_t v204 = v159;
                  goto LABEL_204;
                default:
                  sub_24A1233B4(v19, v39);
                  sub_24A1233B4(v19, v39);
                  sub_24A1233B4(v19, v39);
                  unint64_t v151 = v150 & 0xFF00000000000000 | v141 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v152 = v215;
                  BOOL v153 = sub_24A137CEC(v140, v151, v19, v39);
                  uint64_t v215 = v152;
                  if (v152) {
                    goto LABEL_299;
                  }
                  BOOL v154 = v153;
                  unint64_t v203 = v151;
                  goto LABEL_204;
              }
              break;
            case 2uLL:
              uint64_t v110 = *(void *)(v83 + 16);
              uint64_t v109 = *(void *)(v83 + 24);
              BOOL v34 = __OFSUB__(v109, v110);
              uint64_t v108 = v109 - v110;
              if (!v34) {
                goto LABEL_136;
              }
              goto LABEL_261;
            case 3uLL:
              if (v105) {
                goto LABEL_244;
              }
              goto LABEL_140;
            default:
              uint64_t v108 = BYTE6(v19);
              goto LABEL_136;
          }
          continue;
        }
        switch(v76 >> 62)
        {
          case 1uLL:
            v205 = v18;
            uint64_t v200 = v77 >> 32;
            if (v77 >> 32 < (int)v77) {
              goto LABEL_275;
            }
            v199 = v9;
            unint64_t v98 = v76;
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v77, v98);
            sub_24A1233B4(v79, v78);
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v83, v19);
            sub_24A1233B4(v77, v98);
            uint64_t v99 = __DataStorage._bytes.getter();
            if (!v99) {
              goto LABEL_115;
            }
            uint64_t v100 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v77, v100)) {
              goto LABEL_285;
            }
            v99 += (int)v77 - v100;
LABEL_115:
            __DataStorage._length.getter();
            uint64_t v101 = v215;
            sub_24A137958(v99, v82, v81, (BOOL *)__s1);
            sub_24A12340C(v82, v81);
            uint64_t v215 = v101;
            if (v101)
            {
              sub_24A12340C(v82, v81);
              sub_24A12340C(v82, v81);
              uint64_t v196 = v77;
              unint64_t v197 = v212;
              goto LABEL_302;
            }
            sub_24A12340C(v77, v212);
            sub_24A12340C(v82, v81);
            char v102 = __s1[0];
            sub_24A12340C(v82, v81);
            char v6 = v214;
            uint64_t v18 = v205;
            uint64_t v9 = v199;
            if ((v102 & 1) == 0) {
              goto LABEL_244;
            }
            goto LABEL_122;
          case 2uLL:
            v205 = v18;
            unint64_t v39 = v76 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v200 = *(void *)(v77 + 16);
            v199 = *(char **)(v77 + 24);
            unint64_t v92 = v76;
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v77, v92);
            sub_24A1233B4(v79, v78);
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v83, v19);
            swift_retain();
            swift_retain();
            uint64_t v93 = __DataStorage._bytes.getter();
            if (v93)
            {
              uint64_t v94 = __DataStorage._offset.getter();
              uint64_t v95 = v200;
              if (__OFSUB__(v200, v94)) {
                goto LABEL_284;
              }
              v93 += v200 - v94;
            }
            else
            {
              uint64_t v95 = v200;
            }
            if (__OFSUB__(v199, v95))
            {
LABEL_276:
              __break(1u);
LABEL_277:
              __break(1u);
LABEL_278:
              __break(1u);
LABEL_279:
              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
LABEL_282:
              __break(1u);
LABEL_283:
              __break(1u);
LABEL_284:
              __break(1u);
LABEL_285:
              __break(1u);
            }
            __DataStorage._length.getter();
            uint64_t v103 = v215;
            sub_24A137958(v93, v82, v81, (BOOL *)__s1);
            sub_24A12340C(v82, v81);
            uint64_t v215 = v103;
            if (v103)
            {
              sub_24A12340C(v82, v81);
              uint64_t v194 = v82;
              unint64_t v195 = v81;
LABEL_292:
              sub_24A12340C(v194, v195);
LABEL_293:
              swift_release();
LABEL_298:
              swift_release();
              __break(1u);
LABEL_299:
              sub_24A12340C(v19, v39);
              sub_24A12340C(v19, v39);
              sub_24A12340C(v19, v39);
              uint64_t v196 = v19;
LABEL_300:
              unint64_t v197 = v39;
LABEL_302:
              sub_24A12340C(v196, v197);
              __break(1u);
              JUMPOUT(0x24A133FACLL);
            }
            swift_release();
            swift_release();
            char v104 = __s1[0];
            sub_24A12340C(v82, v81);
            sub_24A12340C(v82, v81);
            char v6 = v214;
            uint64_t v18 = v205;
            if (v104) {
              goto LABEL_122;
            }
LABEL_244:
            sub_24A12340C(v82, v81);
            sub_24A12340C(v83, v19);
            sub_24A12340C(v77, v212);
            sub_24A12340C(v79, v213);
LABEL_245:
            sub_24A139334((uint64_t)v6, (void (*)(void))type metadata accessor for AssetDownloadRequest);
            sub_24A139334((uint64_t)v9, (void (*)(void))type metadata accessor for AssetDownloadRequest);
            break;
          case 3uLL:
            memset(__s1, 0, 14);
            unint64_t v96 = v76;
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v77, v96);
            sub_24A1233B4(v79, v78);
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v83, v19);
            goto LABEL_109;
          default:
            __s1[0] = v77;
            LOWORD(__s1[1]) = v76;
            BYTE2(__s1[1]) = BYTE2(v76);
            BYTE3(__s1[1]) = BYTE3(v76);
            BYTE4(__s1[1]) = BYTE4(v76);
            BYTE5(__s1[1]) = BYTE5(v76);
            unint64_t v90 = v78;
            v205 = (char *)__s1 + BYTE6(v76);
            unint64_t v91 = v76;
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v77, v91);
            sub_24A1233B4(v79, v90);
            sub_24A1233B4(v82, v81);
            sub_24A1233B4(v83, v19);
LABEL_109:
            uint64_t v97 = v215;
            sub_24A137958((uint64_t)__s1, v82, v81, &v218);
            uint64_t v215 = v97;
            sub_24A12340C(v82, v81);
            sub_24A12340C(v82, v81);
            char v6 = v214;
            if (!v218) {
              goto LABEL_244;
            }
            goto LABEL_122;
        }
        return 0;
      case 2uLL:
        uint64_t v89 = *(void *)(v82 + 16);
        uint64_t v88 = *(void *)(v82 + 24);
        BOOL v34 = __OFSUB__(v88, v89);
        uint64_t v87 = v88 - v89;
        if (!v34) {
          goto LABEL_100;
        }
        goto LABEL_257;
      case 3uLL:
        if (v84) {
          goto LABEL_245;
        }
        goto LABEL_104;
      default:
        uint64_t v87 = BYTE6(v81);
        goto LABEL_100;
    }
  }
}

void sub_24A1340CC()
{
  sub_24A139550();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  v204[3] = *MEMORY[0x263EF8340];
  uint64_t v201 = type metadata accessor for AssetSkeleton();
  sub_24A139418();
  MEMORY[0x270FA5388](v4);
  sub_24A13961C();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v190 - v10;
  uint64_t v12 = *(void *)(v3 + 16);
  if (v12 != *(void *)(v1 + 16) || !v12 || v3 == v1) {
    goto LABEL_265;
  }
  unint64_t v202 = 0;
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v192 = *(void *)(v9 + 72);
  uint64_t v193 = v3;
  uint64_t v194 = v1;
  uint64_t v195 = v7;
  v199 = (char *)&v190 - v10;
  while (2)
  {
    uint64_t v197 = v12;
    sub_24A1392CC(v3 + v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AssetSkeleton);
    unint64_t v196 = v13;
    sub_24A1392CC(v1 + v13, v7, (uint64_t (*)(void))type metadata accessor for AssetSkeleton);
    if ((MEMORY[0x24C5BCC70](v11, v7) & 1) == 0) {
      goto LABEL_264;
    }
    unint64_t v14 = type metadata accessor for Asset.ID(0);
    uint64_t v15 = *(int *)(v14 + 20);
    uint64_t v16 = *(void *)&v11[v15];
    uint64_t v17 = *(void *)&v11[v15 + 8];
    uint64_t v18 = (void *)(v7 + v15);
    BOOL v19 = v16 == *v18 && v17 == v18[1];
    if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_264;
    }
    uint64_t v20 = *(int *)(v14 + 24);
    uint64_t v21 = *(void *)&v11[v20];
    unint64_t v22 = *(void *)&v11[v20 + 8];
    uint64_t v23 = (unint64_t *)(v7 + v20);
    unint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    uint64_t v26 = 0;
    switch(v22 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v21), v21)) {
          goto LABEL_267;
        }
        uint64_t v26 = HIDWORD(v21) - (int)v21;
LABEL_16:
        unint64_t v29 = v24 >> 62;
        unint64_t v30 = HIDWORD(v25);
        size_t v31 = BYTE6(v24);
        switch(v24 >> 62)
        {
          case 1uLL:
            LODWORD(v32) = HIDWORD(v25) - v25;
            if (__OFSUB__(HIDWORD(v25), v25)) {
              goto LABEL_268;
            }
            uint64_t v32 = (int)v32;
LABEL_25:
            if (v26 != v32) {
              goto LABEL_264;
            }
            if (v26 < 1) {
              goto LABEL_81;
            }
            break;
          case 2uLL:
            uint64_t v34 = *(void *)(v25 + 16);
            uint64_t v33 = *(void *)(v25 + 24);
            BOOL v35 = __OFSUB__(v33, v34);
            uint64_t v32 = v33 - v34;
            if (!v35) {
              goto LABEL_25;
            }
            goto LABEL_269;
          case 3uLL:
            if (v26) {
              goto LABEL_264;
            }
            goto LABEL_81;
          default:
            uint64_t v32 = BYTE6(v24);
            goto LABEL_25;
        }
        break;
      case 2uLL:
        uint64_t v28 = *(void *)(v21 + 16);
        uint64_t v27 = *(void *)(v21 + 24);
        uint64_t v26 = v27 - v28;
        if (!__OFSUB__(v27, v28)) {
          goto LABEL_16;
        }
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
LABEL_273:
        __break(1u);
LABEL_274:
        __break(1u);
LABEL_275:
        __break(1u);
LABEL_276:
        __break(1u);
LABEL_277:
        __break(1u);
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
LABEL_280:
        __break(1u);
LABEL_281:
        __break(1u);
LABEL_282:
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        __break(1u);
LABEL_297:
        __break(1u);
LABEL_298:
        __break(1u);
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
LABEL_302:
        __break(1u);
LABEL_303:
        __break(1u);
LABEL_304:
        __break(1u);
LABEL_305:
        __break(1u);
        goto LABEL_306;
      case 3uLL:
        goto LABEL_16;
      default:
        uint64_t v26 = BYTE6(v22);
        goto LABEL_16;
    }
    uint64_t v36 = (uint64_t)v25 >> 32;
    unint64_t v37 = v25 >> 8;
    unint64_t v38 = v25 >> 16;
    unint64_t v39 = v25 >> 24;
    unint64_t v40 = v25 >> 40;
    unint64_t v41 = HIWORD(v25);
    unint64_t v42 = HIBYTE(v25);
    unint64_t v43 = v24 >> 8;
    unint64_t v44 = v24 >> 16;
    unint64_t v45 = v24 >> 24;
    unint64_t v46 = HIDWORD(v24);
    unint64_t v47 = v24 >> 40;
    switch(v22 >> 62)
    {
      case 1uLL:
        if (v21 >> 32 < (int)v21) {
          goto LABEL_290;
        }
        sub_24A1394F0();
        sub_24A1394F0();
        sub_24A1394F0();
        sub_24A1233B4(v21, v22);
        uint64_t v60 = __DataStorage._bytes.getter();
        if (!v60) {
          goto LABEL_58;
        }
        uint64_t v61 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v21, v61)) {
          goto LABEL_302;
        }
        v60 += (int)v21 - v61;
LABEL_58:
        __DataStorage._length.getter();
        unint64_t v62 = v202;
        sub_24A137958(v60, v25, v24, (BOOL *)v204);
        sub_24A1394B0();
        unint64_t v202 = v62;
        if (v62)
        {
          sub_24A1394B0();
          sub_24A1394B0();
          uint64_t v186 = v21;
          unint64_t v187 = v22;
          goto LABEL_337;
        }
        sub_24A12340C(v21, v22);
        sub_24A1394B0();
        char v55 = v204[0];
        sub_24A1394B0();
        uint64_t v7 = v195;
LABEL_60:
        unint64_t v11 = v199;
        if ((v55 & 1) == 0) {
          goto LABEL_264;
        }
        goto LABEL_81;
      case 2uLL:
        uint64_t v50 = *(void *)(v21 + 16);
        uint64_t v51 = *(void *)(v21 + 24);
        sub_24A1394F0();
        sub_24A1394F0();
        sub_24A1394F0();
        swift_retain();
        swift_retain();
        uint64_t v52 = __DataStorage._bytes.getter();
        if (!v52) {
          goto LABEL_39;
        }
        uint64_t v53 = __DataStorage._offset.getter();
        if (__OFSUB__(v50, v53)) {
          goto LABEL_301;
        }
        v52 += v50 - v53;
LABEL_39:
        if (__OFSUB__(v51, v50)) {
          goto LABEL_291;
        }
        __DataStorage._length.getter();
        unint64_t v54 = v202;
        sub_24A137958(v52, v25, v24, (BOOL *)v204);
        sub_24A1394B0();
        uint64_t v7 = v195;
        unint64_t v202 = v54;
        if (v54) {
          goto LABEL_323;
        }
        swift_release();
        swift_release();
        char v55 = v204[0];
        sub_24A1394B0();
        sub_24A1394B0();
        goto LABEL_60;
      case 3uLL:
        sub_24A1396E0();
        if (!v56) {
          goto LABEL_62;
        }
        if (v56 == 1)
        {
          if (v36 < (int)v25) {
            goto LABEL_312;
          }
          sub_24A1394F0();
          uint64_t v21 = __DataStorage._bytes.getter();
          if (v21)
          {
            uint64_t v57 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v25, v57)) {
              goto LABEL_318;
            }
            v21 += (int)v25 - v57;
          }
          uint64_t v49 = __DataStorage._length.getter();
          if (!v21)
          {
            __break(1u);
LABEL_320:
            __break(1u);
LABEL_321:
            __break(1u);
LABEL_322:
            __break(1u);
LABEL_323:
            sub_24A1394B0();
            sub_24A1394B0();
            goto LABEL_332;
          }
LABEL_49:
          if (v49 >= v36 - (int)v25) {
            size_t v58 = v36 - (int)v25;
          }
          else {
            size_t v58 = v49;
          }
          int v59 = memcmp(v204, (const void *)v21, v58);
          sub_24A1394B0();
          uint64_t v7 = v195;
          if (v59) {
            goto LABEL_264;
          }
        }
        else
        {
          uint64_t v68 = *(void *)(v25 + 16);
          uint64_t v69 = *(void *)(v25 + 24);
          sub_24A1394F0();
          swift_retain();
          swift_retain();
          uint64_t v66 = (char *)__DataStorage._bytes.getter();
          if (v66)
          {
            uint64_t v70 = __DataStorage._offset.getter();
            uint64_t v7 = v195;
            if (__OFSUB__(v68, v70)) {
              goto LABEL_316;
            }
            v66 += v68 - v70;
          }
          else
          {
            uint64_t v7 = v195;
          }
          BOOL v35 = __OFSUB__(v69, v68);
          int64_t v71 = v69 - v68;
          if (v35) {
            goto LABEL_313;
          }
          uint64_t v72 = __DataStorage._length.getter();
          if (!v66) {
            goto LABEL_320;
          }
LABEL_77:
          if (v72 >= v71) {
            size_t v73 = v71;
          }
          else {
            size_t v73 = v72;
          }
          uint64_t v21 = memcmp(v204, v66, v73);
          swift_release();
          swift_release();
          sub_24A1394B0();
          unint64_t v11 = v199;
          if (v21) {
            goto LABEL_264;
          }
        }
LABEL_81:
        sub_24A1395F8();
        switch(v77)
        {
          case 1:
            LODWORD(v76) = v75 - v25;
            if (__OFSUB__(v75, v25)) {
              goto LABEL_270;
            }
            uint64_t v76 = (int)v76;
LABEL_86:
            switch(v14 >> 62)
            {
              case 1uLL:
                LODWORD(v80) = HIDWORD(v24) - v24;
                if (__OFSUB__(HIDWORD(v24), v24)) {
                  goto LABEL_273;
                }
                uint64_t v80 = (int)v80;
LABEL_95:
                if (v76 != v80) {
                  goto LABEL_264;
                }
                if (v76 < 1) {
                  goto LABEL_114;
                }
                break;
              case 2uLL:
                uint64_t v82 = *(void *)(v24 + 16);
                uint64_t v81 = *(void *)(v24 + 24);
                BOOL v35 = __OFSUB__(v81, v82);
                uint64_t v80 = v81 - v82;
                if (!v35) {
                  goto LABEL_95;
                }
                goto LABEL_272;
              case 3uLL:
                if (v76) {
                  goto LABEL_264;
                }
                goto LABEL_114;
              default:
                uint64_t v80 = BYTE6(v14);
                goto LABEL_95;
            }
            break;
          case 2:
            uint64_t v79 = *(void *)(v25 + 16);
            uint64_t v78 = *(void *)(v25 + 24);
            BOOL v35 = __OFSUB__(v78, v79);
            uint64_t v76 = v78 - v79;
            if (!v35) {
              goto LABEL_86;
            }
            goto LABEL_271;
          case 3:
            goto LABEL_86;
          default:
            uint64_t v76 = BYTE6(v21);
            goto LABEL_86;
        }
        break;
      default:
        v204[0] = v21;
        LOWORD(v204[1]) = v22;
        BYTE2(v204[1]) = BYTE2(v22);
        BYTE3(v204[1]) = BYTE3(v22);
        BYTE4(v204[1]) = BYTE4(v22);
        BYTE5(v204[1]) = BYTE5(v22);
        if (!v29)
        {
LABEL_62:
          v203[0] = v25;
          v203[1] = v37;
          v203[2] = v38;
          v203[3] = v39;
          v203[4] = v30;
          v203[5] = v40;
          v203[6] = v41;
          v203[7] = v42;
          v203[8] = v24;
          v203[9] = v43;
          v203[10] = v44;
          v203[11] = v45;
          v203[12] = v46;
          v203[13] = v47;
          int v63 = memcmp(v204, v203, v31);
          uint64_t v7 = v195;
          if (v63) {
            goto LABEL_264;
          }
          goto LABEL_81;
        }
        if (v29 == 1)
        {
          if (v36 < (int)v25) {
            goto LABEL_311;
          }
          sub_24A1394F0();
          uint64_t v21 = __DataStorage._bytes.getter();
          if (v21)
          {
            uint64_t v48 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v25, v48)) {
              goto LABEL_317;
            }
            v21 += (int)v25 - v48;
          }
          uint64_t v49 = __DataStorage._length.getter();
          if (!v21) {
            goto LABEL_322;
          }
          goto LABEL_49;
        }
        uint64_t v64 = *(void *)(v25 + 16);
        uint64_t v65 = *(void *)(v25 + 24);
        sub_24A1394F0();
        swift_retain();
        swift_retain();
        uint64_t v66 = (char *)__DataStorage._bytes.getter();
        if (v66)
        {
          uint64_t v67 = __DataStorage._offset.getter();
          uint64_t v7 = v195;
          if (__OFSUB__(v64, v67)) {
            goto LABEL_315;
          }
          v66 += v64 - v67;
        }
        else
        {
          uint64_t v7 = v195;
        }
        BOOL v35 = __OFSUB__(v65, v64);
        int64_t v71 = v65 - v64;
        if (v35) {
          goto LABEL_314;
        }
        uint64_t v72 = __DataStorage._length.getter();
        if (!v66) {
          goto LABEL_321;
        }
        goto LABEL_77;
    }
    switch(v74)
    {
      case 1:
        if ((uint64_t)v25 >> 32 < (int)v25) {
          goto LABEL_292;
        }
        sub_24A1393B8();
        sub_24A1393B8();
        sub_24A1393B8();
        sub_24A1233B4(v25, v21);
        uint64_t v89 = __DataStorage._bytes.getter();
        if (!v89) {
          goto LABEL_111;
        }
        uint64_t v90 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v25, v90)) {
          goto LABEL_304;
        }
        v89 += (int)v25 - v90;
LABEL_111:
        __DataStorage._length.getter();
        sub_24A13944C(v89, (BOOL *)v204);
        sub_24A1393A0();
        unint64_t v202 = (unint64_t)v11;
        if (v11)
        {
LABEL_333:
          sub_24A1393A0();
          sub_24A1393A0();
          uint64_t v186 = v25;
          unint64_t v187 = v21;
          goto LABEL_337;
        }
        sub_24A12340C(v25, v21);
        sub_24A1393A0();
        char v88 = v204[0];
        sub_24A1393A0();
        uint64_t v7 = v195;
        goto LABEL_113;
      case 2:
        uint64_t v85 = *(void *)(v25 + 16);
        uint64_t v86 = *(void *)(v25 + 24);
        sub_24A1393B8();
        sub_24A1393B8();
        sub_24A1393B8();
        swift_retain();
        swift_retain();
        if (__DataStorage._bytes.getter() && __OFSUB__(v85, __DataStorage._offset.getter())) {
          goto LABEL_303;
        }
        BOOL v35 = __OFSUB__(v86, v85);
        unint64_t v87 = v86 - v85;
        if (v35) {
          goto LABEL_293;
        }
        __DataStorage._length.getter();
        sub_24A1393E8();
        sub_24A1393A0();
        unint64_t v202 = v87;
        if (v87)
        {
LABEL_330:
          sub_24A1393A0();
          uint64_t v188 = v24;
          unint64_t v189 = v14;
LABEL_331:
          sub_24A12340C(v188, v189);
          goto LABEL_332;
        }
        swift_release();
        swift_release();
        char v88 = v204[0];
        sub_24A1393A0();
        sub_24A1393A0();
LABEL_113:
        unint64_t v11 = v199;
        if ((v88 & 1) == 0) {
          goto LABEL_264;
        }
LABEL_114:
        uint64_t v91 = type metadata accessor for Asset(0);
        uint64_t v92 = *(int *)(v91 + 20);
        uint64_t v94 = *(void *)&v11[v92];
        unint64_t v93 = *(void *)&v11[v92 + 8];
        unint64_t v25 = *(void *)&v11[v92 + 16];
        unint64_t v95 = *(void *)&v11[v92 + 24];
        unint64_t v96 = (unint64_t *)(v7 + v92);
        unint64_t v24 = *v96;
        unint64_t v14 = v96[1];
        uint64_t v98 = v96[2];
        unint64_t v97 = v96[3];
        uint64_t v21 = v91;
        uint64_t v99 = 0;
        switch(v93 >> 62)
        {
          case 1uLL:
            LODWORD(v99) = HIDWORD(v94) - v94;
            if (__OFSUB__(HIDWORD(v94), v94)) {
              goto LABEL_275;
            }
            uint64_t v99 = (int)v99;
            break;
          case 2uLL:
            uint64_t v101 = *(void *)(v94 + 16);
            uint64_t v100 = *(void *)(v94 + 24);
            BOOL v35 = __OFSUB__(v100, v101);
            uint64_t v99 = v100 - v101;
            if (!v35) {
              goto LABEL_119;
            }
            goto LABEL_274;
          case 3uLL:
            goto LABEL_119;
          default:
            uint64_t v99 = BYTE6(v93);
            goto LABEL_119;
        }
        break;
      case 3:
        memset(v204, 0, 14);
        sub_24A1393B8();
        sub_24A1393B8();
        uint64_t v83 = sub_24A1394E0();
        goto LABEL_105;
      default:
        LOWORD(v204[0]) = v25;
        BYTE2(v204[0]) = BYTE2(v25);
        BYTE3(v204[0]) = BYTE3(v25);
        BYTE4(v204[0]) = v75;
        BYTE5(v204[0]) = BYTE5(v25);
        BYTE6(v204[0]) = BYTE6(v25);
        HIBYTE(v204[0]) = HIBYTE(v25);
        LOWORD(v204[1]) = v21;
        BYTE2(v204[1]) = BYTE2(v21);
        BYTE3(v204[1]) = BYTE3(v21);
        BYTE4(v204[1]) = BYTE4(v21);
        BYTE5(v204[1]) = BYTE5(v21);
        sub_24A1393B8();
        sub_24A1393B8();
        uint64_t v83 = sub_24A1396EC();
LABEL_105:
        sub_24A13944C(v83, v84);
        unint64_t v202 = (unint64_t)v11;
        unint64_t v11 = v199;
        sub_24A1393A0();
        sub_24A1393A0();
        if ((v203[0] & 1) == 0) {
          goto LABEL_264;
        }
        goto LABEL_114;
    }
LABEL_119:
    unint64_t v200 = v95;
    unint64_t v198 = v93;
    switch(v14 >> 62)
    {
      case 1uLL:
        LODWORD(v102) = HIDWORD(v24) - v24;
        if (__OFSUB__(HIDWORD(v24), v24)) {
          goto LABEL_277;
        }
        uint64_t v102 = (int)v102;
LABEL_128:
        if (v99 != v102) {
          goto LABEL_264;
        }
        if (v99 < 1)
        {
LABEL_132:
          sub_24A1233B4(v94, v93);
          sub_24A1233B4(v25, v95);
          sub_24A1393B8();
          sub_24A139468();
LABEL_149:
          uint64_t v124 = 0;
          switch(v200 >> 62)
          {
            case 1uLL:
              LODWORD(v124) = HIDWORD(v25) - v25;
              if (__OFSUB__(HIDWORD(v25), v25)) {
                goto LABEL_279;
              }
              uint64_t v124 = (int)v124;
              break;
            case 2uLL:
              uint64_t v126 = *(void *)(v25 + 16);
              uint64_t v125 = *(void *)(v25 + 24);
              BOOL v35 = __OFSUB__(v125, v126);
              uint64_t v124 = v125 - v126;
              if (!v35) {
                break;
              }
              goto LABEL_278;
            case 3uLL:
              break;
            default:
              uint64_t v124 = BYTE6(v200);
              break;
          }
          switch(v97 >> 62)
          {
            case 1uLL:
              LODWORD(v127) = HIDWORD(v98) - v98;
              if (__OFSUB__(HIDWORD(v98), v98)) {
                goto LABEL_280;
              }
              uint64_t v127 = (int)v127;
LABEL_163:
              if (v124 != v127) {
                goto LABEL_263;
              }
              if (v124 >= 1)
              {
                unint64_t v130 = v200;
                switch(v200 >> 62)
                {
                  case 1uLL:
                    uint64_t v191 = v21;
                    if ((uint64_t)v25 >> 32 < (int)v25) {
                      goto LABEL_296;
                    }
                    unint64_t v139 = v200;
                    sub_24A139468();
                    sub_24A139468();
                    sub_24A139468();
                    sub_24A1233B4(v25, v139);
                    if (__DataStorage._bytes.getter() && __OFSUB__((int)v25, __DataStorage._offset.getter())) {
                      goto LABEL_308;
                    }
                    __DataStorage._length.getter();
                    sub_24A1395C8();
                    sub_24A139434();
                    unint64_t v202 = (int)v25;
                    if (v25)
                    {
                      sub_24A139434();
                      sub_24A139434();
                      uint64_t v186 = v25;
                      unint64_t v187 = v200;
                      goto LABEL_337;
                    }
                    unint64_t v140 = v200;
                    sub_24A12340C(v25, v200);
                    sub_24A1393A0();
                    sub_24A139434();
                    unint64_t v14 = LOBYTE(v204[0]);
                    sub_24A139698();
                    sub_24A12340C(v25, v140);
                    sub_24A139434();
                    sub_24A139434();
                    uint64_t v7 = v195;
                    unint64_t v11 = v199;
                    uint64_t v21 = v191;
                    if ((v14 & 1) == 0) {
                      goto LABEL_264;
                    }
                    goto LABEL_183;
                  case 2uLL:
                    uint64_t v191 = v21;
                    uint64_t v134 = *(void *)(v25 + 16);
                    uint64_t v135 = *(void *)(v25 + 24);
                    sub_24A139468();
                    sub_24A139468();
                    sub_24A139468();
                    swift_retain();
                    swift_retain();
                    if (__DataStorage._bytes.getter() && __OFSUB__(v134, __DataStorage._offset.getter())) {
                      goto LABEL_307;
                    }
                    BOOL v35 = __OFSUB__(v135, v134);
                    unint64_t v136 = v135 - v134;
                    if (v35) {
                      goto LABEL_297;
                    }
                    __DataStorage._length.getter();
                    sub_24A1395C8();
                    sub_24A139434();
                    uint64_t v7 = v195;
                    unint64_t v202 = v136;
                    if (!v136)
                    {
                      swift_release();
                      swift_release();
                      char v137 = v204[0];
                      sub_24A1393A0();
                      sub_24A139434();
                      sub_24A139698();
                      sub_24A12340C(v25, v200);
                      sub_24A139434();
                      sub_24A139434();
                      unint64_t v11 = v199;
                      uint64_t v21 = v191;
                      if ((v137 & 1) == 0) {
                        goto LABEL_264;
                      }
                      goto LABEL_183;
                    }
                    sub_24A139434();
                    uint64_t v188 = v98;
                    unint64_t v189 = v97;
                    break;
                  case 3uLL:
                    sub_24A1396E0();
                    sub_24A139468();
                    sub_24A139468();
                    uint64_t v133 = (void *)sub_24A1394E0();
                    goto LABEL_175;
                  default:
                    LOWORD(v204[0]) = v25;
                    BYTE2(v204[0]) = BYTE2(v25);
                    BYTE3(v204[0]) = BYTE3(v25);
                    BYTE4(v204[0]) = BYTE4(v25);
                    sub_24A1397D8(SBYTE6(v25));
                    HIBYTE(v204[0]) = v131;
                    LOBYTE(v204[1]) = v130;
                    sub_24A1397CC(SBYTE1(v130));
                    sub_24A13970C(SBYTE5(v130));
                    sub_24A139468();
                    sub_24A139468();
                    v132 = v203;
                    uint64_t v133 = v204;
LABEL_175:
                    unint64_t v138 = v202;
                    sub_24A137958((uint64_t)v133, v98, v97, v132);
                    unint64_t v202 = v138;
                    if (v138)
                    {
                      sub_24A139434();
                      uint64_t v186 = v98;
                      unint64_t v187 = v97;
                      goto LABEL_337;
                    }
                    sub_24A1393A0();
                    sub_24A139434();
                    sub_24A139698();
                    sub_24A12340C(v25, v130);
                    sub_24A139434();
                    sub_24A139434();
                    unint64_t v11 = v199;
                    if ((v203[0] & 1) == 0) {
                      goto LABEL_264;
                    }
                    goto LABEL_183;
                }
                goto LABEL_331;
              }
LABEL_167:
              sub_24A1393A0();
              sub_24A139434();
              sub_24A139698();
              sub_24A12340C(v25, v200);
LABEL_183:
              if (*(void *)&v11[*(int *)(v21 + 24)] != *(void *)(v7 + *(int *)(v21 + 24))) {
                goto LABEL_264;
              }
              sub_24A1395F8();
              switch(v144)
              {
                case 1:
                  LODWORD(v143) = v142 - v25;
                  if (__OFSUB__(v142, v25)) {
                    goto LABEL_282;
                  }
                  uint64_t v143 = (int)v143;
LABEL_189:
                  switch(v14 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v147) = HIDWORD(v24) - v24;
                      if (__OFSUB__(HIDWORD(v24), v24)) {
                        goto LABEL_284;
                      }
                      uint64_t v147 = (int)v147;
LABEL_198:
                      if (v143 != v147) {
                        goto LABEL_264;
                      }
                      if (v143 >= 1)
                      {
                        switch(v141)
                        {
                          case 1:
                            if ((uint64_t)v25 >> 32 < (int)v25) {
                              goto LABEL_298;
                            }
                            sub_24A1393B8();
                            sub_24A1393B8();
                            sub_24A1393B8();
                            sub_24A1233B4(v25, v21);
                            uint64_t v156 = __DataStorage._bytes.getter();
                            if (!v156) {
                              goto LABEL_214;
                            }
                            uint64_t v157 = __DataStorage._offset.getter();
                            if (__OFSUB__((int)v25, v157)) {
                              goto LABEL_310;
                            }
                            v156 += (int)v25 - v157;
LABEL_214:
                            __DataStorage._length.getter();
                            sub_24A13944C(v156, (BOOL *)v204);
                            sub_24A1393A0();
                            unint64_t v202 = (int)v25;
                            if (v25) {
                              goto LABEL_333;
                            }
                            sub_24A12340C(v25, v21);
                            sub_24A1393A0();
                            char v155 = v204[0];
                            sub_24A1393A0();
                            uint64_t v7 = v195;
LABEL_216:
                            unint64_t v11 = v199;
                            if (v155) {
                              break;
                            }
                            goto LABEL_264;
                          case 2:
                            uint64_t v152 = *(void *)(v25 + 16);
                            uint64_t v153 = *(void *)(v25 + 24);
                            sub_24A1393B8();
                            sub_24A1393B8();
                            sub_24A1393B8();
                            swift_retain();
                            swift_retain();
                            if (__DataStorage._bytes.getter() && __OFSUB__(v152, __DataStorage._offset.getter())) {
                              goto LABEL_309;
                            }
                            BOOL v35 = __OFSUB__(v153, v152);
                            unint64_t v154 = v153 - v152;
                            if (v35) {
                              goto LABEL_299;
                            }
                            __DataStorage._length.getter();
                            sub_24A1393E8();
                            sub_24A1393A0();
                            unint64_t v202 = v154;
                            if (v154) {
                              goto LABEL_330;
                            }
                            swift_release();
                            swift_release();
                            char v155 = v204[0];
                            sub_24A1393A0();
                            sub_24A1393A0();
                            goto LABEL_216;
                          case 3:
                            memset(v204, 0, 14);
                            sub_24A1393B8();
                            sub_24A1393B8();
                            uint64_t v150 = sub_24A1394E0();
                            goto LABEL_208;
                          default:
                            LOWORD(v204[0]) = v25;
                            BYTE2(v204[0]) = BYTE2(v25);
                            BYTE3(v204[0]) = BYTE3(v25);
                            BYTE4(v204[0]) = v142;
                            BYTE5(v204[0]) = BYTE5(v25);
                            BYTE6(v204[0]) = BYTE6(v25);
                            HIBYTE(v204[0]) = HIBYTE(v25);
                            LOWORD(v204[1]) = v21;
                            BYTE2(v204[1]) = BYTE2(v21);
                            BYTE3(v204[1]) = BYTE3(v21);
                            BYTE4(v204[1]) = BYTE4(v21);
                            BYTE5(v204[1]) = BYTE5(v21);
                            sub_24A1393B8();
                            sub_24A1393B8();
                            uint64_t v150 = sub_24A1396EC();
LABEL_208:
                            sub_24A13944C(v150, v151);
                            unint64_t v202 = (unint64_t)v11;
                            unint64_t v11 = v199;
                            sub_24A1393A0();
                            sub_24A1393A0();
                            if ((v203[0] & 1) == 0) {
                              goto LABEL_264;
                            }
                            break;
                        }
                      }
LABEL_217:
                      uint64_t v158 = *(int *)(v201 + 24);
                      unint64_t v24 = *(void *)&v11[v158];
                      unint64_t v25 = *(void *)&v11[v158 + 8];
                      unint64_t v159 = (uint64_t *)(v7 + v158);
                      uint64_t v161 = *v159;
                      unint64_t v160 = v159[1];
                      uint64_t v162 = 0;
                      switch(v25 >> 62)
                      {
                        case 1uLL:
                          LODWORD(v162) = HIDWORD(v24) - v24;
                          if (__OFSUB__(HIDWORD(v24), v24)) {
                            goto LABEL_287;
                          }
                          uint64_t v162 = (int)v162;
LABEL_222:
                          switch(v160 >> 62)
                          {
                            case 1uLL:
                              LODWORD(v165) = HIDWORD(v161) - v161;
                              if (__OFSUB__(HIDWORD(v161), v161)) {
                                goto LABEL_289;
                              }
                              uint64_t v165 = (int)v165;
LABEL_231:
                              if (v162 != v165) {
                                goto LABEL_264;
                              }
                              if (v162 < 1) {
                                goto LABEL_244;
                              }
                              break;
                            case 2uLL:
                              uint64_t v167 = *(void *)(v161 + 16);
                              uint64_t v166 = *(void *)(v161 + 24);
                              BOOL v35 = __OFSUB__(v166, v167);
                              uint64_t v165 = v166 - v167;
                              if (!v35) {
                                goto LABEL_231;
                              }
                              goto LABEL_288;
                            case 3uLL:
                              if (v162) {
                                goto LABEL_264;
                              }
                              goto LABEL_244;
                            default:
                              uint64_t v165 = BYTE6(v160);
                              goto LABEL_231;
                          }
                          break;
                        case 2uLL:
                          uint64_t v164 = *(void *)(v24 + 16);
                          uint64_t v163 = *(void *)(v24 + 24);
                          BOOL v35 = __OFSUB__(v163, v164);
                          uint64_t v162 = v163 - v164;
                          if (!v35) {
                            goto LABEL_222;
                          }
                          goto LABEL_286;
                        case 3uLL:
                          goto LABEL_222;
                        default:
                          uint64_t v162 = BYTE6(v25);
                          goto LABEL_222;
                      }
                      break;
                    case 2uLL:
                      uint64_t v149 = *(void *)(v24 + 16);
                      uint64_t v148 = *(void *)(v24 + 24);
                      BOOL v35 = __OFSUB__(v148, v149);
                      uint64_t v147 = v148 - v149;
                      if (!v35) {
                        goto LABEL_198;
                      }
                      goto LABEL_285;
                    case 3uLL:
                      if (v143) {
                        goto LABEL_264;
                      }
                      goto LABEL_217;
                    default:
                      uint64_t v147 = BYTE6(v14);
                      goto LABEL_198;
                  }
                  break;
                case 2:
                  uint64_t v146 = *(void *)(v25 + 16);
                  uint64_t v145 = *(void *)(v25 + 24);
                  BOOL v35 = __OFSUB__(v145, v146);
                  uint64_t v143 = v145 - v146;
                  if (!v35) {
                    goto LABEL_189;
                  }
                  goto LABEL_283;
                case 3:
                  goto LABEL_189;
                default:
                  uint64_t v143 = BYTE6(v21);
                  goto LABEL_189;
              }
              switch(v25 >> 62)
              {
                case 1uLL:
                  if ((uint64_t)v24 >> 32 < (int)v24) {
                    goto LABEL_300;
                  }
                  sub_24A139520();
                  sub_24A139520();
                  sub_24A139520();
                  sub_24A1233B4(v24, v25);
                  unint64_t v178 = v202;
                  char v179 = sub_24A137B80((int)v24, (uint64_t)v24 >> 32, v25 & 0x3FFFFFFFFFFFFFFFLL, v161, v160);
                  unint64_t v202 = v178;
                  if (v178) {
                    goto LABEL_336;
                  }
                  char v176 = v179;
                  sub_24A12340C(v24, v25);
                  sub_24A139508();
                  sub_24A139508();
                  uint64_t v7 = v195;
                  goto LABEL_243;
                case 2uLL:
                  v25 &= 0x3FFFFFFFFFFFFFFFuLL;
                  uint64_t v172 = *(void *)(v24 + 16);
                  uint64_t v173 = *(void *)(v24 + 24);
                  sub_24A139520();
                  sub_24A139520();
                  sub_24A139520();
                  swift_retain();
                  swift_retain();
                  unint64_t v174 = v202;
                  char v175 = sub_24A137B80(v172, v173, v25, v161, v160);
                  unint64_t v202 = v174;
                  if (v174)
                  {
                    sub_24A139508();
                    sub_24A139508();
                    swift_release();
LABEL_335:
                    swift_release();
                    __break(1u);
LABEL_336:
                    sub_24A139508();
                    sub_24A139508();
                    uint64_t v186 = v24;
                    unint64_t v187 = v25;
LABEL_337:
                    sub_24A12340C(v186, v187);
                    __break(1u);
                    JUMPOUT(0x24A1358F8);
                  }
                  char v176 = v175;
                  swift_release();
                  swift_release();
                  sub_24A139508();
                  sub_24A139508();
LABEL_243:
                  unint64_t v11 = v199;
                  if ((v176 & 1) == 0) {
                    goto LABEL_264;
                  }
LABEL_244:
                  uint64_t v180 = *(int *)(v201 + 28);
                  char v181 = &v11[v180];
                  unint64_t v182 = (void *)(v7 + v180);
                  BOOL v183 = *(void *)&v11[v180] == *(void *)(v7 + v180)
                      && *(void *)&v11[v180 + 8] == *(void *)(v7 + v180 + 8);
                  if (!v183 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_264;
                  }
                  BOOL v184 = *((void *)v181 + 2) == v182[2] && *((void *)v181 + 3) == v182[3];
                  if (!v184 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_264;
                  }
                  BOOL v185 = *((void *)v181 + 4) == v182[4] && *((void *)v181 + 5) == v182[5];
                  if (!v185 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_264;
                  }
                  type metadata accessor for Credential(0);
                  if ((static Date.== infix(_:_:)() & 1) == 0) {
                    goto LABEL_264;
                  }
                  sub_24A139334(v7, (void (*)(void))type metadata accessor for AssetSkeleton);
                  sub_24A139334((uint64_t)v11, (void (*)(void))type metadata accessor for AssetSkeleton);
                  uint64_t v3 = v193;
                  unint64_t v13 = v196 + v192;
                  uint64_t v12 = v197 - 1;
                  uint64_t v1 = v194;
                  if (v197 == 1) {
                    goto LABEL_265;
                  }
                  break;
                case 3uLL:
                  sub_24A1396E0();
                  sub_24A139520();
                  sub_24A139520();
                  uint64_t v171 = (void *)sub_24A1394E0();
                  goto LABEL_238;
                default:
                  LOWORD(v204[0]) = v24;
                  BYTE2(v204[0]) = BYTE2(v24);
                  BYTE3(v204[0]) = BYTE3(v24);
                  BYTE4(v204[0]) = BYTE4(v24);
                  sub_24A1397D8(SBYTE6(v24));
                  HIBYTE(v204[0]) = v168;
                  LOBYTE(v204[1]) = v25;
                  sub_24A1397CC(SBYTE1(v25));
                  BYTE3(v204[1]) = v169;
                  sub_24A1396FC(SBYTE5(v25));
                  sub_24A139520();
                  sub_24A139520();
                  uint64_t v170 = v203;
                  uint64_t v171 = v204;
LABEL_238:
                  unint64_t v177 = v202;
                  sub_24A137958((uint64_t)v171, v161, v160, v170);
                  unint64_t v202 = v177;
                  unint64_t v11 = v199;
                  sub_24A139508();
                  sub_24A139508();
                  if ((v203[0] & 1) == 0) {
                    goto LABEL_264;
                  }
                  goto LABEL_244;
              }
              break;
            case 2uLL:
              uint64_t v129 = *(void *)(v98 + 16);
              uint64_t v128 = *(void *)(v98 + 24);
              BOOL v35 = __OFSUB__(v128, v129);
              uint64_t v127 = v128 - v129;
              if (!v35) {
                goto LABEL_163;
              }
              goto LABEL_281;
            case 3uLL:
              if (v124) {
                goto LABEL_263;
              }
              goto LABEL_167;
            default:
              uint64_t v127 = BYTE6(v97);
              goto LABEL_163;
          }
          continue;
        }
        switch(v93 >> 62)
        {
          case 1uLL:
            uint64_t v191 = v91;
            if (v94 >> 32 < (int)v94) {
              goto LABEL_294;
            }
            unint64_t v190 = (int)v94;
            unint64_t v121 = v93;
            sub_24A1233B4(v24, v14);
            sub_24A1393B8();
            sub_24A1393B8();
            sub_24A1233B4(v94, v121);
            sub_24A1233B4(v25, v200);
            sub_24A1393B8();
            sub_24A139468();
            sub_24A1233B4(v94, v121);
            if (__DataStorage._bytes.getter())
            {
              uint64_t v122 = __DataStorage._offset.getter();
              unint64_t v123 = v190;
              if (__OFSUB__(v190, v122))
              {
LABEL_306:
                __break(1u);
LABEL_307:
                __break(1u);
LABEL_308:
                __break(1u);
LABEL_309:
                __break(1u);
LABEL_310:
                __break(1u);
LABEL_311:
                __break(1u);
LABEL_312:
                __break(1u);
LABEL_313:
                __break(1u);
LABEL_314:
                __break(1u);
LABEL_315:
                __break(1u);
LABEL_316:
                __break(1u);
LABEL_317:
                __break(1u);
LABEL_318:
                __break(1u);
              }
            }
            else
            {
              unint64_t v123 = v190;
            }
            __DataStorage._length.getter();
            sub_24A1393E8();
            sub_24A1393A0();
            unint64_t v202 = v123;
            if (v123)
            {
              sub_24A1393A0();
              sub_24A1393A0();
              uint64_t v186 = v94;
              unint64_t v187 = v198;
              goto LABEL_337;
            }
            sub_24A139698();
            sub_24A1393A0();
            char v120 = v204[0];
            sub_24A1393A0();
            uint64_t v7 = v195;
            goto LABEL_148;
          case 2uLL:
            uint64_t v117 = *(void *)(v94 + 16);
            unint64_t v190 = *(void *)(v94 + 24);
            uint64_t v191 = v91;
            unint64_t v118 = v93;
            sub_24A1233B4(v24, v14);
            sub_24A1393B8();
            sub_24A1393B8();
            sub_24A1233B4(v94, v118);
            sub_24A1233B4(v25, v95);
            sub_24A1393B8();
            sub_24A139468();
            swift_retain();
            swift_retain();
            if (__DataStorage._bytes.getter() && __OFSUB__(v117, __DataStorage._offset.getter())) {
              goto LABEL_305;
            }
            unint64_t v119 = v190 - v117;
            if (__OFSUB__(v190, v117)) {
              goto LABEL_295;
            }
            __DataStorage._length.getter();
            sub_24A1393E8();
            sub_24A1393A0();
            uint64_t v7 = v195;
            unint64_t v202 = v119;
            if (v119)
            {
              sub_24A1393A0();
              sub_24A1393A0();
LABEL_332:
              swift_release();
              goto LABEL_335;
            }
            swift_release();
            swift_release();
            char v120 = v204[0];
            sub_24A1393A0();
            sub_24A1393A0();
LABEL_148:
            unint64_t v11 = v199;
            uint64_t v21 = v191;
            if (v120) {
              goto LABEL_149;
            }
LABEL_263:
            sub_24A1393A0();
            sub_24A139434();
            sub_24A139698();
            sub_24A12340C(v25, v200);
LABEL_264:
            sub_24A139334(v7, (void (*)(void))type metadata accessor for AssetSkeleton);
            sub_24A139334((uint64_t)v11, (void (*)(void))type metadata accessor for AssetSkeleton);
LABEL_265:
            sub_24A139538();
            return;
          case 3uLL:
            memset(v204, 0, 14);
            unint64_t v110 = v93;
            sub_24A1233B4(v24, v14);
            sub_24A1393B8();
            sub_24A1233B4(v94, v110);
            sub_24A1233B4(v25, v95);
            sub_24A1393B8();
            sub_24A139468();
            uint64_t v116 = (void *)sub_24A1394E0();
            goto LABEL_139;
          default:
            LOWORD(v204[0]) = v94;
            BYTE2(v204[0]) = BYTE2(v94);
            BYTE3(v204[0]) = BYTE3(v94);
            BYTE4(v204[0]) = BYTE4(v94);
            sub_24A1397D8(SBYTE6(v94));
            HIBYTE(v204[0]) = v105;
            LOBYTE(v204[1]) = v106;
            sub_24A1397CC(v107);
            BYTE3(v204[1]) = v108;
            sub_24A1396FC(v109);
            unint64_t v110 = v95;
            uint64_t v191 = v112 + v111;
            unint64_t v114 = v113;
            sub_24A1233B4(v24, v14);
            sub_24A1393B8();
            sub_24A1233B4(v94, v114);
            sub_24A1233B4(v25, v110);
            sub_24A1393B8();
            sub_24A139468();
            uint64_t v115 = v203;
            uint64_t v116 = v204;
LABEL_139:
            sub_24A13944C((uint64_t)v116, v115);
            unint64_t v202 = v110;
            unint64_t v11 = v199;
            sub_24A1393A0();
            sub_24A1393A0();
            if ((v203[0] & 1) == 0) {
              goto LABEL_263;
            }
            goto LABEL_149;
        }
      case 2uLL:
        uint64_t v104 = *(void *)(v24 + 16);
        uint64_t v103 = *(void *)(v24 + 24);
        BOOL v35 = __OFSUB__(v103, v104);
        uint64_t v102 = v103 - v104;
        if (!v35) {
          goto LABEL_128;
        }
        goto LABEL_276;
      case 3uLL:
        if (v99) {
          goto LABEL_264;
        }
        goto LABEL_132;
      default:
        uint64_t v102 = BYTE6(v14);
        goto LABEL_128;
    }
  }
}

void sub_24A135A18()
{
  sub_24A139550();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v150 = *MEMORY[0x263EF8340];
  uint64_t v129 = (int *)type metadata accessor for AssetUploadRequest();
  sub_24A139418();
  MEMORY[0x270FA5388](v4);
  sub_24A13961C();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v115 - v10;
  uint64_t v12 = *(void *)(v3 + 16);
  if (v12 != *(void *)(v1 + 16) || !v12 || v3 == v1) {
    goto LABEL_125;
  }
  uint64_t v120 = v3;
  uint64_t v121 = 0;
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 72);
  uint64_t v118 = v1;
  uint64_t v119 = v14;
  while (2)
  {
    sub_24A1392CC(v3 + v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AssetUploadRequest);
    sub_24A1392CC(v1 + v13, v7, (uint64_t (*)(void))type metadata accessor for AssetUploadRequest);
    if ((static UUID.== infix(_:_:)() & 1) == 0) {
      goto LABEL_124;
    }
    uint64_t v15 = v129[5];
    uint64_t v16 = *(void *)&v11[v15];
    uint64_t v17 = *(void *)&v11[v15 + 8];
    uint64_t v18 = (void *)(v7 + v15);
    BOOL v19 = v16 == *v18 && v17 == v18[1];
    if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (MEMORY[0x24C5BCC70](&v11[v129[6]], v7 + v129[6]) & 1) == 0
      || (MEMORY[0x24C5BCC70](&v11[v129[7]], v7 + v129[7]) & 1) == 0
      || (MEMORY[0x24C5BCC70](&v11[v129[8]], v7 + v129[8]) & 1) == 0)
    {
      goto LABEL_124;
    }
    uint64_t v20 = v129[9];
    uint64_t v21 = *(void *)&v11[v20];
    unint64_t v22 = *(void *)&v11[v20 + 8];
    uint64_t v23 = *(void *)&v11[v20 + 16];
    unint64_t v24 = *(void *)&v11[v20 + 24];
    unint64_t v25 = (uint64_t *)(v7 + v20);
    uint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    uint64_t v29 = v25[2];
    unint64_t v28 = v25[3];
    uint64_t v127 = v23;
    unint64_t v128 = v28;
    uint64_t v30 = 0;
    switch(v22 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v21), v21))
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
        }
        uint64_t v30 = HIDWORD(v21) - (int)v21;
        break;
      case 2uLL:
        uint64_t v32 = *(void *)(v21 + 16);
        uint64_t v31 = *(void *)(v21 + 24);
        BOOL v33 = __OFSUB__(v31, v32);
        uint64_t v30 = v31 - v32;
        if (!v33) {
          break;
        }
        goto LABEL_127;
      case 3uLL:
        break;
      default:
        uint64_t v30 = BYTE6(v22);
        break;
    }
    unint64_t v125 = v24;
    uint64_t v126 = v29;
    unint64_t v122 = v13;
    unint64_t v123 = v22;
    uint64_t v124 = v21;
    switch(v26 >> 62)
    {
      case 1uLL:
        LODWORD(v34) = HIDWORD(v27) - v27;
        if (__OFSUB__(HIDWORD(v27), v27)) {
          goto LABEL_129;
        }
        uint64_t v34 = (int)v34;
LABEL_28:
        if (v30 != v34) {
          goto LABEL_124;
        }
        if (v30 < 1)
        {
LABEL_33:
          sub_24A1233B4(v21, v22);
          sub_24A13973C();
          sub_24A139480();
          sub_24A139724();
          unint64_t v44 = v125;
          goto LABEL_58;
        }
        break;
      case 2uLL:
        uint64_t v36 = *(void *)(v27 + 16);
        uint64_t v35 = *(void *)(v27 + 24);
        BOOL v33 = __OFSUB__(v35, v36);
        uint64_t v34 = v35 - v36;
        if (!v33) {
          goto LABEL_28;
        }
        goto LABEL_128;
      case 3uLL:
        if (v30) {
          goto LABEL_124;
        }
        goto LABEL_33;
      default:
        uint64_t v34 = BYTE6(v26);
        goto LABEL_28;
    }
    switch(v22 >> 62)
    {
      case 1uLL:
        if (v21 >> 32 < (int)v21) {
          goto LABEL_134;
        }
        uint64_t v63 = (int)v21;
        uint64_t v64 = v21;
        unint64_t v65 = v22;
        sub_24A1233B4(v27, v26);
        sub_24A139480();
        sub_24A139480();
        sub_24A1233B4(v64, v65);
        sub_24A13973C();
        sub_24A139480();
        sub_24A139724();
        sub_24A1233B4(v64, v65);
        if (__DataStorage._bytes.getter() && __OFSUB__(v63, __DataStorage._offset.getter())) {
          goto LABEL_139;
        }
        __DataStorage._length.getter();
        sub_24A139598();
        sub_24A1393D0();
        uint64_t v121 = v63;
        if (v63)
        {
          sub_24A1393D0();
          sub_24A1393D0();
          unint64_t v114 = v123;
          uint64_t v113 = v124;
          goto LABEL_156;
        }
        sub_24A12340C(v124, v123);
        sub_24A1393D0();
        char v52 = v142;
        sub_24A1393D0();
        uint64_t v1 = v118;
LABEL_57:
        uint64_t v3 = v120;
        unint64_t v44 = v125;
        if ((v52 & 1) == 0) {
          goto LABEL_123;
        }
        goto LABEL_58;
      case 2uLL:
        uint64_t v45 = v22 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v46 = *(void *)(v21 + 16);
        uint64_t v117 = *(void *)(v21 + 24);
        uint64_t v47 = v21;
        unint64_t v48 = v22;
        sub_24A1233B4(v27, v26);
        sub_24A139480();
        sub_24A139480();
        sub_24A1233B4(v47, v48);
        sub_24A1233B4(v127, v24);
        sub_24A139480();
        sub_24A139724();
        swift_retain();
        swift_retain();
        uint64_t v49 = (char *)__DataStorage._bytes.getter();
        if (!v49) {
          goto LABEL_37;
        }
        uint64_t v50 = __DataStorage._offset.getter();
        if (__OFSUB__(v46, v50)) {
          goto LABEL_138;
        }
        v49 += v46 - v50;
LABEL_37:
        BOOL v33 = __OFSUB__(v117, v46);
        uint64_t v51 = v117 - v46;
        if (v33) {
          goto LABEL_135;
        }
        __DataStorage._length.getter();
        sub_24A139598();
        sub_24A1393D0();
        uint64_t v1 = v118;
        uint64_t v121 = v51;
        if (v51) {
          goto LABEL_148;
        }
        swift_release();
        swift_release();
        char v52 = v142;
        sub_24A1393D0();
        sub_24A1393D0();
        goto LABEL_57;
      case 3uLL:
        sub_24A1396E0();
        if (!v55)
        {
          __int16 v130 = v27;
          char v131 = BYTE2(v27);
          char v132 = BYTE3(v27);
          char v133 = v56;
          char v134 = BYTE5(v27);
          char v135 = BYTE6(v27);
          char v136 = HIBYTE(v27);
          __int16 v137 = v26;
          char v138 = BYTE2(v26);
          char v139 = BYTE3(v26);
          char v140 = BYTE4(v26);
          char v141 = BYTE5(v26);
          sub_24A1233B4(v53, v54);
          sub_24A13973C();
          sub_24A139480();
          sub_24A139724();
          int v103 = memcmp(&v142, &v130, BYTE6(v26));
          unint64_t v44 = v125;
          if (v103) {
            goto LABEL_123;
          }
          goto LABEL_58;
        }
        unint64_t v57 = v128;
        if (v55 == 1)
        {
          uint64_t v58 = v27 >> 32;
          if (v27 >> 32 < (int)v27) {
            goto LABEL_142;
          }
          uint64_t v45 = v26 & 0x3FFFFFFFFFFFFFFFLL;
          sub_24A139480();
          sub_24A139480();
          sub_24A1233B4(v124, v123);
          sub_24A13973C();
          sub_24A139480();
          sub_24A1233B4(v126, v57);
          uint64_t v49 = (char *)__DataStorage._bytes.getter();
          if (v49)
          {
            uint64_t v59 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v27, v59)) {
              goto LABEL_145;
            }
            v49 += (int)v27 - v59;
          }
          uint64_t v60 = __DataStorage._length.getter();
          if (v49)
          {
            if (v60 >= v58 - (int)v27) {
              size_t v61 = v58 - (int)v27;
            }
            else {
              size_t v61 = v60;
            }
            int v62 = memcmp(&v142, v49, v61);
            sub_24A1393D0();
            sub_24A1393D0();
            uint64_t v1 = v118;
            uint64_t v3 = v120;
            unint64_t v44 = v125;
            if (v62) {
              goto LABEL_123;
            }
            goto LABEL_58;
          }
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          sub_24A1393D0();
          sub_24A1393D0();
LABEL_152:
          swift_release();
          swift_release();
          __break(1u);
LABEL_153:
          sub_24A1397E4();
          uint64_t v113 = v45;
LABEL_154:
          unint64_t v114 = (unint64_t)v49;
LABEL_156:
          sub_24A12340C(v113, v114);
          __break(1u);
          JUMPOUT(0x24A136758);
        }
        uint64_t v45 = v26 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v104 = *(void *)(v27 + 16);
        uint64_t v116 = *(void *)(v27 + 24);
        uint64_t v117 = v104;
        uint64_t v105 = v53;
        unint64_t v106 = v54;
        sub_24A1233B4(v27, v26);
        sub_24A139480();
        sub_24A1233B4(v105, v106);
        sub_24A1233B4(v127, v24);
        sub_24A139480();
        sub_24A1233B4(v126, v57);
        swift_retain();
        swift_retain();
        uint64_t v49 = (char *)__DataStorage._bytes.getter();
        if (v49)
        {
          uint64_t v107 = __DataStorage._offset.getter();
          uint64_t v108 = v117;
          if (__OFSUB__(v117, v107)) {
            goto LABEL_144;
          }
          v49 += v117 - v107;
        }
        else
        {
          uint64_t v108 = v117;
        }
        int64_t v109 = v116 - v108;
        if (__OFSUB__(v116, v108)) {
          goto LABEL_143;
        }
        uint64_t v110 = __DataStorage._length.getter();
        uint64_t v1 = v118;
        if (!v49) {
          goto LABEL_147;
        }
        if (v110 >= v109) {
          size_t v111 = v109;
        }
        else {
          size_t v111 = v110;
        }
        int v112 = memcmp(&v142, v49, v111);
        swift_release();
        swift_release();
        sub_24A1393D0();
        sub_24A1393D0();
        uint64_t v3 = v120;
        unint64_t v44 = v125;
        if (!v112)
        {
LABEL_58:
          uint64_t v66 = 0;
          switch(v44 >> 62)
          {
            case 1uLL:
              LODWORD(v66) = HIDWORD(v127) - v127;
              if (__OFSUB__(HIDWORD(v127), v127)) {
                goto LABEL_130;
              }
              uint64_t v66 = (int)v66;
              break;
            case 2uLL:
              uint64_t v68 = *(void *)(v127 + 16);
              uint64_t v67 = *(void *)(v127 + 24);
              BOOL v33 = __OFSUB__(v67, v68);
              uint64_t v66 = v67 - v68;
              if (!v33) {
                break;
              }
              goto LABEL_131;
            case 3uLL:
              break;
            default:
              uint64_t v66 = BYTE6(v44);
              break;
          }
          switch(v128 >> 62)
          {
            case 1uLL:
              LODWORD(v69) = HIDWORD(v126) - v126;
              if (__OFSUB__(HIDWORD(v126), v126)) {
                goto LABEL_133;
              }
              uint64_t v69 = (int)v69;
LABEL_72:
              if (v66 != v69) {
                goto LABEL_123;
              }
              if (v66 < 1)
              {
LABEL_78:
                sub_24A1393D0();
                sub_24A12340C(v126, v128);
                sub_24A12340C(v124, v123);
                sub_24A12340C(v127, v44);
                unint64_t v77 = v122;
                goto LABEL_93;
              }
              break;
            case 2uLL:
              uint64_t v71 = *(void *)(v126 + 16);
              uint64_t v70 = *(void *)(v126 + 24);
              BOOL v33 = __OFSUB__(v70, v71);
              uint64_t v69 = v70 - v71;
              if (!v33) {
                goto LABEL_72;
              }
              goto LABEL_132;
            case 3uLL:
              if (v66) {
                goto LABEL_123;
              }
              goto LABEL_78;
            default:
              uint64_t v69 = BYTE6(v128);
              goto LABEL_72;
          }
          uint64_t v49 = (char *)v128;
          switch(v44 >> 62)
          {
            case 1uLL:
              uint64_t v117 = v12;
              uint64_t v90 = v127;
              if (v90 >> 32 < (int)v90) {
                goto LABEL_136;
              }
              uint64_t v116 = (int)v127;
              sub_24A1233B4(v126, v128);
              sub_24A139668();
              sub_24A139668();
              sub_24A1233B4(v90, v44);
              if (__DataStorage._bytes.getter() && __OFSUB__(v116, __DataStorage._offset.getter())) {
                goto LABEL_141;
              }
              __DataStorage._length.getter();
              uint64_t v91 = sub_24A13962C();
              uint64_t v92 = v121;
              sub_24A137958(v91, v93, v128, v94);
              sub_24A139680();
              uint64_t v121 = v92;
              if (v92)
              {
                sub_24A139680();
                sub_24A139680();
                uint64_t v113 = v127;
                unint64_t v114 = v125;
                goto LABEL_156;
              }
              uint64_t v95 = v127;
              unint64_t v96 = v125;
              sub_24A12340C(v127, v125);
              sub_24A1393D0();
              sub_24A139680();
              char v85 = v142;
              sub_24A12340C(v124, v123);
              sub_24A12340C(v95, v96);
              sub_24A139680();
              sub_24A139680();
              uint64_t v1 = v118;
LABEL_92:
              uint64_t v3 = v120;
              unint64_t v77 = v122;
              uint64_t v12 = v117;
              if ((v85 & 1) == 0) {
                goto LABEL_124;
              }
LABEL_93:
              uint64_t v97 = v129[10];
              uint64_t v98 = &v11[v97];
              uint64_t v99 = (void *)(v7 + v97);
              BOOL v100 = *(void *)&v11[v97] == *(void *)(v7 + v97)
                  && *(void *)&v11[v97 + 8] == *(void *)(v7 + v97 + 8);
              if (!v100 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_124;
              }
              BOOL v101 = *((void *)v98 + 2) == v99[2] && *((void *)v98 + 3) == v99[3];
              if (!v101 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_124;
              }
              BOOL v102 = *((void *)v98 + 4) == v99[4] && *((void *)v98 + 5) == v99[5];
              if (!v102 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_124;
              }
              type metadata accessor for Credential(0);
              if ((static Date.== infix(_:_:)() & 1) == 0) {
                goto LABEL_124;
              }
              sub_24A139334(v7, (void (*)(void))type metadata accessor for AssetUploadRequest);
              sub_24A139334((uint64_t)v11, (void (*)(void))type metadata accessor for AssetUploadRequest);
              unint64_t v13 = v77 + v119;
              if (!--v12) {
                goto LABEL_125;
              }
              break;
            case 2uLL:
              uint64_t v117 = v12;
              uint64_t v45 = v44 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v78 = *(void *)(v127 + 16);
              uint64_t v79 = *(void *)(v127 + 24);
              sub_24A1233B4(v126, v128);
              sub_24A139668();
              sub_24A139668();
              swift_retain();
              swift_retain();
              if (__DataStorage._bytes.getter() && __OFSUB__(v78, __DataStorage._offset.getter())) {
                goto LABEL_140;
              }
              if (__OFSUB__(v79, v78)) {
                goto LABEL_137;
              }
              __DataStorage._length.getter();
              uint64_t v80 = sub_24A13962C();
              uint64_t v49 = (char *)v128;
              uint64_t v81 = v121;
              sub_24A137958(v80, v82, v128, v83);
              sub_24A1394C8();
              uint64_t v1 = v118;
              uint64_t v121 = v81;
              if (!v81)
              {
                swift_release();
                uint64_t v84 = v127;
                swift_release();
                char v85 = v142;
                sub_24A1393D0();
                sub_24A1394C8();
                sub_24A12340C(v124, v123);
                sub_24A12340C(v84, v125);
                sub_24A1394C8();
                sub_24A1394C8();
                goto LABEL_92;
              }
              sub_24A1394C8();
              sub_24A1394C8();
              goto LABEL_152;
            case 3uLL:
              sub_24A1396E0();
              uint64_t v45 = v86;
              sub_24A1233B4(v86, (unint64_t)v49);
              sub_24A1233B4(v45, (unint64_t)v49);
              uint64_t v87 = sub_24A1394E0();
              uint64_t v88 = v121;
              sub_24A137958(v87, v45, (unint64_t)v49, v89);
              uint64_t v121 = v88;
              if (v88) {
                goto LABEL_153;
              }
              sub_24A1393D0();
              sub_24A1397E4();
              sub_24A12340C(v124, v123);
              sub_24A12340C(v127, v125);
              sub_24A1397E4();
              sub_24A1397E4();
              uint64_t v3 = v120;
              unint64_t v77 = v122;
              if ((v130 & 1) == 0) {
                goto LABEL_124;
              }
              goto LABEL_93;
            default:
              uint64_t v117 = v12;
              uint64_t v72 = v127;
              int v142 = v127;
              char v143 = BYTE4(v127);
              sub_24A1397D8(SBYTE6(v127));
              char v146 = v73;
              LOBYTE(v147) = v44;
              sub_24A1397CC(SBYTE1(v44));
              sub_24A13970C(SBYTE5(v44));
              uint64_t v75 = v74;
              sub_24A1233B4(v74, (unint64_t)v49);
              sub_24A139668();
              uint64_t v76 = v121;
              sub_24A137958((uint64_t)&v142, v75, (unint64_t)v49, (BOOL *)&v130);
              uint64_t v121 = v76;
              if (!v76)
              {
                sub_24A1393D0();
                sub_24A1394C8();
                sub_24A12340C(v124, v123);
                sub_24A12340C(v72, v44);
                sub_24A1394C8();
                sub_24A1394C8();
                uint64_t v3 = v120;
                unint64_t v77 = v122;
                uint64_t v12 = v117;
                if ((v130 & 1) == 0) {
                  goto LABEL_124;
                }
                goto LABEL_93;
              }
              sub_24A1394C8();
              uint64_t v113 = v75;
              goto LABEL_154;
          }
          continue;
        }
LABEL_123:
        sub_24A1393D0();
        sub_24A12340C(v126, v128);
        sub_24A12340C(v124, v123);
        sub_24A12340C(v127, v44);
LABEL_124:
        sub_24A139334(v7, (void (*)(void))type metadata accessor for AssetUploadRequest);
        sub_24A139334((uint64_t)v11, (void (*)(void))type metadata accessor for AssetUploadRequest);
LABEL_125:
        sub_24A139538();
        return;
      default:
        LOWORD(v142) = v21;
        BYTE2(v142) = BYTE2(v21);
        HIBYTE(v142) = BYTE3(v21);
        char v143 = BYTE4(v21);
        char v144 = BYTE5(v21);
        char v145 = BYTE6(v21);
        char v146 = HIBYTE(v21);
        __int16 v147 = v22;
        char v148 = BYTE2(v22);
        char v149 = BYTE3(v22);
        sub_24A1396FC(SBYTE5(v22));
        uint64_t v38 = v37;
        unint64_t v40 = v39;
        sub_24A1233B4(v27, v26);
        sub_24A139480();
        sub_24A1233B4(v38, v40);
        sub_24A13973C();
        sub_24A139480();
        sub_24A139724();
        uint64_t v41 = sub_24A1396EC();
        uint64_t v42 = v121;
        sub_24A137958(v41, v27, v26, v43);
        uint64_t v121 = v42;
        uint64_t v3 = v120;
        sub_24A1393D0();
        sub_24A1393D0();
        unint64_t v44 = v125;
        if ((v130 & 1) == 0) {
          goto LABEL_123;
        }
        goto LABEL_58;
    }
  }
}

void sub_24A1367B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_24A139550();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for CloudAssets_Asset(0) - 8;
  MEMORY[0x270FA5388](v26);
  sub_24A13961C();
  uint64_t v29 = v27 - v28;
  MEMORY[0x270FA5388](v30);
  BOOL v33 = (char *)&a9 - v32;
  uint64_t v34 = *(void *)(v25 + 16);
  if (v34 == *(void *)(v23 + 16) && v34 && v25 != v23)
  {
    unint64_t v35 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    uint64_t v36 = *(void *)(v31 + 72);
    uint64_t v37 = v34 - 1;
    do
    {
      sub_24A1392CC(v25 + v35, (uint64_t)v33, type metadata accessor for CloudAssets_Asset);
      sub_24A1392CC(v23 + v35, v29, type metadata accessor for CloudAssets_Asset);
      sub_24A16C7E4();
      char v39 = v38;
      sub_24A139334(v29, (void (*)(void))type metadata accessor for CloudAssets_Asset);
      sub_24A139334((uint64_t)v33, (void (*)(void))type metadata accessor for CloudAssets_Asset);
      BOOL v41 = v37-- != 0;
      if ((v39 & 1) == 0) {
        break;
      }
      v35 += v36;
    }
    while (v41);
  }
  sub_24A139538();
}

void sub_24A13692C()
{
  sub_24A139550();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for CloudAssets_Signal.Event(0);
  sub_24A139418();
  MEMORY[0x270FA5388](v4);
  sub_24A13961C();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *(void *)(v3 + 16);
  if (v12 == *(void *)(v1 + 16) && v12 && v3 != v1)
  {
    unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v17 = *(void *)(v9 + 72);
    while (1)
    {
      sub_24A1392CC(v3 + v13, (uint64_t)v11, type metadata accessor for CloudAssets_Signal.Event);
      sub_24A1392CC(v1 + v13, v7, type metadata accessor for CloudAssets_Signal.Event);
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = *(void *)v7;
      if (v11[8]) {
        uint64_t v14 = *(void *)v11 != 0;
      }
      if (*(unsigned char *)(v7 + 8) == 1)
      {
        if (v15)
        {
          if (v14 != 1) {
            break;
          }
        }
        else if (v14)
        {
          break;
        }
      }
      else if (v14 != v15)
      {
        break;
      }
      if (*((void *)v11 + 2) != *(void *)(v7 + 16)) {
        break;
      }
      type metadata accessor for UnknownStorage();
      sub_24A139284(&qword_26976B068, MEMORY[0x263F50560]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      sub_24A139334(v7, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
      sub_24A139334((uint64_t)v11, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
      v13 += v17;
      if (!--v12) {
        goto LABEL_19;
      }
    }
    sub_24A139334(v7, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
    sub_24A139334((uint64_t)v11, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
  }
LABEL_19:
  sub_24A139538();
}

void sub_24A136B68()
{
}

uint64_t sub_24A136B90()
{
  return 0x7374736575716572;
}

uint64_t sub_24A136BA8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7165526863746162 && a2 == 0xED00007374736575;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65526D6165727473 && a2 == 0xEE00737473657571)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A136CE0(char a1)
{
  if (a1) {
    return 0x65526D6165727473;
  }
  else {
    return 0x7165526863746162;
  }
}

uint64_t sub_24A136D30(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7374736575716572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_24A136DBC()
{
  return sub_24A129470();
}

uint64_t sub_24A136DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A136D30(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A136E08()
{
  return sub_24A122920();
}

uint64_t sub_24A136E24@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A124D58();
  *a1 = result & 1;
  return result;
}

uint64_t sub_24A136E50(uint64_t a1)
{
  unint64_t v2 = sub_24A13849C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A136E8C(uint64_t a1)
{
  unint64_t v2 = sub_24A13849C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A136EC8()
{
  return sub_24A136CE0(*v0);
}

uint64_t sub_24A136ED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A136BA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A136EF8(uint64_t a1)
{
  unint64_t v2 = sub_24A138404();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A136F34(uint64_t a1)
{
  unint64_t v2 = sub_24A138404();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A136F70(uint64_t a1)
{
  unint64_t v2 = sub_24A138450();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A136FAC(uint64_t a1)
{
  unint64_t v2 = sub_24A138450();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t DownloadRequestMessage.encode(to:)(void *a1)
{
  sub_24A123464(&qword_26976AFB0);
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A129204();
  sub_24A123464(&qword_26976AFB8);
  sub_24A12477C();
  MEMORY[0x270FA5388](v5);
  sub_24A129204();
  sub_24A123464(&qword_26976AFC0);
  sub_24A12477C();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_24A1396B0();
  char v9 = *(unsigned char *)(v1 + 8);
  uint64_t v10 = a1[3];
  sub_24A1234A8(a1, v10);
  sub_24A138404();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v9) {
    sub_24A138450();
  }
  else {
    sub_24A13849C();
  }
  sub_24A1397AC();
  sub_24A123464(&qword_26976AFD8);
  sub_24A138ABC(&qword_26976AFE0, &qword_26976AF08);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  sub_24A1247EC();
  v11();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v2, v10);
}

Swift::Int DownloadRequestMessage.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  sub_24A137EBC((uint64_t)v4, v1);
  return Hasher._finalize()();
}

uint64_t DownloadRequestMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A123464(&qword_26976AFF0);
  sub_24A12477C();
  MEMORY[0x270FA5388](v3);
  sub_24A1396B0();
  sub_24A123464(&qword_26976AFF8);
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A129204();
  uint64_t v5 = sub_24A123464(&qword_26976B000);
  sub_24A12477C();
  uint64_t v34 = v6;
  MEMORY[0x270FA5388](v7);
  sub_24A129204();
  uint64_t v10 = v9 - v8;
  sub_24A1234A8(a1, a1[3]);
  sub_24A138404();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v35) {
    goto LABEL_10;
  }
  uint64_t v11 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    uint64_t v13 = v5;
    uint64_t v20 = v34;
LABEL_8:
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    sub_24A123464(&qword_26976B008);
    *uint64_t v23 = &type metadata for DownloadRequestMessage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v10, v13);
LABEL_10:
    uint64_t v24 = (uint64_t)a1;
    return sub_24A123580(v24);
  }
  uint64_t v13 = v5;
  char v14 = *(unsigned char *)(v11 + 32);
  sub_24A139208(1, v12, v11, v11 + 32, 0, (2 * v12) | 1);
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v16 != v18 >> 1)
  {
    uint64_t v20 = v34;
    goto LABEL_8;
  }
  char v19 = v14;
  if (v14)
  {
    LOBYTE(v36) = 1;
    sub_24A138450();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A123464(&qword_26976AFD8);
    sub_24A138ABC(&qword_26976B010, &qword_26976AF00);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A1247EC();
    v26();
    swift_unknownObjectRelease();
    uint64_t v27 = sub_24A139498();
    v28(v27);
    uint64_t v29 = v36;
    char v19 = v14;
  }
  else
  {
    LOBYTE(v36) = 0;
    sub_24A13849C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A123464(&qword_26976AFD8);
    sub_24A138ABC(&qword_26976B010, &qword_26976AF00);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A1247EC();
    v30();
    swift_unknownObjectRelease();
    uint64_t v31 = sub_24A139498();
    v32(v31);
    uint64_t v29 = v36;
  }
  *(void *)a2 = v29;
  *(unsigned char *)(a2 + 8) = v19;
  uint64_t v24 = (uint64_t)a1;
  return sub_24A123580(v24);
}

Swift::Int sub_24A13789C()
{
  uint64_t v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  sub_24A137EBC((uint64_t)v4, v1);
  return Hasher._finalize()();
}

uint64_t sub_24A1378F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DownloadRequestMessage.init(from:)(a1, a2);
}

uint64_t sub_24A137910(void *a1)
{
  return DownloadRequestMessage.encode(to:)(a1);
}

BOOL sub_24A13792C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4 = a1 != 0;
  if ((a2 & 1) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = a3 != 0;
  if ((a4 & 1) == 0) {
    uint64_t v5 = a3;
  }
  return v4 == v5;
}

uint64_t sub_24A137958@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, BOOL *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = v4;
  uint64_t v7 = a3;
  uint64_t v9 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain();
      char v14 = sub_24A137C4C((int)a2, a2 >> 32, v7 & 0x3FFFFFFFFFFFFFFFLL, v9);
      if (v6) {
        goto LABEL_16;
      }
      BOOL v10 = v14;
      __s1 = sub_24A12340C(a2, v7);
      break;
    case 2uLL:
      uint64_t v7 = a3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      char v13 = sub_24A137C4C(v11, v12, v7, v9);
      if (v6) {
        goto LABEL_15;
      }
      BOOL v10 = v13;
      swift_release();
      __s1 = swift_release();
      break;
    case 3uLL:
      if (!__s1) {
        goto LABEL_14;
      }
      BOOL v10 = 1;
      break;
    default:
      uint64_t __s2 = a2;
      __int16 v16 = a3;
      char v17 = BYTE2(a3);
      char v18 = BYTE3(a3);
      char v19 = BYTE4(a3);
      char v20 = BYTE5(a3);
      if (!__s1)
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        swift_release();
        swift_release();
        __break(1u);
LABEL_16:
        sub_24A12340C(a2, v7);
        __break(1u);
        JUMPOUT(0x24A137B70);
      }
      __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
      BOOL v10 = __s1 == 0;
      break;
  }
  *a4 = v10;
  return __s1;
}

uint64_t sub_24A137B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_24A137958(v11, a4, a5, &v13);
  sub_24A12340C(a4, a5);
  if (!v5) {
    return v13;
  }
  return v12;
}

uint64_t sub_24A137C4C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  return memcmp(a4, v8, v11) == 0;
}

BOOL sub_24A137CEC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v11 = a2;
  char v12 = BYTE2(a2);
  char v13 = BYTE3(a2);
  char v14 = BYTE4(a2);
  char v15 = BYTE5(a2);
  sub_24A137958((uint64_t)&__s1, a3, a4, &v9);
  sub_24A12340C(a3, a4);
  if (!v4) {
    return v9;
  }
  return v7;
}

void sub_24A137DF0(uint64_t a1, uint64_t a2)
{
  sub_24A1397FC(a1, a2);
  if (v2)
  {
    uint64_t v4 = (unsigned char *)(v3 + 40);
    do
    {
      if (*v4)
      {
        Hasher._combine(_:)(1uLL);
      }
      else
      {
        Swift::UInt64 v5 = *((void *)v4 - 1);
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v5);
      }
      v4 += 16;
      --v2;
    }
    while (v2);
  }
}

void sub_24A137E54(uint64_t a1, uint64_t a2)
{
  sub_24A1397FC(a1, a2);
  if (v2)
  {
    uint64_t v4 = v3 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v2;
    }
    while (v2);
  }
}

void sub_24A137EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v4 = *((void *)v3 - 1);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v7 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    uint64_t v8 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v35 = *(void *)(v4 + 72);
    uint64_t v36 = v3;
    do
    {
      uint64_t v37 = v8;
      Swift::UInt v38 = v7;
      sub_24A1392CC(v8, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AssetDownloadRequest);
      type metadata accessor for UUID();
      sub_24A139284(&qword_26976AC40, MEMORY[0x263F07508]);
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      type metadata accessor for URL();
      sub_24A139284(&qword_26976AC48, MEMORY[0x263F06EA8]);
      dispatch thunk of Hashable.hash(into:)();
      BOOL v9 = &v6[v3[7]];
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v10 = type metadata accessor for Asset.ID(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      __int16 v11 = (uint64_t *)&v9[*(int *)(v10 + 24)];
      uint64_t v12 = *v11;
      unint64_t v13 = v11[1];
      sub_24A1233B4(*v11, v13);
      Data.hash(into:)();
      sub_24A12340C(v12, v13);
      char v14 = (uint64_t *)&v9[*(int *)(v10 + 28)];
      uint64_t v15 = *v14;
      unint64_t v16 = v14[1];
      sub_24A1233B4(*v14, v16);
      Data.hash(into:)();
      sub_24A12340C(v15, v16);
      uint64_t v17 = type metadata accessor for Asset(0);
      char v18 = (uint64_t *)&v9[*(int *)(v17 + 20)];
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      uint64_t v22 = v18[2];
      unint64_t v21 = v18[3];
      sub_24A1233B4(*v18, v20);
      Data.hash(into:)();
      uint64_t v23 = v19;
      uint64_t v3 = v36;
      sub_24A12340C(v23, v20);
      sub_24A1233B4(v22, v21);
      Data.hash(into:)();
      sub_24A12340C(v22, v21);
      Hasher._combine(_:)(*(void *)&v9[*(int *)(v17 + 24)]);
      uint64_t v24 = &v6[v3[8]];
      if (v24[16] == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v26 = *(void *)v24;
        Swift::UInt v25 = *((void *)v24 + 1);
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v26);
        Hasher._combine(_:)(v25);
      }
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      type metadata accessor for Credential(0);
      type metadata accessor for Date();
      sub_24A139284((unint64_t *)&unk_26976B070, MEMORY[0x263F07490]);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v27 = (uint64_t *)&v6[v3[11]];
      uint64_t v28 = *v27;
      unint64_t v29 = v27[1];
      sub_24A1233B4(*v27, v29);
      Data.hash(into:)();
      sub_24A12340C(v28, v29);
      uint64_t v30 = (uint64_t *)&v6[v3[12]];
      uint64_t v31 = *v30;
      unint64_t v32 = v30[1];
      sub_24A1233B4(*v30, v32);
      Data.hash(into:)();
      sub_24A12340C(v31, v32);
      if (*(void *)&v6[v3[13] + 8])
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t v33 = v37;
      Swift::UInt v34 = v38;
      sub_24A139334((uint64_t)v6, (void (*)(void))type metadata accessor for AssetDownloadRequest);
      uint64_t v8 = v33 + v35;
      Swift::UInt v7 = v34 - 1;
    }
    while (v7);
  }
}

unint64_t sub_24A138404()
{
  unint64_t result = qword_26976AFC8;
  if (!qword_26976AFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AFC8);
  }
  return result;
}

unint64_t sub_24A138450()
{
  unint64_t result = qword_26976AFD0;
  if (!qword_26976AFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AFD0);
  }
  return result;
}

unint64_t sub_24A13849C()
{
  unint64_t result = qword_26976AFE8;
  if (!qword_26976AFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976AFE8);
  }
  return result;
}

void sub_24A1384E8()
{
  sub_24A139550();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for AssetSkeleton();
  sub_24A12477C();
  MEMORY[0x270FA5388](v7);
  sub_24A139568();
  if (v1)
  {
    sub_24A1396C8();
    uint64_t v22 = v8;
    do
    {
      sub_24A1392CC(v3, v0, (uint64_t (*)(void))type metadata accessor for AssetSkeleton);
      type metadata accessor for URL();
      sub_24A139284(&qword_26976AC48, MEMORY[0x263F06EA8]);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v9 = type metadata accessor for Asset.ID(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v10 = (uint64_t *)(v0 + *(int *)(v9 + 24));
      uint64_t v11 = *v10;
      unint64_t v12 = v10[1];
      sub_24A1233B4(*v10, v12);
      Data.hash(into:)();
      sub_24A12340C(v11, v12);
      unint64_t v13 = (uint64_t *)(v0 + *(int *)(v9 + 28));
      uint64_t v14 = *v13;
      unint64_t v15 = v13[1];
      sub_24A1233B4(*v13, v15);
      Data.hash(into:)();
      sub_24A12340C(v14, v15);
      uint64_t v16 = type metadata accessor for Asset(0);
      uint64_t v17 = (uint64_t *)(v0 + *(int *)(v16 + 20));
      uint64_t v18 = *v17;
      unint64_t v19 = v17[1];
      uint64_t v21 = v17[2];
      unint64_t v20 = v17[3];
      sub_24A1233B4(*v17, v19);
      Data.hash(into:)();
      sub_24A12340C(v18, v19);
      sub_24A1233B4(v21, v20);
      Data.hash(into:)();
      sub_24A12340C(v21, v20);
      Hasher._combine(_:)(*(void *)(v0 + *(int *)(v16 + 24)));
      sub_24A13978C(*(int *)(v6 + 20));
      Data.hash(into:)();
      sub_24A12340C(v5, v20);
      sub_24A13978C(*(int *)(v6 + 24));
      Data.hash(into:)();
      sub_24A12340C(v5, v20);
      swift_bridgeObjectRetain();
      sub_24A139754();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24A139754();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24A139754();
      swift_bridgeObjectRelease();
      type metadata accessor for Credential(0);
      type metadata accessor for Date();
      sub_24A139284((unint64_t *)&unk_26976B070, MEMORY[0x263F07490]);
      dispatch thunk of Hashable.hash(into:)();
      sub_24A139334(v0, (void (*)(void))type metadata accessor for AssetSkeleton);
      v3 += v22;
      --v1;
    }
    while (v1);
  }
  sub_24A139538();
}

void sub_24A138818()
{
  sub_24A139550();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for AssetUploadRequest();
  sub_24A12477C();
  MEMORY[0x270FA5388](v5);
  sub_24A139568();
  if (v1)
  {
    sub_24A1396C8();
    uint64_t v10 = v6;
    do
    {
      sub_24A1392CC(v3, v0, (uint64_t (*)(void))type metadata accessor for AssetUploadRequest);
      type metadata accessor for UUID();
      sub_24A139284(&qword_26976AC40, MEMORY[0x263F07508]);
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      sub_24A13964C();
      swift_bridgeObjectRelease();
      type metadata accessor for URL();
      sub_24A139284(&qword_26976AC48, MEMORY[0x263F06EA8]);
      sub_24A139770();
      sub_24A139770();
      sub_24A139770();
      uint64_t v7 = (uint64_t *)(v0 + *(int *)(v4 + 36));
      uint64_t v8 = *v7;
      unint64_t v9 = v7[1];
      sub_24A1233B4(*v7, v9);
      Data.hash(into:)();
      sub_24A12340C(v8, v9);
      sub_24A139668();
      Data.hash(into:)();
      sub_24A1394C8();
      swift_bridgeObjectRetain();
      sub_24A13964C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24A13964C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24A13964C();
      swift_bridgeObjectRelease();
      type metadata accessor for Credential(0);
      type metadata accessor for Date();
      sub_24A139284((unint64_t *)&unk_26976B070, MEMORY[0x263F07490]);
      dispatch thunk of Hashable.hash(into:)();
      sub_24A139334(v0, (void (*)(void))type metadata accessor for AssetUploadRequest);
      v3 += v10;
      --v1;
    }
    while (v1);
  }
  sub_24A139538();
}

uint64_t sub_24A138ABC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A123538(&qword_26976AFD8);
    sub_24A139284(a2, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A138B54()
{
  unint64_t result = qword_26976B018;
  if (!qword_26976B018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B018);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DownloadRequestMessage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  j__swift_bridgeObjectRetain(*a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for DownloadRequestMessage(uint64_t a1)
{
  return j__swift_bridgeObjectRelease(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t *assignWithCopy for DownloadRequestMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  j__swift_bridgeObjectRetain(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  j__swift_bridgeObjectRelease(v5, v6);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for Signal.Event(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t *assignWithTake for DownloadRequestMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  j__swift_bridgeObjectRelease(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadRequestMessage(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloadRequestMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24A138D24(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_24A138D2C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage()
{
  return &type metadata for DownloadRequestMessage;
}

unsigned char *storeEnumTagSinglePayload for DownloadRequestMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A138E14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage.CodingKeys()
{
  return &type metadata for DownloadRequestMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage.BatchRequestsCodingKeys()
{
  return &type metadata for DownloadRequestMessage.BatchRequestsCodingKeys;
}

unsigned char *_s11CloudAssets22DownloadRequestMessageO23BatchRequestsCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A138EFCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage.StreamRequestsCodingKeys()
{
  return &type metadata for DownloadRequestMessage.StreamRequestsCodingKeys;
}

unint64_t sub_24A138F38()
{
  unint64_t result = qword_26976B020;
  if (!qword_26976B020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B020);
  }
  return result;
}

unint64_t sub_24A138F88()
{
  unint64_t result = qword_26976B028;
  if (!qword_26976B028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B028);
  }
  return result;
}

unint64_t sub_24A138FD8()
{
  unint64_t result = qword_26976B030;
  if (!qword_26976B030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B030);
  }
  return result;
}

unint64_t sub_24A139028()
{
  unint64_t result = qword_26976B038;
  if (!qword_26976B038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B038);
  }
  return result;
}

unint64_t sub_24A139078()
{
  unint64_t result = qword_26976B040;
  if (!qword_26976B040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B040);
  }
  return result;
}

unint64_t sub_24A1390C8()
{
  unint64_t result = qword_26976B048;
  if (!qword_26976B048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B048);
  }
  return result;
}

unint64_t sub_24A139118()
{
  unint64_t result = qword_26976B050;
  if (!qword_26976B050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B050);
  }
  return result;
}

unint64_t sub_24A139168()
{
  unint64_t result = qword_26976B058;
  if (!qword_26976B058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B058);
  }
  return result;
}

unint64_t sub_24A1391B8()
{
  unint64_t result = qword_26976B060;
  if (!qword_26976B060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B060);
  }
  return result;
}

uint64_t sub_24A139208(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_24A139284(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1392CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A139334(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A1247EC();
  v3();
  return a1;
}

uint64_t sub_24A1393A0()
{
  return sub_24A12340C(v1, v0);
}

uint64_t sub_24A1393B8()
{
  return sub_24A1233B4(v1, v0);
}

uint64_t sub_24A1393D0()
{
  return sub_24A12340C(v1, v0);
}

uint64_t sub_24A1393E8()
{
  return sub_24A137958(v2, v1, v0, (BOOL *)(v3 - 120));
}

uint64_t sub_24A139434()
{
  return sub_24A12340C(v1, v0);
}

uint64_t sub_24A13944C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return sub_24A137958(a1, v3, v2, a2);
}

uint64_t sub_24A139468()
{
  return sub_24A1233B4(v1, v0);
}

uint64_t sub_24A139480()
{
  return sub_24A1233B4(v1, v0);
}

uint64_t sub_24A139498()
{
  return *(void *)(v0 - 136);
}

uint64_t sub_24A1394B0()
{
  return sub_24A12340C(v1, v0);
}

uint64_t sub_24A1394C8()
{
  return sub_24A12340C(v0, v1);
}

uint64_t sub_24A1394E0()
{
  return v0 - 120;
}

uint64_t sub_24A1394F0()
{
  return sub_24A1233B4(v1, v0);
}

uint64_t sub_24A139508()
{
  return sub_24A12340C(v1, v0);
}

uint64_t sub_24A139520()
{
  return sub_24A1233B4(v1, v0);
}

void sub_24A139568()
{
  Swift::UInt v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(v2);
}

uint64_t sub_24A139598()
{
  return sub_24A137958(v1, v2, v0, (BOOL *)(v3 - 120));
}

uint64_t sub_24A1395C8()
{
  return sub_24A137958(v0, v2, v1, (BOOL *)(v3 - 120));
}

uint64_t sub_24A13962C()
{
  return v0;
}

uint64_t sub_24A13964C()
{
  return String.hash(into:)();
}

uint64_t sub_24A139668()
{
  return sub_24A1233B4(v0, v1);
}

uint64_t sub_24A139680()
{
  return sub_24A12340C(v1, v0);
}

uint64_t sub_24A139698()
{
  unint64_t v3 = *(void *)(v1 - 176);
  return sub_24A12340C(v0, v3);
}

void sub_24A1396E0()
{
  *(void *)(v0 - 114) = 0;
  *(void *)(v0 - 120) = 0;
}

uint64_t sub_24A1396EC()
{
  return v0 - 120;
}

void sub_24A1396FC(char a1@<W8>)
{
  *(unsigned char *)(v2 - 108) = v1;
  *(unsigned char *)(v2 - 107) = a1;
}

void sub_24A13970C(char a1@<W8>)
{
  *(unsigned char *)(v3 - 109) = v1;
  *(unsigned char *)(v3 - 108) = v2;
  *(unsigned char *)(v3 - 107) = a1;
}

uint64_t sub_24A139724()
{
  uint64_t v2 = *(void *)(v0 - 168);
  unint64_t v3 = *(void *)(v0 - 152);
  return sub_24A1233B4(v2, v3);
}

uint64_t sub_24A13973C()
{
  uint64_t v2 = *(void *)(v0 - 160);
  unint64_t v3 = *(void *)(v0 - 176);
  return sub_24A1233B4(v2, v3);
}

uint64_t sub_24A139754()
{
  return String.hash(into:)();
}

uint64_t sub_24A139770()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_24A13978C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = (uint64_t *)(v1 + a1);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  return sub_24A1233B4(v4, v5);
}

uint64_t sub_24A1397AC()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void sub_24A1397CC(char a1@<W8>)
{
  *(unsigned char *)(v2 - 111) = a1;
  *(unsigned char *)(v2 - 110) = v1;
}

void sub_24A1397D8(char a1@<W8>)
{
  *(unsigned char *)(v2 - 115) = v1;
  *(unsigned char *)(v2 - 114) = a1;
}

uint64_t sub_24A1397E4()
{
  return sub_24A12340C(v0, v1);
}

void sub_24A1397FC(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
}

uint64_t sub_24A13981C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A139848(a1, type metadata accessor for CloudAssets_Asset, (void (*)(void))type metadata accessor for CloudAssets_Asset, a2);
}

uint64_t sub_24A139848@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = a2(0);
  uint64_t v9 = v8;
  if (v7)
  {
    sub_24A13A720(a1+ ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80)), a4, a3);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 1;
  }
  return _s11CloudAssets21UploadResponseMessageOwst_0(a4, v10, 1, v9);
}

uint64_t sub_24A139904()
{
  sub_24A13A7B8();
  v1[2] = v2;
  v1[3] = v0;
  sub_24A123464(qword_26976B080);
  v1[4] = sub_24A13A800();
  sub_24A13A860();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A139988()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 40) = v1;
  return sub_24A13A798((uint64_t)sub_24A1399A8, v1);
}

uint64_t sub_24A1399A8()
{
  sub_24A13A7B8();
  *(void *)(v0 + 48) = *(void *)(*(void *)(v0 + 40) + 112);
  swift_bridgeObjectRetain();
  sub_24A13A860();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

uint64_t sub_24A139A18()
{
  sub_24A13A7B8();
  uint64_t v1 = v0[4];
  sub_24A139848(v0[6], (uint64_t (*)(void))type metadata accessor for AssetSkeleton, (void (*)(void))type metadata accessor for AssetSkeleton, v1);
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for AssetSkeleton();
  uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_24A13A2A0(v0[4], v0[2], (void (*)(void))type metadata accessor for AssetSkeleton);
    swift_task_dealloc();
    sub_24A13A7C4();
    return v4();
  }
  return result;
}

uint64_t sub_24A139AFC(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_24A13A798((uint64_t)sub_24A139B18, v1);
}

uint64_t sub_24A139B18()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 32) = v1;
  return sub_24A13A798((uint64_t)sub_24A139B38, v1);
}

uint64_t sub_24A139B38()
{
  sub_24A13A7B8();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32) + OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__signals;
  sub_24A123464(&qword_26976AE60);
  sub_24A13A7D0();
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v1, v2);
  sub_24A13A7C4();
  return v4();
}

uint64_t sub_24A139BD0()
{
  sub_24A13A7B8();
  v1[4] = v2;
  v1[5] = v0;
  v1[6] = sub_24A123464(&qword_26976AE98);
  v1[7] = sub_24A13A800();
  sub_24A123464(&qword_26976B098);
  v1[8] = sub_24A13A800();
  uint64_t v3 = sub_24A123464(&qword_26976B0A0);
  v1[9] = v3;
  sub_24A13A7A0(v3);
  v1[10] = v4;
  v1[11] = sub_24A13A800();
  uint64_t v5 = sub_24A123464(&qword_26976AE70);
  v1[12] = v5;
  sub_24A13A7A0(v5);
  v1[13] = v6;
  v1[14] = sub_24A13A800();
  sub_24A13A860();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A139CE8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 112);
  *(void *)(v0 + 120) = v1;
  return sub_24A13A798((uint64_t)sub_24A139D08, v1);
}

uint64_t sub_24A139D08()
{
  sub_24A13A7B8();
  (*(void (**)(void, uint64_t, void))(v0[13] + 16))(v0[14], v0[15] + OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__results, v0[12]);
  sub_24A13A860();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

uint64_t sub_24A139D88()
{
  sub_24A13A7E4();
  uint64_t v1 = v0[5];
  MEMORY[0x24C5BD3C0](v0[12]);
  unint64_t v2 = sub_24A13A1C8();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_24A139E50;
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  return MEMORY[0x270FA20F8](v4, v1, v2, v5, v0 + 2);
}

uint64_t sub_24A139E50()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A13A7F0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v3 + 40);
  if (v0) {
    uint64_t v7 = sub_24A13A11C;
  }
  else {
    uint64_t v7 = sub_24A139F34;
  }
  return MEMORY[0x270FA2498](v7, v6, 0);
}

uint64_t sub_24A139F34()
{
  uint64_t v1 = v0[8];
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v1, 1, v0[6]) == 1)
  {
    uint64_t v3 = v0[13];
    uint64_t v2 = v0[14];
    uint64_t v4 = v0[12];
    sub_24A13A880();
    v5();
    sub_24A126340();
    swift_allocError();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A13A7C4();
    goto LABEL_7;
  }
  sub_24A13A238(v1, v0[7]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v0[3] = *(void *)v0[7];
    sub_24A123464(&qword_26976C190);
    swift_willThrowTypedImpl();
    uint64_t v6 = sub_24A13A828();
    v7(v6);
    uint64_t v8 = sub_24A13A86C();
    v9(v8);
    goto LABEL_5;
  }
  sub_24A13A2A0(v0[7], v0[4], (void (*)(void))type metadata accessor for Asset);
  uint64_t v11 = sub_24A13A828();
  v12(v11);
  uint64_t v13 = sub_24A13A86C();
  v14(v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
LABEL_7:
  return v10();
}

uint64_t sub_24A13A11C()
{
  sub_24A13A7E4();
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  sub_24A13A880();
  v4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v5();
}

unint64_t sub_24A13A1C8()
{
  unint64_t result = qword_26976B0A8;
  if (!qword_26976B0A8)
  {
    type metadata accessor for AssetUploadCoordinator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B0A8);
  }
  return result;
}

uint64_t type metadata accessor for AssetUploadCoordinator()
{
  return self;
}

uint64_t sub_24A13A238(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A123464(&qword_26976AE98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A13A2A0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A13A7D0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t AssetUploadCoordinator.deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetUploadCoordinator.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t AssetUploadCoordinator.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_24A13A368()
{
  return AssetUploadCoordinator.unownedExecutor.getter();
}

uint64_t method lookup function for AssetUploadCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetUploadCoordinator);
}

uint64_t dispatch thunk of AssetUploadCoordinator.assetSkeleton.getter()
{
  sub_24A13A7E4();
  sub_24A13A818();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A13A840(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A13A488;
  uint64_t v3 = sub_24A13A850();
  return v4(v3);
}

uint64_t sub_24A13A488()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A13A7C4();
  return v3();
}

uint64_t dispatch thunk of AssetUploadCoordinator.signals.getter()
{
  sub_24A13A7E4();
  sub_24A13A818();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A13A840(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A13A77C;
  uint64_t v3 = sub_24A13A850();
  return v4(v3);
}

uint64_t dispatch thunk of AssetUploadCoordinator.result()()
{
  sub_24A13A7E4();
  sub_24A13A818();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A13A840(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A13A488;
  uint64_t v3 = sub_24A13A850();
  return v4(v3);
}

uint64_t sub_24A13A720(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A13A7D0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_24A13A798(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA2498](a1, a2, 0);
}

uint64_t sub_24A13A7A0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_24A13A7C4()
{
  return v0 + 8;
}

uint64_t sub_24A13A800()
{
  return swift_task_alloc();
}

uint64_t sub_24A13A828()
{
  return v0;
}

uint64_t sub_24A13A840(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_24A13A850()
{
  return v0;
}

uint64_t sub_24A13A86C()
{
  return v0;
}

void SimultaneousTransferError.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  Hasher._combine(_:)(0);
  sub_24A137E54(a1, v3);
}

uint64_t static SimultaneousTransferError.== infix(_:_:)(void **a1, void **a2)
{
  return sub_24A1321EC(*a1, *a2);
}

uint64_t sub_24A13A8F0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x746163696C707061 && a2 == 0xEE007344496E6F69)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_24A13A99C()
{
  return 0x746163696C707061;
}

uint64_t sub_24A13A9C0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x800000024A18C5B0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_24A13AA48()
{
  return 0xD000000000000013;
}

uint64_t sub_24A13AA68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A13A8F0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A13AA94(uint64_t a1)
{
  unint64_t v2 = sub_24A13B234();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A13AAD0(uint64_t a1)
{
  unint64_t v2 = sub_24A13B234();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A13AB10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A13A9C0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A13AB3C(uint64_t a1)
{
  unint64_t v2 = sub_24A13B1E8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A13AB78(uint64_t a1)
{
  unint64_t v2 = sub_24A13B1E8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SimultaneousTransferError.encode(to:)(void *a1)
{
  sub_24A123464(&qword_26976B0C8);
  sub_24A12477C();
  MEMORY[0x270FA5388](v2);
  sub_24A129204();
  uint64_t v3 = sub_24A123464(&qword_26976B0D0);
  sub_24A12477C();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_24A129204();
  uint64_t v9 = v8 - v7;
  sub_24A1234A8(a1, a1[3]);
  sub_24A13B1E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A13B234();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  sub_24A123464(&qword_26976B0E8);
  sub_24A13B280(&qword_26976B0F0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v10 = sub_24A13B7AC();
  v11(v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

Swift::Int SimultaneousTransferError.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  sub_24A137E54((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t SimultaneousTransferError.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_24A123464(&qword_26976B0F8);
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A129204();
  uint64_t v5 = sub_24A123464(&qword_26976B100);
  sub_24A12477C();
  uint64_t v27 = v6;
  MEMORY[0x270FA5388](v7);
  sub_24A129204();
  uint64_t v10 = v9 - v8;
  sub_24A1234A8(a1, a1[3]);
  sub_24A13B1E8();
  uint64_t v11 = (uint64_t)a1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v12 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13
      && (sub_24A139204(1, v13, v12, v12 + 32, 0, (2 * v13) | 1),
          uint64_t v15 = v14,
          unint64_t v17 = v16,
          swift_bridgeObjectRelease(),
          v15 == v17 >> 1))
    {
      sub_24A13B234();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_24A123464(&qword_26976B0E8);
      sub_24A13B280(&qword_26976B108);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v11 = (uint64_t)a1;
      uint64_t v22 = sub_24A13B7AC();
      v23(v22);
      swift_unknownObjectRelease();
      uint64_t v24 = sub_24A13B790();
      v25(v24);
      *a2 = v28;
    }
    else
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v20 = v19;
      sub_24A123464(&qword_26976B008);
      *unint64_t v20 = &type metadata for SimultaneousTransferError;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x263F8DCB0], v18);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v10, v5);
      uint64_t v11 = (uint64_t)a1;
    }
  }
  return sub_24A123580(v11);
}

Swift::Int sub_24A13B154()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  sub_24A137E54((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_24A13B1A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return SimultaneousTransferError.init(from:)(a1, a2);
}

uint64_t sub_24A13B1BC(void *a1)
{
  return SimultaneousTransferError.encode(to:)(a1);
}

unint64_t sub_24A13B1E8()
{
  unint64_t result = qword_26976B0D8;
  if (!qword_26976B0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B0D8);
  }
  return result;
}

unint64_t sub_24A13B234()
{
  unint64_t result = qword_26976B0E0;
  if (!qword_26976B0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B0E0);
  }
  return result;
}

uint64_t sub_24A13B280(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A123538(&qword_26976B0E8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A13B2E8()
{
  unint64_t result = qword_26976B110;
  if (!qword_26976B110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B110);
  }
  return result;
}

unint64_t sub_24A13B338()
{
  unint64_t result = qword_26976B118;
  if (!qword_26976B118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B118);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SimultaneousTransferError(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SimultaneousTransferError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SimultaneousTransferError(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for SimultaneousTransferError(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void *assignWithTake for SimultaneousTransferError(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SimultaneousTransferError(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 8))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimultaneousTransferError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SimultaneousTransferError()
{
  return &type metadata for SimultaneousTransferError;
}

ValueMetadata *type metadata accessor for SimultaneousTransferError.CodingKeys()
{
  return &type metadata for SimultaneousTransferError.CodingKeys;
}

unsigned char *_s11CloudAssets25SimultaneousTransferErrorO10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A13B574);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SimultaneousTransferError.ApplicationsBlockedCodingKeys()
{
  return &type metadata for SimultaneousTransferError.ApplicationsBlockedCodingKeys;
}

unint64_t sub_24A13B5B0()
{
  unint64_t result = qword_26976B120;
  if (!qword_26976B120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B120);
  }
  return result;
}

unint64_t sub_24A13B600()
{
  unint64_t result = qword_26976B128;
  if (!qword_26976B128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B128);
  }
  return result;
}

unint64_t sub_24A13B650()
{
  unint64_t result = qword_26976B130;
  if (!qword_26976B130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B130);
  }
  return result;
}

unint64_t sub_24A13B6A0()
{
  unint64_t result = qword_26976B138;
  if (!qword_26976B138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B138);
  }
  return result;
}

unint64_t sub_24A13B6F0()
{
  unint64_t result = qword_26976B140;
  if (!qword_26976B140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B140);
  }
  return result;
}

unint64_t sub_24A13B740()
{
  unint64_t result = qword_26976B148[0];
  if (!qword_26976B148[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26976B148);
  }
  return result;
}

uint64_t sub_24A13B790()
{
  return v0;
}

uint64_t sub_24A13B7AC()
{
  return v0;
}

uint64_t sub_24A13B7C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73736563637573 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572756C696166 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A13B8C0(char a1)
{
  if (a1) {
    return 0x6572756C696166;
  }
  else {
    return 0x73736563637573;
  }
}

uint64_t sub_24A13B8F0()
{
  return 1;
}

uint64_t sub_24A13B910()
{
  return 0;
}

uint64_t sub_24A13B91C(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_24A13B98C()
{
  return 12383;
}

BOOL sub_24A13B998(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24A12C0E8(*a1, *a2);
}

Swift::Int sub_24A13B9B0()
{
  return sub_24A12C1F0(*v0);
}

void sub_24A13B9C4(uint64_t a1)
{
  sub_24A12C0F8(a1, *v1);
}

Swift::Int sub_24A13B9D8()
{
  Hasher.init(_seed:)();
  sub_24A12C0F8((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_24A13BA24()
{
  return sub_24A13B8C0(*v0);
}

uint64_t sub_24A13BA38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A13B7C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A13BA6C()
{
  return sub_24A122920();
}

uint64_t sub_24A13BA98@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A12C1E8();
  *a1 = result;
  return result;
}

uint64_t sub_24A13BACC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_24A13BB20(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t sub_24A13BB74()
{
  return sub_24A13B910();
}

uint64_t sub_24A13BB84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  return sub_24A13BD10(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void, void, void))sub_24A13B8F0, a4);
}

uint64_t sub_24A13BB9C(void *a1, uint64_t a2)
{
  return sub_24A13BD68(a1, a2, (uint64_t (*)(void, void, void))sub_24A122920);
}

uint64_t sub_24A13BBB4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_24A13BDB0(a1, a2, (uint64_t (*)(uint64_t, void, void, void))sub_24A124D58, a3);
}

uint64_t sub_24A13BBCC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_24A13BC20(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t sub_24A13BC74()
{
  return sub_24A124D58();
}

Swift::Int sub_24A13BC80()
{
  return sub_24A129470();
}

void sub_24A13BC90()
{
}

Swift::Int sub_24A13BCA0()
{
  return Hasher._finalize()();
}

uint64_t sub_24A13BCE8()
{
  return sub_24A13B98C();
}

uint64_t sub_24A13BCF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  return sub_24A13BD10(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void, void, void))sub_24A13B91C, a4);
}

uint64_t sub_24A13BD10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, void, void, void)@<X4>, unsigned char *a5@<X8>)
{
  uint64_t result = a4(a1, a2, a3[2], a3[3], a3[4]);
  *a5 = result & 1;
  return result;
}

uint64_t sub_24A13BD50(void *a1, uint64_t a2)
{
  return sub_24A13BD68(a1, a2, (uint64_t (*)(void, void, void))sub_24A13DAE8);
}

uint64_t sub_24A13BD68(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(a1[2], a1[3], a1[4]);
}

uint64_t sub_24A13BD98@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_24A13BDB0(a1, a2, (uint64_t (*)(uint64_t, void, void, void))sub_24A136DB8, a3);
}

uint64_t sub_24A13BDB0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t, void, void, void)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2[2], a2[3], a2[4]);
  *a4 = result & 1;
  return result;
}

uint64_t sub_24A13BDF0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_24A13BE44(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t XPCResult.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v47 = a2;
  sub_24A13DBA8();
  uint64_t v5 = type metadata accessor for XPCResult.FailureCodingKeys();
  swift_getWitnessTable();
  sub_24A13DBD4();
  uint64_t v44 = v6;
  uint64_t v45 = v5;
  type metadata accessor for KeyedEncodingContainer();
  sub_24A13DAEC();
  uint64_t v42 = v8;
  uint64_t v43 = v7;
  sub_24A13DB1C();
  MEMORY[0x270FA5388](v9);
  sub_24A13DBBC();
  uint64_t v38 = v10;
  sub_24A13DBA8();
  uint64_t v11 = type metadata accessor for XPCResult.SuccessCodingKeys();
  swift_getWitnessTable();
  sub_24A13DBD4();
  v37[3] = v11;
  v37[1] = v12;
  type metadata accessor for KeyedEncodingContainer();
  sub_24A13DAEC();
  uint64_t v40 = v14;
  uint64_t v41 = v13;
  sub_24A13DB1C();
  MEMORY[0x270FA5388](v15);
  sub_24A13DBBC();
  v37[2] = v16;
  sub_24A13DAEC();
  uint64_t v39 = v17;
  MEMORY[0x270FA5388](v18);
  sub_24A124810();
  uint64_t v50 = v19;
  sub_24A13DAEC();
  uint64_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v4;
  type metadata accessor for XPCResult.CodingKeys();
  swift_getWitnessTable();
  uint64_t v51 = type metadata accessor for KeyedEncodingContainer();
  sub_24A13DAEC();
  uint64_t v48 = v25;
  sub_24A13DB1C();
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)v37 - v27;
  sub_24A1234A8(a1, a1[3]);
  uint64_t v49 = v28;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v52, v47);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v24, 1, v3) == 1)
  {
    char v54 = 1;
    uint64_t v29 = v38;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v29, v43);
    sub_24A13DB28();
    return v30();
  }
  else
  {
    uint64_t v32 = v48;
    uint64_t v33 = v39;
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v50, v24, v3);
    char v53 = 0;
    uint64_t v34 = v51;
    uint64_t v35 = v49;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A13DB28();
    v36();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v50, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v35, v34);
  }
}

uint64_t type metadata accessor for XPCResult.FailureCodingKeys()
{
  return sub_24A13DAB8();
}

uint64_t type metadata accessor for XPCResult.SuccessCodingKeys()
{
  return sub_24A13DAB8();
}

uint64_t type metadata accessor for XPCResult.CodingKeys()
{
  return sub_24A13DAB8();
}

uint64_t XPCResult.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  size_t v61 = a4;
  uint64_t v7 = type metadata accessor for XPCResult.FailureCodingKeys();
  swift_getWitnessTable();
  sub_24A13DBD4();
  uint64_t v66 = v8;
  uint64_t v67 = v7;
  uint64_t v58 = type metadata accessor for KeyedDecodingContainer();
  sub_24A13DAEC();
  uint64_t v57 = v9;
  sub_24A13DB1C();
  MEMORY[0x270FA5388](v10);
  sub_24A13DBBC();
  uint64_t v65 = v11;
  sub_24A13DB78();
  uint64_t v12 = type metadata accessor for XPCResult.SuccessCodingKeys();
  swift_getWitnessTable();
  sub_24A13DBD4();
  uint64_t v62 = v13;
  uint64_t v63 = v12;
  uint64_t v56 = type metadata accessor for KeyedDecodingContainer();
  sub_24A13DAEC();
  uint64_t v59 = v14;
  sub_24A13DB1C();
  MEMORY[0x270FA5388](v15);
  sub_24A13DBBC();
  uint64_t v64 = v16;
  sub_24A13DB78();
  type metadata accessor for XPCResult.CodingKeys();
  swift_getWitnessTable();
  sub_24A13DBC8();
  uint64_t v71 = type metadata accessor for KeyedDecodingContainer();
  sub_24A13DAEC();
  uint64_t v69 = v17;
  sub_24A13DB1C();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v53 - v19;
  uint64_t v72 = a3;
  uint64_t v73 = a2;
  sub_24A13DB78();
  uint64_t v68 = type metadata accessor for XPCResult();
  sub_24A13DAEC();
  uint64_t v60 = v21;
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v53 - v26;
  sub_24A1234A8(a1, a1[3]);
  uint64_t v70 = v20;
  uint64_t v28 = v78;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28) {
    goto LABEL_7;
  }
  char v54 = v25;
  int v55 = v27;
  uint64_t v29 = v73;
  uint64_t v78 = a1;
  *(void *)&long long v74 = KeyedDecodingContainer.allKeys.getter();
  sub_24A13DBC8();
  type metadata accessor for Array();
  swift_getWitnessTable();
  *(void *)&long long v76 = ArraySlice.init<A>(_:)();
  *((void *)&v76 + 1) = v30;
  *(void *)&long long v77 = v31;
  *((void *)&v77 + 1) = v32;
  sub_24A13DBC8();
  type metadata accessor for ArraySlice();
  swift_getWitnessTable();
  Collection<>.popFirst()();
  char v33 = v74;
  if (v74 == 2 || (v53 = v76, long long v74 = v76, v75 = v77, (Collection.isEmpty.getter() & 1) == 0))
  {
    uint64_t v34 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v36 = v35;
    sub_24A123464(&qword_26976B008);
    uint64_t *v36 = v68;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, *MEMORY[0x263F8DCB0], v34);
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v37 = sub_24A13DB50();
    v38(v37);
    a1 = v78;
LABEL_7:
    uint64_t v39 = (uint64_t)a1;
    return sub_24A123580(v39);
  }
  if (v33)
  {
    LOBYTE(v74) = 1;
    uint64_t v41 = v65;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v41, v58);
    swift_unknownObjectRelease();
    uint64_t v42 = sub_24A13DB50();
    v43(v42);
    uint64_t v44 = (uint64_t)v55;
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v55, 1, 1, v29);
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v61, v44, v68);
  }
  else
  {
    LOBYTE(v74) = 0;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A13DB28();
    v45();
    swift_unknownObjectRelease();
    uint64_t v46 = sub_24A13DB38();
    v47(v46);
    uint64_t v48 = (uint64_t)v54;
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v54, 0, 1, v29);
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
    uint64_t v50 = (uint64_t)v55;
    uint64_t v51 = v48;
    uint64_t v52 = v68;
    v49(v55, v51, v68);
    v49(v61, v50, v52);
  }
  uint64_t v39 = (uint64_t)v78;
  return sub_24A123580(v39);
}

uint64_t type metadata accessor for XPCResult()
{
  return sub_24A13DAB8();
}

uint64_t sub_24A13C930@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return XPCResult.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_24A13C954(void *a1, uint64_t a2)
{
  return XPCResult.encode(to:)(a1, a2);
}

uint64_t static XPCResult<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a6;
  sub_24A13DAEC();
  uint64_t v36 = v8;
  uint64_t v37 = v7;
  MEMORY[0x270FA5388](v9);
  sub_24A124810();
  char v33 = v10;
  uint64_t v11 = type metadata accessor for XPCResult();
  sub_24A13DAEC();
  uint64_t v13 = v12;
  sub_24A13DB1C();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v32 - v15;
  sub_24A13DBC8();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_24A13DAEC();
  uint64_t v19 = v18;
  sub_24A13DB1C();
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v32 - v22;
  uint64_t v24 = (char *)&v32 + *(int *)(v21 + 48) - v22;
  uint64_t v35 = v13;
  uint64_t v25 = *(void (**)(void))(v13 + 16);
  sub_24A13DB68();
  v25();
  sub_24A13DB68();
  v25();
  sub_24A13DB88((uint64_t)v23);
  if (v27)
  {
    char v26 = 1;
    sub_24A13DB88((uint64_t)v24);
    if (v27) {
      goto LABEL_10;
    }
  }
  else
  {
    sub_24A13DB68();
    v25();
    sub_24A13DB88((uint64_t)v24);
    if (!v27)
    {
      uint64_t v28 = v36;
      uint64_t v29 = v33;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v24, a3);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v30 = *(void (**)(char *, uint64_t))(v28 + 8);
      v30(v29, a3);
      v30(v16, a3);
LABEL_10:
      uint64_t v19 = v35;
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, a3);
  }
  char v26 = 0;
  uint64_t v11 = TupleTypeMetadata2;
LABEL_11:
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v11);
  return v26 & 1;
}

uint64_t sub_24A13CBD0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static XPCResult<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8));
}

void XPCResult<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  sub_24A13DB04();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A13DB04();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, v12);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v10, 1, v2) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v10, v2);
    Hasher._combine(_:)(0);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  }
}

Swift::Int XPCResult<>.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  XPCResult<>.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_24A13CDA0(uint64_t a1)
{
  return XPCResult<>.hashValue.getter(a1);
}

void sub_24A13CDA8(uint64_t a1, uint64_t a2)
{
}

Swift::Int sub_24A13CDB0(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  XPCResult<>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t sub_24A13CE04()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A13CE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t sub_24A13CE50()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_24A13CECC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_24A13CFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_24A13D064(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v5);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_24A13D128(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a1, 1, v5);
  int v7 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v5);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
    int v9 = *(_DWORD *)(v8 + 84);
    size_t v10 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v11 = v8 + 8;
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
    int v9 = *(_DWORD *)(v11 + 76);
    size_t v10 = *(void *)(v11 + 56);
  }
  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

void *sub_24A13D250(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v5);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_24A13D314(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a1, 1, v5);
  int v7 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v5);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
    int v9 = *(_DWORD *)(v8 + 84);
    size_t v10 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v5);
      return a1;
    }
    uint64_t v11 = v8 + 8;
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
    int v9 = *(_DWORD *)(v11 + 76);
    size_t v10 = *(void *)(v11 + 56);
  }
  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

uint64_t sub_24A13D43C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  unsigned int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_23;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 > 3) {
            LODWORD(v7) = 4;
          }
          switch((int)v7)
          {
            case 2:
              LODWORD(v7) = *a1;
              break;
            case 3:
              LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v7) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v7) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v7 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v14 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a1, v5, v4);
  if (v14 >= 2) {
    return v14 - 1;
  }
  else {
    return 0;
  }
}

void sub_24A13D5C0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v9) {
    size_t v11 = *(void *)(v8 + 64);
  }
  else {
    size_t v11 = *(void *)(v8 + 64) + 1;
  }
  char v12 = 8 * v11;
  BOOL v13 = a3 >= v10;
  unsigned int v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      unsigned int v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        int v6 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v6 = 2;
      }
      else
      {
        int v6 = v15 > 1;
      }
    }
    else
    {
      int v6 = 1;
    }
  }
  if (v10 < a2)
  {
    unsigned int v16 = ~v10 + a2;
    if (v11 < 4)
    {
      int v17 = (v16 >> v12) + 1;
      if (v11)
      {
        int v18 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v11] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v17;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v11] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x24A13D7E0);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v9 >= 2)
        {
          uint64_t v19 = a2 + 1;
          _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, v19, v9, v7);
        }
      }
      return;
  }
}

uint64_t sub_24A13D808(uint64_t a1, uint64_t a2)
{
  return _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, *(void *)(a2 + 16));
}

uint64_t sub_24A13D814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s11CloudAssets21UploadResponseMessageOwst_0(a1, a2, 1, *(void *)(a3 + 16));
}

unsigned char *sub_24A13D820(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A13D8ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_24A13D914(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A13D9B0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A13D9D8()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A13D9F4()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A13DA10()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A13DA2C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A13DA48()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A13DA64()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A13DA80()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A13DA9C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A13DAB8()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24A13DB38()
{
  return v0;
}

uint64_t sub_24A13DB50()
{
  return v0;
}

uint64_t sub_24A13DB88(uint64_t a1)
{
  return _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v1);
}

uint64_t sub_24A13DBA8()
{
  return 255;
}

uint64_t sub_24A13DBC8()
{
  return 0;
}

uint64_t sub_24A13DBD4()
{
  return 0;
}

void AssetExportSession.__allocating_init(avAsset:presetName:delegate:)()
{
  sub_24A13DF0C();
  uint64_t v0 = (void *)sub_24A13DEF0();
  sub_24A13DD7C(v0, v1, v2, v3);
}

void AssetExportSession.init(avAsset:presetName:delegate:)()
{
  sub_24A13DF0C();
  uint64_t v0 = (void *)sub_24A13DEF0();
  sub_24A13DDEC(v0, v1, v2, v3, v4);
}

id AssetExportSession.__allocating_init(asset:presetName:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  uint64_t v8 = (void *)MEMORY[0x24C5BD1A0](a2, a3);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, sel_initWithAsset_presetName_, a1, v8);

  return v9;
}

void AssetExportSession.init(asset:presetName:)()
{
}

id AssetExportSession.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AssetExportSession();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_24A13DD7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (char *)objc_allocWithZone((Class)type metadata accessor for AssetExportSession());
  sub_24A13DDEC(a1, a2, a3, a4, v8);
}

void sub_24A13DDEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  *(void *)&a5[OBJC_IVAR____TtC11CloudAssets18AssetExportSession_delegate] = a4;
  swift_unknownObjectRetain();
  id v9 = (void *)MEMORY[0x24C5BD1A0](a2, a3);
  swift_bridgeObjectRelease();
  v11.receiver = a5;
  v11.super_class = (Class)type metadata accessor for AssetExportSession();
  id v10 = objc_msgSendSuper2(&v11, sel_initWithAsset_presetName_, a1, v9);

  if (v10)
  {

    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for AssetExportSession()
{
  return self;
}

uint64_t method lookup function for AssetExportSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetExportSession);
}

uint64_t dispatch thunk of AssetExportSession.__allocating_init(avAsset:presetName:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_24A13DEF0()
{
  return v0;
}

uint64_t sub_24A13DF0C()
{
  return swift_getObjectType();
}

void Signal.Event.hash(into:)()
{
  if (*(unsigned char *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Swift::UInt64 v1 = *(void *)v0;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

uint64_t static Signal.Event.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a2 + 8)) {
      return sub_24A124D58();
    }
    return 0;
  }
  if (*(unsigned char *)(a2 + 8)) {
    return 0;
  }
  return *(void *)a1 == *(void *)a2;
}

uint64_t sub_24A13DFB0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001BLL && a2 == 0x800000024A18C660
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A18C680)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_24A13E0A0(char a1)
{
  if (a1) {
    return 0xD000000000000010;
  }
  else {
    return 0xD00000000000001BLL;
  }
}

uint64_t sub_24A13E0E0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x656E6961746E6F63 && a2 == 0xEE007865646E4972)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_24A13E18C()
{
  return 0x656E6961746E6F63;
}

uint64_t sub_24A13E1B4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A13B8F0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_24A13E1E0(uint64_t a1)
{
  unint64_t v2 = sub_24A13E610();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A13E21C(uint64_t a1)
{
  unint64_t v2 = sub_24A13E610();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t sub_24A13E258()
{
  return sub_24A13E0A0(*v0);
}

uint64_t sub_24A13E260@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A13DFB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A13E288(uint64_t a1)
{
  unint64_t v2 = sub_24A13E5C4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A13E2C4(uint64_t a1)
{
  unint64_t v2 = sub_24A13E5C4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A13E304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A13E0E0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A13E330(uint64_t a1)
{
  unint64_t v2 = sub_24A13E65C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A13E36C(uint64_t a1)
{
  unint64_t v2 = sub_24A13E65C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Signal.Event.encode(to:)()
{
  sub_24A129194();
  unint64_t v2 = v1;
  sub_24A123464(&qword_26976B358);
  sub_24A12477C();
  MEMORY[0x270FA5388](v3);
  sub_24A124810();
  sub_24A123464(&qword_26976B360);
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A13FF60();
  sub_24A123464(&qword_26976B368);
  sub_24A12477C();
  MEMORY[0x270FA5388](v5);
  sub_24A129164();
  char v6 = *(unsigned char *)(v0 + 8);
  sub_24A1234A8(v2, v2[3]);
  sub_24A13E5C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v6)
  {
    sub_24A13E610();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  }
  else
  {
    sub_24A13E65C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  sub_24A1247EC();
  v7();
  uint64_t v8 = sub_24A13FF90();
  v9(v8);
  sub_24A12917C();
}

unint64_t sub_24A13E5C4()
{
  unint64_t result = qword_26976B370;
  if (!qword_26976B370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B370);
  }
  return result;
}

unint64_t sub_24A13E610()
{
  unint64_t result = qword_26976B378;
  if (!qword_26976B378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B378);
  }
  return result;
}

unint64_t sub_24A13E65C()
{
  unint64_t result = qword_26976B380;
  if (!qword_26976B380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B380);
  }
  return result;
}

Swift::Int Signal.Event.hashValue.getter()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void Signal.Event.init(from:)()
{
  sub_24A129194();
  uint64_t v46 = v0;
  uint64_t v4 = v3;
  uint64_t v43 = v5;
  uint64_t v45 = sub_24A123464(&qword_26976B388);
  sub_24A12477C();
  uint64_t v42 = v6;
  MEMORY[0x270FA5388](v7);
  id v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A123464(&qword_26976B390);
  sub_24A12477C();
  uint64_t v41 = v10;
  MEMORY[0x270FA5388](v11);
  sub_24A1247F8();
  uint64_t v12 = sub_24A123464(&qword_26976B398);
  sub_24A12477C();
  uint64_t v44 = v13;
  MEMORY[0x270FA5388](v14);
  sub_24A1396B0();
  sub_24A1234A8(v4, v4[3]);
  sub_24A13E5C4();
  unsigned int v15 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    uint64_t v39 = v1;
    uint64_t v40 = v9;
    uint64_t v46 = v4;
    uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17
      && (uint64_t v38 = 0,
          char v18 = *(unsigned char *)(v16 + 32),
          sub_24A139204(1, v17, v16, v16 + 32, 0, (2 * v17) | 1),
          uint64_t v20 = v19,
          unint64_t v22 = v21,
          swift_bridgeObjectRelease(),
          v20 == v22 >> 1))
    {
      if (v18)
      {
        sub_24A13E610();
        uint64_t v23 = v38;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        if (!v23)
        {
          sub_24A1247EC();
          v24();
          swift_unknownObjectRelease();
          sub_24A1247EC();
          v25();
          uint64_t v26 = 0;
LABEL_14:
          uint64_t v36 = v43;
          *uint64_t v43 = v26;
          *((unsigned char *)v36 + 8) = v18;
          uint64_t v32 = (uint64_t)v46;
          goto LABEL_12;
        }
      }
      else
      {
        sub_24A13E65C();
        uint64_t v31 = v38;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        if (!v31)
        {
          uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
          sub_24A1247EC();
          v33();
          swift_unknownObjectRelease();
          uint64_t v34 = sub_24A13FF78();
          v35(v34);
          goto LABEL_14;
        }
      }
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v2, v12);
    }
    else
    {
      uint64_t v27 = v44;
      uint64_t v28 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v30 = v29;
      sub_24A123464(&qword_26976B008);
      *uint64_t v30 = &type metadata for Signal.Event;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v28 - 8) + 104))(v30, *MEMORY[0x263F8DCB0], v28);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v2, v12);
    }
    uint64_t v4 = v46;
  }
  uint64_t v32 = (uint64_t)v4;
LABEL_12:
  sub_24A123580(v32);
  sub_24A12917C();
}

Swift::Int sub_24A13EB54()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_24A13EBBC()
{
}

void sub_24A13EBD4()
{
}

uint64_t sub_24A13EBF0(uint64_t a1)
{
  unint64_t v2 = sub_24A13F6FC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A13EC2C(uint64_t a1)
{
  unint64_t v2 = sub_24A13F6FC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Signal.events.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Signal.events.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::UInt64 v1 = a1;
  return result;
}

uint64_t (*Signal.events.modify())()
{
  return nullsub_1;
}

uint64_t sub_24A13ECBC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CloudAssets_Signal.Event(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5 - 8);
  id v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = *(void *)a1;
  int64_t v13 = *(void *)(*(void *)a1 + 16);
  if (v13)
  {
    uint64_t v24 = a2;
    uint64_t v25 = v2;
    uint64_t v27 = a1;
    uint64_t v29 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_24A15211C(0, v13, 0);
    uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v26 = v12;
    uint64_t v15 = v12 + ((v14 + 32) & ~v14);
    uint64_t v28 = *(void *)(v6 + 72);
    while (1)
    {
      sub_24A13FEA8(v15, (uint64_t)v11);
      sub_24A13FEA8((uint64_t)v11, (uint64_t)v9);
      if (v9[8] != 1) {
        break;
      }
      uint64_t v16 = *(void *)v9;
      if (*(void *)v9) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *((void *)v9 + 2);
      }
      sub_24A13FF0C((uint64_t)v9, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
      sub_24A13FF0C((uint64_t)v11, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
      uint64_t v18 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24A15211C(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v18 = v29;
      }
      unint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_24A15211C((void *)(v19 > 1), v20 + 1, 1);
        uint64_t v18 = v29;
      }
      *(void *)(v18 + 16) = v20 + 1;
      uint64_t v21 = v18 + 16 * v20;
      *(void *)(v21 + 32) = v17;
      *(unsigned char *)(v21 + 40) = v16 != 0;
      v15 += v28;
      if (!--v13)
      {
        a1 = v27;
        a2 = v24;
        goto LABEL_15;
      }
    }
    sub_24A126340();
    swift_allocError();
    swift_willThrow();
    sub_24A13FF0C((uint64_t)v9, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
    sub_24A13FF0C((uint64_t)v11, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
    swift_release();
    sub_24A13FF0C(v27, (void (*)(void))type metadata accessor for CloudAssets_Signal);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = MEMORY[0x263F8EE78];
LABEL_15:
    sub_24A13FF0C(a1, (void (*)(void))type metadata accessor for CloudAssets_Signal);
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v18;
  }
  return result;
}

void Signal.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_24A129194();
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  char v33 = v27;
  uint64_t v28 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v28 - 8);
  sub_24A124810();
  type metadata accessor for CloudAssets_Signal(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v29);
  sub_24A1396B0();
  uint64_t v30 = sub_24A123464(&qword_26976B3A0);
  sub_24A12477C();
  uint64_t v34 = v31;
  MEMORY[0x270FA5388](v32);
  sub_24A13FF60();
  sub_24A1234A8(v26, v26[3]);
  sub_24A13F6FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v20)
  {
    sub_24A1262F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BinaryDecodingOptions.init()();
    sub_24A13F748();
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    sub_24A13ECBC(v21, &a10);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v22, v30);
    *char v33 = a10;
  }
  sub_24A123580((uint64_t)v26);
  sub_24A12917C();
}

CloudAssets::Signal __swiftcall Signal.init()()
{
  *uint64_t v0 = MEMORY[0x263F8EE78];
  return result;
}

uint64_t sub_24A13F210@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CloudAssets_Signal.Event(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v9 = (char *)v19 - v8;
  uint64_t v10 = *v1;
  type metadata accessor for CloudAssets_Signal(0);
  uint64_t result = UnknownStorage.init()();
  int64_t v12 = *(void *)(v10 + 16);
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v12)
  {
    uint64_t v20 = a1;
    uint64_t v21 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_24A15216C(0, v12, 0);
    uint64_t v13 = v21;
    v19[1] = v10;
    uint64_t v14 = (unsigned char *)(v10 + 40);
    do
    {
      uint64_t v15 = *((void *)v14 - 1);
      char v16 = *v14;
      *((void *)v7 + 2) = 0;
      UnknownStorage.init()();
      if (v16)
      {
        *(void *)uint64_t v7 = 1;
        v7[8] = 1;
      }
      else
      {
        *(void *)uint64_t v7 = 0;
        v7[8] = 1;
        *((void *)v7 + 2) = v15;
      }
      sub_24A13FE44((uint64_t)v7, (uint64_t)v9);
      uint64_t v21 = v13;
      unint64_t v18 = *(void *)(v13 + 16);
      unint64_t v17 = *(void *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_24A15216C(v17 > 1, v18 + 1, 1);
        uint64_t v13 = v21;
      }
      *(void *)(v13 + 16) = v18 + 1;
      sub_24A13FE44((uint64_t)v9, v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v18);
      v14 += 16;
      --v12;
    }
    while (v12);
    uint64_t result = swift_bridgeObjectRelease();
    a1 = v20;
  }
  *a1 = v13;
  return result;
}

void Signal.encode(to:)()
{
  sub_24A129194();
  uint64_t v4 = v3;
  type metadata accessor for CloudAssets_Signal(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v5);
  sub_24A129164();
  uint64_t v12 = sub_24A123464(&qword_26976B3B8);
  sub_24A12477C();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_24A1247F8();
  sub_24A1234A8(v4, v4[3]);
  sub_24A13F6FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A13F210(v2);
  sub_24A13F748();
  uint64_t v9 = Message.serializedData(partial:)();
  unint64_t v11 = v10;
  sub_24A13FF0C((uint64_t)v2, (void (*)(void))type metadata accessor for CloudAssets_Signal);
  if (!v0)
  {
    sub_24A12638C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A12340C(v9, v11);
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v12);
  sub_24A12917C();
}

void Signal.hash(into:)()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = (unsigned char *)(v1 + 40);
    do
    {
      if (*v3)
      {
        Hasher._combine(_:)(1uLL);
      }
      else
      {
        Swift::UInt64 v4 = *((void *)v3 - 1);
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v4);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
}

uint64_t static Signal.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_24A132180(*a1, *a2);
}

Swift::Int Signal.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_24A137DF0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

Swift::Int sub_24A13F684()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_24A137DF0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

#error "24A13F6D4: call analysis failed (funcsize=6)"

void sub_24A13F6E0()
{
}

unint64_t sub_24A13F6FC()
{
  unint64_t result = qword_26976B3A8;
  if (!qword_26976B3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B3A8);
  }
  return result;
}

unint64_t sub_24A13F748()
{
  unint64_t result = qword_26976B3B0;
  if (!qword_26976B3B0)
  {
    type metadata accessor for CloudAssets_Signal(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B3B0);
  }
  return result;
}

unint64_t sub_24A13F79C()
{
  unint64_t result = qword_26976B3C0;
  if (!qword_26976B3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B3C0);
  }
  return result;
}

unint64_t sub_24A13F7EC()
{
  unint64_t result = qword_26976B3C8;
  if (!qword_26976B3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B3C8);
  }
  return result;
}

void type metadata accessor for Signal()
{
}

uint64_t getEnumTagSinglePayload for Signal.Event(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Signal.Event(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_24A13F894(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24A13F8B0(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 8) = v2;
  return result;
}

void type metadata accessor for Signal.Event()
{
}

void type metadata accessor for Signal.CodingKeys()
{
}

unsigned char *storeEnumTagSinglePayload for Signal.Event.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A13F9B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Signal.Event.CodingKeys()
{
  return &type metadata for Signal.Event.CodingKeys;
}

unsigned char *_s11CloudAssets6SignalV5EventO37StorageContainerUploadStartCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A13FA8CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Signal.Event.StorageContainerUploadStartCodingKeys()
{
  return &type metadata for Signal.Event.StorageContainerUploadStartCodingKeys;
}

ValueMetadata *type metadata accessor for Signal.Event.AllUploadsFinishCodingKeys()
{
  return &type metadata for Signal.Event.AllUploadsFinishCodingKeys;
}

unint64_t sub_24A13FAD8()
{
  unint64_t result = qword_26976B3D0;
  if (!qword_26976B3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B3D0);
  }
  return result;
}

unint64_t sub_24A13FB28()
{
  unint64_t result = qword_26976B3D8;
  if (!qword_26976B3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B3D8);
  }
  return result;
}

unint64_t sub_24A13FB78()
{
  unint64_t result = qword_26976B3E0;
  if (!qword_26976B3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B3E0);
  }
  return result;
}

unint64_t sub_24A13FBC8()
{
  unint64_t result = qword_26976B3E8;
  if (!qword_26976B3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B3E8);
  }
  return result;
}

unint64_t sub_24A13FC18()
{
  unint64_t result = qword_26976B3F0;
  if (!qword_26976B3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B3F0);
  }
  return result;
}

unint64_t sub_24A13FC68()
{
  unint64_t result = qword_26976B3F8;
  if (!qword_26976B3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B3F8);
  }
  return result;
}

unint64_t sub_24A13FCB8()
{
  unint64_t result = qword_26976B400;
  if (!qword_26976B400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B400);
  }
  return result;
}

unint64_t sub_24A13FD08()
{
  unint64_t result = qword_26976B408;
  if (!qword_26976B408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B408);
  }
  return result;
}

unint64_t sub_24A13FD58()
{
  unint64_t result = qword_26976B410;
  if (!qword_26976B410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B410);
  }
  return result;
}

unint64_t sub_24A13FDA8()
{
  unint64_t result = qword_26976B418;
  if (!qword_26976B418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B418);
  }
  return result;
}

unint64_t sub_24A13FDF8()
{
  unint64_t result = qword_26976B420;
  if (!qword_26976B420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B420);
  }
  return result;
}

uint64_t sub_24A13FE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudAssets_Signal.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A13FEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudAssets_Signal.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A13FF0C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A1247B0();
  sub_24A1247EC();
  v3();
  return a1;
}

uint64_t sub_24A13FF78()
{
  return v0;
}

uint64_t sub_24A13FF90()
{
  return v0;
}

unint64_t static LoggerSubsystem.client.getter()
{
  return sub_24A13FFCC();
}

unint64_t static LoggerSubsystem.server.getter()
{
  return sub_24A13FFCC();
}

ValueMetadata *type metadata accessor for LoggerSubsystem()
{
  return &type metadata for LoggerSubsystem;
}

unint64_t sub_24A13FFCC()
{
  return 0xD000000000000025;
}

uint64_t sub_24A13FFE0(uint64_t a1)
{
  uint64_t v9 = sub_24A123464(&qword_26976B4F0);
  unint64_t v10 = sub_24A144254();
  v8[0] = a1;
  char v2 = sub_24A1234A8(v8, v9);
  uint64_t v3 = *v2 + 32;
  uint64_t v4 = v3 + *(void *)(*v2 + 16);
  swift_bridgeObjectRetain();
  sub_24A143840(v3, v4, &v7);
  swift_bridgeObjectRelease();
  uint64_t v5 = v7;
  sub_24A123580((uint64_t)v8);
  return v5;
}

uint64_t sub_24A140084()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_24A14403C(v0, qword_26976B430);
  sub_24A143E24(v0, (uint64_t)qword_26976B430);
  type metadata accessor for LoadingRequestHandler();
  sub_24A123464(&qword_26976B4B0);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

uint64_t LoadingRequestHandler.__allocating_init(streamHandle:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A140150(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24A1438B8);
}

uint64_t LoadingRequestHandler.init(streamHandle:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A140150(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24A143A28);
}

uint64_t sub_24A140150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = sub_24A1439D8(a1, v9);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  uint64_t v15 = a4(v13, a2, a3, v4, v9, v10);
  sub_24A123580(a1);
  return v15;
}

id sub_24A14025C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_24A123464(&qword_26976B4A0);
  MEMORY[0x270FA5388](v4 - 8);
  unsigned int v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1441EC(v2 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_type, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for UTType();
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v6, 1, v7) == 1)
  {
    sub_24A144190((uint64_t)v6, &qword_26976B4A0);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = UTType.identifier.getter();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = (void *)MEMORY[0x24C5BD1A0](v9, v11);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(a1, sel_setContentType_, v8);

  uint64_t v12 = (void *)(v2 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_assetStreamHandle);
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_assetStreamHandle + 24);
  uint64_t v14 = v12[4];
  sub_24A1234A8(v12, v13);
  objc_msgSend(a1, sel_setContentLength_, (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14));
  return objc_msgSend(a1, sel_setByteRangeAccessSupported_, 1);
}

uint64_t sub_24A1403F8(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = sub_24A123464(&qword_26976B500);
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = sub_24A123464(&qword_26976B508);
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A14051C, 0, 0);
}

char *sub_24A14051C()
{
  uint64_t v29 = v0;
  if (qword_26976AA40 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = type metadata accessor for Logger();
  sub_24A143E24(v2, (uint64_t)qword_26976B430);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[8];
  if (v6)
  {
    os_log_type_t typea = v5;
    uint64_t v8 = sub_24A14448C();
    uint64_t v28 = sub_24A14448C();
    *(_DWORD *)uint64_t v8 = 136315650;
    uint64_t v25 = v8 + 4;
    id v9 = v7;
    id v10 = objc_msgSend(v9, sel_description);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    v0[5] = sub_24A14308C(v11, v13, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2048;
    id v14 = objc_msgSend(v9, sel_requestedOffset);

    v0[6] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v8 + 22) = 2048;
    id v15 = objc_msgSend(v9, sel_requestedLength);

    v0[7] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_24A120000, v4, typea, "LoadingRequestHandler.handleDataRequest:%s offset:%lld length:%ld", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
  }
  uint64_t v16 = (void *)v0[8];
  id v17 = objc_msgSend(v16, sel_requestedOffset, v25);
  unint64_t result = (char *)objc_msgSend(v16, sel_requestedLength);
  unint64_t v19 = &result[(void)v17];
  if (__OFADD__(v17, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((uint64_t)v19 < (uint64_t)v17)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v20 = (void *)(v0[9] + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_assetStreamHandle);
  uint64_t v21 = v20[3];
  uint64_t v22 = v20[4];
  sub_24A1234A8(v20, v21);
  type = (uint64_t (*)(uint64_t, id, char *, uint64_t, uint64_t))(*(void *)(v22 + 24) + **(int **)(v22 + 24));
  uint64_t v23 = (void *)swift_task_alloc();
  v0[16] = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_24A1408B8;
  uint64_t v24 = v0[15];
  return (char *)type(v24, v17, v19, v21, v22);
}

uint64_t sub_24A1408B8()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v2 = *v1;
  sub_24A13A7F0();
  *id v3 = v2;
  *(void *)(v4 + 136) = v0;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

uint64_t sub_24A140998()
{
  MEMORY[0x24C5BD3C0](*(void *)(v0 + 104));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24A140A5C;
  sub_24A1444BC();
  return MEMORY[0x270FA20F8](v2, v3, v4, v5, v0 + 32);
}

uint64_t sub_24A140A5C()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A140B38()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  if (v2 >> 60 == 15)
  {
    uint64_t v4 = v0[14];
    uint64_t v3 = v0[15];
    uint64_t v5 = v0[13];
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = (void *)v0[8];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, sel_respondWithData_, isa);

    sub_24A1442A8(v1, v2);
    id v10 = (void *)swift_task_alloc();
    v0[18] = v10;
    *id v10 = v0;
    v10[1] = sub_24A140A5C;
    sub_24A1444BC();
    return MEMORY[0x270FA20F8](v11, v12, v13, v14, v0 + 4);
  }
}

uint64_t sub_24A140CD0()
{
  sub_24A13A7B8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A140D38()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v4();
}

uint64_t sub_24A140DE0(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  sub_24A123464(&qword_26976B4D0);
  v2[16] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URLRequest();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A140F78, 0, 0);
}

uint64_t sub_24A140F78()
{
  uint64_t v90 = v0;
  v89[1] = *MEMORY[0x263EF8340];
  if (qword_26976AA40 != -1) {
    swift_once();
  }
  uint64_t v2 = (id *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 200) = sub_24A143E24(v3, (uint64_t)qword_26976B430);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 112);
  if (v7)
  {
    uint64_t v9 = (uint8_t *)sub_24A1444A4();
    v89[0] = sub_24A14448C();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v0 + 96) = v8;
    uint64_t v10 = _Pointer.debugDescription.getter();
    *(void *)(v0 + 104) = sub_24A14308C(v10, v11, v89);
    uint64_t v2 = (id *)(v0 + 112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A120000, v5, v6, "LoadingRequestHandler.handle, entering - loadingRequest:%s", v9, 0xCu);
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
  }
  id v12 = objc_msgSend(*v2, sel_contentInformationRequest);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v17 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v18 = *(void *)(v0 + 128);
    unint64_t v19 = *(void **)(v0 + 112);
    sub_24A14025C(v12);
    id v20 = objc_msgSend(v19, sel_request);
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    URLRequest.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v18, 1, v14) == 1)
    {
      uint64_t v21 = *(void *)(v0 + 128);

      sub_24A144190(v21, &qword_26976B4D0);
    }
    else
    {
      uint64_t v23 = *(void *)(v0 + 184);
      uint64_t v22 = *(void *)(v0 + 192);
      uint64_t v25 = *(void *)(v0 + 168);
      uint64_t v24 = *(void *)(v0 + 176);
      uint64_t v26 = *(void **)(v0 + 112);
      (*(void (**)(uint64_t, void, uint64_t))(v24 + 32))(v22, *(void *)(v0 + 128), v25);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v22, v25);
      uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
      id v28 = objc_allocWithZone(MEMORY[0x263F088A0]);
      id v30 = sub_24A142DD0(v23, 206, 0, 0, v27, v29);
      objc_msgSend(v26, sel_setResponse_, v30);

      id v31 = v26;
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      BOOL v34 = os_log_type_enabled(v32, v33);
      uint64_t v35 = *(void **)(v0 + 112);
      if (v34)
      {
        uint64_t v36 = (uint8_t *)sub_24A1444A4();
        uint64_t v37 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 138412290;
        id v38 = objc_msgSend(v35, sel_response);
        id v39 = v38;
        if (v38) {
          *(void *)(v0 + 88) = v38;
        }
        else {
          *(void *)(v0 + 80) = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v40 = *(void **)(v0 + 112);
        *uint64_t v37 = v39;

        _os_log_impl(&dword_24A120000, v32, v33, "Returning Response w/ ETag for AVAssetCache %@", v36, 0xCu);
        sub_24A123464(&qword_26976B4E0);
        swift_arrayDestroy();
        sub_24A144474();
        sub_24A144474();
      }
      else
      {
      }
      uint64_t v41 = *(void *)(v0 + 192);
      uint64_t v43 = *(void *)(v0 + 168);
      uint64_t v42 = *(void *)(v0 + 176);

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    }
    uint64_t v2 = (id *)(v0 + 112);
  }
  id v44 = objc_msgSend(*(id *)(v0 + 112), sel_dataRequest);
  *(void *)(v0 + 208) = v44;
  if (!v44)
  {
    size_t v61 = *(void **)(v0 + 112);
    objc_msgSend(v61, sel_finishLoading);
    id v62 = v61;
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    uint64_t v66 = *(void **)(v0 + 112);
    if (v65)
    {
      uint64_t v67 = (uint8_t *)sub_24A1444A4();
      v89[0] = sub_24A14448C();
      *(_DWORD *)uint64_t v67 = 136315138;
      *(void *)(v0 + 16) = v66;
      uint64_t v68 = _Pointer.debugDescription.getter();
      *(void *)(v0 + 24) = sub_24A14308C(v68, v69, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A120000, v63, v64, "LoadingRequestHandler.handle, leaving - loadingRequest:%s", v67, 0xCu);
      sub_24A1444E4();
      sub_24A144474();
      sub_24A144474();

LABEL_33:
      sub_24A1444C8();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_24A13A7C4();
      return v85();
    }

LABEL_32:
    goto LABEL_33;
  }
  uint64_t v45 = v44;
  if (!objc_msgSend(v44, sel_requestedOffset) && objc_msgSend(v45, sel_requestedLength) == (id)2)
  {
    id v46 = *v2;
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      os_log_type_t type = v48;
      uint64_t v50 = *(void *)(v0 + 144);
      uint64_t v49 = *(void *)(v0 + 152);
      uint64_t v86 = *(void *)(v0 + 136);
      uint64_t v51 = *(void **)(v0 + 112);
      uint64_t v52 = (uint8_t *)sub_24A1444A4();
      v89[0] = sub_24A14448C();
      buf = v52;
      *(_DWORD *)uint64_t v52 = 136315138;
      long long v53 = v2;
      id v54 = objc_msgSend(v51, sel_request);
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

      sub_24A14442C(&qword_26976B4E8, MEMORY[0x263F06088]);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v57 = v56;
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v86);
      uint64_t v58 = v55;
      uint64_t v2 = v53;
      *(void *)(v0 + 72) = sub_24A14308C(v58, v57, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A120000, v47, type, "Returning zero-filled bytes for the first two bytes of a video request %s. These two-bytes are always requested even when the payload can be served from cache.", buf, 0xCu);
      swift_arrayDestroy();
      sub_24A144474();
      sub_24A144474();
    }
    else
    {
      id v70 = *v2;
    }
    id v71 = *v2;
    uint64_t v72 = v2;
    uint64_t v73 = sub_24A13FFE0((uint64_t)&unk_26FDF77A8);
    unint64_t v75 = v74;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_24A12340C(v73, v75);
    objc_msgSend(v45, sel_respondWithData_, isa);

    objc_msgSend(v71, sel_finishLoading);
    id v77 = v71;
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.default.getter();
    BOOL v80 = os_log_type_enabled(v78, v79);
    uint64_t v66 = *v72;
    if (v80)
    {
      uint64_t v81 = (uint8_t *)sub_24A1444A4();
      uint64_t v82 = sub_24A14448C();
      *(_DWORD *)uint64_t v81 = 136315138;
      v89[0] = v82;
      *(void *)(v0 + 56) = v66;
      uint64_t v83 = _Pointer.debugDescription.getter();
      *(void *)(v0 + 64) = sub_24A14308C(v83, v84, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A120000, v78, v79, "LoadingRequestHandler.handle, leaving - loadingRequest:%s with synthetic response", v81, 0xCu);
      swift_arrayDestroy();
      sub_24A144474();
      sub_24A144474();

      goto LABEL_33;
    }

    goto LABEL_32;
  }
  uint64_t v59 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v59;
  *uint64_t v59 = v0;
  v59[1] = sub_24A14199C;
  return sub_24A1403F8((uint64_t)v45);
}

uint64_t sub_24A14199C()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v2 = *v1;
  sub_24A13A7F0();
  *uint64_t v3 = v2;
  *(void *)(v4 + 224) = v0;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v5, v6, v7);
}

uint64_t sub_24A141AA8()
{
  uint64_t v14 = v0;
  v13[1] = *MEMORY[0x263EF8340];

  uint64_t v1 = *(void **)(v0 + 112);
  objc_msgSend(v1, sel_finishLoading);
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 112);
    uint64_t v6 = (uint8_t *)sub_24A1444A4();
    uint64_t v7 = sub_24A14448C();
    *(_DWORD *)uint64_t v6 = 136315138;
    v13[0] = v7;
    *(void *)(v0 + 16) = v5;
    uint64_t v8 = _Pointer.debugDescription.getter();
    *(void *)(v0 + 24) = sub_24A14308C(v8, v9, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_24A120000, v3, v4, "LoadingRequestHandler.handle, leaving - loadingRequest:%s", v6, 0xCu);
    sub_24A1444E4();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 112);
  }
  sub_24A1444C8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v11();
}

uint64_t sub_24A141C8C()
{
  uint64_t v24 = v0;
  v23[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 224);
  id v2 = *(void **)(v0 + 112);
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  objc_msgSend(v2, sel_finishLoadingWithError_, v3);

  id v4 = v2;
  id v5 = v1;
  id v6 = v4;
  id v7 = v1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void **)(v0 + 224);
    uint64_t v22 = *(void **)(v0 + 208);
    unint64_t v11 = *(void **)(v0 + 112);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    v23[0] = sub_24A14448C();
    *(_DWORD *)uint64_t v12 = 136315394;
    *(void *)(v0 + 32) = v11;
    uint64_t v14 = _Pointer.debugDescription.getter();
    *(void *)(v0 + 40) = sub_24A14308C(v14, v15, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v12 + 12) = 2112;
    id v16 = v10;
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 48) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v17;

    _os_log_impl(&dword_24A120000, v8, v9, "LoadingRequestHandler.handle, leaving - loadingRequest:%s with error %@", (uint8_t *)v12, 0x16u);
    sub_24A123464(&qword_26976B4E0);
    swift_arrayDestroy();
    sub_24A144474();
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    uint64_t v18 = *(void **)(v0 + 224);
    unint64_t v19 = *(void **)(v0 + 112);
  }
  sub_24A1444C8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v20();
}

Swift::Bool __swiftcall LoadingRequestHandler.resourceLoader(_:shouldWaitForLoadingOfRequestedResource:)(AVAssetResourceLoader _, AVAssetResourceLoadingRequest shouldWaitForLoadingOfRequestedResource)
{
  resourceLoader = _._resourceLoader;
  uint64_t v4 = sub_24A123464(&qword_26976C0D0);
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  void v8[3] = 0;
  v8[4] = v2;
  v8[5] = resourceLoader;
  os_log_type_t v9 = v2;
  uint64_t v10 = resourceLoader;
  uint64_t v11 = sub_24A14242C((uint64_t)v6, (uint64_t)&unk_26976B458, (uint64_t)v8);
  uint64_t v12 = *(os_unfair_lock_s **)&v9[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedTaskMapping];
  uint64_t v17 = v10;
  uint64_t v18 = v11;
  uint64_t v13 = (uint64_t)&v12[4];
  uint64_t v14 = v12 + 6;
  os_unfair_lock_lock(v12 + 6);
  sub_24A143DEC(v13);
  os_unfair_lock_unlock(v14);
  swift_release();
  return 1;
}

uint64_t sub_24A14209C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  return MEMORY[0x270FA2498](sub_24A14212C, 0, 0);
}

uint64_t sub_24A14212C()
{
  os_log_type_t v9 = v0;
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(os_unfair_lock_s **)(v0[2].opaque[0] + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedActivity);
  id v2 = (os_activity_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_24A1423E0(v2, &v7);
  os_unfair_lock_unlock(v3);
  v0[1] = v7;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[3].opaque[0] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_24A142268;
  uint64_t v5 = v0[2].opaque[1];
  return sub_24A140DE0(v5);
}

uint64_t sub_24A142268()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *id v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A14235C()
{
  sub_24A13A7B8();
  os_activity_scope_leave(v0 + 1);
  sub_24A13A7C4();
  return v1();
}

void sub_24A1423E0(os_activity_t *a1@<X0>, os_activity_scope_state_s *a2@<X8>)
{
}

uint64_t sub_24A14242C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (_s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v6) == 1)
  {
    sub_24A144190(a1, &qword_26976C0D0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

void sub_24A14259C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = swift_retain();
  sub_24A161980(v3, v2);
}

Swift::Void __swiftcall LoadingRequestHandler.resourceLoader(_:didCancel:)(AVAssetResourceLoader _, AVAssetResourceLoadingRequest didCancel)
{
  resourceLoader = _._resourceLoader;
  v26[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedTaskMapping);
  uint64_t v5 = (uint64_t *)&v4[4];
  uint64_t v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_24A143E08(v5, &state);
  os_unfair_lock_unlock(v6);
  uint64_t v7 = state.opaque[0];
  if (state.opaque[0])
  {
    uint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedActivity);
    os_log_type_t v9 = (os_activity_t *)(v8 + 16);
    uint64_t v10 = (os_unfair_lock_s *)(v8 + 24);
    swift_retain();
    os_unfair_lock_lock(v10);
    sub_24A1423E0(v9, &state);
    os_unfair_lock_unlock(v10);
    if (qword_26976AA40 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_24A143E24(v11, (uint64_t)qword_26976B430);
    uint64_t v12 = resourceLoader;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)sub_24A1444A4();
      v26[0] = sub_24A14448C();
      *(_DWORD *)unint64_t v15 = 136315138;
      uint64_t v16 = _Pointer.debugDescription.getter();
      sub_24A14308C(v16, v17, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_24A120000, v13, v14, "LoadingRequestHandler.didCancel - loadingRequest:%s", v15, 0xCu);
      swift_arrayDestroy();
      sub_24A144474();
      sub_24A144474();
    }
    else
    {
    }
    MEMORY[0x24C5BD320](v7, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    os_activity_scope_leave(&state);
    swift_release_n();
  }
  else
  {
    if (qword_26976AA40 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_24A143E24(v18, (uint64_t)qword_26976B430);
    unint64_t v19 = resourceLoader;
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)sub_24A1444A4();
      state.opaque[0] = sub_24A14448C();
      *(_DWORD *)uint64_t v22 = 136315138;
      v26[0] = (uint64_t)v19;
      uint64_t v23 = _Pointer.debugDescription.getter();
      v26[0] = sub_24A14308C(v23, v24, (uint64_t *)&state);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_24A120000, v20, v21, "LoadingRequestHandler.didCancel - loadingRequest:%s - missing task!", v22, 0xCu);
      sub_24A1444E4();
      sub_24A144474();
      sub_24A144474();
    }
    else
    {
    }
  }
}

void sub_24A142A1C(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  if (*(void *)(*a1 + 16))
  {
    id v5 = a2;
    unint64_t v6 = sub_24A16103C((uint64_t)v5);
    if (v7)
    {
      uint64_t v8 = *(void *)(*(void *)(v4 + 56) + 8 * v6);
      swift_retain();
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a3 = v8;
}

double sub_24A142A90@<D0>(os_activity_t *a1@<X0>, os_activity_scope_state_s *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  unsigned long long v4 = 0uLL;
  os_activity_scope_enter(*a1, (os_activity_scope_state_t)&v4);
  double result = *(double *)&v4;
  *a2 = (os_activity_scope_state_s)v4;
  return result;
}

Swift::Bool __swiftcall LoadingRequestHandler.resourceLoader(_:shouldWaitForRenewalOfRequestedResource:)(AVAssetResourceLoader _, AVAssetResourceRenewalRequest shouldWaitForRenewalOfRequestedResource)
{
  return 1;
}

Swift::Bool __swiftcall LoadingRequestHandler.resourceLoader(_:shouldWaitForResponseTo:)(AVAssetResourceLoader _, NSURLAuthenticationChallenge shouldWaitForResponseTo)
{
  resourceLoader = _._resourceLoader;
  id v3 = [(AVAssetResourceLoaderInternal *)_._resourceLoader sender];
  if (v3)
  {
    objc_msgSend(v3, sel_continueWithoutCredentialForAuthenticationChallenge_, resourceLoader);
    swift_unknownObjectRelease();
  }
  return 1;
}

id LoadingRequestHandler.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void LoadingRequestHandler.init()()
{
}

id LoadingRequestHandler.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_24A142DD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, NSURL *a6@<X8>)
{
  char v7 = v6;
  URL._bridgeToObjectiveC()(a6);
  os_log_type_t v14 = v13;
  if (!a4)
  {
    unint64_t v15 = 0;
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    v16.super.Class isa = 0;
    goto LABEL_6;
  }
  unint64_t v15 = (void *)MEMORY[0x24C5BD1A0](a3, a4);
  swift_bridgeObjectRelease();
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  v16.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_6:
  id v17 = objc_msgSend(v7, sel_initWithURL_statusCode_HTTPVersion_headerFields_, v14, a2, v15, v16.super.isa);

  uint64_t v18 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
  return v17;
}

uint64_t sub_24A142EE8(uint64_t a1, int *a2)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  unsigned long long v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *unsigned long long v4 = v2;
  v4[1] = sub_24A142FC4;
  return v6(a1);
}

uint64_t sub_24A142FC4()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_24A14308C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  sub_24A1444BC();
  uint64_t v9 = sub_24A14315C(v6, v7, v8, 1, a1, a2);
  uint64_t v10 = v15[0];
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t ObjectType = swift_getObjectType();
    v15[0] = v11;
    uint64_t v12 = *a3;
    if (*a3)
    {
      sub_24A143FDC((uint64_t)v15, *a3);
      *a3 = v12 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v15[0] = a1;
    v15[1] = a2;
    uint64_t v13 = *a3;
    if (*a3)
    {
      sub_24A143FDC((uint64_t)v15, *a3);
      *a3 = v13 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_24A123580((uint64_t)v15);
  return v10;
}

uint64_t sub_24A14315C(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_24A1432B4((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = sub_24A14338C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_24A1432B4(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t sub_24A14338C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_24A143424(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)sub_24A143600(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)sub_24A143600((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_24A143424(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x263F8EE78];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
LABEL_6:
  unint64_t v3 = sub_24A143598(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_24A143598(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_24A123464(&qword_26976B4A8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_24A143600(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_24A123464(&qword_26976B4A8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_24A1437B0(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24A1436D8(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_24A1436D8(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_24A1437B0(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_24A143840@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = MEMORY[0x24C5BCD00]();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = MEMORY[0x24C5BCD10]();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

id sub_24A1438B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_allocWithZone(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a5);
  id v16 = sub_24A143A28((uint64_t)v13, a2, a3, v15, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
  return v16;
}

uint64_t sub_24A1439D8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id sub_24A143A28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = type metadata accessor for UTType();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v12 = sub_24A123464(&qword_26976B4A0);
  MEMORY[0x270FA5388](v12 - 8);
  Class v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[3] = a5;
  v25[4] = a6;
  id v15 = sub_24A1442BC(v25);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v15, a1, a5);
  sub_24A144320((uint64_t)v25, (uint64_t)a4 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_assetStreamHandle);
  id v16 = a4;
  static UTType.data.getter();
  UTType.init(filenameExtension:conformingTo:)();
  sub_24A144384((uint64_t)v14, (uint64_t)&v16[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_type]);
  sub_24A1443EC();
  sub_24A123464((uint64_t *)&unk_26976C210);
  sub_24A14442C((unint64_t *)&qword_26976B520, (void (*)(uint64_t))sub_24A1443EC);
  uint64_t v17 = Dictionary.init(dictionaryLiteral:)();
  sub_24A123464(&qword_26976C220);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 24) = 0;
  *(void *)(v18 + 16) = v17;
  *(void *)&v16[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedTaskMapping] = v18;
  if (qword_26976AB00 != -1) {
    swift_once();
  }
  os_activity_t v19 = _os_activity_create(&dword_24A120000, "asset-streaming/loading-request-handler", (os_activity_t)qword_26976C4A0, OS_ACTIVITY_FLAG_DEFAULT);
  sub_24A123464((uint64_t *)&unk_26976B530);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 24) = 0;
  *(void *)(v20 + 16) = v19;
  *(void *)&v16[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedActivity] = v20;

  v24.receiver = v16;
  v24.super_class = ObjectType;
  id v21 = objc_msgSendSuper2(&v24, sel_init);
  sub_24A123580((uint64_t)v25);
  return v21;
}

uint64_t sub_24A143CE4()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_24A143D2C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_24A13A488;
  return sub_24A14209C(a1, v4, v5, v7, v6);
}

void sub_24A143DEC(uint64_t a1)
{
  sub_24A14259C(a1, *(void **)(v1 + 16));
}

void sub_24A143E08(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_24A142A1C(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_24A143E24(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_24A143E5C()
{
  return type metadata accessor for LoadingRequestHandler();
}

uint64_t type metadata accessor for LoadingRequestHandler()
{
  uint64_t result = qword_26976B488;
  if (!qword_26976B488) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_24A143EAC()
{
  sub_24A143F84();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for LoadingRequestHandler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LoadingRequestHandler);
}

uint64_t dispatch thunk of LoadingRequestHandler.__allocating_init(streamHandle:type:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void sub_24A143F84()
{
  if (!qword_26976B498)
  {
    type metadata accessor for UTType();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26976B498);
    }
  }
}

uint64_t sub_24A143FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *sub_24A14403C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_24A1440A0()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_24A1440D8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24A13A488;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_26976B4B8 + dword_26976B4B8);
  return v6(a1, v4);
}

uint64_t sub_24A144190(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_24A123464(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A1441EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A123464(&qword_26976B4A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A144254()
{
  unint64_t result = qword_26976B4F8;
  if (!qword_26976B4F8)
  {
    sub_24A123538(&qword_26976B4F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B4F8);
  }
  return result;
}

uint64_t sub_24A1442A8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_24A12340C(a1, a2);
  }
  return a1;
}

uint64_t *sub_24A1442BC(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_24A144320(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24A144384(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A123464(&qword_26976B4A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A1443EC()
{
  unint64_t result = qword_26976B510;
  if (!qword_26976B510)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26976B510);
  }
  return result;
}

uint64_t sub_24A14442C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_24A144474()
{
  JUMPOUT(0x24C5BDE90);
}

uint64_t sub_24A14448C()
{
  return swift_slowAlloc();
}

uint64_t sub_24A1444A4()
{
  return swift_slowAlloc();
}

uint64_t sub_24A1444C8()
{
  return swift_task_dealloc();
}

uint64_t sub_24A1444E4()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A144500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_24A161080();
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_24A144558()
{
  sub_24A123464(&qword_26976B550);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 0;
  qword_26976B540 = result;
  return result;
}

void static TestConfigurations.testConfigurations()(unsigned char *a1@<X8>)
{
  if (qword_26976AA48 != -1) {
    swift_once();
  }
  uint64_t v2 = (unsigned char *)(qword_26976B540 + 16);
  uint64_t v3 = (os_unfair_lock_s *)(qword_26976B540 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_26976B540 + 20));
  sub_24A144634(v2, a1);
  os_unfair_lock_unlock(v3);
}

unsigned char *sub_24A144634@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static TestConfigurations.disableTest()()
{
  if (qword_26976AA48 != -1) {
    swift_once();
  }
  sub_24A144B28((os_unfair_lock_s *)qword_26976B540);
  uint64_t v1 = (unsigned char *)sub_24A144B18();
  sub_24A1446C4(v1);
  os_unfair_lock_unlock(v0);
}

unsigned char *sub_24A1446C4(unsigned char *result)
{
  *uint64_t result = 0;
  return result;
}

void static TestConfigurations.enableMockTest()()
{
  if (qword_26976AA48 != -1) {
    swift_once();
  }
  sub_24A144B28((os_unfair_lock_s *)qword_26976B540);
  uint64_t v1 = (unsigned char *)sub_24A144B18();
  sub_24A144750(v1);
  os_unfair_lock_unlock(v0);
}

unsigned char *sub_24A144750(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

void static TestConfigurations.enableLiveTest()()
{
  if (qword_26976AA48 != -1) {
    swift_once();
  }
  sub_24A144B28((os_unfair_lock_s *)qword_26976B540);
  uint64_t v1 = (unsigned char *)sub_24A144B18();
  sub_24A1447E0(v1);
  os_unfair_lock_unlock(v0);
}

unsigned char *sub_24A1447E0(unsigned char *result)
{
  *uint64_t result = 2;
  return result;
}

BOOL static TestConfigurations.isSystemInstalledBinary()()
{
  id v0 = objc_msgSend(self, sel_processInfo);
  id v1 = objc_msgSend(v0, sel_environment);

  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  sub_24A144500(0xD000000000000011, 0x800000024A18CB20, v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 == 0;
}

BOOL static TestConfigurations.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void TestConfigurations.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TestConfigurations.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_24A144940()
{
  unint64_t result = qword_26976B548;
  if (!qword_26976B548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B548);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TestConfigurations(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for TestConfigurations(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A144AE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TestConfigurations()
{
  return &type metadata for TestConfigurations;
}

uint64_t sub_24A144B18()
{
  return v0;
}

void sub_24A144B28(os_unfair_lock_s *a1@<X8>)
{
  os_unfair_lock_lock(a1 + 5);
}

uint64_t sub_24A144B44()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_24A14403C(v0, qword_26976B558);
  sub_24A143E24(v0, (uint64_t)qword_26976B558);
  type metadata accessor for AssetManager();
  sub_24A123464(&qword_26976B808);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_24A144BDC()
{
  type metadata accessor for AssetManager();
  uint64_t v0 = swift_allocObject();
  uint64_t result = AssetManager.init(serviceName:)(0xD00000000000001BLL, 0x800000024A18C4B0);
  qword_26976B570 = v0;
  return result;
}

uint64_t AssetManager.__allocating_init(serviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  AssetManager.init(serviceName:)(a1, a2);
  return v4;
}

uint64_t static AssetManager.shared.getter()
{
  return sub_24A144D4C(&qword_26976AA58);
}

uint64_t sub_24A144CA4()
{
  uint64_t v0 = sub_24A176A10();
  uint64_t v2 = v1;
  type metadata accessor for AssetManager();
  uint64_t v3 = swift_allocObject();
  uint64_t result = AssetManager.init(serviceName:)(v0, v2);
  qword_26976B578 = v3;
  return result;
}

uint64_t static AssetManager.testable.getter()
{
  return sub_24A144D4C(&qword_26976AA60);
}

uint64_t sub_24A144D4C(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t AssetManager.init(serviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for XPCMessageSender();
  swift_allocObject();
  uint64_t v9 = v6;
  uint64_t v10 = &off_26FDF70B8;
  *(void *)&long long v8 = XPCMessageSender.init(machServiceName:)(a1, a2);
  sub_24A14EB7C(&v8, v3 + 16);
  return v3;
}

uint64_t sub_24A144E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[7] = sub_24A123464(&qword_26976AE98);
  v5[8] = swift_task_alloc();
  uint64_t v6 = sub_24A123464(&qword_26976B6A8);
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = type metadata accessor for Asset(0);
  v5[13] = swift_task_alloc();
  v5[14] = sub_24A123464(&qword_26976B648);
  v5[15] = swift_task_alloc();
  sub_24A123464(&qword_26976B6B0);
  v5[16] = swift_task_alloc();
  uint64_t v7 = sub_24A123464(&qword_26976B6B8);
  v5[17] = v7;
  v5[18] = *(void *)(v7 - 8);
  v5[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A145064, 0, 0);
}

uint64_t sub_24A145064()
{
  sub_24A13A7E4();
  uint64_t v0 = sub_24A123464(&qword_26976B640);
  MEMORY[0x24C5BD3C0](v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_24A154CDC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_24A14511C;
  sub_24A15489C();
  return MEMORY[0x270FA20F8](v4, v5, v6, v7, v8);
}

uint64_t sub_24A14511C()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A1451F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24A1554A0();
  sub_24A155108();
  sub_24A154BA0(v10[16], 1, v10[14]);
  if (v26)
  {
    sub_24A131348();
    v11();
    v10[4] = 0;
    sub_24A123464(&qword_26976B690);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A13A7C4();
    sub_24A154EA0();
    return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
  }
  else
  {
    uint64_t v21 = v10[15];
    uint64_t v22 = v10[12];
    uint64_t v23 = sub_24A154CF8();
    sub_24A152FA0(v23, v24, v25);
    sub_24A154BA0(v21, 1, v22);
    if (v26)
    {
      sub_24A126340();
      uint64_t v27 = sub_24A154934();
      sub_24A1555FC(v27);
      sub_24A123464(&qword_26976B690);
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_24A1312CC();
      v28();
    }
    else
    {
      uint64_t v29 = v10[13];
      uint64_t v30 = v10[8];
      sub_24A153A6C(v10[15], v29);
      sub_24A152FF0(v29, v30);
      swift_storeEnumTagMultiPayload();
      sub_24A123464(&qword_26976B690);
      sub_24A155314();
      sub_24A154A78();
      v31();
      sub_24A153EAC(v29, (void (*)(void))type metadata accessor for Asset);
    }
    uint64_t v32 = swift_task_alloc();
    os_log_type_t v33 = (void *)sub_24A154CDC(v32);
    *os_log_type_t v33 = v34;
    v33[1] = sub_24A14511C;
    sub_24A15489C();
    sub_24A154EA0();
    return MEMORY[0x270FA20F8](v35, v36, v37, v38, v39);
  }
}

uint64_t sub_24A14547C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A154A1C();
  sub_24A154D04();
  sub_24A131348();
  v13();
  v12[3] = v12[2];
  sub_24A123464(&qword_26976B690);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  v12[4] = 0;
  sub_24A123464(&qword_26976B690);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  sub_24A1549C8();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t AssetManager.process(request:)()
{
  sub_24A13A7B8();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  uint64_t v4 = sub_24A123464(&qword_26976AE98);
  v1[6] = v4;
  sub_24A1291B8(v4);
  v1[7] = sub_24A13A800();
  uint64_t v5 = sub_24A123464(&qword_26976B098);
  sub_24A1291B8(v5);
  v1[8] = sub_24A13A800();
  uint64_t v6 = sub_24A123464(&qword_26976B0A0);
  v1[9] = v6;
  sub_24A13A7A0(v6);
  v1[10] = v7;
  v1[11] = sub_24A13A800();
  uint64_t v8 = sub_24A123464(&qword_26976AE70);
  v1[12] = v8;
  sub_24A13A7A0(v8);
  v1[13] = v9;
  v1[14] = sub_24A13A800();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_24A13A7B8();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  uint64_t v4 = sub_24A123464(&qword_26976AE98);
  v1[6] = v4;
  sub_24A1291B8(v4);
  v1[7] = sub_24A13A800();
  uint64_t v5 = sub_24A123464(&qword_26976B098);
  sub_24A1291B8(v5);
  v1[8] = sub_24A13A800();
  uint64_t v6 = sub_24A123464(&qword_26976B0A0);
  v1[9] = v6;
  sub_24A13A7A0(v6);
  v1[10] = v7;
  v1[11] = sub_24A13A800();
  uint64_t v8 = sub_24A123464(&qword_26976AE70);
  v1[12] = v8;
  sub_24A13A7A0(v8);
  v1[13] = v9;
  v1[14] = sub_24A13A800();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_24A13A7B8();
  v1[5] = v2;
  v1[6] = v0;
  v1[4] = v3;
  uint64_t v4 = sub_24A123464(&qword_26976B5E8);
  v1[7] = v4;
  sub_24A1291B8(v4);
  v1[8] = sub_24A13A800();
  uint64_t v5 = sub_24A123464(&qword_26976B5F0);
  sub_24A1291B8(v5);
  v1[9] = sub_24A13A800();
  uint64_t v6 = sub_24A123464(&qword_26976B5F8);
  v1[10] = v6;
  sub_24A13A7A0(v6);
  v1[11] = v7;
  v1[12] = sub_24A13A800();
  uint64_t v8 = sub_24A123464(&qword_26976B5D0);
  v1[13] = v8;
  sub_24A13A7A0(v8);
  v1[14] = v9;
  v1[15] = sub_24A13A800();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

uint64_t sub_24A14568C()
{
  sub_24A13A7E4();
  uint64_t v1 = v0[4];
  sub_24A123464(&qword_26976B588);
  uint64_t v2 = type metadata accessor for AssetUploadRequest();
  sub_24A13A7A0(v2);
  uint64_t v3 = (__n128 *)sub_24A154968();
  v0[15] = v3;
  sub_24A155540(v3, (__n128)xmmword_24A190860);
  sub_24A152FF0(v1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A145794;
  sub_24A155424();
  return AssetManager.process(requests:)();
}

uint64_t sub_24A145794()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v3 = v2;
  sub_24A154880();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A13A7F0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A145878()
{
  sub_24A13A7B8();
  MEMORY[0x24C5BD3C0](*(void *)(v0 + 96));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24A145920;
  sub_24A15489C();
  return MEMORY[0x270FA20F8](v2, v3, v4, v5, v6);
}

uint64_t sub_24A145920()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A1459FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A154A1C();
  sub_24A154D04();
  uint64_t v13 = v12[8];
  sub_24A154990();
  if (v22)
  {
    sub_24A131348();
    v14();
    if (qword_26976AA50 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_24A143E24(v15, (uint64_t)qword_26976B558);
    uint64_t v16 = (void *)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (sub_24A154FF4(v17))
    {
      uint64_t v18 = (_WORD *)sub_24A15588C();
      sub_24A1558E8(v18);
      sub_24A154BC4(&dword_24A120000, v19, v20, "result stream for upload terminated unexpectedly");
      sub_24A144474();
    }

    sub_24A126340();
    sub_24A154934();
    swift_willThrow();
    sub_24A154AF4();
    v21();
  }
  else
  {
    sub_24A152FA0(v13, v12[7], &qword_26976AE98);
    sub_24A1558D0();
    sub_24A15582C();
    if (!v22)
    {
      uint64_t v27 = v12[7];
      uint64_t v28 = v12[3];
      uint64_t v29 = sub_24A154A84();
      v30(v29);
      sub_24A1549E4();
      v31();
      sub_24A153A6C(v27, v28);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_24A15488C();
      goto LABEL_12;
    }
    swift_willThrow();
    uint64_t v23 = sub_24A154A84();
    v24(v23);
    uint64_t v25 = sub_24A155804();
    v26(v25);
  }
  sub_24A155010();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
LABEL_12:
  sub_24A1549C8();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12);
}

uint64_t sub_24A145C0C()
{
  sub_24A13A7E4();
  swift_bridgeObjectRelease();
  sub_24A155010();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A145C8C()
{
  sub_24A13A7E4();
  sub_24A131348();
  v0();
  sub_24A154CEC();
  v1();
  sub_24A155010();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v2();
}

uint64_t AssetManager.process(requests:)()
{
  sub_24A13A7B8();
  v1[5] = v2;
  v1[6] = v0;
  v1[4] = v3;
  sub_24A154920();
  v1[7] = v4;
  uint64_t v5 = sub_24A123464(&qword_26976B598);
  v1[8] = v5;
  sub_24A13A7A0(v5);
  v1[9] = v6;
  v1[10] = sub_24A13A800();
  uint64_t v7 = sub_24A123464(&qword_26976B5A0);
  v1[11] = v7;
  sub_24A13A7A0(v7);
  v1[12] = v8;
  v1[13] = sub_24A13A800();
  uint64_t v9 = type metadata accessor for TaskPriority();
  v1[14] = v9;
  sub_24A13A7A0(v9);
  v1[15] = v10;
  v1[16] = sub_24A13A800();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  sub_24A13A7E4();
  v0[2] = v1;
  uint64_t v2 = sub_24A123464(&qword_26976B598);
  v0[3] = v2;
  sub_24A13A7A0(v2);
  v0[4] = v3;
  v0[5] = sub_24A13A800();
  uint64_t v4 = sub_24A123464(&qword_26976B5D0);
  v0[6] = v4;
  sub_24A13A7A0(v4);
  v0[7] = v5;
  v0[8] = sub_24A13A800();
  swift_task_alloc();
  sub_24A155458();
  v0[9] = v6;
  *uint64_t v6 = v7;
  v6[1] = sub_24A146AC4;
  sub_24A155424();
  return AssetManager.process(requests:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  sub_24A13A7B8();
  v1[5] = v2;
  v1[6] = v0;
  v1[4] = v3;
  sub_24A154920();
  v1[7] = v4;
  uint64_t v5 = sub_24A123464(&qword_26976B600);
  v1[8] = v5;
  sub_24A13A7A0(v5);
  v1[9] = v6;
  v1[10] = sub_24A13A800();
  uint64_t v7 = sub_24A123464(&qword_26976B608);
  v1[11] = v7;
  sub_24A13A7A0(v7);
  v1[12] = v8;
  v1[13] = sub_24A13A800();
  uint64_t v9 = sub_24A123464(&qword_26976B610);
  v1[14] = v9;
  sub_24A13A7A0(v9);
  v1[15] = v10;
  v1[16] = sub_24A13A800();
  uint64_t v11 = type metadata accessor for TaskPriority();
  v1[17] = v11;
  sub_24A13A7A0(v11);
  v1[18] = v12;
  v1[19] = sub_24A13A800();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v13, v14, v15);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  sub_24A13A7B8();
  v1[6] = v2;
  v1[7] = v0;
  sub_24A154920();
  v1[8] = v3;
  uint64_t v4 = sub_24A123464(&qword_26976B598);
  v1[9] = v4;
  sub_24A13A7A0(v4);
  v1[10] = v5;
  v1[11] = sub_24A13A800();
  uint64_t v6 = sub_24A123464(&qword_26976AE70);
  sub_24A1291B8(v6);
  v1[12] = sub_24A13A800();
  uint64_t v7 = sub_24A123464(&qword_26976B630);
  v1[13] = v7;
  sub_24A13A7A0(v7);
  v1[14] = v8;
  v1[15] = sub_24A13A800();
  uint64_t v9 = sub_24A123464(&qword_26976B638);
  v1[16] = v9;
  sub_24A13A7A0(v9);
  v1[17] = v10;
  v1[18] = sub_24A154DE8();
  v1[19] = swift_task_alloc();
  uint64_t v11 = sub_24A123464(&qword_26976B640);
  v1[20] = v11;
  sub_24A13A7A0(v11);
  v1[21] = v12;
  v1[22] = sub_24A13A800();
  uint64_t v13 = sub_24A123464(&qword_26976AFA0);
  v1[23] = v13;
  sub_24A13A7A0(v13);
  v1[24] = v14;
  v1[25] = sub_24A13A800();
  uint64_t v15 = sub_24A123464(&qword_26976AF78);
  v1[26] = v15;
  sub_24A13A7A0(v15);
  v1[27] = v16;
  v1[28] = sub_24A154DE8();
  v1[29] = swift_task_alloc();
  os_log_type_t v17 = sub_24A123464(&qword_26976AE60);
  v1[30] = v17;
  sub_24A13A7A0(v17);
  v1[31] = v18;
  v1[32] = sub_24A154DE8();
  v1[33] = swift_task_alloc();
  uint64_t v19 = sub_24A123464(&qword_26976B5A0);
  v1[34] = v19;
  sub_24A13A7A0(v19);
  v1[35] = v20;
  v1[36] = sub_24A13A800();
  uint64_t v21 = type metadata accessor for TaskPriority();
  v1[37] = v21;
  sub_24A13A7A0(v21);
  v1[38] = v22;
  v1[39] = sub_24A13A800();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v23, v24, v25);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  sub_24A13A7B8();
  v1[4] = v2;
  v1[5] = v0;
  sub_24A154920();
  v1[6] = v3;
  uint64_t v4 = sub_24A123464(&qword_26976C0D0);
  sub_24A1291B8(v4);
  v1[7] = sub_24A13A800();
  uint64_t v5 = sub_24A123464(&qword_26976AE70);
  v1[8] = v5;
  sub_24A13A7A0(v5);
  v1[9] = v6;
  v1[10] = sub_24A154DE8();
  v1[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for TaskPriority();
  v1[12] = v7;
  sub_24A13A7A0(v7);
  v1[13] = v8;
  v1[14] = sub_24A13A800();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_24A145E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24)
{
  sub_24A1548DC();
  a23 = v26;
  a24 = v27;
  sub_24A154BB8();
  a22 = v25;
  if (qword_26976AA50 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_24A154D94(v28, (uint64_t)qword_26976B558);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (sub_24A154F98(v30))
  {
    a9 = v25 + 3;
    a10 = v25 + 2;
    a11 = v25[14];
    id v31 = (_DWORD *)sub_24A154A04();
    a13 = sub_24A155114();
    *id v31 = 136315394;
    uint64_t v32 = type metadata accessor for AssetUploadRequest();
    uint64_t v33 = swift_bridgeObjectRetain();
    uint64_t v34 = MEMORY[0x24C5BD260](v33, v32);
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v37 = sub_24A14308C(v34, v36, &a13);
    sub_24A155354(v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_24A155330();
    sub_24A1547F4(&qword_26976B5B0, MEMORY[0x263F8F520]);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_24A154AF4();
    uint64_t v39 = v38();
    uint64_t v41 = sub_24A1556F0(v39, v40, &a13);
    sub_24A1552F0(v41);
    swift_bridgeObjectRelease();
    sub_24A154D40(&dword_24A120000, v29, v24, "start processing %s with priority %s");
    sub_24A154ED8();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_24A15567C(v25[6]);
  uint64_t v52 = (char *)&dword_26976B5A8 + dword_26976B5A8;
  swift_bridgeObjectRetain();
  uint64_t v42 = (void *)swift_task_alloc();
  v25[17] = (uint64_t)v42;
  *uint64_t v42 = v25;
  v42[1] = sub_24A1460A8;
  sub_24A155424();
  sub_24A154864();
  return v46(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, v52, a13, a14, a15, a16);
}

uint64_t sub_24A1460A8()
{
  sub_24A13A7B8();
  sub_24A13A780();
  sub_24A154880();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A13A7F0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A1461A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A154A1C();
  sub_24A154D04();
  uint64_t v29 = v12[16];
  uint64_t v13 = v12[13];
  uint64_t v14 = v12[10];
  uint64_t v16 = v12[8];
  uint64_t v15 = v12[9];
  uint64_t v17 = v12[7];
  uint64_t v18 = swift_task_alloc();
  *(void *)(v18 + 16) = v13;
  *(void *)(v18 + 24) = v17;
  sub_24A123464(&qword_26976AE98);
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, *MEMORY[0x263F8F680], v16);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  sub_24A1554D4();
  sub_24A154B28();
  v19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A15488C();
  sub_24A1549C8();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, v29, a10, a11, a12);
}

uint64_t sub_24A1462B4()
{
  sub_24A13A7B8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A14643C()
{
  sub_24A13A7E4();
  uint64_t v1 = v0[4];
  sub_24A123464(&qword_26976B5C0);
  uint64_t v2 = type metadata accessor for AssetDownloadRequest();
  sub_24A13A7A0(v2);
  uint64_t v3 = (__n128 *)sub_24A154968();
  v0[15] = v3;
  sub_24A155540(v3, (__n128)xmmword_24A190860);
  sub_24A152FF0(v1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A146544;
  sub_24A155424();
  return AssetManager.process(requests:)();
}

uint64_t sub_24A146544()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v3 = v2;
  sub_24A154880();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A13A7F0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A146628()
{
  sub_24A13A7B8();
  MEMORY[0x24C5BD3C0](*(void *)(v0 + 96));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24A1466D0;
  sub_24A15489C();
  return MEMORY[0x270FA20F8](v2, v3, v4, v5, v6);
}

uint64_t sub_24A1466D0()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A1467AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A154A1C();
  sub_24A154D04();
  uint64_t v13 = v12[8];
  sub_24A154990();
  if (v22)
  {
    sub_24A131348();
    v14();
    if (qword_26976AA50 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_24A143E24(v15, (uint64_t)qword_26976B558);
    uint64_t v16 = (void *)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (sub_24A154FF4(v17))
    {
      uint64_t v18 = (_WORD *)sub_24A15588C();
      sub_24A1558E8(v18);
      sub_24A154BC4(&dword_24A120000, v19, v20, "result stream for download terminated unexpectedly");
      sub_24A144474();
    }

    sub_24A126340();
    sub_24A154934();
    swift_willThrow();
    sub_24A154AF4();
    v21();
  }
  else
  {
    sub_24A152FA0(v13, v12[7], &qword_26976AE98);
    sub_24A1558D0();
    sub_24A15582C();
    if (!v22)
    {
      uint64_t v27 = v12[7];
      uint64_t v28 = v12[3];
      uint64_t v29 = sub_24A154A84();
      v30(v29);
      sub_24A1549E4();
      v31();
      sub_24A153A6C(v27, v28);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_24A15488C();
      goto LABEL_12;
    }
    swift_willThrow();
    uint64_t v23 = sub_24A154A84();
    v24(v23);
    uint64_t v25 = sub_24A155804();
    v26(v25);
  }
  sub_24A155010();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
LABEL_12:
  sub_24A1549C8();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12);
}

uint64_t sub_24A146AC4()
{
  sub_24A13A7B8();
  sub_24A13A780();
  sub_24A154880();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A13A7F0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 80) = v0;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A146BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A154A1C();
  sub_24A154D04();
  uint64_t v13 = v12[8];
  uint64_t v14 = v12[5];
  uint64_t v15 = v12[3];
  uint64_t v16 = v12[4];
  *(void *)(swift_task_alloc() + 16) = v13;
  sub_24A123464(&qword_26976AE98);
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v14, *MEMORY[0x263F8F680], v15);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  sub_24A154CF8();
  sub_24A1549E4();
  v17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A15488C();
  sub_24A1549C8();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t sub_24A146CA0()
{
  sub_24A13A7B8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A146E1C()
{
  sub_24A13A7E4();
  uint64_t v1 = v0[5];
  sub_24A123464(&qword_26976B5C0);
  uint64_t v2 = type metadata accessor for AssetDownloadRequest();
  sub_24A13A7A0(v2);
  uint64_t v3 = (__n128 *)sub_24A154968();
  v0[16] = v3;
  sub_24A155540(v3, (__n128)xmmword_24A190860);
  sub_24A152FF0(v1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[17] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A146F24;
  sub_24A155424();
  return AssetManager.process(requests:)();
}

uint64_t sub_24A146F24()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v3 = v2;
  sub_24A154880();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A13A7F0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A147008()
{
  sub_24A13A7B8();
  MEMORY[0x24C5BD3C0](*(void *)(v0 + 104));
  swift_task_alloc();
  sub_24A155458();
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v2;
  v1[1] = sub_24A1470AC;
  sub_24A15489C();
  return MEMORY[0x270FA20F8](v3, v4, v5, v6, v7);
}

uint64_t sub_24A1470AC()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A147188()
{
  sub_24A154D04();
  uint64_t v1 = v0[9];
  sub_24A154990();
  if (v2)
  {
    sub_24A131348();
    v3();
    if (qword_26976AA50 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_24A143E24(v4, (uint64_t)qword_26976B558);
    uint64_t v5 = (void *)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (sub_24A154FF4(v6))
    {
      uint64_t v7 = (_WORD *)sub_24A15588C();
      sub_24A1558E8(v7);
      sub_24A154BC4(&dword_24A120000, v8, v9, "result stream for download terminated unexpectedly");
      sub_24A144474();
    }

    sub_24A126340();
    sub_24A154934();
    swift_willThrow();
    sub_24A154AF4();
    v10();
    goto LABEL_10;
  }
  sub_24A152FA0(v1, v0[8], &qword_26976B5E8);
  int v11 = sub_24A1558D0();
  uint64_t v13 = v0[14];
  uint64_t v12 = v0[15];
  uint64_t v14 = v0[13];
  if (v11 == 1)
  {
    v0[3] = *(void *)v0[8];
    sub_24A123464(&qword_26976C190);
    swift_willThrowTypedImpl();
    sub_24A1549E4();
    v15();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
LABEL_10:
    sub_24A155298();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A13A7C4();
    goto LABEL_12;
  }
  sub_24A153A6C(v0[8], v0[4]);
  sub_24A1549E4();
  v17();
  sub_24A154A78();
  v18();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A15488C();
LABEL_12:
  return v16();
}

uint64_t sub_24A1473FC()
{
  sub_24A13A7E4();
  swift_bridgeObjectRelease();
  sub_24A155298();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A14747C()
{
  sub_24A13A7E4();
  sub_24A131348();
  v0();
  sub_24A154CEC();
  v1();
  sub_24A155298();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v2();
}

uint64_t sub_24A147654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_24A1548DC();
  a23 = v26;
  a24 = v27;
  sub_24A154BB8();
  a22 = v25;
  if (qword_26976AA50 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_24A154D94(v28, (uint64_t)qword_26976B558);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (sub_24A154F98(v30))
  {
    a9 = v25 + 24;
    a10 = v25 + 16;
    a11 = *(void *)(v25 + 136);
    id v31 = (_DWORD *)sub_24A154A04();
    a13 = sub_24A155114();
    *id v31 = 136315394;
    uint64_t v32 = type metadata accessor for AssetDownloadRequest();
    uint64_t v33 = swift_bridgeObjectRetain();
    uint64_t v34 = MEMORY[0x24C5BD260](v33, v32);
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v37 = sub_24A14308C(v34, v36, &a13);
    sub_24A155354(v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_24A155330();
    sub_24A1547F4(&qword_26976B5B0, MEMORY[0x263F8F520]);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_24A154AF4();
    uint64_t v39 = v38();
    uint64_t v41 = sub_24A1556F0(v39, v40, &a13);
    sub_24A1552F0(v41);
    swift_bridgeObjectRelease();
    sub_24A154D40(&dword_24A120000, v29, v24, "start processing %s with priority %s");
    sub_24A154ED8();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_24A15567C(*(void *)(v25 + 48));
  id v54 = (char *)&dword_26976B618 + dword_26976B618;
  uint64_t v42 = swift_task_alloc();
  uint64_t v43 = (void *)sub_24A154CDC(v42);
  *uint64_t v43 = v44;
  v43[1] = sub_24A1478BC;
  sub_24A154864();
  return v48(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, v54, a13, a14, a15, a16);
}

uint64_t sub_24A1478BC()
{
  sub_24A13A7B8();
  sub_24A13A780();
  sub_24A154880();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A13A7F0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 168) = v0;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A147998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_24A1548DC();
  sub_24A154BB8();
  uint64_t v17 = v16[5];
  int64_t v18 = *(void *)(v17 + 16);
  uint64_t v19 = MEMORY[0x263F8EE78];
  if (v18)
  {
    uint64_t v21 = v16[8];
    uint64_t v20 = v16[9];
    uint64_t v54 = MEMORY[0x263F8EE78];
    sub_24A15218C(0, v18, 0);
    uint64_t v19 = v54;
    uint64_t v22 = type metadata accessor for AssetDownloadRequest();
    sub_24A13A7A0(v22);
    uint64_t v24 = v17 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    uint64_t v26 = *(void *)(v25 + 72);
    do
    {
      uint64_t v27 = v16[10];
      uint64_t v28 = v27 + *(int *)(v21 + 48);
      sub_24A152FF0(v24, v28);
      type metadata accessor for UUID();
      sub_24A1247B0();
      (*(void (**)(uint64_t, uint64_t))(v29 + 16))(v27, v28);
      a13 = v19;
      unint64_t v31 = *(void *)(v19 + 16);
      unint64_t v30 = *(void *)(v19 + 24);
      if (v31 >= v30 >> 1) {
        sub_24A15218C(v30 > 1, v31 + 1, 1);
      }
      uint64_t v32 = v16[10];
      *(void *)(v19 + 16) = v31 + 1;
      sub_24A152FA0(v32, v19+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v31, &qword_26976B600);
      v24 += v26;
      --v18;
    }
    while (v18);
    uint64_t v17 = v16[5];
  }
  uint64_t v33 = v16[16];
  uint64_t v34 = v16[13];
  uint64_t v51 = v16[14];
  uint64_t v52 = v16[19];
  uint64_t v35 = v16[11];
  uint64_t v36 = v16[12];
  uint64_t v53 = v16[10];
  uint64_t v37 = v16[7];
  uint64_t v50 = v16[4];
  uint64_t v38 = sub_24A148A04(v19);
  uint64_t v39 = (void *)swift_task_alloc();
  void v39[2] = v33;
  v39[3] = v38;
  v39[4] = v17;
  v39[5] = v37;
  sub_24A123464(&qword_26976B5E8);
  (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))(v34, *MEMORY[0x263F8F680], v35);
  sub_24A129370();
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  swift_bridgeObjectRelease();
  sub_24A1312CC();
  v40();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A15488C();
  sub_24A154864();
  return v42(v41, v42, v43, v44, v45, v46, v47, v48, v50, v51, v52, v53, a13, a14, a15, a16);
}

uint64_t sub_24A147C18()
{
  sub_24A13A7E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A147CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a1;
  uint64_t v24 = a3;
  uint64_t v4 = sub_24A123464(&qword_26976B690);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v22 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_24A123464(&qword_26976B5A0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A123464(&qword_26976C0D0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  uint64_t v15 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v4);
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v17 = (v9 + *(unsigned __int8 *)(v5 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v18 = (v6 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v19 + v16, v10, v7);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v19 + v17, v22, v15);
  *(void *)(v19 + v18) = v24;
  sub_24A1488D0((uint64_t)v13, (uint64_t)&unk_26976B7C0, v19);
  return swift_release();
}

uint64_t sub_24A147F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[5] = sub_24A123464(&qword_26976AE98);
  v5[6] = swift_task_alloc();
  uint64_t v6 = sub_24A123464(&qword_26976B6A8);
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = type metadata accessor for Asset(0);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  sub_24A123464(&qword_26976B648);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = type metadata accessor for UploadResponseMessage();
  v5[17] = swift_task_alloc();
  sub_24A123464(&qword_26976B6E0);
  v5[18] = swift_task_alloc();
  uint64_t v7 = sub_24A123464(&qword_26976B6E8);
  v5[19] = v7;
  v5[20] = *(void *)(v7 - 8);
  v5[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A14818C, 0, 0);
}

uint64_t sub_24A14818C()
{
  sub_24A13A7E4();
  uint64_t v1 = sub_24A123464(&qword_26976B5A0);
  MEMORY[0x24C5BD3C0](v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_24A14824C;
  sub_24A15489C();
  return MEMORY[0x270FA20F8](v3, v4, v5, v6, v7);
}

uint64_t sub_24A14824C()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

void sub_24A148328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24)
{
  sub_24A1548DC();
  a23 = v25;
  a24 = v26;
  sub_24A154BB8();
  a22 = v24;
  uint64_t v27 = v24[18];
  sub_24A154BA0(v27, 1, v24[16]);
  if (v28)
  {
    sub_24A15512C();
    uint64_t v67 = v29;
    sub_24A131348();
    v30();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A15488C();
    sub_24A154864();
    v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, v67, a13, a14, a15, a16);
  }
  else
  {
    sub_24A153A6C(v27, v24[17]);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v40 = v24[14];
      uint64_t v41 = v24[10];
      sub_24A152FA0(v24[17], v24[15], &qword_26976B648);
      uint64_t v42 = sub_24A154CF8();
      sub_24A129110(v42, v43, &qword_26976B648);
      sub_24A154BA0(v40, 1, v41);
      if (v28)
      {
        sub_24A126340();
        uint64_t v44 = sub_24A154934();
        sub_24A1555FC(v44);
        sub_24A123464(&qword_26976B690);
        AsyncThrowingStream.Continuation.yield(_:)();
        sub_24A1312CC();
        v45();
      }
      else
      {
        sub_24A153A6C(v24[14], v24[13]);
        if (qword_26976AA50 != -1) {
          swift_once();
        }
        uint64_t v46 = v24[12];
        uint64_t v47 = v24[13];
        uint64_t v48 = type metadata accessor for Logger();
        sub_24A143E24(v48, (uint64_t)qword_26976B558);
        sub_24A152FF0(v47, v46);
        uint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        BOOL v51 = sub_24A155408(v50);
        uint64_t v52 = v24[12];
        if (v51)
        {
          uint64_t v53 = v24[11];
          uint64_t v54 = sub_24A1444A4();
          a13 = sub_24A14448C();
          *(_DWORD *)uint64_t v54 = 136315138;
          sub_24A152FF0(v52, v53);
          uint64_t v55 = String.init<A>(describing:)();
          *(void *)(v54 + 4) = sub_24A14308C(v55, v56, &a13);
          swift_bridgeObjectRelease();
          sub_24A153EAC(v52, (void (*)(void))type metadata accessor for Asset);
          sub_24A154F14(&dword_24A120000, v49, v57, "successfully uploaded asset %s");
          sub_24A1444E4();
          sub_24A144474();
          sub_24A144474();
        }
        else
        {
          sub_24A153EAC(v24[12], (void (*)(void))type metadata accessor for Asset);
        }

        uint64_t v58 = v24[13];
        sub_24A152FF0(v58, v24[6]);
        swift_storeEnumTagMultiPayload();
        sub_24A123464(&qword_26976B690);
        sub_24A155314();
        sub_24A154A78();
        v59();
        sub_24A153EAC(v58, (void (*)(void))type metadata accessor for Asset);
      }
      sub_24A15417C(v24[15], &qword_26976B648);
      uint64_t v60 = (void *)swift_task_alloc();
      v24[22] = (uint64_t)v60;
      *uint64_t v60 = v24;
      v60[1] = sub_24A14824C;
      sub_24A15489C();
      sub_24A154864();
      MEMORY[0x270FA20F8](v61, v62, v63, v64, v65);
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      sub_24A154864();
    }
  }
}

uint64_t sub_24A1487C4()
{
  sub_24A15512C();
  sub_24A131348();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v1();
}

uint64_t sub_24A1488B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A1488D0(a1, a2, a3);
}

uint64_t sub_24A1488C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A1488D0(a1, a2, a3);
}

uint64_t sub_24A1488D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A129214();
  type metadata accessor for TaskPriority();
  uint64_t v6 = sub_24A1557D8();
  sub_24A154BA0(v6, 1, v4);
  if (v7)
  {
    sub_24A15417C(v3, &qword_26976C0D0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_24A1247EC();
    v8();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_24A148A04(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_24A123464(&qword_26976B730);
    uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE80];
  }
  uint64_t v4 = v1;
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_24A153568(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24A148AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v28 = a1;
  uint64_t v29 = a3;
  uint64_t v6 = sub_24A123464(&qword_26976B6F0);
  uint64_t v26 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v27 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_24A123464(&qword_26976B610);
  uint64_t v25 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_24A123464(&qword_26976C0D0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v6);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + v18 + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 0;
  *(void *)(v21 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v21 + v17, v12, v25);
  *(void *)(v21 + v18) = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v21 + v19, v27, v26);
  uint64_t v22 = v31;
  *(void *)(v21 + v20) = v30;
  *(void *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8)) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A14242C((uint64_t)v15, (uint64_t)&unk_26976B700, v21);
  return swift_release();
}

uint64_t sub_24A148D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  v7[15] = sub_24A123464(&qword_26976B5E8);
  v7[16] = swift_task_alloc();
  uint64_t v8 = sub_24A123464(&qword_26976B708);
  v7[17] = v8;
  v7[18] = *(void *)(v8 - 8);
  v7[19] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AssetDownloadRequest();
  v7[20] = v9;
  v7[21] = *(void *)(v9 - 8);
  v7[22] = swift_task_alloc();
  sub_24A123464(&qword_26976B4D0);
  v7[23] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  v7[24] = v10;
  v7[25] = *(void *)(v10 - 8);
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for TaskPriority();
  v7[28] = v11;
  v7[29] = *(void *)(v11 - 8);
  v7[30] = swift_task_alloc();
  v7[31] = type metadata accessor for AssetDownloadResponse();
  v7[32] = swift_task_alloc();
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  sub_24A123464(&qword_26976B710);
  v7[35] = swift_task_alloc();
  v7[36] = swift_task_alloc();
  v7[37] = type metadata accessor for DownloadResponseMessage();
  v7[38] = swift_task_alloc();
  sub_24A123464(&qword_26976B718);
  v7[39] = swift_task_alloc();
  uint64_t v12 = sub_24A123464(&qword_26976B720);
  v7[40] = v12;
  v7[41] = *(void *)(v12 - 8);
  v7[42] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A149148, 0, 0);
}

uint64_t sub_24A149148()
{
  sub_24A13A7E4();
  uint64_t v1 = sub_24A123464(&qword_26976B610);
  MEMORY[0x24C5BD3C0](v1);
  swift_task_alloc();
  sub_24A155458();
  *(void *)(v0 + 344) = v2;
  *uint64_t v2 = v3;
  v2[1] = sub_24A149234;
  sub_24A1444BC();
  return MEMORY[0x270FA20F8](v4, v5, v6, v7, v8);
}

uint64_t sub_24A149234()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A14933C()
{
  uint64_t v127 = v0;
  uint64_t v2 = (void *)v0;
  v126[1] = *MEMORY[0x263EF8340];
  sub_24A154990();
  if (v3) {
    goto LABEL_3;
  }
  uint64_t v7 = sub_24A129370();
  sub_24A153A6C(v7, v8);
  int v9 = sub_24A1558D0();
  if (v9 == 1)
  {
    uint64_t v10 = **(void **)(v0 + 304);
    if (qword_26976AA50 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_24A143E24(v11, (uint64_t)qword_26976B558);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (sub_24A155254(v13))
    {
      uint64_t v14 = sub_24A1444A4();
      uint64_t v15 = (void *)sub_24A154A9C();
      *(_DWORD *)uint64_t v14 = 138412290;
      sub_24A13B2E8();
      sub_24A154934();
      *uint64_t v16 = v10;
      swift_bridgeObjectRetain();
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v14 + 4) = v17;
      void *v15 = v17;
      sub_24A1551C4();
      _os_log_impl(&dword_24A120000, v12, v1, "requests failed due to server blocking %@", (uint8_t *)v14, 0xCu);
      sub_24A123464(&qword_26976B4E0);
      swift_arrayDestroy();
      sub_24A144474();
      sub_24A144474();
    }
    else
    {
      sub_24A1551C4();
    }

    sub_24A13B2E8();
    uint64_t v33 = sub_24A154934();
    *uint64_t v34 = v10;
    *(void *)(v0 + 32) = v33;
    sub_24A123464(&qword_26976B6F0);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v0 + 280);
  uint64_t v18 = *(void *)(v0 + 288);
  uint64_t v20 = *(void *)(v0 + 248);
  sub_24A123464(&qword_26976B728);
  uint64_t v21 = sub_24A154CF8();
  sub_24A152FA0(v21, v22, &qword_26976B710);
  sub_24A129110(v18, v19, &qword_26976B710);
  sub_24A154BA0(v19, 1, v20);
  if (v3)
  {
    swift_bridgeObjectRelease();
    if (qword_26976AA50 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_24A154D94(v23, (uint64_t)qword_26976B558);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (sub_24A155408(v25))
    {
      uint64_t v26 = *(void *)(v0 + 160);
      uint64_t v27 = sub_24A1444A4();
      v126[0] = sub_24A14448C();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v28 = swift_bridgeObjectRetain();
      uint64_t v29 = MEMORY[0x24C5BD260](v28, v26);
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      *(void *)(v27 + 4) = sub_24A14308C(v29, v31, v126);
      uint64_t v2 = (void *)v0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_24A154F14(&dword_24A120000, v24, v32, "failed to process requests %s");
      sub_24A155708();
      sub_24A144474();
      sub_24A144474();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v48 = v2[36];
    uint64_t v49 = (uint64_t *)v2[16];
    sub_24A126340();
    uint64_t *v49 = sub_24A154934();
    swift_storeEnumTagMultiPayload();
    sub_24A123464(&qword_26976B6F0);
    sub_24A155314();
    sub_24A1558C4();
    sub_24A15543C();
    v50();
    uint64_t v51 = v48;
    goto LABEL_25;
  }
  sub_24A153A6C(*(void *)(v0 + 280), *(void *)(v0 + 272));
  if (qword_26976AA50 != -1) {
    swift_once();
  }
  uint64_t v35 = *(void *)(v0 + 264);
  uint64_t v36 = *(void *)(v0 + 272);
  uint64_t v124 = type metadata accessor for Logger();
  sub_24A143E24(v124, (uint64_t)qword_26976B558);
  sub_24A152FF0(v36, v35);
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v40 = *(void *)(v0 + 264);
  if (v39)
  {
    uint64_t v41 = sub_24A154A04();
    v126[0] = sub_24A155114();
    *(_DWORD *)uint64_t v41 = 136315394;
    sub_24A1547F4(&qword_26976C1C0, MEMORY[0x263F06EA8]);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 72) = sub_24A14308C(v42, v43, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A153EAC(v40, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    *(_WORD *)(v41 + 12) = 2080;
    static Task<>.currentPriority.getter();
    sub_24A1547F4(&qword_26976B5B0, MEMORY[0x263F8F520]);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v46 = v45;
    sub_24A15543C();
    v47();
    *(void *)(v0 + 80) = sub_24A14308C(v44, v46, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A154D40(&dword_24A120000, v37, v38, "successfully downloaded asset at %s with priority %s");
    sub_24A154EB8();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    sub_24A153EAC(v40, (void (*)(void))type metadata accessor for AssetDownloadResponse);
  }

  if (!*(void *)(*(void *)(v0 + 96) + 16) || (unint64_t v60 = sub_24A1610E4(*(void *)(v0 + 272)), (v58 & 1) == 0))
  {
    sub_24A1557C0(*(void *)(v0 + 184), v58, v59, *(void *)(v0 + 192));
    goto LABEL_36;
  }
  uint64_t v61 = *(void *)(v0 + 192);
  uint64_t v62 = *(void *)(v0 + 200);
  uint64_t v64 = v2[22];
  uint64_t v63 = v2[23];
  uint64_t v65 = v2[20];
  sub_24A152FF0(*(void *)(v2[12] + 56) + *(void *)(v2[21] + 72) * v60, v64);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16);
  v66(v63, v64 + *(int *)(v65 + 36), v61);
  sub_24A153EAC(v64, (void (*)(void))type metadata accessor for AssetDownloadRequest);
  _s11CloudAssets21UploadResponseMessageOwst_0(v63, 0, 1, v61);
  sub_24A154990();
  if (v3)
  {
LABEL_36:
    uint64_t v84 = v2[23];
    swift_bridgeObjectRelease();
    sub_24A15417C(v84, &qword_26976B4D0);
    sub_24A126340();
    uint64_t v85 = sub_24A154934();
    sub_24A1557E4(v85);
    sub_24A123464(&qword_26976B6F0);
    AsyncThrowingStream.Continuation.yield(_:)();
    sub_24A129370();
    sub_24A15543C();
    v86();
    uint64_t v87 = (void *)Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.error.getter();
    if (sub_24A154FF4(v88))
    {
      uint64_t v89 = (_WORD *)sub_24A15588C();
      sub_24A1558E8(v89);
      sub_24A154BC4(&dword_24A120000, v90, v91, "invalid request id");
      sub_24A144474();
    }
    uint64_t v92 = v2[36];
    uint64_t v93 = v2[34];

    sub_24A153EAC(v93, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    sub_24A15417C(v92, &qword_26976B710);
    goto LABEL_3;
  }
  uint64_t v67 = v2[34];
  uint64_t v68 = v2[32];
  uint64_t v70 = v2[26];
  uint64_t v69 = v2[27];
  uint64_t v71 = v2[24];
  sub_24A155788();
  v72();
  sub_24A152FF0(v67, v68);
  v66(v70, v69, v71);
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.default.getter();
  uint64_t v75 = v74;
  BOOL v76 = os_log_type_enabled(v73, v74);
  uint64_t v77 = v2[32];
  unint64_t v123 = v2;
  if (v76)
  {
    uint64_t v78 = sub_24A154A04();
    v126[0] = sub_24A155114();
    *(_DWORD *)uint64_t v78 = 136315394;
    sub_24A1547F4(&qword_26976C1C0, MEMORY[0x263F06EA8]);
    uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
    v123[7] = sub_24A14308C(v79, v80, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A153EAC(v77, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    *(_WORD *)(v78 + 12) = 2080;
    uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
    v123[8] = sub_24A14308C(v81, v82, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A1247EC();
    v83();
    _os_log_impl(&dword_24A120000, v73, (os_log_type_t)v75, "moving file from %s to %s", (uint8_t *)v78, 0x16u);
    sub_24A154ED8();
    sub_24A144474();
    uint64_t v2 = v123;
    sub_24A144474();
  }
  else
  {
    sub_24A153EAC(v77, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    uint64_t v94 = sub_24A154CF8();
    v95(v94);
  }

  String.utf8CString.getter();
  sandbox_extension_consume();
  sub_24A1557D8();
  swift_release();
  uint64_t v96 = v2[31];
  swift_bridgeObjectRelease();
  id v97 = objc_msgSend(self, sel_defaultManager);
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v96 + 24));
  uint64_t v99 = v98;
  URL._bridgeToObjectiveC()(v100);
  BOOL v102 = v101;
  v2[5] = 0;
  unsigned int v103 = objc_msgSend(v97, sel_moveItemAtURL_toURL_error_, v99, v101, v2 + 5);

  uint64_t v104 = (void *)v2[5];
  if (v103)
  {
    uint64_t v105 = v2[34];
    uint64_t v125 = v2[36];
    sub_24A152FF0(v105, v2[16]);
    swift_storeEnumTagMultiPayload();
    id v106 = v104;
    sub_24A123464(&qword_26976B6F0);
    AsyncThrowingStream.Continuation.yield(_:)();
    sub_24A15543C();
    v107();
    sandbox_extension_release();
    sub_24A1247EC();
    v108();
    sub_24A153EAC(v105, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    uint64_t v51 = v125;
LABEL_25:
    sub_24A15417C(v51, &qword_26976B710);
LABEL_26:
    uint64_t v52 = (void *)swift_task_alloc();
    v2[43] = v52;
    void *v52 = v2;
    v52[1] = sub_24A149234;
    sub_24A1444BC();
    return MEMORY[0x270FA20F8](v53, v54, v55, v56, v57);
  }
  sub_24A1550C4();
  id v109 = v104;
  uint64_t v110 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  sub_24A15543C();
  v111();
  sub_24A153EAC((uint64_t)v99, (void (*)(void))type metadata accessor for AssetDownloadResponse);
  sub_24A15417C(v75, &qword_26976B710);
  sub_24A154B28();
  v112();
  if (qword_26976AA50 != -1) {
    swift_once();
  }
  sub_24A143E24(v124, (uint64_t)qword_26976B558);
  id v113 = v110;
  id v114 = v110;
  uint64_t v115 = Logger.logObject.getter();
  os_log_type_t v116 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v115, v116))
  {
    uint64_t v117 = (_DWORD *)sub_24A1444A4();
    uint64_t v118 = (void *)sub_24A154A9C();
    *uint64_t v117 = 138412290;
    id v119 = v110;
    uint64_t v120 = _swift_stdlib_bridgeErrorToNSError();
    v123[3] = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v118 = v120;

    sub_24A154F14(&dword_24A120000, v115, v121, "failed to process requests due to error %@");
    sub_24A123464(&qword_26976B4E0);
    sub_24A155708();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
  }
  unint64_t v122 = (uint64_t *)v123[16];

  sub_24A126340();
  *unint64_t v122 = sub_24A154934();
  sub_24A129370();
  swift_storeEnumTagMultiPayload();
  sub_24A123464(&qword_26976B6F0);
  AsyncThrowingStream.Continuation.yield(_:)();

LABEL_3:
  sub_24A131348();
  v4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v5();
}

uint64_t sub_24A14A4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_24A1554B8();
  uint64_t v47 = *MEMORY[0x263EF8340];
  sub_24A131348();
  v19();
  uint64_t v20 = (void *)v18[2];
  if (qword_26976AA50 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_24A143E24(v21, (uint64_t)qword_26976B558);
  id v22 = v20;
  id v23 = v20;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    sub_24A1444A4();
    uint64_t v26 = (void *)sub_24A154A9C();
    sub_24A155270(5.7779e-34);
    id v27 = v20;
    uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
    v18[3] = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v26 = v28;

    sub_24A154CA8(&dword_24A120000, v24, v29, "failed to process requests due to error %@");
    sub_24A123464(&qword_26976B4E0);
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
  }
  sub_24A126340();
  uint64_t v30 = sub_24A154934();
  sub_24A1557E4(v30);
  sub_24A123464(&qword_26976B6F0);
  AsyncThrowingStream.Continuation.yield(_:)();

  uint64_t v41 = v18[30];
  uint64_t v42 = v18[27];
  uint64_t v43 = v18[26];
  uint64_t v44 = v18[23];
  uint64_t v45 = v18[22];
  uint64_t v46 = v18[16];
  sub_24A131348();
  v31();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  sub_24A15554C();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, v41, v42, v43, v44, v45, v46, v47, a16, a17, a18);
}

void sub_24A14A798()
{
  sub_24A139550();
  v31[2] = v0;
  uint64_t v32 = v1;
  char v3 = v2;
  v31[1] = v4;
  uint64_t v5 = sub_24A123464(&qword_26976B690);
  sub_24A12477C();
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v10);
  v31[0] = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A123464(v3);
  sub_24A12477C();
  uint64_t v13 = v12;
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v16);
  uint64_t v17 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_24A123464(&qword_26976C0D0);
  uint64_t v19 = sub_24A1291B8(v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for TaskPriority();
  sub_24A1557C0((uint64_t)v21, v23, v24, v22);
  sub_24A154B00();
  v25();
  uint64_t v26 = v5;
  sub_24A154B00();
  v27();
  unint64_t v28 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v29 = (v15 + *(unsigned __int8 *)(v7 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = 0;
  *(void *)(v30 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v30 + v28, v17, v11);
  (*(void (**)(unint64_t, void, uint64_t))(v7 + 32))(v30 + v29, v31[0], v26);
  sub_24A14242C((uint64_t)v21, v32, v30);
  swift_release();
  sub_24A139538();
}

uint64_t sub_24A14A99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[6] = type metadata accessor for AssetDownloadResponse();
  v5[7] = swift_task_alloc();
  v5[8] = sub_24A123464(&qword_26976AE98);
  v5[9] = swift_task_alloc();
  uint64_t v6 = sub_24A123464(&qword_26976B6A8);
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  v5[13] = sub_24A123464(&qword_26976B5E8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  sub_24A123464(&qword_26976B5F0);
  v5[16] = swift_task_alloc();
  uint64_t v7 = sub_24A123464(&qword_26976B5F8);
  v5[17] = v7;
  v5[18] = *(void *)(v7 - 8);
  v5[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A14AB98, 0, 0);
}

uint64_t sub_24A14AB98()
{
  sub_24A13A7E4();
  uint64_t v0 = sub_24A123464(&qword_26976B5D0);
  MEMORY[0x24C5BD3C0](v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_24A154CDC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_24A14AC50;
  sub_24A15489C();
  return MEMORY[0x270FA20F8](v4, v5, v6, v7, v8);
}

uint64_t sub_24A14AC50()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A14AD2C()
{
  sub_24A155108();
  uint64_t v1 = v0[16];
  sub_24A154990();
  if (v2)
  {
    sub_24A131348();
    v3();
    sub_24A155148();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A13A7C4();
    sub_24A1552B4();
    __asm { BRAA            X1, X16 }
  }
  sub_24A152FA0(v1, v0[15], &qword_26976B5E8);
  uint64_t v6 = sub_24A1558C4();
  sub_24A129110(v6, v7, &qword_26976B5E8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v9 = (void *)v0[14];
  uint64_t v10 = (void *)v0[9];
  if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v10 = *v9;
  }
  else
  {
    uint64_t v12 = v0[6];
    uint64_t v11 = v0[7];
    sub_24A153A6C((uint64_t)v9, v11);
    sub_24A152FF0(v11 + *(int *)(v12 + 20), (uint64_t)v10);
    sub_24A153EAC(v11, (void (*)(void))type metadata accessor for AssetDownloadResponse);
  }
  sub_24A154CF8();
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = v0[15];
  sub_24A123464(&qword_26976B690);
  AsyncThrowingStream.Continuation.yield(_:)();
  sub_24A154A78();
  v14();
  sub_24A15417C(v13, &qword_26976B5E8);
  uint64_t v15 = swift_task_alloc();
  uint64_t v16 = (void *)sub_24A154CDC(v15);
  *uint64_t v16 = v17;
  v16[1] = sub_24A14AC50;
  sub_24A15489C();
  sub_24A1552B4();
  return MEMORY[0x270FA20F8](v18, v19, v20, v21, v22);
}

uint64_t sub_24A14AF70()
{
  sub_24A15547C();
  sub_24A131348();
  v1();
  *(void *)(v0 + 24) = *(void *)(v0 + 16);
  sub_24A123464(&qword_26976B690);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A155148();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v2();
}

uint64_t AssetManager.process(request:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_24A154FB4((uint64_t)sub_24A14B058);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_24A154FB4((uint64_t)sub_24A14C2A0);
}

uint64_t sub_24A14B058()
{
  sub_24A13A7E4();
  uint64_t v1 = v0[2];
  sub_24A123464(&qword_26976B588);
  uint64_t v2 = type metadata accessor for AssetUploadRequest();
  sub_24A13A7A0(v2);
  uint64_t v3 = (__n128 *)sub_24A154968();
  v0[4] = v3;
  sub_24A155540(v3, (__n128)xmmword_24A190860);
  sub_24A152FF0(v1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A14B15C;
  return AssetManager.process(requests:)();
}

uint64_t sub_24A14B15C()
{
  sub_24A13A7E4();
  uint64_t v3 = v2;
  sub_24A13A780();
  uint64_t v5 = v4;
  sub_24A154880();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_24A13A7F0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    *(void *)(v5 + 56) = v3;
  }
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_24A14B254()
{
  sub_24A13A7B8();
  uint64_t v1 = *(void *)(v0 + 56);
  type metadata accessor for AssetUploadCoordinator();
  uint64_t v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = v1;
  uint64_t v3 = sub_24A154FC0();
  return v4(v3);
}

uint64_t sub_24A14B2C8()
{
  sub_24A13A7B8();
  swift_bridgeObjectRelease();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A14B5A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, os_log_type_t type, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_24A1554B8();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  if (qword_26976AA50 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  v26[40] = sub_24A143E24(v29, (uint64_t)qword_26976B558);
  swift_bridgeObjectRetain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    a12 = v26[38];
    a10 = v26 + 4;
    a11 = v26[37];
    uint64_t v32 = (uint8_t *)sub_24A154A04();
    a13 = sub_24A155114();
    a15 = a13;
    *(_DWORD *)uint64_t v32 = 136315394;
    uint64_t v33 = type metadata accessor for AssetUploadRequest();
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = MEMORY[0x24C5BD260](v34, v33);
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    v26[4] = sub_24A14308C(v35, v37, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_24A1557A0();
    sub_24A1547F4(&qword_26976B5B0, MEMORY[0x263F8F520]);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_24A1247EC();
    uint64_t v39 = v38();
    v26[5] = sub_24A1556F0(v39, v40, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A120000, v30, v31, "start processing %s with priority %s", v32, 0x16u);
    sub_24A154EB8();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_24A15567C(v26[7]);
  os_log_type_t typea = (char *)&dword_26976B5A8 + dword_26976B5A8;
  swift_bridgeObjectRetain();
  swift_task_alloc();
  sub_24A155458();
  v26[41] = v41;
  *uint64_t v41 = v42;
  v41[1] = sub_24A14B87C;
  sub_24A15554C();
  return v46(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, typea, a15, a16, a17, a18);
}

uint64_t sub_24A14B87C()
{
  sub_24A13A7B8();
  sub_24A13A780();
  sub_24A154880();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A13A7F0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 336) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A14B974()
{
  uint64_t v20 = *(void *)(v0 + 288);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v16 = *(void *)(v0 + 128);
  uint64_t v17 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 104);
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t v18 = *(void *)(v0 + 48);
  *(_DWORD *)(v0 + 368) = *MEMORY[0x263F8F680];
  sub_24A15577C();
  v6();
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  sub_24A154B28();
  v7();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v13, v1, v12);
  sub_24A123464(&qword_26976B648);
  sub_24A15577C();
  v8();
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v17, v15, v16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v9;
  v9[2] = v20;
  v9[3] = v17;
  v9[4] = v13;
  v9[5] = v18;
  v9[6] = v19;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v10;
  sub_24A123464(&qword_26976B650);
  *uint64_t v10 = v0;
  v10[1] = sub_24A14BBE0;
  sub_24A1444BC();
  return MEMORY[0x270FA2360]();
}

uint64_t sub_24A14BBE0()
{
  sub_24A13A7B8();
  sub_24A13A780();
  sub_24A154880();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A13A7F0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 360) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A14BCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_24A1548DC();
  sub_24A154BB8();
  sub_24A154AB4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A154864();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_24A14BDA0()
{
  uint64_t v28 = v0;
  uint64_t v25 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (sub_24A155254(v2))
  {
    uint64_t v3 = (_DWORD *)sub_24A1444A4();
    uint64_t v27 = sub_24A14448C();
    *uint64_t v3 = 136315138;
    uint64_t v4 = type metadata accessor for AssetSkeleton();
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = MEMORY[0x24C5BD260](v5, v4);
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = sub_24A14308C(v6, v8, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_24A154CA8(&dword_24A120000, v1, v9, "created ephemeral assets %s");
    sub_24A1444E4();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unsigned int v23 = *(_DWORD *)(v0 + 368);
  uint64_t v24 = *(void *)(v0 + 256);
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  sub_24A154B00();
  v15();
  *(void *)(swift_task_alloc() + 16) = v10;
  sub_24A123464(&qword_26976AE98);
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v11, v23, v14);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  swift_task_dealloc();
  type metadata accessor for AssetsUploadCoordinator();
  sub_24A155840();
  uint64_t v26 = sub_24A12BB8C(v25, v24, v12);
  sub_24A154AF4();
  v16();
  sub_24A1312CC();
  v17();
  sub_24A154B28();
  v18();
  sub_24A1247EC();
  v19();
  sub_24A1247EC();
  v20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v21(v26);
}

uint64_t sub_24A14C13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_24A1548DC();
  sub_24A154BB8();
  uint64_t v34 = v16[34];
  uint64_t v35 = v16[36];
  uint64_t v33 = v16[29];
  uint64_t v18 = v16[26];
  uint64_t v17 = v16[27];
  sub_24A131348();
  v19();
  uint64_t v20 = sub_24A1558C4();
  v21(v20);
  sub_24A154AF4();
  v22();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v33, v18);
  sub_24A154B28();
  v23();
  sub_24A154AB4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A154864();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, v33, v34, v35, a14, a15, a16);
}

uint64_t sub_24A14C2A0()
{
  sub_24A13A7E4();
  uint64_t v1 = v0[2];
  sub_24A123464(&qword_26976B5C0);
  uint64_t v2 = type metadata accessor for AssetDownloadRequest();
  sub_24A13A7A0(v2);
  uint64_t v3 = (__n128 *)sub_24A154968();
  v0[4] = v3;
  sub_24A155540(v3, (__n128)xmmword_24A190860);
  sub_24A152FF0(v1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A14C3A4;
  return AssetManager.process(requests:)();
}

uint64_t sub_24A14C3A4()
{
  sub_24A13A7E4();
  uint64_t v3 = v2;
  sub_24A13A780();
  uint64_t v5 = v4;
  sub_24A154880();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_24A13A7F0();
  *unint64_t v8 = v7;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    *(void *)(v5 + 56) = v3;
  }
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_24A14C49C()
{
  sub_24A13A7B8();
  uint64_t v1 = *(void *)(v0 + 56);
  type metadata accessor for AssetDownloadCoordinator();
  uint64_t v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = v1;
  uint64_t v3 = sub_24A154FC0();
  return v4(v3);
}

uint64_t sub_24A14C608(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, os_log_type_t type, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27)
{
  sub_24A1554B8();
  a26 = v28;
  a27 = v29;
  a25 = v27;
  if (qword_26976AA50 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_24A154D94(v30, (uint64_t)qword_26976B558);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)sub_24A154A04();
    a16 = sub_24A155114();
    *(_DWORD *)uint64_t v33 = 136315394;
    uint64_t v34 = type metadata accessor for AssetDownloadRequest();
    uint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v36 = MEMORY[0x24C5BD260](v35, v34);
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    v27[2] = sub_24A14308C(v36, v38, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_24A1557A0();
    sub_24A1547F4(&qword_26976B5B0, MEMORY[0x263F8F520]);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_24A1247EC();
    uint64_t v40 = v39();
    v27[3] = sub_24A1556F0(v40, v41, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A120000, v31, v32, "start processing %s with priority %s", v33, 0x16u);
    sub_24A154EB8();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_task_alloc();
  sub_24A155458();
  v27[15] = v42;
  *uint64_t v42 = v43;
  v42[1] = sub_24A14C8A4;
  sub_24A15554C();
  return AssetManager.process(requests:)();
}

uint64_t sub_24A14C8A4()
{
  sub_24A13A7B8();
  sub_24A13A780();
  sub_24A154880();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A13A7F0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 128) = v0;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A14C980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A154A1C();
  sub_24A154D04();
  uint64_t v13 = v12[12];
  uint64_t v14 = v12[10];
  uint64_t v15 = v12[7];
  uint64_t v16 = v12[6];
  sub_24A1558C4();
  sub_24A154B00();
  v17();
  type metadata accessor for AssetsDownloadCoordinator();
  sub_24A155840();
  uint64_t v18 = sub_24A131610(v14);
  _s11CloudAssets21UploadResponseMessageOwst_0(v15, 1, 1, v13);
  uint64_t v19 = (void *)swift_allocObject();
  void v19[2] = 0;
  v19[3] = 0;
  v19[4] = v18;
  v19[5] = v16;
  swift_retain();
  sub_24A1488D0(v15, (uint64_t)&unk_26976B670, (uint64_t)v19);
  swift_release();
  sub_24A1549E4();
  v20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A154FC0();
  sub_24A1549C8();
  return v23(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
}

uint64_t sub_24A14CAC0()
{
  sub_24A13A7E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A14CB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v35 = a2;
  uint64_t v38 = a1;
  uint64_t v46 = sub_24A123464(&qword_26976B6C0);
  uint64_t v43 = *(void *)(v46 - 8);
  uint64_t v39 = *(void *)(v43 + 64);
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_24A123464(&qword_26976AF78);
  uint64_t v7 = *(void *)(v44 - 8);
  uint64_t v34 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v44);
  uint64_t v42 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_24A123464(&qword_26976B638);
  uint64_t v31 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  os_log_type_t v32 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24A123464(&qword_26976B5A0);
  uint64_t v30 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_24A123464(&qword_26976C0D0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v18;
  uint64_t v19 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v35, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v9);
  uint64_t v29 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v42, v37, v44);
  uint64_t v20 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v45, v38, v46);
  unint64_t v21 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v22 = (v14 + *(unsigned __int8 *)(v10 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v23 = (v11 + *(unsigned __int8 *)(v7 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v24 = (v34 + *(unsigned __int8 *)(v20 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v25 = (v39 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = 0;
  *(void *)(v26 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v26 + v21, v15, v30);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v26 + v22, v32, v31);
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v26 + v23, v42, v44);
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v26 + v24, v45, v46);
  uint64_t v27 = v41;
  *(void *)(v26 + v25) = v40;
  *(void *)(v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = v27;
  swift_bridgeObjectRetain();
  sub_24A14242C((uint64_t)v33, (uint64_t)&unk_26976B6D0, v26);
  return swift_release();
}

uint64_t sub_24A14CFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  v8[16] = a4;
  uint64_t v9 = sub_24A123464(&qword_26976AF68);
  v8[21] = v9;
  v8[22] = *(void *)(v9 - 8);
  v8[23] = swift_task_alloc();
  uint64_t v10 = sub_24A123464(&qword_26976B6D8);
  v8[24] = v10;
  v8[25] = *(void *)(v10 - 8);
  v8[26] = swift_task_alloc();
  v8[27] = sub_24A123464(&qword_26976B648);
  v8[28] = swift_task_alloc();
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v8[31] = type metadata accessor for UploadResponseMessage();
  v8[32] = swift_task_alloc();
  sub_24A123464(&qword_26976B6E0);
  v8[33] = swift_task_alloc();
  uint64_t v11 = sub_24A123464(&qword_26976B6E8);
  v8[34] = v11;
  v8[35] = *(void *)(v11 - 8);
  v8[36] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A14D1F4, 0, 0);
}

uint64_t sub_24A14D1F4()
{
  sub_24A13A7E4();
  uint64_t v1 = sub_24A123464(&qword_26976B5A0);
  MEMORY[0x24C5BD3C0](v1);
  *(unsigned char *)(v0 + 304) = 0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_24A14D2B8;
  sub_24A15489C();
  return MEMORY[0x270FA20F8](v3, v4, v5, v6, v7);
}

uint64_t sub_24A14D2B8()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A14D394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_24A1548DC();
  a23 = v25;
  a24 = v26;
  sub_24A154BB8();
  a22 = v24;
  uint64_t v27 = *(void *)(v24 + 264);
  sub_24A154BA0(v27, 1, *(void *)(v24 + 248));
  if (v28)
  {
    char v29 = *(unsigned char *)(v24 + 304);
    sub_24A131348();
    v30();
    if ((v29 & 1) == 0)
    {
      if (qword_26976AA50 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_24A143E24(v31, (uint64_t)qword_26976B558);
      sub_24A1557D8();
      swift_bridgeObjectRetain_n();
      os_log_type_t v32 = (void *)Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (sub_24A154F5C(v33))
      {
        a11 = v24 + 88;
        a12 = v24 + 64;
        uint64_t v34 = (_DWORD *)sub_24A1444A4();
        a13 = sub_24A14448C();
        *uint64_t v34 = 136315138;
        a10 = v34 + 1;
        uint64_t v35 = type metadata accessor for AssetUploadRequest();
        uint64_t v36 = swift_bridgeObjectRetain();
        uint64_t v37 = MEMORY[0x24C5BD260](v36, v35);
        unint64_t v39 = v38;
        swift_bridgeObjectRelease();
        *(void *)(v24 + 88) = sub_24A14308C(v37, v39, &a13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_24A154FD4(&dword_24A120000, v40, v41, "ephemeral asset not received for request %s");
        sub_24A154EF8();
        sub_24A144474();
        sub_24A144474();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_24A126340();
      *(void *)(v24 + 64) = sub_24A154934();
      sub_24A123464(&qword_26976B6C0);
      CheckedContinuation.resume(throwing:)();
    }
    *(void *)(v24 + 72) = 0;
    sub_24A123464(&qword_26976AF78);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    *(void *)(v24 + 80) = 0;
    sub_24A123464(&qword_26976B638);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    sub_24A1550E0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A13A7C4();
    sub_24A154864();
    return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    sub_24A153A6C(v27, *(void *)(v24 + 256));
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v52 = *(void *)(v24 + 232);
        uint64_t v53 = *(void *)(v24 + 240);
        sub_24A152FA0(*(void *)(v24 + 256), v53, &qword_26976B648);
        sub_24A129110(v53, v52, &qword_26976B648);
        sub_24A123464(&qword_26976B638);
        AsyncThrowingStream.Continuation.yield(_:)();
        sub_24A154A78();
        v54();
        if (qword_26976AA50 != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        sub_24A143E24(v55, (uint64_t)qword_26976B558);
        uint64_t v56 = sub_24A154CF8();
        sub_24A129110(v56, v57, v58);
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.default.getter();
        BOOL v61 = sub_24A155254(v60);
        uint64_t v62 = *(void *)(v24 + 240);
        if (v61)
        {
          uint64_t v64 = *(void *)(v24 + 224);
          uint64_t v63 = *(void *)(v24 + 232);
          uint64_t v65 = sub_24A1444A4();
          a13 = sub_24A14448C();
          *(_DWORD *)uint64_t v65 = 136315138;
          sub_24A129110(v64, v63, &qword_26976B648);
          uint64_t v66 = String.init<A>(describing:)();
          *(void *)(v65 + 4) = sub_24A14308C(v66, v67, &a13);
          swift_bridgeObjectRelease();
          sub_24A15417C(v64, &qword_26976B648);
          sub_24A154CA8(&dword_24A120000, v59, v68, "get result for persisting an asset %s");
          sub_24A154EF8();
          sub_24A144474();
          sub_24A144474();
        }
        else
        {
          uint64_t v83 = *(void *)(v24 + 224);

          sub_24A15417C(v83, &qword_26976B648);
        }
        sub_24A15417C(v62, &qword_26976B648);
        break;
      case 2:
        uint64_t v69 = *(uint64_t **)(v24 + 256);
        uint64_t v70 = *v69;
        *(void *)(v24 + 112) = *v69;
        swift_bridgeObjectRetain();
        sub_24A123464(&qword_26976AF78);
        AsyncThrowingStream.Continuation.yield(_:)();
        sub_24A1312CC();
        v71();
        if (qword_26976AA50 != -1) {
          swift_once();
        }
        uint64_t v72 = type metadata accessor for Logger();
        sub_24A143E24(v72, (uint64_t)qword_26976B558);
        swift_bridgeObjectRetain();
        uint64_t v73 = (void *)Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.default.getter();
        if (sub_24A154F5C(v74))
        {
          uint64_t v75 = sub_24A1444A4();
          a13 = sub_24A14448C();
          *(_DWORD *)uint64_t v75 = 136315138;
          *(void *)(v24 + 120) = v70;
          swift_bridgeObjectRetain();
          uint64_t v76 = String.init<A>(describing:)();
          *(void *)(v75 + 4) = sub_24A14308C(v76, v77, &a13);
          swift_bridgeObjectRelease();
          sub_24A1551C4();
          sub_24A154FD4(&dword_24A120000, v78, v79, "get signal for an ephemeral asset %s");
          sub_24A154EF8();
          sub_24A144474();
          sub_24A144474();
        }
        else
        {
          sub_24A1551C4();
        }

        break;
      case 3:
        uint64_t v80 = **(void **)(v24 + 256);
        sub_24A13B2E8();
        uint64_t v81 = sub_24A154934();
        *unint64_t v82 = v80;
        *(void *)(v24 + 96) = v81;
        sub_24A123464(&qword_26976B638);
        AsyncThrowingStream.Continuation.finish(throwing:)();
        break;
      default:
        *(void *)(v24 + 104) = **(void **)(v24 + 256);
        sub_24A123464(&qword_26976B6C0);
        CheckedContinuation.resume(returning:)();
        *(unsigned char *)(v24 + 304) = 1;
        break;
    }
    uint64_t v84 = (void *)swift_task_alloc();
    *(void *)(v24 + 296) = v84;
    *uint64_t v84 = v24;
    v84[1] = sub_24A14D2B8;
    sub_24A15489C();
    sub_24A154864();
    return MEMORY[0x270FA20F8](v85, v86, v87, v88, v89);
  }
}

uint64_t sub_24A14DAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_24A1548DC();
  a23 = v26;
  a24 = v27;
  sub_24A154BB8();
  a22 = v24;
  char v28 = *(unsigned char *)(v24 + 304);
  sub_24A131348();
  v29();
  uint64_t v30 = *(void **)(v24 + 16);
  if ((v28 & 1) == 0)
  {
    if (qword_26976AA50 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_24A143E24(v31, (uint64_t)qword_26976B558);
    sub_24A1557D8();
    swift_bridgeObjectRetain();
    id v32 = v30;
    swift_bridgeObjectRetain();
    id v33 = v30;
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (sub_24A154F5C(v35))
    {
      a12 = v24 + 24;
      a9 = v24 + 48;
      a10 = v24 + 56;
      uint64_t v36 = sub_24A154A04();
      uint64_t v37 = (void *)sub_24A154A9C();
      a11 = sub_24A14448C();
      a13 = a11;
      *(_DWORD *)uint64_t v36 = 138412546;
      id v38 = v30;
      uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v24 + 48) = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v37 = v39;

      *(_WORD *)(v36 + 12) = 2080;
      uint64_t v40 = type metadata accessor for AssetUploadRequest();
      uint64_t v41 = swift_bridgeObjectRetain();
      uint64_t v42 = MEMORY[0x24C5BD260](v41, v40);
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      *(void *)(v24 + 56) = sub_24A14308C(v42, v44, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_24A154D40(&dword_24A120000, v34, v25, "ephemeral asset not received due to error %@ for request %s");
      sub_24A123464(&qword_26976B4E0);
      swift_arrayDestroy();
      sub_24A144474();
      swift_arrayDestroy();
      sub_24A144474();
      sub_24A144474();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    *(void *)(v24 + 24) = v30;
    id v45 = v30;
    sub_24A123464(&qword_26976B6C0);
    CheckedContinuation.resume(throwing:)();
  }
  *(void *)(v24 + 32) = v30;
  id v46 = v30;
  sub_24A123464(&qword_26976AF78);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  *(void *)(v24 + 40) = v30;
  sub_24A123464(&qword_26976B638);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A1550E0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  sub_24A154864();
  return v48(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_24A14DDE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v5 = sub_24A123464(&qword_26976B688);
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__signals;
  v4[8] = v6;
  v4[9] = v7;
  return MEMORY[0x270FA2498](sub_24A14DEB0, 0, 0);
}

uint64_t sub_24A14DEB0()
{
  sub_24A13A7E4();
  uint64_t v1 = sub_24A123464(&qword_26976AE60);
  MEMORY[0x24C5BD3C0](v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_24A14DF70;
  uint64_t v3 = sub_24A154E44();
  return MEMORY[0x270FA20F8](v3, v4, v5, v6, v7);
}

uint64_t sub_24A14DF70()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A14E04C()
{
  sub_24A155108();
  unint64_t v22 = v0;
  uint64_t v1 = v0[2];
  if (!v1)
  {
    sub_24A131348();
    v10();
    swift_task_dealloc();
    sub_24A15488C();
    sub_24A1552B4();
    __asm { BRAA            X1, X16 }
  }
  if (qword_26976AA50 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_24A143E24(v2, (uint64_t)qword_26976B558);
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_24A154F5C(v4))
  {
    uint64_t v5 = sub_24A1444A4();
    uint64_t v21 = sub_24A14448C();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[4] = v1;
    swift_bridgeObjectRetain();
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v5 + 4) = sub_24A14308C(v6, v7, &v21);
    swift_bridgeObjectRelease();
    sub_24A1551C4();
    sub_24A154FD4(&dword_24A120000, v8, v9, "received signal %s");
    sub_24A154EF8();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    sub_24A1551C4();
  }

  uint64_t v13 = (void *)swift_task_alloc();
  v0[10] = v13;
  void *v13 = v0;
  v13[1] = sub_24A14DF70;
  sub_24A154E44();
  sub_24A1552B4();
  return MEMORY[0x270FA20F8](v14, v15, v16, v17, v18);
}

uint64_t sub_24A14E248()
{
  sub_24A13A7B8();
  sub_24A131348();
  v0();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v1();
}

uint64_t AssetManager.deinit()
{
  sub_24A123580(v0 + 16);
  return v0;
}

uint64_t AssetManager.__deallocating_deinit()
{
  sub_24A123580(v0 + 16);
  return MEMORY[0x270FA0228](v0, 56, 7);
}

void sub_24A14E314()
{
  sub_24A139550();
  uint64_t v24 = v0;
  uint64_t v25 = v1;
  uint64_t v23 = v2;
  v21[1] = v3;
  uint64_t v26 = sub_24A123464(v4);
  sub_24A12477C();
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v9);
  v21[0] = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UUID();
  sub_24A12477C();
  uint64_t v11 = v10;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  MEMORY[0x270FA5388](v13);
  uint64_t v22 = (uint64_t)v21 - v14;
  uint64_t v15 = *(void (**)(void))(v11 + 16);
  sub_24A155768();
  v15();
  sub_24A154B00();
  v16();
  sub_24A155768();
  v15();
  unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, void, uint64_t))(v6 + 32))(v18 + v17, v21[0], v26);
  *(void *)(v18 + ((v8 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = v24;
  sub_24A155788();
  v19();
  swift_beginAccess();
  swift_retain();
  sub_24A1619F0(v25, v18, v22);
  sub_24A1312CC();
  v20();
  swift_endAccess();
  sub_24A139538();
}

uint64_t sub_24A14E52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for UploadResponseMessage();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_24A123464(&qword_26976B7F8);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  unint64_t v12 = v11[1];
  if (v12 >> 60 == 11)
  {
    sub_24A153F2C();
    uint64_t v13 = swift_allocError();
    *uint64_t v14 = 1;
    uint64_t v19 = v13;
  }
  else
  {
    if (v12 >> 60 != 15)
    {
      v18[1] = a4;
      uint64_t v17 = *v11;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      sub_24A1233B4(v17, v12);
      JSONDecoder.init()();
      sub_24A1547F4(&qword_26976B800, (void (*)(uint64_t))type metadata accessor for UploadResponseMessage);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      sub_24A123464(&qword_26976B7D0);
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_24A153F88(v17, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    uint64_t v19 = 0;
  }
  sub_24A123464(&qword_26976B7D0);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_beginAccess();
  uint64_t v15 = sub_24A161808(a4);
  uint64_t result = swift_endAccess();
  if (v15) {
    return sub_24A153F78(v15);
  }
  return result;
}

uint64_t sub_24A14E854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for DownloadResponseMessage();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_24A123464(&qword_26976B790);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  unint64_t v12 = v11[1];
  if (v12 >> 60 == 11)
  {
    sub_24A153F2C();
    uint64_t v13 = swift_allocError();
    *uint64_t v14 = 1;
    uint64_t v19 = v13;
  }
  else
  {
    if (v12 >> 60 != 15)
    {
      v18[1] = a4;
      uint64_t v17 = *v11;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      sub_24A1233B4(v17, v12);
      JSONDecoder.init()();
      sub_24A1547F4(&qword_26976B7A0, (void (*)(uint64_t))type metadata accessor for DownloadResponseMessage);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      sub_24A123464(&qword_26976B750);
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_24A153F88(v17, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    uint64_t v19 = 0;
  }
  sub_24A123464(&qword_26976B750);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_beginAccess();
  uint64_t v15 = sub_24A161808(a4);
  uint64_t result = swift_endAccess();
  if (v15) {
    return sub_24A153F78(v15);
  }
  return result;
}

uint64_t sub_24A14EB7C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_24A14EB94(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = v3;
  *(unsigned char *)(v4 + 25) = a3;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 56) = *v3;
  sub_24A123464(&qword_26976C0D0);
  *(void *)(v4 + 64) = swift_task_alloc();
  uint64_t v5 = sub_24A123464(&qword_26976B7C8);
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = *(void *)(v5 - 8);
  *(void *)(v4 + 88) = swift_task_alloc();
  uint64_t v6 = sub_24A123464(&qword_26976B7D0);
  *(void *)(v4 + 96) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v4 + 104) = v7;
  *(void *)(v4 + 112) = *(void *)(v7 + 64);
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A14ED30, 0, 0);
}

uint64_t sub_24A14ED30()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v20 = v5;
  uint64_t v21 = *(void *)(v0 + 112);
  uint64_t v24 = *(void *)(v0 + 56);
  uint64_t v23 = *(void *)(v0 + 48);
  char v19 = *(unsigned char *)(v0 + 25);
  uint64_t v18 = *(void *)(v0 + 40);
  type metadata accessor for UploadResponseMessage();
  sub_24A15577C();
  v6();
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v7 = type metadata accessor for TaskPriority();
  sub_24A1557C0(v5, v8, v9, v7);
  sub_24A154B00();
  v10();
  *(void *)(v0 + 16) = v18;
  *(unsigned char *)(v0 + 24) = v19 & 1;
  uint64_t v11 = ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)) + v21;
  unint64_t v22 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t v13[2] = 0;
  v13[3] = 0;
  v13[4] = v23;
  sub_24A155788();
  v14();
  sub_24A1544A4(v0 + 16, (uint64_t)v13 + v22);
  *(void *)((char *)v13 + v12) = v24;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24A1488D0(v20, (uint64_t)&unk_26976B7E0, (uint64_t)v13);
  swift_release();
  sub_24A154B28();
  v15();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A15488C();
  return v16();
}

uint64_t sub_24A14EF90(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = v3;
  *(unsigned char *)(v4 + 25) = a3;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 56) = *v3;
  sub_24A123464(&qword_26976C0D0);
  *(void *)(v4 + 64) = swift_task_alloc();
  uint64_t v5 = sub_24A123464(&qword_26976B748);
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = *(void *)(v5 - 8);
  *(void *)(v4 + 88) = swift_task_alloc();
  uint64_t v6 = sub_24A123464(&qword_26976B750);
  *(void *)(v4 + 96) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v4 + 104) = v7;
  *(void *)(v4 + 112) = *(void *)(v7 + 64);
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A14F12C, 0, 0);
}

uint64_t sub_24A14F12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_24A154B0C();
  sub_24A155430();
  uint64_t v23 = *(void *)(v22 + 128);
  uint64_t v24 = *(void *)(v22 + 104);
  uint64_t v47 = *(void *)(v22 + 96);
  uint64_t v25 = *(void *)(v22 + 64);
  uint64_t v48 = v25;
  uint64_t v49 = *(void *)(v22 + 112);
  uint64_t v52 = *(void *)(v22 + 56);
  uint64_t v53 = *(void *)(v22 + 88);
  uint64_t v51 = *(void *)(v22 + 48);
  HIDWORD(a12) = *(unsigned char *)(v22 + 25) & 1;
  uint64_t v45 = *(void *)(v22 + 120);
  uint64_t v46 = *(void *)(v22 + 40);
  type metadata accessor for DownloadResponseMessage();
  sub_24A15577C();
  v26();
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  sub_24A154A78();
  v27();
  uint64_t v28 = type metadata accessor for TaskPriority();
  sub_24A1557C0(v25, v29, v30, v28);
  sub_24A154B00();
  v31();
  *(void *)(v22 + 16) = v46;
  *(unsigned char *)(v22 + 24) = BYTE4(a12);
  uint64_t v32 = ((*(unsigned __int8 *)(v24 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)) + v49;
  unint64_t v50 = (v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = (void *)swift_allocObject();
  v34[2] = 0;
  v34[3] = 0;
  v34[4] = v51;
  sub_24A155788();
  v35();
  sub_24A153D38(v22 + 16, (uint64_t)v34 + v50);
  *(void *)((char *)v34 + v33) = v52;
  j__swift_bridgeObjectRetain(v46, HIDWORD(a12));
  swift_retain();
  sub_24A1488D0(v48, (uint64_t)&unk_26976B760, (uint64_t)v34);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v47);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A15488C();
  sub_24A15494C();
  return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, v45, v46, a12, v47, v48, v50, v23, v51, v52, v53,
           a20,
           a21,
           a22);
}

uint64_t sub_24A14F370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v7 + 96) = a4;
  *(void *)(v7 + 104) = a5;
  uint64_t v10 = type metadata accessor for XPCRichError();
  *(void *)(v7 + 112) = v10;
  *(void *)(v7 + 120) = *(void *)(v10 - 8);
  *(void *)(v7 + 128) = swift_task_alloc();
  *(void *)(v7 + 136) = swift_task_alloc();
  *(void *)(v7 + 144) = swift_task_alloc();
  *(void *)(v7 + 152) = type metadata accessor for XPCAsyncSequenceRequest();
  *(void *)(v7 + 160) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v7 + 168) = v11;
  *(void *)(v7 + 176) = *(void *)(v11 - 8);
  *(void *)(v7 + 184) = swift_task_alloc();
  *(void *)(v7 + 192) = swift_task_alloc();
  *(void *)(v7 + 200) = swift_task_alloc();
  *(void *)(v7 + 208) = swift_task_alloc();
  *(void *)(v7 + 216) = swift_task_alloc();
  *(void *)(v7 + 16) = a6;
  *(unsigned char *)(v7 + 24) = a7 & 1;
  return MEMORY[0x270FA2498](sub_24A14F528, 0, 0);
}

uint64_t sub_24A14F528()
{
  sub_24A13A7B8();
  uint64_t v1 = *(void *)(v0 + 96);
  UUID.init()();
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)(v0 + 224) = v2;
  return MEMORY[0x270FA2498](sub_24A14F594, v2, 0);
}

uint64_t sub_24A14F594()
{
  sub_24A13A7B8();
  sub_24A14E314();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A14F61C()
{
  sub_24A13A7B8();
  uint64_t v1 = sub_24A1234A8((void *)(*(void *)(v0 + 96) + 16), *(void *)(*(void *)(v0 + 96) + 40));
  *(void *)(v0 + 232) = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A14F68C, v2, 0);
}

uint64_t sub_24A14F68C()
{
  sub_24A13A7E4();
  *(void *)(v0 + 240) = sub_24A175EC4();
  *(void *)(v0 + 248) = 0;
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

#error "24A14FB84: call analysis failed (funcsize=426)"

#error "24A150198: call analysis failed (funcsize=361)"

uint64_t sub_24A1503F8()
{
  sub_24A13A7B8();
  sub_24A175DE8();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A15045C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_24A1548DC();
  a23 = v27;
  a24 = v28;
  sub_24A154BB8();
  a22 = v24;
  uint64_t v29 = sub_24A155488();
  v30(v29);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    a11 = *(void *)(v24 + 176);
    a12 = *(void *)(v24 + 304);
    uint64_t v25 = *(void *)(v24 + 168);
    uint64_t v26 = 12;
    sub_24A1444A4();
    a13 = sub_24A14448C();
    sub_24A155270(4.8149e-34);
    sub_24A1547F4((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = sub_24A14308C(v33, v34, &a13);
    sub_24A155058(v35);
    swift_bridgeObjectRelease();
    sub_24A131348();
    v36();
    sub_24A154CA8(&dword_24A120000, v31, v37, "[message id = %s] evict xpc session from cache as it is no longer usable");
    sub_24A1444E4();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    uint64_t v38 = sub_24A155464();
    v39(v38);
  }

  sub_24A154C7C();
  sub_24A1547F4(&qword_26976B778, MEMORY[0x263F8F408]);
  uint64_t v40 = sub_24A154934();
  uint64_t v42 = sub_24A1549F0(v40, v41);
  ((void (*)(uint64_t))v26)(v42);
  *(void *)(v24 + 64) = v25;
  sub_24A123464(&qword_26976B7D0);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A131348();
  v43();
  sub_24A131348();
  v44();

  sub_24A1548F8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A15488C();
  sub_24A154864();
  return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_24A1506AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v7 + 96) = a4;
  *(void *)(v7 + 104) = a5;
  uint64_t v10 = type metadata accessor for XPCRichError();
  *(void *)(v7 + 112) = v10;
  *(void *)(v7 + 120) = *(void *)(v10 - 8);
  *(void *)(v7 + 128) = swift_task_alloc();
  *(void *)(v7 + 136) = swift_task_alloc();
  *(void *)(v7 + 144) = swift_task_alloc();
  *(void *)(v7 + 152) = type metadata accessor for XPCAsyncSequenceRequest();
  *(void *)(v7 + 160) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v7 + 168) = v11;
  *(void *)(v7 + 176) = *(void *)(v11 - 8);
  *(void *)(v7 + 184) = swift_task_alloc();
  *(void *)(v7 + 192) = swift_task_alloc();
  *(void *)(v7 + 200) = swift_task_alloc();
  *(void *)(v7 + 208) = swift_task_alloc();
  *(void *)(v7 + 216) = swift_task_alloc();
  *(void *)(v7 + 16) = a6;
  *(unsigned char *)(v7 + 24) = a7 & 1;
  return MEMORY[0x270FA2498](sub_24A150864, 0, 0);
}

uint64_t sub_24A150864()
{
  sub_24A13A7B8();
  uint64_t v1 = *(void *)(v0 + 96);
  UUID.init()();
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)(v0 + 224) = v2;
  return MEMORY[0x270FA2498](sub_24A1508D0, v2, 0);
}

uint64_t sub_24A1508D0()
{
  sub_24A13A7B8();
  sub_24A14E314();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A150958()
{
  sub_24A13A7B8();
  uint64_t v1 = sub_24A1234A8((void *)(*(void *)(v0 + 96) + 16), *(void *)(*(void *)(v0 + 96) + 40));
  *(void *)(v0 + 232) = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A1509C8, v2, 0);
}

uint64_t sub_24A1509C8()
{
  sub_24A13A7E4();
  *(void *)(v0 + 240) = sub_24A175EC4();
  *(void *)(v0 + 248) = 0;
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

#error "24A150EC0: call analysis failed (funcsize=426)"

#error "24A1514D4: call analysis failed (funcsize=361)"

uint64_t sub_24A151734()
{
  sub_24A13A7B8();
  sub_24A175DE8();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A151798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_24A1548DC();
  a23 = v27;
  a24 = v28;
  sub_24A154BB8();
  a22 = v24;
  uint64_t v29 = sub_24A155488();
  v30(v29);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    a11 = *(void *)(v24 + 176);
    a12 = *(void *)(v24 + 304);
    uint64_t v25 = *(void *)(v24 + 168);
    uint64_t v26 = 12;
    sub_24A1444A4();
    a13 = sub_24A14448C();
    sub_24A155270(4.8149e-34);
    sub_24A1547F4((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = sub_24A14308C(v33, v34, &a13);
    sub_24A155058(v35);
    swift_bridgeObjectRelease();
    sub_24A131348();
    v36();
    sub_24A154CA8(&dword_24A120000, v31, v37, "[message id = %s] evict xpc session from cache as it is no longer usable");
    sub_24A1444E4();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    uint64_t v38 = sub_24A155464();
    v39(v38);
  }

  sub_24A154C7C();
  sub_24A1547F4(&qword_26976B778, MEMORY[0x263F8F408]);
  uint64_t v40 = sub_24A154934();
  uint64_t v42 = sub_24A1549F0(v40, v41);
  ((void (*)(uint64_t))v26)(v42);
  *(void *)(v24 + 64) = v25;
  sub_24A123464(&qword_26976B750);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A131348();
  v43();
  sub_24A131348();
  v44();

  sub_24A1548F8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A15488C();
  sub_24A154864();
  return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
}

char *sub_24A1519E8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_24A151A7C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v8 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return MEMORY[0x270FA01D0](v8, v9, v10, v7);
  }
  if (a3 < a1
    || (uint64_t result = type metadata accessor for CloudAssets_Signal.Event(0),
        a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    uint64_t v11 = type metadata accessor for CloudAssets_Signal.Event(0);
    return MEMORY[0x270FA01D8](a3, a1, a2, v11);
  }
  else if (a3 != a1)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3;
    unint64_t v9 = a1;
    uint64_t v10 = a2;
    return MEMORY[0x270FA01D0](v8, v9, v10, v7);
  }
  return result;
}

uint64_t sub_24A151BAC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v8 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return MEMORY[0x270FA01D0](v8, v9, v10, v7);
  }
  if (a3 < a1
    || (uint64_t result = sub_24A123464(&qword_26976B600), a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    uint64_t v11 = sub_24A123464(&qword_26976B600);
    return MEMORY[0x270FA01D8](a3, a1, a2, v11);
  }
  else if (a3 != a1)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3;
    unint64_t v9 = a1;
    uint64_t v10 = a2;
    return MEMORY[0x270FA01D0](v8, v9, v10, v7);
  }
  return result;
}

void *sub_24A151CE4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0 || (&__dst[16 * a2] > __src ? (BOOL v3 = &__src[16 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 16 * a2);
  }
  return result;
}

uint64_t sub_24A151DC0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0
    || ((uint64_t v6 = type metadata accessor for CloudAssets_Signal.Event(0),
         uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 72) * a2,
         unint64_t v8 = a3 + v7,
         unint64_t v9 = a1 + v7,
         v8 > a1)
      ? (BOOL v10 = v9 > a3)
      : (BOOL v10 = 0),
        v10))
  {
    uint64_t v12 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v11 = v6;
    uint64_t v12 = a3;
    unint64_t v13 = a1;
    uint64_t v14 = a2;
  }
  return MEMORY[0x270FA01C8](v12, v13, v14, v11);
}

uint64_t sub_24A151ED8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0
    || ((uint64_t v6 = sub_24A123464(&qword_26976B600),
         uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 72) * a2,
         unint64_t v8 = a3 + v7,
         unint64_t v9 = a1 + v7,
         v8 > a1)
      ? (BOOL v10 = v9 > a3)
      : (BOOL v10 = 0),
        v10))
  {
    uint64_t v12 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v11 = v6;
    uint64_t v12 = a3;
    unint64_t v13 = a1;
    uint64_t v14 = a2;
  }
  return MEMORY[0x270FA01C8](v12, v13, v14, v11);
}

uint64_t sub_24A151FF4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = a2;
  if (a2 < 0 || ((unint64_t v5 = a1, a3 + 16 * v4 > a1) ? (v6 = a1 + 16 * v4 > a3) : (v6 = 0), v6))
  {
    uint64_t v8 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8D310];
    uint64_t v8 = a3;
  }
  return MEMORY[0x270FA01C8](v8, v5, v4, v7);
}

uint64_t sub_24A1520D4(uint64_t a1)
{
  return sub_24A147CA0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_24A1520DC()
{
}

void *sub_24A15211C(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_24A1527F0(a1, a2, a3, *v3, &qword_26976B818, (void (*)(uint64_t, uint64_t, void *))sub_24A1519E8, (void (*)(uint64_t, uint64_t, void *))sub_24A151CE4);
  *BOOL v3 = (uint64_t)result;
  return result;
}

size_t sub_24A15216C(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_24A1524B0(a1, a2, a3, *v3);
  *BOOL v3 = result;
  return result;
}

size_t sub_24A15218C(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_24A15264C(a1, a2, a3, *v3);
  *BOOL v3 = result;
  return result;
}

uint64_t sub_24A1521AC(uint64_t a1)
{
  return sub_24A148AB0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_24A1521B8(uint64_t a1)
{
  return sub_24A14CB44(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_24A1521C8()
{
}

uint64_t sub_24A152208()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_24A152248()
{
  sub_24A15547C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A13A840(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A13A488;
  sub_24A154CC4();
  return sub_24A14DDE4(v3, v4, v5, v6);
}

uint64_t type metadata accessor for AssetManager()
{
  return self;
}

uint64_t method lookup function for AssetManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetManager);
}

uint64_t dispatch thunk of AssetManager.__allocating_init(serviceName:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

unsigned char *storeEnumTagSinglePayload for AssetManager.AssetError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *size_t result = a2;
        return result;
      case 2:
        *(_WORD *)size_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)size_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *size_t result = 0;
      break;
    case 2:
      *(_WORD *)size_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A1523D8);
    case 4:
      *(_DWORD *)size_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetManager.AssetError()
{
  return &type metadata for AssetManager.AssetError;
}

unint64_t sub_24A152414()
{
  unint64_t result = qword_26976B678;
  if (!qword_26976B678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B678);
  }
  return result;
}

void *sub_24A152460(void *a1, int64_t a2, char a3)
{
  unint64_t result = sub_24A1527F0(a1, a2, a3, *v3, &qword_26976B680, (void (*)(uint64_t, uint64_t, void *))sub_24A1519E8, (void (*)(uint64_t, uint64_t, void *))sub_24A151FF4);
  *int v3 = (uint64_t)result;
  return result;
}

size_t sub_24A1524B0(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_24A123464(&qword_26976B810);
  uint64_t v10 = *(void *)(type metadata accessor for CloudAssets_Signal.Event(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  unint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  uint64_t v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for CloudAssets_Signal.Event(0) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (unint64_t)v13 + v16;
  unint64_t v18 = a4 + v16;
  if (v5)
  {
    sub_24A151A7C(v18, v8, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24A151DC0(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

size_t sub_24A15264C(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_24A123464(&qword_26976B740);
  uint64_t v10 = *(void *)(sub_24A123464(&qword_26976B600) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  unint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  uint64_t v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_24A123464(&qword_26976B600) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (unint64_t)v13 + v16;
  unint64_t v18 = a4 + v16;
  if (v5)
  {
    sub_24A151BAC(v18, v8, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24A151ED8(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

void *sub_24A1527F0(void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = (char)result;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v12 = a2;
      }
    }
  }
  else
  {
    int64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    sub_24A123464(a5);
    uint64_t v15 = (void *)swift_allocObject();
    size_t v16 = j__malloc_size(v15);
    v15[2] = v13;
    void v15[3] = 2 * ((uint64_t)(v16 - 32) / 16);
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (v10)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release();
  return v15;
}

uint64_t sub_24A1528E8()
{
  return sub_24A153FAC();
}

uint64_t sub_24A1528F4()
{
  sub_24A15547C();
  uint64_t v0 = sub_24A123464(&qword_26976B640);
  sub_24A13A7A0(v0);
  uint64_t v1 = sub_24A123464(&qword_26976B690);
  sub_24A1549B4(v1);
  sub_24A155080();
  uint64_t v2 = swift_task_alloc();
  int v3 = (void *)sub_24A155448(v2);
  *int v3 = v4;
  v3[1] = sub_24A13A488;
  sub_24A154CC4();
  return sub_24A144E78(v5, v6, v7, v8, v9);
}

uint64_t sub_24A1529E0()
{
  sub_24A123464(&qword_26976B5A0);
  sub_24A12477C();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  sub_24A123464(&qword_26976B638);
  sub_24A12477C();
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  sub_24A123464(&qword_26976AF78);
  sub_24A12477C();
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  sub_24A123464(&qword_26976B6C0);
  sub_24A12477C();
  uint64_t v8 = v2 | v4 | v6 | *(unsigned __int8 *)(v7 + 80) | 7;
  sub_24A1555D4();
  uint64_t v10 = v9 + 8;
  swift_unknownObjectRelease();
  sub_24A154A78();
  v13(v11, v12);
  sub_24A1549E4();
  v16(v14, v15);
  sub_24A154AF4();
  v19(v17, v18);
  sub_24A154CEC();
  v22(v20, v21);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v10, v8);
}

uint64_t sub_24A152BB8()
{
  sub_24A154D04();
  uint64_t v0 = sub_24A123464(&qword_26976B5A0);
  sub_24A13A7A0(v0);
  uint64_t v1 = sub_24A123464(&qword_26976B638);
  sub_24A13A7A0(v1);
  uint64_t v2 = sub_24A123464(&qword_26976AF78);
  sub_24A13A7A0(v2);
  uint64_t v3 = sub_24A123464(&qword_26976B6C0);
  sub_24A13A7A0(v3);
  sub_24A154E24();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_24A13A840(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_24A13A77C;
  sub_24A154D58();
  sub_24A1549C8();
  return sub_24A14CFB4(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_24A152D54()
{
  sub_24A123464(&qword_26976B610);
  sub_24A12477C();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  sub_24A123464(&qword_26976B6F0);
  sub_24A12477C();
  uint64_t v10 = v2 | *(unsigned __int8 *)(v3 + 80) | 7;
  sub_24A1555D4();
  uint64_t v5 = v4 + 8;
  swift_unknownObjectRelease();
  uint64_t v6 = sub_24A154A38();
  v7(v6);
  swift_bridgeObjectRelease();
  sub_24A1549E4();
  v8();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v5, v10);
}

uint64_t sub_24A152E80()
{
  sub_24A1554A0();
  sub_24A155108();
  uint64_t v0 = sub_24A123464(&qword_26976B610);
  sub_24A13A7A0(v0);
  uint64_t v1 = sub_24A123464(&qword_26976B6F0);
  sub_24A13A7A0(v1);
  sub_24A154E24();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_24A13A840(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_24A13A77C;
  sub_24A154D58();
  sub_24A154EA0();
  return sub_24A148D80(v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_24A152FA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24A123464(a3);
  sub_24A1247B0();
  uint64_t v4 = sub_24A155818();
  v5(v4);
  return a2;
}

uint64_t sub_24A152FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_24A129214();
  v4(v3);
  sub_24A1247B0();
  uint64_t v5 = sub_24A12937C();
  v6(v5);
  return a2;
}

uint64_t sub_24A153040(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for AssetDownloadRequest();
  uint64_t v49 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_24A123464(&qword_26976B730);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_40;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  unint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  uint64_t v21 = v51;
  if (!v17) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v22 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v23 = v22 | (v20 << 6);
  while (1)
  {
    uint64_t v28 = v8;
    uint64_t v29 = *(void *)(v8 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v23;
    if (v50)
    {
      (*v52)(v21, v30, v53);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v49 + 72);
      sub_24A153A6C(v31 + v32 * v23, v54);
    }
    else
    {
      (*v47)(v21, v30, v53);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v49 + 72);
      sub_24A152FF0(v33 + v32 * v23, v54);
    }
    sub_24A1547F4(&qword_26976AC40, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v18 + 8 * (v35 >> 6))) == 0)
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v34) >> 6;
      uint64_t v21 = v51;
      while (++v36 != v39 || (v38 & 1) == 0)
      {
        BOOL v40 = v36 == v39;
        if (v36 == v39) {
          unint64_t v36 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v36);
        if (v41 != -1)
        {
          unint64_t v37 = __clz(__rbit64(~v41)) + (v36 << 6);
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    unint64_t v37 = __clz(__rbit64((-1 << v35) & ~*(void *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    uint64_t v21 = v51;
LABEL_31:
    *(void *)(v18 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
    (*v52)((char *)(*(void *)(v13 + 48) + v29 * v37), (unint64_t)v21, v53);
    uint64_t result = sub_24A153A6C(v54, *(void *)(v13 + 56) + v32 * v37);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v28;
    if (v17) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      goto LABEL_42;
    }
    if (v24 >= v45)
    {
      swift_release();
      uint64_t v3 = v44;
      uint64_t v25 = v46;
      goto LABEL_35;
    }
    uint64_t v25 = v46;
    unint64_t v26 = v46[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v45) {
        goto LABEL_33;
      }
      unint64_t v26 = v46[v20];
      if (!v26) {
        break;
      }
    }
LABEL_18:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
    uint64_t v21 = v51;
  }
  int64_t v27 = v24 + 2;
  if (v27 < v45)
  {
    unint64_t v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        int64_t v20 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          goto LABEL_43;
        }
        if (v20 >= v45) {
          goto LABEL_33;
        }
        unint64_t v26 = v46[v20];
        ++v27;
        if (v26) {
          goto LABEL_18;
        }
      }
    }
    int64_t v20 = v27;
    goto LABEL_18;
  }
LABEL_33:
  swift_release();
  uint64_t v3 = v44;
LABEL_35:
  if (v50)
  {
    uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
    if (v42 >= 64) {
      sub_24A15354C(0, (unint64_t)(v42 + 63) >> 6, v25);
    }
    else {
      *uint64_t v25 = -1 << v42;
    }
    *(void *)(v11 + 16) = 0;
  }
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_24A15354C(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_24A153568(uint64_t a1, char a2, void *a3)
{
  uint64_t v47 = a3;
  uint64_t v6 = type metadata accessor for AssetDownloadRequest();
  uint64_t v45 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v46 = (uint64_t)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v48 = (uint64_t)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A123464(&qword_26976B600);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v40[0] = v3;
  v40[1] = a1;
  uint64_t v43 = (uint64_t)v40 + *(int *)(v12 + 48) - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = (uint64_t)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v41 = *(void *)(v13 + 72);
  uint64_t v42 = v9;
  unint64_t v17 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v18 = v44;
    sub_24A129110(v16, v44, &qword_26976B600);
    char v19 = *v17;
    uint64_t v20 = v48;
    uint64_t v21 = v8;
    (*v17)(v48, v18, v8);
    sub_24A153A6C(v43, v46);
    unint64_t v22 = (void *)*v47;
    unint64_t v24 = sub_24A1610E4(v20);
    uint64_t v25 = v22[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v28 = v23;
    if (v22[3] < v27) {
      break;
    }
    if (a2)
    {
      if (v23) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_24A123464(&qword_26976B738);
      _NativeDictionary.copy()();
      if (v28) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v31 = v48;
    uint64_t v32 = (void *)*v47;
    *(void *)(*v47 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    uint64_t v8 = v21;
    v19(v32[6] + *(void *)(v42 + 72) * v24, v31, v21);
    sub_24A153A6C(v46, v32[7] + *(void *)(v45 + 72) * v24);
    uint64_t v33 = v32[2];
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_18;
    }
    v32[2] = v35;
    v16 += v41;
    a2 = 1;
    if (!--v15)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  sub_24A153040(v27, a2 & 1);
  unint64_t v29 = sub_24A1610E4(v48);
  if ((v28 & 1) != (v30 & 1)) {
    goto LABEL_19;
  }
  unint64_t v24 = v29;
  if ((v28 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  unint64_t v36 = (void *)swift_allocError();
  swift_willThrow();
  id v51 = v36;
  id v37 = v36;
  sub_24A123464(&qword_26976C190);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_24A153EAC(v46, (void (*)(void))type metadata accessor for AssetDownloadRequest);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v48, v21);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_20:
  uint64_t v49 = 0;
  unint64_t v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v38._object = (void *)0x800000024A18CC20;
  v38._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v38);
  _print_unlocked<A, B>(_:_:)();
  v39._countAndFlagsBits = 39;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_24A153A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_24A129214();
  v4(v3);
  sub_24A1247B0();
  uint64_t v5 = sub_24A155818();
  v6(v5);
  return a2;
}

uint64_t sub_24A153ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)a6;
  char v13 = *(unsigned char *)(a6 + 8);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v14;
  *uint64_t v14 = v6;
  v14[1] = sub_24A13A488;
  return sub_24A14F370(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t sub_24A153BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)a6;
  char v13 = *(unsigned char *)(a6 + 8);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v14;
  *uint64_t v14 = v6;
  v14[1] = sub_24A13A77C;
  return sub_24A1506AC(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t sub_24A153C8C()
{
  sub_24A123464(&qword_26976B750);
  sub_24A12477C();
  sub_24A154D10();
  swift_release();
  uint64_t v4 = sub_24A155528();
  v5(v4);
  j__swift_bridgeObjectRelease(*(void *)(v0 + v3), *(unsigned __int8 *)(v0 + v3 + 8));
  return MEMORY[0x270FA0238](v0, v2, v1);
}

uint64_t sub_24A153D38(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A153D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24A1554A0();
  sub_24A155108();
  uint64_t v10 = sub_24A123464(&qword_26976B750);
  sub_24A13A7A0(v10);
  sub_24A154C3C();
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = (void *)sub_24A13A840(v11);
  *uint64_t v12 = v13;
  v12[1] = sub_24A13A77C;
  sub_24A154C10();
  sub_24A154EA0();
  return v21(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

unint64_t sub_24A153E60()
{
  unint64_t result = qword_26976B780;
  if (!qword_26976B780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B780);
  }
  return result;
}

uint64_t sub_24A153EAC(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A1247B0();
  sub_24A1247EC();
  v3();
  return a1;
}

uint64_t sub_24A153F00()
{
  return sub_24A154624();
}

uint64_t sub_24A153F0C(uint64_t a1)
{
  return sub_24A154730(a1, &qword_26976B750, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_24A14E854);
}

unint64_t sub_24A153F2C()
{
  unint64_t result = qword_26976B798;
  if (!qword_26976B798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B798);
  }
  return result;
}

uint64_t sub_24A153F78(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_24A153F88(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF) {
    return sub_24A12340C(a1, a2);
  }
  return a1;
}

uint64_t sub_24A153FA0()
{
  return sub_24A153FAC();
}

uint64_t sub_24A153FAC()
{
  sub_24A139550();
  sub_24A123464(v0);
  sub_24A12477C();
  sub_24A123464(&qword_26976B690);
  sub_24A12477C();
  swift_unknownObjectRelease();
  uint64_t v1 = sub_24A154A38();
  v2(v1);
  sub_24A154A78();
  v3();
  sub_24A139538();
  return MEMORY[0x270FA0238](v4, v5, v6);
}

uint64_t sub_24A154090()
{
  sub_24A15547C();
  uint64_t v0 = sub_24A123464(&qword_26976B5D0);
  sub_24A13A7A0(v0);
  uint64_t v1 = sub_24A123464(&qword_26976B690);
  sub_24A1549B4(v1);
  sub_24A155080();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_24A155448(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_24A13A77C;
  sub_24A154CC4();
  return sub_24A14A99C(v5, v6, v7, v8, v9);
}

uint64_t sub_24A15417C(uint64_t a1, uint64_t *a2)
{
  sub_24A123464(a2);
  sub_24A1247B0();
  sub_24A1247EC();
  v3();
  return a1;
}

uint64_t sub_24A1541CC()
{
  sub_24A139550();
  sub_24A123464(&qword_26976B5A0);
  sub_24A12477C();
  sub_24A123464(&qword_26976B690);
  sub_24A12477C();
  swift_unknownObjectRelease();
  uint64_t v0 = sub_24A154A38();
  v1(v0);
  sub_24A154A78();
  v2();
  sub_24A139538();
  return MEMORY[0x270FA0238](v3, v4, v5);
}

uint64_t sub_24A1542C4()
{
  sub_24A15547C();
  uint64_t v2 = v1;
  uint64_t v3 = sub_24A123464(&qword_26976B5A0);
  sub_24A13A7A0(v3);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = sub_24A123464(&qword_26976B690);
  sub_24A13A7A0(v8);
  unint64_t v10 = (v5 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v0 + 16);
  uint64_t v12 = *(void *)(v0 + 24);
  uint64_t v13 = v0 + v10;
  uint64_t v14 = swift_task_alloc();
  uint64_t v15 = (void *)sub_24A155448(v14);
  void *v15 = v16;
  v15[1] = sub_24A13A77C;
  return sub_24A147F48(v2, v11, v12, v0 + v5, v13);
}

uint64_t sub_24A154400()
{
  sub_24A123464(&qword_26976B7D0);
  sub_24A12477C();
  sub_24A154D10();
  swift_release();
  uint64_t v3 = sub_24A155528();
  v4(v3);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v2, v1);
}

uint64_t sub_24A1544A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A154500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24A1554A0();
  sub_24A155108();
  uint64_t v10 = sub_24A123464(&qword_26976B7D0);
  sub_24A13A7A0(v10);
  sub_24A154C3C();
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = (void *)sub_24A13A840(v11);
  *uint64_t v12 = v13;
  v12[1] = sub_24A13A77C;
  sub_24A154C10();
  sub_24A154EA0();
  return v21(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

unint64_t sub_24A1545CC()
{
  unint64_t result = qword_26976B7F0;
  if (!qword_26976B7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B7F0);
  }
  return result;
}

uint64_t sub_24A154618()
{
  return sub_24A154624();
}

uint64_t sub_24A154624()
{
  sub_24A139550();
  sub_24A123464(v0);
  sub_24A12477C();
  type metadata accessor for UUID();
  sub_24A12477C();
  uint64_t v1 = sub_24A154A38();
  v2(v1);
  swift_release();
  sub_24A1549E4();
  v3();
  sub_24A139538();
  return MEMORY[0x270FA0238](v4, v5, v6);
}

uint64_t sub_24A154710(uint64_t a1)
{
  return sub_24A154730(a1, &qword_26976B7D0, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_24A14E52C);
}

uint64_t sub_24A154730(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = sub_24A123464(a2);
  sub_24A13A7A0(v5);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = (*(void *)(v8 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = type metadata accessor for UUID();
  sub_24A1549B4(v10);
  uint64_t v12 = *(void *)(v3 + v9);
  uint64_t v13 = v3 + ((v9 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a3(a1, v3 + v7, v12, v13);
}

uint64_t sub_24A1547F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A154848()
{
  return v0;
}

uint64_t sub_24A15488C()
{
  return v0 + 8;
}

uint64_t sub_24A1548B0(uint64_t a1)
{
  v2[32] = a1;
  v2[33] = *(void *)(v3 + 16);
  v2[34] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v1;
}

uint64_t sub_24A1548F8()
{
  return swift_task_dealloc();
}

uint64_t sub_24A154934()
{
  return swift_allocError();
}

uint64_t sub_24A154968()
{
  return swift_allocObject();
}

uint64_t sub_24A154990()
{
  return _s11CloudAssets21UploadResponseMessageOwet_0(v0, 1, v1);
}

uint64_t sub_24A1549B4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_24A1549F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A154A04()
{
  return swift_slowAlloc();
}

uint64_t sub_24A154A38()
{
  return v0 + v1;
}

void *sub_24A154A50()
{
  uint64_t result = sub_24A1234A8((void *)(*(void *)(v0 + 96) + 16), *(void *)(*(void *)(v0 + 96) + 40));
  *(void *)(v0 + 312) = result;
  return result;
}

uint64_t sub_24A154A84()
{
  return v0;
}

uint64_t sub_24A154A9C()
{
  return swift_slowAlloc();
}

uint64_t sub_24A154AB4()
{
  return swift_task_dealloc();
}

uint64_t sub_24A154B34(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A154B54()
{
  *(void *)(v0 + 280) = *(void *)(v2 + 16);
  *(void *)(v0 + 288) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v1;
}

uint64_t sub_24A154B80()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A154BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s11CloudAssets21UploadResponseMessageOwet_0(a1, a2, a3);
}

void sub_24A154BC4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_24A154BE4()
{
  *(void *)(v0 + 280) = *(void *)(v1 + 16);
  *(void *)(v0 + 288) = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v2;
}

uint64_t sub_24A154C10()
{
  return v0;
}

void sub_24A154CA8(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_24A154CDC(uint64_t result)
{
  *(void *)(v1 + 160) = result;
  return result;
}

uint64_t sub_24A154CF8()
{
  return v0;
}

uint64_t sub_24A154D10()
{
  return swift_unknownObjectRelease();
}

void sub_24A154D40(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_24A154D58()
{
  return v0;
}

uint64_t sub_24A154D7C()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A154D94(uint64_t a1, uint64_t a2)
{
  sub_24A143E24(a1, a2);
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_24A154DC4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A154DE8()
{
  return swift_task_alloc();
}

uint64_t sub_24A154E04()
{
  return v0;
}

uint64_t sub_24A154E44()
{
  return v0;
}

void sub_24A154E64()
{
  *(_WORD *)(v0 + 12) = 2112;
}

uint64_t sub_24A154E74()
{
  return type metadata accessor for Logger();
}

uint64_t sub_24A154EB8()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A154ED8()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A154EF8()
{
  return swift_arrayDestroy();
}

void sub_24A154F14(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

id sub_24A154F30()
{
  uint64_t v2 = *(void **)(v0 + 248);
  *(void *)(v0 + 32) = v2;
  return v2;
}

BOOL sub_24A154F5C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_24A154F78()
{
  return v0;
}

BOOL sub_24A154F98(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_24A154FB4(uint64_t a1)
{
  return MEMORY[0x270FA2498](a1, 0, 0);
}

uint64_t sub_24A154FC0()
{
  return v0;
}

void sub_24A154FD4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

BOOL sub_24A154FF4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_24A155010()
{
  return swift_task_dealloc();
}

uint64_t sub_24A15502C(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A155058(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A15509C()
{
  return type metadata accessor for Logger();
}

uint64_t sub_24A1550E0()
{
  return swift_task_dealloc();
}

uint64_t sub_24A155114()
{
  return swift_slowAlloc();
}

uint64_t sub_24A155148()
{
  return swift_task_dealloc();
}

uint64_t sub_24A155170()
{
  return v0;
}

uint64_t sub_24A15518C()
{
  return v0;
}

uint64_t sub_24A1551A8()
{
  return v0;
}

uint64_t sub_24A1551C4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_24A1551DC(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A155204(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A15522C(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL sub_24A155254(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_24A155270(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_24A155298()
{
  return swift_task_dealloc();
}

void sub_24A1552CC(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_log_t log, uint64_t a13, os_log_type_t type)
{
  _os_log_impl(a1, log, type, a4, v14, 0x16u);
}

uint64_t sub_24A1552F0(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A155314()
{
  return AsyncThrowingStream.Continuation.yield(_:)();
}

uint64_t sub_24A155330()
{
  *(_WORD *)(v0 + 12) = 2080;
  return static Task<>.currentPriority.getter();
}

uint64_t sub_24A155354(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A155378(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A15539C(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_24A1553C0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_log_type_t type, os_log_t log)
{
  _os_log_impl(a1, log, type, a4, v14, 0x16u);
}

uint64_t sub_24A1553E4()
{
  return swift_release();
}

BOOL sub_24A155408(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_24A155448(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_24A155464()
{
  return *(void *)(v0 + 184);
}

uint64_t sub_24A155488()
{
  return *(void *)(v0 + 184);
}

uint64_t sub_24A1554D4()
{
  return v0;
}

uint64_t sub_24A1554E0()
{
  return swift_dynamicCast();
}

uint64_t sub_24A155504()
{
  return swift_dynamicCast();
}

uint64_t sub_24A155528()
{
  return v0 + v1;
}

__n128 *sub_24A155540(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

id sub_24A155574()
{
  *(void *)(v0 + 32) = v1;
  return v1;
}

id sub_24A155594()
{
  *(_WORD *)(v1 + 12) = 2112;
  return v0;
}

id sub_24A1555B4()
{
  *(_WORD *)(v1 + 12) = 2112;
  return v0;
}

uint64_t sub_24A1555FC(uint64_t a1)
{
  *uint64_t v1 = a1;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_24A15561C()
{
  return type metadata accessor for Logger();
}

uint64_t sub_24A15563C()
{
  return type metadata accessor for Logger();
}

void sub_24A15565C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void *sub_24A15567C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1234A8((void *)(a1 + 16), *(void *)(a1 + 40));
}

uint64_t sub_24A15569C()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A1556BC()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A1556F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_24A14308C(v3, v4, a3);
}

uint64_t sub_24A155708()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A155720()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_24A155738()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t sub_24A155750()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_24A1557A0()
{
  *(_WORD *)(v0 + 12) = 2080;
  return static Task<>.currentPriority.getter();
}

uint64_t sub_24A1557C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s11CloudAssets21UploadResponseMessageOwst_0(a1, 1, 1, a4);
}

uint64_t sub_24A1557D8()
{
  return v0;
}

uint64_t sub_24A1557E4(uint64_t a1)
{
  *uint64_t v1 = a1;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_24A155804()
{
  return v0;
}

uint64_t sub_24A155818()
{
  return v0;
}

uint64_t sub_24A155840()
{
  return swift_allocObject();
}

uint64_t sub_24A155858()
{
  return v0;
}

uint64_t sub_24A15586C()
{
  return dispatch thunk of XPCSession.send<A>(_:)();
}

uint64_t sub_24A15588C()
{
  return swift_slowAlloc();
}

void sub_24A1558A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_24A1558C4()
{
  return v0;
}

uint64_t sub_24A1558D0()
{
  return swift_getEnumCaseMultiPayload();
}

_WORD *sub_24A1558E8(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_24A1558F4()
{
  return swift_release();
}

void sub_24A155914()
{
  *(void *)(v1 + 40) = v0;
}

void sub_24A155928()
{
  *(void *)(v0 + 40) = v1;
}

uint64_t sub_24A15593C()
{
  *(void *)(v1 + 296) = v0;
  *(void *)(v1 + 304) = v2;
  return XPCRichError.canRetry.getter();
}

uint64_t sub_24A155954(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (int *)type metadata accessor for AssetDownloadResponse();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v8);
  sub_24A1595D8();
  uint64_t v9 = sub_24A123464(&qword_26976B710);
  uint64_t v10 = sub_24A1291B8(v9);
  MEMORY[0x270FA5388](v10);
  sub_24A1595F0();
  uint64_t v11 = sub_24A123464(&qword_26976B988);
  uint64_t v12 = sub_24A1291B8(v11);
  MEMORY[0x270FA5388](v12);
  sub_24A159698();
  uint64_t v14 = v2 + v13;
  sub_24A1594A4(a1, v2, &qword_26976B710);
  sub_24A1594A4(a2, v14, &qword_26976B710);
  sub_24A159640(v2);
  if (v18)
  {
    sub_24A159640(v14);
    if (v15) {
      uint64_t v16 = &qword_26976B710;
    }
    else {
      uint64_t v16 = &qword_26976B988;
    }
    if (v15) {
      char v17 = -1;
    }
    else {
      char v17 = 0;
    }
  }
  else
  {
    sub_24A1594A4(v2, v4, &qword_26976B710);
    sub_24A159640(v14);
    if (!v18)
    {
      sub_24A159554(v14, v3, (void (*)(void))type metadata accessor for AssetDownloadResponse);
      char v19 = static UUID.== infix(_:_:)();
      if ((v19 & 1) != 0
        && static Asset.== infix(_:_:)(v4 + v7[5], v3 + v7[5])
        && (MEMORY[0x24C5BCC70](v4 + v7[6], v3 + v7[6]) & 1) != 0)
      {
        uint64_t v20 = v7[7];
        uint64_t v21 = (uint64_t *)(v4 + v20);
        char v22 = *(unsigned char *)(v4 + v20 + 16);
        char v23 = (uint64_t *)(v3 + v20);
        if (v22)
        {
          if (v23[2])
          {
LABEL_26:
            sub_24A159500(v3, (void (*)(void))type metadata accessor for AssetDownloadResponse);
            sub_24A159500(v4, (void (*)(void))type metadata accessor for AssetDownloadResponse);
            char v17 = 1;
            goto LABEL_24;
          }
        }
        else if ((v23[2] & 1) == 0)
        {
          uint64_t v25 = *v21;
          uint64_t v24 = v21[1];
          uint64_t v27 = *v23;
          uint64_t v26 = v23[1];
          if (v25 == v27 && v24 == v26) {
            goto LABEL_26;
          }
        }
      }
      sub_24A159500(v3, (void (*)(void))type metadata accessor for AssetDownloadResponse);
      sub_24A159500(v4, (void (*)(void))type metadata accessor for AssetDownloadResponse);
      char v17 = 0;
LABEL_24:
      uint64_t v16 = &qword_26976B710;
      goto LABEL_25;
    }
    sub_24A159500(v4, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    char v17 = 0;
    uint64_t v16 = &qword_26976B988;
  }
LABEL_25:
  sub_24A15417C(v2, v16);
  return v17 & 1;
}

uint64_t sub_24A155BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Asset(0);
  MEMORY[0x270FA5388](v4);
  os_log_type_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_24A123464(&qword_26976B648);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_24A123464(&qword_26976B990);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t)&v13[*(int *)(v11 + 56)];
  sub_24A1594A4(a1, (uint64_t)v13, &qword_26976B648);
  sub_24A1594A4(a2, v14, &qword_26976B648);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v4) == 1)
  {
    int v15 = _s11CloudAssets21UploadResponseMessageOwet_0(v14, 1, v4);
    if (v15 == 1) {
      uint64_t v16 = &qword_26976B648;
    }
    else {
      uint64_t v16 = &qword_26976B990;
    }
    if (v15 == 1) {
      char v17 = -1;
    }
    else {
      char v17 = 0;
    }
  }
  else
  {
    sub_24A1594A4((uint64_t)v13, (uint64_t)v9, &qword_26976B648);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v14, 1, v4) == 1)
    {
      sub_24A159500((uint64_t)v9, (void (*)(void))type metadata accessor for Asset);
      char v17 = 0;
      uint64_t v16 = &qword_26976B990;
    }
    else
    {
      sub_24A159554(v14, (uint64_t)v6, (void (*)(void))type metadata accessor for Asset);
      char v17 = static Asset.== infix(_:_:)((uint64_t)v9, (uint64_t)v6);
      sub_24A159500((uint64_t)v6, (void (*)(void))type metadata accessor for Asset);
      sub_24A159500((uint64_t)v9, (void (*)(void))type metadata accessor for Asset);
      uint64_t v16 = &qword_26976B648;
    }
  }
  sub_24A15417C((uint64_t)v13, v16);
  return v17 & 1;
}

void sub_24A155E1C()
{
  uint64_t v3 = type metadata accessor for AssetDownloadResponse();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v4);
  sub_24A1595F0();
  uint64_t v5 = sub_24A123464(&qword_26976B710);
  uint64_t v6 = sub_24A1291B8(v5);
  MEMORY[0x270FA5388](v6);
  sub_24A1595D8();
  sub_24A1594A4(v0, v0, &qword_26976B710);
  sub_24A159640(v0);
  if (v7)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    sub_24A159554(v0, v1, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    Hasher._combine(_:)(0);
    type metadata accessor for UUID();
    sub_24A15945C(&qword_26976AC40, MEMORY[0x263F07508]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v8 = v1 + *(int *)(v3 + 20);
    type metadata accessor for URL();
    sub_24A15945C(&qword_26976AC48, MEMORY[0x263F06EA8]);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for Asset.ID(0);
    sub_24A159754();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = (uint64_t *)(v8 + *(int *)(v2 + 24));
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    sub_24A1233B4(*v9, v11);
    Data.hash(into:)();
    sub_24A12340C(v10, v11);
    uint64_t v12 = (uint64_t *)(v8 + *(int *)(v2 + 28));
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    sub_24A1233B4(*v12, v14);
    sub_24A1596D0();
    Data.hash(into:)();
    sub_24A12340C(v13, v14);
    type metadata accessor for Asset(0);
    sub_24A159754();
    uint64_t v17 = *(void *)(v15 + 16);
    unint64_t v16 = *(void *)(v15 + 24);
    sub_24A1233B4(v14, v11);
    Data.hash(into:)();
    sub_24A12340C(v14, v11);
    sub_24A1233B4(v17, v16);
    Data.hash(into:)();
    sub_24A12340C(v17, v16);
    Hasher._combine(_:)(*(void *)(v8 + *(int *)(v13 + 24)));
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v18 = v1 + *(int *)(v3 + 28);
    if (*(unsigned char *)(v18 + 16) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt v20 = *(void *)v18;
      Swift::UInt v19 = *(void *)(v18 + 8);
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v20);
      Hasher._combine(_:)(v19);
    }
    sub_24A159500(v1, (void (*)(void))type metadata accessor for AssetDownloadResponse);
  }
}

void sub_24A156158()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Asset(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_24A123464(&qword_26976B648);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1594A4(v1, (uint64_t)v7, &qword_26976B648);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v7, 1, v2) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    sub_24A159554((uint64_t)v7, (uint64_t)v4, (void (*)(void))type metadata accessor for Asset);
    Hasher._combine(_:)(0);
    type metadata accessor for URL();
    sub_24A15945C(&qword_26976AC48, MEMORY[0x263F06EA8]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v8 = type metadata accessor for Asset.ID(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = (uint64_t *)&v4[*(int *)(v8 + 24)];
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    sub_24A1233B4(*v9, v11);
    Data.hash(into:)();
    sub_24A12340C(v10, v11);
    uint64_t v12 = (uint64_t *)&v4[*(int *)(v8 + 28)];
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    sub_24A1233B4(*v12, v14);
    Data.hash(into:)();
    sub_24A12340C(v13, v14);
    uint64_t v15 = (uint64_t *)&v4[*(int *)(v2 + 20)];
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    unint64_t v19 = v15[3];
    sub_24A1233B4(*v15, v17);
    Data.hash(into:)();
    sub_24A12340C(v16, v17);
    sub_24A1233B4(v18, v19);
    Data.hash(into:)();
    sub_24A12340C(v18, v19);
    Hasher._combine(_:)(*(void *)&v4[*(int *)(v2 + 24)]);
    sub_24A159500((uint64_t)v4, (void (*)(void))type metadata accessor for Asset);
  }
}

uint64_t UploadResponseMessage.hash(into:)(uint64_t a1)
{
  uint64_t v4 = v2;
  uint64_t v6 = sub_24A123464(&qword_26976B648);
  uint64_t v7 = sub_24A1291B8(v6);
  MEMORY[0x270FA5388](v7);
  sub_24A1596E8();
  type metadata accessor for UploadResponseMessage();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v8);
  sub_24A1595F0();
  sub_24A1565D0(v4, (uint64_t)v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_24A157C9C((uint64_t)v3, v1);
      Hasher._combine(_:)(1uLL);
      sub_24A156158();
      return sub_24A15417C(v1, &qword_26976B648);
    case 2u:
      uint64_t v9 = *v3;
      Hasher._combine(_:)(2uLL);
      sub_24A137DF0(a1, v9);
      return swift_bridgeObjectRelease();
    case 3u:
      uint64_t v10 = *v3;
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(0);
      sub_24A137E54(a1, v10);
      return swift_bridgeObjectRelease();
    default:
      Hasher._combine(_:)(0);
      sub_24A1384E8();
      return swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for UploadResponseMessage()
{
  uint64_t result = qword_26976B8F8;
  if (!qword_26976B8F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A1565D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UploadResponseMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static UploadResponseMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = sub_24A123464(&qword_26976B648);
  uint64_t v9 = sub_24A1291B8(v8);
  MEMORY[0x270FA5388](v9);
  sub_24A1595D8();
  type metadata accessor for UploadResponseMessage();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v10);
  sub_24A1596B4();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v32 - v13;
  MEMORY[0x270FA5388](v12);
  sub_24A15972C();
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)&v32 - v16;
  uint64_t v18 = sub_24A123464(&qword_26976B820);
  uint64_t v19 = sub_24A1291B8(v18);
  MEMORY[0x270FA5388](v19);
  sub_24A159698();
  uint64_t v21 = v2 + v20;
  sub_24A1565D0(a1, v2);
  sub_24A1565D0(a2, v21);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_24A1565D0(v2, v4);
      if (sub_24A159714() == 1)
      {
        sub_24A157C9C(v21, v3);
        char v23 = sub_24A155BD8(v4, v3);
        uint64_t v24 = sub_24A1596DC();
        sub_24A15417C(v24, v25);
        sub_24A15417C(v4, &qword_26976B648);
        goto LABEL_12;
      }
      sub_24A15417C(v4, &qword_26976B648);
      goto LABEL_15;
    case 2u:
      sub_24A1565D0(v2, (uint64_t)v14);
      if (sub_24A159714() != 2) {
        goto LABEL_13;
      }
      uint64_t v26 = sub_24A1596DC();
      char v28 = sub_24A132180(v26, v27);
      goto LABEL_10;
    case 3u:
      sub_24A1565D0(v2, v5);
      if (sub_24A159714() != 3) {
        goto LABEL_13;
      }
      unint64_t v29 = (void *)sub_24A1596DC();
      char v28 = sub_24A1321EC(v29, v30);
LABEL_10:
      char v23 = v28;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    default:
      sub_24A1565D0(v2, (uint64_t)v17);
      if (sub_24A159714())
      {
LABEL_13:
        swift_bridgeObjectRelease();
LABEL_15:
        sub_24A15417C(v2, &qword_26976B820);
        char v23 = 0;
      }
      else
      {
        sub_24A1596DC();
        sub_24A1340CC();
        char v23 = v22;
        swift_bridgeObjectRelease();
LABEL_11:
        swift_bridgeObjectRelease();
LABEL_12:
        sub_24A159500(v2, (void (*)(void))type metadata accessor for UploadResponseMessage);
      }
      return v23 & 1;
  }
}

uint64_t sub_24A15690C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6172656D65687065 && a2 == 0xEE0074657373416CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6574736973726570 && a2 == 0xEE00746573734164;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6C616E676973 && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000019 && a2 == 0x800000024A18CC70)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v8) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

unint64_t sub_24A156AE0(char a1)
{
  unint64_t result = 0x6172656D65687065;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6574736973726570;
      break;
    case 2:
      unint64_t result = 0x6C616E676973;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A156B90(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_24A156C10()
{
  return 0x726F727265;
}

unint64_t sub_24A156C24()
{
  return sub_24A156AE0(*v0);
}

uint64_t sub_24A156C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A15690C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A156C54(uint64_t a1)
{
  unint64_t v2 = sub_24A157D04();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A156C90(uint64_t a1)
{
  unint64_t v2 = sub_24A157D04();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A156CD0(uint64_t a1)
{
  unint64_t v2 = sub_24A157ECC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A156D0C(uint64_t a1)
{
  unint64_t v2 = sub_24A157ECC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A156D48(uint64_t a1)
{
  unint64_t v2 = sub_24A157E80();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A156D84(uint64_t a1)
{
  unint64_t v2 = sub_24A157E80();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A156DC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A13B91C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A156DEC(uint64_t a1)
{
  unint64_t v2 = sub_24A157DE8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A156E28(uint64_t a1)
{
  unint64_t v2 = sub_24A157DE8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A156E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A156B90(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A156E94(uint64_t a1)
{
  unint64_t v2 = sub_24A157D50();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A156ED0(uint64_t a1)
{
  unint64_t v2 = sub_24A157D50();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t UploadResponseMessage.encode(to:)(void *a1)
{
  sub_24A123464(&qword_26976B828);
  sub_24A12477C();
  MEMORY[0x270FA5388](v3);
  sub_24A124810();
  sub_24A123464(&qword_26976B830);
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A15967C(v5, v20);
  sub_24A123464(&qword_26976B838);
  sub_24A12477C();
  MEMORY[0x270FA5388](v6);
  sub_24A159660(v7, v21);
  sub_24A123464(&qword_26976B648);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v8);
  sub_24A1596E8();
  sub_24A123464(&qword_26976B840);
  sub_24A12477C();
  MEMORY[0x270FA5388](v9);
  sub_24A129204();
  type metadata accessor for UploadResponseMessage();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v10);
  sub_24A129204();
  uint64_t v13 = v12 - v11;
  sub_24A123464(&qword_26976B848);
  sub_24A12477C();
  MEMORY[0x270FA5388](v14);
  sub_24A129204();
  sub_24A1234A8(a1, a1[3]);
  sub_24A157D04();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A1565D0(v22, v13);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_24A157C9C(v13, v1);
      sub_24A157E80();
      sub_24A159620();
      sub_24A157FB0(&qword_26976B880);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      sub_24A1247EC();
      v18();
      sub_24A15417C(v1, &qword_26976B648);
      sub_24A1247EC();
      return v19();
    case 2u:
      sub_24A157DE8();
      sub_24A159620();
      sub_24A157E34();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_5;
    case 3u:
      sub_24A157D50();
      sub_24A159620();
      sub_24A157D9C();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_5;
    default:
      sub_24A157ECC();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_24A123464(&qword_26976B650);
      sub_24A157FF8(&qword_26976B890, &qword_26976B898);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
LABEL_5:
      sub_24A1247EC();
      v15();
      sub_24A1247EC();
      v16();
      return swift_bridgeObjectRelease();
  }
}

Swift::Int UploadResponseMessage.hashValue.getter()
{
  Hasher.init(_seed:)();
  UploadResponseMessage.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t UploadResponseMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v76 = sub_24A123464(&qword_26976B8A0);
  sub_24A12477C();
  uint64_t v72 = v5;
  MEMORY[0x270FA5388](v6);
  sub_24A15967C(v7, v62);
  uint64_t v68 = sub_24A123464(&qword_26976B8A8);
  sub_24A12477C();
  uint64_t v71 = v8;
  MEMORY[0x270FA5388](v9);
  sub_24A124810();
  uint64_t v74 = v10;
  sub_24A123464(&qword_26976B8B0);
  sub_24A12477C();
  uint64_t v69 = v12;
  uint64_t v70 = v11;
  MEMORY[0x270FA5388](v11);
  sub_24A124810();
  uint64_t v75 = v13;
  uint64_t v80 = sub_24A123464(&qword_26976B8B8);
  sub_24A12477C();
  uint64_t v67 = v14;
  MEMORY[0x270FA5388](v15);
  sub_24A159660(v16, v62);
  uint64_t v79 = sub_24A123464(&qword_26976B8C0);
  sub_24A12477C();
  uint64_t v77 = v17;
  MEMORY[0x270FA5388](v18);
  sub_24A129204();
  uint64_t v21 = v20 - v19;
  uint64_t v78 = type metadata accessor for UploadResponseMessage();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v22);
  sub_24A1596B4();
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v62 - v25;
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  unint64_t v29 = (char *)&v62 - v28;
  MEMORY[0x270FA5388](v27);
  sub_24A15972C();
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v62 - v31;
  uint64_t v81 = a1;
  uint64_t v33 = (void *)sub_24A1596DC();
  sub_24A1234A8(v33, v34);
  sub_24A157D04();
  uint64_t v35 = (uint64_t)v82;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v35)
  {
    uint64_t v66 = v29;
    uint64_t v63 = v26;
    uint64_t v64 = v2;
    uint64_t v65 = v3;
    uint64_t v36 = v79;
    unint64_t v82 = v32;
    uint64_t v37 = v78;
    uint64_t v38 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v39 = *(void *)(v38 + 16);
    if (v39
      && (uint64_t v62 = 0,
          uint64_t v40 = *(unsigned __int8 *)(v38 + 32),
          sub_24A139204(1, v39, v38, v38 + 32, 0, (2 * v39) | 1),
          uint64_t v42 = v41,
          unint64_t v44 = v43,
          swift_bridgeObjectRelease(),
          v42 == v44 >> 1))
    {
      switch(v40)
      {
        case 1:
          LOBYTE(v83) = 1;
          sub_24A157E80();
          sub_24A1595B8();
          sub_24A123464(&qword_26976B648);
          sub_24A157FB0(&qword_26976B8D8);
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          sub_24A15977C();
          sub_24A1247EC();
          v52();
          swift_unknownObjectRelease();
          sub_24A1247EC();
          v53();
          id v51 = v66;
          sub_24A1596D0();
          break;
        case 2:
          LOBYTE(v83) = 2;
          sub_24A157DE8();
          sub_24A1595B8();
          sub_24A157F64();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          sub_24A159700();
          sub_24A1247EC();
          v54();
          swift_unknownObjectRelease();
          uint64_t v55 = sub_24A159608();
          v56(v55);
          id v51 = v63;
          void *v63 = v83;
          sub_24A1596D0();
          break;
        case 3:
          LOBYTE(v83) = 3;
          sub_24A157D50();
          sub_24A1595B8();
          sub_24A157F18();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          sub_24A159768();
          sub_24A1247EC();
          v57();
          swift_unknownObjectRelease();
          uint64_t v58 = sub_24A159608();
          v59(v58);
          id v51 = v65;
          *uint64_t v65 = v83;
          sub_24A1596D0();
          break;
        default:
          LOBYTE(v83) = 0;
          sub_24A157ECC();
          sub_24A1595B8();
          sub_24A123464(&qword_26976B650);
          sub_24A157FF8(&qword_26976B8E0, &qword_26976B8E8);
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          sub_24A159740();
          sub_24A1247EC();
          v49();
          swift_unknownObjectRelease();
          sub_24A1247EC();
          v50();
          id v51 = v64;
          *uint64_t v64 = v83;
          sub_24A1596D0();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v60 = (uint64_t)v51;
      uint64_t v61 = (uint64_t)v82;
      sub_24A159554(v60, (uint64_t)v82, (void (*)(void))type metadata accessor for UploadResponseMessage);
      sub_24A159554(v61, v73, (void (*)(void))type metadata accessor for UploadResponseMessage);
    }
    else
    {
      uint64_t v45 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v47 = v46;
      sub_24A123464(&qword_26976B008);
      *uint64_t v47 = v37;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v45 - 8) + 104))(v47, *MEMORY[0x263F8DCB0], v45);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v21, v36);
    }
  }
  return sub_24A123580(v81);
}

Swift::Int sub_24A157C2C()
{
  Hasher.init(_seed:)();
  UploadResponseMessage.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_24A157C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return UploadResponseMessage.init(from:)(a1, a2);
}

uint64_t sub_24A157C80(void *a1)
{
  return UploadResponseMessage.encode(to:)(a1);
}

uint64_t sub_24A157C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A123464(&qword_26976B648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A157D04()
{
  unint64_t result = qword_26976B850;
  if (!qword_26976B850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B850);
  }
  return result;
}

unint64_t sub_24A157D50()
{
  unint64_t result = qword_26976B858;
  if (!qword_26976B858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B858);
  }
  return result;
}

unint64_t sub_24A157D9C()
{
  unint64_t result = qword_26976B860;
  if (!qword_26976B860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B860);
  }
  return result;
}

unint64_t sub_24A157DE8()
{
  unint64_t result = qword_26976B868;
  if (!qword_26976B868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B868);
  }
  return result;
}

unint64_t sub_24A157E34()
{
  unint64_t result = qword_26976B870;
  if (!qword_26976B870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B870);
  }
  return result;
}

unint64_t sub_24A157E80()
{
  unint64_t result = qword_26976B878;
  if (!qword_26976B878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B878);
  }
  return result;
}

unint64_t sub_24A157ECC()
{
  unint64_t result = qword_26976B888;
  if (!qword_26976B888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B888);
  }
  return result;
}

unint64_t sub_24A157F18()
{
  unint64_t result = qword_26976B8C8;
  if (!qword_26976B8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B8C8);
  }
  return result;
}

unint64_t sub_24A157F64()
{
  unint64_t result = qword_26976B8D0;
  if (!qword_26976B8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B8D0);
  }
  return result;
}

uint64_t sub_24A157FB0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A123538(&qword_26976B648);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A157FF8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A123538(&qword_26976B650);
    sub_24A15945C(a2, (void (*)(uint64_t))type metadata accessor for AssetSkeleton);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A15808C()
{
  return sub_24A15945C(&qword_26976B8F0, (void (*)(uint64_t))type metadata accessor for UploadResponseMessage);
}

uint64_t *initializeBufferWithCopyOfBuffer for UploadResponseMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = type metadata accessor for Asset(0);
        if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v7))
        {
          uint64_t v8 = sub_24A123464(&qword_26976B648);
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          uint64_t v9 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
          uint64_t v10 = (int *)type metadata accessor for Asset.ID(0);
          uint64_t v11 = v10[5];
          uint64_t v12 = (uint64_t *)((char *)a1 + v11);
          uint64_t v13 = (uint64_t *)((char *)a2 + v11);
          uint64_t v14 = v13[1];
          *uint64_t v12 = *v13;
          v12[1] = v14;
          uint64_t v15 = v10[6];
          uint64_t v16 = (uint64_t *)((char *)a1 + v15);
          uint64_t v17 = (uint64_t *)((char *)a2 + v15);
          uint64_t v18 = *v17;
          unint64_t v19 = v17[1];
          swift_bridgeObjectRetain();
          sub_24A1233B4(v18, v19);
          *uint64_t v16 = v18;
          v16[1] = v19;
          uint64_t v20 = v10[7];
          uint64_t v21 = (uint64_t *)((char *)a1 + v20);
          uint64_t v22 = (uint64_t *)((char *)a2 + v20);
          uint64_t v23 = *v22;
          unint64_t v24 = v22[1];
          sub_24A1233B4(*v22, v24);
          *uint64_t v21 = v23;
          v21[1] = v24;
          uint64_t v25 = *(int *)(v7 + 20);
          uint64_t v26 = (uint64_t *)((char *)a1 + v25);
          uint64_t v27 = (char *)a2 + v25;
          uint64_t v28 = *(uint64_t *)((char *)a2 + v25);
          unint64_t v29 = *(uint64_t *)((char *)a2 + v25 + 8);
          sub_24A1233B4(v28, v29);
          *uint64_t v26 = v28;
          v26[1] = v29;
          uint64_t v30 = *((void *)v27 + 2);
          unint64_t v31 = *((void *)v27 + 3);
          sub_24A1233B4(v30, v31);
          uint64_t v26[2] = v30;
          v26[3] = v31;
          *(uint64_t *)((char *)a1 + *(int *)(v7 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 24));
          _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v7);
        }
        break;
      default:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for UploadResponseMessage(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 3:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 1:
      uint64_t v3 = type metadata accessor for Asset(0);
      uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v3);
      if (!result)
      {
        uint64_t v4 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
        uint64_t v5 = type metadata accessor for Asset.ID(0);
        swift_bridgeObjectRelease();
        sub_24A12340C(*(void *)(a1 + *(int *)(v5 + 24)), *(void *)(a1 + *(int *)(v5 + 24) + 8));
        sub_24A12340C(*(void *)(a1 + *(int *)(v5 + 28)), *(void *)(a1 + *(int *)(v5 + 28) + 8));
        uint64_t v6 = (uint64_t *)(a1 + *(int *)(v3 + 20));
        sub_24A12340C(*v6, v6[1]);
        uint64_t v7 = v6[2];
        unint64_t v8 = v6[3];
        uint64_t result = sub_24A12340C(v7, v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for UploadResponseMessage(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v4 = type metadata accessor for Asset(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
      {
        uint64_t v5 = sub_24A123464(&qword_26976B648);
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      }
      else
      {
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
        uint64_t v8 = v7[5];
        uint64_t v9 = (void *)((char *)a1 + v8);
        uint64_t v10 = (void *)((char *)a2 + v8);
        uint64_t v11 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v11;
        uint64_t v12 = v7[6];
        uint64_t v13 = (void *)((char *)a1 + v12);
        uint64_t v14 = (void *)((char *)a2 + v12);
        uint64_t v15 = *v14;
        unint64_t v16 = v14[1];
        swift_bridgeObjectRetain();
        sub_24A1233B4(v15, v16);
        uint64_t *v13 = v15;
        v13[1] = v16;
        uint64_t v17 = v7[7];
        uint64_t v18 = (void *)((char *)a1 + v17);
        unint64_t v19 = (void *)((char *)a2 + v17);
        uint64_t v20 = *v19;
        unint64_t v21 = v19[1];
        sub_24A1233B4(*v19, v21);
        *uint64_t v18 = v20;
        v18[1] = v21;
        uint64_t v22 = *(int *)(v4 + 20);
        uint64_t v23 = (void *)((char *)a1 + v22);
        unint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = *(void *)((char *)a2 + v22);
        unint64_t v26 = *(void *)((char *)a2 + v22 + 8);
        sub_24A1233B4(v25, v26);
        *uint64_t v23 = v25;
        v23[1] = v26;
        uint64_t v27 = *((void *)v24 + 2);
        unint64_t v28 = *((void *)v24 + 3);
        sub_24A1233B4(v27, v28);
        uint64_t v23[2] = v27;
        v23[3] = v28;
        *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v4);
      }
      break;
    default:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for UploadResponseMessage(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_24A159500((uint64_t)a1, (void (*)(void))type metadata accessor for UploadResponseMessage);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v4 = type metadata accessor for Asset(0);
        if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
        {
          uint64_t v5 = sub_24A123464(&qword_26976B648);
          memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
        }
        else
        {
          uint64_t v6 = type metadata accessor for URL();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
          uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
          uint64_t v8 = v7[5];
          uint64_t v9 = (void *)((char *)a1 + v8);
          uint64_t v10 = (void *)((char *)a2 + v8);
          *uint64_t v9 = *v10;
          v9[1] = v10[1];
          uint64_t v11 = v7[6];
          uint64_t v12 = (void *)((char *)a1 + v11);
          uint64_t v13 = (void *)((char *)a2 + v11);
          uint64_t v14 = *v13;
          unint64_t v15 = v13[1];
          swift_bridgeObjectRetain();
          sub_24A1233B4(v14, v15);
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v16 = v7[7];
          uint64_t v17 = (void *)((char *)a1 + v16);
          uint64_t v18 = (void *)((char *)a2 + v16);
          uint64_t v19 = *v18;
          unint64_t v20 = v18[1];
          sub_24A1233B4(*v18, v20);
          *uint64_t v17 = v19;
          v17[1] = v20;
          uint64_t v21 = *(int *)(v4 + 20);
          uint64_t v22 = (void *)((char *)a1 + v21);
          uint64_t v23 = (char *)a2 + v21;
          uint64_t v24 = *(void *)((char *)a2 + v21);
          unint64_t v25 = *(void *)((char *)a2 + v21 + 8);
          sub_24A1233B4(v24, v25);
          *uint64_t v22 = v24;
          v22[1] = v25;
          uint64_t v26 = *((void *)v23 + 2);
          unint64_t v27 = *((void *)v23 + 3);
          sub_24A1233B4(v26, v27);
          v22[2] = v26;
          v22[3] = v27;
          *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
          _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v4);
        }
        break;
      default:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for UploadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Asset(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
    {
      uint64_t v7 = sub_24A123464(&qword_26976B648);
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      uint64_t v9 = (int *)type metadata accessor for Asset.ID(0);
      *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
      *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
      *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
      uint64_t v10 = *(int *)(v6 + 20);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      long long v13 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v13;
      *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for UploadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A159500((uint64_t)a1, (void (*)(void))type metadata accessor for UploadResponseMessage);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Asset(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = sub_24A123464(&qword_26976B648);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        uint64_t v9 = (int *)type metadata accessor for Asset.ID(0);
        *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
        *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
        *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
        uint64_t v10 = *(int *)(v6 + 20);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        long long v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        *((_OWORD *)v11 + 1) = v13;
        *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_24A158C28()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_24A158C38()
{
  sub_24A158CD4();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_24A158CD4()
{
  if (!qword_26976B908)
  {
    type metadata accessor for Asset(255);
    sub_24A15945C(&qword_26976AC88, (void (*)(uint64_t))type metadata accessor for Asset);
    sub_24A15945C((unint64_t *)&unk_26976C0A0, (void (*)(uint64_t))type metadata accessor for Asset);
    unint64_t v0 = type metadata accessor for XPCResult();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26976B908);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for UploadResponseMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A158E6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.CodingKeys()
{
  return &type metadata for UploadResponseMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.EphemeralAssetCodingKeys()
{
  return &type metadata for UploadResponseMessage.EphemeralAssetCodingKeys;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.PersistedAssetCodingKeys()
{
  return &type metadata for UploadResponseMessage.PersistedAssetCodingKeys;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.SignalCodingKeys()
{
  return &type metadata for UploadResponseMessage.SignalCodingKeys;
}

unsigned char *_s11CloudAssets21UploadResponseMessageO24EphemeralAssetCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A158F74);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.SimultaneousTransferErrorCodingKeys()
{
  return &type metadata for UploadResponseMessage.SimultaneousTransferErrorCodingKeys;
}

unint64_t sub_24A158FB0()
{
  unint64_t result = qword_26976B910;
  if (!qword_26976B910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B910);
  }
  return result;
}

unint64_t sub_24A159000()
{
  unint64_t result = qword_26976B918;
  if (!qword_26976B918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B918);
  }
  return result;
}

unint64_t sub_24A159050()
{
  unint64_t result = qword_26976B920;
  if (!qword_26976B920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B920);
  }
  return result;
}

unint64_t sub_24A1590A0()
{
  unint64_t result = qword_26976B928;
  if (!qword_26976B928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B928);
  }
  return result;
}

unint64_t sub_24A1590F0()
{
  unint64_t result = qword_26976B930;
  if (!qword_26976B930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B930);
  }
  return result;
}

unint64_t sub_24A159140()
{
  unint64_t result = qword_26976B938;
  if (!qword_26976B938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B938);
  }
  return result;
}

unint64_t sub_24A159190()
{
  unint64_t result = qword_26976B940;
  if (!qword_26976B940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B940);
  }
  return result;
}

unint64_t sub_24A1591E0()
{
  unint64_t result = qword_26976B948;
  if (!qword_26976B948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B948);
  }
  return result;
}

unint64_t sub_24A159230()
{
  unint64_t result = qword_26976B950;
  if (!qword_26976B950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B950);
  }
  return result;
}

unint64_t sub_24A159280()
{
  unint64_t result = qword_26976B958;
  if (!qword_26976B958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B958);
  }
  return result;
}

unint64_t sub_24A1592D0()
{
  unint64_t result = qword_26976B960;
  if (!qword_26976B960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B960);
  }
  return result;
}

unint64_t sub_24A159320()
{
  unint64_t result = qword_26976B968;
  if (!qword_26976B968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B968);
  }
  return result;
}

unint64_t sub_24A159370()
{
  unint64_t result = qword_26976B970;
  if (!qword_26976B970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B970);
  }
  return result;
}

unint64_t sub_24A1593C0()
{
  unint64_t result = qword_26976B978;
  if (!qword_26976B978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B978);
  }
  return result;
}

unint64_t sub_24A159410()
{
  unint64_t result = qword_26976B980;
  if (!qword_26976B980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B980);
  }
  return result;
}

uint64_t sub_24A15945C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1594A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24A123464(a3);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_24A159500(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A1247B0();
  sub_24A1247EC();
  v3();
  return a1;
}

uint64_t sub_24A159554(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_24A1595B8()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A159608()
{
  return v0;
}

uint64_t sub_24A159620()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A159640(uint64_t a1)
{
  return _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v1);
}

void sub_24A159660(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_24A15967C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_24A1596D0()
{
  return v0;
}

uint64_t sub_24A1596DC()
{
  return v0;
}

uint64_t sub_24A159700()
{
  return v0;
}

uint64_t sub_24A159714()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_24A159740()
{
  return v0;
}

uint64_t sub_24A159768()
{
  return v0;
}

uint64_t sub_24A15977C()
{
  return v0;
}

void UploadRequestMessage.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 8));
  sub_24A138818();
}

uint64_t static UploadRequestMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    char v3 = 0;
    return v3 & 1;
  }
  if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A135A18();
  char v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24A159858(uint64_t a1)
{
  unint64_t v2 = sub_24A15A360();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A159894(uint64_t a1)
{
  unint64_t v2 = sub_24A15A360();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A1598D0(uint64_t a1)
{
  unint64_t v2 = sub_24A15A2C8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A15990C(uint64_t a1)
{
  unint64_t v2 = sub_24A15A2C8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A159948(uint64_t a1)
{
  unint64_t v2 = sub_24A15A314();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A159984(uint64_t a1)
{
  unint64_t v2 = sub_24A15A314();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t UploadRequestMessage.encode(to:)(void *a1)
{
  sub_24A123464(&qword_26976B998);
  sub_24A12477C();
  uint64_t v22 = v5;
  uint64_t v23 = v4;
  MEMORY[0x270FA5388](v4);
  sub_24A129204();
  uint64_t v8 = v7 - v6;
  sub_24A123464(&qword_26976B9A0);
  sub_24A12477C();
  uint64_t v20 = v10;
  uint64_t v21 = v9;
  MEMORY[0x270FA5388](v9);
  sub_24A129204();
  uint64_t v13 = v12 - v11;
  sub_24A123464(&qword_26976B9A8);
  sub_24A12477C();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  sub_24A1396B0();
  char v17 = *(unsigned char *)(v1 + 8);
  uint64_t v18 = a1[3];
  sub_24A1234A8(a1, v18);
  sub_24A15A2C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v17)
  {
    sub_24A15A314();
    sub_24A1397AC();
    sub_24A123464(&qword_26976B9C0);
    sub_24A15A3AC(&qword_26976B9C8, &qword_26976B9D0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v8, v23);
  }
  else
  {
    sub_24A15A360();
    sub_24A1397AC();
    sub_24A123464(&qword_26976B9C0);
    sub_24A15A3AC(&qword_26976B9C8, &qword_26976B9D0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v13, v21);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v2, v18);
}

Swift::Int UploadRequestMessage.hashValue.getter()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_24A138818();
  return Hasher._finalize()();
}

uint64_t UploadRequestMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A123464(&qword_26976B9E0);
  sub_24A12477C();
  MEMORY[0x270FA5388](v3);
  sub_24A1396B0();
  sub_24A123464(&qword_26976B9E8);
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A129204();
  uint64_t v5 = sub_24A123464(&qword_26976B9F0);
  sub_24A12477C();
  uint64_t v36 = v6;
  MEMORY[0x270FA5388](v7);
  sub_24A129204();
  uint64_t v10 = v9 - v8;
  sub_24A1234A8(a1, a1[3]);
  sub_24A15A2C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v37) {
    goto LABEL_10;
  }
  uint64_t v11 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    uint64_t v13 = v5;
    uint64_t v20 = v36;
LABEL_8:
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    sub_24A123464(&qword_26976B008);
    *uint64_t v23 = &type metadata for UploadRequestMessage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v10, v13);
LABEL_10:
    uint64_t v24 = (uint64_t)a1;
    return sub_24A123580(v24);
  }
  uint64_t v13 = v5;
  char v14 = *(unsigned char *)(v11 + 32);
  sub_24A139204(1, v12, v11, v11 + 32, 0, (2 * v12) | 1);
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v16 != v18 >> 1)
  {
    uint64_t v20 = v36;
    goto LABEL_8;
  }
  char v19 = v14;
  if (v14)
  {
    LOBYTE(v38) = 1;
    sub_24A15A314();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A123464(&qword_26976B9C0);
    sub_24A15A3AC(&qword_26976B9F8, &qword_26976BA00);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v26 = sub_24A15AA48();
    v27(v26);
    swift_unknownObjectRelease();
    uint64_t v28 = sub_24A139498();
    v29(v28);
    uint64_t v30 = v38;
    char v19 = v14;
  }
  else
  {
    LOBYTE(v38) = 0;
    sub_24A15A360();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A123464(&qword_26976B9C0);
    sub_24A15A3AC(&qword_26976B9F8, &qword_26976BA00);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v31 = sub_24A15AA64();
    v32(v31);
    swift_unknownObjectRelease();
    uint64_t v33 = sub_24A139498();
    v34(v33);
    uint64_t v30 = v38;
  }
  *(void *)a2 = v30;
  *(unsigned char *)(a2 + 8) = v19;
  uint64_t v24 = (uint64_t)a1;
  return sub_24A123580(v24);
}

Swift::Int sub_24A15A238()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_24A138818();
  return Hasher._finalize()();
}

uint64_t sub_24A15A294@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return UploadRequestMessage.init(from:)(a1, a2);
}

uint64_t sub_24A15A2AC(void *a1)
{
  return UploadRequestMessage.encode(to:)(a1);
}

unint64_t sub_24A15A2C8()
{
  unint64_t result = qword_26976B9B0;
  if (!qword_26976B9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B9B0);
  }
  return result;
}

unint64_t sub_24A15A314()
{
  unint64_t result = qword_26976B9B8;
  if (!qword_26976B9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B9B8);
  }
  return result;
}

unint64_t sub_24A15A360()
{
  unint64_t result = qword_26976B9D8;
  if (!qword_26976B9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B9D8);
  }
  return result;
}

uint64_t sub_24A15A3AC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A123538(&qword_26976B9C0);
    sub_24A15A42C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A15A42C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AssetUploadRequest();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A15A474()
{
  unint64_t result = qword_26976BA08;
  if (!qword_26976BA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA08);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UploadRequestMessage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UploadRequestMessage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UploadRequestMessage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for UploadRequestMessage()
{
  return &type metadata for UploadRequestMessage;
}

unsigned char *storeEnumTagSinglePayload for UploadRequestMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A15A654);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadRequestMessage.CodingKeys()
{
  return &type metadata for UploadRequestMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for UploadRequestMessage.BatchRequestsCodingKeys()
{
  return &type metadata for UploadRequestMessage.BatchRequestsCodingKeys;
}

unsigned char *_s11CloudAssets20UploadRequestMessageO23BatchRequestsCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A15A73CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadRequestMessage.StreamRequestsCodingKeys()
{
  return &type metadata for UploadRequestMessage.StreamRequestsCodingKeys;
}

unint64_t sub_24A15A778()
{
  unint64_t result = qword_26976BA10;
  if (!qword_26976BA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA10);
  }
  return result;
}

unint64_t sub_24A15A7C8()
{
  unint64_t result = qword_26976BA18;
  if (!qword_26976BA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA18);
  }
  return result;
}

unint64_t sub_24A15A818()
{
  unint64_t result = qword_26976BA20;
  if (!qword_26976BA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA20);
  }
  return result;
}

unint64_t sub_24A15A868()
{
  unint64_t result = qword_26976BA28;
  if (!qword_26976BA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA28);
  }
  return result;
}

unint64_t sub_24A15A8B8()
{
  unint64_t result = qword_26976BA30;
  if (!qword_26976BA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA30);
  }
  return result;
}

unint64_t sub_24A15A908()
{
  unint64_t result = qword_26976BA38;
  if (!qword_26976BA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA38);
  }
  return result;
}

unint64_t sub_24A15A958()
{
  unint64_t result = qword_26976BA40;
  if (!qword_26976BA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA40);
  }
  return result;
}

unint64_t sub_24A15A9A8()
{
  unint64_t result = qword_26976BA48;
  if (!qword_26976BA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA48);
  }
  return result;
}

unint64_t sub_24A15A9F8()
{
  unint64_t result = qword_26976BA50;
  if (!qword_26976BA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA50);
  }
  return result;
}

uint64_t sub_24A15AA48()
{
  return v0;
}

uint64_t sub_24A15AA64()
{
  return v0;
}

uint64_t sub_24A15AA80(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000024A18CC90
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x6552746C75736572 && a2 == 0xEE00646576696563;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x65526C616E676973 && a2 == 0xEE00646576696563)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_24A15AC0C()
{
  return 3;
}

uint64_t sub_24A15AC14(char a1)
{
  if (!a1) {
    return 0xD000000000000011;
  }
  if (a1 == 1) {
    return 0x6552746C75736572;
  }
  return 0x65526C616E676973;
}

uint64_t sub_24A15AC88()
{
  return sub_24A15AC14(*v0);
}

uint64_t sub_24A15AC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A15AA80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A15ACB8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A15AC0C();
  *a1 = result;
  return result;
}

uint64_t sub_24A15ACE0(uint64_t a1)
{
  unint64_t v2 = sub_24A15B35C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A15AD1C(uint64_t a1)
{
  unint64_t v2 = sub_24A15B35C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A15AD58(uint64_t a1)
{
  unint64_t v2 = sub_24A15B458();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A15AD94(uint64_t a1)
{
  unint64_t v2 = sub_24A15B458();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A15ADD0(uint64_t a1)
{
  unint64_t v2 = sub_24A15B40C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A15AE0C(uint64_t a1)
{
  unint64_t v2 = sub_24A15B40C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A15AE48(uint64_t a1)
{
  unint64_t v2 = sub_24A15B504();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A15AE84(uint64_t a1)
{
  unint64_t v2 = sub_24A15B504();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AssetUploadEvent.encode(to:)(void *a1)
{
  sub_24A123464(&qword_26976BA58);
  sub_24A12477C();
  MEMORY[0x270FA5388](v2);
  sub_24A15CD74(v3, v23);
  sub_24A123464(&qword_26976BA60);
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A124810();
  sub_24A123464(&qword_26976B648);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v5);
  sub_24A129204();
  uint64_t v8 = v7 - v6;
  sub_24A123464(&qword_26976BA68);
  sub_24A12477C();
  MEMORY[0x270FA5388](v9);
  sub_24A15CD4C();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v10);
  sub_24A129204();
  uint64_t v13 = v12 - v11;
  sub_24A123464(&qword_26976BA70);
  sub_24A12477C();
  MEMORY[0x270FA5388](v14);
  sub_24A129204();
  sub_24A1234A8(a1, a1[3]);
  sub_24A15B35C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A15B3A8(v24, v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_24A157C9C(v13, v8);
      sub_24A15B458();
      sub_24A15CDA8();
      sub_24A157FB0(&qword_26976B880);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      sub_24A1247EC();
      v16();
      sub_24A15B4A4(v8);
      sub_24A1247EC();
      return v17();
    }
    sub_24A15B40C();
    sub_24A15CDA8();
    sub_24A157E34();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A1247EC();
    v21();
    sub_24A1247EC();
    v22();
  }
  else
  {
    sub_24A15B504();
    sub_24A15CDA8();
    sub_24A123464(&qword_26976B650);
    sub_24A15BCC8(&qword_26976B890, &qword_26976B898);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A1247EC();
    v19();
    sub_24A1247EC();
    v20();
  }
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for AssetUploadEvent()
{
  uint64_t result = qword_26976BAB8;
  if (!qword_26976BAB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_24A15B35C()
{
  unint64_t result = qword_26976BA78;
  if (!qword_26976BA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA78);
  }
  return result;
}

uint64_t sub_24A15B3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssetUploadEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A15B40C()
{
  unint64_t result = qword_26976BA80;
  if (!qword_26976BA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA80);
  }
  return result;
}

unint64_t sub_24A15B458()
{
  unint64_t result = qword_26976BA88;
  if (!qword_26976BA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA88);
  }
  return result;
}

uint64_t sub_24A15B4A4(uint64_t a1)
{
  uint64_t v2 = sub_24A123464(&qword_26976B648);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24A15B504()
{
  unint64_t result = qword_26976BA90;
  if (!qword_26976BA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BA90);
  }
  return result;
}

uint64_t AssetUploadEvent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v67 = sub_24A123464(&qword_26976BA98);
  sub_24A12477C();
  uint64_t v65 = v4;
  MEMORY[0x270FA5388](v5);
  sub_24A124810();
  uint64_t v70 = v6;
  uint64_t v73 = sub_24A123464(&qword_26976BAA0);
  sub_24A12477C();
  uint64_t v64 = v7;
  MEMORY[0x270FA5388](v8);
  sub_24A15CD74(v9, v57);
  uint64_t v66 = sub_24A123464(&qword_26976BAA8);
  sub_24A12477C();
  uint64_t v63 = v10;
  MEMORY[0x270FA5388](v11);
  sub_24A124810();
  uint64_t v69 = v12;
  sub_24A123464(&qword_26976BAB0);
  sub_24A12477C();
  uint64_t v71 = v14;
  uint64_t v72 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = sub_24A15CD4C();
  sub_24A1247B0();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  char v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v57 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  unint64_t v25 = (char *)&v57 - v24;
  MEMORY[0x270FA5388](v23);
  unint64_t v27 = (char *)&v57 - v26;
  uint64_t v28 = a1[3];
  uint64_t v74 = a1;
  sub_24A1234A8(a1, v28);
  sub_24A15B35C();
  uint64_t v29 = v75;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29)
  {
    uint64_t v30 = (uint64_t)v74;
  }
  else
  {
    uint64_t v58 = v25;
    uint64_t v59 = v19;
    uint64_t v60 = v27;
    uint64_t v61 = v22;
    uint64_t v31 = v72;
    uint64_t v75 = v15;
    uint64_t v32 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v33 = *(void *)(v32 + 16);
    uint64_t v62 = v2;
    if (v33
      && (int v34 = *(unsigned __int8 *)(v32 + 32),
          sub_24A139204(1, v33, v32, v32 + 32, 0, (2 * v33) | 1),
          uint64_t v36 = v35,
          unint64_t v38 = v37,
          swift_bridgeObjectRelease(),
          v36 == v38 >> 1))
    {
      if (v34)
      {
        if (v34 == 1)
        {
          LOBYTE(v76) = 1;
          sub_24A15B458();
          sub_24A15CD24();
          sub_24A123464(&qword_26976B648);
          sub_24A157FB0(&qword_26976B8D8);
          sub_24A15CDDC();
          uint64_t v30 = (uint64_t)v74;
          sub_24A1247EC();
          v46();
          swift_unknownObjectRelease();
          uint64_t v47 = sub_24A15CD90();
          v48(v47);
          uint64_t v49 = v61;
        }
        else
        {
          LOBYTE(v76) = 2;
          sub_24A15B40C();
          sub_24A15CD24();
          sub_24A157F64();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v30 = (uint64_t)v74;
          sub_24A1247EC();
          v53();
          swift_unknownObjectRelease();
          sub_24A1247EC();
          v54();
          uint64_t v49 = v59;
          *uint64_t v59 = v76;
        }
      }
      else
      {
        LOBYTE(v76) = 0;
        sub_24A15B504();
        sub_24A15CD24();
        sub_24A123464(&qword_26976B650);
        sub_24A15BCC8(&qword_26976B8E0, &qword_26976B8E8);
        sub_24A15CDDC();
        uint64_t v30 = (uint64_t)v74;
        sub_24A1247EC();
        v50();
        swift_unknownObjectRelease();
        uint64_t v51 = sub_24A15CDC4();
        v52(v51);
        uint64_t v49 = v58;
        *uint64_t v58 = v76;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v55 = (uint64_t)v49;
      uint64_t v56 = (uint64_t)v60;
      sub_24A15BC64(v55, (uint64_t)v60);
      sub_24A15BC64(v56, v68);
    }
    else
    {
      uint64_t v30 = (uint64_t)v74;
      uint64_t v39 = v75;
      uint64_t v40 = v71;
      uint64_t v41 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v43 = v42;
      sub_24A123464(&qword_26976B008);
      *unint64_t v43 = v39;
      uint64_t v44 = v62;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v43, *MEMORY[0x263F8DCB0], v41);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v44, v31);
    }
  }
  return sub_24A123580(v30);
}

uint64_t sub_24A15BC34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetUploadEvent.init(from:)(a1, a2);
}

uint64_t sub_24A15BC4C(void *a1)
{
  return AssetUploadEvent.encode(to:)(a1);
}

uint64_t sub_24A15BC64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssetUploadEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A15BCC8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A123538(&qword_26976B650);
    sub_24A15C720(a2, (void (*)(uint64_t))type metadata accessor for AssetSkeleton);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetUploadEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Asset(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = sub_24A123464(&qword_26976B648);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v9 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = (int *)type metadata accessor for Asset.ID(0);
        uint64_t v11 = v10[5];
        uint64_t v12 = (uint64_t *)((char *)a1 + v11);
        uint64_t v13 = (uint64_t *)((char *)a2 + v11);
        uint64_t v14 = v13[1];
        *uint64_t v12 = *v13;
        v12[1] = v14;
        uint64_t v15 = v10[6];
        uint64_t v16 = (uint64_t *)((char *)a1 + v15);
        uint64_t v17 = (uint64_t *)((char *)a2 + v15);
        uint64_t v18 = *v17;
        unint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        sub_24A1233B4(v18, v19);
        *uint64_t v16 = v18;
        v16[1] = v19;
        uint64_t v20 = v10[7];
        uint64_t v21 = (uint64_t *)((char *)a1 + v20);
        uint64_t v22 = (uint64_t *)((char *)a2 + v20);
        uint64_t v23 = *v22;
        unint64_t v24 = v22[1];
        sub_24A1233B4(*v22, v24);
        *uint64_t v21 = v23;
        v21[1] = v24;
        uint64_t v25 = *(int *)(v6 + 20);
        uint64_t v26 = (uint64_t *)((char *)a1 + v25);
        unint64_t v27 = (char *)a2 + v25;
        uint64_t v28 = *(uint64_t *)((char *)a2 + v25);
        unint64_t v29 = *(uint64_t *)((char *)a2 + v25 + 8);
        sub_24A1233B4(v28, v29);
        *uint64_t v26 = v28;
        v26[1] = v29;
        uint64_t v30 = *((void *)v27 + 2);
        unint64_t v31 = *((void *)v27 + 3);
        sub_24A1233B4(v30, v31);
        uint64_t v26[2] = v30;
        v26[3] = v31;
        *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
      }
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AssetUploadEvent(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_4:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_4;
  }
  uint64_t v3 = type metadata accessor for Asset(0);
  uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v3);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    uint64_t v5 = type metadata accessor for Asset.ID(0);
    swift_bridgeObjectRelease();
    sub_24A12340C(*(void *)(a1 + *(int *)(v5 + 24)), *(void *)(a1 + *(int *)(v5 + 24) + 8));
    sub_24A12340C(*(void *)(a1 + *(int *)(v5 + 28)), *(void *)(a1 + *(int *)(v5 + 28) + 8));
    uint64_t v6 = (uint64_t *)(a1 + *(int *)(v3 + 20));
    sub_24A12340C(*v6, v6[1]);
    uint64_t v7 = v6[2];
    unint64_t v8 = v6[3];
    return sub_24A12340C(v7, v8);
  }
  return result;
}

void *initializeWithCopy for AssetUploadEvent(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Asset(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
    {
      uint64_t v5 = sub_24A123464(&qword_26976B648);
      memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = (void *)((char *)a1 + v8);
      uint64_t v10 = (void *)((char *)a2 + v8);
      uint64_t v11 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v11;
      uint64_t v12 = v7[6];
      uint64_t v13 = (void *)((char *)a1 + v12);
      uint64_t v14 = (void *)((char *)a2 + v12);
      uint64_t v15 = *v14;
      unint64_t v16 = v14[1];
      swift_bridgeObjectRetain();
      sub_24A1233B4(v15, v16);
      uint64_t *v13 = v15;
      v13[1] = v16;
      uint64_t v17 = v7[7];
      uint64_t v18 = (void *)((char *)a1 + v17);
      unint64_t v19 = (void *)((char *)a2 + v17);
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      sub_24A1233B4(*v19, v21);
      *uint64_t v18 = v20;
      v18[1] = v21;
      uint64_t v22 = *(int *)(v4 + 20);
      uint64_t v23 = (void *)((char *)a1 + v22);
      unint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = *(void *)((char *)a2 + v22);
      unint64_t v26 = *(void *)((char *)a2 + v22 + 8);
      sub_24A1233B4(v25, v26);
      *uint64_t v23 = v25;
      v23[1] = v26;
      uint64_t v27 = *((void *)v24 + 2);
      unint64_t v28 = *((void *)v24 + 3);
      sub_24A1233B4(v27, v28);
      uint64_t v23[2] = v27;
      v23[3] = v28;
      *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v4);
    }
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AssetUploadEvent(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_24A15C4B4((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for Asset(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
      {
        uint64_t v5 = sub_24A123464(&qword_26976B648);
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      }
      else
      {
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
        uint64_t v8 = v7[5];
        uint64_t v9 = (void *)((char *)a1 + v8);
        uint64_t v10 = (void *)((char *)a2 + v8);
        *uint64_t v9 = *v10;
        v9[1] = v10[1];
        uint64_t v11 = v7[6];
        uint64_t v12 = (void *)((char *)a1 + v11);
        uint64_t v13 = (void *)((char *)a2 + v11);
        uint64_t v14 = *v13;
        unint64_t v15 = v13[1];
        swift_bridgeObjectRetain();
        sub_24A1233B4(v14, v15);
        *uint64_t v12 = v14;
        v12[1] = v15;
        uint64_t v16 = v7[7];
        uint64_t v17 = (void *)((char *)a1 + v16);
        uint64_t v18 = (void *)((char *)a2 + v16);
        uint64_t v19 = *v18;
        unint64_t v20 = v18[1];
        sub_24A1233B4(*v18, v20);
        *uint64_t v17 = v19;
        v17[1] = v20;
        uint64_t v21 = *(int *)(v4 + 20);
        uint64_t v22 = (void *)((char *)a1 + v21);
        uint64_t v23 = (char *)a2 + v21;
        uint64_t v24 = *(void *)((char *)a2 + v21);
        unint64_t v25 = *(void *)((char *)a2 + v21 + 8);
        sub_24A1233B4(v24, v25);
        *uint64_t v22 = v24;
        v22[1] = v25;
        uint64_t v26 = *((void *)v23 + 2);
        unint64_t v27 = *((void *)v23 + 3);
        sub_24A1233B4(v26, v27);
        v22[2] = v26;
        v22[3] = v27;
        *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v4);
      }
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24A15C4B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AssetUploadEvent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *assignWithTake for AssetUploadEvent(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A15C4B4((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Asset(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = sub_24A123464(&qword_26976B648);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        uint64_t v9 = (int *)type metadata accessor for Asset.ID(0);
        *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
        *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
        *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
        uint64_t v10 = *(int *)(v6 + 20);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        long long v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        *((_OWORD *)v11 + 1) = v13;
        *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_24A15C688()
{
  sub_24A158CD4();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t sub_24A15C720(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AssetUploadEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A15C834);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.CodingKeys()
{
  return &type metadata for AssetUploadEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.SkeletonsReceivedCodingKeys()
{
  return &type metadata for AssetUploadEvent.SkeletonsReceivedCodingKeys;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.ResultReceivedCodingKeys()
{
  return &type metadata for AssetUploadEvent.ResultReceivedCodingKeys;
}

unsigned char *_s11CloudAssets16AssetUploadEventO27SkeletonsReceivedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A15C92CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.SignalReceivedCodingKeys()
{
  return &type metadata for AssetUploadEvent.SignalReceivedCodingKeys;
}

unint64_t sub_24A15C968()
{
  unint64_t result = qword_26976BAC8;
  if (!qword_26976BAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BAC8);
  }
  return result;
}

unint64_t sub_24A15C9B8()
{
  unint64_t result = qword_26976BAD0;
  if (!qword_26976BAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BAD0);
  }
  return result;
}

unint64_t sub_24A15CA08()
{
  unint64_t result = qword_26976BAD8;
  if (!qword_26976BAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BAD8);
  }
  return result;
}

unint64_t sub_24A15CA58()
{
  unint64_t result = qword_26976BAE0;
  if (!qword_26976BAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BAE0);
  }
  return result;
}

unint64_t sub_24A15CAA8()
{
  unint64_t result = qword_26976BAE8;
  if (!qword_26976BAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BAE8);
  }
  return result;
}

unint64_t sub_24A15CAF8()
{
  unint64_t result = qword_26976BAF0;
  if (!qword_26976BAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BAF0);
  }
  return result;
}

unint64_t sub_24A15CB48()
{
  unint64_t result = qword_26976BAF8;
  if (!qword_26976BAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BAF8);
  }
  return result;
}

unint64_t sub_24A15CB98()
{
  unint64_t result = qword_26976BB00;
  if (!qword_26976BB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BB00);
  }
  return result;
}

unint64_t sub_24A15CBE8()
{
  unint64_t result = qword_26976BB08;
  if (!qword_26976BB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BB08);
  }
  return result;
}

unint64_t sub_24A15CC38()
{
  unint64_t result = qword_26976BB10;
  if (!qword_26976BB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BB10);
  }
  return result;
}

unint64_t sub_24A15CC88()
{
  unint64_t result = qword_26976BB18;
  if (!qword_26976BB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BB18);
  }
  return result;
}

unint64_t sub_24A15CCD8()
{
  unint64_t result = qword_26976BB20;
  if (!qword_26976BB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BB20);
  }
  return result;
}

uint64_t sub_24A15CD24()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A15CD4C()
{
  return type metadata accessor for AssetUploadEvent();
}

void sub_24A15CD74(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_24A15CD90()
{
  return v0;
}

uint64_t sub_24A15CDA8()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A15CDC4()
{
  return v0;
}

uint64_t sub_24A15CDDC()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t XPCMessageSender.__allocating_init(machServiceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  XPCMessageSender.init(machServiceName:)(a1, a2);
  return v4;
}

uint64_t sub_24A15CE54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F8F680];
  sub_24A123538(&qword_26976C190);
  uint64_t v3 = type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

void sub_24A15CEF0()
{
  sub_24A139550();
  uint64_t v31 = v1;
  uint64_t v32 = v0;
  uint64_t v29 = v2;
  uint64_t v30 = v3;
  sub_24A123538(&qword_26976C190);
  uint64_t v33 = type metadata accessor for AsyncThrowingStream.Continuation();
  sub_24A13DAEC();
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v8);
  unint64_t v27 = (char *)&v27 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  sub_24A13DAEC();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v28 = (uint64_t)&v27 - v17;
  uint64_t v18 = *(void (**)(void))(v12 + 16);
  sub_24A162860();
  v18();
  sub_24A154B00();
  v19();
  sub_24A162860();
  v18();
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v21 = (v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (*(unsigned __int8 *)(v12 + 80) + v21 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v31;
  *(void *)(v23 + 16) = v30;
  *(void *)(v23 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v23 + v20, v27, v33);
  *(void *)(v23 + v21) = v32;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v23 + v22, (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  swift_beginAccess();
  swift_retain();
  uint64_t v25 = v23;
  uint64_t v26 = v28;
  sub_24A1619F0((uint64_t)sub_24A1616B0, v25, v28);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v26, v10);
  swift_endAccess();
  sub_24A139538();
}

uint64_t sub_24A15D154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x270FA5388](a1);
  sub_24A123538(&qword_26976C190);
  uint64_t v7 = type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
  uint64_t v18 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v17 - v8;
  uint64_t v10 = (uint64_t *)(a1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  unint64_t v11 = v10[1];
  if (v11 >> 60 == 11)
  {
    sub_24A153F2C();
    uint64_t v12 = swift_allocError();
    unsigned char *v13 = 1;
    uint64_t v19 = v12;
  }
  else
  {
    if (v11 >> 60 != 15)
    {
      v17[1] = a4;
      v17[2] = a2;
      uint64_t v16 = *v10;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      sub_24A1233B4(v16, v11);
      JSONDecoder.init()();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      type metadata accessor for AsyncThrowingStream.Continuation();
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_24A153F88(v16, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v9, v7);
    }
    uint64_t v19 = 0;
  }
  type metadata accessor for AsyncThrowingStream.Continuation();
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_beginAccess();
  uint64_t v14 = sub_24A161808(a4);
  uint64_t result = swift_endAccess();
  if (v14) {
    return sub_24A153F78(v14);
  }
  return result;
}

uint64_t sub_24A15D480(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 112);
  if (*(void *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_24A1610E4(a1);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t))(*(void *)(v4 + 56) + 16 * v5);
      swift_retain_n();
      swift_bridgeObjectRelease();
      v7(a1);
      return swift_release_n();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_24A15D52C()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t sub_24A15D564()
{
  return v0;
}

uint64_t sub_24A15D574()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_24A14403C(v0, qword_26976BB28);
  sub_24A143E24(v0, (uint64_t)qword_26976BB28);
  type metadata accessor for XPCMessageSender();
  sub_24A123464(&qword_26976BB88);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

uint64_t XPCMessageSender.init(machServiceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for XPCMessageSender.AsyncSequenceDispatcher();
  uint64_t v6 = swift_allocObject();
  swift_defaultActor_initialize();
  type metadata accessor for UUID();
  sub_24A123464(&qword_26976BB40);
  sub_24A161E30(&qword_26976AC40, MEMORY[0x263F07508]);
  *(void *)(v6 + 112) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v3 + 56) = v6;
  uint64_t v7 = type metadata accessor for XPCSessionCacheImplementation();
  swift_allocObject();
  swift_retain_n();
  uint64_t v8 = sub_24A175D94(a1, a2, (uint64_t)sub_24A15D91C, v6);
  uint64_t v11 = v7;
  uint64_t v12 = &off_26FDF8390;
  swift_release();
  *(void *)&long long v10 = v8;
  sub_24A14EB7C(&v10, v3 + 16);
  return v3;
}

uint64_t type metadata accessor for XPCMessageSender.AsyncSequenceDispatcher()
{
  return self;
}

double sub_24A15D788@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for XPCAsyncSequenceResponse();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = sub_24A123464(&qword_26976C0D0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v11, 1, 1, v12);
  sub_24A162398(a1, (uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a2;
  sub_24A162504((uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v14 + v13);
  swift_retain();
  sub_24A14242C((uint64_t)v11, (uint64_t)&unk_26976BBC0, (uint64_t)v14);
  swift_release();
  *(void *)(a3 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

double sub_24A15D91C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A15D788(a1, v2, a2);
}

uint64_t sub_24A15D924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x270FA2498](sub_24A15D944, a4, 0);
}

uint64_t sub_24A15D944()
{
  sub_24A13A7B8();
  sub_24A15D480(*(void *)(v0 + 24));
  sub_24A13A7C4();
  return v1();
}

uint64_t XPCMessageSender.deinit()
{
  uint64_t v1 = sub_24A123464(&qword_26976C0D0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v3, 1, 1, v4);
  sub_24A144320(v0 + 16, (uint64_t)v8);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  sub_24A14EB7C(v8, v5 + 32);
  sub_24A14242C((uint64_t)v3, (uint64_t)&unk_26976BB50, v5);
  swift_release();
  sub_24A123580(v0 + 16);
  swift_release();
  return v0;
}

uint64_t sub_24A15DA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x270FA2498](sub_24A15DABC, 0, 0);
}

uint64_t sub_24A15DABC()
{
  sub_24A13A7B8();
  uint64_t v1 = sub_24A1234A8(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A15DB28, v2, 0);
}

uint64_t sub_24A15DB28()
{
  sub_24A13A7B8();
  sub_24A1763CC();
  sub_24A13A7C4();
  return v0();
}

uint64_t XPCMessageSender.__deallocating_deinit()
{
  XPCMessageSender.deinit();
  return MEMORY[0x270FA0228](v0, 64, 7);
}

uint64_t XPCMessageSender.send<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24A162698(a1, a2, a3, a4, a5, a6);
  *(void *)(v6 + 72) = v7;
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

uint64_t sub_24A15DBE8()
{
  sub_24A13A7E4();
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  long long v5 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v4 + 32) = v5;
  *(void *)(v4 + 48) = v2;
  *(void *)(v4 + 56) = v3;
  *(void *)(v4 + 64) = v1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_24A15DCE0;
  sub_24A1444BC();
  return MEMORY[0x270FA2360]();
}

uint64_t sub_24A15DCE0()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A13A7F0();
  *long long v5 = v4;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_24A1444BC();
    return MEMORY[0x270FA2498](v6, v7, v8);
  }
  else
  {
    swift_task_dealloc();
    sub_24A13A7C4();
    return v9();
  }
}

uint64_t sub_24A15DDE4()
{
  sub_24A13A7B8();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A15DE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = a8;
  uint64_t v36 = a7;
  uint64_t v33 = a6;
  uint64_t v34 = a2;
  uint64_t v37 = a4;
  uint64_t v32 = a1;
  sub_24A123538(&qword_26976C190);
  uint64_t v10 = type metadata accessor for CheckedContinuation();
  uint64_t v30 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v31 = (char *)&v30 - v14;
  uint64_t v16 = *(void *)(a5 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_24A123464(&qword_26976C0D0);
  MEMORY[0x270FA5388](v19 - 8);
  unint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v21, 1, 1, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v32, v10);
  unint64_t v23 = (*(unsigned __int8 *)(v16 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v24 = (v17 + v23 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v25 = (char *)swift_allocObject();
  *((void *)v25 + 2) = 0;
  *((void *)v25 + 3) = 0;
  uint64_t v26 = v33;
  uint64_t v27 = v34;
  *((void *)v25 + 4) = a5;
  *((void *)v25 + 5) = v26;
  uint64_t v28 = v35;
  *((void *)v25 + 6) = v36;
  *((void *)v25 + 7) = v28;
  *((void *)v25 + 8) = v27;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v25[v23], v18, a5);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v25[v24], v31, v30);
  *(void *)&v25[(v12 + v24 + 7) & 0xFFFFFFFFFFFFFFF8] = v37;
  swift_retain();
  sub_24A14242C((uint64_t)v21, (uint64_t)&unk_26976BB98, (uint64_t)v25);
  return swift_release();
}

uint64_t sub_24A15E114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[20] = v14;
  v8[21] = v15;
  v8[18] = a8;
  v8[19] = v13;
  v8[16] = a6;
  v8[17] = a7;
  v8[14] = a4;
  v8[15] = a5;
  sub_24A123538(&qword_26976C190);
  uint64_t v9 = type metadata accessor for CheckedContinuation();
  v8[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[23] = v10;
  v8[24] = *(void *)(v10 + 64);
  v8[25] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A15E210, 0, 0);
}

uint64_t sub_24A15E210()
{
  sub_24A13A7B8();
  sub_24A144320(v0[14] + 16, (uint64_t)(v0 + 2));
  uint64_t v1 = sub_24A1234A8(v0 + 2, v0[5]);
  v0[26] = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A15E290, v2, 0);
}

uint64_t sub_24A15E290()
{
  sub_24A13A7E4();
  *(void *)(v0 + 216) = sub_24A175EC4();
  *(void *)(v0 + 224) = 0;
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

uint64_t sub_24A15E318()
{
  uint64_t v26 = *(void **)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v24 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v23 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v25 = *(void *)(v0 + 136);
  sub_24A154B00();
  v7();
  uint64_t v27 = v0 + 16;
  sub_24A144320(v0 + 16, v0 + 56);
  unint64_t v8 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v9 = (v1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (char *)swift_allocObject();
  *((void *)v10 + 2) = v6;
  *((void *)v10 + 3) = v5;
  *((void *)v10 + 4) = v4;
  *((void *)v10 + 5) = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v10[v8], v24, v23);
  sub_24A14EB7C((long long *)(v0 + 56), (uint64_t)&v10[v9]);
  *(void *)&v10[(v9 + 47) & 0xFFFFFFFFFFFFFFF8] = v25;
  dispatch thunk of XPCSession.send<A, B>(_:replyHandler:)();
  if (v26)
  {
    swift_release();
    swift_release();
    sub_24A123580(v27);
    *(void *)(v0 + 96) = v26;
    id v11 = v26;
    CheckedContinuation.resume(throwing:)();
    if (qword_26976AA68 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_24A143E24(v12, (uint64_t)qword_26976BB28);
    id v13 = v26;
    id v14 = v26;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)sub_24A1627D8();
      uint64_t v18 = (void *)sub_24A154A9C();
      *(_DWORD *)uint64_t v17 = 138412290;
      id v19 = v26;
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      sub_24A162734(v20);
      *uint64_t v18 = v10;

      _os_log_impl(&dword_24A120000, v15, v16, "received %@ in sending message", v17, 0xCu);
      sub_24A123464(&qword_26976B4E0);
      swift_arrayDestroy();
      sub_24A144474();
      sub_24A144474();
    }
    else
    {
    }
  }
  else
  {
    swift_release();
    swift_release();
    sub_24A123580(v27);
  }
  swift_task_dealloc();
  sub_24A13A7C4();
  return v21();
}

uint64_t sub_24A15E62C()
{
  uint64_t v2 = *(void **)(v0 + 224);
  sub_24A123580(v0 + 16);
  *(void *)(v0 + 96) = v2;
  id v3 = v2;
  CheckedContinuation.resume(throwing:)();
  if (qword_26976AA68 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_24A143E24(v4, (uint64_t)qword_26976BB28);
  id v5 = v2;
  id v6 = v2;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)sub_24A1627D8();
    uint64_t v10 = (void *)sub_24A154A9C();
    *(_DWORD *)unint64_t v9 = 138412290;
    id v11 = v2;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    sub_24A162734(v12);
    *uint64_t v10 = v1;

    _os_log_impl(&dword_24A120000, v7, v8, "received %@ in sending message", v9, 0xCu);
    sub_24A123464(&qword_26976B4E0);
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
  }
  swift_task_dealloc();
  sub_24A13A7C4();
  return v13();
}

uint64_t sub_24A15E81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v65 = a3;
  uint64_t v68 = a2;
  uint64_t v8 = sub_24A123464(&qword_26976C0D0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v66 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_24A123464(&qword_26976BBA0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for XPCRichError();
  uint64_t v64 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v63 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v67 = (char *)&v58 - v17;
  uint64_t v18 = *(void *)(a6 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  unint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v58 - v22;
  uint64_t v24 = sub_24A123538(&qword_26976C190);
  uint64_t v25 = type metadata accessor for Result();
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (uint8_t **)((char *)&v58 - v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))((char *)&v58 - v26, a1, v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)&v69[0] = *v27;
    uint64_t v29 = *(void **)&v69[0];
    id v30 = *(id *)&v69[0];
    uint64_t v31 = v13;
    if (swift_dynamicCast())
    {
      uint64_t v61 = v24;
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v13);
      uint64_t v32 = v64;
      uint64_t v33 = v67;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v67, v12, v13);
      if (qword_26976AA68 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_24A143E24(v34, (uint64_t)qword_26976BB28);
      uint64_t v35 = v63;
      uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
      v62(v63, v33, v31);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      BOOL v38 = os_log_type_enabled(v36, v37);
      uint64_t v60 = a6;
      if (v38)
      {
        uint64_t v39 = swift_slowAlloc();
        uint64_t v59 = v29;
        uint64_t v40 = (uint8_t *)v39;
        uint64_t v41 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 138412290;
        uint64_t v58 = v40 + 4;
        sub_24A161E30(&qword_26976B778, MEMORY[0x263F8F408]);
        swift_allocError();
        uint64_t v42 = v32;
        v62(v43, v35, v31);
        uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)&v69[0] = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v41 = v44;
        uint64_t v45 = *(void (**)(char *, uint64_t))(v42 + 8);
        v45(v35, v31);
        _os_log_impl(&dword_24A120000, v36, v37, "received xpc error %@ from xpc session", v40, 0xCu);
        sub_24A123464(&qword_26976B4E0);
        swift_arrayDestroy();
        MEMORY[0x24C5BDE90](v41, -1, -1);
        uint64_t v46 = v40;
        uint64_t v29 = v59;
        MEMORY[0x24C5BDE90](v46, -1, -1);
      }
      else
      {
        uint64_t v45 = *(void (**)(char *, uint64_t))(v32 + 8);
        v45(v35, v31);
      }

      uint64_t v52 = type metadata accessor for TaskPriority();
      uint64_t v53 = v66;
      _s11CloudAssets21UploadResponseMessageOwst_0(v66, 1, 1, v52);
      sub_24A144320(v65, (uint64_t)v69);
      uint64_t v54 = swift_allocObject();
      *(void *)(v54 + 16) = 0;
      *(void *)(v54 + 24) = 0;
      sub_24A14EB7C(v69, v54 + 32);
      sub_24A1488B4(v53, (uint64_t)&unk_26976BBB0, v54);
      swift_release();
      sub_24A161E30(&qword_26976B778, MEMORY[0x263F8F408]);
      uint64_t v55 = swift_allocError();
      uint64_t v56 = v67;
      v62(v57, v67, v31);
      *(void *)&v69[0] = v55;
      type metadata accessor for CheckedContinuation();
      CheckedContinuation.resume(throwing:)();

      return ((uint64_t (*)(char *, uint64_t))v45)(v56, v31);
    }
    else
    {
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 1, 1, v13);
      sub_24A16225C((uint64_t)v12);
      if (qword_26976AA68 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_24A143E24(v48, (uint64_t)qword_26976BB28);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl(&dword_24A120000, v49, v50, "error received from xpc session is not XPC error type.", v51, 2u);
        MEMORY[0x24C5BDE90](v51, -1, -1);
      }

      *(void *)&v69[0] = v29;
      type metadata accessor for CheckedContinuation();
      return CheckedContinuation.resume(throwing:)();
    }
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v18 + 32))(v23, v27, a6);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, a6);
    type metadata accessor for CheckedContinuation();
    CheckedContinuation.resume(returning:)();
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, a6);
  }
}

uint64_t sub_24A15F020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x270FA2498](sub_24A15F040, 0, 0);
}

uint64_t sub_24A15F040()
{
  sub_24A13A7B8();
  uint64_t v1 = sub_24A1234A8(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A15F0AC, v2, 0);
}

uint64_t sub_24A15F0AC()
{
  sub_24A13A7B8();
  sub_24A175DE8();
  sub_24A15488C();
  return v0();
}

uint64_t XPCMessageSender.send<A, B>(_:)()
{
  sub_24A13A7E4();
  sub_24A162698(v1, v2, v3, v4, v5, v6);
  v0[9] = v7;
  uint64_t v9 = *(void *)(v8 - 8);
  v0[10] = v9;
  v0[11] = *(void *)(v9 + 64);
  v0[12] = swift_task_alloc();
  sub_24A123464(&qword_26976C0D0);
  v0[13] = swift_task_alloc();
  sub_24A123538(&qword_26976C190);
  sub_24A162888();
  uint64_t v10 = type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy();
  v0[14] = v10;
  sub_24A13A7A0(v10);
  v0[15] = v11;
  v0[16] = swift_task_alloc();
  sub_24A162888();
  uint64_t v12 = type metadata accessor for AsyncThrowingStream.Continuation();
  v0[17] = v12;
  sub_24A13A7A0(v12);
  v0[18] = v13;
  v0[19] = *(void *)(v14 + 64);
  v0[20] = swift_task_alloc();
  v0[21] = swift_task_alloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v15, v16, v17);
}

uint64_t sub_24A15F298()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v25 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v18 = *(void *)(v0 + 88);
  uint64_t v22 = *(void *)(v0 + 64);
  uint64_t v23 = *(void *)(v0 + 72);
  uint64_t v21 = *(void *)(v0 + 56);
  uint64_t v24 = *(void *)(v0 + 32);
  long long v20 = *(_OWORD *)(v0 + 40);
  sub_24A15CE54(v2);
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v7 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0(v5, 1, 1, v7);
  sub_24A154B00();
  v8();
  sub_24A154B00();
  v9();
  unint64_t v10 = (*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v11 = (v19 + *(unsigned __int8 *)(v6 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 32) = v24;
  *(_OWORD *)(v12 + 40) = v20;
  *(void *)(v12 + 56) = v21;
  *(void *)(v12 + 64) = v22;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 32))(v12 + v10, v17, v16);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v12 + v11, v25, v24);
  *(void *)(v12 + ((v18 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
  swift_retain();
  sub_24A1488B4(v5, (uint64_t)&unk_26976BB70, v12);
  swift_release();
  sub_24A154CEC();
  v13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A15488C();
  return v14();
}

uint64_t sub_24A15F518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 112) = v13;
  *(void *)(v8 + 96) = a6;
  *(void *)(v8 + 104) = a8;
  *(void *)(v8 + 80) = a4;
  *(void *)(v8 + 88) = a5;
  uint64_t v9 = type metadata accessor for XPCRichError();
  *(void *)(v8 + 136) = v9;
  *(void *)(v8 + 144) = *(void *)(v9 - 8);
  *(void *)(v8 + 152) = swift_task_alloc();
  *(void *)(v8 + 160) = swift_task_alloc();
  *(void *)(v8 + 168) = swift_task_alloc();
  *(void *)(v8 + 176) = type metadata accessor for XPCAsyncSequenceRequest();
  *(void *)(v8 + 184) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v8 + 192) = v10;
  *(void *)(v8 + 200) = *(void *)(v10 - 8);
  *(void *)(v8 + 208) = swift_task_alloc();
  *(void *)(v8 + 216) = swift_task_alloc();
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  *(void *)(v8 + 240) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A15F6CC, 0, 0);
}

uint64_t sub_24A15F6CC()
{
  sub_24A13A7B8();
  uint64_t v1 = *(void *)(v0 + 80);
  UUID.init()();
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)(v0 + 248) = v2;
  return MEMORY[0x270FA2498](sub_24A15F738, v2, 0);
}

uint64_t sub_24A15F738()
{
  sub_24A13A7B8();
  sub_24A15CEF0();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A15F7A4()
{
  sub_24A13A7B8();
  uint64_t v1 = sub_24A1234A8((void *)(*(void *)(v0 + 80) + 16), *(void *)(*(void *)(v0 + 80) + 40));
  *(void *)(v0 + 256) = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A15F814, v2, 0);
}

uint64_t sub_24A15F814()
{
  sub_24A13A7E4();
  *(void *)(v0 + 264) = sub_24A175EC4();
  *(void *)(v0 + 272) = 0;
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

uint64_t sub_24A15F89C()
{
  uint64_t v95 = v0;
  uint64_t v1 = *(void **)(v0 + 272);
  sub_24A154B00();
  v2();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v5 = v1;
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 200);
  if (!v5)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v12 = *(void *)(v0 + 184);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v12, v6, v8);
    uint64_t v14 = (uint64_t *)(v12 + *(int *)(v13 + 20));
    *uint64_t v14 = v10;
    v14[1] = v11;
    sub_24A161E30(&qword_26976B788, (void (*)(uint64_t))type metadata accessor for XPCAsyncSequenceRequest);
    dispatch thunk of XPCSession.send<A>(_:)();
    uint64_t v78 = *(void *)(v0 + 240);
    uint64_t v79 = *(void *)(v0 + 192);
    uint64_t v80 = *(void *)(v0 + 200);
    uint64_t v81 = *(void *)(v0 + 184);
    swift_release();
    sub_24A12C82C(v81);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v78, v79);
    goto LABEL_21;
  }
  sub_24A154CEC();
  v9();
  swift_release();
  swift_release();
  *(void *)(v0 + 16) = v5;
  id v15 = v5;
  *(void *)(v0 + 280) = sub_24A123464(&qword_26976C190);
  if (!swift_dynamicCast())
  {

    if (qword_26976AA68 != -1) {
      swift_once();
    }
    uint64_t v47 = *(void *)(v0 + 240);
    uint64_t v49 = *(void *)(v0 + 200);
    uint64_t v48 = *(void *)(v0 + 208);
    uint64_t v50 = *(void *)(v0 + 192);
    uint64_t v51 = type metadata accessor for Logger();
    sub_24A143E24(v51, (uint64_t)qword_26976BB28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v48, v47, v50);
    id v52 = v5;
    id v53 = v5;
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    uint64_t v56 = (void (*)(void))v55;
    BOOL v57 = os_log_type_enabled(v54, v55);
    uint64_t v58 = v5;
    uint64_t v59 = *(void *)(v0 + 200);
    if (v57)
    {
      loga = v54;
      uint64_t v60 = swift_slowAlloc();
      os_log_type_t typea = (void *)sub_24A154A9C();
      uint64_t v92 = sub_24A14448C();
      v94[0] = v92;
      *(_DWORD *)uint64_t v60 = 136315394;
      sub_24A161E30((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
      uint64_t v61 = sub_24A155720();
      os_log_type_t v87 = v56;
      uint64_t v63 = sub_24A14308C(v61, v62, v94);
      sub_24A1628E4(v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v56 = *(void (**)(void))(v59 + 8);
      sub_24A1549E4();
      v56();
      *(_WORD *)(v60 + 12) = 2112;
      id v64 = v58;
      uint64_t v65 = _swift_stdlib_bridgeErrorToNSError();
      sub_24A1628E4(v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t typea = v65;

      _os_log_impl(&dword_24A120000, loga, v87, "[message id = %s] failed to send message over XPC due to non-XPC error %@", (uint8_t *)v60, 0x16u);
      sub_24A123464(&qword_26976B4E0);
      sub_24A16289C();
      sub_24A144474();
      uint64_t v54 = v92;
      swift_arrayDestroy();
      sub_24A144474();
      uint64_t v66 = v56;
      sub_24A144474();
    }
    else
    {
      uint64_t v66 = *(void (**)(void))(v59 + 8);
      sub_24A1549E4();
      v66();
    }
    sub_24A1627A4();
    type metadata accessor for AsyncThrowingStream.Continuation();
    AsyncThrowingStream.Continuation.finish(throwing:)();
    ((void (*)(NSObject *, void (*)(void)))v66)(v54, v56);
LABEL_21:
    sub_24A162670();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A15488C();
    sub_24A15494C();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v16 = *(void *)(v0 + 160);
  uint64_t v17 = *(void *)(v0 + 168);
  uint64_t v19 = *(void *)(v0 + 136);
  uint64_t v18 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v16, v17, v19);
  if (qword_26976AA68 != -1) {
    swift_once();
  }
  uint64_t v21 = *(void *)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 160);
  uint64_t v22 = *(void *)(v0 + 136);
  uint64_t v23 = *(void *)(v0 + 144);
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = sub_24A143E24(v24, (uint64_t)qword_26976BB28);
  uint64_t v26 = sub_24A1626D4(v25);
  v27(v26);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  uint64_t v28 = v23 + 16;
  *(void *)(v0 + 312) = v29;
  *(void *)(v0 + 320) = v28 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v93 = v29;
  v29(v21, v20, v22);
  id v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v33 = *(void *)(v0 + 200);
  uint64_t v34 = *(void *)(v0 + 144);
  uint64_t v35 = *(void *)(v0 + 152);
  uint64_t v36 = *(void *)(v0 + 136);
  if (v32)
  {
    log = v30;
    uint64_t v37 = swift_slowAlloc();
    uint64_t v86 = (void *)sub_24A154A9C();
    v94[0] = sub_24A14448C();
    *(_DWORD *)uint64_t v37 = 136315394;
    os_log_type_t type = v31;
    sub_24A161E30((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
    uint64_t v38 = sub_24A155720();
    *(void *)(v0 + 64) = sub_24A14308C(v38, v39, v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v85 = *(void (**)(uint64_t))(v33 + 8);
    uint64_t v40 = sub_24A1628D0();
    v41(v40);
    *(_WORD *)(v37 + 12) = 2112;
    sub_24A161E30(&qword_26976B778, MEMORY[0x263F8F408]);
    uint64_t v42 = swift_allocError();
    v93(v43, v35, v36);
    uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
    sub_24A162874(v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v86 = v42;
    uint64_t v45 = *(void (**)(void))(v34 + 8);
    uint64_t v46 = v85;
    sub_24A154CEC();
    v45();
    _os_log_impl(&dword_24A120000, log, type, "[message id = %s] failed to send message over XPC due to XPC error %@", (uint8_t *)v37, 0x16u);
    sub_24A123464(&qword_26976B4E0);
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A154B80();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    uint64_t v46 = *(void (**)(uint64_t))(v33 + 8);
    uint64_t v67 = sub_24A1628D0();
    v46(v67);
    uint64_t v45 = *(void (**)(void))(v34 + 8);
    sub_24A154CEC();
    v45();
  }
  *(void *)(v0 + 328) = v45;
  *(void *)(v0 + 336) = v46;
  if (XPCRichError.canRetry.getter())
  {
    uint64_t v68 = *(void (**)(uint64_t))(v0 + 312);
    sub_24A1627F4();
    sub_24A1628BC();
    sub_24A161E30(&qword_26976B778, MEMORY[0x263F8F408]);
    uint64_t v69 = sub_24A162714();
    uint64_t v71 = sub_24A162700(v69, v70);
    v68(v71);
    *(void *)(v0 + 48) = v28;
    sub_24A1627BC();
    AsyncThrowingStream.Continuation.finish(throwing:)();
    sub_24A131348();
    v72();
    sub_24A131348();
    v73();

    goto LABEL_21;
  }
  *(void *)(v0 + 344) = sub_24A1234A8((void *)(*(void *)(v0 + 80) + 16), *(void *)(*(void *)(v0 + 80) + 40));
  sub_24A15494C();
  return MEMORY[0x270FA2498](v74, v75, v76);
}

uint64_t sub_24A1601C0()
{
  uint64_t v71 = v0;
  uint64_t v1 = *(void **)(v0 + 272);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (id *)(v0 + 16);
  id v3 = v1;
  *(void *)(v0 + 280) = sub_24A123464(&qword_26976C190);
  if ((swift_dynamicCast() & 1) == 0)
  {

    if (qword_26976AA68 != -1) {
      swift_once();
    }
    uint64_t v28 = *(void *)(v0 + 240);
    uint64_t v30 = *(void *)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 208);
    uint64_t v31 = *(void *)(v0 + 192);
    uint64_t v32 = type metadata accessor for Logger();
    sub_24A143E24(v32, (uint64_t)qword_26976BB28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v28, v31);
    id v33 = v1;
    id v34 = v1;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    uint64_t v37 = (void (*)(void))v36;
    BOOL v38 = os_log_type_enabled(v35, v36);
    uint64_t v39 = *(void *)(v0 + 200);
    if (v38)
    {
      uint64_t v66 = v35;
      uint64_t v40 = swift_slowAlloc();
      os_log_t loga = (os_log_t)sub_24A154A9C();
      uint64_t v67 = sub_24A14448C();
      uint64_t v70 = v67;
      *(_DWORD *)uint64_t v40 = 136315394;
      sub_24A161E30((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
      uint64_t v41 = sub_24A155720();
      os_log_type_t v63 = v37;
      uint64_t v43 = sub_24A14308C(v41, v42, &v70);
      sub_24A1628E4(v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(void))(v39 + 8);
      sub_24A1549E4();
      v37();
      *(_WORD *)(v40 + 12) = 2112;
      id v44 = v1;
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError();
      sub_24A1628E4(v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      loga->Class isa = (Class)v45;

      _os_log_impl(&dword_24A120000, v66, v63, "[message id = %s] failed to send message over XPC due to non-XPC error %@", (uint8_t *)v40, 0x16u);
      sub_24A123464(&qword_26976B4E0);
      sub_24A16289C();
      sub_24A144474();
      uint64_t v35 = v67;
      swift_arrayDestroy();
      sub_24A144474();
      uint64_t v46 = v37;
      sub_24A144474();
    }
    else
    {
      uint64_t v46 = *(void (**)(void))(v39 + 8);
      sub_24A1549E4();
      v46();
    }
    sub_24A1627A4();
    type metadata accessor for AsyncThrowingStream.Continuation();
    AsyncThrowingStream.Continuation.finish(throwing:)();
    ((void (*)(NSObject *, void (*)(void)))v46)(v35, v37);
LABEL_15:
    sub_24A162670();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A15488C();
    sub_24A15494C();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v4, v5, v6);
  if (qword_26976AA68 != -1) {
    swift_once();
  }
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v68 = *(void *)(v0 + 160);
  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = sub_24A143E24(v11, (uint64_t)qword_26976BB28);
  uint64_t v13 = sub_24A1626D4(v12);
  v14(v13);
  id v15 = *(void (**)(void))(v9 + 16);
  *(void *)(v0 + 312) = v15;
  *(void *)(v0 + 320) = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v8, v68, v10);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = *(void *)(v0 + 144);
  uint64_t v69 = *(void *)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 136);
  if (v18)
  {
    uint64_t v61 = *(void *)(v0 + 136);
    uint64_t v20 = v0 + 72;
    log = v16;
    uint64_t v21 = swift_slowAlloc();
    unint64_t v62 = (void *)sub_24A154A9C();
    uint64_t v70 = sub_24A14448C();
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v2 = (id *)(v21 + 4);
    sub_24A161E30((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
    uint64_t v22 = sub_24A155720();
    *(void *)(v0 + 64) = sub_24A14308C(v22, v23, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_24A16275C();
    ((void (*)(uint64_t))(v21 + 4))(v24);
    *(_WORD *)(v21 + 12) = 2112;
    sub_24A161E30(&qword_26976B778, MEMORY[0x263F8F408]);
    uint64_t v25 = swift_allocError();
    sub_24A154B00();
    v15();
    uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
    sub_24A162874(v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v62 = v25;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v27(v69, v61);
    _os_log_impl(&dword_24A120000, log, v17, "[message id = %s] failed to send message over XPC due to XPC error %@", (uint8_t *)v21, 0x16u);
    sub_24A123464(&qword_26976B4E0);
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A154B80();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    uint64_t v47 = sub_24A16275C();
    ((void (*)(uint64_t))v2)(v47);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v27(v69, v20);
  }
  *(void *)(v0 + 328) = v27;
  *(void *)(v0 + 336) = v2;
  if (XPCRichError.canRetry.getter())
  {
    uint64_t v48 = *(void (**)(uint64_t))(v0 + 312);
    sub_24A1627F4();
    sub_24A1628BC();
    sub_24A161E30(&qword_26976B778, MEMORY[0x263F8F408]);
    uint64_t v49 = sub_24A162714();
    uint64_t v51 = sub_24A162700(v49, v50);
    v48(v51);
    *(void *)(v0 + 48) = v20;
    sub_24A1627BC();
    AsyncThrowingStream.Continuation.finish(throwing:)();
    sub_24A131348();
    v52();
    sub_24A131348();
    v53();

    goto LABEL_15;
  }
  *(void *)(v0 + 344) = sub_24A1234A8((void *)(*(void *)(v0 + 80) + 16), *(void *)(*(void *)(v0 + 80) + 40));
  sub_24A15494C();
  return MEMORY[0x270FA2498](v56, v57, v58);
}

uint64_t sub_24A160974()
{
  sub_24A13A7B8();
  sub_24A175DE8();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A1609D8()
{
  uint64_t v17 = v0;
  (*(void (**)(void, void, void))(v0 + 296))(*(void *)(v0 + 216), *(void *)(v0 + 240), *(void *)(v0 + 192));
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_24A1627D8();
    uint64_t v16 = sub_24A14448C();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v1 = v4 + 4;
    sub_24A161E30((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 56) = sub_24A14308C(v5, v6, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A131348();
    v7();
    _os_log_impl(&dword_24A120000, v2, v3, "[message id = %s] evict xpc session from cache as it is no longer usable", v4, 0xCu);
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 336))(*(void *)(v0 + 216), *(void *)(v0 + 192));
  }

  uint64_t v8 = *(void (**)(uint64_t))(v0 + 312);
  sub_24A1627F4();
  sub_24A161E30(&qword_26976B778, MEMORY[0x263F8F408]);
  uint64_t v9 = sub_24A162714();
  uint64_t v11 = sub_24A162700(v9, v10);
  v8(v11);
  *(void *)(v0 + 48) = v1;
  sub_24A1627BC();
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A131348();
  v12();
  sub_24A131348();
  v13();

  sub_24A162670();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A15488C();
  return v14();
}

uint64_t sub_24A160CC4()
{
  sub_24A13A7E4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A13A840(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A13A77C;
  uint64_t v3 = sub_24A162804();
  return sub_24A15DA9C(v3, v4, v5, v6);
}

uint64_t sub_24A160D5C(uint64_t a1)
{
  return sub_24A15DE40(a1, v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_24A160D70()
{
  sub_24A139550();
  uint64_t v1 = *(void *)(v0 + 32);
  sub_24A123538(&qword_26976C190);
  uint64_t v2 = type metadata accessor for AsyncThrowingStream.Continuation();
  sub_24A13DAEC();
  uint64_t v4 = v3;
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_24A1626BC();
  uint64_t v7 = v6;
  unint64_t v9 = (v5 + v8 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_24A162840();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v2);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v9, v1);
  sub_24A139538();
  return MEMORY[0x270FA0238](v10, v11, v12);
}

uint64_t sub_24A160E88(uint64_t a1)
{
  sub_24A16278C(a1);
  sub_24A123538(&qword_26976C190);
  uint64_t v2 = type metadata accessor for AsyncThrowingStream.Continuation();
  sub_24A13A7A0(v2);
  sub_24A1626BC();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_24A13A488;
  uint64_t v11 = sub_24A16263C((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v20);
  return sub_24A15F518(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t type metadata accessor for XPCMessageSender()
{
  return self;
}

uint64_t method lookup function for XPCMessageSender(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XPCMessageSender);
}

uint64_t dispatch thunk of XPCMessageSender.__allocating_init(machServiceName:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t sub_24A16103C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_24A1611E8(a1, v4);
}

unint64_t sub_24A161080()
{
  sub_24A16281C();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  return sub_24A1612F4(v1, v0, v2);
}

unint64_t sub_24A1610E4(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_24A161E30(&qword_26976AC40, MEMORY[0x263F07508]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_24A1613D8(a1, v2);
}

unint64_t sub_24A16117C()
{
  sub_24A16281C();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v0);
  Swift::Int v2 = Hasher._finalize()();
  return sub_24A161790(v1, v0, v2);
}

unint64_t sub_24A1611E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_24A1443EC();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_24A1612F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_24A1613D8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_24A161E30(&qword_26976BB78, MEMORY[0x263F07508]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t sub_24A161598()
{
  sub_24A139550();
  sub_24A123538(&qword_26976C190);
  type metadata accessor for AsyncThrowingStream.Continuation();
  sub_24A13DAEC();
  type metadata accessor for UUID();
  sub_24A13DAEC();
  uint64_t v0 = sub_24A154A38();
  v1(v0);
  swift_release();
  sub_24A1549E4();
  v2();
  sub_24A139538();
  return MEMORY[0x270FA0238](v3, v4, v5);
}

uint64_t sub_24A1616B0(uint64_t a1)
{
  sub_24A123538(&qword_26976C190);
  uint64_t v3 = type metadata accessor for AsyncThrowingStream.Continuation();
  sub_24A13A7A0(v3);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = (*(void *)(v6 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = type metadata accessor for UUID();
  sub_24A1549B4(v8);
  uint64_t v10 = *(void *)(v1 + v7);
  uint64_t v11 = v1 + ((v7 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return sub_24A15D154(a1, v1 + v5, v10, v11);
}

unint64_t sub_24A161790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = (uint64_t *)(*(void *)(v3 + 48) + 16 * result);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      if (v10 == a1 && v9 == a2) {
        break;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t sub_24A161808(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_24A1610E4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v2;
  uint64_t v7 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  sub_24A123464(&qword_26976BB80);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(v14 + 48);
  uint64_t v10 = type metadata accessor for UUID();
  sub_24A1247B0();
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v9 + *(void *)(v11 + 72) * v4, v10);
  uint64_t v12 = *(void *)(*(void *)(v14 + 56) + 16 * v4);
  sub_24A123464(&qword_26976BB40);
  sub_24A161E30(&qword_26976AC40, MEMORY[0x263F07508]);
  _NativeDictionary._delete(at:)();
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_24A161980(uint64_t a1, void *a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_24A162774();
  sub_24A161A70(a1, a2, v5);
  *uint64_t v2 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1619F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_24A162774();
  sub_24A161B88(a1, a2, a3, v7);
  *uint64_t v3 = v9;
  return swift_bridgeObjectRelease();
}

id sub_24A161A70(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  char v7 = (void *)*v3;
  unint64_t v8 = sub_24A16103C((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v13 = v8;
  char v14 = v9;
  sub_24A123464(&qword_26976BBC8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  unint64_t v15 = sub_24A16103C((uint64_t)a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_11:
    sub_24A1443EC();
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v15;
LABEL_5:
  uint64_t v17 = *v4;
  if (v14)
  {
    uint64_t v18 = v17[7];
    id result = (id)swift_release();
    *(void *)(v18 + 8 * v13) = a1;
  }
  else
  {
    sub_24A161D2C(v13, (uint64_t)a2, a1, v17);
    return a2;
  }
  return result;
}

uint64_t sub_24A161B88(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  Swift::Int v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (void *)*v4;
  unint64_t v14 = sub_24A1610E4(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v19 = v14;
  char v20 = v15;
  sub_24A123464(&qword_26976BB80);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18)) {
    goto LABEL_5;
  }
  unint64_t v21 = sub_24A1610E4(a3);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v19 = v21;
LABEL_5:
  unint64_t v23 = *v5;
  if (v20)
  {
    uint64_t v24 = (uint64_t *)(v23[7] + 16 * v19);
    uint64_t result = swift_release();
    uint64_t v26 = v28;
    *uint64_t v24 = a1;
    v24[1] = v26;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    return sub_24A161D70(v19, (uint64_t)v12, a1, v28, v23);
  }
  return result;
}

unint64_t sub_24A161D2C(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_24A161D70(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  unint64_t v13 = (void *)(a5[7] + 16 * a1);
  void *v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_24A161E30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A161E78()
{
  sub_24A139550();
  sub_24A13DAEC();
  unint64_t v3 = ((*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
     + *(void *)(v2 + 64);
  sub_24A123538(&qword_26976C190);
  uint64_t v4 = type metadata accessor for CheckedContinuation();
  sub_24A13DAEC();
  uint64_t v6 = v5;
  unint64_t v7 = (v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_24A162840();
  swift_release();
  uint64_t v8 = sub_24A154A38();
  v9(v8);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v4);
  sub_24A139538();
  return MEMORY[0x270FA0238](v10, v11, v12);
}

uint64_t sub_24A161F80(uint64_t a1)
{
  sub_24A16278C(a1);
  sub_24A13DAEC();
  sub_24A123538(&qword_26976C190);
  uint64_t v2 = type metadata accessor for CheckedContinuation();
  sub_24A13A7A0(v2);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_24A13A77C;
  uint64_t v11 = sub_24A16263C((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v20);
  return sub_24A15E114(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_24A1620D0()
{
  sub_24A123538(&qword_26976C190);
  type metadata accessor for CheckedContinuation();
  sub_24A1247B0();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  sub_24A123580(v0 + v5);
  return MEMORY[0x270FA0238](v0, ((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

uint64_t sub_24A162194(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  sub_24A123538(&qword_26976C190);
  uint64_t v5 = type metadata accessor for CheckedContinuation();
  sub_24A13A7A0(v5);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(v1 + ((v11 + 47) & 0xFFFFFFFFFFFFFFF8));
  return sub_24A15E81C(a1, v1 + v10, v1 + v11, v12, v3, v4);
}

uint64_t sub_24A16225C(uint64_t a1)
{
  uint64_t v2 = sub_24A123464(&qword_26976BBA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A1622C0()
{
  swift_unknownObjectRelease();
  sub_24A123580(v0 + 32);
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_24A162300()
{
  sub_24A13A7E4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A13A840(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A13A77C;
  uint64_t v3 = sub_24A162804();
  return sub_24A15F020(v3, v4, v5, v6);
}

uint64_t sub_24A162398(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCAsyncSequenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A1623FC()
{
  uint64_t v1 = (int *)(type metadata accessor for XPCAsyncSequenceResponse() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for UUID();
  sub_24A1247B0();
  (*(void (**)(uint64_t))(v5 + 8))(v0 + v3);
  uint64_t v6 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v7 = v6[1];
  if (((v7 >> 60) | 4) != 0xF) {
    sub_24A12340C(*v6, v7);
  }
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t sub_24A162504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCAsyncSequenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A162568(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for XPCAsyncSequenceResponse();
  sub_24A1549B4(v3);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = swift_task_alloc();
  unint64_t v10 = (void *)sub_24A13A840(v9);
  *unint64_t v10 = v11;
  v10[1] = sub_24A13A488;
  return sub_24A15D924(a1, v5, v6, v7, v8);
}

uint64_t sub_24A16263C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v11[4] = v10;
  void v11[2] = v9;
  v11[3] = a9;
  return v11[5];
}

uint64_t sub_24A162670()
{
  return swift_task_dealloc();
}

uint64_t sub_24A162698(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = result;
  return result;
}

uint64_t sub_24A1626D4(uint64_t a1)
{
  v2[36] = a1;
  v2[37] = *(void *)(v3 + 16);
  v2[38] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v1;
}

uint64_t sub_24A162700(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A162714()
{
  return swift_allocError();
}

uint64_t sub_24A162734(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A16275C()
{
  return v0;
}

void sub_24A162774()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_24A16278C(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

void sub_24A1627A4()
{
  *(void *)(v1 + 24) = v0;
}

uint64_t sub_24A1627BC()
{
  return type metadata accessor for AsyncThrowingStream.Continuation();
}

uint64_t sub_24A1627D8()
{
  return swift_slowAlloc();
}

uint64_t sub_24A162804()
{
  return v0;
}

uint64_t sub_24A16281C()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_24A162840()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_24A162874(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t sub_24A162888()
{
  return 0;
}

uint64_t sub_24A16289C()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A1628D0()
{
  return v0;
}

void *sub_24A1628E4(uint64_t a1)
{
  *uint64_t v1 = a1;
  return v1;
}

uint64_t dispatch thunk of AssetRequest.tenantName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AssetRequest.workingDirectory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AssetRequest.credential.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t DownloadResponseMessage.hash(into:)(uint64_t a1)
{
  uint64_t v3 = sub_24A123464(&qword_26976B710);
  MEMORY[0x270FA5388](v3 - 8);
  sub_24A129204();
  uint64_t v6 = v5 - v4;
  type metadata accessor for DownloadResponseMessage();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v7);
  sub_24A1595D8();
  sub_24A162ACC((uint64_t)v1, (uint64_t)v1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = *v1;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(0);
    sub_24A137E54(a1, v8);
  }
  else
  {
    sub_24A123464(&qword_26976B728);
    sub_24A163C9C((uint64_t)v1, v6);
    Hasher._combine(_:)(0);
    sub_24A155E1C();
    String.hash(into:)();
    sub_24A15417C(v6, &qword_26976B710);
  }
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for DownloadResponseMessage()
{
  uint64_t result = qword_26976BC38;
  if (!qword_26976BC38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A162ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DownloadResponseMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static DownloadResponseMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_24A123464(&qword_26976B710);
  MEMORY[0x270FA5388](v5 - 8);
  sub_24A1595D8();
  type metadata accessor for DownloadResponseMessage();
  sub_24A1247B0();
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_24A123464(&qword_26976BBD0);
  MEMORY[0x270FA5388](v12 - 8);
  sub_24A129204();
  uint64_t v15 = v14 - v13;
  uint64_t v17 = (void **)(v14 - v13 + *(int *)(v16 + 56));
  sub_24A162ACC(a1, v14 - v13);
  sub_24A162ACC(a2, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_24A162ACC(v15, (uint64_t)v11);
    uint64_t v20 = *(int *)(sub_24A123464(&qword_26976B728) + 48);
    uint64_t v22 = *(void *)&v11[v20];
    uint64_t v21 = *(void *)&v11[v20 + 8];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      sub_24A15417C((uint64_t)v11, &qword_26976B710);
LABEL_7:
      sub_24A15417C(v15, &qword_26976BBD0);
LABEL_17:
      char v19 = 0;
      return v19 & 1;
    }
    unint64_t v23 = (char *)v17 + v20;
    uint64_t v25 = *(uint64_t *)((char *)v17 + v20);
    uint64_t v24 = *((void *)v23 + 1);
    sub_24A163C9C((uint64_t)v17, v2);
    char v26 = sub_24A155954((uint64_t)v11, v2);
    sub_24A15417C((uint64_t)v11, &qword_26976B710);
    if (v26)
    {
      if (v22 == v25 && v21 == v24)
      {
        swift_bridgeObjectRelease_n();
        sub_24A15417C(v2, &qword_26976B710);
LABEL_20:
        sub_24A163D04(v15);
        char v19 = 1;
        return v19 & 1;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A15417C(v2, &qword_26976B710);
      if (v28) {
        goto LABEL_20;
      }
    }
    else
    {
      sub_24A15417C(v2, &qword_26976B710);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_24A163D04(v15);
    goto LABEL_17;
  }
  sub_24A162ACC(v15, (uint64_t)v9);
  uint64_t v18 = (void *)*v9;
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  char v19 = sub_24A1321EC(v18, *v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A163D04(v15);
  return v19 & 1;
}

uint64_t sub_24A162E28(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000024A18CC70)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A162F18(char a1)
{
  if (a1) {
    return 0xD000000000000019;
  }
  else {
    return 0x65736E6F70736572;
  }
}

uint64_t sub_24A162F54(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746C75736572 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024A18CD70)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A16303C(char a1)
{
  if (a1) {
    return 0xD000000000000015;
  }
  else {
    return 0x746C75736572;
  }
}

uint64_t sub_24A163078()
{
  return sub_24A162F18(*v0);
}

uint64_t sub_24A163080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A162E28(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A1630A8(uint64_t a1)
{
  unint64_t v2 = sub_24A163D60();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A1630E4(uint64_t a1)
{
  unint64_t v2 = sub_24A163D60();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int sub_24A163120()
{
  return sub_24A12C1F0(*v0);
}

uint64_t sub_24A16313C()
{
  return sub_24A16303C(*v0);
}

uint64_t sub_24A163144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A162F54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A16316C(uint64_t a1)
{
  unint64_t v2 = sub_24A163DF8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A1631A8(uint64_t a1)
{
  unint64_t v2 = sub_24A163DF8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A1631E4(uint64_t a1)
{
  unint64_t v2 = sub_24A163DAC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A163220(uint64_t a1)
{
  unint64_t v2 = sub_24A163DAC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t DownloadResponseMessage.encode(to:)(void *a1)
{
  sub_24A123464(&qword_26976BBD8);
  sub_24A12477C();
  MEMORY[0x270FA5388](v2);
  sub_24A129204();
  sub_24A123464(&qword_26976BBE0);
  sub_24A12477C();
  MEMORY[0x270FA5388](v3);
  sub_24A1292CC();
  sub_24A123464(&qword_26976B710);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v4);
  sub_24A124810();
  uint64_t v19 = v5;
  type metadata accessor for DownloadResponseMessage();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v6);
  sub_24A129204();
  uint64_t v9 = v8 - v7;
  uint64_t v21 = sub_24A123464(&qword_26976BBE8);
  sub_24A12477C();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_24A129204();
  uint64_t v15 = v14 - v13;
  sub_24A1234A8(a1, a1[3]);
  sub_24A163D60();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A162ACC(v20, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_24A163DAC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A157D9C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A1247EC();
    v16();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v21);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_24A123464(&qword_26976B728);
    sub_24A163C9C(v9, v19);
    sub_24A163DF8();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A163EA8(&qword_26976BC08);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v22) {
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    swift_bridgeObjectRelease();
    sub_24A1247EC();
    v18();
    sub_24A15417C(v19, &qword_26976B710);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v15, v21);
  }
}

Swift::Int DownloadResponseMessage.hashValue.getter()
{
  Hasher.init(_seed:)();
  DownloadResponseMessage.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t DownloadResponseMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  sub_24A123464(&qword_26976BC10);
  sub_24A12477C();
  uint64_t v58 = v5;
  uint64_t v59 = v4;
  MEMORY[0x270FA5388](v4);
  sub_24A124810();
  uint64_t v61 = v6;
  uint64_t v57 = sub_24A123464(&qword_26976BC18);
  sub_24A12477C();
  uint64_t v60 = v7;
  MEMORY[0x270FA5388](v8);
  sub_24A124810();
  uint64_t v63 = v9;
  uint64_t v10 = sub_24A123464(&qword_26976BC20);
  sub_24A12477C();
  uint64_t v62 = v11;
  MEMORY[0x270FA5388](v12);
  sub_24A1292CC();
  uint64_t v13 = type metadata accessor for DownloadResponseMessage();
  sub_24A1247B0();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v53 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v53 - v21;
  uint64_t v23 = a1[3];
  id v64 = a1;
  sub_24A1234A8(a1, v23);
  sub_24A163D60();
  uint64_t v24 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    id v53 = v17;
    uint64_t v54 = v22;
    uint64_t v55 = v20;
    uint64_t v65 = v13;
    uint64_t v25 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v26 = *(void *)(v25 + 16);
    uint64_t v27 = v10;
    uint64_t v28 = v2;
    if (v26
      && (char v29 = *(unsigned char *)(v25 + 32),
          sub_24A139204(1, v26, v25, v25 + 32, 0, (2 * v26) | 1),
          uint64_t v31 = v30,
          unint64_t v33 = v32,
          swift_bridgeObjectRelease(),
          v31 == v33 >> 1))
    {
      if (v29)
      {
        char v70 = 1;
        sub_24A163DAC();
        sub_24A1653FC();
        sub_24A157F18();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        sub_24A1247EC();
        v39();
        swift_unknownObjectRelease();
        sub_24A16541C();
        sub_24A1247EC();
        v40();
        uint64_t v41 = v53;
        void *v53 = v66;
        swift_storeEnumTagMultiPayload();
        uint64_t v42 = (uint64_t)v41;
      }
      else
      {
        char v69 = 0;
        sub_24A163DF8();
        sub_24A1653FC();
        sub_24A123464(&qword_26976B710);
        char v68 = 0;
        sub_24A163EA8(&qword_26976BC28);
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        char v67 = 1;
        uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v59 = v44;
        uint64_t v45 = *(int *)(sub_24A123464(&qword_26976B728) + 48);
        uint64_t v61 = 0;
        uint64_t v46 = (uint64_t)v55;
        uint64_t v47 = (uint64_t *)&v55[v45];
        sub_24A1247EC();
        v48();
        swift_unknownObjectRelease();
        uint64_t v49 = sub_24A1653E4();
        v50(v49);
        uint64_t v51 = v59;
        *uint64_t v47 = v43;
        v47[1] = v51;
        swift_storeEnumTagMultiPayload();
        uint64_t v42 = v46;
      }
      uint64_t v52 = (uint64_t)v54;
      sub_24A163E44(v42, (uint64_t)v54);
      sub_24A163E44(v52, v56);
    }
    else
    {
      uint64_t v34 = v65;
      uint64_t v35 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v37 = v36;
      sub_24A123464(&qword_26976B008);
      *uint64_t v37 = v34;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x263F8DCB0], v35);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v28, v27);
    }
  }
  return sub_24A123580((uint64_t)v64);
}

Swift::Int sub_24A163C2C()
{
  Hasher.init(_seed:)();
  DownloadResponseMessage.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_24A163C68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DownloadResponseMessage.init(from:)(a1, a2);
}

uint64_t sub_24A163C80(void *a1)
{
  return DownloadResponseMessage.encode(to:)(a1);
}

uint64_t sub_24A163C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A123464(&qword_26976B710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A163D04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DownloadResponseMessage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24A163D60()
{
  unint64_t result = qword_26976BBF0;
  if (!qword_26976BBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BBF0);
  }
  return result;
}

unint64_t sub_24A163DAC()
{
  unint64_t result = qword_26976BBF8;
  if (!qword_26976BBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BBF8);
  }
  return result;
}

unint64_t sub_24A163DF8()
{
  unint64_t result = qword_26976BC00;
  if (!qword_26976BC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BC00);
  }
  return result;
}

uint64_t sub_24A163E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DownloadResponseMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A163EA8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A123538(&qword_26976B710);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A163EF0()
{
  return sub_24A164EC0(&qword_26976BC30, (void (*)(uint64_t))type metadata accessor for DownloadResponseMessage);
}

uint64_t *initializeBufferWithCopyOfBuffer for DownloadResponseMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = type metadata accessor for AssetDownloadResponse();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v7))
      {
        uint64_t v8 = sub_24A123464(&qword_26976B710);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v9 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = *(int *)(v7 + 20);
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = (char *)a2 + v10;
        uint64_t v46 = type metadata accessor for URL();
        uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
        v45(v11, v12, v46);
        uint64_t v13 = (int *)type metadata accessor for Asset.ID(0);
        uint64_t v14 = v13[5];
        uint64_t v15 = &v11[v14];
        uint64_t v16 = &v12[v14];
        uint64_t v17 = *((void *)v16 + 1);
        *(void *)uint64_t v15 = *(void *)v16;
        *((void *)v15 + 1) = v17;
        uint64_t v18 = v13[6];
        uint64_t v19 = (uint64_t *)&v11[v18];
        uint64_t v20 = (uint64_t *)&v12[v18];
        uint64_t v21 = *v20;
        unint64_t v22 = v20[1];
        swift_bridgeObjectRetain();
        sub_24A1233B4(v21, v22);
        *uint64_t v19 = v21;
        v19[1] = v22;
        uint64_t v23 = v13[7];
        uint64_t v24 = (uint64_t *)&v11[v23];
        uint64_t v25 = (uint64_t *)&v12[v23];
        uint64_t v26 = *v25;
        unint64_t v27 = v25[1];
        sub_24A1233B4(*v25, v27);
        *uint64_t v24 = v26;
        v24[1] = v27;
        uint64_t v28 = type metadata accessor for Asset(0);
        uint64_t v29 = *(int *)(v28 + 20);
        uint64_t v30 = (uint64_t *)&v11[v29];
        uint64_t v44 = v7;
        uint64_t v31 = &v12[v29];
        uint64_t v32 = *(void *)&v12[v29];
        unint64_t v33 = *(void *)&v12[v29 + 8];
        sub_24A1233B4(v32, v33);
        *uint64_t v30 = v32;
        v30[1] = v33;
        uint64_t v34 = *((void *)v31 + 2);
        unint64_t v35 = *((void *)v31 + 3);
        sub_24A1233B4(v34, v35);
        v30[2] = v34;
        v30[3] = v35;
        *(void *)&v11[*(int *)(v28 + 24)] = *(void *)&v12[*(int *)(v28 + 24)];
        v45((char *)a1 + *(int *)(v44 + 24), (char *)a2 + *(int *)(v44 + 24), v46);
        uint64_t v36 = *(int *)(v44 + 28);
        uint64_t v37 = (char *)a1 + v36;
        BOOL v38 = (char *)a2 + v36;
        *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
        v37[16] = v38[16];
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v44);
      }
      uint64_t v39 = *(int *)(sub_24A123464(&qword_26976B728) + 48);
      uint64_t v40 = (uint64_t *)((char *)a1 + v39);
      uint64_t v41 = (uint64_t *)((char *)a2 + v39);
      uint64_t v42 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v42;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for DownloadResponseMessage(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v2 = type metadata accessor for AssetDownloadResponse();
    if (!_s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v2))
    {
      uint64_t v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      uint64_t v4 = a1 + *(int *)(v2 + 20);
      uint64_t v5 = type metadata accessor for URL();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(v4, v5);
      uint64_t v7 = type metadata accessor for Asset.ID(0);
      swift_bridgeObjectRelease();
      sub_24A12340C(*(void *)(v4 + *(int *)(v7 + 24)), *(void *)(v4 + *(int *)(v7 + 24) + 8));
      sub_24A12340C(*(void *)(v4 + *(int *)(v7 + 28)), *(void *)(v4 + *(int *)(v7 + 28) + 8));
      uint64_t v8 = v4 + *(int *)(type metadata accessor for Asset(0) + 20);
      sub_24A12340C(*(void *)v8, *(void *)(v8 + 8));
      sub_24A12340C(*(void *)(v8 + 16), *(void *)(v8 + 24));
      v6(a1 + *(int *)(v2 + 24), v5);
    }
    sub_24A123464(&qword_26976B728);
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DownloadResponseMessage(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = type metadata accessor for AssetDownloadResponse();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
    {
      uint64_t v5 = sub_24A123464(&qword_26976B710);
      memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = *(int *)(v4 + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v43 = type metadata accessor for URL();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
      v42(v8, v9, v43);
      uint64_t v10 = (int *)type metadata accessor for Asset.ID(0);
      uint64_t v11 = v10[5];
      uint64_t v12 = &v8[v11];
      uint64_t v13 = &v9[v11];
      uint64_t v14 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = v14;
      uint64_t v15 = v10[6];
      uint64_t v16 = (uint64_t *)&v8[v15];
      uint64_t v17 = (uint64_t *)&v9[v15];
      uint64_t v18 = *v17;
      unint64_t v19 = v17[1];
      swift_bridgeObjectRetain();
      sub_24A1233B4(v18, v19);
      *uint64_t v16 = v18;
      v16[1] = v19;
      uint64_t v20 = v10[7];
      uint64_t v21 = (uint64_t *)&v8[v20];
      unint64_t v22 = (uint64_t *)&v9[v20];
      uint64_t v23 = *v22;
      unint64_t v24 = v22[1];
      sub_24A1233B4(*v22, v24);
      *uint64_t v21 = v23;
      v21[1] = v24;
      uint64_t v25 = type metadata accessor for Asset(0);
      uint64_t v26 = *(int *)(v25 + 20);
      unint64_t v27 = (uint64_t *)&v8[v26];
      uint64_t v41 = v4;
      uint64_t v28 = &v9[v26];
      uint64_t v29 = *(void *)&v9[v26];
      unint64_t v30 = *(void *)&v9[v26 + 8];
      sub_24A1233B4(v29, v30);
      *unint64_t v27 = v29;
      v27[1] = v30;
      uint64_t v31 = *((void *)v28 + 2);
      unint64_t v32 = *((void *)v28 + 3);
      sub_24A1233B4(v31, v32);
      v27[2] = v31;
      v27[3] = v32;
      *(void *)&v8[*(int *)(v25 + 24)] = *(void *)&v9[*(int *)(v25 + 24)];
      v42((char *)a1 + *(int *)(v41 + 24), (char *)a2 + *(int *)(v41 + 24), v43);
      uint64_t v33 = *(int *)(v41 + 28);
      uint64_t v34 = (char *)a1 + v33;
      unint64_t v35 = (char *)a2 + v33;
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
      v34[16] = v35[16];
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v41);
    }
    uint64_t v36 = *(int *)(sub_24A123464(&qword_26976B728) + 48);
    uint64_t v37 = (void *)((char *)a1 + v36);
    BOOL v38 = (void *)((char *)a2 + v36);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for DownloadResponseMessage(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_24A163D04((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = type metadata accessor for AssetDownloadResponse();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
      {
        uint64_t v5 = sub_24A123464(&qword_26976B710);
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      }
      else
      {
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = *(int *)(v4 + 20);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v42 = type metadata accessor for URL();
        uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
        v41(v8, v9, v42);
        uint64_t v10 = (int *)type metadata accessor for Asset.ID(0);
        uint64_t v11 = v10[5];
        uint64_t v12 = &v8[v11];
        uint64_t v13 = &v9[v11];
        *(void *)uint64_t v12 = *(void *)v13;
        *((void *)v12 + 1) = *((void *)v13 + 1);
        uint64_t v14 = v10[6];
        uint64_t v15 = (uint64_t *)&v8[v14];
        uint64_t v16 = (uint64_t *)&v9[v14];
        uint64_t v17 = *v16;
        unint64_t v18 = v16[1];
        swift_bridgeObjectRetain();
        sub_24A1233B4(v17, v18);
        uint64_t *v15 = v17;
        v15[1] = v18;
        uint64_t v19 = v10[7];
        uint64_t v20 = (uint64_t *)&v8[v19];
        uint64_t v21 = (uint64_t *)&v9[v19];
        uint64_t v22 = *v21;
        unint64_t v23 = v21[1];
        sub_24A1233B4(*v21, v23);
        *uint64_t v20 = v22;
        v20[1] = v23;
        uint64_t v24 = type metadata accessor for Asset(0);
        uint64_t v25 = *(int *)(v24 + 20);
        uint64_t v26 = (uint64_t *)&v8[v25];
        uint64_t v40 = v4;
        unint64_t v27 = &v9[v25];
        uint64_t v28 = *(void *)&v9[v25];
        unint64_t v29 = *(void *)&v9[v25 + 8];
        sub_24A1233B4(v28, v29);
        *uint64_t v26 = v28;
        v26[1] = v29;
        uint64_t v30 = *((void *)v27 + 2);
        unint64_t v31 = *((void *)v27 + 3);
        sub_24A1233B4(v30, v31);
        uint64_t v26[2] = v30;
        v26[3] = v31;
        *(void *)&v8[*(int *)(v24 + 24)] = *(void *)&v9[*(int *)(v24 + 24)];
        v41((char *)a1 + *(int *)(v40 + 24), (char *)a2 + *(int *)(v40 + 24), v42);
        uint64_t v32 = *(int *)(v40 + 28);
        uint64_t v33 = (char *)a1 + v32;
        uint64_t v34 = (char *)a2 + v32;
        char v35 = v34[16];
        *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
        v33[16] = v35;
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v40);
      }
      uint64_t v36 = *(int *)(sub_24A123464(&qword_26976B728) + 48);
      uint64_t v37 = (void *)((char *)a1 + v36);
      BOOL v38 = (void *)((char *)a2 + v36);
      *uint64_t v37 = *v38;
      v37[1] = v38[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for DownloadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = (int *)type metadata accessor for AssetDownloadResponse();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, (uint64_t)v6))
    {
      uint64_t v7 = sub_24A123464(&qword_26976B710);
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      uint64_t v9 = v6[5];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for URL();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
      v13(v10, v11, v12);
      uint64_t v14 = (int *)type metadata accessor for Asset.ID(0);
      *(_OWORD *)&v10[v14[5]] = *(_OWORD *)&v11[v14[5]];
      *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
      *(_OWORD *)&v10[v14[7]] = *(_OWORD *)&v11[v14[7]];
      uint64_t v15 = type metadata accessor for Asset(0);
      uint64_t v16 = *(int *)(v15 + 20);
      uint64_t v17 = &v10[v16];
      unint64_t v18 = &v11[v16];
      long long v19 = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v19;
      *(void *)&v10[*(int *)(v15 + 24)] = *(void *)&v11[*(int *)(v15 + 24)];
      v13(&a1[v6[6]], &a2[v6[6]], v12);
      uint64_t v20 = v6[7];
      uint64_t v21 = &a1[v20];
      uint64_t v22 = &a2[v20];
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      v21[16] = v22[16];
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, (uint64_t)v6);
    }
    uint64_t v23 = sub_24A123464(&qword_26976B728);
    *(_OWORD *)&a1[*(int *)(v23 + 48)] = *(_OWORD *)&a2[*(int *)(v23 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for DownloadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A163D04((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = (int *)type metadata accessor for AssetDownloadResponse();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, (uint64_t)v6))
      {
        uint64_t v7 = sub_24A123464(&qword_26976B710);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        uint64_t v9 = v6[5];
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for URL();
        uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
        v13(v10, v11, v12);
        uint64_t v14 = (int *)type metadata accessor for Asset.ID(0);
        *(_OWORD *)&v10[v14[5]] = *(_OWORD *)&v11[v14[5]];
        *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
        *(_OWORD *)&v10[v14[7]] = *(_OWORD *)&v11[v14[7]];
        uint64_t v15 = type metadata accessor for Asset(0);
        uint64_t v16 = *(int *)(v15 + 20);
        uint64_t v17 = &v10[v16];
        unint64_t v18 = &v11[v16];
        long long v19 = *((_OWORD *)v18 + 1);
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
        *((_OWORD *)v17 + 1) = v19;
        *(void *)&v10[*(int *)(v15 + 24)] = *(void *)&v11[*(int *)(v15 + 24)];
        v13(&a1[v6[6]], &a2[v6[6]], v12);
        uint64_t v20 = v6[7];
        uint64_t v21 = &a1[v20];
        uint64_t v22 = &a2[v20];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
        v21[16] = v22[16];
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, (uint64_t)v6);
      }
      uint64_t v23 = sub_24A123464(&qword_26976B728);
      *(_OWORD *)&a1[*(int *)(v23 + 48)] = *(_OWORD *)&a2[*(int *)(v23 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void sub_24A164D4C()
{
  sub_24A164DF4();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[4] = v1;
    v1[5] = MEMORY[0x263F8CF50] + 64;
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_24A164DF4()
{
  if (!qword_26976BC48)
  {
    type metadata accessor for AssetDownloadResponse();
    sub_24A164EC0(&qword_26976BC50, (void (*)(uint64_t))type metadata accessor for AssetDownloadResponse);
    sub_24A164EC0(&qword_26976BC58, (void (*)(uint64_t))type metadata accessor for AssetDownloadResponse);
    unint64_t v0 = type metadata accessor for XPCResult();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26976BC48);
    }
  }
}

uint64_t sub_24A164EC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadResponseMessage.CodingKeys()
{
  return &type metadata for DownloadResponseMessage.CodingKeys;
}

unsigned char *_s11CloudAssets23DownloadResponseMessageO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A164FECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadResponseMessage.ResponseCodingKeys()
{
  return &type metadata for DownloadResponseMessage.ResponseCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A1650C0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys()
{
  return &type metadata for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys;
}

unint64_t sub_24A1650FC()
{
  unint64_t result = qword_26976BC60;
  if (!qword_26976BC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BC60);
  }
  return result;
}

unint64_t sub_24A16514C()
{
  unint64_t result = qword_26976BC68;
  if (!qword_26976BC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BC68);
  }
  return result;
}

unint64_t sub_24A16519C()
{
  unint64_t result = qword_26976BC70;
  if (!qword_26976BC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BC70);
  }
  return result;
}

unint64_t sub_24A1651EC()
{
  unint64_t result = qword_26976BC78;
  if (!qword_26976BC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BC78);
  }
  return result;
}

unint64_t sub_24A16523C()
{
  unint64_t result = qword_26976BC80;
  if (!qword_26976BC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BC80);
  }
  return result;
}

unint64_t sub_24A16528C()
{
  unint64_t result = qword_26976BC88;
  if (!qword_26976BC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BC88);
  }
  return result;
}

unint64_t sub_24A1652DC()
{
  unint64_t result = qword_26976BC90;
  if (!qword_26976BC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BC90);
  }
  return result;
}

unint64_t sub_24A16532C()
{
  unint64_t result = qword_26976BC98;
  if (!qword_26976BC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BC98);
  }
  return result;
}

unint64_t sub_24A16537C()
{
  unint64_t result = qword_26976BCA0;
  if (!qword_26976BCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BCA0);
  }
  return result;
}

uint64_t sub_24A1653E4()
{
  return v0;
}

uint64_t sub_24A1653FC()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A16541C()
{
  return v0;
}

uint64_t *sub_24A165430(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v59 = v13;
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = (int *)type metadata accessor for CloudAssets_Asset(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v16, 1, (uint64_t)v17))
    {
      uint64_t v18 = sub_24A123464(&qword_26976AE50);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      void *v15 = *v16;
      v13((char *)v15 + v17[5], (char *)v16 + v17[5], v12);
      uint64_t v20 = v17[6];
      uint64_t v21 = (void *)((char *)v15 + v20);
      uint64_t v22 = (void *)((char *)v16 + v20);
      uint64_t v56 = type metadata accessor for CloudAssets_Asset.ID(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v22, 1, v56))
      {
        uint64_t v23 = sub_24A123464(&qword_26976ADE0);
        memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        uint64_t v24 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v24;
        uint64_t v57 = v12;
        uint64_t v25 = v22[3];
        void v21[2] = v22[2];
        v21[3] = v25;
        unint64_t v26 = v22[5];
        uint64_t v55 = v22[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24A1233B4(v55, v26);
        v21[4] = v55;
        v21[5] = v26;
        uint64_t v28 = v22[6];
        unint64_t v27 = v22[7];
        sub_24A1233B4(v28, v27);
        v21[6] = v28;
        v21[7] = v27;
        uint64_t v12 = v57;
        v59((char *)v21 + *(int *)(v56 + 32), (char *)v22 + *(int *)(v56 + 32), v57);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v21, 0, 1, v56);
      }
      uint64_t v29 = v17[7];
      uint64_t v30 = (void *)((char *)v15 + v29);
      unint64_t v31 = (void *)((char *)v16 + v29);
      uint64_t v32 = type metadata accessor for CloudAssets_Asset.Protector(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v31, 1, v32))
      {
        uint64_t v33 = sub_24A123464(&qword_26976ADE8);
        memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        uint64_t v58 = v12;
        uint64_t v34 = *v31;
        unint64_t v35 = v31[1];
        sub_24A1233B4(*v31, v35);
        *uint64_t v30 = v34;
        v30[1] = v35;
        uint64_t v36 = v31[2];
        unint64_t v37 = v31[3];
        sub_24A1233B4(v36, v37);
        v30[2] = v36;
        v30[3] = v37;
        uint64_t v12 = v58;
        v59((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v58);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v30, 0, 1, v32);
      }
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v15, 0, 1, (uint64_t)v17);
    }
    uint64_t v38 = a3[8];
    uint64_t v39 = (uint64_t *)((char *)v4 + v38);
    uint64_t v40 = (uint64_t *)((char *)a2 + v38);
    uint64_t v41 = type metadata accessor for CloudAssets_Credential(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v40, 1, v41))
    {
      uint64_t v42 = sub_24A123464((uint64_t *)&unk_26976C040);
      memcpy(v39, v40, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      uint64_t v43 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v43;
      uint64_t v44 = v40[3];
      void v39[2] = v40[2];
      v39[3] = v44;
      uint64_t v45 = v40[5];
      v39[4] = v40[4];
      v39[5] = v45;
      uint64_t v46 = *(int *)(v41 + 28);
      uint64_t v47 = (char *)v39 + v46;
      uint64_t v48 = (char *)v40 + v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v59(v47, v48, v12);
      uint64_t v49 = *(int *)(v41 + 32);
      uint64_t v50 = (char *)v39 + v49;
      uint64_t v51 = (char *)v40 + v49;
      uint64_t v52 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v51, 1, v52))
      {
        uint64_t v53 = sub_24A123464(&qword_26976AE48);
        memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v50, 0, 1, v52);
      }
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v39, 0, 1, v41);
    }
  }
  return v4;
}

uint64_t type metadata accessor for CloudAssets_Asset(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976BD00);
}

uint64_t type metadata accessor for CloudAssets_Asset.ID(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976BD30);
}

uint64_t type metadata accessor for CloudAssets_Asset.Protector(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976BD20);
}

uint64_t type metadata accessor for CloudAssets_Credential(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976BCC8);
}

uint64_t sub_24A165974(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = (int *)type metadata accessor for CloudAssets_Asset(0);
  if (!_s11CloudAssets21UploadResponseMessageOwet_0(v7, 1, (uint64_t)v8))
  {
    v6(v7 + v8[5], v5);
    uint64_t v9 = v7 + v8[6];
    uint64_t v10 = type metadata accessor for CloudAssets_Asset.ID(0);
    if (!_s11CloudAssets21UploadResponseMessageOwet_0(v9, 1, v10))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A12340C(*(void *)(v9 + 32), *(void *)(v9 + 40));
      sub_24A12340C(*(void *)(v9 + 48), *(void *)(v9 + 56));
      v6(v9 + *(int *)(v10 + 32), v5);
    }
    uint64_t v11 = v7 + v8[7];
    uint64_t v12 = type metadata accessor for CloudAssets_Asset.Protector(0);
    if (!_s11CloudAssets21UploadResponseMessageOwet_0(v11, 1, v12))
    {
      sub_24A12340C(*(void *)v11, *(void *)(v11 + 8));
      sub_24A12340C(*(void *)(v11 + 16), *(void *)(v11 + 24));
      v6(v11 + *(int *)(v12 + 24), v5);
    }
  }
  uint64_t v13 = a1 + a2[8];
  uint64_t v14 = type metadata accessor for CloudAssets_Credential(0);
  uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0(v13, 1, v14);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6(v13 + *(int *)(v14 + 28), v5);
    uint64_t v16 = v13 + *(int *)(v14 + 32);
    uint64_t v17 = type metadata accessor for Google_Protobuf_Timestamp();
    uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0(v16, 1, v17);
    if (!result)
    {
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
      return v18(v16, v17);
    }
  }
  return result;
}

void *sub_24A165BD4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v57 = v12;
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for CloudAssets_Asset(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v15, 1, (uint64_t)v16))
  {
    uint64_t v17 = sub_24A123464(&qword_26976AE50);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v14 = *v15;
    v12((char *)v14 + v16[5], (char *)v15 + v16[5], v11);
    uint64_t v18 = v16[6];
    uint64_t v19 = (void *)((char *)v14 + v18);
    uint64_t v20 = (void *)((char *)v15 + v18);
    uint64_t v54 = type metadata accessor for CloudAssets_Asset.ID(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v20, 1, v54))
    {
      uint64_t v21 = sub_24A123464(&qword_26976ADE0);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v22;
      uint64_t v55 = v11;
      uint64_t v23 = v20[3];
      void v19[2] = v20[2];
      v19[3] = v23;
      unint64_t v24 = v20[5];
      uint64_t v53 = v20[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24A1233B4(v53, v24);
      v19[4] = v53;
      v19[5] = v24;
      uint64_t v26 = v20[6];
      unint64_t v25 = v20[7];
      sub_24A1233B4(v26, v25);
      v19[6] = v26;
      v19[7] = v25;
      uint64_t v11 = v55;
      v57((char *)v19 + *(int *)(v54 + 32), (char *)v20 + *(int *)(v54 + 32), v55);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v19, 0, 1, v54);
    }
    uint64_t v27 = v16[7];
    uint64_t v28 = (void *)((char *)v14 + v27);
    uint64_t v29 = (void *)((char *)v15 + v27);
    uint64_t v30 = type metadata accessor for CloudAssets_Asset.Protector(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v29, 1, v30))
    {
      uint64_t v31 = sub_24A123464(&qword_26976ADE8);
      memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      uint64_t v56 = v11;
      uint64_t v32 = *v29;
      unint64_t v33 = v29[1];
      sub_24A1233B4(*v29, v33);
      *uint64_t v28 = v32;
      v28[1] = v33;
      uint64_t v34 = v29[2];
      unint64_t v35 = v29[3];
      sub_24A1233B4(v34, v35);
      v28[2] = v34;
      v28[3] = v35;
      uint64_t v11 = v56;
      v57((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v56);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v28, 0, 1, v30);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v14, 0, 1, (uint64_t)v16);
  }
  uint64_t v36 = a3[8];
  unint64_t v37 = (void *)((char *)a1 + v36);
  uint64_t v38 = (void *)((char *)a2 + v36);
  uint64_t v39 = type metadata accessor for CloudAssets_Credential(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v38, 1, v39))
  {
    uint64_t v40 = sub_24A123464((uint64_t *)&unk_26976C040);
    memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    uint64_t v41 = v38[1];
    *unint64_t v37 = *v38;
    v37[1] = v41;
    uint64_t v42 = v38[3];
    v37[2] = v38[2];
    v37[3] = v42;
    uint64_t v43 = v38[5];
    void v37[4] = v38[4];
    v37[5] = v43;
    uint64_t v44 = *(int *)(v39 + 28);
    uint64_t v45 = (char *)v37 + v44;
    uint64_t v46 = (char *)v38 + v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v57(v45, v46, v11);
    uint64_t v47 = *(int *)(v39 + 32);
    uint64_t v48 = (char *)v37 + v47;
    uint64_t v49 = (char *)v38 + v47;
    uint64_t v50 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v49, 1, v50))
    {
      uint64_t v51 = sub_24A123464(&qword_26976AE48);
      memcpy(v48, v49, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v48, 0, 1, v50);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v37, 0, 1, v39);
  }
  return a1;
}

void *sub_24A166048(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = (void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  id v109 = *v10;
  uint64_t v110 = *(void *)(v9 - 8);
  (*v10)(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CloudAssets_Asset(0);
  int v15 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v12, 1, (uint64_t)v14);
  int v16 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, (uint64_t)v14);
  if (!v15)
  {
    if (v16)
    {
      sub_24A166AB8((uint64_t)v12, (void (*)(void))type metadata accessor for CloudAssets_Asset);
      goto LABEL_7;
    }
    uint64_t v105 = a3;
    *(void *)uint64_t v12 = *(void *)v13;
    uint64_t v108 = v9;
    v109(&v12[v14[5]], &v13[v14[5]], v9);
    uint64_t v23 = v14[6];
    unint64_t v24 = &v12[v23];
    unint64_t v25 = &v13[v23];
    uint64_t v26 = type metadata accessor for CloudAssets_Asset.ID(0);
    int v27 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v24, 1, v26);
    uint64_t v104 = v26;
    int v28 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v25, 1, v26);
    if (v27)
    {
      if (!v28)
      {
        *(void *)unint64_t v24 = *(void *)v25;
        *((void *)v24 + 1) = *((void *)v25 + 1);
        *((void *)v24 + 2) = *((void *)v25 + 2);
        *((void *)v24 + 3) = *((void *)v25 + 3);
        uint64_t v30 = *((void *)v25 + 4);
        unint64_t v29 = *((void *)v25 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24A1233B4(v30, v29);
        *((void *)v24 + 4) = v30;
        *((void *)v24 + 5) = v29;
        uint64_t v32 = *((void *)v25 + 6);
        unint64_t v31 = *((void *)v25 + 7);
        sub_24A1233B4(v32, v31);
        *((void *)v24 + 6) = v32;
        *((void *)v24 + 7) = v31;
        uint64_t v9 = v108;
        (*(void (**)(char *, char *, uint64_t))(v110 + 16))(&v24[*(int *)(v104 + 32)], &v25[*(int *)(v104 + 32)], v108);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v24, 0, 1, v104);
        goto LABEL_19;
      }
    }
    else
    {
      if (!v28)
      {
        *(void *)unint64_t v24 = *(void *)v25;
        *((void *)v24 + 1) = *((void *)v25 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((void *)v24 + 2) = *((void *)v25 + 2);
        *((void *)v24 + 3) = *((void *)v25 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v87 = *((void *)v25 + 4);
        unint64_t v86 = *((void *)v25 + 5);
        sub_24A1233B4(v87, v86);
        uint64_t v88 = *((void *)v24 + 4);
        unint64_t v89 = *((void *)v24 + 5);
        *((void *)v24 + 4) = v87;
        *((void *)v24 + 5) = v86;
        sub_24A12340C(v88, v89);
        uint64_t v91 = *((void *)v25 + 6);
        unint64_t v90 = *((void *)v25 + 7);
        sub_24A1233B4(v91, v90);
        uint64_t v92 = *((void *)v24 + 6);
        unint64_t v93 = *((void *)v24 + 7);
        *((void *)v24 + 6) = v91;
        *((void *)v24 + 7) = v90;
        sub_24A12340C(v92, v93);
        uint64_t v9 = v108;
        v109(&v24[*(int *)(v26 + 32)], &v25[*(int *)(v26 + 32)], v108);
LABEL_19:
        uint64_t v47 = v14[7];
        uint64_t v48 = (uint64_t *)&v12[v47];
        uint64_t v49 = (uint64_t *)&v13[v47];
        uint64_t v50 = type metadata accessor for CloudAssets_Asset.Protector(0);
        int v51 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v48, 1, v50);
        int v52 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v49, 1, v50);
        if (v51)
        {
          if (!v52)
          {
            uint64_t v53 = *v49;
            unint64_t v54 = v49[1];
            sub_24A1233B4(*v49, v54);
            *uint64_t v48 = v53;
            v48[1] = v54;
            uint64_t v55 = v49[2];
            unint64_t v56 = v49[3];
            sub_24A1233B4(v55, v56);
            v48[2] = v55;
            v48[3] = v56;
            (*(void (**)(char *, char *, uint64_t))(v110 + 16))((char *)v48 + *(int *)(v50 + 24), (char *)v49 + *(int *)(v50 + 24), v9);
            _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v48, 0, 1, v50);
LABEL_25:
            a3 = v105;
            goto LABEL_26;
          }
        }
        else
        {
          if (!v52)
          {
            uint64_t v94 = *v49;
            unint64_t v95 = v49[1];
            sub_24A1233B4(*v49, v95);
            uint64_t v96 = *v48;
            unint64_t v97 = v48[1];
            *uint64_t v48 = v94;
            v48[1] = v95;
            sub_24A12340C(v96, v97);
            uint64_t v98 = v49[2];
            unint64_t v99 = v49[3];
            sub_24A1233B4(v98, v99);
            uint64_t v100 = v48[2];
            unint64_t v101 = v48[3];
            v48[2] = v98;
            v48[3] = v99;
            sub_24A12340C(v100, v101);
            v109((char *)v48 + *(int *)(v50 + 24), (char *)v49 + *(int *)(v50 + 24), v9);
            goto LABEL_25;
          }
          sub_24A166AB8((uint64_t)v48, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
        }
        uint64_t v57 = sub_24A123464(&qword_26976ADE8);
        memcpy(v48, v49, *(void *)(*(void *)(v57 - 8) + 64));
        goto LABEL_25;
      }
      sub_24A166AB8((uint64_t)v24, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
    }
    uint64_t v46 = sub_24A123464(&qword_26976ADE0);
    memcpy(v24, v25, *(void *)(*(void *)(v46 - 8) + 64));
    uint64_t v9 = v108;
    goto LABEL_19;
  }
  if (v16)
  {
LABEL_7:
    uint64_t v22 = sub_24A123464(&qword_26976AE50);
    memcpy(v12, v13, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_26;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  unsigned int v103 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  v103(&v12[v14[5]], &v13[v14[5]], v9);
  uint64_t v17 = v14[6];
  uint64_t v18 = &v12[v17];
  uint64_t v19 = &v13[v17];
  uint64_t v107 = v9;
  uint64_t v20 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v19, 1, v20))
  {
    uint64_t v21 = sub_24A123464(&qword_26976ADE0);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
    *((void *)v18 + 2) = *((void *)v19 + 2);
    *((void *)v18 + 3) = *((void *)v19 + 3);
    id v106 = a3;
    uint64_t v33 = *((void *)v19 + 4);
    unint64_t v102 = *((void *)v19 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24A1233B4(v33, v102);
    *((void *)v18 + 4) = v33;
    *((void *)v18 + 5) = v102;
    uint64_t v34 = *((void *)v19 + 6);
    unint64_t v35 = *((void *)v19 + 7);
    sub_24A1233B4(v34, v35);
    *((void *)v18 + 6) = v34;
    *((void *)v18 + 7) = v35;
    a3 = v106;
    v103(&v18[*(int *)(v20 + 32)], &v19[*(int *)(v20 + 32)], v107);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v20);
  }
  uint64_t v36 = v14[7];
  unint64_t v37 = &v12[v36];
  uint64_t v38 = (uint64_t *)&v13[v36];
  uint64_t v39 = type metadata accessor for CloudAssets_Asset.Protector(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v38, 1, v39))
  {
    uint64_t v40 = sub_24A123464(&qword_26976ADE8);
    memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64));
    uint64_t v9 = v107;
  }
  else
  {
    uint64_t v41 = a3;
    uint64_t v42 = *v38;
    unint64_t v43 = v38[1];
    sub_24A1233B4(*v38, v43);
    *(void *)unint64_t v37 = v42;
    *((void *)v37 + 1) = v43;
    uint64_t v44 = v38[2];
    unint64_t v45 = v38[3];
    sub_24A1233B4(v44, v45);
    *((void *)v37 + 2) = v44;
    *((void *)v37 + 3) = v45;
    a3 = v41;
    uint64_t v9 = v107;
    v103(&v37[*(int *)(v39 + 24)], (char *)v38 + *(int *)(v39 + 24), v107);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v37, 0, 1, v39);
  }
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, (uint64_t)v14);
LABEL_26:
  uint64_t v58 = a3[8];
  uint64_t v59 = (void *)((char *)a1 + v58);
  uint64_t v60 = (void *)((char *)a2 + v58);
  uint64_t v61 = type metadata accessor for CloudAssets_Credential(0);
  int v62 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v59, 1, v61);
  int v63 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v60, 1, v61);
  if (v62)
  {
    if (!v63)
    {
      *uint64_t v59 = *v60;
      v59[1] = v60[1];
      v59[2] = v60[2];
      v59[3] = v60[3];
      v59[4] = v60[4];
      v59[5] = v60[5];
      uint64_t v64 = *(int *)(v61 + 28);
      uint64_t v65 = (char *)v59 + v64;
      uint64_t v66 = (char *)v60 + v64;
      char v67 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v67(v65, v66, v9);
      uint64_t v68 = *(int *)(v61 + 32);
      char v69 = (char *)v59 + v68;
      char v70 = (char *)v60 + v68;
      uint64_t v71 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v70, 1, v71))
      {
        uint64_t v72 = sub_24A123464(&qword_26976AE48);
        memcpy(v69, v70, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16))(v69, v70, v71);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v69, 0, 1, v71);
      }
      uint64_t v82 = (uint64_t)v59;
      uint64_t v83 = v61;
      goto LABEL_39;
    }
    goto LABEL_32;
  }
  if (v63)
  {
    sub_24A166AB8((uint64_t)v59, (void (*)(void))type metadata accessor for CloudAssets_Credential);
LABEL_32:
    size_t v73 = *(void *)(*(void *)(sub_24A123464((uint64_t *)&unk_26976C040) - 8) + 64);
    uint64_t v74 = v59;
    uint64_t v75 = v60;
    goto LABEL_33;
  }
  *uint64_t v59 = *v60;
  v59[1] = v60[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[2] = v60[2];
  v59[3] = v60[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[4] = v60[4];
  v59[5] = v60[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v109((char *)v59 + *(int *)(v61 + 28), (char *)v60 + *(int *)(v61 + 28), v9);
  uint64_t v76 = *(int *)(v61 + 32);
  uint64_t v77 = (uint64_t)v59 + v76;
  uint64_t v78 = (uint64_t)v60 + v76;
  uint64_t v79 = type metadata accessor for Google_Protobuf_Timestamp();
  int v80 = _s11CloudAssets21UploadResponseMessageOwet_0(v77, 1, v79);
  int v81 = _s11CloudAssets21UploadResponseMessageOwet_0(v78, 1, v79);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
      uint64_t v82 = v77;
      uint64_t v83 = v79;
LABEL_39:
      _s11CloudAssets21UploadResponseMessageOwst_0(v82, 0, 1, v83);
      return a1;
    }
  }
  else
  {
    uint64_t v85 = *(void *)(v79 - 8);
    if (!v81)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 24))(v77, v78, v79);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v77, v79);
  }
  size_t v73 = *(void *)(*(void *)(sub_24A123464(&qword_26976AE48) - 8) + 64);
  uint64_t v74 = (void *)v77;
  uint64_t v75 = (const void *)v78;
LABEL_33:
  memcpy(v74, v75, v73);
  return a1;
}

uint64_t sub_24A166AB8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A1247B0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

_OWORD *sub_24A166B10(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(v3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  int v15 = (int *)type metadata accessor for CloudAssets_Asset(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v14, 1, (uint64_t)v15))
  {
    uint64_t v16 = sub_24A123464(&qword_26976AE50);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v43 = v3;
    void *v13 = *v14;
    v11((char *)v13 + v15[5], (char *)v14 + v15[5], v10);
    uint64_t v17 = v15[6];
    uint64_t v18 = (_OWORD *)((char *)v13 + v17);
    uint64_t v19 = (_OWORD *)((char *)v14 + v17);
    uint64_t v20 = v11;
    uint64_t v21 = type metadata accessor for CloudAssets_Asset.ID(0);
    uint64_t v44 = v20;
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v19, 1, v21))
    {
      uint64_t v22 = sub_24A123464(&qword_26976ADE0);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      long long v23 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v23;
      long long v24 = v19[3];
      v18[2] = v19[2];
      void v18[3] = v24;
      v20((char *)v18 + *(int *)(v21 + 32), (char *)v19 + *(int *)(v21 + 32), v10);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v21);
    }
    uint64_t v25 = v15[7];
    uint64_t v26 = (_OWORD *)((char *)v13 + v25);
    int v27 = (_OWORD *)((char *)v14 + v25);
    uint64_t v28 = type metadata accessor for CloudAssets_Asset.Protector(0);
    uint64_t v3 = v43;
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v27, 1, v28))
    {
      uint64_t v29 = sub_24A123464(&qword_26976ADE8);
      memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
      uint64_t v11 = v44;
    }
    else
    {
      long long v30 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v30;
      uint64_t v11 = v44;
      v44((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v10);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v26, 0, 1, v28);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v13, 0, 1, (uint64_t)v15);
  }
  uint64_t v31 = *(int *)(v3 + 32);
  uint64_t v32 = (_OWORD *)((char *)a1 + v31);
  uint64_t v33 = (_OWORD *)((char *)a2 + v31);
  uint64_t v34 = type metadata accessor for CloudAssets_Credential(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v33, 1, v34))
  {
    uint64_t v35 = sub_24A123464((uint64_t *)&unk_26976C040);
    memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    long long v36 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v36;
    v32[2] = v33[2];
    v11((char *)v32 + *(int *)(v34 + 28), (char *)v33 + *(int *)(v34 + 28), v10);
    uint64_t v37 = *(int *)(v34 + 32);
    uint64_t v38 = (char *)v32 + v37;
    uint64_t v39 = (char *)v33 + v37;
    uint64_t v40 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v39, 1, v40))
    {
      uint64_t v41 = sub_24A123464(&qword_26976AE48);
      memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v38, 0, 1, v40);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v32, 0, 1, v34);
  }
  return a1;
}

void *sub_24A166EE4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v98 = a3;
  uint64_t v14 = *(int *)(a3 + 28);
  int v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = (int *)type metadata accessor for CloudAssets_Asset(0);
  int v18 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v15, 1, (uint64_t)v17);
  int v19 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v16, 1, (uint64_t)v17);
  uint64_t v97 = v12;
  if (v18)
  {
    if (!v19)
    {
      uint64_t v94 = v13;
      *(void *)int v15 = *(void *)v16;
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v20(&v15[v17[5]], &v16[v17[5]], v11);
      uint64_t v21 = v17[6];
      uint64_t v22 = &v15[v21];
      long long v23 = &v16[v21];
      uint64_t v95 = v11;
      uint64_t v24 = type metadata accessor for CloudAssets_Asset.ID(0);
      unint64_t v93 = v20;
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v23, 1, v24))
      {
        uint64_t v25 = sub_24A123464(&qword_26976ADE0);
        memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        long long v37 = *((_OWORD *)v23 + 1);
        *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
        *((_OWORD *)v22 + 1) = v37;
        long long v38 = *((_OWORD *)v23 + 3);
        *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
        *((_OWORD *)v22 + 3) = v38;
        v20(&v22[*(int *)(v24 + 32)], &v23[*(int *)(v24 + 32)], v95);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v22, 0, 1, v24);
      }
      uint64_t v39 = v17[7];
      uint64_t v40 = &v15[v39];
      uint64_t v41 = &v16[v39];
      uint64_t v42 = type metadata accessor for CloudAssets_Asset.Protector(0);
      uint64_t v13 = v94;
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v41, 1, v42))
      {
        uint64_t v43 = sub_24A123464(&qword_26976ADE8);
        memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
        uint64_t v11 = v95;
      }
      else
      {
        long long v44 = *((_OWORD *)v41 + 1);
        *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
        *((_OWORD *)v40 + 1) = v44;
        uint64_t v11 = v95;
        v93(&v40[*(int *)(v42 + 24)], &v41[*(int *)(v42 + 24)], v95);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v40, 0, 1, v42);
      }
      uint64_t v45 = (uint64_t)v15;
      uint64_t v46 = (uint64_t)v17;
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (v19)
  {
    sub_24A166AB8((uint64_t)v15, (void (*)(void))type metadata accessor for CloudAssets_Asset);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_24A123464(&qword_26976AE50) - 8) + 64);
    int v27 = v15;
    uint64_t v28 = v16;
LABEL_8:
    memcpy(v27, v28, v26);
    goto LABEL_18;
  }
  *(void *)int v15 = *(void *)v16;
  uint64_t v96 = v11;
  v13(&v15[v17[5]], &v16[v17[5]], v11);
  uint64_t v29 = v17[6];
  long long v30 = &v15[v29];
  uint64_t v31 = &v16[v29];
  uint64_t v32 = type metadata accessor for CloudAssets_Asset.ID(0);
  int v33 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v30, 1, v32);
  int v34 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v31, 1, v32);
  if (v33)
  {
    if (!v34)
    {
      long long v35 = *((_OWORD *)v31 + 1);
      *(_OWORD *)long long v30 = *(_OWORD *)v31;
      *((_OWORD *)v30 + 1) = v35;
      long long v36 = *((_OWORD *)v31 + 3);
      *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
      *((_OWORD *)v30 + 3) = v36;
      uint64_t v11 = v96;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(&v30[*(int *)(v32 + 32)], &v31[*(int *)(v32 + 32)], v96);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v30, 0, 1, v32);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v34)
  {
    sub_24A166AB8((uint64_t)v30, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
LABEL_35:
    uint64_t v74 = sub_24A123464(&qword_26976ADE0);
    memcpy(v30, v31, *(void *)(*(void *)(v74 - 8) + 64));
    uint64_t v11 = v96;
    goto LABEL_36;
  }
  uint64_t v83 = *((void *)v31 + 1);
  *(void *)long long v30 = *(void *)v31;
  *((void *)v30 + 1) = v83;
  swift_bridgeObjectRelease();
  uint64_t v84 = *((void *)v31 + 3);
  *((void *)v30 + 2) = *((void *)v31 + 2);
  *((void *)v30 + 3) = v84;
  swift_bridgeObjectRelease();
  uint64_t v85 = *((void *)v30 + 4);
  unint64_t v86 = *((void *)v30 + 5);
  *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
  sub_24A12340C(v85, v86);
  uint64_t v87 = *((void *)v30 + 6);
  unint64_t v88 = *((void *)v30 + 7);
  *((_OWORD *)v30 + 3) = *((_OWORD *)v31 + 3);
  sub_24A12340C(v87, v88);
  uint64_t v11 = v96;
  v13(&v30[*(int *)(v32 + 32)], &v31[*(int *)(v32 + 32)], v96);
LABEL_36:
  uint64_t v75 = v17[7];
  uint64_t v76 = (uint64_t)&v15[v75];
  uint64_t v77 = &v16[v75];
  uint64_t v78 = type metadata accessor for CloudAssets_Asset.Protector(0);
  int v79 = _s11CloudAssets21UploadResponseMessageOwet_0(v76, 1, v78);
  int v80 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v77, 1, v78);
  if (v79)
  {
    if (!v80)
    {
      long long v81 = *((_OWORD *)v77 + 1);
      *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
      *(_OWORD *)(v76 + 16) = v81;
      (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v76 + *(int *)(v78 + 24), &v77[*(int *)(v78 + 24)], v11);
      uint64_t v45 = v76;
      uint64_t v46 = v78;
LABEL_17:
      _s11CloudAssets21UploadResponseMessageOwst_0(v45, 0, 1, v46);
      goto LABEL_18;
    }
    goto LABEL_44;
  }
  if (v80)
  {
    sub_24A166AB8(v76, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
LABEL_44:
    size_t v26 = *(void *)(*(void *)(sub_24A123464(&qword_26976ADE8) - 8) + 64);
    int v27 = (void *)v76;
    uint64_t v28 = v77;
    goto LABEL_8;
  }
  uint64_t v89 = *(void *)v76;
  unint64_t v90 = *(void *)(v76 + 8);
  *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
  sub_24A12340C(v89, v90);
  uint64_t v91 = *(void *)(v76 + 16);
  unint64_t v92 = *(void *)(v76 + 24);
  *(_OWORD *)(v76 + 16) = *((_OWORD *)v77 + 1);
  sub_24A12340C(v91, v92);
  v13((char *)(v76 + *(int *)(v78 + 24)), &v77[*(int *)(v78 + 24)], v11);
LABEL_18:
  uint64_t v47 = *(int *)(v98 + 32);
  uint64_t v48 = (uint64_t)a1 + v47;
  uint64_t v49 = (uint64_t)a2 + v47;
  uint64_t v50 = type metadata accessor for CloudAssets_Credential(0);
  int v51 = _s11CloudAssets21UploadResponseMessageOwet_0(v48, 1, v50);
  int v52 = _s11CloudAssets21UploadResponseMessageOwet_0(v49, 1, v50);
  if (v51)
  {
    if (!v52)
    {
      long long v53 = *(_OWORD *)(v49 + 16);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      *(_OWORD *)(v48 + 16) = v53;
      *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 32))(v48 + *(int *)(v50 + 28), v49 + *(int *)(v50 + 28), v11);
      uint64_t v54 = *(int *)(v50 + 32);
      uint64_t v55 = (void *)(v48 + v54);
      unint64_t v56 = (const void *)(v49 + v54);
      uint64_t v57 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v56, 1, v57))
      {
        uint64_t v58 = sub_24A123464(&qword_26976AE48);
        memcpy(v55, v56, *(void *)(*(void *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v57 - 8) + 32))(v55, v56, v57);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v55, 0, 1, v57);
      }
      uint64_t v71 = v48;
      uint64_t v72 = v50;
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v52)
  {
    sub_24A166AB8(v48, (void (*)(void))type metadata accessor for CloudAssets_Credential);
LABEL_24:
    size_t v59 = *(void *)(*(void *)(sub_24A123464((uint64_t *)&unk_26976C040) - 8) + 64);
    uint64_t v60 = (void *)v48;
    uint64_t v61 = (const void *)v49;
    goto LABEL_25;
  }
  uint64_t v62 = *(void *)(v49 + 8);
  *(void *)uint64_t v48 = *(void *)v49;
  *(void *)(v48 + 8) = v62;
  swift_bridgeObjectRelease();
  uint64_t v63 = *(void *)(v49 + 24);
  *(void *)(v48 + 16) = *(void *)(v49 + 16);
  *(void *)(v48 + 24) = v63;
  swift_bridgeObjectRelease();
  uint64_t v64 = *(void *)(v49 + 40);
  *(void *)(v48 + 32) = *(void *)(v49 + 32);
  *(void *)(v48 + 40) = v64;
  swift_bridgeObjectRelease();
  v13((char *)(v48 + *(int *)(v50 + 28)), (char *)(v49 + *(int *)(v50 + 28)), v11);
  uint64_t v65 = *(int *)(v50 + 32);
  uint64_t v66 = v48 + v65;
  uint64_t v67 = v49 + v65;
  uint64_t v68 = type metadata accessor for Google_Protobuf_Timestamp();
  int v69 = _s11CloudAssets21UploadResponseMessageOwet_0(v66, 1, v68);
  int v70 = _s11CloudAssets21UploadResponseMessageOwet_0(v67, 1, v68);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 32))(v66, v67, v68);
      uint64_t v71 = v66;
      uint64_t v72 = v68;
LABEL_31:
      _s11CloudAssets21UploadResponseMessageOwst_0(v71, 0, 1, v72);
      return a1;
    }
  }
  else
  {
    uint64_t v82 = *(void *)(v68 - 8);
    if (!v70)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 40))(v66, v67, v68);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v66, v68);
  }
  size_t v59 = *(void *)(*(void *)(sub_24A123464(&qword_26976AE48) - 8) + 64);
  uint64_t v60 = (void *)v66;
  uint64_t v61 = (const void *)v67;
LABEL_25:
  memcpy(v60, v61, v59);
  return a1;
}

uint64_t sub_24A167760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A167774);
}

uint64_t sub_24A167774()
{
  sub_24A1733A4();
  if (v3) {
    return sub_24A173320(*(void *)(v1 + 8));
  }
  sub_24A173354();
  sub_24A124798();
  if (*(_DWORD *)(v5 + 84) == v0)
  {
    uint64_t v6 = *(int *)(v2 + 24);
  }
  else
  {
    sub_24A123464(&qword_26976AE50);
    sub_24A124798();
    if (*(_DWORD *)(v7 + 84) == v0)
    {
      sub_24A173668();
    }
    else
    {
      sub_24A123464((uint64_t *)&unk_26976C040);
      sub_24A17365C();
    }
  }
  uint64_t v8 = sub_24A173438(v6);
  return _s11CloudAssets21UploadResponseMessageOwet_0(v8, v9, v10);
}

uint64_t sub_24A167820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A167834);
}

void sub_24A167834()
{
  sub_24A17330C();
  if (v4)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    sub_24A173520();
    sub_24A124798();
    if (*(_DWORD *)(v5 + 84) == v3)
    {
      uint64_t v6 = *(int *)(v2 + 24);
    }
    else
    {
      sub_24A123464(&qword_26976AE50);
      sub_24A124798();
      if (*(_DWORD *)(v7 + 84) == v3)
      {
        sub_24A173650();
      }
      else
      {
        sub_24A123464((uint64_t *)&unk_26976C040);
        sub_24A173624();
      }
    }
    uint64_t v8 = sub_24A173334(v6);
    _s11CloudAssets21UploadResponseMessageOwst_0(v8, v9, v10, v11);
  }
}

uint64_t type metadata accessor for CloudAssets_AssetStreamHandle(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976BCA8);
}

void sub_24A167900()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_24A167A48(319, &qword_26976BCB8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
    if (v1 <= 0x3F)
    {
      sub_24A167A48(319, &qword_26976BCC0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_24A167A48(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *sub_24A167A9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v21 = (char *)a1 + v10;
    uint64_t v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v21, v11, v12);
    uint64_t v14 = *(int *)(a3 + 32);
    int v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v16, 1, v17))
    {
      uint64_t v18 = sub_24A123464(&qword_26976AE48);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t sub_24A167C64(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for Google_Protobuf_Timestamp();
  uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v9(v6, v7);
  }
  return result;
}

void *sub_24A167D5C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v19 = (char *)a1 + v9;
  uint64_t v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v19, v10, v11);
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (char *)a1 + v13;
  int v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Google_Protobuf_Timestamp();
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v15, 1, v16))
  {
    uint64_t v17 = sub_24A123464(&qword_26976AE48);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v14, 0, 1, v16);
  }
  return a1;
}

void *sub_24A167ED4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Google_Protobuf_Timestamp();
  LODWORD(v8) = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v11, 1, v13);
  int v14 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v12, 1, v13);
  if (!v8)
  {
    uint64_t v15 = *(void *)(v13 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_24A123464(&qword_26976AE48);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v11, 0, 1, v13);
  return a1;
}

_OWORD *sub_24A1680DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Google_Protobuf_Timestamp();
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_24A123464(&qword_26976AE48);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

void *sub_24A168214(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Google_Protobuf_Timestamp();
  LODWORD(v11) = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v14, 1, v16);
  int v17 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v15, 1, v16);
  if (!v11)
  {
    uint64_t v18 = *(void *)(v16 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = sub_24A123464(&qword_26976AE48);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v14, 0, 1, v16);
  return a1;
}

uint64_t sub_24A1683EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A168400);
}

uint64_t sub_24A168400()
{
  sub_24A1733A4();
  if (v2) {
    return sub_24A173320(*(void *)(v1 + 8));
  }
  sub_24A173354();
  sub_24A124798();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    sub_24A173668();
  }
  else
  {
    sub_24A123464(&qword_26976AE48);
    sub_24A17365C();
  }
  uint64_t v6 = sub_24A173438(v5);
  return _s11CloudAssets21UploadResponseMessageOwet_0(v6, v7, v8);
}

uint64_t sub_24A168484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A168498);
}

void sub_24A168498()
{
  sub_24A17330C();
  if (v3)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    sub_24A173520();
    sub_24A124798();
    if (*(_DWORD *)(v4 + 84) == v2)
    {
      sub_24A173650();
    }
    else
    {
      sub_24A123464(&qword_26976AE48);
      sub_24A173624();
    }
    uint64_t v6 = sub_24A173334(v5);
    _s11CloudAssets21UploadResponseMessageOwst_0(v6, v7, v8, v9);
  }
}

void sub_24A16851C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *sub_24A168548(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_24A16862C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *sub_24A1686A4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_24A16873C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_24A1687D0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_24A16884C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_24A1688D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1688EC);
}

uint64_t sub_24A1688EC()
{
  sub_24A1733A4();
  if (v2) {
    return sub_24A173320(*v0);
  }
  sub_24A173354();
  uint64_t v4 = sub_24A173438(*(int *)(v1 + 20));
  return _s11CloudAssets21UploadResponseMessageOwet_0(v4, v5, v6);
}

uint64_t sub_24A168950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A168964);
}

void sub_24A168964()
{
  sub_24A17330C();
  if (v3)
  {
    *uint64_t v1 = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    type metadata accessor for UnknownStorage();
    uint64_t v5 = sub_24A173334(*(int *)(v4 + 20));
    _s11CloudAssets21UploadResponseMessageOwst_0(v5, v6, v7, v8);
  }
}

uint64_t type metadata accessor for CloudAssets_Signal(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976BCE0);
}

uint64_t sub_24A1689F0()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24A168A8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    unint64_t v9 = a2[2];
    swift_bridgeObjectRetain();
    sub_24A1233B4(v8, v9);
    a1[1] = v8;
    a1[2] = v9;
    uint64_t v10 = a2[3];
    unint64_t v11 = a2[4];
    sub_24A1233B4(v10, v11);
    a1[3] = v10;
    a1[4] = v11;
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    uint64_t v17 = *(int *)(a3 + 32);
    uint64_t v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = type metadata accessor for CloudAssets_Credential(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = sub_24A123464((uint64_t *)&unk_26976C040);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v22;
      uint64_t v23 = v19[3];
      v18[2] = v19[2];
      void v18[3] = v23;
      uint64_t v24 = v19[5];
      v18[4] = v19[4];
      v18[5] = v24;
      uint64_t v25 = *(int *)(v20 + 28);
      int v33 = (char *)v18 + v25;
      size_t v26 = (char *)v19 + v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16(v33, v26, v15);
      uint64_t v27 = *(int *)(v20 + 32);
      uint64_t v28 = (char *)v18 + v27;
      uint64_t v29 = (char *)v19 + v27;
      uint64_t v30 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v29, 1, v30))
      {
        uint64_t v31 = sub_24A123464(&qword_26976AE48);
        memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v28, 0, 1, v30);
      }
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t sub_24A168D10(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_24A12340C(*(void *)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  uint64_t v8 = type metadata accessor for CloudAssets_Credential(0);
  uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0(v7, 1, v8);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6(v7 + *(int *)(v8 + 28), v5);
    uint64_t v10 = v7 + *(int *)(v8 + 32);
    uint64_t v11 = type metadata accessor for Google_Protobuf_Timestamp();
    uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0(v10, 1, v11);
    if (!result)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
      return v12(v10, v11);
    }
  }
  return result;
}

void *sub_24A168E70(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  unint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  sub_24A1233B4(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = a2[3];
  unint64_t v9 = a2[4];
  sub_24A1233B4(v8, v9);
  a1[3] = v8;
  a1[4] = v9;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  uint64_t v15 = *(int *)(a3 + 32);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for CloudAssets_Credential(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v17, 1, v18))
  {
    uint64_t v19 = sub_24A123464((uint64_t *)&unk_26976C040);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v20;
    uint64_t v21 = v17[3];
    v16[2] = v17[2];
    v16[3] = v21;
    uint64_t v22 = v17[5];
    v16[4] = v17[4];
    v16[5] = v22;
    uint64_t v23 = *(int *)(v18 + 28);
    uint64_t v31 = (char *)v16 + v23;
    uint64_t v24 = (char *)v17 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v31, v24, v13);
    uint64_t v25 = *(int *)(v18 + 32);
    size_t v26 = (char *)v16 + v25;
    uint64_t v27 = (char *)v17 + v25;
    uint64_t v28 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v27, 1, v28))
    {
      uint64_t v29 = sub_24A123464(&qword_26976AE48);
      memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v26, 0, 1, v28);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v16, 0, 1, v18);
  }
  return a1;
}

void *sub_24A1690AC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  sub_24A1233B4(v6, v7);
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  sub_24A12340C(v8, v9);
  uint64_t v10 = a2[3];
  unint64_t v11 = a2[4];
  sub_24A1233B4(v10, v11);
  uint64_t v12 = a1[3];
  unint64_t v13 = a1[4];
  a1[3] = v10;
  a1[4] = v11;
  sub_24A12340C(v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 24);
  v19(v15, v16, v17);
  uint64_t v20 = *(int *)(a3 + 32);
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = type metadata accessor for CloudAssets_Credential(0);
  LODWORD(v16) = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v21, 1, v23);
  int v24 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v22, 1, v23);
  if (v16)
  {
    if (!v24)
    {
      *uint64_t v21 = *v22;
      v21[1] = v22[1];
      void v21[2] = v22[2];
      v21[3] = v22[3];
      v21[4] = v22[4];
      v21[5] = v22[5];
      uint64_t v25 = *(int *)(v23 + 28);
      size_t v26 = (char *)v21 + v25;
      uint64_t v27 = (char *)v22 + v25;
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28(v26, v27, v17);
      uint64_t v29 = *(int *)(v23 + 32);
      uint64_t v30 = (char *)v21 + v29;
      uint64_t v31 = (char *)v22 + v29;
      uint64_t v32 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v31, 1, v32))
      {
        uint64_t v33 = sub_24A123464(&qword_26976AE48);
        memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v30, 0, 1, v32);
      }
      uint64_t v43 = (uint64_t)v21;
      uint64_t v44 = v23;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v24)
  {
    sub_24A166AB8((uint64_t)v21, (void (*)(void))type metadata accessor for CloudAssets_Credential);
LABEL_7:
    size_t v34 = *(void *)(*(void *)(sub_24A123464((uint64_t *)&unk_26976C040) - 8) + 64);
    long long v35 = v21;
    long long v36 = v22;
    goto LABEL_8;
  }
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v21[2] = v22[2];
  v21[3] = v22[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[4] = v22[4];
  v21[5] = v22[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19((char *)v21 + *(int *)(v23 + 28), (char *)v22 + *(int *)(v23 + 28), v17);
  uint64_t v37 = *(int *)(v23 + 32);
  uint64_t v38 = (uint64_t)v21 + v37;
  uint64_t v39 = (uint64_t)v22 + v37;
  uint64_t v40 = type metadata accessor for Google_Protobuf_Timestamp();
  int v41 = _s11CloudAssets21UploadResponseMessageOwet_0(v38, 1, v40);
  int v42 = _s11CloudAssets21UploadResponseMessageOwet_0(v39, 1, v40);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
      uint64_t v43 = v38;
      uint64_t v44 = v40;
LABEL_14:
      _s11CloudAssets21UploadResponseMessageOwst_0(v43, 0, 1, v44);
      return a1;
    }
  }
  else
  {
    uint64_t v46 = *(void *)(v40 - 8);
    if (!v42)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24))(v38, v39, v40);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v38, v40);
  }
  size_t v34 = *(void *)(*(void *)(sub_24A123464(&qword_26976AE48) - 8) + 64);
  long long v35 = (void *)v38;
  long long v36 = (const void *)v39;
LABEL_8:
  memcpy(v35, v36, v34);
  return a1;
}

uint64_t sub_24A169510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  unint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for CloudAssets_Credential(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_24A123464((uint64_t *)&unk_26976C040);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    long long v16 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v16;
    v12[2] = v13[2];
    v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
    uint64_t v17 = *(int *)(v14 + 32);
    uint64_t v18 = (char *)v12 + v17;
    uint64_t v19 = (char *)v13 + v17;
    uint64_t v20 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = sub_24A123464(&qword_26976AE48);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v20);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

void *sub_24A1696F8(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_24A12340C(v6, v7);
  uint64_t v8 = a1[3];
  unint64_t v9 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  sub_24A12340C(v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = (uint64_t)a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for CloudAssets_Credential(0);
  LODWORD(v12) = _s11CloudAssets21UploadResponseMessageOwet_0(v17, 1, v19);
  int v20 = _s11CloudAssets21UploadResponseMessageOwet_0(v18, 1, v19);
  if (v12)
  {
    if (!v20)
    {
      long long v21 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *(_OWORD *)(v17 + 16) = v21;
      *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v17 + *(int *)(v19 + 28), v18 + *(int *)(v19 + 28), v13);
      uint64_t v22 = *(int *)(v19 + 32);
      uint64_t v23 = (void *)(v17 + v22);
      int v24 = (const void *)(v18 + v22);
      uint64_t v25 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v24, 1, v25))
      {
        uint64_t v26 = sub_24A123464(&qword_26976AE48);
        memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v23, 0, 1, v25);
      }
      uint64_t v39 = v17;
      uint64_t v40 = v19;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v20)
  {
    sub_24A166AB8(v17, (void (*)(void))type metadata accessor for CloudAssets_Credential);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(sub_24A123464((uint64_t *)&unk_26976C040) - 8) + 64);
    uint64_t v28 = (void *)v17;
    uint64_t v29 = (const void *)v18;
    goto LABEL_8;
  }
  uint64_t v30 = *(void *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = v30;
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(v18 + 24);
  *(void *)(v17 + 16) = *(void *)(v18 + 16);
  *(void *)(v17 + 24) = v31;
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)(v18 + 40);
  *(void *)(v17 + 32) = *(void *)(v18 + 32);
  *(void *)(v17 + 40) = v32;
  swift_bridgeObjectRelease();
  v15((char *)(v17 + *(int *)(v19 + 28)), v18 + *(int *)(v19 + 28), v13);
  uint64_t v33 = *(int *)(v19 + 32);
  uint64_t v34 = v17 + v33;
  uint64_t v35 = v18 + v33;
  uint64_t v36 = type metadata accessor for Google_Protobuf_Timestamp();
  int v37 = _s11CloudAssets21UploadResponseMessageOwet_0(v34, 1, v36);
  int v38 = _s11CloudAssets21UploadResponseMessageOwet_0(v35, 1, v36);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
      uint64_t v39 = v34;
      uint64_t v40 = v36;
LABEL_14:
      _s11CloudAssets21UploadResponseMessageOwst_0(v39, 0, 1, v40);
      return a1;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(v36 - 8);
    if (!v38)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 40))(v34, v35, v36);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v34, v36);
  }
  size_t v27 = *(void *)(*(void *)(sub_24A123464(&qword_26976AE48) - 8) + 64);
  uint64_t v28 = (void *)v34;
  uint64_t v29 = (const void *)v35;
LABEL_8:
  memcpy(v28, v29, v27);
  return a1;
}

uint64_t sub_24A169AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A169AD4);
}

uint64_t sub_24A169AD4()
{
  sub_24A1733A4();
  if (v2) {
    return sub_24A173320(*v1);
  }
  sub_24A173354();
  sub_24A124798();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    sub_24A173668();
  }
  else
  {
    sub_24A123464((uint64_t *)&unk_26976C040);
    sub_24A17365C();
  }
  uint64_t v6 = sub_24A173438(v5);
  return _s11CloudAssets21UploadResponseMessageOwet_0(v6, v7, v8);
}

uint64_t sub_24A169B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A169B6C);
}

void sub_24A169B6C()
{
  sub_24A17330C();
  if (v3)
  {
    *unint64_t v1 = (v0 - 1);
  }
  else
  {
    sub_24A173520();
    sub_24A124798();
    if (*(_DWORD *)(v4 + 84) == v2)
    {
      sub_24A173650();
    }
    else
    {
      sub_24A123464((uint64_t *)&unk_26976C040);
      sub_24A173624();
    }
    uint64_t v6 = sub_24A173334(v5);
    _s11CloudAssets21UploadResponseMessageOwst_0(v6, v7, v8, v9);
  }
}

uint64_t type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976BCF0);
}

void sub_24A169C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_24A169C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v9 <= 0x3F)
  {
    sub_24A167A48(319, a6, a7);
    if (v10 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_24A169D2C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for CloudAssets_Asset.ID(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v14, 1, v15))
    {
      uint64_t v16 = sub_24A123464(&qword_26976ADE0);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v18 = v14[1];
      void *v13 = *v14;
      v13[1] = v18;
      uint64_t v34 = v11;
      uint64_t v19 = v14[3];
      uint64_t v13[2] = v14[2];
      v13[3] = v19;
      uint64_t v20 = v14[4];
      unint64_t v21 = v14[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24A1233B4(v20, v21);
      v13[4] = v20;
      v13[5] = v21;
      uint64_t v22 = v14[6];
      unint64_t v23 = v14[7];
      sub_24A1233B4(v22, v23);
      v13[6] = v22;
      v13[7] = v23;
      uint64_t v11 = v34;
      v34((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v13, 0, 1, v15);
    }
    uint64_t v24 = a3[7];
    uint64_t v25 = (uint64_t *)((char *)v4 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = type metadata accessor for CloudAssets_Asset.Protector(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v26, 1, v27))
    {
      uint64_t v28 = sub_24A123464(&qword_26976ADE8);
      memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = *v26;
      unint64_t v30 = v26[1];
      sub_24A1233B4(*v26, v30);
      *uint64_t v25 = v29;
      v25[1] = v30;
      uint64_t v31 = v26[2];
      unint64_t v32 = v26[3];
      sub_24A1233B4(v31, v32);
      v25[2] = v31;
      v25[3] = v32;
      v11((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v10);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v25, 0, 1, v27);
    }
  }
  return v4;
}

uint64_t sub_24A169FB0(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (!_s11CloudAssets21UploadResponseMessageOwet_0(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24A12340C(*(void *)(v6 + 32), *(void *)(v6 + 40));
    sub_24A12340C(*(void *)(v6 + 48), *(void *)(v6 + 56));
    v12(v6 + *(int *)(v7 + 32), v5);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for CloudAssets_Asset.Protector(0);
  uint64_t result = _s11CloudAssets21UploadResponseMessageOwet_0(v8, 1, v9);
  if (!result)
  {
    sub_24A12340C(*(void *)v8, *(void *)(v8 + 8));
    sub_24A12340C(*(void *)(v8 + 16), *(void *)(v8 + 24));
    uint64_t v11 = v8 + *(int *)(v9 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

void *sub_24A16A110(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_24A123464(&qword_26976ADE0);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v16;
    unint64_t v32 = v10;
    uint64_t v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    uint64_t v18 = v13[4];
    unint64_t v19 = v13[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24A1233B4(v18, v19);
    v12[4] = v18;
    v12[5] = v19;
    uint64_t v20 = v13[6];
    unint64_t v21 = v13[7];
    sub_24A1233B4(v20, v21);
    v12[6] = v20;
    v12[7] = v21;
    uint64_t v10 = v32;
    v32((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  uint64_t v22 = a3[7];
  unint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v25 = type metadata accessor for CloudAssets_Asset.Protector(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v24, 1, v25))
  {
    uint64_t v26 = sub_24A123464(&qword_26976ADE8);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = *v24;
    unint64_t v28 = v24[1];
    sub_24A1233B4(*v24, v28);
    *unint64_t v23 = v27;
    v23[1] = v28;
    uint64_t v29 = v24[2];
    unint64_t v30 = v24[3];
    sub_24A1233B4(v29, v30);
    uint64_t v23[2] = v29;
    v23[3] = v30;
    v10((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v9);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v23, 0, 1, v25);
  }
  return a1;
}

void *sub_24A16A344(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v53 + 24);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for CloudAssets_Asset.ID(0);
  int v15 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = *((void *)v13 + 1);
      *((void *)v12 + 2) = *((void *)v13 + 2);
      *((void *)v12 + 3) = *((void *)v13 + 3);
      uint64_t v50 = v9;
      int v51 = v10;
      uint64_t v17 = *((void *)v13 + 4);
      unint64_t v18 = *((void *)v13 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24A1233B4(v17, v18);
      *((void *)v12 + 4) = v17;
      *((void *)v12 + 5) = v18;
      uint64_t v9 = v50;
      uint64_t v19 = *((void *)v13 + 6);
      unint64_t v20 = *((void *)v13 + 7);
      sub_24A1233B4(v19, v20);
      *((void *)v12 + 6) = v19;
      *((void *)v12 + 7) = v20;
      uint64_t v10 = v51;
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(&v12[*(int *)(v14 + 32)], &v13[*(int *)(v14 + 32)], v50);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_24A166AB8((uint64_t)v12, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
LABEL_6:
    uint64_t v21 = sub_24A123464(&qword_26976ADE0);
    memcpy(v12, v13, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v12 + 2) = *((void *)v13 + 2);
  *((void *)v12 + 3) = *((void *)v13 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v52 = v10;
  uint64_t v34 = *((void *)v13 + 4);
  unint64_t v35 = *((void *)v13 + 5);
  sub_24A1233B4(v34, v35);
  uint64_t v36 = *((void *)v12 + 4);
  unint64_t v37 = *((void *)v12 + 5);
  *((void *)v12 + 4) = v34;
  *((void *)v12 + 5) = v35;
  sub_24A12340C(v36, v37);
  uint64_t v38 = *((void *)v13 + 6);
  unint64_t v39 = *((void *)v13 + 7);
  sub_24A1233B4(v38, v39);
  uint64_t v40 = *((void *)v12 + 6);
  unint64_t v41 = *((void *)v12 + 7);
  *((void *)v12 + 6) = v38;
  *((void *)v12 + 7) = v39;
  uint64_t v10 = v52;
  sub_24A12340C(v40, v41);
  v52(&v12[*(int *)(v14 + 32)], &v13[*(int *)(v14 + 32)], v9);
LABEL_7:
  uint64_t v22 = a3[7];
  unint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v25 = type metadata accessor for CloudAssets_Asset.Protector(0);
  int v26 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v23, 1, v25);
  int v27 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v24, 1, v25);
  if (!v26)
  {
    if (!v27)
    {
      uint64_t v42 = *v24;
      unint64_t v43 = v24[1];
      sub_24A1233B4(*v24, v43);
      uint64_t v44 = *v23;
      unint64_t v45 = v23[1];
      *unint64_t v23 = v42;
      v23[1] = v43;
      sub_24A12340C(v44, v45);
      uint64_t v46 = v24[2];
      unint64_t v47 = v24[3];
      sub_24A1233B4(v46, v47);
      uint64_t v48 = v23[2];
      unint64_t v49 = v23[3];
      uint64_t v23[2] = v46;
      v23[3] = v47;
      sub_24A12340C(v48, v49);
      v10((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v9);
      return a1;
    }
    sub_24A166AB8((uint64_t)v23, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v32 = sub_24A123464(&qword_26976ADE8);
    memcpy(v23, v24, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  uint64_t v28 = *v24;
  unint64_t v29 = v24[1];
  sub_24A1233B4(*v24, v29);
  *unint64_t v23 = v28;
  v23[1] = v29;
  uint64_t v30 = v24[2];
  unint64_t v31 = v24[3];
  sub_24A1233B4(v30, v31);
  uint64_t v23[2] = v30;
  v23[3] = v31;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v9);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v23, 0, 1, v25);
  return a1;
}

void *sub_24A16A718(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_24A123464(&qword_26976ADE0);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    long long v16 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v16;
    long long v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = (_OWORD *)((char *)a1 + v18);
  unint64_t v20 = (_OWORD *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for CloudAssets_Asset.Protector(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v20, 1, v21))
  {
    uint64_t v22 = sub_24A123464(&qword_26976ADE8);
    memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    long long v23 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v23;
    v10((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v9);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v19, 0, 1, v21);
  }
  return a1;
}

void *sub_24A16A8E8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v39(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for CloudAssets_Asset.ID(0);
  int v15 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      long long v17 = *((_OWORD *)v13 + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v17;
      long long v18 = *((_OWORD *)v13 + 3);
      *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
      *((_OWORD *)v12 + 3) = v18;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v12 + *(int *)(v14 + 32), &v13[*(int *)(v14 + 32)], v9);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_24A166AB8((uint64_t)v12, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
LABEL_6:
    uint64_t v19 = sub_24A123464(&qword_26976ADE0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v29 = *((void *)v13 + 1);
  *uint64_t v12 = *(void *)v13;
  v12[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *((void *)v13 + 3);
  v12[2] = *((void *)v13 + 2);
  v12[3] = v30;
  swift_bridgeObjectRelease();
  uint64_t v31 = v12[4];
  unint64_t v32 = v12[5];
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  sub_24A12340C(v31, v32);
  uint64_t v33 = v12[6];
  unint64_t v34 = v12[7];
  *((_OWORD *)v12 + 3) = *((_OWORD *)v13 + 3);
  sub_24A12340C(v33, v34);
  v39((char *)v12 + *(int *)(v14 + 32), &v13[*(int *)(v14 + 32)], v9);
LABEL_7:
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for CloudAssets_Asset.Protector(0);
  int v24 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v21, 1, v23);
  int v25 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v22, 1, v23);
  if (!v24)
  {
    if (!v25)
    {
      uint64_t v35 = *v21;
      unint64_t v36 = v21[1];
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      sub_24A12340C(v35, v36);
      uint64_t v37 = v21[2];
      unint64_t v38 = v21[3];
      *((_OWORD *)v21 + 1) = *((_OWORD *)v22 + 1);
      sub_24A12340C(v37, v38);
      v39((char *)v21 + *(int *)(v23 + 24), &v22[*(int *)(v23 + 24)], v9);
      return a1;
    }
    sub_24A166AB8((uint64_t)v21, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v27 = sub_24A123464(&qword_26976ADE8);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  long long v26 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v26;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v21 + *(int *)(v23 + 24), &v22[*(int *)(v23 + 24)], v9);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v21, 0, 1, v23);
  return a1;
}

uint64_t sub_24A16AC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A16AC14);
}

uint64_t sub_24A16AC14(uint64_t a1, int a2, uint64_t a3)
{
  type metadata accessor for UnknownStorage();
  sub_24A124798();
  if (*(_DWORD *)(v5 + 84) == a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
  }
  else
  {
    sub_24A123464(&qword_26976ADE0);
    sub_24A124798();
    if (*(_DWORD *)(v7 + 84) == a2)
    {
      uint64_t v6 = *(int *)(a3 + 24);
    }
    else
    {
      sub_24A123464(&qword_26976ADE8);
      sub_24A173668();
    }
  }
  uint64_t v8 = sub_24A173438(v6);
  return _s11CloudAssets21UploadResponseMessageOwet_0(v8, v9, v10);
}

uint64_t sub_24A16ACB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A16ACC8);
}

uint64_t sub_24A16ACC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UnknownStorage();
  sub_24A124798();
  if (*(_DWORD *)(v6 + 84) == a3)
  {
    uint64_t v7 = *(int *)(a4 + 20);
  }
  else
  {
    sub_24A123464(&qword_26976ADE0);
    sub_24A124798();
    if (*(_DWORD *)(v8 + 84) == a3)
    {
      uint64_t v7 = *(int *)(a4 + 24);
    }
    else
    {
      sub_24A123464(&qword_26976ADE8);
      sub_24A173650();
    }
  }
  uint64_t v9 = sub_24A173334(v7);
  return _s11CloudAssets21UploadResponseMessageOwst_0(v9, v10, v11, v12);
}

void sub_24A16AD6C()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_24A167A48(319, &qword_26976BD10, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
    if (v1 <= 0x3F)
    {
      sub_24A167A48(319, &qword_26976BD18, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_24A16AEB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_24A1233B4(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_24A1233B4(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_24A16AFB4(uint64_t a1, uint64_t a2)
{
  sub_24A12340C(*(void *)a1, *(void *)(a1 + 8));
  sub_24A12340C(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *sub_24A16B038(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A1233B4(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_24A1233B4(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *sub_24A16B0E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A1233B4(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_24A12340C(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_24A1233B4(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_24A12340C(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  int v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_24A16B1A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_24A16B21C(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_24A12340C(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_24A12340C(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_24A16B2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A16B2D0);
}

uint64_t sub_24A16B2D0(uint64_t a1, int a2)
{
  if (a2 == 12)
  {
    uint64_t v3 = *(void *)(a1 + 8) >> 60;
    if (((4 * v3) & 0xC) != 0) {
      return 16 - ((4 * v3) & 0xC | (v3 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_24A173354();
    uint64_t v5 = sub_24A173438(*(int *)(v2 + 24));
    return _s11CloudAssets21UploadResponseMessageOwet_0(v5, v6, v7);
  }
}

uint64_t sub_24A16B354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A16B368);
}

void *sub_24A16B368(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 24);
    return (void *)_s11CloudAssets21UploadResponseMessageOwst_0(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_24A16B3F0()
{
  return sub_24A173068();
}

uint64_t *sub_24A16B400(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    unint64_t v10 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24A1233B4(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    uint64_t v11 = a2[6];
    unint64_t v12 = a2[7];
    sub_24A1233B4(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_24A16B518(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_24A12340C(*(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *sub_24A16B5A8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A1233B4(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_24A1233B4(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

void *sub_24A16B670(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  unint64_t v7 = a2[5];
  sub_24A1233B4(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  a1[4] = v6;
  a1[5] = v7;
  sub_24A12340C(v8, v9);
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_24A1233B4(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  a1[6] = v10;
  a1[7] = v11;
  sub_24A12340C(v12, v13);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_24A16B76C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 32);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

void *sub_24A16B7F0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_24A12340C(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_24A12340C(v10, v11);
  uint64_t v12 = *(int *)(a3 + 32);
  unint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_24A16B8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A16B8C0);
}

uint64_t sub_24A16B8C0()
{
  sub_24A1733A4();
  if (v1) {
    return sub_24A173320(*(void *)(v0 + 8));
  }
  sub_24A173354();
  sub_24A17365C();
  uint64_t v4 = sub_24A173438(v3);
  return _s11CloudAssets21UploadResponseMessageOwet_0(v4, v5, v6);
}

uint64_t sub_24A16B920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A16B934);
}

void sub_24A16B934()
{
  sub_24A17330C();
  if (v2)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    type metadata accessor for UnknownStorage();
    sub_24A173624();
    uint64_t v4 = sub_24A173334(v3);
    _s11CloudAssets21UploadResponseMessageOwst_0(v4, v5, v6, v7);
  }
}

uint64_t sub_24A16B99C()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A16BA40@<X0>(void *a1@<X8>)
{
  sub_24A1733F0(a1);
  *(_OWORD *)(v1 + 32) = xmmword_24A190210;
  *(_OWORD *)(v1 + 48) = xmmword_24A190210;
  type metadata accessor for CloudAssets_Asset.ID(0);
  return UnknownStorage.init()();
}

uint64_t sub_24A16BA80@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_24A190210;
  a1[1] = xmmword_24A190210;
  type metadata accessor for CloudAssets_Asset.Protector(0);
  return UnknownStorage.init()();
}

uint64_t sub_24A16BAC0@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for CloudAssets_Asset(0);
  UnknownStorage.init()();
  uint64_t v1 = type metadata accessor for CloudAssets_Asset.ID(0);
  sub_24A173630(v1);
  type metadata accessor for CloudAssets_Asset.Protector(0);
  uint64_t v2 = sub_24A173390();
  return _s11CloudAssets21UploadResponseMessageOwst_0(v2, v3, v4, v5);
}

uint64_t sub_24A16BB3C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_OWORD *)(a1 + 8) = xmmword_24A190210;
  *(_OWORD *)(a1 + 24) = xmmword_24A190210;
  type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
  UnknownStorage.init()();
  type metadata accessor for CloudAssets_Credential(0);
  uint64_t v1 = sub_24A173390();
  return _s11CloudAssets21UploadResponseMessageOwst_0(v1, v2, v3, v4);
}

uint64_t sub_24A16BBB4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  type metadata accessor for CloudAssets_Signal.Event(0);
  return UnknownStorage.init()();
}

uint64_t sub_24A16BBF8@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for CloudAssets_Signal(0);
  return UnknownStorage.init()();
}

uint64_t sub_24A16BC38@<X0>(void *a1@<X8>)
{
  sub_24A1733F0(a1);
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = v2;
  type metadata accessor for CloudAssets_Credential(0);
  UnknownStorage.init()();
  type metadata accessor for Google_Protobuf_Timestamp();
  uint64_t v3 = sub_24A173390();
  return _s11CloudAssets21UploadResponseMessageOwst_0(v3, v4, v5, v6);
}

BOOL sub_24A16BCAC(BOOL result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

void sub_24A16BCC0()
{
  qword_269778270 = (uint64_t)&unk_26FDF6BB8;
}

uint64_t *sub_24A16BCD4()
{
  if (qword_26976AA70 != -1) {
    swift_once();
  }
  return &qword_269778270;
}

void sub_24A16BD20(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void sub_24A16BD30(uint64_t a1@<X8>)
{
  sub_24A16BC98();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

BOOL sub_24A16BD64()
{
  return sub_24A16BCAC(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_24A16BD70@<X0>(void *a1@<X8>)
{
  sub_24A16BCD4();
  *a1 = qword_269778270;
  return swift_bridgeObjectRetain();
}

void sub_24A16BDB0(uint64_t a1@<X8>)
{
  sub_24A16BC98();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

BOOL sub_24A16BDE8@<W0>(BOOL *a1@<X8>)
{
  BOOL result = sub_24A16BCAC(*(void *)v1, *(unsigned char *)(v1 + 8));
  *a1 = result;
  return result;
}

Swift::Int sub_24A16BE18()
{
  return sub_24A16BE24();
}

Swift::Int sub_24A16BE24()
{
  return Hasher._finalize()();
}

uint64_t sub_24A16BE84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A172BBC();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

Swift::Int sub_24A16BED0()
{
  return sub_24A16BEDC();
}

Swift::Int sub_24A16BEDC()
{
  return Hasher._finalize()();
}

BOOL sub_24A16BF38(uint64_t a1, uint64_t a2)
{
  return sub_24A13792C(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_24A16BF54@<X0>(void *a1@<X8>)
{
  sub_24A1733F0(a1);
  type metadata accessor for CloudAssets_AssetStreamHandle(0);
  UnknownStorage.init()();
  uint64_t v1 = type metadata accessor for CloudAssets_Asset(0);
  sub_24A173630(v1);
  type metadata accessor for CloudAssets_Credential(0);
  uint64_t v2 = sub_24A173390();
  return _s11CloudAssets21UploadResponseMessageOwst_0(v2, v3, v4, v5);
}

uint64_t sub_24A16BFCC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A14403C(v0, qword_269778278);
  sub_24A143E24(v0, (uint64_t)qword_269778278);
  sub_24A123464(&qword_26976BE50);
  uint64_t v1 = (int *)(sub_24A123464(&qword_26976BE58) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A193A40;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "id";
  *(void *)(v6 + 8) = 2;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "protector";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  unint64_t v11 = (void *)((char *)v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *unint64_t v11 = 3;
  *(void *)uint64_t v12 = "size";
  *((void *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A16C1C0()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3:
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
        break;
      case 2:
        sub_24A173268();
        sub_24A16C310();
        break;
      case 1:
        sub_24A173268();
        sub_24A16C260();
        break;
    }
  }
  return result;
}

uint64_t sub_24A16C260()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_24A16C310()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_24A16C3C0()
{
  uint64_t v2 = sub_24A1733CC();
  uint64_t result = sub_24A16C44C(v2);
  if (!v0)
  {
    uint64_t v4 = sub_24A1734F0();
    sub_24A16C618(v4);
    if (*v1) {
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    }
    type metadata accessor for CloudAssets_Asset(0);
    return sub_24A1734CC();
  }
  return result;
}

uint64_t sub_24A16C44C(uint64_t a1)
{
  uint64_t v2 = sub_24A123464(&qword_26976ADE0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CloudAssets_Asset.ID(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CloudAssets_Asset(0);
  sub_24A1594A4(a1 + *(int *)(v8 + 24), (uint64_t)v4, &qword_26976ADE0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v4, 1, v5) == 1) {
    return sub_24A12B96C((uint64_t)v4, &qword_26976ADE0);
  }
  sub_24A172B5C((uint64_t)v4, (uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  sub_24A172284(&qword_26976ACF0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_24A166AB8((uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A16C618(uint64_t a1)
{
  uint64_t v2 = sub_24A123464(&qword_26976ADE8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CloudAssets_Asset.Protector(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CloudAssets_Asset(0);
  sub_24A1594A4(a1 + *(int *)(v8 + 28), (uint64_t)v4, &qword_26976ADE8);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v4, 1, v5) == 1) {
    return sub_24A12B96C((uint64_t)v4, &qword_26976ADE8);
  }
  sub_24A172B5C((uint64_t)v4, (uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
  sub_24A172284(&qword_26976AD20, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_24A166AB8((uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
}

void sub_24A16C7E4()
{
  sub_24A139550();
  size_t v73 = v2;
  uint64_t v4 = (char *)v3;
  type metadata accessor for UnknownStorage();
  sub_24A12477C();
  uint64_t v62 = v6;
  uint64_t v63 = v5;
  MEMORY[0x270FA5388](v5);
  sub_24A12935C();
  uint64_t v61 = v7;
  sub_24A131324();
  MEMORY[0x270FA5388](v8);
  uint64_t v60 = (char *)&v60 - v9;
  uint64_t v10 = sub_24A129220();
  uint64_t v69 = type metadata accessor for CloudAssets_Asset.Protector(v10);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v11);
  sub_24A124810();
  uint64_t v64 = (void *)v12;
  uint64_t v66 = sub_24A123464(&qword_26976BE60);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v13);
  sub_24A124810();
  uint64_t v70 = v14;
  uint64_t v15 = sub_24A123464(&qword_26976ADE8);
  uint64_t v16 = sub_24A1291B8(v15);
  MEMORY[0x270FA5388](v16);
  sub_24A12935C();
  uint64_t v65 = (void *)v17;
  sub_24A131324();
  MEMORY[0x270FA5388](v18);
  uint64_t v67 = (uint64_t)&v60 - v19;
  sub_24A131324();
  MEMORY[0x270FA5388](v20);
  uint64_t v68 = (uint64_t)&v60 - v21;
  uint64_t v22 = sub_24A129220();
  type metadata accessor for CloudAssets_Asset.ID(v22);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v23);
  sub_24A1733B4();
  uint64_t v24 = sub_24A123464(&qword_26976BE68);
  uint64_t v25 = v24 - 8;
  MEMORY[0x270FA5388](v24);
  sub_24A1247F8();
  uint64_t v26 = sub_24A123464(&qword_26976ADE0);
  uint64_t v27 = sub_24A1291B8(v26);
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  uint64_t v33 = (char *)&v60 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v60 - v34;
  uint64_t v36 = type metadata accessor for CloudAssets_Asset(0);
  uint64_t v37 = *(int *)(v36 + 24);
  uint64_t v71 = v4;
  sub_24A1594A4((uint64_t)&v4[v37], (uint64_t)v35, &qword_26976ADE0);
  uint64_t v72 = v36;
  sub_24A1594A4((uint64_t)&v73[*(int *)(v36 + 24)], (uint64_t)v33, &qword_26976ADE0);
  uint64_t v38 = v0 + *(int *)(v25 + 56);
  sub_24A1594A4((uint64_t)v35, v0, &qword_26976ADE0);
  sub_24A1594A4((uint64_t)v33, v38, &qword_26976ADE0);
  sub_24A1732B0(v0);
  if (v39)
  {
    sub_24A12B96C((uint64_t)v33, &qword_26976ADE0);
    sub_24A12B96C((uint64_t)v35, &qword_26976ADE0);
    sub_24A1732B0(v38);
    if (v39)
    {
      sub_24A12B96C(v0, &qword_26976ADE0);
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v40 = &qword_26976BE68;
    uint64_t v41 = v0;
    goto LABEL_27;
  }
  sub_24A1594A4(v0, (uint64_t)v30, &qword_26976ADE0);
  sub_24A1732B0(v38);
  if (v39)
  {
    sub_24A12B96C((uint64_t)v33, &qword_26976ADE0);
    sub_24A12B96C((uint64_t)v35, &qword_26976ADE0);
    sub_24A166AB8((uint64_t)v30, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
    goto LABEL_9;
  }
  sub_24A172B5C(v38, v1, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  sub_24A173594();
  char v42 = sub_24A16D66C();
  sub_24A166AB8(v1, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  sub_24A12B96C((uint64_t)v33, &qword_26976ADE0);
  sub_24A12B96C((uint64_t)v35, &qword_26976ADE0);
  sub_24A166AB8((uint64_t)v30, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  sub_24A12B96C(v0, &qword_26976ADE0);
  if ((v42 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_11:
  uint64_t v44 = v71;
  uint64_t v43 = v72;
  uint64_t v45 = v68;
  sub_24A1594A4((uint64_t)&v71[*(int *)(v72 + 28)], v68, &qword_26976ADE8);
  uint64_t v46 = v73;
  uint64_t v47 = v67;
  sub_24A1594A4((uint64_t)&v73[*(int *)(v43 + 28)], v67, &qword_26976ADE8);
  uint64_t v48 = v70;
  uint64_t v49 = v70 + *(int *)(v66 + 48);
  sub_24A1594A4(v45, v70, &qword_26976ADE8);
  sub_24A1594A4(v47, v49, &qword_26976ADE8);
  uint64_t v50 = v69;
  sub_24A154BA0(v48, 1, v69);
  if (!v39)
  {
    unint64_t v56 = v65;
    sub_24A1594A4(v48, (uint64_t)v65, &qword_26976ADE8);
    sub_24A154BA0(v49, 1, v50);
    if (!v57)
    {
      uint64_t v58 = v64;
      sub_24A172B5C(v49, (uint64_t)v64, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
      if ((MEMORY[0x24C5BCD30](*v56, v56[1], *v58, v58[1]) & 1) != 0
        && (MEMORY[0x24C5BCD30](v56[2], v56[3], v58[2], v58[3]) & 1) != 0)
      {
        sub_24A172284(&qword_26976B068, MEMORY[0x263F50560]);
        char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_24A166AB8((uint64_t)v58, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
        sub_24A12B96C(v47, &qword_26976ADE8);
        sub_24A12B96C(v45, &qword_26976ADE8);
        sub_24A166AB8((uint64_t)v56, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
        sub_24A12B96C(v48, &qword_26976ADE8);
        if ((v59 & 1) == 0) {
          goto LABEL_28;
        }
        goto LABEL_16;
      }
      sub_24A166AB8((uint64_t)v58, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
      sub_24A12B96C(v47, &qword_26976ADE8);
      sub_24A12B96C(v45, &qword_26976ADE8);
      sub_24A166AB8((uint64_t)v56, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
      uint64_t v41 = v48;
      uint64_t v40 = &qword_26976ADE8;
LABEL_27:
      sub_24A12B96C(v41, v40);
      goto LABEL_28;
    }
    sub_24A12B96C(v47, &qword_26976ADE8);
    sub_24A12B96C(v45, &qword_26976ADE8);
    sub_24A166AB8((uint64_t)v56, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
LABEL_21:
    uint64_t v40 = &qword_26976BE60;
    uint64_t v41 = v48;
    goto LABEL_27;
  }
  sub_24A12B96C(v47, &qword_26976ADE8);
  sub_24A12B96C(v45, &qword_26976ADE8);
  sub_24A154BA0(v49, 1, v50);
  if (!v39) {
    goto LABEL_21;
  }
  sub_24A12B96C(v48, &qword_26976ADE8);
LABEL_16:
  if (*(void *)v44 == *(void *)v46)
  {
    uint64_t v51 = v72;
    uint64_t v53 = v62;
    uint64_t v52 = v63;
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
    v54(v60, &v44[*(int *)(v72 + 20)], v63);
    v54(v61, &v46[*(int *)(v51 + 20)], v52);
    sub_24A172284(&qword_26976B068, MEMORY[0x263F50560]);
    dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v55 = *(void (**)(void))(v53 + 8);
    sub_24A1735B8();
    v55();
    sub_24A1735B8();
    v55();
  }
LABEL_28:
  sub_24A139538();
}

unint64_t sub_24A16CF84()
{
  return 0xD000000000000011;
}

uint64_t (*sub_24A16CFAC())()
{
  return nullsub_1;
}

uint64_t sub_24A16CFD0()
{
  return sub_24A16C1C0();
}

uint64_t sub_24A16CFE8()
{
  return sub_24A16C3C0();
}

uint64_t sub_24A16D004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A172284(&qword_26976BE20, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A16D084(uint64_t a1, uint64_t a2)
{
  return sub_24A16D9E0(a1, a2, &qword_26976AA78, (uint64_t)qword_269778278);
}

uint64_t sub_24A16D0A8(uint64_t a1)
{
  uint64_t v2 = sub_24A172284(&qword_26976AD40, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A16D114()
{
  return sub_24A171E30((void (*)(void))type metadata accessor for CloudAssets_Asset, &qword_26976BDD0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A16D170()
{
  sub_24A172284(&qword_26976AD40, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
  return Message.hash(into:)();
}

void sub_24A16D1F4(int a1)
{
  v1._countAndFlagsBits = 4475182;
  v1._object = (void *)0xE300000000000000;
  sub_24A16DBBC(a1, v1, qword_269778290, &qword_269778290[1]);
}

void *sub_24A16D210()
{
  if (qword_26976AA80 != -1) {
    swift_once();
  }
  return qword_269778290;
}

uint64_t sub_24A16D25C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A14403C(v0, qword_2697782A0);
  sub_24A143E24(v0, (uint64_t)qword_2697782A0);
  sub_24A123464(&qword_26976BE50);
  Swift::String v1 = (int *)(sub_24A123464(&qword_26976BE58) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A193A50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "partition";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "owner_id";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "signature";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "reference_signature";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A16D49C()
{
  uint64_t result = sub_24A173240();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = sub_24A173420();
    }
  }
  return result;
}

uint64_t sub_24A16D56C()
{
  sub_24A173674();
  sub_24A17329C();
  if (!v3 || (v0 = v1, uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    sub_24A17329C();
    if (!v5 || (v0 = v1, uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (sub_24A1735A0() || (v6 = sub_24A173594(), uint64_t result = sub_24A173454(v6, v7, 3), !v0))
      {
        uint64_t v8 = *(void *)(v2 + 48);
        uint64_t v9 = *(void *)(v2 + 56);
        if (sub_24A1735A0() || (uint64_t result = sub_24A173454(v8, v9, 4), !v0))
        {
          type metadata accessor for CloudAssets_Asset.ID(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t sub_24A16D66C()
{
  sub_24A173404();
  sub_24A12477C();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_24A1732D0();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_24A17354C();
  BOOL v11 = v7 == v10 && v8 == v9;
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = v1[2] == v0[2] && v1[3] == v0[3];
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((MEMORY[0x24C5BCD30](v1[4], v1[5], v0[4], v0[5]) & 1) != 0
        && (MEMORY[0x24C5BCD30](v1[6], v1[7], v0[6], v0[7]) & 1) != 0)
      {
        type metadata accessor for CloudAssets_Asset.ID(0);
        uint64_t v14 = sub_24A17327C();
        ((void (*)(uint64_t))v2)(v14);
        sub_24A1732EC();
        v2();
        sub_24A172284(&qword_26976B068, MEMORY[0x263F50560]);
        char v12 = sub_24A173370();
        uint64_t v15 = *(void (**)(void))(v4 + 8);
        sub_24A1732FC();
        v15();
        sub_24A1732FC();
        v15();
      }
      else
      {
        char v12 = 0;
      }
    }
  }
  return v12 & 1;
}

uint64_t sub_24A16D7E8(uint64_t a1, uint64_t a2)
{
  return sub_24A170C9C(a1, a2, (void (*)(void))sub_24A16D210, qword_269778290);
}

uint64_t sub_24A16D80C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_24A16D87C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_24A16D8EC())()
{
  return nullsub_1;
}

uint64_t sub_24A16D910()
{
  return sub_24A16D49C();
}

uint64_t sub_24A16D928()
{
  return sub_24A16D56C();
}

uint64_t sub_24A16D940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A172284(&qword_26976BE10, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A16D9BC(uint64_t a1, uint64_t a2)
{
  return sub_24A16D9E0(a1, a2, &qword_26976AA88, (uint64_t)qword_2697782A0);
}

uint64_t sub_24A16D9E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_24A171128(a3, a4);
  type metadata accessor for _NameMap();
  sub_24A1247B0();
  uint64_t v4 = sub_24A173444();
  return v5(v4);
}

uint64_t sub_24A16DA4C(uint64_t a1)
{
  uint64_t v2 = sub_24A172284(&qword_26976ACF0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A16DAB8()
{
  return sub_24A171E30((void (*)(void))type metadata accessor for CloudAssets_Asset.ID, &qword_26976BDC0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A16DB14()
{
  sub_24A172284(&qword_26976ACF0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
  return Message.hash(into:)();
}

void sub_24A16DB94(int a1)
{
  v1._countAndFlagsBits = 0x746365746F72502ELL;
  v1._object = (void *)0xEA0000000000726FLL;
  sub_24A16DBBC(a1, v1, qword_2697782B8, &qword_2697782B8[1]);
}

void sub_24A16DBBC(int a1, Swift::String a2, void *a3, void *a4)
{
  *a3 = 0xD000000000000011;
  *a4 = 0x800000024A18CD90;
}

void *sub_24A16DC28()
{
  if (qword_26976AA90 != -1) {
    swift_once();
  }
  return qword_2697782B8;
}

uint64_t sub_24A16DC74()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A14403C(v0, qword_2697782C8);
  sub_24A143E24(v0, (uint64_t)qword_2697782C8);
  sub_24A123464(&qword_26976BE50);
  Swift::String v1 = (int *)(sub_24A123464(&qword_26976BE58) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A193A60;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "security_key";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "privacy_key";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A16DE2C()
{
  uint64_t result = sub_24A173240();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = sub_24A173420();
    }
  }
  return result;
}

uint64_t sub_24A16DEA0()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)v2;
      uint64_t v5 = v2 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
LABEL_6:
      if (v4 != v5) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_24A1735C4(v2, v3, 1);
      if (!v1)
      {
LABEL_8:
        uint64_t v7 = v0[2];
        unint64_t v8 = v0[3];
        switch(v8 >> 62)
        {
          case 1uLL:
            uint64_t v9 = (int)v7;
            uint64_t v10 = v7 >> 32;
            goto LABEL_13;
          case 2uLL:
            uint64_t v9 = *(void *)(v7 + 16);
            uint64_t v10 = *(void *)(v7 + 24);
LABEL_13:
            if (v9 != v10) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v8 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_24A1735C4(v7, v8, 2);
            if (!v1)
            {
LABEL_15:
              type metadata accessor for CloudAssets_Asset.Protector(0);
              uint64_t result = sub_24A1734A4();
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_24A16DFCC()
{
  sub_24A173404();
  sub_24A12477C();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_24A1732D0();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_24A17354C();
  if ((MEMORY[0x24C5BCD30](v7) & 1) != 0
    && (MEMORY[0x24C5BCD30](*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v0 + 16), *(void *)(v0 + 24)) & 1) != 0)
  {
    type metadata accessor for CloudAssets_Asset.Protector(0);
    uint64_t v8 = sub_24A17327C();
    ((void (*)(uint64_t))v2)(v8);
    sub_24A1732EC();
    v2();
    sub_24A172284(&qword_26976B068, MEMORY[0x263F50560]);
    char v9 = sub_24A173370();
    uint64_t v10 = *(void (**)(void))(v4 + 8);
    sub_24A1732FC();
    v10();
    sub_24A1732FC();
    v10();
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_24A16E100(uint64_t a1, uint64_t a2)
{
  return sub_24A170C9C(a1, a2, (void (*)(void))sub_24A16DC28, qword_2697782B8);
}

uint64_t (*sub_24A16E12C())()
{
  return nullsub_1;
}

uint64_t sub_24A16E150()
{
  return sub_24A16DE2C();
}

uint64_t sub_24A16E168()
{
  return sub_24A16DEA0();
}

uint64_t sub_24A16E180(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A172284(&qword_26976BE18, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A16E1FC(uint64_t a1, uint64_t a2)
{
  return sub_24A16D9E0(a1, a2, &qword_26976AA98, (uint64_t)qword_2697782C8);
}

uint64_t sub_24A16E220(uint64_t a1)
{
  uint64_t v2 = sub_24A172284(&qword_26976AD20, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A16E28C()
{
  return sub_24A171E30((void (*)(void))type metadata accessor for CloudAssets_Asset.Protector, &qword_26976BDB0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
}

uint64_t sub_24A16E2E8()
{
  sub_24A172284(&qword_26976AD20, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
  return Message.hash(into:)();
}

uint64_t sub_24A16E368()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A14403C(v0, qword_2697782E0);
  sub_24A143E24(v0, (uint64_t)qword_2697782E0);
  sub_24A123464(&qword_26976BE50);
  uint64_t v1 = (int *)(sub_24A123464(&qword_26976BE58) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A193A50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "tenant_name";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "requestor_id";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  BOOL v11 = (void *)(v5 + 2 * v2);
  char v12 = (char *)v11 + v1[14];
  *BOOL v11 = 3;
  *(void *)char v12 = "access_token";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  BOOL v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "expiration_date";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A16E598()
{
  uint64_t result = sub_24A173240();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          sub_24A173268();
          sub_24A16E654();
          break;
        default:
          break;
      }
      uint64_t result = sub_24A173420();
    }
  }
  return result;
}

uint64_t sub_24A16E654()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_24A16E704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  sub_24A17329C();
  if (!v10 || (uint64_t result = sub_24A173564(), (v5 = v4) == 0))
  {
    sub_24A17329C();
    if (!v12 || (uint64_t result = sub_24A173564(), (v5 = v4) == 0))
    {
      sub_24A17329C();
      if (!v13 || (uint64_t result = sub_24A173564(), (v5 = v4) == 0))
      {
        uint64_t result = sub_24A16E7E8(v6, a1, a2, a3);
        if (!v5)
        {
          type metadata accessor for CloudAssets_Credential(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t sub_24A16E7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_24A123464(&qword_26976AE48);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Google_Protobuf_Timestamp();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A1594A4(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_26976AE48);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v7, 1, v8) == 1) {
    return sub_24A12B96C((uint64_t)v7, &qword_26976AE48);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  sub_24A172284(&qword_26976BE48, MEMORY[0x263F502F0]);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_24A16E9DC()
{
  sub_24A139550();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  type metadata accessor for UnknownStorage();
  sub_24A12477C();
  uint64_t v47 = v8;
  uint64_t v48 = v7;
  MEMORY[0x270FA5388](v7);
  sub_24A12935C();
  uint64_t v46 = v9;
  sub_24A131324();
  MEMORY[0x270FA5388](v10);
  uint64_t v45 = &v41[-v11];
  sub_24A129220();
  uint64_t v12 = type metadata accessor for Google_Protobuf_Timestamp();
  sub_24A12477C();
  uint64_t v49 = v13;
  MEMORY[0x270FA5388](v14);
  sub_24A1733B4();
  uint64_t v15 = sub_24A123464(&qword_26976BE70);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v16);
  sub_24A1292CC();
  uint64_t v17 = sub_24A123464(&qword_26976AE48);
  uint64_t v18 = sub_24A1291B8(v17);
  MEMORY[0x270FA5388](v18);
  sub_24A173488();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = &v41[-v21];
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = &v41[-v23];
  BOOL v25 = *v6 == *v4 && v6[1] == v4[1];
  if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_27;
  }
  BOOL v26 = v6[2] == v4[2] && v6[3] == v4[3];
  if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_27;
  }
  BOOL v27 = v6[4] == v4[4] && v6[5] == v4[5];
  if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v43 = v1;
  uint64_t v28 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A1594A4((uint64_t)v6 + *(int *)(v28 + 32), (uint64_t)v24, &qword_26976AE48);
  uint64_t v44 = v28;
  sub_24A1594A4((uint64_t)v4 + *(int *)(v28 + 32), (uint64_t)v22, &qword_26976AE48);
  uint64_t v29 = v0 + *(int *)(v15 + 48);
  sub_24A1594A4((uint64_t)v24, v0, &qword_26976AE48);
  sub_24A1594A4((uint64_t)v22, v29, &qword_26976AE48);
  sub_24A154BA0(v0, 1, v12);
  if (v25)
  {
    sub_24A12B96C((uint64_t)v22, &qword_26976AE48);
    sub_24A12B96C((uint64_t)v24, &qword_26976AE48);
    sub_24A154BA0(v29, 1, v12);
    if (v25)
    {
      sub_24A12B96C(v0, &qword_26976AE48);
LABEL_26:
      uint64_t v35 = v45;
      uint64_t v37 = v47;
      uint64_t v36 = v48;
      uint64_t v38 = *(void (**)(void))(v47 + 16);
      sub_24A173344();
      v38();
      uint64_t v39 = v46;
      sub_24A173344();
      v38();
      sub_24A172284(&qword_26976B068, MEMORY[0x263F50560]);
      dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v40(v39, v36);
      v40((uint64_t)v35, v36);
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  sub_24A1594A4(v0, v2, &qword_26976AE48);
  sub_24A154BA0(v29, 1, v12);
  if (v30)
  {
    sub_24A12B96C((uint64_t)v22, &qword_26976AE48);
    sub_24A12B96C((uint64_t)v24, &qword_26976AE48);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v2, v12);
LABEL_24:
    sub_24A12B96C(v0, &qword_26976BE70);
    goto LABEL_27;
  }
  uint64_t v31 = v49;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v43, v29, v12);
  sub_24A172284(&qword_26976BE78, MEMORY[0x263F502F0]);
  int v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(void))(v31 + 8);
  sub_24A15543C();
  v32();
  sub_24A12B96C((uint64_t)v22, &qword_26976AE48);
  sub_24A12B96C((uint64_t)v24, &qword_26976AE48);
  sub_24A15543C();
  v32();
  uint64_t v33 = sub_24A173594();
  sub_24A12B96C(v33, v34);
  if (v42) {
    goto LABEL_26;
  }
LABEL_27:
  sub_24A139538();
}

unint64_t sub_24A16EE94()
{
  return 0xD000000000000016;
}

uint64_t (*sub_24A16EEB8())()
{
  return nullsub_1;
}

uint64_t sub_24A16EEDC()
{
  return sub_24A16E598();
}

uint64_t sub_24A16EEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A16E704(a1, a2, a3);
}

uint64_t sub_24A16EF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A172284(&qword_26976BE40, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A16EF88(uint64_t a1, uint64_t a2)
{
  return sub_24A16D9E0(a1, a2, &qword_26976AAA0, (uint64_t)qword_2697782E0);
}

uint64_t sub_24A16EFAC(uint64_t a1)
{
  uint64_t v2 = sub_24A172284(&qword_26976BD98, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A16F018()
{
  return sub_24A171E30((void (*)(void))type metadata accessor for CloudAssets_Credential, &qword_26976BDA0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

uint64_t sub_24A16F074()
{
  sub_24A172284(&qword_26976BD98, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
  return Message.hash(into:)();
}

uint64_t sub_24A16F0F4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A14403C(v0, qword_2697782F8);
  sub_24A143E24(v0, (uint64_t)qword_2697782F8);
  sub_24A123464(&qword_26976BE50);
  uint64_t v1 = (int *)(sub_24A123464(&qword_26976BE58) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A193A50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "assets";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "storage_reference";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "credential";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "storage_reference_signature";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A16F334()
{
  uint64_t result = sub_24A173240();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v5 = sub_24A173268();
          sub_24A16FF84(v5, v6, v7, v8, v9, &qword_26976AD40, v10);
          break;
        case 2:
        case 4:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 3:
          sub_24A173604(result, v2, v3, v4, (void (*)(void))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
          break;
        default:
          break;
      }
      uint64_t result = sub_24A173420();
    }
  }
  return result;
}

uint64_t sub_24A16F458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_24A16F50C()
{
  sub_24A173674();
  uint64_t v7 = v6;
  if (!*(void *)(*(void *)v1 + 16)
    || (type metadata accessor for CloudAssets_Asset(0),
        sub_24A172284(&qword_26976AD40, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset),
        sub_24A173508(),
        uint64_t v2 = v4,
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v4))
  {
    if (sub_24A1735A0() || (v9 = sub_24A173594(), result = sub_24A173454(v9, v10, 2), (uint64_t v4 = v2) == 0))
    {
      uint64_t result = sub_24A171580(v5, v7, v3, v0, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
      if (!v4)
      {
        uint64_t v11 = *(void *)(v5 + 24);
        uint64_t v12 = *(void *)(v5 + 32);
        if (!sub_24A1735A0()) {
          sub_24A173454(v11, v12, 4);
        }
        type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

#error "24A16F7CC: call analysis failed (funcsize=261)"

unint64_t sub_24A16FAA8()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_24A16FAC4()
{
  sub_24A173470();
  sub_24A1247B0();
  uint64_t v0 = sub_24A173444();
  return v1(v0);
}

uint64_t sub_24A16FB1C()
{
  sub_24A173470();
  sub_24A1247B0();
  uint64_t v0 = sub_24A17353C();
  return v1(v0);
}

uint64_t sub_24A16FB74()
{
  return sub_24A16F334();
}

uint64_t sub_24A16FB8C()
{
  return sub_24A16F50C();
}

uint64_t sub_24A16FBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A172284(&qword_26976BE28, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A16FC20(uint64_t a1, uint64_t a2)
{
  return sub_24A16D9E0(a1, a2, &qword_26976AAA8, (uint64_t)qword_2697782F8);
}

uint64_t sub_24A16FC44(uint64_t a1)
{
  uint64_t v2 = sub_24A172284(&qword_26976AE00, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A16FCB0()
{
  return sub_24A171E30((void (*)(void))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, &qword_26976BD88, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
}

uint64_t sub_24A16FD0C()
{
  sub_24A172284(&qword_26976AE00, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  return Message.hash(into:)();
}

uint64_t sub_24A16FD8C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A14403C(v0, qword_269778310);
  sub_24A143E24(v0, (uint64_t)qword_269778310);
  sub_24A123464(&qword_26976BE50);
  uint64_t v1 = (int *)(sub_24A123464(&qword_26976BE58) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_24A190860;
  unint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)unint64_t v4 = "events";
  *(void *)(v4 + 8) = 6;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A16FEE8()
{
  uint64_t result = sub_24A173240();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        uint64_t v3 = sub_24A173268();
        sub_24A16FF84(v3, v4, v5, v6, v7, &qword_26976BD58, v8);
      }
      uint64_t result = sub_24A173420();
    }
  }
  return result;
}

uint64_t sub_24A16FF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t sub_24A170020()
{
  sub_24A173580();
  if (!*(void *)(*(void *)v1 + 16)
    || (type metadata accessor for CloudAssets_Signal.Event(0),
        sub_24A172284(&qword_26976BD58, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event), sub_24A173508(), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v0))
  {
    type metadata accessor for CloudAssets_Signal(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_24A1700F0()
{
  sub_24A173404();
  sub_24A12477C();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  sub_24A1732D0();
  MEMORY[0x270FA5388](v4);
  sub_24A13692C();
  if (v5)
  {
    type metadata accessor for CloudAssets_Signal(0);
    uint64_t v6 = sub_24A17327C();
    ((void (*)(uint64_t))v0)(v6);
    sub_24A1732EC();
    v0();
    sub_24A172284(&qword_26976B068, MEMORY[0x263F50560]);
    char v7 = sub_24A173370();
    uint64_t v8 = *(void (**)(void))(v2 + 8);
    sub_24A1732FC();
    v8();
    sub_24A1732FC();
    v8();
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

unint64_t sub_24A170224()
{
  return 0xD000000000000012;
}

uint64_t sub_24A170240()
{
  sub_24A173470();
  sub_24A1247B0();
  uint64_t v0 = sub_24A173444();
  return v1(v0);
}

uint64_t sub_24A170298()
{
  sub_24A173470();
  sub_24A1247B0();
  uint64_t v0 = sub_24A17353C();
  return v1(v0);
}

uint64_t sub_24A1702F0()
{
  return sub_24A16FEE8();
}

uint64_t sub_24A170308()
{
  return sub_24A170020();
}

uint64_t sub_24A170320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A172284(&qword_26976BE30, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A17039C(uint64_t a1, uint64_t a2)
{
  return sub_24A16D9E0(a1, a2, &qword_26976AAB0, (uint64_t)qword_269778310);
}

uint64_t sub_24A1703C0(uint64_t a1)
{
  uint64_t v2 = sub_24A172284((unint64_t *)&qword_26976B3B0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A17042C()
{
  return sub_24A171E30((void (*)(void))type metadata accessor for CloudAssets_Signal, &qword_26976BD78, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
}

uint64_t sub_24A170488()
{
  sub_24A172284((unint64_t *)&qword_26976B3B0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
  return Message.hash(into:)();
}

uint64_t sub_24A170508()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A14403C(v0, qword_269778328);
  sub_24A143E24(v0, (uint64_t)qword_269778328);
  sub_24A123464(&qword_26976BE50);
  uint64_t v1 = (int *)(sub_24A123464(&qword_26976BE58) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A193A60;
  char v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *char v5 = 0;
  *(void *)unint64_t v6 = "STORAGE_CONTAINER_UPLOAD_START";
  *(void *)(v6 + 8) = 30;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "ALL_UPLOADS_FINISH";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A1706C0(uint64_t a1, uint64_t a2)
{
  return sub_24A16D9E0(a1, a2, &qword_26976AAB8, (uint64_t)qword_269778328);
}

void sub_24A1706E4()
{
  v0._countAndFlagsBits = 0x746E6576452ELL;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
  qword_269778340 = 0xD000000000000012;
  *(void *)algn_269778348 = 0x800000024A18CDE0;
}

uint64_t *sub_24A17074C()
{
  if (qword_26976AAC0 != -1) {
    swift_once();
  }
  return &qword_269778340;
}

uint64_t sub_24A170798()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A14403C(v0, qword_269778350);
  sub_24A143E24(v0, (uint64_t)qword_269778350);
  sub_24A123464(&qword_26976BE50);
  uint64_t v1 = (int *)(sub_24A123464(&qword_26976BE58) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A193A60;
  char v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *char v5 = 1;
  *(void *)unint64_t v6 = "type";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "container_index";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A170958()
{
  uint64_t result = sub_24A173240();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
      }
      else if (result == 1)
      {
        sub_24A173268();
        sub_24A1709D4();
      }
      uint64_t result = sub_24A173420();
    }
  }
  return result;
}

uint64_t sub_24A1709D4()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t sub_24A170A3C()
{
  sub_24A173580();
  if (!*v1
    || (sub_24A172BBC(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v0))
  {
    if (!*(void *)(v2 + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v0))
    {
      type metadata accessor for CloudAssets_Signal.Event(0);
      return sub_24A1734A4();
    }
  }
  return result;
}

uint64_t sub_24A170AFC()
{
  sub_24A173404();
  sub_24A12477C();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_24A1732D0();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = *v1;
  uint64_t v8 = *v0;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v7 = *v1 != 0;
  }
  if (*((unsigned char *)v0 + 8) == 1)
  {
    if (v8)
    {
      if (v7 != 1) {
        goto LABEL_12;
      }
    }
    else if (v7)
    {
LABEL_12:
      char v10 = 0;
      return v10 & 1;
    }
  }
  else if (v7 != v8)
  {
    goto LABEL_12;
  }
  if (v1[2] != v0[2]) {
    goto LABEL_12;
  }
  type metadata accessor for CloudAssets_Signal.Event(0);
  uint64_t v9 = sub_24A17327C();
  ((void (*)(uint64_t))v2)(v9);
  sub_24A1732EC();
  v2();
  sub_24A172284(&qword_26976B068, MEMORY[0x263F50560]);
  char v10 = sub_24A173370();
  uint64_t v11 = *(void (**)(void))(v4 + 8);
  sub_24A1732FC();
  v11();
  sub_24A1732FC();
  v11();
  return v10 & 1;
}

uint64_t sub_24A170C78(uint64_t a1, uint64_t a2)
{
  return sub_24A170C9C(a1, a2, (void (*)(void))sub_24A17074C, &qword_269778340);
}

uint64_t sub_24A170C9C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t *a4)
{
  a3();
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_24A170CE0()
{
  return sub_24A170958();
}

uint64_t sub_24A170CF8()
{
  return sub_24A170A3C();
}

uint64_t sub_24A170D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A172284(&qword_26976BE88, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A170D8C(uint64_t a1, uint64_t a2)
{
  return sub_24A16D9E0(a1, a2, &qword_26976AAC8, (uint64_t)qword_269778350);
}

uint64_t sub_24A170DB0(uint64_t a1)
{
  uint64_t v2 = sub_24A172284(&qword_26976BD58, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A170E1C()
{
  return sub_24A171E30((void (*)(void))type metadata accessor for CloudAssets_Signal.Event, &qword_26976BD60, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
}

uint64_t sub_24A170E78()
{
  sub_24A172284(&qword_26976BD58, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
  return Message.hash(into:)();
}

uint64_t sub_24A170EF8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A14403C(v0, qword_269778368);
  sub_24A143E24(v0, (uint64_t)qword_269778368);
  sub_24A123464(&qword_26976BE50);
  uint64_t v1 = (int *)(sub_24A123464(&qword_26976BE58) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A193A50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "asset";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "credential";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "type";
  *((void *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "applicationID";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A171128(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  return sub_24A143E24(v3, a2);
}

uint64_t sub_24A17117C()
{
  uint64_t result = sub_24A173240();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_24A173268();
          sub_24A17124C();
          break;
        case 2:
          sub_24A173604(result, v2, v3, v4, (void (*)(void))type metadata accessor for CloudAssets_AssetStreamHandle);
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = sub_24A173420();
    }
  }
  return result;
}

uint64_t sub_24A17124C()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_24A1712FC()
{
  uint64_t v1 = sub_24A1733CC();
  uint64_t result = sub_24A1713B4(v1);
  if (!v0)
  {
    uint64_t v3 = sub_24A1734F0();
    sub_24A171580(v3, v4, v5, v6, v7);
    sub_24A17329C();
    if (v8) {
      sub_24A1735E4();
    }
    sub_24A17329C();
    if (v9) {
      sub_24A1735E4();
    }
    type metadata accessor for CloudAssets_AssetStreamHandle(0);
    return sub_24A1734CC();
  }
  return result;
}

uint64_t sub_24A1713B4(uint64_t a1)
{
  uint64_t v2 = sub_24A123464(&qword_26976AE50);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CloudAssets_Asset(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CloudAssets_AssetStreamHandle(0);
  sub_24A1594A4(a1 + *(int *)(v8 + 28), (uint64_t)v4, &qword_26976AE50);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v4, 1, v5) == 1) {
    return sub_24A12B96C((uint64_t)v4, &qword_26976AE50);
  }
  sub_24A172B5C((uint64_t)v4, (uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  sub_24A172284(&qword_26976AD40, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_24A166AB8((uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A171580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  v16[3] = a4;
  v16[1] = a3;
  uint64_t v8 = sub_24A123464((uint64_t *)&unk_26976C040);
  uint64_t v9 = sub_24A1291B8(v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v13);
  sub_24A1292CC();
  uint64_t v14 = a5(0);
  sub_24A1594A4(a1 + *(int *)(v14 + 32), (uint64_t)v11, (uint64_t *)&unk_26976C040);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v11, 1, v12) == 1) {
    return sub_24A12B96C((uint64_t)v11, (uint64_t *)&unk_26976C040);
  }
  sub_24A172B5C((uint64_t)v11, v5, (void (*)(void))type metadata accessor for CloudAssets_Credential);
  sub_24A172284(&qword_26976BD98, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_24A166AB8(v5, (void (*)(void))type metadata accessor for CloudAssets_Credential);
}

void sub_24A171744()
{
  sub_24A139550();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  type metadata accessor for UnknownStorage();
  sub_24A12477C();
  uint64_t v65 = v8;
  uint64_t v66 = v7;
  MEMORY[0x270FA5388](v7);
  sub_24A12935C();
  v64[2] = v9;
  sub_24A131324();
  MEMORY[0x270FA5388](v10);
  v64[1] = (char *)v64 - v11;
  uint64_t v12 = sub_24A129220();
  uint64_t v72 = type metadata accessor for CloudAssets_Credential(v12);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v13);
  sub_24A124810();
  uint64_t v67 = v14;
  uint64_t v69 = sub_24A123464(&qword_26976BE80);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v15);
  sub_24A124810();
  uint64_t v73 = v16;
  uint64_t v17 = sub_24A123464((uint64_t *)&unk_26976C040);
  uint64_t v18 = sub_24A1291B8(v17);
  MEMORY[0x270FA5388](v18);
  sub_24A12935C();
  uint64_t v68 = v19;
  sub_24A131324();
  MEMORY[0x270FA5388](v20);
  uint64_t v70 = (uint64_t)v64 - v21;
  sub_24A131324();
  MEMORY[0x270FA5388](v22);
  uint64_t v71 = (uint64_t)v64 - v23;
  uint64_t v24 = sub_24A129220();
  type metadata accessor for CloudAssets_Asset(v24);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v25);
  sub_24A1733B4();
  uint64_t v26 = sub_24A123464(&qword_26976BE98);
  uint64_t v27 = v26 - 8;
  MEMORY[0x270FA5388](v26);
  sub_24A1247F8();
  uint64_t v28 = sub_24A123464(&qword_26976AE50);
  uint64_t v29 = sub_24A1291B8(v28);
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)v64 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  sub_24A173688();
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)v64 - v34;
  uint64_t v36 = type metadata accessor for CloudAssets_AssetStreamHandle(0);
  uint64_t v37 = *(int *)(v36 + 28);
  uint64_t v74 = v6;
  uint64_t v38 = (uint64_t)v6 + v37;
  uint64_t v39 = v36;
  sub_24A1594A4(v38, (uint64_t)v35, &qword_26976AE50);
  uint64_t v40 = *(int *)(v39 + 28);
  uint64_t v75 = v4;
  sub_24A1594A4((uint64_t)v4 + v40, v0, &qword_26976AE50);
  uint64_t v41 = v1 + *(int *)(v27 + 56);
  sub_24A1594A4((uint64_t)v35, v1, &qword_26976AE50);
  sub_24A1594A4(v0, v41, &qword_26976AE50);
  sub_24A1732B0(v1);
  if (v42)
  {
    sub_24A12B96C(v0, &qword_26976AE50);
    sub_24A12B96C((uint64_t)v35, &qword_26976AE50);
    sub_24A1732B0(v41);
    if (v42)
    {
      sub_24A12B96C(v1, &qword_26976AE50);
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v43 = &qword_26976BE98;
    uint64_t v44 = v1;
LABEL_20:
    sub_24A12B96C(v44, v43);
    goto LABEL_21;
  }
  sub_24A1594A4(v1, (uint64_t)v32, &qword_26976AE50);
  sub_24A1732B0(v41);
  if (v42)
  {
    sub_24A12B96C(v0, &qword_26976AE50);
    sub_24A12B96C((uint64_t)v35, &qword_26976AE50);
    sub_24A166AB8((uint64_t)v32, (void (*)(void))type metadata accessor for CloudAssets_Asset);
    goto LABEL_9;
  }
  sub_24A172B5C(v41, v2, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  sub_24A16C7E4();
  char v46 = v45;
  sub_24A166AB8(v2, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  sub_24A12B96C(v0, &qword_26976AE50);
  sub_24A12B96C((uint64_t)v35, &qword_26976AE50);
  sub_24A166AB8((uint64_t)v32, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  sub_24A12B96C(v1, &qword_26976AE50);
  if ((v46 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_11:
  uint64_t v47 = v74;
  uint64_t v48 = v71;
  sub_24A1594A4((uint64_t)v74 + *(int *)(v39 + 32), v71, (uint64_t *)&unk_26976C040);
  uint64_t v49 = v75;
  uint64_t v50 = v70;
  sub_24A1594A4((uint64_t)v75 + *(int *)(v39 + 32), v70, (uint64_t *)&unk_26976C040);
  uint64_t v51 = v73;
  uint64_t v52 = v73 + *(int *)(v69 + 48);
  sub_24A1594A4(v48, v73, (uint64_t *)&unk_26976C040);
  sub_24A1594A4(v50, v52, (uint64_t *)&unk_26976C040);
  uint64_t v53 = v72;
  sub_24A154BA0(v51, 1, v72);
  if (!v42)
  {
    uint64_t v54 = v68;
    sub_24A1594A4(v51, v68, (uint64_t *)&unk_26976C040);
    sub_24A154BA0(v52, 1, v53);
    if (!v55)
    {
      uint64_t v56 = v67;
      sub_24A172B5C(v52, v67, (void (*)(void))type metadata accessor for CloudAssets_Credential);
      sub_24A16E9DC();
      char v58 = v57;
      sub_24A166AB8(v56, (void (*)(void))type metadata accessor for CloudAssets_Credential);
      sub_24A12B96C(v50, (uint64_t *)&unk_26976C040);
      sub_24A12B96C(v48, (uint64_t *)&unk_26976C040);
      sub_24A166AB8(v54, (void (*)(void))type metadata accessor for CloudAssets_Credential);
      sub_24A12B96C(v51, (uint64_t *)&unk_26976C040);
      if ((v58 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_23;
    }
    sub_24A12B96C(v50, (uint64_t *)&unk_26976C040);
    sub_24A12B96C(v48, (uint64_t *)&unk_26976C040);
    sub_24A166AB8(v54, (void (*)(void))type metadata accessor for CloudAssets_Credential);
    goto LABEL_19;
  }
  sub_24A12B96C(v50, (uint64_t *)&unk_26976C040);
  sub_24A12B96C(v48, (uint64_t *)&unk_26976C040);
  sub_24A154BA0(v52, 1, v53);
  if (!v42)
  {
LABEL_19:
    uint64_t v43 = &qword_26976BE80;
    uint64_t v44 = v51;
    goto LABEL_20;
  }
  sub_24A12B96C(v51, (uint64_t *)&unk_26976C040);
LABEL_23:
  BOOL v59 = *v47 == *v49 && v47[1] == v49[1];
  if (v59 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    BOOL v60 = v47[2] == v49[2] && v47[3] == v49[3];
    if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v61 = v65;
      uint64_t v62 = *(void (**)(void))(v65 + 16);
      sub_24A173344();
      v62();
      sub_24A173344();
      v62();
      sub_24A172284(&qword_26976B068, MEMORY[0x263F50560]);
      dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v63 = *(void (**)(void))(v61 + 8);
      sub_24A15543C();
      v63();
      sub_24A15543C();
      v63();
    }
  }
LABEL_21:
  sub_24A139538();
}

Swift::Int sub_24A171E30(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

unint64_t sub_24A171EBC()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_24A171ED8()
{
  sub_24A173470();
  sub_24A1247B0();
  uint64_t v0 = sub_24A173444();
  return v1(v0);
}

uint64_t sub_24A171F30()
{
  sub_24A173470();
  sub_24A1247B0();
  uint64_t v0 = sub_24A17353C();
  return v1(v0);
}

uint64_t sub_24A171F88()
{
  return sub_24A17117C();
}

uint64_t sub_24A171FA0()
{
  return sub_24A1712FC();
}

uint64_t sub_24A171FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A172284(&qword_26976BE38, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A172034(uint64_t a1, uint64_t a2)
{
  return sub_24A16D9E0(a1, a2, &qword_26976AAD0, (uint64_t)qword_269778368);
}

uint64_t sub_24A172058(uint64_t a1)
{
  uint64_t v2 = sub_24A172284(&qword_26976C060, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A1720C4()
{
  return sub_24A171E30((void (*)(void))type metadata accessor for CloudAssets_AssetStreamHandle, &qword_26976BD48, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
}

uint64_t sub_24A172120()
{
  sub_24A172284(&qword_26976C060, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
  return Message.hash(into:)();
}

Swift::Int sub_24A17219C()
{
  return Hasher._finalize()();
}

uint64_t sub_24A1721F4()
{
  return sub_24A172284(&qword_26976BD40, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
}

uint64_t sub_24A17223C()
{
  return sub_24A172284(&qword_26976C060, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
}

uint64_t sub_24A172284(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1722CC()
{
  return sub_24A172284(&qword_26976BD48, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
}

uint64_t sub_24A172314()
{
  return sub_24A172284(&qword_26976BD50, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
}

uint64_t type metadata accessor for CloudAssets_Signal.Event(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976BEA0);
}

uint64_t sub_24A17237C()
{
  return sub_24A172284(&qword_26976BD58, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
}

uint64_t sub_24A1723C4()
{
  return sub_24A172284(&qword_26976BD60, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
}

uint64_t sub_24A17240C()
{
  return sub_24A172284(&qword_26976BD68, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
}

uint64_t sub_24A172454()
{
  return sub_24A172284(&qword_26976BD70, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
}

uint64_t sub_24A17249C()
{
  return sub_24A172284((unint64_t *)&qword_26976B3B0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
}

uint64_t sub_24A1724E4()
{
  return sub_24A172284(&qword_26976BD78, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
}

uint64_t sub_24A17252C()
{
  return sub_24A172284(&qword_26976BD80, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
}

uint64_t sub_24A172574()
{
  return sub_24A172284(&qword_26976AE00, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
}

uint64_t sub_24A1725BC()
{
  return sub_24A172284(&qword_26976BD88, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
}

uint64_t sub_24A172604()
{
  return sub_24A172284(&qword_26976BD90, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

uint64_t sub_24A17264C()
{
  return sub_24A172284(&qword_26976BD98, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

uint64_t sub_24A172694()
{
  return sub_24A172284(&qword_26976BDA0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

uint64_t sub_24A1726DC()
{
  return sub_24A172284(&qword_26976BDA8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
}

uint64_t sub_24A172724()
{
  return sub_24A172284(&qword_26976AD20, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
}

uint64_t sub_24A17276C()
{
  return sub_24A172284(&qword_26976BDB0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
}

uint64_t sub_24A1727B4()
{
  return sub_24A172284(&qword_26976BDB8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A1727FC()
{
  return sub_24A172284(&qword_26976ACF0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A172844()
{
  return sub_24A172284(&qword_26976BDC0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A17288C()
{
  return sub_24A172284(&qword_26976BDC8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A1728D4()
{
  return sub_24A172284(&qword_26976AD40, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A17291C()
{
  return sub_24A172284(&qword_26976BDD0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A172964()
{
  return sub_24A172284(&qword_26976BDD8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

uint64_t sub_24A1729AC()
{
  return sub_24A172284(&qword_26976BDE0, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
}

uint64_t sub_24A1729F4()
{
  return sub_24A172284(&qword_26976BDE8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
}

uint64_t sub_24A172A3C()
{
  return sub_24A172284(&qword_26976BDF0, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
}

uint64_t sub_24A172A84()
{
  return sub_24A172284(&qword_26976BDF8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A172ACC()
{
  return sub_24A172284(&qword_26976BE00, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
}

uint64_t sub_24A172B14()
{
  return sub_24A172284(&qword_26976BE08, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A172B5C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_24A172BBC()
{
  unint64_t result = qword_26976BE90;
  if (!qword_26976BE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BE90);
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudAssets_Signal.EventType()
{
  return &type metadata for CloudAssets_Signal.EventType;
}

void *sub_24A172C18(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_24A172CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t sub_24A172D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A172DE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A172E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A172F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A172F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A172FA0);
}

uint64_t sub_24A172FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  return _s11CloudAssets21UploadResponseMessageOwet_0(v4, a2, v5);
}

uint64_t sub_24A172FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A173000);
}

uint64_t sub_24A173000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  return _s11CloudAssets21UploadResponseMessageOwst_0(v5, a2, a2, v6);
}

uint64_t sub_24A173050()
{
  return sub_24A173068();
}

uint64_t sub_24A173068()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_24A1730FC()
{
  unint64_t result = qword_26976BEB0;
  if (!qword_26976BEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BEB0);
  }
  return result;
}

unint64_t sub_24A17314C()
{
  unint64_t result = qword_26976BEB8;
  if (!qword_26976BEB8)
  {
    sub_24A123538(&qword_26976BEC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BEB8);
  }
  return result;
}

unint64_t sub_24A1731A4()
{
  unint64_t result = qword_26976BEC8;
  if (!qword_26976BEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BEC8);
  }
  return result;
}

unint64_t sub_24A1731F4()
{
  unint64_t result = qword_26976BED0;
  if (!qword_26976BED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BED0);
  }
  return result;
}

uint64_t sub_24A173240()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t sub_24A173268()
{
  return v0;
}

uint64_t sub_24A17327C()
{
  return v0;
}

uint64_t sub_24A1732B0(uint64_t a1)
{
  return _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v1);
}

uint64_t sub_24A173320@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

uint64_t sub_24A173334@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_24A173354()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t sub_24A173370()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_24A173390()
{
  return v0;
}

uint64_t sub_24A1733CC()
{
  return v0;
}

void sub_24A1733F0(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
}

uint64_t sub_24A173404()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t sub_24A173420()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t sub_24A173438@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_24A173444()
{
  return v0;
}

uint64_t sub_24A173454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F44D88](a1, a2, a3, v4, v3);
}

uint64_t sub_24A173470()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t sub_24A1734A4()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_24A1734CC()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_24A1734F0()
{
  return v0;
}

uint64_t sub_24A173508()
{
  return v0;
}

uint64_t sub_24A173520()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t sub_24A17353C()
{
  return v0;
}

uint64_t sub_24A17354C()
{
  return *(void *)v0;
}

uint64_t sub_24A173564()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t sub_24A173594()
{
  return v0;
}

BOOL sub_24A1735A0()
{
  return sub_24A1765F8(v0, v1);
}

uint64_t sub_24A1735C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F44D88](a1, a2, a3, v4, v3);
}

uint64_t sub_24A1735E4()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t sub_24A173604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return sub_24A16F458(v6, v5, v8, v7, a5);
}

uint64_t sub_24A173630(uint64_t a1)
{
  return _s11CloudAssets21UploadResponseMessageOwst_0(v1, 1, 1, a1);
}

uint64_t sub_24A17369C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646C656979 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6873696E6966 && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_24A1737D4(char a1)
{
  if (!a1) {
    return 0x646C656979;
  }
  if (a1 == 1) {
    return 0x6873696E6966;
  }
  return 0x726F727265;
}

uint64_t sub_24A173820()
{
  return sub_24A1737D4(*v0);
}

uint64_t sub_24A173828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A17369C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A173850(uint64_t a1)
{
  unint64_t v2 = sub_24A173D44();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A17388C(uint64_t a1)
{
  unint64_t v2 = sub_24A173D44();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A1738C8(uint64_t a1)
{
  unint64_t v2 = sub_24A173D90();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A173904(uint64_t a1)
{
  unint64_t v2 = sub_24A173D90();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A173940(uint64_t a1)
{
  unint64_t v2 = sub_24A173DDC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A17397C(uint64_t a1)
{
  unint64_t v2 = sub_24A173DDC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A1739B8(uint64_t a1)
{
  unint64_t v2 = sub_24A173E28();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A1739F4(uint64_t a1)
{
  unint64_t v2 = sub_24A173E28();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t XPCAsyncSequenceResponse.Event.encode(to:)(void *a1)
{
  sub_24A123464(&qword_26976BED8);
  sub_24A12477C();
  MEMORY[0x270FA5388](v3);
  sub_24A124810();
  sub_24A123464(&qword_26976BEE0);
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A129204();
  sub_24A123464(&qword_26976BEE8);
  sub_24A12477C();
  MEMORY[0x270FA5388](v5);
  sub_24A129204();
  sub_24A123464(&qword_26976BEF0);
  sub_24A12477C();
  MEMORY[0x270FA5388](v6);
  sub_24A1396B0();
  uint64_t v7 = *v1;
  unint64_t v8 = v1[1];
  sub_24A1234A8(a1, a1[3]);
  sub_24A173D44();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8 >> 60 == 11)
  {
    sub_24A173D90();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A1247EC();
    v10();
    sub_24A175CD4();
    goto LABEL_5;
  }
  if (v8 >> 60 == 15)
  {
    sub_24A173DDC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A1247EC();
    v9();
    sub_24A175CD4();
LABEL_5:
    sub_24A1247EC();
    return v11();
  }
  sub_24A1233B4(v7, v8);
  sub_24A173E28();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  sub_24A12638C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  sub_24A1247EC();
  v13();
  sub_24A175CD4();
  sub_24A1247EC();
  v14();
  return sub_24A153F88(v7, v8);
}

unint64_t sub_24A173D44()
{
  unint64_t result = qword_26976BEF8;
  if (!qword_26976BEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BEF8);
  }
  return result;
}

unint64_t sub_24A173D90()
{
  unint64_t result = qword_26976BF00;
  if (!qword_26976BF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF00);
  }
  return result;
}

unint64_t sub_24A173DDC()
{
  unint64_t result = qword_26976BF08;
  if (!qword_26976BF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF08);
  }
  return result;
}

unint64_t sub_24A173E28()
{
  unint64_t result = qword_26976BF10;
  if (!qword_26976BF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF10);
  }
  return result;
}

uint64_t XPCAsyncSequenceResponse.Event.init(from:)@<X0>(void *a1@<X0>, long long *a2@<X8>)
{
  sub_24A123464(&qword_26976BF18);
  sub_24A12477C();
  MEMORY[0x270FA5388](v3);
  sub_24A124810();
  sub_24A123464(&qword_26976BF20);
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A129204();
  sub_24A123464(&qword_26976BF28);
  sub_24A12477C();
  MEMORY[0x270FA5388](v5);
  sub_24A1396B0();
  uint64_t v6 = sub_24A123464(&qword_26976BF30);
  sub_24A12477C();
  uint64_t v35 = v7;
  MEMORY[0x270FA5388](v8);
  sub_24A129204();
  uint64_t v11 = v10 - v9;
  sub_24A1234A8(a1, a1[3]);
  sub_24A173D44();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v37) {
    return sub_24A123580((uint64_t)a1);
  }
  uint64_t v12 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = v6;
  if (!v13)
  {
    uint64_t v23 = v11;
    uint64_t v24 = v35;
LABEL_9:
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    sub_24A123464(&qword_26976B008);
    *uint64_t v27 = &type metadata for XPCAsyncSequenceResponse.Event;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x263F8DCB0], v25);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v14);
    return sub_24A123580((uint64_t)a1);
  }
  int v15 = *(unsigned __int8 *)(v12 + 32);
  sub_24A139204(1, v13, v12, v12 + 32, 0, (2 * v13) | 1);
  uint64_t v17 = v16;
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (v17 != v19 >> 1)
  {
    uint64_t v23 = v11;
    uint64_t v24 = v35;
    uint64_t v14 = v6;
    goto LABEL_9;
  }
  if (v15)
  {
    if (v15 == 1)
    {
      sub_24A173DDC();
      sub_24A175CB4();
      sub_24A1247EC();
      v20();
      swift_unknownObjectRelease();
      sub_24A1247EC();
      v21();
      long long v22 = xmmword_24A194820;
    }
    else
    {
      sub_24A173D90();
      sub_24A175CB4();
      sub_24A1247EC();
      v29();
      swift_unknownObjectRelease();
      sub_24A1247EC();
      v30();
      long long v22 = xmmword_24A194810;
    }
  }
  else
  {
    LOBYTE(v36) = 0;
    sub_24A173E28();
    sub_24A175CB4();
    sub_24A1262F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A1247EC();
    v31();
    swift_unknownObjectRelease();
    uint64_t v32 = sub_24A175CE4();
    v33(v32);
    long long v22 = v36;
  }
  *a2 = v22;
  return sub_24A123580((uint64_t)a1);
}

uint64_t sub_24A1743C8@<X0>(void *a1@<X0>, long long *a2@<X8>)
{
  return XPCAsyncSequenceResponse.Event.init(from:)(a1, a2);
}

uint64_t sub_24A1743E0(void *a1)
{
  return XPCAsyncSequenceResponse.Event.encode(to:)(a1);
}

uint64_t XPCAsyncSequenceResponse.id.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();
  sub_24A1247B0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t XPCAsyncSequenceResponse.event.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_24A174B48(v4, v5);
}

uint64_t XPCAsyncSequenceResponse.init(id:event:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  type metadata accessor for UUID();
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(a3, a1);
  uint64_t result = type metadata accessor for XPCAsyncSequenceResponse();
  uint64_t v9 = (void *)(a3 + *(int *)(result + 20));
  *uint64_t v9 = v5;
  v9[1] = v6;
  return result;
}

uint64_t sub_24A174518(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E657665 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A1745E8(char a1)
{
  if (a1) {
    return 0x746E657665;
  }
  else {
    return 25705;
  }
}

uint64_t sub_24A174610()
{
  return sub_24A1745E8(*v0);
}

uint64_t sub_24A174618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A174518(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A174640(uint64_t a1)
{
  unint64_t v2 = sub_24A174B60();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A17467C(uint64_t a1)
{
  unint64_t v2 = sub_24A174B60();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t XPCAsyncSequenceResponse.encode(to:)(void *a1)
{
  uint64_t v4 = sub_24A123464(&qword_26976BF38);
  sub_24A12477C();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_24A1247F8();
  sub_24A1234A8(a1, a1[3]);
  sub_24A174B60();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_24A12C8BC(&qword_26976AC60);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for XPCAsyncSequenceResponse();
    sub_24A174BAC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t XPCAsyncSequenceResponse.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = type metadata accessor for UUID();
  sub_24A12477C();
  uint64_t v15 = v6;
  MEMORY[0x270FA5388](v7);
  sub_24A1247F8();
  sub_24A123464(&qword_26976BF50);
  sub_24A12477C();
  MEMORY[0x270FA5388](v8);
  sub_24A129204();
  uint64_t v9 = type metadata accessor for XPCAsyncSequenceResponse();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v10);
  sub_24A1396B0();
  sub_24A1234A8(a1, a1[3]);
  sub_24A174B60();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_24A123580((uint64_t)a1);
  }
  LOBYTE(v17) = 0;
  sub_24A12C8BC(&qword_26976AC80);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v4, v3, v16);
  sub_24A174BF8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = sub_24A12D134();
  v12(v11);
  *(_OWORD *)(v4 + *(int *)(v9 + 20)) = v17;
  sub_24A162398(v4, a2);
  sub_24A123580((uint64_t)a1);
  return sub_24A174C44(v4);
}

uint64_t sub_24A174AD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCAsyncSequenceResponse.init(from:)(a1, a2);
}

uint64_t sub_24A174AE8(void *a1)
{
  return XPCAsyncSequenceResponse.encode(to:)(a1);
}

uint64_t type metadata accessor for XPCAsyncSequenceResponse()
{
  uint64_t result = qword_26976BF60;
  if (!qword_26976BF60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A174B48(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF) {
    return sub_24A1233B4(a1, a2);
  }
  return a1;
}

unint64_t sub_24A174B60()
{
  unint64_t result = qword_26976BF40;
  if (!qword_26976BF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF40);
  }
  return result;
}

unint64_t sub_24A174BAC()
{
  unint64_t result = qword_26976BF48;
  if (!qword_26976BF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF48);
  }
  return result;
}

unint64_t sub_24A174BF8()
{
  unint64_t result = qword_26976BF58;
  if (!qword_26976BF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF58);
  }
  return result;
}

uint64_t sub_24A174C44(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCAsyncSequenceResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCAsyncSequenceResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (((v11 >> 60) | 4) == 0xF)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      sub_24A1233B4(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t destroy for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (((v7 >> 60) | 4) != 0xF)
  {
    uint64_t v8 = *v6;
    return sub_24A12340C(v8, v7);
  }
  return result;
}

uint64_t initializeWithCopy for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (((v10 >> 60) | 4) == 0xF)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_24A1233B4(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  if (((*(void *)(a1 + v7 + 8) >> 60) | 4) != 0xF)
  {
    unint64_t v12 = v9[1];
    if (((v12 >> 60) | 4) != 0xF)
    {
      uint64_t v14 = *v9;
      sub_24A1233B4(v14, v12);
      uint64_t v15 = *v8;
      unint64_t v16 = v8[1];
      *uint64_t v8 = v14;
      v8[1] = v12;
      sub_24A12340C(v15, v16);
      return a1;
    }
    sub_24A174FE8((uint64_t)v8);
    goto LABEL_6;
  }
  unint64_t v10 = v9[1];
  if (((v10 >> 60) | 4) == 0xF)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  uint64_t v11 = *v9;
  sub_24A1233B4(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t sub_24A174FE8(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (((v10 >> 60) | 4) != 0xF)
  {
    unint64_t v11 = v9[1];
    if (((v11 >> 60) | 4) != 0xF)
    {
      uint64_t v13 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      sub_24A12340C(v13, v10);
      return a1;
    }
    sub_24A174FE8((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A17512C);
}

uint64_t sub_24A17512C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  sub_24A124798();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return _s11CloudAssets21UploadResponseMessageOwet_0(a1, a2, v6);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    int v10 = (4 * v9) & 0xC | (v9 >> 2);
    BOOL v11 = __OFSUB__(13, v10);
    int v12 = 13 - v10;
    if (v12 < 0 != v11) {
      int v12 = -1;
    }
    if (((4 * v9) & 0xC) != 0) {
      return (v12 + 1);
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1751E4);
}

void sub_24A1751E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  sub_24A124798();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s11CloudAssets21UploadResponseMessageOwst_0(a1, a2, a2, v8);
  }
  else
  {
    int v10 = (void *)(a1 + *(int *)(a4 + 20));
    *int v10 = 0;
    v10[1] = (unint64_t)(((14 - a2) >> 2) & 3 | (4 * (14 - a2))) << 60;
  }
}

uint64_t sub_24A175280()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *destroy for XPCAsyncSequenceResponse.Event(uint64_t *result)
{
  unint64_t v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0) {
    return (uint64_t *)sub_24A12340C(*result, v1);
  }
  return result;
}

uint64_t _s11CloudAssets24XPCAsyncSequenceResponseV5EventOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    sub_24A1233B4(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for XPCAsyncSequenceResponse.Event(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  uint64_t v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      uint64_t v9 = *a2;
      sub_24A1233B4(v9, v5);
      uint64_t v10 = *a1;
      unint64_t v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_24A12340C(v10, v11);
      return a1;
    }
    sub_24A12340C(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v7 = *a2;
  sub_24A1233B4(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

__n128 initializeWithTake for XPCAsyncSequenceResponse.Event(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for XPCAsyncSequenceResponse.Event(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    uint64_t v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      uint64_t v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_24A12340C(v7, v4);
      return a1;
    }
    sub_24A12340C(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceResponse.Event(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xB && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 11);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    unsigned int v4 = 16 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 3) {
    return v4 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceResponse.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xA)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 11;
    if (a3 >= 0xB) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xB) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (14 - a2)) | ((14 - a2) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_24A17553C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 60;
  if (((4 * v1) & 0xC) != 0) {
    return 16 - ((4 * v1) & 0xC | (v1 >> 2));
  }
  else {
    return 0;
  }
}

void *sub_24A175564(void *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *__n128 result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *__n128 result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event()
{
  return &type metadata for XPCAsyncSequenceResponse.Event;
}

unsigned char *storeEnumTagSinglePayload for XPCAsyncSequenceResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A175670);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.CodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for XPCAsyncSequenceResponse.Event.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A175774);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.CodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for XPCAsyncSequenceResponse.Event.YieldCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A175848);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.YieldCodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.YieldCodingKeys;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.FinishCodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.FinishCodingKeys;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.ErrorCodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.ErrorCodingKeys;
}

unint64_t sub_24A1758A4()
{
  unint64_t result = qword_26976BF70;
  if (!qword_26976BF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF70);
  }
  return result;
}

unint64_t sub_24A1758F4()
{
  unint64_t result = qword_26976BF78;
  if (!qword_26976BF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF78);
  }
  return result;
}

unint64_t sub_24A175944()
{
  unint64_t result = qword_26976BF80;
  if (!qword_26976BF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF80);
  }
  return result;
}

unint64_t sub_24A175994()
{
  unint64_t result = qword_26976BF88;
  if (!qword_26976BF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF88);
  }
  return result;
}

unint64_t sub_24A1759E4()
{
  unint64_t result = qword_26976BF90;
  if (!qword_26976BF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF90);
  }
  return result;
}

unint64_t sub_24A175A34()
{
  unint64_t result = qword_26976BF98;
  if (!qword_26976BF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BF98);
  }
  return result;
}

unint64_t sub_24A175A84()
{
  unint64_t result = qword_26976BFA0;
  if (!qword_26976BFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BFA0);
  }
  return result;
}

unint64_t sub_24A175AD4()
{
  unint64_t result = qword_26976BFA8;
  if (!qword_26976BFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BFA8);
  }
  return result;
}

unint64_t sub_24A175B24()
{
  unint64_t result = qword_26976BFB0;
  if (!qword_26976BFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BFB0);
  }
  return result;
}

unint64_t sub_24A175B74()
{
  unint64_t result = qword_26976BFB8;
  if (!qword_26976BFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BFB8);
  }
  return result;
}

unint64_t sub_24A175BC4()
{
  unint64_t result = qword_26976BFC0;
  if (!qword_26976BFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BFC0);
  }
  return result;
}

unint64_t sub_24A175C14()
{
  unint64_t result = qword_26976BFC8;
  if (!qword_26976BFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BFC8);
  }
  return result;
}

unint64_t sub_24A175C64()
{
  unint64_t result = qword_26976BFD0;
  if (!qword_26976BFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976BFD0);
  }
  return result;
}

uint64_t sub_24A175CB4()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A175CD4()
{
  return v0;
}

uint64_t sub_24A175CE4()
{
  return v0;
}

uint64_t sub_24A175CFC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_24A14403C(v0, qword_26976BFD8);
  sub_24A143E24(v0, (uint64_t)qword_26976BFD8);
  type metadata accessor for XPCSessionCacheImplementation();
  sub_24A123464(&qword_26976BFF0);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

void *sub_24A175D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_defaultActor_initialize();
  v4[14] = a1;
  v4[15] = a2;
  v4[16] = a3;
  v4[17] = a4;
  v4[18] = 0;
  return v4;
}

uint64_t sub_24A175DE8()
{
  uint64_t v1 = v0;
  if (qword_26976AAD8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_24A143E24(v2, (uint64_t)qword_26976BFD8);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_24A1765C4(&dword_24A120000, v5, v6, "evict xpc session");
    sub_24A144474();
  }

  *(void *)(v1 + 144) = 0;
  return swift_release();
}

uint64_t sub_24A175EC4()
{
  if (*(void *)(v1 + 144))
  {
    uint64_t v0 = *(void *)(v1 + 144);
  }
  else
  {
    uint64_t v3 = sub_24A175F0C();
    if (v2) {
      return v0;
    }
    uint64_t v0 = v3;
  }
  swift_retain();
  return v0;
}

uint64_t sub_24A175F0C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for XPCSession.InitializationOptions();
  MEMORY[0x270FA5388](v3 - 8);
  if (qword_26976AAD8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_24A143E24(v4, (uint64_t)qword_26976BFD8);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_24A120000, v5, v6, "establish xpc session", v7, 2u);
    MEMORY[0x24C5BDE90](v7, -1, -1);
  }

  type metadata accessor for XPCSession();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static XPCSession.InitializationOptions.none.getter();
  type metadata accessor for XPCAsyncSequenceResponse();
  sub_24A17657C(&qword_26976BFF8, (void (*)(uint64_t))type metadata accessor for XPCAsyncSequenceResponse);
  uint64_t v8 = XPCSession.__allocating_init<A>(machService:targetQueue:options:incomingMessageHandler:cancellationHandler:)();
  uint64_t v9 = v8;
  if (!v1)
  {
    *(void *)(v2 + 144) = v8;
    swift_retain();
    swift_release();
  }
  return v9;
}

uint64_t sub_24A17612C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for XPCRichError();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26976AAD8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_24A143E24(v8, (uint64_t)qword_26976BFD8);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v9(v7, a1, v4);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    int v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = (void *)swift_slowAlloc();
    uint64_t v22 = v2;
    *(_DWORD *)int v12 = 138412290;
    uint64_t v20 = v12 + 4;
    sub_24A17657C(&qword_26976B778, MEMORY[0x263F8F408]);
    swift_allocError();
    v9(v13, (uint64_t)v7, v4);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v23 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v21 = v14;
    uint64_t v15 = sub_24A1765E4();
    v16(v15);
    _os_log_impl(&dword_24A120000, v10, v11, "cached xpc connection disconnected due to error %@", v12, 0xCu);
    sub_24A123464(&qword_26976B4E0);
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    uint64_t v17 = sub_24A1765E4();
    v18(v17);
  }

  return sub_24A175DE8();
}

uint64_t sub_24A1763CC()
{
  uint64_t v1 = v0;
  if (qword_26976AAD8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_24A143E24(v2, (uint64_t)qword_26976BFD8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_24A1765C4(&dword_24A120000, v5, v6, "cancel xpc session");
    sub_24A144474();
  }

  if (*(void *)(v1 + 144))
  {
    swift_retain();
    dispatch thunk of XPCSession.cancel(reason:)();
    swift_release();
  }
  return sub_24A175DE8();
}

uint64_t sub_24A1764D4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_24A17650C()
{
  sub_24A1764D4();
  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for XPCSessionCacheImplementation()
{
  return self;
}

uint64_t sub_24A17655C()
{
  return sub_24A15D564();
}

uint64_t sub_24A17657C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_24A1765C4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_24A1765E4()
{
  return v0;
}

BOOL sub_24A1765F8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = (int)a1;
      uint64_t v2 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v2 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      return v3 == v2;
    default:
      uint64_t v3 = 0;
      uint64_t v2 = BYTE6(a2);
      break;
  }
  return v3 == v2;
}

uint64_t sub_24A17665C(uint64_t a1, unint64_t a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  unint64_t v2 = a2 >> 62;
  uint64_t v3 = MEMORY[0x263F8EE78];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_46;
      }
      uint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v5) {
        return v3;
      }
      uint64_t v32 = BYTE6(a2);
      unint64_t v31 = HIDWORD(a1);
      uint64_t v48 = MEMORY[0x263F8EE78];
      int64_t v8 = v5 & ~(v5 >> 63);
      sub_24A152460(0, v8, 0);
      uint64_t v9 = a1;
      uint64_t v3 = v48;
      char v33 = a2;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v10 = (int)a1;
        }
        else {
          uint64_t v10 = *(void *)(a1 + 16);
        }
        if (v5 < 0)
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
        }
      }
      else
      {
        if (v5 < 0) {
          goto LABEL_48;
        }
        uint64_t v10 = 0;
      }
      unint64_t v29 = a2 >> 16;
      unint64_t v30 = a2 >> 8;
      unint64_t v27 = HIDWORD(a2);
      unint64_t v28 = a2 >> 24;
      unint64_t v26 = a2 >> 40;
      int v35 = v2;
      do
      {
        if (!v8)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v10 < (int)a1 || v10 >= a1 >> 32) {
              goto LABEL_39;
            }
            uint64_t v12 = __DataStorage._bytes.getter();
            if (!v12) {
              goto LABEL_49;
            }
            uint64_t v13 = v12;
            uint64_t v14 = __DataStorage._offset.getter();
            uint64_t v15 = v10 - v14;
            if (__OFSUB__(v10, v14)) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v10 < *(void *)(v9 + 16)) {
              goto LABEL_41;
            }
            if (v10 >= *(void *)(v9 + 24)) {
              goto LABEL_43;
            }
            uint64_t v17 = __DataStorage._bytes.getter();
            if (!v17) {
              goto LABEL_50;
            }
            uint64_t v13 = v17;
            uint64_t v18 = __DataStorage._offset.getter();
            uint64_t v15 = v10 - v18;
            if (__OFSUB__(v10, v18)) {
              goto LABEL_44;
            }
          }
          char v16 = *(unsigned char *)(v13 + v15);
          uint64_t v9 = a1;
        }
        else
        {
          if (v10 >= v32) {
            goto LABEL_40;
          }
          char v36 = v9;
          __int16 v37 = *(_WORD *)((char *)&a1 + 1);
          char v38 = BYTE3(a1);
          char v39 = v31;
          __int16 v40 = *(_WORD *)((char *)&a1 + 5);
          char v41 = HIBYTE(a1);
          char v42 = v33;
          char v43 = v30;
          char v44 = v29;
          char v45 = v28;
          char v46 = v27;
          char v47 = v26;
          char v16 = *(&v36 + v10);
        }
        sub_24A123464(&qword_26976C200);
        uint64_t v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = xmmword_24A190860;
        *(void *)(v19 + 56) = MEMORY[0x263F8E778];
        *(void *)(v19 + 64) = MEMORY[0x263F8E7C0];
        *(unsigned char *)(v19 + 32) = v16;
        uint64_t v20 = String.init(format:_:)();
        uint64_t v22 = v21;
        uint64_t v48 = v3;
        unint64_t v2 = *(void *)(v3 + 16);
        unint64_t v23 = *(void *)(v3 + 24);
        if (v2 >= v23 >> 1)
        {
          sub_24A152460((void *)(v23 > 1), v2 + 1, 1);
          uint64_t v9 = a1;
          uint64_t v3 = v48;
        }
        *(void *)(v3 + 16) = v2 + 1;
        uint64_t v24 = v3 + 16 * v2;
        *(void *)(v24 + 32) = v20;
        *(void *)(v24 + 40) = v22;
        ++v10;
        --v8;
        --v5;
        LODWORD(v2) = v35;
      }
      while (v5);
      return v3;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_47;
    case 3uLL:
      return v3;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_24A176A10()
{
  swift_bridgeObjectRetain();
  uint64_t v1 = String.init<A>(_:)();
  String.append<A>(contentsOf:)();
  return v1;
}

uint64_t sub_24A176A90(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7465737361 && a2 == 0xE500000000000000;
  if (v2 || (sub_24A18145C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x69746E6564657263 && a2 == 0xEA00000000006C61;
    if (v6 || (sub_24A18145C() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x7079547465737361 && a2 == 0xE900000000000065;
      if (v7 || (sub_24A18145C() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x746163696C707061 && a2 == 0xED000044496E6F69)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_24A18145C();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_24A176C44(char a1)
{
  uint64_t result = 0x7465737361;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x69746E6564657263;
      break;
    case 2:
      uint64_t result = 0x7079547465737361;
      break;
    case 3:
      uint64_t result = 0x746163696C707061;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A176CE8()
{
  return sub_24A176C44(*v0);
}

uint64_t sub_24A176CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A176A90(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A176D18(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_24A176D24(uint64_t a1)
{
  unint64_t v2 = sub_24A17F460();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A176D60(uint64_t a1)
{
  unint64_t v2 = sub_24A17F460();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A176D9C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_24A14403C(v0, qword_26976C000);
  sub_24A143E24(v0, (uint64_t)qword_26976C000);
  type metadata accessor for AssetStreamHandle(0);
  sub_24A123464((uint64_t *)&unk_26976C1E0);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_24A176E38()
{
  uint64_t result = sub_24A176E58();
  qword_26976C018 = result;
  return result;
}

uint64_t sub_24A176E58()
{
  if (qword_26976AA48 != -1) {
    swift_once();
  }
  unint64_t v0 = 0xD000000000000022;
  uint64_t v1 = (unsigned char *)(qword_26976B540 + 16);
  unint64_t v2 = (os_unfair_lock_s *)(qword_26976B540 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_26976B540 + 20));
  sub_24A144634(v1, &v6);
  os_unfair_lock_unlock(v2);
  if (v6)
  {
    uint64_t v3 = 0x800000024A18C500;
    if (!static TestConfigurations.isSystemInstalledBinary()())
    {
      unint64_t v0 = sub_24A176A10();
      uint64_t v3 = v4;
    }
  }
  else
  {
    unint64_t v0 = 0xD00000000000001BLL;
    uint64_t v3 = 0x800000024A18C4B0;
  }
  type metadata accessor for AssetManager();
  swift_allocObject();
  return AssetManager.init(serviceName:)(v0, v3);
}

void AssetStreamHandle.init(from:)()
{
  sub_24A129194();
  uint64_t v72 = v3;
  unint64_t v73 = v4;
  uint64_t v74 = v5;
  type metadata accessor for Date();
  sub_24A12477C();
  uint64_t v62 = v7;
  uint64_t v63 = v6;
  MEMORY[0x270FA5388](v6);
  sub_24A124810();
  uint64_t v61 = v8;
  uint64_t v9 = sub_24A123464(&qword_26976AE48);
  uint64_t v10 = sub_24A1291B8(v9);
  MEMORY[0x270FA5388](v10);
  sub_24A124810();
  uint64_t v59 = v11;
  uint64_t v60 = type metadata accessor for Google_Protobuf_Timestamp();
  sub_24A12477C();
  uint64_t v65 = v12;
  MEMORY[0x270FA5388](v13);
  sub_24A124810();
  uint64_t v64 = v14;
  uint64_t v15 = sub_24A123464((uint64_t *)&unk_26976C040);
  uint64_t v16 = sub_24A1291B8(v15);
  MEMORY[0x270FA5388](v16);
  sub_24A124810();
  uint64_t v58 = v17;
  uint64_t v68 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v18);
  sub_24A124810();
  uint64_t v66 = v19;
  uint64_t v20 = sub_24A123464(&qword_26976AE50);
  uint64_t v21 = sub_24A1291B8(v20);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = sub_24A18143C(v22, v57);
  uint64_t v69 = type metadata accessor for CloudAssets_Asset(v23);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v24);
  sub_24A124810();
  uint64_t v67 = v25;
  uint64_t v26 = type metadata accessor for Asset(0);
  uint64_t v27 = sub_24A1291B8(v26);
  MEMORY[0x270FA5388](v27);
  sub_24A1247F8();
  uint64_t v28 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v29 = sub_24A1291B8(v28);
  MEMORY[0x270FA5388](v29);
  uint64_t v30 = sub_24A181478();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v31);
  uint64_t v32 = sub_24A1814A0();
  uint64_t v33 = type metadata accessor for AssetStreamHandle(v32);
  uint64_t v34 = *(int *)(v33 + 32);
  type metadata accessor for AssetStreamHandle.RangeReadersCache();
  uint64_t v35 = swift_allocObject();
  swift_defaultActor_initialize();
  sub_24A123464(&qword_26976C050);
  type metadata accessor for AssetStreamHandle.RangeReader(0);
  sub_24A177724();
  *(void *)(v35 + 112) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v74 + v34) = v35;
  char v36 = v2;
  sub_24A1233B4(v72, v73);
  BinaryDecodingOptions.init()();
  sub_24A17EB10(&qword_26976C060, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  if (v0)
  {
    sub_24A12340C(v72, v73);
    swift_release();
  }
  else
  {
    uint64_t v71 = v1;
    sub_24A17EAB8((uint64_t)v2 + *(int *)(v30 + 28), v70, &qword_26976AE50);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v70, 1, v69) == 1)
    {
      *uint64_t v67 = 0;
      UnknownStorage.init()();
      uint64_t v37 = (uint64_t)v67 + *(int *)(v69 + 24);
      uint64_t v38 = type metadata accessor for CloudAssets_Asset.ID(0);
      _s11CloudAssets21UploadResponseMessageOwst_0(v37, 1, 1, v38);
      uint64_t v39 = (uint64_t)v67 + *(int *)(v69 + 28);
      uint64_t v40 = type metadata accessor for CloudAssets_Asset.Protector(0);
      _s11CloudAssets21UploadResponseMessageOwst_0(v39, 1, 1, v40);
      sub_24A15417C(v70, &qword_26976AE50);
    }
    else
    {
      sub_24A1777E4(v70, (uint64_t)v67, (void (*)(void))type metadata accessor for CloudAssets_Asset);
    }
    uint64_t v41 = v33;
    sub_24A1268B8();
    sub_24A1777E4(v71, v74, (void (*)(void))type metadata accessor for Asset);
    sub_24A17EAB8((uint64_t)v2 + *(int *)(v30 + 32), v58, (uint64_t *)&unk_26976C040);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v58, 1, v68) == 1)
    {
      *uint64_t v66 = 0;
      v66[1] = 0xE000000000000000;
      v66[2] = 0;
      v66[3] = 0xE000000000000000;
      v66[4] = 0;
      v66[5] = 0xE000000000000000;
      UnknownStorage.init()();
      sub_24A18155C();
      _s11CloudAssets21UploadResponseMessageOwst_0(v42, v43, v44, v60);
      sub_24A15417C(v58, (uint64_t *)&unk_26976C040);
    }
    else
    {
      sub_24A1777E4(v58, (uint64_t)v66, (void (*)(void))type metadata accessor for CloudAssets_Credential);
    }
    char v45 = (char *)(v74 + *(int *)(v33 + 20));
    uint64_t v46 = v66[1];
    *(void *)char v45 = *v66;
    *((void *)v45 + 1) = v46;
    uint64_t v47 = v66[3];
    *((void *)v45 + 2) = v66[2];
    *((void *)v45 + 3) = v47;
    uint64_t v48 = v66[5];
    *((void *)v45 + 4) = v66[4];
    *((void *)v45 + 5) = v48;
    sub_24A17EAB8((uint64_t)v66 + *(int *)(v68 + 32), v59, &qword_26976AE48);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v59, 1, v60) == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v49 = v64;
      Google_Protobuf_Timestamp.init()();
      sub_24A15417C(v59, &qword_26976AE48);
      uint64_t v50 = v65;
    }
    else
    {
      uint64_t v49 = v64;
      uint64_t v50 = v65;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v64, v59, v60);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Google_Protobuf_Timestamp.date.getter();
    sub_24A177790((uint64_t)v66, (void (*)(void))type metadata accessor for CloudAssets_Credential);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v60);
    uint64_t v51 = type metadata accessor for Credential(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(&v45[*(int *)(v51 + 28)], v61, v63);
    sub_24A12340C(v72, v73);
    uint64_t v52 = v36[1];
    uint64_t v53 = (void *)(v74 + *(int *)(v41 + 24));
    void *v53 = *v36;
    v53[1] = v52;
    uint64_t v55 = v36[2];
    uint64_t v54 = v36[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24A177790((uint64_t)v36, (void (*)(void))type metadata accessor for CloudAssets_AssetStreamHandle);
    uint64_t v56 = (void *)(v74 + *(int *)(v41 + 28));
    *uint64_t v56 = v55;
    v56[1] = v54;
  }
  sub_24A12917C();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t *v32;
  uint64_t v33[4];
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  sub_24A129194();
  uint64_t v38 = v3;
  uint64_t v39 = v1;
  v33[0] = v4;
  v33[3] = type metadata accessor for Credential(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = sub_24A181320(v6, v33[0]);
  type metadata accessor for Asset(v7);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v8);
  uint64_t v34 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v36 = sub_24A123464((uint64_t *)&unk_26976C0B0);
  sub_24A12477C();
  v33[1] = v10;
  MEMORY[0x270FA5388](v11);
  sub_24A1396B0();
  uint64_t v12 = (int *)type metadata accessor for AssetStreamHandle(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v13);
  sub_24A1596E8();
  uint64_t v15 = *(int *)(v14 + 32);
  type metadata accessor for AssetStreamHandle.RangeReadersCache();
  uint64_t v16 = swift_allocObject();
  swift_defaultActor_initialize();
  sub_24A123464(&qword_26976C050);
  type metadata accessor for AssetStreamHandle.RangeReader(0);
  sub_24A177724();
  *(void *)(v16 + 112) = Dictionary.init(dictionaryLiteral:)();
  uint64_t v37 = v15;
  uint64_t v17 = v0;
  *(void *)(v0 + v15) = v16;
  uint64_t v18 = v38;
  sub_24A1234A8(v38, v38[3]);
  sub_24A17F460();
  uint64_t v35 = v2;
  uint64_t v19 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    sub_24A123580((uint64_t)v18);
    swift_release();
  }
  else
  {
    uint64_t v20 = v33[2];
    sub_24A17EB10(&qword_26976AC88, (void (*)(uint64_t))type metadata accessor for Asset);
    uint64_t v21 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v22 = (uint64_t)v21;
    uint64_t v23 = v17;
    sub_24A1777E4(v22, v17, (void (*)(void))type metadata accessor for Asset);
    sub_24A17EB10(&qword_26976C0C0, (void (*)(uint64_t))type metadata accessor for Credential);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A1777E4(v20, v17 + v12[5], (void (*)(void))type metadata accessor for Credential);
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v25 = (uint64_t *)(v17 + v12[6]);
    *uint64_t v25 = v24;
    v25[1] = v26;
    uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v29 = v28;
    uint64_t v30 = sub_24A181340();
    v31(v30);
    uint64_t v32 = (uint64_t *)(v23 + v12[7]);
    *uint64_t v32 = v27;
    v32[1] = v29;
    sub_24A17EA10(v23, v33[0], (void (*)(void))type metadata accessor for AssetStreamHandle);
    sub_24A123580((uint64_t)v18);
    sub_24A177790(v23, (void (*)(void))type metadata accessor for AssetStreamHandle);
  }
  sub_24A12917C();
}

uint64_t type metadata accessor for AssetStreamHandle(uint64_t a1)
{
  return sub_24A128920(a1, qword_26976C108);
}

uint64_t type metadata accessor for AssetStreamHandle.RangeReadersCache()
{
  return self;
}

uint64_t type metadata accessor for AssetStreamHandle.RangeReader(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976C158);
}

unint64_t sub_24A177724()
{
  unint64_t result = qword_26976C058;
  if (!qword_26976C058)
  {
    sub_24A123538(&qword_26976C050);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C058);
  }
  return result;
}

uint64_t sub_24A177790(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A1247B0();
  sub_24A1247EC();
  v3();
  return a1;
}

uint64_t sub_24A1777E4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

void AssetStreamHandle.serializedData()()
{
  sub_24A129194();
  type metadata accessor for Date();
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A18141C(v5, v38);
  uint64_t v42 = type metadata accessor for Google_Protobuf_Timestamp();
  sub_24A12477C();
  uint64_t v45 = v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = sub_24A1813FC(v8, v39);
  uint64_t v10 = type metadata accessor for CloudAssets_Credential(v9);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = sub_24A1814BC();
  uint64_t v13 = type metadata accessor for CloudAssets_Asset(v12);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v14);
  uint64_t v44 = sub_24A181478();
  MEMORY[0x270FA5388](v44);
  sub_24A1247F8();
  *unint64_t v2 = 0;
  v2[1] = 0xE000000000000000;
  v2[2] = 0;
  v2[3] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v15 = (uint64_t)v2 + *(int *)(v44 + 28);
  sub_24A18155C();
  _s11CloudAssets21UploadResponseMessageOwst_0(v16, v17, v18, v13);
  uint64_t v19 = (uint64_t)v2 + *(int *)(v44 + 32);
  sub_24A18155C();
  _s11CloudAssets21UploadResponseMessageOwst_0(v20, v21, v22, v10);
  sub_24A127160(v0);
  sub_24A15417C(v15, &qword_26976AE50);
  sub_24A1777E4((uint64_t)v0, v15, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  _s11CloudAssets21UploadResponseMessageOwst_0(v15, 0, 1, v13);
  uint64_t v40 = v10;
  uint64_t v41 = (int *)type metadata accessor for AssetStreamHandle(0);
  uint64_t v23 = (void *)(v1 + v41[5]);
  UnknownStorage.init()();
  uint64_t v24 = (uint64_t)v3 + *(int *)(v10 + 32);
  sub_24A18155C();
  _s11CloudAssets21UploadResponseMessageOwst_0(v25, v26, v27, v42);
  uint64_t v28 = v23[1];
  *uint64_t v3 = *v23;
  v3[1] = v28;
  uint64_t v29 = v23[3];
  v3[2] = v23[2];
  v3[3] = v29;
  uint64_t v30 = v23[5];
  v3[4] = v23[4];
  v3[5] = v30;
  type metadata accessor for Credential(0);
  sub_24A1815EC();
  v31();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Google_Protobuf_Timestamp.init(date:)();
  sub_24A15417C(v24, &qword_26976AE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v24, v43, v42);
  _s11CloudAssets21UploadResponseMessageOwst_0(v24, 0, 1, v42);
  sub_24A15417C(v19, (uint64_t *)&unk_26976C040);
  sub_24A1777E4((uint64_t)v3, v19, (void (*)(void))type metadata accessor for CloudAssets_Credential);
  _s11CloudAssets21UploadResponseMessageOwst_0(v19, 0, 1, v40);
  uint64_t v32 = (uint64_t *)(v1 + v41[6]);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *unint64_t v2 = v34;
  v2[1] = v33;
  uint64_t v35 = (uint64_t *)(v1 + v41[7]);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v2[2] = v37;
  v2[3] = v36;
  sub_24A17EB10(&qword_26976C060, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
  Message.serializedData(partial:)();
  sub_24A177790((uint64_t)v2, (void (*)(void))type metadata accessor for CloudAssets_AssetStreamHandle);
  sub_24A12917C();
}

void static AssetStreamHandle.makeAssetStreamHandle(partition:owner:accessToken:requestorID:signature:referenceSignature:size:assetKey:filenameExtension:applicationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_24A129194();
  uint64_t v87 = v34;
  uint64_t v88 = v33;
  uint64_t v89 = v35;
  uint64_t v90 = v36;
  uint64_t v86 = v37;
  uint64_t v81 = v38;
  uint64_t v82 = v39;
  uint64_t v41 = v40;
  uint64_t v42 = type metadata accessor for Credential(0);
  uint64_t v43 = sub_24A1291B8(v42);
  MEMORY[0x270FA5388](v43);
  uint64_t v44 = sub_24A1814BC();
  uint64_t v45 = type metadata accessor for Asset(v44);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v46);
  uint64_t v47 = sub_24A1814A0();
  uint64_t v48 = (int *)type metadata accessor for Asset.ID(v47);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v49);
  uint64_t v51 = (char *)&v72 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_24A1765F8(a25, a26))
  {
    sub_24A17EA6C();
    swift_allocError();
    *(_OWORD *)uint64_t v52 = xmmword_24A194E90;
    *(unsigned char *)(v52 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    unint64_t v83 = a26;
    uint64_t v84 = v32;
    uint64_t v76 = a28;
    uint64_t v77 = a30;
    uint64_t v78 = a27;
    uint64_t v79 = a29;
    uint64_t v85 = v41;
    uint64_t v73 = v31;
    uint64_t v80 = v30;
    uint64_t v74 = a22;
    uint64_t v75 = a24;
    type metadata accessor for URL();
    sub_24A1247B0();
    sub_24A1815EC();
    v53();
    uint64_t v54 = &v51[v48[5]];
    uint64_t v55 = v86;
    *(void *)uint64_t v54 = v82;
    *((void *)v54 + 1) = v55;
    uint64_t v56 = &v51[v48[6]];
    uint64_t v57 = v87;
    *(void *)uint64_t v56 = v87;
    *((void *)v56 + 1) = a21;
    uint64_t v58 = (uint64_t *)&v51[v48[7]];
    *uint64_t v58 = a22;
    v58[1] = a23;
    uint64_t v59 = v73;
    sub_24A17EA10((uint64_t)v51, v73, (void (*)(void))type metadata accessor for Asset.ID);
    uint64_t v60 = v59 + *(int *)(v45 + 20);
    unint64_t v61 = v83;
    *(void *)uint64_t v60 = a25;
    *(void *)(v60 + 8) = v61;
    *(_OWORD *)(v60 + 16) = xmmword_24A190210;
    *(void *)(v59 + *(int *)(v45 + 24)) = v75;
    type metadata accessor for Credential.Builder(0);
    swift_allocObject();
    swift_bridgeObjectRetain();
    sub_24A1233B4(v57, a21);
    sub_24A1233B4(v74, a23);
    sub_24A1233B4(a25, v61);
    sub_24A1233B4(a25, v61);
    sub_24A1233B4(0, 0xC000000000000000);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Credential.Builder.init(tenantName:requestorID:accessToken:)();
    uint64_t v62 = v84;
    Credential.Builder.build()(v84);
    swift_release();
    uint64_t v63 = v85;
    sub_24A17EA10(v59, v85, (void (*)(void))type metadata accessor for Asset);
    uint64_t v64 = (int *)type metadata accessor for AssetStreamHandle(0);
    sub_24A17EA10((uint64_t)v62, v63 + v64[5], (void (*)(void))type metadata accessor for Credential);
    uint64_t v91 = v64[8];
    type metadata accessor for AssetStreamHandle.RangeReadersCache();
    uint64_t v65 = swift_allocObject();
    uint64_t v66 = v76;
    swift_bridgeObjectRetain();
    uint64_t v67 = v77;
    swift_bridgeObjectRetain();
    swift_defaultActor_initialize();
    sub_24A123464(&qword_26976C050);
    type metadata accessor for AssetStreamHandle.RangeReader(0);
    sub_24A177724();
    *(void *)(v65 + 112) = Dictionary.init(dictionaryLiteral:)();
    sub_24A12340C(a25, v83);
    sub_24A12340C(0, 0xC000000000000000);
    uint64_t v68 = v84;
    uint64_t v69 = v85;
    *(void *)(v85 + v91) = v65;
    uint64_t v70 = (void *)(v69 + v64[6]);
    *uint64_t v70 = v78;
    v70[1] = v66;
    uint64_t v71 = (void *)(v69 + v64[7]);
    *uint64_t v71 = v79;
    v71[1] = v67;
    sub_24A177790((uint64_t)v68, (void (*)(void))type metadata accessor for Credential);
    sub_24A177790(v59, (void (*)(void))type metadata accessor for Asset);
    sub_24A177790((uint64_t)v51, (void (*)(void))type metadata accessor for Asset.ID);
  }
  sub_24A12917C();
}

id AssetStreamHandle.makeAVPlayerItem(with:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a2;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_24A12477C();
  uint64_t v57 = v5;
  uint64_t v58 = v4;
  MEMORY[0x270FA5388](v4);
  sub_24A18141C(v6, v51);
  uint64_t v55 = type metadata accessor for OS_dispatch_queue.Attributes();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v7);
  sub_24A1813FC(v8, v51);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = sub_24A1291B8(v9);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = sub_24A181320(v11, v51);
  uint64_t v51 = type metadata accessor for AssetStreamHandle(v12);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v13);
  sub_24A124810();
  uint64_t v52 = v14;
  uint64_t v15 = type metadata accessor for UUID();
  sub_24A12477C();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  sub_24A1396B0();
  uint64_t v19 = sub_24A123464(&qword_26976B4D0);
  uint64_t v20 = sub_24A1291B8(v19);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v51 - v24;
  uint64_t v26 = type metadata accessor for URL();
  sub_24A12477C();
  uint64_t v28 = v27;
  MEMORY[0x270FA5388](v29);
  sub_24A1596E8();
  uint64_t v30 = sub_24A181524();
  sub_24A17EAB8(v30, v31, &qword_26976B4D0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v25, 1, v26) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v2, v25, v26);
    goto LABEL_5;
  }
  sub_24A1813B4();
  UUID.init()();
  sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
  v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v3, v15);
  URL.init(string:)();
  swift_bridgeObjectRelease();
  id result = (id)_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v23, 1, v26);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v2, v23, v26);
    sub_24A15417C((uint64_t)v25, &qword_26976B4D0);
LABEL_5:
    uint64_t v35 = v56;
    uint64_t v34 = v57;
    uint64_t v36 = v53;
    uint64_t v37 = v54;
    uint64_t v38 = v52;
    id v39 = objc_allocWithZone(MEMORY[0x263EFA8D0]);
    swift_bridgeObjectRetain();
    id v41 = sub_24A17EB58(v2, v36, v40);
    uint64_t v57 = (void (**)(void, void, void))v41;
    id v42 = objc_allocWithZone((Class)type metadata accessor for LoadingRequestHandler());
    sub_24A17EA10(v37, v38, (void (*)(void))type metadata accessor for AssetStreamHandle);
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_24A181530();
    id v46 = sub_24A17F120(v43, v44, v45, v42);
    id v47 = objc_msgSend(v41, sel_resourceLoader);
    sub_24A181260(0, &qword_26976C070);
    id v48 = v46;
    static DispatchQoS.unspecified.getter();
    uint64_t v59 = MEMORY[0x263F8EE78];
    sub_24A17EB10(&qword_26976C078, MEMORY[0x263F8F0F8]);
    sub_24A123464(&qword_26976C080);
    sub_24A18121C(&qword_26976C088, &qword_26976C080);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v34[13](v35, *MEMORY[0x263F8F130], v58);
    sub_24A181390();
    uint64_t v49 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    objc_msgSend(v47, sel_setDelegate_queue_, v48, v49);

    id v50 = objc_allocWithZone((Class)type metadata accessor for PlayerItem());
    return sub_24A17EE18(v57, v48, v50);
  }
  __break(1u);
  return result;
}

void AssetStreamHandle.makeAVAssetExportSession(with:options:presetName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = a2;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_24A12477C();
  uint64_t v52 = v7;
  uint64_t v53 = v6;
  MEMORY[0x270FA5388](v6);
  sub_24A124810();
  uint64_t v51 = v8;
  uint64_t v50 = type metadata accessor for OS_dispatch_queue.Attributes();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v9);
  sub_24A181320(v10, v46[0]);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = sub_24A1291B8(v11);
  MEMORY[0x270FA5388](v12);
  sub_24A124810();
  uint64_t v49 = v13;
  v46[0] = type metadata accessor for AssetStreamHandle(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v14);
  sub_24A18143C(v15, v46[0]);
  type metadata accessor for UUID();
  sub_24A12477C();
  MEMORY[0x270FA5388](v16);
  uint64_t v17 = sub_24A123464(&qword_26976B4D0);
  uint64_t v18 = sub_24A1291B8(v17);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)v46 - v22;
  uint64_t v24 = type metadata accessor for URL();
  sub_24A12477C();
  uint64_t v26 = v25;
  MEMORY[0x270FA5388](v27);
  sub_24A1247F8();
  sub_24A17EAB8(a1, (uint64_t)v23, &qword_26976B4D0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v23, 1, v24) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v4, v23, v24);
    goto LABEL_5;
  }
  sub_24A1813B4();
  UUID.init()();
  sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  sub_24A1813D8();
  v29();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v21, 1, v24) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v4, v21, v24);
    sub_24A15417C((uint64_t)v23, &qword_26976B4D0);
LABEL_5:
    uint64_t v30 = v55;
    uint64_t v31 = v47;
    uint64_t v32 = v48;
    uint64_t v33 = v46[1];
    id v34 = objc_allocWithZone(MEMORY[0x263EFA8D0]);
    swift_bridgeObjectRetain();
    id v36 = sub_24A17EB58(v4, v31, v35);
    id v37 = objc_allocWithZone((Class)type metadata accessor for LoadingRequestHandler());
    sub_24A17EA10(v32, v33, (void (*)(void))type metadata accessor for AssetStreamHandle);
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_24A181530();
    id v41 = sub_24A17F120(v38, v39, v40, v37);
    id v42 = objc_msgSend(v36, sel_resourceLoader);
    sub_24A181260(0, &qword_26976C070);
    id v43 = v41;
    static DispatchQoS.unspecified.getter();
    uint64_t v56 = MEMORY[0x263F8EE78];
    sub_24A17EB10(&qword_26976C078, MEMORY[0x263F8F0F8]);
    sub_24A123464(&qword_26976C080);
    sub_24A18121C(&qword_26976C088, &qword_26976C080);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(uint64_t, void, uint64_t))(v52 + 104))(v51, *MEMORY[0x263F8F130], v53);
    sub_24A181390();
    uint64_t v44 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    objc_msgSend(v42, sel_setDelegate_queue_, v43, v44);

    uint64_t v45 = (char *)objc_allocWithZone((Class)type metadata accessor for AssetExportSession());
    swift_bridgeObjectRetain();
    sub_24A17F3AC(v36, v54, v30, v43, v45);
    return;
  }
  __break(1u);
}

uint64_t AssetStreamHandle.encode(to:)()
{
  uint64_t v2 = sub_24A123464(&qword_26976C090);
  sub_24A12477C();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_24A1247F8();
  uint64_t v6 = (void *)sub_24A181524();
  sub_24A1234A8(v6, v7);
  sub_24A17F460();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Asset(0);
  sub_24A17EB10((unint64_t *)&unk_26976C0A0, (void (*)(uint64_t))type metadata accessor for Asset);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v0)
  {
    type metadata accessor for AssetStreamHandle(0);
    type metadata accessor for Credential(0);
    sub_24A17EB10(&qword_26976AEF0, (void (*)(uint64_t))type metadata accessor for Credential);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
}

void sub_24A179170()
{
}

uint64_t sub_24A179188()
{
  return AssetStreamHandle.encode(to:)();
}

uint64_t sub_24A1791A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_24A14403C(v0, qword_26976C020);
  sub_24A143E24(v0, (uint64_t)qword_26976C020);
  type metadata accessor for AssetStreamHandle.RangeReader(0);
  sub_24A123464(&qword_26976C198);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_24A17923C@<X0>(uint64_t a1@<X8>)
{
  v20[1] = a1;
  v21[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = self;
  id v6 = objc_msgSend(v5, sel_defaultManager);
  v21[0] = 0;
  id v7 = objc_msgSend(v6, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 0, v21);

  id v8 = v21[0];
  if (v7)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = v8;

    id v10 = objc_msgSend(v5, sel_defaultManager);
    URL._bridgeToObjectiveC()(v11);
    uint64_t v13 = v12;
    v21[0] = 0;
    id v14 = objc_msgSend(v10, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v12, 1, v21);

    id v15 = v21[0];
    if (v14)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      id v16 = v15;
    }
    else
    {
      id v19 = v21[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    id v17 = v21[0];
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t sub_24A17947C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v57 = a6;
  uint64_t v7 = v6;
  uint64_t v56 = a5;
  uint64_t v12 = type metadata accessor for URL.DirectoryHint();
  uint64_t v52 = *(void *)(v12 - 8);
  uint64_t v53 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v50 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v54 = *(void *)(v14 - 8);
  uint64_t v55 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  id v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v51 = (char *)&v48 - v18;
  swift_defaultActor_initialize();
  uint64_t v19 = v6 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset;
  uint64_t v20 = a1;
  sub_24A17EA10(a1, v6 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, (void (*)(void))type metadata accessor for Asset);
  uint64_t v21 = (uint64_t *)(v6
                  + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_range);
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  *uint64_t v21 = a2;
  v21[1] = a3;
  uint64_t v22 = v6
      + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_credential;
  uint64_t v59 = a4;
  sub_24A17EA10(a4, v6 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_credential, (void (*)(void))type metadata accessor for Credential);
  uint64_t v23 = (void *)(v6
                 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_applicationID);
  uint64_t v24 = v57;
  uint64_t v25 = v58;
  *uint64_t v23 = v56;
  v23[1] = v24;
  uint64_t v57 = v17;
  sub_24A17923C((uint64_t)v17);
  if (v25)
  {
    sub_24A177790(v19, (void (*)(void))type metadata accessor for Asset);
    sub_24A177790(v22, (void (*)(void))type metadata accessor for Credential);
    swift_bridgeObjectRelease();
    type metadata accessor for AssetStreamHandle.RangeReader(0);
    swift_defaultActor_destroy();
    sub_24A177790(v59, (void (*)(void))type metadata accessor for Credential);
    sub_24A177790(v20, (void (*)(void))type metadata accessor for Asset);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v26 = type metadata accessor for Asset.ID(0);
    uint64_t v61 = sub_24A17665C(*(void *)(v20 + *(int *)(v26 + 24)), *(void *)(v20 + *(int *)(v26 + 24) + 8));
    sub_24A123464(&qword_26976B0E8);
    sub_24A18121C((unint64_t *)&unk_26976C1F0, &qword_26976B0E8);
    uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v61 = v27;
    uint64_t v62 = v29;
    v30._countAndFlagsBits = 95;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    uint64_t v60 = sub_24A17665C(*(void *)(v20 + *(int *)(v26 + 28)), *(void *)(v20 + *(int *)(v26 + 28) + 8));
    uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 95;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    uint64_t v60 = v48;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 95;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    uint64_t v60 = v49;
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    uint64_t v40 = v52;
    uint64_t v39 = v53;
    id v41 = v50;
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v50, *MEMORY[0x263F06E50], v53);
    sub_24A12625C();
    id v42 = v51;
    id v43 = v57;
    URL.appending<A>(component:directoryHint:)();
    sub_24A177790(v59, (void (*)(void))type metadata accessor for Credential);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
    swift_bridgeObjectRelease();
    uint64_t v44 = v54;
    uint64_t v45 = v43;
    uint64_t v46 = v55;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v55);
    sub_24A177790(v20, (void (*)(void))type metadata accessor for Asset);
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v7+ OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cachedDataURL, v42, v46);
    *(void *)(v7
              + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cacheState) = 0;
  }
  return v7;
}

uint64_t sub_24A179A10()
{
  uint64_t v2 = v0;
  v38[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for Asset(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_24A181260(0, (unint64_t *)&qword_26976C1B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v2+ OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cachedDataURL, v6);
  uint64_t v11 = (uint64_t)v9;
  id v12 = (id)v10;
  id v13 = sub_24A1877F4(v11);
  if (v1) {
    return (uint64_t)v12;
  }
  uint64_t v14 = v2 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_range;
  uint64_t v15 = *(void *)(v2
                  + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_range);
  if ((v15 & 0x8000000000000000) == 0)
  {
    v38[0] = 0;
    id v36 = v13;
    if (!objc_msgSend(v13, sel_seekToOffset_error_, v15, v38))
    {
      id v12 = v38[0];
      _convertNSErrorToError(_:)();

LABEL_10:
      swift_willThrow();

      return (uint64_t)v12;
    }
    uint64_t v35 = *(void *)(v14 + 8);
    if (__OFSUB__(v35, v15))
    {
      __break(1u);
    }
    else
    {
      id v16 = v38[0];
      uint64_t v17 = NSFileHandle.read(upToCount:)();
      if (v18 >> 60 != 15)
      {
        id v12 = (id)v17;

        return (uint64_t)v12;
      }
      if (qword_26976AAF0 == -1) {
        goto LABEL_7;
      }
    }
    swift_once();
LABEL_7:
    uint64_t v19 = type metadata accessor for Logger();
    sub_24A143E24(v19, (uint64_t)qword_26976C020);
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    id v12 = (id)v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      Swift::String v34 = (void *)swift_slowAlloc();
      v38[0] = v34;
      *(_DWORD *)uint64_t v22 = 136315650;
      os_log_t v33 = v20;
      v31[1] = v22 + 4;
      sub_24A17EB10(&qword_26976C1C0, MEMORY[0x263F06EA8]);
      int v32 = (int)v12;
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v37 = sub_24A14308C(v23, v24, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v25 = sub_24A181088();
      uint64_t v37 = sub_24A14308C(v25, v26, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v22 + 22) = 2080;
      sub_24A17EA10(v2 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, (uint64_t)v5, (void (*)(void))type metadata accessor for Asset);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v37 = sub_24A14308C(v27, v28, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      uint64_t v20 = v33;
      _os_log_impl(&dword_24A120000, v33, (os_log_type_t)v32, "read from %s for range %s of asset %s failed", (uint8_t *)v22, 0x20u);
      id v12 = v34;
      swift_arrayDestroy();
      MEMORY[0x24C5BDE90](v12, -1, -1);
      MEMORY[0x24C5BDE90](v22, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    sub_24A17EA6C();
    swift_allocError();
    *(void *)uint64_t v30 = 0xD000000000000027;
    *(void *)(v30 + 8) = 0x800000024A18D180;
    *(unsigned char *)(v30 + 16) = 2;
    goto LABEL_10;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_24A179F7C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_24A123464(&qword_26976C0D0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v4, 1, 1, v5);
  uint64_t v6 = sub_24A17EB10(&qword_26976C1A8, (void (*)(uint64_t))type metadata accessor for AssetStreamHandle.RangeReader);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v0;
  v7[3] = v6;
  v7[4] = v0;
  v7[5] = v1;
  swift_retain_n();
  return sub_24A1488C4((uint64_t)v4, (uint64_t)&unk_26976C1B0, (uint64_t)v7);
}

uint64_t sub_24A17A0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a1;
  v4[12] = a4;
  v4[13] = type metadata accessor for AssetDownloadResponse();
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  type metadata accessor for Credential(0);
  v4[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v4[23] = v7;
  v4[24] = *(void *)(v7 - 8);
  v4[25] = swift_task_alloc();
  v4[26] = type metadata accessor for Asset(0);
  v4[27] = swift_task_alloc();
  v4[28] = type metadata accessor for AssetDownloadRequest();
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A17A310, a4, 0);
}

uint64_t sub_24A17A310()
{
  uint64_t v49 = v0;
  v48[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[29];
  uint64_t v46 = v0[30];
  uint64_t v2 = v0[27];
  uint64_t v3 = (int *)v0[28];
  uint64_t v40 = v2;
  uint64_t v5 = v0[24];
  uint64_t v4 = v0[25];
  uint64_t v43 = v4;
  uint64_t v6 = (uint64_t *)v0[22];
  uint64_t v7 = v0[23];
  uint64_t v41 = v7;
  uint64_t v44 = v0[16];
  uint64_t v8 = v0[12];
  uint64_t v9 = OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset;
  v0[31] = OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset;
  uint64_t v37 = v8 + v9;
  sub_24A17EA10(v8 + v9, v2, (void (*)(void))type metadata accessor for Asset);
  uint64_t v10 = OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cachedDataURL;
  v0[32] = OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cachedDataURL;
  id v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v42(v4, v8 + v10, v7);
  sub_24A17EA10(v8 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_credential, (uint64_t)v6, (void (*)(void))type metadata accessor for Credential);
  uint64_t v11 = v8 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_range;
  uint64_t v12 = *(void *)(v8
                  + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_range);
  v0[33] = v12;
  uint64_t v13 = *(void *)(v11 + 8);
  v0[34] = v13;
  uint64_t v38 = *(void *)(v8
                  + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_applicationID
                  + 8);
  uint64_t v39 = *(void *)(v8
                  + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_applicationID);
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v14 = *v6;
  uint64_t v15 = v6[1];
  id v16 = (uint64_t *)(v1 + v3[5]);
  *id v16 = *v6;
  v16[1] = v15;
  swift_bridgeObjectRetain();
  sub_24A12D574(v14, v15);
  sub_24A17EA10(v40, v1 + v3[7], (void (*)(void))type metadata accessor for Asset);
  uint64_t v17 = v1 + v3[8];
  *(void *)uint64_t v17 = v12;
  *(void *)(v17 + 8) = v13;
  *(unsigned char *)(v17 + 16) = 0;
  v42(v1 + v3[9], v43, v41);
  sub_24A17EA10((uint64_t)v6, v1 + v3[10], (void (*)(void))type metadata accessor for Credential);
  unint64_t v18 = (void *)(v1 + v3[13]);
  *unint64_t v18 = v39;
  v18[1] = v38;
  *(_OWORD *)(v1 + v3[11]) = xmmword_24A190210;
  sub_24A1247EC();
  v19();
  sub_24A177790(v40, (void (*)(void))type metadata accessor for Asset);
  sub_24A177790((uint64_t)v6, (void (*)(void))type metadata accessor for Credential);
  *(_OWORD *)(v1 + v3[12]) = xmmword_24A190210;
  sub_24A1777E4(v1, v46, (void (*)(void))type metadata accessor for AssetDownloadRequest);
  uint64_t v20 = *(void (**)(void))(v44 + 16);
  v0[35] = v20;
  v0[36] = (v44 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  sub_24A1815C0();
  v20();
  if (qword_26976AAF0 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  v0[37] = sub_24A143E24(v21, (uint64_t)qword_26976C020);
  sub_24A1815C0();
  v20();
  swift_retain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v45 = v0[27];
    os_log_type_t v47 = v23;
    uint64_t v24 = v0[20];
    uint64_t v26 = v0[15];
    uint64_t v25 = v0[16];
    uint64_t v27 = sub_24A14448C();
    v48[0] = sub_24A1813E4();
    *(_DWORD *)uint64_t v27 = 136315650;
    sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_24A181378(v28, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(void (**)(void))(v25 + 8);
    ((void (*)(uint64_t, uint64_t))v30)(v24, v26);
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v31 = sub_24A181088();
    v0[9] = sub_24A181378(v31, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2080;
    sub_24A17EA10(v37, v45, (void (*)(void))type metadata accessor for Asset);
    uint64_t v33 = String.init<A>(describing:)();
    v0[10] = sub_24A14308C(v33, v34, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    sub_24A1815A8(&dword_24A120000, v22, v47, "[requestID = %s] start downloading range %s of asset %s");
    sub_24A18150C();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    uint64_t v30 = *(void (**)(void))(v0[16] + 8);
    sub_24A131348();
    v30();

    swift_release_n();
  }
  v0[38] = v30;
  if (qword_26976AAE8 != -1) {
    swift_once();
  }
  uint64_t v35 = (void *)swift_task_alloc();
  v0[39] = v35;
  void *v35 = v0;
  v35[1] = sub_24A17A924;
  return AssetManager.process(request:)();
}

uint64_t sub_24A17A924()
{
  sub_24A13A7E4();
  sub_24A181308();
  sub_24A154880();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 320) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 96);
  if (v0) {
    uint64_t v6 = sub_24A17B3D8;
  }
  else {
    uint64_t v6 = sub_24A17AA50;
  }
  return MEMORY[0x270FA2498](v6, v5, 0);
}

void sub_24A17AA50()
{
  v61[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 320);
  sub_24A181580();
  sub_24A18794C();
  uint64_t v2 = *(void *)(v0 + 112);
  if (!v1)
  {
    uint64_t v3 = v2 + *(int *)(*(void *)(v0 + 104) + 28);
    if (*(unsigned char *)(v3 + 16) == 1)
    {
      (*(void (**)(void, void, void))(v0 + 280))(*(void *)(v0 + 152), *(void *)(v0 + 168), *(void *)(v0 + 120));
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        v61[0] = sub_24A14448C();
        *(_DWORD *)uint64_t v6 = 136315138;
        sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
        uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 24) = sub_24A181378(v7, v8);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_24A181524();
        sub_24A131348();
        v9();
        _os_log_impl(&dword_24A120000, v4, v5, "[requestID = %s] missing range information in download response", v6, 0xCu);
        swift_arrayDestroy();
        sub_24A144474();
        sub_24A144474();
      }
      else
      {
        uint64_t v20 = sub_24A181524();
        v21(v20);
      }

      sub_24A181580();
      uint64_t v22 = self;
      id v23 = objc_msgSend(v22, sel_defaultManager);
      uint64_t countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
      uint64_t v25 = (void *)MEMORY[0x24C5BD1A0](countAndFlagsBits);
      swift_bridgeObjectRelease();
      unsigned int v26 = objc_msgSend(v23, sel_fileExistsAtPath_, v25);

      if (v26)
      {
        sub_24A181580();
        id v27 = objc_msgSend(v22, sel_defaultManager);
        URL._bridgeToObjectiveC()(v28);
        uint64_t v30 = v29;
        *(void *)(v0 + 16) = 0;
        unsigned int v31 = objc_msgSend(v27, sel_removeItemAtURL_error_, v29, v0 + 16);

        unint64_t v32 = *(void **)(v0 + 16);
        if (v31)
        {
          id v33 = v32;
        }
        else
        {
          id v48 = v32;
          uint64_t v49 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
        }
      }
      uint64_t v2 = *(void *)(v0 + 112);
      sub_24A17EA6C();
      swift_allocError();
      unint64_t v46 = 0xD00000000000002ELL;
      os_log_type_t v47 = "missing range information in download response";
    }
    else
    {
      uint64_t v10 = *(void (**)(void, uint64_t, uint64_t))(v0 + 280);
      uint64_t v11 = *(void *)(v0 + 168);
      uint64_t v12 = *(void *)(v0 + 120);
      if (*(void *)(v0 + 264) >= *(void *)v3 && *(void *)(v3 + 8) >= *(void *)(v0 + 272))
      {
        v10(*(void *)(v0 + 144), v11, v12);
        swift_retain_n();
        unint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.default.getter();
        BOOL v36 = os_log_type_enabled(v34, v35);
        uint64_t v37 = *(void (**)(void))(v0 + 304);
        if (v36)
        {
          uint64_t v60 = *(void *)(v0 + 216);
          uint64_t v59 = *(void *)(v0 + 96) + *(void *)(v0 + 248);
          uint64_t v38 = sub_24A14448C();
          v61[0] = sub_24A1813E4();
          *(_DWORD *)uint64_t v38 = 136315650;
          sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
          uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 32) = sub_24A1814F4(v39, v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_24A131348();
          v37();
          *(_WORD *)(v38 + 12) = 2080;
          uint64_t v41 = sub_24A181088();
          *(void *)(v0 + 40) = sub_24A14308C(v41, v42, v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 22) = 2080;
          sub_24A17EA10(v59, v60, (void (*)(void))type metadata accessor for Asset);
          uint64_t v43 = String.init<A>(describing:)();
          *(void *)(v0 + 48) = sub_24A14308C(v43, v44, v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24A120000, v34, v35, "[requestID = %s] downloaded range %s of asset %s", (uint8_t *)v38, 0x20u);
          swift_arrayDestroy();
          sub_24A144474();
          sub_24A144474();
        }
        else
        {
          sub_24A131348();
          v37();

          swift_release_n();
        }
        uint64_t v53 = sub_24A179A10();
        uint64_t v55 = v54;
        uint64_t v56 = *(void (**)(void))(v0 + 304);
        uint64_t v57 = *(void *)(v0 + 240);
        uint64_t v58 = *(uint64_t **)(v0 + 88);
        sub_24A177790(*(void *)(v0 + 112), (void (*)(void))type metadata accessor for AssetDownloadResponse);
        sub_24A131348();
        v56();
        sub_24A177790(v57, (void (*)(void))type metadata accessor for AssetDownloadRequest);
        *uint64_t v58 = v53;
        v58[1] = v55;
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        goto LABEL_24;
      }
      v10(*(void *)(v0 + 136), v11, v12);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        id v16 = (uint8_t *)swift_slowAlloc();
        v61[0] = sub_24A14448C();
        *(_DWORD *)id v16 = 136315138;
        sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
        uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 56) = sub_24A14308C(v17, v18, v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_24A131348();
        v19();
        _os_log_impl(&dword_24A120000, v14, v15, "[requestID = %s] downloaded range is smaller than needed range", v16, 0xCu);
        swift_arrayDestroy();
        sub_24A144474();
        sub_24A144474();
      }
      else
      {
        (*(void (**)(void, void))(v0 + 304))(*(void *)(v0 + 136), *(void *)(v0 + 120));
      }

      uint64_t v2 = *(void *)(v0 + 112);
      sub_24A17EA6C();
      swift_allocError();
      unint64_t v46 = 0xD00000000000002DLL;
      os_log_type_t v47 = "downloaded range is smaller than needed range";
    }
    *(void *)uint64_t v45 = v46;
    *(void *)(v45 + 8) = (unint64_t)(v47 - 32) | 0x8000000000000000;
    *(unsigned char *)(v45 + 16) = 2;
    swift_willThrow();
  }
  sub_24A177790(v2, (void (*)(void))type metadata accessor for AssetDownloadResponse);
  sub_24A1814D8();
  sub_24A1247EC();
  v50();
  sub_24A177790(v2, (void (*)(void))type metadata accessor for AssetDownloadRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
LABEL_24:
  sub_24A181540();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_24A17B3D8()
{
  sub_24A1814D8();
  sub_24A1247EC();
  v1();
  sub_24A177790(v0, (void (*)(void))type metadata accessor for AssetDownloadRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v2();
}

uint64_t sub_24A17B51C(uint64_t a1)
{
  v2[21] = a1;
  v2[22] = v1;
  v2[23] = type metadata accessor for Asset(0);
  v2[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A17B640, v1, 0);
}

uint64_t sub_24A17B640()
{
  uint64_t v72 = v0;
  uint64_t v2 = v0[22];
  uint64_t v3 = OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cacheState;
  uint64_t v4 = *(void *)(v2
                 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cacheState);
  v0[32] = v4;
  if (v4)
  {
    if (v4 == 1)
    {
      if (qword_26976AAF0 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_24A143E24(v5, (uint64_t)qword_26976C020);
      sub_24A1815C0();
      v6();
      swift_retain_n();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      BOOL v9 = os_log_type_enabled(v7, v8);
      uint64_t v10 = v0[26];
      if (v9)
      {
        uint64_t v65 = v0[24];
        os_log_type_t type = v8;
        uint64_t v11 = v0[22];
        uint64_t v12 = sub_24A14448C();
        uint64_t v71 = sub_24A1813E4();
        *(_DWORD *)uint64_t v12 = 136315650;
        sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
        uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[8] = sub_24A1814F4(v13, v14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_type_t v15 = *(void (**)(void))(v10 + 8);
        sub_24A1813D8();
        v15();
        *(_WORD *)(v12 + 12) = 2080;
        uint64_t v16 = sub_24A181088();
        v0[9] = sub_24A1814F4(v16, v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_24A181590();
        swift_bridgeObjectRelease();
        *(_WORD *)(v12 + 22) = 2080;
        sub_24A17EA10(v11 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, v65, (void (*)(void))type metadata accessor for Asset);
        uint64_t v18 = String.init<A>(describing:)();
        v0[10] = sub_24A1814F4(v18, v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_24A181590();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24A120000, v7, type, "[requestID = %s] range %s of asset %s available in cache", (uint8_t *)v12, 0x20u);
        sub_24A18150C();
        sub_24A144474();
        sub_24A144474();
      }
      else
      {
        uint64_t v54 = *(void (**)(void))(v10 + 8);
        sub_24A1813D8();
        v54();

        swift_release_n();
      }
      sub_24A179A10();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_24A181540();
      __asm { BRAA            X3, X16 }
    }
    uint64_t v36 = qword_26976AAF0;
    swift_retain();
    if (v36 != -1) {
      swift_once();
    }
    uint64_t v37 = v0[30];
    uint64_t v39 = v0[25];
    uint64_t v38 = v0[26];
    uint64_t v40 = v0[21];
    uint64_t v41 = type metadata accessor for Logger();
    v0[33] = sub_24A143E24(v41, (uint64_t)qword_26976C020);
    unint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
    v0[34] = v42;
    v0[35] = (v38 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v42(v37, v40, v39);
    swift_retain_n();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = v0[22];
      uint64_t v68 = v0[24];
      uint64_t v46 = sub_24A14448C();
      uint64_t v71 = sub_24A1813E4();
      *(_DWORD *)uint64_t v46 = 136315650;
      uint64_t v1 = (void (*)(uint64_t))(v46 + 4);
      sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[15] = sub_24A181378(v47, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v49 = sub_24A181568();
      ((void (*)(uint64_t))(v46 + 4))(v49);
      *(_WORD *)(v46 + 12) = 2080;
      uint64_t v50 = sub_24A181088();
      v0[16] = sub_24A181378(v50, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 22) = 2080;
      sub_24A17EA10(v45 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, v68, (void (*)(void))type metadata accessor for Asset);
      uint64_t v52 = String.init<A>(describing:)();
      v0[17] = sub_24A181378(v52, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A120000, v43, v44, "[requestID = %s] downloading range %s of asset %s", (uint8_t *)v46, 0x20u);
      sub_24A18150C();
      sub_24A144474();
      sub_24A144474();
    }
    else
    {
      uint64_t v56 = sub_24A181568();
      v1(v56);

      swift_release_n();
    }
    v0[36] = v1;
    uint64_t v57 = (void *)swift_task_alloc();
    v0[37] = v57;
    sub_24A123464(&qword_26976C190);
    *uint64_t v57 = v0;
    v57[1] = sub_24A17C2F4;
  }
  else
  {
    uint64_t v70 = v3;
    if (qword_26976AAF0 != -1) {
      swift_once();
    }
    uint64_t v20 = v0[21];
    uint64_t v21 = v0[31];
    uint64_t v23 = v0[25];
    uint64_t v22 = v0[26];
    uint64_t v24 = type metadata accessor for Logger();
    sub_24A143E24(v24, (uint64_t)qword_26976C020);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v20, v23);
    swift_retain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t typea = v0[24];
      uint64_t v69 = v2;
      uint64_t v27 = v0[22];
      uint64_t v28 = sub_24A14448C();
      uint64_t v71 = sub_24A1813E4();
      *(_DWORD *)uint64_t v28 = 136315650;
      sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[18] = sub_24A14308C(v29, v30, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_24A1813D8();
      v31();
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v32 = sub_24A181088();
      v0[19] = sub_24A181378(v32, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 22) = 2080;
      sub_24A17EA10(v27 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, typea, (void (*)(void))type metadata accessor for Asset);
      uint64_t v34 = String.init<A>(describing:)();
      v0[20] = sub_24A181378(v34, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v2 = v69;
      swift_release_n();
      swift_bridgeObjectRelease();
      sub_24A1815A8(&dword_24A120000, v25, v26, "[requestID = %s] ready to download range %s of asset (%s");
      sub_24A18150C();
      sub_24A144474();
      sub_24A144474();
    }
    else
    {
      sub_24A1813D8();
      v55();

      swift_release_n();
    }
    uint64_t v60 = sub_24A179F7C();
    v0[39] = v60;
    unint64_t v61 = *(void *)(v2 + v70);
    *(void *)(v2 + v70) = v60;
    swift_retain();
    sub_24A181078(v61);
    uint64_t v62 = (void *)swift_task_alloc();
    v0[40] = v62;
    sub_24A123464(&qword_26976C190);
    *uint64_t v62 = v0;
    v62[1] = sub_24A17C738;
  }
  sub_24A181540();
  return MEMORY[0x270FA1FA8]();
}

uint64_t sub_24A17C2F4()
{
  sub_24A13A7E4();
  sub_24A181308();
  sub_24A154880();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 304) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 176);
  if (v0) {
    uint64_t v6 = sub_24A17C8FC;
  }
  else {
    uint64_t v6 = sub_24A17C3F4;
  }
  return MEMORY[0x270FA2498](v6, v5, 0);
}

uint64_t sub_24A17C3F4()
{
  uint64_t v23 = v0;
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v21 = *(void *)(v0 + 32);
  (*(void (**)(void, void, void))(v0 + 272))(*(void *)(v0 + 232), *(void *)(v0 + 168), *(void *)(v0 + 200));
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v19 = *(void *)(v0 + 256);
    uint64_t v18 = *(void *)(v0 + 192);
    uint64_t v4 = *(void *)(v0 + 176);
    uint64_t v20 = v1;
    uint64_t v5 = sub_24A14448C();
    uint64_t v22 = sub_24A1813E4();
    *(_DWORD *)uint64_t v5 = 136315650;
    sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 96) = sub_24A14308C(v6, v7, &v22);
    sub_24A181524();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A131348();
    v8();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t v9 = sub_24A181088();
    *(void *)(v0 + 104) = sub_24A14308C(v9, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 22) = 2080;
    sub_24A17EA10(v4 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, v18, (void (*)(void))type metadata accessor for Asset);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 112) = sub_24A14308C(v11, v12, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    sub_24A1815A8(&dword_24A120000, v2, v3, "[requestID = %s] downloaded range %s of asset %s");
    sub_24A18150C();
    sub_24A144474();
    uint64_t v1 = v20;
    sub_24A144474();
    unint64_t v13 = v19;
  }
  else
  {
    unint64_t v14 = *(void *)(v0 + 256);
    sub_24A1247EC();
    v15();
    swift_release_n();
    unint64_t v13 = v14;
  }
  sub_24A181078(v13);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v16(v21, v1);
}

uint64_t sub_24A17C738()
{
  sub_24A13A7E4();
  sub_24A181308();
  sub_24A154880();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v2;
  *(void *)(v3 + 328) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 176);
  if (v0) {
    uint64_t v6 = sub_24A17C994;
  }
  else {
    uint64_t v6 = sub_24A17C838;
  }
  return MEMORY[0x270FA2498](v6, v5, 0);
}

uint64_t sub_24A17C838()
{
  swift_release();
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v2, v1);
}

uint64_t sub_24A17C8FC()
{
  sub_24A15547C();
  sub_24A181078(*(void *)(v0 + 256));
  sub_24A1815CC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v1();
}

uint64_t sub_24A17C994()
{
  sub_24A15547C();
  swift_release();
  sub_24A1815CC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A17CA2C()
{
  uint64_t v1 = v0;
  v18[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_defaultManager);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cachedDataURL;
  uint64_t countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
  uint64_t v6 = (void *)MEMORY[0x24C5BD1A0](countAndFlagsBits);
  swift_bridgeObjectRelease();
  unsigned int v7 = objc_msgSend(v3, sel_fileExistsAtPath_, v6);

  if (v7)
  {
    id v8 = objc_msgSend(v2, sel_defaultManager);
    URL._bridgeToObjectiveC()(v9);
    uint64_t v11 = v10;
    v18[0] = 0;
    unsigned int v12 = objc_msgSend(v8, sel_removeItemAtURL_error_, v10, v18);

    if (v12)
    {
      id v13 = v18[0];
    }
    else
    {
      id v14 = v18[0];
      os_log_type_t v15 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  sub_24A177790(v1 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, (void (*)(void))type metadata accessor for Asset);
  sub_24A177790(v1 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_credential, (void (*)(void))type metadata accessor for Credential);
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v4, v16);
  sub_24A181078(*(void *)(v1
                          + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cacheState));
  swift_defaultActor_destroy();
  return v1;
}

uint64_t sub_24A17CC3C()
{
  uint64_t v0 = sub_24A17CA2C();
  return MEMORY[0x270FA2418](v0);
}

uint64_t AssetStreamHandle.size.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Asset(0) + 24));
}

uint64_t AssetStreamHandle.range.getter()
{
  uint64_t result = type metadata accessor for Asset(0);
  if ((*(void *)(v0 + *(int *)(result + 24)) & 0x8000000000000000) == 0) {
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A17CCB8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result - result % 5242880;
  if (__OFSUB__(result, result % 5242880))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = a2 % 5242880;
  if (!(a2 % 5242880))
  {
LABEL_8:
    if (a2 >= v3) {
      return v3;
    }
    goto LABEL_11;
  }
  uint64_t v5 = a2 + 5242880;
  if (__OFADD__(a2, 5242880))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = v5 - v4;
  if (!__OFSUB__(v5, v4))
  {
    uint64_t result = type metadata accessor for Asset(0);
    if (*(void *)(v2 + *(int *)(result + 24)) >= v6) {
      a2 = v6;
    }
    else {
      a2 = *(void *)(v2 + *(int *)(result + 24));
    }
    goto LABEL_8;
  }
LABEL_13:
  __break(1u);
  return result;
}

char *sub_24A17CD44(uint64_t a1, uint64_t a2)
{
  if (a1 >= a2)
  {
    return (char *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v3 = a1;
    uint64_t result = sub_24A17EC34(0, 1, 1, MEMORY[0x263F8EE78]);
    uint64_t v5 = (uint64_t)result;
    while (1)
    {
      uint64_t v6 = v3 + 5242880;
      if (__OFADD__(v3, 5242880)) {
        break;
      }
      if (v6 >= a2) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = v3 + 5242880;
      }
      if (v7 < v3) {
        goto LABEL_15;
      }
      unint64_t v9 = *(void *)(v5 + 16);
      unint64_t v8 = *(void *)(v5 + 24);
      if (v9 >= v8 >> 1)
      {
        uint64_t result = sub_24A17EC34((char *)(v8 > 1), v9 + 1, 1, v5);
        uint64_t v5 = (uint64_t)result;
      }
      *(void *)(v5 + 16) = v9 + 1;
      uint64_t v10 = v5 + 16 * v9;
      *(void *)(v10 + 32) = v3;
      *(void *)(v10 + 40) = v7;
      v3 += 5242880;
      if (v6 >= a2) {
        return (char *)v5;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t AssetStreamHandle.inputStream(for:)()
{
  sub_24A13A7B8();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = type metadata accessor for AssetStreamHandle(0);
  void v1[6] = v5;
  sub_24A13A7A0(v5);
  v1[7] = v6;
  v1[8] = *(void *)(v7 + 64);
  v1[9] = swift_task_alloc();
  uint64_t v8 = sub_24A123464(&qword_26976C0D0);
  sub_24A1291B8(v8);
  v1[10] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v1[11] = v9;
  sub_24A13A7A0(v9);
  v1[12] = v10;
  v1[13] = *(void *)(v11 + 64);
  v1[14] = sub_24A154DE8();
  v1[15] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Credential(0);
  sub_24A13A7A0(v12);
  v1[16] = v13;
  v1[17] = *(void *)(v14 + 64);
  v1[18] = sub_24A154DE8();
  v1[19] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Asset(0);
  sub_24A13A7A0(v15);
  v1[20] = v16;
  v1[21] = *(void *)(v17 + 64);
  v1[22] = sub_24A154DE8();
  v1[23] = swift_task_alloc();
  uint64_t v18 = sub_24A123464(&qword_26976C0D8);
  v1[24] = v18;
  sub_24A13A7A0(v18);
  v1[25] = v19;
  v1[26] = swift_task_alloc();
  uint64_t v20 = sub_24A123464(&qword_26976C0E0);
  v1[27] = v20;
  sub_24A13A7A0(v20);
  v1[28] = v21;
  v1[29] = *(void *)(v22 + 64);
  v1[30] = sub_24A154DE8();
  v1[31] = swift_task_alloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v23, v24, v25);
}

uint64_t sub_24A17D024()
{
  uint64_t v44 = v0[31];
  uint64_t v47 = v0[30];
  uint64_t v38 = v0[28];
  uint64_t v1 = v0[26];
  uint64_t v46 = v0[27];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v41 = v0[23];
  uint64_t v48 = v0[22];
  uint64_t v33 = v0[21];
  uint64_t v28 = v0[20];
  uint64_t v40 = v0[19];
  uint64_t v49 = v0[18];
  uint64_t v32 = v0[17];
  uint64_t v29 = v0[16];
  uint64_t v39 = v0[15];
  uint64_t v43 = v0[14];
  uint64_t v35 = v0[13];
  uint64_t v25 = v0[12];
  uint64_t v42 = v0[11];
  uint64_t v34 = v0[10];
  uint64_t v4 = v0[9];
  uint64_t v45 = v4;
  uint64_t v5 = v0[6];
  uint64_t v26 = v0[7];
  uint64_t v27 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v37 = v0[4];
  uint64_t v36 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x263F8F680], v3);
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_24A17EA10(v6, v41, (void (*)(void))type metadata accessor for Asset);
  sub_24A17EA10(v6 + *(int *)(v5 + 20), v40, (void (*)(void))type metadata accessor for Credential);
  uint64_t v7 = (uint64_t *)(v6 + *(int *)(v5 + 28));
  uint64_t v30 = v7[1];
  uint64_t v31 = *v7;
  swift_bridgeObjectRetain();
  UUID.init()();
  type metadata accessor for TaskPriority();
  sub_24A18155C();
  _s11CloudAssets21UploadResponseMessageOwst_0(v8, v9, v10, v11);
  sub_24A17EA10(v6, v4, (void (*)(void))type metadata accessor for AssetStreamHandle);
  sub_24A17EA10(v41, v48, (void (*)(void))type metadata accessor for Asset);
  sub_24A17EA10(v40, v49, (void (*)(void))type metadata accessor for Credential);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v43, v39, v42);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v47, v44, v46);
  unint64_t v12 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v13 = (v27 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (*(unsigned __int8 *)(v28 + 80) + v13 + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  unint64_t v15 = (v33 + *(unsigned __int8 *)(v29 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v16 = (v32 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (*(unsigned __int8 *)(v25 + 80) + v16 + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  unint64_t v18 = (v35 + *(unsigned __int8 *)(v38 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  sub_24A1777E4(v45, v19 + v12, (void (*)(void))type metadata accessor for AssetStreamHandle);
  uint64_t v20 = (void *)(v19 + v13);
  *uint64_t v20 = v36;
  v20[1] = v37;
  sub_24A1777E4(v48, v19 + v14, (void (*)(void))type metadata accessor for Asset);
  sub_24A1777E4(v49, v19 + v15, (void (*)(void))type metadata accessor for Credential);
  uint64_t v21 = (void *)(v19 + v16);
  *uint64_t v21 = v31;
  v21[1] = v30;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 32))(v19 + v17, v43, v42);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32))(v19 + v18, v47, v46);
  sub_24A14242C(v34, (uint64_t)&unk_26976C0F0, v19);
  AsyncThrowingStream.Continuation.onTermination.setter();
  sub_24A1247EC();
  v22();
  sub_24A177790(v40, (void (*)(void))type metadata accessor for Credential);
  sub_24A177790(v41, (void (*)(void))type metadata accessor for Asset);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v44, v46);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v23();
}

uint64_t sub_24A17D550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 224) = v13;
  *(void *)(v8 + 232) = v14;
  *(_OWORD *)(v8 + 208) = v12;
  *(void *)(v8 + 192) = a7;
  *(void *)(v8 + 200) = a8;
  *(void *)(v8 + 176) = a5;
  *(void *)(v8 + 184) = a6;
  *(void *)(v8 + 168) = a4;
  uint64_t v9 = sub_24A123464((uint64_t *)&unk_26976C1C8);
  *(void *)(v8 + 240) = v9;
  *(void *)(v8 + 248) = *(void *)(v9 - 8);
  *(void *)(v8 + 256) = swift_task_alloc();
  type metadata accessor for Credential(0);
  *(void *)(v8 + 264) = swift_task_alloc();
  *(void *)(v8 + 272) = swift_task_alloc();
  *(void *)(v8 + 280) = type metadata accessor for Asset(0);
  *(void *)(v8 + 288) = swift_task_alloc();
  *(void *)(v8 + 296) = swift_task_alloc();
  *(void *)(v8 + 304) = swift_task_alloc();
  *(void *)(v8 + 312) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A17D6C4, 0, 0);
}

uint64_t sub_24A17D6C4()
{
  sub_24A15547C();
  uint64_t v1 = sub_24A17CCB8(*(void *)(v0 + 176), *(void *)(v0 + 184));
  uint64_t v3 = sub_24A17CD44(v1, v2);
  *(void *)(v0 + 320) = v3;
  uint64_t v4 = *((void *)v3 + 2);
  *(void *)(v0 + 328) = v4;
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v6 = *(int *)(type metadata accessor for AssetStreamHandle(0) + 32);
    *(_DWORD *)(v0 + 456) = v6;
    *(void *)(v0 + 336) = 0;
    *(void *)(v0 + 344) = 0;
    *(void *)(v0 + 352) = *((void *)v3 + 4);
    *(void *)(v0 + 360) = *((void *)v3 + 5);
    uint64_t v7 = *(void *)(v5 + v6);
    *(void *)(v0 + 368) = v7;
    return MEMORY[0x270FA2498](sub_24A17D814, v7, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 152) = 0;
    sub_24A123464(&qword_26976C0E0);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    sub_24A181358();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A13A7C4();
    return v8();
  }
}

uint64_t sub_24A17D814()
{
  sub_24A13A7B8();
  uint64_t v1 = *(void *)(v0 + 368);
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 112) + 16) && (sub_24A16117C(), (v2 & 1) != 0)) {
    uint64_t v3 = swift_retain();
  }
  else {
    uint64_t v3 = 0;
  }
  *(void *)(v0 + 376) = v3;
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v4, v5, v6);
}

uint64_t sub_24A17D8B4()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 200);
  sub_24A17EA10(*(void *)(v0 + 192), *(void *)(v0 + 312), (void (*)(void))type metadata accessor for Asset);
  sub_24A17EA10(v3, v2, (void (*)(void))type metadata accessor for Credential);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 376);
LABEL_3:
    uint64_t v5 = *(void *)(v0 + 312);
    sub_24A177790(*(void *)(v0 + 272), (void (*)(void))type metadata accessor for Credential);
    sub_24A177790(v5, (void (*)(void))type metadata accessor for Asset);
    *(void *)(v0 + 384) = v4;
    uint64_t v6 = *(void *)(*(void *)(v0 + 168) + *(int *)(v0 + 456));
    *(void *)(v0 + 392) = v6;
    return MEMORY[0x270FA2498](sub_24A17DDD8, v6, 0);
  }
  uint64_t v7 = *(void **)(v0 + 336);
  uint64_t v9 = *(void *)(v0 + 264);
  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v11 = *(void *)(v0 + 208);
  uint64_t v10 = *(char **)(v0 + 216);
  sub_24A17EA10(*(void *)(v0 + 312), *(void *)(v0 + 304), (void (*)(void))type metadata accessor for Asset);
  sub_24A17EA10(v8, v9, (void (*)(void))type metadata accessor for Credential);
  type metadata accessor for AssetStreamHandle.RangeReader(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_24A181530();
  uint64_t v15 = sub_24A17947C(v12, v13, v14, v9, v11, v10);
  if (!v7)
  {
    uint64_t v4 = v15;
    goto LABEL_3;
  }
  uint64_t v16 = *(void *)(v0 + 312);
  sub_24A177790(*(void *)(v0 + 272), (void (*)(void))type metadata accessor for Credential);
  sub_24A177790(v16, (void (*)(void))type metadata accessor for Asset);
  swift_bridgeObjectRelease();
  if (qword_26976AAE0 != -1) {
    swift_once();
  }
  uint64_t v17 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 192);
  uint64_t v19 = type metadata accessor for Logger();
  sub_24A143E24(v19, (uint64_t)qword_26976C000);
  sub_24A17EA10(v18, v17, (void (*)(void))type metadata accessor for Asset);
  id v20 = v7;
  id v21 = v7;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = *(void *)(v0 + 296);
  if (v24)
  {
    uint64_t v26 = *(void *)(v0 + 288);
    uint64_t v27 = sub_24A14448C();
    uint64_t v28 = (void *)swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315650;
    sub_24A17EA10(v25, v26, (void (*)(void))type metadata accessor for Asset);
    uint64_t v29 = String.init<A>(describing:)();
    *(void *)(v0 + 120) = sub_24A14308C(v29, v30, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A177790(v25, (void (*)(void))type metadata accessor for Asset);
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v31 = sub_24A181088();
    *(void *)(v0 + 136) = sub_24A14308C(v31, v32, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2112;
    id v33 = v7;
    uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
    sub_24A1815F8(v34);
    *uint64_t v28 = v34;

    _os_log_impl(&dword_24A120000, v22, v23, "failed to stream data for %s in range %s due to error %@", (uint8_t *)v27, 0x20u);
    sub_24A123464(&qword_26976B4E0);
    swift_arrayDestroy();
    sub_24A144474();
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    sub_24A177790(*(void *)(v0 + 296), (void (*)(void))type metadata accessor for Asset);
  }
  *(void *)(v0 + 128) = v7;
  sub_24A123464(&qword_26976C0E0);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A181358();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v35();
}

uint64_t sub_24A17DDD8()
{
  sub_24A13A7B8();
  uint64_t v1 = *(void *)(v0 + 392);
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 112) + 16)) {
    sub_24A16117C();
  }
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v2, v3, v4);
}

uint64_t sub_24A17DE80()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 168) + *(int *)(v0 + 456));
  *(void *)(v0 + 400) = v1;
  return MEMORY[0x270FA2498](sub_24A17DF88, v1, 0);
}

void sub_24A17DEA8()
{
  sub_24A13A7B8();
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[22];
  if (v1 > v2) {
    uint64_t v2 = v0[44];
  }
  BOOL v3 = __OFSUB__(v2, v1);
  uint64_t v4 = v2 - v1;
  v0[51] = v4;
  if (v3)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = v0[45];
  if (v5 >= v0[23]) {
    uint64_t v5 = v0[23];
  }
  BOOL v3 = __OFSUB__(v5, v1);
  uint64_t v6 = v5 - v1;
  v0[52] = v6;
  if (v3) {
    goto LABEL_12;
  }
  if (v6 < v4)
  {
LABEL_13:
    __break(1u);
    return;
  }
  uint64_t v7 = (void *)swift_task_alloc();
  v0[53] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_24A17E15C;
  uint64_t v8 = v0[28];
  sub_24A17B51C(v8);
}

uint64_t sub_24A17DF88()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 400) + 112);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v3 = *v1;
  *(void *)(v0 + 160) = *v1;
  *uint64_t v1 = 0x8000000000000000;
  unint64_t v4 = sub_24A16117C();
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = (v5 & 1) == 0;
  Swift::Int v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v10 = v4;
  char v11 = v5;
  sub_24A123464(&qword_26976C1D8);
  unint64_t v4 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    uint64_t v14 = *(void **)(v0 + 160);
    uint64_t v15 = *(void *)(v0 + 384);
    if (v11)
    {
      uint64_t v16 = v14[7];
      swift_release();
      *(void *)(v16 + 8 * v10) = v15;
      goto LABEL_12;
    }
    uint64_t v17 = v14[6];
    long long v18 = *(_OWORD *)(v0 + 352);
    v14[(v10 >> 6) + 8] |= 1 << v10;
    *(_OWORD *)(v17 + 16 * v10) = v18;
    *(void *)(v14[7] + 8 * v10) = v15;
    uint64_t v19 = v14[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      void v14[2] = v21;
LABEL_12:
      *uint64_t v1 = (uint64_t)v14;
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_24A1444BC();
      sub_24A154EA0();
      return MEMORY[0x270FA2498](v4, v5, v6);
    }
LABEL_16:
    __break(1u);
    return MEMORY[0x270FA2498](v4, v5, v6);
  }
  unint64_t v4 = sub_24A16117C();
  if ((v11 & 1) == (v5 & 1))
  {
    unint64_t v10 = v4;
    goto LABEL_8;
  }
  sub_24A123464(&qword_26976C050);
  sub_24A154EA0();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_24A17E15C()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v3 = v2;
  sub_24A154880();
  *unint64_t v4 = v3;
  *unint64_t v4 = *v1;
  v3[54] = v5;
  v3[55] = v6;
  v3[56] = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A17E24C()
{
  unint64_t v1 = *(void *)(v0 + 440);
  switch(v1 >> 62)
  {
    case 1uLL:
      int v3 = *(_DWORD *)(v0 + 432);
      int v4 = *(_DWORD *)(v0 + 436);
      BOOL v5 = __OFSUB__(v4, v3);
      LODWORD(v2) = v4 - v3;
      if (v5)
      {
        __break(1u);
LABEL_18:
        __break(1u);
        JUMPOUT(0x24A17E4D8);
      }
      uint64_t v2 = (int)v2;
LABEL_6:
      if (v2 < *(void *)(v0 + 416))
      {
LABEL_9:
        uint64_t v13 = *(void *)(v0 + 432);
        uint64_t v15 = *(void *)(v0 + 248);
        uint64_t v14 = *(void *)(v0 + 256);
        uint64_t v16 = *(void *)(v0 + 240);
        *(void *)(v0 + 88) = v13;
        *(void *)(v0 + 96) = v1;
        sub_24A1233B4(v13, v1);
        sub_24A123464(&qword_26976C0E0);
        AsyncThrowingStream.Continuation.yield(_:)();
        swift_release();
        sub_24A12340C(v13, v1);
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      }
      else
      {
LABEL_7:
        uint64_t v8 = *(void *)(v0 + 432);
        uint64_t v10 = *(void *)(v0 + 248);
        uint64_t v9 = *(void *)(v0 + 256);
        uint64_t v11 = *(void *)(v0 + 240);
        *(void *)(v0 + 104) = Data.subdata(in:)();
        *(void *)(v0 + 112) = v12;
        sub_24A123464(&qword_26976C0E0);
        AsyncThrowingStream.Continuation.yield(_:)();
        swift_release();
        sub_24A12340C(v8, v1);
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
      }
      uint64_t v17 = *(void *)(v0 + 344) + 1;
      if (v17 == *(void *)(v0 + 328))
      {
        swift_bridgeObjectRelease();
        *(void *)(v0 + 152) = 0;
        sub_24A123464(&qword_26976C0E0);
        AsyncThrowingStream.Continuation.finish(throwing:)();
        sub_24A181358();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_24A13A7C4();
        sub_24A154EA0();
        __asm { BRAA            X1, X16 }
      }
      *(void *)(v0 + 336) = *(void *)(v0 + 448);
      *(void *)(v0 + 344) = v17;
      uint64_t v20 = *(int *)(v0 + 456);
      uint64_t v21 = *(void *)(v0 + 168);
      uint64_t v22 = *(void *)(v0 + 320) + 16 * v17;
      *(void *)(v0 + 352) = *(void *)(v22 + 32);
      *(void *)(v0 + 360) = *(void *)(v22 + 40);
      *(void *)(v0 + 368) = *(void *)(v21 + v20);
      sub_24A154EA0();
      return MEMORY[0x270FA2498](v23, v24, v25);
    case 2uLL:
      uint64_t v6 = *(void *)(*(void *)(v0 + 432) + 16);
      uint64_t v7 = *(void *)(*(void *)(v0 + 432) + 24);
      BOOL v5 = __OFSUB__(v7, v6);
      uint64_t v2 = v7 - v6;
      if (!v5) {
        goto LABEL_6;
      }
      goto LABEL_18;
    case 3uLL:
      if (*(uint64_t *)(v0 + 416) > 0) {
        goto LABEL_9;
      }
      goto LABEL_7;
    default:
      uint64_t v2 = BYTE6(v1);
      goto LABEL_6;
  }
}

uint64_t sub_24A17E4E8()
{
  uint64_t v23 = v0;
  swift_release();
  unint64_t v1 = (void *)v0[56];
  if (qword_26976AAE0 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[24];
  uint64_t v4 = type metadata accessor for Logger();
  sub_24A143E24(v4, (uint64_t)qword_26976C000);
  sub_24A17EA10(v3, v2, (void (*)(void))type metadata accessor for Asset);
  id v5 = v1;
  id v6 = v1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[37];
  if (v9)
  {
    uint64_t v11 = v0[36];
    uint64_t v12 = sub_24A14448C();
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315650;
    sub_24A17EA10(v10, v11, (void (*)(void))type metadata accessor for Asset);
    uint64_t v14 = String.init<A>(describing:)();
    v0[15] = sub_24A14308C(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A177790(v10, (void (*)(void))type metadata accessor for Asset);
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v16 = sub_24A181088();
    v0[17] = sub_24A14308C(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2112;
    id v18 = v1;
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    sub_24A1815F8(v19);
    void *v13 = v19;

    _os_log_impl(&dword_24A120000, v7, v8, "failed to stream data for %s in range %s due to error %@", (uint8_t *)v12, 0x20u);
    sub_24A123464(&qword_26976B4E0);
    swift_arrayDestroy();
    sub_24A144474();
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
    sub_24A177790(v0[37], (void (*)(void))type metadata accessor for Asset);
  }
  v0[16] = v1;
  sub_24A123464(&qword_26976C0E0);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A181358();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v20();
}

void sub_24A17E85C()
{
}

uint64_t sub_24A17E884()
{
  return 0;
}

uint64_t sub_24A17E8A0()
{
  sub_24A13A7E4();
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_24A17E94C;
  return AssetStreamHandle.inputStream(for:)();
}

uint64_t sub_24A17E94C()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A154880();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A13A7C4();
  return v3();
}

uint64_t sub_24A17EA10(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A1247B0();
  sub_24A1815EC();
  v4();
  return a2;
}

unint64_t sub_24A17EA6C()
{
  unint64_t result = qword_26976C068;
  if (!qword_26976C068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C068);
  }
  return result;
}

uint64_t sub_24A17EAB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24A123464(a3);
  sub_24A1247B0();
  sub_24A1815EC();
  v4();
  return a2;
}

uint64_t sub_24A17EB10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_24A17EB58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, NSURL *a3@<X8>)
{
  uint64_t v4 = v3;
  URL._bridgeToObjectiveC()(a3);
  os_log_type_t v8 = v7;
  if (a2)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.Class isa = 0;
  }
  id v10 = objc_msgSend(v4, sel_initWithURL_options_, v8, v9.super.isa);

  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  return v10;
}

char *sub_24A17EC34(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_24A123464(&qword_26976C208);
    id v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    id v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  if (v5)
  {
    sub_24A1519E8((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_24A17ED24(0, v8, v12, a4);
  }
  return v10;
}

char *sub_24A17ED24(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    char v5 = (char *)(a4 + 16 * a1 + 32);
    unint64_t v6 = &__dst[16 * v4];
    if (v5 >= v6 || &v5[16 * v4] <= __dst)
    {
      memcpy(__dst, v5, 16 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_24A17EE18(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = a3;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v10[OBJC_IVAR____TtC11CloudAssets10PlayerItem_id], v9, v6);
  *(void *)&v10[OBJC_IVAR____TtC11CloudAssets10PlayerItem_resourceLoaderDelegate] = a2;
  swift_unknownObjectRetain();

  size_t v11 = (objc_class *)type metadata accessor for PlayerItem();
  v29.receiver = v10;
  v29.super_class = v11;
  id v12 = objc_msgSendSuper2(&v29, sel_initWithAsset_automaticallyLoadedAssetKeys_, a1, 0);
  uint64_t v13 = qword_26976AAF8;
  id v14 = v12;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_24A143E24(v15, (uint64_t)qword_26976C3F0);
  id v16 = v14;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    id v26 = a1;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v28 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    sub_24A17EB10((unint64_t *)&qword_26976B770, MEMORY[0x263F07508]);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v27 = sub_24A14308C(v22, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A120000, v17, v18, "initialize PlayerItem with id %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5BDE90](v21, -1, -1);
    MEMORY[0x24C5BDE90](v20, -1, -1);
  }
  else
  {
  }
  return v16;
}

id sub_24A17F120(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = type metadata accessor for UTType();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = sub_24A123464(&qword_26976B4A0);
  MEMORY[0x270FA5388](v8 - 8);
  id v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[3] = type metadata accessor for AssetStreamHandle(0);
  v21[4] = (uint64_t)&protocol witness table for AssetStreamHandle;
  size_t v11 = sub_24A1442BC(v21);
  sub_24A1777E4(a1, (uint64_t)v11, (void (*)(void))type metadata accessor for AssetStreamHandle);
  sub_24A144320((uint64_t)v21, (uint64_t)a4 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_assetStreamHandle);
  id v12 = a4;
  static UTType.data.getter();
  UTType.init(filenameExtension:conformingTo:)();
  sub_24A144384((uint64_t)v10, (uint64_t)&v12[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_type]);
  sub_24A181260(0, (unint64_t *)&qword_26976B510);
  sub_24A123464((uint64_t *)&unk_26976C210);
  sub_24A18129C();
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)();
  sub_24A123464(&qword_26976C220);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 24) = 0;
  *(void *)(v14 + 16) = v13;
  *(void *)&v12[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedTaskMapping] = v14;
  if (qword_26976AB00 != -1) {
    swift_once();
  }
  os_activity_t v15 = _os_activity_create(&dword_24A120000, "asset-streaming/loading-request-handler", (os_activity_t)qword_26976C4A0, OS_ACTIVITY_FLAG_DEFAULT);
  sub_24A123464((uint64_t *)&unk_26976B530);
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 24) = 0;
  *(void *)(v16 + 16) = v15;
  *(void *)&v12[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedActivity] = v16;

  v20.receiver = v12;
  v20.super_class = ObjectType;
  id v17 = objc_msgSendSuper2(&v20, sel_init);
  sub_24A123580((uint64_t)v21);
  return v17;
}

void sub_24A17F3AC(void *a1, uint64_t a2, uint64_t a3, void *a4, char *a5)
{
  *(void *)&a5[OBJC_IVAR____TtC11CloudAssets18AssetExportSession_delegate] = a4;
  swift_unknownObjectRetain();
  id v10 = (void *)MEMORY[0x24C5BD1A0](a2, a3);
  swift_bridgeObjectRelease();
  v12.receiver = a5;
  v12.super_class = (Class)type metadata accessor for AssetExportSession();
  id v11 = objc_msgSendSuper2(&v12, sel_initWithAsset_presetName_, a1, v10);

  if (v11)
  {
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_24A17F460()
{
  unint64_t result = qword_26976C098;
  if (!qword_26976C098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C098);
  }
  return result;
}

uint64_t sub_24A17F4AC()
{
  uint64_t v1 = *(void *)(type metadata accessor for AssetStreamHandle(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v38 = (v2 + 32) & ~v2;
  unint64_t v3 = (*(void *)(v1 + 64) + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (int *)(type metadata accessor for Asset(0) - 8);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v39 = (v3 + v5 + 16) & ~v5;
  uint64_t v6 = *(void *)(*(void *)v4 + 64);
  uint64_t v7 = type metadata accessor for Credential(0);
  sub_24A13A7A0(v7);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  unint64_t v41 = (*(void *)(v10 + 64) + ((v39 + v6 + v9) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for UUID();
  sub_24A12477C();
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = *(void *)(v13 + 64);
  sub_24A123464(&qword_26976C0E0);
  sub_24A12477C();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v19 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v42 = ((((v41 + v12 + 16) & ~v12) + v14 + v19) & ~v19) + *(void *)(v18 + 64);
  uint64_t v40 = v2 | v5 | v9 | v12 | v19 | 7;
  swift_unknownObjectRelease();
  uint64_t v20 = v0 + v38;
  type metadata accessor for URL();
  sub_24A1247B0();
  sub_24A131348();
  v22(v21);
  uint64_t v23 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(v20 + *(int *)(v23 + 24)), *(void *)(v20 + *(int *)(v23 + 24) + 8));
  sub_24A12340C(*(void *)(v20 + *(int *)(v23 + 28)), *(void *)(v20 + *(int *)(v23 + 28) + 8));
  uint64_t v24 = v0 + v38 + v4[7];
  sub_24A12340C(*(void *)v24, *(void *)(v24 + 8));
  sub_24A12340C(*(void *)(v24 + 16), *(void *)(v24 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_24A1247B0();
  id v26 = *(void (**)(uint64_t))(v25 + 8);
  sub_24A1813D8();
  v26(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v28 = v0 + v39;
  sub_24A131348();
  v30(v29);
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(v28 + *(int *)(v23 + 24)), *(void *)(v28 + *(int *)(v23 + 24) + 8));
  sub_24A12340C(*(void *)(v28 + *(int *)(v23 + 28)), *(void *)(v28 + *(int *)(v23 + 28) + 8));
  uint64_t v31 = v0 + v39 + v4[7];
  sub_24A12340C(*(void *)v31, *(void *)(v31 + 8));
  sub_24A12340C(*(void *)(v31 + 16), *(void *)(v31 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A1813D8();
  v26(v32);
  swift_bridgeObjectRelease();
  sub_24A1247EC();
  v34(v33);
  sub_24A1247EC();
  v36(v35);
  return MEMORY[0x270FA0238](v0, v42, v40);
}

uint64_t sub_24A17F8C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AssetStreamHandle(0);
  sub_24A13A7A0(v2);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (*(void *)(v5 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = type metadata accessor for Asset(0);
  sub_24A13A7A0(v7);
  unint64_t v9 = (v6 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = type metadata accessor for Credential(0);
  sub_24A13A7A0(v12);
  unint64_t v14 = (v9 + v11 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = type metadata accessor for UUID();
  sub_24A13A7A0(v15);
  sub_24A123464(&qword_26976C0E0);
  uint64_t v16 = *(void *)(v1 + 24);
  uint64_t v22 = *(void *)(v1 + 16);
  uint64_t v17 = v1 + v6;
  uint64_t v18 = *(void *)(v1 + v6);
  uint64_t v19 = *(void *)(v17 + 8);
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v23 + 16) = v20;
  *uint64_t v20 = v23;
  v20[1] = sub_24A17E94C;
  return sub_24A17D550(a1, v22, v16, v1 + v4, v18, v19, v1 + v9, v1 + v14);
}

void sub_24A17FAF8()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetStreamHandle(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v49 = *a2;
    *a1 = *a2;
    unint64_t v4 = (uint64_t *)(v49 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for Asset.ID(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (uint64_t *)((char *)v4 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = v8[6];
    unint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_24A1233B4(v16, v17);
    *unint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = v8[7];
    uint64_t v19 = (uint64_t *)((char *)v4 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    sub_24A1233B4(*v20, v22);
    *uint64_t v19 = v21;
    v19[1] = v22;
    uint64_t v23 = type metadata accessor for Asset(0);
    uint64_t v24 = *(int *)(v23 + 20);
    uint64_t v25 = (uint64_t *)((char *)v4 + v24);
    id v26 = (char *)a2 + v24;
    uint64_t v27 = *(uint64_t *)((char *)a2 + v24);
    unint64_t v28 = *(uint64_t *)((char *)a2 + v24 + 8);
    sub_24A1233B4(v27, v28);
    *uint64_t v25 = v27;
    v25[1] = v28;
    uint64_t v29 = *((void *)v26 + 2);
    unint64_t v30 = *((void *)v26 + 3);
    sub_24A1233B4(v29, v30);
    v25[2] = v29;
    v25[3] = v30;
    *(uint64_t *)((char *)v4 + *(int *)(v23 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v23 + 24));
    uint64_t v31 = a3[5];
    uint64_t v32 = (uint64_t *)((char *)v4 + v31);
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = *(uint64_t *)((char *)a2 + v31 + 8);
    *uint64_t v32 = *(uint64_t *)((char *)a2 + v31);
    v32[1] = v34;
    uint64_t v35 = *(uint64_t *)((char *)a2 + v31 + 24);
    v32[2] = *(uint64_t *)((char *)a2 + v31 + 16);
    v32[3] = v35;
    uint64_t v36 = *(uint64_t *)((char *)a2 + v31 + 40);
    v32[4] = *(uint64_t *)((char *)a2 + v31 + 32);
    v32[5] = v36;
    uint64_t v37 = *(int *)(type metadata accessor for Credential(0) + 28);
    unint64_t v51 = (char *)v32 + v37;
    uint64_t v38 = &v33[v37];
    uint64_t v39 = type metadata accessor for Date();
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40(v51, v38, v39);
    uint64_t v41 = a3[6];
    uint64_t v42 = a3[7];
    uint64_t v43 = (uint64_t *)((char *)v4 + v41);
    uint64_t v44 = (uint64_t *)((char *)a2 + v41);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = (uint64_t *)((char *)v4 + v42);
    uint64_t v47 = (uint64_t *)((char *)a2 + v42);
    uint64_t v48 = v47[1];
    void *v46 = *v47;
    v46[1] = v48;
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AssetStreamHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_24A12340C(*(void *)(a1 + *(int *)(v5 + 24)), *(void *)(a1 + *(int *)(v5 + 24) + 8));
  sub_24A12340C(*(void *)(a1 + *(int *)(v5 + 28)), *(void *)(a1 + *(int *)(v5 + 28) + 8));
  uint64_t v6 = a1 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_24A12340C(*(void *)v6, *(void *)(v6 + 8));
  sub_24A12340C(*(void *)(v6 + 16), *(void *)(v6 + 24));
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for AssetStreamHandle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = v7[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  unint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  swift_bridgeObjectRetain();
  sub_24A1233B4(v15, v16);
  uint64_t *v13 = v15;
  v13[1] = v16;
  uint64_t v17 = v7[7];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_24A1233B4(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = type metadata accessor for Asset(0);
  uint64_t v23 = *(int *)(v22 + 20);
  uint64_t v24 = (uint64_t *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void *)(a2 + v23);
  unint64_t v27 = *(void *)(a2 + v23 + 8);
  sub_24A1233B4(v26, v27);
  *uint64_t v24 = v26;
  v24[1] = v27;
  uint64_t v28 = *(void *)(v25 + 16);
  unint64_t v29 = *(void *)(v25 + 24);
  sub_24A1233B4(v28, v29);
  void v24[2] = v28;
  v24[3] = v29;
  *(void *)(a1 + *(int *)(v22 + 24)) = *(void *)(a2 + *(int *)(v22 + 24));
  uint64_t v30 = a3[5];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = a2 + v30;
  uint64_t v33 = *(void *)(a2 + v30 + 8);
  *uint64_t v31 = *(void *)(a2 + v30);
  v31[1] = v33;
  uint64_t v34 = *(void *)(a2 + v30 + 24);
  void v31[2] = *(void *)(a2 + v30 + 16);
  void v31[3] = v34;
  uint64_t v35 = *(void *)(a2 + v30 + 40);
  v31[4] = *(void *)(a2 + v30 + 32);
  v31[5] = v35;
  uint64_t v36 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v37 = (char *)v31 + v36;
  uint64_t v38 = v32 + v36;
  uint64_t v39 = type metadata accessor for Date();
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40(v37, v38, v39);
  uint64_t v41 = a3[6];
  uint64_t v42 = a3[7];
  uint64_t v43 = (void *)(a1 + v41);
  uint64_t v44 = (void *)(a2 + v41);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  uint64_t v46 = (void *)(a1 + v42);
  uint64_t v47 = (void *)(a2 + v42);
  uint64_t v48 = v47[1];
  void *v46 = *v47;
  v46[1] = v48;
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AssetStreamHandle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = v7[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_24A1233B4(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_24A12340C(v16, v17);
  uint64_t v18 = v7[7];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_24A1233B4(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  *uint64_t v19 = v21;
  v19[1] = v22;
  sub_24A12340C(v23, v24);
  uint64_t v25 = type metadata accessor for Asset(0);
  uint64_t v26 = *(int *)(v25 + 20);
  unint64_t v27 = (uint64_t *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)(a2 + v26);
  unint64_t v30 = *(void *)(a2 + v26 + 8);
  sub_24A1233B4(v29, v30);
  uint64_t v31 = *v27;
  unint64_t v32 = v27[1];
  *unint64_t v27 = v29;
  v27[1] = v30;
  sub_24A12340C(v31, v32);
  uint64_t v33 = *(void *)(v28 + 16);
  unint64_t v34 = *(void *)(v28 + 24);
  sub_24A1233B4(v33, v34);
  uint64_t v35 = v27[2];
  unint64_t v36 = v27[3];
  v27[2] = v33;
  v27[3] = v34;
  sub_24A12340C(v35, v36);
  *(void *)(a1 + *(int *)(v25 + 24)) = *(void *)(a2 + *(int *)(v25 + 24));
  uint64_t v37 = a3[5];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (void *)(a2 + v37);
  *uint64_t v38 = *(void *)(a2 + v37);
  v38[1] = *(void *)(a2 + v37 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v38[2] = v39[2];
  v38[3] = v39[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38[4] = v39[4];
  v38[5] = v39[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v41 = (char *)v38 + v40;
  uint64_t v42 = (char *)v39 + v40;
  uint64_t v43 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 24))(v41, v42, v43);
  uint64_t v44 = a3[6];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = (void *)(a2 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[7];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (void *)(a2 + v47);
  *uint64_t v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AssetStreamHandle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  uint64_t v8 = type metadata accessor for Asset(0);
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v10 = (_OWORD *)(a1 + v9);
  uint64_t v11 = (_OWORD *)(a2 + v9);
  long long v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  *(void *)(a1 + *(int *)(v8 + 24)) = *(void *)(a2 + *(int *)(v8 + 24));
  uint64_t v13 = a3[5];
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = a2 + v13;
  long long v16 = *(_OWORD *)(a2 + v13 + 16);
  *uint64_t v14 = *(_OWORD *)(a2 + v13);
  v14[1] = v16;
  void v14[2] = *(_OWORD *)(a2 + v13 + 32);
  uint64_t v17 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v18 = (char *)v14 + v17;
  uint64_t v19 = v15 + v17;
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  uint64_t v21 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for AssetStreamHandle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = v7[6];
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_24A12340C(v14, v15);
  uint64_t v16 = v7[7];
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_24A12340C(v17, v18);
  uint64_t v19 = type metadata accessor for Asset(0);
  uint64_t v20 = *(int *)(v19 + 20);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = *(void *)(a1 + v20);
  unint64_t v24 = *(void *)(a1 + v20 + 8);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  sub_24A12340C(v23, v24);
  uint64_t v25 = *(void *)(v21 + 16);
  unint64_t v26 = *(void *)(v21 + 24);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
  sub_24A12340C(v25, v26);
  *(void *)(a1 + *(int *)(v19 + 24)) = *(void *)(a2 + *(int *)(v19 + 24));
  uint64_t v27 = a3[5];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = *(void *)(a2 + v27 + 8);
  *uint64_t v28 = *(void *)(a2 + v27);
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v31 = v29[3];
  v28[2] = v29[2];
  v28[3] = v31;
  swift_bridgeObjectRelease();
  uint64_t v32 = v29[5];
  v28[4] = v29[4];
  v28[5] = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(int *)(type metadata accessor for Credential(0) + 28);
  unint64_t v34 = (char *)v28 + v33;
  uint64_t v35 = (char *)v29 + v33;
  uint64_t v36 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 40))(v34, v35, v36);
  uint64_t v37 = a3[6];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *uint64_t v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[7];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (uint64_t *)(a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  *uint64_t v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetStreamHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1806D0);
}

uint64_t sub_24A1806D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Asset(0);
  sub_24A124798();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_5:
    return _s11CloudAssets21UploadResponseMessageOwet_0(v9, a2, v8);
  }
  type metadata accessor for Credential(0);
  sub_24A124798();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetStreamHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A18079C);
}

void sub_24A18079C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Asset(0);
  sub_24A124798();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for Credential(0);
    sub_24A124798();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }
  _s11CloudAssets21UploadResponseMessageOwst_0(v11, a2, a2, v10);
}

uint64_t sub_24A180850()
{
  uint64_t result = type metadata accessor for Asset(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Credential(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_24A180930()
{
  return type metadata accessor for AssetStreamHandle.RangeReader(0);
}

uint64_t sub_24A180938()
{
  uint64_t result = type metadata accessor for Asset(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Credential(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for URL();
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetStreamHandle.RangeReader.CacheState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for AssetStreamHandle.RangeReader.CacheState(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for AssetStreamHandle.RangeReader.CacheState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for AssetStreamHandle.RangeReader.CacheState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetStreamHandle.RangeReader.CacheState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AssetStreamHandle.RangeReader.CacheState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_24A180C50(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_24A180C68(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AssetStreamHandle.RangeReader.CacheState()
{
  return &type metadata for AssetStreamHandle.RangeReader.CacheState;
}

unsigned char *storeEnumTagSinglePayload for AssetStreamHandle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A180D64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetStreamHandle.CodingKeys()
{
  return &type metadata for AssetStreamHandle.CodingKeys;
}

uint64_t sub_24A180DA0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for AssetStreamHandle.Error(uint64_t a1)
{
  return sub_24A180DC8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_24A180DC8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s11CloudAssets17AssetStreamHandleV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_24A180DA0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AssetStreamHandle.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_24A180DA0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_24A180DC8(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for AssetStreamHandle.Error(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AssetStreamHandle.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_24A180DC8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetStreamHandle.Error(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetStreamHandle.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24A180F64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_24A180F6C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AssetStreamHandle.Error()
{
  return &type metadata for AssetStreamHandle.Error;
}

unint64_t sub_24A180F8C()
{
  unint64_t result = qword_26976C178;
  if (!qword_26976C178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C178);
  }
  return result;
}

unint64_t sub_24A180FDC()
{
  unint64_t result = qword_26976C180;
  if (!qword_26976C180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C180);
  }
  return result;
}

unint64_t sub_24A18102C()
{
  unint64_t result = qword_26976C188;
  if (!qword_26976C188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C188);
  }
  return result;
}

unint64_t sub_24A181078(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_24A181088()
{
  _print_unlocked<A, B>(_:_:)();
  v0._uint64_t countAndFlagsBits = 3943982;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t sub_24A181120()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_24A181160()
{
  sub_24A15547C();
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_24A17E94C;
  return sub_24A17A0BC(v3, v4, v5, v6);
}

uint64_t sub_24A18121C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A123538(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A181260(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_24A18129C()
{
  unint64_t result = qword_26976B520;
  if (!qword_26976B520)
  {
    sub_24A181260(255, (unint64_t *)&qword_26976B510);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B520);
  }
  return result;
}

uint64_t sub_24A181320@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_24A181340()
{
  return *(void *)(v0 - 120);
}

uint64_t sub_24A181358()
{
  return swift_task_dealloc();
}

uint64_t sub_24A181378(uint64_t a1, unint64_t a2)
{
  return sub_24A14308C(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_24A181390()
{
  return 0x712D65646F636564;
}

void sub_24A1813B4()
{
  *(void *)(v0 - 96) = 0x6D61657274736B63;
  *(void *)(v0 - 88) = 0xEB000000002F2F3ALL;
}

uint64_t sub_24A1813E4()
{
  return swift_slowAlloc();
}

uint64_t sub_24A1813FC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_24A18141C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_24A18143C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_24A18145C()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_24A181478()
{
  return type metadata accessor for CloudAssets_AssetStreamHandle(0);
}

uint64_t sub_24A1814A0()
{
  return 0;
}

uint64_t sub_24A1814BC()
{
  return 0;
}

uint64_t sub_24A1814F4(uint64_t a1, unint64_t a2)
{
  return sub_24A14308C(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_24A18150C()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A181524()
{
  return v0;
}

uint64_t sub_24A181530()
{
  return v0;
}

uint64_t sub_24A181568()
{
  return v0;
}

uint64_t sub_24A181590()
{
  return swift_release_n();
}

void sub_24A1815A8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x20u);
}

uint64_t sub_24A1815CC()
{
  return swift_task_dealloc();
}

uint64_t sub_24A1815F8(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A181618@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  type metadata accessor for Date();
  sub_24A12477C();
  uint64_t v24 = v6;
  uint64_t v25 = v5;
  MEMORY[0x270FA5388](v5);
  sub_24A129204();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_24A123464(&qword_26976AE48);
  MEMORY[0x270FA5388](v10 - 8);
  sub_24A1292CC();
  uint64_t v11 = type metadata accessor for Google_Protobuf_Timestamp();
  sub_24A12477C();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  sub_24A129204();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = a1[1];
  *(void *)a2 = *a1;
  *((void *)a2 + 1) = v18;
  uint64_t v19 = a1[3];
  *((void *)a2 + 2) = a1[2];
  *((void *)a2 + 3) = v19;
  uint64_t v20 = a1[5];
  *((void *)a2 + 4) = a1[4];
  *((void *)a2 + 5) = v20;
  uint64_t v21 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A182FB0((uint64_t)a1 + *(int *)(v21 + 32), v2);
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v2, 1, v11) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Google_Protobuf_Timestamp.init()();
    sub_24A182408(v2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v17, v2, v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  Google_Protobuf_Timestamp.date.getter();
  sub_24A182468((uint64_t)a1);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v11);
  uint64_t v22 = type metadata accessor for Credential(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 32))(&a2[*(int *)(v22 + 28)], v9, v25);
}

uint64_t static Credential.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v6 = a1[4] == a2[4] && a1[5] == a2[5];
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for Credential(0);
  return static Date.== infix(_:_:)();
}

uint64_t type metadata accessor for Credential(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976C248);
}

uint64_t Credential.Builder.__allocating_init(tenantName:requestorID:accessToken:)()
{
  sub_24A18304C();
  uint64_t v0 = swift_allocObject();
  Credential.Builder.init(tenantName:requestorID:accessToken:)();
  return v0;
}

uint64_t Credential.Builder.build()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[3];
  *a1 = v1[2];
  a1[1] = v3;
  uint64_t v4 = v1[5];
  a1[2] = v1[4];
  a1[3] = v4;
  BOOL v5 = (char *)v1 + OBJC_IVAR____TtCV11CloudAssets10Credential7Builder_expirationDate;
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  a1[4] = v6;
  a1[5] = v7;
  swift_beginAccess();
  uint64_t v8 = (char *)a1 + *(int *)(type metadata accessor for Credential(0) + 28);
  type metadata accessor for Date();
  sub_24A1247B0();
  (*(void (**)(char *, char *))(v9 + 16))(v8, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void *Credential.Builder.init(tenantName:requestorID:accessToken:)()
{
  sub_24A18304C();
  uint64_t v8 = type metadata accessor for Date();
  sub_24A12477C();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  sub_24A13FF60();
  v1[2] = v6;
  v1[3] = v5;
  void v1[6] = v2;
  v1[7] = v0;
  v1[4] = v4;
  v1[5] = v3;
  static Date.distantFuture.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((uint64_t)v1 + OBJC_IVAR____TtCV11CloudAssets10Credential7Builder_expirationDate, v7, v8);
  return v1;
}

uint64_t Credential.Builder.setExpirationDate(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCV11CloudAssets10Credential7Builder_expirationDate;
  swift_beginAccess();
  type metadata accessor for Date();
  sub_24A1247B0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, a1);
  swift_endAccess();
  return swift_retain();
}

uint64_t Credential.Builder.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV11CloudAssets10Credential7Builder_expirationDate;
  type metadata accessor for Date();
  sub_24A1247B0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  return v0;
}

uint64_t Credential.Builder.__deallocating_deinit()
{
  Credential.Builder.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_24A181C58(uint64_t a1)
{
  unint64_t v2 = sub_24A18208C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A181C94(uint64_t a1)
{
  unint64_t v2 = sub_24A18208C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Credential.tenantName.getter()
{
  return sub_24A1291AC();
}

uint64_t Credential.requestorID.getter()
{
  return sub_24A1291AC();
}

uint64_t Credential.accessToken.getter()
{
  return sub_24A1291AC();
}

uint64_t Credential.expirationDate.getter()
{
  sub_24A183018();
  sub_24A1247B0();
  uint64_t v0 = sub_24A1291AC();
  return v1(v0);
}

uint64_t Credential.init(accessToken:expiryDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0x616C506572616853;
  a4[1] = 0xE900000000000079;
  a4[2] = 0;
  a4[3] = 0xE000000000000000;
  a4[4] = a1;
  a4[5] = a2;
  sub_24A183018();
  sub_24A1247B0();
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 32);
  return v8(a4, a3, v6);
}

uint64_t Credential.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v4 - 8);
  sub_24A124810();
  type metadata accessor for CloudAssets_Credential(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v5);
  sub_24A129204();
  uint64_t v8 = (void *)(v7 - v6);
  sub_24A123464(&qword_26976C228);
  sub_24A12477C();
  MEMORY[0x270FA5388](v9);
  sub_24A1292CC();
  sub_24A1234A8(a1, a1[3]);
  sub_24A18208C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_24A1262F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BinaryDecodingOptions.init()();
    sub_24A182580(&qword_26976BD98, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    sub_24A181618(v8, a2);
    uint64_t v11 = sub_24A183068();
    v12(v11);
  }
  return sub_24A123580((uint64_t)a1);
}

unint64_t sub_24A18208C()
{
  unint64_t result = qword_26976C230;
  if (!qword_26976C230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C230);
  }
  return result;
}

uint64_t Credential.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for Date();
  sub_24A12477C();
  uint64_t v31 = v6;
  uint64_t v32 = v5;
  MEMORY[0x270FA5388](v5);
  sub_24A124810();
  uint64_t v30 = v7;
  uint64_t v8 = type metadata accessor for Google_Protobuf_Timestamp();
  sub_24A12477C();
  uint64_t v33 = v9;
  MEMORY[0x270FA5388](v10);
  sub_24A129204();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v15);
  sub_24A129204();
  uint64_t v18 = (void *)(v17 - v16);
  sub_24A123464(&qword_26976C238);
  sub_24A12477C();
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  MEMORY[0x270FA5388](v19);
  sub_24A13FF60();
  sub_24A1234A8(a1, a1[3]);
  sub_24A18208C();
  uint64_t v34 = v2;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  UnknownStorage.init()();
  uint64_t v21 = (uint64_t)v18 + *(int *)(v14 + 32);
  _s11CloudAssets21UploadResponseMessageOwst_0(v21, 1, 1, v8);
  uint64_t v22 = v3[1];
  *uint64_t v18 = *v3;
  v18[1] = v22;
  uint64_t v23 = v3[3];
  id v18[2] = v3[2];
  void v18[3] = v23;
  uint64_t v24 = v3[5];
  v18[4] = v3[4];
  v18[5] = v24;
  uint64_t v25 = (char *)v3 + *(int *)(type metadata accessor for Credential(0) + 28);
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v30, v25, v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Google_Protobuf_Timestamp.init(date:)();
  sub_24A182408(v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v21, v13, v8);
  _s11CloudAssets21UploadResponseMessageOwst_0(v21, 0, 1, v8);
  sub_24A182580(&qword_26976BD98, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
  uint64_t v26 = Message.serializedData(partial:)();
  unint64_t v28 = v27;
  sub_24A182468((uint64_t)v18);
  if (!v37)
  {
    sub_24A12638C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A12340C(v26, v28);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
}

uint64_t sub_24A182408(uint64_t a1)
{
  uint64_t v2 = sub_24A123464(&qword_26976AE48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A182468(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudAssets_Credential(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Credential.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_24A182580(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int Credential.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_24A182610()
{
  return Hasher._finalize()();
}

uint64_t sub_24A18264C()
{
  return sub_24A182580(&qword_26976C240, (void (*)(uint64_t))type metadata accessor for Credential);
}

uint64_t sub_24A182694@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Credential.init(from:)(a1, a2);
}

uint64_t sub_24A1826AC(void *a1)
{
  return Credential.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Credential(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for Credential(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for Credential(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

void *assignWithCopy for Credential(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for Credential(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for Credential(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A182B40);
}

uint64_t sub_24A182B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    return _s11CloudAssets21UploadResponseMessageOwet_0(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Credential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A182BDC);
}

uint64_t sub_24A182BDC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = v5 + *(int *)(a4 + 28);
    return _s11CloudAssets21UploadResponseMessageOwst_0(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_24A182C5C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A182CF8()
{
  return type metadata accessor for Credential.Builder(0);
}

uint64_t type metadata accessor for Credential.Builder(uint64_t a1)
{
  return sub_24A128920(a1, (uint64_t *)&unk_26976C258);
}

uint64_t sub_24A182D20()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for Credential.Builder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Credential.Builder);
}

uint64_t dispatch thunk of Credential.Builder.__allocating_init(tenantName:requestorID:accessToken:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unsigned char *storeEnumTagSinglePayload for Credential.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A182E88);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Credential.CodingKeys()
{
  return &type metadata for Credential.CodingKeys;
}

unint64_t sub_24A182EC4()
{
  unint64_t result = qword_26976C268;
  if (!qword_26976C268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C268);
  }
  return result;
}

unint64_t sub_24A182F14()
{
  unint64_t result = qword_26976C270;
  if (!qword_26976C270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C270);
  }
  return result;
}

unint64_t sub_24A182F64()
{
  unint64_t result = qword_26976C278;
  if (!qword_26976C278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C278);
  }
  return result;
}

uint64_t sub_24A182FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A123464(&qword_26976AE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A183018()
{
  type metadata accessor for Credential(0);
  return type metadata accessor for Date();
}

uint64_t sub_24A183068()
{
  return v0;
}

uint64_t sub_24A183080()
{
  return String.hash(into:)();
}

uint64_t AssetUploadRequest.id.getter()
{
  type metadata accessor for UUID();
  sub_24A1247B0();
  uint64_t v0 = sub_24A1291AC();
  return v1(v0);
}

uint64_t AssetUploadRequest.tenantName.getter()
{
  return sub_24A1291AC();
}

uint64_t type metadata accessor for AssetUploadRequest()
{
  uint64_t result = qword_26976C2C0;
  if (!qword_26976C2C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AssetUploadRequest.tenantName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AssetUploadRequest() + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AssetUploadRequest.tenantName.modify())()
{
  return nullsub_1;
}

uint64_t AssetUploadRequest.workingDirectory.getter()
{
  sub_24A185E6C();
  sub_24A185E90();
  sub_24A1247B0();
  uint64_t v0 = sub_24A1291AC();
  return v1(v0);
}

uint64_t AssetUploadRequest.workingDirectory.setter(uint64_t a1)
{
  type metadata accessor for AssetUploadRequest();
  sub_24A185E90();
  sub_24A1247B0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  return v5(v1, a1, v3);
}

uint64_t (*AssetUploadRequest.workingDirectory.modify())()
{
  return nullsub_1;
}

uint64_t AssetUploadRequest.fileURL.getter()
{
  sub_24A185E6C();
  sub_24A185E90();
  sub_24A1247B0();
  uint64_t v0 = sub_24A1291AC();
  return v1(v0);
}

uint64_t AssetUploadRequest.storageLocation.getter()
{
  sub_24A185E6C();
  sub_24A185E90();
  sub_24A1247B0();
  uint64_t v0 = sub_24A1291AC();
  return v1(v0);
}

uint64_t AssetUploadRequest.protector.getter()
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(sub_24A185E6C() + 36));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  unint64_t v6 = v2[3];
  *uint64_t v0 = *v2;
  v0[1] = v4;
  v0[2] = v5;
  v0[3] = v6;
  sub_24A1233B4(v3, v4);
  return sub_24A1233B4(v5, v6);
}

uint64_t AssetUploadRequest.credential.getter()
{
  uint64_t v2 = sub_24A185E6C();
  return sub_24A184ABC(v1 + *(int *)(v2 + 40), v0, (void (*)(void))type metadata accessor for Credential);
}

uint64_t AssetUploadRequest.init(fileURL:storageLocation:protector:credential:)@<X0>(long long *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  long long v13 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  UUID.init()();
  uint64_t v6 = type metadata accessor for AssetUploadRequest();
  sub_24A1292A8();
  *uint64_t v7 = 0x616C506572616853;
  v7[1] = 0xE900000000000079;
  sub_24A12D574(0x616C506572616853, 0xE900000000000079);
  type metadata accessor for URL();
  sub_24A1247B0();
  uint64_t v9 = *(void (**)(void))(v8 + 32);
  sub_24A185E84();
  v9();
  sub_24A185E84();
  v9();
  uint64_t v10 = a3 + *(int *)(v6 + 36);
  *(_OWORD *)uint64_t v10 = v13;
  *(void *)(v10 + 16) = v4;
  *(void *)(v10 + 24) = v5;
  uint64_t v11 = a3 + *(int *)(v6 + 40);
  return sub_24A1835A4(a2, v11);
}

uint64_t sub_24A1835A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Credential(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AssetUploadRequest.init(tenantName:fileURL:storageLocation:protector:credential:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  long long v17 = *a3;
  uint64_t v8 = *((void *)a3 + 2);
  uint64_t v9 = *((void *)a3 + 3);
  UUID.init()();
  uint64_t v10 = type metadata accessor for AssetUploadRequest();
  sub_24A1292A8();
  *uint64_t v11 = a1;
  v11[1] = a2;
  swift_bridgeObjectRetain();
  sub_24A12D574(a1, a2);
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  sub_24A1247B0();
  long long v13 = *(void (**)(void))(v12 + 32);
  sub_24A185E84();
  v13();
  sub_24A185E84();
  v13();
  uint64_t v14 = a5 + *(int *)(v10 + 36);
  *(_OWORD *)uint64_t v14 = v17;
  *(void *)(v14 + 16) = v8;
  *(void *)(v14 + 24) = v9;
  uint64_t v15 = a5 + *(int *)(v10 + 40);
  return sub_24A1835A4(a4, v15);
}

uint64_t AssetUploadRequest.hash(into:)()
{
  type metadata accessor for UUID();
  sub_24A184C90(&qword_26976AC40, MEMORY[0x263F07508]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for AssetUploadRequest();
  sub_24A1292A8();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  sub_24A184C90(&qword_26976AC48, MEMORY[0x263F06EA8]);
  sub_24A185E50();
  sub_24A185E50();
  sub_24A185E50();
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(v1 + 36));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  unint64_t v6 = v2[3];
  sub_24A1233B4(*v2, v4);
  Data.hash(into:)();
  sub_24A12340C(v3, v4);
  sub_24A1233B4(v5, v6);
  Data.hash(into:)();
  sub_24A12340C(v5, v6);
  return Credential.hash(into:)();
}

uint64_t static AssetUploadRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  unint64_t v4 = (int *)type metadata accessor for AssetUploadRequest();
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (MEMORY[0x24C5BCC70](a1 + v4[6], a2 + v4[6]) & 1) == 0
    || (MEMORY[0x24C5BCC70](a1 + v4[7], a2 + v4[7]) & 1) == 0
    || (MEMORY[0x24C5BCC70](a1 + v4[8], a2 + v4[8]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v10 = v4[9];
  uint64_t v11 = *(void *)(a1 + v10);
  unint64_t v12 = *(void *)(a1 + v10 + 8);
  uint64_t v13 = *(void *)(a1 + v10 + 16);
  unint64_t v14 = *(void *)(a1 + v10 + 24);
  uint64_t v15 = (uint64_t *)(a2 + v10);
  uint64_t v17 = *v15;
  unint64_t v16 = v15[1];
  uint64_t v18 = v15[2];
  unint64_t v22 = v15[3];
  sub_24A1233B4(v11, v12);
  sub_24A1233B4(v13, v14);
  sub_24A1233B4(v17, v16);
  sub_24A1233B4(v18, v22);
  if ((MEMORY[0x24C5BCD30](v11, v12, v17, v16) & 1) == 0)
  {
    sub_24A12340C(v17, v16);
    sub_24A12340C(v18, v22);
    sub_24A12340C(v11, v12);
    sub_24A12340C(v13, v14);
    return 0;
  }
  char v21 = MEMORY[0x24C5BCD30](v13, v14, v18, v22);
  sub_24A12340C(v17, v16);
  sub_24A12340C(v18, v22);
  sub_24A12340C(v11, v12);
  sub_24A12340C(v13, v14);
  if ((v21 & 1) == 0) {
    return 0;
  }
  uint64_t v19 = v4[10];
  return static Credential.== infix(_:_:)((void *)(a1 + v19), (void *)(a2 + v19));
}

uint64_t sub_24A183AD0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x614E746E616E6574 && a2 == 0xEA0000000000656DLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x800000024A18C3F0 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x4C5255656C6966 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x4C656761726F7473 && a2 == 0xEF6E6F697461636FLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x6F746365746F7270 && a2 == 0xE900000000000072;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0x69746E6564657263 && a2 == 0xEA00000000006C61)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v11) {
              return 6;
            }
            else {
              return 7;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_24A183DC4()
{
  return 7;
}

unint64_t sub_24A183DCC(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614E746E616E6574;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x4C5255656C6966;
      break;
    case 4:
      unint64_t result = 0x4C656761726F7473;
      break;
    case 5:
      unint64_t result = 0x6F746365746F7270;
      break;
    case 6:
      unint64_t result = 0x69746E6564657263;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_24A183EC8()
{
  return sub_24A183DCC(*v0);
}

uint64_t sub_24A183ED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A183AD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A183EF8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A183DC4();
  *a1 = result;
  return result;
}

uint64_t sub_24A183F20(uint64_t a1)
{
  unint64_t v2 = sub_24A184294();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A183F5C(uint64_t a1)
{
  unint64_t v2 = sub_24A184294();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AssetUploadRequest.encode(to:)(void *a1)
{
  uint64_t v3 = sub_24A123464(&qword_26976C280);
  sub_24A12477C();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_24A129204();
  uint64_t v9 = v8 - v7;
  sub_24A1234A8(a1, a1[3]);
  sub_24A184294();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_24A184C90(&qword_26976AC60, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AssetUploadRequest();
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for URL();
    sub_24A184C90(&qword_26976AC68, MEMORY[0x263F06EA8]);
    sub_24A185E2C();
    sub_24A185E2C();
    sub_24A185E2C();
    sub_24A1842E0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for Credential(0);
    sub_24A184C90(&qword_26976AEF0, (void (*)(uint64_t))type metadata accessor for Credential);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t sub_24A184294()
{
  unint64_t result = qword_26976C288;
  if (!qword_26976C288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C288);
  }
  return result;
}

unint64_t sub_24A1842E0()
{
  unint64_t result = qword_26976C290;
  if (!qword_26976C290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C290);
  }
  return result;
}

Swift::Int AssetUploadRequest.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t AssetUploadRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v48 = type metadata accessor for Credential(0);
  sub_24A1247B0();
  MEMORY[0x270FA5388](v3);
  sub_24A124810();
  uint64_t v50 = v4;
  uint64_t v57 = type metadata accessor for URL();
  sub_24A12477C();
  uint64_t v54 = v5;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  unint64_t v12 = (char *)v46 - v11;
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)v46 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  sub_24A12477C();
  uint64_t v53 = v16;
  MEMORY[0x270FA5388](v17);
  sub_24A129204();
  uint64_t v20 = v19 - v18;
  uint64_t v52 = sub_24A123464(&qword_26976C298);
  sub_24A12477C();
  uint64_t v49 = v21;
  MEMORY[0x270FA5388](v22);
  sub_24A129204();
  uint64_t v25 = v24 - v23;
  uint64_t v60 = (int *)type metadata accessor for AssetUploadRequest();
  sub_24A1247B0();
  MEMORY[0x270FA5388](v26);
  sub_24A124810();
  uint64_t v59 = v27;
  uint64_t v28 = a1[3];
  uint64_t v56 = a1;
  sub_24A1234A8(a1, v28);
  sub_24A184294();
  uint64_t v55 = v25;
  uint64_t v29 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v51 = v15;
  if (v29) {
    return sub_24A123580((uint64_t)v56);
  }
  uint64_t v30 = v12;
  uint64_t v58 = v9;
  uint64_t v31 = v50;
  LOBYTE(v61) = 0;
  sub_24A184C90(&qword_26976AC80, MEMORY[0x263F07508]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v32 = v15;
  uint64_t v33 = v59;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v59, v20, v32);
  LOBYTE(v61) = 1;
  uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v35 = (uint64_t *)(v33 + v60[5]);
  uint64_t *v35 = v34;
  v35[1] = v36;
  LOBYTE(v61) = 2;
  sub_24A184C90(&qword_26976AC90, MEMORY[0x263F06EA8]);
  uint64_t v37 = v57;
  sub_24A185E04();
  uint64_t v38 = v59 + v60[6];
  v46[0] = *(void *)(v54 + 32);
  v46[1] = v54 + 32;
  ((void (*)(uint64_t, char *, uint64_t))v46[0])(v38, v14, v37);
  LOBYTE(v61) = 3;
  sub_24A185E04();
  uint64_t v39 = (void (*)(uint64_t, char *, uint64_t))v46[0];
  ((void (*)(uint64_t, char *, uint64_t))v46[0])(v59 + v60[7], v30, v37);
  LOBYTE(v61) = 4;
  sub_24A185E04();
  uint64_t v40 = v59;
  v39(v59 + v60[8], v58, v37);
  char v63 = 5;
  sub_24A184A70();
  sub_24A185EA8();
  uint64_t v41 = (_OWORD *)(v40 + v60[9]);
  long long v42 = v62;
  *uint64_t v41 = v61;
  v41[1] = v42;
  LOBYTE(v61) = 6;
  sub_24A184C90(&qword_26976C0C0, (void (*)(uint64_t))type metadata accessor for Credential);
  sub_24A185EA8();
  uint64_t v43 = sub_24A185DEC();
  v44(v43);
  sub_24A1835A4(v31, v40 + v60[10]);
  sub_24A184ABC(v40, v47, (void (*)(void))type metadata accessor for AssetUploadRequest);
  sub_24A123580((uint64_t)v56);
  return sub_24A184B18(v40);
}

Swift::Int sub_24A184A34()
{
  return Hasher._finalize()();
}

unint64_t sub_24A184A70()
{
  unint64_t result = qword_26976C2A0;
  if (!qword_26976C2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C2A0);
  }
  return result;
}

uint64_t sub_24A184ABC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A1247B0();
  uint64_t v4 = sub_24A1291AC();
  v5(v4);
  return a2;
}

uint64_t sub_24A184B18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AssetUploadRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A184B74(void *a1)
{
  a1[1] = sub_24A184C90(&qword_26976BA00, (void (*)(uint64_t))type metadata accessor for AssetUploadRequest);
  a1[2] = sub_24A184C90(&qword_26976B9D0, (void (*)(uint64_t))type metadata accessor for AssetUploadRequest);
  a1[3] = sub_24A184C90(&qword_26976C2A8, (void (*)(uint64_t))type metadata accessor for AssetUploadRequest);
  uint64_t result = sub_24A184C90(&qword_26976C2B0, (void (*)(uint64_t))type metadata accessor for AssetUploadRequest);
  a1[4] = result;
  return result;
}

uint64_t sub_24A184C48()
{
  return sub_24A184C90(&qword_26976C2B8, (void (*)(uint64_t))type metadata accessor for AssetUploadRequest);
}

uint64_t sub_24A184C90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A184CD8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetUploadRequest.init(from:)(a1, a2);
}

uint64_t sub_24A184CF0(void *a1)
{
  return AssetUploadRequest.encode(to:)(a1);
}

uint64_t sub_24A184D08()
{
  return sub_24A184C90(&qword_26976AC40, MEMORY[0x263F07508]);
}

char *initializeBufferWithCopyOfBuffer for AssetUploadRequest(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = &a1[v8];
    uint64_t v11 = &a2[v8];
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    uint64_t v13 = &a1[v9];
    unint64_t v14 = &a2[v9];
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    v16(&a1[a3[7]], &a2[a3[7]], v15);
    v16(&a1[a3[8]], &a2[a3[8]], v15);
    uint64_t v17 = a3[9];
    uint64_t v18 = (uint64_t *)&a1[v17];
    uint64_t v19 = &a2[v17];
    uint64_t v20 = *(void *)&a2[v17];
    unint64_t v21 = *(void *)&a2[v17 + 8];
    sub_24A1233B4(v20, v21);
    *uint64_t v18 = v20;
    v18[1] = v21;
    uint64_t v22 = *((void *)v19 + 2);
    unint64_t v23 = *((void *)v19 + 3);
    sub_24A1233B4(v22, v23);
    id v18[2] = v22;
    void v18[3] = v23;
    uint64_t v24 = a3[10];
    uint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    uint64_t v27 = *(void *)&a2[v24];
    uint64_t v28 = *((void *)v26 + 1);
    *(void *)uint64_t v25 = v27;
    *((void *)v25 + 1) = v28;
    uint64_t v29 = *((void *)v26 + 3);
    *((void *)v25 + 2) = *((void *)v26 + 2);
    *((void *)v25 + 3) = v29;
    uint64_t v30 = *((void *)v26 + 5);
    *((void *)v25 + 4) = *((void *)v26 + 4);
    *((void *)v25 + 5) = v30;
    uint64_t v31 = *(int *)(type metadata accessor for Credential(0) + 28);
    uint64_t v32 = &v25[v31];
    uint64_t v33 = &v26[v31];
    uint64_t v34 = type metadata accessor for Date();
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v32, v33, v34);
  }
  return a1;
}

uint64_t destroy for AssetUploadRequest(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + a2[7], v6);
  v7(a1 + a2[8], v6);
  uint64_t v8 = a1 + a2[9];
  sub_24A12340C(*(void *)v8, *(void *)(v8 + 8));
  sub_24A12340C(*(void *)(v8 + 16), *(void *)(v8 + 24));
  uint64_t v9 = a1 + a2[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v9 + *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  return v12(v10, v11);
}

uint64_t initializeWithCopy for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  v15(a1 + a3[8], a2 + a3[8], v14);
  uint64_t v16 = a3[9];
  uint64_t v17 = (uint64_t *)(a1 + v16);
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(a2 + v16);
  unint64_t v20 = *(void *)(a2 + v16 + 8);
  sub_24A1233B4(v19, v20);
  *uint64_t v17 = v19;
  v17[1] = v20;
  uint64_t v21 = *(void *)(v18 + 16);
  unint64_t v22 = *(void *)(v18 + 24);
  sub_24A1233B4(v21, v22);
  v17[2] = v21;
  void v17[3] = v22;
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = *(void *)(a2 + v23);
  uint64_t v27 = v25[1];
  *uint64_t v24 = v26;
  v24[1] = v27;
  uint64_t v28 = v25[3];
  void v24[2] = v25[2];
  v24[3] = v28;
  uint64_t v29 = v25[5];
  v24[4] = v25[4];
  v24[5] = v29;
  uint64_t v30 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v31 = (char *)v24 + v30;
  uint64_t v32 = (char *)v25 + v30;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34(v31, v32, v33);
  return a1;
}

uint64_t assignWithCopy for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14(a1 + a3[7], a2 + a3[7], v13);
  v14(a1 + a3[8], a2 + a3[8], v13);
  uint64_t v15 = a3[9];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = a2 + v15;
  uint64_t v18 = *(void *)(a2 + v15);
  unint64_t v19 = *(void *)(a2 + v15 + 8);
  sub_24A1233B4(v18, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  *uint64_t v16 = v18;
  v16[1] = v19;
  sub_24A12340C(v20, v21);
  uint64_t v22 = *(void *)(v17 + 16);
  unint64_t v23 = *(void *)(v17 + 24);
  sub_24A1233B4(v22, v23);
  uint64_t v24 = v16[2];
  unint64_t v25 = v16[3];
  v16[2] = v22;
  v16[3] = v23;
  sub_24A12340C(v24, v25);
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  *uint64_t v27 = *(void *)(a2 + v26);
  v27[1] = *(void *)(a2 + v26 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27[2] = v28[2];
  v27[3] = v28[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27[4] = v28[4];
  v27[5] = v28[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v30 = (char *)v27 + v29;
  uint64_t v31 = (char *)v28 + v29;
  uint64_t v32 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 24))(v30, v31, v32);
  return a1;
}

uint64_t initializeWithTake for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(a1 + a3[7], a2 + a3[7], v10);
  v11(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v12 = a3[9];
  uint64_t v13 = a3[10];
  uint64_t v14 = (_OWORD *)(a1 + v12);
  uint64_t v15 = (_OWORD *)(a2 + v12);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (_OWORD *)(a1 + v13);
  uint64_t v18 = a2 + v13;
  long long v19 = *(_OWORD *)(a2 + v13 + 16);
  *uint64_t v17 = *(_OWORD *)(a2 + v13);
  v17[1] = v19;
  v17[2] = *(_OWORD *)(a2 + v13 + 32);
  uint64_t v20 = *(int *)(type metadata accessor for Credential(0) + 28);
  unint64_t v21 = (char *)v17 + v20;
  uint64_t v22 = v18 + v20;
  uint64_t v23 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

uint64_t assignWithTake for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for URL();
  long long v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v16(a1 + a3[8], a2 + a3[8], v15);
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)(a1 + v17);
  unint64_t v21 = *(void *)(a1 + v17 + 8);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  sub_24A12340C(v20, v21);
  uint64_t v22 = *(void *)(v18 + 16);
  unint64_t v23 = *(void *)(v18 + 24);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
  sub_24A12340C(v22, v23);
  uint64_t v24 = a3[10];
  unint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  uint64_t v27 = *(void *)(a2 + v24 + 8);
  *unint64_t v25 = *(void *)(a2 + v24);
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = v26[3];
  v25[2] = v26[2];
  v25[3] = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = v26[5];
  v25[4] = v26[4];
  uint64_t v25[5] = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v31 = (char *)v25 + v30;
  uint64_t v32 = (char *)v26 + v30;
  uint64_t v33 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 40))(v31, v32, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetUploadRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A185898);
}

uint64_t sub_24A185898(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for UUID();
  sub_24A124798();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_11:
    return _s11CloudAssets21UploadResponseMessageOwet_0(v9, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    type metadata accessor for URL();
    sub_24A124798();
    if (*(_DWORD *)(v13 + 84) == a2)
    {
      uint64_t v8 = v12;
      uint64_t v14 = a3[6];
    }
    else
    {
      uint64_t v8 = type metadata accessor for Credential(0);
      uint64_t v14 = a3[10];
    }
    uint64_t v9 = a1 + v14;
    goto LABEL_11;
  }
  unint64_t v10 = *(void *)(a1 + a3[5] + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetUploadRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A185984);
}

void sub_24A185984(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for UUID();
  sub_24A124798();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[5] + 8) = (a2 - 1);
      return;
    }
    type metadata accessor for URL();
    sub_24A124798();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[6];
    }
    else
    {
      uint64_t v10 = type metadata accessor for Credential(0);
      uint64_t v14 = a4[10];
    }
    uint64_t v11 = a1 + v14;
  }
  _s11CloudAssets21UploadResponseMessageOwst_0(v11, a2, a2, v10);
}

uint64_t sub_24A185A58()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Credential(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssetUploadRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetUploadRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A185CC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetUploadRequest.CodingKeys()
{
  return &type metadata for AssetUploadRequest.CodingKeys;
}

unint64_t sub_24A185D00()
{
  unint64_t result = qword_26976C2D0;
  if (!qword_26976C2D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C2D0);
  }
  return result;
}

unint64_t sub_24A185D50()
{
  unint64_t result = qword_26976C2D8;
  if (!qword_26976C2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C2D8);
  }
  return result;
}

unint64_t sub_24A185DA0()
{
  unint64_t result = qword_26976C2E0;
  if (!qword_26976C2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C2E0);
  }
  return result;
}

uint64_t sub_24A185DEC()
{
  return *(void *)(v0 - 176);
}

uint64_t sub_24A185E04()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_24A185E2C()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_24A185E50()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_24A185E6C()
{
  return type metadata accessor for AssetUploadRequest();
}

uint64_t sub_24A185E90()
{
  return type metadata accessor for URL();
}

uint64_t sub_24A185EA8()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

BOOL static XPCError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void XPCError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_24A185F08(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x800000024A18D260
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x636552726F727265 && a2 == 0xED00006465766965;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x800000024A18D280 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v6 = a1 == 0x456E776F6E6B6E75 && a2 == 0xEF746E696F70646ELL;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0x6C616E7265746E69 && a2 == 0xED0000726F727245)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v8) {
          return 4;
        }
        else {
          return 5;
        }
      }
    }
  }
}

uint64_t sub_24A186180()
{
  return 5;
}

unint64_t sub_24A186188(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x636552726F727265;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x456E776F6E6B6E75;
      break;
    case 4:
      unint64_t result = 0x6C616E7265746E69;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_24A18626C()
{
  return sub_24A186188(*v0);
}

uint64_t sub_24A186274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A185F08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A18629C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A186180();
  *a1 = result;
  return result;
}

uint64_t sub_24A1862C4(uint64_t a1)
{
  unint64_t v2 = sub_24A186944();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A186300(uint64_t a1)
{
  unint64_t v2 = sub_24A186944();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A18633C(uint64_t a1)
{
  unint64_t v2 = sub_24A186A28();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A186378(uint64_t a1)
{
  unint64_t v2 = sub_24A186A28();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A1863B4(uint64_t a1)
{
  unint64_t v2 = sub_24A186A74();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A1863F0(uint64_t a1)
{
  unint64_t v2 = sub_24A186A74();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A18642C(uint64_t a1)
{
  unint64_t v2 = sub_24A186AC0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A186468(uint64_t a1)
{
  unint64_t v2 = sub_24A186AC0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A1864A4(uint64_t a1)
{
  unint64_t v2 = sub_24A186990();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A1864E0(uint64_t a1)
{
  unint64_t v2 = sub_24A186990();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A18651C(uint64_t a1)
{
  unint64_t v2 = sub_24A1869DC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A186558(uint64_t a1)
{
  unint64_t v2 = sub_24A1869DC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t XPCError.encode(to:)(void *a1)
{
  sub_24A123464(&qword_26976C2E8);
  sub_24A12477C();
  MEMORY[0x270FA5388](v3);
  sub_24A1877B4(v4, v15);
  sub_24A123464(&qword_26976C2F0);
  sub_24A12477C();
  MEMORY[0x270FA5388](v5);
  sub_24A124810();
  sub_24A123464(&qword_26976C2F8);
  sub_24A12477C();
  MEMORY[0x270FA5388](v6);
  sub_24A124810();
  sub_24A123464(&qword_26976C300);
  sub_24A12477C();
  MEMORY[0x270FA5388](v7);
  sub_24A129204();
  sub_24A123464(&qword_26976C308);
  sub_24A12477C();
  MEMORY[0x270FA5388](v8);
  sub_24A129204();
  sub_24A123464(&qword_26976C310);
  sub_24A12477C();
  MEMORY[0x270FA5388](v9);
  sub_24A129204();
  uint64_t v10 = *v1;
  sub_24A1234A8(a1, a1[3]);
  sub_24A186944();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v10)
  {
    case 1:
      sub_24A186A74();
      sub_24A187794();
      goto LABEL_8;
    case 2:
      sub_24A186A28();
      sub_24A187794();
      goto LABEL_7;
    case 3:
      sub_24A1869DC();
      sub_24A187794();
      goto LABEL_7;
    case 4:
      sub_24A186990();
      sub_24A187794();
LABEL_7:
      sub_24A1877E8();
LABEL_8:
      sub_24A1247EC();
      v12();
      break;
    default:
      sub_24A186AC0();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_24A1247EC();
      v11();
      break;
  }
  sub_24A1247EC();
  return v13();
}

unint64_t sub_24A186944()
{
  unint64_t result = qword_26976C318;
  if (!qword_26976C318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C318);
  }
  return result;
}

unint64_t sub_24A186990()
{
  unint64_t result = qword_26976C320;
  if (!qword_26976C320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C320);
  }
  return result;
}

unint64_t sub_24A1869DC()
{
  unint64_t result = qword_26976C328;
  if (!qword_26976C328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C328);
  }
  return result;
}

unint64_t sub_24A186A28()
{
  unint64_t result = qword_26976C330;
  if (!qword_26976C330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C330);
  }
  return result;
}

unint64_t sub_24A186A74()
{
  unint64_t result = qword_26976C338;
  if (!qword_26976C338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C338);
  }
  return result;
}

unint64_t sub_24A186AC0()
{
  unint64_t result = qword_26976C340;
  if (!qword_26976C340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C340);
  }
  return result;
}

Swift::Int XPCError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t XPCError.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_24A123464(&qword_26976C348);
  sub_24A12477C();
  MEMORY[0x270FA5388](v3);
  sub_24A124810();
  sub_24A123464(&qword_26976C350);
  sub_24A12477C();
  MEMORY[0x270FA5388](v4);
  sub_24A1877B4(v5, v33);
  sub_24A123464(&qword_26976C358);
  sub_24A12477C();
  MEMORY[0x270FA5388](v6);
  sub_24A124810();
  sub_24A123464(&qword_26976C360);
  sub_24A12477C();
  MEMORY[0x270FA5388](v7);
  sub_24A129204();
  sub_24A123464(&qword_26976C368);
  sub_24A12477C();
  MEMORY[0x270FA5388](v8);
  sub_24A129204();
  uint64_t v9 = sub_24A123464(&qword_26976C370);
  sub_24A12477C();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_24A129204();
  uint64_t v15 = v14 - v13;
  uint64_t v36 = (uint64_t)a1;
  sub_24A1234A8(a1, a1[3]);
  sub_24A186944();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v37) {
    return sub_24A123580(v36);
  }
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
    uint64_t v25 = v15;
LABEL_9:
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    sub_24A123464(&qword_26976B008);
    *uint64_t v28 = &type metadata for XPCError;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x263F8DCB0], v26);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v25, v9);
    return sub_24A123580(v36);
  }
  uint64_t v34 = v9;
  uint64_t v18 = v15;
  uint64_t v19 = *(unsigned __int8 *)(v16 + 32);
  sub_24A139204(1, v17, v16, v16 + 32, 0, (2 * v17) | 1);
  uint64_t v21 = v20;
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  if (v21 != v23 >> 1)
  {
    uint64_t v25 = v18;
    uint64_t v9 = v34;
    goto LABEL_9;
  }
  switch(v19)
  {
    case 1:
      uint64_t v24 = a2;
      sub_24A186A74();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      goto LABEL_6;
    case 2:
      uint64_t v24 = a2;
      sub_24A186A28();
      sub_24A187774();
      goto LABEL_6;
    case 3:
      uint64_t v24 = a2;
      sub_24A1869DC();
      sub_24A187774();
      goto LABEL_6;
    case 4:
      uint64_t v24 = a2;
      sub_24A186990();
      sub_24A187774();
      sub_24A1877E8();
      goto LABEL_15;
    default:
      uint64_t v24 = a2;
      sub_24A186AC0();
      sub_24A187774();
LABEL_6:
      sub_24A1877E8();
LABEL_15:
      sub_24A1247EC();
      v30();
      swift_unknownObjectRelease();
      uint64_t v31 = sub_24A1877D0();
      v32(v31);
      *uint64_t v24 = v19;
      uint64_t result = sub_24A123580((uint64_t)a1);
      break;
  }
  return result;
}

uint64_t sub_24A1870EC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return XPCError.init(from:)(a1, a2);
}

uint64_t sub_24A187104(void *a1)
{
  return XPCError.encode(to:)(a1);
}

unint64_t sub_24A187120()
{
  unint64_t result = qword_26976C378;
  if (!qword_26976C378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C378);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCError()
{
  return &type metadata for XPCError;
}

uint64_t _s11CloudAssets8XPCErrorOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s11CloudAssets8XPCErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A1872D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCError.CodingKeys()
{
  return &type metadata for XPCError.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.InitializationFailureCodingKeys()
{
  return &type metadata for XPCError.InitializationFailureCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.ErrorReceivedCodingKeys()
{
  return &type metadata for XPCError.ErrorReceivedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.CorruptedMessageCodingKeys()
{
  return &type metadata for XPCError.CorruptedMessageCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.UnknownEndpointCodingKeys()
{
  return &type metadata for XPCError.UnknownEndpointCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.InternalErrorCodingKeys()
{
  return &type metadata for XPCError.InternalErrorCodingKeys;
}

unint64_t sub_24A187364()
{
  unint64_t result = qword_26976C380;
  if (!qword_26976C380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C380);
  }
  return result;
}

unint64_t sub_24A1873B4()
{
  unint64_t result = qword_26976C388;
  if (!qword_26976C388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C388);
  }
  return result;
}

unint64_t sub_24A187404()
{
  unint64_t result = qword_26976C390;
  if (!qword_26976C390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C390);
  }
  return result;
}

unint64_t sub_24A187454()
{
  unint64_t result = qword_26976C398;
  if (!qword_26976C398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C398);
  }
  return result;
}

unint64_t sub_24A1874A4()
{
  unint64_t result = qword_26976C3A0;
  if (!qword_26976C3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C3A0);
  }
  return result;
}

unint64_t sub_24A1874F4()
{
  unint64_t result = qword_26976C3A8;
  if (!qword_26976C3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C3A8);
  }
  return result;
}

unint64_t sub_24A187544()
{
  unint64_t result = qword_26976C3B0;
  if (!qword_26976C3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C3B0);
  }
  return result;
}

unint64_t sub_24A187594()
{
  unint64_t result = qword_26976C3B8;
  if (!qword_26976C3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C3B8);
  }
  return result;
}

unint64_t sub_24A1875E4()
{
  unint64_t result = qword_26976C3C0;
  if (!qword_26976C3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C3C0);
  }
  return result;
}

unint64_t sub_24A187634()
{
  unint64_t result = qword_26976C3C8;
  if (!qword_26976C3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C3C8);
  }
  return result;
}

unint64_t sub_24A187684()
{
  unint64_t result = qword_26976C3D0;
  if (!qword_26976C3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C3D0);
  }
  return result;
}

unint64_t sub_24A1876D4()
{
  unint64_t result = qword_26976C3D8;
  if (!qword_26976C3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C3D8);
  }
  return result;
}

unint64_t sub_24A187724()
{
  unint64_t result = qword_26976C3E0;
  if (!qword_26976C3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C3E0);
  }
  return result;
}

uint64_t sub_24A187774()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A187794()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void sub_24A1877B4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_24A1877D0()
{
  return v0;
}

uint64_t sub_24A1877E8()
{
  return v0;
}

id sub_24A1877F4(uint64_t a1)
{
  uint64_t v13 = (NSURL *)*MEMORY[0x263EF8340];
  URL._bridgeToObjectiveC()(v13);
  int v3 = v2;
  id v12 = 0;
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, &v12);

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    BOOL v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

void sub_24A18794C()
{
  v19[11] = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  id v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A187B88();
  id v5 = *(void (**)(void))(v2 + 16);
  sub_24A187C78();
  v5();
  id v6 = sub_24A1877F4((uint64_t)v4);
  if (!v0)
  {
    BOOL v7 = v6;
    int v8 = objc_msgSend(v6, sel_fileDescriptor);
    v19[0] = 65542;
    int v9 = ffsctl(v8, 0xC0084A44uLL, v19, 0);
    if (v9)
    {
      int v10 = v9;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;
      sub_24A123464(&qword_26976C3E8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_24A190860;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v14;
      *(void *)(inited + 72) = v1;
      sub_24A1442BC((uint64_t *)(inited + 48));
      sub_24A187C78();
      v5();
      uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
      id v16 = objc_allocWithZone(MEMORY[0x263F087E8]);
      sub_24A187BC8(v18, v12, v10, v15);
      swift_willThrow();
    }
    objc_msgSend(v7, sel_closeFile);
  }
}

unint64_t sub_24A187B88()
{
  unint64_t result = qword_26976C1B8;
  if (!qword_26976C1B8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26976C1B8);
  }
  return result;
}

id sub_24A187BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = (void *)MEMORY[0x24C5BD1A0]();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }
  id v9 = objc_msgSend(v4, sel_initWithDomain_code_userInfo_, v7, a3, v8.super.isa);

  return v9;
}

id PlayerItem.__allocating_init(avAsset:delegate:)()
{
  swift_getObjectType();
  uint64_t v0 = (void *)sub_24A188D34();
  return sub_24A188730(v0, v1);
}

uint64_t sub_24A187CD4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_24A14403C(v0, qword_26976C3F0);
  sub_24A143E24(v0, (uint64_t)qword_26976C3F0);
  type metadata accessor for PlayerItem();
  sub_24A123464(&qword_26976C458);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

id PlayerItem.init(avAsset:delegate:)()
{
  swift_getObjectType();
  uint64_t v0 = (void *)sub_24A188D34();
  return sub_24A18878C(v0, v1, v2);
}

uint64_t sub_24A187DB8(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24A123464(&qword_26976C0D0);
  MEMORY[0x270FA5388](v8 - 8);
  int v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  type metadata accessor for PlayerItem.UnsafeSendablePlayerItemBox();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  uint64_t v13 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v10, 1, 1, v13);
  type metadata accessor for MainActor();
  uint64_t v14 = v11;
  swift_retain();
  id v15 = a1;
  swift_unknownObjectRetain();
  uint64_t v16 = static MainActor.shared.getter();
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v18 = MEMORY[0x263F8F500];
  v17[2] = v16;
  void v17[3] = v18;
  v17[4] = v14;
  v17[5] = v12;
  v17[6] = v15;
  v17[7] = a2;
  sub_24A14242C((uint64_t)v10, (uint64_t)&unk_26976C418, (uint64_t)v17);
  swift_release();
  static DispatchTime.distantFuture.getter();
  MEMORY[0x24C5BD490](v7);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v20 = *(void **)(v12 + 16);
  if (v20)
  {
    id v21 = v20;
    swift_release();

    return (uint64_t)v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A187FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  type metadata accessor for MainActor();
  v7[6] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](sub_24A188074, v9, v8);
}

uint64_t sub_24A188074()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = (void *)v0[4];
  swift_release();
  type metadata accessor for PlayerItem();
  swift_getObjectType();
  id v4 = v2;
  swift_unknownObjectRetain();
  id v5 = sub_24A188730(v4, v1);
  uint64_t v6 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v5;

  OS_dispatch_semaphore.signal()();
  BOOL v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

id PlayerItem.__deallocating_deinit()
{
  if (qword_26976AAF8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_24A143E24(v1, (uint64_t)qword_26976C3F0);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    uint64_t v11 = v6;
    type metadata accessor for UUID();
    sub_24A188C04();
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_24A14308C(v7, v8, &v11);
    sub_24A188D48();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_24A120000, v3, v4, "deinit PlayerItem with id %s", v5, 0xCu);
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
  }
  uint64_t v9 = (objc_class *)type metadata accessor for PlayerItem();
  v12.receiver = v2;
  v12.super_class = v9;
  return objc_msgSendSuper2(&v12, sel_dealloc);
}

id sub_24A1883A4@<X0>(void *a1@<X8>)
{
  if (qword_26976AAF8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_24A143E24(v3, (uint64_t)qword_26976C3F0);
  os_log_type_t v4 = v1;
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v15 = v8;
    type metadata accessor for UUID();
    sub_24A188C04();
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_24A14308C(v9, v10, &v15);
    sub_24A188D48();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_24A120000, v5, v6, "copy PlayerItem with id %s", v7, 0xCu);
    swift_arrayDestroy();
    sub_24A144474();
    sub_24A144474();
  }
  else
  {
  }
  uint64_t v11 = type metadata accessor for PlayerItem();
  id v12 = objc_msgSend(v4, sel_asset);
  uint64_t v13 = *(void *)&v4[OBJC_IVAR____TtC11CloudAssets10PlayerItem_resourceLoaderDelegate];
  swift_getObjectType();
  swift_unknownObjectRetain();
  id result = sub_24A188730(v12, v13);
  a1[3] = v11;
  *a1 = result;
  return result;
}

id PlayerItem.__allocating_init(asset:automaticallyLoadedAssetKeys:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.Class isa = 0;
  }
  id v6 = objc_msgSend(objc_allocWithZone(v3), sel_initWithAsset_automaticallyLoadedAssetKeys_, a1, v5.super.isa);

  return v6;
}

void PlayerItem.init(asset:automaticallyLoadedAssetKeys:)()
{
}

uint64_t sub_24A1886F8()
{
  return MEMORY[0x270FA0228](v0, 24, 7);
}

id sub_24A188730(void *a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)type metadata accessor for PlayerItem());
  return sub_24A18878C(a1, a2, v4);
}

id sub_24A18878C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = a3;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v10[OBJC_IVAR____TtC11CloudAssets10PlayerItem_id], v9, v6);
  *(void *)&v10[OBJC_IVAR____TtC11CloudAssets10PlayerItem_resourceLoaderDelegate] = a2;
  swift_unknownObjectRetain();

  uint64_t v11 = (objc_class *)type metadata accessor for PlayerItem();
  v29.receiver = v10;
  v29.super_class = v11;
  id v12 = objc_msgSendSuper2(&v29, sel_initWithAsset_automaticallyLoadedAssetKeys_, a1, 0);
  uint64_t v13 = qword_26976AAF8;
  id v14 = v12;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_24A143E24(v15, (uint64_t)qword_26976C3F0);
  id v16 = v14;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    id v26 = a1;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v28 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    sub_24A188C04();
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v27 = sub_24A14308C(v22, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_24A120000, v17, v18, "initialize PlayerItem with id %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5BDE90](v21, -1, -1);
    MEMORY[0x24C5BDE90](v20, -1, -1);

    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
  }

  return v16;
}

uint64_t type metadata accessor for PlayerItem.UnsafeSendablePlayerItemBox()
{
  return self;
}

uint64_t sub_24A188A90()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_24A188AE8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *unint64_t v10 = v2;
  v10[1] = sub_24A131DB8;
  return sub_24A187FD8(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t type metadata accessor for PlayerItem()
{
  uint64_t result = qword_26976C440;
  if (!qword_26976C440) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_24A188C04()
{
  unint64_t result = qword_26976B770;
  if (!qword_26976B770)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976B770);
  }
  return result;
}

uint64_t sub_24A188C54()
{
  return type metadata accessor for PlayerItem();
}

uint64_t sub_24A188C5C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PlayerItem(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PlayerItem);
}

uint64_t dispatch thunk of PlayerItem.__allocating_init(avAsset:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static PlayerItem.makePlayerItem(with:delegate:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_24A188D34()
{
  return v0;
}

uint64_t sub_24A188D5C()
{
  sub_24A13A7E4();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_26976C498 + dword_26976C498);
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_24A18A1DC;
  return v3();
}

uint64_t sub_24A188E10()
{
  void v1[6] = v0;
  uint64_t v2 = sub_24A123464(&qword_26976B500);
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  uint64_t v3 = sub_24A123464(&qword_26976B508);
  v1[10] = v3;
  v1[11] = *(void *)(v3 - 8);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v1[14] = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_24A188F98;
  return AssetStreamHandle.inputStream(for:)();
}

uint64_t sub_24A188F98()
{
  sub_24A13A780();
  sub_24A154880();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A13A7F0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A189078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24A18A270();
  sub_24A155108();
  uint64_t v12 = v10[12];
  uint64_t v11 = v10[13];
  uint64_t v13 = v10[10];
  uint64_t v14 = v10[11];
  type metadata accessor for Asset(0);
  void v10[2] = Data.init(capacity:)();
  v10[3] = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
  sub_24A18121C(&qword_26976C468, &qword_26976B508);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  sub_24A18121C(&qword_26976C470, &qword_26976B500);
  id v16 = (void *)swift_task_alloc();
  v10[16] = v16;
  *id v16 = v10;
  v16[1] = sub_24A18924C;
  sub_24A1552B4();
  return MEMORY[0x270FA1E80](v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
}

uint64_t sub_24A1891D4()
{
  sub_24A13A7E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A18924C()
{
  sub_24A13A7E4();
  sub_24A13A780();
  uint64_t v3 = v2;
  sub_24A154880();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A13A7F0();
  *uint64_t v6 = v5;
  v3[17] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_24A12340C(v3[2], v3[3]);
    uint64_t v7 = sub_24A18A21C();
    v8(v7);
  }
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_24A189348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24A18A270();
  sub_24A155108();
  unint64_t v12 = v10[5];
  if (v12 >> 60 == 15)
  {
    sub_24A131348();
    v13();
    sub_24A1442A8(v10[4], v10[5]);
    uint64_t v14 = sub_24A18A200();
    v15(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A18A258();
    sub_24A1552B4();
    return v19(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
  }
  else
  {
    sub_24A18A234();
    sub_24A1442A8(v11, v12);
    sub_24A18121C(&qword_26976C470, &qword_26976B500);
    uint64_t v25 = (void *)swift_task_alloc();
    v10[16] = v25;
    *uint64_t v25 = v10;
    v25[1] = sub_24A18924C;
    sub_24A1552B4();
    return MEMORY[0x270FA1E80](v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
  }
}

uint64_t sub_24A1894B4()
{
  sub_24A13A7E4();
  sub_24A131348();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v1();
}

uint64_t StreamHandle.readAll(in:)()
{
  sub_24A155108();
  sub_24A18A288();
  v1[7] = v2;
  v1[8] = v0;
  void v1[6] = v3;
  uint64_t v4 = sub_24A123464(&qword_26976B500);
  v1[9] = v4;
  sub_24A13A7A0(v4);
  v1[10] = v5;
  v1[11] = swift_task_alloc();
  uint64_t v6 = sub_24A123464(&qword_26976B508);
  v1[12] = v6;
  sub_24A13A7A0(v6);
  v1[13] = v7;
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v1[16] = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_24A1896C8;
  uint64_t v9 = sub_24A18A1E0();
  return v10(v9);
}

uint64_t sub_24A1896C8()
{
  sub_24A13A780();
  sub_24A154880();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A13A7F0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 136) = v0;
  swift_task_dealloc();
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A1897A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24A18A270();
  sub_24A155108();
  uint64_t v12 = v10[14];
  uint64_t v11 = v10[15];
  uint64_t v13 = v10[12];
  uint64_t v14 = v10[13];
  (*(void (**)(void))(v10[7] + 8))(v10[6]);
  void v10[2] = Data.init(capacity:)();
  v10[3] = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
  sub_24A18121C(&qword_26976C468, &qword_26976B508);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  sub_24A18121C(&qword_26976C470, &qword_26976B500);
  uint64_t v16 = (void *)swift_task_alloc();
  v10[18] = v16;
  *uint64_t v16 = v10;
  v16[1] = sub_24A18990C;
  sub_24A1552B4();
  return MEMORY[0x270FA1E80](v17, v18, v19, v20, v21, v22, v23, v24, a9, a10);
}

uint64_t sub_24A18990C()
{
  sub_24A13A7E4();
  sub_24A13A780();
  uint64_t v3 = v2;
  sub_24A154880();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A13A7F0();
  *uint64_t v6 = v5;
  v3[19] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_24A12340C(v3[2], v3[3]);
    uint64_t v7 = sub_24A18A21C();
    v8(v7);
  }
  sub_24A1444BC();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_24A189A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24A18A270();
  sub_24A155108();
  unint64_t v12 = v10[5];
  if (v12 >> 60 == 15)
  {
    sub_24A131348();
    v13();
    sub_24A1442A8(v10[4], v10[5]);
    uint64_t v14 = sub_24A18A200();
    v15(v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A18A258();
    sub_24A1552B4();
    return v19(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
  }
  else
  {
    sub_24A18A234();
    sub_24A1442A8(v11, v12);
    sub_24A18121C(&qword_26976C470, &qword_26976B500);
    uint64_t v25 = (void *)swift_task_alloc();
    v10[18] = v25;
    *uint64_t v25 = v10;
    v25[1] = sub_24A18990C;
    sub_24A1552B4();
    return MEMORY[0x270FA1E80](v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
  }
}

uint64_t sub_24A189B74()
{
  sub_24A13A7E4();
  sub_24A131348();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v1();
}

uint64_t sub_24A189C00()
{
  sub_24A13A7E4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v0();
}

uint64_t sub_24A189C78()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_24A189D34;
  return StreamHandle.readAll(in:)();
}

uint64_t sub_24A189D34()
{
  sub_24A13A7E4();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_24A13A780();
  uint64_t v6 = *v1;
  sub_24A13A7F0();
  *uint64_t v7 = v6;
  uint64_t v8 = swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v0)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v3;
  }
  return v10(v8, v9);
}

uint64_t dispatch thunk of StreamHandle.size.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of StreamHandle.range.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of StreamHandle.inputStream(for:)()
{
  sub_24A155108();
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_24A189F40;
  uint64_t v2 = sub_24A18A1E0();
  return v3(v2);
}

uint64_t sub_24A189F40()
{
  sub_24A13A780();
  uint64_t v1 = *v0;
  sub_24A13A7F0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A13A7C4();
  return v3();
}

uint64_t dispatch thunk of StreamHandle.readAll(in:)()
{
  sub_24A155108();
  sub_24A18A288();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 32) + **(int **)(v5 + 32));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_24A18A100;
  return v8(v4, v3, v1, v0);
}

uint64_t sub_24A18A100()
{
  sub_24A13A7E4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_24A13A780();
  uint64_t v5 = *v0;
  sub_24A13A7F0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  return v7(v4, v2);
}

uint64_t sub_24A18A1E0()
{
  return v0;
}

uint64_t sub_24A18A200()
{
  return v0;
}

uint64_t sub_24A18A21C()
{
  return v0;
}

uint64_t sub_24A18A234()
{
  uint64_t v3 = *(void *)(v1 + 32);
  return MEMORY[0x270EF01E0](v3, v0);
}

uint64_t sub_24A18A258()
{
  return v0;
}

uint64_t sub_24A18A29C()
{
  qword_26976C4A0 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain();
}

uint64_t sub_24A18A2D8()
{
  sub_24A13A7B8();
  v1[4] = v2;
  v1[5] = v0;
  void v1[6] = sub_24A123464(&qword_26976AE98);
  v1[7] = sub_24A13A800();
  sub_24A123464(&qword_26976B098);
  v1[8] = sub_24A13A800();
  uint64_t v3 = sub_24A123464(&qword_26976AE70);
  v1[9] = v3;
  sub_24A13A7A0(v3);
  v1[10] = v4;
  v1[11] = sub_24A13A800();
  uint64_t v5 = sub_24A123464(&qword_26976B0A0);
  v1[12] = v5;
  sub_24A13A7A0(v5);
  v1[13] = v6;
  v1[14] = sub_24A13A800();
  return MEMORY[0x270FA2498](sub_24A18A3F4, v0, 0);
}

uint64_t sub_24A18A3F4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 112);
  *(void *)(v0 + 120) = v1;
  return sub_24A13A798((uint64_t)sub_24A18A414, v1);
}

uint64_t sub_24A18A414()
{
  sub_24A13A7B8();
  uint64_t v1 = v0[5];
  (*(void (**)(void, uint64_t, void))(v0[10] + 16))(v0[11], v0[15] + OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__results, v0[9]);
  return MEMORY[0x270FA2498](sub_24A18A49C, v1, 0);
}

uint64_t sub_24A18A49C()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[5];
  MEMORY[0x24C5BD3C0](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  unint64_t v5 = sub_24A18A8A4();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_24A18A594;
  uint64_t v7 = v0[12];
  uint64_t v8 = v0[8];
  return MEMORY[0x270FA20F8](v8, v4, v5, v7, v0 + 2);
}

uint64_t sub_24A18A594()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v3 = v2;
  sub_24A154880();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A154880();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 40);
  if (v0) {
    uint64_t v8 = sub_24A18A814;
  }
  else {
    uint64_t v8 = sub_24A18A678;
  }
  return MEMORY[0x270FA2498](v8, v7, 0);
}

uint64_t sub_24A18A678()
{
  uint64_t v1 = v0[8];
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v1, 1, v0[6]) == 1)
  {
    uint64_t v2 = sub_24A18AD9C();
    v3(v2);
    sub_24A126340();
    swift_allocError();
    swift_willThrow();
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A13A7C4();
    goto LABEL_7;
  }
  sub_24A13A238(v1, v0[7]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v0[3] = *(void *)v0[7];
    sub_24A123464(&qword_26976C190);
    swift_willThrowTypedImpl();
    uint64_t v4 = sub_24A18ADB4();
    v5(v4);
    goto LABEL_5;
  }
  sub_24A122438(v0[7], v0[4]);
  uint64_t v7 = sub_24A18ADB4();
  v8(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
LABEL_7:
  return v6();
}

uint64_t sub_24A18A814()
{
  uint64_t v0 = sub_24A18AD9C();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A13A7C4();
  return v2();
}

unint64_t sub_24A18A8A4()
{
  unint64_t result = qword_26976C4B0;
  if (!qword_26976C4B0)
  {
    type metadata accessor for AssetDownloadCoordinator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26976C4B0);
  }
  return result;
}

uint64_t type metadata accessor for AssetDownloadCoordinator()
{
  return self;
}

uint64_t sub_24A18A914(uint64_t *a1)
{
  uint64_t v3 = *a1;
  *(void *)(v2 + 24) = v1;
  *(void *)(v2 + 32) = v3;
  return sub_24A13A798((uint64_t)sub_24A18A934, v1);
}

uint64_t sub_24A18A934()
{
  sub_24A13A7B8();
  v0[2] = v0[4];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24A18A9D0;
  return sub_24A131478(v0 + 2);
}

uint64_t sub_24A18A9D0()
{
  sub_24A13A7B8();
  sub_24A13A780();
  uint64_t v3 = v2;
  sub_24A154880();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A154880();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 24);
    return MEMORY[0x270FA2498](sub_24A18AAD0, v7, 0);
  }
  else
  {
    sub_24A13A7C4();
    return v8();
  }
}

uint64_t sub_24A18AAD0()
{
  sub_24A13A7C4();
  return v0();
}

uint64_t AssetDownloadCoordinator.deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetDownloadCoordinator.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t AssetDownloadCoordinator.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_24A18AB58()
{
  return AssetDownloadCoordinator.unownedExecutor.getter();
}

uint64_t method lookup function for AssetDownloadCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetDownloadCoordinator);
}

uint64_t dispatch thunk of AssetDownloadCoordinator.result()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 104) + **(int **)(*(void *)v1 + 104));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_24A17E94C;
  return v6(a1);
}

uint64_t dispatch thunk of AssetDownloadCoordinator.receive(signal:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 112) + **(int **)(*(void *)v1 + 112));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_24A18AD98;
  return v6(a1);
}

uint64_t sub_24A18AD9C()
{
  return *(void *)(v0 + 112);
}

uint64_t sub_24A18ADB4()
{
  return v0;
}

uint64_t static URLRequest._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEDC48]();
}

uint64_t URLRequest.url.getter()
{
  return MEMORY[0x270EEDC68]();
}

uint64_t type metadata accessor for URLRequest()
{
  return MEMORY[0x270EEDCB8]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x270EEDEE8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x270EEDF30]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x270EEDF38]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x270EEE638]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x270EEE658]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x270EEE670]();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return MEMORY[0x270EEE920]();
}

uint64_t LocalizedError.failureReason.getter()
{
  return MEMORY[0x270EEE930]();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return MEMORY[0x270EEE940]();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return MEMORY[0x270EEE950]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x270EEF830]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x270EEFC10]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x270EEFC58]();
}

uint64_t URL.lastPathComponent.getter()
{
  return MEMORY[0x270EEFCE0]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.deletingLastPathComponent()()
{
  return MEMORY[0x270EEFDC0]();
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x270EEFDF0]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEFE20]();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = MEMORY[0x270EEFE68](percentEncoded);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x270EEFF00]();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return MEMORY[0x270EEFF18]();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return MEMORY[0x270EEFF40]();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return MEMORY[0x270EEFF58]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t Data.InlineData.init(_:)()
{
  return MEMORY[0x270EEFF98]();
}

uint64_t Data.LargeSlice.init(_:)()
{
  return MEMORY[0x270EEFFB8]();
}

uint64_t Data.InlineSlice.init(_:)()
{
  return MEMORY[0x270EF0008]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

uint64_t static Data.== infix(_:_:)()
{
  return MEMORY[0x270EF0158]();
}

uint64_t Data.hash(into:)()
{
  return MEMORY[0x270EF0190]();
}

uint64_t Data.subdata(in:)()
{
  return MEMORY[0x270EF0218]();
}

uint64_t Data.init(capacity:)()
{
  return MEMORY[0x270EF0258]();
}

uint64_t static Date.distantFuture.getter()
{
  return MEMORY[0x270EF07A0]();
}

uint64_t static Date.== infix(_:_:)()
{
  return MEMORY[0x270EF0B88]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x270EF0CB0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t Google_Protobuf_Timestamp.date.getter()
{
  return MEMORY[0x270F44678]();
}

uint64_t Google_Protobuf_Timestamp.init(date:)()
{
  return MEMORY[0x270F44680]();
}

uint64_t Google_Protobuf_Timestamp.init()()
{
  return MEMORY[0x270F44698]();
}

uint64_t type metadata accessor for Google_Protobuf_Timestamp()
{
  return MEMORY[0x270F446A0]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x270F44A18]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x270F44A20]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x270F44A28]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x270F44AA8]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x270F44AB0]();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return MEMORY[0x270F44AD8]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x270F44B10]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x270F44B50]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x270F44B80]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return MEMORY[0x270F44BB0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x270F44BF8]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x270F44C20]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x270F44C38]();
}

uint64_t Message.isInitialized.getter()
{
  return MEMORY[0x270F44C98]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x270F44CA8]();
}

uint64_t Message.init<A>(serializedBytes:extensions:partial:options:)()
{
  return MEMORY[0x270F44CB8]();
}

uint64_t Message.hash(into:)()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44D68]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x270F44DA0]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x270F44DD8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44DF0]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44E00]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x270F44E10]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F44E18]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x270F44E28]();
}

uint64_t UTType.identifier.getter()
{
  return MEMORY[0x270FA16A8]();
}

uint64_t UTType.init(filenameExtension:conformingTo:)()
{
  return MEMORY[0x270FA1750]();
}

uint64_t static UTType.data.getter()
{
  return MEMORY[0x270FA1800]();
}

uint64_t type metadata accessor for UTType()
{
  return MEMORY[0x270FA1938]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t XPCSession.__allocating_init<A>(machService:targetQueue:options:incomingMessageHandler:cancellationHandler:)()
{
  return MEMORY[0x270FA1A90]();
}

uint64_t static XPCSession.InitializationOptions.none.getter()
{
  return MEMORY[0x270FA1AC0]();
}

uint64_t type metadata accessor for XPCSession.InitializationOptions()
{
  return MEMORY[0x270FA1AF0]();
}

uint64_t dispatch thunk of XPCSession.send<A, B>(_:replyHandler:)()
{
  return MEMORY[0x270FA1B30]();
}

uint64_t dispatch thunk of XPCSession.send<A>(_:)()
{
  return MEMORY[0x270FA1B40]();
}

uint64_t dispatch thunk of XPCSession.cancel(reason:)()
{
  return MEMORY[0x270FA1B48]();
}

uint64_t type metadata accessor for XPCSession()
{
  return MEMORY[0x270FA1B90]();
}

uint64_t XPCRichError.canRetry.getter()
{
  return MEMORY[0x270FA1C78]();
}

uint64_t type metadata accessor for XPCRichError()
{
  return MEMORY[0x270FA1C88]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t static DispatchTime.distantFuture.getter()
{
  return MEMORY[0x270FA0A80]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x270FA0B00]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1840]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x270F9D320]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x270F9D478]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x270F9D620]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x270F9D788]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x270F9D8E0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x270FA1E28]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x270FA1EA0]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x270FA1EA8]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.currentPriority.getter()
{
  return MEMORY[0x270FA1FE0]();
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return MEMORY[0x270FA2080]();
}

uint64_t static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)()
{
  return MEMORY[0x270FA20B0]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.YieldResult()
{
  return MEMORY[0x270FA20B8]();
}

uint64_t AsyncThrowingStream.Continuation.onTermination.setter()
{
  return MEMORY[0x270FA20C0]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy()
{
  return MEMORY[0x270FA20C8]();
}

uint64_t AsyncThrowingStream.Continuation.yield(_:)()
{
  return MEMORY[0x270FA20D8]();
}

uint64_t AsyncThrowingStream.Continuation.finish(throwing:)()
{
  return MEMORY[0x270FA20E0]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation()
{
  return MEMORY[0x270FA20E8]();
}

uint64_t AsyncThrowingStream.makeAsyncIterator()()
{
  return MEMORY[0x270FA20F0]();
}

uint64_t type metadata accessor for AsyncThrowingStream()
{
  return MEMORY[0x270FA2118]();
}

uint64_t AsyncThrowingStream.init<>(_:bufferingPolicy:_:)()
{
  return MEMORY[0x270FA2120]();
}

uint64_t Collection<>.popFirst()()
{
  return MEMORY[0x270F9E0E8]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x270F9E178]();
}

uint64_t NSFileHandle.read(upToCount:)()
{
  return MEMORY[0x270EF1E30]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return MEMORY[0x270FA0F00]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x270FA0F28]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270FA1170](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t type metadata accessor for ArraySlice()
{
  return MEMORY[0x270F9E708]();
}

uint64_t ArraySlice.init<A>(_:)()
{
  return MEMORY[0x270F9E718]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x270F9EF08](isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x270F9EF20]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F250]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x270F9F258]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F270]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2E8]();
}

{
  return MEMORY[0x270F9F338]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x270F9F360]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x270F9F378]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F390]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F3B0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F428]();
}

{
  return MEMORY[0x270F9F478]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x270F9F4A8]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x270F9FCF8]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t _Pointer.debugDescription.getter()
{
  return MEMORY[0x270FA0080]();
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2AD0]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x270ED8028](dso, description, activity, *(void *)&flags);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

void bzero(void *a1, size_t a2)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x270ED9940](*(void *)&a1, a2, a3, *(void *)&a4);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x270EDB2B8]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x270EDB2D8]();
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x270FA2420]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x270FA2428]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x270FA0678]();
}